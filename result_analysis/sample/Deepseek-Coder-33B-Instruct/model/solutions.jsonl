{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Function to perform Ridge Regression.\n\n    :param data: ndarray where the last column is the target and all preceding columns are the features\n    :param alpha: optional, regularization strength, default to 0.0\n    :return: list of weights, -1 if the matrix is not invertible\n    \"\"\"\n    (X, y) = (data[:, :-1], data[:, -1])\n    X = np.c_[np.ones(X.shape[0]), X]\n    try:\n        weights = np.linalg.inv(X.T.dot(X) + alpha * np.eye(X.shape[1])).dot(X.T).dot(y)\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(coef, 4) for coef in weights]"}
{"task_id": 0, "completion_id": 1, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Ridge Regression Closed-Form Solver.\n\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Args:\n    data: An ndarray where the last column is the target y and all preceding columns are the features X.\n    alpha: The regularisation strength, must be >= 0. The default value is 0.0.\n\n    Returns:\n    The weight vector rounded to 4 decimal places as a Python list, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    bias = np.ones((X.shape[0], 1))\n    X = np.concatenate((bias, X), axis=1)\n    try:\n        weights = np.dot(np.linalg.inv(np.dot(X.T, X) + alpha * np.eye(X.shape[1])), np.dot(X.T, y))\n    except np.linalg.LinAlgError:\n        return -1\n    return np.round(weights, 4).tolist()"}
{"task_id": 0, "completion_id": 2, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Your docstring here.\"\"\"\n    (X, y) = (data[:, :-1], data[:, -1])\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    XTX = np.dot(X.T, X)\n    I = np.eye(XTX.shape[0])\n    XTX_alpha = XTX + alpha * I\n    try:\n        XTX_alpha_inv = np.linalg.inv(XTX_alpha)\n        XTy = np.dot(X.T, y)\n        w = np.dot(XTX_alpha_inv, XTy)\n        return np.round(w, 4).tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 0, "completion_id": 3, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implementation of ridge regression using its closed-form solution.\n\n    Parameters:\n        data : np.ndarray \n            NumPy ndarray where last column is the target and all preceding columns are the features.\n        alpha : float \n            Regularisation strength. Default is 0.0.\n\n    Returns:\n        weights : list[float]\n            If the matrix (X^T*X + alpha*I) is invertible, it returns the weight vector rounded to\n            4 decimal places as a Python list.\n            If the matrix is not invertible, it returns -1.\n            \n    \"\"\"\n    (n, d) = data.shape\n    data = np.append(data, np.ones((n, 1)), axis=1)\n    X = data[:, :-1]\n    y = data[:, -1]\n    try:\n        weights = np.linalg.inv(X.T @ X + alpha * np.eye(d)) @ X.T @ y\n        weights = np.round(weights, 4)\n        return weights.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 0, "completion_id": 4, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    Given an ndarray where the last column is the target y and all preceding columns are the features X,\n    add a bias (intercept) term, then compute the weight vector.\n\n    Parameters:\n    data (np.ndarray): Input array where the last column is the target and the rest are features.\n    alpha (float): Regularisation strength. Defaults to 0.0.\n\n    Returns:\n    list[float]: If the matrix (X^T X + alpha I) is not invertible (numerical determinant equal to 0), return -1 otherwise,\n    return the weight vector rounded to 4 decimal places as a Python list.\n    \"\"\"\n    X = np.c_[np.ones(data.shape[0]), data[:, :-1]]\n    y = data[:, -1]\n    try:\n        w = np.dot(np.linalg.inv(np.dot(X.T, X) + alpha * np.eye(X.shape[1])), np.dot(X.T, y))\n    except np.linalg.LinAlgError:\n        return -1\n    return np.round(w, 4).tolist()"}
{"task_id": 0, "completion_id": 5, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n = X.shape[1]\n    try:\n        w = np.linalg.inv(X.T @ X + alpha * np.eye(n)) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return np.round(w, 4).tolist()"}
{"task_id": 0, "completion_id": 6, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Args:\n    - data: ndarray - input data where the last column is the target and the rest are the features\n    - alpha: float - regularization strength (default: 0.0)\n\n    Returns:\n    - weights: list - weight vector computed using the closed-form solution, rounded to 4 decimal places.\n                 In case the matrix is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    try:\n        weights = np.linalg.inv(X.T @ X + alpha * np.eye(X.shape[1])) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(weight, 4) for weight in weights.tolist()]"}
{"task_id": 0, "completion_id": 7, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using closed-form solution.\n    :param data: ndarray where last column is the target and all preceding columns are the features.\n    :param alpha: Regularisation strength. Must be equal or greater than 0. Defaults to 0.0.\n    :return: Weight vector or -1 if matrix is not invertible.\n    \"\"\"\n    data = np.insert(data, 0, 1, axis=1)\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_T_X = np.dot(X.transpose(), X)\n    I = np.identity(X.shape[1])\n    mat = X_T_X + alpha * I\n    if np.linalg.det(mat) == 0:\n        return -1\n    w = np.dot(np.linalg.inv(mat), np.dot(X.transpose(), y))\n    return list(np.round(w, 4))"}
{"task_id": 0, "completion_id": 8, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    data = np.insert(data, 0, 1, axis=1)\n    X = data[:, :-1]\n    Y = data[:, -1]\n    XTX = np.dot(X.T, X)\n    I = np.identity(XTX.shape[0])\n    alphaI = alpha * I\n    XTX_alphaI = XTX + alphaI\n    try:\n        XTX_alphaI_inv = np.linalg.inv(XTX_alphaI)\n    except np.linalg.LinAlgError:\n        return -1\n    XTY = np.dot(X.T, Y)\n    W = np.dot(XTX_alphaI_inv, XTY)\n    return list(np.round(W, 4))"}
{"task_id": 0, "completion_id": 9, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Solves Ridge Regression using the closed-form solution.\n\n    Arguments:\n    data: numpy ndarray representing the dataset.\n    alpha: regularisation strength. Must be non-negative.\n\n    Returns:\n    List of coefficients for the ridge regression solution, rounded to 4 decimal places.\n    If the matrix X^T*X + alpha*I is not invertible, returns -1.\n    \"\"\"\n    y = data[:, -1]\n    X = data[:, :-1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    Gram = np.dot(X.T, X)\n    I = np.identity(X.shape[1])\n    try:\n        inv = np.linalg.inv(Gram + alpha * I)\n    except np.linalg.LinAlgError:\n        return -1\n    w = np.dot(np.dot(inv, X.T), y)\n    return [round(x, 4) for x in w]\ndata = np.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])\nalpha = 0.5"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    Gram = X_train @ X_train.T\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * Gram[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha[:, None] * y_train[None, :] * X_train, axis=0)\n    return (list(np.round(w, 4)), round(b, 4))"}
{"task_id": 1, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    alpha = np.zeros(X_train.shape[0])\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(X_train.shape[0]):\n            activation = np.dot(alpha * y_train, K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), np.round(b, 4))\nX_train = np.random.normal(size=(10, 3))\ny_train = np.array([1, -1] * 5)"}
{"task_id": 1, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0\n    updates = 0\n    while True:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i, :], y_train * alpha) + b\n            if y_train[i] * activation <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                if updates >= n_iter:\n                    break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w, b)\nX_train = np.random.rand(10, 2)\ny_train = np.array([1, 1, 1, 1, 1, -1, -1, -1, -1, -1])"}
{"task_id": 1, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alpha)\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return (list(np.around(w, decimals=4)), round(b, 4))"}
{"task_id": 1, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha.reshape(-1, 1) * y_train.reshape(-1, 1) * X_train, axis=0)\n    return (w.round(decimals=4).tolist(), round(b, 4))"}
{"task_id": 1, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alphas = np.zeros(n_samples)\n    b = 0.0\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alphas)\n            if y_train[i] * (activation + b) <= 0:\n                alphas[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alphas * y_train, X_train)\n    return (np.round(w, 4).tolist(), np.round(b, 4))"}
{"task_id": 1, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X_train)\n    y = np.array(y_train)\n    alpha = np.zeros(X.shape[0])\n    b = 0.0\n    K = np.dot(X, X.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(X.shape[0]):\n            activation = np.dot(alpha * y, K[i])\n            margin = y[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y, X)\n    return (np.round(list(w), 4), np.round(b, 4))"}
{"task_id": 1, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    (n_samples, n_features) = X_train.shape\n    a = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        n_updates = 0\n        for i in range(n_samples):\n            activation = np.dot(a * y_train, K[i, :])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                a[i] += eta\n                b += eta * y_train[i]\n                n_updates += 1\n        if n_updates == 0:\n            break\n    w = np.dot(a * y_train, X_train)\n    return ([round(x, 4) for x in w.tolist()], round(b, 4))"}
{"task_id": 1, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    y_train = y_train[:, np.newaxis]\n    (n_samples, n_features) = X_train.shape\n    X_train = X_train.astype(float)\n    b = 0\n    alpha = np.zeros(n_samples, dtype=float)\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        z = np.zeros((n_samples, 1), dtype=float)\n        update_count = 0\n        for i in range(n_samples):\n            prediction = K[i, :].dot(alpha * y_train).sum() + b\n            if prediction * y_train[i] <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update_count += 1\n        if update_count == 0:\n            break\n    w = np.matmul(alpha * y_train, X_train).tolist()\n    w = [round(value, 4) for value in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 9, "solution": "import numpy as np\nfrom sklearn import datasets\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (num_samples, num_features) = X_train.shape\n    Gram = np.dot(X_train, X_train.T)\n    alpha = np.zeros(num_samples)\n    b = 0.0\n    num_updates = 0\n    i = 0\n    while num_updates < n_iter:\n        activation = np.dot(Gram[i], alpha * y_train) + b\n        margin = y_train[i] * activation\n        if margin <= 0:\n            alpha[i] = alpha[i] + eta\n            b = b + eta * y_train[i]\n            i = 0\n            num_updates += 1\n        else:\n            i = (i + 1) % num_samples\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), np.round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef identity_link():\n\n    def link(mu):\n        return mu\n\n    def inv_link(eta):\n        return eta\n\n    def derivative(mu):\n        return np.ones_like(mu)\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef log_link():\n\n    def link(mu):\n        return np.log(mu)\n\n    def inv_link(eta):\n        return np.exp(eta)\n\n    def derivative(mu):\n        return 1 / mu\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef logit_link():\n\n    def link(mu):\n        return np.log(mu / (1 - mu))\n\n    def inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef glm_links():\n    return {'identity': identity_link(), 'log': log_link(), 'logit': logit_link()}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 1, "solution": "import numpy as np\ndef identity(mu):\n    return mu\ndef inv_identity(eta):\n    return eta\ndef derivative_identity(mu):\n    return np.ones_like(mu)\ndef log_link(mu):\n    return np.log(mu)\ndef inv_log(eta):\n    return np.exp(eta)\ndef derivative_log(mu):\n    return 1 / mu\ndef logit(mu):\n    return np.log(mu / (1 - mu))\ndef inv_logit(eta):\n    return 1 / (1 + np.exp(-eta))\ndef derivative_logit(mu):\n    return 1 / (mu * (1 - mu))\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\"\"\"\n    link_functions = {'identity': {'link': np.vectorize(identity), 'inv_link': np.vectorize(inv_identity), 'derivative': np.vectorize(derivative_identity)}, 'log': {'link': np.vectorize(log_link), 'inv_link': np.vectorize(inv_log), 'derivative': np.vectorize(derivative_log)}, 'logit': {'link': np.vectorize(logit), 'inv_link': np.vectorize(inv_logit), 'derivative': np.vectorize(derivative_logit)}}\n    return link_functions"}
{"task_id": 2, "completion_id": 2, "solution": "import numpy as np\ndef glm_links():\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return np.exp(eta) / (1 + np.exp(eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    links = {'identity': {'link': np.vectorize(identity_link), 'inv_link': np.vectorize(identity_inv_link), 'derivative': np.vectorize(identity_derivative)}, 'log': {'link': np.vectorize(log_link), 'inv_link': np.vectorize(log_inv_link), 'derivative': np.vectorize(log_derivative)}, 'logit': {'link': np.vectorize(logit_link), 'inv_link': np.vectorize(logit_inv_link), 'derivative': np.vectorize(logit_derivative)}}\n    return links\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 3, "solution": "import numpy as np\ndef identity_link():\n    return lambda mu: mu\ndef identity_inv_link():\n    return lambda eta: eta\ndef identity_link_derivative():\n    return lambda mu: np.ones(mu.shape)\ndef log_link():\n    return lambda mu: np.log(mu)\ndef log_inv_link():\n    return lambda eta: np.exp(eta)\ndef log_link_derivative():\n    return lambda mu: 1 / mu\ndef logit_link():\n    return lambda mu: np.log(mu / (1 - mu))\ndef logit_inv_link():\n    return lambda eta: 1 / (1 + np.exp(-eta))\ndef logit_link_derivative():\n    return lambda mu: 1 / (mu * (1 - mu))\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': identity_link(), 'inv_link': identity_inv_link(), 'link_derivative': identity_link_derivative()}, 'log': {'link': log_link(), 'inv_link': log_inv_link(), 'link_derivative': log_link_derivative()}, 'logit': {'link': logit_link(), 'inv_link': logit_inv_link(), 'link_derivative': logit_link_derivative()}}"}
{"task_id": 2, "completion_id": 4, "solution": "import numpy as np\ndef glm_links():\n    links = {'identity': {'link': np.vectorize(lambda mu: mu), 'inv_link': np.vectorize(lambda eta: eta), 'derivative': np.vectorize(lambda mu: 1)}, 'log': {'link': np.vectorize(lambda mu: np.log(mu)), 'inv_link': np.vectorize(lambda eta: np.exp(eta)), 'derivative': np.vectorize(lambda mu: 1 / mu)}, 'logit': {'link': np.vectorize(lambda mu: np.log(mu / (1 - mu))), 'inv_link': np.vectorize(lambda eta: 1 / (1 + np.exp(-eta))), 'derivative': np.vectorize(lambda mu: 1 / (mu * (1 - mu)))}}\n    return links\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 5, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_d_link(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_d_link(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_d_link(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': np.vectorize(identity_link), 'inv_link': np.vectorize(identity_inv_link), 'd_link': np.vectorize(identity_d_link)}, 'log': {'link': np.vectorize(log_link), 'inv_link': np.vectorize(log_inv_link), 'd_link': np.vectorize(log_d_link)}, 'logit': {'link': np.vectorize(logit_link), 'inv_link': np.vectorize(logit_inv_link), 'd_link': np.vectorize(logit_d_link)}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 6, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return np.exp(eta) / (1 + np.exp(eta))\n\n    def logit_deriv(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'deriv': identity_deriv}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'deriv': log_deriv}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'deriv': logit_deriv}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 7, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inverse(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inverse(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inverse(eta):\n        return np.exp(eta) / (1 + np.exp(eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inverse, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inverse, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inverse, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 8, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1.0 - mu))\n    result = {'identity': {'link': np.vectorize(identity_link), 'inv_link': np.vectorize(identity_inv_link), 'derivative': identity_derivative}, 'log': {'link': np.vectorize(log_link), 'inv_link': np.vectorize(log_inv_link), 'derivative': log_derivative}, 'logit': {'link': np.vectorize(logit_link), 'inv_link': np.vectorize(logit_inv_link), 'derivative': logit_derivative}}\n    return result\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 9, "solution": "import numpy as np\ndef identity_link():\n\n    def g(mu):\n        return mu\n\n    def g_inv(eta):\n        return eta\n\n    def g_prime(mu):\n        return np.ones_like(mu)\n    return {'link': g, 'inv_link': g_inv, 'derivative': g_prime}\ndef log_link():\n\n    def g(mu):\n        return np.log(mu)\n\n    def g_inv(eta):\n        return np.exp(eta)\n\n    def g_prime(mu):\n        return 1 / mu\n    return {'link': g, 'inv_link': g_inv, 'derivative': g_prime}\ndef logit_link():\n\n    def g(mu):\n        return np.log(mu / (1 - mu))\n\n    def g_inv(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def g_prime(mu):\n        return 1 / (mu * (1 - mu))\n    return {'link': g, 'inv_link': g_inv, 'derivative': g_prime}\ndef glm_links():\n    return {'identity': identity_link(), 'log': log_link(), 'logit': logit_link()}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    (n, _) = data.shape\n    length = [0] * n\n    visited = np.zeros(n, dtype=bool)\n    indices = np.array(list(range(n)), dtype=int)\n    recursive_isolation_tree_path_length(data, length, visited, indices, 0)\n    return length\ndef recursive_isolation_tree_path_length(data, length, visited, indices, depth):\n    if len(indices) < 3:\n        length[indices] = [depth] * len(indices)\n        return\n    feature_index = np.random.choice(data.shape[1])\n    (down, up) = (np.min(data[indices, feature_index]), np.max(data[indices, feature_index]))\n    v = np.random.uniform(down, up)\n    left_indices = indices[data[indices, feature_index] <= v]\n    right_indices = indices[data[indices, feature_index] > v]\n    visited[indices] = True\n    recursive_isolation_tree_path_length(data, length, visited, left_indices, depth + 1)\n    recursive_isolation_tree_path_length(data, length, visited, right_indices, depth + 1)\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 1, "solution": "import numpy as np\nimport random\nclass TreeNode:\n\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\nclass IsolationTree:\n\n    def __init__(self, data):\n        self.root = TreeNode(list(range(len(data))))\n        self.build_tree(self.root, data)\n\n    def build_tree(self, node, data):\n        if len(node.indices) < 3:\n            return\n        feature = random.choice(list(range(data.shape[1])))\n        down = data[node.indices, feature].min()\n        up = data[node.indices, feature].max()\n        v = random.uniform(down, up)\n        left_indices = [i for i in node.indices if data[i, feature] <= v]\n        right_indices = [i for i in node.indices if data[i, feature] > v]\n        node.left = TreeNode(left_indices)\n        node.right = TreeNode(right_indices)\n        self.build_tree(node.left, data)\n        self.build_tree(node.right, data)\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    random.seed(0)\n    tree = IsolationTree(data)\n    depths = [0] * len(data)\n    get_depth(tree.root, depths, 0)\n    return depths"}
{"task_id": 3, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\nclass Node:\n\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.split_feature = None\n        self.split_value = None\ndef build_tree(data, indices, depth):\n    if len(indices) < 3:\n        return (Node(indices), depth)\n    feature = np.random.choice(data.shape[1])\n    values = data[indices, feature]\n    (min_val, max_val) = (np.min(values), np.max(values))\n    split_val = np.random.uniform(min_val, max_val)\n    left_indices = indices[values <= split_val]\n    right_indices = indices[values > split_val]\n    node = Node(indices)\n    node.split_feature = feature\n    node.split_value = split_val\n    (node.left, depth) = build_tree(data, left_indices, depth + 1)\n    (node.right, depth) = build_tree(data, right_indices, depth + 1)\n    return (node, depth)\ndef get_path_lengths(node):\n    if node.left is None and node.right is None:\n        return [(i, 0) for i in node.indices]\n    else:\n        (left_lengths, right_lengths) = ([], [])\n        if node.left is not None:\n            left_lengths = get_path_lengths(node.left)\n        if node.right is not None:\n            right_lengths = get_path_lengths(node.right)\n        return left_lengths + right_lengths\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    indices = np.arange(data.shape[0])\n    (tree, depth) = build_tree(data, indices, 0)\n    path_lengths = get_path_lengths(tree)\n    path_lengths.sort()\n    return [x[1] for x in path_lengths]"}
{"task_id": 3, "completion_id": 3, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray):\n    np.random.seed(0)\n    tree = IsolationTree(max_depth=np.ceil(np.log2(data.shape[0]))).fit(data)\n    depths = np.zeros(data.shape[0])\n\n    def traverse(node, depth):\n        if node is None:\n            return\n        if node.left is None and node.right is None:\n            depths[node.indices] = depth\n        else:\n            traverse(node.left, depth + 1)\n            traverse(node.right, depth + 1)\n    traverse(tree.root, 0)\n    return list(depths.astype(int))"}
{"task_id": 3, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    (n_samples, _) = data.shape\n    depth = [0] * n_samples\n\n    def partition(indices, feature, split):\n        (left, right) = ([], [])\n        for index in indices:\n            if data[index, feature] <= split:\n                left.append(index)\n            else:\n                right.append(index)\n        return (left, right)\n\n    def build_tree(indices, feature_indices, depth=0):\n        if len(indices) < 3 or len(feature_indices) == 0:\n            for index in indices:\n                depth[index] = depth\n            return\n        feature = np.random.choice(feature_indices)\n        (min_value, max_value) = (np.min(data[indices, feature]), np.max(data[indices, feature]))\n        value = np.random.uniform(min_value, max_value)\n        (left, right) = partition(indices, feature, value)\n        build_tree(left, [f for f in feature_indices if f != feature], depth + 1)\n        build_tree(right, [f for f in feature_indices if f != feature], depth + 1)\n    build_tree(list(range(n_samples)), list(range(data.shape[1])))\n    return depth\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 5, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n        self.depth = None\nclass IsolationTree:\n\n    def __init__(self, data):\n        self.data = data\n        self.root = Node(list(range(data.shape[0])))\n        self._build_tree(self.root)\n\n    def _build_tree(self, node):\n        if len(node.indices) < 3:\n            node.is_leaf = True\n            return\n        f = np.random.choice(self.data.shape[1])\n        (down, up) = (np.min(self.data[node.indices, f]), np.max(self.data[node.indices, f]))\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in node.indices if self.data[i, f] <= v]\n        right_indices = [i for i in node.indices if self.data[i, f] > v]\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n        self._build_tree(node.left)\n        self._build_tree(node.right)\n\n    def calculate_depths(self):\n        depths = np.zeros(self.data.shape[0])\n\n        def _calculate_depths(node, depth):\n            if node.is_leaf:\n                for i in node.indices:\n                    depths[i] = depth\n            else:\n                _calculate_depths(node.left, depth + 1)\n                _calculate_depths(node.right, depth + 1)\n        _calculate_depths(self.root, 0)\n        return depths.tolist()\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    tree = IsolationTree(data)\n    return tree.calculate_depths()"}
{"task_id": 3, "completion_id": 6, "solution": "import numpy as np\ndef isolation_tree_path_length(data):\n    np.random.seed(0)\n\n    def recursive_isolation_tree(data, indices):\n        if len(indices) < 3:\n            return (indices, [])\n        f = np.random.randint(data.shape[1])\n        (down, up) = (np.min(data[indices, f]), np.max(data[indices, f]))\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = list(set(indices) - set(left_indices))\n        (left_leaf_indices, left_leaves_paths) = recursive_isolation_tree(data, left_indices)\n        (right_leaf_indices, right_leaves_paths) = recursive_isolation_tree(data, right_indices)\n        leaf_indices = left_leaf_indices + right_leaf_indices\n        leaves_paths = left_leaves_paths + right_leaves_paths + [(v, f)]\n        return (leaf_indices, leaves_paths)\n    (_, leaves_paths) = recursive_isolation_tree(data, list(range(len(data))))\n    path_lengths = []\n    for i in range(len(data)):\n        path_length = 0\n        for (v, f) in leaves_paths:\n            if data[i, f] <= v:\n                path_length += 1\n                break\n            path_length += 1\n        path_lengths.append(path_length)\n    return path_lengths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\nclass Node:\n\n    def __init__(self, indices, depth, feature_index=None, split_value=None):\n        self.indices = indices\n        self.depth = depth\n        self.feature_index = feature_index\n        self.split_value = split_value\n        self.left = None\n        self.right = None\nclass IsolationTree:\n\n    def __init__(self, max_depth=100):\n        self.root = None\n        self.max_depth = max_depth\n\n    def fit(self, X):\n        self.root = Node(range(X.shape[0]), 0)\n        self._split_node(self.root, X, 1)\n\n    def _split_node(self, node, X, current_depth):\n        if len(node.indices) < 3 or current_depth >= self.max_depth:\n            return\n        feature_index = np.random.choice(X.shape[1])\n        column = X[node.indices, feature_index]\n        (min_, max_) = (column.min(), column.max())\n        if min_ < max_:\n            split_value = np.random.uniform(min_, max_)\n            left_indices = node.indices[column <= split_value]\n            right_indices = node.indices[column > split_value]\n            node.feature_index = feature_index\n            node.split_value = split_value\n            node.left = Node(left_indices, current_depth)\n            node.right = Node(right_indices, current_depth)\n            self._split_node(node.left, X, current_depth + 1)\n            self._split_node(node.right, X, current_depth + 1)\n\n    def get_leaf_path_lengths(self, X):\n        paths = np.zeros(X.shape[0])\n\n        def traverse(node):\n            if node.left or node.right:\n                if node.split_value < X[node.indices, node.feature_index].mean():\n                    paths[node.indices] = paths[node.indices] + 1\n                    traverse(node.left)\n                else:\n                    paths[node.indices] = paths[node.indices] + 1\n                    traverse(node.right)\n        traverse(self.root)\n        return paths\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    isolation_forest = IsolationTree()\n    isolation_forest.fit(data)\n    paths = isolation_forest.get_leaf_path_lengths(data)\n    return paths.tolist()\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Tuple\nclass Node:\n\n    def __init__(self, indices: List[int], depth: int):\n        self.indices = indices\n        self.depth = depth\n        self.feature_index = None\n        self.split_value = None\n        self.left = None\n        self.right = None\n\n    def is_leaf(self):\n        return len(self.indices) < 3\ndef isolation_tree_path_length(data: np.ndarray) -> List[int]:\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    root = Node(indices=list(range(n_samples)), depth=0)\n    nodes = [root]\n    while nodes:\n        node = nodes.pop(0)\n        if node.is_leaf():\n            continue\n        node.feature_index = np.random.choice(n_features)\n        column = data[node.indices, node.feature_index]\n        (down, up) = (np.min(column), np.max(column))\n        node.split_value = np.random.uniform(down, up)\n        left_indices = [i for i in node.indices if data[i, node.feature_index] <= node.split_value]\n        right_indices = [i for i in node.indices if data[i, node.feature_index] > node.split_value]\n        node.left = Node(indices=left_indices, depth=node.depth + 1)\n        node.right = Node(indices=right_indices, depth=node.depth + 1)\n        nodes.extend([node.left, node.right])\n    depths = np.zeros(n_samples, dtype=int)\n    nodes = [root]\n    while nodes:\n        node = nodes.pop(0)\n        if node.is_leaf():\n            for index in node.indices:\n                depths[index] = node.depth\n        else:\n            nodes.extend([node.left, node.right])\n    return depths.tolist()"}
{"task_id": 3, "completion_id": 9, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.feature = None\n        self.threshold = None\nclass IsolationTree:\n\n    def __init__(self, max_depth=None, min_samples_split=3):\n        self.max_depth = max_depth\n        self.min_samples_split = min_samples_split\n\n    def fit(self, X, depth=0):\n        self.root = Node(range(X.shape[0]))\n        self._split_node(self.root, X, depth)\n\n    def _split_node(self, node, X, depth):\n        if len(node.indices) < self.min_samples_split or (self.max_depth and depth >= self.max_depth):\n            return\n        feature = np.random.choice(X.shape[1])\n        threshold = np.random.uniform(np.min(X[node.indices, feature]), np.max(X[node.indices, feature]))\n        left_indices = [i for i in node.indices if X[i, feature] <= threshold]\n        right_indices = list(set(node.indices) - set(left_indices))\n        if len(left_indices) < self.min_samples_split or len(right_indices) < self.min_samples_split:\n            return\n        node.feature = feature\n        node.threshold = threshold\n        node.left = Node(left_indices)\n        self._split_node(node.left, X, depth + 1)\n        node.right = Node(right_indices)\n        self._split_node(node.right, X, depth + 1)\n\n    def compute_path_length(self, X):\n        paths = np.zeros(X.shape[0])\n        nodes = [(self.root, 0)]\n        while nodes:\n            (node, depth) = nodes.pop()\n            if node.left is None and node.right is None:\n                for index in node.indices:\n                    paths[index] = depth\n            else:\n                nodes.append((node.left, depth + 1))\n                nodes.append((node.right, depth + 1))\n        return paths\ndef isolation_tree_path_length(data):\n    np.random.seed(0)\n    tree = IsolationTree()\n    tree.fit(data)\n    return tree.compute_path_length(data).tolist()\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_count = math.ceil(N * minsup)\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n    freq_items = {item for (item, count) in item_counts.items() if count >= min_count}\n    if not freq_items:\n        return {}\n    freq_itemsets = {}\n    for freq_item in freq_items:\n        freq_itemsets[freq_item,] = item_counts[freq_item]\n    for size in range(2, len(freq_items) + 1):\n        for combination in combinations(freq_items, size):\n            for transaction in transactions:\n                if all((item in transaction for item in combination)):\n                    freq_itemsets[combination] = freq_itemsets.get(combination, 0) + 1\n    return {itemset: count for (itemset, count) in freq_itemsets.items() if count >= min_count}"}
{"task_id": 7, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple\ndef find_frequent_itemsets(transactions: List[List], minsup: float) -> Dict[Tuple, int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items.\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_count = math.ceil(minsup * N)\n    itemsets = {}\n    for trans in transactions:\n        for i in range(1, len(trans) + 1):\n            for comb in combinations(sorted(trans), i):\n                itemsets[comb] = itemsets.get(comb, 0) + 1\n    frequent_itemsets = {k: v for (k, v) in itemsets.items() if v >= min_count}\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nfrom itertools import chain, combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * num_transactions)\n    item_counts = Counter((item for transaction in transactions for item in set(transaction)))\n    candidate_item_sets = [set(item) for (item, count) in item_counts.items() if count >= min_support_count]\n    all_frequent_item_sets = candidate_item_sets\n    k = 2\n    while candidate_item_sets:\n        candidates = Counter((frozenset(i) for transaction in transactions for i in combinations(transaction, k)))\n        candidate_item_sets = [item for (item, count) in candidates.items() if count >= min_support_count]\n        all_frequent_item_sets.extend(candidate_item_sets)\n        k += 1\n    result = Counter()\n    for item_set in all_frequent_item_sets:\n        for transaction in transactions:\n            if item_set <= set(transaction):\n                result[tuple(sorted(item_set))] += 1\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple\ndef find_frequent_itemsets(transactions: List[List], minsup: float) -> Dict[Tuple[str, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    item_counter = Counter()\n    item_set = set()\n    for transaction in transactions:\n        transaction = sorted(list(set(transaction)))\n        item_counter.update(transaction)\n        item_set.update(transaction)\n    min_count = math.ceil(len(transactions) * minsup)\n    frequent_items = set((item for item in item_counter if item_counter[item] >= min_count))\n    all_items = sorted(list(frequent_items))\n    cur_items = sorted(list(frequent_items))\n    result_dict = {}\n    while cur_items:\n        item_sets = combinations(cur_items, len(cur_items) - 1)\n        for item_set in item_sets:\n            tuple_item_set = tuple(sorted(list(item_set)))\n            count = 0\n            for transaction in transactions:\n                if set(tuple_item_set).issubset(transaction):\n                    count += 1\n            if count >= min_count:\n                result_dict[tuple_item_set] = count\n        cur_items = [item for item in cur_items if tuple([item]) not in result_dict]\n    if not result_dict:\n        return {}\n    else:\n        return result_dict\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    min_support_count = math.ceil(minsup * len(transactions))\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support_count}\n    frequent_itemsets = {item: count for (item, count) in item_counts.items() if count >= min_support_count}\n    current_items = frequent_items\n    k = 1\n    while len(current_items) > 0:\n        k += 1\n        item_combinations = combinations(sorted(current_items), k)\n        item_counts = Counter((item for combination in item_combinations for item in transactions if set(combination).issubset(item)))\n        current_items = {item for (item, count) in item_counts.items() if count >= min_support_count}\n        frequent_itemsets.update(current_items)\n    return frequent_itemsets"}
{"task_id": 7, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    itemsets = {}\n    for transaction in transactions:\n        for i in range(1, len(transaction) + 1):\n            combs = list(combinations(transaction, i))\n            for comb in combs:\n                sorted_comb = tuple(sorted(comb))\n                if sorted_comb in itemsets:\n                    itemsets[sorted_comb] += 1\n                else:\n                    itemsets[sorted_comb] = 1\n    threshold = math.ceil(minsup * len(transactions))\n    frequent_itemsets = {k: v for (k, v) in itemsets.items() if v >= threshold}\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nfrequent_itemsets = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    itemset = []\n    for transaction in transactions:\n        itemset += transaction\n    items = list(set(itemset))\n    min_count = math.ceil(minsup * len(transactions))\n    counts = Counter(itemset)\n    table = dict(((item, counts[item]) for item in items if counts[item] >= min_count))\n    freq_itemsets = dict(((k, table[k]) for k in sorted(table)))\n    last_length = 1\n    while True:\n        new_candidates = []\n        for item in sorted(table.keys()):\n            for candidate in sorted(combinations(item, last_length)):\n                new_candidates.append(tuple(sorted(list(item) + [candidate[-1]])))\n        if len(new_candidates) == 0:\n            break\n        new_table = {}\n        for transaction in transactions:\n            for candidate in new_candidates:\n                if set(candidate).issubset(transaction):\n                    new_table[candidate] = new_table.get(candidate, 0) + 1\n        freq_itemsets.update(((k, v) for (k, v) in sorted(new_table.items()) if v >= min_count))\n        table = new_table\n        last_length += 1\n    return freq_itemsets"}
{"task_id": 7, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_count = minsup * N\n    supports = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            supports[item] += 1\n    for (key, value) in list(supports.items()):\n        if value < min_count:\n            del supports[key]\n    combinations_set = set()\n    for combination in combinations(supports.keys(), 2):\n        combinations_set.add(combination)\n    n_length_combinations = [a for (a, b) in combinations_set]\n    for combination in combinations(n_length_combinations, 2):\n        sorted_combination = tuple(sorted(combination))\n        if sorted_combination not in supports:\n            count = 0\n            for transaction in transactions:\n                if set(combination).issubset(transaction):\n                    count += 1\n            if count >= min_count:\n                supports[sorted_combination] = count\n    return supports\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    n = len(transactions)\n    min_support = math.ceil(minsup * n)\n    freq_itemsets = {}\n    for k in range(1, len(transactions[0]) + 1):\n        for transaction in transactions:\n            for itemset in combinations(transaction, k):\n                if itemset in freq_itemsets:\n                    freq_itemsets[itemset] += 1\n                else:\n                    freq_itemsets[itemset] = 1\n    for itemset in list(freq_itemsets.keys()):\n        if freq_itemsets[itemset] < min_support:\n            del freq_itemsets[itemset]\n    freq_itemsets = {itemset: freq_itemsets[itemset] for itemset in sorted(freq_itemsets.keys())}\n    return freq_itemsets"}
{"task_id": 7, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    single_items = Counter()\n    for trans in transactions:\n        for item in set(trans):\n            single_items[item] += 1\n    min_count = math.ceil(minsup * len(transactions))\n    single_items = {k: v for (k, v) in single_items.items() if v >= min_count}\n    itemsets = dict(single_items)\n    item_sets_cnt = Counter()\n    item_sets_cnt.update(single_items)\n    for length in range(2, len(single_items) + 1):\n        for trans in transactions:\n            for subset in combinations(set(trans), length):\n                item_sets_cnt[subset] += 1\n        item_sets_cnt = {k: v for (k, v) in item_sets_cnt.items() if v >= min_count}\n        itemsets.update(item_sets_cnt)\n        if not item_sets_cnt:\n            break\n    return itemsets"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n\n    def dist(a, b, ax=1):\n        return np.linalg.norm(a - b, axis=ax)\n    n = data.shape[0]\n    centers = data[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(max_iter):\n        for i in range(n):\n            distances = dist(data[i], centers)\n            label = np.argmin(distances)\n            labels[i] = label\n        old_centers = centers.copy()\n        for j in range(k):\n            points = data[labels == j]\n            if points.shape[0] == 0:\n                centers[j] = data[np.random.randint(n)]\n            else:\n                centers[j] = np.mean(points, axis=0)\n        centers = np.round(centers, 4)\n        max_c = np.max(dist(centers, old_centers))\n        if max_c < epsilon:\n            break\n    return (centers.tolist(), labels.tolist())"}
{"task_id": 11, "completion_id": 1, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    centeroids = data[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = np.array([euclidean_distance(sample, centeroid) for centeroid in centeroids])\n            label = np.argmin(distances)\n            labels[i] = label\n        new_centeroids = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for (i, sample) in enumerate(data):\n            label = labels[i]\n            new_centeroids[label] += sample\n            counts[label] += 1\n        for j in range(k):\n            if counts[j] == 0:\n                new_centeroids[j] = data[np.random.randint(0, n_samples)]\n                continue\n            new_centeroids[j] /= counts[j]\n        max_centeroid_movement = np.max(np.sqrt(np.sum((centeroids - new_centeroids) ** 2, axis=1)))\n        if max_centeroid_movement < epsilon:\n            break\n        centeroids = new_centeroids\n    centeroids = [list(map(lambda x: round(x, 4), centeroid)) for centeroid in centeroids]\n    return (centeroids, labels.tolist())"}
{"task_id": 11, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n\n    def calculate_distance(centre, sample):\n        return np.sqrt(np.sum((centre - sample) ** 2))\n\n    def assign_to_clusters(centres, samples):\n        labels = np.zeros(samples.shape[0])\n        for (i, sample) in enumerate(samples):\n            distances = np.array([calculate_distance(centre, sample) for centre in centres])\n            label = np.argmin(distances)\n            labels[i] = label\n        return labels\n\n    def recompute_centres(samples, labels, old_centres):\n        centres = np.zeros((old_centres.shape[0], old_centres.shape[1]))\n        for i in range(old_centres.shape[0]):\n            samples_in_cluster = samples[labels == i]\n            if samples_in_cluster.size == 0:\n                centres[i] = data[np.random.randint(0, data.shape[0])]\n            else:\n                centres[i] = np.mean(samples_in_cluster, axis=0)\n        return centres\n\n    def check_convergence(old_centres, new_centres, epsilon):\n        return np.all(np.abs(new_centres - old_centres) <= epsilon)\n    centres = data[:k].copy()\n    labels = np.zeros(data.shape[0])\n    for _ in range(max_iter):\n        new_labels = assign_to_clusters(centres, data)\n        if np.all(labels == new_labels):\n            break\n        labels = new_labels\n        new_centres = recompute_centre(data, labels, centres)\n        if check_convergence(centres, new_centres, epsilon):\n            break\n        centres = new_centres\n    return ([list(map(lambda x: round(x, 4), centre)) for centre in centres], labels.tolist())"}
{"task_id": 11, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k]\n    distances = np.zeros((n_samples, k))\n    labels = np.zeros(n_samples, dtype=int)\n    for i in range(max_iter):\n        for j in range(k):\n            distances[:, j] = np.sum((data - centers[j]) ** 2, axis=1)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for j in range(k):\n            if np.sum(labels == j) == 0:\n                centers[j] = data[np.random.randint(n_samples)]\n            else:\n                centers[j] = np.mean(data[labels == j], axis=0)\n    centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n    return (centers, labels.tolist())"}
{"task_id": 11, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k]\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = np.linalg.norm(centres - sample, axis=1)\n            label = np.argmin(distances)\n            labels[i] = label\n        new_centres = np.copy(centres)\n        for i in range(k):\n            assigned_samples = data[labels == i]\n            if len(assigned_samples) == 0:\n                new_centres[i] = data[np.random.randint(n_samples)]\n            else:\n                new_centres[i] = np.mean(assigned_samples, axis=0)\n        max_change = np.max(np.abs(new_centres - centres))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    centres = np.round(centres, decimals=4).tolist()\n    return (centres, labels.tolist())"}
{"task_id": 11, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    centers = data[:k].tolist()\n    labels = np.zeros(data.shape[0], dtype=int).tolist()\n    iteration = 0\n    while True:\n        for (i, sample) in enumerate(data):\n            distances = np.sum((centers - sample) ** 2, axis=1)\n            label = np.argmin(distances)\n            if label < k:\n                labels[i] = label\n            else:\n                centers[label] = data[np.random.randint(data.shape[0])].tolist()\n        new_centers = np.array([np.mean(data[np.array(labels) == i], axis=0) for i in range(k)])\n        new_centers = [[round(val, 4) for val in center] for center in new_centers]\n        if iteration > max_iter or np.allclose(centers, new_centers, atol=epsilon):\n            break\n        centers = new_centers.tolist()\n        iteration += 1\n    return (centers, labels)"}
{"task_id": 11, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \n    Note\n    ----\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        \"\"\"Computes the Euclidean distance between two vectors.\"\"\"\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def compute_cluster_labels(centers, data):\n        \"\"\"Assign each sample in data to the nearest center.\"\"\"\n        labels = []\n        for sample in data:\n            distances = []\n            for center in centers:\n                distances.append(euclidean_distance(center, sample))\n            label = np.argmin(distances)\n            labels.append(label)\n        return labels\n\n    def recompute_centers(centers, labels, data):\n        \"\"\"Compute the center of each cluster.\"\"\"\n        new_centers = []\n        for i in range(len(centers)):\n            cluster = data[np.array(labels) == i]\n            if cluster.size == 0:\n                new_centers.append(data[np.random.randint(0, data.shape[0])])\n            else:\n                new_centers.append(np.mean(cluster, axis=0))\n        return np.round(new_centers, 4)\n    centers = data[:k].tolist()\n    for _ in range(max_iter):\n        labels = compute_cluster_labels(centers, data)\n        new_centers = recompute_centers(centers, labels, data)\n        if np.max(np.abs(np.array(new_centers) - np.array(centers))) < epsilon:\n            break\n        centers = new_centers\n    return (centers, labels)"}
{"task_id": 11, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    (n, d) = data.shape\n    centers = data[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = np.linalg.norm(centers - sample, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centers = np.zeros((k, d))\n        for i in range(k):\n            mask = labels == i\n            if np.any(mask):\n                new_centers[i] = data[mask].mean(axis=0)\n            else:\n                new_centers[i] = data[np.random.randint(n)]\n        max_center_movement = np.max(np.linalg.norm(new_centers - centers, axis=1))\n        if max_center_movement < epsilon:\n            break\n        centers = new_centers\n    return ([list(map(lambda x: round(x, 4), center)) for center in centers], list(labels))"}
{"task_id": 11, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n\n    def compute_distances(centroids, data):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        return distances\n\n    def compute_centroids(clusters, data):\n        new_centroids = np.array([data[clusters == k].mean(axis=0) for k in range(clusters.max() + 1)])\n        return new_centroids\n    centroids = data[:k]\n    old_centroids = np.zeros(centroids.shape)\n    clusters = np.zeros(len(data))\n    for _ in range(max_iter):\n        if np.allclose(old_centroids, centroids, atol=epsilon):\n            break\n        old_centroids = centroids\n        distances = compute_distances(centroids, data)\n        clusters = np.argmin(distances, axis=0)\n        centroids = compute_centroids(clusters, data)\n        for cluster in range(k):\n            if np.sum(clusters == cluster) == 0:\n                centroids[cluster] = data[np.random.randint(0, len(data))]\n    centroids = np.round(centroids, 4)\n    return (centroids.tolist(), clusters.tolist())\ndata = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\nk = 2"}
{"task_id": 11, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n\n    def calc_euclidean(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    (samples, features) = data.shape\n    centres = data[:k]\n    labels = np.zeros(samples, dtype=int)\n    distances = np.zeros((samples, k))\n    for _ in range(max_iter):\n        for (i, center) in enumerate(centres):\n            distances[:, i] = np.apply_along_axis(calc_euclidean, 1, data, center)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            if np.sum(labels == i) == 0:\n                centres[i] = data[np.random.randint(0, samples)]\n        new_centres = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n        if np.max(np.abs(centres - new_centres)) < epsilon:\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (centres, labels.tolist())"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    S = np.zeros((data.shape[1], data.shape[1]))\n    rated_mask = data > 0\n    for i in range(data.shape[1]):\n        for j in range(i, data.shape[1]):\n            rated_both = np.logical_and(rated_mask[:, i], rated_mask[:, j])\n            users_rated_both = data[rated_both, :]\n            if users_rated_both.shape[0] > 0:\n                v1 = users_rated_both[:, i]\n                v2 = users_rated_both[:, j]\n                if criterion == 'cosine':\n                    vec_std = lambda v: np.std(v[v > 0])\n                    if vec_std(v1) > 0.001 and vec_std(v2) > 0.001:\n                        v1 = v1 - v1.mean()\n                        v2 = v2 - v2.mean()\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = S[j, i] = 0 if np.isnan(S[i, j]) else S[i, j]\n    rated_items = np.nonzero(data[user_ind, :] > 0)[0]\n    scores = defaultdict(float)\n    for unrated_item in np.nonzero(data[user_ind, :] == 0)[0]:\n        for rated_item in rated_items:\n            scores[unrated_item] += data[user_ind, rated_item] * S[unrated_item, rated_item]\n        if S[unrated_item, :].sum() > 0:\n            scores[unrated_item] /= np.abs(S[unrated_item, :]).sum()\n    return sorted(scores.keys(), key=lambda x: -scores[x])[:k]"}
{"task_id": 13, "completion_id": 1, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            valid_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(valid_users) == 0:\n                continue\n            v1 = data[valid_users, i]\n            v2 = data[valid_users, j]\n            if criterion == 'cosine':\n                mu_v1 = v1.mean() if v1.std() > 0.001 else 0\n                mu_v2 = v2.mean() if v2.std() > 0.001 else 0\n                v1_zero = v1 - mu_v1\n                v2_zero = v2 - mu_v2\n                S[i, j] = S[j, i] = v1_zero @ v2_zero / (np.linalg.norm(v1_zero) * np.linalg.norm(v2_zero))\n            elif criterion == 'pearson':\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n            else:\n                raise ValueError(f'Unknown criterion {criterion}')\n    unrated = np.where(data[user_ind, :] <= 0)[0]\n    r = data[user_ind, data[user_ind, :] > 0]\n    sorted_items = sorted(((np.sum(r * S[item, :]) / np.sum(np.abs(S[item, :])), item) for item in unrated), reverse=True)\n    return [item for (_, item) in sorted_items[:k]]"}
{"task_id": 13, "completion_id": 2, "solution": "import numpy as np\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    S = np.zeros((data.shape[1], data.shape[1]))\n    rated_items = data[user_ind] > 0\n    for i in range(S.shape[0]):\n        for j in range(i, S.shape[1]):\n            if i == j:\n                S[i, j] = 1\n            else:\n                users_rated_both = np.logical_and(data[:, i] > 0, data[:, j] > 0)\n                if np.any(users_rated_both):\n                    v1 = data[users_rated_both, i]\n                    v2 = data[users_rated_both, j]\n                    if criterion == 'cosine':\n                        v1 = v1 - np.mean(v1)\n                        v2 = v2 - np.mean(v2)\n                        if np.std(v1) > 0.001:\n                            v1 = v1 / np.std(v1)\n                        if np.std(v2) > 0.001:\n                            v2 = v2 / np.std(v2)\n                        similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                        S[i, j] = similarity\n                        S[j, i] = similarity\n                    elif criterion == 'pearson':\n                        similarity = np.corrcoef(v1, v2)[0, 1]\n                        S[i, j] = similarity\n                        S[j, i] = similarity\n    user_ratings = data[user_ind, rated_items]\n    scores = np.zeros(data.shape[1])\n    for (i, item) in enumerate(data.T):\n        if not rated_items[i]:\n            rated_indices = rated_items.nonzero()[0]\n            scores[i] = np.dot(user_ratings, S[i, rated_items]) / np.sum(np.abs(S[i, rated_items]))\n    recommended_items = scores.argsort()[::-1][:k]\n    return recommended_items.tolist()"}
{"task_id": 13, "completion_id": 3, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and then predicts\n    the attractiveness of every yet unrated item for the specified user. It\n    finally returns a list of at most k most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item).\n        Contains positive ratings; a value of 0 means not rated.\n    user_ind : int\n        Index of the active user for whom we want to obtain recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either 'cosine' (default) or 'pearson'.\n\n    Returns\n    -------\n    list[int]\n        A list with at most k item indices ordered from the highest to the \n        lowest predicted score.\n    \"\"\"\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    rated_matrix = np.where(data > 0, 1, 0)\n    for i in range(n_item):\n        for j in range(i, n_item):\n            rated_users_i = np.where(rated_matrix[:, i] == 1)[0]\n            rated_users_j = np.where(rated_matrix[:, j] == 1)[0]\n            shared_users = np.intersect1d(rated_users_i, rated_users_j)\n            if shared_users.size == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[shared_users, i]\n                v2 = data[shared_users, j]\n                if criterion == 'cosine':\n                    v1 = v1 - v1.mean()\n                    v2 = v2 - v2.mean()\n                    if np.std(v1) > 0.001 and np.std(v2) > 0.001:\n                        v1 = v1 / np.linalg.norm(v1)\n                        v2 = v2 / np.linalg.norm(v2)\n                elif criterion == 'pearson':\n                    v1 = v1 - v1.mean()\n                    v2 = v2 - v2.mean()\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(int)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            scores[t] = numerator / denominator if denominator != 0 else 0\n    return sorted(scores, key=scores.get, reverse=True)[:k]"}
{"task_id": 13, "completion_id": 4, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    S = np.zeros((n_items, n_items))\n    if n_users < 2:\n        return []\n    for i in range(n_items):\n        for j in range(i, n_items):\n            rated_both = np.nonzero(np.logical_and(data[:, i] > 0, data[:, j] > 0))[0]\n            if len(rated_both) > 0:\n                if criterion == 'cosine':\n                    v1 = data[rated_both, i]\n                    v2 = data[rated_both, j]\n                    mu1 = np.mean(v1) if np.std(v1) > 0.001 else 0\n                    mu2 = np.mean(v2) if np.std(v2) > 0.001 else 0\n                    S[i, j] = S[j, i] = np.dot(v1 - mu1, v2 - mu2) / (np.linalg.norm(v1 - mu1) * np.linalg.norm(v2 - mu2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(data[rated_both, i], data[rated_both, j])[0, 1]\n    scores = defaultdict(float)\n    for t in np.where(data[user_ind] == 0)[0]:\n        for i in rated_items:\n            scores[t] += S[t, i]\n        scores[t] /= np.sum(np.abs(S[t, rated_items]))\n    recommendations = sorted(scores.keys(), key=lambda x: (-scores[x], x))\n    return recommendations[:k]"}
{"task_id": 13, "completion_id": 5, "solution": "import numpy as np\nfrom collections import defaultdict\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.stats import pearsonr\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    rating_indices = np.where(data > 0, data, -1)\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.intersect1d(np.where(rating_indices[:, i] > 0), np.where(rating_indices[:, j] > 0))\n            if common_users.size > 0:\n                (v1, v2) = data[common_users, [i, j]]\n                if criterion == 'cosine':\n                    (v1, v2) = (v1 - np.mean(v1), v2 - np.mean(v2))\n                    (v1, v2) = (v1 / (np.std(v1) + 1e-09), v2 / (np.std(v2) + 1e-09))\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2) + 1e-09)\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = pearsonr(v1, v2)[0]\n    r = data[user_ind]\n    rated_items = np.where(r > 0)[0]\n    unrated_items = np.where(r == 0)[0]\n    scores = defaultdict(int)\n    for t in unrated_items:\n        numerator = np.sum([r[i] * S[t, i] for i in rated_items])\n        denominator = np.sum([np.abs(S[t, i]) for i in rated_items])\n        score = numerator / (denominator + 1e-09)\n        scores[t] = score\n    recommended = sorted(scores, key=scores.get, reverse=True)\n    return sorted(recommended)[:k]"}
{"task_id": 13, "completion_id": 6, "solution": "import numpy as np\nfrom scipy.spatial.distance import cosine\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users = np.nonzero(data[:, [i, j]] > 0)[0]\n            if len(users) == 0:\n                continue\n            (v1, v2) = data[users, [i, j]].T\n            if criterion == 'cosine':\n                mask = np.std(v1) > 0.001\n                v1 = v1 - v1.mean() if mask else v1\n                mask = np.std(v2) > 0.001\n                v2 = v2 - v2.mean() if mask else v2\n                sim = 1 - cosine(v1, v2)\n            elif criterion == 'pearson':\n                sim = np.corrcoef(v1, v2)[0, 1]\n            else:\n                raise ValueError(f'Unknown criterion: {criterion}')\n            S[i, j] = S[j, i] = sim\n    rated_items = np.nonzero(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = dict()\n    for t in range(n_item):\n        if t in rated_items:\n            continue\n        score = S[t, rated_items] @ r / np.abs(S[t, rated_items]).sum()\n        scores[t] = score\n    recommended_items = sorted(scores.keys(), key=lambda x: -scores[x])\n    return recommended_items[:k]"}
{"task_id": 13, "completion_id": 7, "solution": "import numpy as np\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_items = data.shape[1]\n    S = np.zeros((n_items, n_items))\n    rated_items = np.nonzero(data[user_ind])[0]\n    for i in range(n_items):\n        for j in range(i, n_items):\n            if i != j:\n                users = np.nonzero(data[:, [i, j]] > 0)[0]\n                if len(users) == 0:\n                    continue\n                (v1, v2) = (data[users, i], data[users, j])\n                if criterion == 'cosine':\n                    if v1.std() > 0.001:\n                        v1 = v1 - v1.mean()\n                    if v2.std() > 0.001:\n                        v2 = v2 - v2.mean()\n                    S[i, j] = S[j, i] = v1.dot(v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    scores = np.zeros(n_items)\n    for i in range(n_items):\n        if i not in rated_items:\n            numer = S[i, rated_items].dot(data[user_ind, rated_items])\n            denom = np.abs(S[i, rated_items]).sum()\n            scores[i] = numer / denom if denom != 0 else 0\n    top_items = np.argsort(scores)[::-1][:k]\n    return top_items.tolist()"}
{"task_id": 13, "completion_id": 8, "solution": "import numpy as np\nfrom collections import defaultdict\nimport scipy.spatial\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    ratings = defaultdict(dict)\n    for i in range(n_user):\n        for j in range(n_item):\n            if data[i, j] > 0:\n                ratings[j][i] = data[i, j]\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = set(ratings[i].keys()).intersection(set(ratings[j].keys()))\n            if common_users:\n                v1 = np.array([ratings[i][u] for u in common_users])\n                v2 = np.array([ratings[j][u] for u in common_users])\n                if criterion == 'cosine':\n                    v1_mean = np.mean(v1) if np.std(v1) > 0.001 else 0\n                    v1 = v1 - v1_mean\n                    v2_mean = np.mean(v2) if np.std(v2) > 0.001 else 0\n                    v2 = v2 - v2_mean\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = [i for i in range(n_item) if data[user_ind, i] > 0]\n    score = np.zeros(n_item)\n    for i in range(n_item):\n        if data[user_ind, i] == 0:\n            numerator = sum([data[user_ind, j] * S[i, j] for j in rated_items])\n            denominator = sum([abs(S[i, j]) for j in rated_items])\n            score[i] = numerator / denominator if denominator > 0 else 0\n    top_k_items = score.argsort()[::-1][:k]\n    return top_k_items.tolist()"}
{"task_id": 13, "completion_id": 9, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_user, n_item) = data.shape\n    rated_indexes = np.where(data[user_ind, :] > 0)[0]\n    if rated_indexes.size == 0:\n        return []\n    similarity_matrix = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            if i == j:\n                similarity_matrix[i, j] = 1\n            else:\n                users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n                if users_rated_both.size > 0:\n                    ratings_i = data[users_rated_both, i]\n                    ratings_j = data[users_rated_both, j]\n                    if criterion == 'cosine':\n                        std_i = np.std(ratings_i)\n                        std_j = np.std(ratings_j)\n                        if std_i > 0.001:\n                            ratings_i = ratings_i - np.mean(ratings_i)\n                        if std_j > 0.001:\n                            ratings_j = ratings_j - np.mean(ratings_j)\n                    if criterion == 'cosine':\n                        similarity = np.dot(ratings_i, ratings_j) / (np.linalg.norm(ratings_i) * np.linalg.norm(ratings_j))\n                    else:\n                        similarity = np.corrcoef(ratings_i, ratings_j)[0, 1]\n                    similarity_matrix[i, j] = similarity_matrix[j, i] = similarity\n    user_rated_items = data[user_ind, rated_indexes]\n    predicted_scores = {}\n    for unrated_item in range(n_item):\n        if unrated_item not in rated_indexes:\n            numerator = np.dot(similarity_matrix[unrated_item, rated_indexes], user_rated_items)\n            denominator = np.sum(np.abs(similarity_matrix[unrated_item, rated_indexes]))\n            if denominator != 0:\n                predicted_scores[unrated_item] = numerator / denominator\n    recommended_items = sorted(predicted_scores, key=predicted_scores.get, reverse=True)[:k]\n    return recommended_items"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    max_gain = -np.inf\n    best_split = ()\n    total_g = g.sum()\n    total_h = h.sum()\n    parent_score = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    for feature_index in range(X.shape[1]):\n        vals = np.unique(X[:, feature_index])\n        for threshold in vals[:-1]:\n            left = X[:, feature_index] <= threshold\n            right = X[:, feature_index] > threshold\n            if np.sum(left) < 2 or np.sum(right) < 2:\n                continue\n            gain = parent_score - (-0.5 * g[left].sum() ** 2 / (h[left].sum() + lam) + gamma + (-0.5 * g[right].sum() ** 2 / (h[right].sum() + lam) + gamma))\n            if gain > max_gain:\n                max_gain = gain\n                best_split = (feature_index, (threshold + np.min(vals[vals <= threshold])) / 2)\n    return None if max_gain < 0 else best_split"}
{"task_id": 19, "completion_id": 1, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n\n    def get_gain(L):\n        denom = np.sum(h[L])\n        denom = 0 if denom == 0 else denom + lam\n        return -np.sum(g[L]) ** 2 / denom - gamma\n\n    def get_left_right(L):\n        G = get_gain(L)\n        best_gain = 0\n        best_t = None\n        best_feature = None\n        for feature in range(X.shape[1]):\n            possible_thresholds = np.unique(X[L, feature])\n            for t in possible_thresholds:\n                L_L = L[L & (X[:, feature] <= t)]\n                L_R = L[L & (X[:, feature] > t)]\n                if L_L.sum() < 2 or L_R.sum() < 2:\n                    continue\n                gain = G - get_gain(L_L) - get_gain(L_R)\n                if gain > best_gain:\n                    (best_gain, best_feature, best_t) = (gain, feature, t)\n        return (best_feature, best_t)\n    L = np.ones(len(g), dtype=bool)\n    (feature_index, threshold) = get_left_right(L)\n    if feature_index is None:\n        return None\n    return (feature_index, threshold)"}
{"task_id": 19, "completion_id": 2, "solution": "import numpy as np\ndef objective(g, h, lam):\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    return -0.5 * total_g ** 2 / (total_h + lam) + gamma\ndef gain(g, h, lam, left_mask, right_mask):\n    return objective(g, h, lam) - objective(g[left_mask], h[left_mask], lam) - objective(g[right_mask], h[right_mask], lam)\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    best_gain = -np.inf\n    best_split = None\n    (n_samples, n_features) = X.shape\n    sorted_indices = np.argsort(X, axis=0)\n    X_sorted = np.take_along_axis(X, sorted_indices, axis=0)\n    for feature_index in range(n_features):\n        feature_sorted = X_sorted[:, feature_index]\n        masks = feature_sorted[1:] != feature_sorted[:-1]\n        for mask in np.where(masks)[0]:\n            mask += 1\n            left_mask = np.zeros(n_samples, dtype=bool)\n            left_mask[sorted_indices[:mask, feature_index]] = True\n            right_mask = ~left_mask\n            gain = gain(g, h, lam, left_mask, right_mask)\n            if gain > best_gain and np.sum(left_mask) > 0 and (np.sum(right_mask) > 0):\n                best_gain = gain\n                best_split = (feature_index, (feature_sorted[mask - 1] + feature_sorted[mask]) / 2)\n    return best_split"}
{"task_id": 19, "completion_id": 3, "solution": "import numpy as np\ndef calc_loss(g_sum, h_sum, lam, gamma):\n    return -0.5 * (g_sum ** 2 / (h_sum + lam)) + gamma\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    (n_samples, n_features) = X.shape\n    G_R = g.sum()\n    H_R = h.sum()\n    loss_R = calc_loss(G_R, H_R, lam, gamma)\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        order = np.argsort(feature_values)\n        sorted_g = g[order]\n        sorted_h = h[order]\n        G_L = np.cumsum(sorted_g)\n        H_L = np.cumsum(sorted_h)\n        loss_L = calc_loss(G_L[:-1], H_L[:-1], lam, gamma)\n        G_R -= sorted_g\n        H_R -= sorted_h\n        loss_R = calc_loss(G_R[1:], H_R[1:], lam, gamma)\n        gains = loss_R + loss_L - loss_R[0] - loss_L\n        max_gain_idx = np.argmax(gains)\n        if gains[max_gain_idx] > best_gain and feature_values[order[max_gain_idx + 1]] > feature_values[order[max_gain_idx]]:\n            best_gain = gains[max_gain_idx]\n            best_feature = feature_idx\n            best_threshold = 0.5 * (feature_values[order[max_gain_idx + 1]] + feature_values[order[max_gain_idx]])\n    if best_gain <= 0:\n        return None\n    return (best_feature, best_threshold)"}
{"task_id": 19, "completion_id": 4, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\ndef best_split(X, g, h, gamma, lam):\n    n_features = X.shape[1]\n    gs = g.sum()\n    hs = h.sum() + lam\n    best_gain = -np.inf\n    best_split = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        uniq_values = np.unique(feature_values)\n        for threshold in uniq_values:\n            left_index = X[:, feature_index] <= threshold\n            right_index = X[:, feature_index] > threshold\n            if left_index.sum() < 2 or right_index.sum() < 2:\n                continue\n            gain = -0.5 * (g[left_index].sum() ** 2 / (h[left_index].sum() + lam) + gamma + g[right_index].sum() ** 2 / (h[right_index].sum() + lam) + gamma)\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    if best_split is None:\n        return None\n    else:\n        return best_split"}
{"task_id": 19, "completion_id": 5, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n\n    def compute_loss(left_indices, right_indices):\n        left_g = g[left_indices].sum()\n        left_h = h[left_indices].sum()\n        right_g = g[right_indices].sum()\n        right_h = h[right_indices].sum()\n        left_loss = -0.5 * np.power(left_g, 2) / (left_h + lam) + gamma\n        right_loss = -0.5 * np.power(right_g, 2) / (right_h + lam) + gamma\n        return left_loss + right_loss\n\n    def compute_gain(left_indices, right_indices):\n        combined_indices = np.concatenate([left_indices, right_indices])\n        combined_g = g[combined_indices].sum()\n        combined_h = h[combined_indices].sum()\n        combined_loss = -0.5 * np.power(combined_g, 2) / (combined_h + lam) + gamma\n        return combined_loss - compute_loss(left_indices, right_indices)\n    best_gain = -np.inf\n    (best_feature, best_threshold) = (None, None)\n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        for index in range(n_samples - 1):\n            if X[sorted_indices[index], feature] == X[sorted_indices[index + 1], feature]:\n                continue\n            threshold = 0.5 * (X[sorted_indices[index], feature] + X[sorted_indices[index + 1], feature])\n            left_indices = sorted_indices[:index + 1]\n            right_indices = sorted_indices[index + 1:]\n            gain = compute_gain(left_indices, right_indices)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    return (best_feature, best_threshold) if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 6, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_gain = -np.inf\n    (best_split_feature, best_split_threshold) = (None, None)\n    total_g = g.sum()\n    total_h = h.sum()\n    total_loss = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for value in unique_values:\n            left_indices = X[:, feature_index] <= value\n            right_indices = ~left_indices\n            if left_indices.sum() < 1 or right_indices.sum() < 1:\n                continue\n            left_g = g[left_indices].sum()\n            left_h = h[left_indices].sum()\n            left_loss = -0.5 * left_g ** 2 / (left_h + lam) + gamma\n            right_g = g[right_indices].sum()\n            right_h = h[right_indices].sum()\n            right_loss = -0.5 * right_g ** 2 / (right_h + lam) + gamma\n            gain = total_loss - left_loss - right_loss\n            if gain > total_gain:\n                total_gain = gain\n                best_split_feature = feature_index\n                best_split_threshold = value\n    return (best_split_feature, best_split_threshold) if total_gain > 0 else None"}
{"task_id": 19, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Tuple, Union\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> Union[Tuple[int, float], None]:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    Union[Tuple[int, float], None]\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n\n    def regularised_loss(g_sum, h_sum):\n        return -0.5 * np.power(g_sum / (h_sum + lam), 2) + gamma\n    current_loss = regularised_loss(np.sum(g), np.sum(h))\n    max_gain = -1\n    best_split = None\n    for f in range(X.shape[1]):\n        thresholds = np.unique(X[:, f])\n        if len(thresholds) == 1:\n            continue\n        for thresh in thresholds:\n            mask = X[:, f] <= thresh\n            (g_left, h_left) = (np.sum(g[mask]), np.sum(h[mask]))\n            (g_right, h_right) = (np.sum(g[~mask]), np.sum(h[~mask]))\n            if len(g_left) < 2 or len(g_right) < 2:\n                continue\n            gain = current_loss - regularised_loss(g_left, h_left) - regularised_loss(g_right, h_right)\n            if gain > max_gain:\n                max_gain = gain\n                best_split = (f, thresh)\n    if max_gain <= 0:\n        return None\n    else:\n        return best_split"}
{"task_id": 19, "completion_id": 8, "solution": "import numpy as np\nimport pandas as pd\nfrom typing import Dict, Tuple, Optional\ndef L(g_sum: float, h_sum: float, lam: float, gamma: float) -> float:\n    return -0.5 * g_sum ** 2 / (h_sum + lam) + gamma\ndef gain(left_stats: Tuple[float, float, float], right_stats: Tuple[float, float, float], parent_stats: Tuple[float, float, float], lam: float, gamma: float) -> float:\n    (g_sum_L, h_sum_L, size_L) = left_stats\n    (g_sum_R, h_sum_R, size_R) = right_stats\n    (g_sum, h_sum, _) = parent_stats\n    return L(g_sum, h_sum, lam, gamma) - (L(g_sum_L, h_sum_L, lam, gamma) + L(g_sum_R, h_sum_R, lam, gamma))\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, lam: float, gamma: float) -> Optional[Tuple[int, float]]:\n    (n_samples, n_features) = X.shape\n    parent_stats = (g.sum(), h.sum(), n_samples)\n    gains = pd.Series(index=pd.MultiIndex.from_arrays([[], []], names=['feature', 'threshold']), dtype=float)\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for threshold in unique_values:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            if left_indices.sum() < 2 or right_indices.sum() < 2:\n                continue\n            left_stats = (g[left_indices].sum(), h[left_indices].sum(), left_indices.sum())\n            right_stats = (g[right_indices].sum(), h[right_indices].sum(), right_indices.sum())\n            split_gain = gain(left_stats, right_stats, parent_stats, lam, gamma)\n            gains[feature_index, threshold] = split_gain\n    if gains.empty or (gains <= 0).all():\n        return None\n    else:\n        best_split_index = gains.idxmax()\n        return best_split_index"}
{"task_id": 19, "completion_id": 9, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    best_gain = -np.inf\n    best_split = None\n    for feature in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            left_indices = X[:, feature] <= threshold\n            left_sum = np.sum(g[left_indices]) ** 2\n            left_denom = np.sum(h[left_indices]) + lam\n            right_indices = X[:, feature] > threshold\n            right_sum = np.sum(g[right_indices]) ** 2\n            right_denom = np.sum(h[right_indices]) + lam\n            left_loss = left_sum / (2 * left_denom) + gamma\n            right_loss = right_sum / (2 * right_denom) + gamma\n            gain = -0.5 * (np.sum(g) ** 2 / np.sum(h) + gamma) + np.sum(left_loss) + np.sum(right_loss)\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature, threshold)\n    return best_split if best_gain >= 0 else None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    if x.ndim > 1:\n        return (np.around(sigmoid, 4).tolist(), np.around(gradient, 4).tolist())\n    else:\n        return (np.around(sigmoid[0], 4), np.around(gradient[0], 4))"}
{"task_id": 20, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"\n    Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([float(x)])\n    elif isinstance(x, list):\n        x = np.array(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if x.shape[1] == 1:\n        sigmoid_x = sigmoid_x.flatten()\n        gradient_x = gradient_x.flatten()\n        if isinstance(x, (int, float)):\n            return (round(float(sigmoid_x[0]), 4), round(float(gradient_x[0]), 4))\n        else:\n            return ([round(val, 4) for val in sigmoid_x], [round(val, 4) for val in gradient_x])"}
{"task_id": 20, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    grad_sigmoid = sigmoid * (1 - sigmoid)\n    if np.isscalar(x):\n        return (round(sigmoid.item(), 4), round(grad_sigmoid.item(), 4))\n    else:\n        return ([round(s, 4) for s in sigmoid.tolist()], [round(g, 4) for g in grad_sigmoid.tolist()])"}
{"task_id": 20, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"\n    Computes sigmoid of x.\n    \n    Arguments:\n    x -- A scalar or numpy array of any size.\n\n    Return:\n    sigmoidValue -- sigmoid(x)\n    \"\"\"\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    \"\"\"\n    Computes the derivative of the sigmoid function with respect to its input x.\n\n    Arguments:\n    x -- A scalar or numpy array.\n\n    Return:\n    ds -- Your computed gradient.\n    \"\"\"\n    s = sigmoid(x)\n    return s * (1 - s)\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = sigmoid(x)\n    gradient_x = sigmoid_derivative(x)\n    if np.isscalar(x):\n        return (np.round(sigmoid_x, 4).item(), np.round(gradient_x, 4).item())\n    else:\n        return (np.round(sigmoid_x, 4).tolist(), np.round(gradient_x, 4).tolist())"}
{"task_id": 20, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    sigmoid = sigmoid.round(4)\n    gradient = sigmoid * (1 - sigmoid)\n    gradient = gradient.round(4)\n    if np.isscalar(sigmoid):\n        sigmoid = float(sigmoid)\n        gradient = float(gradient)\n    else:\n        sigmoid = sigmoid.tolist()\n        gradient = gradient.tolist()\n    return (sigmoid, gradient)"}
{"task_id": 20, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def gradient_sigmoid(x):\n        s = sigmoid(x)\n        return s * (1 - s)\n    if isinstance(x, list):\n        x = np.array(x)\n    elif isinstance(x, (int, float)):\n        return (round(float(sigmoid(x)), 4), round(float(gradient_sigmoid(x)), 4))\n    elif isinstance(x, np.ndarray):\n        sigmoid_x = sigmoid(x).round(4).tolist()\n        gradient_x = gradient_sigmoid(x).round(4).tolist()\n        return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    gradient_x = np.round(gradient_x, 4)\n    if np.isscalar(x):\n        sigmoid_x = np.asscalar(sigmoid_x)\n        gradient_x = np.asscalar(gradient_x)\n    else:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if not np.isscalar(x):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if type(x) not in [np.ndarray, list, int, float]:\n        raise ValueError(f'Input must be a float, int, list, or numpy.ndarray, not {type(x)}')\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid = np.round(sigmoid, 4)\n    gradient = np.round(gradient, 4)\n    if np.isscalar(x):\n        return (float(sigmoid), float(gradient))\n    else:\n        return (sigmoid.tolist(), gradient.tolist())"}
{"task_id": 20, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (float, int)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    sigmoid = 1.0 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    result = (sigmoid, gradient)\n    return_result = ()\n    for elem in result:\n        if isinstance(elem, np.ndarray):\n            return_result += (elem.round(4).tolist(),)\n        else:\n            return_result += (round(elem, 4),)\n    return return_result"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0):\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    samples = len(x_train)\n    weights = np.ones(samples) / samples\n    stumps = []\n    alphas = []\n    errors = []\n    prediction = np.zeros(samples)\n    while np.sum(weights[y_train != prediction]) > epsilon:\n        weighted_error = np.inf\n        (best_stump, best_resp) = (None, None)\n        for i in range(1, samples):\n            for thresh in [(x_train[i] + x_train[i - 1]) / 2]:\n                for resp in [-1, 1]:\n                    pred = resp * np.ones(samples)\n                    pred[x_train < thresh] = resp * -1\n                    error = np.sum(weights[y_train != pred])\n                    if error < weighted_error:\n                        weighted_error = error\n                        best_stump = (thresh, resp)\n                        best_resp = pred\n        stumps.append(best_stump)\n        errors.append(weighted_error)\n        alpha = 0.5 * math.log((1.0 - weighted_error) / weighted_error)\n        alphas.append(alpha)\n        prediction = np.sign(np.sum([alpha * h for (alpha, h) in zip(alphas, [best_resp for _ in range(len(x_train))])], axis=0))\n        weights = weights * np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n    prediction = np.zeros(len(x_test))\n    for (alpha, stump, _) in zip(alphas, stumps, errors):\n        stump_predict = np.ones(len(x_test))\n        (thresh, resp) = stump\n        stump_predict[x_test < thresh] = -resp\n        prediction += alpha * stump_predict\n    return [int(np.sign(p)) for p in prediction]"}
{"task_id": 21, "completion_id": 1, "solution": "import numpy as np\nimport math\nclass AdaBoost:\n\n    def __init__(self):\n        self.alphas = []\n        self.stumps = []\n\n    def fit(self, X, y, epsilon=0.0):\n        weights = np.ones(len(y)) / len(y)\n        while np.sum(weights * np.not_equal(y, self.predict(X))) >= epsilon:\n            (err_min, theta_min, d_min, pred_min) = (np.inf, None, None, None)\n            for theta in np.sort(X):\n                for d in [0, 1]:\n                    pred = np.ones(len(y))\n                    pred[X <= theta] = -1 if d == 0 else 1\n                    err = np.sum(weights * np.not_equal(y, pred))\n                    if err < err_min:\n                        (err_min, theta_min, d_min, pred_min) = (err, theta, d, pred)\n            alpha = 0.5 * math.log((1 - err_min) / (err_min + 1e-10))\n            self.alphas.append(alpha)\n            self.stumps.append((theta_min, d_min))\n            weights *= np.exp(-alpha * np.not_equal(y, pred_min))\n            weights /= np.sum(weights)\n\n    def predict(self, X):\n        y_pred = np.ones(len(X))\n        for (alpha, (theta, d)) in zip(self.alphas, self.stumps):\n            pred = np.ones(len(X))\n            pred[X <= theta] = -1 if d == 0 else 1\n            y_pred += alpha * pred\n        return 2 * (y_pred > 0) - 1\ndef adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.0):\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    model = AdaBoost()\n    model.fit(x_train, y_train, epsilon)\n    return model.predict(x_test).tolist()"}
{"task_id": 21, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    train_data = list(zip(x_train, y_train))\n    train_data.sort()\n    weighted_labels = [element[1] * sample[1] for (sample, element) in zip(train_data, train_error_rates)]\n    err = (sum(weighted_labels) <= 0).astype(int)\n    train_err = np.sum(np.abs(np.array(y_train) - np.array(err)))\n    return err"}
{"task_id": 21, "completion_id": 3, "solution": "import numpy as np\ndef find_error_rate(weights, prediction, actual):\n    return np.sum(weights[prediction != actual])\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or -1).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or -1) for every value in *x_test*.\n    \"\"\"\n    (x_train, y_train, x_test) = (np.array(x_train), np.array(y_train), np.array(x_test))\n    n_train_samples = x_train.shape[0]\n    n_test_samples = x_test.shape[0]\n    predictions = np.zeros((n_test_samples, n_train_samples))\n    train_sorted_idx = np.argsort(x_train)\n    weights = np.full(n_train_samples, 1 / n_train_samples)\n    weak_classifiers = []\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        for i in range(n_train_samples - 1):\n            if (y_train[train_sorted_idx[i]] == 1) == (y_train[train_sorted_idx[i + 1]] == 1):\n                continue\n            stump_theta = (x_train[train_sorted_idx[i]] + x_train[train_sorted_idx[i + 1]]) / 2\n            pred = (2 * (x_train[train_sorted_idx] > stump_theta) - 1).astype(int)\n            error = find_error_rate(weights, pred, y_train[train_sorted_idx])\n            if error < min_error:\n                min_error = error\n                best_stump = (stump_theta, 1) if y_train[train_sorted_idx[i]] == 1 else (stump_theta, 0)\n        if min_error < epsilon or min_error >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-08))\n        weights *= np.exp(-alpha * y_train[train_sorted_idx] * pred)\n        weights /= np.sum(weights)\n        weak_classifiers.append((best_stump, alpha))\n    for (stump, alpha) in weak_classifiers:\n        (theta, d) = stump\n        pred = 2 * ((x_test > theta) ^ d) - 1\n        predictions += alpha * pred\n    final_pred = np.sign(predictions)\n    return final_pred.astype(int).tolist()"}
{"task_id": 21, "completion_id": 4, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    sorted_data = sorted(zip(x_train, y_train))\n    (x_train, y_train) = zip(*sorted_data)\n    x_train = list(x_train)\n    y_train = list(y_train)\n    weights = np.ones(len(x_train)) / len(x_train)\n    weights_cum_sum = weights.cumsum()\n    weak_classifiers = []\n    for d in range(2):\n        for i in range(len(x_train) - 1):\n            if d == 0:\n                thresh = (x_train[i] + x_train[i + 1]) / 2\n                predictions = [-1 if xi <= thresh else 1 for xi in x_train]\n            else:\n                thresh = (x_train[i] + x_train[i + 1]) / 2\n                predictions = [1 if xi > thresh else -1 for xi in x_train]\n            misclassified_indices = np.where(np.array(y_train) != np.array(predictions))[0]\n            total_misclassified_weight = weights[misclassified_indices].sum()\n            error = total_misclassified_weight / weights.sum()\n            if error < epsilon:\n                break\n            weak_classifiers.append((d, thresh, error))\n    weak_classifiers.sort(key=lambda x: x[2])\n\n    def classify(x_test, d, thresh):\n        if d == 0:\n            return [-1 if xi <= thresh else 1 for xi in x_test]\n        else:\n            return [1 if xi > thresh else -1 for xi in x_test]\n    predictions_test = []\n    for (d, thresh, error) in weak_classifiers:\n        preds = classify(x_test, d, thresh)\n        predictions_test.append(preds)\n    final_predictions = np.sign(np.sum(predictions_test, axis=0))\n    return final_predictions.tolist()\nx_train = [1, 2, 3, 4, 5]\ny_train = [-1, -1, 1, 1, 1]\nx_test = [1, 2, 3, 4, 5]"}
{"task_id": 21, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    data = sorted(zip(x_train, y_train))\n    (x_train, y_train) = zip(*data)\n    n = len(x_train)\n    weights = np.ones(n) / n\n    preds = np.zeros(n)\n    ensemble = []\n    e = float('inf')\n    while e > epsilon:\n        all_errs = []\n        thetas = []\n        ds = []\n        for i in range(n - 1):\n            thetas.append((x_train[i] + x_train[i + 1]) / 2)\n            ds.append(0)\n            all_errs.append(np.sum(weights[(x_train < thetas[-1]) != (y_train == 1)]))\n            ds.append(1)\n            thetas.append((x_train[i] + x_train[i + 1]) / 2)\n            all_errs.append(np.sum(weights[(x_train > thetas[-1]) != (y_train == 1)]))\n        j = np.argmin(all_errs)\n        e = all_erras[j]\n        preds = preds + ds[j] * ((x_train < thetas[j]) * 2 - 1)\n        weights = weights * np.exp(-ds[j] * y_train * preds)\n        weights = weights / np.sum(weights)\n        ensemble.append((ds[j], thetas[j]))\n    test_preds = np.zeros(len(x_test))\n    for (d, theta) in ensemble:\n        test_preds += d * ((np.array(x_test) < theta) * 2 - 1)\n    return [1 if p > 0 else -1 for p in test_preds]"}
{"task_id": 21, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    m = len(x_train)\n    weights = np.ones(m) / m\n    alpha = []\n    h = []\n    train_errors = []\n    while True:\n        (x_train, y_train, weights) = zip(*sorted(zip(x_train, y_train, weights)))\n        x_train = list(x_train)\n        y_train = list(y_train)\n        weights = list(weights)\n        stumps = []\n        for i in range(1, m):\n            theta = (x_train[i - 1] + x_train[i]) / 2\n            for d in [0, 1]:\n                err = sum((weights[j] for j in range(m) if d == 0 and x_train[j] <= theta and (y_train[j] == 1) or (d == 1 and x_train[j] > theta and (y_train[j] == -1))))\n                stumps.append((d, theta, err))\n        (d, theta, err) = min(stumps, key=lambda x: x[2])\n        if err > (1 - epsilon) * sum(weights):\n            break\n        a = 0.5 * np.log((1 - err) / err)\n        alpha.append(a)\n        h.append((d, theta))\n        weights = [weights[j] * np.exp(-a * y_train[j] * (d == 0 and x <= theta or (d == 1 and x > theta))) for (j, x) in enumerate(x_train)]\n        weights /= sum(weights)\n        train_error = sum((weights[j] for j in range(m) if d == 0 and x_train[j] <= theta and (y_train[j] == 1) or (d == 1 and x_train[j] > theta and (y_train[j] == -1))))\n        train_errors.append(train_error)\n        if train_error <= epsilon:\n            break\n    predictions = []\n    for x in x_test:\n        prediction = sum((a * (d == 0 and x <= theta or (d == 1 and x > theta)) for (d, theta, a) in zip(h, alpha)))\n        predictions.append(1 if prediction >= 0 else -1)\n    return predictions"}
{"task_id": 21, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    length = len(x_train)\n    x_train = np.array(sorted(x_train))\n    y_train = np.array(y_train)\n    weights = np.ones(length) / length\n    stumps = []\n    alphas = []\n    error = 1.0\n    while error > epsilon:\n        minimum = float('inf')\n        best_stump = None\n        best_alpha = None\n        best_prediction = None\n        for i in range(1, length):\n            for direction in ['<', '>']:\n                threshold = (x_train[i - 1] + x_train[i]) / 2\n                prediction = np.ones(length)\n                prediction[x_train < threshold if direction == '<' else x_train > threshold] = -1\n                error = np.sum(weights[prediction != y_train])\n                if error < minimum:\n                    minimum = error\n                    best_stump = (threshold, direction)\n                    best_prediction = prediction.copy()\n        alpha = 0.5 * math.log((1 - minimum) / minimum)\n        weights *= np.exp(-alpha * y_train * best_prediction)\n        weights /= np.sum(weights)\n        error = np.sum(weights[x_train >= y_train])\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    predictions = []\n    for x in x_test:\n        prediction = 0\n        for (stump, alpha) in zip(stumps, alphas):\n            (threshold, direction) = stump\n            prediction += alpha * (1 if x < threshold and direction == '<' else -1 if x > threshold and direction == '>' else 1)\n        predictions.append(1 if prediction >= 0 else -1)\n    return predictions"}
{"task_id": 21, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n\n    def prediction_stump(weight, s_neg, s_pos, theta):\n        return (np.sum(weight[:s_neg] * (x_train[:s_neg] <= theta)) + np.sum(weight[s_neg:s_pos] * (x_train[s_neg:s_pos] > theta))) / np.sum(weight)\n\n    def compute_err(pred, true):\n        return np.sum(weight * np.abs(pred != true)) / np.sum(weight)\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    sort_idx = np.argsort(x_train)\n    (x_train, y_train) = (x_train[sort_idx], y_train[sort_idx])\n    n_sample = len(x_train)\n    weight = np.ones(n_sample) / n_sample\n    threshold = 0.0\n    minimum_error = 10000000000.0\n    selected_pred = 0\n    alpha = 1.0\n    for i in range(1, n_sample):\n        (split_neg, split_pos) = (i - 1, i)\n        for d in [0, 1]:\n            for s in [split_neg, split_pos]:\n                for theta in [x_train[s] - 0.5, x_train[s] + 0.5]:\n                    pred = (2 * d - 1) * ((x_train <= theta).astype(int) * 2 - 1)\n                    err = compute_err(pred, y_train)\n                    if err < minimum_error:\n                        minimum_error = err\n                        (threshold, selected_pred, direction) = (theta, pred, d)\n    if minimum_error <= epsilon:\n        return [(2 * direction - 1) * ((x >= threshold).astype(int) * 2 - 1) for x in x_test]\n    alpha = 0.5 * np.log((1.0 - minimum_error) / minimum_error)\n    weight = weight * np.exp(-alpha * selected_pred * y_train)\n    weight = weight / np.sum(weight)\n    vec_result = [(2 * direction - 1) * ((x_test[i] <= threshold).astype(int) * 2 - 1) for i in range(len(x_test))]\n    return vec_result"}
{"task_id": 21, "completion_id": 9, "solution": "def adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n\n    def decision_stump(x_train, y_train, weights):\n        x_train = np.array(x_train)\n        y_train = np.array(y_train)\n        sorted_indices = np.argsort(x_train)\n        sorted_x = x_train[sorted_indices]\n        sorted_y = y_train[sorted_indices]\n        weighted_errors = np.zeros(len(y_train) - 1)\n        thresholds = (sorted_x[1:] + sorted_x[:-1]) / 2\n        for (i, threshold) in enumerate(thresholds):\n            predictions = (sorted_x > threshold) * 2 - 1\n            weighted_errors[i] = np.sum(weights[sorted_indices[:-1]] * (predictions != sorted_y))\n        i_best = np.argmin(weighted_errors)\n        threshold_best = thresholds[i_best]\n        err_best = weighted_errors[i_best] / np.sum(weights)\n        return (threshold_best, (err_best > 0.5) * 2 - 1, err_best)\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    err = np.inf\n    while err > epsilon:\n        (threshold, h, err) = decision_stump(x_train, y_train, weights)\n        alpha = 0.5 * math.log((1 - err) / err)\n        weights *= np.exp(-alpha * np.array([h] * n_samples) * y_train)\n        weights /= np.sum(weights)\n        stumps.append(threshold)\n        alphas.append(alpha)\n\n    def predict(x):\n        return sum((alpha * (2 * (x < stump) - 1) for (stump, alpha) in zip(stumps, alphas)))\n    return [2 * (predict(x) > 0) - 1 for x in x_test]"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    norms = np.linalg.norm(X_train[:, np.newaxis] - X_test, axis=-1)\n    radial_basis = np.exp(-gamma * norms ** 2)\n    g_z = np.sum(alpha[:, None] * y_train[:, None] * radial_basis, axis=0) + b\n    return [1 if g > 0 else -1 for g in g_z]"}
{"task_id": 25, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = np.sum(X_train ** 2, axis=1)[:, None] + np.sum(X_test ** 2, axis=1)[None, :] - 2 * np.dot(X_train, X_test.T)\n    kernel_matrix = np.exp(-gamma * distances)\n    predictions = np.dot(np.diag(y_train * alpha), kernel_matrix) + b\n    return np.sign(predictions).tolist()"}
{"task_id": 25, "completion_id": 2, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = cdist(X_test, X_train, 'sqeuclidean')\n    exponent = np.exp(-gamma * distances.T)\n    result = alpha * y_train @ exponent + b\n    pred_labels = [1 if r >= 0 else -1 for r in result]\n    return pred_labels"}
{"task_id": 25, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    pairwise_distances = np.sum(X_train ** 2, axis=1)[:, np.newaxis] + np.sum(X_test ** 2, axis=1) - 2 * X_train.dot(X_test.T)\n    kernel_matrix = np.exp(-gamma * pairwise_distances)\n    decision_function = np.dot(kernel_matrix.T, alpha * y_train) + b\n    predicted_labels = [1 if df >= 0 else -1 for df in decision_function]\n    return predicted_labels"}
{"task_id": 25, "completion_id": 4, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = cdist(X_train, X_test, 'sqeuclidean')\n    kernel_values = np.exp(-gamma * distances)\n    decision_function_values = np.dot(y_train * alpha, kernel_values) + b\n    predictions = [1 if value >= 0 else -1 for value in decision_function_values]\n    return predictions"}
{"task_id": 25, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    pairwise_diff = X_train[None] - X_test[:, None]\n    kernel_values = np.exp(-gamma * np.sum(pairwise_diff ** 2, axis=-1))\n    g_values = np.dot(kernel_values, y_train * alpha) + b\n    predictions = [1 if g >= 0 else -1 for g in g_values]\n    return predictions"}
{"task_id": 25, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = np.sqrt(np.sum(X_test[:, np.newaxis, :] ** 2, axis=-1) + np.sum(X_train ** 2, axis=-1) - 2 * np.dot(X_test, X_train.T))\n    kernel = np.exp(-gamma * distances ** 2)\n    decision_function = np.sum(alpha * y_train * kernel, axis=1) + b\n    y_pred = [1 if sample > 0 else -1 for sample in decision_function]\n    return y_pred"}
{"task_id": 25, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    predictions = []\n    for z in X_test:\n        kernel_output = alpha * y_train * np.exp(-gamma * np.sum((X_train - z) ** 2, axis=1))\n        g = np.sum(kernel_output) + b\n        prediction = np.sign(g)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 25, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    predictions = []\n    for z in X_test:\n        g_z = sum(alpha * y_train * np.exp(-gamma * np.linalg.norm(X_train - z, axis=1) ** 2)) + b\n        predictions.append(1 if g_z >= 0 else -1)\n    return predictions"}
{"task_id": 25, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    K = np.exp(-gamma * np.sum(X_train ** 2, axis=1)[:, None] - 2 * X_train.dot(X_test.T) + np.sum(X_test ** 2, axis=1))\n    g = np.dot(y_train * alpha, K) + b\n    return [1 if g_i >= 0 else -1 for g_i in g]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    if k < 1 or k > min(X.shape):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    S = np.diag(S)\n    (Uk, Sk, Vtk) = (U[:, :k], S[:k, :k], Vt[:k, :])\n    X_hat = np.dot(np.dot(Uk, Sk), Vtk)\n    mse = ((X - X_hat) ** 2).mean()\n    X_hat = X_hat.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 1, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float] | int:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float] | int\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(np.shape(X)):\n        return -1\n    X_np = np.array(X)\n    (U, s, VT) = np.linalg.svd(X_np, full_matrices=False)\n    Sigma = np.zeros((U.shape[0], VT.shape[0]))\n    Sigma[:k, :k] = np.diag(s[:k])\n    X_hat = np.dot(U, np.dot(Sigma, VT))\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat = X_hat.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 2, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if not 1 <= k <= min(X.shape):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    s[k:] = 0\n    X_hat = U @ np.diag(s) @ Vt\n    mse = ((X - X_hat) ** 2).mean()\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 3, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(len(X), len(X[0])):\n        return -1\n    X = np.array(X)\n    (U, s, VT) = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((len(X), len(X[0])))\n    S[:k, :k] = np.diag(s[:k])\n    X_hat = np.dot(U, np.dot(S, VT))\n    mse = ((X - X_hat) ** 2).mean()\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 4, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(np.shape(X)):\n        return -1\n    X_raw = np.array(X)\n    (U, sigma, VT) = np.linalg.svd(X_raw, full_matrices=False)\n    Sigma = np.diag(sigma[:k])\n    X_hat = np.dot(U[:, :k], np.dot(Sigma, VT[:k, :]))\n    mse = ((X_raw - X_hat) ** 2).mean()\n    return (X_hat.round(4).tolist(), round(mse, 4))"}
{"task_id": 28, "completion_id": 5, "solution": "import numpy as np\ndef linear_autoencoder(X, k):\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    (m, n) = np.shape(X)\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    X_hat = np.dot(U[:, :k] * S[:k], Vt[:k, :])\n    residuals = X - X_hat\n    mse = np.mean(residuals ** 2)\n    X_hat = [[round(i, 4) for i in row] for row in X_hat]\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 6, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"\n    Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((m, n))\n    S[:k, :k] = np.diag(s[:k])\n    X_hat = U.dot(S).dot(Vt)\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = [[round(val, 4) for val in row] for row in X_hat]\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 7, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= min(len(X), len(X[0])):\n        return -1\n    X = np.array(X)\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((len(X), len(X[0])))\n    S[:k, :k] = np.diag(s[:k])\n    X_hat = U.dot(S).dot(Vt)\n    mse = ((X - X_hat) ** 2).mean()\n    return ([[round(val, 4) for val in row] for row in X_hat], round(mse, 4))"}
{"task_id": 28, "completion_id": 8, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and \n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        the nearest 4th decimal.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    if k < 1 or k > min(X.shape):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((len(U), len(Vt)))\n    S[:k, :k] = np.diag(s[:k])\n    X_hat = np.dot(U, np.dot(S, Vt))\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 9, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    if not 1 <= k <= min(X.shape):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    (U, s, Vt) = (U[:, :k], s[:k], Vt[:k, :])\n    X_hat = np.dot(U * s, Vt)\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = np.round(mse, 4)\n    return (X_hat, mse)\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\nclass Stump:\n\n    def __init__(self, split, c1, c2):\n        self.split = split\n        self.c1 = c1\n        self.c2 = c2\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    assert len(x_train.shape) == 1 and len(y_train.shape) == 1\n    assert epsilon >= 0\n    residuals = y_train\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        best_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for split in np.sort(np.unique(np.around((x_train[:-1] + x_train[1:]) / 2, 4)))[::-1]:\n            c1 = np.mean(residuals[x_train <= split])\n            c2 = np.mean(residuals[x_train > split])\n            y_pred = c1 * (x_train <= split) + c2 * (x_train > split)\n            rss = np.sum((residuals - y_pred) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        residuals = residuals - best_c1 * (x_train <= best_split) - best_c2 * (x_train > best_split)\n        stumps.append(Stump(best_split, best_c1, best_c2))\n    y_query = sum((s.c1 if x_query <= s.split else s.c2 for s in stumps))\n    return round(y_query, 4)"}
{"task_id": 29, "completion_id": 1, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    ind = np.argsort(x_train)\n    sorted_x_train = x_train[ind]\n    sorted_y_train = y_train[ind]\n    split_candidates = (sorted_x_train[1:] + sorted_x_train[:-1]) / 2.0\n    residuals = sorted_y_train\n    constants = []\n    while np.sum(residuals ** 2) > epsilon:\n        min_rss = np.inf\n        best_split = None\n        for s in split_candidates:\n            less_indices = sorted_x_train <= s\n            greater_indices = sorted_x_train > s\n            c1 = np.mean(residuals[less_indices])\n            c2 = np.mean(residuals[greater_indices])\n            predicted_residuals = c1 * less_indices + c2 * greater_indices\n            rss = np.sum((predicted_residuals - residuals) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = (s, c1, c2)\n        (s, c1, c2) = best_split\n        constants.append((s, c1, c2))\n        residuals = np.where(sorted_x_train <= s, c1, c2)\n    final_prediction = sum((c1 if x_query <= s else c2 for (s, c1, c2) in constants))\n    return round(final_prediction, 4)\nx_train = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny_train = [1, 1.5, 1.8, 3, 4.5, 5.2, 6, 7.5, 8.5]\nx_query = 7.3"}
{"task_id": 29, "completion_id": 2, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    sorted_indices = np.argsort(x_train)\n    (x_train, y_train) = (x_train[sorted_indices], y_train[sorted_indices])\n    current_pred = np.mean(y_train)\n    residuals = y_train - current_pred\n    split_points = [(x_train[i] + x_train[i + 1]) / 2 for i in range(len(x_train) - 1)]\n    while np.sum(residuals ** 2) > epsilon:\n        (min_rss, opt_split, opt_consts) = (float('inf'), None, None)\n        for split in split_points:\n            for const_1 in np.linspace(np.min(residuals), np.max(residuals), 100):\n                const_2 = np.mean(residuals[x_train > split])\n                rss = np.sum((y_train[(x_train <= split) & (residuals - const_1 > 0)] - const_1) ** 2) + np.sum((y_train[(x_train > split) & (residuals - const_2 > 0)] - const_2) ** 2)\n                if rss < min_rss:\n                    (min_rss, opt_split, opt_consts) = (rss, split, (const_1, const_2))\n        current_pred += opt_consts[0] * (x_train <= opt_split) + opt_consts[1] * (x_train > opt_split)\n        residuals = y_train - current_pred\n    final_pred = opt_consts[0] * (x_query <= opt_split) + opt_consts[1] * (x_query > opt_split)\n    return round(float(final_pred), 4)"}
{"task_id": 29, "completion_id": 3, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_idx = np.argsort(x_train)\n    x_train = x_train[sort_idx]\n    y_train = y_train[sort_idx]\n    residuals = y_train\n    predictions = np.zeros_like(y_train)\n    rss = np.sum(residuals ** 2)\n    while rss > epsilon:\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2\n        (min_rss, min_split, min_consts) = (np.inf, None, (None, None))\n        for split in candidate_splits:\n            left_idx = x_train <= split\n            right_idx = ~left_idx\n            c1 = np.mean(residuals[left_idx])\n            c2 = np.mean(residuals[right_idx])\n            predictions[left_idx] = c1\n            predictions[right_idx] = c2\n            rss = np.sum((y_train - predictions) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                min_split = split\n                min_consts = (c1, c2)\n        split_idx = np.searchsorted(x_train, min_split)\n        predictions[:split_idx] = min_consts[0]\n        predictions[split_idx:] = min_consts[1]\n        residuals = y_train - predictions\n        rss = min_rss\n    split_idx = np.searchsorted(x_train, x_query)\n    if split_idx == 0:\n        prediction = min_consts[0]\n    elif split_idx == len(x_train):\n        prediction = min_consts[1]\n    else:\n        prediction = min_consts[0] if x_query <= min_split else min_consts[1]\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef predict_boosting_tree(x_train: List[float] | np.ndarray, y_train: List[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    split_candidates = (x_train[:-1] + x_train[1:]) / 2\n    residuals = y_train.copy()\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        min_rss = np.inf\n        best_stump = None\n        for split in split_candidates:\n            left_mask = x_train <= split\n            right_mask = ~left_mask\n            left_residuals = residuals[left_mask]\n            right_residuals = residuals[right_mask]\n            c1 = np.mean(left_residuals)\n            c2 = np.mean(right_residuals)\n            predicted_residuals = np.concatenate([left_residuals - c1, right_residuals - c2])\n            rss = np.sum(predicted_residuals ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_stump = (split, c1, c2)\n        stumps.append(best_stump)\n        (split, c1, c2) = best_stump\n        predicted_residuals = np.where(x_train <= split, c1, c2)\n        residuals = y_train - predicted_residuals\n    prediction = sum((c1 if x_query <= split else c2 for (split, c1, c2) in stumps))\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 5, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    if type(x_train) != np.ndarray:\n        x_train = np.array(x_train)\n    if type(y_train) != np.ndarray:\n        y_train = np.array(y_train)\n    ind_sort = np.argsort(x_train)\n    x_train = x_train[ind_sort]\n    y_train = y_train[ind_sort]\n    residuals = y_train.copy()\n    costs = np.zeros_like(y_train)\n    split_points = (x_train[1:] + x_train[:-1]) / 2\n    total_rss = np.sum(residuals ** 2)\n    while total_rss > epsilon:\n        for sp in split_points:\n            costs_temp = np.where(x_train > sp, residuals.mean(), 0)\n            costs_temp += np.where(x_train <= sp, residuals.mean(), 0)\n            if costs_temp < total_rss:\n                costs = costs_temp\n                total_rss = costs_temp\n                best_sp = sp\n        residuals = y_train - costs\n    prediction = np.sum(np.where(x_query > best_sp, costs.mean(), 0))\n    prediction += np.sum(np.where(x_query <= best_sp, costs.mean(), 0))\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 6, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    split_points = [(x1 + x2) / 2 for (x1, x2) in zip(x_train, x_train[1:])]\n    residuals = y_train.copy()\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        rss_best = np.inf\n        c1_best = c2_best = None\n        split_best = None\n        for split in split_points:\n            residuals_left = residuals[x_train <= split]\n            residuals_right = residuals[x_train > split]\n            c1 = np.mean(residuals_left)\n            c2 = np.mean(residuals_right)\n            rss = np.sum((residuals - c1) ** 2 * (x_train <= split)) + np.sum((residuals - c2) ** 2 * (x_train > split))\n            if rss < rss_best:\n                rss_best = rss\n                c1_best = c1\n                c2_best = c2\n                split_best = split\n        stumps.append((split_best, c1_best, c2_best))\n        residuals = residuals - c1_best * (x_train <= split_best) - c2_best * (x_train > split_best)\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        prediction += c1 * (x_query <= split) + c2 * (x_query > split)\n    return np.round(prediction, 4)"}
{"task_id": 29, "completion_id": 7, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    residuals = y_train.copy()\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    ensemble = []\n    while np.sum(residuals ** 2) > epsilon:\n        min_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            y_residual_s_le = residuals[x_train <= s]\n            y_residual_s_gt = residuals[x_train > s]\n            c1 = np.mean(y_residual_s_le) if len(y_residual_s_le) > 0 else 0\n            c2 = np.mean(y_residual_s_gt) if len(y_residual_s_gt) > 0 else 0\n            rss = np.sum((residuals - (c1 * (x_train <= s) + c2 * (x_train > s))) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble.append((best_split, best_c1, best_c2))\n        residuals = residuals - (best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split))\n    prediction = sum((c1 * (x_query <= s) + c2 * (x_query > s) for (s, c1, c2) in ensemble))\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 8, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    candidate_splits = (x_train[:-1] + x_train[1:]) / 2\n    residuals = y_train\n    total_rss = float('inf')\n    learnt_stumps = []\n    while total_rss > epsilon:\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in candidate_splits:\n            c1 = np.mean(residuals[x_train <= s])\n            c2 = np.mean(residuals[x_train > s])\n            rss = np.sum((residuals - (c1 * (x_train <= s) + c2 * (x_train > s))) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        learnt_stumps.append((best_split, best_c1, best_c2))\n        total_rss = min_rss\n        residuals = y_train - (best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split))\n    query_preds = sum((c1 * (x_query <= s) + c2 * (x_query > s) for (s, c1, c2) in learnt_stumps))\n    return round(query_preds, 4)"}
{"task_id": 29, "completion_id": 9, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    current_predictions = np.full_like(y_train, np.mean(y_train))\n    residuals = y_train - current_predictions\n    split_values = []\n    split_predictions = []\n    while np.sum(residuals ** 2) > epsilon:\n        current_residuals_sq_sum = np.sum(residuals ** 2)\n        best_split_value = None\n        best_split_prediction = None\n        best_residuals = None\n        for i in range(1, len(x_train)):\n            split_value = (x_train[i - 1] + x_train[i]) / 2\n            less_equal_indices = x_train <= split_value\n            greater_indices = x_train > split_value\n            c1 = np.mean(residuals[less_equal_indices])\n            c2 = np.mean(residuals[greater_indices])\n            split_prediction = current_predictions.copy()\n            split_prediction[less_equal_indices] += c1\n            split_prediction[greater_indices] += c2\n            split_residuals = y_train - split_prediction\n            if np.sum(split_residuals ** 2) < current_residuals_sq_sum:\n                best_split_value = split_value\n                best_split_prediction = split_prediction\n                best_residuals = split_residuals\n        if best_split_value is None:\n            break\n        split_values.append(best_split_value)\n        split_predictions.append(best_split_prediction)\n        current_predictions = best_split_prediction\n        residuals = best_residuals\n    predictions = np.mean(split_predictions, axis=0)\n    query_prediction = predictions[np.searchsorted(x_train, x_query)]\n    return np.round(query_prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    tensor = np.where(tensor < sparsity, 0.0, 1.0)\n    return tensor.astype(np.float64)"}
{"task_id": 34, "completion_id": 1, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a tensor of binary values, i.e., floats of 0.0 and 1.0\n\n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor\n    sparsity : float\n        The probability that a tensor entry is 1.0\n    seed : int or None\n        Optional seed for deterministic results\n\n    Returns\n    -------\n    numpy.ndarray\n        A tensor with the desired shape and sparsity,\n        filled with 0.0s and 1.0s.\n        If sparsity is outside [0,1], returns -1.\n\n    Examples\n    --------\n    random_binary_tensor((2,3), 0.3, 42)\n\n    [[0.0, 1.0, 1.0],\n     [0.0, 0.0, 0.0]]\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    tensor = np.where(tensor >= 1 - sparsity, 1.0, 0.0).astype(float)\n    return tensor"}
{"task_id": 34, "completion_id": 2, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Produce a NumPy tensor of specified shape, filled with 0.0s and 1.0s.\n    Entries of the tensor are 1.0 with probability equal to \"sparsity\" and 0.0 otherwise.\n    The function accepts a seed for reproducible results.\n    If \"sparsity\" is outside the legal range, it returns -1.\n    The output is a ``numpy.ndarray`` with floating dtype (0.0 and 1.0 values only).\n\n    Args:\n        shape (tuple[int, ...]): Desired shape of the output tensor.\n        sparsity (float): Probability of generating a 1.0. Default is 0.5.\n        seed (int, optional): Seed for reproducibility. Default is None.\n\n    Returns:\n        numpy.ndarray: Binary NumPy tensor of specified shape and sparsity.\n        -1 if sparsity is outside the legal range.\n\n    Raises:\n        ValueError: If sparsity is outside the legal range.\n\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    binary_tensor = np.random.rand(*shape) < sparsity\n    binary_tensor = binary_tensor.astype(np.float64)\n    return binary_tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 3, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a random binary tensor with the specified sparsity.\n    :param shape: a tuple representing the desired shape of the tensor.\n    :param sparsity: a float in the closed interval [0, 1].\n    :param seed: an optional seed for the random number generator.\n    :return: a NumPy ndarray with dtype=float64 and 0.0 and 1.0 values only.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_tensor = (random_tensor > threshold).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 4, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a random binary tensor\n\n    Args:\n    shape (tuple[int, ...]): The desired shape of the output tensor\n    sparsity (float): The probability that an entry of is 1.0\n    seed (int | None): An optional seed for the random generator\n\n    Returns:\n    -1 if \"sparsity\" is outside the range [0, 1]\n    A numpy.ndarray with dtype float and the prescribed shape\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = (tensor >= threshold).astype(float)\n    return tensor"}
{"task_id": 34, "completion_id": 5, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Function to generate a binary tensor of floating values\n    Args:\n        shape: the shape of the tensor to be produced\n        sparsity: the probability of generating a value of 1.0\n        seed: optional seed to make the results deterministic\n    Returns: \n        a NumPy ndarray consisting of 0.0 and 1.0\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = np.where(tensor < threshold, 0.0, 1.0)\n    return tensor"}
{"task_id": 34, "completion_id": 6, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor[tensor >= threshold] = 1.0\n    tensor[tensor < threshold] = 0.0\n    return tensor"}
{"task_id": 34, "completion_id": 7, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Function to generate a random binary tensor of specified dimensions and sparsity\n    :param: shape: desired shape of the tensor\n    :param: sparsity: probability of generating a 1.0 instead of a 0.0\n    :param: seed: optional random seed for reproducibility\n    :return: the tensor or -1 if sparsity is outside [0, 1]\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor[tensor >= threshold] = 1.0\n    tensor[tensor < threshold] = 0.0\n    return tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 8, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Produces a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The shape of the output tensor.\n    sparsity (float, optional): The probability of generating a 1.0. Defaults to 0.5.\n    seed (int | None, optional): The seed for the random number generator. Defaults to None.\n\n    Returns:\n    np.ndarray: A tensor containing only 0.0 and 1.0 values.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    rand_tensor = np.random.rand(*shape)\n    return np.where(rand_tensor < sparsity, 1.0, 0.0).astype(np.float64)"}
{"task_id": 34, "completion_id": 9, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s.\n\n    Args:\n        shape (tuple[int, ...]): The desired shape of the tensor.\n        sparsity (float, optional): The probability of generating a 1.0. Default is 0.5.\n        seed (int or None, optional): The seed for the random number generator. Default is None.\n\n    Returns:\n        An np.ndarray of the specified shape where each entry in the array is a float 0.0 or 1.0.\n        Returns -1 if sparsity is outside the range [0,1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = np.where(tensor < threshold, 0.0, 1.0)\n    return tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_index = np.argpartition(data[:, d], len(data[:, d]) // 2)[len(data[:, d]) // 2]\n    pivot_value = data[median_index, d]\n    left_indices = np.where(data[:, d] < pivot_value)[0].tolist()\n    right_indices = np.where(data[:, d] > pivot_value)[0].tolist()\n    left_indices.sort()\n    right_indices.sort()\n    return (median_index, left_indices, right_indices)"}
{"task_id": 39, "completion_id": 1, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    column = data[:, d]\n    mid = len(column) // 2\n    partitioned = np.argpartition(column, mid)\n    pivot_index = partitioned[mid]\n    left_indices = partitioned[:mid].tolist()\n    right_indices = partitioned[mid + 1:].tolist()\n    return (pivot_index, left_indices, right_indices)"}
{"task_id": 39, "completion_id": 2, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    med_idx = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = med_idx\n    left = [i for i in range(len(data)) if data[i, d] < data[pivot, d]]\n    right = [i for i in range(len(data)) if data[i, d] > data[pivot, d]]\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 3, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    median_index = np.argpartition(data[:, d], n // 2)[n // 2]\n    left_indices = [i for i in range(n) if data[i, d] < data[median_index, d]]\n    right_indices = [i for i in range(n) if data[i, d] > data[median_index, d]]\n    left_indices.sort()\n    right_indices.sort()\n    return (median_index, left_indices, right_indices)"}
{"task_id": 39, "completion_id": 4, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    column = data[:, d]\n    median_value = np.median(column)\n    pivot = np.where(column == median_value)[0][0]\n    (_, left, right) = np.partition(column, n_samples // 2)\n    left = list(np.where(column < median_value)[0])\n    right = list(np.where(column > median_value)[0])\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 5, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    subset = data[:, d]\n    pivot_index = np.argpartition(subset, len(subset) // 2)[len(subset) // 2]\n    pivot_value = data[pivot_index, d]\n    left = [i for (i, val) in enumerate(data[:, d]) if val < pivot_value]\n    right = [i for (i, val) in enumerate(data[:, d]) if val > pivot_value]\n    assert len(left) + len(right) + (len(left) + len(right) < len(data)) == len(data)\n    return (pivot_index, sorted(left), sorted(right))"}
{"task_id": 39, "completion_id": 6, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = len(data)\n    median_index = np.argpartition(data[:, d], n // 2)[n // 2]\n    left = [i for i in range(n) if data[i, d] < data[median_index, d]]\n    right = [i for i in range(n) if data[i, d] > data[median_index, d]]\n    return (median_index, left, right)"}
{"task_id": 39, "completion_id": 7, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_value = np.median(data[:, d])\n    smaller = data[:, d] < median_value\n    larger = data[:, d] > median_value\n    pivot = np.argwhere(data[:, d] == median_value)[0]\n    left = data[smaller].flatten().tolist()\n    right = data[larger].flatten().tolist()\n    return (pivot[0], sorted(left), sorted(right))"}
{"task_id": 39, "completion_id": 8, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    column = data[:, d]\n    n = len(column)\n    pivot_index = n // 2\n    pivot_value = np.partition(column, pivot_index)[pivot_index]\n    pivot_indices = np.where(column == pivot_value)[0]\n    pivot = pivot_indices[len(pivot_indices) // 2]\n    left_indices = np.where(column < pivot_value)[0]\n    left = list(left_indices)\n    right_indices = np.where(column > pivot_value)[0]\n    right = list(right_indices)\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 9, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_pos = len(data) // 2\n    partitioned_indices = np.argpartition(data[:, d], median_pos)\n    pivot = partitioned_indices[median_pos]\n    left = partitioned_indices[:median_pos].tolist()\n    right = partitioned_indices[median_pos + 1:].tolist()\n    return (pivot, sorted(left), sorted(right))"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert len(x.shape) == 1, 'x must be one-dimensional.'\n    assert stride >= 1, 'stride must be positive.'\n    assert len(x) >= frame_width, 'frame_width must be less than or equal to the length of x.'\n    n = len(x)\n    n_frames = (n - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.itemsize * stride, x.itemsize)\n    view = as_strided(x[:n_frames * stride], shape=shape, strides=strides)\n    if not writeable:\n        view.flags.writeable = False\n    return view"}
{"task_id": 40, "completion_id": 1, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If False, the returned view is read-only; if True, it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be 1-dimensional'\n    assert stride > 0, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Frame width must not be greater than the length of the input signal'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_width_bytes = x.strides[0] * frame_width\n    stride_bytes = x.strides[0] * stride\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride_bytes, x.strides[0])\n    result = as_strided(x, shape=new_shape, strides=new_strides)\n    result = result.view()\n    result.flags.writeable = writeable and x.flags.writeable\n    return result"}
{"task_id": 40, "completion_id": 2, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert len(x.shape) == 1, 'x must be one-dimensional'\n    assert stride >= 1, 'stride must be a positive integer'\n    assert x.size >= frame_width, 'x must have at least frame_width samples'\n    n_frames = (x.size - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    x = as_strided(x, shape=shape, strides=strides, writeable=writeable)\n    return x"}
{"task_id": 40, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be one-dimensional'\n    assert stride > 0, 'stride must be a positive integer'\n    assert len(x) >= frame_width, 'frame_width must be less than or equal to the length of x'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_shape = (n_frames, frame_width)\n    frame_strides = (stride * x.itemsize, x.itemsize)\n    res = as_strided(x, frame_shape, frame_strides, writeable=writeable)\n    return res"}
{"task_id": 40, "completion_id": 4, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (in samples) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride > 0, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Array length must be greater or equal to frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_strides = (stride * x.itemsize, x.itemsize)\n    x_frames = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    if not writeable:\n        x_frames.flags.writeable = False\n    return x_frames"}
{"task_id": 40, "completion_id": 5, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'The input array must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of input array must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    byte_strides = (stride * x.itemsize, x.itemsize)\n    view = as_strided(x, shape=(n_frames, frame_width), strides=byte_strides)\n    if not writeable:\n        view.flags.writeable = False\n    return view"}
{"task_id": 40, "completion_id": 6, "solution": "import numpy as np\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be 1-dimensional'\n    assert stride >= 1, 'stride must be a positive integer'\n    assert len(x) >= frame_width, 'frame width must be less than or equal to the length of x'\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * x.itemsize, x.itemsize)\n    view = np.lib.stride_tricks.as_strided(x, new_shape, new_strides)\n    view.flags.writeable = writeable\n    return view"}
{"task_id": 40, "completion_id": 7, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive number'\n    assert len(x) >= frame_width, 'Length of input array must be equal to or greater than frame width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    view = as_strided(x, shape=shape, strides=strides)\n    view.flags.writeable = writeable and x.flags.writeable\n    return view"}
{"task_id": 40, "completion_id": 8, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array x must be 1-dimensional'\n    assert stride > 0, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Frame width must not exceed the length of input array'\n    n_frames = (len(x) - frame_width) // stride + 1\n    as_strided_stride = (x.strides[0] * stride, x.strides[0])\n    view = as_strided(x, shape=(n_frames, frame_width), strides=as_strided_stride)\n    view.flags.writeable = writeable and x.flags.writeable\n    return view"}
{"task_id": 40, "completion_id": 9, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, f'Input array must be one-dimensional, got shape={x.shape}.'\n    assert stride > 0, f'Stride must be positive, got stride={stride}.'\n    assert len(x) >= frame_width, f'Input array must be at least as long as frame_width, got len(x)={len(x)} and frame_width={frame_width}.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = x.strides[:-1] + (stride * x.strides[-1],)\n    result = as_strided(x, shape=shape, strides=strides)\n    result.flags.writeable = writeable and x.flags.writeable\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"\n    Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not ((X >= 0).all() and (X <= 1).all()):\n        return False\n    if not np.allclose(np.sum(X, axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 1, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if X.shape[0] != X.shape[1]:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 2, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if X is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if X is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 3, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    if type(X) is list:\n        X = np.array(X)\n    if len(X.shape) != 2:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True\nX = np.array([[0.1, 0.2, 0.7], [0.2, 0.7, 0.1], [0.7, 0.1, 0.2]])"}
{"task_id": 48, "completion_id": 4, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"\n    Return True if 'X' is a row-stochastic matrix, otherwise False.\n\n    :param X: Matrix provided as a list of lists or a NumPy array.\n    :return: True if 'X' is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums)):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 5, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any((X < 0) | (X > 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 6, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(X.shape[0]), rtol=0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 7, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any((X < 0) | (X > 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 8, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        try:\n            X = np.array(X)\n        except:\n            return False\n    if not isinstance(X, np.ndarray):\n        return False\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(row_sums.shape), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 9, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    return np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-08)"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for _ in range(max_iter):\n        perm = np.random.permutation(n_samples)\n        sum_gradw = np.zeros(n_features)\n        for i in range(0, n_samples, batch_size):\n            X_batch = X[perm[i:i + batch_size]]\n            y_batch = y[perm[i:i + batch_size]]\n            gradw = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            sum_gradw += gradw\n            if np.linalg.norm(gradw) < epsilon:\n                break\n        gradw = 1 / n_samples * sum_gradw\n        s = rho * s + (1 - rho) * np.power(gradw, 2)\n        w -= eta / np.sqrt(s + eps_station) * gradw\n    return list(np.around(w, decimals=4))"}
{"task_id": 55, "completion_id": 1, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    s = np.zeros((d,))\n    w = np.zeros((d,))\n    g = np.zeros((d,))\n    for it in range(max_iter):\n        for b in range(batch_size):\n            start_idx = b * batch_size % n\n            end_idx = (b + 1) * batch_size % n\n            if start_idx > end_idx:\n                batch_range = np.r_[start_idx:n, 0:end_idx]\n            else:\n                batch_range = np.r_[start_idx:end_idx]\n            g = 1 / n * X[batch_range].T @ (X[batch_range] @ w - y[batch_range])\n            s = rho * s + (1 - rho) * g ** 2\n            w = w - eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]"}
{"task_id": 55, "completion_id": 2, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    w = np.zeros(X.shape[1])\n    s = np.zeros(X.shape[1])\n    n = X.shape[0]\n    if n < batch_size:\n        num_batches = 1\n    else:\n        num_batches = n // batch_size\n        if n % batch_size != 0:\n            num_batches += 1\n    for _ in range(max_iter):\n        perm = np.random.permutation(n)\n        for i in range(num_batches):\n            batch_idx = perm[i * batch_size:(i + 1) * batch_size]\n            X_batch = X[batch_idx]\n            y_batch = y[batch_idx]\n            g = 1 / n * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w = w - eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    w_list = list(np.round(w, 4))\n    return w_list"}
{"task_id": 55, "completion_id": 3, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    num_batches = 1 if n < batch_size else n // batch_size + 1\n    for _ in range(max_iter):\n        for i in range(num_batches):\n            start = i * batch_size\n            end = min(start + batch_size, n)\n            x_batch = X[start:end]\n            y_batch = y[start:end]\n            batch_size_used = end - start\n            g = x_batch.T @ (x_batch @ w - y_batch) / batch_size_used\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(w_i, 4) for w_i in w]"}
{"task_id": 55, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    g = np.zeros(d)\n    n_iter = 0\n    while n_iter < max_iter:\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        X = X[indices]\n        y = y[indices]\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i + batch_size]\n            y_batch = y[i:i + batch_size]\n            grad = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / (np.sqrt(s) + eps_station)\n            n_iter += 1\n            if np.linalg.norm(grad) < epsilon or n_iter >= max_iter:\n                break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 5, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    X = np.hstack([X, np.ones((X.shape[0], 1))])\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    batch_range = np.arange(batch_size)\n    for _ in range(max_iter):\n        np.random.shuffle(batch_range)\n        for start in np.arange(0, n, batch_size):\n            end = min(start + batch_size, n)\n            batch = batch_range[start:end]\n            (batch_X, batch_y) = (X[batch], y[batch])\n            grad = 1 / batch_size * batch_X.T @ (batch_X @ w - batch_y)\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / np.sqrt(s + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return [round(wi, 4) for wi in w]"}
{"task_id": 55, "completion_id": 6, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            batch_X = X[i:i + batch_size]\n            batch_y = y[i:i + batch_size]\n            g = 1 / batch_X.shape[0] * batch_X.T.dot(batch_X.dot(w) - batch_y)\n            s = rho * s + (1 - rho) * g ** 2\n            w = w - eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(i, 4) for i in w]"}
{"task_id": 55, "completion_id": 7, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            batch_range = slice(i, i + batch_size)\n            (X_batch, y_batch) = (X[batch_range], y[batch_range])\n            g = 1 / batch_size * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w = w - eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(i, 4) for i in w]"}
{"task_id": 55, "completion_id": 8, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        batch_indices = np.random.choice(n, min(batch_size, n))\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        g = 1 / n * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]"}
{"task_id": 55, "completion_id": 9, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    if batch_size < n:\n        batches = [(start, start + batch_size) for start in range(0, n, batch_size)]\n    else:\n        batches = [(0, n)]\n    for _ in range(max_iter):\n        gradients = []\n        for (start, end) in batches:\n            batch_X = X[start:end]\n            batch_y = y[start:end]\n            g = 1 / len(batch_y) * batch_X.T @ (batch_X @ w - batch_y)\n            gradients.append(g)\n        g = np.mean(gradients, axis=0)\n        s = rho * s + (1 - rho) * np.square(g)\n        w = w - eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"TODO: implement\"\"\"\n    x = np.array(x)\n    if deriv:\n        numerator = np.exp(-np.abs(x))\n        denominator = 1 + np.exp(-np.abs(x))\n        sigmoids = np.divide(numerator, denominator, out=np.zeros_like(numerator), where=denominator != 0)\n        return sigmoids.round(4).tolist() if len(sigmoids) > 1 else float(sigmoids)\n    else:\n        left = np.log1p(np.exp(-np.abs(x)))\n        right = x + np.log1p(np.exp(-np.abs(x)))\n        softpluses = np.logaddexp(left, right)\n        return softpluses.round(4).tolist() if len(softpluses) > 1 else float(softpluses)"}
{"task_id": 56, "completion_id": 1, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"SoftPlus (or exponential linear unit) activation function.\n    \n    Parameters:\n    x : float, list or numpy array of shape (n,)\n        Input values.\n    deriv : bool, optional\n        Set to True for derivative calculation, by default False.\n    \n    Returns:\n    list or float\n        Result of SoftPlus or derivative at specified x.\n    \"\"\"\n    x = np.asarray(x)\n    if deriv:\n\n        def sigmoid(x):\n            return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (np.exp(x) + 1))\n        result = sigmoid(x)\n    else:\n        result = np.log1p(np.exp(x))\n    result = np.round(result, 4)\n    if x.shape == ():\n        result = float(result)\n    else:\n        result = list(result)\n    return result"}
{"task_id": 56, "completion_id": 2, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    if not deriv:\n        if isinstance(x, (int, float)):\n            return round(np.log1p(np.exp(x)), 4)\n        return [round(np.log1p(np.exp(i)), 4) for i in x]\n    else:\n        if isinstance(x, (int, float)):\n            return round(1.0 / (1.0 + np.exp(-x)), 4)\n        return [round(1.0 / (1.0 + np.exp(-i)), 4) for i in x]"}
{"task_id": 56, "completion_id": 3, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"TODO: implement\"\"\"\n    x = np.array(x)\n    if deriv:\n        return [round(1 / (1 + np.exp(-i)), 4) for i in x]\n    else:\n        return [round(np.log1p(np.exp(i)), 4) for i in x]"}
{"task_id": 56, "completion_id": 4, "solution": "import numpy as np\nfrom scipy.special import expit\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implements SoftPlus (derivative if deriv is True) for x\"\"\"\n    x = np.array(x)\n    if deriv:\n        result = np.round(expit(x), 4)\n    else:\n        result = np.round(np.log1p(np.exp(x)), 4)\n    if result.size == 1:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 5, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    x = np.array(x)\n    if deriv:\n        return np.round(1 / (1 + np.exp(-x)), 4).tolist()\n    else:\n        return np.round(np.log(np.exp(x) + 1), 4).tolist()"}
{"task_id": 56, "completion_id": 6, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n\n    def softplus_element(x):\n        if x > 0:\n            res = x + np.log1p(np.exp(-x))\n        else:\n            res = np.log1p(np.exp(x))\n        return round(res, 4)\n\n    def sigmoid(x):\n        return np.exp(x) / (1 + np.exp(x))\n    if isinstance(x, list):\n        result = [softplus_element(i) if not deriv else round(sigmoid(i), 4) for i in x]\n    elif isinstance(x, np.ndarray):\n        result = np.vectorize(softplus_element)(x) if not deriv else np.vectorize(sigmoid)(x)\n        result = np.round(result, 4)\n    else:\n        result = softplus_element(x) if not deriv else round(sigmoid(x), 4)\n    return result"}
{"task_id": 56, "completion_id": 7, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Implements softplus function and its derivative.\n\n    Input:\n    - x: A scalar, list or numpy array of real numbers.\n    - deriv: Boolean flag, default False. If False, returns SoftPlus(x) for each element of x. \n             If True, returns the derivative of SoftPlus, i.e. the sigmoid of x.\n\n    Output:\n    - A Python list (or a single float when the input is a scalar) of rounded SoftPlus(x) (or derivative) for all elements of x.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        y = 1.0 / (1 + np.exp(-x))\n    else:\n        y = np.log1p(np.exp(x))\n    return np.round(y, 4).tolist()"}
{"task_id": 56, "completion_id": 8, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"TODO: implement\"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if deriv:\n        result = 1 / (1 + np.exp(-x))\n    else:\n        result = np.log1p(np.exp(x))\n    result = np.round(result, 4)\n    if isinstance(result, np.ndarray):\n        result = result.tolist()\n    return result"}
{"task_id": 56, "completion_id": 9, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implementation of SoftPlus and its derivative\"\"\"\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        if deriv:\n            y = 1 / (1 + np.exp(-x))\n        else:\n            y = np.log1p(np.exp(x))\n        return np.round(y, 4).tolist()\n    elif deriv:\n        return round(1 / (1 + np.exp(-x)), 4)\n    else:\n        return round(np.log1p(np.exp(x)), 4)"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom collections import Counter\nimport math\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    corpus_length = len(corpus)\n    corpus_counts = Counter(corpus)\n    sequence_length = len(sequence)\n    total_log_probability = 0\n    for i in range(sequence_length - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        prefix = tuple(ngram[:-1])\n        ngram_count = corpus.count(ngram)\n        prefix_count = corpus.count(prefix)\n        if ngram_count == 0 or prefix_count == 0:\n            return -float('inf')\n        probability = ngram_count / prefix_count\n        log_probability = math.log(probability)\n        total_log_probability += log_probability\n    return round(total_log_probability, 4)"}
{"task_id": 58, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    ngram_corpus = []\n    for i in range(N):\n        ngram_corpus += list(zip(*[corpus[j:] for j in range(i + 1)]))\n    ngram_counts = Counter(ngram_corpus)\n    sequence_ngrams = []\n    for i in range(len(sequence) - N + 1):\n        sequence_ngrams.append(tuple(sequence[i:i + N]))\n    total_log_prob = 0\n    for ngram in sequence_ngrams:\n        total_count = sum(ngram_counts.values())\n        if ngram in ngram_counts and ngram_counts[ngram] > 0:\n            prob = ngram_counts[ngram] / total_count\n            total_log_prob += np.log2(prob)\n        else:\n            return float('-inf')\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n\n    def word_sequence(sequence, gram):\n        return list(zip(*[sequence[i:] for i in range(gram)]))\n    corpus_gram = word_sequence(corpus, N) if N > 1 else corpus\n    sequence_gram = word_sequence(sequence, N) if N > 1 else sequence\n    corpus_counter = Counter(corpus_gram)\n    sequence_counter = Counter(sequence_gram)\n    total_log_prob = 0\n    for ngram in sequence_counter:\n        numerator = sequence_counter[ngram]\n        denominator = corpus_counter[ngram[:-1]] if N > 1 else len(corpus)\n        if denominator == 0:\n            return float('-inf')\n        prob = numerator / denominator\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    corpus_counter = [Counter(zip(*[corpus[i:] for i in range(N - n)])) for n in range(N)]\n    seq_counter = [Counter(zip(*[sequence[i:] for i in range(N - n)])) for n in range(N)]\n    seq_log_prob = 0\n    for (seq_cnt, corpus_cnt) in zip(seq_counter, corpus_counter):\n        for (seq, count) in seq_cnt.items():\n            prefix = seq[:-1]\n            if prefix in corpus_cnt and corpus_cnt[prefix] != 0:\n                prob = count / corpus_cnt[prefix]\n                if prob > 1e-12:\n                    seq_log_prob += np.log(prob)\n            else:\n                return float('-inf')\n    return round(seq_log_prob, 4)"}
{"task_id": 58, "completion_id": 4, "solution": "import math\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    corpus_Ngrams = [tuple(corpus[idx:idx + N]) for idx in range(len(corpus) - N + 1)]\n    sequence_Ngrams = [tuple(sequence[idx:idx + N]) for idx in range(len(sequence) - N + 1)]\n    corpus_Ngram_counts = Counter(corpus_Ngrams)\n    sequence_Ngram_counts = Counter(sequence_Ngrams)\n    total_log_prob = 0.0\n    for (seq_Ngram, seq_Ngram_count) in sequence_Ngram_counts.items():\n        if N == 1:\n            corpus_count = len(corpus)\n        else:\n            corpus_Ngram = seq_Ngram[:-1]\n            corpus_count = corpus_Ngram_counts[corpus_Ngram]\n        if corpus_count == 0 or seq_Ngram_count == 0:\n            return float('-inf')\n        prob = seq_Ngram_count / corpus_count\n        total_log_prob += math.log2(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        return float('-inf')\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    n_1gram_counter = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        n_gram = tuple(sequence[i:i + N])\n        n_1_gram = tuple(sequence[i:i + N - 1])\n        if ngram_counter[n_gram] == 0 or n_1gram_counter[n_1_gram] == 0:\n            return float('-inf')\n        prob = ngram_counter[n_gram] / n_1gram_counter[n_1_gram]\n        log_prob += np.log(prob)\n    log_prob = round(log_prob, 4)\n    return log_prob"}
{"task_id": 58, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef ngrams(input_list: List[str], N: int):\n    return list(zip(*[input_list[i:] for i in range(N)]))\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n    \"\"\"\n    corpus_ngrams = ngrams(corpus, N)\n    sequence_ngrams = ngrams(sequence, N)\n    corpus_ngram_counts = Counter(corpus_ngrams)\n    sequence_ngram_counts = Counter(sequence_ngrams)\n    if N > 1:\n        corpus_prefix_ngrams = ngrams(corpus, N - 1)\n        corpus_prefix_ngram_counts = Counter(corpus_prefix_ngrams)\n    total_log_prob = 0.0\n    for ngram in sequence_ngrams:\n        if N == 1:\n            if ngram in corpus_ngram_counts:\n                prob = corpus_ngram_counts[ngram] / len(corpus_ngrams)\n                if prob < 1e-06:\n                    return float('-inf')\n                total_log_prob += np.log(prob)\n            else:\n                return float('-inf')\n        else:\n            prefix_ngram = ngram[:-1]\n            if ngram in corpus_ngram_counts and prefix_ngram in corpus_prefix_ngram_counts:\n                prob = corpus_ngram_counts[ngram] / corpus_prefix_ngram_counts[prefix_ngram]\n                if prob < 1e-06:\n                    return float('-inf')\n                total_log_prob += np.log(prob)\n            else:\n                return float('-inf')\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nfrom collections import Counter\nimport numpy as np\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    word_pairs = [tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    n_gram_counter = Counter(word_pairs)\n    num_word_pairs = len(word_pairs)\n    if N > 1:\n        n_minus_1_grams_seq = [tuple(sequence[i:i + N - 1]) for i in range(len(sequence) - N + 2)]\n        sequence_n_grams = [tuple(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n    else:\n        n_minus_1_grams_seq = sequence\n        sequence_n_grams = sequence\n    seq_n_gram_counter = Counter(n_minus_1_grams_seq)\n    log_prob = 0.0\n    for n_gram in sequence_n_grams:\n        if seq_n_gram_counter[n_gram[:-1]] == 0 or n_gram_counter[n_gram] == 0:\n            return float('-inf')\n        else:\n            prob = n_gram_counter[n_gram] / seq_n_gram_counter[n_gram[:-1]]\n            log_prob += np.log2(prob)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n\n    def log_probs(seq: list[str], N: int):\n        ngrams = list(zip(*[seq[i:] for i in range(N)]))\n        seq_ngram_counts = Counter(ngrams)\n        corpus_ngram_counts = Counter(zip(*[corpus[i:] for i in range(N)]))\n        corpus_n1gram_counts = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n        for ngram in seq_ngram_counts:\n            numerator = seq_ngram_counts[ngram]\n            denominator = corpus_n1gram_counts[ngram[:N - 1]] if N > 1 else len(corpus)\n            if denominator == 0 or numerator == 0:\n                return float('-inf')\n            else:\n                yield np.log2(numerator / denominator)\n    if N == 1:\n        corpus_counts = Counter(corpus)\n        sequence_counts = Counter(sequence)\n        log_prob = [np.log2(sequence_counts[word] / len(corpus)) for word in sequence if sequence_counts[word] > 0]\n    else:\n        log_prob = list(log_probs(sequence, N))\n    if float('-inf') in log_prob:\n        return float('-inf')\n    else:\n        return round(sum(log_prob), 4)"}
{"task_id": 58, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef build_ngrams(corpus, N):\n    return [' '.join(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    sequence_ngrams = build_ngrams(sequence, N)\n    corpus_ngrams = build_ngrams(corpus, N)\n    ngram_counter = Counter(corpus_ngrams + sequence_ngrams)\n    ngram_prob = {ngram: ngram_counter[ngram] / len(corpus_ngrams) for ngram in corpus_ngrams}\n    log_prob = 0\n    for ngram in sequence_ngrams:\n        if ngram_counter[ngram] == 0 or ngram_prob[ngram] == 0:\n            return float('-inf')\n        else:\n            log_prob += np.log2(ngram_prob[ngram])\n    return round(log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef generate_polynomial_features(X: np.ndarray, degree: int) -> np.ndarray:\n    \"\"\"Generate polynomial features up to degree.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        One-dimensional input samples.\n    degree : int\n        Highest exponent of x to include.\n\n    Returns\n    -------\n    np.ndarray\n        The polynomial features of X.\n    \"\"\"\n    X_poly = np.empty((X.shape[0], degree))\n    for i in range(degree):\n        X_poly[:, i] = X ** (i + 1)\n    return X_poly\ndef soft_threshold(rho: float, lamb: float) -> float:\n    \"\"\"Soft threshold function.\n\n    Parameters\n    ----------\n    rho : float\n        Input value for soft threshold function.\n    lamb : float\n        Regularisation strength.\n\n    Returns\n    -------\n    float\n        The thresholded value of rho.\n    \"\"\"\n    if rho < -lamb:\n        return rho + lamb\n    elif rho > lamb:\n        return rho - lamb\n    else:\n        return 0\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    (X, y) = (np.array(X), np.array(y))\n    X_poly = generate_polynomial_features(X, degree)\n    num_features = X_poly.shape[1]\n    weights = np.zeros(num_features)\n    for _ in range(n_iterations):\n        prev_weights = weights.copy()\n        for j in range(num_features):\n            if j == 0:\n                weights[j] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]) + weights[0])\n            else:\n                rho = np.dot(X_poly[:, j], y - (np.dot(X_poly, weights) - weights[j] * X_poly[:, j]))\n                weights[j] = soft_threshold(rho, reg_factor) / np.dot(X_poly[:, j], X_poly[:, j])\n        max_change = np.max(np.abs(weights - prev_weights))\n        if max_change < tol:\n            break\n    return [round(weight, 4) for weight in weights]"}
{"task_id": 62, "completion_id": 1, "solution": "import numpy as np\ndef lasso_regression(X: list | 'np.ndarray', y: list | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n\n    def expand(x, degree):\n        return np.array([x ** i for i in range(degree + 1)]).T\n\n    def soft_threshold(rho, lam):\n        if rho < -lam:\n            return rho + lam\n        elif rho > lam:\n            return rho - lam\n        else:\n            return 0\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    X_poly = np.apply_along_axis(expand, 1, X, degree)\n    weights = np.zeros((degree + 1, 1))\n    weights_history = []\n    for _ in range(n_iterations):\n        for j in range(degree + 1):\n            old_weight_j = weights[j]\n            if j == 0:\n                weights[j] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]) + old_weight_j * X_poly[:, 0])\n            else:\n                rho = np.dot(X_poly[:, j].T, y - (np.dot(X_poly[:, :j] * weights[:j], X_poly[:, j]) + np.dot(X_poly[:, j + 1:], weights[j + 1:]) + old_weight_j * X_poly[:, j]))\n                weights[j] = soft_threshold(rho, reg_factor) / np.dot(X_poly[:, j].T, X_poly[:, j])\n            weights_history.append(np.copy(weights))\n            if np.all(np.abs(weights_history[-1] - weights_history[-2]) < tol):\n                return weights.flatten().round(4).tolist()\n    return weights.flatten().round(4).tolist()"}
{"task_id": 62, "completion_id": 2, "solution": "import numpy as np\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    X = np.array(X)\n    y = np.array(y)\n    X_poly = np.ones((len(X), 1))\n    for deg in range(1, degree + 1):\n        X_poly = np.hstack((X_poly, X[:, np.newaxis] ** deg))\n    w = np.zeros(degree + 1)\n    w[0] = np.mean(y)\n    for _ in range(n_iterations):\n        last_w = np.copy(w)\n        for j in range(degree + 1):\n            if j == 0:\n                w[0] = np.mean(y - np.dot(X_poly[:, 1:], w[1:]))\n            else:\n                xj = X_poly[:, j]\n                p = y - (np.dot(X_poly[:, :j], w[:j]) + np.dot(X_poly[:, j + 1:], w[j + 1:])) + w[j] * xj\n                w[j] = np.sign(np.dot(xj, p)) * np.maximum(0, np.abs(np.dot(xj, p)) - reg_factor) / np.sum(xj ** 2)\n        if np.max(np.abs(w - last_w)) < tol:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 62, "completion_id": 3, "solution": "import numpy as np\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    (X, y) = (np.array(X), np.array(y))\n    X_poly = np.power(X[:, np.newaxis], range(degree + 1))\n    weights = np.zeros(degree + 1)\n    residuals = y - np.dot(X_poly, weights)\n    for _ in range(n_iterations):\n        max_change = 0\n        weights[0] = np.mean(residuals)\n        for j in range(1, degree + 1):\n            pre_update_weight = weights[j]\n            rho = np.dot(X_poly[:, j], residuals)\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(X_poly[:, j], X_poly[:, j])\n            max_change = max(max_change, abs(weights[j] - pre_update_weight))\n        if max_change < tol:\n            break\n        residuals = y - np.dot(X_poly, weights)\n    return [round(weight, 4) for weight in weights]\ndef soft_threshold(rho, lambda_):\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 4, 5]\ndegree = 2\nreg_factor = 1\nweights = lasso_regression(X, y, degree, reg_factor)"}
{"task_id": 62, "completion_id": 4, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    X_poly = np.column_stack([np.power(X, i) for i in range(degree + 1)])\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        weights_prev = weights.copy()\n        weights[0] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]))\n        for j in range(1, degree + 1):\n            rho = np.dot(X_poly[:, j], y - (np.dot(X_poly, weights) - weights[j] * X_poly[:, j]))\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / np.dot(X_poly[:, j], X_poly[:, j])\n        if np.all(np.abs(weights - weights_prev) < tol):\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 5, "solution": "import numpy as np\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n\n    def create_design_matrix(x, degree):\n        \"\"\"Creates the design matrix of X, including bias and 1 through degree powers.\"\"\"\n        return np.vander(x, degree + 1, increasing=True)\n\n    def soft_thresholding(rho, lambda_):\n        \"\"\"Performs soft thresholding operation\"\"\"\n        if rho < -lambda_:\n            return rho + lambda_\n        elif rho > lambda_:\n            return rho - lambda_\n        else:\n            return 0\n    X = np.array(X)\n    y = np.array(y)\n    X_design = create_design_matrix(X, degree)\n    (_, n) = X_design.shape\n    w = np.zeros(n)\n    for _ in range(n_iterations):\n        for j in range(n):\n            old_w_j = w[j]\n            y_pred = X_design @ w - X_design[:, j] * w[j]\n            rho = (X_design[:, j] * (y - y_pred)).sum()\n            w[j] = soft_thresholding(rho, reg_factor) / (X_design[:, j] ** 2).sum()\n            if np.abs(old_w_j - w[j]) < tol * np.abs(old_w_j):\n                return list(np.round(w, 4))\n    return list(np.round(w, 4))"}
{"task_id": 62, "completion_id": 6, "solution": "import numpy as np\ndef soft_threshold(rho, lambda_):\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    polynomial_features = np.hstack([np.ones((X.shape[0], 1)), X.reshape(-1, 1)] + [(X ** j).reshape(-1, 1) for j in range(2, degree + 1)])\n    weights = np.zeros(polynomial_features.shape[1])\n    for _ in range(n_iterations):\n        max_change = 0\n        for j in range(weights.shape[0]):\n            old_weight = weights[j]\n            if j == 0:\n                rho = np.mean(y - np.dot(polynomial_features[:, j], weights[j]) + weights[j] * polynomial_features[:, j])\n            else:\n                rho = np.dot(polynomial_features[:, j], y - np.dot(polynomial_features, weights) + weights[j] * polynomial_features[:, j])\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(polynomial_features[:, j], polynomial_features[:, j])\n            max_change = max(max_change, abs(old_weight - weights[j]))\n        if max_change < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 7, "solution": "import numpy as np\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    X = np.array(X)\n    y = np.array(y)\n    (m,) = X.shape\n    X = np.column_stack([np.ones(m), X, X ** 2, *[X ** deg for deg in range(3, degree + 1)]])\n    (_, d) = X.shape\n    w = np.zeros(d)\n    differences = np.inf\n    for i in range(n_iterations):\n        if np.amax(differences) < tol:\n            break\n        for j in range(d):\n            previous_w_j = w[j]\n            if j == 0:\n                w[j] = np.mean(y - X[:, 1:] @ w[1:])\n            else:\n                rho = X[:, j].T @ (y - X @ w + w[j] * X[:, j])\n                w[j] = soft_threshold(rho, reg_factor) / (X[:, j].T @ X[:, j])\n            differences = np.abs(w - previous_w_j)\n    return [round(wi, 4) for wi in w]\ndef soft_threshold(rho, lambda_):\n    return np.sign(rho) * np.maximum(np.abs(rho) - lambda_, 0)"}
{"task_id": 62, "completion_id": 8, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_design = np.zeros((X.shape[0], degree + 1))\n    X_design[:, 0] = 1\n    for i in range(1, degree + 1):\n        X_design[:, i] = X ** i\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        max_change = 0\n        for j in range(degree + 1):\n            if j == 0:\n                prev_w_j = w[j]\n                w[j] = np.mean(y - X_design.dot(w))\n            else:\n                prev_w_j = w[j]\n                w[j] = soft_threshold(X_design[:, j].T.dot(y - X_design.dot(w) + w[j] * X_design[:, j]), reg_factor) / X_design[:, j].T.dot(X_design[:, j])\n            max_change = max(abs(w[j] - prev_w_j), max_change)\n        if max_change < tol:\n            break\n    return [round(coef, 4) for coef in w]\ndef soft_threshold(rho, lam):\n    if rho < -lam:\n        return rho + lam\n    elif rho > lam:\n        return rho - lam\n    else:\n        return 0"}
{"task_id": 62, "completion_id": 9, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    d = degree + 1\n    X_design = np.empty((m, d))\n    for j in range(d):\n        X_design[:, j] = X ** j\n    weights = np.zeros(d)\n    for _ in range(n_iterations):\n        old_weights = weights.copy()\n        weights[0] = np.mean(y - np.dot(X_design[:, 1:], weights[1:]))\n        for j in range(1, d):\n            x_j = X_design[:, j]\n            y_minus_xw_plus_wxj = y - np.dot(X_design, weights) + weights[j] * x_j\n            rho = np.dot(x_j, y_minus_xw_plus_wxj)\n            weights[j] = _soft_threshold(rho, reg_factor) / np.dot(x_j, x_j)\n        if np.max(np.abs(old_weights - weights)) < tol:\n            break\n    return [round(weight, 4) for weight in weights]\ndef _soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Compute the soft threshold of rho using lambda as the regularisation strength.\"\"\"\n    return np.sign(rho) * np.maximum(np.abs(rho) - lambda_, 0)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Calculates the backward probability vector at a given time index\"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = [0.0] * N\n    if t == len(obs) - 1:\n        return [1.0] * N\n    beta_next = backward_beta(A, B, obs, t + 1)\n    for i in range(N):\n        beta[i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta_next)\n    return [round(b, 4) for b in beta]"}
{"task_id": 63, "completion_id": 1, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function returns the backward probability vector \u03b2 at time t in a discrete Hidden Markov Model given the\n    transition-probability matrix A, the emission-probability matrix B, the list of observed indices obs and the time index t.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    beta_t = np.ones(N)\n    for curr_t in range(t, -1, -1):\n        beta_next_t = np.zeros(N)\n        for i in range(N):\n            beta_next_t += A[:, i] * B[i, obs[curr_t + 1 if curr_t + 1 < len(obs) else curr_t]] * beta_t[i]\n        beta_t = beta_next_t\n    return list(np.round(beta_t, 4))"}
{"task_id": 63, "completion_id": 2, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Calculates the backward probability vector \u03b2_t\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N)\n    B (list[list[float]]): Emission-probability matrix of shape (N, M)\n    obs (list[int]): List of observation indices (length T)\n    t (int): Integer time index (0 \u2264 t < T)\n    Returns:\n    list[float]: The backward probabilities for time index t\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    M = B.shape[1]\n    beta_t = [0.0] * N\n    beta_t[t] = 1.0\n    for k in range(t, -1, -1):\n        for i in range(N):\n            likelihoods = [A[i, j] * B[j, obs[k]] * beta_t[j] for j in range(N)]\n            beta_t[i] = np.sum(likelihoods)\n    return [round(beta, 4) for beta in beta_t]"}
{"task_id": 63, "completion_id": 3, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index.\n\n    Args:\n    - A: Transition-probability matrix of shape (N, N).\n    - B: Emission-probability matrix of shape (N, M).\n    - obs: List of observation indices (length T).\n    - t: Integer time index (0 \u2264 t < T).\n\n    Returns:\n    - List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for i in range(t, -1, -1):\n        beta = A @ (B[:, obs[i]] * beta)\n    return np.round(beta, 4).tolist()"}
{"task_id": 63, "completion_id": 4, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector of the HMM at given time index t.\n\n    Parameters:\n        A(list of lists): Transition-probability matrix of shape (N, N)\n        B(list of lists): Emission-probability matrix of shape (N, M)\n        obs(list of ints): List of observation indices (length T)\n        t(int): Integer time index (0 \u2264 t < T)\n\n    Returns:\n        beta(list of floats): Backward probability vector for time index t\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.ones(N)\n    for i in range(T - 2, t - 1, -1):\n        beta = np.dot(A, beta * B[:, obs[i + 1]])\n    return [round(b, 4) for b in beta]"}
{"task_id": 63, "completion_id": 5, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Calculate the backward probability vector beta for a given time index t\n\n    Args:\n        A (list[list[float]]): Transition-probability matrix of shape (N, N)\n        B (list[list[float]]): Emission-probability matrix of shape (N, M)\n        obs (list[int]): List of observation indices (length T)\n        t (int): Integer time index (0 <= t < T)\n    \n    Returns:\n        list[float]: The N backward probabilities rounded to 4 decimal places\n    \"\"\"\n    (A, B) = (np.array(A), np.array(B))\n    (N, M) = (A.shape[0], B.shape[1])\n    T = len(obs)\n    assert t < T, f't should be less than the length of the observation sequence'\n    assert A.shape == (N, N), f'A should be a {N}x{N} matrix'\n    assert B.shape == (N, M), f'B should be a {N}x{M} matrix'\n    beta = np.ones(N)\n    for i in range(T - 2, t - 1, -1):\n        obs_idx = obs[i + 1]\n        beta = np.dot(A, B[:, obs_idx] * beta)\n    beta = np.round(beta, 4)\n    return list(beta)"}
{"task_id": 63, "completion_id": 6, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Return the backward probability vector beta at a given time index t\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N)\n    B (list[list[float]]): Emission-probability matrix of shape (N, M)\n    obs (list[int]): List of observation indices (length T)\n    t (int): Integer time index (0 \u2264 t < T)\n    \n    Returns:\n    beta_t (list[float]): The N backward probabilities rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n    return [round(x, 4) for x in beta.tolist()]"}
{"task_id": 63, "completion_id": 7, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector for a given time index.\n    \n    Parameters:\n    A : list[list[float]]\n        Transition-probability matrix, shape (N, N).\n    B : list[list[float]]\n        Emission-probability matrix, shape (N, M).\n    obs : list[int]\n        List of observation indices, length T.\n    t : int\n        Time index, 0 \u2264 t < T.\n        \n    Returns:\n    list[float]\n        List of the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = len(A)\n    T = len(obs)\n    beta_t = np.ones(N)\n    for i in range(T - 1, t, -1):\n        beta_t = np.dot(A, B[:, obs[i]] * beta_t)\n    return np.round(beta_t, 4).tolist()"}
{"task_id": 63, "completion_id": 8, "solution": "import numpy as np\ndef backward_beta(A, B, obs, t):\n    \"\"\"Computes the backward variable beta_t for a given time index t.\n\n    Parameters:\n    A : list of list of float\n        Transition-probability matrix (NxN)\n    B : list of list of float\n        Emission-probability matrix (NxM)\n    obs : list of int\n        List of observation indices (length T)\n    t : int\n        Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list of float : A Python list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    num_states = len(A)\n    num_symbols = len(B[0])\n    beta_t = [0.0] * num_states\n    if t == len(obs) - 1:\n        beta_t = [1.0] * num_states\n    else:\n        for i in range(num_states):\n            for j in range(num_states):\n                beta_t[i] += A[i][j] * B[j][obs[t + 1]] * backward_beta(A, B, obs, t + 1)[j]\n            beta_t[i] = round(beta_t[i], 4)\n    return beta_t"}
{"task_id": 63, "completion_id": 9, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index t.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: The N backward probabilities.\n    \"\"\"\n    (A, B) = (np.array(A), np.array(B))\n    (N, _) = A.shape\n    beta_t = [0] * N\n    beta_t[t] = 1.0\n    for i in range(t - 1, -1, -1):\n        for j in range(N):\n            beta_t[j] = sum((A[j, k] * B[k, obs[i + 1]] * beta_t[k] for k in range(N)))\n            beta_t[j] = round(beta_t[j], 4)\n    return beta_t"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 1, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    N = len(A)\n    T = len(obs)\n    if T == 0 or N == 0:\n        return 0.0\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum((beta[t + 1, j] * A[i][j] * B[j][obs[t + 1]] for j in range(N)))\n    prob = sum((beta[0, i] * pi[i] * B[i][obs[0]] for i in range(N)))\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 2, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[t, j] = sum([A[i][j] * B[j][obs[t + 1]] * beta[t + 1, i] for i in range(N)])\n    result = sum([pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N)])\n    return round(result, 6)"}
{"task_id": 65, "completion_id": 3, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    if len(A) == 0 or len(B) == 0 or len(pi) == 0 or (len(obs) == 0):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[t, j] = sum((A[j, k] * B[k, obs[t + 1]] * beta[t + 1, k] for k in range(N)))\n    prob = sum((pi[i] * B[i, obs[0]] * beta[0, i] for i in range(N)))\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 4, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not (A and B and pi and obs):\n        return 0.0\n    num_states = len(A)\n    T = len(obs)\n    beta = np.zeros((T, num_states))\n    beta[-1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for j in range(num_states):\n            beta[t, j] = sum([A[i][j] * B[j][obs[t + 1]] * beta[t + 1, i] for i in range(num_states)])\n    seq_prob = sum([pi[i] * B[i][obs[0]] * beta[0, i] for i in range(num_states)])\n    return round(seq_prob, 6)"}
{"task_id": 65, "completion_id": 5, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 6, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    T = len(obs)\n    N = len(pi)\n    beta = np.ones(N)\n    for t in range(T - 1, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[t]])\n    prob = round(sum(pi * B[:, obs[0]] * beta), 6)\n    return prob"}
{"task_id": 65, "completion_id": 7, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not all([A, B, pi, obs]):\n        return 0.0\n    (A, B, pi, obs) = map(np.array, [A, B, pi, obs])\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[t, j] = sum((A[j, i] * B[i, obs[t + 1]] * beta[t + 1, i] for i in range(N)))\n    prob = sum((pi[i] * B[i, obs[0]] * beta[0, i] for i in range(N)))\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 8, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 9, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if len(A) == 0 or len(B) == 0 or len(pi) == 0 or (len(obs) == 0):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum([A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j] for j in range(N)])\n    prob = sum([pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N)])\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    if not S.ndim == A.ndim == B.ndim == 1 or not observations.ndim == 1:\n        return -1\n    if not S.shape[0] == A.shape[0] == A.shape[1] or not S.shape[0] == B.shape[0]:\n        return -1\n    if np.any((observations < 0) | (observations >= B.shape[1])):\n        return -1\n    forward = np.ones((len(S), len(observations)))\n    forward[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(len(S)):\n            forward_prob = forward[:, t - 1] * A[:, j] * B[j, observations[t]]\n            forward[j, t] = np.sum(forward_prob)\n    likelihood = np.sum(forward[:, -1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 1, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    (n,) = S.shape\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    (m,) = B.shape\n    if m <= np.amax(observations):\n        return -1\n    if len(observations) <= 0:\n        return -1\n    alpha = np.empty((n, len(observations)), dtype=np.float64)\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        alpha[:, t] = np.dot(alpha[:, t - 1], A) * B[:, observations[t]]\n    return round(np.sum(alpha[:, -1]), 4)"}
{"task_id": 69, "completion_id": 2, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    if S.shape[0] != A.shape[0] != A.shape[1] or S.shape[0] != B.shape[0] or (not all((0 <= i < B.shape[1] for i in observations))):\n        return -1\n    if not observations:\n        return -1\n    alpha = np.zeros((S.shape[0], len(observations)))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        alpha[:, t] = np.dot(alpha[:, t - 1], A) * B[:, observations[t]]\n    prob = sum(alpha[:, -1])\n    return round(prob, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]"}
{"task_id": 69, "completion_id": 3, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    if S.ndim != 1 or A.ndim != 2 or B.ndim != 2 or (S.shape[0] != A.shape[0] == A.shape[1]) or (S.shape[0] != B.shape[0]):\n        return -1\n    if not all([0 <= o < B.shape[1] for o in observations]):\n        return -1\n    if len(observations) == 0:\n        return -1\n    n = A.shape[0]\n    probas = np.zeros((n, len(observations)))\n    probas[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(n):\n            probas[j, t] = np.sum(probas[:, t - 1] * A[:, j] * B[j, observations[t]])\n    result = np.sum(probas[:, -1])\n    return round(result, 4)\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 0]"}
{"task_id": 69, "completion_id": 4, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    try:\n        S = np.array(S, dtype=float)\n        A = np.array(A, dtype=float)\n        B = np.array(B, dtype=float)\n        observations = np.array(observations, dtype=int)\n        (n, m) = (A.shape[0], B.shape[1])\n        T = len(observations)\n        assert S.shape == (n,)\n        assert A.shape == (n, n)\n        assert B.shape == (n, m)\n        assert observations.shape == (T,)\n        assert np.all((0 <= observations) & (observations < m))\n    except (ValueError, AssertionError):\n        return -1\n    alphas = S @ B[:, observations[0]]\n    for t in range(1, T):\n        alphas = alphas @ A * B[:, observations[t]]\n    return round(np.sum(alphas), 4)"}
{"task_id": 69, "completion_id": 5, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    T = len(observations)\n    N = S.shape[0]\n    alpha = np.zeros((T, N))\n    alpha[0, :] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(N):\n            alpha[t, j] = np.sum(alpha[t - 1, :] * A[:, j] * B[j, observations[t]])\n    prob = np.sum(alpha[T - 1, :])\n    return round(prob, 4)"}
{"task_id": 69, "completion_id": 6, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    (n, m) = B.shape\n    if not (np.shape(S) == (n,) and np.shape(A) == (n, n) and len(observations)):\n        return -1\n    if np.min(observations) < 0 or np.max(observations) >= m:\n        return -1\n    alpha = np.zeros((n, len(observations)))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        alpha[:, t] = B[:, observations[t]] * np.sum(A.T * alpha.T, axis=1)\n    likelihood = np.sum(alpha[:, -1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 7, "solution": "import numpy as np\ndef valid_input(S, A, B, observations, m):\n    n = len(S)\n    if n != len(A) or n != len(A[0]) or n != len(B) or (m != len(B[0])):\n        return False\n    for o in observations:\n        if o < 0 or o >= m:\n            return False\n    return True\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int], m: int) -> float:\n    if not valid_input(S, A, B, observations, m):\n        return -1\n    emissions = [B[s][z] for (s, z) in zip(range(len(S)), observations)]\n    alpha = [[0] * len(S)]\n    for s in range(len(S)):\n        alpha[0][s] = S[s] * emissions[0]\n    for t in range(1, len(observations)):\n        alpha.append([0] * len(S))\n        for s in range(len(S)):\n            for s_prime in range(len(S)):\n                alpha[t][s] += alpha[t - 1][s_prime] * A[s_prime][s] * emissions[t]\n    prob = sum(alpha[-1])\n    return round(prob, 4)"}
{"task_id": 69, "completion_id": 8, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = A.shape\n    T = len(observations)\n    if not (np.allclose(S.shape, (n,)) and A.shape == (n, n) and (B.shape == (n, m))):\n        return -1\n    if not all((0 <= observation < m for observation in observations)):\n        return -1\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = alpha[t - 1].dot(A) * B[:, observations[t]]\n    sequence_likelihood = alpha[-1].sum()\n    return round(sequence_likelihood, 4)"}
{"task_id": 69, "completion_id": 9, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = B.shape\n    if not (S.ndim == 1 and A.ndim == 2 and (S.shape[0] == A.shape[0] == A.shape[1] == n)):\n        return -1\n    if not (observations and all((0 <= i < m for i in observations))):\n        return -1\n    forward_prob = np.zeros(n)\n    for i in range(n):\n        if B[i, observations[0]] != 0:\n            forward_prob[i] = S[i] * 1.0 / B[i, observations[0]]\n    for t in range(1, len(observations)):\n        forward_prob_new = np.zeros(n)\n        for j in range(n):\n            if B[j, observations[t]] != 0:\n                for i in range(n):\n                    forward_prob_new[j] += forward_prob[i] * A[i, j] * 1.0 / B[j, observations[t]]\n        forward_prob = forward_prob_new\n    return round(np.sum(forward_prob), 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nfrom typing import List, Dict, Tuple\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    counter = Counter((item for transaction in transactions for item in transaction))\n    freq_items = set((item for (item, count) in counter.items() if count >= min_support))\n    freq_items = sorted(freq_items, key=lambda x: (counter[x], x))\n    fp_tree = FPTree(freq_items, transactions)\n    freq_itemsets = fp_tree.mine_frequent_itemsets(min_support, counter)\n    sorted_itemsets = sorted(freq_itemsets, key=lambda x: (len(x), x))\n    return sorted_itemsets\nclass Node:\n\n    def __init__(self, item: str, parent):\n        self.item = item\n        self.parent = parent\n        self.children = {}\n        self.count = 1\n        self.next_node = None\n\n    def increment(self):\n        self.count += 1\nclass FPTree:\n\n    def __init__(self, freq_items: List[str], transactions: List[List[str]]):\n        self.root = Node('root', None)\n        self.header_table = defaultdict(list)\n        for t in transactions:\n            sorted_transaction = [item for item in t if item in freq_items]\n            sorted_transaction.sort(key=lambda i: freq_items.index(i), reverse=True)\n            self.insert_transaction(sorted_transaction)\n\n    def insert_transaction(self, transaction: List[str]):\n        curr_node = self.root\n        for item in transaction:\n            child = curr_node.children.get(item)\n            if child is not None:\n                child.increment()\n            else:\n                child = Node(item, curr_node)\n                curr_node.children[item] = child\n                if self.header_table[item]:\n                    last_node = self.header_table[item][-1]\n                    last_node.next_node = child\n                self.header_table[item].append(child)\n            curr_node = child\n\n    def mine_frequent_itemsets(self, min_support: int, freq_items: Dict[str, int]) -> List[List[str]]:\n        prefix = []\n        freq_itemsets = []\n        for (item, nodes) in sorted(self.header_table.items(), key=lambda pair: freq_items[pair[0]], reverse=True):\n            self.mine_node(prefix + [item], nodes[0], min_support, freq_itemsets)\n        return freq_itemsets\n\n    def mine_node(self, prefix: List[str], node: Node, min_support: int, freq_itemsets: List[List[str]]):\n        suffix = []\n        cond_tree_input = []\n        curr_node = node\n        while curr_node and curr_node.item is not None:\n            suffix.append(curr_node.item)\n            if curr_node.count >= min_support and len(suffix) > 1:\n                freq_itemsets.append(list(reversed(prefix + suffix[1:])))\n            curr_node = curr_node.next_node\n        for (item, children) in sorted(node.children.items(), key=lambda pair: pair[1].count, reverse=True):\n            self.mine_node(prefix + [item], children, min_support, freq_itemsets)"}
{"task_id": 70, "completion_id": 1, "solution": "from collections import Counter, defaultdict\ndef get_single_paths(frequented_items: dict, transactions: list) -> dict:\n    single_path = {}\n    for transaction in transactions:\n        paths = [item for item in transaction if item in frequented_items]\n        for path in paths:\n            single_path[path] = single_path.get(path, 0) + 1\n    return single_path\ndef create_fptree(transactions, min_support, root):\n    header_table = {}\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] = header_table.get(item, 0) + root.count\n    items = [item for item in header_table if header_table[item] >= min_support]\n    items.sort(key=lambda item: header_table[item], reverse=True)\n    if len(items) == 0:\n        return None\n    for item in items:\n        new_node = FPTreeNode(item, 1, None)\n        update_header_table(header_table[item][0], new_node)\n        if header_table[item][1] is None:\n            header_table[item][1] = new_node\n        else:\n            current_node = header_table[item][1]\n            while current_node.next is not None:\n                current_node = current_node.next\n            current_node.next = new_node\n    del header_table\n    remaining_transactions = []\n    for transaction in transactions:\n        local_transaction = []\n        for item in transaction:\n            if item in items:\n                local_transaction.append(item)\n        if local_transaction:\n            local_transaction.sort(key=lambda item: items.index(item))\n            remaining_transactions.append(local_transaction)\n    for transaction in remaining_transactions:\n        node = root\n        for item in transaction:\n            children = getattr(node, 'children', None)\n            if children is None:\n                children = {}\n                node.children = children\n            if item in children:\n                node = children[item]\n            else:\n                new_node = FPTreeNode(item, 1, node)\n                children[item] = new_node\n                node = new_node\n            node.count += 1\n    return root\nclass FPTreeNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = None\n        self.next = None\nclass FPTree:\n\n    def __init__(self, item, transactions, min_support):\n        self.tree = create_fptree(transactions, min_support, FPTreeNode('null', 1, None))\n\n    def mine(self, pre_freq_set, min_support):\n        freq_itemsets = []\n        if self.tree is not None:\n            self.tree.mine(self.tree, pre_freq_set, freq_itemsets, min_support)\n        return freq_itemsets\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(item-set) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(item-set), item-set)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    all_items = []\n    for transaction in transactions:\n        for item in transaction:\n            if item not in all_items:\n                all_items.append(item)\n    frequent_pattern = {}\n    frq_items = Counter(all_items)\n    for (key, value) in frq_items.items():\n        if value >= min_support:\n            frequent_pattern[key] = value\n    prefix_path = get_single_paths(frequent_pattern, transactions)\n    header_table = defaultdict(int)\n    for (item, count) in prefix_path.items():\n        header_table[item] += count\n    sorted_items = [v[0] for v in sorted(header_table.items(), key=lambda kv: kv[1])]\n    if len(sorted_items) == 0:\n        return []\n    t_t = FPTree(header_table, transactions, min_support)\n    freq_itemsets = t_t.mine(set([]), min_support)\n    result = []\n    for fset in freq_itemsets:\n        items = list(fset)\n        items.sort()\n        result.append(items)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 70, "completion_id": 2, "solution": "from collections import Counter, defaultdict\nfrom itertools import chain\nclass Tree:\n\n    def __init__(self, value, count, parent):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def insert(self, children):\n        if children[0] in self.children:\n            node = self.children[children[0]]\n            node.count += children[1]\n        else:\n            node = self.children[children[0]] = Tree(children[0], children[1], self)\n        if len(children) > 1:\n            node.insert(children[1:])\n        return node\ndef fp_growth(transactions: list, min_support: int, sort=True) -> list:\n    item_counts = Counter(chain(*transactions))\n    items = [[v[0], v[1]] for v in item_counts.items() if v[1] >= min_support]\n    items.sort(key=lambda x: x[1])\n    items = [item[0] for item in items]\n    newtrans = []\n    for t in transactions:\n        newt = []\n        for i in items:\n            if i in t:\n                newt.append(i)\n        newtrans.append(newt)\n    trees = defaultdict(list)\n    for t in newtrans:\n        for i in range(1, len(t) + 1):\n            sup = item_counts[t[i - 1]] if i < len(t) else None\n            trees[len(t)].append((t[i - 1:], t, sup if sup else 1))\n    for (length, trees) in trees.items():\n        counted = Counter((item for (items, t, c) in trees for item in set(items)))\n        trees.sort(key=lambda x: counted[x[0]])\n        root = Tree(None, None, None)\n        for (items, t, count) in trees:\n            node = root.insert(items)\n            node.count = count\n    return [sorted(t) for (t, c) in root.children.items()]"}
{"task_id": 70, "completion_id": 3, "solution": "from collections import Counter, defaultdict\ndef create_tree(item_counts, transactions):\n    tree = FPNode(None, None, None)\n    for transaction in transactions:\n        sorted_items = [item for item in transaction if item in item_counts]\n        sorted_items.sort(key=lambda x: item_counts[x], reverse=True)\n        current_node = tree\n        for item in sorted_items:\n            current_node = current_node.add_child(item)\n    return tree\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    tree = create_tree(item_counts, transactions)\n    suffix = []\n    mine_patterns(tree, min_support, set(), suffix)\n    return sorted(suffix, key=lambda x: (len(x), x))\ntransactions = [['a', 'b'], ['a', 'd'], ['b', 'c'], ['a', 'b', 'd'], ['a', 'c'], ['a', 'b', 'c', 'd'], ['a']]"}
{"task_id": 70, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nfrom typing import Dict\nclass FPNode(object):\n\n    def __init__(self, value, count, parent):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children: Dict[str, FPNode] = {}\n\n    def has_child(self, value):\n        return value in self.children\n\n    def get_child(self, value):\n        return self.children[value]\n\n    def add_child(self, value):\n        child_node = FPNode(value, 1, self)\n        self.children[value] = child_node\n        return child_node\ndef construct_fp_tree(transactions, min_support):\n    item_counts = Counter()\n    for t in transactions:\n        for i in t:\n            item_counts[i] += 1\n    header_table = {k: v for (k, v) in item_counts.items() if v >= min_support}\n    freq_items = list(header_table.keys())\n    if len(freq_items) == 0:\n        return (None, None)\n    freq_items.sort()\n    ordered_transactions = [[i for i in t if i in freq_items] for t in transactions]\n    root = FPNode(None, 1, None)\n    for t in ordered_transactions:\n        current_node = root\n        for i in t:\n            current_node = current_node.get_child(i) if current_node.has_child(i) else current_node.add_child(i)\n    return (root, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    if len(transactions) == 0:\n        return []\n    (root, header_table) = construct_fp_tree(transactions, min_support)\n    if header_table is None:\n        return []\n    frequent_itemsets = []\n    mine_fp_tree(header_table, min_support, set(), frequent_itemsets)\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 5, "solution": "from collections import namedtuple, defaultdict\nfrom itertools import chain, combinations\nclass TreeNode(namedtuple('TreeNode', 'item_id count node_link')):\n\n    def __repr__(self):\n        return f'{self.item_id}:{self.count}'\ndef construct_tree(transactions, header_table):\n    root = TreeNode(None, None, [])\n    for transaction in transactions:\n        transaction = list(filter(lambda i: i in header_table, transaction))\n        transaction.sort(key=lambda i: header_table[i][0])\n        if transaction:\n            update_tree(transaction, root, header_table)\n    return root\ndef mine_tree(tree, header_table, min_support, freq_set, final_frequent_patterns):\n    frequent_patterns = {}\n    if tree.node_link is not None:\n        for node in tree.node_link:\n            new_set = freq_set.copy()\n            new_set.add(node.item_id)\n            mine_tree(node, header_table, min_support, new_set, final_frequent_patterns)\n    freq_set_sup_count = sum((header_table[i][0] for i in freq_set))\n    if freq_set_sup_count >= min_support and freq_set:\n        final_frequent_patterns.append(sorted(freq_set))\n    return final_frequent_patterns\ndef fp_growth(transactions, min_support):\n    item_count = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_count[item] += 1\n    item_count = dict(filter(lambda x: x[1] >= min_support, item_count.items()))\n    header_table = defaultdict(list)\n    for key in sorted(item_count.keys(), key=lambda k: item_count[k], reverse=True):\n        header_table[key] = [item_count[key], None, None]\n    fp_tree = construct_tree([[i for i in transaction if i in item_count] for transaction in transactions], header_table)\n    if fp_tree is None:\n        return []\n    frequent_patterns = []\n    mine_tree(fp_tree, header_table, min_support, set(), frequent_patterns)\n    frequent_patterns.sort(key=lambda x: (len(x), x))\n    return frequent_patterns"}
{"task_id": 70, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter(itertools.chain.from_iterable(transactions))\n    items = [[item] for (item, count) in item_counts.items() if count >= min_support]\n    items.sort(key=lambda x: (-item_counts[tuple(x)], x))\n    table = [item for (item, count) in item_counts.items() if count >= min_support]\n    table.sort(key=lambda item: -item_counts[item])\n\n    def construct_tree(item_sets: list, table: list, tree: defaultdict):\n        (head, *tail) = item_sets\n        if head:\n            tree[head]\n        if tail:\n            next_item_sets = [item_set[1:] for item_set in item_sets if item_set[1:]]\n            construct_tree(next_item_sets, table, tree[head])\n\n    def mine_tree(tree: defaultdict, suffix: list, frequent_patterns: list):\n        for (item, nodes) in sorted(tree.items(), key=lambda pair: pair[1].count):\n            new_suffix = suffix + [item]\n            frequent_patterns.append(new_suffix)\n            conditional_tree = {}\n            for (tuple_, count) in itertools.chain.from_iterable(nodes.values()):\n                seq = table[tuple_[0]]\n                if seq not in conditional_tree:\n                    conditional_tree[seq] = []\n                conditional_tree[seq].append([tuple_[1:]])\n            for item_set in conditional_tree.values():\n                mine_tree(item_set, new_suffix, frequent_patterns)\n    tree = {}\n    construct_tree(items, table, tree)\n    frequent_patterns = []\n    mine_tree(tree, [], frequent_patterns)\n    return frequent_patterns"}
{"task_id": 70, "completion_id": 7, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_count = Counter()\n    for transaction in transactions:\n        item_count.update(transaction)\n    item_count = {item: count for (item, count) in item_count.items() if count >= min_support}\n    if len(item_count) == 0:\n        return []\n    frequent_items = list(item_count.keys())\n    header_table = {item: [0, None] for item in frequent_items}\n    fp_tree = [None] * len(frequent_items)\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in frequent_items]\n        sorted_transaction.sort(key=lambda x: item_count[x], reverse=True)\n        current_tree = fp_tree\n        for item in sorted_transaction:\n            if current_tree[frequent_items.index(item)] is None:\n                current_tree[frequent_items.index(item)] = (1, [])\n            else:\n                current_tree[frequent_items.index(item)] = (current_tree[frequent_items.index(item)][0] + 1, current_tree[frequent_items.index(item)][1])\n            current_tree = current_tree[frequent_items.index(item)][1]\n            if header_table[item][1] is None:\n                header_table[item][1] = current_tree\n            else:\n                current_header = header_table[item][1]\n                while current_header[2] is not None:\n                    current_header = current_header[2]\n                current_header[2] = [1, current_tree]\n            header_table[item][0] += 1\n    frequent_itemsets = []\n    for item in frequent_items:\n        path = []\n        current_node = header_table[item]\n        while current_node[1] is not None:\n            path.append(current_node[1][0])\n            current_node = current_node[1]\n        path.append(item)\n        path.reverse()\n        frequent_itemsets.append(path)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 8, "solution": "from collections import Counter, defaultdict\ndef create_tree(transactions, min_support, header_table):\n    item_count = defaultdict(int)\n    for trans in transactions:\n        for item in trans:\n            item_count[item] += 1\n    for k in list(item_count.keys()):\n        if item_count[k] < min_support:\n            del item_count[k]\n    freq_item_set = set(item_count.keys())\n    if len(freq_item_set) == 0:\n        return (None, None)\n    for k in header_table:\n        header_table[k] = [x[0] for x in sorted(freq_item_set)]\n    tree = defaultdict(Counter)\n    for trans in transactions:\n        local_d = {i: item_count[i] for i in trans if i in freq_item_set}\n        order_trans = [i[0] for i in sorted(local_d.items(), key=lambda x: x[1], reverse=True)]\n        update_tree(order_trans, tree, header_table, 1)\n    return (tree, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    header_table = defaultdict(list)\n    (tree, header_table) = create_tree(map(set, transactions), min_support, header_table)\n    if tree is None:\n        return []\n    freq_item_list = []\n    mine_tree(tree, header_table, min_support, set([]), freq_item_list)\n    return [[x for x in item_set] for item_set in freq_item_list]"}
{"task_id": 70, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import List\ndef create_tree(transactions, min_sup_count, header_table):\n    item_counts = {}\n    for trans in transactions:\n        for item in trans:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    for k in list(item_counts.keys()):\n        if item_counts[k] < min_sup_count:\n            del item_counts[k]\n    freq_itemset = set(item_counts.keys())\n    fp_tree = {i: {} for i in freq_itemset}\n    for trans in transactions:\n        filtered_trans = [item for item in trans if item in freq_itemset]\n        filtered_trans.sort(key=lambda i: item_counts[i], reverse=True)\n        update_tree(filtered_trans, fp_tree, header_table)\n    return fp_tree\ndef update_tree(items, tree, header_table):\n    if len(items) == 0:\n        return\n    item = items[0]\n    if item in tree[item]:\n        tree[item][1] += 1\n    else:\n        tree[item][1] = 1\n        tree[item][0] = {}\n    update_tree(items[1:], tree[item][0], header_table)\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    item_count = {}\n    for t in transactions:\n        for item in t:\n            item_count[item] = item_count.get(item, 0) + 1\n    header_table = {k: [v, None] for (k, v) in item_count.items() if v >= min_support}\n    tree = create_tree(transactions, min_support, header_table)\n    freq_itemsets = []\n    mine_tree(tree, header_table, min_support, set(), freq_itemsets)\n    return [[i for i in list(itemset) if i in header_table] for itemset in freq_itemsets]"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if not 1 <= k <= len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    labels = []\n    for x_test in X_test:\n        distances = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        labels.append(np.bincount(k_nearest_labels).argmax())\n    return labels"}
{"task_id": 75, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (num_samples, _) = X_train.shape\n    if not (isinstance(k, int) and 1 <= k <= num_samples):\n        return -1\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_nearest = np.argsort(distances)[:k]\n        k_nearest_classes = y_train[k_nearest]\n        (values, counts) = np.unique(k_nearest_classes, return_counts=True)\n        highest_votes = np.max(counts)\n        highest_votes_classes = values[counts == highest_votes]\n        prediction = np.min(highest_votes_classes)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 75, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    n_train = len(X_train)\n    n_test = len(X_test)\n    if k < 1 or k > n_train:\n        return [-1] * n_test\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_pred = []\n    for i in range(n_test):\n        distances = np.sum((X_train - X_test[i]) ** 2, axis=1)\n        nearest_neighbours = np.argsort(distances)[:k]\n        nearest_classes = y_train[nearest_neighbours]\n        counts = np.bincount(nearest_classes)\n        if len(counts) != k and np.max(counts) > 1:\n            class_label = np.max(np.nonzero(counts == np.max(counts)))\n        else:\n            class_label = np.argmax(counts)\n        y_pred.append(class_label)\n    return y_pred"}
{"task_id": 75, "completion_id": 3, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    predictions = []\n    for test_sample in X_test:\n        distances = distance.cdist([test_sample], X_train, 'euclidean')[0]\n        k_nearest = np.argsort(distances)[:k]\n        labels = [y_train[i] for i in k_nearest]\n        label = Counter(labels).most_common()\n        highest_vote = max(label, key=lambda x: x[1])[1]\n        label_with_most_votes = [x[0] for x in label if x[1] == highest_vote]\n        prediction = min(label_with_most_votes)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 75, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if not 1 <= k <= len(X_train):\n        return -1\n    predictions = []\n    for test_sample in X_test:\n        distances = [sum(((xi - xj) ** 2 for (xi, xj) in zip(test_sample, train_sample))) for train_sample in X_train]\n        nearest_neighbors_indices = np.argsort(distances)[:k]\n        nearest_neighbors_labels = [y_train[i] for i in nearest_neighbors_indices]\n        prediction = min(set(nearest_neighbors_labels), key=nearest_neighbors_labels.count)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 75, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if k < 1 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        k_nearest = np.argpartition(distances, k)[:k]\n        k_nearest_classes = y_train[k_nearest]\n        (unique_classes, counts) = np.unique(k_nearest_classes, return_counts=True)\n        pred_class = unique_classes[counts == counts.max()]\n        if len(pred_class) > 1:\n            pred_class = min(pred_class)\n        predictions.append(pred_class[0])\n    return predictions"}
{"task_id": 75, "completion_id": 6, "solution": "import numpy as np\nimport heapq\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_pred = []\n    for test_sample in X_test:\n        distances = distance.cdist(np.array([test_sample]), X_train, 'euclidean')[0]\n        knn_indices = np.argpartition(distances, k)[:k]\n        knn_labels = y_train[knn_indices]\n        label_counts = np.bincount(knn_labels)\n        max_label = np.argmax(label_counts)\n        max_count = label_counts[max_label]\n        max_vote_labels = [label for (label, count) in enumerate(label_counts) if count == max_count]\n        heapq.heapify(max_vote_labels)\n        max_label = heapq.heappop(max_vote_labels)\n        y_pred.append(max_label)\n    return y_pred"}
{"task_id": 75, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Tuple\nfrom collections import Counter\nfrom scipy.spatial import distance\ndef get_k_nearest_neighbours(distances: List[float], k: int) -> List[int]:\n    \"\"\"\n    Selects k nearest neighbors based on the distances.\n    If there is a tie in k nearest distances, this function selects the labels of\n    the closer instances.\n    \"\"\"\n    return np.argpartition(distances, k)[:k]\ndef predict_class(y_train: List[int], k_nearest_indices: List[int]) -> int:\n    \"\"\"\n    Predicts class label based on k nearest neighbors.\n    If there is a tie in votes, this function selects the smaller label.\n    \"\"\"\n    k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n    counter = Counter(k_nearest_labels)\n    sorted_labels = sorted(counter.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_labels[0][0]\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    if k < 1 or k > len(X_train):\n        return -1\n    y_test = []\n    for x_test in X_test:\n        distances = distance.cdist([x_test], X_train, 'euclidean').flatten()\n        k_nearest_indices = get_k_nearest_neighbours(distances, k)\n        y_test.append(predict_class(y_train, k_nearest_indices))\n    return y_test"}
{"task_id": 75, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\"\"\"\n    if not (isinstance(k, int) and 1 <= k <= len(X_train)):\n        return -1\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    predicted_labels = []\n    for sample in X_test:\n        distances = distance.cdist(X_train, [sample], 'euclidean')\n        k_nearest_indices = np.argsort(distances.squeeze())[:k]\n        votes = {}\n        for index in k_nearest_indices:\n            class_label = y_train[index]\n            if class_label not in votes:\n                votes[class_label] = 1\n            else:\n                votes[class_label] += 1\n        max_votes = max(votes.values())\n        most_voted_labels = [label for (label, vote) in votes.items() if vote == max_votes]\n        predicted_label = min(most_voted_labels)\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 75, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    predictions = []\n    for sample in X_test:\n        distances = []\n        for i in range(len(X_train)):\n            distance = np.linalg.norm(np.array(X_train[i]) - np.array(sample))\n            distances.append((distance, i))\n        distances.sort()\n        k_nearest_neighbors = [y_train[index] for (_, index) in distances[:k]]\n        prediction = max(set(k_nearest_neighbors), key=k_nearest_neighbors.count)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    (m, n) = y.shape\n    loss = -np.sum(y * np.log(y_pred + 1e-09)) / m\n    return round(loss, 4)\ny = [[0, 1], [1, 0]]\ny_pred = [[1, 0], [0, 1]]"}
{"task_id": 76, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-07\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    L = -np.sum(y * np.log(y_pred + np.finfo(float).eps))\n    L = round(L, 4)\n    return L"}
{"task_id": 76, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    loss = round(loss, 4)\n    return loss"}
{"task_id": 76, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    eps = np.finfo(float).eps\n    log_loss = np.sum(-y * np.log(y_pred + eps))\n    return round(log_loss, 4)\ny = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ny_pred = np.array([[0.9, 0.1, 0.1], [0.1, 0.8, 0.2], [0.1, 0.1, 0.7]])"}
{"task_id": 76, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-15\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if isinstance(y_pred, list):\n        y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)\ny = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ny_pred = np.array([[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.1, 0.1, 0.8]])"}
{"task_id": 76, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    (y, y_pred) = (np.array(y), np.array(y_pred))\n    epsilon = np.finfo(float).eps\n    L = -np.sum(y * np.log(y_pred + epsilon))\n    return round(L, 4)"}
{"task_id": 76, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    loss = -np.sum(y * np.log(y_pred + np.finfo(float).eps))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    y_pred = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\ny = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ny_pred = np.array([[0.9, 0.05, 0.05], [0.05, 0.9, 0.05], [0.05, 0.05, 0.9]])\nloss = cross_entropy_loss(y, y_pred)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n    \"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef sigmoid(Z):\n    \"\"\"\n    Implement the sigmoid function.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    cache = Z\n    return (A, cache)\ndef relu(Z):\n    \"\"\"\n    Implement the RELU function.\n    \"\"\"\n    A = np.maximum(0, Z)\n    cache = Z\n    return (A, cache)\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)])\n        (A, cache_temp) = relu(A)\n        cache = (cache, cache_temp)\n        caches.append(cache)\n    (AL, cache) = linear_forward(A, parameters['W' + str(L)], parameters['b' + str(L)])\n    (AL, cache_temp) = sigmoid(AL)\n    cache = (cache, cache_temp)\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 77, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Implementation of the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Implementation of the ReLU function.\"\"\"\n    return np.maximum(0, Z)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    A = X\n    caches = []\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, Z))\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    caches.append((A, Z))\n    return AL.round(4).tolist()"}
{"task_id": 77, "completion_id": 2, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Applies the ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Applies the sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef linear_forward(A, W, b):\n    \"\"\"Implements the linear forward propagation for one layer.\"\"\"\n    Z = np.dot(W, A) + b\n    return Z\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Implements the forward propagation for one layer.\"\"\"\n    Z = linear_forward(A_prev, W, b)\n    if activation == 'sigmoid':\n        A = sigmoid(Z)\n    elif activation == 'relu':\n        A = relu(Z)\n    return (A, Z)\ndef L_model_forward(X, parameters):\n    \"\"\"Implements the forward propagation for a L-layer neural network.\"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, Z) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], 'relu')\n        caches.append((A_prev, Z))\n    (AL, Z) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], 'sigmoid')\n    caches.append((A, Z))\n    AL = AL.round(4).tolist()\n    return (AL, caches)"}
{"task_id": 77, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(Z):\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z):\n    return np.maximum(0, Z)\ndef L_model_forward(X, parameters):\n    A = X\n    L = len(parameters) // 2\n    caches = []\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        A = relu(Z)\n        assert A.shape == (W.shape[0], A_prev.shape[1])\n        caches.append((linear_cache, activation_cache))\n    WL = parameters['W' + str(L)]\n    bL = parameters['b' + str(L)]\n    ZL = np.dot(WL, A) + bL\n    linear_cache = (A, WL, bL)\n    activation_cache = ZL\n    AL = sigmoid(ZL)\n    assert AL.shape == (WL.shape[0], A.shape[1])\n    caches.append((linear_cache, activation_cache))\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 77, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (W, b) = (parameters['W' + str(l)], parameters['b' + str(l)])\n        Z = np.dot(W, A_prev) + b\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        A = relu(Z)\n        assert A.shape == (W.shape[0], A_prev.shape[1])\n        caches.append((linear_cache, activation_cache))\n    A_prev = A\n    (W, b) = (parameters['W' + str(L)], parameters['b' + str(L)])\n    Z = np.dot(W, A_prev) + b\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    AL = sigmoid(Z)\n    assert AL.shape == (W.shape[0], A_prev.shape[1])\n    caches.append((linear_cache, activation_cache))\n    return (AL.round(4).tolist(), caches)\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implement the RELU function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input array.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as Z but with non-positive elements replaced by zero.\n    \"\"\"\n    A = np.maximum(0, Z)\n    return A\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implement the SIGMOID function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input array.\n\n    Returns\n    -------\n    np.ndarray\n        Sigmoid of Z.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    return A"}
{"task_id": 77, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(Z):\n    \"\"\"\n    Sigmoid activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        linear transformation of the activation from the previous layer.\n\n    Returns\n    -------\n    np.ndarray\n        The activation produced by the sigmoid function.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    return A\ndef relu(Z):\n    \"\"\"\n    ReLU activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        linear transformation of the activation from the previous layer.\n    Returns\n    -------\n    np.ndarray\n        The activation produced by the ReLU function.\n    \"\"\"\n    A = np.maximum(0, Z)\n    return A\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((Z, A_prev))\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    caches.append((Z, A))\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 77, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(Z):\n    return (1 / (1 + np.exp(-Z)), Z)\ndef relu(Z):\n    return (np.maximum(0, Z), Z)\ndef L_model_forward(X, parameters):\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        (A, _) = relu(Z)\n        caches.append((_A_prev, W, b, Z))\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    (AL, _) = sigmoid(Z)\n    caches.append((A, W, b, Z))\n    AL = AL.round(4).tolist()\n    return (AL, caches)"}
{"task_id": 77, "completion_id": 7, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef linear_forward(A: np.ndarray, W: np.ndarray, b: np.ndarray) -> tuple:\n    \"\"\"Implement the linear part of a layer's forward propagation.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str) -> tuple:\n    \"\"\"Implement the forward propagation for the LINEAR->ACTIVATION layer.\"\"\"\n    (Z, linear_cache) = linear_forward(A_prev, W, b)\n    if activation == 'sigmoid':\n        A = sigmoid(Z)\n    elif activation == 'relu':\n        A = relu(Z)\n    cache = (linear_cache, Z)\n    return (A, cache)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple:\n    \"\"\"Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation.\"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 77, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(Z):\n    \"\"\"Compute the sigmoid of Z.\"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    return A\ndef relu(Z):\n    \"\"\"Compute the ReLU of Z.\"\"\"\n    A = np.maximum(0, Z)\n    return A\ndef initialize_parameters_deep(layer_dims):\n    \"\"\"Randomly initialize the parameters for a deep L-layer network.\n    \n    Parameters\n    ----------\n    layer_dims : list[int]\n        List of layer dimensions. It includes the input and the output layer\n        dimensions.\n    \n    Returns\n    -------\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n    \"\"\"\n    parameters = {}\n    L = len(layer_dims)\n    for l in range(1, L):\n        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l - 1]) * 0.01\n        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))\n    return parameters\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Forward propagation for a single layer.\n    \n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activation of the previous layer. It has shape (size of previous \n        layer, number of examples).\n    W : np.ndarray\n        Weights matrix. It has shape (size of current layer, size of \n        previous layer).\n    b : np.ndarray\n        Bias vector. It has shape (size of current layer, 1).\n    activation : str\n        Activation function to be used. Either 'sigmoid' or 'relu'.\n    \n    Returns\n    -------\n    tuple[np.ndarray, tuple]\n        Output of the activation function and a tuple with A_prev, W and b.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == 'sigmoid':\n        A = sigmoid(Z)\n    elif activation == 'relu':\n        A = relu(Z)\n    cache = (A_prev, W, b, Z)\n    return (A, cache)\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n    \n    Returns\n    -------\n    AL : np.ndarray\n        The final activation AL rounded to 4 decimals and converted to a\n        regular Python list. The shape is (1, m).\n    caches : list[tuple]\n        List of the cache tuples for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)\nlayer_dims = [3, 4, 5, 1]\nparameters = initialize_parameters_deep(layer_dims)\nX = np.array([[1, 2, 3], [4, 5, 6]])"}
{"task_id": 77, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(Z):\n    return (1 / (1 + np.exp(-Z)), Z)\ndef relu(Z):\n    return (np.maximum(0, Z), Z)\ndef L_model_forward(X, parameters):\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        (A, _) = relu(Z)\n        caches.append((Z, A_prev, W, b))\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    (AL, _) = sigmoid(Z)\n    caches.append((Z, A, W, b))\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    J = -(1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(J, 6)\nA2 = np.array([0.9, 0.6, 0.8])\nY = np.array([1, 0, 1])"}
{"task_id": 81, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n    m = Y.shape[1]\n    cost = 1.0 / m * (-Y * np.log(A2) - (1 - Y) * np.log(1 - A2)).sum()\n    return round(cost, 6)\nA2 = np.array([0.9, 0.8, 0.3, 0.4, 0.5])"}
{"task_id": 81, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = Y.shape[0]\n    cost = -1 / m * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    return round(cost[0, 0], 6)"}
{"task_id": 81, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    A2 = np.clip(A2, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = A2.flatten()\n    Y = Y.flatten()\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = Y.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)\nA2 = np.array([0.8, 0.7, 0.1, 0.05, 0.9])\nY = np.array([1, 1, 0, 0, 1])"}
{"task_id": 81, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    m = Y.shape[0]\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n    cost = 1 / m * (-np.dot(Y.T, np.log(A2)) - np.dot((1 - Y).T, np.log(1 - A2)))\n    return round(float(np.squeeze(cost)), 6)"}
{"task_id": 81, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = np.clip(A2, 1e-15, 1 - 1e-15)\n    J = -(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    J_mean = np.mean(J)\n    return round(J_mean, 6)"}
{"task_id": 81, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    (A2, Y) = (np.array(A2), np.array(Y))\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = Y.shape[0]\n    cost = -1 / m * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    return round(cost.item(), 6)"}
{"task_id": 81, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    EPSILON = 1e-15\n    A2 = np.clip(A2, EPSILON, 1 - EPSILON)\n    m = A2.shape[1]\n    cross_entropy = -(1 / m) * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    return np.round(cross_entropy[0][0], 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q_array = np.array(Q)\n    greedy_index = np.argmax(Q_array)\n    probs = np.ones_like(Q_array, dtype=float) * epsilon / len(Q_array)\n    probs[greedy_index] = 1 - epsilon + epsilon / len(Q_array)\n    assert np.isclose(np.sum(probs), 1, atol=1e-12), 'Probability distribution does not sum to 1'\n    probs = [round(prob, 4) for prob in probs]\n    return probs\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\ngreedy_index = 0"}
{"task_id": 82, "completion_id": 1, "solution": "import numpy as np\ndef epsilon_soft(Q, epsilon):\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    greedy_index = np.where(Q == Q.max())[0]\n    n = len(Q)\n    probabilities = np.full(n, epsilon / n)\n    probabilities[greedy_index[0]] = 1 - epsilon + epsilon / n\n    probabilities = np.round(probabilities, 4)\n    probabilities /= probabilities.sum()\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 2, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state. epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    total_prob = 1.0\n    base_prob = epsilon / len(Q)\n    max_index = np.argmax(Q)\n    max_prob = 1 - epsilon + base_prob\n    probs = [0.0] * len(Q)\n    probs[max_index] = max_prob\n    for i in range(len(Q)):\n        if i != max_index:\n            probs[i] = base_prob\n            total_prob -= base_prob\n    if total_prob != 0:\n        remaining = max_prob - total_prob / len(Q)\n        for i in range(len(Q)):\n            if i != max_index:\n                probs[i] += remaining\n    probs = [round(prob, 4) for prob in probs]\n    return probs"}
{"task_id": 82, "completion_id": 3, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    Q = np.array(Q)\n    a_star = np.argmax(Q)\n    probs = np.ones_like(Q) * epsilon / len(Q)\n    probs[a_star] = 1 - epsilon + epsilon / len(Q)\n    probs = np.round(probs, 4)\n    while abs(np.sum(probs) - 1) > 1e-12:\n        probs = np.round(probs, 4)\n    return probs.tolist()"}
{"task_id": 82, "completion_id": 4, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 epsilon \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    greedy_index = np.argmax(Q)\n    base = epsilon / len(Q)\n    probs = np.full_like(Q, fill_value=base, dtype=float)\n    probs[greedy_index] = 1 - epsilon + base\n    probs = np.round(probs, 4)\n    probs /= np.sum(probs)\n    return probs.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 5, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    assert 0 <= epsilon <= 1, 'epsilon must be in [0, 1]'\n    Q = np.array(Q)\n    n = len(Q)\n    assert n > 0, \"Q values list can't be empty\"\n    greedy_index = int(np.argmax(Q))\n    base = epsilon / n\n    probabilities = np.full(n, base)\n    probabilities[greedy_index] += 1 - epsilon\n    return probabilities.round(4)\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 6, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / n\n    probs = [1 - epsilon + base if i == greedy_index else base for i in range(n)]\n    probs = np.round(probs, decimals=4)\n    diff = 1 - np.sum(probs)\n    probs[np.argmax(probs)] += diff\n    return probs\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 7, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n_actions = len(Q)\n    epsilon = min(max(epsilon, 0), 1)\n    max_idx = np.argmax(Q)\n    base = epsilon / n_actions\n    probabilities = np.ones_like(Q) * base\n    probabilities[max_idx] = 1 - epsilon + base\n    if round(np.sum(probabilities), 12) != 1:\n        probabilities = probabilities / np.sum(probabilities)\n        probabilities = np.round(probabilities, 4)\n        probabilities[-1] = 1 - np.sum(probabilities[:-1])\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 8, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    Q = np.array(Q)\n    n = len(Q)\n    a_star = np.argmax(Q)\n    probs = np.full(n, epsilon / n)\n    probs[a_star] = 1 - epsilon + epsilon / n\n    probs = np.round(probs, 4)\n    probs = probs / np.sum(probs)\n    return probs.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 9, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    greedy_index = np.argmax(Q)\n    probabilities = [0] * len(Q)\n    denom = 1 - epsilon + epsilon / len(Q)\n    probabilities[greedy_index] = 1 - epsilon + epsilon / len(Q)\n    probabilities = [p / denom for p in probabilities]\n    probabilities = [round(p, 4) for p in probabilities]\n    return probabilities\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\nfrom itertools import zip_longest\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    sample_votes = list(zip_longest(*predictions))\n    final_predictions = []\n    for votes in sample_votes:\n        vote_counts = Counter(votes)\n        max_count = max(vote_counts.values())\n        max_vote_labels = [label for (label, count) in vote_counts.items() if count == max_count]\n        final_prediction = min(max_vote_labels)\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 86, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    aggregated_predictions = []\n    for sample_index in range(len(predictions[0])):\n        sample_votes = Counter([tree_predictions[sample_index] for tree_predictions in predictions])\n        sample_majority_vote = sample_votes.most_common()\n        max_votes = sample_majority_vote[0][1]\n        sample_vintage_votes = [vote for (vote, count) in sample_majority_vote if count == max_votes]\n        aggregated_predictions.append(min(sample_vintage_votes))\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 2, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    samples_preds = list(map(list, zip(*predictions)))\n    results = []\n    for sample_preds in samples_preds:\n        votes = Counter(sample_preds)\n        max_votes = max(list(votes.values()))\n        max_votes_labels = [label for (label, count) in votes.items() if count == max_votes]\n        results.append(min(max_votes_labels))\n    return results"}
{"task_id": 86, "completion_id": 3, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : List[List[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    List[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for i in range(len(predictions[0])):\n        votes = Counter([prediction[i] for prediction in predictions])\n        max_vote = max(votes.values())\n        tied_labels = [k for (k, v) in votes.items() if v == max_vote]\n        final_predictions.append(min(tied_labels))\n    return final_predictions"}
{"task_id": 86, "completion_id": 4, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    aggregate_predictions = []\n    for i in range(len(predictions[0])):\n        votes = Counter([predictions[j][i] for j in range(len(predictions))])\n        max_vote = max(votes.values())\n        tie_winners = [k for (k, v) in votes.items() if v == max_vote]\n        aggregate_predictions.append(min(tie_winners))\n    return aggregate_predictions"}
{"task_id": 86, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    aggregated_predictions = []\n    for sample_predictions in zip(*predictions):\n        vote_counts = Counter(sample_predictions)\n        max_vote_classes = [cls for (cls, count) in vote_counts.items() if count == max(vote_counts.values())]\n        aggregated_prediction = min(max_vote_classes)\n        aggregated_predictions.append(aggregated_prediction)\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import Union\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    final_predictions = []\n    for sample_predictions in zip(*predictions):\n        counter = Counter(sample_predictions)\n        highest_votes = max(counter.values())\n        labels_with_highest_votes = [label for (label, votes) in counter.items() if votes == highest_votes]\n        final_predictions.append(min(labels_with_highest_votes))\n    return final_predictions"}
{"task_id": 86, "completion_id": 7, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    majority_votes = []\n    samples = list(map(list, zip(*predictions)))\n    for sample_predictions in samples:\n        votes = Counter(sample_predictions)\n        highest_vote_labels = [label for (label, vote_count) in votes.items() if vote_count == max(votes.values())]\n        majority_votes.append(min(highest_vote_labels))\n    return majority_votes"}
{"task_id": 86, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : List[List[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    List[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    aggregated_predictions = []\n    for sample_predictions in zip(*predictions):\n        vote_counts = Counter(sample_predictions)\n        max_count = max(vote_counts.values())\n        labels_with_max_count = [label for (label, count) in vote_counts.items() if count == max_count]\n        aggregated_predictions.append(min(labels_with_max_count))\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : List[List[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    List[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    majority_votes = [Counter(sample_votes).most_common() for sample_votes in zip(*predictions)]\n    final_votes = [sorted(votes, key=lambda x: x[0])[-1][0] for votes in majority_votes]\n    return final_votes"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.array(z)\n    softplus_values = np.round(np.logaddexp(0.0, z), 4)\n    if softplus_values.shape == ():\n        return float(softplus_values)\n    else:\n        return softplus_values.tolist()"}
{"task_id": 88, "completion_id": 1, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    result = np.logaddexp(0.0, z)\n    if isinstance(result, np.ndarray):\n        return np.round(result, 4).tolist()\n    else:\n        return round(result, 4)\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 2, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0, z).item(), 4)\n    else:\n        z = np.array(z)\n        result = np.logaddexp(0, z).round(4).tolist()\n        return result"}
{"task_id": 88, "completion_id": 3, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.array(z)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 88, "completion_id": 4, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.logaddexp(0.0, z)\n    if z.shape:\n        return list(np.round(result, 4))\n    else:\n        return float(np.round(result, 4))\nz = -1"}
{"task_id": 88, "completion_id": 5, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    elif isinstance(z, list):\n        return [round(np.logaddexp(0.0, val), 4) for val in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(np.logaddexp(0.0, z), 4).tolist()\n    else:\n        raise ValueError('Invalid input type; must be int, float, list, or np.ndarray')"}
{"task_id": 88, "completion_id": 6, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        softplus_array = np.logaddexp(0.0, z).round(4)\n        return softplus_array.tolist()\n    elif isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    else:\n        raise ValueError('Input must be a scalar, list, or ndarray')"}
{"task_id": 88, "completion_id": 7, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    arr = np.array(z)\n    result = np.logaddexp(0.0, arr)\n    np.round(result, decimals=4, out=result)\n    return result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 8, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        return np.round(np.logaddexp(0.0, np.array(z)), 4).tolist()\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array')"}
{"task_id": 88, "completion_id": 9, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0, z), 4)\n    else:\n        return np.round(np.logaddexp(0, np.array(z)), 4).tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        arm_evs = bandit['arm_evs']\n        ev_estimates = policy['ev_estimates']\n    except (TypeError, KeyError):\n        return np.nan\n    if not ev_estimates:\n        return np.nan\n    sorted_evs = [ev_estimates[i] for i in sorted(ev_estimates.keys())]\n    squared_errors = [(true_ev - estimate) ** 2 for (true_ev, estimate) in zip(arm_evs, sorted_evs)]\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 90, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        true_evs = sorted(bandit['arm_evs'])\n        estimated_evs = [policy['ev_estimates'][k] for k in sorted(policy['ev_estimates'].keys())]\n    except (TypeError, KeyError):\n        return np.nan\n    if len(true_evs) != len(estimated_evs):\n        raise ValueError('The true expectation and estimated expectation lists must have the same length.')\n    mse = np.mean(np.square(np.subtract(true_evs, estimated_evs)))\n    return round(mse, 4)"}
{"task_id": 90, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    ev_estimates_sorted = [v for (k, v) in sorted(policy.ev_estimates.items(), key=lambda item: item[0])]\n    arm_evs_sorted = sorted(bandit.arm_evs)\n    square_errors = [(ev_estimates_sorted[i] - arm_evs_sorted[i]) ** 2 for i in range(len(arm_evs_sorted))]\n    mse = np.mean(square_errors)\n    return round(mse, 4)"}
{"task_id": 90, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    try:\n        true_evs = bandit['arm_evs']\n        est_evs = [(idx, policy['ev_estimates'][idx]) for idx in sorted(policy['ev_estimates'].keys())]\n        if len(est_evs) == 0:\n            return np.nan\n        est_evs.sort()\n        squared_errors = [(est - true) ** 2 for ((idx, est), true) in zip(est_evs, true_evs)]\n        mse = sum(squared_errors) / len(squared_errors)\n        return round(mse, 4)\n    except KeyError:\n        return np.nan"}
{"task_id": 90, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        arm_evs = np.array(sorted(bandit['arm_evs']))\n        ev_estimates = np.array(sorted(list(policy['ev_estimates'].values())))\n    except KeyError as e:\n        return np.nan\n    squared_error = np.square(ev_estimates - arm_evs)\n    return round(float(np.mean(squared_error)), 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}"}
{"task_id": 90, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        true_expectations = np.array(bandit['arm_evs'])\n        policy_estimations = np.array([policy['ev_estimates'][i] for i in sorted(policy['ev_estimates'].keys())])\n    except (TypeError, KeyError):\n        return np.nan\n    mse_val = np.mean((true_expectations - policy_estimations) ** 2)\n    return np.round(mse_val, 4)"}
{"task_id": 90, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_indices = list(policy.ev_estimates.keys())\n    true_payouts = bandit.arm_evs\n    policy_estimates = [policy.ev_estimates[i] for i in sorted(arm_indices)]\n    squared_error = sum(((true - estimate) ** 2 for (true, estimate) in zip(true_payouts, policy_estimates)))\n    mse = round(squared_error / len(arm_indices), 4)\n    return mse\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if isinstance(bandit, dict) and 'arm_evs' in bandit:\n        arm_evs = bandit['arm_evs']\n    else:\n        return np.nan\n    if isinstance(policy, dict) and 'ev_estimates' in policy:\n        policy_estimates = policy['ev_estimates']\n    else:\n        return np.nan\n    if len(policy_estimates.keys()) != len(arm_evs):\n        return np.nan\n    sorted_policy_estimates = [policy_estimates[key] for key in sorted(policy_estimates.keys())]\n    mse = np.mean(np.square(np.subtract(sorted_policy_estimates, arm_evs)))\n    return round(mse, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 8, "solution": "import numpy as np\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    sorted_estimates = sorted(policy.ev_estimates.items())\n    sum_squared_error = 0\n    for i in range(len(sorted_estimates)):\n        estimate = sorted_estimates[i][1]\n        true_value = bandit.arm_evs[i]\n        squared_error = (estimate - true_value) ** 2\n        sum_squared_error += squared_error\n    mean_squared_error = sum_squared_error / len(sorted_estimates)\n    return round(mean_squared_error, 4)"}
{"task_id": 90, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or len(policy.ev_estimates) == 0:\n        return np.nan\n    sorted_estimates = sorted(policy.ev_estimates.items())\n    sorted_bandit_evs = sorted(bandit.arm_evs)\n    mse = np.mean([(est - ev) ** 2 for ((_, est), ev) in zip(sorted_estimates, sorted_bandit_evs)])\n    return round(mse, 4)\npolicy = type('Policy', (), {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}})"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocabulary = set()\n    ngram_counts = defaultdict(Counter)\n    sequence_counter = Counter()\n    for sentence in corpus:\n        words = sentence.split()\n        for word in words:\n            sequence_counter[word] += 1\n            vocabulary.add(word)\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N - 1])\n            next_word = words[i + N - 1]\n            ngram_counts[ngram][next_word] += 1\n    sequence_words = sequence.split()\n    if len(sequence_words) < N:\n        return 0.0\n    log_probability = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple(sequence_words[i:i + N - 1])\n        next_word = sequence_words[i + N - 1]\n        if next_word not in vocabulary:\n            next_word = '<UNK>'\n        count_ngram = ngram_counts[ngram][next_word]\n        count_ngram_minus_one = sum(ngram_counts[ngram].values())\n        V = len(vocabulary) + 1\n        probability = (count_ngram + K) / (count_ngram_minus_one + K * V)\n        log_probability += math.log(probability)\n    return round(log_probability, 4)\ncorpus = ['I like to eat pizza', 'My favorite food is pizza', 'I love to eat ice cream', 'I love eating ice cream']"}
{"task_id": 96, "completion_id": 1, "solution": "import re\nimport math\nfrom collections import defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    ngram_counts = defaultdict(lambda : defaultdict(int))\n    sequence_words = re.split('\\\\s+', sequence)\n    V = set(sequence_words)\n    V.add('<UNK>')\n    for sentence in corpus:\n        sentence_words = re.split('\\\\s+', sentence)\n        for word in sentence_words:\n            if word not in V:\n                sentence = sentence.replace(word, '<UNK>')\n        sentence_words = re.split('\\\\s+', sentence)\n        for i in range(len(sentence_words) - N + 1):\n            ngram = tuple(sentence_words[i:i + N])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n    sequence_words = re.split('\\\\s+', sequence)\n    if len(sequence_words) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple(sequence_words[i:i + N])\n        count_context = sum(ngram_counts[ngram[:-1]].values())\n        count_context_word = ngram_counts[ngram[:-1]][ngram[-1]]\n        prob = (count_context_word + K) / (count_context + K * len(V))\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    unk_token = '<UNK>'\n    ngram_counts = defaultdict(Counter)\n    vocabulary = set()\n    for sentence in corpus:\n        words = [unk_token if word not in vocabulary else word for word in sentence.split()]\n        vocabulary.update(words)\n        words = words + [unk_token] * N\n        for i in range(N - 1):\n            ngram_counts[tuple()][tuple(words[i:i + N])] += 1\n        for i in range(len(words) - N + 1):\n            ngram_counts[tuple(words[i:i + N - 1])][words[i + N - 1]] += 1\n    vocabulary_size = len(vocabulary) + 1\n    words = [unk_token if word not in vocabulary else word for word in sequence.split()]\n    if len(words) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(words) - N + 1):\n        context = tuple(words[i:i + N - 1])\n        next_word = words[i + N - 1]\n        count_context_next_word = ngram_counts[context][next_word]\n        count_context = sum(ngram_counts[context].values())\n        prob = (count_context_next_word + K) / (count_context + K * vocabulary_size)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    unigram_vocab = Counter()\n    vocabulary = defaultdict(Counter)\n    for sent in corpus:\n        words = [''] + sent.split() + ['']\n        for i in range(len(words)):\n            unigram_vocab[words[i]] += 1\n            if i > 0:\n                vocabulary[words[i - 1]][words[i]] += 1\n            if i < len(words) - 1:\n                vocabulary[words[i + 1]][words[i]] += 1\n            if i > 1:\n                vocabulary[words[i - 2]][words[i]] += 1\n    unigram_vocab['<UNK>'] = 1\n    vocabulary['<UNK>'] = unigram_vocab\n    words = [''] + sequence.split() + ['']\n    log_prob = 0.0\n    for i in range(N - 1, len(words)):\n        ngram = ' '.join(words[i - N + 1:i])\n        if ngram in vocabulary:\n            log_prob += math.log((vocabulary[ngram][words[i]] + K) / (sum(vocabulary[ngram].values()) + K * len(unigram_vocab)))\n        else:\n            log_prob += math.log(K / (sum(vocabulary['<UNK>'].values()) + K * len(unigram_vocab)))\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus, sequence, N, K=1.0):\n    vocabulary = set()\n    for sentence in corpus:\n        for word in sentence.split():\n            vocabulary.add(word)\n    vocabulary.add('<UNK>')\n    unigrams = Counter()\n    for sentence in corpus:\n        for word in sentence.split():\n            unigrams[word] += 1\n    unigrams['<UNK>'] = 0\n    total_unigrams = sum(unigrams.values())\n    ngrams = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            context = tuple(words[i:i + N - 1])\n            target = words[i + N - 1]\n            ngrams[context][target] += 1\n            if i == 0:\n                ngrams[context]['<START>'] += 1\n            if i == len(words) - N:\n                ngrams[context]['<END>'] += 1\n    total_ngrams = {context: sum(ngrams[context].values()) for context in ngrams}\n    log_prob = 0.0\n    words = sequence.split()\n    for i in range(len(words) - N + 1):\n        context = tuple(words[i:i + N - 1])\n        target = words[i + N - 1]\n        if target not in vocabulary:\n            target = '<UNK>'\n        if context not in ngrams:\n            continue\n        count = ngrams[context][target]\n        log_prob += math.log((count + K) / (total_ngrams[context] + K * len(vocabulary)))\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    ngram_models = []\n    for sentence in corpus:\n        words = sentence.split(' ')\n        words = ['<UNK>' if word not in vocab else word for word in words]\n        for i in range(len(words) - N + 1):\n            ngram_models.append((tuple(words[i:i + N - 1]), words[i + N - 1]))\n    vocab = set(' '.join(corpus).split(' '))\n    vocab.add('<UNK>')\n    V = len(vocab)\n    ngram_counter = Counter(ngram_models)\n    (n1gram_counter := defaultdict(int)).update(map(lambda x: x[0][:-1], ngram_models))\n    words = sequence.split(' ')\n    words = ['<UNK>' if word not in vocab else word for word in words]\n    ngrams = [(tuple(words[i:i + N - 1]), words[i + N - 1]) for i in range(len(words) - N + 1)]\n    prob = 0\n    for ngram in ngrams:\n        (context, word) = ngram\n        prob += math.log((ngram_counter[ngram] + K) / (n1gram_counter[context] + K * V))\n    return round(prob, 4)"}
{"task_id": 96, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, K: float=1.0) -> float:\n    model = defaultdict(Counter)\n    vocab = set()\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            prev = tuple(words[i:i + N - 1]) if N > 1 else ''\n            model[prev][ngram] += 1\n            vocab.update(words)\n    vocab.add('<UNK>')\n    sequence = sentence.split()\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        prev = tuple(sequence[i:i + N - 1]) if N > 1 else ''\n        count_ngram = model[prev][ngram]\n        count_prev = sum(model[prev].values())\n        prob = (count_ngram + K) / (count_prev + K * len(vocab))\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nimport math\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokenized_corpus = [s.split(' ') for s in corpus]\n    vocab = set([word for sublist in tokenized_corpus for word in sublist])\n    vocab.add('<UNK>')\n    cleaned_corpus = [['<UNK>' if word not in vocab else word for word in s] for s in tokenized_corpus]\n    n_grams_frequency = {}\n    for n in range(1, N + 1):\n        n_grams_list = []\n        for s in cleaned_corpus:\n            n_grams = [tuple(s[i:i + n]) for i in range(len(s) - n + 1)]\n            n_grams_list.extend(n_grams)\n        n_grams_frequency[n] = Counter(n_grams_list)\n    sequence = sequence.split(' ')\n    cleaned_sequence = ['<UNK>' if word not in vocab else word for word in sequence]\n    if len(cleaned_sequence) < N:\n        return 0.0\n    sentence_prob = 0.0\n    for n in range(1, N + 1):\n        for i in range(len(cleaned_sequence) - n + 1):\n            context = tuple(cleaned_sequence[i:i + n - 1])\n            word = cleaned_sequence[i + n - 1]\n            prob = (n_grams_frequency[n][context, word] + K) / (n_grams_frequency[n - 1][context] + K * len(vocab)) if n > 1 else (n_grams_frequency[n][tuple([word])] + K) / (len(cleaned_sequence) + K * len(vocab))\n            sentence_prob += math.log(prob)\n    return round(sentence_prob, 4)"}
{"task_id": 96, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\ndef preprocess(sentences, N):\n    n_grams = defaultdict(Counter)\n    for sent in sentences:\n        words = sent.split()\n        words = ['<UNK>' if word not in vocab else word for word in words]\n        for i in range(len(words) - N + 1):\n            key = tuple(words[i:i + N - 1])\n            n_grams[key][words[i + N - 1]] += 1\n    return n_grams\ndef count(context, w, freqs):\n    return freqs[context][w] if w in freqs[context] else 0\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    vocab = set(' '.join(corpus).split())\n    sequences = [s + ' <END>' * (N - 1) for s in corpus]\n    NG = preprocess(sequences, N)\n    words = sequence.split() + ['<END>'] * (N - 1)\n    V = len(vocab) + 1\n    log_prob = 0.0\n    if len(words) < N:\n        return log_prob\n    for i in range(len(words) - N + 1):\n        context = tuple(words[i:i + N - 1])\n        log_N_gram_prob = math.log((count(context, words[i + N - 1], NG) + K) / (sum(NG[context].values()) + K * V))\n        log_prob += log_N_gram_prob\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    tokenized_corpus = [['<UNK>' if word not in vocab else word for word in sentence] for sentence in tokenized_corpus]\n    vocab = set().union(*tokenized_corpus)\n    V = len(vocab)\n    grams = [defaultdict(Counter) for _ in range(N)]\n    for sentence in tokenized_corpus:\n        for i in range(1, N + 1):\n            for j in range(len(sentence) - i + 1):\n                grams[i - 1][' '.join(sentence[j:j + i - 1])][sentence[j + i - 1]] += 1\n    tokenized_sequence = sequence.split()\n    probabilities = []\n    for i in range(N, len(tokenized_sequence) + 1):\n        context = ' '.join(tokenized_sequence[i - N:i - 1])\n        word = tokenized_sequence[i - 1]\n        if context in grams[N - 1].keys():\n            count_w_given_context = grams[N - 2][context][word]\n            count_context = sum(grams[N - 2][context].values())\n        else:\n            count_w_given_context = 0\n            count_context = V\n        probability = (count_w_given_context + K) / (count_context + K * V)\n        probabilities.append(math.log(probability))\n    return round(sum(probabilities), 4) if len(probabilities) > 0 else 0.0"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n    for _ in range(max_iter):\n        W_new = X.dot(H.T).dot(np.linalg.inv(H.dot(H.T) + alpha * np.eye(H.shape[0])))\n        H_new = np.linalg.inv(W_new.T.dot(W_new) + alpha * np.eye(W_new.shape[1])).dot(W_new.T).dot(X)\n        loss = np.linalg.norm(X - W_new.dot(H_new), ord='fro') ** 2 + alpha * (np.linalg.norm(W_new, ord='fro') ** 2 + np.linalg.norm(H_new, ord='fro') ** 2)\n        if loss <= tol:\n            break\n        (W, H) = (W_new, H_new)\n    X_hat = W.dot(H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 1, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    loss = np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    for _ in range(max_iter):\n        W = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X.T).T\n        H = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X)\n        new_loss = np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if loss - new_loss < tol:\n            break\n        loss = new_loss\n    return (W @ H).round(4).tolist()"}
{"task_id": 108, "completion_id": 2, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n        \n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        H = np.linalg.solve(alpha * np.eye(K) + W.T @ W, W.T @ X)\n        W = np.linalg.solve(alpha * np.eye(K) + H @ H.T, X @ H.T).T\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            return np.round(X_hat, 4).tolist()\n    return np.round(X_hat, 4).tolist()"}
{"task_id": 108, "completion_id": 3, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X)\n        H_new = H_new.clip(0)\n        W_new = np.linalg.solve(H_new @ H_new.T + alpha * np.eye(K), X @ H_new.T).T\n        W_new = W_new.clip(0)\n        loss = np.linalg.norm(X - W_new @ H_new, 'fro') ** 2 + alpha * (np.linalg.norm(W_new, 'fro') ** 2 + np.linalg.norm(H_new, 'fro') ** 2)\n        if loss < tol:\n            break\n        (W, H) = (W_new, H_new)\n    X_hat = W @ H\n    X_hat = X_hat.round(4).tolist()\n    return X_hat"}
{"task_id": 108, "completion_id": 4, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    loss_prev = float('inf')\n    for _ in range(max_iter):\n        H = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X)\n        W = np.linalg.solve(H @ H.T + alpha * np.eye(K), (X @ H.T).T).T\n        loss = np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if abs(loss_prev - loss) < tol:\n            break\n        loss_prev = loss\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat"}
{"task_id": 108, "completion_id": 5, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n    for _ in range(max_iter):\n        WtX = W.T @ X\n        WtWH_reg = W.T @ W + alpha * np.eye(K)\n        H_new = np.linalg.solve(WtWH_reg.T, WtX.T).T\n        XH_newt = X @ H_new\n        HHt_reg = H_new @ H_new.T + alpha * np.eye(K)\n        W_new = np.linalg.solve(HHt_reg.T, XH_newt.T).T\n        diff = np.linalg.norm(X - W_new @ H) + alpha * (np.linalg.norm(H) + np.linalg.norm(W))\n        if diff < tol:\n            break\n        (W, H) = (W_new, H_new)\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 6, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.normal(size=(N, K))\n    H = np.random.normal(size=(K, M))\n    WH = np.dot(W, H)\n    loss = np.linalg.norm(X - WH, ord='fro') ** 2 + alpha * (np.linalg.norm(W, ord='fro') ** 2 + np.linalg.norm(H, ord='fro') ** 2)\n    for _ in range(max_iter):\n        H = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        WH = np.dot(W, H)\n        W = np.dot(X, np.linalg.pinv(H.T))\n        old_loss = loss\n        WH = np.dot(W, H)\n        loss = np.linalg.norm(X - WH, ord='fro') ** 2 + alpha * (np.linalg.norm(W, ord='fro') ** 2 + np.linalg.norm(H, ord='fro') ** 2)\n        if np.abs(old_loss - loss) < tol:\n            break\n    return np.dot(W, H).round(4).tolist()\nX = np.random.rand(5, 5)\nK = 2"}
{"task_id": 108, "completion_id": 7, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    X_hat = np.dot(W, H)\n    loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W_new = np.linalg.solve(np.dot(H_new, H_new.T) + alpha * np.eye(N), np.dot(X, H_new.T).T)\n        X_hat_new = np.dot(W_new, H_new)\n        loss_new = np.linalg.norm(X - X_hat_new) ** 2 + alpha * (np.linalg.norm(W_new) ** 2 + np.linalg.norm(H_new) ** 2)\n        if np.abs(loss - loss_new) < tol:\n            break\n        W = W_new\n        H = H_new\n        X_hat = X_hat_new\n        loss = loss_new\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 8, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    prev_loss = np.inf\n    for _ in range(max_iter):\n        X_WH = X - np.dot(W, H)\n        H_new = H * np.dot(W.T, X_WH) / np.dot(W.T, W).dot(H)\n        H_new[H_new < 0] = 0\n        H_new = H_new / np.maximum(np.linalg.norm(H_new, 'fro'), np.finfo(float).eps)\n        X_WH = X - np.dot(W, H_new)\n        W_new = W * np.dot(X_WH, H_new.T) / np.dot(W, H_new).dot(H_new.T)\n        W_new[W_new < 0] = 0\n        W_new = W_new / np.maximum(np.linalg.norm(W_new, 'fro'), np.finfo(float).eps)\n        loss = np.linalg.norm(X - np.dot(W_new, H_new), 'fro') + alpha * (np.linalg.norm(W_new, 'fro') + np.linalg.norm(H_new, 'fro'))\n        if prev_loss - loss < tol:\n            break\n        (W, H) = (W_new, H_new)\n        prev_loss = loss\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 9, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001, seed: int=0) -> list[list[float]]:\n    np.random.seed(seed)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    last_loss = np.inf\n    for _ in range(max_iter):\n        H = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(X, H.T).T).T\n        loss = np.linalg.norm(X - np.dot(W, H), 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if np.abs(loss - last_loss) < tol:\n            break\n        last_loss = loss\n    return np.dot(W, H).round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = random.sample(list(X), K)\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for point in X:\n            closest_centroid_index = np.argmin([np.linalg.norm(point - centroid) for centroid in centroids])\n            clusters[closest_centroid_index].append(point)\n        prev_centroids = centroids.copy()\n        for i in range(K):\n            if clusters[i]:\n                centroids[i] = np.mean(clusters[i], axis=0)\n        if np.array_equal(prev_centroids, centroids):\n            break\n    return sorted([list(map(lambda x: round(x, 4), centroid)) for centroid in centroids])"}
{"task_id": 109, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [random.choice(X)]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        clusters_new = [[] for _ in range(K)]\n        for x in X:\n            i_min = min(range(K), key=lambda i: np.inner(x - centroids[i], x - centroids[i]))\n            clusters[i_min].append(x)\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                centroids_new = np.mean(cluster, axis=0)\n                clusters_new[i] = list(centroids_new)\n            else:\n                clusters_new[i] = centroids[i]\n        if sorted(clusters_new) == sorted(centroids):\n            break\n        centroids = clusters_new\n    return [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted(centroids, key=lambda tup: tup[0])]"}
{"task_id": 109, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.choice(X.shape[0])]]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    for _ in range(max_iter):\n        labels = np.argmin([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted(list(map(lambda c: list(map(lambda x: round(x, 4), c)), centroids)))\n    return centroids"}
{"task_id": 109, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.random import default_rng\nfrom scipy.spatial import distance\ndef calculate_distances(X, centroids):\n    D = distance.cdist(X, centroids, 'sqeuclidean')\n    return D\ndef kmeans_plusplus(X, K, random_state):\n    rng = default_rng(random_state)\n    centroids = [X[0]]\n    for _ in range(1, K):\n        D = calculate_distances(X, centroids)\n        pd = D.min(axis=-1)\n        pd /= pd.sum()\n        new_centroid_indx = rng.choice(len(X), 1, replace=False, p=pd)[0]\n        centroids.append(X[new_centroid_indx])\n    return np.array(centroids)\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = kmeans_plusplus(X, K, random_state)\n    old_centroids = None\n    labels = None\n    for _ in range(max_iter):\n        if np.array_equiv(old_centroids, centroids):\n            break\n        old_centroids = np.copy(centroids)\n        D = calculate_distances(X, centroids)\n        labels = np.argmin(D, axis=-1)\n        sums = np.zeros((K, X.shape[-1]))\n        counts = np.zeros(K)\n        np.add.at(sums, labels, X)\n        np.add.at(counts, labels, 1)\n        empty_clusters = np.where(counts[:, None] == 0)\n        sums[empty_clusters[0], :] = old_centroids[empty_clusters[0], :]\n        counts[empty_clusters[0]] = 1\n        centroids = sums / counts[:, None]\n    centroids_list = [list(map(lambda x: round(float(x), 4), centroid)) for centroid in centroids]\n    centroids_list.sort(key=lambda x: (x[0], x))\n    return centroids_list"}
{"task_id": 109, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    (m, n) = X.shape\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def initialize_centroids():\n        centroids = [random.choice(X)]\n        for _ in range(1, K):\n            dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n            probs = dist_sq / dist_sq.sum()\n            cumulative_probs = probs.cumsum()\n            r = random.random()\n            for (j, p) in enumerate(cumulative_probs):\n                if r < p:\n                    i = j\n                    break\n            centroids.append(X[i])\n        return np.array(centroids)\n\n    def assign_points_to_centroids(centroids):\n        clusters = [[] for _ in range(K)]\n        for point in X:\n            clusters[np.argmin([np.linalg.norm(point - centroid) for centroid in centroids])].append(point)\n        return clusters\n\n    def update_centroids(clusters):\n        new_centroids = []\n        for cluster in clusters:\n            if len(cluster) != 0:\n                new_centroids.append(np.mean(cluster, axis=0))\n            else:\n                new_centroids.append(np.zeros(n))\n        return np.array(new_centroids)\n    centroids = initialize_centroids()\n    for _ in range(max_iter):\n        clusters = assign_points_to_centroids(centroids)\n        new_centroids = update_centroids(clusters)\n        if np.array_equal(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x))\n    return [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]"}
{"task_id": 109, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    (m, n) = X.shape\n\n    def initialise_centroids(X, K):\n        centroids = random.sample(list(X), K)\n        return centroids\n    centroids = initialise_centroids(X, K)\n\n    def find_nearest_centroid(centroids, X):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        return np.argmin(distances, axis=0)\n    for _ in range(max_iter):\n        clusters = find_nearest_centroid(centroids, X)\n        new_centroids = np.array([X[clusters == k].mean(axis=0) for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort()\n    return centroids"}
{"task_id": 109, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    (m, n) = X.shape\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def distance(a, b):\n        return np.linalg.norm(a - b, axis=1)\n\n    def initialize_centroids():\n        centroids = [X[np.random.randint(0, m), :]]\n        for _ in range(1, K):\n            dists = np.min(np.array([distance(c, X) for c in centroids]), axis=0)\n            probs = dists / np.sum(dists)\n            cumprobs = np.cumsum(probs)\n            r = np.random.rand()\n            for (j, p) in enumerate(cumprobs):\n                if r < p:\n                    i = j\n                    break\n            centroids.append(X[i, :])\n        return np.array(centroids)\n\n    def update_centroids():\n        centroids_new = np.array([np.mean(X[labels == k, :], axis=0) for k in range(K)])\n        centroids_new = np.nan_to_num(centroids_new)\n        return centroids_new\n\n    def labels_update():\n        dists = np.array([distance(c, X) for c in centroids])\n        labels_new = np.argmin(dists, axis=0)\n        return labels_new\n    centroids = initialize_centroids()\n    labels = labels_update()\n    for _ in range(max_iter):\n        centroids_new = update_centroids()\n        labels_new = labels_update()\n        if np.array_equal(labels, labels_new):\n            break\n        centroids = centroids_new\n        labels = labels_new\n    centroids_sorted = sorted(centroids, key=lambda centroid: (centroid[0], centroid))\n    return [list(map(lambda centroid: round(centroid, 4), centroid)) for centroid in centroids_sorted]"}
{"task_id": 109, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    (m, n) = X.shape\n    random.seed(random_state)\n    np.random.seed(random_state)\n\n    def initialize_clusters(X, K):\n        centroids = [X[np.random.randint(0, m - 1)]]\n        for _ in range(1, K):\n            dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n            probs = dist_sq / dist_sq.sum()\n            cumulative_probs = probs.cumsum()\n            r = np.random.rand()\n            for (j, p) in enumerate(cumulative_probs):\n                if r < p:\n                    i = j\n                    break\n            centroids.append(X[i])\n        return centroids\n\n    def closest_centroid(x, centroids):\n        (best_index, best_value) = (None, None)\n        for (i, c) in enumerate(centroids):\n            value = np.linalg.norm(c - x)\n            if best_value is None or value < best_value:\n                (best_index, best_value) = (i, value)\n        return best_index\n    centroids = initialize_clusters(X, K)\n    clusters = None\n    for _ in range(max_iter):\n        new_clusters = [list() for _ in range(K)]\n        for x in X:\n            index = closest_centroid(x, centroids)\n            new_clusters[index].append(x)\n        if clusters == new_clusters:\n            break\n        clusters = new_clusters\n        centroids = [np.mean(cluster, axis=0) if cluster else centroids[i] for (i, cluster) in enumerate(clusters)]\n    centroids = sorted(centroids)\n    centroids_rounded = [[round(y, 4) for y in x] for x in centroids]\n    return centroids_rounded"}
{"task_id": 109, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    (m, n) = X.shape\n    np.random.seed(random_state)\n    random.seed(random_state)\n    centroids = init_centroids(X, K)\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            closest_centroid_idx = np.argmin([np.linalg.norm(x - centroid) for centroid in centroids])\n            clusters[closest_centroid_idx].append(x)\n        for i in range(K):\n            cluster_data = np.array(clusters[i])\n            if cluster_data.shape[0] != 0:\n                centroids[i] = np.mean(cluster_data, axis=0)\n    centroids = sorted(centroids, key=lambda centroid: (centroid[0], centroid[1]))\n    centroids = [[round(coord, 4) for coord in centroid] for centroid in centroids]\n    return centroids\ndef init_centroids(X: np.ndarray, K: int):\n    (m, _) = X.shape\n    first_centroid_idx = np.random.choice(m, replace=True)\n    centroids = [X[first_centroid_idx]]\n    for _ in range(1, K):\n        min_sq_distances = [min((np.linalg.norm(x - centroid) ** 2 for centroid in centroids)) for x in X]\n        weights = np.array(min_sq_distances) / sum(min_sq_distances)\n        new_centroid_idx = np.random.choice(m, replace=True, p=weights)\n        centroids.append(X[new_centroid_idx])\n    return centroids"}
{"task_id": 109, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    (m, n) = X.shape\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.randint(0, m)]]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        cluster_indices = [[] for _ in range(K)]\n        for (i, point) in enumerate(X):\n            closest_centroid_index = np.argmin([np.linalg.norm(point - centroid) for centroid in centroids])\n            clusters[closest_centroid_index].append(point)\n            cluster_indices[closest_centroid_index].append(i)\n        new_centroids = []\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                new_centroids.append(np.mean(cluster, axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted([[round(val, 4) for val in centroid] for centroid in centroids])\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text, time_steps, vocabulary):\n    encoded = []\n    for char in text[:time_steps]:\n        encoded.append(vocabulary.get(char, 0))\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab):\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary, inv_output_vocabulary, text):\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded]))[0]\n    predicted_ids = prediction.argmax(-1)\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 111, "completion_id": 1, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    ids = [vocabulary.get(c, 0) for c in text[:time_steps]]\n    return ids + [0] * (time_steps - len(ids))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    model_input = np.array([encoded_input])\n    prediction = model.predict(model_input)\n    decoded_prediction = int_to_string(prediction.argmax(axis=1), inv_output_vocabulary)\n    return decoded_prediction"}
{"task_id": 111, "completion_id": 2, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded_list = []\n    for character in text:\n        if character in vocabulary:\n            encoded_list.append(vocabulary[character])\n        else:\n            encoded_list.append(0)\n    encoded_list = encoded_list[:time_steps]\n    while len(encoded_list) < time_steps:\n        encoded_list.append(0)\n    return encoded_list\ndef int_to_string(indices: list, inverse_vocab: dict[int, str]) -> str:\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_string = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_string = np.array(encoded_string).reshape(1, -1)\n    prediction = model.predict(encoded_string)\n    predicted_ids = np.argmax(prediction, axis=-1).flatten().tolist()\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 111, "completion_id": 3, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    text = text[:time_steps]\n    encoded = [vocabulary.get(char, 0) for char in text]\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    chars = [inverse_vocab.get(idx, '') for idx in indices if idx != 0]\n    return ''.join(chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded = np.array([encoded])\n    prediction_logits = model.predict(encoded)\n    prediction = np.argmax(prediction_logits, axis=-1).flatten()\n    decoded = int_to_string(prediction, inv_output_vocabulary)\n    return decoded"}
{"task_id": 111, "completion_id": 4, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Convert a string of text into a fixed-length list of integer token ids.\"\"\"\n    int_seq = [vocabulary.get(char, 0) for char in text]\n    if len(int_seq) < time_steps:\n        int_seq += [0] * (time_steps - len(int_seq))\n    else:\n        int_seq = int_seq[:time_steps]\n    return int_seq\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Convert a list/array of integer ids back to text.\"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encode the raw text with `string_to_int`,\n    call `model.predict` on the encoded batch (batch size 1),\n    apply `argmax` over the last axis to obtain one predicted id per time step,\n    and finally decode the ids with `int_to_string`.\"\"\"\n    seq = string_to_int(text, TIME_STEPS, input_vocabulary)\n    pred = model.predict(np.array([seq]))[0]\n    pred_ids = pred.argmax(axis=-1)\n    decoded = int_to_string(pred_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 111, "completion_id": 5, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    decoded = [inverse_vocab.get(idx) for idx in indices if idx != 0]\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    input_batch = np.array([string_to_int(text, TIME_STEPS, input_vocabulary)])\n    output_batch = model.predict(input_batch)\n    decoded = int_to_string(np.argmax(output_batch[0], -1), inv_output_vocabulary)\n    return decoded"}
{"task_id": 111, "completion_id": 6, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded_text = np.zeros((time_steps,), dtype=int)\n    for (i, char) in enumerate(text):\n        if i >= time_steps:\n            break\n        encoded_text[i] = vocabulary.get(char, 0)\n    return encoded_text\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.expand_dims(encoded_text, axis=0)\n    logits = model.predict(batch)\n    predicted_int = np.argmax(logits, axis=-1)[0]\n    predicted_string = int_to_string(predicted_int, inv_output_vocabulary)\n    return predicted_string"}
{"task_id": 111, "completion_id": 7, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\n\n    Args:\n        text: The input string to encode.\n        time_steps: The fixed length of the encoded sequence.\n        vocabulary: The vocabulary to use for encoding.\n\n    Returns:\n        The encoded list of integer token ids.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    elif len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\n\n    Args:\n        indices: The list of integer ids to decode.\n        inverse_vocab: The inverse vocabulary to use for decoding.\n\n    Returns:\n        The decoded string.\n    \"\"\"\n    chars = [inverse_vocab[index] for index in indices if index > 0]\n    return ''.join(chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together: encodes the raw text, calls model.predict, applies argmax, decodes the ids.\n\n    Args:\n        model: The model to use for prediction.\n        input_vocabulary: The vocabulary to use for encoding.\n        inv_output_vocabulary: The inverse vocabulary to use for decoding.\n        text: The raw text to encode and predict.\n\n    Returns:\n        The decoded prediction string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_tensor = np.array(encoded).reshape(1, -1)\n    prediction = model.predict(input_tensor)\n    predicted_indices = np.argmax(prediction, axis=-1).flatten()\n    decoded = int_to_string(predicted_indices, inv_output_vocabulary)\n    return decoded"}
{"task_id": 111, "completion_id": 8, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded = []\n    for char in text[:time_steps]:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    while len(encoded) < time_steps:\n        encoded.append(0)\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    model_input = np.array([encoded_text])\n    y_pred = model.predict(model_input)\n    pred_indices = np.argmax(y_pred, axis=-1)[0]\n    prediction = int_to_string(pred_indices, inv_output_vocabulary)\n    return prediction"}
{"task_id": 111, "completion_id": 9, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length `TIME_STEPS`.\n    If the input is shorter than `TIME_STEPS` append the padding token `0` on the right;\n    if it is longer, truncate the sequence.\"\"\"\n    encoded_list = [vocabulary.get(char, 0) for char in text]\n    return (encoded_list + [0] * time_steps)[:time_steps]\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) must be ignored during decoding \u2013 they must not appear in the returned string.\"\"\"\n    return ''.join((inverse_vocab.get(id, '') for id in indices if id != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together.\n    \u2022 encodes the raw text with `string_to_int`,\n    \u2022 calls `model.predict` on the encoded batch (batch size 1),\n    \u2022 applies `argmax` over the last axis to obtain one predicted id per time step, and finally\n    \u2022 decodes the ids with `int_to_string`.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    model_input = np.reshape(encoded_text, (1, -1))\n    prediction = model.predict(model_input)\n    decoded_prediction = int_to_string(np.argmax(prediction, axis=-1).flatten(), inv_output_vocabulary)\n    return decoded_prediction"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise ValueError(\"If examples is None, the global constant EXAMPLES must exist in the user's environment\")\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f'input: {example}\\noutput: {prediction_str}')\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 113, "completion_id": 1, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        from utilities import EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print('input:', example)\n        print('output:', prediction_str)\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 113, "completion_id": 2, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        from EXAMPLES import EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f'input: {example}\\noutput: {prediction_str}')\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 113, "completion_id": 3, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    outputs = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input:  {example}\\noutput: {predicted_string}')\n        outputs.append(predicted_string)\n    return outputs"}
{"task_id": 113, "completion_id": 4, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        from global_vars import EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = model(example)\n        predicted_string = ''.join(predicted_chars)\n        predictions.append(predicted_string)\n        print(f'input: {example}\\noutput: {predicted_string}\\n')\n    return predictions"}
{"task_id": 113, "completion_id": 5, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise ValueError('No examples provided and global constant EXAMPLES is not defined')\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print('input: ', example)\n        print('output: ', prediction_str)\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 113, "completion_id": 6, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction = ''.join(prediction_chars)\n        print(f'input:  {example}')\n        print(f'output: {prediction}')\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 113, "completion_id": 7, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    if examples is None:\n        from EXAMPLES import EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input: {example}\\noutput: {predicted_string}\\n')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 8, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    if examples is None:\n        from EXAMPLES import EXAMPLES\n    else:\n        EXAMPLES = examples\n    outputs = []\n    for example in EXAMPLES:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(prediction)\n        outputs.append(predicted_str)\n        print(f'input: {example}\\noutput: {predicted_str}\\n')\n    return outputs"}
{"task_id": 113, "completion_id": 9, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 run_examples does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If None, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n\n    Note: 'run_example' function is not defined in this solution, but is expected to be available and\n          performs the actual prediction for an individual example.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    results = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(prediction)\n        print('input:', example)\n        print('output:', predicted_string)\n        results.append(predicted_string)\n    return results"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (np.round(loss, 4), np.round(gradient, 4).tolist())"}
{"task_id": 115, "completion_id": 1, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (type float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / X.shape[0]\n    return (round(loss, 4), np.around(gradient, 4).tolist())"}
{"task_id": 115, "completion_id": 2, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    loss = -np.mean(y * np.log(p + eps) + (1 - y) * np.log(1 - p + eps))\n    gradient = np.dot(X.T, p - y) / X.shape[0]\n    return (round(loss, 4), np.around(gradient, 4).tolist())"}
{"task_id": 115, "completion_id": 3, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    if len(y.shape) == 1:\n        y = y[:, np.newaxis]\n    if len(w.shape) == 1:\n        w = w[:, np.newaxis]\n    m = X.shape[0]\n    eps = 1e-20\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    p = np.where(p == 0, eps, p)\n    p = np.where(p == 1, 1 - eps, p)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = 1 / m * (X.T @ (p - y))\n    return (round(loss, 4), np.round(grad, 4).tolist())"}
{"task_id": 115, "completion_id": 4, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    eps = 1e-20\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.maximum(eps, np.minimum(1 - eps, p))\n    m = X.shape[0]\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    grad = np.dot(X.T, p - y) / m\n    grad = np.round(grad, 4).tolist()\n    return (loss, grad)"}
{"task_id": 115, "completion_id": 5, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    loss = round(loss, 4)\n    gradient = np.dot(X.T, p - y) / m\n    gradient = gradient.round(4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    (m, n) = X.shape\n    eps = 1e-20\n    z = np.dot(X, w)\n    p = sigmoid(z)\n    p = np.where(p == 0, eps, p)\n    p = np.where(p == 1, 1 - eps, p)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    grad = np.dot(X.T, p - y) / m\n    return (np.round(loss, 4).astype(float).tolist(), np.round(grad, 4).astype(float).tolist())"}
{"task_id": 115, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X, y, w):\n    eps = 1e-20\n    (m, n) = X.shape\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = sigmoid(z)\n    p = np.clip(p, eps, 1 - eps)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = np.round(loss, 4)\n    grad = 1 / m * X.T @ (p - y)\n    grad = np.round(grad, 4).tolist()\n    return (loss, grad)"}
{"task_id": 115, "completion_id": 8, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \n    \"\"\"\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    J = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    J = round(J, 4)\n    grad = np.mean((p - y) * X, axis=0)\n    grad = np.expand_dims(grad, axis=1)\n    return (J, grad.tolist())"}
{"task_id": 115, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X, y, w):\n    (m, n) = X.shape\n    eps = 1e-20\n    z = np.dot(X, w)\n    p = np.clip(sigmoid(z), eps, 1 - eps)\n    loss = -(1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = 1 / m * np.dot(X.T, p - y)\n    return (round(loss, 4), np.round(grad, 4).tolist())"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    alphas = []\n    for _ in range(n_clf):\n        best_threshold = None\n        for j in range(n):\n            unique_values = np.unique(X_train[:, j])\n            for threshold in unique_values:\n                y_pred = np.ones(y_train.shape)\n                y_pred[X_train[:, j] < threshold] = -1\n                error = np.sum(weights[y_train != y_pred])\n                if best_threshold is None or error < best_threshold[1]:\n                    best_threshold = (j, threshold, error)\n        (j, threshold, error) = best_threshold\n        alpha = 0.5 * np.log((1.0 - error) / error)\n        alphas.append(alpha)\n        if error == 0:\n            break\n        y_pred = np.ones(y_train.shape)\n        y_pred[X_train[:, j] < threshold] = -1\n        weights *= np.exp(-alpha * y_train * y_pred)\n        weights /= np.sum(weights)\n    preds_test = np.zeros((X_test.shape[0],))\n    for (alpha, threshold, j) in alphas:\n        preds = np.ones((X_test.shape[0],))\n        preds[X_test[:, j] < threshold] = -1\n        preds_test += alpha * preds\n    preds_test = np.sign(preds_test)\n    return preds_test.tolist()"}
{"task_id": 118, "completion_id": 1, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_index = None\n        self.threshold = None\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        feature_values = X[:, self.feature_index]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[feature_values < self.threshold] = -1\n        else:\n            predictions[feature_values > self.threshold] = -1\n        return predictions\nclass AdaBoost:\n\n    def __init__(self, n_clf=5):\n        self.n_clf = n_clf\n        self.clfs = []\n\n    def fit(self, X, y):\n        (n_samples, n_features) = X.shape\n        w = np.full(n_samples, 1 / n_samples)\n        for _ in range(self.n_clf):\n            clf = DecisionStump()\n            min_error = float('inf')\n            for feature_i in range(n_features):\n                feature_values = X[:, feature_i]\n                thresholds = np.unique(feature_values)\n                for threshold in thresholds:\n                    polarity = 1\n                    predictions = np.ones(n_samples)\n                    predictions[feature_values < threshold] = -1\n                    error = np.sum(w[predictions != y])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -1\n                    if error < min_error:\n                        min_error = error\n                        clf.polarity = polarity\n                        clf.threshold = threshold\n                        clf.feature_index = feature_i\n            clf.alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n            predictions = clf.predict(X)\n            w *= np.exp(-clf.alpha * y * predictions)\n            w /= np.sum(w)\n            self.clfs.append(clf)\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        y_pred = np.zeros((n_samples, 1))\n        for clf in self.clfs:\n            y_pred += clf.alpha * clf.predict(X)\n        y_pred = np.sign(y_pred).flatten()\n        return y_pred\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5):\n    n_clf = max(n_clf, 1)\n    model = AdaBoost(n_clf=n_clf)\n    model.fit(X_train, y_train)\n    return model.predict(X_test).tolist()"}
{"task_id": 118, "completion_id": 2, "solution": "import numpy as np\ndef compute_error(y, y_pred, w):\n    return np.sum(w * (y != y_pred)) / np.sum(w)\ndef compute_alpha(error):\n    return 0.5 * np.log((1 - error) / error)\ndef train_single_stump(X, y, w):\n    num_features = X.shape[1]\n    min_error = np.inf\n    (best_feature, best_threshold, best_polarity) = (None, None, None)\n    for feature in range(num_features):\n        for threshold in np.unique(X[:, feature]):\n            for polarity in [-1, 1]:\n                y_pred = polarity * np.ones(y.shape)\n                y_pred[X[:, feature] * polarity < threshold * polarity] = -1\n                error = compute_error(y, y_pred, w)\n                if error < min_error:\n                    min_error = error\n                    (best_feature, best_threshold, best_polarity) = (feature, threshold, polarity)\n    return (min_error, best_feature, best_threshold, best_polarity, compute_alpha(min_error))\ndef predict_stump(X, feature, threshold, polarity, alpha):\n    y_pred = polarity * np.ones(X.shape[0])\n    y_pred[X[:, feature] * polarity < threshold * polarity] = -1\n    return (y_pred, alpha)\ndef update_weights(w, alpha, y, y_pred):\n    w *= np.exp(-alpha * y * y_pred)\n    w /= np.sum(w)\n    return w\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, _) = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n    for _ in range(n_clf):\n        (error, feature, threshold, polarity, alpha) = train_single_stump(X_train, y_train, w)\n        (y_pred, alpha) = predict_stump(X_train, feature, threshold, polarity, alpha)\n        w = update_weights(w, alpha, y_train, y_pred)\n        clfs.append((feature, threshold, polarity, alpha))\n    final_predictions = np.zeros(X_test.shape[0])\n    for (feature, threshold, polarity, alpha) in clfs:\n        (stump_predictions, _) = predict_stump(X_test, feature, threshold, polarity, alpha)\n        final_predictions += alpha * stump_predictions\n    return [1 if final_prediction >= 0 else -1 for final_prediction in final_predictions]"}
{"task_id": 118, "completion_id": 3, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    w = np.ones(m) / m\n    prediction = np.zeros(m)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        stump = DecisionTreeClassifier(max_depth=1, random_state=0)\n        stump.fit(X_train, y_train, sample_weight=w)\n        stump_pred = stump.predict(X_train)\n        misclassified = stump_pred != y_train\n        err = np.sum(w[misclassified]) / np.sum(w)\n        alpha = np.log((1 - err) / err) / 2\n        w = w * np.exp(alpha * misclassified * (1 - alpha - 1))\n        w = w / np.sum(w)\n        prediction += alpha * stump_pred\n        stumps.append(stump)\n        stump_weights.append(alpha)\n    final_pred = np.sign(prediction)\n    test_pred = np.zeros(X_test.shape[0])\n    for (stump, weight) in zip(stumps, stump_weights):\n        test_pred += weight * stump.predict(X_test)\n    final_test_pred = np.sign(test_pred)\n    return final_test_pred.tolist()"}
{"task_id": 118, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    for _ in range(max(n_clf, 1)):\n        (best_stump, error, sign) = (None, float('inf'), 1)\n        for i in range(n):\n            for sign in (1, -1):\n                err = np.sum(weights[X_train[:, i] * sign < 0])\n                if err < error:\n                    (best_stump, error) = ((i, sign), err)\n        classifier_weight = 0.5 * np.log((1 - error) / error)\n        weights *= np.exp(-classifier_weight * y_train * sign * X_train[:, best_stump[0]] * best_stump[1])\n        weights /= np.sum(weights)\n        classifiers.append((best_stump, classifier_weight, sign))\n    predict = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        predict += clf[2] * clf[1] * np.array([-1 if x[clf[0][0]] < 0 else 1 for x in X_test])\n    return [-1 if p < 0 else 1 for p in predict]"}
{"task_id": 118, "completion_id": 5, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_idx = None\n        self.threshold = None\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        X_column = X[:, self.feature_idx]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X_column < self.threshold] = -1\n        else:\n            predictions[X_column > self.threshold] = -1\n        return predictions\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    n_clf = max(1, n_clf)\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        clf = DecisionStump()\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                polarity = 1\n                prediction = np.ones(np.shape(y_train))\n                prediction[X_train < threshold] = -1\n                error = sum(weights[prediction != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    clf.polarity = polarity\n                    clf.threshold = threshold\n                    clf.feature_idx = feature_i\n        EPS = 1e-10\n        clf.alpha = 0.5 * np.log((1 - min_error + EPS) / (min_error + EPS))\n        predictions = clf.predict(X_train)\n        weights *= np.exp(-clf.alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append(clf)\n    (n_samples, n_features) = X_test.shape\n    predictions = np.zeros((n_clf, n_samples))\n    for (i, clf) in enumerate(clfs):\n        predictions[i, :] = clf.alpha * clf.predict(X_test)\n    y_pred = np.sum(predictions, axis=0)\n    y_pred = np.sign(y_pred)\n    return y_pred.tolist()"}
{"task_id": 118, "completion_id": 6, "solution": "def compute_error(y: np.ndarray, y_pred: np.ndarray, weights: np.ndarray) -> float:\n    \"\"\"Compute the weighted error of a decision stump.\n\n    Args:\n        y:      1-D NumPy array of length m with true labels **-1** or **1**.\n        y_pred: 1-D NumPy array of length m with predicted labels **-1** or **1**.\n        weights: 1-D NumPy array of length m with data point weights.\n\n    Returns:\n        The weighted classification error of the decision stump.\n    \"\"\"\n    return np.sum(weights * (y != y_pred)) / np.sum(weights)\ndef compute_weights(y: np.ndarray, y_pred: np.ndarray, weights: np.ndarray, alpha: float) -> np.ndarray:\n    \"\"\"Compute adjusted weights for samples after one iteration of AdaBoost.\n\n    Args:\n        y:      1-D NumPy array of length m with true labels **-1** or **1**.\n        y_pred: 1-D NumPy array of length m with predicted labels **-1** or **1**.\n        weights: 1-D NumPy array of length m with data point weights.\n        alpha:  Current stump's weight.\n\n    Returns:\n        The adjusted weights after one iteration of AdaBoost.\n    \"\"\"\n    return weights * np.exp(-alpha * y * y_pred)\nclass DecisionStump:\n\n    def __init__(self):\n        self.column = None\n        self.value = None\n        self.sign = None\n\n    def fit(self, X: np.ndarray, y: np.ndarray, weights: np.ndarray):\n        \"\"\"Fit the decision stump.\n\n        Args:\n            X:      2-D NumPy array of shape (m, n) containing the training features.\n            y:      1-D NumPy array of length m with labels **-1** or **1**.\n            weights: 1-D NumPy array of length m with data point weights.\n        \"\"\"\n        (m, n) = X.shape\n        min_error = np.inf\n        for i in range(n):\n            values = np.sort(np.unique(X[:, i]))\n            for value in values:\n                y_pred = np.ones(m)\n                y_pred[X[:, i] < value] = -1\n                for sign in [-1, 1]:\n                    error = compute_error(y, sign * y_pred, weights)\n                    if error < min_error:\n                        min_error = error\n                        self.column = i\n                        self.value = value\n                        self.sign = sign\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n    for _ in range(max(n_clf, 1)):\n        clf = DecisionStump()\n        clf.fit(X_train, y_train, weights)\n        error = compute_error(y_train, clf.sign * np.ones(m), weights)\n        alpha = 0.5 * np.log((1 - error) / error)\n        clfs.append((clf, alpha))\n        weights = compute_weights(y_train, clf.sign * np.ones(m), weights, alpha)\n    y_pred = np.sum([alpha * clf.sign * (X_test[:, clf.column] < clf.value) for (clf, alpha) in clfs], axis=1)\n    return np.where(y_pred >= 0, 1, -1).tolist()"}
{"task_id": 118, "completion_id": 7, "solution": "import numpy as np\nimport pandas as pd\ndef adaboost_predict(X_train, y_train, X_test, n_clf=5):\n    sample_weight = np.ones(X_train.shape[0]) / X_train.shape[0]\n    stumps = []\n    stump_weights = np.zeros(n_clf)\n    for i in range(n_clf):\n        (decision_stump, error, decision_stump_weight) = decision_stump(X_train, y_train, sample_weight)\n        stumps.append(decision_stump)\n        stump_weight = 0.5 * np.log((1.0 - error) / error)\n        stump_weights[i] = stump_weight\n        predictions = np.ones(np.shape(y_train))\n        predictions[decision_stump != y_train] = -1\n        sample_weight *= np.exp(1.0 * stump_weight * predictions)\n        sample_weight /= sample_weight.sum()\n    final_predictions = np.zeros(X_test.shape[0])\n    for i in range(len(stumps)):\n        predicted_output = np.ones(shape=(X_test.shape[0], 1))\n        predicted_output[stumps[i].predict(X_test) != -1.0] = -1.0\n        final_predictions += stump_weights[i] * predicted_output.reshape(final_predictions.shape)\n    final_predictions = np.sign(final_predictions)\n    return final_predictions.tolist()\ndef decision_stump(X, y, sample_weight):\n    (best_feature, best_threshold, best_error, best_inequal) = (np.inf, np.inf, np.inf, '')\n    decision_stumps = np.ones(np.shape(y))\n    X_min = X.min(axis=0)\n    X_max = X.max(axis=0)\n    for feature_index in range(X.shape[1]):\n        for threshold in np.linspace(X_min[feature_index], X_max[feature_index], 11):\n            for inequal in ['lt', 'gt']:\n                predicted_values = np.ones(y.shape)\n                if inequal == 'lt':\n                    predicted_values[X[:, feature_index] <= threshold] = -1\n                else:\n                    predicted_values[X[:, feature_index] > threshold] = -1\n                error = np.sum((predicted_values != y) * sample_weight)\n                if error < best_error:\n                    best_error = error\n                    decision_stumps = predicted_values.copy()\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_inequal = inequal\n    return (decision_stumps, best_error, best_feature, best_threshold, best_inequal)"}
{"task_id": 118, "completion_id": 8, "solution": "import numpy as np\ndef decision_stump(X: np.ndarray, y: np.ndarray, weights: np.ndarray) -> tuple[float, int, float]:\n    \"\"\"\n    Learn a decision stump from the given data.\n\n    Args:\n        X:       A 2-D NumPy array of shape (m, n) containing the training features.\n        y:       A 1-D NumPy array of length m with labels -1 or 1.\n        weights: A 1-D NumPy array of length m containing weights for the training examples.\n\n    Returns:\n        A tuple (threshold, feature_index, error) containing an optimal threshold for the decision stump,\n        the index of the feature to use for the split and the weighted error of the stump.\n    \"\"\"\n    (m, n) = X.shape\n    (min_error, best_threshold, best_feature) = (float('inf'), None, None)\n    for feature_index in range(n):\n        feature_values = np.sort(np.unique(X[:, feature_index]))\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n        for threshold in thresholds:\n            pred = np.ones(y.shape)\n            pred[X[:, feature_index] > threshold] = -1\n            error = np.sum(weights[pred != y])\n            if error > 0.5:\n                error = 1 - error\n                pred = -pred\n            if error < min_error:\n                min_error = error\n                best_threshold = threshold\n                best_feature = feature_index\n    return (best_threshold, best_feature, min_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    weights = np.full(y_train.shape, 1.0 / y_train.shape[0])\n    clfs = []\n    for _ in range(n_clf):\n        (threshold, feature_index, error) = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1.0 - error) / error)\n        pred = np.ones(y_train.shape)\n        pred[X_train[:, feature_index] > threshold] = -1\n        weights = weights * np.exp(-alpha * y_train * pred)\n        weights = weights / np.sum(weights)\n        clfs.append((threshold, feature_index, alpha))\n    y_test = np.zeros(X_test.shape[0])\n    for (threshold, feature_index, alpha) in clfs:\n        pred = np.ones(X_test.shape[0])\n        pred[X_test[:, feature_index] > threshold] = -1\n        y_test += alpha * pred\n    return [1 if y > 0 else -1 for y in y_test]"}
{"task_id": 118, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    if n_clf < 1:\n        n_clf = 1\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    preds = polarity * np.where(X_train[:, feature] < threshold, -1, 1)\n                    error = np.sum(w[preds != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_clf = preds\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        eps = 1e-09\n        eps_t = min_error / (w.sum() + eps)\n        alpha_t = 0.5 * np.log((1 - eps_t) / (eps_t + eps))\n        w = w * np.exp(-alpha_t * y_train * best_clf)\n        w = w / w.sum()\n        clfs.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha_t)\n    y_preds_train = np.zeros(m)\n    for ((feature, threshold, polarity), alpha) in zip(clfs, alphas):\n        preds = np.where(X_train[:, feature] < threshold, -1, 1)\n        y_preds_train += alpha * preds * polarity\n    y_preds_test = np.zeros(X_test.shape[0])\n    for ((feature, threshold, polarity), alpha) in zip(clfs, alphas):\n        preds = np.where(X_test[:, feature] < threshold, -1, 1)\n        y_preds_test += alpha * preds * polarity\n    y_preds_test = [1 if y >= 0 else -1 for y in y_preds_test]\n    return y_preds_test"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.preprocessing import LabelBinarizer\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    (_, n_features) = X.shape\n    class_priors = np.bincount(y) / len(y)\n    X_means = np.dot(class_priors, LabelBinarizer().fit_transform(y).T.dot(X))\n    X_centered = X - X_means\n    S_W = np.dot((LabelBinarizer().fit_transform(y).T * class_priors).dot(X_centered).T, X_centered)\n    S_B = np.dot((LabelBinarizer().fit_transform(y).T - class_priors[:, None]) * X_centered.shape[0], np.dot(X_centered.T, X_centered)) / X_centered.shape[0]\n    (eig_vals, eig_vecs) = np.linalg.eigh(np.linalg.pinv(S_W).dot(S_B))\n    order = eig_vals.argsort()[::-1]\n    (eig_vals, eig_vecs) = (eig_vals[order], eig_vecs[:, order])\n    W = eig_vecs[:, :n_components]\n    X_transformed = X.dot(W)\n    if eig_vecs.shape[1] < n_components:\n        return []\n    return np.around(X_transformed, 4).tolist()"}
{"task_id": 128, "completion_id": 1, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    n_class = len(class_labels)\n    if n_components <= 0:\n        return []\n    overall_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        S_W += np.cov(X_c, rowvar=False) * (n_c - 1)\n        S_B += n_c * np.outer(mu_c - overall_mean, mu_c - overall_mean)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    sign_flip = np.vectorize(lambda x: -1 if x < 0 else 1)\n    eig_vecs = sign_flip(eig_vecs[:, 0])[:, None] * eig_vecs\n    W = eig_vecs[:, :n_components]\n    X_lda = X.dot(W)\n    return np.round(X_lda, 4).tolist()"}
{"task_id": 128, "completion_id": 2, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\"\"\"\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    n_classes = len(class_labels)\n    if n_components <= 0 or n_components > n_features:\n        return []\n    mean_vectors = []\n    for c in class_labels:\n        mean_vectors.append(np.mean(X[y == c], axis=0))\n    within_class_scatter = np.zeros((n_features, n_features))\n    for (c, mean_vec) in zip(class_labels, mean_vectors):\n        class_scatter = np.zeros((n_features, n_features))\n        for row in X[y == c]:\n            (row, mean_vec) = (row.reshape(n_features, 1), mean_vec.reshape(n_features, 1))\n            class_scatter += (row - mean_vec).dot((row - mean_vec).T)\n        within_class_scatter += class_scatter\n    overall_mean = np.mean(X, axis=0)\n    between_class_scatter = np.zeros((n_features, n_features))\n    for (c, mean_vec) in enumerate(mean_vectors):\n        n = X[y == c, :].shape[0]\n        overall_mean = overall_mean.reshape(n_features, 1)\n        mean_vec = mean_vec.reshape(n_features, 1)\n        between_class_scatter += n * (mean_vec - overall_mean).dot((mean_vec - overall_mean).T)\n    A = np.linalg.pinv(within_class_scatter).dot(between_class_scatter)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    eig_vecs = eig_vecs.T\n    idxs = np.argsort(eig_vals)[::-1]\n    eig_vals = eig_vals[idxs]\n    eig_vecs = eig_vecs[idxs]\n    signs = np.array([1 if i == 0 or eig_vecs[i][np.argmax(np.abs(eig_vecs[i - 1]))] * eig_vecs[i][np.argmax(np.abs(eig_vecs[i]))] > 0 else -1 for i in range(len(eig_vecs))])\n    eig_vecs = eig_vecs * signs[:, np.newaxis]\n    projection_matrix = eig_vecs[:n_components].T\n    X_lda = np.real(np.dot(X, projection_matrix))\n    X_lda = np.round(X_lda, 4).tolist()\n    return X_lda"}
{"task_id": 128, "completion_id": 3, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    if n_components <= 0 or n_components > len(class_labels):\n        return []\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for class_label in class_labels:\n        X_class = X[y == class_label]\n        class_mean = np.mean(X_class, axis=0)\n        class_scatter = np.cov(X_class.T)\n        S_W += class_scatter\n    S_B = np.zeros_like(S_W)\n    for class_label in class_labels:\n        X_class = X[y == class_label]\n        class_mean = np.mean(X_class, axis=0)\n        class_size = X_class.shape[0]\n        class_mean_centered = class_mean - global_mean\n        S_B += class_size * np.outer(class_mean_centered, class_mean_centered)\n    if np.isclose(np.linalg.det(S_W), 0):\n        A = np.dot(np.linalg.pinv(S_W), S_B)\n    else:\n        A = np.dot(np.linalg.inv(S_W), S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n    projection = np.dot(X, eigenvectors[:, :n_components])\n    return np.round(projection, 4).tolist()"}
{"task_id": 128, "completion_id": 4, "solution": "import numpy as np\nfrom scipy.sparse import issparse\nfrom scipy.linalg import eig\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and `n_features`).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first `n_components` LDA directions. Each inner list corresponds to one sample. All values are rounded to four decimal places.\n    \"\"\"\n    means = []\n    for c in np.unique(y):\n        means.append(np.mean(X[y == c, :], axis=0))\n    means = np.array(means)\n    mean_overall = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mean_vec) in zip(np.unique(y), means):\n        n_c = X[y == c, :].shape[0]\n        mean_vec = mean_vec.reshape(X.shape[1], 1)\n        mean_overall = mean_overall.reshape(X.shape[1], 1)\n        S_B += n_c * (mean_vec - mean_overall).dot((mean_vec - mean_overall).T)\n    S_W = np.zeros(S_B.shape)\n    for (c, mean_vec) in zip(np.unique(y), means):\n        centered = X[y == c, :] - mean_vec\n        S_W += centered.T.dot(centered)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigvals, eigvecs) = eig(A)\n    (eigvals, eigvecs) = (eigvals.real, eigvecs.real)\n    idx = np.argsort(eigvals)[::-1]\n    (eigvals, eigvecs) = (eigvals[idx], eigvecs[:, idx])\n    for i in range(eigvecs.shape[1]):\n        if eigvecs[np.nonzero(eigvecs[i, :]), i] < 0:\n            eigvecs[:, i] = -eigvecs[:, i]\n    X_lda = X.dot(eigvecs[:, :n_components])\n    X_lda = np.around(X_lda, decimals=4).tolist()\n    return X_lda"}
{"task_id": 128, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.linalg import eigh\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.utils.extmath import stable_cumsum\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    (_, n_features) = X.shape\n    classes = np.unique(y)\n    cnts = np.bincount(y)\n    (_, xk, means) = _class_means(X, y)\n    Xc = []\n    for (idx, group) in enumerate(xk):\n        Xg = group - means[idx]\n        Xc.append(np.dot(Xg, Xg.T))\n    Sw = sum(Xc)\n    total_mean = np.mean(X, axis=0)\n    Sb = np.zeros((n_features, n_features))\n    for k in range(len(classes)):\n        diff = (means[k] - total_mean).reshape(n_features, 1)\n        Sb += cnts[k] * np.dot(diff, diff.T)\n    (eigvals, eigvecs) = eigh(Sb, Sw)\n    Sw += np.finfo(np.float64).eps\n    idx = eigvals.argsort()[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n    for i in range(len(eigvecs)):\n        if eigvecs[i][0] < 0:\n            eigvecs[i] = -eigvecs[i]\n    if n_components <= len(classes):\n        eigvecs = eigvecs[:, :n_components]\n    return [np.round(np.dot(X, eigvecs).tolist(), 4)] if len(eigvecs) > 0 else []\ndef _class_means(X, y):\n    \"\"\"Compute class means\"\"\"\n    labels = np.unique(y)\n    (n_samples, n_features) = X.shape\n    means = np.zeros((len(labels), n_features))\n    k = 0\n    for label in labels:\n        means[k] = np.mean(X[y == label, :], axis=0)\n        k += 1\n    return (lab, means)"}
{"task_id": 128, "completion_id": 6, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    n_features = X.shape[1]\n    class_labels = np.unique(y)\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    for label in class_labels:\n        X_c = X[y == label]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.sum([np.outer(x - mean_c, x - mean_c) for x in X_c], axis=0)\n        n_c = X_c.shape[0]\n        S_B += n_c * np.outer(mean_c - mean_overall, mean_c - mean_overall)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(np.linalg.pinv(S_W).dot(S_B))\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx][:n_components]\n    eigenvectors = eigenvectors[:, idx][:, :n_components]\n    for i in range(n_components):\n        eigenvectors[:, i] *= 1 if eigenvectors[:, i][eigenvectors[:, i].nonzero()[0][0]] > 0 else -1\n    X_lda = np.dot(X, eigenvectors)\n    return np.round(X_lda.tolist(), 4)"}
{"task_id": 128, "completion_id": 7, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_y = np.unique(y)\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for class_label in unique_y:\n        X_c = X[y == class_label]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.cov(X_c.T, ddof=1) * X_c.shape[0]\n        S_B += len(X_c) * (mean_c - mean_overall).reshape(-1, 1) @ (mean_c - mean_overall).reshape(1, -1)\n    A = (np.linalg.pinv(S_W) @ S_B).astype(np.float64)\n    (eigenvals, eigenvecs) = np.linalg.eigh(A)\n    idx = eigenvals.argsort()[::-1]\n    eigenvecs = eigenvecs[:, idx]\n    eigenvecs = eigenvecs[:, :n_components]\n    for i in range(eigenvecs.shape[1]):\n        if np.any(eigenvecs[:, i]):\n            if eigenvecs[np.nonzero(eigenvecs[:, i])[0][0], i] < 0:\n                eigenvecs[:, i] *= -1\n    X_lda = np.dot(X, eigenvecs)\n    if n_components == 0:\n        return []\n    return [np.around(X_lda[i], 4).tolist() for i in range(X_lda.shape[0])]"}
{"task_id": 128, "completion_id": 8, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    n_features = X.shape[1]\n    overall_mean = np.mean(X, axis=0)\n    Sw = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        mean_c = mean_c.reshape((n_features, 1))\n        Sw_c = np.dot(X_c - mean_c, (X_c - mean_c).T)\n        Sw += Sw_c\n    Sb = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        mean_c = mean_c.reshape((n_features, 1))\n        n_c = X_c.shape[0]\n        Sb_c = n_c * np.dot(mean_c - overall_mean, (mean_c - overall_mean).T)\n        Sb += Sb_c\n    A = np.dot(np.linalg.pinv(Sw), Sb)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:, idx]\n    W = eig_vecs[:, :n_components]\n    for i in range(n_components):\n        if W[0, i] < 0:\n            W[:, i] = -W[:, i]\n    X_lda = np.dot(X, W)\n    return np.round(X_lda.tolist(), 4)"}
{"task_id": 128, "completion_id": 9, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    if n_components == 0:\n        return []\n    class_labels = np.unique(y)\n    n_features = X.shape[1]\n    mean_vectors = []\n    for class_label in class_labels:\n        mean_vectors.append(np.mean(X[y == class_label], axis=0))\n    S_W = np.zeros((n_features, n_features))\n    for (class_label, mean_vec) in zip(class_labels, mean_vectors):\n        class_sc_mat = np.zeros((n_features, n_features))\n        for row in X[y == class_label]:\n            (row, mean_vec) = (row.reshape(n_features, 1), mean_vec.reshape(n_features, 1))\n            class_sc_mat += (row - mean_vec).dot((row - mean_vec).T)\n        S_W += class_sc_mat\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((n_features, n_features))\n    for (class_label, mean_vec) in zip(class_labels, mean_vectors):\n        n = X[y == class_label, :].shape[0]\n        mean_vec = mean_vec.reshape(n_features, 1)\n        overall_mean = overall_mean.reshape(n_features, 1)\n        S_B += n * (mean_vec - overall_mean).dot((mean_vec - overall_mean).T)\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    for i in range(eig_vecs.shape[1]):\n        if eig_vecs[0, i] < 0:\n            eig_vecs[:, i] *= -1\n    W = eig_vecs[:, :n_components]\n    X_lda = np.dot(X, W)\n    return np.round(X_lda, 4).tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndirections = [(0, 1), (0, -1), (1, 0), (-1, 0)]\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    INF = float('inf')\n    (fire_queue, agent_queue) = (deque([]), deque([]))\n    fire_time = [[INF] * n for _ in range(n)]\n    agent_time = [[INF] * n for _ in range(n)]\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_time[i][j] = 0\n            if grid[i][j] == 'S':\n                agent_queue.append((i, j))\n                agent_time[i][j] = 0\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] == INF):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#'):\n                if agent_time[x][y] + 1 < fire_time[nx][ny] and agent_time[nx][ny] == INF:\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    agent_queue.append((nx, ny))\n    res = agent_time[-1][-1]\n    return res if res != INF else -1"}
{"task_id": 140, "completion_id": 1, "solution": "def escape_fire_maze(grid):\n    n = len(grid)\n    q_agent = deque([((0, 0), 0)])\n    q_fire = deque([((r, c), 0) for r in range(n) for c in range(n) if grid[r][c] == 'F'])\n    visited_agent = {(0, 0)}\n    visited_fire = set(q_fire)\n    while q_agent:\n        ((r, c), time) = q_agent.popleft()\n        while q_fire and q_fire[0][1] == time:\n            ((fr, fc), _) = q_fire.popleft()\n            for (dr, dc) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                (nfr, nfc) = (fr + dr, fc + dc)\n                if 0 <= nfr < n and 0 <= nfc < n and (grid[nfr][nfc] != '#') and (((nfr, nfc), time + 1) not in visited_fire):\n                    q_fire.append(((nfr, nfc), time + 1))\n                    visited_fire.add(((nfr, nfc), time + 1))\n        for (dr, dc) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            (nr, nc) = (r + dr, c + dc)\n            if nr == nc == n - 1:\n                return time + 1\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#') and (((nr, nc), time + 1) not in visited_agent) and (((nr, nc), time + 1) not in visited_fire):\n                q_agent.append(((nr, nc), time + 1))\n                visited_agent.add(((nr, nc), time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 2, "solution": "from collections import deque\nfrom math import inf as INF\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\ndef escape_fire_maze(grid):\n    n = len(grid)\n    time_agent = [[INF] * n for _ in range(n)]\n    time_fire = [[INF] * n for _ in range(n)]\n    agent_queue = deque()\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                time_fire[i][j] = 0\n            elif i == 0 and j == 0 and (grid[i][j] == '.'):\n                agent_queue.append((i, j, 0))\n                time_agent[i][j] = 0\n    while fire_queue:\n        (x, y, time) = fire_queue.popleft()\n        for (dx, dy) in DIRS:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (time_fire[nx][ny] == INF):\n                fire_queue.append((nx, ny, time + 1))\n                time_fire[nx][ny] = time + 1\n    while agent_queue:\n        (x, y, time) = agent_queue.popleft()\n        for (dx, dy) in DIRS:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (time + 1 < time_fire[nx][ny]) and (time_agent[nx][ny] == INF):\n                if nx == n - 1 and ny == n - 1:\n                    return time + 1\n                agent_queue.append((nx, ny, time + 1))\n                time_agent[nx][ny] = time + 1\n    return -1"}
{"task_id": 140, "completion_id": 3, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid):\n    \"\"\"Escape from a maze with spreading fire.\"\"\"\n    n = len(grid)\n    free = [[c != '#' and c != 'F' for c in row] for row in grid]\n    fire = [[c == 'F' for c in row] for row in grid]\n    if not free[0][0] or free[n - 1][n - 1]:\n        return -1\n    queue = deque([(0, 0, 0)])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited_agent = [[False] * n for _ in range(n)]\n    while queue:\n        (x, y, t) = queue.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and free[nx][ny] and (not visited_agent[nx][ny]) and (not fire[nx][ny]):\n                visited_agent[nx][ny] = True\n                queue.append((nx, ny, t + 1))\n        nfire = [[False] * n for _ in range(n)]\n        for x in range(n):\n            for y in range(n):\n                if fire[x][y]:\n                    for (dx, dy) in directions:\n                        (nx, ny) = (x + dx, y + dy)\n                        if 0 <= nx < n and 0 <= ny < n and free[nx][ny] and (not visited_agent[nx][ny]):\n                            nfire[nx][ny] = True\n        fire = nfire\n    return -1"}
{"task_id": 140, "completion_id": 4, "solution": "from collections import deque\ndef escape_fire_maze(grid):\n    n = len(grid)\n    agent_time = [[math.inf] * n for _ in range(n)]\n    fire_time = [[math.inf] * n for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    agent_queue = deque([(0, 0)])\n    fire_queue = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F'])\n    (agent_time[0][0], fire_time[0][0]) = (0, 0)\n    while agent_queue:\n        for _ in range(len(fire_queue)):\n            (x, y) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] == math.inf):\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n        for _ in range(len(agent_queue)):\n            (x, y) = agent_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (agent_time[nx][ny] == math.inf) and (fire_time[nx][ny] > agent_time[x][y] + 1):\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    if nx == ny == n - 1:\n                        return agent_time[nx][ny]\n                    agent_queue.append((nx, ny))\n    return -1"}
{"task_id": 140, "completion_id": 5, "solution": "def escape_fire_maze(grid: list[str]) -> int:\n    (ROWS, COLS) = (len(grid), len(grid[0]))\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    moves = [[-1] * COLS for _ in range(ROWS)]\n    moves[0][0] = 0\n    queue = deque([(0, 0)])\n    fire_queue = deque([(r, c, 0) for r in range(ROWS) for c in range(COLS) if grid[r][c] == 'F'])\n    while queue or fire_queue:\n        for _ in range(len(queue)):\n            (r, c) = queue.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if nr < 0 or nc < 0 or nr == ROWS or (nc == COLS) or (moves[nr][nc] != -1) or (grid[nr][nc] == '#') or (moves[r][c] + 1 >= 0 and (nr, nc) in fire_queue):\n                    continue\n                if (nr, nc) == (ROWS - 1, COLS - 1):\n                    return moves[r][c] + 1\n                moves[nr][nc] = moves[r][c] + 1\n                queue.append((nr, nc))\n        time = fire_queue[0][2] if fire_queue else -1\n        while fire_queue and fire_queue[0][2] == time:\n            (r, c, _) = fire_queue.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if nr < 0 or nc < 0 or nr == ROWS or (nc == COLS) or (grid[nr][nc] == '#') or (grid[nr][nc] == 'F'):\n                    continue\n                grid[nr][nc] = 'F'\n                fire_queue.append((nr, nc, time + 1))\n    return moves[-1][-1]"}
{"task_id": 140, "completion_id": 6, "solution": "from typing import List\nfrom collections import deque\ndef escape_fire_maze(grid: List[str]) -> int:\n    n = len(grid)\n    directions = ((0, 1), (0, -1), (-1, 0), (1, 0))\n    fire_grid = [[0] * n for _ in range(n)]\n\n    def update_fires():\n        f = deque()\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 'F':\n                    f.append((i, j))\n                    fire_grid[i][j] = 1\n        while f:\n            (r, c) = f.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#') and (fire_grid[nr][nc] == 0):\n                    fire_grid[nr][nc] = fire_grid[r][c] + 1\n                    f.append((nr, nc))\n\n    def calculate_moves():\n        q = deque([(0, 0)])\n        visited = [[[0, 0]] * n for _ in range(n)]\n        visited[0][0] = [0, 1]\n        while q:\n            (r, c) = q.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#') and (visited[nr][nc][1] == 0) and (fire_grid[nr][nc] == 0 or fire_grid[nr][nc] > visited[r][c][0] + 1):\n                    visited[nr][nc] = [visited[r][c][0] + 1, 1]\n                    q.append((nr, nc))\n            if visited[n - 1][n - 1][1] == 1:\n                return visited[n - 1][n - 1][0]\n        return -1\n    update_fires()\n    return calculate_moves()"}
{"task_id": 140, "completion_id": 7, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    fire_q = deque([(i, j, 0) for i in range(n) for j in range(n) if grid[i][j] == 'F'])\n    agent_q = deque([(0, 0, 0)])\n    fire_visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    agent_visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_visited[0][0] = 0\n    agent_visited[0][0] = 0\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    while fire_q or agent_q:\n        for _ in range(len(fire_q)):\n            (x, y, fire_time) = fire_q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time + 1 < fire_visited[nx][ny]):\n                    fire_visited[nx][ny] = fire_time + 1\n                    fire_q.append((nx, ny, fire_time + 1))\n        for _ in range(len(agent_q)):\n            (x, y, agent_time) = agent_q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if nx == n - 1 and ny == n - 1:\n                    return agent_time + 1\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (agent_time + 1 < agent_visited[nx][ny]) and (agent_time + 1 < fire_visited[nx][ny]):\n                    agent_visited[nx][ny] = agent_time + 1\n                    agent_q.append((nx, ny, agent_time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 8, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    DIRS = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    agent_queue = deque([(0, 0, 0)])\n    fire_queue = deque([])\n    n = len(grid)\n    maze = [['.'] * n for _ in range(n)]\n    fire_time = [[math.inf] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '#':\n                maze[i][j] = '#'\n            elif grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_time[i][j] = 0\n            else:\n                maze[i][j] = '.'\n    while fire_queue:\n        (x, y, t) = fire_queue.popleft()\n        for (dx, dy) in DIRS:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (maze[nx][ny] != '#') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = t + 1\n                fire_queue.append((nx, ny, t + 1))\n    while agent_queue:\n        (x, y, t) = agent_queue.popleft()\n        for (dx, dy) in DIRS:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (maze[nx][ny] != '#') and ((nx, ny) != (0, 0)):\n                if nx == n - 1 and ny == n - 1 and (t + 1 <= fire_time[nx][ny]):\n                    return t + 1\n                if t + 1 < fire_time[nx][ny]:\n                    agent_queue.append((nx, ny, t + 1))\n                    maze[nx][ny] = '#'\n    return -1"}
{"task_id": 140, "completion_id": 9, "solution": "from collections import deque\nimport math\nDIRECTIONS = [(0, 1), (0, -1), (1, 0), (-1, 0)]\ndef valid_move(grid, n, x, y, t):\n    if x < 0 or y < 0 or x >= n or (y >= n) or (grid[x][y] != '.') or ((x, y, t + 1) in visited):\n        return False\n    return True\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    queue = deque([(0, 0, 0)])\n    fire_queue = deque([])\n    visited = set()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n    while queue:\n        (x, y, t) = queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return t\n        for (dx, dy) in DIRECTIONS:\n            (x_, y_) = (x + dx, y + dy)\n            if valid_move(grid, n, x_, y_, t):\n                queue.append((x_, y_, t + 1))\n        for _ in range(len(fire_queue)):\n            (x, y, t) = fire_queue.popleft()\n            visited.add((x, y, t + 1))\n            for (dx, dy) in DIRECTIONS:\n                (x_, y_) = (x + dx, y + dy)\n                if valid_move(grid, n, x_, y_, t):\n                    fire_queue.append((x_, y_, t + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric == 'euclidean':\n        dists = np.sqrt(np.sum((X_train[np.newaxis, :, :] - X_test[:, np.newaxis, :]) ** 2, axis=-1))\n    elif metric == 'manhattan':\n        dists = np.sum(np.abs(X_train[np.newaxis, :, :] - X_test[:, np.newaxis, :]), axis=-1)\n    elif metric == 'cosine':\n        X_train_norm = X_train / np.linalg.norm(X_train, axis=1)[:, np.newaxis]\n        X_test_norm = X_test / np.linalg.norm(X_test, axis=1)[:, np.newaxis]\n        dists = 1 - np.dot(X_test_norm, X_train_norm.T)\n    else:\n        dists = np.sqrt(np.sum((X_train[np.newaxis, :, :] - X_test[:, np.newaxis, :]) ** 2, axis=-1))\n    knn = np.argsort(dists, axis=1)[:, :k]\n    y_pred = np.array([np.bincount(y_train[i]).argmax() for i in knn])\n    return y_pred"}
{"task_id": 141, "completion_id": 1, "solution": "import numpy as np\nfrom scipy.spatial import distance\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric == 'euclidean':\n        dists = distance.cdist(X_test, X_train, 'euclidean')\n    elif metric == 'manhattan':\n        dists = distance.cdist(X_test, X_train, 'cityblock')\n    elif metric == 'cosine':\n        dists = distance.cdist(X_test, X_train, 'cosine')\n    else:\n        dists = distance.cdist(X_test, X_train, 'euclidean')\n    predictions = []\n    for dist in dists:\n        knn = np.argsort(dist)[:k]\n        labels = y_train[knn]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        if len(counts) > 1 and np.max(counts) != np.min(counts):\n            max_count_label = unique_labels[np.argmax(counts)]\n            predictions.append(max_count_label)\n        else:\n            predictions.append(np.min(labels))\n    return np.array(predictions)\npredictions = knn_predict(X_train, y_train, X_test, 3, 'euclidean')"}
{"task_id": 141, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n\n    def calculate_distance(X_train, X_test, metric):\n        if metric == 'euclidean':\n            return np.sqrt(np.sum((X_train - X_test[:, np.newaxis]) ** 2, axis=-1))\n        elif metric == 'manhattan':\n            return np.sum(np.abs(X_train - X_test[:, np.newaxis]), axis=-1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, X_test.T)\n            norms = np.sqrt((X_train ** 2).sum(axis=-1)[:, np.newaxis]) * np.sqrt((X_test ** 2).sum(axis=-1)[np.newaxis, :])\n            return 1 - dot_product / norms\n        else:\n            return calculate_distance(X_train, X_test, 'euclidean')\n    distances = calculate_distance(X_train, X_test, metric)\n    neighbors = np.argpartition(distances, k)[:, :k]\n    labels = y_train[neighbors]\n    return np.array([np.bincount(x).argmax() for x in labels])"}
{"task_id": 141, "completion_id": 3, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    metric_dict = {'euclidean': 'euclidean', 'manhattan': 'cityblock', 'cosine': 'cosine'}\n    if metric not in metric_dict.keys():\n        metric = 'euclidean'\n    y_pred = np.zeros(len(X_test))\n    for (i, xtest) in enumerate(X_test):\n        dists = distance.cdist(np.array([xtest]), X_train, metric=metric_dict[metric])\n        knn_indices = np.argsort(dists[0])[:k]\n        (labels, counts) = np.unique(y_train[knn_indices], return_counts=True)\n        max_count_indices = np.where(counts == np.max(counts))[0]\n        y_pred[i] = np.min(labels[max_count_indices])\n    return y_pred.astype(int)"}
{"task_id": 141, "completion_id": 4, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\nimport numpy as np\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    if metric == 'cosine':\n        dists = cdist(X_test, X_train, 'cosine')\n    elif metric == 'manhattan':\n        dists = cdist(X_test, X_train, 'cityblock')\n    else:\n        dists = cdist(X_test, X_train, 'euclidean')\n    knn_indices = np.argsort(dists, axis=1)[:, :k]\n    y_pred = []\n    for inds in knn_indices:\n        k_nearest_labels = y_train[inds]\n        (values, counts) = np.unique(k_nearest_labels, return_counts=True)\n        y_pred.append(values[np.argmax(counts)])\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.spatial import KDTree\nfrom sklearn.metrics.pairwise import cosine_distances, euclidean_distances, manhattan_distances\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric == 'cosine':\n        dist_matrix = cosine_distances(X_test, X_train)\n    elif metric == 'manhattan':\n        dist_matrix = manhattan_distances(X_test, X_train)\n    else:\n        tree = KDTree(X_train)\n        (dist_matrix, _) = tree.query(X_test, k=X_train.shape[0])\n        dist_matrix = dist_matrix[:, :k]\n    y_pred = []\n    for dist in dist_matrix:\n        closest_y = y_train[np.argsort(dist)]\n        (vals, counts) = np.unique(closest_y, return_counts=True)\n        labels = sorted([(count, -val) for (count, val) in zip(counts, vals)])\n        y_pred.append(-labels[-1][1])\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))\n    dist_func_mapping = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    dist_func = dist_func_mapping.get(metric, euclidean_distance)\n    distances = [[dist_func(test_sample, train_sample) for train_sample in X_train] for test_sample in X_test]\n    distances = np.array(distances)\n    nearest_indices = np.argsort(distances)[:, :k]\n    y_pred = []\n    for row in nearest_indices:\n        counts = np.bincount(y_train[row])\n        if len(counts) == k:\n            y_pred.append(np.min(y_train[row]))\n        else:\n            y_pred.append(np.argmax(counts))\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 7, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors.\"\"\"\n    metrics_map = {'euclidean': 'euclidean', 'manhattan': 'cityblock', 'cosine': 'cosine'}\n    if metric not in metrics_map:\n        metric = 'euclidean'\n    predictions = []\n    for test_sample in X_test:\n        distances = distance.cdist(np.array([test_sample]), X_train, metric=metrics_map[metric]).flatten()\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        prediction = Counter(k_nearest_labels).most_common()\n        if len(prediction) > 1 and prediction[0][1] == prediction[1][1]:\n            predictions.append(min(prediction[0][0], prediction[1][0]))\n        else:\n            predictions.append(prediction[0][0])\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\nfrom scipy.spatial.distance import cosine\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    metric_functions = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine}\n    if metric not in metric_functions:\n        metric = 'euclidean'\n    distance_func = metric_functions[metric]\n    y_pred = []\n    for test_sample in X_test:\n        distances = []\n        for train_sample in X_train:\n            dist = distance_func(test_sample, train_sample)\n            distances.append(dist)\n        k_nearest_indices = np.array(distances).argsort()[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        most_common_label = Counter(k_nearest_labels).most_common()\n        most_common_label.sort(key=lambda x: (-x[1], x[0]))\n        y_pred.append(most_common_label[0][0])\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\nfrom collections import Counter\ndef knn_predict(X_train, y_train, X_test, k, metric='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    metrics = {'euclidean': 2, 'manhattan': 1, 'cosine': 1}\n    metric_ord = metrics.get(metric, 2)\n    dist = distance_matrix(X_test, X_train, p=metric_ord)\n    knn = y_train[np.argsort(dist, axis=1)[:, :k]]\n\n    def get_major(arr):\n        counts = Counter(arr)\n        max_count = max(list(counts.values()))\n        modes = [k for (k, v) in counts.items() if v == max_count]\n        return min(modes)\n    knn_modes = np.apply_along_axis(get_major, axis=1, arr=knn)\n    return knn_modes"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if k > X.shape[0]:\n        k = X.shape[0]\n    y_pred = []\n    for x_test in X_test:\n        distances = []\n        for (i, x) in enumerate(X):\n            if metric == 'euclidean':\n                distance = np.sqrt(np.sum((x - x_test) ** 2))\n            elif metric == 'manhattan':\n                distance = np.sum(np.abs(x - x_test))\n            elif metric == 'cosine':\n                eps = 10 ** (-12)\n                distance = 1 - np.dot(x, x_test) / (np.linalg.norm(x) * np.linalg.norm(x_test) + eps)\n            distances.append((distance, i))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = [y[i] for (d, i) in distances[:k]]\n        y_pred.append(max(set(k_nearest), key=k_nearest.count))\n    return y_pred\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([0, 1, 0, 1])\nX_test = np.array([[3, 3], [7, 7]])"}
{"task_id": 146, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    predictions = []\n    for test_sample in X_test:\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_products = np.dot(X, test_sample)\n            norms = np.linalg.norm(X, axis=1) * np.linalg.norm(test_sample)\n            norms = np.where(norms == 0, 1e-12, norms)\n            distances = 1 - dot_products / norms\n        else:\n            raise ValueError(\"Invalid metric. Available metrics: 'euclidean', 'manhattan', 'cosine'\")\n        k = min(k, len(X))\n        nearest_indices = np.argpartition(distances, k)[:k]\n        labels = y[nearest_indices].tolist()\n        prediction = max(set(labels), key=labels.count)\n        if labels.count(prediction) > 1:\n            tied_labels = [label for label in labels if label == prediction]\n            prediction = min(tied_labels)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 146, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2, axis=1))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2), axis=1)\n\n    def cosine_distance(x1, x2):\n        eps = 1e-12\n        x1_norm = np.linalg.norm(x1, axis=1)\n        x2_norm = np.linalg.norm(x2, axis=1)\n        normalization = x1_norm * x2_norm + eps\n        return 1 - np.sum(x1 * x2, axis=1) / normalization\n    if metric == 'euclidean':\n        distance_fn = euclidean_distance\n    elif metric == 'manhattan':\n        distance_fn = manhattan_distance\n    elif metric == 'cosine':\n        distance_fn = cosine_distance\n    else:\n        raise ValueError(f\"Unknown metric: {metric}. Supported metrics are 'euclidean', 'manhattan', and 'cosine'.\")\n    labels = []\n    for test_sample in X_test:\n        distances = distance_fn(X, test_sample)\n        k_nearest_neighbors = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_nearest_neighbors]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        labels.append(unique_labels[np.argmin(counts)])\n    return labels"}
{"task_id": 146, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X, y, X_test, k=3, metric='euclidean'):\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n    dists = []\n    for x_test in X_test:\n        if metric == 'euclidean':\n            dist = np.sqrt(np.sum((X - x_test) ** 2, axis=1))\n        elif metric == 'manhattan':\n            dist = np.sum(np.abs(X - x_test), axis=1)\n        elif metric == 'cosine':\n            eps = 1e-12\n            dist = 1 - np.dot(X, x_test) / (np.linalg.norm(X, axis=1) * np.linalg.norm(x_test) + eps)\n        dists.append(dist)\n    y_pred = []\n    for dist in dists:\n        idx_sort = np.argsort(dist)\n        if len(y) < k:\n            idx_k = idx_sort\n        else:\n            idx_k = idx_sort[:k]\n        labels = y[idx_k]\n        (labels, counts) = np.unique(labels, return_counts=True)\n        label_pred = labels[np.argmax(counts)]\n        y_pred.append(label_pred)\n    return y_pred"}
{"task_id": 146, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n        return np.sqrt(np.sum((x - y) ** 2, axis=1))\n\n    def manhattan_distance(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n        return np.sum(np.abs(x - y), axis=1)\n\n    def cosine_distance(x: np.ndarray, y: np.ndarray) -> np.ndarray:\n        return 1 - np.dot(x, y) / (np.linalg.norm(x, axis=1) * np.linalg.norm(y))\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        raise ValueError(\"Invalid metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    if k > X.shape[0]:\n        k = X.shape[0]\n    predicted_labels = []\n    for x_test in X_test:\n        if metric == 'euclidean':\n            distances = euclidean_distance(X, x_test)\n        elif metric == 'manhattan':\n            distances = manhattan_distance(X, x_test)\n        elif metric == 'cosine':\n            distances = cosine_distance(X, x_test)\n        knn_idx = np.argpartition(distances, k)[:k]\n        knn_labels = y[knn_idx]\n        (unique_labels, label_counts) = np.unique(knn_labels, return_counts=True)\n        predicted_label = unique_labels[np.argmin(np.where(label_counts == max(label_counts), unique_labels, np.inf))]\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 146, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if metric == 'euclidean':\n        dist = distance.cdist(X_test, X, 'euclidean')\n    elif metric == 'manhattan':\n        dist = distance.cdist(X_test, X, 'cityblock')\n    elif metric == 'cosine':\n        dist = distance.cdist(X_test, X, 'cosine')\n    else:\n        raise ValueError('Unknown distance metric')\n    predictions = []\n    for row in dist:\n        knn_indices = np.argsort(row)[:k]\n        knn_labels = y[knn_indices]\n        (values, counts) = np.unique(knn_labels, return_counts=True)\n        max_count_indices = np.argwhere(counts == np.max(counts)).flatten()\n        max_count_labels = values[max_count_indices]\n        prediction = np.min(max_count_labels)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 146, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3). If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def compute_distance(X, X_test, metric):\n        \"\"\"Compute the distance matrix of shape (n_samples, n_test_samples).\"\"\"\n        if metric == 'euclidean':\n            distance = np.sqrt(((X[np.newaxis] - X_test[:, np.newaxis]) ** 2).sum(axis=-1))\n        elif metric == 'manhattan':\n            distance = np.abs(X[np.newaxis] - X_test[:, np.newaxis]).sum(axis=-1)\n        elif metric == 'cosine':\n            eps = 10 ** (-12)\n            X_norm = np.sqrt((X ** 2).sum(axis=1, keepdims=True)) + eps\n            X_test_norm = np.sqrt((X_test ** 2).sum(axis=1, keepdims=True)) + eps\n            distance = 1 - np.dot(X, X_test.T) / (X_norm * X_test_norm.T)\n        return distance\n    distances = compute_distance(X, X_test, metric)\n    num_samples = X.shape[0]\n    k_list = np.minimum(k, num_samples)\n    k_indices = np.argpartition(distances, k_list, axis=0)[:k_list, :]\n    k_nearest_labels = y[k_indices]\n    y_pred = np.array([np.bincount(y_i).argmax() if len(set(y_i)) != 1 else min(y_i) for y_i in k_nearest_labels.T])\n    return y_pred.tolist()"}
{"task_id": 146, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    eps = 1e-12\n    if k > len(X):\n        k = len(X)\n    predict_labels = []\n    for i in range(len(X_test)):\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - X_test[i]) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - X_test[i]), axis=1)\n        elif metric == 'cosine':\n            norm = np.linalg.norm(X, axis=1) * np.linalg.norm(X_test[i])\n            dot_product = np.sum(X * X_test[i], axis=1)\n            distances = 1 - dot_product / (norm + eps)\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        nearest_labels = y[k_nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        majority_label_indices = np.where(counts == np.max(counts))[0]\n        majority_labels = unique_labels[majority_label_indices]\n        majority_label = min(majority_labels)\n        predict_labels.append(majority_label)\n    return predict_labels"}
{"task_id": 146, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2) + 1e-12)\n    if metric.lower() == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric.lower() == 'manhattan':\n        distance_func = manhattan_distance\n    else:\n        distance_func = cosine_distance\n    y_pred = []\n    for sample in X_test:\n        distances = [distance_func(sample, train_sample) for train_sample in X]\n        k_nearest_neighbours = np.argsort(distances)[:k]\n        labels = y[k_nearest_neighbours]\n        counts = np.bincount(labels)\n        if len(counts) == k:\n            y_pred.append(np.argmin(labels))\n        else:\n            y_pred.append(np.argmax(counts))\n    return y_pred"}
{"task_id": 146, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if k > n_samples:\n        k = n_samples\n    y_pred = []\n    for test_sample in X_test:\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        else:\n            norm_x = np.sqrt(np.sum(X ** 2, axis=1))\n            norm_test = np.sqrt(np.sum(test_sample ** 2))\n            dot_product = np.dot(X, test_sample)\n            epsilon = 10 ** (-12)\n            norms_product = norm_x * norm_test + epsilon\n            distances = 1.0 - dot_product / norms_product\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        k_nearest_labels = y[k_nearest_indices]\n        (labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        if len(counts) > 1 and np.max(counts) == np.min(counts):\n            max_label = min(labels)\n        else:\n            max_label_index = np.argmax(counts)\n            max_label = labels[max_label_index]\n        y_pred.append(max_label)\n    return y_pred\nX_test = np.array([[...], [...], ...])"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights):\n    state = np.array(state)\n    z1 = weights['W1'].T.dot(state) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = weights['W2'].T.dot(a1) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = weights['W3'].T.dot(a2) + weights['b3']\n    action = np.tanh(z3)\n    action = [round(x, 4) for x in action]\n    return action"}
{"task_id": 155, "completion_id": 1, "solution": "import numpy as np\ndef actor_forward(state: np.ndarray, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    return [round(a, 4) for a in action]\nweights = {'W1': np.array([[1, 2, 3], [4, 5, 6]]), 'b1': np.array([1, 2]), 'W2': np.array([[1, 2], [3, 4], [5, 6]]), 'b2': np.array([1, 2, 3]), 'W3': np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 'b3': np.array([1, 2, 3])}\nstate = np.array([1, 2])"}
{"task_id": 155, "completion_id": 2, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    affine1 = np.dot(state, weights['W1']) + weights['b1']\n    activated1 = np.maximum(affine1, 0)\n    affine2 = np.dot(activated1, weights['W2']) + weights['b2']\n    activated2 = np.maximum(affine2, 0)\n    action = np.tanh(np.dot(activated2, weights['W3']) + weights['b3'])\n    action = [round(x, 4) for x in action.tolist()]\n    return action"}
{"task_id": 155, "completion_id": 3, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    if len(state.shape) != 1:\n        raise ValueError('State vector must be a 1-dimensional array.')\n    z1 = weights['W1'].T.dot(state) + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = weights['W2'].T.dot(a1) + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = weights['W3'].T.dot(a2) + weights['b3']\n    action = np.tanh(z3)\n    action = list(np.round(action, 4))\n    return action\nweights = {'W1': np.array([[1, 2, 3], [4, 5, 6]]), 'b1': np.array([1, 1, 1]), 'W2': np.array([[1, 1], [1, 1], [1, 1]]), 'b2': np.array([1, 1]), 'W3': np.array([[1, 1], [1, 1]]), 'b3': np.array([1, 1])}\nstate = np.array([1, 2, 3])"}
{"task_id": 155, "completion_id": 4, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)\n    return [round(val, 4) for val in a3.tolist()]"}
{"task_id": 155, "completion_id": 5, "solution": "import numpy as np\ndef actor_forward(state, weights):\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state).reshape(-1, 1)\n    z1 = weights['W1'].dot(state) + weights['b1'].reshape(-1, 1)\n    a1 = np.maximum(z1, 0)\n    z2 = weights['W2'].dot(a1) + weights['b2'].reshape(-1, 1)\n    a2 = np.maximum(z2, 0)\n    z3 = weights['W3'].dot(a2) + weights['b3'].reshape(-1, 1)\n    action = np.tanh(z3)\n    action_rounded = [round(x[0], 4) for x in action.tolist()]\n    return action_rounded"}
{"task_id": 155, "completion_id": 6, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=float)\n    layer1 = np.matmul(state, weights['W1']) + weights['b1']\n    layer1 = np.clip(layer1, 0, None)\n    layer2 = np.matmul(layer1, weights['W2']) + weights['b2']\n    layer2 = np.clip(layer2, 0, None)\n    action = np.matmul(layer2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    action = np.round(action, 4)\n    return action.tolist()"}
{"task_id": 155, "completion_id": 7, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state).reshape(-1, 1)\n    z1 = weights['W1'].dot(state) + weights['b1'].reshape(-1, 1)\n    a1 = np.maximum(z1, 0)\n    z2 = weights['W2'].dot(a1) + weights['b2'].reshape(-1, 1)\n    a2 = np.maximum(z2, 0)\n    z3 = weights['W3'].dot(a2) + weights['b3'].reshape(-1, 1)\n    action = np.tanh(z3).flatten().tolist()\n    action = [round(a, 4) for a in action]\n    return action"}
{"task_id": 155, "completion_id": 8, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    assert state.ndim == 1, 'State must be a 1-D vector'\n    (W1, b1, W2, b2, W3, b3) = (weights['W1'], weights['b1'], weights['W2'], weights['b2'], weights['W3'], weights['b3'])\n    assert state.shape[0] == W1.shape[0], 'State dimension does not agree with W1'\n    assert b1.ndim == 1 and b1.shape[0] == W1.shape[1], 'Bias dimension does not agree with W1'\n    assert W2.shape[0] == b1.shape[0], 'W2 does not agree with b1'\n    assert b2.ndim == 1 and b2.shape[0] == W2.shape[1], 'Bias dimension does not agree with W2'\n    assert W3.shape[0] == b2.shape[0], 'W3 does not agree with b2'\n    assert b3.ndim == 1 and b3.shape[0] == W3.shape[1], 'Bias dimension does not agree with W3'\n    h1 = state.dot(W1) + b1\n    h1 = np.maximum(h1, 0)\n    h2 = h1.dot(W2) + b2\n    h2 = np.maximum(h2, 0)\n    action = h2.dot(W3) + b3\n    action = np.tanh(action)\n    return [round(a, 4) for a in action.tolist()]"}
{"task_id": 155, "completion_id": 9, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = weights['W1'].T.dot(state) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = weights['W2'].T.dot(a1) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = weights['W3'].T.dot(a2) + weights['b3']\n    a3 = np.tanh(z3)\n    action = a3.tolist()\n    action = [round(x, 4) for x in action]\n    return action"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef soft_threshold(x, threshold):\n    if x > threshold:\n        return x - threshold\n    elif x < -threshold:\n        return x + threshold\n    else:\n        return 0\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    lambda_param = lambda_param * m\n    if fit_intercept:\n        X = np.append(np.ones((m, 1)), X, axis=1)\n    weights = np.zeros(n + int(fit_intercept))\n    for _ in range(max_iters):\n        residuals = y - np.dot(X, weights)\n        for j in range(n + int(fit_intercept)):\n            if not fit_intercept and j == 0:\n                continue\n            temp_weights = weights.copy()\n            temp_weights[j] = 0\n            x_j = X[:, j]\n            r_j = residuals + np.dot(X, temp_weights)\n            numerator = np.dot(x_j, r_j)\n            denominator = np.dot(x_j, x_j)\n            weights[j] = soft_threshold(numerator, lambda_param) / denominator if denominator > 0 else 0\n    if fit_intercept:\n        bias = weights[0]\n        weights_no_bias = weights[1:]\n    else:\n        weights_no_bias = weights\n        bias = 0.0\n    weights_list = [round(i, 4) for i in weights_no_bias.tolist()]\n    bias_float = round(bias, 4)\n    return (weights_list, bias_float)"}
{"task_id": 160, "completion_id": 1, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple:\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    else:\n        X = np.c_[np.zeros(X.shape[0]), X]\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0\n    for _ in range(max_iters):\n        for j in range(n):\n            old_weight_j = weights[j]\n            weights[j] = 0\n            residual = y - np.dot(X, weights)\n            weights[j] = np.dot(X[:, j], residual) / (np.sum(X[:, j] ** 2) + lambda_param * m)\n            weights[j] = np.sign(weights[j]) * max(abs(weights[j]) - lambda_param / (2 * m), 0)\n        if fit_intercept:\n            bias = np.mean(y - np.dot(X[:, 1:], weights[1:]))\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 2, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    else:\n        X = np.insert(X, 0, 0, axis=1)\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0\n    for _ in range(max_iters):\n        for j in range(n):\n            weights_noj = weights.copy()\n            weights_noj[j] = 0\n            r_j = y - np.dot(X, weights_noj)\n            weights[j] = soft_thresholding(np.dot(X[:, j], r_j), lambda_param * m) / np.dot(X[:, j], X[:, j])\n        if fit_intercept:\n            bias = np.mean(y - np.dot(X[:, 1:], weights))\n    return ([round(weight, 4) for weight in weights], round(bias, 4))\ndef soft_thresholding(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)"}
{"task_id": 160, "completion_id": 3, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n        w = np.zeros(n + 1)\n        b = 0.0\n    else:\n        w = np.zeros(n)\n        b = 0.0\n    for _ in range(max_iters):\n        for j in range(n):\n            old_w_j = w[j]\n            w[j] = 0\n            r_j = y - np.dot(X, w)\n            w[j] = soft_threshold(np.dot(X[:, j], r_j), lambda_param * m) / np.dot(X[:, j], X[:, j])\n        if fit_intercept:\n            b = np.mean(y - np.dot(X, w))\n    return ([round(i, 4) for i in list(w)], round(b, 4))\ndef soft_threshold(a, tau):\n    if a > tau:\n        return a - tau\n    elif a < -tau:\n        return a + tau\n    else:\n        return 0\nX = rng.randn(100, 5)\ny = rng.randn(100)"}
{"task_id": 160, "completion_id": 4, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    else:\n        X = np.hstack((np.zeros((X.shape[0], 1)), X))\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    intercept = 0.0\n    residuals = y - X @ weights\n    for _ in range(max_iters):\n        for j in range(n):\n            old_weight_j = weights[j]\n            weights[j] = 0.0\n            residuals -= old_weight_j * X[:, j]\n            coef = X[:, j].dot(residuals) / X[:, j].dot(X[:, j])\n            weights[j] = soft_threshold(coef, lambda_param)\n            if fit_intercept:\n                intercept += np.mean(residuals)\n            residuals += weights[j] * X[:, j]\n    weights = weights.tolist()\n    weights = [round(x, 4) for x in weights]\n    intercept = round(float(intercept), 4)\n    return (weights, intercept)\ndef soft_threshold(coef, lambda_param):\n    \"\"\"Compute soft threshold according to Lasso regression rule.\"\"\"\n    return np.sign(coef) * max(abs(coef) - lambda_param, 0)"}
{"task_id": 160, "completion_id": 5, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    else:\n        X = np.concatenate((np.zeros((X.shape[0], 1)), X), axis=1)\n    n = X.shape[1]\n    m = X.shape[0]\n    w = np.zeros(n)\n    b = np.mean(y)\n\n    def soft_threshold(a, tau):\n        if a > tau:\n            return a - tau\n        elif a < -tau:\n            return a + tau\n        else:\n            return 0\n    for _ in range(max_iters):\n        for j in range(n):\n            old_w_j = w[j]\n            w[j] = 0\n            r_j = y - np.dot(X, w)\n            w[j] = soft_threshold(np.dot(X[:, j], r_j), lambda_param * m) / np.dot(X[:, j], X[:, j])\n            if j == 0:\n                b = np.mean(r_j)\n    return ([round(i, 4) for i in w], round(b, 4))"}
{"task_id": 160, "completion_id": 6, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    ones_zeros = np.ones(X.shape[0]) if fit_intercept else np.zeros(X.shape[0])\n    X = np.insert(X, 0, ones_zeros, axis=1)\n    (m, n) = X.shape\n    weights_array = np.zeros(n)\n    bias = 0\n    for _ in range(max_iters):\n        for j in range(n):\n            old_weight_j = weights_array[j]\n            weights_array[j] = 0\n            residuals = y - np.dot(X, weights_array)\n            if fit_intercept and _ == 0:\n                bias = np.mean(residuals)\n            non_jth_indices_mask = list(range(n))\n            non_jth_indices_mask.remove(j)\n            weights_array[j] = soft_thresholding(np.dot(X[:, j], residuals), lambda_param * m) / np.dot(X[:, j], X[:, j])\n            weights_array[j] += old_weight_j\n            if fit_intercept:\n                weights_array[0] += bias\n    return ([round(weight_j, 4) for weight_j in weights_array], round(bias, 4))\ndef soft_thresholding(a, tau):\n    \"\"\"\n    Implementation of a soft-thresholding function.\n    \"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)"}
{"task_id": 160, "completion_id": 7, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    (n, m) = X.shape\n    weights = np.zeros(m)\n    bias = 0.0\n    for _ in range(max_iters):\n        for j in range(m):\n            weights_temp = weights.copy()\n            weights_temp[j] = 0\n            residual = y - np.dot(X, weights_temp)\n            weights[j] = soft_thresholding(np.dot(X[:, j], residual), lambda_param * m) / np.dot(X[:, j], X[:, j])\n        if fit_intercept:\n            bias = np.mean(y - np.dot(X, weights))\n    weights = [round(weight, 4) for weight in weights]\n    return (weights, round(bias, 4))\ndef soft_thresholding(a, tau):\n    \"\"\"\n    Soft thresholding function\n    \"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)"}
{"task_id": 160, "completion_id": 8, "solution": "import numpy as np\ndef fit_lasso(X, y, lambda_param=1.0, max_iters=100, fit_intercept=True):\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1))\n        X = np.append(ones, X, axis=1)\n    weights = np.zeros(X.shape[1])\n    if fit_intercept:\n        bias = 0.0\n    residuals = y - np.dot(X, weights)\n    m = X.shape[0]\n    for _ in range(max_iters):\n        for j in range(X.shape[1]):\n            if j == 0 and fit_intercept:\n                weights_noj = weights[1:]\n                x_noj = X[:, 1:]\n                residuals = y - bias - weights_noj.dot(x_noj.T)\n            else:\n                weights_noj = np.append(weights[:j], weights[j + 1:])\n                x_noj = np.append(X[:, :j], X[:, j + 1:], axis=1)\n                residuals = y - X[:, j] * weights[j] - np.dot(x_noj, weights_noj)\n            soft_threshold = np.sign(np.dot(X[:, j].T, residuals)) * max(0, np.abs(np.dot(X[:, j].T, residuals)) - lambda_param * m)\n            weights[j] = soft_threshold / np.dot(X[:, j].T, X[:, j])\n            if j == 0 and fit_intercept:\n                bias = np.mean(residuals)\n    weights = [round(i, 4) for i in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 160, "completion_id": 9, "solution": "import numpy as np\ndef fit_lasso(X, y, lambda_param=1.0, max_iters=100, fit_intercept=True):\n\n    def soft_thresholding(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n    if fit_intercept:\n        X = np.column_stack([np.ones(X.shape[0]), X])\n    else:\n        X = np.column_stack([np.zeros(X.shape[0]), X])\n    weights = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        for j in range(X.shape[1]):\n            weights_temp = np.copy(weights)\n            weights_temp[j] = 0\n            residual = y - X.dot(weights_temp)\n            x_j = X[:, j]\n            inner_product = x_j.T.dot(residual)\n            weights[j] = soft_thresholding(inner_product, lambda_param * X.shape[0]) / np.sum(x_j ** 2)\n    return ([round(weight, 4) for weight in weights], round(weights[0], 4))"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    (x, y) = (np.array(x), np.array(y))\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 1, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    if isinstance(x, np.ndarray) and isinstance(y, np.ndarray):\n        return round(np.sum(x != y) / len(x), 4)\n    return round(np.sum(list(map(lambda a, b: a != b, x, y))) / len(x), 4)"}
{"task_id": 165, "completion_id": 2, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y) / x.size\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 3, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    (x, y) = map(np.array, (x, y))\n    if len(x) != len(y):\n        return -1\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 4, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"\n    Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function returns \u20111.\n\n    Args:\n    x: A 1-D Python list or NumPy array of integers.\n    y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n    A float rounded to 4 decimal places representing the Hamming distance,\n    or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    else:\n        distance = 1 / len(x) * np.sum(np.not_equal(x, y))\n        return round(distance, 4)"}
{"task_id": 165, "completion_id": 5, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    (x, y) = map(np.array, (x, y))\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y) / x.size\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 6, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape[0] != y.shape[0]:\n        return -1\n    distance = np.sum(x != y) / x.shape[0]\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 7, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    hamming_dist = np.sum(x != y) / x.size\n    return round(hamming_dist, 4)"}
{"task_id": 165, "completion_id": 8, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x = np.array(x)\n    y = np.array(y)\n    return round(np.sum(x != y) / len(x), 4)"}
{"task_id": 165, "completion_id": 9, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if x_arr.size != y_arr.size:\n        return -1\n    dist = np.sum(x_arr != y_arr) / x_arr.size\n    return round(dist, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine' and coefficients is not None:\n        return [round(sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coefficients))), 4) for n in range(N)]\n    else:\n        raise ValueError(f'Unknown window type {window}')"}
{"task_id": 169, "completion_id": 1, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        window_func = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        window_func = 0.5 * (1 - np.cos(2 * np.pi * n / (N - 1)))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        window_func = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be supplied for generalized_cosine window')\n        window_func = np.zeros(N)\n        for (i, a) in enumerate(coefficients):\n            window_func += a * np.cos(2 * np.pi * i * n / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type {window}')\n    return [round(i, 4) for i in window_func.tolist()]"}
{"task_id": 169, "completion_id": 2, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    window_name_to_coefficients = {'hamming': [0.54, -0.46], 'hann': [0.5, -0.5], 'blackman_harris': [0.35875, -0.48829, 0.14128, -0.01168]}\n    if window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        window_coefficients = coefficients\n    elif window in window_name_to_coefficients:\n        window_coefficients = window_name_to_coefficients[window]\n    else:\n        raise ValueError(f\"Unknown window name '{window}'.\")\n    n = np.arange(N)\n    k = np.arange(len(window_coefficients))\n    coefficients = np.sum(window_coefficients[k] * np.cos(2 * np.pi * k[:, None] * n / (N - 1)), axis=1)\n    return [round(c, 4) for c in coefficients.tolist()]"}
{"task_id": 169, "completion_id": 3, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    window = window.lower()\n    w = np.zeros(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n    elif window == 'hann':\n        w = 0.5 * (1 - np.cos(2 * np.pi * np.arange(N) / (N - 1)))\n    elif window == 'blackman_harris':\n        a = [0.35875, 0.48829, 0.14128, 0.01168]\n        w = np.ones(N) * a[0]\n        for k in range(1, 4):\n            w -= a[k] * np.cos(2 * np.pi * k * np.arange(N) / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be specified for generalized_cosine window.')\n        for (i, ak) in enumerate(coefficients):\n            w += ak * np.cos(2 * np.pi * i * np.arange(N) / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(val, 4) for val in w]"}
{"task_id": 169, "completion_id": 4, "solution": "import math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    elif window == 'generalized_cosine' and coefficients is None:\n        raise ValueError('For generalized_cosine, coefficients must be provided.')\n    if N == 1:\n        return [1.0]\n    window_coefficients = []\n    for n in range(N):\n        if window == 'hamming':\n            coefficient = 0.54 - 0.46 * math.cos(2 * math.pi * n / (N - 1))\n        elif window == 'hann':\n            coefficient = 0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            coefficient = 0.35875 - 0.48829 * math.cos(2 * math.pi * n / (N - 1))\n            coefficient += 0.14128 * math.cos(4 * math.pi * n / (N - 1)) - 0.01168 * math.cos(6 * math.pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            coefficient = coefficients[0]\n            for k in range(1, len(coefficients)):\n                coefficient += coefficients[k] * math.cos(k * 2 * math.pi * n / (N - 1))\n        else:\n            raise ValueError('Unknown window type.')\n        window_coefficients.append(round(coefficient, 4))\n    return window_coefficients"}
{"task_id": 169, "completion_id": 5, "solution": "import numpy as np\nfrom math import cos, pi\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0 or not isinstance(N, int):\n        raise ValueError('N must be a positive integer')\n    elif N == 1:\n        return [1.0]\n    elif window == 'hamming':\n        return [round(0.54 - 0.46 * cos(2 * pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * cos(2 * pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * cos(2 * pi * n / (N - 1)) + a2 * cos(4 * pi * n / (N - 1)) - a3 * cos(6 * pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided for generalized_cosine window')\n        return [round(sum([coefficients[k] * cos(2 * pi * k * n / (N - 1)) for k in range(len(coefficients))]), 4) for n in range(N)]\n    else:\n        raise ValueError(f'Unknown window type: {window}')"}
{"task_id": 169, "completion_id": 6, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        w = [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'hann':\n        w = [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided for generalized cosine window')\n        w = [sum([coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(coefficients))]) for n in range(N)]\n    else:\n        raise ValueError('Unknown window type')\n    return [round(wi, 4) for wi in w]"}
{"task_id": 169, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Union\ndef generate_window(window: str, N: int, coefficients: Union[List[float], None]=None) -> List[float]:\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if coefficients and window != 'generalized_cosine':\n        raise ValueError('coefficients can only be specified when window type is generalized_cosine.')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError(f'Unknown window type: {window}')\n    window_array = np.zeros(N)\n    n = np.arange(N)\n    if window == 'hamming':\n        window_array = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        window_array = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        window_array = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        for (k, ak) in enumerate(coefficients):\n            window_array += ak * np.cos(2 * np.pi * k * n / (N - 1))\n    return [round(val, 4) for val in window_array.tolist()]"}
{"task_id": 169, "completion_id": 8, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    window_functions = {'hamming': lambda k: 0.54 - 0.46 * np.cos(2 * np.pi * k / (N - 1)), 'hann': lambda k: 0.5 - 0.5 * np.cos(2 * np.pi * k / (N - 1)), 'blackman_harris': lambda k: 0.35875 - 0.48829 * np.cos(2 * np.pi * k / (N - 1)) + 0.14128 * np.cos(4 * np.pi * k / (N - 1)) - 0.01168 * np.cos(6 * np.pi * k / (N - 1)), 'generalized_cosine': lambda k: sum([coefficients[i] * np.cos(2 * np.pi * i * k / (N - 1)) for i in range(len(coefficients))])}\n    if window not in window_functions:\n        raise ValueError('Unknown window type')\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError('Coefficients must be provided for generalized cosine window')\n    window_coeffs = [window_functions[window](k) for k in range(N)]\n    return [round(coeff, 4) for coeff in window_coeffs]"}
{"task_id": 169, "completion_id": 9, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized cosine window.')\n        w = np.zeros_like(n, dtype=float)\n        for (k, ak) in enumerate(coefficients):\n            w += ak * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError('Unknown window type.')\n    return [round(wi, 4) for wi in w]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1.0 / (1.0 + np.exp(-z))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    labels = np.unique(y_train)\n    if len(labels) == 1:\n        return [labels[0] for _ in X_test]\n    y_train[y_train == labels[0]] = 0\n    y_train[y_train == labels[1]] = 1\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    W = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        perm = np.random.permutation(X_train.shape[0])\n        X_train = X_train[perm]\n        y_train = y_train[perm]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            y_hat_batch = sigmoid(X_batch.dot(W))\n            grad_loss_batch = grad_loss(X_batch.T, y_batch, y_hat_batch).mean(axis=1)\n            W -= learning_rate * grad_loss_batch\n    y_test_hat = sigmoid(X_test.dot(W))\n    y_test_pred = [labels[1] if y > 0.5 else labels[0] for y in y_test_hat]\n    return y_test_pred"}
{"task_id": 171, "completion_id": 1, "solution": "import numpy as np\nclass LogisticRegression:\n\n    def __init__(self, learning_rate=0.1, n_iters=5000, batch_size=32):\n        self.learning_rate = learning_rate\n        self.n_iters = n_iters\n        self.batch_size = batch_size\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        (n_samples, n_features) = X.shape\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n        for _ in range(self.n_iters):\n            batch_indices = np.random.choice(n_samples, self.batch_size)\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            linear_model = np.dot(X_batch, self.weights) + self.bias\n            y_predicted = self._sigmoid(linear_model)\n            dw = 1 / n_samples * np.dot(X_batch.T, y_predicted - y_batch)\n            db = 1 / n_samples * np.sum(y_predicted - y_batch)\n            self.weights -= self.learning_rate * dw\n            self.bias -= self.learning_rate * db\n\n    def predict(self, X):\n        linear_model = np.dot(X, self.weights) + self.bias\n        y_predicted = self._sigmoid(linear_model)\n        y_predicted_cls = [1 if i > 0.5 else 0 for i in y_predicted]\n        return y_predicted_cls\n\n    def _sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\ndef logistic_regression_train_predict(X_train, y_train, X_test, epochs=5000, learning_rate=0.1, batch_size=32):\n    if len(set(y_train)) == 1:\n        return [list(set(y_train))[0]] * len(X_test)\n    clf = LogisticRegression(learning_rate=learning_rate, n_iters=epochs, batch_size=batch_size)\n    clf.fit(np.array(X_train), np.array(y_train))\n    return clf.predict(np.array(X_test))"}
{"task_id": 171, "completion_id": 2, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train, y_train, X_test, epochs=5000, learning_rate=0.1, batch_size=32):\n    X_train = np.hstack((np.ones((len(X_train), 1)), np.array(X_train)))\n    X_test = np.hstack((np.ones((len(X_test), 1)), np.array(X_test)))\n    y_train = np.array(y_train)\n    label_map = {y_train[0]: 0, y_train[1]: 1}\n    y_train = np.array([label_map[y] for y in y_train])\n    if len(np.unique(y_train)) == 1:\n        y_pred = [y_train[0]] * len(X_test)\n    else:\n        (n_samples, n_features) = X_train.shape\n        weights = np.random.rand(n_features)\n        for epoch in range(epochs):\n            permutation = np.random.permutation(n_samples)\n            X_train_shuffled = X_train[permutation]\n            y_train_shuffled = y_train[permutation]\n            for i in range(0, n_samples, batch_size):\n                X_batch = X_train_shuffled[i:i + batch_size]\n                y_batch = y_train_shuffled[i:i + batch_size]\n                logits = np.dot(X_batch, weights)\n                predictions = logits.flatten()\n                probs = 1 / (1 + np.exp(-predictions))\n                error = y_batch - probs\n                gradients = np.dot(X_batch.T, error)\n                weights += learning_rate * gradients / batch_size\n        logits = np.dot(X_test, weights)\n        probs = 1 / (1 + np.exp(-logits))\n        y_pred = [v[0] for v in probs]\n    y_pred = [{v: k for (k, v) in label_map.items()}[round(p)] for p in y_pred]\n    return y_pred"}
{"task_id": 171, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    assert len(set(y_train)) == 2, 'y_train must have exactly 2 distinct labels'\n    assert all((len(sample) == len(X_train[0]) for sample in X_train)), 'All training samples must have the same dimensionality'\n    assert all((len(sample) == len(X_train[0]) for sample in X_test)), 'All test samples must have the same dimensionality as the training samples'\n    if len(set(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    X_train = np.hstack((np.ones((len(X_train), 1)), np.array(X_train)))\n    X_test = np.hstack((np.ones((len(X_test), 1)), np.array(X_test)))\n    y_train = np.array(y_train)\n    label_values = sorted(set(y_train))\n    label_map = {val: i for (i, val) in enumerate(label_values)}\n    y_train = np.array([label_map[y] for y in y_train])\n    num_features = X_train.shape[1]\n    weights = np.zeros(num_features)\n    for _ in range(epochs):\n        shuffle_indices = np.random.permutation(len(X_train))\n        X_train = X_train[shuffle_indices]\n        y_train = y_train[shuffle_indices]\n        for i in range(0, len(X_train), batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, predictions - y_batch)\n            weights -= learning_rate * gradient / batch_size\n    predictions = sigmoid(np.dot(X_test, weights))\n    predictions = [label_values[round(p)] for p in predictions]\n    return predictions"}
{"task_id": 171, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if np.unique(y_train).size == 1:\n        return np.full_like(y_test, y_train[0])\n    labels = np.unique(y_train)\n    y_train = np.where(y_train == labels[0], 0, 1)\n    (n_samples, n_features) = X_train.shape\n    weights = np.zeros(n_features)\n    bias = 0\n    X_train = np.concatenate((np.ones((n_samples, 1)), X_train), axis=1)\n    (n_samples, n_features) = X_train.shape\n    X_test = np.concatenate((np.ones((X_test.shape[0], 1)), X_test), axis=1)\n    for _ in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_train = X_train[permutation]\n        y_train = y_train[permutation]\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            linear_model = np.dot(X_batch, weights) + bias\n            y_predicted = sigmoid(linear_model)\n            dw = 1 / n_samples * np.dot(X_batch.T, y_predicted - y_batch)\n            db = 1 / n_samples * np.sum(y_predicted - y_batch)\n            weights -= learning_rate * dw\n            bias -= learning_rate * db\n    linear_model = np.dot(X_test, weights) + bias\n    y_predicted = sigmoid(linear_model)\n    y_predicted = np.where(y_predicted > 0.5, labels[1], labels[0])\n    return list(y_predicted)"}
{"task_id": 171, "completion_id": 5, "solution": "import numpy as np\nclass LogisticRegression:\n\n    def sigmoid(self, z):\n        return 1 / (1 + np.exp(-z))\n\n    def cost(self, h, y):\n        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n\n    def fit(self, X, y, epochs, learning_rate, batch_size):\n        loss = []\n        (num_examples, num_features) = X.shape\n        self.weights = np.zeros(num_features)\n        for epoch in range(epochs):\n            for i in range(int(num_examples / batch_size)):\n                X_batch = X[i * batch_size:(i + 1) * batch_size]\n                y_batch = y[i * batch_size:(i + 1) * batch_size]\n                h = self.sigmoid(np.dot(X_batch, self.weights))\n                gradient = np.dot(X_batch.T, h - y_batch) / y_batch.size\n                self.weights -= learning_rate * gradient\n            h = self.sigmoid(np.dot(X, self.weights))\n            loss.append(self.cost(h, y))\n        return loss\n\n    def predict(self, X):\n        return np.round(self.sigmoid(np.dot(X, self.weights))).astype(int)\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if len(np.unique(y_train)) == 1:\n        unique_label = y_train[0]\n        return [unique_label] * len(X_test)\n    X_train = np.insert(X_train, 0, 1, axis=1)\n    X_test = np.insert(X_test, 0, 1, axis=1)\n    y_train[y_train == y_train.min()] = 0\n    y_train[y_train == y_train.max()] = 1\n    model = LogisticRegression()\n    model.fit(X_train, y_train, epochs, learning_rate, batch_size)\n    predictions = model.predict(X_test)\n    y_train[y_train == 0] = y_train.min()\n    y_train[y_train == 1] = y_train.max()\n    predictions[predictions == 0] = y_train.min()\n    predictions[predictions == 1] = y_train.max()\n    return predictions.tolist()"}
{"task_id": 171, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1.0 / (1 + np.exp(-z))\ndef logistic_regression_train_predict(X_train, y_train, X_test, epochs=5000, learning_rate=0.1, batch_size=32):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if np.all(y_train == y_train[0]):\n        return [y_train[0] for _ in X_test]\n    (n_samples, n_features) = X_train.shape\n    unique_labels = np.unique(y_train)\n    y_train[y_train == unique_labels[0]] = 0\n    y_train[y_train == unique_labels[1]] = 1\n    weights = np.zeros(n_features)\n    X_train = np.hstack((np.ones((n_samples, 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    (n_samples, n_features) = X_train.shape\n    for epoch in range(epochs):\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_train[i:min(i + batch_size, n_samples), :]\n            y_batch = y_train[i:min(i + batch_size, n_samples)]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / y_batch.size\n            weights -= learning_rate * gradient\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_predictions[test_predictions < 0.5] = unique_labels[0]\n    test_predictions[test_predictions >= 0.5] = unique_labels[1]\n    return test_predictions.astype(int).tolist()"}
{"task_id": 171, "completion_id": 7, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    unique_labels = sorted(set(y_train))\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct labels.')\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    mapped_y_train = [label_map[y] for y in y_train]\n    X_train = np.hstack((np.ones((len(X_train), 1)), np.array(X_train)))\n    X_test = np.hstack((np.ones((len(X_test), 1)), np.array(X_test)))\n    weights = np.zeros(X_train.shape[1])\n    if len(set(mapped_y_train)) != 1:\n        for _ in range(epochs):\n            for i in range(0, len(X_train), batch_size):\n                X_batch = X_train[i:i + batch_size]\n                y_batch = np.array(mapped_y_train[i:i + batch_size])\n                probabilities = 1 / (1 + np.exp(-X_batch @ weights))\n                gradients = X_batch.T @ (probabilities - y_batch) / len(X_batch)\n                weights -= learning_rate * gradients\n    probabilities = 1 / (1 + np.exp(-X_test @ weights))\n    predictions = np.where(probabilities < 0.5, unique_labels[0], unique_labels[1])\n    return predictions.tolist()\nX_train = [[1, 2], [2, 3], [3, 1], [4, 3], [5, -1]]\ny_train = [0, 0, 0, 1, 1]\nX_test = [[2, 1], [3, 2]]"}
{"task_id": 171, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_train_orig = y_train\n    y_train = np.where(y_train == y_train[0], 0, 1)\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    if np.unique(y_train).shape[0] == 1:\n        return [y_train_orig[0] for _ in range(X_test.shape[0])]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        perm = np.random.permutation(X_train.shape[0])\n        X_train = X_train[perm]\n        y_train = y_train[perm]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            y_pred = sigmoid(np.dot(X_batch, weights))\n            residuals = y_pred - y_batch\n            gradient = np.dot(X_batch.T, residuals) / y_batch.size\n            weights -= learning_rate * gradient\n    y_pred = sigmoid(np.dot(X_test, weights))\n    y_pred = np.where(y_pred < 0.5, y_train_orig[0], y_train_orig[1])\n    return y_pred.tolist()"}
{"task_id": 171, "completion_id": 9, "solution": "import numpy as np\ndef add_intercept(X):\n    \"\"\"Add intercept to data\"\"\"\n    intercept = np.ones((X.shape[0], 1))\n    return np.concatenate((intercept, X), axis=1)\ndef sigmoid(z):\n    \"\"\"Calculate sigmoid\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = add_intercept(X_train)\n    X_test = add_intercept(X_test)\n    labels = np.unique(y_train)\n    y_train = np.where(y_train == labels[0], 0, 1)\n    if len(labels) == 1:\n        return [y_train[0]] * len(X_test)\n    theta = np.zeros(X_train.shape[1])\n    for i in range(epochs):\n        for j in range(0, X_train.shape[0], batch_size):\n            x_batch = X_train[j:j + batch_size]\n            y_batch = y_train[j:j + batch_size]\n            h = sigmoid(np.dot(x_batch, theta))\n            gradient = np.dot(x_batch.T, h - y_batch) / y_batch.size\n            theta -= learning_rate * gradient\n    predictions_proba = sigmoid(np.dot(X_test, theta))\n    predictions = np.where(predictions_proba >= 0.5, labels[1], labels[0])\n    return predictions.tolist()"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        min_error = np.inf\n        best_stump = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(np.shape(y_train))\n                    predictions[polarity * X_train[:, feature] < polarity * threshold] = -1\n                    error = np.sum(w[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n                    if error == 0:\n                        break\n            if min_error == 0:\n                break\n        if min_error == np.inf:\n            min_error = 0\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        w *= np.exp(-alpha * y_train * predict(*best_stump, X_train))\n        w /= np.sum(w)\n        stumps.append((best_stump, alpha))\n    y_pred = np.zeros(len(X_test))\n    for (stump, alpha) in stumps:\n        prediction = predict(*stump, X_test)\n        y_pred += alpha * prediction\n    y_pred = np.sign(y_pred)\n    y_pred = [int(p) for p in y_pred]\n    return y_pred\ndef predict(feature, threshold, polarity, x):\n    pred = np.ones(np.shape(x)[0])\n    pred[polarity * x[:, feature] < polarity * threshold] = -1\n    return pred"}
{"task_id": 176, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    weights = np.full(y_train.shape[0], 1 / y_train.shape[0])\n    f_preds = np.zeros(y_train.shape)\n    stumps = []\n    for _ in range(n_estimators):\n        error = float('inf')\n        best_stump = None\n        for feature_index in range(X_train.shape[1]):\n            feature_vals = X_train[:, feature_index]\n            thresholds = np.unique(feature_vals)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(y_train.shape)\n                    predictions[polarity * feature_vals < polarity * threshold] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error < error:\n                        error = weighted_error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        if error == 0:\n            best_stump['alpha'] = 1\n            stumps.append(best_stump)\n            break\n        best_stump['alpha'] = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predictions = np.ones(y_train.shape)\n        negative = best_stump['polarity'] * X_train[:, best_stump['feature_index']] < best_stump['polarity'] * best_stump['threshold']\n        predictions[negative] = -1\n        weights *= np.exp(-best_stump['alpha'] * y_train * predictions)\n        weights /= np.sum(weights)\n        f_preds += best_stump['alpha'] * predictions\n        stumps.append(best_stump)\n    y_preds = []\n    for sample in X_test:\n        preds = [stump['alpha'] * stump['polarity'] * int(sample[stump['feature_index']] < stump['threshold']) for stump in stumps]\n        pred = np.sign(np.sum(preds))\n        y_preds.append(0 if pred == -1 else 1)\n    return y_preds"}
{"task_id": 176, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_train = np.where(y_train == 0, -1, y_train)\n    y_test = None\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for _ in range(n_estimators):\n        errors = np.ones((n_features, 4))\n        for feature_index in range(n_features):\n            for polarity in [-1, 1]:\n                threshold = X_train[:, feature_index]\n                prediction = polarity * np.sign(threshold)\n                errors_ = np.abs(y_train - prediction)\n                weighted_errors_ = w * errors_\n                error = np.sum(weighted_errors_)\n                errors[feature_index, 0 if polarity == 1 else 1] = error\n                errors[feature_index, 2 if polarity == 1 else 3] = threshold\n        (minimizing_feature, minimizing_threshold, polarity) = np.unravel_index(np.argmin(errors[:, :2]), (n_features, 2))\n        minimizing_error = errors[minimizing_feature, minimizing_threshold]\n        minimizing_threshold = errors[minimizing_feature, 2 if polarity == 0 else 3]\n        if minimizing_error == 0:\n            break\n        alpha_t = 0.5 * np.log((1.0 - minimizing_error) / (minimizing_error + 1e-10))\n        weak_learners.append((minimizing_feature, minimizing_threshold, 1 if polarity == 0 else -1, alpha_t))\n        prediction = (1 if polarity == 0 else -1) * np.sign(X_train[:, minimizing_feature] - minimizing_threshold)\n        w *= np.exp(-alpha_t * y_train * prediction)\n        w /= np.sum(w)\n    if y_test is None:\n        y_pred = np.zeros(X_test.shape[0])\n        for (feature, threshold, polarity, alpha) in weak_learners:\n            prediction = (1 if polarity == 1 else -1) * np.sign(X_test[:, feature] - threshold)\n            y_pred += alpha * prediction\n        y_pred = np.sign(y_pred).astype(int)\n        y_pred = np.where(y_pred == -1, 0, y_pred)\n        return y_pred.tolist()\n    return []"}
{"task_id": 176, "completion_id": 3, "solution": "import numpy as np\ndef calculate_error(y, y_pred, w):\n    return np.sum(w * (y != y_pred))\ndef find_best_stump(X, y, w):\n    X = np.array(X)\n    y = np.array(y)\n    w = np.array(w)\n    (n_samples, n_features) = X.shape\n    inf = float('inf')\n    best_error = inf\n    best_stump = None\n    for feature_index in range(n_features):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                y_pred = polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n                error = calculate_error(y, y_pred, w)\n                if error < best_error:\n                    best_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'alpha': 0.5 * np.log((1.0 - best_error) / (best_error + 1e-10))}\n    return best_stump\ndef update_weights(y, y_pred, w, alpha):\n    w *= np.exp(-alpha * y * y_pred)\n    w /= np.sum(w)\n    return w\ndef predict_single_stump(x, stump):\n    return stump['polarity'] * ((x[stump['feature_index']] < stump['threshold']) * 2 - 1)\ndef predict(X_test, stumps):\n    y_pred = np.zeros(len(X_test))\n    for stump in stumps:\n        y_pred += stump['alpha'] * np.array([predict_single_stump(x, stump) for x in X_test])\n    return [1 if y >= 0 else 0 for y in y_pred]\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    for i in range(n_estimators):\n        stump = find_best_stump(X_train, y_train, w)\n        if stump is None:\n            break\n        stumps.append(stump)\n        y_pred = np.array([predict_single_stump(x, stump) for x in X_train])\n        w = update_weights(y_train, y_pred, w, stump['alpha'])\n    return predict(X_test, stumps)"}
{"task_id": 176, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples = X_train.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_stump = find_best_stump(X_train, y_train, weights)\n        weighted_error = calculate_weighted_error(y_train, best_stump['predictions'], weights)\n        if weighted_error == 0:\n            break\n        stump_weight = calculate_stump_weight(weighted_error)\n        weights = update_weights(weights, y_train, best_stump['predictions'], stump_weight)\n        weak_learners.append((best_stump, stump_weight))\n    predictions = make_predictions(X_test, weak_learners)\n    return predictions\ndef find_best_stump(X, y, weights):\n    best_stump = None\n    min_error = float('inf')\n    n_features = X.shape[1]\n    for feature_i in range(n_features):\n        for value in np.unique(X[:, feature_i]):\n            polarity = 1\n            predictions = np.ones(np.shape(y))\n            predictions[X[:, feature_i] < value] = -1\n            error = np.sum(weights[y != predictions])\n            if error > 0.5:\n                error = 1 - error\n                polarity = -1\n            if error < min_error:\n                min_error = error\n                best_stump = {'polarity': polarity, 'feature_index': feature_i, 'threshold': value, 'predictions': predictions}\n    return best_stump\ndef calculate_weighted_error(y, predictions, weights):\n    return np.sum(weights[y != predictions])\ndef calculate_stump_weight(error):\n    return 0.5 * np.log((1 - error) / (error + 1e-10))\ndef update_weights(weights, y, predictions, stump_weight):\n    updated_weights = weights * np.exp(-stump_weight * y * predictions)\n    return updated_weights / np.sum(updated_weights)\ndef make_predictions(X, weak_learners):\n    weighted_predictions = np.zeros(X.shape[0])\n    for (stump, stump_weight) in weak_learners:\n        predictions = np.ones(np.shape(X[:, stump['feature_index']]))\n        predictions[stump['polarity'] * X[:, stump['feature_index']] < stump['polarity'] * stump['threshold']] = -1\n        weighted_predictions += stump_weight * predictions\n    return [int(p >= 0) for p in weighted_predictions]"}
{"task_id": 176, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    (num_samples, num_features) = X_train.shape\n    weights = np.ones(num_samples) / num_samples\n    stumps = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for i in range(num_features):\n            for threshold in np.unique(X_train[:, i]):\n                for polarity in [-1, 1]:\n                    predictions = np.ones(num_samples)\n                    predictions[X_train[:, i] * polarity < threshold * polarity] = -1\n                    error = sum(weights[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': i, 'threshold': threshold, 'polarity': polarity}\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        best_stump['alpha'] = alpha\n        stumps.append(best_stump)\n        predictions = np.ones(num_samples)\n        (feature_index, threshold, polarity) = (best_stump['feature_index'], best_stump['threshold'], best_stump['polarity'])\n        predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        if min_error == 0:\n            break\n    X_test = np.array(X_test)\n    final_predictions = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        (feature_index, threshold, polarity) = (stump['feature_index'], stump['threshold'], stump['polarity'])\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_index] * polarity < threshold * polarity] = -1\n        final_predictions += stump['alpha'] * predictions\n    final_predictions = [1 if prediction > 0 else 0 for prediction in final_predictions]\n    return final_predictions"}
{"task_id": 176, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    (m, n) = (len(X_train), len(X_train[0]))\n    w = np.full(m, 1 / m)\n    stumps = []\n    for t in range(n_estimators):\n        (best_feature, best_threshold, best_polarity, min_error, best_predict) = (None, None, None, float('inf'), None)\n        for feature_index in range(n):\n            values = sorted(set((x[feature_index] for x in X_train)))\n            thresholds = [(values[i] + values[i + 1]) / 2 for i in range(len(values) - 1)]\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = [polarity if x[feature_index] < threshold else -polarity for x in X_train]\n                    error = sum((w[i] for i in range(m) if predictions[i] != y_train[i]))\n                    if error < min_error:\n                        (best_feature, best_threshold, best_polarity, min_error, best_predict) = (feature_index, threshold, polarity, error, predictions)\n        if min_error == 0:\n            break\n        w = [w[i] * np.exp(-best_polarity * y_train[i] * best_predict[i]) for i in range(m)]\n        w /= np.sum(w)\n        stumps.append((best_feature, best_threshold, best_polarity))\n    predictions = []\n    for x in X_test:\n        prediction = sum((polarity * (1 if x[feature] < threshold else -1) for (feature, threshold, polarity) in stumps))\n        prediction = 1 if prediction >= 0 else 0\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 176, "completion_id": 7, "solution": "import numpy as np\ndef build_stump(X, y, weights):\n    (m, n) = X.shape\n    num_steps = 10.0\n    best_stump = {}\n    best_class_est = np.ones(np.shape(y))\n    min_error = np.inf\n    for i in range(n):\n        range_min = X[:, i].min()\n        range_max = X[:, i].max()\n        step_size = (range_max - range_min) / num_steps\n        for j in range(-1, int(num_steps) + 1):\n            for inequal in ['less', 'greater']:\n                thresh_val = range_min + float(j) * step_size\n                predicted_vals = np.ones(np.shape(y))\n                if inequal == 'less':\n                    predicted_vals[X[:, i] <= thresh_val] = -1\n                else:\n                    predicted_vals[X[:, i] >= thresh_val] = -1\n                err_vec = np.ones(m)\n                err_vec[predicted_vals == y] = 0\n                weighted_error = weights.dot(err_vec)\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_class_est = predicted_vals.copy()\n                    best_stump['feature_index'] = i\n                    best_stump['threshold'] = thresh_val\n                    best_stump['inequal'] = inequal\n    return (best_stump, min_error, best_class_est)\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    classifier_arr = []\n    alpha_vec = []\n    for i in range(n_estimators):\n        (stump, error, class_est) = build_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        alpha_vec.append(alpha)\n        classifier_arr.append(stump)\n        exponent = np.multiply(-alpha * np.array(y_train), class_est)\n        weights = np.multiply(weights, np.exp(exponent))\n        weights /= weights.sum()\n        preds = np.ones(X_train.shape[0])\n        preds[class_est != np.array(y_train)] = -1\n        error_rate = weights[preds != np.array(y_train)].sum()\n        if error_rate == 0.0:\n            break\n    y_pred_test = np.zeros((X_test.shape[0],))\n    for j in range(len(classifier_arr)):\n        class_est = np.ones(np.shape(y_pred_test))\n        if classifier_arr[j]['inequal'] == 'less':\n            class_est[X_test[:, classifier_arr[j]['feature_index']] <= classifier_arr[j]['threshold']] = -1\n        else:\n            class_est[X_test[:, classifier_arr[j]['feature_index']] >= classifier_arr[j]['threshold']] = -1\n        y_pred_test += alpha_vec[j] * class_est\n    return [int(pred > 0) for pred in y_pred_test]"}
{"task_id": 176, "completion_id": 8, "solution": "import numpy as np\ndef compute_error(y, y_pred, weights):\n    miss = y != y_pred\n    return np.sum(weights * miss)\ndef compute_alpha(error):\n    return 0.5 * np.log((1.0 - error) / (error + 1e-10))\ndef update_weights(weights, alpha, y, y_pred):\n    return weights * np.exp(-alpha * y * y_pred)\ndef normalize_weights(weights):\n    Z = np.sum(weights)\n    return weights / Z\ndef predict_with_stump(X, feature_index, threshold, polarity):\n    n_samples = X.shape[0]\n    predictions = np.ones(n_samples)\n    if polarity == 1:\n        predictions[X[:, feature_index] > threshold] = -1\n    else:\n        predictions[X[:, feature_index] <= threshold] = -1\n    return predictions\ndef adaboost_stump(X, y, weights, feature_index, threshold, polarity):\n    y_pred = predict_with_stump(X, feature_index, threshold, polarity)\n    error = compute_error(y, y_pred, weights)\n    if error > 0.5:\n        error = 1 - error\n        polarity *= -1\n        y_pred *= -1\n    alpha = compute_alpha(error)\n    weights = update_weights(weights, alpha, y, y_pred)\n    weights = normalize_weights(weights)\n    return (error, y_pred, weights, alpha, polarity)\ndef find_best_stump(X, y, weights):\n    n_features = X.shape[1]\n    (all_errors, all_alphas, all_polarities) = ([], [], [])\n    (best_stump, best_error, best_pred, best_alpha, best_polarity) = (None, None, None, None, None)\n    for feature_index in range(n_features):\n        for polarity in [1, -1]:\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                (error, y_pred, weights, alpha, polarity) = adaboost_stump(X, y, weights, feature_index, threshold, polarity)\n                all_errors.append(error)\n                all_alphas.append(alpha)\n                all_polarities.append(polarity)\n                if best_error is None or error < best_error:\n                    best_stump = (feature_index, threshold)\n                    best_error = error\n                    best_pred = y_pred.copy()\n                    best_alpha = alpha\n                    best_polarity = polarity\n    return (best_stump, best_error, best_pred, best_alpha, best_polarity, weights)\ndef adaboost_predict(X_train, y_train, X_test, n_estimators):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_train[y_train == 0] = -1\n    y_train = np.reshape(y_train, (X_train.shape[0], 1))\n    X_test = np.array(X_test)\n    (n_samples, n_features) = (X_train.shape[0], X_train.shape[1])\n    weights = np.ones(n_samples) / n_samples\n    all_stumps = []\n    all_alphas = []\n    for _ in range(n_estimators):\n        (best_stump, error, y_pred, alpha, polarity, weights) = find_best_stump(X_train, y_train, weights)\n        all_stumps.append((best_stump, polarity))\n        all_alphas.append(alpha)\n        if error < 1e-10:\n            break\n    final_predictions = np.zeros(X_test.shape[0])\n    for ((stump, polarity), alpha) in zip(all_stumps, all_alphas):\n        (feature_index, threshold) = stump\n        prediction = predict_with_stump(X_test, feature_index, threshold, polarity)\n        final_predictions += alpha * prediction\n    y_pred = np.where(final_predictions >= 0, 1, 0)\n    return y_pred.tolist()"}
{"task_id": 176, "completion_id": 9, "solution": "def adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    weights = np.ones(len(X_train)) / len(X_train)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n\n    def decision_stump(X: np.array, y: np.array, weights: np.array) -> dict:\n        min_error = np.inf\n        stump = None\n        total_error = np.sum(weights)\n        for feature_index in range(n_features):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.ones(y.shape)\n                    predictions[X[:, feature_index] * polarity < threshold * polarity] = 1 * polarity\n                    error = np.sum(weights[predictions != y])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        stump = {'feature': feature_index, 'threshold': threshold, 'polarity': polarity, 'error': min_error}\n                    if error == 0:\n                        return stump\n        return stump\n\n    def update_weights(stump: dict, weights: np.array, y: np.array, X: np.array) -> np.array:\n        prediction = stump['polarity'] * np.ones(y.shape)\n        prediction[X[:, stump['feature']] * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1 * stump['polarity']\n        alpha = 0.5 * np.log((1.0 - stump['error']) / (stump['error'] + 1e-10))\n        weights *= np.exp(-alpha * y * prediction)\n        weights /= np.sum(weights)\n        return weights\n\n    def predict(X: np.array, stump: dict) -> int:\n        return 1 if stump['polarity'] * X[stump['feature']] < stump['threshold'] * stump['polarity'] else -1\n    stumps = []\n    for _ in range(n_estimators):\n        stump = decision_stump(X_train, y_train, weights)\n        if stump['error'] == 0:\n            break\n        stumps.append(stump)\n        weights = update_weights(stump, weights, y_train, X_train)\n    predictions = [np.sign(sum((stump['polarity'] * predict(x, stump) for stump in stumps))) for x in X_test]\n    return [int((p + 1) / 2) for p in predictions]"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    for i in [n_dims, num_particles, num_iterations]:\n        if i <= 0:\n            return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    upper_bound = 1\n    lower_bound = -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    personal_best_positions = np.copy(positions)\n    global_best_position = positions[np.argmin(np.sum(positions ** 2, axis=1))]\n    for _ in range(num_iterations):\n        personal_best_values = np.sum(personal_best_positions ** 2, axis=1)\n        global_best_value = np.sum(global_best_position ** 2)\n        new_values = np.sum(positions ** 2, axis=1)\n        update = new_values < personal_best_values\n        personal_best_positions[update] = positions[update]\n        new_best = np.argmin(new_values)\n        if new_values[new_best] < global_best_value:\n            global_best_position = positions[new_best]\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = np.clip(w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions), lower_bound, upper_bound)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n    return round(np.min(np.sum(positions ** 2, axis=1)), 4)"}
{"task_id": 178, "completion_id": 1, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not all([i > 0 for i in [n_dims, num_particles, num_iterations]]):\n        return -1\n    rng = np.random.default_rng(seed)\n    particles_position = rng.uniform(-1, 1, (num_particles, n_dims))\n    particles_velocity = rng.uniform(-1, 1, (num_particles, n_dims))\n    particles_best_position = particles_position.copy()\n    particles_best_value = (particles_position ** 2).sum(axis=1)\n    global_best_position = particles_position[particles_best_value.argmin()]\n    global_best_value = particles_best_value.min()\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            particles_velocity[i] = w * particles_velocity[i] + c1 * r1 * (particles_best_position[i] - particles_position[i]) + c2 * r2 * (global_best_position - particles_position[i])\n            particles_position[i] = np.clip(particles_position[i] + particles_velocity[i], -1, 1)\n            particle_value = (particles_position[i] ** 2).sum()\n            if particle_value < particles_best_value[i]:\n                particles_best_position[i] = particles_position[i]\n                particles_best_value[i] = particle_value\n                if particle_value < global_best_value:\n                    global_best_position = particles_position[i]\n                    global_best_value = particle_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 2, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed)\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_bests = particles.copy()\n    g_best = particles[particles.sum(axis=1).argmin()]\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (p_bests[i] - particles[i]) + c2 * r2 * (g_best - particles[i])\n            particles[i] = np.clip(particles[i] + velocities[i], -1, 1)\n            if sphere_func(particles[i]) < sphere_func(p_bests[i]):\n                p_bests[i] = particles[i]\n            if sphere_func(particles[i]) < sphere_func(g_best):\n                g_best = particles[i]\n    return round(sphere_func(g_best), 4)\ndef sphere_func(x):\n    return np.sum(x ** 2)"}
{"task_id": 178, "completion_id": 3, "solution": "import numpy as np\nfrom numba import jit\n@jit(nopython=True)\ndef sphere(x):\n    return np.sum(x ** 2)\ndef clip(x, lower, upper):\n    return np.maximum(np.minimum(x, upper), lower)\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\"\"\"\n    if not (isinstance(n_dims, int) and n_dims > 0):\n        return -1\n    if not (isinstance(num_particles, int) and num_particles > 0):\n        return -1\n    if not (isinstance(num_iterations, int) and num_iterations > 0):\n        return -1\n    rng = np.random.default_rng(seed)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    (lower_bound, upper_bound) = (-1, 1)\n    positions = 2 * rng.random((num_particles, n_dims)) - 1\n    velocities = 0.5 * rng.random((num_particles, n_dims))\n    p_bests = positions.copy()\n    g_best = positions[np.argmin(sphere(positions))].copy()\n    for _ in range(num_iterations):\n        for (i, position) in enumerate(positions):\n            velocities[i] = w * velocities[i] + c1 * rng.random() * (p_bests[i] - position) + c2 * rng.random() * (g_best - position)\n            position = clip(position + velocities[i], lower_bound, upper_bound)\n            if sphere(position) < sphere(p_bests[i]):\n                p_bests[i] = position\n                if sphere(g_best) > sphere(p_bests[i]):\n                    g_best = p_bests[i].copy()\n    return round(sphere(g_best), 4)"}
{"task_id": 178, "completion_id": 4, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if any((not isinstance(x, int) or x <= 0 for x in (n_dims, num_particles, num_iterations))):\n        return -1\n    rng = np.random.default_rng(seed)\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    pbest = particles\n    pbest_obj = np.array([np.sum(x ** 2) for x in particles])\n    gbest = pbest[np.argmin(pbest_obj)]\n    gbest_obj = np.min(pbest_obj)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.random(2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (pbest[i] - particles[i]) + c2 * r2 * (gbest - particles[i])\n            particles[i] = np.clip(particles[i] + velocities[i], -1, 1)\n            obj = np.sum(particles[i] ** 2)\n            if obj < pbest_obj[i]:\n                (pbest[i], pbest_obj[i]) = (particles[i], obj)\n            if obj < gbest_obj:\n                (gbest, gbest_obj) = (particles[i], obj)\n    return round(gbest_obj, 4)"}
{"task_id": 178, "completion_id": 5, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    (lower_bound, upper_bound) = (-1, 1)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    p_best = positions.copy()\n    g_best = positions[np.argmin(np.sum(positions ** 2, axis=1))].copy()\n    for _ in range(num_iterations):\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_partities, n_dims))\n        velocities = w * velocities + c1 * r1 * (p_best - positions) + c2 * r2 * (g_best - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        new_fitness = np.sum(positions ** 2, axis=1)\n        old_fitness = np.sum(p_best ** 2, axis=1)\n        improved = new_fitness < old_fitness\n        p_best[improved] = positions[improved]\n        if np.any(improved):\n            g_best = p_best[np.argmin(np.sum(p_best ** 2, axis=1))].copy()\n    return round(np.min(np.sum(g_best ** 2)), 4)"}
{"task_id": 178, "completion_id": 6, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimizes the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimization iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    dimensions = (num_iterations, num_particles, n_dims)\n    X = rng.uniform(-1, 1, size=dimensions)\n    V = rng.uniform(-1, 1, size=dimensions)\n    P_best = X.copy()\n    G_best = X[0].copy()\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    sphere_func = lambda x: np.sum(x ** 2, axis=1)\n    fx = sphere_func(X)\n    idx = np.argmin(fx, axis=1)\n    G_best = X[np.arange(num_particles), idx].copy()\n    fg = np.min(fx, axis=1)\n    for t in range(num_iterations - 1):\n        (r1, r2) = rng.uniform(0, 1, size=(2, num_particles, n_dims))\n        V[t + 1] = w * V[t] + c1 * r1 * (P_best[t] - X[t]) + c2 * r2 * (G_best - X[t])\n        V[t + 1] = np.clip(V[t + 1], -1, 1)\n        X[t + 1] = X[t] + V[t + 1]\n        X[t + 1] = np.clip(X[t + 1], -1, 1)\n        fx = sphere_func(X[t + 1])\n        update = fx < sphere_func(P_best[t])\n        P_best[t + 1] = np.where(update[:, np.newaxis], X[t + 1], P_best[t])\n        idx = np.argmin(fx)\n        if fx[idx] < sphere_func(G_best):\n            G_best = X[t + 1, idx].copy()\n    return np.round(np.min(sphere_func(G_best)), 4)"}
{"task_id": 178, "completion_id": 7, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1, w: float=0.5, c1: float=1.5, c2: float=1.5, lower_bound: float=-1, upper_bound: float=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\"\"\"\n    if not all((i > 0 for i in (n_dims, num_particles, num_iterations))):\n        return -1\n    rng = np.random.default_rng(seed)\n    particles_positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    particles_velocities = rng.uniform(lower_bound / 5, upper_bound / 5, (num_particles, n_dims))\n    particles_best_positions = particles_positions.copy()\n    global_best_position = particles_positions[0].copy()\n    particles_best_objective_values = np.sum(particles_positions ** 2, axis=1)\n    global_best_objective_value = np.min(particles_best_objective_values)\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        particles_velocities = w * particles_velocities + c1 * r1 * (particles_best_positions - particles_positions) + c2 * r2 * (global_best_position - particles_positions)\n        particles_positions += particles_velocities\n        particles_positions = np.clip(particles_positions, lower_bound, upper_bound)\n        current_objective_values = np.sum(particles_positions ** 2, axis=1)\n        update = current_objective_values < particles_best_objective_values\n        particles_best_objective_values[update] = current_objective_values[update]\n        particles_best_positions[update] = particles_positions[update]\n        if np.min(current_objective_values) < global_best_objective_value:\n            global_best_objective_value = np.min(current_objective_values)\n            global_best_position = particles_positions[np.argmin(current_objective_values)]\n    return round(global_best_objective_value, 4)"}
{"task_id": 178, "completion_id": 8, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_best = positions.copy()\n    g_best = positions[np.argmin(positions.sum(axis=1))]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        p_fitness = np.sum(positions ** 2, axis=1)\n        g_fitness = np.sum(g_best ** 2)\n        p_best = np.where(p_fitness[:, np.newaxis] < np.sum(p_best ** 2, axis=1), positions, p_best)\n        g_best = positions[np.argmin(p_fitness)] if np.min(p_fitness) < g_fitness else g_best\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_partities, n_dims))\n        velocities = w * velocities + c1 * r1 * (p_best - positions) + c2 * r2 * (g_best - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n    return round(np.min(np.sum(positions ** 2, axis=1)), 4)"}
{"task_id": 178, "completion_id": 9, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    (lower_bound, upper_bound) = (-1, 1)\n    swarm = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-abs(upper_bound - lower_bound), abs(upper_bound - lower_bound), (num_particles, n_dims))\n    pbest = np.copy(swarm)\n    gbest = swarm[np.argmin(np.sum(swarm ** 2, axis=1))]\n    gbestval = np.inf\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (pbest[i] - swarm[i]) + c2 * r2 * (gbest - swarm[i])\n            swarm[i] = np.clip(swarm[i] + velocities[i], lower_bound, upper_bound)\n            if np.sum(swarm[i] ** 2) < np.sum(pbest[i] ** 2):\n                pbest[i] = swarm[i]\n            if np.sum(pbest[i] ** 2) < gbestval:\n                gbestval = np.sum(pbest[i] ** 2)\n                gbest = pbest[i]\n    return round(gbestval, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial import distance\ndef knn_predict(X_train, y_train, X_test, k=5, task='classification'):\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance.euclidean(train_sample, test_sample) for train_sample in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        if task == 'classification':\n            counter = Counter(nearest_labels)\n            prediction = counter.most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(np.mean(nearest_labels), 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    for x_test in X_test:\n        distances = [(i, np.sqrt(sum(((x - y) ** 2 for (x, y) in zip(x_train, x_test))))) for (i, x_train) in enumerate(X_train)]\n        distances.sort(key=lambda x: x[1])\n        if k == 0 or k > len(X_train):\n            k = len(X_train)\n        neighbours = [y_train[index] for (index, _) in distances[:k]]\n        if task == 'classification':\n            prediction = Counter(neighbours).most_common(1)[0][0]\n        else:\n            prediction = round(sum(neighbours) / len(neighbours), 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    distance = np.sqrt(((np.array(X_train) - np.array(X_test)[:, np.newaxis]) ** 2).sum(axis=2))\n    indices = np.argsort(distance, axis=1)\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    indices = indices[:, :k]\n    predictions = []\n    for (i, sample) in enumerate(X_test):\n        k_nearest_neighbours = [y_train[indices[i][j]] for j in range(k)]\n        if task == 'classification':\n            label_counts = np.array(k_nearest_neighbours)\n            (labels, counts) = np.unique(label_counts, return_counts=True)\n            predictions.append(labels[np.argmax(counts)])\n        elif task == 'regression':\n            predictions.append(round(np.mean(k_nearest_neighbours), 4))\n    return predictions\nX_train = [[0, 0], [1, 0], [0, 1], [0.5, 0.5], [3, 3], [2, 3], [3, 2]]\ny_train = [0, 0, 0, 0, 1, 1, 1]\nX_test = [[1, 1], [2, 2]]"}
{"task_id": 180, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_pred = []\n    for test_vec in X_test:\n        distances = np.sqrt(np.sum((X_train - test_vec) ** 2, axis=1))\n        if k == 0 or k > len(X_train):\n            k_nearest_ids = np.argsort(distances)\n        else:\n            k_nearest_ids = np.argpartition(distances, k)[:k]\n        k_nearest_labels = y_train[k_nearest_ids]\n        if task == 'classification':\n            (unique, counts) = np.unique(k_nearest_labels, return_counts=True)\n            prediction = unique[np.argmax(counts)]\n        elif task == 'regression':\n            prediction = round(np.mean(k_nearest_labels), 4)\n        y_pred.append(prediction)\n    return y_pred"}
{"task_id": 180, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    y_pred = []\n    for xtest in X_test:\n        distances = []\n        for (i, xtrain) in enumerate(X_train):\n            dist = distance.euclidean(xtest, xtrain)\n            distances.append((i, dist))\n        distances.sort(key=lambda x: x[1])\n        if k > 0:\n            distances = distances[:k]\n        neighbours_indices = [n[0] for n in distances]\n        neighbours_targets = [y_train[i] for i in neighbours_indices]\n        if task == 'classification':\n            counter = Counter(neighbours_targets)\n            prediction = counter.most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(sum(neighbours_targets) / len(neighbours_targets), 4)\n        else:\n            raise ValueError(\"Invalid task type. Choose either 'classification' or 'regression'.\")\n        y_pred.append(prediction)\n    return y_pred"}
{"task_id": 180, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List, Union\ndef knn_predict(X_train: List[List[float]], y_train: List, X_test: List[List[float]], k: int=5, task: str='classification') -> List[Union[str, float]]:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sqrt(np.sum((test_sample - X_train) ** 2, axis=1))\n        knn_indices = np.argpartition(distances, k if k > 0 else len(distances))[:k if k > 0 else len(distances)]\n        knn_labels = y_train[knn_indices]\n        if task == 'classification':\n            label_counter = Counter(knn_labels)\n            predicted_label = label_counter.most_common(1)[0][0]\n            predictions.append(predicted_label)\n        elif task == 'regression':\n            predicted_value = round(np.mean(knn_labels), 4)\n            predictions.append(predicted_value)\n    return predictions"}
{"task_id": 180, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification'):\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n\n    def find_nearest_neighbours(x, X_train, y_train, k):\n        distances = [(euclidean_distance(x, x_train), y_train) for (x_train, y_train) in zip(X_train, y_train)]\n        distances.sort()\n        return distances[:k]\n    preds = []\n    for x in X_test:\n        neighbours = find_nearest_neighbours(x, X_train, y_train, k if k else len(X_train))\n        if task == 'classification':\n            (values, counts) = zip(*[(val, sum((1 for _ in group))) for (val, group) in itertools.groupby(sorted(neighbours, key=lambda n: n[1]))])\n            vals = [val for (val, count_) in sorted(zip(values, counts), key=lambda x: x[1])]\n            preds.append(vals[0])\n        elif task == 'regression':\n            neighbours_values = [n[1] for n in neighbours]\n            preds.append(round(sum(neighbours_values) / len(neighbours_values), 4))\n        else:\n            raise ValueError(\"Invalid task type. Choose either 'classification' or 'regression'.\")\n    return preds"}
{"task_id": 180, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    predictions = []\n    for test_vector in X_test:\n        distances = np.sqrt(np.sum((X_train - test_vector) ** 2, axis=1))\n        sorted_indices = np.argsort(distances)\n        if k == 0 or k >= len(sorted_indices):\n            k = len(sorted_indices)\n        if task == 'classification':\n            labels = y_train[sorted_indices[:k]]\n            counter = Counter(labels)\n            prediction = counter.most_common()[0][0]\n        else:\n            neighbours = y_train[sorted_indices[:k]]\n            prediction = round(np.mean(neighbours), 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train, y_train, X_test, k=5, task='classification'):\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    max_k = X_train.shape[0]\n    k = max_k if k == 0 or k > max_k else k\n    preds = []\n    for test_sample in X_test:\n        dists = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n        knn_indices = np.argsort(dists)[:k]\n        knn_labels = y_train[knn_indices]\n        if task == 'classification':\n            (label, _) = Counter(knn_labels).most_common(1)[0]\n            preds.append(label)\n        elif task == 'regression':\n            avg = np.mean(knn_labels)\n            preds.append(round(avg, 4))\n    return preds"}
{"task_id": 180, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    prediction = []\n    for test_vector in X_test:\n        distances = []\n        for train_vector in X_train:\n            distance = np.linalg.norm(np.array(test_vector) - np.array(train_vector))\n            distances.append(distance)\n        k_nearest_indices = np.argsort(distances)[:k if k else len(distances)]\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        if task == 'classification':\n            counts = Counter(k_nearest_labels)\n            prediction.append(max(counts, key=counts.get))\n        else:\n            prediction.append(round(sum(k_nearest_labels) / len(k_nearest_labels), 4))\n    return prediction"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n\n    class Node:\n\n        def __init__(self, gini, num_samples_per_class, predicted_class, split_feature=None, split_threshold=None, left=None, right=None):\n            self.gini = gini\n            self.num_samples_per_class = num_samples_per_class\n            self.predicted_class = predicted_class\n            self.split_feature = split_feature\n            self.split_threshold = split_threshold\n            self.left = left\n            self.right = right\n\n    def gini_impurity(y):\n        unique_labels = np.unique(y)\n        impurity = 1.0\n        for label in unique_labels:\n            p = len(y[y == label]) / len(y)\n            impurity -= p ** 2\n        return impurity\n\n    def split_data(X, y, feature, threshold):\n        left_mask = X[:, feature] < threshold\n        right_mask = X[:, feature] >= threshold\n        return ((X[left_mask], y[left_mask]), (X[right_mask], y[right_mask]))\n\n    def best_split(X, y):\n        best_gain = 0.0\n        (best_feature, best_threshold) = (None, None)\n        (best_left, best_right) = (None, None)\n        current_gini = gini_impurity(y)\n        num_samples_per_class = [np.sum(y == i) for i in range(np.max(y) + 1)]\n        num_parent = [np.sum(y == i) for i in range(np.max(y) + 1)]\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                (left, right) = split_data(X, y, feature, threshold)\n                if len(left[0]) > 0 and len(right[0]) > 0:\n                    left_gini = gini_impurity(left[1])\n                    right_gini = gini_impurity(right[1])\n                    num_left = [np.sum(left[1] == i) for i in range(np.max(left[1]) + 1)]\n                    num_right = [np.sum(right[1] == i) for i in range(np.max(right[1]) + 1)]\n                    gain = current_gain - sum([(num_left[i] + num_right[i]) / sum(num_parent) * gini for (gini, num_left, num_right) in zip([left_gini, right_gini], [num_left, num_right], [num_right, num_left])])\n                    if gain > best_gain:\n                        best_gain = gain\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_left = left\n                        best_right = right\n        return Node(best_gain, num_samples_per_class, np.argmax(num_samples_per_class), best_feature, best_threshold, best_left, best_right)\n\n    def build_tree(X, y, max_depth, depth=0):\n        node = best_split(X, y)\n        if node.gini == 0.0 or (max_depth is not None and depth >= max_depth):\n            return node\n        if len(node.left[0]) > 0:\n            node.left = build_tree(node.left[0], node.left[1], max_depth, depth + 1)\n        if len(node.right[0]) > 0:\n            node.right = build_tree(node.right[0], node.right[1], max_depth, depth + 1)\n        return node\n\n    def predict_one(x, node):\n        if node.split_feature is not None:\n            if x[node.split_feature] < node.split_threshold:\n                return predict_one(x, node.left)\n            else:\n                return predict_one(x, node.right)\n        return node.predicted_class\n\n    def predict(X_test, tree):\n        return [predict_one(x, tree) for x in X_test]\n    tree = build_tree(X_train, y_train, max_depth)\n    return predict(X_test, tree)"}
{"task_id": 184, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef gini_impurity(y):\n    n_total = len(y)\n    counter = Counter(y)\n    impurity = 0.0\n    for num in counter.values():\n        p = num / n_total\n        impurity += p * (1 - p)\n    return impurity\ndef split_data(X, y, feature, threshold):\n    left_idx = X[:, feature] < threshold\n    right_idx = X[:, feature] >= threshold\n    return {'left': (X[left_idx], y[left_idx]), 'right': (X[right_idx], y[right_idx])}\ndef find_best_split(X, y):\n    best_gain = 0.0\n    (best_feature, best_threshold) = (None, None)\n    parent_gini = gini_impurity(y)\n    for feature in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            splits = split_data(X, y, feature, threshold)\n            gain = parent_gini\n            for subset in splits.values():\n                if len(subset[0]) != 0 and len(subset[1]) != 0:\n                    subset_gini = gini_impurity(subset[1]) * len(subset[1])\n                    gain -= subset_gini / len(y)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    return {'feature': best_feature, 'threshold': best_threshold, 'gain': best_gain}\ndef build_tree(X, y, max_depth=None, depth=0):\n    unique_classes = np.unique(y)\n    prediction = unique_classes[np.argmax([np.sum(y == i) for i in unique_classes])]\n    split = find_best_split(X, y)\n    if split['gain'] == 0.0 or (max_depth is not None and depth >= max_depth):\n        return prediction\n    depth += 1\n    node = {'feature': split['feature'], 'threshold': split['threshold'], 'left': None, 'right': None, 'prediction': prediction}\n    splits = split_data(X, y, split['feature'], split['threshold'])\n    node['left'] = build_tree(splits['left'][0], splits['left'][1], max_depth, depth)\n    node['right'] = build_tree(splits['right'][0], splits['right'][1], max_depth, depth)\n    return node\ndef predict_one(sample, tree):\n    if tree in [0, 1]:\n        return tree\n    if sample[tree['feature']] < tree['threshold']:\n        if type(tree['left']) is dict:\n            return predict_one(sample, tree['left'])\n        else:\n            return tree['left']\n    elif type(tree['right']) is dict:\n        return predict_one(sample, tree['right'])\n    else:\n        return tree['right']\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = []\n    for sample in X_test:\n        predictions.append(predict_one(sample, tree))\n    return predictions"}
{"task_id": 184, "completion_id": 2, "solution": "import numpy as np\ndef gini(y):\n    \"\"\" Calculate Gini impurity \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / y.size\n    return 1 - np.sum(np.square(p))\ndef gini_gain(y_left, y_right):\n    \"\"\" Calculate Gini gain \"\"\"\n    n_total = y_left.size + y_right.size\n    return gini(np.concatenate([y_left, y_right])) - (y_left.size * gini(y_left) + y_right.size * gini(y_right)) / n_total\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None, depth=0):\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    if np.all(y_train == y_train[0]):\n        return y_train[0]\n    if max_depth is not None and depth >= max_depth:\n        (values, counts) = np.unique(y_train, return_counts=True)\n        return values[np.argmax(counts)]\n    gini_initial = gini(y_train)\n    (best_gain, best_feature, best_threshold, best_y_left, best_y_right) = (0, 0, 0, None, None)\n    for feature in range(X_train.shape[1]):\n        x = X_train[:, feature]\n        sorted_indices = np.argsort(x)\n        (x, y) = (x[sorted_indices], y_train[sorted_indices])\n        for i in range(1, y.size):\n            gain = gini_gain(y[:i], y[i:])\n            if gain > best_gain:\n                (best_gain, best_feature, best_threshold, best_y_left, best_y_right) = (gain, feature, x[i], y[:i], y[i:])\n    if best_gain < gini_initial:\n        (values, counts) = np.unique(y_train, return_counts=True)\n        return values[np.argmax(counts)]\n    indices_left = X_train[:, best_feature] <= best_threshold\n    (X_train_left, y_train_left, X_train_right, y_train_right) = (X_train[indices_left], best_y_left, X_train[~indices_left], best_y_right)\n    if y_train_left.size == 0 or y_train_right.size == 0:\n        (values, counts) = np.unique(y_train, return_counts=True)\n        return values[np.argmax(counts)]\n    return [decision_tree_predict(X_train_left, y_train_left, X_test, max_depth, depth + 1), decision_tree_predict(X_train_right, y_train_right, X_test, max_depth, depth + 1)]"}
{"task_id": 184, "completion_id": 3, "solution": "import numpy as np\ndef gini_impurity(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    return 1 - np.sum(np.square(p))\ndef split_data(X, y, feature, threshold):\n    left_mask = X[:, feature] < threshold\n    return ((X[left_mask], y[left_mask]), (X[~left_mask], y[~left_mask]))\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    (best_feature, best_threshold) = (None, None)\n    for feature in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature])\n        (sorted_X, sorted_y) = (X[sorted_indices], y[sorted_indices])\n        for i in range(1, len(y)):\n            if sorted_X[i, feature] == sorted_X[i - 1, feature]:\n                continue\n            ((X_left, y_left), (_X_right, _y_right)) = split_data(sorted_X, sorted_y, feature, sorted_X[i, feature])\n            gain = gini_impurity(y) - (len(y_left) * gini_impurity(y_left) + len(_y_right) * gini_impurity(_y_right)) / len(y)\n            if gain > best_gain:\n                best_gain = gain\n                (best_feature, best_threshold) = (feature, (sorted_X[i, feature] + sorted_X[i - 1, feature]) / 2)\n    return (best_feature, best_threshold)\nclass DecisionTree:\n\n    def __init__(self, max_depth=None):\n        self.max_depth = max_depth\n        self.tree_ = None\n\n    def fit(self, X, y, depth=0):\n        if len(np.unique(y)) == 1 or (self.max_depth is not None and depth >= self.max_depth):\n            return np.unique(y)[np.argmax(np.unique(y, return_counts=True)[1])]\n        (feature, threshold) = find_best_split(X, y)\n        if feature is None:\n            return np.unique(y)[np.argmax(np.unique(y, return_counts=True)[1])]\n        ((X_left, y_left), (X_right, y_right)) = split_data(X, y, feature, threshold)\n        if len(X_left) == 0 or len(X_right) == 0:\n            return np.unique(y)[np.argmax(np.unique(y, return_counts=True)[1])]\n        return {'feature': feature, 'threshold': threshold, 'left': self.fit(X_left, y_left, depth + 1), 'right': self.fit(X_right, y_right, depth + 1)}\n\n    def predict(self, X, tree=None):\n        if tree is None:\n            tree = self.tree_\n        if isinstance(tree, dict):\n            if X[tree['feature']] < tree['threshold']:\n                return self.predict(X, tree['left'])\n            else:\n                return self.predict(X, tree['right'])\n        else:\n            return tree\n\n    def predict_multi(self, X):\n        return [self.predict(x) for x in X]\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = DecisionTree(max_depth=max_depth)\n    tree.tree_ = tree.fit(X_train, y_train)\n    return tree.predict_multi(X_test)"}
{"task_id": 184, "completion_id": 4, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\ndef calculate_gini_gain(parent, left, right, num_left, num_right, num_total):\n    p_left = num_left / num_total\n    p_right = num_right / num_total\n    gain = parent - p_left * left - p_right * right\n    return gain\ndef build_tree(X, y, depth=0, max_depth=None):\n    num_samples_per_class = [np.sum(y == i) for i in range(6)]\n    predicted_class = np.argmax(num_samples_per_class)\n    node = Node(predicted_class=predicted_class)\n    if len(y) <= 1 or depth == max_depth:\n        return node\n    num_parent = [np.sum(y == i) for i in range(6)]\n    best_gini = 1.0 - sum(((n / y.size) ** 2 for n in num_parent))\n    for idx in range(X.shape[1]):\n        (threshold, left_inx, right_inx) = partition(X[:, idx], y)\n        num_left = len(left_inx)\n        num_right = len(right_inx)\n        if num_left == 0 or num_right == 0:\n            continue\n        (left, right) = (y[left_inx], y[right_inx])\n        gini_left = 1.0 - sum(((np.sum(left == i) / num_left) ** 2 for i in range(6)))\n        gini_right = 1.0 - sum(((np.sum(right == i) / num_right) ** 2 for i in range(6)))\n        gain = calculate_gini_gain(best_gini, gini_left, gini_right, num_left, num_right, y.size)\n        if gain > best_gini:\n            best_gini = gain\n            node.feature_index = idx\n            node.threshold = threshold\n            node.left = build_tree(X[left_inx, :], y[left_inx], depth + 1, max_depth)\n            node.right = build_tree(X[right_inx, :], y[right_inx], depth + 1, max_depth)\n    return node\ndef partition(a, y):\n    a_sorted = np.sort(a)\n    indexes = np.argsort(a)\n    y_sorted = y[indexes]\n    thresholds = [a_sorted[0] - 1] + [(a_sorted[i] + a_sorted[i + 1]) / 2 for i in range(len(a) - 1)] + [a_sorted[-1] + 1]\n    best_gini = 10000\n    for t in thresholds:\n        left_inx = a <= t\n        right_inx = a > t\n        (left, right) = (y_sorted[left_inx], y_sorted[right_inx])\n        num_left = len(left)\n        num_right = len(right)\n        left_gini = 1.0 - sum(((np.sum(left == i) / num_left) ** 2 for i in range(6)))\n        right_gini = 1.0 - sum(((np.sum(right == i) / num_right) ** 2 for i in range(6)))\n        if num_left == 0 or num_right == 0:\n            continue\n        gain = left_gini * num_left / len(y) + right_gini * num_right / len(y)\n        if gain < best_gini:\n            best_gini = gain\n            threshold = t\n    return (threshold, y_sorted <= threshold, y_sorted > threshold)\ndef predict_sample(x, tree):\n    if tree.predicted_class is not None:\n        return tree.predicted_class\n    if x[tree.feature_index] <= tree.threshold:\n        return predict_sample(x, tree.left)\n    else:\n        return predict_sample(x, tree.right)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict_sample(x, tree) for x in X_test]"}
{"task_id": 184, "completion_id": 5, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf_node(self):\n        return self.value is not None\nclass DecisionTree:\n\n    def __init__(self, min_samples_split=2, max_depth=100, n_feats=None):\n        self.min_samples_split = min_samples_split\n        self.max_depth = max_depth\n        self.n_feats = n_feats\n        self.root = None\n\n    @staticmethod\n    def _entropy(y):\n        hist = np.bincount(y)\n        ps = hist / len(y)\n        return -np.sum([p * np.log2(p) for p in ps if p > 0])\n\n    def _gini_impurity(self, y):\n        hist = np.bincount(y)\n        ps = hist / len(y)\n        return np.sum([p * (1 - p) for p in ps if p > 0])\n\n    def _information_gain(self, X_column, y, threshold):\n        parent_entropy = self._gini_impurity(y)\n        (left_indices, right_indices) = (X_column < threshold, X_column >= threshold)\n        if len(np.unique(y[left_indices])) == 1 and len(np.unique(y[right_indices])) == 1:\n            return 0\n        (n_l, n_r) = (np.sum(left_indices), np.sum(right_indices))\n        (e_l, e_r) = (self._gini_impurity(y[left_indices]), self._gini_impurity(y[right_indices]))\n        child_entropy = n_l / len(y) * e_l + n_r / len(y) * e_r\n        ig = parent_entropy - child_entropy\n        return ig\n\n    def _best_split(self, X, y):\n        (best_idx, best_thr) = (None, None)\n        best_gain = -1\n        for idx in range(X.shape[1]):\n            X_column = X[:, idx]\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                gain = self._information_gain(X_column, y, threshold)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_idx = idx\n                    best_thr = threshold\n        return (best_idx, best_thr)\n\n    def _grow_tree(self, X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        n_labels = len(np.unique(y))\n        if depth >= self.max_depth or n_labels == 1 or n_samples < self.min_samples_split:\n            leaf_value = np.argmax(np.bincount(y))\n            return Node(value=leaf_value)\n        feat_idxs = np.random.choice(n_features, self.n_feats, replace=False)\n        (best_feat, best_thr) = self._best_split(X, y)\n        if best_feat is None:\n            leaf_value = np.argmax(np.bincount(y))\n            return Node(value=leaf_value)\n        (left_idxs, right_idxs) = (X[:, best_feat] < best_thr, X[:, best_feat] >= best_thr)\n        left = self._grow_tree(X[left_idxs], y[left_idxs], depth + 1)\n        right = self._grow_tree(X[right_idxs], y[right_idxs], depth + 1)\n        return Node(best_feat, best_thr, left, right)\n\n    def _predict(self, inputs):\n        node = self.root\n        while True:\n            if node.is_leaf_node():\n                return node.value\n            if inputs[node.feature] < node.threshold:\n                node = node.left\n            else:\n                node = node.right\n\n    def train(self, X, y):\n        self.n_feats = X.shape[1] if not self.n_feats else min(self.n_feats, X.shape[1])\n        self.root = self._grow_tree(X, y)\n\n    def predict(self, X):\n        return np.array([self._predict(xi) for xi in X])\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    clf = DecisionTree(max_depth=max_depth)\n    clf.train(X_train, y_train)\n    return clf.predict(X_test).tolist()"}
{"task_id": 184, "completion_id": 6, "solution": "import numpy as np\ndef calculate_gini(groups, classes):\n    n_instances = float(sum([len(group) for group in groups]))\n    gini = 0.0\n    for group in groups:\n        size = float(len(group))\n        if size == 0:\n            continue\n        score = 0.0\n        for class_val in classes:\n            p = [row[-1] for row in group].count(class_val) / size\n            score += p * p\n        gini += (1.0 - score) * (size / n_instances)\n    return gini\ndef split_node(index, value, dataset):\n    (left, right) = (list(), list())\n    for row in dataset:\n        if row[index] < value:\n            left.append(row)\n        else:\n            right.append(row)\n    return (left, right)\ndef get_split(dataset):\n    class_values = list(set((row[-1] for row in dataset)))\n    (b_index, b_value, b_score, b_groups) = (999, 999, 999, None)\n    for index in range(len(dataset[0]) - 1):\n        for row in dataset:\n            groups = split_node(index, row[index], dataset)\n            gini = calculate_gini(groups, class_values)\n            if gini < b_score:\n                (b_index, b_value, b_score, b_groups) = (index, row[index], gini, groups)\n    return {'index': b_index, 'value': b_value, 'groups': b_groups}\ndef to_terminal(group):\n    outcomes = [row[-1] for row in group]\n    return max(set(outcomes), key=outcomes.count)\ndef construct_tree(node, max_depth, min_size, depth):\n    (left, right) = node['groups']\n    del node['groups']\n    if not left or not right:\n        node['left'] = node['right'] = to_terminal(left + right)\n        return\n    if depth >= max_depth:\n        (node['left'], node['right']) = (to_terminal(left), to_terminal(right))\n        return\n    if len(left) <= min_size:\n        node['left'] = to_terminal(left)\n    else:\n        node['left'] = get_split(left)\n        construct_tree(node['left'], max_depth, min_size, depth + 1)\n    if len(right) <= min_size:\n        node['right'] = to_terminal(right)\n    else:\n        node['right'] = get_split(right)\n        construct_tree(node['right'], max_depth, min_size, depth + 1)\ndef build_tree(train, max_depth, min_size):\n    root = get_split(train)\n    construct_tree(root, max_depth, min_size, 1)\n    return root\ndef predict(node, row):\n    if row[node['index']] < node['value']:\n        if isinstance(node['left'], dict):\n            return predict(node['left'], row)\n        else:\n            return node['left']\n    elif isinstance(node['right'], dict):\n        return predict(node['right'], row)\n    else:\n        return node['right']\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    train = np.column_stack((X_train, y_train))\n    tree = build_tree(train.tolist(), max_depth, 1)\n    predictions = list()\n    for row in X_test:\n        prediction = predict(tree, row)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf_node(self) -> bool:\n        return self.value is not None\nclass DecisionTree:\n\n    def __init__(self, min_samples_split=2, max_depth=100, n_feats=None):\n        self.min_samples_split = min_samples_split\n        self.max_depth = max_depth\n        self.n_feats = n_feats\n        self.root = None\n\n    @staticmethod\n    def _gini_impurity(y):\n        \"\"\"\n        Calculate gini impurity for the labels array \n        \"\"\"\n        m = y.size\n        return 1.0 - sum(((np.sum(y == c) / m) ** 2 for c in range(np.max(y) + 1)))\n\n    def _gain(self, X_column, split_thresh, y):\n        \"\"\"\n        Calculate information gain from the split\n        \"\"\"\n        parent_gini = self._gini_impurity(y)\n        (left_child_idxs, right_child_idxs) = (X_column < split_thresh, X_column >= split_thresh)\n        if np.all(left_child_idxs) or np.all(right_child_idxs):\n            return (0, None)\n        (n_left, n_right) = (np.sum(left_child_idxs), np.sum(right_child_idxs))\n        n_total = n_left + n_right\n        left_gini = self._gini_impurity(y[left_child_idxs])\n        right_gini = self._gini_impurity(y[right_child_idxs])\n        children_gini = n_left / n_total * left_gini + n_right / n_total * right_gini\n        gini_gain = parent_gini - children_gini\n        return (gini_gain, (np.argwhere(left_child_idxs).flatten(), np.argwhere(right_child_idxs).flatten()))\n\n    def _best_split(self, X, y):\n        (best_idx, best_thr, best_gain) = (None, None, -1)\n        best_child_idxs = None\n        for idx in range(X.shape[1]):\n            X_column = X[:, idx]\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                (gain, child_idxs) = self._gain(X_column, threshold, y)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_idx = idx\n                    best_thr = threshold\n                    best_child_idxs = child_idxs\n        return (best_idx, best_thr, best_child_idxs)\n\n    def _build_tree(self, X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        n_labels = np.max(y) + 1\n        if depth >= self.max_depth or n_labels == 1 or n_samples < self.min_samples_split:\n            leaf_value = np.max([(col, np.sum(y == col)) for col in range(n_labels)], axis=1)[0]\n            return Node(value=leaf_value)\n        feat_idxs = np.random.choice(n_features, n_features, replace=False)\n        (best_feat, best_thr, best_child_idxs) = self._best_split(X, y)\n        if best_feat is None:\n            leaf_value = np.max([(col, np.sum(y == col)) for col in range(n_labels)], axis=1)[0]\n            return Node(value=leaf_value)\n        (left_child_idxs, right_child_idxs) = best_child_idxs\n        left_child = self._build_tree(X[left_child_idxs], y[left_child_idxs], depth + 1)\n        right_child = self._build_tree(X[right_child_idxs], y[right_child_idxs], depth + 1)\n        return Node(best_feat, best_thr, left_child, right_child)\n\n    def fit(self, X, y):\n        \"\"\"\n        function to train the tree\n        \"\"\"\n        self.n_feats = X.shape[1]\n        if self.max_depth is None:\n            self.max_depth = int(np.ceil(np.log2(X.shape[0])))\n        self.root = self._build_tree(X, y)\n\n    def _predict(self, x, node):\n        if node.is_leaf_node():\n            return node.value\n        if x[node.feature] < node.threshold:\n            return self._predict(x, node.left)\n        return self._predict(x, node.right)\n\n    def predict(self, X):\n        \"\"\"\n        function to make predictions\n        \"\"\"\n        return [self._predict(xi, self.root) for xi in X]\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    tree = DecisionTree(max_depth=max_depth)\n    tree.fit(X_train, y_train)\n    return tree.predict(X_test)"}
{"task_id": 184, "completion_id": 8, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\ndef calculate_gini_impurity(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - sum([p ** 2 for p in probabilities])\ndef calculate_gini_gain(y, y_left, y_right):\n    gini_before = calculate_gini_impurity(y)\n    gini_left = calculate_gini_impurity(y_left)\n    gini_right = calculate_gini_impurity(y_right)\n    total = len(y_left) + len(y_right)\n    gini_after = len(y_left) / total * gini_left + len(y_right) / total * gini_right\n    return gini_before - gini_after\ndef split_data(X, y, feature_index, threshold):\n    left = X[:, feature_index] < threshold\n    return (y[left], y[~left])\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    (best_feature, best_threshold) = (None, None)\n    for feature_index in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            (y_left, y_right) = split_data(X, y, feature_index, threshold)\n            gain = calculate_gini_gain(y, y_left, y_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    return (best_feature, best_threshold)\ndef build_tree(X, y, depth=0, max_depth=None):\n    (_, counts) = np.unique(y, return_counts=True)\n    predicted_class = np.argmax(counts)\n    if len(set(y)) == 1:\n        return Node(predicted_class)\n    if max_depth is not None and depth >= max_depth:\n        return Node(predicted_class)\n    (feature_index, threshold) = find_best_split(X, y)\n    if feature_index is None:\n        return Node(predicted_class)\n    (X_left, y_left, X_right, y_right) = split_data(X, y, feature_index, threshold)\n    if len(y_left) == 0 or len(y_right) == 0:\n        return Node(predicted_class)\n    node = Node(predicted_class)\n    node.feature_index = feature_index\n    node.threshold = threshold\n    node.left = build_tree(X_left, y_left, depth + 1, max_depth)\n    node.right = build_tree(X_right, y_right, depth + 1, max_depth)\n    return node\ndef predict(X, tree):\n    predicted_classes = []\n    for sample in X:\n        node = tree\n        while node.left:\n            if sample[node.feature_index] < node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        predicted_classes.append(node.predicted_class)\n    return predicted_classes\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return predict(X_test, tree)"}
{"task_id": 184, "completion_id": 9, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\ndef calculate_gini_index(split):\n    (_, counts) = np.unique(split, return_counts=True)\n    proportions = counts / split.shape[0]\n    gini_index = 1.0 - np.sum(np.square(proportions))\n    return gini_index\ndef find_best_split(X, y):\n    feature_count = X.shape[1]\n    best_gini_index = 9999\n    (best_feature_index, best_threshold) = (None, None)\n    for feature_index in range(feature_count):\n        sorted_index = np.argsort(X[:, feature_index])\n        (X_sorted, y_sorted) = (X[sorted_index], y[sorted_index])\n        splits = np.c_[y_sorted, X_sorted[:, feature_index]]\n        thresholds = np.unique(splits[:, 1])\n        for threshold in thresholds:\n            left_split = y_sorted[splits[:, 1] <= threshold]\n            right_split = y_sorted[splits[:, 1] > threshold]\n            gini_index_left = calculate_gini_index(left_split)\n            gini_index_right = calculate_gini_index(right_split)\n            gini_index = (len(left_split) * gini_index_left + len(right_split) * gini_index_right) / len(y_sorted)\n            if gini_index < best_gini_index:\n                best_gini_index = gini_index\n                (best_feature_index, best_threshold) = (feature_index, threshold)\n    return (best_feature_index, best_threshold, best_gini_index)\ndef build_tree(X, y, max_depth=None, depth=0):\n    (classes, counts) = np.unique(y, return_counts=True)\n    predicted_class = classes[np.argmax(counts)]\n    node = Node(predicted_class)\n    if depth == max_depth or len(np.unique(y)) == 1:\n        return node\n    (feature_index, threshold, gini_index) = find_best_split(X, y)\n    if gini_index == 0 or feature_index is None:\n        return node\n    (node.feature_index, node.threshold) = (feature_index, threshold)\n    node.left = build_tree(X[X[:, feature_index] <= threshold], y[X[:, feature_index] <= threshold], max_depth, depth + 1)\n    node.right = build_tree(X[X[:, feature_index] > threshold], y[X[:, feature_index] > threshold], max_depth, depth + 1)\n    return node\ndef predict_single(x, tree):\n    if tree.predicted_class is not None:\n        return tree.predicted_class\n    if x[tree.feature_index] <= tree.threshold:\n        return predict_single(x, tree.left)\n    else:\n        return predict_single(x, tree.right)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = [predict_single(sample, tree) for sample in X_test]\n    return predictions"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef compute_gini(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    probs = counts / len(y)\n    return 1 - np.sum(np.square(probs))\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    G_whole_dataset = compute_gini(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = G_whole_dataset\n    for j in range(X.shape[1]):\n        unique_values = np.unique(X[:, j])\n        for v in unique_values:\n            left = X[:, j] <= v\n            right = X[:, j] > v\n            if np.sum(left) == 0 or np.sum(right) == 0:\n                continue\n            G_split = (np.sum(left) * compute_gini(y[left]) + np.sum(right) * compute_gini(y[right])) / len(y)\n            if G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n            elif np.abs(G_split - best_gini) < 1e-12 and j < best_feature_index:\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n            elif np.abs(G_split - best_gini) < 1e-12 and j == best_feature_index and (v < best_threshold_value):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4)) if best_feature_index != -1 else (-1, None, round(G_whole_dataset, 4))"}
{"task_id": 190, "completion_id": 1, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n\n    def calculate_gini(y):\n        proportions = [np.sum(y == i) / len(y) for i in range(np.max(y) + 1)]\n        gini = 1 - np.sum([p ** 2 for p in proportions])\n        return gini\n    (X, y) = (np.array(X), np.array(y))\n    (n_samples, n_features) = X.shape\n    G_whole_dataset = calculate_gini(y)\n    (best_feature_index, best_threshold_value, best_gini) = (-1, None, G_whole_dataset)\n    uniques = np.unique(y)\n    if len(uniques) == 1:\n        return (-1, None, np.round(G_whole_dataset, 4))\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_data = X[sorted_indices]\n        sorted_labels = y[sorted_indices]\n        thresholds = (sorted_data[1:, feature_index] + sorted_data[:-1, feature_index]) / 2\n        for threshold in thresholds:\n            left = sorted_labels[sorted_data[:, feature_index] <= threshold]\n            right = sorted_labels[sorted_data[:, feature_index] > threshold]\n            (n_left, n_right) = (left.shape[0], right.shape[0])\n            n_total = n_left + n_right\n            if n_left == 0 or n_right == 0:\n                continue\n            G_split = n_left / n_total * calculate_gini(left) + n_right / n_total * calculate_gini(right)\n            if G_split < best_gini or (abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and (threshold < best_threshold_value)):\n                (best_feature_index, best_threshold_value, best_gini) = (feature_index, threshold, G_split)\n    return (best_feature_index, best_threshold_value, np.round(best_gini, 4))"}
{"task_id": 190, "completion_id": 2, "solution": "import numpy as np\ndef best_gini_split(X, y):\n\n    def gini(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        prob = counts / len(y)\n        return 1 - np.sum(np.square(prob))\n\n    def split_gini(col, threshold):\n        left = y[X[:, col] <= threshold]\n        right = y[X[:, col] > threshold]\n        if len(left) == 0 or len(right) == 0:\n            return np.inf\n        return len(left) / len(y) * gini(left) + len(right) / len(y) * gini(right)\n    X = np.array(X)\n    y = np.array(y)\n    (best_gini, best_feature, best_threshold) = (np.inf, -1, None)\n    for col in range(X.shape[1]):\n        thresholds = np.unique(X[:, col])\n        for threshold in thresholds:\n            g = split_gini(col, threshold)\n            if g < best_gini or (np.abs(g - best_gini) < 1e-12 and col < best_feature) or (np.abs(best_feature - col) < 1e-12 and threshold < best_threshold):\n                (best_gini, best_feature, best_threshold) = (g, col, threshold)\n    if best_feature != -1:\n        return (best_feature, best_threshold, round(best_gini, 4))\n    else:\n        G_whole_dataset = gini(y)\n        return (-1, None, round(G_whole_dataset, 4))"}
{"task_id": 190, "completion_id": 3, "solution": "import numpy as np\ndef best_gini_split(X, y):\n\n    def gini(counts):\n        total = np.sum(counts)\n        return 1 - np.sum((counts / total) ** 2)\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    classes = np.unique(y)\n    best_gini = 1.0\n    best_feature = -1\n    best_threshold = None\n    gini_whole = gini(np.histogram(y, bins=classes)[0])\n    for feature in range(n_features):\n        unique_values = np.unique(X[:, feature])\n        for threshold in unique_values:\n            labels_left = y[X[:, feature] <= threshold]\n            labels_right = y[X[:, feature] > threshold]\n            if len(labels_left) == 0 or len(labels_right) == 0:\n                continue\n            gini_left = gini(np.histogram(labels_left, bins=classes)[0])\n            gini_right = gini(np.histogram(labels_right, bins=classes)[0])\n            gini_split = len(labels_left) / n_samples * gini_left + len(labels_right) / n_samples * gini_right\n            if gini_split < best_gini or (np.isclose(gini_split, best_gini) and (feature < best_feature or (feature == best_feature and threshold < best_threshold))):\n                best_gini = gini_split\n                best_feature = feature\n                best_threshold = threshold\n    if best_feature == -1:\n        return (-1, None, round(gini_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 4, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n\n    def gini_impurity(y):\n        \"\"\"Calculate Gini impurity as 1 - sum of squared probabilities of each class.\"\"\"\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / y.shape[0]\n        impurity = 1 - np.sum(np.square(probabilities))\n        return round(impurity, 4)\n    X = np.array(X)\n    y = np.array(y)\n    (n_total, n_features) = X.shape\n    G_whole = gini_impurity(y)\n    (best_feature_idx, best_threshold, best_gini) = (0, X[0, 0], np.inf)\n    for j in range(n_features):\n        feature_values = X[:, j]\n        indices_sorted = np.argsort(feature_values)\n        sorted_values = feature_values[indices_sorted]\n        sorted_y = y[indices_sorted]\n        for i in range(1, n_total):\n            (v1, v2) = (sorted_values[i - 1], sorted_values[i])\n            if v1 == v2:\n                continue\n            v = (v1 + v2) / 2\n            left_mask = feature_values <= v\n            right_mask = feature_values > v\n            left_y = sorted_y[left_mask]\n            right_y = sorted_y[right_mask]\n            if left_y.shape[0] == 0 or right_y.shape[0] == 0:\n                continue\n            (n_left, n_right) = (left_y.shape[0], right_y.shape[0])\n            (G_left, G_right) = (gini_impurity(left_y), gini_impurity(right_y))\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and (j < best_feature_idx or (j == best_feature_idx and v < best_threshold))):\n                (best_feature_idx, best_threshold, best_gini) = (j, v, G_split)\n    if best_gini < G_whole:\n        return (best_feature_idx, round(best_threshold, 4), round(best_gini, 4))\n    else:\n        return (-1, None, round(G_whole, 4))"}
{"task_id": 190, "completion_id": 5, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    n_total = len(y)\n    n_classes = len(np.unique(y))\n\n    def compute_gini(y):\n        counts = np.bincount(y)\n        probs = counts / n_total\n        return 1 - np.sum(np.square(probs))\n    best_gini = compute_gini(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold_value in unique_values:\n            left_indices = X[:, feature_index] <= threshold_value\n            right_indices = X[:, feature_index] > threshold_value\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            left = y[left_indices]\n            right = y[right_indices]\n            n_left = len(left)\n            n_right = len(right)\n            gini_split = n_left / n_total * compute_gini(left) + n_right / n_total * compute_gini(right)\n            if gini_split < best_gini - 1e-12 or (abs(gini_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (abs(gini_split - best_gini) < 1e-12 and feature_index == best_feature_index and (threshold_value < best_threshold_value)):\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 6, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the weighted Gini impurity of a node.\"\"\"\n    n_total = len(y)\n    (_, y_counts) = np.unique(y, return_counts=True)\n    p = y_counts / n_total\n    gini = 1.0 - np.sum(np.square(p))\n    return gini\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    best_gini = np.inf\n    best_feature_index = None\n    best_threshold_value = None\n    gini_whole_dataset = gini_impurity(y)\n    n_total = len(y)\n    for j in range(X.shape[1]):\n        for v in np.unique(X[:, j]):\n            left = np.where(X[:, j] <= v)[0]\n            right = np.where(X[:, j] > v)[0]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            n_left = len(left)\n            n_right = len(right)\n            G_split = n_left / n_total * gini_impurity(y[left]) + n_right / n_total * gini_impurity(y[right])\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n    if best_feature_index is None:\n        return (-1, None, round(gini_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\nX = np.array([[1.0, 5.0], [2.0, 3.0], [3.0, 3.0], [4.0, 2.5], [5.0, 2.0]])\ny = np.array([1, 0, 1, 0, 1])"}
{"task_id": 190, "completion_id": 7, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"\n    Compute Gini Impurity of array y.\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    gini = 1 - np.sum(np.square(probabilities))\n    return gini\ndef split(X, y, feature_index, threshold):\n    left_indices = X[:, feature_index] <= threshold\n    right_indices = X[:, feature_index] > threshold\n    left_y = y[left_indices]\n    right_y = y[right_indices]\n    n_total = y.size\n    if left_y.size == 0 or right_y.size == 0:\n        return np.inf\n    gini_left = gini_impurity(left_y)\n    gini_right = gini_impurity(right_y)\n    gini_split = left_y.size / n_total * gini_left + right_y.size / n_total * gini_right\n    return gini_split\ndef best_gini_split(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold = None\n    gini_whole_dataset = gini_impurity(y)\n    for feature_index in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature_index]):\n            gini = split(X, y, feature_index, threshold)\n            if gini < best_gini:\n                best_gini = gini\n                best_feature_index = feature_index\n                best_threshold = threshold\n            elif np.abs(gini - best_gini) < 1e-12:\n                if feature_index < best_feature_index:\n                    best_gini = gini\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold:\n                    best_gini = gini\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n    if best_gini == np.inf:\n        return (-1, None, np.round(gini_whole_dataset, 4))\n    return (best_feature_index, best_threshold, np.round(best_gini, 4))"}
{"task_id": 190, "completion_id": 8, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def gini(y):\n        \"\"\"Calculate Gini impurity of a vector y.\"\"\"\n        (_, counts) = np.unique(y, return_counts=True)\n        probs = counts / counts.sum()\n        return 1 - np.sum(probs ** 2)\n    G_whole_dataset = gini(y)\n    n_total = X.shape[0]\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = np.round(G_whole_dataset, 4)\n    for feature_index in range(X.shape[1]):\n        possible_thresholds = np.unique(X[:, feature_index])\n        for threshold in possible_thresholds:\n            left_labels = y[X[:, feature_index] <= threshold]\n            right_labels = y[X[:, feature_index] > threshold]\n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            (n_left, n_right) = (len(left_labels), len(right_labels))\n            G_split = (n_left * gini(left_labels) + n_right * gini(right_labels)) / n_total\n            if G_split < best_gini:\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n                best_gini = np.round(G_split, 4)\n            elif G_split == best_gini:\n                if feature_index < best_feature_index:\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_threshold_value = threshold\n    if best_feature_index == -1:\n        return (best_feature_index, None, best_gini)\n    else:\n        return (best_feature_index, best_threshold_value, best_gini)"}
{"task_id": 190, "completion_id": 9, "solution": "import numpy as np\ndef best_gini_split(X, y):\n\n    def gini_impurity(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return 1 - np.sum(np.square(p))\n\n    def split_gini(X, y, feature_index, threshold):\n        left_indices = X[:, feature_index] <= threshold\n        right_indices = ~left_indices\n        if np.any(left_indices) and np.any(right_indices):\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            split_gini = np.sum(left_indices) / len(y) * left_gini + np.sum(right_indices) / len(y) * right_gini\n            return split_gini\n        else:\n            return np.inf\n    unique_y = np.unique(y)\n    if len(unique_y) == 1:\n        return (-1, None, round(gini_impurity(y), 4))\n    (X, y) = (np.array(X), np.array(y))\n    (best_feature_index, best_threshold, best_gini) = (-1, None, np.inf)\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            split_gini = split_gini(X, y, feature_index, threshold)\n            if split_gini < best_gini:\n                (best_feature_index, best_threshold, best_gini) = (feature_index, threshold, split_gini)\n            elif split_gini == best_gini and (feature_index < best_feature_index or (feature_index == best_feature_index and threshold < best_threshold)):\n                (best_feature_index, best_threshold, best_gini) = (feature_index, threshold, split_gini)\n    return (best_feature_index, best_threshold, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numbers\nfrom typing import Callable\nimport numpy as np\ndef metric(name: str) -> Callable[[list, list], float | int]:\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def check_valid(vector):\n        \"\"\"Check if a vector is a non-empty one-dimensional iterable.\"\"\"\n        if isinstance(vector, (list, tuple, np.ndarray)):\n            if len(vector) == 0:\n                return False\n            for item in vector:\n                if not isinstance(item, numbers.Number):\n                    return False\n            return True\n        return False\n\n    def euclidean(x, y):\n        \"\"\"Calculate Euclidean distance.\"\"\"\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def manhattan(x, y):\n        \"\"\"Calculate Manhattan distance.\"\"\"\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        \"\"\"Calculate Chebyshev distance.\"\"\"\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        \"\"\"Calculate cosine distance.\"\"\"\n        (x, y) = (np.array(x), np.array(y))\n        (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n        if norm_x == 0.0 or norm_y == 0.0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    def invalid():\n        \"\"\"Return -1 for invalid inputs.\"\"\"\n        return -1\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    return metrics.get(name, invalid)"}
{"task_id": 191, "completion_id": 1, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Distance function factory.\"\"\"\n    measurements = {'euclidean': lambda x, y: np.sqrt(np.sum((x - y) ** 2)), 'manhattan': lambda x, y: np.sum(abs(x - y)), 'chebyshev': lambda x, y: np.max(abs(x - y)), 'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n    if name not in measurements.keys():\n        return -1\n\n    def d(*args):\n        if len(args) != 2:\n            return -1\n        (x, y) = args\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        except ValueError:\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or (not x.size) or (not y.size):\n            return -1\n        elif name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return -1\n        else:\n            res = measurements[name](x, y)\n            return np.round(res, 4)\n    return d"}
{"task_id": 191, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Iterable\ndef safe_cast(val, to_type, default=None):\n    try:\n        return to_type(val)\n    except (ValueError, TypeError):\n        return default\ndef metric(name: str):\n\n    def euclidean(x, y):\n        return round(np.linalg.norm(np.array(x) - np.array(y)), 4)\n\n    def manhattan(x, y):\n        return round(sum((abs(x_i - y_i) for (x_i, y_i) in zip(x, y))), 4)\n\n    def chebyshev(x, y):\n        return round(max((abs(x_i - y_i) for (x_i, y_i) in zip(x, y))), 4)\n\n    def cosine(x, y):\n        (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        try:\n            (x, y) = map(list, [np.array(x).flatten(), np.array(y).flatten()])\n        except Exception:\n            return -1\n        if len(x) != len(y):\n            return -1\n        if any((safe_cast(xi, float) is None or safe_cast(yi, float) is None for (xi, yi) in zip(x, y))):\n            return -1\n        return metrics[name](x, y) if name in metrics else -1\n    return d"}
{"task_id": 191, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Iterable\ndef metric(name: str):\n\n    def valid_input(v, name):\n        try:\n            v = np.array(v, dtype=float)\n        except:\n            return False\n        if v.ndim != 1 or v.shape[0] == 0:\n            return False\n        if name == 'cosine' and np.linalg.norm(v) == 0:\n            return False\n        return True\n\n    def euclidean(x, y):\n        if not valid_input(x, name) or not valid_input(y, name) or x.shape != y.shape:\n            return -1\n        return round(np.linalg.norm(x - y), 4)\n\n    def manhattan(x, y):\n        if not valid_input(x, name) or not valid_input(y, name) or x.shape != y.shape:\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        if not valid_input(x, name) or not valid_input(y, name) or x.shape != y.shape:\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        if not valid_input(x, name) or not valid_input(y, name) or x.shape != y.shape:\n            return -1\n        return round(1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y)), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n\n        def invalid_metric(*args, **kwargs):\n            return -1\n        return invalid_metric\n    return metrics[name]"}
{"task_id": 191, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Iterable\nfrom collections.abc import Callable\ndef metric(name: str) -> Callable[[Iterable, Iterable], float | int]:\n\n    def euclidean(x: Iterable[float], y: Iterable[float]) -> float:\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n            if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape:\n                return -1\n        except (ValueError, TypeError):\n            return -1\n        return round(np.linalg.norm(x - y), 4)\n\n    def manhattan(x: Iterable[float], y: Iterable[float]) -> float:\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n            if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape:\n                return -1\n        except (ValueError, TypeError):\n            return -1\n        return round(np.linalg.norm(x - y, ord=1), 4)\n\n    def chebyshev(x: Iterable[float], y: Iterable[float]) -> float:\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n            if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape:\n                return -1\n        except (ValueError, TypeError):\n            return -1\n        return round(np.linalg.norm(x - y, np.inf), 4)\n\n    def cosine(x: Iterable[float], y: Iterable[float]) -> float:\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n            if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape or (np.linalg.norm(x) == 0) or (np.linalg.norm(y) == 0):\n                return -1\n        except (ValueError, TypeError):\n            return -1\n        return round(1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y)), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(*args) -> float | int:\n        return metrics.get(name, lambda *args: -1)(*args)\n    return d"}
{"task_id": 191, "completion_id": 5, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(np.array(x) - np.array(y))), 'chebyshev': lambda x, y: np.max(np.abs(np.array(x) - np.array(y))), 'cosine': lambda x, y: 1 - np.dot(np.array(x), np.array(y)) / (np.linalg.norm(np.array(x)) * np.linalg.norm(np.array(y)))}\n\n    def d(x, y):\n        if name not in supported_metrics:\n            return -1\n        try:\n            (x, y) = map(np.array, (x, y))\n            if not (x.ndim == y.ndim == 1 and len(x) == len(y) and (len(x) != 0)):\n                return -1\n            if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n                return -1\n        except:\n            return -1\n        else:\n            return round(supported_metrics[name](x, y), 4)\n    return d"}
{"task_id": 191, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Iterable\ndef metric(name: str):\n    metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'chebyshev': chebyshev_distance, 'cosine': cosine_distance}\n    if name not in metrics:\n        return lambda *args: -1\n    metric_func = metrics[name]\n\n    def d(*args):\n        try:\n            (x, y) = map(np.array, map(list, args))\n        except:\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or x.size == 0 or (y.size == 0) or (x.size != y.size):\n            return -1\n        if name == 'cosine':\n            (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n        return round(metric_func(x, y), 4)\n    return d\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\ndef manhattan_distance(x, y):\n    return np.sum(np.abs(x - y))\ndef chebyshev_distance(x, y):\n    return np.max(np.abs(x - y))\ndef cosine_distance(x, y):\n    return 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))"}
{"task_id": 191, "completion_id": 7, "solution": "import numpy as np\ndef metric(name: str):\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum(np.square(np.array(x, dtype=float) - np.array(y, dtype=float)))), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x, dtype=float) - np.array(y, dtype=float))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x, dtype=float) - np.array(y, dtype=float))), 4)\n\n    def cosine(x, y):\n        (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        (x_norm, y_norm) = (np.linalg.norm(x), np.linalg.norm(y))\n        if x_norm == y_norm == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (x_norm * y_norm), 4)\n    distances = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def distance(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        except ValueError:\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape or (len(x) == 0):\n            return -1\n        return distances.get(name, lambda *args: -1)(x, y)\n    return distance"}
{"task_id": 191, "completion_id": 8, "solution": "import numpy as np\ndef metric(name: str):\n\n    def euclidean(arr1, arr2):\n        return round(np.sqrt(np.sum(np.square(np.array(arr1) - np.array(arr2)))), 4)\n\n    def manhattan(arr1, arr2):\n        return round(np.sum(np.abs(np.array(arr1) - np.array(arr2))), 4)\n\n    def chebyshev(arr1, arr2):\n        return np.round(np.amax(np.abs(np.array(arr1) - np.array(arr2))), 4)\n\n    def cosine(arr1, arr2):\n        (vect1, vect2) = (np.array(arr1), np.array(arr2))\n        (norm1, norm2) = (np.linalg.norm(vect1), np.linalg.norm(vect2))\n        if norm1 == 0 or norm2 == 0:\n            return -1\n        return np.round(1 - np.dot(vect1, vect2) / (norm1 * norm2), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return -1\n\n    def d(*args):\n        for arg in args:\n            if len(arg) != len(args[0]) or not all((isinstance(i, (int, float)) for i in arg)):\n                return -1\n        return metrics[name](*args)\n    return d"}
{"task_id": 191, "completion_id": 9, "solution": "import numpy as np\ndef validate(u, v):\n    if not isinstance(u, (list, tuple, np.ndarray)) or not isinstance(v, (list, tuple, np.ndarray)):\n        return False\n    (u, v) = (np.array(u, dtype=float), np.array(v, dtype=float))\n    if u.ndim != 1 or v.ndim != 1 or u.size == 0 or (v.size == 0) or (u.size != v.size):\n        return False\n    if name == 'cosine' and (np.linalg.norm(u) == 0 or np.linalg.norm(v) == 0):\n        return False\n    return True\ndef euclidean(u, v):\n    return round(np.sqrt(np.sum((u - v) ** 2)), 4)\ndef manhattan(u, v):\n    return round(np.sum(np.abs(u - v)), 4)\ndef chebyshev(u, v):\n    return round(np.max(np.abs(u - v)), 4)\ndef cosine(u, v):\n    return round(1 - np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v)), 4)\ndef metric(name: str):\n    metrics_dict = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(u, v):\n        if name not in metrics_dict or not validate(u, v):\n            return -1\n        return metrics_dict[name](u, v)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any, List, Tuple, Union\nimport itertools\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    if not md_action:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            action_dim = 1\n            n_actions_per_dim.append(env.action_space.n)\n        action_ids = list(range(env.action_space.n)) if env.action_space.n > 0 else None\n    else:\n        action_ids = list(itertools.product(*[range(space.n) for space in env.action_space.spaces])) if cont_action == False else None\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        action_ids = None if any((hasattr(space, 'shape') for space in env.action_space.spaces)) else list(product(*[range(space.n) for space in env.action_space.spaces]))\n        n_actions_per_dim = [space.n if hasattr(space, 'n') else np.inf for space in env.action_space.spaces]\n    else:\n        action_dim = 1\n        if cont_action:\n            action_ids = None\n            n_actions_per_dim = [np.inf]\n        else:\n            action_ids = list(range(env.action_space.n))\n            n_actions_per_dim = [env.action_space.n]\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n    else:\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n    if not cont_action:\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    action_space = env.action_space\n    if md_action:\n        sub_spaces = action_space.spaces\n        action_dim = len(sub_spaces)\n        for space in sub_spaces:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n        if np.inf in n_actions_per_dim:\n            action_ids = None\n        else:\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    elif cont_action:\n        n_actions_per_dim = [np.inf]\n        action_dim = 1\n        action_ids = None\n    else:\n        n_actions_per_dim = [action_space.n]\n        action_dim = 1\n        action_ids = list(range(action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    action_ids = None\n    if not md_action and (not cont_action):\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n        action_ids = [(i,) for i in range(env.action_space.n)]\n    elif md_action and (not cont_action):\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            n_actions_per_dim.append(space.n)\n        action_ids = list(product(*[range(dim) for dim in n_actions_per_dim]))\n    elif not md_action and cont_action:\n        n_actions_per_dim.append(np.inf)\n        action_dim = 1\n    elif md_action and cont_action:\n        action_dim = len(env.action_space.spaces)\n        n_actions_per_dim = [np.inf for _ in range(action_dim)]\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Optional, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Optional[List[Tuple[int, ...]]], int]:\n    action_dim = 1 if not md_action else len(env.action_space.spaces)\n    n_actions_per_dim = [numpy.inf if cont_action else env.action_space.n for _ in range(action_dim)]\n    if cont_action:\n        action_ids = None\n    elif md_action:\n        ranges_per_dim = [range(space.n) for space in env.action_space.spaces]\n        action_ids = list(product(*ranges_per_dim))\n    else:\n        action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if not md_action:\n        if cont_action:\n            return ([np.inf], None, 1)\n        else:\n            return ([env.action_space.n], list(range(env.action_space.n)), 1)\n    else:\n        if cont_action:\n            spaces = [np.inf for _ in env.action_space.spaces]\n            action_dim = len(spaces)\n            action_ids = None\n        else:\n            spaces = [space.n for space in env.action_space.spaces]\n            action_dim = len(spaces)\n            action_ids = list(product(*[range(i) for i in spaces]))\n        return (spaces, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n                if cont_action:\n                    n_actions_per_dim[-1] = np.inf\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = list(range(n_actions_per_dim[0]))\n    elif hasattr(env.action_space, 'shape'):\n        action_dim = env.action_space.shape[0]\n        n_actions_per_dim = [np.inf] * action_dim\n        action_ids = None\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n        action_dim = 1\n    else:\n        for subspace in env.action_space.spaces:\n            if hasattr(subspace, 'n') and cont_action:\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n                break\n            elif hasattr(subspace, 'n') and (not cont_action):\n                n_actions_per_dim.append(subspace.n)\n            action_dim += 1\n        if action_ids is None:\n            action_ids = None\n        else:\n            action_ids = list(product(*[range(num_actions) for num_actions in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for subspace in env.action_space.spaces:\n            if hasattr(subspace, 'n'):\n                n_actions_per_dim.append(subspace.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        action_ids = list(product(*[range(dim) for dim in n_actions_per_dim])) if np.inf not in n_actions_per_dim else None\n    elif hasattr(env.action_space, 'n'):\n        action_dim = 1\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = list(product(range(env.action_space.n)))\n    else:\n        action_dim = env.action_space.shape[0]\n        action_ids = None\n        n_actions_per_dim.extend([np.inf] * action_dim)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef update_beta(phi: List[np.ndarray], corpus: List[List[int]], V: int) -> List[List[float]]:\n    \"\"\"\n    Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters:\n    -----------\n    phi: List[np.ndarray]\n        List of numpy arrays, each representing the variational parameter \n        for a document, of shape (N_d, T).\n    corpus: List[List[int]]\n        Tokenized corpus, where corpus[d][n] is the integer index of the \n        n-th token of document d.\n    V: int\n        Size of the vocabulary, i.e., the number of distinct word indices.\n\n    Returns:\n    --------\n    List[List[float]]\n        The updated \u03b2 matrix as a list of lists, column-normalised and \n        rounded to four decimal places.\n    \"\"\"\n    beta = [[0.0] * len(phi[0][0]) for _ in range(V)]\n    for (doc_index, doc_phi) in enumerate(phi):\n        for (word_index, word) in enumerate(corpus[doc_index]):\n            for topic_index in range(len(doc_phi[0])):\n                beta[word][topic_index] += doc_phi[word_index][topic_index]\n    beta = [[round(b / sum(beta_t), 4) if sum(beta_t) != 0 else 0.0 for b in beta_t] for beta_t in beta]\n    return beta"}
{"task_id": 198, "completion_id": 1, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, len(phi[0][0])))\n    for (document, doc_phi) in enumerate(phi):\n        for (token, word) in enumerate(corpus[document]):\n            for topic in range(len(beta[0])):\n                if word == topic:\n                    beta[word][topic] += doc_phi[token][topic]\n                beta[word][topic] = round(beta[word][topic], 4)\n    for topic in range(len(beta[0])):\n        column_sum = sum(beta[:, topic])\n        if column_sum != 0:\n            beta[:, topic] /= column_sum\n    return beta.tolist()"}
{"task_id": 198, "completion_id": 2, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = [[0.0] * len(phi[0][0]) for _ in range(V)]\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            for (t, phi_val) in enumerate(phi[d][n]):\n                beta[word][t] += phi_val\n    for t in range(len(beta[0])):\n        total = sum((beta[v][t] for v in range(V)))\n        for v in range(V):\n            beta[v][t] /= total\n    beta = [[round(val, 4) for val in row] for row in beta]\n    return beta"}
{"task_id": 198, "completion_id": 3, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = len(phi[0][0])\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            v = corpus[d][n]\n            for t in range(T):\n                beta[v, t] += phi[d][n, t]\n    beta /= beta.sum(axis=0)\n    beta = beta.tolist()\n    beta = [[round(x, 4) for x in row] for row in beta]\n    return beta"}
{"task_id": 198, "completion_id": 4, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    T = len(phi[0][0])\n    D = len(phi)\n    N_d = [len(word_list) for word_list in corpus]\n    beta = [[0 for _ in range(T)] for _ in range(V)]\n    for d in range(D):\n        for n in range(N_d[d]):\n            word = corpus[d][n]\n            for t in range(T):\n                beta[word][t] += phi[d][n][t]\n    for t in range(T):\n        topic_sum = sum((beta[v][t] for v in range(V)))\n        for v in range(V):\n            beta[v][t] /= topic_sum\n    beta = [[round(val, 4) for val in row] for row in beta]\n    return beta"}
{"task_id": 198, "completion_id": 5, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    D = len(phi)\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(D):\n        for n in range(phi[d].shape[0]):\n            v = corpus[d][n]\n            beta[v, :] += phi[d][n, :]\n    beta = beta / np.sum(beta, axis=0, keepdims=True)\n    beta = np.round(beta, 4)\n    beta = beta.tolist()\n    return beta"}
{"task_id": 198, "completion_id": 6, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    T = len(phi[0][0])\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    beta /= np.sum(beta, axis=0)\n    return [list(np.round(row, 4)) for row in beta.T]"}
{"task_id": 198, "completion_id": 7, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    D = len(phi)\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(D):\n        for n in range(len(corpus[d])):\n            beta[corpus[d][n], :] += phi[d][n, :]\n    beta = (beta.T / beta.sum(axis=1)).T\n    betalist = beta.tolist()\n    betalist = [[round(num, 4) for num in row] for row in betalist]\n    return betalist"}
{"task_id": 198, "completion_id": 8, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = len(phi[0][0])\n    beta = [[0.0] * T for _ in range(V)]\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            for t in range(T):\n                beta[word][t] += phi[d][n][t]\n    for v in range(V):\n        total = sum(beta[v])\n        if total > 0:\n            for t in range(T):\n                beta[v][t] /= total\n    for v in range(V):\n        for t in range(T):\n            beta[v][t] = round(beta[v][t], 4)\n    return beta"}
{"task_id": 198, "completion_id": 9, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    T = len(phi[0][0])\n    beta = [[0] * T for _ in range(V)]\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            v = corpus[d][n]\n            phi_values = phi[d][n]\n            for t in range(T):\n                beta[v][t] += phi_values[t]\n    for t in range(T):\n        sum_beta_t = sum((beta[v][t] for v in range(V)))\n        for v in range(V):\n            beta[v][t] /= sum_beta_t\n    beta = [[round(val, 4) for val in row] for row in beta]\n    return beta"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    best_medoids = medoids\n    best_assignment = np.argmin(np.sum((X[:, np.newaxis, :] - medoids) ** 2, axis=-1), axis=1)\n    best_cost = np.sum([np.sum((X[best_assignment == i] - medoids[i]) ** 2) for i in range(k)])\n    while True:\n        is_swapped = False\n        for i in range(k):\n            for j in range(k, X.shape[0]):\n                (medoids[i], X[j]) = (X[j], medoids[i])\n                assignment = np.argmin(np.sum((X[:, np.newaxis, :] - medoids) ** 2, axis=-1), axis=1)\n                cost = np.sum([np.sum((X[assignment == i] - medoids[i]) ** 2) for i in range(k)])\n                if cost < best_cost:\n                    best_cost = cost\n                    best_medoids = medoids.copy()\n                    best_assignment = assignment.copy()\n                    is_swapped = True\n                (medoids[i], X[j]) = (X[j], medoids[i])\n            if is_swapped:\n                break\n        if not is_swapped:\n            break\n    return best_assignment.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 1, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    n = len(X)\n    medoids = X[:k]\n    labels = np.zeros(n, dtype=int)\n    dist_mat = np.sqrt(((X[:, :, None] - X[:, :, None].T) ** 2).sum(1))\n    cost = dist_mat[:, medoids].min(axis=1).sum()\n    while True:\n        swap_made = False\n        for i in range(k):\n            for j in range(n):\n                if j not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = j\n                    new_cost = dist_mat[:, new_medoids].min(axis=1).sum()\n                    if new_cost < cost:\n                        medoids = new_medoids\n                        cost = new_cost\n                        swap_made = True\n                        break\n            if swap_made:\n                break\n        if not swap_made:\n            break\n    for i in range(n):\n        labels[i] = np.argmin(dist_mat[i, medoids])\n    return labels.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 2, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = np.arange(k)\n    labels = np.zeros(n_samples, dtype=int)\n    non_medoids = np.delete(np.arange(n_samples), medoids)\n    while True:\n        (total_cost, new_labels) = calculate_total_cost(X, medoids)\n        swap_made = False\n        for medoid_idx in range(k):\n            for non_medoid_idx in range(len(non_medoids)):\n                new_medoids = medoids.copy()\n                new_medoids[medoid_idx] = non_medoids[non_medoid_idx]\n                (new_total_cost, new_new_labels) = calculate_total_cost(X, new_medoids)\n                if new_total_cost < total_cost:\n                    medoids = new_medoids\n                    total_cost = new_total_cost\n                    labels = new_new_labels\n                    swap_made = True\n                    break\n            if swap_made:\n                break\n        if not swap_made:\n            break\n        non_medoids = np.delete(np.arange(n_samples), medoids)\n    return labels.tolist()\ndef calculate_total_cost(X, medoids):\n    \"\"\"Calculate the total cost and cluster labels for given medoids.\"\"\"\n    total_cost = 0.0\n    labels = np.zeros(X.shape[0], dtype=int)\n    for i in range(X.shape[0]):\n        min_distance = float('inf')\n        for (j, medoid) in enumerate(medoids):\n            distance = np.linalg.norm(X[i] - X[medoid])\n            if distance < min_distance:\n                min_distance = distance\n                labels[i] = j\n        total_cost += min_distance\n    return (total_cost, labels)"}
{"task_id": 202, "completion_id": 3, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\nfrom itertools import combinations\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = list(range(k))\n    while True:\n        distances = cdist(X, X[medoids])\n        min_distances = np.min(distances, axis=1)\n        total_cost = np.sum(min_distances)\n        best_medoid_swap = None\n        for (current_med_idx, non_med_idx) in combinations(range(len(X)), 2):\n            if current_med_idx not in medoids:\n                continue\n            if non_med_idx in medoids:\n                continue\n            new_distances = np.minimum(distances[:, current_med_idx], cdist(X, X[non_med_idx:non_med_idx + 1]).flatten())\n            new_total_cost = np.sum(new_distances)\n            if new_total_cost < total_cost:\n                best_medoid_swap = (current_med_idx, non_med_idx)\n                total_cost = new_total_cost\n        if best_medoid_swap is None:\n            break\n        (swap_idx_1, swap_idx_2) = best_medoid_swap\n        medoids[medoids.index(swap_idx_1)] = swap_idx_2\n    distances = cdist(X, X[medoids])\n    min_distances_indices = np.argmin(distances, axis=1)\n    return min_distances_indices.tolist()"}
{"task_id": 202, "completion_id": 4, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n\n    def calculate_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def get_cost(X, medoids, labels):\n        cost = 0\n        for (i, x) in enumerate(X):\n            cost += calculate_distance(x, medoids[labels[i]])\n        return cost\n\n    def assign_labels(X, medoids):\n        labels = []\n        for x in X:\n            distances = [calculate_distance(x, medoid) for medoid in medoids]\n            label = np.argmin(distances)\n            labels.append(label)\n        return labels\n    n_samples = X.shape[0]\n    medoids = X[:k].copy()\n    labels = assign_labels(X, medoids)\n    cost = get_cost(X, medoids, labels)\n    while True:\n        best_swap_cost_decrease = 0\n        best_swap = None\n        for medoid_index in range(k):\n            for sample_index in range(k, n_samples):\n                if labels[sample_index] != medoid_index:\n                    new_medoids = medoids.copy()\n                    new_medoids[medoid_index] = X[sample_index]\n                    new_labels = assign_labels(X, new_medoids)\n                    new_cost = get_cost(X, new_medoids, new_labels)\n                    if cost - new_cost > best_swap_cost_decrease:\n                        best_swap_cost_decrease = cost - new_cost\n                        best_swap = (medoid_index, sample_index)\n        if best_swap_cost_decrease > 0:\n            (best_medoid_index, best_sample_index) = best_swap\n            medoids[best_medoid_index] = X[best_sample_index]\n            labels = assign_labels(X, medoids)\n            cost = get_cost(X, medoids, labels)\n        else:\n            return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    while True:\n        distances = cdist(X, medoids)\n        labels = np.argmin(distances, axis=1)\n        cost_before = np.sum(np.min(distances, axis=1))\n        best_medoids = None\n        best_cost = cost_before\n        for i in range(k):\n            for j in range(k, len(X)):\n                new_medoids = np.copy(medoids)\n                new_medoids[i] = X[j]\n                new_distances = cdist(X, new_medoids)\n                new_cost = np.sum(np.min(new_distances, axis=1))\n                if new_cost < best_cost:\n                    best_medoids = new_medoids\n                    best_cost = new_cost\n                    break\n            if best_medoids is not None:\n                break\n        if best_medoids is None:\n            break\n        else:\n            medoids = best_medoids\n    final_labels = np.argmin(cdist(X, medoids), axis=1)\n    return final_labels.tolist()"}
{"task_id": 202, "completion_id": 6, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n\n    def get_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def get_cost(medoids):\n        cost = 0\n        for i in range(len(X)):\n            min_dist = float('inf')\n            for medoid in medoids:\n                dist = get_distance(X[i], X[medoid])\n                if dist < min_dist:\n                    min_dist = dist\n            cost += min_dist\n        return cost\n\n    def get_non_medoids(medoids, n):\n        non_medoids = []\n        for i in range(n):\n            if i not in medoids:\n                non_medoids.append(i)\n        return non_medoids\n    medoids = list(range(k))\n    n_samples = len(X)\n    while True:\n        non_medoids = get_non_medoids(medoids, n_samples)\n        best_swap = None\n        best_reduction = float('-inf')\n        current_cost = get_cost(medoids)\n        for i in medoids:\n            for j in non_medoids:\n                new_medoids = medoids.copy()\n                new_medoids[new_medoids.index(i)] = j\n                new_cost = get_cost(new_medoids)\n                reduction = current_cost - new_cost\n                if reduction > best_reduction:\n                    best_reduction = reduction\n                    best_swap = (i, j)\n        if best_swap is None or best_reduction <= 0:\n            break\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n    labels = [-1] * n_samples\n    for i in range(n_samples):\n        min_dist = float('inf')\n        min_medoid = -1\n        for medoid in medoids:\n            dist = get_distance(X[i], X[medoid])\n            if dist < min_dist:\n                min_dist = dist\n                min_medoid = medoid\n        labels[i] = medoids.index(min_medoid)\n    return labels"}
{"task_id": 202, "completion_id": 7, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    labels = np.zeros((X.shape[0],), dtype=np.int64)\n    eucl_dist = np.sqrt(((X[:, np.newaxis, :] - X) ** 2).sum(-1))\n    while True:\n        best_gain = 0\n        swap_medoids = medoids.copy()\n        for (i, medoid) in enumerate(medoids):\n            for not_medoid in X:\n                if np.all(not_medoid == medoid):\n                    continue\n                gain = eucl_dist[X.tolist().index(not_medoid), :].sum() - eucl_dist[X.tolist().index(medoid), :].sum()\n                if gain > best_gain:\n                    best_gain = gain\n                    swap_medoids = medoids.copy()\n                    swap_medoids[i] = not_medoid\n        if best_gain <= 0:\n            break\n        else:\n            medoids = swap_medoids\n    for (i, sample) in enumerate(X):\n        closest_medoid_index = np.argmin([np.linalg.norm(sample - medoid) for medoid in medoids])\n        labels[i] = closest_medoid_index\n    return labels.tolist()"}
{"task_id": 202, "completion_id": 8, "solution": "import numpy as np\ndef calculate_cost(X, medoids, labels):\n    distance = 0\n    for (i, medoid) in enumerate(medoids):\n        idx = np.where(labels == i)[0]\n        distance += np.sum(np.linalg.norm(X[idx] - medoid, axis=1))\n    return distance\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = X[:k].copy()\n    labels = np.zeros(len(X), dtype=int)\n    while True:\n        for (i, sample) in enumerate(X):\n            distances = np.linalg.norm(medoids - sample, axis=1)\n            labels[i] = np.argmin(distances)\n        best_swap = None\n        best_cost = calculate_cost(X, medoids, labels)\n        for (i, medoid) in enumerate(medoids):\n            non_medoids = np.delete(X, medoids, axis=0)\n            for (j, non_medoid) in enumerate(non_medoids):\n                medoids_after_swap = medoids.copy()\n                medoids_after_swap[i] = non_medoid\n                labels_after_swap = labels.copy()\n                for (k, sample) in enumerate(X):\n                    distances = np.linalg.norm(medoids_after_swap - sample, axis=1)\n                    labels_after_swap[k] = np.argmin(distances)\n                new_cost = calculate_cost(X, medoids_after_swap, labels_after_swap)\n                if new_cost < best_cost:\n                    best_swap = (i, j)\n                    best_cost = new_cost\n        if best_swap is None:\n            break\n        (i, j) = best_swap\n        medoids[i] = non_medoids[j]\n    return labels.tolist()"}
{"task_id": 202, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = X[:k]\n    while True:\n        distances = cdist(X, medoids)\n        labels = np.argmin(distances, axis=1)\n        total_cost = np.sum([distances[i, medoid_idx] for (i, medoid_idx) in enumerate(labels)])\n        best_swap_cost_reduction = 0\n        best_swap = None\n        for medoid_idx in range(k):\n            for non_medoid_idx in range(k, X.shape[0]):\n                swap_cost = total_cost - distances[non_medoid_idx, medoid_idx] + np.min(distances[non_medoid_idx, [i for i in range(k) if i != medoid_idx]])\n                if swap_cost < total_cost and swap_cost - total_cost > best_swap_cost_reduction:\n                    best_swap_cost_reduction = swap_cost - total_cost\n                    best_swap = (medoid_idx, non_medoid_idx)\n        if best_swap is None:\n            break\n        medoids[best_swap[0]] = X[best_swap[1]]\n    labels = np.argmin(cdist(X, medoids), axis=1)\n    return labels.tolist()"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]) or n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    x_test = np.array(x_test)\n    y_train = np.array(y_train).reshape(-1, 1)\n    x_train_b = np.c_[np.ones((len(x_train), 1)), x_train]\n    x_test_b = np.c_[np.ones((len(x_test), 1)), x_test]\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    scaler = StandardScaler()\n    x_train_scaled = scaler.fit_transform(x_train_poly)[:, 1:]\n    x_test_scaled = scaler.transform(x_test_poly)[:, 1:]\n    x_train_sc_b = np.c_[np.ones((len(x_train_scaled), 1)), x_train_scaled]\n    x_test_sc_b = np.c_[np.ones((len(x_test_scaled), 1)), x_test_scaled]\n    theta = np.random.randn(x_train_sc_b.shape[1], 1)\n    for _ in range(n_iterations):\n        gradients = 2 / len(x_train_sc_b) * x_train_sc_b.T.dot(x_train_sc_b.dot(theta) - y_train) + 2 * reg_factor * (l1_ratio * np.sign(theta) + 0.5 * (1 - l1_ratio) * theta)\n        theta -= learning_rate * gradients\n    preds = x_test_sc_b.dot(theta)\n    return np.round(preds, 4).tolist()"}
{"task_id": 216, "completion_id": 1, "solution": "import numpy as np\ndef generate_polynomial_features(x, degree):\n    if degree <= 0:\n        return x\n    x_poly = x\n    for d in range(2, degree + 1):\n        x_poly = np.hstack((x_poly, x ** d))\n    return x_poly\ndef standardize(x):\n    return (x - np.mean(x, axis=0)) / np.std(x, axis=0)\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    x_poly_train = generate_polynomial_features(x_train, degree)\n    x_poly_train = np.hstack((np.ones((x_poly_train.shape[0], 1)), standardize(x_poly_train[:, 1:])))\n    x_poly_test = generate_polynomial_features(x_test, degree)\n    x_poly_test = np.hstack((np.ones((x_poly_test.shape[0], 1)), standardize(x_poly_test[:, 1:])))\n    (m, n) = x_poly_train.shape\n    weights = np.zeros(n)\n    for _ in range(n_iterations):\n        predictions = x_poly_train.dot(weights)\n        residuals = predictions - y_train\n        gradient = 2 * x_poly_train.T.dot(residuals) / m\n        l1_penalty = reg_factor * l1_ratio\n        l2_penalty = reg_factor * (1 - l1_ratio)\n        gradient[1:] += 2 * weights[1:] * l2_penalty\n        gradient[1:] += l1_penalty * np.sign(weights[1:])\n        weights -= learning_rate * gradient\n    predictions = x_poly_test.dot(weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 2, "solution": "import numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import PolynomialFeatures\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n    if n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    poly = PolynomialFeatures(degree)\n    x_train = poly.fit_transform(x_train)\n    x_test = poly.fit_transform(x_test)\n    scaler = preprocessing.StandardScaler().fit(x_train)\n    x_train = scaler.transform(x_train)\n    x_test = scaler.transform(x_test)\n    (n_samples, n_features) = x_train.shape\n    weights = np.zeros(n_features)\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train, weights)\n        mse = np.mean((y_train - y_pred) ** 2)\n        l1 = reg_factor * l1_ratio * np.sum(np.abs(weights))\n        l2 = reg_factor * (1 - l1_ratio) * 0.5 * np.sum(np.square(weights[1:]))\n        cost = mse + l1 + l2\n        gradient_mse = -(2 / n_samples) * np.dot(x_train.T, y_train - y_pred)\n        gradient_l1 = reg_factor * l1_ratio * np.sign(weights)\n        gradient_l2 = reg_factor * (1 - l1_ratio) * weights\n        gradient = gradient_mse + gradient_l1 + gradient_l2\n        weights = weights - learning_rate * gradient\n    y_pred = np.dot(x_test, weights)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    poly = PolynomialFeatures(degree)\n    x_train = poly.transform(x_train)\n    x_test = poly.transform(x_test)\n    scaler = StandardScaler()\n    x_train = scaler.fit_transform(x_train)\n    x_test = scaler.transform(x_test)\n    weights = np.zeros(x_train.shape[1])\n    x_train = np.c_[np.ones(x_train.shape[0]), x_train]\n    x_test = np.c_[np.ones(x_test.shape[0]), x_test]\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train, weights)\n        grad_mse = 2 / x_train.shape[0] * np.dot(y_pred - y_train, x_train)\n        l2 = reg_factor * weights\n        l1 = reg_factor * l1_ratio * np.sign(weights)\n        grad_reg = l2 + l1\n        grad_reg[0] = 0\n        weights -= learning_rate * (grad_mse + grad_reg)\n    y_pred = np.dot(x_test, weights)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if x_train.shape[1] != len(x_test[0]) or n_iterations < 1:\n        return -1\n    x_train = add_polynomial_features(x_train, degree)\n    (x_train, mu, sigma) = standardise(x_train)\n    x_test = add_polynomial_features(x_test, degree)\n    x_test = standardise_with_params(x_test, mu, sigma)\n    weights = gradient_descent(x_train, y_train, reg_factor, l1_ratio, n_iterations, learning_rate)\n    predictions = np.dot(x_test, weights)\n    return np.round(predictions, 4).tolist()\ndef standardise(matrix):\n    mu = np.mean(matrix, 0)\n    sigma = np.std(matrix, 0)\n    return ((matrix - mu) / sigma, mu, sigma)\ndef standardise_with_params(matrix, mu, sigma):\n    return (matrix - mu) / sigma\ndef add_polynomial_features(matrix, degree):\n    matrix_t = matrix.T\n    result = np.ones(matrix.shape[0])\n    for d in range(1, degree + 1):\n        for features in combinations_with_replacement(matrix_t, d):\n            result = np.vstack((result, np.prod(features, axis=0)))\n    return result.T\ndef combinations_with_replacement(it, n):\n    pools = [tuple(pool) for pool in it] * n\n    result = [[]]\n    for pool in pools:\n        result = [x + [y] for x in result for y in pool]\n    for prod in result:\n        yield tuple(prod)\ndef gradient_descent(x, y, reg_factor, l1_ratio, n_iterations, learning_rate):\n    (num_samples, num_features) = x.shape\n    w = np.ones(num_features)\n    b = 0\n    x_t = x.T\n    for _ in range(n_iterations):\n        y_pred = np.dot(x, w) + b\n        d_w = (-2 * np.dot(x_t, y - y_pred) + l1_ratio * reg_factor * np.sign(w) + 2 * (1 - l1_ratio) * reg_factor * w) / num_samples\n        d_b = -2 * np.sum(y - y_pred) / num_samples\n        w -= learning_rate * d_w\n        b -= learning_rate * d_b\n    return (w, b)"}
{"task_id": 216, "completion_id": 5, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if not isinstance(n_iterations, int) or n_iterations <= 0:\n        return -1\n    if not isinstance(l1_ratio, float) or l1_ratio < 0 or l1_ratio > 1:\n        return -1\n    if not isinstance(reg_factor, float) or reg_factor < 0:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train).reshape(-1, 1)\n    x_test = np.array(x_test)\n    (n_samples, n_features) = x_train.shape\n    if n_features != x_test.shape[1]:\n        return -1\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    scaler = StandardScaler()\n    x_train_poly = scaler.fit_transform(x_train_poly)\n    x_test_poly = scaler.transform(x_test_poly)\n    x_train_poly = np.insert(x_train_poly, 0, 1, axis=1)\n    x_test_poly = np.insert(x_test_poly, 0, 1, axis=1)\n    weights = np.random.randn(x_train_poly.shape[1], 1)\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_poly, weights)\n        residuals = y_pred - y_train\n        mse_gradient = 2 / n_samples * np.dot(x_train_poly.T, residuals)\n        l1_penalty = reg_factor * l1_ratio * np.sign(weights)\n        l2_penalty = reg_factor * (1 - l1_ratio) * weights\n        penalty = l1_penalty + l2_penalty\n        weights -= learning_rate * (mse_gradient + penalty)\n    y_test_pred = np.dot(x_test_poly, weights)\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n\n    def standardize(x):\n        return (x - x.mean(axis=0)) / x.std(axis=0)\n\n    def polynomial_features(x, degree):\n        x = np.array(x)\n        (n_samples, n_features) = np.shape(x)\n\n        def index_combinations():\n            combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n            flat_combs = [item for sublist in combs for item in sublist]\n            return flat_combs\n        new_x = []\n        for degree_features in index_combinations():\n            new_x.append(np.prod(np.power(x, np.array(degree_features)), axis=1))\n        return np.array(new_x).transpose()\n    x_train = standardize(polynomial_features(x_train, degree))\n    x_test = standardize(polynomial_features(x_test, degree))\n    y_train = np.array(y_train)\n    weights = np.zeros(x_train.shape[1])\n\n    def gradient(x, y, weights):\n        y_pred = x.dot(weights)\n        loss = y - y_pred\n        avg_loss = np.mean(loss)\n        l1_gradient = reg_factor * l1_ratio * np.sign(weights)\n        l2_gradient = reg_factor * (1 - l1_ratio) * 2 * weights\n        regularization = l1_gradient + l2_gradient\n        return -(1 / len(x)) * (x.T.dot(loss) + regularization)\n    for _ in range(n_iterations):\n        weights -= learning_rate * gradient(x_train, y_train, weights)\n    y_pred = x_test.dot(weights)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]) or n_iterations < 1:\n        return -1\n    x_train_poly = np.array([[x ** i for i in range(degree + 1)] for x in x_train]).reshape(-1, degree + 1)\n    x_test_poly = np.array([[x ** i for i in range(degree + 1)] for x in x_test]).reshape(-1, degree + 1)\n    x_mean = np.mean(x_train_poly, axis=0)\n    x_std = np.std(x_train_poly, axis=0)\n    x_train_poly = (x_train_poly - x_mean) / x_std\n    x_test_poly = (x_test_poly - x_mean) / x_std\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        y_hat = x_train_poly.dot(w)\n        mse_grads = -2 * x_train_poly.T.dot(y_train - y_hat) / x_train_poly.shape[0]\n        reg_grads = reg_factor * w\n        grads = mse_grads + reg_grads\n        for i in range(1, degree + 1):\n            grads[i] = grads[i] + l1_ratio * reg_factor * np.sign(w[i]) + 0.5 * reg_factor * (1 - l1_ratio) * w[i]\n        w = w - learning_rate * grads\n    predictions = x_test_poly.dot(w)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 8, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]) or n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    poly = PolynomialFeatures(degree)\n    x_train = poly.fit_transform(x_train)\n    x_test = poly.fit_transform(x_test)\n    scaler = StandardScaler()\n    x_train[:, 1:] = scaler.fit_transform(x_train[:, 1:])\n    x_test[:, 1:] = scaler.transform(x_test[:, 1:])\n    bias_train = np.ones((x_train.shape[0], 1))\n    x_train = np.concatenate((bias_train, x_train), axis=1)\n    bias_test = np.ones((x_test.shape[0], 1))\n    x_test = np.concatenate((bias_test, x_test), axis=1)\n    weights = np.random.randn(x_train.shape[1])\n    for _ in range(n_iterations):\n        y_hat = x_train.dot(weights)\n        l1_penality = reg_factor * l1_ratio * np.sign(weights)\n        l2_penality = reg_factor * (1 - l1_ratio) * weights\n        gradients = x_train.T.dot(y_hat - y_train) / y_train.size + l1_penality + l2_penality\n        weights -= learning_rate * gradients\n    y_test_hat = x_test.dot(weights)\n    return np.round(y_test_hat, 4).tolist()"}
{"task_id": 216, "completion_id": 9, "solution": "import numpy as np\nclass PolynomialFeatures:\n    \"\"\"Generate polynomial and interaction features.\"\"\"\n\n    def __init__(self, degree=2):\n        self.degree = degree\n\n    def fit_transform(self, X):\n        self.n_features_ = X.shape[1]\n        combinations = self.generate(np.arange(self.n_features_), self.degree)\n        output = []\n        for x in X:\n            output.append(np.prod(x[combinations], axis=1))\n        return np.array(output)\n\n    def generate(self, features, degree):\n        if degree == 1:\n            return np.array(features).reshape(-1, 1)\n        output = []\n        for feature in features:\n            if degree <= 0:\n                output.append([feature])\n            else:\n                for item in self.generate(np.arange(feature, -1, -1), degree - 1):\n                    output.append([feature] + item)\n        return np.array(output)\nclass StandardScaler:\n    \"\"\"Standardize features by removing the mean and scaling to unit variance.\"\"\"\n\n    def fit(self, X):\n        self.mean_ = np.mean(X, axis=0)\n        self.scale_ = np.std(X, axis=0)\n        self.var_ = np.var(X, axis=0)\n\n    def transform(self, X):\n        return (X - self.mean_) / np.sqrt(self.var_)\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.fit_transform(x_test)\n    scaler = StandardScaler()\n    scaler.fit(x_train_poly)\n    x_train_scaled = scaler.transform(x_train_poly)\n    x_test_scaled = scaler.transform(x_test_poly)\n    w = np.zeros(x_train_scaled.shape[1])\n    for _ in range(n_iterations):\n        y_pred = x_train_scaled.dot(w)\n        residuals = y_pred - y_train\n        gradient = x_train_scaled.T.dot(residuals)\n        w -= learning_rate * (gradient + reg_factor * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w))\n    y_pred = x_test_scaled.dot(w)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or -1) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def grad(actual, predicted):\n        return actual * sigmoid(-actual * predicted)\n\n    def hess(predicted):\n        sig = sigmoid(predicted)\n        return sig * (1 - sig)\n    gradient_list = np.round(grad(actual, predicted), 6).tolist()\n    hessian_list = np.round(hess(predicted), 6).tolist()\n    probability_list = np.round(sigmoid(predicted), 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 1, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = lambda z: 1 / (1 + np.exp(-z))\n    grad = actual * sigmoid(-actual * predicted)\n    hess = sigmoid(predicted) * (1 - sigmoid(predicted))\n    prob = sigmoid(predicted)\n    grad_list = np.round(grad, 6).tolist()\n    hess_list = np.round(hess, 6).tolist()\n    prob_list = np.round(prob, 6).tolist()\n    return (grad_list, hess_list, prob_list)"}
{"task_id": 217, "completion_id": 2, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n    \n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob = sigmoid(predicted)\n    grad = actual * sigmoid(-actual * predicted)\n    hess = prob * (1 - prob)\n    grad = np.round(grad, 6).tolist()\n    hess = np.round(hess, 6).tolist()\n    prob = np.round(prob, 6).tolist()\n    return (grad, hess, prob)"}
{"task_id": 217, "completion_id": 3, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid - actual * np.square(sigmoid) / 2\n    hessian = sigmoid * (1 - sigmoid) / 2\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid = np.round(sigmoid, 6)\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = sigmoid.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 4, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid - actual * sigmoid ** 2\n    hessian = sigmoid * (1 - sigmoid)\n    sigmoid = np.round(sigmoid, 6)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid = sigmoid.tolist()\n    gradient = gradient.tolist()\n    hessian = hessian.tolist()\n    return (gradient, hessian, sigmoid)"}
{"task_id": 217, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigm = sigmoid(predicted)\n    gradient_list = np.round(actual * sigmoid(-actual * predicted), 6).tolist()\n    hessian_list = np.round(sigm * (1 - sigm), 6).tolist()\n    probability_list = np.round(sigm, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 6, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    p = 1 / (1 + np.exp(-predicted))\n    grad = actual * p - actual ** 2 * p ** 2\n    hess = p * (1 - p)\n    return (np.round(grad, 6).tolist(), np.round(hess, 6).tolist(), np.round(p, 6).tolist())"}
{"task_id": 217, "completion_id": 7, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    grad = actual * sigmoid - actual * sigmoid * actual * sigmoid\n    hess = sigmoid * (1 - sigmoid)\n    gradient_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(sigmoid, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 8, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    grad = actual * sigmoid(-actual * predicted)\n    hess = sigmoid(predicted) * (1 - sigmoid(predicted))\n    prob = sigmoid(predicted)\n    grad = np.round(grad, 6).tolist()\n    hess = np.round(hess, 6).tolist()\n    prob = np.round(prob, 6).tolist()\n    return (grad, hess, prob)"}
{"task_id": 217, "completion_id": 9, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or -1) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation.\n        2. Hessian (second derivative) for each observation.\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    probabilities = 1 / (1 + np.exp(-predicted))\n    gradients = np.multiply(actual, probabilities) - np.multiply(actual, probabilities ** 2)\n    hessians = np.multiply(probabilities, 1 - probabilities)\n    return (np.round(gradients, 6).tolist(), np.round(hessians, 6).tolist(), np.round(probabilities, 6).tolist())\nactual = [1, -1, 1, -1]\npredicted = [0.1, -0.2, -0.3, 0.4]"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function follows the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand):\n        ace = True if 1 in hand else False\n        val_ace = sum(hand) + 10 * ace\n        return min(sum(hand) + (ace and len(hand) <= 2), val_ace)\n    p_value = hand_value(player)\n    d_value = hand_value(dealer)\n    reward = 0\n    if p_value > 21:\n        reward = -1\n    elif p_value == 21 and len(player) == 2:\n        reward = 1.5\n    elif d_value > 21:\n        reward = 1\n    elif p_value > d_value:\n        reward = 1\n    elif p_value < d_value:\n        reward = -1\n    return reward"}
{"task_id": 218, "completion_id": 1, "solution": "def calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculates the score of a hand.\n\n    Args:\n        hand: List of integers (1\u201310) representing a hand.\n\n    Returns:\n        The integer score of the hand.\n    \"\"\"\n    total = sum(hand)\n    if 1 in hand and total + 10 <= 21:\n        return total + 10\n    return total\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if player_score > dealer_score:\n        if player_score == 21 and len(player) == 2:\n            return 1.5\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 2, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n\n    def get_hand_value(hand):\n        if sum(hand) <= 11 and 1 in hand:\n            return sum(hand) + 10\n        return sum(hand)\n    player_value = get_hand_value(player)\n    dealer_value = get_hand_value(dealer)\n    if player_value > 21:\n        return -1\n    elif dealer_value > 21:\n        return 1\n    elif player_value == 21 and dealer_value != 21 and (len(player) == 2):\n        return 1.5\n    elif player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 3, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calc_hand_value(hand):\n        hand_value = sum(hand)\n        if 1 in hand and hand_value + 10 <= 21:\n            hand_value += 10\n        return hand_value if hand_value <= 21 else -1\n\n    def is_natural_blackjack(hand):\n        return set(hand) == {1, 10}\n    player_value = calc_hand_value(player)\n    dealer_value = calc_hand_value(dealer)\n    if player_value == -1:\n        return -1\n    elif dealer_value == -1:\n        return 1\n    elif player_value > dealer_value:\n        return 1.5 if is_natural_blackjack(player) else 1\n    elif player_value < dealer_value:\n        return -1\n    elif player_value == dealer_value:\n        return 0"}
{"task_id": 218, "completion_id": 4, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n\n    def calculate_hand(hand):\n        if 1 in hand and sum(hand) + 10 <= 21:\n            return sum(hand) + 10\n        else:\n            return sum(hand)\n    if calculate_hand(player) > 21:\n        return -1\n    elif calculate_hand(dealer) > 21:\n        return 1\n    else:\n        if set(player) == {1, 10}:\n            player_reward = 1.5\n        else:\n            player_reward = calculate_hand(player)\n        if set(dealer) == {1, 10}:\n            dealer_reward = 1.5\n        else:\n            dealer_reward = calculate_hand(dealer)\n        if player_reward > dealer_reward:\n            return 1\n        elif player_reward < dealer_reward:\n            return -1\n        else:\n            return 0"}
{"task_id": 218, "completion_id": 5, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand):\n        score = sum(hand)\n        if 1 in hand and score + 10 <= 21:\n            return score + 10\n        return score\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if player_score == dealer_score:\n        return 0\n    if player_score == 11 and len(player) == 2:\n        return 1.5 if dealer_score > 9 else 1\n    return 1 if player_score > dealer_score else -1"}
{"task_id": 218, "completion_id": 6, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n\n    def get_score(hand):\n        score = sum(hand)\n        if score + 10 <= 21 and 1 in hand:\n            score += 10\n        return score if score <= 21 else -1\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n    if player.count(1) == 2 and len(player) == 2:\n        if dealer_score in [10, 11]:\n            return float(0)\n        return float(1.5)\n    if player_score == -1:\n        return float(-1)\n    if dealer_score == -1:\n        return float(1)\n    if player_score > dealer_score:\n        return float(1)\n    if player_score < dealer_score:\n        return float(-1)\n    return float(0)"}
{"task_id": 218, "completion_id": 7, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand):\n        score = sum(hand)\n        if 1 in hand and score + 10 <= 21:\n            score += 10\n        return score\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    player_has_bj = player_score == 21 and len(player) == 2\n    dealer_has_bj = dealer_score == 21 and len(dealer) == 2\n    if player_score > 21:\n        return -1\n    elif player_score > 21 and dealer_score > 21 or player_score == dealer_score:\n        return 0\n    elif player_has_bj and (not dealer_has_bj):\n        return 1.5\n    elif dealer_score > 21 or player_score < dealer_score:\n        return -1\n    elif player_score > dealer_score:\n        return 1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 8, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n\n    def get_hand_score(hand):\n        \"\"\"Calculate the score of a hand.\"\"\"\n        score = sum(hand)\n        if 1 in hand and score + 10 <= 21:\n            score += 10\n        return score\n    player_score = get_hand_score(player)\n    dealer_score = get_hand_score(dealer)\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif player_score == 21 and len(player) == 2:\n        if dealer_score == 21 and len(dealer) == 2:\n            return 0\n        else:\n            return 1.5\n    else:\n        return 0 if player_score == dealer_score else 1 if player_score > dealer_score else -1"}
{"task_id": 218, "completion_id": 9, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n\n    def hand_value(hand):\n        total = sum(hand)\n        if total + 10 <= 21 and 1 in hand:\n            total += 10\n        return total if total <= 21 else -1\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if player_score == -1:\n        return -1\n    elif dealer_score == -1:\n        return 1\n    elif player_score > dealer_score:\n        return 1\n    elif player_score == dealer_score:\n        return 0\n    else:\n        return -1"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\n    \n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Length must be equal to actual,\n        and all elements must be non-negative.\n        \n    Returns\n    -------\n    np.ndarray\n        A NumPy array of element-wise squared logarithmic errors.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    squared_errors = (np.log1p(actual) - np.log1p(predicted)) ** 2\n    return squared_errors\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n    \n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Length must be equal to actual,\n        and all elements must be non-negative.\n        \n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape or (actual < 0).any() or (predicted < 0).any():\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    mean_squared_error = np.mean(squared_errors)\n    return round(float(mean_squared_error), 4)"}
{"task_id": 221, "completion_id": 1, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Helper that returns element-wise squared log errors.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Sequence of true values.\n    predicted : np.ndarray\n        Sequence of predicted values.\n\n    Returns\n    -------\n    np.ndarray\n        Sequence of squared log errors.\n    \"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if len(actual) != len(predicted) or (np.any(actual < 0) or np.any(predicted < 0)):\n        return -1\n    squared_log_errors = squared_log_error(actual, predicted)\n    return round(np.mean(squared_log_errors), 4)"}
{"task_id": 221, "completion_id": 2, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns a NumPy array of elementwise squared logarithmic errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if len(actual.shape) > 1 or len(predicted.shape) > 1:\n        return -1\n    if actual.shape != predicted.shape:\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    return round(np.mean(squared_log_error(actual, predicted)), 4)"}
{"task_id": 221, "completion_id": 3, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 or y < 0 for (x, y) in zip(actual, predicted))):\n        return -1\n    return round(np.mean(squared_log_error(actual, predicted)), 4)"}
{"task_id": 221, "completion_id": 4, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + np.array(actual)) - np.log(1 + np.array(predicted))) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    squared_log_errors = squared_log_error(actual, predicted)\n    return round(np.mean(squared_log_errors), 4)"}
{"task_id": 221, "completion_id": 5, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + np.array(actual)) - np.log(1 + np.array(predicted))) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE). \n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape or (actual < 0).any() or (predicted < 0).any():\n        return -1\n    else:\n        return round(np.mean(squared_log_error(actual, predicted)), 4)\nactual = [1, 2, 3, 4, 5]\npredicted = [1]"}
{"task_id": 221, "completion_id": 6, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 or p < 0 for (a, p) in zip(actual, predicted))):\n        return -1\n    return round(np.mean(squared_log_error(actual, predicted)), 4)"}
{"task_id": 221, "completion_id": 7, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not (np.all(np.array(actual) >= 0) and np.all(np.array(predicted) >= 0)):\n        return -1\n    return round(np.mean(squared_log_error(np.array(actual), np.array(predicted))), 4)"}
{"task_id": 221, "completion_id": 8, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    seq = np.sqrt((np.log(actual + 1) - np.log(predicted + 1)) ** 2)\n    return seq\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if len(actual) != len(predicted):\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    seq = squared_log_error(actual, predicted)\n    return round(np.mean(seq), 4)"}
{"task_id": 221, "completion_id": 9, "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape:\n        return -1\n    elif not (np.all(actual >= 0) and np.all(predicted >= 0)):\n        return -1\n    return round(np.mean(squared_log_error(actual, predicted)), 4)\nactual = np.array([1.1, 1.9, 3.0, 4.4])\npredicted = np.array([0.9, 2.2, 2.8, 4.2])"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    sig = 1 / (1 + np.exp(-z))\n    sig = np.round(sig, 4)\n    if isinstance(z, (list, np.ndarray)):\n        sig = sig.tolist()\n    return sig"}
{"task_id": 222, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n\n    \"\"\"\n    z = np.array(z) if not isinstance(z, (int, float, np.int64, np.float64)) else z\n    if isinstance(z, (int, float, np.int64, np.float64)):\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            exp_val = np.exp(z)\n            return round(exp_val / (1 + exp_val), 4)\n    result = np.zeros_like(z, dtype=np.float64)\n    stable_indexes = z >= 0\n    instable_indexes = ~stable_indexes\n    result[stable_indexes] = 1 / (1 + np.exp(-z[stable_indexes]))\n    exp_val = np.exp(z[instable_indexes])\n    result[instable_indexes] = exp_val / (1 + exp_val)\n    return result.tolist()"}
{"task_id": 222, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        z = np.asarray(z)\n        maks = z > 0\n        pos_result = 1 / (1 + np.exp(-z[maks]))\n        neg_result = np.exp(z[~maks]) / (np.exp(z[~maks]) + 1)\n        result = np.zeros_like(z, dtype=float)\n        result[maks] = pos_result\n        result[~maks] = neg_result\n    elif z >= 0:\n        result = 1 / (1 + np.exp(-z))\n    else:\n        result = np.exp(z) / (np.exp(z) + 1)\n    return result.round(4).tolist() if isinstance(z, (list, np.ndarray)) else round(result, 4)"}
{"task_id": 222, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, list):\n        z = np.array(z)\n    mask = z >= 0\n    neg_mask = z < 0\n    z = np.zeros(z.shape)\n    z[mask] = 1 / (1 + np.exp(-z[mask]))\n    z[neg_mask] = np.exp(z[neg_mask]) / (np.exp(z[neg_mask]) + np.exp(z[neg_mask]))\n    z = np.round(z, 4)\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    return z"}
{"task_id": 222, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    neg_indices = z < 0\n    pos_indices = z >= 0\n    z[neg_indices] = np.exp(z[neg_indices]) / (1 + np.exp(z[neg_indices]))\n    z[pos_indices] = 1 / (1 + np.exp(-z[pos_indices]))\n    return z.round(4).tolist() if isinstance(z, np.ndarray) else round(z, 4)"}
{"task_id": 222, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    positive = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (np.exp(z) + 1))\n    result = np.round(positive, 4)\n    if result.shape == ():\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    pos_mask = z >= 0\n    neg_mask = z < 0\n    z_pos = np.zeros_like(z)\n    z_neg = np.zeros_like(z)\n    z_pos[pos_mask] = z[pos_mask]\n    z_neg[neg_mask] = z[neg_mask]\n    result = np.zeros_like(z, dtype=float)\n    result[pos_mask] = 1 / (1 + np.exp(-z_pos[pos_mask]))\n    result[neg_mask] = np.exp(z_neg[neg_mask]) / (np.exp(z_neg[neg_mask]) + 1)\n    if np.isscalar(z):\n        return round(float(result), 4)\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    pos_mask = z >= 0\n    neg_mask = z < 0\n    z_pos = np.where(pos_mask, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    z_neg = np.where(neg_mask, np.exp(z) / (1 + np.exp(z)), 1 / (1 + np.exp(-z)))\n    result = 0.5 * (z_pos + z_neg)\n    if result.shape == ():\n        return round(result, 4)\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    pos_mask = z >= 0\n    neg_mask = z < 0\n    pos_sigmoid = np.zeros(z.shape)\n    pos_sigmoid[pos_mask] = 1.0 / (1 + np.exp(-z[pos_mask]))\n    neg_sigmoid = np.zeros(z.shape)\n    neg_sigmoid[neg_mask] = np.exp(z[neg_mask]) / (1 + np.exp(z[neg_mask]))\n    sigmoid = pos_sigmoid + neg_sigmoid\n    if len(sigmoid.shape) == 0:\n        return round(float(sigmoid), 4)\n    else:\n        return np.around(sigmoid, decimals=4).tolist()"}
{"task_id": 222, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    positive = z >= 0\n    negative = ~positive\n    result = np.empty(shape=z.shape)\n    result[positive] = 1 / (1 + np.exp(-z[positive]))\n    result[negative] = np.exp(z[negative]) / (1 + np.exp(z[negative]))\n    if result.shape == (1,):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element of *z*.\n    Args:\n        z: A scalar, nested list or numpy.ndarray of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n    Returns:\n        A Python list with the same structure as *z* where each value has \n        been transformed by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list) or isinstance(z, np.ndarray):\n        return leaky_relu_helper(np.array(z), a).tolist()\n    elif isinstance(z, (int, float, complex)):\n        return z if z >= 0 else a * z\n    else:\n        raise ValueError('Input must be a Python scalar, list, or numpy.ndarray')"}
{"task_id": 224, "completion_id": 1, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def process_element(z_element):\n        if isinstance(z_element, list):\n            return [process_element(sub_element) for sub_element in z_element]\n        else:\n            return max(z_element, a * z_element)\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    return process_element(z)"}
{"task_id": 224, "completion_id": 2, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_np = np.array(z)\n    activated_np = np.where(z_np >= 0, z_np, a * z_np)\n    activated_list = activated_np.tolist()\n    return activated_list\nz = [[1, -2, 0.5], [-0.3, 0.1, -3], [2, -1.5, 0]]"}
{"task_id": 224, "completion_id": 3, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    if isinstance(z, list):\n        return [leaky_relu(z_i, a) for z_i in z]\n    return max(z, a * z)"}
{"task_id": 224, "completion_id": 4, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list):\n        return [leaky_relu(i, a) for i in z]\n    elif isinstance(z, np.ndarray):\n        return (np.maximum(z, 0) + a * np.minimum(z, 0)).tolist()\n    else:\n        return z if z >= 0 else a * z"}
{"task_id": 224, "completion_id": 5, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\" Apply the Leaky ReLU activation to every element in *z*.\n    \n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n    \n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list):\n        return [leaky_relu(xi, a) for xi in z]\n    else:\n        return np.maximum(a * z, z).tolist()"}
{"task_id": 224, "completion_id": 6, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(a * z, z)"}
{"task_id": 224, "completion_id": 7, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list):\n        return [leaky_relu(x, a) for x in z]\n    else:\n        return np.maximum(a * z, z).tolist()"}
{"task_id": 224, "completion_id": 8, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z = np.array(z)\n    result = np.where(z >= 0, z, a * z)\n    return result.tolist()"}
{"task_id": 224, "completion_id": 9, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(item, a) for item in z]\n    else:\n        return max(z, 0) + a * min(z, 0)"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_feature, best_threshold, best_polarity) = (None, None, None)\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                polarities = [-1, 1]\n                for polarity in polarities:\n                    predictions = np.ones(np.shape(y_train))\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n                    error = np.sum(weights[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        clfs.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n        predictions = np.ones(np.shape(y_train))\n        negative_idx = best_polarity * X_train[:, best_feature] < best_polarity * best_threshold\n        predictions[negative_idx] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    output_y = []\n    for sample in X_test:\n        score = sum((alpha * (clf[2] * (1 if sample[clf[0]] < clf[1] else -1)) for (clf, alpha) in zip(clfs, alphas)))\n        output_y.append(-1 if score < 0 else 1)\n    return output_y"}
{"task_id": 226, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef get_stump(X, y, weights):\n    total_error = float('inf')\n    (best_feature_index, best_threshold, best_polarity) = (None, None, None)\n    for feature_i in range(X.shape[1]):\n        feature = X[:, feature_i]\n        thresholds = np.unique(feature)\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                predictions = polarity * np.where(feature < threshold, -1, 1)\n                error = np.sum(weights[y != predictions])\n                if error < total_error:\n                    total_error = error\n                    best_feature_index = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return (best_feature_index, best_threshold, best_polarity, total_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (N_samples, N_features) = X_train.shape\n    weights = np.ones(N_samples) / N_samples\n    ensemble = []\n    for _ in range(n_clf):\n        (feature_index, threshold, polarity, error) = get_stump(X_train, y_train, weights)\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        ensemble.append((feature_index, threshold, polarity, alpha))\n        predictions = polarity * np.where(X_train[:, feature_index] < threshold, -1, 1)\n        weights = weights * np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    final_predictions = np.zeros(X_test.shape[0])\n    for (feature_i, threshold, polarity, alpha) in ensemble:\n        predictions = polarity * np.where(X_test[:, feature_i] < threshold, -1, 1)\n        final_predictions += alpha * predictions\n    return np.sign(final_predictions).tolist()"}
{"task_id": 226, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef decision_stump(X: np.ndarray, y: np.ndarray, D: np.ndarray) -> dict:\n    \"\"\"\n    Generate the decision stump that will have the minimum error\n    with respect to the weights D\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    inf = math.inf\n    best_stump = {}\n    best_error = inf\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for threshold in unique_values:\n            polarity = 1\n            predictions = np.ones(y.shape)\n            predictions[X[:, feature_index] < threshold] = -1\n            error = np.sum(D[y != predictions])\n            if error > 0.5:\n                error = 1 - error\n                polarity = -1\n            if error < best_error:\n                best_error = error\n                best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n    return (best_stump, best_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        (stump, error) = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * math.log((1 - error + 1e-10) / (error + 1e-10))\n        predictions = np.ones(y_train.shape)\n        negative_idx = X_train[:, stump['feature_index']] < stump['threshold']\n        predictions[negative_idx] = -1\n        predictions *= stump['polarity']\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append(stump)\n        alphas.append(alpha)\n    final_predictions = np.zeros(X_test.shape[0])\n    for i in range(len(clfs)):\n        predictions = np.ones(X_test.shape[0])\n        negative_idx = X_test[:, clfs[i]['feature_index']] < clfs[i]['threshold']\n        predictions[negative_idx] = -1\n        final_predictions += alphas[i] * predictions\n    final_predictions = np.sign(final_predictions).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 226, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        best_err = float('inf')\n        for feature_i in range(n_features):\n            feature_values = np.expand_dims(X_train[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(np.shape(y_train))\n                predictions[X_train[:, feature_i] < threshold] = -1\n                miss = w[y_train != predictions]\n                error = sum(miss)\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < best_err:\n                    best_err = error\n                    clf = dict(polarity=polarity, threshold=threshold, feature_i=feature_i)\n        clf['alpha'] = 0.5 * np.log((1.0 - best_err) / (best_err + 1e-10))\n        predictions = np.ones(np.shape(y_train))\n        negative_idx = clf['polarity'] * X_train[:, clf['feature_i']] < clf['polarity'] * clf['threshold']\n        predictions[negative_idx] = -1\n        w *= np.exp(-clf['alpha'] * y_train * predictions)\n        w /= np.sum(w)\n        clfs.append(clf)\n    y_test = np.zeros((X_test.shape[0], 1))\n    for clf in clfs:\n        predictions = np.ones(np.shape(y_test))\n        negative_idx = clf['polarity'] * X_test[:, clf['feature_i']] < clf['polarity'] * clf['threshold']\n        predictions[negative_idx] = -1\n        y_test += clf['alpha'] * predictions\n    y_test[y_test >= 0] = 1\n    y_test[y_test < 0] = -1\n    return y_test.flatten().tolist()"}
{"task_id": 226, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_clf, best_error, best_pred) = (None, None, None)\n        for feature in range(n_features):\n            feature_values = np.sort(np.unique(X_train[:, feature]))\n            thresholds = (feature_values[1:] + feature_values[:-1]) / 2\n            for polarity in [-1, 1]:\n                for threshold in thresholds:\n                    pred = polarity * np.ones(n_samples)\n                    pred[X_train[:, feature] * polarity <= threshold * polarity] = -1\n                    error = np.sum(weights[pred != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_error = error\n                        best_clf = (feature, threshold, polarity)\n                        best_pred = pred.copy()\n        clf_weight = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        weights = weights * np.exp(-clf_weight * y_train * best_pred)\n        weights /= np.sum(weights)\n        clfs.append((best_clf, clf_weight))\n    y_pred = np.zeros(X_test.shape[0])\n    for (clf, clf_weight) in clfs:\n        (feature, threshold, polarity) = clf\n        pred = polarity * np.ones(X_test.shape[0])\n        pred[X_test[:, feature] * polarity <= threshold * polarity] = -1\n        y_pred += clf_weight * pred\n    return [1 if s > 0 else -1 for s in y_pred]"}
{"task_id": 226, "completion_id": 5, "solution": "import numpy as np\ndef distrete_stump_predict(X: np.ndarray, feature_index: int, threshold: float, polarity: int):\n    predicts = np.ones(X.shape[0])\n    if polarity == 1:\n        predicts[X[:, feature_index] > threshold] = -1\n    else:\n        predicts[X[:, feature_index] < threshold] = -1\n    return predicts\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    y_train_prim = np.copy(y_train)\n    y_train_prim[y_train_prim == 0] = -1\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    pred_classes = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_index]\n            thresholds = np.unique(feature_values)\n            polarity = 1\n            for threshold in thresholds:\n                predictions = np.ones(y_train_prim.shape)\n                predictions[X_train[:, feature_index] < threshold] = -1\n                error = np.sum(weights[predictions != y_train_prim])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    clf = (threshold, feature_i, polarity)\n        clf_preds = distrete_stump_predict(X_train, clf[1], clf[0], clf[2])\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        weights = weights * np.exp(-alpha * y_train_prim * clf_preds)\n        weights = weights / np.sum(weights)\n        y_train_pred = alpha * clf_preds\n        pred_classes.append(y_train_pred)\n    pred_weights = np.array(pred_classes)\n    ensemble_preds = np.sign(np.sum(pred_weights, axis=0))\n    ensemble_preds[ensemble_preds == 0] = 1\n    return ensemble_preds.tolist()\nX_train = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny_train = np.array([1, 0, 1])\nX_test = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nn_clf = 2\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf)"}
{"task_id": 226, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n\n    def build_stump(weights, X, y):\n        (m, n) = X.shape\n        num_step = 10\n        min_error = np.inf\n        best_stump = {}\n        predict_vals = np.ones(np.shape(X)[0])\n        for feature_index in range(n):\n            feature_values = X[:, feature_index]\n            (range_min, range_max) = (feature_values.min(), feature_values.max())\n            step_size = (range_max - range_min) / num_step\n            for j in range(-1, int(num_step) + 1):\n                for polarity in [-1, 1]:\n                    threshold = range_min + step_size * j\n                    predictions = np.ones(np.shape(X)[0])\n                    predictions[X[:, feature_index] < threshold] = polarity\n                    error = np.sum(weights[predictions != y])\n                    if error < min_error:\n                        min_error = error\n                        best_stump['feature_index'] = feature_index\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n                        predict_vals = predictions\n        return (best_stump, min_error, predict_vals)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clf_arr = []\n    for _ in range(n_clf):\n        (best_stump, error, predict_vals) = build_stump(weights, X_train, y_train)\n        alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        best_stump['alpha'] = alpha\n        weights = weights * np.exp(-alpha * y_train * predict_vals)\n        weights = weights / weights.sum()\n        clf_arr.append(best_stump)\n    predict_vals = np.zeros(len(X_test))\n    for clf in clf_arr:\n        predictions = np.ones(np.shape(X_test)[0])\n        feature_index = clf['feature_index']\n        threshold = clf['threshold']\n        polarity = clf['polarity']\n        predictions[X_test[:, feature_index] < threshold] = polarity\n        predict_vals += clf['alpha'] * predictions\n    return [int(np.sign(x)) for x in predict_vals]"}
{"task_id": 226, "completion_id": 7, "solution": "import numpy as np\ndef train_decision_stump(X, y, weights):\n    \"\"\"Train a decision stump.\"\"\"\n    num_features = X.shape[1]\n    total_error = float('inf')\n    best_stump = None\n    for feature in range(num_features):\n        feature_values = X[:, feature]\n        thresholds = np.unique(feature_values)\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = polarity * np.ones(y.shape)\n                predictions[feature_values < threshold] = -polarity\n                error = np.sum(weights[predictions != y])\n                if error < total_error:\n                    total_error = error\n                    best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n    return (best_stump, total_error)\ndef adaboost_predict(X_train, y_train, X_test, n_clf):\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    (num_samples, num_features) = X_train.shape\n    weights = np.ones(num_samples) / num_samples\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        (best_stump, error) = train_decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predictions = np.ones(y_train.shape)\n        negative = best_stump['polarity'] * -1\n        predictions[X_train[:, best_stump['feature']] < best_stump['threshold']] = negative\n        weights = weights * np.exp(-alpha * y_train * predictions)\n        weights = weights / np.sum(weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    final_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in zip(stumps, alphas):\n        predictions = np.ones(X_test.shape[0])\n        negative = stump['polarity'] * -1\n        predictions[X_test[:, stump['feature']] < stump['threshold']] = negative\n        final_predictions += alpha * predictions\n    y_pred = [1 if sample > 0 else -1 for sample in final_predictions]\n    return y_pred"}
{"task_id": 226, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    clfs = []\n    for _ in range(n_clf):\n        (best_feature, best_threshold, best_polarity, min_error) = (None, None, None, float('inf'))\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            uniques = np.unique(feature_values)\n            for threshold in uniques:\n                predictions = np.ones(n_samples)\n                predictions[feature_values < threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n                predictions = np.ones(n_samples)\n                predictions[feature_values >= threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = 1\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n        alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = np.ones(n_samples)\n        negative_idx = best_polarity * X_train[:, best_feature] < best_polarity * best_threshold\n        predictions[negative_idx] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= weights.sum()\n        clfs.append((best_feature, best_threshold, best_polarity, alpha))\n    predictions = np.zeros((X_test.shape[0], n_clf))\n    for (i, (feature_i, threshold, polarity, alpha)) in enumerate(clfs):\n        positive_idx = polarity * X_test[:, feature_i] < polarity * threshold\n        predictions[positive_idx, i] = 1\n        predictions[~positive_idx, i] = -1\n    y_pred = []\n    for sample_predictions in predictions:\n        y_pred.append(np.sign(np.sum(sample_predictions)))\n    return y_pred"}
{"task_id": 226, "completion_id": 9, "solution": "import numpy as np\ndef calculate_error(y, y_pred, w):\n    return np.sum(w[y != y_pred])\ndef calculate_alpha(error):\n    return 0.5 * np.log((1.0 - error) / (error + 1e-10))\ndef update_weights(w, alpha, y, y_pred):\n    return w * np.exp(-alpha * y * y_pred)\ndef train_stump(X, y, w):\n    (n_samples, n_features) = X.shape\n    min_error = np.inf\n    for feature_index in range(n_features):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                y_pred = polarity * np.ones(n_samples)\n                y_pred[X[:, feature_index] * polarity < threshold * polarity] = -1\n                error = calculate_error(y, y_pred, w)\n                if error < min_error:\n                    min_error = error\n                    best_stump = (feature_index, threshold, polarity)\n    alpha = calculate_alpha(min_error)\n    return (best_stump, alpha)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    w = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_clf):\n        (stump, alpha) = train_stump(X_train, y_train, w)\n        stumps.append((stump, alpha))\n        y_pred = np.ones(n_samples)\n        (feature_index, threshold, polarity) = stump\n        y_pred[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n        w = update_weights(w, alpha, y_train, y_pred)\n    y_pred = np.zeros(X_test.shape[0])\n    for (stump, alpha) in stumps:\n        (feature_index, threshold, polarity) = stump\n        y_pred_stump = polarity * np.ones(X_test.shape[0])\n        y_pred_stump[X_test[:, feature_index] * polarity < threshold * polarity] = -1\n        y_pred += alpha * y_pred_stump\n    return [1 if y >= 0 else -1 for y in y_pred]"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    num_rows = shape[0]\n    num_cols = 1\n    for dim in shape[1:]:\n        num_cols *= dim\n    A = np.random.standard_normal(size=(num_rows, num_cols))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt.T\n    result = np.reshape(Q, shape) * scale\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        mat = flat @ flat.T\n    else:\n        mat = flat.T @ flat\n    if np.allclose(mat, scale ** 2 * np.eye(mat.shape[0]), atol=1e-06):\n        return result.tolist()\n    else:\n        return -1"}
{"task_id": 241, "completion_id": 1, "solution": "import numpy as np\nfrom scipy.linalg import qr\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions\n        are orthogonal up to the given scaling factor.  If `shape` has fewer\n        than two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    n = np.prod(shape[0:2])\n    d = np.prod(shape[2:])\n    m = min(n, d)\n    A = np.random.randn(n, m)\n    (U, _, _) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = A.T @ U\n    weights = Q.reshape(shape) * scale\n    return weights.tolist()"}
{"task_id": 241, "completion_id": 2, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired ouput shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n    (U, _, _) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else U.T\n    result = Q.reshape(shape).astype(np.float32) * scale\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)"}
{"task_id": 241, "completion_id": 3, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    if len(shape) < 2:\n        return -1\n    (d0, d_remaining) = (shape[0], shape[1:])\n    d_remaining_prod = np.prod(d_remaining)\n    A = np.random.normal(0, 1, (d0, d_remaining_prod))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt.T\n    result = Q.reshape(shape) * scale\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)"}
{"task_id": 241, "completion_id": 4, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    mat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.standard_normal(mat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = Q_choice(U, Vt)\n    Q = Q.reshape(shape)\n    result = (scale * Q).tolist()\n    assert satisfy_orthogonality(result, scale)\n    return result\ndef Q_choice(U, Vt):\n    if U.shape == (Vt.T.shape[0], Vt.shape[1]):\n        return U\n    else:\n        return Vt.T\ndef satisfy_orthogonality(array, scale):\n    arr = np.array(array)\n    flat = arr.reshape(arr.shape[0], -1)\n    identity = np.eye(flat.shape[0])\n    return np.allclose(flat @ flat.T, scale ** 2 * identity, atol=1e-06)\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 5, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    if len(shape) < 2:\n        return -1\n    (d0, dn) = (shape[0], int(np.prod(shape[1:])))\n    A = np.random.normal(size=(d0, dn))\n    (U, _, Vt) = np.linalg.svd(A)\n    Q = U if U.shape == A.shape else Vt\n    result = Q.reshape(shape) * scale\n    flat = result.reshape(shape[0], -1)\n    assert_val = scale ** 2 * np.eye(shape[0])\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, assert_val, atol=1e-06)\n    else:\n        assert np.allclose(flat.T @ flat, assert_val, atol=1e-06)\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 6, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    if len(shape) < 2:\n        return -1\n    A = np.random.standard_normal(shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == shape else Vt.T\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 7, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    if len(shape) < 2:\n        return -1\n    matrix_length = shape[0]\n    if len(shape) > 2:\n        matrix_length *= np.prod(shape[1:])\n    A = np.random.normal(size=(shape[0], matrix_length))\n    (U, _, V_t) = np.linalg.svd(A, full_matrices=True)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = V_t.T\n    Q = np.reshape(Q, newshape=shape)\n    Q = Q * scale\n    return Q.tolist()"}
{"task_id": 241, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    dn = np.product(shape[1:])\n    (U, \u03a3, V) = svd(np.random.randn(d0, dn))\n    if U.shape == (d0, np.min([d0, dn])):\n        Q = U * \u03a3 ** 0.5\n    else:\n        Q = \u03a3 ** 0.5 @ V\n    return (Q * scale).reshape(shape).tolist()"}
{"task_id": 241, "completion_id": 9, "solution": "import numpy as np\nfrom numpy.linalg import svd\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(0, 1, shape[0] * shape[1:].num_elements()).reshape(shape[0], -1)\n    (_, s, V) = svd(A)\n    if A.shape[0] <= A.shape[1]:\n        Q = A\n    else:\n        Q = V.T\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = np.maximum(0, 4 * z1)\n    z3 = np.maximum(0, 4 * z2)\n    logits = 4 * z3\n    state_value = 4 * z3\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = 4 * z3\n    return ([round(prob, 4) for prob in action_probs], round(state_value, 4))"}
{"task_id": 243, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weight = np.ones((4, 4))\n    bias = np.zeros(4)\n    z1 = np.maximum(0, np.dot(state, weight) + bias)\n    for _ in range(2):\n        z1 = np.maximum(0, np.dot(z1, weight) + bias)\n    actor_weight = np.ones((4, 3))\n    actor_bias = np.zeros(3)\n    logits = np.dot(z1, actor_weight) + actor_bias\n    action_probs = np.exp(logits) / np.exp(logits).sum()\n    critic_weight = np.ones((4, 1))\n    critic_bias = np.zeros(1)\n    state_value = np.dot(z1, critic_weight) + critic_bias\n    return ([round(prob, 4) for prob in action_probs.tolist()], round(float(state_value), 4))"}
{"task_id": 243, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    weights = np.ones((4, 4))\n    biases = np.zeros(4)\n    actor_weights = np.ones((4, 3))\n    actor_biases = np.zeros(3)\n    critic_weights = np.ones(4)\n    critic_bias = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, weights) + biases)\n    z2 = np.maximum(0, np.dot(z1, weights) + biases)\n    z3 = np.maximum(0, np.dot(z2, weights) + biases)\n    logits = np.dot(z3, actor_weights) + actor_biases\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, critic_weights) + critic_bias\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value[0], 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weights = np.full(shape=(4, 4), fill_value=1.0)\n    biases = np.full(shape=4, fill_value=0.0)\n    actor_weights = np.full(shape=(4, 3), fill_value=1.0)\n    actor_biases = np.full(shape=3, fill_value=0.0)\n    critic_weights = np.full(shape=4, fill_value=1.0)\n    critic_biases = 0.0\n    state_sum = sum(state)\n    relu_s = np.vectorize(lambda x: max(0, x))\n    z1 = relu_s(state_sum)\n    z1_ww = np.matmul(np.array([z1, z1, z1, z1]), weights)\n    z2 = relu_s(z1_ww + biases)\n    z2_ww = np.matmul(z2, weights)\n    z3 = relu_s(z2_ww + biases)\n    logits = np.matmul(z3, actor_weights) + actor_biases\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.matmul(z3, critic_weights) + critic_biases\n    return ([round(i, 4) for i in action_probs], round(state_value.item(), 4))\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    W = np.ones((4, 4))\n    b = np.zeros(4)\n    We = np.ones((4, 3))\n    be = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W) + b)\n    z2 = np.maximum(0, np.dot(z1, W) + b)\n    z3 = np.maximum(0, np.dot(z2, W) + b)\n    logits = np.dot(z3, We) + be\n    action_probs = np.exp(logits) / np.exp(logits).sum()\n    state_value = np.dot(z3, Wc) + bc\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value[0], 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 16 * z1\n    logits = 64 * z1\n    action_probs = np.round([1 / 3] * 3, 4)\n    state_value = np.round(64 * z1, 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 16 * z1\n    logits = 64 * z1\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = list(np.round(action_probs, 4))\n    state_value = 4 * logits\n    return (action_probs, np.round(state_value, 4))"}
{"task_id": 243, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weights = np.ones((4, 4))\n    biases = np.zeros(4)\n    actor_weights = np.ones(4)\n    actor_bias = np.zeros(3)\n    critic_weights = np.ones(4)\n    critic_bias = 0\n    z1 = np.maximum(0, np.dot(state, weights) + biases)[0]\n    z2 = np.maximum(0, np.dot(z1, weights) + biases)\n    z3 = np.maximum(0, np.dot(z2, weights) + biases)\n    logits = np.dot(z3, actor_weights) + actor_bias\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (np.dot(z3, critic_weights) + critic_bias)[0]\n    return (np.round(action_probs, 4), np.round(state_value, 4))\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state).reshape(-1, 1)\n    W1 = W2 = W3 = Wa = Wc = np.ones_like(state) * 1.0\n    b1 = b2 = b3 = ba = bc = np.zeros_like(state) * 0.0\n    z1 = np.maximum(0, np.sum(state) + b1)\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    logits = z3 @ Wa + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (z3 @ Wc + bc)[0]\n    action_probs = [round(prob, 4) for prob in action_probs.flatten()]\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    params = {key: np.array(value) for (key, value) in params.items()}\n    h = np.maximum(0, np.matmul(state, params['W1']) + params['b1'])\n    h = np.maximum(0, np.matmul(h, params['W2']) + params['b2'])\n    h = np.maximum(0, np.matmul(h, params['W3']) + params['b3'])\n    logits = np.matmul(h, params['Wa']) + params['ba']\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n    probabilities = [round(prob, 4) for prob in probabilities.tolist()]\n    value = np.matmul(h, params['Wc']) + params['bc']\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    state = np.array(state)\n    z1 = np.dot(params['W1'], state) + params['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = np.dot(params['W2'], a1) + params['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = np.dot(params['W3'], a2) + params['b3']\n    a3 = np.maximum(z3, 0)\n    z_actor = np.dot(params['Wa'], a3) + params['ba']\n    probabilities = np.exp(z_actor) / np.sum(np.exp(z_actor))\n    value = np.dot(params['Wc'], a3) + params['bc']\n    probabilities = [round(p, 4) for p in list(probabilities)]\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    (W1, b1, W2, b2, W3, b3, Wa, ba, Wc, bc) = map(np.array, params.values())\n    h1 = np.maximum(0, np.dot(W1, state) + b1)\n    h2 = np.maximum(0, np.dot(W2, h1) + b2)\n    h3 = np.maximum(0, np.dot(W3, h2) + b3)\n    logits = np.dot(Wa, h3) + ba\n    probabilities = np.exp(logits - np.max(logits)) / np.exp(logits - np.max(logits)).sum()\n    value = np.dot(Wc, h3) + bc\n    probabilities = [round(i, 4) for i in probabilities.tolist()]\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n    \n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n    \n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    params = {k: np.array(v) for (k, v) in params.items()}\n    hidden = np.maximum(0, np.dot(params['W1'], state) + params['b1'])\n    hidden = np.maximum(0, np.dot(params['W2'], hidden) + params['b2'])\n    hidden = np.maximum(0, np.dot(params['W3'], hidden) + params['b3'])\n    logits = np.dot(params['Wa'], hidden) + params['ba']\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n    value = np.dot(params['Wc'], hidden) + params['bc']\n    probabilities = [round(p, 4) for p in probabilities.tolist()]\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state, params):\n    (W1, b1, W2, b2, W3, b3) = [np.array(params[param]) for param in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3']]\n    (Wa, ba) = [np.array(params[param]) for param in ['Wa', 'ba']]\n    (Wc, bc) = [np.array(params[param]) for param in ['Wc', 'Wc', 'bc']]\n    z1 = np.dot(W1, state) + b1\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(W2, a1) + b2\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(W3, a2) + b3\n    a3 = np.maximum(0, z3)\n    logits = np.dot(Wa, a3) + ba\n    probabilities = softmax(logits).tolist()\n    value = np.dot(Wc, a3) + bc\n    probabilities = [round(p, 4) for p in probabilities[0]]\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\"\"\"\n    state = np.array(state)\n    W1 = np.array(params['W1'])\n    b1 = np.array(params['b1'])\n    W2 = np.array(params['W2'])\n    b2 = np.array(params['b2'])\n    W3 = np.array(params['W3'])\n    b3 = np.array(params['b3'])\n    Wa = np.array(params['Wa'])\n    ba = np.array(params['ba'])\n    Wc = np.array(params['Wc'])\n    bc = np.array(params['bc'])\n    z1 = np.dot(state, W1) + b1\n    h1 = np.maximum(0, z1)\n    z2 = np.dot(h1, W2) + b2\n    h2 = np.maximum(0, z2)\n    z3 = np.dot(h2, W3) + b3\n    h3 = np.maximum(0, z3)\n    z_a = np.dot(h3, Wa) + ba\n    z_c = np.dot(h3, Wc) + bc\n    actor_probs = np.exp(z_a) / np.exp(z_a).sum()\n    rounded_actor_probs = [round(prob, 4) for prob in actor_probs]\n    critic_value = z_c[0]\n    rounded_critic_value = round(critic_value, 4)\n    return (rounded_actor_probs, rounded_critic_value)\nparams = {'W1': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], 'b1': [0.1, 0.1], 'W2': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], 'b2': [0.1, 0.1], 'W3': [[0.1, 0.2], [0.4, 0.5]], 'b3': [0.1, 0.1], 'Wa': [[0.1, 0.2]], 'ba': [0.1], 'Wc': [[0.1, 0.2]], 'bc': [0.1]}\nstate = [1, 2, 3]"}
{"task_id": 249, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    shared_layer1 = np.clip(np.dot(params['W1'], state) + params['b1'], 0, None)\n    shared_layer2 = np.clip(np.dot(params['W2'], shared_layer1) + params['b2'], 0, None)\n    shared_layer3 = np.dot(params['W3'], shared_layer2) + params['b3']\n    actor_head = np.dot(params['Wa'], shared_layer3) + params['ba']\n    probabilities = np.exp(actor_head) / np.sum(np.exp(actor_head))\n    value = np.dot(params['Wc'], shared_layer3) + params['bc']\n    probabilities = np.round(probabilities, 4).tolist()\n    value = round(value.item(), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n    hidden_layer1 = np.maximum(0, np.dot(params['W1'], state) + params['b1'])\n    hidden_layer2 = np.maximum(0, np.dot(params['W2'], hidden_layer1) + params['b2'])\n    shared_output = np.maximum(0, np.dot(params['W3'], hidden_layer2) + params['b3'])\n    actor_head_output = np.dot(params['Wa'], shared_output) + params['ba']\n    probabilities = softmax(actor_head_output).tolist()\n    value = float(np.dot(params['Wc'], shared_output) + params['bc'])\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value, 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.expand_dims(state, axis=0)\n    state = np.maximum(np.dot(state, params['W1']) + params['b1'], 0)\n    state = np.maximum(np.dot(state, params['W2']) + params['b2'], 0)\n    state = np.maximum(np.dot(state, params['W3']) + params['b3'], 0)\n    actor = np.dot(state, params['Wa']) + params['ba']\n    value = np.dot(state, params['Wc']) + params['bc'][0]\n    exp_actor = np.exp(actor - np.max(actor))\n    probabilities = exp_actor / np.sum(exp_actor)\n    probabilities = np.around(probabilities, 4).tolist()\n    value = np.around(value[0][0], 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    h1 = np.maximum(0, np.dot(state, params['W1']) + params['b1'])\n    h2 = np.maximum(0, np.dot(h1, params['W2']) + params['b2'])\n    h3 = np.maximum(0, np.dot(h2, params['W3']) + params['b3'])\n    logits = np.dot(h3, params['Wa']) + params['ba']\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n    value = float(np.dot(h3, params['Wc']) + params['bc'])\n    return ([round(p, 4) for p in probabilities], round(value, 4))"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.linalg.norm(w, 1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    penalty_value = alpha * (l1_penalty + l2_penalty)\n    if gradient:\n        gradient_value = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(gradient_value, 4).tolist()\n    else:\n        return round(penalty_value, 4)"}
{"task_id": 253, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    if isinstance(w, list):\n        w = np.array(w)\n    w_l2_norm = np.linalg.norm(w, ord=2)\n    penalty = alpha * (l1_ratio * w_l2_norm + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return gradient.round(4).tolist()\n    return round(penalty, 4)"}
{"task_id": 253, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [np.round(value, 4) for value in grad]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 2) + 0.5 * (1 - l1_ratio) * np.linalg.norm(w, 2) ** 2)\n        return np.round(penalty, 4)"}
{"task_id": 253, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"\n    Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if not gradient:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 2) + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n    else:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(elem, 4) for elem in gradient.tolist()]"}
{"task_id": 253, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    penalty = alpha * (l1_ratio * np.linalg.norm(w, 2) + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(gradient, 4).tolist()\n    return np.round(penalty, 4)\nw = np.array([1, 2, 3])\nalpha = 0.1\nl1_ratio = 0.5\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\ngradient = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)"}
{"task_id": 253, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if not gradient:\n        R = alpha * (l1_ratio * np.linalg.norm(w, 2) + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n        return round(R, 4)\n    else:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in gradient.tolist()]"}
{"task_id": 253, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_np = np.array(w)\n    penalty = alpha * (l1_ratio * np.linalg.norm(w_np, 1) + (1 - l1_ratio) * 0.5 * np.dot(w_np, w_np))\n    gradient_value = alpha * (l1_ratio * np.sign(w_np) + (1 - l1_ratio) * w_np)\n    if gradient:\n        return np.round(gradient_value, 4).tolist()\n    else:\n        return np.round(penalty, 4)\nw = [1.2, -3.4, 5.6]\nalpha = 0.3\nl1_ratio = 0.3\ngradient_value = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)"}
{"task_id": 253, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad_w = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(val, 4) for val in grad_w.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=2) + 0.5 * (1 - l1_ratio) * np.dot(w, w))\n        return round(penalty, 4)\nw = [1, 2, 3, 4, 5]\nalpha = 0.1\nl1_ratio = 0.2"}
{"task_id": 253, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.sign(w)\n    l2_penalty = (1 - l1_ratio) * 0.5 * w\n    penalty = alpha * (np.linalg.norm(w) * l2_penalty + np.dot(w, l1_penalty))\n    grad = alpha * (l1_penalty + l2_penalty)\n    if gradient:\n        return [round(g, 4) for g in grad]\n    else:\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    penalty = alpha * (l1_ratio * np.linalg.norm(w, 2) + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n    grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n    if gradient:\n        return np.round(grad, 4).tolist()\n    else:\n        return np.round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    original_parameter = model.parameters[param_name]\n    grads = np.zeros_like(original_parameter, dtype=np.float64)\n    for (idx, _) in np.ndenumerate(original_parameter):\n        model.flush_gradients()\n        initial_predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        initial_loss = loss_func(initial_predictions)\n        model.parameters[param_name][idx] += epsilon\n        final_predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        final_loss = loss_func(final_predictions)\n        grads[idx] = (final_loss - initial_loss) / (2 * epsilon)\n        model.parameters[param_name] = deepcopy(original_parameter)\n        model.parameters[param_name][idx] -= epsilon\n        initial_predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        initial_loss = loss_func(initial_predictions)\n        grads[idx] += (initial_loss - final_loss) / (2 * epsilon)\n        model.parameters[param_name] = deepcopy(original_parameter)\n    return grads.T"}
{"task_id": 256, "completion_id": 1, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name in ['X', 'y']:\n        return None\n    param_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    grads = np.zeros_like(model.parameters[param_name], dtype=np.float64)\n    if model.parameters[param_name].ndim < 3:\n        model.parameters[param_name].reshape((-1, 1, 1))\n    original_params = deepcopy(model.parameters[param_name])\n    for (idx, _) in np.ndenumerate(original_params):\n        model.parameters[param_name][idx] = original_params[idx] + epsilon\n        preds_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        L_plus = loss_func(preds_plus)\n        model.parameters[param_name][idx] = original_params[idx] - epsilon\n        preds_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        L_minus = loss_func(preds_minus)\n        grads[idx] = (L_plus - L_minus) / (2 * epsilon)\n        model.parameters[param_name][idx] = original_params[idx]\n    model.flush_gradients()\n    return grads.T"}
{"task_id": 256, "completion_id": 2, "solution": "import numpy as np\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name == 'X' or param_name == 'y':\n        return None\n    elif param_name == 'Ba' or param_name == 'Bx':\n        param_name = param_name.lower()\n    grads = np.zeros_like(model.parameters[param_name], dtype=np.float64)\n    original_weights = model.parameters[param_name].copy()\n    for ix in np.ndindex(model.parameters[param_name].shape):\n        model.parameters[param_name][ix] = original_weights[ix] + epsilon\n        plus_loss = loss_func([model.forward(X[:, :, t]) for t in range(n_t)])\n        model.parameters[param_name][ix] = original_weights[ix] - epsilon\n        min_loss = loss_func([model.forward(X[:, :, t]) for t in range(n_t)])\n        model.parameters[param_name][ix] = original_weights[ix]\n        grads[ix] = (plus_loss - min_loss) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 3, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    param_name = param_name.lower()\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        model_param = model.parameters[param_name.lower()]\n    else:\n        model_param = model.parameters[param_name]\n    grads = np.zeros_like(model_param, dtype=np.float64)\n    for (idx, _) in np.ndenumerate(model_param):\n        model_param[idx] += epsilon\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t].astype(np.float64)))\n        loss_plus = loss_func(preds)\n        model_param[idx] -= 2 * epsilon\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t].astype(np.float64)))\n        loss_min = loss_func(preds)\n        grads[idx] = (loss_plus - loss_min) / (2 * epsilon)\n        model_param[idx] += epsilon\n    return grads.T"}
{"task_id": 256, "completion_id": 4, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name.lower() in ['x', 'y']:\n        return None\n    param_name = param_name.lower() if param_name.lower() in ['ba', 'bx'] else param_name\n    model_copy = deepcopy(model)\n    backup_params = deepcopy(model.parameters)\n    grads = np.zeros_like(backup_params[param_name], dtype=np.float64).ravel()\n    for idx in np.ndindex(grads.shape):\n        model.parameters[param_name][idx] = backup_params[param_name][idx] + epsilon\n        preds_p = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(preds_p)\n        model.parameters[param_name][idx] = backup_params[param_name][idx] - epsilon\n        preds_m = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(preds_m)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        model.parameters[param_name][idx] = backup_params[param_name][idx]\n    model.parameters = backup_params\n    model.flush_gradients()\n    return grads.reshape(backup_params[param_name].shape).T"}
{"task_id": 256, "completion_id": 5, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    grads = np.empty_like(model.parameters[param_name.lower()], dtype=np.float64)\n    if param_name in ['X', 'y']:\n        return None\n    elif param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    for (idx, _) in np.ndenumerate(model.parameters[param_name]):\n        model.parameters[param_name][idx] += epsilon\n        predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(predictions)\n        model.parameters[param_name][idx] -= 2 * epsilon\n        predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(predictions)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        model.parameters[param_name][idx] += epsilon\n    return grads.T"}
{"task_id": 256, "completion_id": 6, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name == 'X' or param_name == 'y':\n        return None\n    if param_name == 'Ba' or param_name == 'Bx':\n        param_name = param_name.lower()\n    grads = np.zeros_like(model.parameters[param_name], dtype=np.float64)\n    for (index, _) in np.ndenumerate(model.parameters[param_name]):\n        model.parameters[param_name][index] += epsilon\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(preds)\n        model.parameters[param_name][index] -= 2 * epsilon\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(preds)\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n        model.parameters[param_name][index] += epsilon\n    return grads.T"}
{"task_id": 256, "completion_id": 7, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param_arr = model.parameters[param_name]\n    grads = np.zeros_like(param_arr, dtype=np.float64)\n    for (index, _) in np.ndenumerate(param_arr):\n        original_param = param_arr[index]\n        param_arr[index] = original_param + epsilon\n        loss_plus = loss_func(model.forward(X))\n        param_arr[index] = original_param - epsilon\n        loss_minus = loss_func(model.forward(X))\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n        param_arr[index] = original_param\n    model.flush_gradients()\n    return grads.T"}
{"task_id": 256, "completion_id": 8, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"\n    Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in {'X', 'y'}:\n        return None\n    if param_name in {'Ba', 'Bx'}:\n        param_name = param_name.lower()\n    param_value = model.parameters[param_name]\n    grads = np.zeros_like(param_value, dtype=np.float64)\n    for (idx, _) in np.ndenumerate(param_value):\n        param_value[idx] += epsilon\n        model.parameters[param_name] = param_value.copy()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_plus = loss_func(predictions)\n        param_value[idx] -= 2 * epsilon\n        model.parameters[param_name] = param_value.copy()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_minus = loss_func(predictions)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        param_value[idx] += epsilon\n    model.parameters[param_name] = param_value.copy()\n    model.flush_gradients()\n    return grads.T"}
{"task_id": 256, "completion_id": 9, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in {'X', 'y'}:\n        return None\n    if param_name in {'Ba', 'Bx'}:\n        param_name = param_name.lower()\n    original_params = deepcopy(model.parameters[param_name])\n    grads = np.zeros_like(model.parameters[param_name])\n    it = np.nditer(original_params, flags=['multi_index'])\n    while not it.finished:\n        i = it.multi_index\n        original_params[i] += epsilon\n        cost_1 = loss_func(model.forward(X))\n        original_params[i] -= 2 * epsilon\n        cost_2 = loss_func(model.forward(X))\n        grads[i] = (cost_1 - cost_2) / (2 * epsilon)\n        original_params[i] = model.parameters[param_name][i]\n        it.iternext()\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    n_clf = max(n_clf, 1)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    error_rates = []\n    for _ in range(n_clf):\n        (best_stump, best_error, best_predict) = ({}, np.inf, None)\n        for feature in range(n):\n            values = np.unique(X_train[:, feature])\n            for split in map(lambda x: (x[0] + x[1]) / 2.0, zip(values[:-1], values[1:])):\n                predict = feature_split_predict(X_train, feature, split)\n                weighted_error = np.sum(weights[predict != y_train])\n                if weighted_error < best_error:\n                    best_stump['feature'] = feature\n                    best_stump['split'] = split\n                    best_predict = predict.copy()\n                    best_error = weighted_error\n        total_error = np.sum(weights)\n        best_stump['alpha'] = 0.5 * np.log((1.0 - best_error) / best_error)\n        weights = weights * np.exp(-best_stump['alpha'] * y_train * best_predict)\n        weights = weights / np.sum(weights)\n        stumps.append(best_stump)\n        error_rates.append(best_error)\n    predictions = np.sign(np.sum([stump['alpha'] * feature_split_predict(X_test, stump['feature'], stump['split']) for stump in stumps], axis=0))\n    return predictions.tolist()\ndef feature_split_predict(X: np.ndarray, feature: int, split: float) -> np.ndarray:\n    return np.where(X[:, feature] > split, 1, -1)"}
{"task_id": 257, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    y_train = np.where(y_train == 0, -1, 1)\n    K = min(n_clf, n)\n    stumps = []\n    for _ in range(K):\n        (best_stump, error, split_variable, split_point) = (None, float('inf'), None, None)\n        for split_var in range(n):\n            values = np.sort(np.unique(X_train[:, split_var]))\n            for theta in (values[:-1] + values[1:]) / 2.0:\n                p = 1\n                predictions = p * np.sign(X_train[:, split_var] - theta)\n                err = np.sum(weights[predictions != y_train])\n                if err > 0.5:\n                    err = 1 - err\n                    p *= -1\n                if err < error:\n                    best_stump = p\n                    error = err\n                    split_variable = split_var\n                    split_point = theta\n        scale = np.sqrt((1 - error) / error)\n        predictions = scale * np.sign(X_train[:, split_variable] - split_point)\n        weights *= np.exp(-y_train * predictions)\n        weights /= np.sum(weights)\n        y_pred = scale * np.sign(X_train[:, split_variable] - split_point)\n        stumps.append((np.log((1 - error) / error), best_stump, split_variable, split_point))\n    y_pred = np.zeros(X_test.shape[0])\n    for (alpha, ss, sv, theta) in stumps:\n        y_pred += alpha * (ss * np.sign(X_test[:, sv] - theta))\n    return [1 if i > 0 else -1 for i in y_pred]"}
{"task_id": 257, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    assert X_train.shape[0] == y_train.shape[0]\n    assert n_clf > 0\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n    for _ in range(n_clf):\n        (best_feature, best_split, best_error, best_side) = (None, None, np.inf, None)\n        for feature in range(n):\n            for split in np.unique(X_train[:, feature]):\n                left_indices = X_train[:, feature] < split\n                left_weights = weights[left_indices]\n                right_weights = weights[~left_indices]\n                error = min(np.sum(left_weights), np.sum(right_weights))\n                if error < best_error:\n                    (best_feature, best_split, best_error, best_side) = (feature, split, error, left_indices)\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        predictions = np.ones(m)\n        predictions[best_side] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append((best_feature, best_split, alpha, best_side))\n\n    def predict(x):\n        votes = [alpha * (1 if x[feature] < split else -1) for (feature, split, alpha, _) in clfs]\n        return 1 if sum(votes) > 0 else -1\n    return [predict(x) for x in X_test]"}
{"task_id": 257, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (X_train, y_train, X_test) = (X_train.astype(float), y_train.astype(float), X_test.astype(float))\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    classifiers = []\n    for _ in range(n_clf):\n        (feature, threshold) = (None, None)\n        min_error = float('inf')\n        preds = np.ones(np.shape(y_train))\n        for j in range(n):\n            for i in range(m):\n                threshold_val = X_train[i, j]\n                preds[np.where(X_train[:, j] >= threshold_val)] = 1\n                preds[np.where(X_train[:, j] < threshold_val)] = -1\n                error = sum(weights[np.where(preds != y_train)])\n                if error > 0.5:\n                    error = 1 - error\n                    preds *= -1\n                if error < min_error:\n                    min_error = error\n                    feature = j\n                    threshold = threshold_val\n        epsilon = min_error\n        classifiers.append((feature, threshold, 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))))\n        weights = weights * np.exp(-classifiers[-1][2] * y_train * predict(X_train, classifiers))\n        weights /= np.sum(weights)\n    result = []\n    for sample in X_test:\n        pred = np.sum([clf[2] * predict(np.array([sample]), [clf]) for clf in classifiers])\n        result.append(-1 if pred < 0 else 1)\n    return result\ndef predict(X, classifiers):\n    return np.array([-1 if sample[clf[0]] < clf[1] else 1 for sample in X for clf in classifiers])"}
{"task_id": 257, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    m = X_train.shape[0]\n    weights = np.ones(m) / m\n    weighted_predictions = np.zeros((n_clf, X_train.shape[0]))\n    weights_alpha_t = np.zeros(n_clf)\n    weak_classifiers = []\n    for t in range(n_clf):\n        (best_feature, best_threshold, best_errors) = (None, None, np.inf)\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n                errors = np.sum(weights[predictions != y_train])\n                if errors < best_errors:\n                    (best_feature, best_threshold, best_errors) = (feature, threshold, errors)\n        weak_classifiers.append((best_feature, best_threshold))\n        epsilon_t = best_errors / np.sum(weights)\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        weights_alpha_t[t] = alpha_t\n        weights *= np.exp(-alpha_t * y_train * predictions)\n        weights /= np.sum(weights)\n        weighted_predictions[t] = alpha_t * predictions\n    final_predictions = np.sign(np.sum(weighted_predictions, axis=0))\n    final_predictions[final_predictions == 0] = 1\n    n_test = X_test.shape[0]\n    final_votes = np.zeros((n_clf, n_test))\n    for t in range(n_clf):\n        (feature, threshold) = weak_classifiers[t]\n        predictions = np.ones(n_test)\n        predictions[X_test[:, feature] < threshold] = -1\n        final_votes[t] = weights_alpha_t[t] * predictions\n    final_predictions_test = np.sign(np.sum(final_votes, axis=0))\n    final_predictions_test[final_predictions_test == 0] = 1\n    return final_predictions_test.tolist()"}
{"task_id": 257, "completion_id": 5, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    if n_clf < 1:\n        n_clf = 1\n    weights = np.ones(X_train.shape[0]) / X_train.shape[0]\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        stump = DecisionTreeClassifier(max_depth=1, random_state=0)\n        stump.fit(X_train, y_train, sample_weight=weights)\n        predicted = stump.predict(X_train)\n        incorrect = predicted != y_train\n        error = np.sum(weights[incorrect]) / np.sum(weights)\n        alpha = np.log((1 - error) / error) / 2\n        weights[incorrect] *= np.exp(alpha)\n        weights /= np.sum(weights)\n        stumps.append(stump)\n        alphas.append(alpha)\n    predictions = np.sign(np.sum([alpha * stump.predict(X_test) for (stump, alpha) in zip(stumps, alphas)], axis=1))\n    return predictions.tolist()"}
{"task_id": 257, "completion_id": 6, "solution": "import numpy as np\ndef update_weights(weights, alpha, y_true, y_pred):\n    return weights * np.exp(-alpha * y_true * y_pred) / np.sum(weights)\ndef adaboost_predict(X_train, y_train, X_test, n_clf=5):\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clf_weights = []\n    clfs = []\n    for _ in range(n_clf):\n        lowest_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_preds = None\n        for feature in range(n):\n            feature_values = X_train[:, feature]\n            unique_values = np.unique(feature_values)\n            if len(unique_values) > 10:\n                thresholds = (unique_values[1:] + unique_values[:-1]) / 2\n            else:\n                thresholds = unique_values\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    preds = polarity * np.ones(y_train.shape)\n                    mask = feature_values <= threshold\n                    preds[mask] = -polarity\n                    mask = np.invert(mask)\n                    preds[mask] = polarity\n                    error = np.sum(weights[preds != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        preds = -1 * preds\n                    if error < lowest_error:\n                        lowest_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_preds = preds.copy()\n        alpha = 0.5 * np.log((1 - lowest_error) / lowest_error)\n        weights = update_weights(weights, alpha, y_train, best_preds)\n        clf_weights.append(alpha)\n        clfs.append((best_feature, best_threshold, best_polarity))\n    final_preds = np.zeros(X_test.shape[0])\n    for ((feature, threshold, polarity), alpha) in zip(clfs, clf_weights):\n        preds = polarity * np.ones(X_test.shape[0])\n        mask = X_test[:, feature] <= threshold\n        preds[mask] = -polarity\n        mask = np.invert(mask)\n        preds[mask] = polarity\n        final_preds += alpha * preds\n    final_preds = np.sign(final_preds).astype(int)\n    final_preds[final_preds == 0] = 1\n    return final_preds.tolist()"}
{"task_id": 257, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_clf, best_result, best_feature, best_threshold) = (None, None, None, None)\n        for feature in range(n):\n            feature_values = X_train[:, feature]\n            for threshold in feature_values:\n                polarity = 1\n                predictions = np.ones(m)\n                predictions[feature_values < threshold] = -1\n                error = np.sum(w[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    best_clf = polarity\n                    best_result = predictions\n                    best_feature = feature\n                    best_threshold = threshold\n        eps = min_error\n        if eps > 0.5:\n            eps = 1 - eps\n        clf_weight = 0.5 * np.log((1.0 - eps) / eps)\n        weights = w * np.exp(-clf_weight * y_train * best_result)\n        w = weights / weights.sum()\n        clfs.append((best_clf, best_feature, best_threshold, clf_weight))\n    preds = np.zeros(X_test.shape[0])\n    for clf in clfs:\n        (polarity, feature, threshold, clf_weight) = clf\n        preds += clf_weight * (polarity * ((X_test[:, feature] < threshold) * 2 - 1))\n    return [1 if p > 0 else -1 for p in preds]"}
{"task_id": 257, "completion_id": 8, "solution": "import numpy as np\ndef calculate_errors(X: np.ndarray, y: np.ndarray, feature: int, threshold: float, weights: np.ndarray):\n    left_error = np.sum(weights[X[:, feature] < threshold] * -y[X[:, feature] < threshold])\n    right_error = np.sum(weights[X[:, feature] >= threshold] * y[X[:, feature] >= threshold])\n    return (left_error, right_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_test = X_test.shape[0]\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    y = np.expand_dims(y_train, axis=1)\n    X = np.concatenate((weights * y, weights * (1 - y), X_train), axis=1)\n    for _ in range(n_clf):\n        best_error = np.inf\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n):\n            thresholds = X[:, feature + 2]\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    errors = calculate_errors(X_train, y_train, feature, threshold, weights)\n                    error = np.sum(errors * np.array([1, polarity]))\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1.0 - best_error) / best_error)\n        stumps.append([best_feature, best_threshold, best_polarity])\n        stump_weights.append(alpha)\n        predictions = np.ones(np.shape(y_train))\n        predictions[np.any([X[:, 2:][:, stump[0]] * stump[2] < stump[1] * stump[2] for stump in stumps], 0)] = -1\n        incorrect = predictions != y_train\n        weights *= np.exp(alpha * incorrect)\n        weights /= np.sum(weights)\n    predictions = np.ones(n_test)\n    for (stump, weight) in zip(stumps, stump_weights):\n        predictions[X_test[:, stump[0]] * stump[2] < stump[1] * stump[2]] = -weight\n    return [-1 if prediction > 0 else 1 for prediction in predictions]"}
{"task_id": 257, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    w = np.full((m,), 1 / m)\n    predictions = np.zeros((n_clf, X_test.shape[0]))\n    for i in range(n_clf):\n        best_error = np.inf\n        for j in range(n):\n            for split in np.unique(X_train[:, j]):\n                left_idx = X_train[:, j] <= split\n                right_idx = X_train[:, j] > split\n                left_pred = np.sum(y_train[left_idx] * w[left_idx])\n                right_pred = np.sum(y_train[right_idx] * w[right_idx])\n                pred = left_pred - right_pred\n                error = np.sum(w[left_idx]) * np.sum((y_train[left_idx] != np.sign(pred)).astype(int)) + np.sum(w[right_idx]) * np.sum((y_train[right_idx] != -np.sign(pred)).astype(int))\n                if error < best_error:\n                    best_error = error\n                    best_feature = j\n                    best_split = split\n                    best_sign = np.sign(pred)\n        pred = best_sign * (2 * (X_train[:, best_feature] <= best_split) - 1)\n        w *= np.exp(-y_train * pred)\n        w /= np.sum(w)\n        pred = best_sign * (2 * (X_test[:, best_feature] <= best_split) - 1)\n        predictions[i, :] = pred\n    weighted_predictions = np.sign(np.sum(predictions / n_clf, axis=0))\n    return list(weighted_predictions.astype(int))"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions')\n    fan_in = shape[1]\n    receptive_field_size = 1\n    for dim in shape[2:]:\n        receptive_field_size *= dim\n    fan_out = shape[0] * receptive_field_size\n    fan_avg = (fan_in + fan_out) / 2\n    s = np.sqrt(2 / fan_avg)\n    return np.random.normal(0, s, size=shape)"}
{"task_id": 261, "completion_id": 1, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[0]\n    fan_out = shape[1]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 2, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    (fan_in, fan_out) = shape[:2]\n    for dim in shape[2:]:\n        fan_in *= dim\n        fan_out *= dim\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, stddev, shape)"}
{"task_id": 261, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = int(math.prod(shape[2:]))\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std_dev = math.sqrt(1 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 261, "completion_id": 4, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    (fan_in, fan_out) = shape[:2]\n    receptive_field_size = 1\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n    fan_in *= receptive_field_size\n    fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 5, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('shape must have at least two dimensions')\n    fan_in = shape[0] * np.prod(shape[2:])\n    fan_out = shape[1] * np.prod(shape[2:])\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0.0, stddev, shape)"}
{"task_id": 261, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"\n    Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    fan_in = shape[0] if len(shape) < 2 else np.prod(shape[1:])\n    fan_out = shape[1] if len(shape) < 2 else np.prod(shape[2:])\n    s = math.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, size=shape)"}
{"task_id": 261, "completion_id": 7, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\"\"\"\n    if len(shape) < 2:\n        raise ValueError('shape must have at least 2 dimensions')\n    (fan_in, fan_out) = (shape[0], np.prod(shape[1:]))\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 8, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('shape must have at least 2 dimensions')\n    fan_in = shape[0]\n    fan_out = shape[1]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, size=shape)"}
{"task_id": 261, "completion_id": 9, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    (fan_in, fan_out) = shape[:2]\n    for dim in shape[2:]:\n        fan_in *= dim\n        fan_out *= dim\n    std = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    adj_lst = {v: [] for v in V}\n    for (u, v) in E:\n        adj_lst[u].append(v)\n        adj_lst[v].append(u)\n    for v in adj_lst:\n        adj_lst[v] = sorted(set(adj_lst[v]), key=V.index)\n    return [adj_lst[v] for v in V]"}
{"task_id": 266, "completion_id": 1, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        The outer list has the same length and order as `V`.\n        Inner lists contain no duplicates and are ordered by their\n        appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        adj_list[V.index(u)].append(v)\n        adj_list[V.index(v)].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(list(set(adj_list[i])), key=V.index)\n    return adj_list"}
{"task_id": 266, "completion_id": 2, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        if u not in adj_list[v]:\n            adj_list[v].append(u)\n        if v not in adj_list[u]:\n            adj_list[u].append(v)\n    return adj_list"}
{"task_id": 266, "completion_id": 3, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    adj_list = {v: [] for v in V}\n    for (u, v) in E:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    result = [sorted(set(adj_list[v]), key=V.index) for v in V]\n    return result\nV = ['A', 'B', 'C']\nE = [('A', 'B'), ('B', 'C'), ('C', 'A')]"}
{"task_id": 266, "completion_id": 4, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    adj_list = {v: set() for v in V}\n    for (u, v) in E:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    return [[v for v in sorted(adj_list[u])] for u in V]\nV = [1, 2, 3, 4, 5]\nE = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 5)]"}
{"task_id": 266, "completion_id": 5, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    neighbors = {v: set() for v in V}\n    for (u, v) in E:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    return [sorted(list(neighbors[v]), key=lambda x: V.index(x)) for v in V]"}
{"task_id": 266, "completion_id": 6, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    graph = {v: [] for v in V}\n    for (u, v) in E:\n        graph[u].append(v)\n        graph[v].append(u)\n    G = [sorted(set(graph[v]), key=V.index) for v in V]\n    return G\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'A'), ('A', 'C')]\nG = build_adj_list(V, E)"}
{"task_id": 266, "completion_id": 7, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adjacency_list = [[] for _ in range(len(V))]\n    for edge in E:\n        (u, v) = edge\n        adjacency_list[V.index(u)].append(v)\n        adjacency_list[V.index(v)].append(u)\n    return [sorted(list(set(neighbours)), key=V.index) for neighbours in adjacency_list]"}
{"task_id": 266, "completion_id": 8, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = {v: [] for v in V}\n    for (u, v) in E:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    for v in adj_list:\n        adj_list[v] = sorted([u for u in adj_list[v] if u in V], key=V.index)\n    return [adj_list[v] for v in V]"}
{"task_id": 266, "completion_id": 9, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    adj_list = [[] for _ in V]\n    edges = [set() for _ in V]\n    for (u, v) in E:\n        idx_u = V.index(u)\n        idx_v = V.index(v)\n        edges[idx_u].add(idx_v)\n        edges[idx_v].add(idx_u)\n    for i in range(len(V)):\n        for j in sorted(edges[i], reverse=True):\n            adj_list[i].append(V[j])\n    return adj_list"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union, Tuple\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    error = float('inf')\n    stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': error}\n    for feature_index in range(n_features):\n        for unique_value in np.unique(X[:, feature_index]):\n            for polarity in [-1, 1]:\n                predictions = polarity * np.ones(y.shape)\n                predictions[X[:, feature_index] < unique_value] *= -1\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n                if weighted_error < error:\n                    error = weighted_error\n                    stump['feature_index'] = feature_index\n                    stump['threshold'] = unique_value\n                    stump['polarity'] = polarity\n                    stump['weighted_error'] = np.round(weighted_error, 4)\n    return stump"}
{"task_id": 267, "completion_id": 1, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    (n_samples, n_features) = X.shape\n    inf = float('inf')\n    (best_error, best_feature, best_threshold, best_polarity) = (inf, None, None, None)\n    for feature_index in range(n_features):\n        for sign in [1, -1]:\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    index = X[:, feature_index] * sign < threshold\n                    predictions[index] = polarity\n                    error = np.sum(sample_weights[predictions != y])\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 2, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    best_stump = {'feature_index': -1, 'threshold': np.inf, 'polarity': 1, 'weighted_error': np.inf}\n    for feature_index in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature_index]):\n            for polarity in [-1, 1]:\n                prediction = np.where(X[:, feature_index] < threshold, polarity, -polarity)\n                incorrect = prediction != y\n                weighted_error = np.sum(sample_weights * incorrect)\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump['feature_index'] = feature_index\n                    best_stump['threshold'] = threshold\n                    best_stump['polarity'] = polarity\n                    best_stump['weighted_error'] = weighted_error\n    best_stump['threshold'] = round(best_stump['threshold'], 4)\n    best_stump['weighted_error'] = round(best_stump['weighted_error'], 4)\n    return best_stump"}
{"task_id": 267, "completion_id": 3, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_feature_index = 0\n    best_threshold = 0\n    best_polarity = 0\n    best_weighted_error = np.inf\n    for feature_index in range(n_features):\n        feature_vector = X[:, feature_index]\n        unique_values = np.unique(feature_vector)\n        for threshold in unique_values:\n            predictions_1 = feature_vector < threshold\n            predictions_minus_1 = feature_vector >= threshold\n            weighted_errors = np.array([(predictions_1 != (y == 1)).T @ sample_weights, (predictions_minus_1 != (y == 1)).T @ sample_weights])\n            best_polarity_for_threshold = np.argmin(weighted_errors)\n            weighted_error_for_threshold = weighted_errors[best_polarity_for_threshold]\n            if weighted_error_for_threshold < best_weighted_error:\n                best_feature_index = feature_index\n                best_threshold = threshold\n                best_polarity = best_polarity_for_threshold * 2 - 1\n                best_weighted_error = weighted_error_for_threshold\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': int(best_polarity), 'weighted_error': round(best_weighted_error, 4)}"}
{"task_id": 267, "completion_id": 4, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    (n_samples, n_features) = X.shape\n    decision_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': np.inf}\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_feature_values = np.unique(feature_values)\n        for threshold in unique_feature_values:\n            for polarity in [1, -1]:\n                predictions = polarity * np.ones_like(y)\n                predictions[X[:, feature_index] * polarity < threshold * polarity] = -polarity\n                misclassified_samples = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified_samples])\n                if weighted_error < decision_stump['weighted_error']:\n                    decision_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'weighted_error': weighted_error}\n    decision_stump['threshold'] = round(decision_stump['threshold'], 4)\n    decision_stump['weighted_error'] = round(decision_stump['weighted_error'], 4)\n    return decision_stump"}
{"task_id": 267, "completion_id": 5, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = None\n    for j in range(n_features):\n        for threshold in np.unique(X[:, j]):\n            for polarity in [-1, 1]:\n                y_pred = polarity * np.ones(n_samples)\n                y_pred[X[:, j] * polarity < threshold * polarity] = -1\n                error = np.sum(sample_weights[y != y_pred])\n                if error < best_error:\n                    best_error = error\n                    best_stump = {'feature_index': j, 'threshold': threshold, 'polarity': polarity, 'weighted_error': error}\n    best_stump['weighted_error'] = round(best_stump['weighted_error'], 4)\n    best_stump['threshold'] = round(best_stump['threshold'], 4)\n    return best_stump"}
{"task_id": 267, "completion_id": 6, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (num_samples, num_features) = X.shape\n    (best_feature_index, best_threshold, best_polarity) = (0, 0, 1)\n    min_error = float('inf')\n    for feature_index in range(num_features):\n        feature_values = np.sort(np.unique(X[:, feature_index]))\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n        for polarity in [1, -1]:\n            for threshold in thresholds:\n                predictions = polarity * np.sign(X[:, feature_index] - threshold)\n                errors = np.where(predictions != y, sample_weights, 0)\n                error = np.sum(errors)\n                if error < min_error:\n                    min_error = error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(min_error, 4)}"}
{"task_id": 267, "completion_id": 7, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (min_error, best_feature, best_threshold, best_polarity) = (float('inf'), None, None, None)\n    for feature in range(n_features):\n        unique_values = np.unique(X[:, feature])\n        for threshold in unique_values:\n            for polarity in [-1, 1]:\n                prediction = polarity * ((X[:, feature] < threshold) * 2 - 1)\n                error = np.sum(sample_weights * (prediction != y))\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(min_error, 4)}"}
{"task_id": 267, "completion_id": 8, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    best_feature_index = 0\n    best_threshold = 0\n    best_polarity = 0\n    min_error = float('inf')\n    for feature_index in range(X.shape[1]):\n        feature = X[:, feature_index]\n        thresholds = np.unique(feature)\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = polarity * ((feature < threshold) * 2 - 1)\n                errors = sample_weights * (predictions != y)\n                error = np.sum(errors)\n                if error < min_error:\n                    min_error = error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(min_error, 4)}"}
{"task_id": 267, "completion_id": 9, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n        \n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    min_error = np.inf\n    for feature_index in range(X.shape[1]):\n        feature_values = np.unique(X[:, feature_index])\n        for threshold in feature_values:\n            for polarity in [1, -1]:\n                predictions = polarity * np.where(X[:, feature_index] < threshold, 1, -1)\n                incorrect = predictions != y\n                weighted_error = np.sum(sample_weights[incorrect])\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_params = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(weighted_error, 4)}\n    return best_params"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(counter):\n    n = sum(counter.values())\n    if n == 0:\n        return 0\n    probs = [count / n for count in counter.values()]\n    return -sum((p * math.log2(p) for p in probs))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    assert len(feature) == len(target)\n    if len(feature) == 0:\n        return (None, 0.0)\n    sort_idx = np.argsort(feature)\n    feature = feature[sort_idx]\n    target = target[sort_idx]\n    max_info_gain = 0\n    best_threshold = None\n    parent_entropy = entropy(Counter(target))\n    left_counter = Counter()\n    right_counter = Counter(target)\n    for i in range(len(feature) - 1):\n        left_counter[target[i]] += 1\n        right_counter[target[i]] -= 1\n        if feature[i] == feature[i + 1]:\n            continue\n        info_gain = parent_entropy - (i + 1) / len(feature) * entropy(left_counter) - (len(feature) - i - 1) / len(feature) * entropy(right_counter)\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = (feature[i] + feature[i + 1]) / 2\n    return (None if best_threshold is None else round(best_threshold, 4), round(max_info_gain, 4))"}
{"task_id": 273, "completion_id": 1, "solution": "from collections import Counter\nimport math\nimport numpy as np\ndef entropy(labels):\n    n_labels = len(labels)\n    if n_labels <= 1:\n        return 0\n    probs = [labels.count(i) / n_labels for i in set(labels)]\n    return -sum([p * math.log2(p) for p in probs])\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    n_samples = len(target)\n    if n_samples == 0 or len(set(target)) == 1:\n        return (None, 0.0)\n    sorts = target[feature.argsort()]\n    best_threshold = None\n    best_gain = 0.0\n    parent_entropy = entropy(sorts)\n    for i in range(1, n_samples):\n        if sorts[i - 1] == sorts[i]:\n            continue\n        t = (feature[i - 1] + feature[i]) / 2\n        left = sorts[:i]\n        right = sorts[i:]\n        left_entropy = entropy(left)\n        right_entropy = entropy(right)\n        info_gain = parent_entropy - len(left) / n_samples * left_entropy - len(right) / n_samples * right_entropy\n        if info_gain > best_gain:\n            best_gain = info_gain\n            best_threshold = t\n    return (round(best_threshold, 4), round(best_gain, 4))"}
{"task_id": 273, "completion_id": 2, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if feature is None or len(feature) <= 1:\n        return (None, 0.0)\n    parent_entropy = entropy(target)\n    unique_sorted_feature = sorted(set(feature))\n    if len(unique_sorted_feature) <= 1:\n        return (None, 0.0)\n    best_threshold = None\n    best_information_gain = -math.inf\n    for i in range(1, len(unique_sorted_feature)):\n        threshold = (unique_sorted_feature[i - 1] + unique_sorted_feature[i]) / 2\n        left_indices = np.where(feature < threshold)[0]\n        right_indices = np.where(feature >= threshold)[0]\n        left_targets = [target[i] for i in left_indices]\n        right_targets = [target[i] for i in right_indices]\n        left_entropy = entropy(left_targets)\n        right_entropy = entropy(right_targets)\n        information_gain = parent_entropy - (len(left_indices) / len(feature) * left_entropy + len(right_indices) / len(feature) * right_entropy)\n        if information_gain > best_information_gain:\n            best_information_gain = information_gain\n            best_threshold = threshold\n    if best_information_gain <= 0.0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_information_gain, 4))\ndef entropy(labels):\n    counts = Counter(labels)\n    total = sum(counts.values())\n    entropy = 0\n    for label in counts:\n        prob_of_label = counts[label] / total\n        entropy += -prob_of_label * math.log2(prob_of_label)\n    return entropy"}
{"task_id": 273, "completion_id": 3, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(target):\n    count = Counter(target)\n    total = len(target)\n    return -sum((count[i] / total * math.log2(count[i] / total) for i in count))\ndef best_split(feature, target):\n    (feature, target) = (np.array(feature), np.array(target))\n    indices = np.argsort(feature)\n    (feature, target) = (feature[indices], target[indices])\n    unique_values = np.unique(feature)\n    if len(unique_values) == 1:\n        return (None, 0.0)\n    H_best = -math.inf\n    threshold_best = None\n    left_counts = Counter()\n    right_counts = Counter(target)\n    total = len(target)\n    for (previous, current) in zip(feature[:-1], feature[1:]):\n        if current == previous:\n            continue\n        left_counts[previous] += 1\n        right_counts[current] -= 1\n        if right_counts[current] == 0:\n            del right_counts[current]\n        H_left = entropy(list(left_counts.elements()))\n        H_right = entropy(list(right_counts.elements()))\n        IG = entropy(target) - len(left_counts) / total * H_left - (total - len(left_counts)) / total * H_right\n        if IG > H_best:\n            H_best = IG\n            threshold_best = (current + previous) / 2\n    if threshold_best is None:\n        return (None, 0.0)\n    return (threshold_best, round(H_best, 4))"}
{"task_id": 273, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef shannon_entropy(labels):\n    n = len(labels)\n    if n < 2:\n        return 0.0\n    count = Counter(labels)\n    entropy = 0.0\n    for num in count.values():\n        p_x = num / n\n        entropy += p_x * np.log2(p_x)\n    return -entropy\ndef best_split(feature, target):\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target))\n    overall_entropy = shannon_entropy(target)\n    split_points = [(data[i][0] + data[i + 1][0]) / 2 for i in range(len(data) - 1)]\n    max_ig = 0.0\n    best_threshold = None\n    for threshold in split_points:\n        left_labels = [label for (value, label) in data if value < threshold]\n        right_labels = [label for (value, label) in data if value >= threshold]\n        left_entropy = shannon_entropy(left_labels)\n        right_entropy = shannon_entropy(right_labels)\n        n_left = len(left_labels)\n        n_right = len(right_labels)\n        n_total = n_left + n_right\n        ig = overall_entropy - n_left / n_total * left_entropy - n_right / n_total * right_entropy\n        if ig > max_ig:\n            max_ig = ig\n            best_threshold = threshold\n    if max_ig < 1e-06:\n        return (None, 0.0)\n    else:\n        return (round(best_threshold, 4), round(max_ig, 4))"}
{"task_id": 273, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(class_y):\n    \"\"\" Compute entropy\n    In the case of empty label list, return 0 (he assumption here is that if there is no label for a subset, it is most probable that the most frequent label in the original dataset covers that subset)\n    \"\"\"\n    n_labels = len(class_y)\n    prob_dist = np.array(list(Counter(class_y).values())) / n_labels\n    return -1 * np.sum(prob_dist * np.log2(prob_dist))\ndef best_split(feature, target):\n    unique_vals = np.unique(feature)\n    best_threshold = None\n    best_ig = 0\n    if len(unique_vals) == 1:\n        return (best_threshold, round(best_ig, 4))\n    parent_entropy = entropy(target)\n    for val in unique_vals:\n        left_idx = np.where(feature < val)[0]\n        right_idx = np.where(feature >= val)[0]\n        if len(left_idx) == 0 or len(right_idx) == 0:\n            continue\n        left_target = target[left_idx]\n        right_target = target[right_idx]\n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n        left_weight = len(left_idx) / len(feature)\n        right_weight = len(right_idx) / len(feature)\n        information_gain = parent_entropy - (left_weight * left_entropy + right_weight * right_entropy)\n        if information_gain > best_ig or (information_gain == best_ig and val < best_threshold):\n            best_ig = information_gain\n            best_threshold = val\n    best_threshold = round(best_threshold, 4) if best_threshold is not None else None\n    best_ig = round(best_ig, 4)\n    return (best_threshold, best_ig)"}
{"task_id": 273, "completion_id": 6, "solution": "import math\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    return -sum((counts[x] / n * math.log2(counts[x] / n) for x in counts))\ndef information_gain(feature, target, threshold):\n    \"\"\"Calculate the information gain for a given split.\"\"\"\n    (left, right) = ([], [])\n    for i in range(len(feature)):\n        if feature[i] < threshold:\n            left.append(target[i])\n        else:\n            right.append(target[i])\n    return entropy(target) - (len(left) * entropy(left) + len(right) * entropy(right)) / len(feature)\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    (feature, target) = (sorted(feature), [x for (_, x) in sorted(zip(feature, target))])\n    unique_values = [feature[i] for i in range(len(feature) - 1) if feature[i] != feature[i + 1]] + [feature[-1]]\n    if len(unique_values) < 2:\n        return (None, 0.0)\n    (max_info_gain, best_threshold) = (-math.inf, None)\n    for i in range(len(unique_values) - 1):\n        threshold = (unique_values[i] + unique_values[i + 1]) / 2\n        info_gain = information_gain(feature, target, threshold)\n        if info_gain > max_info_gain or (info_gain == max_info_gain and threshold < best_threshold):\n            (max_info_gain, best_threshold) = (info_gain, threshold)\n    return (round(best_threshold, 4), round(max_info_gain, 4))"}
{"task_id": 273, "completion_id": 7, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"\n    Calculate the entropy of a list of labels.\n    \"\"\"\n    counts = Counter(labels)\n    ent = 0.0\n    length = len(labels)\n    for count in counts.values():\n        p = count / length\n        ent -= p * math.log2(p)\n    return ent\ndef calculate_info_gain(left, right):\n    \"\"\"\n    Calculate the information gain after splitting the labels into two branches.\n    \"\"\"\n    parent_entropy = entropy(left + right)\n    left_weight = len(left) / (len(left) + len(right))\n    right_weight = len(right) / (len(left) + len(right))\n    info_gain = parent_entropy - left_weight * entropy(left) - right_weight * entropy(right)\n    return info_gain\ndef best_split(feature, target):\n    \"\"\"\n    Find the best split point and its information gain.\n    \"\"\"\n    data = sorted(zip(feature, target))\n    possible_thresholds = [i for i in range(1, len(data)) if data[i][0] != data[i - 1][0]]\n    if not possible_thresholds:\n        return (None, 0.0)\n    best_threshold = best_info_gain = None\n    for threshold in possible_thresholds:\n        left = [x[1] for x in data[:threshold]]\n        right = [x[1] for x in data[threshold:]]\n        info_gain = calculate_info_gain(left, right)\n        if best_info_gain is None or info_gain > best_info_gain or (info_gain == best_info_gain and data[threshold - 1][0] < best_threshold):\n            best_threshold = data[threshold][0]\n            best_info_gain = info_gain\n    return (round(best_threshold, 4), round(best_info_gain, 4))"}
{"task_id": 273, "completion_id": 8, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    freq_dist = np.array(list(Counter(labels).values())) / len(labels)\n    return -np.sum(freq_dist * np.log2(freq_dist))\ndef best_split(feature, target):\n    distinct_sorted_values = sorted(set(feature))\n    thresholds = [(distinct_sorted_values[i] + distinct_sorted_values[i + 1]) / 2 for i in range(len(distinct_sorted_values) - 1)]\n    if not thresholds:\n        return (None, 0.0)\n    max_info_gain = -math.inf\n    optimal_threshold = None\n    parent_entropy = entropy(target)\n    for threshold in thresholds:\n        left_indexes = [idx for (idx, value) in enumerate(feature) if value < threshold]\n        right_indexes = [idx for (idx, value) in enumerate(feature) if value >= threshold]\n        left_labels = [target[idx] for idx in left_indexes]\n        right_labels = [target[idx] for idx in right_indexes]\n        left_entropy = entropy(left_labels)\n        right_entropy = entropy(right_labels)\n        info_gain = parent_entropy - len(left_labels) / len(target) * left_entropy - len(right_labels) / len(target) * right_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            optimal_threshold = threshold\n        elif info_gain == max_info_gain:\n            optimal_threshold = min(optimal_threshold, threshold)\n    return (round(optimal_threshold, 4), round(max_info_gain, 4))"}
{"task_id": 273, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef best_split(feature, target):\n    feature = np.array(feature)\n    target = np.array(target)\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    class_counts = Counter(target)\n    if len(class_counts) == 1:\n        return (None, 0.0)\n    feature_target = sorted(zip(feature, target))\n    total = len(feature)\n    split_count_left = np.zeros(total)\n    split_count_right = class_counts.copy()\n    left_entropy = 0.0\n    right_entropy = entropy(class_counts.values())\n    max_info_gain = 0.0\n    best_split = feature_target[0][0] - 1\n    split_feature = feature_target[0][0]\n    for i in range(1, total):\n        curr_feature = feature_target[i][0]\n        curr_target = feature_target[i][1]\n        if curr_feature != split_feature:\n            left_entropy_new = entropy(split_count_left[:i].astype(int))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    if name in globals():\n        obj = globals()[name]\n        if callable(obj):\n            return obj\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 1, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 2, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 3, "solution": "import random\nimport numpy as np\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 4, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 5, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 6, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 7, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 8, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if callable(globals().get(name)):\n        return globals().get(name)\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 9, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n\n    def get_indices(size, step):\n        return [(i, i + step) for i in range(0, size, step)]\n\n    def pool_forward(X, indices_H, indices_W):\n        output = np.zeros((N, C, len(indices_H), len(indices_W)))\n        for n in range(N):\n            for c in range(C):\n                for (idx_H, (i, j)) in enumerate(indices_H):\n                    for (idx_W, (k, l)) in enumerate(indices_W):\n                        output[n, c, idx_H, idx_W] = np.mean(X[n, c, i:j, k:l])\n        return output\n\n    def pool_backward(accum_grad, indices_H, indices_W):\n        grad_input = np.zeros_like(X)\n        for n in range(N):\n            for c in range(C):\n                for (idx_H, (i, j)) in enumerate(indices_H):\n                    for (idx_W, (k, l)) in enumerate(indices_W):\n                        avg_grad = accum_grad[n, c, idx_H, idx_W] / (p_h * p_w)\n                        grad_input[n, c, i:j, k:l] = np.ones((p_h, p_w)) * avg_grad\n        return grad_input\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    indices_H = get_indices(H, p_h)\n    indices_W = get_indices(W, p_w)\n    pooled_output = pool_forward(X, indices_H, indices_W)\n    grad_input = pool_backward(accum_grad, indices_H, indices_W)\n    return (np.round(pooled_output, 4).tolist(), np.round(grad_input, 4).tolist())"}
{"task_id": 287, "completion_id": 1, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = int((H - p_h) / s_h + 1)\n    out_w = int((W - p_w) / s_w + 1)\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    avg_val = accum_grad[n, c, h, w] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] = avg_val + grad_input[n, c, h_start:h_end, w_start:w_end]\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 287, "completion_id": 2, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_shape = (N, C, 1 + (H - p_h) // s_h, 1 + (W - p_w) // s_w)\n    output = np.zeros(output_shape)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for ho in range(output_shape[2]):\n                h_start = ho * s_h\n                h_end = h_start + p_h\n                for wo in range(output_shape[3]):\n                    w_start = wo * s_w\n                    w_end = w_start + p_w\n                    input_window = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, ho, wo] = np.mean(input_window)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, ho, wo] / np.prod(input_window.shape)\n    return (np.round(output, 4).tolist(), np.round(grad_input, 4).tolist())"}
{"task_id": 287, "completion_id": 3, "solution": "import numpy as np\nfrom skimage.util.shape import view_as_blocks\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n\n    Args:\n        X: Input 4-D NumPy array with shape (N, C, H, W), where N is the batch size,\n           C the number of channels, and H\u00d7W the spatial dimensions.\n        pool_shape: Pooling window size (p_h, p_w).\n        stride: Stride (s_h, s_w).\n        accum_grad: 4-D NumPy array with shape identical to the forward output, storing\n                     gradient of the loss with respect to every pooled value.\n\n    Returns:\n        A tuple (output, grad_input), both rounded to the nearest 4-th decimal and converted\n        to lists, where 'output' is the pooled output and 'grad_input' is the gradient\n        of the loss with respect to the input.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pool_view = view_as_blocks(X, (1, 1, p_h, p_w))\n    pooled_output = np.mean(pool_view, axis=(4, 6, 7))\n    pooled_output = np.round(pooled_output, 4)\n    accum_grad_view = view_as_blocks(accum_grad, (1, 1, out_h, out_w))\n    accum_grad_sum = np.sum(accum_grad_view, axis=(2, 3, 4, 5)) / (p_h * p_w)\n    grad_input = np.zeros_like(X)\n    accum_grad_sum_view = view_as_blocks(accum_grad_sum, (1, 1, 1, 1))\n    for i in range(out_h):\n        for j in range(out_w):\n            grad_input[:, :, i * s_h:i * s_h + p_h, j * s_w:j * s_w + p_w] += accum_grad_sum_view\n    grad_input = np.round(grad_input, 4)\n    pooled_output = pooled_output.tolist()\n    grad_input = grad_input.tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 4, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = int((H - p_h) / s_h + 1)\n    out_w = int((W - p_w) / s_w + 1)\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for i in range(N):\n        for j in range(C):\n            r_out = 0\n            for r in range(0, H, s_h):\n                c_out = 0\n                for c in range(0, W, s_w):\n                    pooled_output[i, j, r_out, c_out] = np.mean(X[i, j, r:r + p_h, c:c + p_w])\n                    dX = accum_grad[i, j, r_out, c_out] / (p_h * p_w)\n                    grad_input[i, j, r:r + p_h, c:c + p_w] += dX\n                    c_out += 1\n                r_out += 1\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 5, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (n, c, h_in, w_in) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    h_out = (h_in - p_h) // s_h + 1\n    w_out = (w_in - p_w) // s_w + 1\n    X_reshaped = X.reshape(n * c, 1, h_in, w_in)\n    out = np.zeros((n * c, h_out, w_out))\n    for i in range(h_out):\n        for j in range(w_out):\n            out[:, i, j] = np.mean(X_reshaped[:, :, i * s_h:i * s_h + p_h, j * s_w:j * s_w + p_w], axis=(2, 3))\n    grad_input_reshaped = np.zeros(X_reshaped.shape)\n    for i in range(h_out):\n        for j in range(w_out):\n            grad_input_reshaped[:, :, i * s_h:i * s_h + p_h, j * s_w:j * s_w + p_w] = accum_grad.reshape(n * c, h_out, w_out)[:, i, j] / (p_h * p_w)\n    grad_input = grad_input_reshaped.reshape(*X.shape)\n    return (out.round(4).tolist(), grad_input.round(4).tolist())\npool_shape = (2, 2)\nstride = (2, 2)"}
{"task_id": 287, "completion_id": 6, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(0, H_out):\n                for w in range(0, W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, h, w] += np.mean(window)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 287, "completion_id": 7, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    h_out = int((H - p_h) / s_h + 1)\n    w_out = int((W - p_w) / s_w + 1)\n    pooled = np.zeros((N, C, h_out, w_out))\n    grad_input = np.zeros_like(X)\n    for i in range(N):\n        for j in range(C):\n            for k in range(h_out):\n                y = k * s_h\n                for l in range(w_out):\n                    x = l * s_w\n                    pool_region = X[i, j, y:y + p_h, x:x + p_w]\n                    pooled[i, j, k, l] = np.mean(pool_region)\n                    grad_input[i, j, y:y + p_h, x:x + p_w] = accum_grad[i, j, k, l] / (p_h * p_w)\n    pooled = np.around(pooled, decimals=4)\n    grad_input = np.around(grad_input, decimals=4)\n    pooled = pooled.tolist()\n    grad_input = grad_input.tolist()\n    return (pooled, grad_input)"}
{"task_id": 287, "completion_id": 8, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = int((H - p_h) / s_h + 1)\n    out_w = int((W - p_w) / s_w + 1)\n    output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    input_patch = X[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w]\n                    output[n, c, h, w] = np.mean(input_patch)\n                    grad_input[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w] += accum_grad[n, c, h, w] / input_patch.size\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (output, grad_input)"}
{"task_id": 287, "completion_id": 9, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_height = int((H - p_h) / s_h + 1)\n    output_width = int((W - p_w) / s_w + 1)\n    pooled_output = np.zeros((N, C, output_height, output_width))\n    grad_input = np.zeros_like(X)\n    window = np.ones((p_h, p_w)) / (p_h * p_w)\n    for i in range(output_height):\n        for j in range(output_width):\n            (x_start, y_start) = (i * s_h, j * s_w)\n            (x_end, y_end) = (x_start + p_h, y_start + p_w)\n            pooled_output[:, :, i, j] = np.sum(X[:, :, x_start:x_end, y_start:y_end] * window, axis=(2, 3))\n            grad_input[:, :, x_start:x_end, y_start:y_end] += accum_grad[:, :, i:i + 1, j:j + 1] * window\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    value: object\n@dataclass\nclass Node:\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 1, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: np.ndarray\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf):\n        if isinstance(tree_b, Leaf):\n            return np.allclose(tree_a.value, tree_b.value)\n        else:\n            return False\n    elif isinstance(tree_b, Leaf):\n        return False\n    else:\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 290, "completion_id": 2, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n        else:\n            return False\n    else:\n        return False"}
{"task_id": 290, "completion_id": 3, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    value: object\n@dataclass\nclass Node:\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        if not compare_trees(tree_a.left, tree_b.left):\n            return False\n        if not compare_trees(tree_a.right, tree_b.right):\n            return False\n        return True\n    else:\n        return False"}
{"task_id": 290, "completion_id": 4, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 5, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, 0, 1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, 0, 1e-08) or (not compare_trees(tree_a.left, tree_b.left)) or (not compare_trees(tree_a.right, tree_b.right)):\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": 290, "completion_id": 6, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        elif not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        else:\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 7, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08) if isinstance(tree_a.value, (float, int, np.ndarray, list)) else tree_a.value == tree_b.value\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 8, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node) and np.isclose(tree_a.threshold, tree_b.threshold) and (tree_a.feature == tree_b.feature):\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 9, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.allclose([tree_a.threshold], [tree_b.threshold]):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:]))\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:]))\n    child1 = child1.tolist()\n    child2 = child2.tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 1, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 2, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    return (child1_np.tolist(), child2_np.tolist())"}
{"task_id": 292, "completion_id": 3, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    cutoff = min(max(cutoff, 0), parent1.shape[1])\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 4, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    child1 = p1.copy()\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2 = p2.copy()\n    child2[:, cutoff:] = p1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 5, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = parent1.copy()\n    child2 = parent2.copy()\n    child1[:, cutoff:] = parent2[:, cutoff:]\n    child2[:, cutoff:] = parent1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 6, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 7, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 8, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 9, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = parent1.copy()\n    child2 = parent2.copy()\n    child1[:, cutoff:] = parent2[:, cutoff:]\n    child2[:, cutoff:] = parent1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for (vertex, index) in G['_V2I'].items():\n        neighbours = []\n        for edge in G['_G'][index]:\n            if not G['is_directed'] and G['_V2I'][edge[0]] > index:\n                neighbours.append((edge[1], edge[2]))\n            else:\n                neighbours.append((edge[0], edge[2]))\n        neighbours.sort()\n        adj[vertex] = neighbours\n    return adj"}
{"task_id": 294, "completion_id": 1, "solution": "from typing import Any, Dict, List, Tuple\nfrom collections import defaultdict\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    adj = defaultdict(list)\n    for edge in G['_G']:\n        if G['is_directed']:\n            adj[edge[0]].append((edge[1], edge[2]))\n        else:\n            adj[edge[0]].append((edge[1], edge[2]))\n            adj[edge[1]].append((edge[0], edge[2]))\n    for neighbours in adj.values():\n        neighbours.sort()\n    return adj"}
{"task_id": 294, "completion_id": 2, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adjacency_dict = {}\n    for adjacent_list in G['_G']:\n        for (source, target, weight) in adjacent_list:\n            if source not in adjacency_dict:\n                adjacency_dict[source] = []\n            adjacency_dict[source].append((target, weight))\n            if not G['is_directed']:\n                if target not in adjacency_dict:\n                    adjacency_dict[target] = []\n                adjacency_dict[target].append((source, weight))\n    for (vertex, neighbours) in adjacency_dict.items():\n        adjacency_dict[vertex] = sorted(neighbours, key=lambda x: x[0])\n    return adjacency_dict"}
{"task_id": 294, "completion_id": 3, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n\n    Notes\n    -----\n    This function assumes that the '_G' key in the input dictionary 'G' is a\n    adjacency list where for each vertex, all outgoing edges are listed. \n    \"\"\"\n    is_directed = G['is_directed']\n    V2I = G['_V2I']\n    vertices = sorted(V2I.keys())\n    adj = {v: [] for v in vertices}\n    for v in vertices:\n        i = V2I[v]\n        for (u, w) in G['_G'][i]:\n            adj[u, w].append((v, w) if is_directed else (v, w) if u < v else (u, w))\n    adj = {k: sorted(v) for (k, v) in adj.items()}\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('B', 2), ('C', 3)], [('A', 2), ('C', 1)], [('A', 3), ('B', 1)]]}"}
{"task_id": 294, "completion_id": 4, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for (source_label, edges) in zip(G['_V2I'].keys(), G['_G']):\n        adj[source_label] = [(target_label, weight) for (_, target_label, weight) in edges]\n        if not G['is_directed']:\n            for (_, target_label, weight) in edges:\n                if target_label in adj:\n                    adj[target_label].append((source_label, weight))\n                else:\n                    adj[target_label] = [(source_label, weight)]\n        adj[source_label] = sorted(adj[source_label], key=lambda x: x[0])\n    for vertex in G['_V2I'].keys():\n        if vertex not in adj:\n            adj[vertex] = []\n    return adj"}
{"task_id": 294, "completion_id": 5, "solution": "from typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\"\"\"\n    adj = {}\n    for (i, adj_list) in enumerate(G['_G']):\n        for edge in adj_list:\n            (u, v, w) = edge\n            if u in adj:\n                adj[u].append((v, w))\n            else:\n                adj[u] = [(v, w)]\n            if not G['is_directed']:\n                if v in adj:\n                    adj[v].append((u, w))\n                else:\n                    adj[v] = [(u, w)]\n    adj = {u: sorted(neighbours, key=lambda x: x[0]) for (u, neighbours) in adj.items()}\n    adj = dict(sorted(adj.items()))\n    return adj"}
{"task_id": 294, "completion_id": 6, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    V2I = G['_V2I']\n    GG = G['_G']\n    for i in range(len(GG)):\n        label = V2I[i]\n        adj[label] = []\n        for edge in GG[i]:\n            if G['is_directed']:\n                adj[label].append((V2I[edge[1]], edge[2]))\n            else:\n                adj[label].append((V2I[edge[1]], edge[2]))\n                if V2I[edge[1]] not in adj:\n                    adj[V2I[edge[1]]] = []\n                adj[V2I[edge[1]]].append((label, edge[2]))\n    adj = {label: sorted(neighbors, key=lambda x: x[0]) for (label, neighbors) in adj.items()}\n    return adj"}
{"task_id": 294, "completion_id": 7, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n    \n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {v: [] for v in G['_V2I']}\n    for (u, v, w) in G['_G']:\n        adj[u].append((v, w))\n        if not G['is_directed']:\n            adj[v].append((u, w))\n    for v in adj:\n        adj[v].sort()\n    return adj"}
{"task_id": 294, "completion_id": 8, "solution": "from typing import Any, Dict, List, Tuple\nfrom collections import defaultdict\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = defaultdict(list)\n    for (index, neighbours) in enumerate(G['_G']):\n        for (v1, v2, w) in neighbours:\n            adj[v1].append((v2, w))\n            if not G['is_directed']:\n                adj[v2].append((v1, w))\n    for v in adj.keys():\n        adj[v] = sorted(adj[v], key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 1), ('A', 'C', 2)], [('B', 'C', 3)], []]}"}
{"task_id": 294, "completion_id": 9, "solution": "def to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    is_directed = G['is_directed']\n    V2I = G['_V2I']\n    G_list = G['_G']\n    adj = {v: [] for v in V2I.keys()}\n    for (source_index, edges) in enumerate(G_list):\n        source_label = V2I[source_index]\n        for edge in edges:\n            (target_index, weight) = (edge[1], edge[2])\n            target_label = V2I[target_index]\n            adj[source_label].append((target_label, weight))\n            if not is_directed:\n                adj[target_label].append((source_label, weight))\n    for v in adj.keys():\n        adj[v] = sorted(adj[v], key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    return ((x == 0) | (x == 1) | (x == True) | (x == False)).all()"}
{"task_id": 296, "completion_id": 1, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        binary_array = np.logical_or(x == 0, x == 1)\n    else:\n        x = np.array(x)\n        binary_array = np.logical_or(x == 0, x == 1)\n    return binary_array.all()"}
{"task_id": 296, "completion_id": 2, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    non_binary_elements = (x != 0) & (x != 1)\n    return not np.any(non_binary_elements)"}
{"task_id": 296, "completion_id": 3, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    if x.dtype == bool:\n        return True\n    try:\n        binary_array = x.astype(bool)\n    except ValueError:\n        return False\n    if np.any(binary_array):\n        return False\n    return True"}
{"task_id": 296, "completion_id": 4, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    binary_values = np.array([0.0, 1.0, True, False])\n    return np.all(np.isin(x, binary_values))"}
{"task_id": 296, "completion_id": 5, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    mask = np.logical_and(x != 0, x != 1)\n    if np.any(mask):\n        return False\n    else:\n        return True"}
{"task_id": 296, "completion_id": 6, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    return np.logical_or(np.isclose(x, 0), np.isclose(x, 1)).all()\nx = np.array([True, False, True])"}
{"task_id": 296, "completion_id": 7, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"\n    Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    if np.issubdtype(x.dtype, np.integer):\n        return np.all((x == 0) | (x == 1))\n    if np.issubdtype(x.dtype, np.bool_):\n        return np.all((x == True) | (x == False))\n    if np.issubdtype(x.dtype, np.floating):\n        return (x - np.fix(x) == 0).all() and np.all((x - np.fix(x) == 0) | (x - np.fix(x) == 0))\n    return False"}
{"task_id": 296, "completion_id": 8, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    return ((x == 0) | (x == 1)).all()"}
{"task_id": 296, "completion_id": 9, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x_binary = (x == 1) | (x == 0) | (x == True) | (x == False)\n    return np.all(x_binary)\nx = np.array([1, 0, 1, 2, 0])"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    corpus_dict = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = ['<bol>'] * (N - 1) + sentence.split() + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            corpus_dict[prefix][ngram] += 1\n    total_log_prob = 0\n    tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    for i in range(len(tokens) - N + 1):\n        ngram = tuple(tokens[i:i + N])\n        prefix = tuple(tokens[i:i + N - 1])\n        if ngram in corpus_dict[prefix]:\n            count_ngram = corpus_dict[prefix][ngram]\n            if N > 1:\n                count_prefix = sum(corpus_dict[prefix].values())\n            else:\n                count_prefix = sum([coun for (pref, count) in corpus_dict.items() for coun in count.values()])\n            prob = count_ngram / count_prefix\n            total_log_prob += math.log(prob)\n        else:\n            return float('-inf')\n    return round(total_log_prob, 4)"}
{"task_id": 298, "completion_id": 1, "solution": "import math\nfrom collections import defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\"\"\"\n    query = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    n_gram_counts = defaultdict(int)\n    n_minus_one_gram_counts = defaultdict(int)\n    for sentence in corpus:\n        words = ['<bol>'] * (N - 1) + sentence.split() + ['<eol>']\n        for i in range(len(words) - (N - 1)):\n            n_gram = tuple(words[i:i + N])\n            n_gram_counts[n_gram] += 1\n            n_minus_one_gram_counts[tuple(words[i:i + N - 1])] += 1\n    total_log_prob = 0.0\n    for i in range(len(query) - (N - 1)):\n        n_gram = tuple(query[i:i + N])\n        n_minus_one_gram = tuple(query[i:i + N - 1])\n        if n_minus_one_gram_counts[n_minus_one_gram] == 0:\n            return float('-inf')\n        else:\n            prob = n_gram_counts[n_gram] / n_minus_one_gram_counts[n_minus_one_gram]\n            total_log_prob += math.log(prob) if prob > 0 else float('-inf')\n    return round(total_log_prob, 4)"}
{"task_id": 298, "completion_id": 2, "solution": "import re\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    if N > 1:\n        corpus = [' '.join(['<bol>'] * (N - 1) + sent.split() + ['<eol>']) for sent in corpus]\n        query = ' '.join(['<bol>'] * (N - 1) + query.split() + ['<eol>'])\n    ngram_counter = defaultdict(int)\n    context_counter = defaultdict(int)\n    total_tokens = 0\n    for sent in corpus:\n        tokens = re.split('\\\\s+', sent)\n        total_tokens += len(tokens)\n        contexts = [tuple((tokens[i - N + j] for j in range(N - 1))) for i in range(N - 1, len(tokens))]\n        grams = [tuple(tokens[i:i + N]) for i in range(len(tokens) - N + 1)]\n        for (context, gram) in zip(contexts, grams):\n            ngram_counter[gram] += 1\n            context_counter[context] += 1\n    query_tokens = re.split('\\\\s+', query)\n    logs = []\n    for i in range(len(query_tokens) - N + 1):\n        context = tuple(query_tokens[i:i + N - 1])\n        gram = tuple(query_tokens[i:i + N])\n        if gram not in ngram_counter or context not in context_counter:\n            return float('-inf')\n        mle_prob = ngram_counter[gram] / (context_counter[context] if context else total_tokens)\n        logs.append(math.log(mle_prob))\n    return round(sum(logs), 4)"}
{"task_id": 298, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    start_pad = '<bol> ' * (N - 1)\n    end_pad = ' <eol>' * (N - 1)\n    corpus = [start_pad + ' '.join(sentence.split()) + end_pad for sentence in corpus]\n    tokens = ' '.join(corpus).split()\n    ngram_counts = Counter((tuple(tokens[i:i + N]) for i in range(len(tokens) - N + 1)))\n    prefix_counts = Counter((tuple(tokens[i:i + N - 1]) for i in range(len(tokens) - N + 2))) if N > 1 else Counter(tokens)\n    query = start_pad + ' '.join(query.split()) + end_pad\n    query_tokens = query.split()\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1]) if N > 1 else ngram[0]\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"\n    Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    corpus_tokens = [['<bol>'] * (N - 1) + sent.split() + ['<eol>'] for sent in corpus]\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for tokens in corpus_tokens:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n    query_tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    log_probability = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        if prefix_counts[prefix] == 0 or ngram_counts[ngram] == 0:\n            return float('-inf')\n        log_probability += math.log(ngram_counts[ngram] / prefix_counts[prefix])\n    return round(log_probability, 4)"}
{"task_id": 298, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    counts = defaultdict(Counter)\n    if N > 1:\n        corpus = [['<bol>'] * (N - 1) + sent.split() + ['<eol>'] * (N - 1) for sent in corpus]\n    else:\n        corpus = [sent.split() for sent in corpus]\n    for sentence in corpus:\n        for i in range(N - 1, len(sentence)):\n            ngram = tuple(sentence[i - N + 1:i + 1])\n            prefix = tuple(sentence[i - N + 1:i])\n            counts[prefix][ngram] += 1\n    log_prob = 0.0\n    query = ['<bol>'] * (N - 1) + query.split() + ['<eol>'] * (N - 1)\n    for i in range(N - 1, len(query)):\n        prefix = tuple(query[i - N + 1:i])\n        ngram = tuple(query[i - N + 1:i + 1])\n        if sum(counts[prefix].values()) == 0:\n            return float('-inf')\n        prob = counts[prefix][ngram] / sum(counts[prefix].values())\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    padded_corpus = [' '.join(['<bol>' for _ in range(N - 1)])]\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        padded_corpus.append(' '.join(padded_tokens))\n    padded_corpus = ' '.join(padded_corpus).split()\n    tokens = query.split()\n    padded_query = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n    padded_query = ' '.join(padded_query).split()\n    ngram_counter = Counter(zip(*[padded_corpus[i:] for i in range(N)]))\n    prefix_counter = Counter(zip(*[padded_corpus[i:] for i in range(N - 1)]))\n    total_count = len(padded_corpus)\n    vocab_size = len(set(padded_corpus))\n    log_prob = 0.0\n    for ngram in zip(*[padded_query[i:] for i in range(N)]):\n        if ngram in ngram_counter:\n            prefix = ngram[:-1]\n            count = ngram_counter[ngram]\n            prefix_count = prefix_counter.get(prefix, total_count)\n            prob = count / prefix_count\n            log_prob += math.log(prob)\n        else:\n            return float('-inf')\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n\n    def create_ngrams(text, n):\n        tokens = text.split()\n        padding = ['<bol>'] * (n - 1) + tokens + ['<eol>'] * (n - 1)\n        return [tuple(padding[i:i + n]) for i in range(len(tokens) + n - 1)]\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    total_tokens = 0\n    for sentence in corpus:\n        ngrams = create_ngrams(sentence, N)\n        for ngram in ngrams:\n            ngram_counts[ngram] += 1\n            total_tokens += 1\n            if N > 1:\n                prefix_counts[ngram[:-1]] += 1\n            else:\n                prefix_counts[''] += 1\n    query_ngrams = create_ngrams(query, N)\n    log_prob = 0\n    for ngram in query_ngrams:\n        if ngram_counts[ngram] == 0 or prefix_counts[ngram[:-1]] == 0:\n            return float('-inf')\n        if N == 1:\n            prob = ngram_counts[ngram] / total_tokens\n        else:\n            prob = ngram_counts[ngram] / prefix_counts[ngram[:-1]]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = ['<bol>'] * (N - 1) + sentence.split() + ['<eol>']\n        corpus_tokens.extend(tokens)\n    if len(query.split()) < N:\n        return float('-inf')\n    query_tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    ngram_counts = defaultdict(int)\n    for i in range(len(corpus_tokens) - N + 1):\n        ngram_counts[tuple(corpus_tokens[i:i + N])] += 1\n    prefix_counts = defaultdict(int)\n    for i in range(len(corpus_tokens) - (N - 1)):\n        prefix_counts[tuple(corpus_tokens[i:i + N - 1])] += 1\n    total_log_prob = 0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if ngram not in ngram_counts or tuple(ngram[:-1]) not in prefix_counts:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[tuple(ngram[:-1])]\n        log_prob = math.log(prob)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 298, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    counts = defaultdict(Counter)\n    prefix_counts = defaultdict(Counter)\n    for sentence in corpus:\n        sentence = ['<bol>'] * (N - 1) + sentence.split() + ['<eol>']\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            prefix = tuple(sentence[i:i + N - 1])\n            counts[ngram[-1]].update([ngram])\n            prefix_counts[prefix[-1]].update([prefix])\n    total_log_prob = 0\n    query = query.split()\n    if len(query) < N:\n        return float('-inf')\n    for i in range(len(query) - N + 1):\n        ngram = tuple(query[i:i + N])\n        prefix = tuple(query[i:i + N - 1])\n        if counts[ngram[-1]][ngram] == 0 or prefix_counts[prefix[-1]][prefix] == 0:\n            return float('-inf')\n        prob = counts[ngram[-1]][ngram] / prefix_counts[prefix[-1]][prefix]\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\nfrom sklearn.cluster import KMeans\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    dist_matrix = cdist(X, X, 'euclidean')\n    W = np.exp(-dist_matrix ** 2)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (_, E) = np.linalg.eigh(L, subset_by_index=[0, k])\n    E = E / np.linalg.norm(E, axis=1, keepdims=True)\n    kmeans = KMeans(n_clusters=k, random_state=0).fit(E)\n    return kmeans.labels_.tolist()\nX = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])"}
{"task_id": 302, "completion_id": 1, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    (eigvals, E) = np.linalg.eig(L)\n    idx = eigvals.argsort()[1:k + 1]\n    E = E[:, idx]\n    E0 = E[:k]\n    labels = np.zeros(n, dtype=int)\n    last_labels = np.ones(n, dtype=int)\n    iteration = 0\n    while not np.array_equal(labels, last_labels) and iteration < 100:\n        last_labels = labels.copy()\n        for i in range(k):\n            if np.sum(labels == i) == 0:\n                labels[np.random.randint(n)] = i\n            else:\n                centroid = np.mean(E[labels == i], axis=0)\n                dists = np.linalg.norm(E - centroid, axis=1)\n                labels[dists.argmin()] = i\n        iteration += 1\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(X[i] - X[j])\n                W[i][j] = 1 / (1 + dist)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eig(L)\n    idx = eigvals.argsort()[::-1][:k]\n    E = eigvecs[:, idx]\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    while True:\n        old_labels = np.copy(labels)\n        distances = np.linalg.norm(np.expand_dims(E, 1) - np.expand_dims(centroids, 0), axis=-1)\n        labels = np.argmin(distances, axis=1)\n        for i in range(k):\n            mask = labels == i\n            if mask.sum() > 0:\n                centroids[i] = E[mask].mean(axis=0)\n        if np.all(old_labels == labels):\n            break\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            if i == j:\n                W[i, j] = 0\n            else:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i, :] - X[j, :]))\n                W[j, i] = W[i, j]\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    (eigenvals, eigenvects) = np.linalg.eig(L)\n    sort_index = np.argsort(eigenvals)\n    E = eigenvects[:, sort_index[:k]]\n    centroids = E[:k, :]\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        prev_labels = labels.copy()\n        for i in range(n_samples):\n            labels[i] = np.argmin(np.linalg.norm(centroids - E[i, :], axis=1))\n        for j in range(k):\n            centroids[j, :] = np.mean(E[labels == j, :], axis=0)\n        for l in range(k):\n            if np.sum(labels == l) == 0:\n                centroids[l, :] = E[np.random.randint(n_samples), :]\n        if np.array_equal(prev_labels, labels):\n            break\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + distance)\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    (_, V) = np.linalg.eig(L)\n    idx = np.argsort(np.abs(V[0]))\n    E = V[:, idx[:k]]\n    centroids = E[:k]\n    labels = np.zeros(n)\n    iter = 0\n    while iter < 100:\n        for i in range(n):\n            distances = np.linalg.norm(centroids - E[i], axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k)\n        for i in range(n):\n            new_centroids[int(labels[i])] += E[i]\n            counts[int(labels[i])] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = E[i]\n                counts[i] = 1\n        new_centroids /= counts[:, np.newaxis]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n        iter += 1\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 5, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            if dist == 0:\n                W[i, j] = 0\n                W[j, i] = 0\n            else:\n                W[i, j] = 1 / dist\n                W[j, i] = 1 / dist\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (_, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :k]\n    prev_assignments = np.zeros(n)\n    assignments = np.zeros(n)\n    centroids = eigenvectors[:k]\n    iter_count = 0\n    max_iter = 100\n    while (assignments != prev_assignments).any() and iter_count < max_iter:\n        for i in range(n):\n            distances = np.linalg.norm(centroids - eigenvectors[i], axis=1)\n            cluster = np.argmin(distances)\n            assignments[i] = cluster\n        if len(np.unique(assignments)) < k:\n            for j in range(k):\n                if len(assignments[assignments == j]) == 0:\n                    centroids[j] = eigenvectors[np.random.randint(n)]\n        centroids = np.array([np.mean(eigenvectors[assignments == j], axis=0) for j in range(k)])\n        prev_assignments = assignments.copy()\n        iter_count += 1\n    return assignments.tolist()"}
{"task_id": 302, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    W = np.array([[1 / (1 + np.linalg.norm(X[i] - X[j])) if i != j else 0 for j in range(len(X))] for i in range(len(X))])\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvals, eigenvecs) = np.linalg.eig(L)\n    inds = np.argsort(eigenvals)[:k]\n    E = eigenvecs[:, inds]\n    last_assignments = np.zeros(len(X))\n    for _ in range(100):\n        dists = np.array([[np.linalg.norm(E[i] - E[j]) for j in range(k)] for i in range(len(X))])\n        assignments = np.argmin(dists, axis=1)\n        for j in range(k):\n            if not np.any(assignments == j):\n                E[j] = E[np.random.randint(0, len(X))]\n        if np.all(assignments == last_assignments):\n            break\n        last_assignments = assignments\n    return assignments.tolist()"}
{"task_id": 302, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + dist)\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (_, E) = np.linalg.eigh(L)\n    E = E[:, :k]\n    E_rows = E.copy()\n    (prev_clusters, clusters) = (None, None)\n    for _ in range(100):\n        clusters = np.argmin(np.linalg.norm(E_rows[:, np.newaxis] - E, axis=-1), axis=1)\n        if np.array_equal(prev_clusters, clusters):\n            break\n        prev_clusters = clusters\n        for j in range(k):\n            if np.sum(clusters == j) > 0:\n                E[j] = np.mean(E_rows[clusters == j], axis=0)\n            else:\n                E[j] = E_rows[np.random.randint(n)]\n    return clusters.tolist()"}
{"task_id": 302, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\nclass SpectralClustering:\n\n    def __init__(self, n_clusters=8, max_iter=100, random_state=42):\n        self.n_clusters = n_clusters\n        self.max_iter = max_iter\n        np.random.seed(random_state)\n\n    def euclidean_distance(self, a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def cluster_centers(self, data, labels):\n        return np.array([data[labels == k].mean(axis=0) for k in range(self.n_clusters)])\n\n    def fit(self, X):\n        n_samples = X.shape[0]\n        D = distance_matrix(X, X)\n        D_diag = np.diag(np.power(D.sum(axis=1), -0.5))\n        L = np.eye(n_samples) - D_diag.dot(D).dot(D_diag)\n        (values, vectors) = np.linalg.eig(L)\n        indices = np.argsort(values)[:self.n_clusters]\n        V = vectors[:, indices]\n        prev_labels = np.zeros(n_samples)\n        for _ in range(self.max_iter):\n            dist = distance_matrix(X, self.cluster_centers(V, prev_labels))\n            curr_labels = np.argmin(dist, axis=1)\n            if np.array_equal(prev_labels, curr_labels):\n                break\n            prev_labels = curr_labels\n        return prev_labels.tolist()\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    spectral_clustering = SpectralClustering(n_clusters=k)\n    return spectral_clustering.fit(X)"}
{"task_id": 302, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, _) = X.shape\n    dist_matrix = squareform(pdist(X, 'euclidean'))\n    W = np.exp(-0.5 * dist_matrix)\n    np.fill_diagonal(W, 0)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    ordering = np.argsort(eig_vals)\n    E = eig_vecs[:, ordering][:, :k]\n    centroids = E[:k]\n    labels = np.empty(n, dtype=int)\n    for _ in range(100):\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=-1)\n        new_labels = np.argmin(distances, axis=1)\n        if np.all(new_labels == labels):\n            break\n        labels = new_labels\n        for cluster in range(k):\n            if np.any(labels == cluster):\n                centroids[cluster] = np.mean(E[labels == cluster], axis=0)\n            else:\n                centroids[cluster] = E[np.random.randint(n)]\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev = max(ix - 1, 0)\n    prev_label = params[prev][1]\n    prev_mine = params[prev][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    output = '------------------------- DEBUG -------------------------\\nMine (prev) [{0}]:\\n{1}\\n\\nTheirs (prev) [{0}]:\\n{2}\\n\\nMine [{3}]:\\n{4}\\n\\nTheirs [{3}]:\\n{5}{6}\\n----------------------- END DEBUG -----------------------'.format(prev_label, prev_mine, golds[prev_label], curr_label, curr_mine, golds[curr_label], warn_str)\n    return output"}
{"task_id": 303, "completion_id": 1, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    debug_str = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n' + 'Mine (prev) [{0}]:\\n'.format(prev_label) + '{0}\\n\\n'.format(prev_mine) + 'Theirs (prev) [{0}]:\\n'.format(prev_label) + '{0}\\n\\n'.format(golds[prev_label]) + 'Mine [{0}]:\\n'.format(curr_label) + '{0}\\n\\n'.format(curr_mine) + 'Theirs [{0}]:\\n'.format(curr_label) + '{0}\\n'.format(golds[curr_label]) + warn_str + '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23\n    return debug_str"}
{"task_id": 303, "completion_id": 2, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    debug_str = '------------------------- DEBUG -------------------------\\nMine (prev) [{0}]:\\n{1}\\n\\nTheirs (prev) [{0}]:\\n{2}\\n\\nMine [{3}]:\\n{4}\\n\\nTheirs [{3}]:\\n{5}\\n{6}----------------------- END DEBUG -----------------------'.format(prev_label, prev_mine, golds[prev_label], curr_label, curr_mine, golds[curr_label], warn_str)\n    return debug_str"}
{"task_id": 303, "completion_id": 3, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    prev = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev]\n    (curr_mine, curr_label) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 4, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'"}
{"task_id": 303, "completion_id": 5, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_mine, prev_label) = params[max(ix - 1, 0)]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}\\n{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return debug_str"}
{"task_id": 303, "completion_id": 6, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    if ix > 0:\n        (prev_label, prev_mine) = params[ix - 1]\n    else:\n        (prev_label, prev_mine) = ('', '')\n    (curr_label, curr_mine) = params[ix]\n    return '-' * 25 + ' DEBUG ' + '-' * 25 + '\\nMine (prev) [' + prev_label + ']:\\n' + prev_mine + '\\n\\nTheirs (prev) [' + prev_label + ']:\\n' + str(golds[prev_label]) + '\\n\\nMine [' + curr_label + ']:\\n' + curr_mine + '\\n\\nTheirs [' + curr_label + ']:\\n' + str(golds[curr_label]) + warn_str + '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23"}
{"task_id": 303, "completion_id": 7, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = '-' * 25 + 'DEBUG' + '-' * 25 + '\\n'\n    debug_str += 'Mine (prev) [{}]:\\n{}\\n\\n'.format(prev_label, prev_mine)\n    debug_str += 'Theirs (prev) [{}]:\\n{}\\n\\n'.format(prev_label, golds[prev_label])\n    debug_str += 'Mine [{}]:\\n{}\\n\\n'.format(curr_label, curr_mine)\n    debug_str += 'Theirs [{}]:\\n{}\\n'.format(curr_label, golds[curr_label])\n    debug_str += warn_str\n    debug_str += '-' * 23 + 'END DEBUG' + '-' * 23\n    return debug_str\nparams = [('mine_output1', 'label1'), ('mine_output2', 'label2'), ('mine_output3', 'label3')]\ngolds = {'label1': 'gold_output1', 'label2': 'gold_output2', 'label3': 'gold_output3'}\nix = 2\nwarn_str = '\\nWarning: Something is wrong.\\n'"}
{"task_id": 303, "completion_id": 8, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 9, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_label = params[max(ix - 1, 0)][1]\n    prev_mine = params[max(ix - 1, 0)][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}\\n\\n{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X, y, alpha=1.0, beta=1.0, mu=0.0, V=None, fit_intercept=True):\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    (N, M) = X.shape\n    if V is None:\n        V = np.identity(M)\n    elif np.isscalar(V):\n        V = V * np.identity(M)\n    elif len(V) == M and np.ndim(V) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    prior_cov = np.linalg.inv(V_inv + X.T @ X)\n    posterior_mean = prior_cov @ (V_inv @ mu + X.T @ y)\n    return list(np.round(posterior_mean, 4))"}
{"task_id": 304, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    M = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu = [mu] * M\n    if V is None:\n        V = np.identity(M)\n    elif isinstance(V, (int, float)):\n        V *= np.identity(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    if V.ndim == 1:\n        V_inv = 1 / V\n    elif V.ndim == 2 and V.shape[0] == V.shape[1]:\n        V_inv = np.diag(1 / np.diag(V))\n    V_inv_X_T_X_inv = np.linalg.inv(V_inv * np.dot(X.T, X))\n    b_post_mean = np.dot(V_inv_X_T_X_inv, np.dot(V_inv, mu) + np.dot(X.T, y))\n    return np.round(b_post_mean, 4).tolist()"}
{"task_id": 304, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, list) or isinstance(V, tuple):\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = np.ones(X.shape[1]) * mu\n    V_inv = np.linalg.inv(V)\n    B_Sigma = np.linalg.inv(V_inv + X.T @ X)\n    B_mu = B_Sigma @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in B_mu]"}
{"task_id": 304, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    (N, M) = X.shape\n    mu = np.array(mu)\n    if mu.ndim == 0:\n        mu = np.full(M, mu)\n    elif mu.ndim != 1 or mu.shape[0] != M:\n        raise ValueError('mu must be a scalar or a 1D array of length M')\n    if V is None:\n        V = np.eye(M)\n    V = np.atleast_2d(np.array(V))\n    if V.ndim == 1:\n        V *= np.eye(M)\n    elif V.ndim == 2 and V.shape[0] == 1:\n        V *= np.eye(M)\n    elif V.ndim == 2 and V.shape[0] == V.shape[1]:\n        V = np.diag(np.diag(V))\n    elif V.ndim == 3 and V.shape[1:] == (M, M):\n        V = np.diag(np.diag(V[0]))\n    elif V.shape != (M, M):\n        raise ValueError('V must be a scalar, a 1D list/tuple of length M, or a square 2D numpy array of size MxM')\n    V_inv = np.linalg.inv(V)\n    cov_b = np.linalg.inv(V_inv + X.T @ X)\n    mean_b = cov_b @ (V_inv @ mu.reshape((-1, 1)) + X.T @ y.reshape((-1, 1)))\n    return list(np.round(mean_b.flatten(), 4))"}
{"task_id": 304, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    (N, M) = X.shape\n    if V is None:\n        V = np.identity(M)\n    elif np.isscalar(V):\n        V = V * np.identity(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    inv_V = np.linalg.inv(V)\n    sum_b = np.linalg.inv(inv_V + X.T @ X)\n    mu_b = sum_b @ (inv_V @ np.full((M,), mu) + X.T @ y)\n    return list(np.round(mu_b, 4))"}
{"task_id": 304, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = np.eye(X.shape[1]) * V\n    elif len(np.array(V).shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    sigma_sq_inv = alpha / beta\n    V_inv_mu = np.dot(V_inv, mu)\n    XTX = np.dot(X.T, X)\n    XTy = np.dot(X.T, y)\n    denominator = np.linalg.inv(XTX / beta + V_inv + sigma_sq_inv * np.eye(X.shape[1]))\n    numerator = (np.dot(XTy, beta) + np.dot(V_inv_mu, alpha)) / (beta + alpha)\n    mu_b = np.dot(denominator, numerator).round(4)\n    return mu_b.tolist()"}
{"task_id": 304, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1))\n        X = np.hstack((ones, X))\n    (N, M) = X.shape\n    if not V:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V *= np.eye(M)\n    elif len(np.shape(V)) < 2:\n        V = np.diag(V)\n    else:\n        assert np.shape(V) == (M, M)\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    else:\n        assert len(mu) == M\n    V_inv = np.linalg.inv(V)\n    XTX = np.dot(X.T, X)\n    XTy = np.dot(X.T, y)\n    cov = np.linalg.inv(V_inv + XTX)\n    mean = np.dot(cov, V_inv.dot(mu) + XTy)\n    return list(np.round(mean, 4))"}
{"task_id": 304, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif len(V) > 0 and np.isscalar(V[0]):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    b_Sigma = np.linalg.inv(V_inv + X.T @ X)\n    if np.isscalar(mu):\n        mu = np.ones(V.shape[0]) * mu\n    b_mu = b_Sigma @ (V_inv @ mu + X.T @ y)\n    return [round(coeff, 4) for coeff in b_mu]"}
{"task_id": 304, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.append(np.ones((N, 1)), X, axis=1)\n        M += 1\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = V * np.eye(M)\n    else:\n        V = np.array(V)\n        if len(V.shape) == 1:\n            V_inv = np.diag(V ** (-1))\n        else:\n            V_inv = np.linalg.inv(V)\n    nu = np.linalg.inv(V_inv + X.T @ X)\n    S = V_inv @ np.repeat(mu, M) + X.T @ y\n    mu_b = nu @ S\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_posterior_mean(X, y, alpha=1.0, beta=1.0, mu=0.0, V=None, fit_intercept=True):\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(N), X]\n        M += 1\n    if V is None:\n        V = np.eye(M)\n    else:\n        V = np.array(V, dtype=np.float64)\n        if V.ndim == 0:\n            V = V * np.eye(M)\n        elif V.ndim == 1:\n            V = np.diag(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    mu_b_rounded = [round(coef, 4) for coef in mu_b]\n    return mu_b_rounded"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + (max_freq or fs // 2) / 700)\n    mel_pts = np.linspace(min_mel, max_mel, n_filters + 2)\n    freq_pts = 700 * (10 ** (mel_pts / 2595) - 1)\n    dft_bins = np.arange(0, N // 2 + 1) * fs / N\n    weights = np.zeros((n_filters, len(dft_bins)))\n    for i in range(n_filters):\n        slopes = np.array([mel_pts[i + 1] - mel_pts[i], mel_pts[i + 2] - mel_pts[i + 1]])\n        for j in range(len(dft_bins)):\n            freq = dft_bins[j]\n            weights[i, j] = np.min([slopes[0] * (freq - freq_pts[i]), slopes[1] * (freq_pts[i + 2] - freq)])\n    if normalize:\n        weights = np.maximum(weights, 0)\n        weights = 2 / (freq_pts[2:] - freq_pts[:-2])[:, None] * weights\n    return weights.tolist()"}
{"task_id": 308, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    mel_min = 2595 * math.log10(1 + min_freq / 700)\n    mel_max = 2595 * math.log10(1 + max_freq / 700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_values_in_hz = 700 * (10 ** (mel_values / 2595) - 1)\n    mel_stride = mel_values[1] - mel_values[0]\n    mel_filterbank_matrix = np.zeros((n_filters, N // 2 + 1), dtype=np.float32)\n    for i in range(n_filters):\n        left_hz = freq_values_in_hz[i]\n        mid_hz = freq_values_in_hz[i + 1]\n        right_hz = freq_values_in_hz[i + 2]\n        left_k = left_hz * N / fs\n        mid_k = mid_hz * N / fs\n        right_k = right_hz * N / fs\n        for k in range(N // 2 + 1):\n            freq_in_hz = k * fs / N\n            if mid_hz <= freq_in_hz <= right_hz:\n                mel_filterbank_matrix[i, k] = (freq_in_hz - left_hz) / (right_hz - left_hz)\n            elif left_hz <= freq_in_hz <= mid_hz:\n                mel_filterbank_matrix[i, k] = (right_hz - freq_in_hz) / (right_hz - left_hz)\n        if normalize:\n            mel_filterbank_matrix[i, :] *= 2 / mel_stride\n    return np.round(mel_filterbank_matrix, 4).tolist()"}
{"task_id": 308, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef mel(f: float) -> float:\n    return 2595.0 * np.log10(1.0 + f / 700.0)\ndef mel_inv(mel: float) -> float:\n    return 700.0 * (pow(10, mel / 2595.0) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: float | None=None, normalize: bool=True) -> List[List[float]]:\n    if max_freq is None:\n        max_freq = int(fs / 2)\n    mel_max = mel(max_freq)\n    mel_min = mel(min_freq)\n    dmel = (mel_max - mel_min) / (n_filters + 1)\n    filter_centre_mel = np.arange(mel_min, mel_max, dmel)\n    filter_centre_hz = mel_inv(filter_centre_mel)\n    filter_index = np.floor((N + 1) * filter_centre_hz / fs).astype(int)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        (start, mid, end) = filter_index[i:i + 3]\n        up_slope = np.linspace(0, 1, end - mid)\n        down_slope = np.linspace(1, 0, mid - start)\n        filterbank[i, start:mid] = up_slope\n        filterbank[i, mid:end] = down_slope\n    if normalize:\n        for i in range(n_filters):\n            (f_i, f_i1) = mel_inv(filter_centre_mel[i:i + 2])\n            filterbank[i, :] *= 2 / (f_i1 - f_i)\n    return [list(np.round(row, 4)) for row in filterbank]"}
{"task_id": 308, "completion_id": 3, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + (max_freq if max_freq else fs / 2) / 700)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    n_fft_bins = N // 2 + 1\n    fbank = np.zeros((n_filters, n_fft_bins))\n    for i in range(n_filters):\n        for k in range(n_fft_bins):\n            fc_down = freqs[i]\n            fc = freqs[i + 1]\n            fc_up = freqs[i + 2]\n            fk = k * fs / N\n            left_slope = (fk - fc_down) / (fc - fc_down) if fc - fc_down != 0 else 0\n            right_slope = (fc_up - fk) / (fc_up - fc) if fc_up - fc != 0 else 0\n            w = min(left_slope, right_slope) if left_slope > 0 and right_slope > 0 else max(left_slope, right_slope)\n            fbank[i, k] = w\n    if normalize:\n        for i in range(n_filters):\n            fbank[i, :] /= np.sum(fbank[i, :])\n    fbank_list = fbank.tolist()\n    for i in range(n_filters):\n        for j in range(n_fft_bins):\n            fbank_list[i][j] = round(fbank_list[i][j], 4)\n    return fbank_list"}
{"task_id": 308, "completion_id": 4, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    F = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        k_left = (hz_points[i] * N / fs).astype(int)\n        k_top = (hz_points[i + 1] * N / fs).astype(int)\n        k_right = (hz_points[i + 2] * N / fs).astype(int)\n        for k in range(k_left, k_top):\n            F[i, k] = (k - hz_points[i] * N / fs) / (hz_points[i + 1] * N / fs - hz_points[i] * N / fs)\n        for k in range(k_top, k_right):\n            F[i, k] = (hz_points[i + 2] * N / fs - k) / (hz_points[i + 2] * N / fs - hz_points[i + 1] * N / fs)\n    if normalize:\n        F *= 2 / (hz_points[2:] - hz_points[:-2])[:, np.newaxis]\n    return F.tolist()"}
{"task_id": 308, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef hertz_to_mel(freq):\n    return 2595 * math.log10(1 + freq / 700)\ndef mel_to_hertz(mel):\n    return 700 * (10 ** (mel / 2595) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    Nyquist_freq = fs / 2\n    if max_freq is None:\n        max_freq = Nyquist_freq\n    mels = np.linspace(hertz_to_mel(min_freq), hertz_to_mel(max_freq), n_filters + 2)\n    hertz_bins = [math.floor((N + 1) * mel_to_hertz(mel) / fs) for mel in mels]\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(hertz_bins[i], hertz_bins[i + 1]):\n            filterbank[i, k] = (k * (mels[i + 1] - mels[i + 2]) - (hertz_bins[i] * mels[i + 1] - hertz_bins[i + 2] * mels[i])) / (mels[i + 1] - mels[i])\n        for k in range(hertz_bins[i + 1], hertz_bins[i + 2]):\n            filterbank[i, k] = (hertz_bins[i + 2] * mels[i] - k * mels[i + 2]) / (mels[i + 2] - mels[i])\n    if normalize:\n        filterbank = 2 / (mels[2:] - mels[:-2]) * filterbank\n    return [list(map(lambda x: round(x, 4), list(i))) for i in list(filterbank)]"}
{"task_id": 308, "completion_id": 6, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_centers = np.linspace(min_mel, max_mel, n_filters + 2)\n    freq_centers = mel_to_hz(mel_centers)\n    freq_edges = np.zeros((n_filters + 2, N // 2 + 1))\n    for i in range(n_filters + 2):\n        mel_edges = mel_centers[i] + np.array([-3, 0, 3]) * (mel_centers[2] - mel_centers[0])\n        freq_edges[i, :] = mel_to_hz(mel_edges)\n    weights = np.maximum(0, np.minimum(np.divide(freq_edges[:, 1:] - freq_centers[:, np.newaxis], freq_centers[:, np.newaxis] - freq_edges[:, :-1]), np.divide(freq_centers[:, np.newaxis] - freq_edges[:, 1:], freq_edges[:, :-1] - freq_centers[:, np.newaxis])))\n    if normalize:\n        weights = weights / np.sum(weights, axis=1)[:, np.newaxis]\n    return weights.tolist()\ndef hz_to_mel(f: int) -> float:\n    return 2595 * np.log10(1 + f / 700)\ndef mel_to_hz(mel: float) -> int:\n    return 700 * (10 ** (mel / 2595) - 1)"}
{"task_id": 308, "completion_id": 7, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each\n    row is a triangular filter defined on the Mel scale.  See the detailed\n    task description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_limits = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_limits = [mel_to_hz(m) for m in mel_limits]\n    mel_filterbank = []\n    for i in range(1, n_filters + 1):\n        left_mel = mel_limits[i - 1]\n        centre_mel = mel_limits[i]\n        right_mel = mel_limits[i + 1]\n        left_hz = hz_limits[i - 1]\n        centre_hz = hz_limits[i]\n        right_hz = hz_limits[i + 1]\n        bin_size = fs / N\n        bin_centres = np.arange(N // 2 + 1) * bin_size\n        slopes = np.maximum((bin_centres - left_hz) / (centre_hz - left_hz), (right_hz - bin_centres) / (right_hz - centre_hz))\n        if normalize:\n            slopes *= 2 / (right_mel - left_mel)\n        mel_filterbank.append(slopes)\n    return mel_filterbank\ndef hz_to_mel(f: float) -> float:\n    \"\"\"Convert from Hertz to Mel.\"\"\"\n    return 2595 * np.log10(1 + f / 700)\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert from Mel to Hertz.\"\"\"\n    return 700 * (10 ** (mel / 2595) - 1)\nN = 512\nn_filters = 40\nfs = 44000\nmin_freq = 0\nmax_freq = fs // 2\nnormalize = True"}
{"task_id": 308, "completion_id": 8, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hertz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hertz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    mels = np.linspace(hertz_to_mel(min_freq), hertz_to_mel(max_freq), n_filters + 2)\n    hertz = mel_to_hertz(mels)\n    M = np.zeros((n_filters, N // 2 + 1))\n    for k in range(N // 2 + 1):\n        f_k = k * fs / N\n        for i in range(n_filters):\n            left_slope = (f_k - hertz[i]) / (hertz[i + 1] - hertz[i])\n            right_slope = (hertz[i + 2] - f_k) / (hertz[i + 2] - hertz[i + 1])\n            M[i, k] = max(0, min(left_slope, right_slope))\n        if normalize:\n            M[i, :] /= np.sum(M[i, :])\n    return M.tolist()"}
{"task_id": 308, "completion_id": 9, "solution": "import numpy as np\nfrom math import log10\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    max_freq = max_freq or fs / 2\n    mel_min = 2595 * log10(1 + min_freq / 700)\n    mel_max = 2595 * log10(1 + max_freq / 700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_values = 700 * (10 ** (mel_values / 2595) - 1)\n    F = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            F[i, k] = np.min([(f_k - freq_values[i]) / (freq_values[i + 1] - freq_values[i]), (freq_values[i + 2] - f_k) / (freq_values[i + 2] - freq_values[i + 1])])\n            if normalize:\n                F[i, k] *= 2 / (freq_values[i + 2] - freq_values[i])\n    return F.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len if symmetric else window_len - 1\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(value, 4) for value in window]"}
{"task_id": 312, "completion_id": 1, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    window = [a0 - a1 * np.cos(2 * np.pi * i / (window_len - 1)) + a2 * np.cos(4 * np.pi * i / (window_len - 1)) - a3 * np.cos(6 * np.pi * i / (window_len - 1)) for i in range(window_len)]\n    if symmetric:\n        window[-1] = window[-2]\n        window = window[:-1]\n    return [round(w, 4) for w in window]"}
{"task_id": 312, "completion_id": 2, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len - 1 if not symmetric else window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return np.round(window, 4).tolist()"}
{"task_id": 312, "completion_id": 3, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len - 1)\n    result = a0 - a1 * np.cos(2 * np.pi * n / (window_len - 1)) + a2 * np.cos(4 * np.pi * n / (window_len - 1)) - a3 * np.cos(6 * np.pi * n / (window_len - 1))\n    return np.round(result, 4).tolist()"}
{"task_id": 312, "completion_id": 4, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    window = a0\n    window -= a1 * np.cos(2 * np.pi * np.arange(window_len) / (window_len - 1))\n    window += a2 * np.cos(4 * np.pi * np.arange(window_len) / (window_len - 1))\n    window -= a3 * np.cos(6 * np.pi * np.arange(window_len) / (window_len - 1))\n    if symmetric:\n        window = np.concatenate([window[:0:-1], window])\n    return np.round(window, 4).tolist()"}
{"task_id": 312, "completion_id": 5, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len if symmetric else window_len - 1\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(x, 4) for x in window]"}
{"task_id": 312, "completion_id": 6, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman-Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    if symmetric:\n        window_len += 1\n    n = np.arange(window_len)\n    N = window_len - 1\n    w = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return np.round(w, 4).tolist()"}
{"task_id": 312, "completion_id": 7, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len - 1)\n    window = a0\n    window -= a1 * np.cos(2 * np.pi * n / (window_len - 1))\n    window += a2 * np.cos(4 * np.pi * n / (window_len - 1))\n    window -= a3 * np.cos(6 * np.pi * n / (window_len - 1))\n    return [round(i, 4) for i in window.tolist()]"}
{"task_id": 312, "completion_id": 8, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    t = np.linspace(0, window_len, window_len, endpoint=False)\n    window = a0 - a1 * np.cos(2 * np.pi * t / window_len) + a2 * np.cos(4 * np.pi * t / window_len) - a3 * np.cos(6 * np.pi * t / window_len)\n    if symmetric:\n        window = np.concatenate([window, window[::-1][:-1]])\n    else:\n        pass\n    return [round(i, 4) for i in window]"}
{"task_id": 312, "completion_id": 9, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(val, 4) for val in window]"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    x = abs(x)\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    result += math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    gamma_sum = np.sum(gamma[d, :])\n    result = digamma(gamma[d, t]) - digamma(gamma_sum)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef digamma(x, threshold=6):\n    if x < threshold:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 0.5 / x - 1 / 12 / x ** 2 + 1 / 120 / x ** 4 - 1 / 252 / x ** 6\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n    \n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of digamma(gamma[d,t]) - digamma(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_sum = np.sum(gamma[d])\n    return round(digamma(gamma[d, t]) - digamma(gamma_sum), 4)\ngamma = [[1, 2, 3], [4, 5, 6]]"}
{"task_id": 313, "completion_id": 2, "solution": "import numpy as np\ndef digamma(x):\n    \"\"\"Implementation of the digamma function.\"\"\"\n    result = 0\n    while x <= 6:\n        result -= 1 / x\n        x += 1\n    result += np.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    gamma_d = gamma[d, :]\n    gamma_sum = np.sum(gamma_d)\n    return round(digamma(gamma_d[t]) - digamma(gamma_sum), 4)"}
{"task_id": 313, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef digamma(x, eps=1e-06):\n    while x < 6:\n        x += 1\n        x = 1 / x\n    result = 0\n    result -= 1 / x\n    term = -1 / ((2 * x + 1) * (2 * x + 1))\n    i = 1\n    while abs(term) > eps:\n        result += term\n        i += 1\n        term *= -1 * (2 * i - 1) / ((2 * i + 1) * (2 * i + 1))\n    result += math.log(x)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma)\n    gamma_dt = gamma[d, t]\n    gamma_dt_row_sum = np.sum(gamma[d, :])\n    expectation = digamma(gamma_dt) - digamma(gamma_dt_row_sum)\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function of x.\n\n    For x >= 6, a simple asymptotic expansion is used. For x < 6, a series\n    expansion is applied to a small value x, then shifted upwards.\n\n    Parameters\n    ----------\n    x : float\n        Input to the digamma function.\n\n    Returns\n    -------\n    float\n        The result of the digamma function evaluation.\n    \"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    return round(digamma(gamma[d][t]) - digamma(sum(gamma[d])), 4)\ngamma = [[1, 2, 3], [4, 5, 6]]"}
{"task_id": 313, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef digamma(x, iters=2):\n    if x <= 0:\n        raise ValueError('x must be positive')\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    x_inv = 1 / x\n    result += math.log(x) - 0.5 * x_inv\n    x_inv *= x\n    result += 1 / 12 * x_inv - 1 / 120 * x_inv\n    return round(result, 4)\ndef expected_log_dirichlet(gamma, d, t):\n    gamma = np.array(gamma)\n    gamma_sum = np.sum(gamma[d, :])\n    return digamma(gamma[d, t]) - digamma(gamma_sum)"}
{"task_id": 313, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef digamma(x, terms=1000):\n    f = 0\n    for i in range(terms):\n        f += 1 / (i + x)\n    return math.log(x) - f\ndef expected_log_dirichlet(gamma, d, t):\n    if t == 0:\n        \u03c8_gamma_t = digamma(gamma[d][0])\n        \u03c8_sum_gamma = digamma(np.sum(gamma[d]))\n        return round(\u03c8_gamma_t - \u03c8_sum_gamma, 4)\n    else:\n        return 0\ngamma = np.array([[1, 2, 3, 4, 5]])\nd = 0\nt = 0"}
{"task_id": 313, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef digamma_recursive(x):\n    \"\"\"Calculate the digamma function using a recursive formula.\"\"\"\n    return digamma_recursive(x + 1) - 1 / x if x < 7 else math.log(x) - 0.5 / x - 1.0 / (12 * x ** 2) + 1.0 / (120 * x ** 4) - 1.0 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.    \n    \"\"\"\n    gamma = np.array(gamma)\n    (gamma_dt, sum_gamma_d) = (digamma_recursive(gamma[d, t]), digamma_recursive(np.sum(gamma[d, :])))\n    expectation = gamma_dt - sum_gamma_d\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef Digamma(x, iter=1000):\n    result = 0\n    for i in range(iter):\n        result += 1 / float(i + x) - 1 / (float(i + 1) + x)\n    return result + math.log(x) - 0.5 / x - 1.0 / (12 * x ** 2) + 1.0 / (120 * x ** 4)\ndef expected_log_dirichlet(gamma, d, t):\n    gamma_sum = np.sum(gamma[d, :])\n    return round(np.round(Digamma(gamma[d, t]) - Digamma(gamma_sum), 4), 4)"}
{"task_id": 313, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using a recursion and asymptotic expansion.\"\"\"\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    result += math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    sum_gamma = np.sum(gamma[d, :])\n    result = digamma(gamma[d, t]) - digamma(sum_gamma)\n    return round(result, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_prediction, prev_label) = params[max(ix - 1, 0)]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}\\n{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 317, "completion_id": 1, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 317, "completion_id": 2, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 317, "completion_id": 3, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    (curr_pred, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 317, "completion_id": 4, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    formatted_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return formatted_str\nparams = [('pred1', 'label1'), ('pred2', 'label2'), ('pred3', 'label3')]\ngolds = {'label1': 'gold1', 'label2': 'gold2', 'label3': 'gold3'}\nix = 0\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 5, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[curr_ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'"}
{"task_id": 317, "completion_id": 6, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'"}
{"task_id": 317, "completion_id": 7, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_label, prev_prediction) = params[max(ix - 1, 0)]\n    prev_gold = golds[prev_label]\n    (curr_label, curr_prediction) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 317, "completion_id": 8, "solution": "def err_fmt(params, golds, ix, warn_str=''):\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    error_report = f'\\n    ------------------------- DEBUG -------------------------\\n    Mine (prev) [{prev_label}]:\\n    {prev_prediction}\\n\\n    Theirs (prev) [{prev_label}]:\\n    {prev_gold}\\n\\n    Mine [{curr_label}]:\\n    {curr_prediction}\\n\\n    Theirs [{curr_label}]:\\n    {curr_gold}{warn_str}\\n    ----------------------- END DEBUG -----------------------\\n    '\n    return error_report\nparams = [('pred1', 'label1'), ('pred2', 'label2')]\ngolds = {'label1': 'gold1', 'label2': 'gold2'}"}
{"task_id": 317, "completion_id": 9, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n\n    def stump(X, y, w):\n        (num_samples, num_features) = X.shape\n        min_error = float('inf')\n        best_feature = 0\n        best_threshold = 0.0\n        best_polarity = 1\n        total = np.sum(w)\n        sign = np.zeros(num_samples)\n        for i in range(num_features):\n            feature_column = X[:, i]\n            min_value = np.min(feature_column)\n            max_value = np.max(feature_column)\n            candidate_thresholds = np.linspace(min_value, max_value, 10)\n            for threshold in candidate_thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(feature_column - threshold)\n                    error = np.sum(w[predictions != y])\n                    if error < min_error:\n                        min_error = error\n                        best_feature = i\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        sign = predictions.copy()\n        return (best_feature, best_threshold, best_polarity, min_error, sign, total)\n\n    def update_weights(weights, a, y, h):\n        return weights * np.exp(-a * y * h) / np.sum(weights)\n\n    def predict(X, stumps):\n        (n_samples, _) = X.shape\n        alpha_m = np.array([stump[3] for stump in stumps])\n        epsilon_m = 1 - alpha_m\n        y = np.array([np.sum([alpha * h for (alpha, h) in zip(alpha_m, [stump[4] for stump in stumps])]) for stump in stumps])\n        Fx = np.sign(y)\n        return [-1 if f < 0 else 1 for f in Fx]\n    (n_samples, num_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        (feature, threshold, polarity, error, h, total) = stump(X_train, y_train, w)\n        alpha = 0.5 * math.log((1 - error) / error)\n        stumps.append((feature, threshold, polarity, error, total * alpha, h))\n        w = update_weights(w, alpha, y_train, h)\n    return predict(X_test, stumps)"}
{"task_id": 318, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"\n    Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (N, _) = X_train.shape\n    weights = np.ones(N) / N\n    y_train = y_train.astype(int)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        best_feature = None\n        best_threshold = None\n        best_polarity = 1\n        for j in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, j])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = polarity * np.sign(X_train[:, j] - threshold)\n                    error = sum(weights[predictions != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_stump = predictions.copy()\n                        best_feature = j\n                        best_threshold = threshold\n                        best_polarity = polarity\n        eps = 1e-09 * (best_stump == y_train).all()\n        weight = 0.5 * np.log((1 - eps) / (eps + np.finfo(float).eps))\n        stumps.append((best_feature, best_threshold, best_polarity))\n        stump_weights.append(weight)\n        exponentials = np.exp(-weight * y_train * best_stump)\n        weights = weights * exponentials / (weights @ exponentials)\n    y_pred = []\n    for x in X_test:\n        stump_preds = [stump_weight * np.sign(x[feature] - threshold) * polarity for ((feature, threshold, polarity), stump_weight) in zip(stumps, stump_weights)]\n        y_pred.append(np.sign(sum(stump_preds)))\n    return list(map(int, y_pred))"}
{"task_id": 318, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.ones(n_samples) / n_samples\n    stumps = np.zeros(n_estimators, dtype=np.int)\n    stump_weights = np.zeros(n_estimators)\n    errors = np.zeros(n_estimators)\n    for i in range(n_estimators):\n        min_error = np.inf\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = polarity * np.ones(n_samples)\n                    predictions[X_train[:, j] < threshold] = -polarity\n                    error = np.sum(w[predictions != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        predictions *= -1\n                    if error < min_error:\n                        min_error = error\n                        stumps[i] = j\n                        stump_weights[i] = polarity\n                        errors[i] = error\n        alpha = 0.5 * math.log((1.0 - errors[i]) / errors[i])\n        predictions = stump_weights[i] * np.ones(n_samples)\n        predictions[X_train[:, stumps[i]] < thresholds[stumps[i]]] = -stump_weights[i]\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    final_predictions = np.zeros(X_test.shape[0])\n    for i in range(n_estimators):\n        predictions = stump_weights[i] * np.ones(X_test.shape[0])\n        predictions[X_test[:, stumps[i]] < thresholds[stumps[i]]] = -stump_weights[i]\n        final_predictions += alpha * predictions\n    final_predictions = np.sign(final_predictions).astype(int)\n    final_predictions[final_predictions == 0] = 1\n    return final_predictions.tolist()"}
{"task_id": 318, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    weak_classifiers = []\n    for _ in range(n_estimators):\n        (j, t, p, predictions) = train_decision_stump(X_train, y_train, weights)\n        error_rate = np.sum(weights[predictions != y_train])\n        weight = 0.5 * np.log((1.0 - error_rate) / error_rate)\n        weights *= np.exp(-weight * y_train * predictions)\n        weights /= np.sum(weights)\n        weak_classifiers.append((j, t, p, weight))\n    return predict(X_test, weak_classifiers)\ndef predict(X, weak_classifiers):\n    \"\"\"\n    Make predictions with the given weak classifiers\n    \"\"\"\n    predictions = np.zeros(len(X))\n    for (j, t, p, weight) in weak_classifiers:\n        predictions += weight * np.array([p if sample[j] > t else -p for sample in X])\n    return [-1 if prediction < 0 else 1 for prediction in predictions]\ndef train_decision_stump(X, y, weights):\n    \"\"\"\n    Train a decision stump\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (total_min_error, best_j, best_t, best_p) = (float('inf'), None, None, None)\n    for j in range(n_features):\n        values = np.sort(np.unique(X[:, j]))\n        for i in range(len(values) - 1):\n            t = (values[i] + values[i + 1]) / 2\n            for p in (1, -1):\n                predictions = np.array([p if sample[j] > t else -p for sample in X])\n                error = np.sum(weights[predictions != y])\n                if error > 0.5:\n                    error = 1 - error\n                    p *= -1\n                if error < total_min_error:\n                    total_min_error = error\n                    (best_j, best_t, best_p) = (j, t, p)\n    return (best_j, best_t, best_p, np.array([best_p if sample[best_j] > best_t else -best_p for sample in X]))"}
{"task_id": 318, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    stumps = []\n    for _ in range(n_estimators):\n        min_error = np.inf\n        best_stump = None\n        for j in range(n):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    preds = p * np.sign(X_train[:, j] - t)\n                    error = np.sum(weights[preds != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        p *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (j, t, p)\n        epsilon = min_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        predictions = np.sign(X_train[:, best_stump[0]] - best_stump[1])\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, alpha))\n    final_preds = np.zeros(X_test.shape[0])\n    for (stump, alpha) in stumps:\n        preds = stump[2] * np.sign(X_test[:, stump[0]] - stump[1])\n        final_preds += alpha * preds\n    final_preds = np.sign(final_preds).tolist()\n    return final_preds"}
{"task_id": 318, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    (n_samples, n_features) = X_train.shape\n    w = np.full((n_samples,), 1 / n_samples)\n    hypotheses = []\n    alpha = []\n    for _ in range(n_estimators):\n        min_error = math.inf\n        for feature in range(n_features):\n            indices = X_train[:, feature].argsort()\n            x_sorted = X_train[indices]\n            y_sorted = y_train[indices]\n            weights_sorted = w[indices]\n            for i in range(n_samples):\n                for p in [-1, 1]:\n                    epsilon = np.sum(weights_sorted[:i] * (y_sorted[:i] != p)) + np.sum(weights_sorted[i:] * (y_sorted[i:] != -p))\n                    if epsilon < min_error:\n                        min_error = epsilon\n                        threshold = (x_sorted[i - 1, feature] + x_sorted[i, feature]) / 2\n                        j = feature\n                        polarity = p\n        alpha_m = 0.5 * math.log((1 - min_error) / min_error)\n        h_predictions = np.ones(np.shape(y_train))\n        h_predictions[p * X_train[:, j] < p * threshold] = -1\n        w *= np.exp(-alpha_m * y_train * h_predictions)\n        w /= np.sum(w)\n        hypotheses.append((j, threshold, polarity))\n        alpha.append(alpha_m)\n    y_pred = np.zeros(X_test.shape[0])\n    for ((j, threshold, polarity), alpha_m) in zip(hypotheses, alpha):\n        y_pred += alpha_m * polarity * (2 * (X_test[:, j] > threshold) - 1)\n    return [1 if y >= 0 else -1 for y in y_pred]"}
{"task_id": 318, "completion_id": 6, "solution": "import math\nimport numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_idx = None\n        self.threshold = None\n        self.alpha = None\nclass AdaBoost:\n\n    def __init__(self, n_clf=5):\n        self.n_clf = n_clf\n\n    def fit(self, X, y):\n        (n_samples, n_features) = np.shape(X)\n        w = np.full(n_samples, 1 / n_samples)\n        self.clfs = []\n        for _ in range(self.n_clf):\n            clf = DecisionStump()\n            min_error = float('inf')\n            for feature_i in range(n_features):\n                feature_values = np.expand_dims(X[:, feature_i], axis=1)\n                unique_values = np.unique(feature_values)\n                for threshold in unique_values:\n                    p = 1\n                    prediction = np.ones(np.shape(y))\n                    prediction[X[:, feature_i] < threshold] = -1\n                    error = np.sum(w[prediction != y])\n                    if error > 0.5:\n                        error = 1 - error\n                        p = -1\n                    if error < min_error:\n                        clf.polarity = p\n                        clf.threshold = threshold\n                        clf.feature_idx = feature_i\n                        min_error = error\n            clf.alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n            predictions = np.ones(np.shape(y))\n            negative_idx = clf.polarity * X[:, clf.feature_idx] < clf.polarity * clf.threshold\n            predictions[negative_idx] = -1\n            w *= np.exp(-clf.alpha * y * predictions)\n            w /= np.sum(w)\n            self.clfs.append(clf)\n\n    def predict(self, X):\n        n_samples = np.shape(X)[0]\n        y_pred = np.zeros((n_samples, 1))\n        for clf in self.clfs:\n            predictions = np.ones(np.shape(y_pred))\n            negative_idx = clf.polarity * X[:, clf.feature_idx] < clf.polarity * clf.threshold\n            predictions[negative_idx] = -1\n            y_pred += clf.alpha * predictions\n        y_pred = np.sign(y_pred).flatten().tolist()\n        return y_pred\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    model = AdaBoost(n_clf=n_estimators)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    return preds"}
{"task_id": 318, "completion_id": 7, "solution": "import math\nimport numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_index = None\n        self.threshold = None\n        self.alpha = None\nclass Adaboost:\n\n    def __init__(self, n_clf=5):\n        self.n_clf = n_clf\n\n    def fit(self, X, y):\n        (n_samples, n_features) = X.shape\n        w = np.full(n_samples, 1 / n_samples)\n        self.clfs = []\n        for _ in range(self.n_clf):\n            clf = DecisionStump()\n            min_error = float('inf')\n            for feature_i in range(n_features):\n                feature_values = X[:, feature_i]\n                unique_values = np.unique(feature_values)\n                for threshold in unique_values:\n                    polarity = 1\n                    prediction = np.ones(np.alen(y))\n                    prediction[X[:, feature_i] < threshold] = -1\n                    error = np.sum(w[y != prediction])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -1\n                    if error < min_error:\n                        clf.polarity = polarity\n                        clf.threshold = threshold\n                        clf.feature_index = feature_i\n                        min_error = error\n            clf.alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n            self.clfs.append(clf)\n            predictions = np.ones(np.alen(y))\n            for clf in self.clfs:\n                predictions[clf.polarity * X[:, clf.feature_index] < clf.polarity * clf.threshold] = -1\n            w *= np.exp(-clf.alpha * y * predictions)\n            w /= np.sum(w)\n\n    def predict(self, X):\n        n_samples = np.alen(X)\n        y_pred = np.zeros((n_samples, 1))\n        for clf in self.clfs:\n            predictions = np.ones(np.alen(y_pred))\n            predictions[clf.polarity * X[:, clf.feature_index] < clf.polarity * clf.threshold] = -1\n            y_pred += clf.alpha * predictions\n        y_pred = np.sign(y_pred).flatten()\n        return y_pred\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    model = Adaboost(n_clf=n_estimators)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test).tolist()\n    return y_pred"}
{"task_id": 318, "completion_id": 8, "solution": "import math\nimport numpy as np"}
{"task_id": 318, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    weights = np.ones(len(X_train)) / len(X_train)\n    for m in range(n_estimators):\n        (best_feature, best_threshold, best_polarity, best_error) = (None, None, None, np.inf)\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(weights[predictions != y_train])\n                    if error < best_error:\n                        (best_feature, best_threshold, best_polarity, best_error) = (feature, threshold, polarity, error)\n        alpha = 0.5 * math.log((1.0 - best_error) / best_error)\n        predictions = best_polarity * np.sign(X_train[:, best_feature] - best_threshold)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    final_predictions = np.zeros(len(X_test))\n    for feature in range(X_train.shape[1]):\n        threshold = np.unique(X_train[:, feature])[1]\n        for polarity in [-1, 1]:\n            predictions = polarity * np.sign(X_test[:, best_feature] - threshold)\n            final_predictions += alpha * predictions\n    return [1 if prediction >= 0 else -1 for prediction in final_predictions]"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    f = np.array([k * (fs / N) for k in range(N)])\n    if positive_only:\n        f = f[:N // 2 + 1]\n    else:\n        f_neg = np.concatenate(([0], -f[:0:-1]))\n        f = np.concatenate((f, f_neg))\n    return np.round(f, 4).tolist()"}
{"task_id": 329, "completion_id": 1, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    bin_freqs = [round(k * df, 4) for k in range(N)]\n    if positive_only:\n        half = N // 2\n        return bin_freqs[:half + 1]\n    else:\n        return bin_freqs"}
{"task_id": 329, "completion_id": 2, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    else:\n        delta_f = fs / N\n        if positive_only:\n            bin_frequencies = [k * delta_f for k in range(N // 2 + 1)]\n        else:\n            bin_frequencies = [(k if k <= N // 2 else k - N) * delta_f for k in range(N)]\n        return [round(freq, 4) for freq in bin_frequencies]"}
{"task_id": 329, "completion_id": 3, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    f_bins = [k * (fs / N) for k in range(N)]\n    if positive_only:\n        f_bins = f_bins[:N // 2 + 1]\n    return [round(f, 4) for f in f_bins]"}
{"task_id": 329, "completion_id": 4, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"\n    Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    else:\n        k = np.fft.fftfreq(N, 1 / fs)\n    f_k = k * (fs / N)\n    return np.round(f_k, 4).tolist()"}
{"task_id": 329, "completion_id": 5, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        f = np.arange(0, N // 2 + 1) * (fs / N)\n    else:\n        f = np.arange(-(N // 2), N // 2 + 1) * (fs / N)\n    return np.round(f, 4).tolist()"}
{"task_id": 329, "completion_id": 6, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    freq_bins = np.array([k * fs / N for k in range(N)])\n    if positive_only:\n        freq_bins = freq_bins[:N // 2 + 1]\n    return freq_bins.round(4).tolist()"}
{"task_id": 329, "completion_id": 7, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    n_range = np.arange(N)\n    freqs = n_range * delta_f\n    if positive_only:\n        freqs = freqs[:N // 2 + 1]\n    freqs = np.round(freqs, 4).tolist()\n    return freqs"}
{"task_id": 329, "completion_id": 8, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        bins = [k * df for k in range(N // 2 + 1)]\n    else:\n        bins = [(k if k <= N // 2 else k - N) * df for k in range(N)]\n    bins = [round(bin, 4) for bin in bins]\n    return bins"}
{"task_id": 329, "completion_id": 9, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    freqs = np.fft.fftfreq(N, 1 / fs) * fs\n    freqs_rounded = [round(f, 4) for f in freqs]\n    if positive_only:\n        N = len(freqs_rounded)\n        half = N // 2 if N % 2 == 0 else N // 2 + 1\n        return freqs_rounded[:half]\n    return freqs_rounded"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    if isinstance(y_true, list):\n        y_true = np.array(y_true)\n    if isinstance(predictions, list):\n        predictions = np.array(predictions)\n    if isinstance(oob_mask, list):\n        oob_mask = np.array(oob_mask)\n    assert y_true.ndim == 1\n    assert predictions.ndim == 2\n    assert oob_mask.shape == predictions.shape\n    y_true = y_true.astype(np.float64)\n    predictions = predictions.astype(np.float64)\n    oob_mask = oob_mask.astype(np.bool_)\n    oob_predictions = np.where(oob_mask, predictions, np.nan)\n    avg_oob_predictions = np.nanmean(oob_predictions, axis=1)\n    avg_oob_predictions = np.nan_to_num(avg_oob_predictions, nan=np.inf)\n    mask = ~np.isinf(avg_oob_predictions)\n    if not np.any(mask):\n        return -1\n    mse = np.mean(np.square(y_true[mask] - avg_oob_predictions[mask]))\n    return round(mse, 4)"}
{"task_id": 331, "completion_id": 1, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask).astype(bool)\n    indices = np.where(np.any(oob_mask, axis=1))[0]\n    if len(indices) > 0:\n        squared_errors = np.mean((predictions[indices][oob_mask[indices]] - y_true[indices, None]) ** 2, axis=1)\n        mse = np.mean(squared_errors)\n    else:\n        mse = -1\n    return round(mse, 4)"}
{"task_id": 331, "completion_id": 2, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    errs = []\n    for i in range(y_true.shape[0]):\n        y_i = y_true[i]\n        preds_i = predictions[i, oob_mask[i]]\n        if preds_i.shape[0] > 0:\n            y_pred_i = np.mean(preds_i)\n            err_i = (y_pred_i - y_i) ** 2\n            errs.append(err_i)\n    if len(errs) == 0:\n        return -1\n    else:\n        return round(np.mean(errs), 4)"}
{"task_id": 331, "completion_id": 3, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    err_squares = []\n    for sample_idx in np.where(oob_mask.any(axis=1))[0]:\n        oob_predictions = predictions[sample_idx, oob_mask[sample_idx]]\n        mean_prediction = np.mean(oob_predictions)\n        err_squares.append(np.square(mean_prediction - y_true[sample_idx]))\n    if err_squares:\n        mse = np.mean(err_squares)\n        return round(mse, 4)\n    else:\n        return -1"}
{"task_id": 331, "completion_id": 4, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    oob_samples = np.any(oob_mask, axis=1)\n    oob_indicies = np.where(oob_samples)[0]\n    if oob_indicies.size == 0:\n        return -1\n    oob_avg = np.mean(predictions[oob_samples], axis=1)\n    oob_squared_errors = np.square(oob_avg - y_true[oob_samples])\n    return np.round(np.mean(oob_squared_errors), 4)"}
{"task_id": 331, "completion_id": 5, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    oob_samples_mask = oob_mask.any(axis=1)\n    if not oob_samples_mask.any():\n        return -1.0\n    averages = np.average(predictions[oob_samples_mask], axis=1)\n    squared_errors = np.square(averages - y_true[oob_samples_mask])\n    oob_mse = np.mean(squared_errors)\n    return round(oob_mse, 4)"}
{"task_id": 331, "completion_id": 6, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    oob_mask = np.array(oob_mask, dtype=bool)\n    predictions = np.array(predictions)\n    oob_samples = predictions[oob_mask]\n    y_true_oob = y_true[oob_mask.any(axis=1)]\n    if len(y_true_oob) == 0:\n        return -1\n    y_pred_oob_avg = oob_samples[oob_mask[oob_mask.any(axis=1)]].mean(axis=1)\n    squared_errors = np.square(y_true_oob - y_pred_oob_avg)\n    return round(np.mean(squared_errors), 4)"}
{"task_id": 331, "completion_id": 7, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest \n    regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = predictions[oob_mask.any(axis=1)]\n    oob_true = y_true[oob_mask.any(axis=1)]\n    if len(oob_predictions) == 0:\n        return -1\n    oob_pred_avg = oob_predictions.mean(axis=1)\n    oob_sq_errors = (oob_pred_avg - oob_true) ** 2\n    oob_mse_val = oob_sq_errors.mean()\n    return round(oob_mse_val, 4)"}
{"task_id": 331, "completion_id": 8, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = predictions[oob_mask]\n    oob_true_values = np.repeat(y_true, np.sum(oob_mask, axis=1))\n    if oob_true_values.size == 0:\n        return -1\n    else:\n        mse = np.mean((oob_predictions - oob_true_values) ** 2)\n        return round(mse, 4)\ny_true = [1, 2, 3, 4]\npredictions = [[1.1, 1.9], [1.8, 2.2], [2.8, 3.2], [3.8, 4.2]]\noob_mask = [[0, 1], [1, 1], [1, 0], [0, 0]]"}
{"task_id": 331, "completion_id": 9, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    inbag_predictions = predictions[oob_mask]\n    average_predictions = np.mean(inbag_predictions, axis=1)\n    squared_errors = np.square(y_true - average_predictions)\n    mse = np.mean(squared_errors)\n    return round(mse, 4) if len(squared_errors) > 0 else -1"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions, min_support):\n\n    def update_tree(items, node, counter):\n        if items:\n            first = items[0]\n            child = node['children'].get(first)\n            if child is None:\n                child = node['children'][first] = {'support': 0, 'children': {}}\n            child['support'] += 1\n            counter[items[0]] += 1\n            update_tree(items[1:], child, counter)\n\n    def build_conditional_tree(node, conditional_tree, counter, last_cond):\n        for (item, count) in counter.items():\n            if count >= min_support:\n                if last_cond:\n                    conditional_tree[item] = conditional_tree.get(item, 0) + 1\n                else:\n                    new_cond_tree = conditional_tree.setdefault(item, {})\n                    build_conditional_tree(node['children'][item], new_cond_tree, counter, True)\n    item_counter = Counter()\n    for transaction in transactions:\n        transaction = [item for item in sorted(transaction) if item_counter[item] >= min_support]\n        update_tree(transaction, fp_tree, item_counter)\n    conditional_tree = {}\n    build_conditional_tree(fp_tree, conditional_tree, item_counter, False)\n    return conditional_tree\nfp_tree = {'support': 0, 'children': {}}\nmin_support = 2\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'e', 'f'], ['a', 'b', 'c'], ['a', 'b', 'd']]"}
{"task_id": 332, "completion_id": 1, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n\n    def update_tree(itemset, node, remaining_itemset):\n        if not itemset:\n            return\n        current_item = remaining_itemset[0]\n        if current_item not in node['children']:\n            node['children'][current_item] = {'support': 0, 'children': {}}\n        node['support'] += 1\n        update_tree(itemset, node['children'][current_item], remaining_itemset[1:])\n    item_counter = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counter[item] += 1\n    frequent_items = sorted([item for (item, freq) in item_counter.items() if freq >= min_support], key=lambda x: (-item_counter[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        itemset = sorted([item for item in transaction if item in frequent_items], key=lambda x: item_counter[x], reverse=True)\n        for i in range(len(itemset)):\n            update_tree(itemset[i:], root, itemset)\n    return root"}
{"task_id": 332, "completion_id": 2, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(transaction)\n    items = [item for (item, support) in item_support.items() if support >= min_support]\n    items.sort(key=lambda item: (-item_support[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in items]\n        node = root\n        for item in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node = node['children'][item]\n            node['support'] += 1\n    return root"}
{"task_id": 332, "completion_id": 3, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n\n    def update_tree(tree: dict, items: list[str], support: int):\n        \"\"\"\n        Recursive function to walk the current path in the FP-Tree and update/extend the path.\n        \"\"\"\n        if items:\n            item = items[0]\n            if item in tree['children']:\n                child = tree['children'][item]\n            else:\n                child = tree['children'][item] = {'support': 0, 'children': {}}\n            child['support'] += support\n            update_tree(child, items[1:], support)\n\n    def insert_item(tree: dict, itemset: list[str], support: int):\n        \"\"\"\n        Insert an itemset into the FP-Tree.\n        \"\"\"\n        if itemset:\n            first = itemset[0]\n            if first in tree['children']:\n                next_point = tree['children'][first]\n            else:\n                next_point = tree['children'][first] = {'support': 0, 'children': {}}\n            insert_item(next_point, itemset[1:], support)\n    item_count = Counter()\n    for trans in transactions:\n        for item in set(trans):\n            item_count[item] += 1\n    fp_tree = {'support': 0, 'children': {}}\n    for trans in transactions:\n        itemset = [item for item in item_count if item_count[item] >= min_support and item in trans]\n        itemset.sort(key=lambda x: (-item_count[x], x))\n        update_tree(fp_tree, itemset, 1)\n        insert_item(fp_tree, itemset, 1)\n    return fp_tree"}
{"task_id": 332, "completion_id": 4, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    items = [[item, count] for (item, count) in item_counts.items() if count >= min_support]\n    items.sort(key=lambda x: (-x[1], x[0]))\n    ordered_transactions = [[item for item in items if item in transaction] for transaction in transactions]\n    root = {'support': 0, 'children': {}}\n    for transaction in ordered_transactions:\n        node = root\n        for (item, _) in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node = node['children'][item]\n            node['support'] += 1\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'e'], ['a', 'f'], ['a', 'b', 'c', 'd'], ['b', 'c', 'd']]\nmin_support = 2\nroot = build_fp_tree(transactions, min_support)"}
{"task_id": 332, "completion_id": 5, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    item_support = {item: count for (item, count) in item_support.items() if count >= min_support}\n    sorted_items = sorted(item_support.items(), key=lambda x: (-x[1], x[0]))\n    item_to_index = {item: index for (index, (item, _)) in enumerate(sorted_items)}\n    indexed_transactions = []\n    for transaction in transactions:\n        indexed_transaction = [item_to_index[item] for item in transaction if item in item_to_index]\n        indexed_transaction.sort(key=item_to_index.get)\n        indexed_transactions.append(indexed_transaction)\n    root = {'support': 0, 'children': {}}\n    for transaction in indexed_transactions:\n        node = root\n        for index in transaction:\n            if index not in node['children']:\n                node['children'][index] = {'support': 0, 'children': {}}\n            node = node['children'][index]\n            node['support'] += 1\n    return root"}
{"task_id": 332, "completion_id": 6, "solution": "from collections import Counter\ndef build_fp_tree(transactions, min_support):\n    item_count = Counter()\n    filtered_transactions = []\n    for transaction in transactions:\n        transaction = list(filter(lambda x: min_support <= x[1], ((item, count) for (item, count) in Counter(transaction).items())))\n        transaction.sort(key=lambda x: (-x[1], x[0]))\n        transaction = [item for (item, count) in transaction]\n        item_count.update(transaction)\n        filtered_transactions.append(transaction)\n    root = {'support': 0, 'children': {}}\n    for transaction in filtered_transactions:\n        parent = root\n        for item in transaction:\n            if item in parent['children']:\n                parent['children'][item]['support'] += 1\n            else:\n                parent['children'][item] = {'support': 1, 'children': {}}\n            parent = parent['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 7, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n\n    def update_tree(items, tree, node_support):\n        if items[0] in tree['children']:\n            tree['children'][items[0]]['support'] += node_support\n        else:\n            tree['children'][items[0]] = {'support': node_support, 'children': {}}\n        if len(items) > 1:\n            update_tree(items[1:], tree['children'][items[0]]['children'], node_support)\n\n    def create_cond_trans(head_table, item):\n        cond_trans = []\n        for transaction in transactions:\n            if item in transaction:\n                transaction_items = [item for item in transaction if head_table[item] >= min_support]\n                transaction_items.sort(key=itemgetter(1), reverse=True)\n                cond_trans.append(transaction_items)\n        return cond_trans\n\n    def create_fp_tree(cond_trans):\n        tree = {'support': 0, 'children': {}}\n        for transaction in cond_trans:\n            transaction_items = list(set(transaction))\n            transaction_items.sort(key=itemgetter(1), reverse=True)\n            for item in transaction_items:\n                update_tree(transaction, tree, 1)\n        return tree\n    items = [item for transaction in transactions for item in transaction]\n    head_table = Counter(items)\n    freq_items = dict(sorted({item: count for (item, count) in head_table.items() if count >= min_support}.items()))\n    sorted_items = list(freq_items.keys())\n    sorted_items.sort(key=itemgetter(0))\n    cond_trans = create_cond_trans(head_table, sorted_items)\n    fp_tree = create_fp_tree(cond_trans)\n    return fp_tree"}
{"task_id": 332, "completion_id": 8, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_frequencies = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_frequencies[item] += 1\n    frequent_items = {item: item_frequencies[item] for item in item_frequencies if item_frequencies[item] >= min_support}\n    frequent_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    tree = {'support': 0, 'children': {}}\n    for transaction in frequent_transactions:\n        node = tree\n        for item in transaction:\n            if item in node['children']:\n                node['children'][item]['support'] += 1\n            else:\n                node['children'][item] = {'support': 1, 'children': {}}\n            node = node['children'][item]\n    return tree"}
{"task_id": 332, "completion_id": 9, "solution": "from collections import Counter\nimport copy\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    items_counter = Counter()\n    for transaction in transactions:\n        items_counter.update(transaction)\n    frequent_items = {item: support for (item, support) in items_counter.items() if support >= min_support}\n    frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    fp_tree = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        sorted_transaction = sorted([item for item in transaction if item in frequent_items], key=lambda x: frequent_items.index((x, transaction.count(x))))\n        node = fp_tree\n        for item in sorted_transaction:\n            if item in node['children']:\n                node['children'][item]['support'] += 1\n            else:\n                node['children'][item] = {'support': 1, 'children': {}}\n            node = node['children'][item]\n    return fp_tree"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = []\n    for i in range(X.shape[0]):\n        row = []\n        for j in range(Y.shape[0]):\n            dot_product = np.dot(X[i], Y[j])\n            entry = dot_product + c0\n            row.append(round(entry, 4))\n        K.append(row)\n    return K"}
{"task_id": 336, "completion_id": 1, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    X = np.array(X)\n    Y = X if Y is None else np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    dot_products = np.dot(X, Y.T)\n    kernel_matrix = dot_products + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\nX = [[1, 2, 3], [4, 5, 6]]\nY = [[7, 8, 9], [10, 11, 12]]"}
{"task_id": 336, "completion_id": 2, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if len(X) == 0:\n        return []\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    dot_product = np.dot(X, Y.T)\n    kernel_matrix = dot_product + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 336, "completion_id": 3, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.array(X, dtype=float)\n    Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K = [[round(k, 4) for k in row] for row in K]\n    return K\nX = [[1, 2], [3, 4]]"}
{"task_id": 336, "completion_id": 4, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    (X, Y_provided) = map(np.array, (X, Y))\n    if Y_provided is None:\n        Y = X.copy()\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T)\n    K += c0\n    return K.round(4).tolist()"}
{"task_id": 336, "completion_id": 5, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    if isinstance(X, np.ndarray):\n        X = X.tolist()\n    if Y is None:\n        Y = X\n    elif isinstance(Y, np.ndarray):\n        Y = Y.tolist()\n    (n, C) = (len(X), len(X[0]))\n    if not all((len(y) == C for y in Y)):\n        return -1\n    K = np.zeros((n, len(Y)))\n    for (i, xi) in enumerate(X):\n        for (j, yj) in enumerate(Y):\n            K[i, j] = round(np.dot(xi, yj) + c0, 4)\n    return K.tolist()"}
{"task_id": 336, "completion_id": 6, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    X_is_array = isinstance(X, np.ndarray)\n    Y_is_array = isinstance(Y, np.ndarray)\n    if X_is_array:\n        X = X.tolist()\n    if Y_is_array:\n        Y = Y.tolist()\n    X_shape = (len(X), len(X[0]))\n    if Y is None:\n        Y_shape = X_shape\n    else:\n        Y_shape = (len(Y), len(Y[0]))\n    if X == [] or (not X_is_array and (not isinstance(X[0], list))) or (not Y_is_array and Y is not None and (not isinstance(Y[0], list))):\n        raise ValueError('Input must be a list of lists or a 2d NumPy array.')\n    if X != [] and len(set((len(row) for row in X))) != 1:\n        raise ValueError('All rows in X must have the same number of columns.')\n    if Y != [] and len(set((len(row) for row in Y))) != 1:\n        raise ValueError('All rows in Y must have the same number of columns.')\n    if X_shape[1] != Y_shape[1]:\n        return -1\n    if X_shape[0] == 0:\n        return []\n    K = np.dot(X, np.array(Y).T) + c0\n    if X_is_array:\n        K = K.tolist()\n    return [[round(num, 4) for num in row] for row in K]"}
{"task_id": 336, "completion_id": 7, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T)\n    K += c0\n    K = np.round(K, 4)\n    return K.tolist()"}
{"task_id": 336, "completion_id": 8, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    Y = np.array(Y) if Y is not None else X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K = [[round(val, 4) for val in row] for row in K.tolist()]\n    return K\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nY = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nc0 = 1"}
{"task_id": 336, "completion_id": 9, "solution": "from __future__ import annotations\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C), optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    Y = np.array(Y) if not isinstance(Y, np.ndarray) else Y\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    elif X.ndim > 2:\n        return -1\n    if Y is not None:\n        if Y.ndim == 1:\n            Y = Y.reshape(-1, 1)\n        elif Y.ndim > 2:\n            return -1\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = X @ Y.T + c0\n    return np.round(K, 4).tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (updated_param.tolist(), m.tolist(), v.tolist())"}
{"task_id": 340, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.round(param, 8), np.round(m, 8), np.round(v, 8))"}
{"task_id": 340, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (param_new, m, v)"}
{"task_id": 340, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m_new / (1 - np.power(beta1, t))\n    v_hat = v_new / (1 - np.power(beta2, t))\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return [np.round(param_new, 8).tolist(), np.round(m_new, 8).tolist(), np.round(v_new, 8).tolist()]"}
{"task_id": 340, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return [np.round(param, 8).tolist(), np.round(m, 8).tolist(), np.round(v, 8).tolist()]"}
{"task_id": 340, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_cap_t = m_t / (1 - beta1 ** t)\n    v_cap_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_cap_t / (np.sqrt(v_cap_t) + eps)\n    return [np.round(param_t.tolist(), 8), np.round(m_t.tolist(), 8), np.round(v_t.tolist(), 8)]"}
{"task_id": 340, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.power(grad, 2)\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return [np.round(param.tolist(), 8), np.round(m.tolist(), 8), np.round(v.tolist(), 8)]"}
{"task_id": 340, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_cap_t = m_t / (1 - beta1 ** t)\n    v_cap_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_cap_t / (np.sqrt(v_cap_t) + eps)\n    return (np.round(param_t, 8).tolist(), np.round(m_t, 8).tolist(), np.round(v_t, 8).tolist())"}
{"task_id": 340, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    g_pow = np.power(grad, 2)\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * g_pow\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (param_new.round(8).tolist(), m_new.round(8).tolist(), v_new.round(8).tolist())"}
{"task_id": 340, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (param.tolist(), m.tolist(), v.tolist())"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] - what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    retained_ids = np.argsort(rewards)[::-1]\n    top_n = int(len(retained_ids) * retain_prcnt)\n    top_samples = theta_samples[retained_ids[:top_n], :]\n    mean = np.mean(top_samples, axis=0)\n    variance = np.var(top_samples, axis=0)\n    mean = np.round(mean, 4).tolist()\n    variance = np.round(variance, 4).tolist()\n    return (mean, variance)"}
{"task_id": 343, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    rewards = np.array(rewards)\n    top_indices = np.argsort(rewards)[::-1]\n    N = len(theta_samples)\n    num_top_samples = int(N * retain_prcnt)\n    theta_samples_top = theta_samples[top_indices[:num_top_samples]]\n    mean = np.mean(theta_samples_top, axis=0)\n    variance = np.var(theta_samples_top, axis=0)\n    return ([round(m, 4) for m in mean], [round(v, 4) for v in variance])"}
{"task_id": 343, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    assert 0 < retain_prcnt <= 1, f'Invalid retain_prcnt: {retain_prcnt}'\n    assert len(theta_samples) == len(rewards), f'Mismatched lengths'\n    n = len(theta_samples)\n    k = int(retain_prcnt * n)\n    idx = np.argsort(rewards)[::-1][:k]\n    theta_samples_best = theta_samples[idx]\n    mean = np.mean(theta_samples_best, axis=0)\n    var = np.var(theta_samples_best, axis=0)\n    mean = [round(m, 4) for m in mean]\n    var = [round(v, 4) for v in var]\n    return (mean, var)\ntheta_samples = np.array([[0.1, 0.2], [0.2, 0.3], [0.3, 0.4], [0.4, 0.5]])\nrewards = [1.0, 2.0, 3.0, 4.0]\nretain_prcnt = 0.75"}
{"task_id": 343, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    theta_samples = np.array(theta_samples)\n    rewards = np.array(rewards)\n    N = theta_samples.shape[0]\n    n_to_keep = int(retain_prcnt * N)\n    top_n_indices = rewards.argsort()[-n_to_keep:]\n    top_n_samples = theta_samples[top_n_indices]\n    mean = np.mean(top_n_samples, axis=0)\n    var = np.var(top_n_samples, axis=0)\n    mean = [round(value, 4) for value in mean]\n    var = [round(value, 4) for value in var]\n    return (mean, var)"}
{"task_id": 343, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    sorted_indices = np.argsort(rewards)[::-1]\n    N_to_select = int(retain_prcnt * len(theta_samples))\n    top_theta_samples = theta_samples[sorted_indices[:N_to_select]]\n    mean = np.mean(top_theta_samples, axis=0)\n    variance = np.var(top_theta_samples, axis=0)\n    return ([round(x, 4) for x in mean], [round(x, 4) for x in variance])\ntheta_samples = np.array([[0.1, 0.2, 0.3], [0.9, 0.8, 0.7], [0.5, 0.5, 0.5], [0.4, 0.6, 0.7]])\nrewards = [10, 20, 15, 5]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    sorted_indices = np.argsort(-rewards)\n    sorted_theta_samples = theta_samples[sorted_indices]\n    sorted_rewards = rewards[sorted_indices]\n    num_samples = int(np.ceil(retain_prcnt * len(rewards)))\n    elite_samples = sorted_theta_samples[:num_samples]\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    return (mean, variance)"}
{"task_id": 343, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    rewards = np.array(rewards)\n    n = int(retain_prcnt * len(rewards))\n    elite_indices = np.argsort(rewards)[-n:]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    return ([round(x, 4) for x in mean], [round(x, 4) for x in variance])\ntheta_samples = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\nrewards = [10.0, 15.0, 5.0]\nretain_prcnt = 0.66"}
{"task_id": 343, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    idx = np.argsort(rewards)[::-1]\n    sorted_thetas = theta_samples[idx]\n    sorted_rewards = rewards[idx]\n    n_retain = int(retain_prcnt * sorted_rewards.shape[0])\n    retained_thetas = sorted_thetas[:n_retain]\n    retained_means = np.mean(retained_thetas, axis=0).round(4).tolist()\n    retained_vars = np.var(retained_thetas, axis=0).round(4).tolist()\n    return (retained_means, retained_vars)"}
{"task_id": 343, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    rewards = np.array(rewards)\n    sort_indices = np.argsort(rewards)[::-1]\n    sorted_theta_samples = theta_samples[sort_indices]\n    sorted_rewards = rewards[sort_indices]\n    num_retain = int(retain_prcnt * N)\n    retained_theta_samples = sorted_theta_samples[:num_retain]\n    mean = np.mean(retained_theta_samples, axis=0)\n    variance = np.var(retained_theta_samples, axis=0)\n    mean_list = [round(val, 4) for val in mean]\n    variance_list = [round(val, 4) for val in variance]\n    return (mean_list, variance_list)"}
{"task_id": 343, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    sort_indices = np.argsort(rewards)[::-1]\n    theta_samples_sorted = theta_samples[sort_indices]\n    rewards_sorted = rewards[sort_indices]\n    N_retained = int(retain_prcnt * len(rewards))\n    theta_samples_retained = theta_samples_sorted[:N_retained]\n    mean = np.mean(theta_samples_retained, axis=0)\n    variance = np.var(theta_samples_retained, axis=0)\n    return ([round(x, 4) for x in mean], [round(x, 4) for x in variance])"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    freq_dict = Counter(labels)\n    total_labels = len(labels)\n    probabilities = [count / total_labels for count in freq_dict.values()]\n    entropy_val = -sum([p * math.log2(p) for p in probabilities])\n    return round(entropy_val, 5)"}
{"task_id": 353, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels)\n    entropy = -sum((count / n * math.log2(count / n) for count in counts.values()))\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_frequencies = Counter(labels)\n    total_labels = len(labels)\n    if total_labels <= 1 or len(label_frequencies) == 1:\n        return 0.0\n    entropy = 0.0\n    for freq in label_frequencies.values():\n        p = freq / total_labels\n        entropy -= p * math.log2(p)\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = np.array(list(Counter(labels).values()))\n    probabilities = label_counts / label_counts.sum()\n    entropy_values = -probabilities * np.log2(probabilities)\n    entropy_value = entropy_values.sum()\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    counts = Counter(labels)\n    probabilities = [count / len(labels) for count in counts.values()]\n    entropy = -sum((p * math.log2(p) for p in probabilities))\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    n = len(labels)\n    (value, counts) = np.unique(labels, return_counts=True)\n    probs = counts / n\n    return round(-np.sum([p * math.log2(p) for p in probs if p != 0]), 5)"}
{"task_id": 353, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if len(labels) == 0:\n        return 0.0\n    freqs = np.array(list(Counter(labels).values())) / len(labels)\n    entropy = -sum((freq * math.log2(freq) for freq in freqs))\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if len(labels) == 0:\n        return 0.0\n    label_counter = Counter(labels)\n    total_labels = len(labels)\n    probabilities = [count / total_labels for count in label_counter.values()]\n    entropy = -sum((p * math.log2(p) for p in probabilities))\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n\n    \"\"\"\n    if len(labels) == 0:\n        return 0.0\n    counter = Counter(labels)\n    total_labels = len(labels)\n    probs = [count / total_labels for count in counter.values()]\n    entropy = -sum((prob * math.log2(prob) for prob in probs))\n    return round(entropy, 5)\nlabels = ['a', 'b', 'a', 'b', 'c']"}
{"task_id": 353, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels)\n    entropy_val = -sum((count / n * math.log2(count / n) for count in counts.values()))\n    return round(entropy_val, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef pad_input(X, pad):\n    if isinstance(pad, int):\n        return np.pad(X, ((0, 0), (pad, pad), (pad, pad), (0, 0)), mode='constant')\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n        return np.pad(X, ((0, 0), (pr, pr), (pc, pc), (0, 0)), mode='constant')\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pr1, pr2, pc1, pc2) = pad\n        return np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    elif pad == 'same':\n        if X.shape[1] % 2 == 0:\n            return np.pad(X, ((0, 0), (X.shape[1] // 2, X.shape[1] // 2 - 1), (X.shape[2] // 2, X.shape[2] // 2 - 1), (0, 0)), mode='constant')\n        else:\n            return np.pad(X, ((0, 0), (X.shape[1] // 2, X.shape[1] // 2), (X.shape[2] // 2, X.shape[2] // 2), (0, 0)), mode='constant')\n    else:\n        return X\ndef im2col(X_pad, kernel_shape, stride, dilation):\n    (k_h, k_w, _) = kernel_shape\n    out_h = (X_pad.shape[1] - k_h) // stride + 1\n    out_w = (X_pad.shape[2] - k_w) // stride + 1\n    patch_h = (k_h - 1) * dilation + 1\n    patch_w = (k_w - 1) * dilation + 1\n    i0 = np.repeat(np.arange(k_h), k_w)\n    i0 = np.tile(i0, X_pad.shape[3]) * (dilation + 1)\n    i1 = stride * np.repeat(np.arange(out_h), out_w)\n    j0 = np.tile(np.arange(k_w), k_h)\n    j0 = np.tile(j0, X_pad.shape[3]) * (dilation + 1)\n    j1 = stride * np.tile(np.arange(out_w), out_h)\n    i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n    j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n    k = np.repeat(np.arange(X_pad.shape[3]), k_h * k_w).reshape(-1, 1)\n    return X_pad[:, i, j, k]\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    X_pad = pad_input(X, pad)\n    X_col = im2col(X_pad, W.shape, stride, dilation)\n    W_col = W.reshape((-1, W.shape[3])).T\n    out = W_col @ X_col\n    out = out.reshape(W.shape[3], X.shape[1], X.shape[2], X.shape[0])\n    out = out.transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 1, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n\n    def compute_out_dim(in_dim, kernel_dim, stride, pad):\n        if not isinstance(pad, tuple):\n            pad = (pad, pad) * 2\n        return (in_dim - kernel_dim + 2 * pad[0] + stride - 1) // stride\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    out_rows = compute_out_dim(in_rows, kernel_rows, stride, pad)\n    out_cols = compute_out_dim(in_cols, kernel_cols, stride, pad)\n    out = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    if isinstance(pad, str):\n        pad_top = pad_left = pad_bottom = pad_right = (kernel_rows - 1) // 2\n    elif isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    else:\n        (pad_top, pad_bottom, pad_left, pad_right) = pad\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)))\n    W_reshaped = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    for i in range(n_ex):\n        for j in range(out_rows):\n            for k in range(out_cols):\n                region = X_padded[i, j * stride:j * stride + kernel_rows, k * stride:k * stride + kernel_cols, :]\n                region_vector = region.reshape(kernel_rows * kernel_cols * in_ch, 1)\n                out[i, j, k, :] = np.dot(W_reshaped.T, region_vector).squeeze()\n    return out.tolist()"}
{"task_id": 354, "completion_id": 2, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if pad == 'same':\n        pad_rows = W.shape[0] // 2\n        pad_cols = W.shape[1] // 2\n    elif isinstance(pad, int):\n        (pad_rows, pad_cols) = (pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_rows, pad_cols) = pad\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pad_top, pad_bottom, pad_left, pad_right) = pad\n        pad_rows = pad_top + pad_bottom\n        pad_cols = pad_left + pad_right\n    else:\n        raise ValueError('Invalid padding specification')\n    X_padded = np.pad(X, ((0, 0), (pad_rows, pad_rows), (pad_cols, pad_cols), (0, 0)), 'constant')\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    out_ch = W.shape[3]\n    (kernel_rows, kernel_cols, _, _) = W.shape\n    out_rows = (in_rows - kernel_rows + 2 * pad_rows) // stride + 1\n    out_cols = (in_cols - kernel_cols + 2 * pad_cols) // stride + 1\n    img_patches = np.empty((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for i in range(0, in_rows, stride):\n            for j in range(0, in_cols, stride):\n                for k in range(out_rows):\n                    for l in range(out_cols):\n                        img_patches[:, ex * out_rows * out_cols + k * out_cols + l] = X_padded[ex, i:i + kernel_rows, j:j + kernel_cols, :].ravel()\n    kernels_reshaped = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    Y_reshaped = kernels_reshaped @ img_patches\n    Y = Y_reshaped.reshape(out_ch, n_ex, out_rows, out_cols).transpose(1, 2, 3, 0).copy()\n    return Y.tolist()"}
{"task_id": 354, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Union, Tuple\ndef get_im2col_indices(x_shape, field_height, field_width, padding=1, stride=1):\n    (N, C, H, W) = x_shape\n    assert (H + 2 * padding - field_height) % stride == 0\n    assert (W + 2 * padding - field_width) % stride == 0\n    out_height = (H + 2 * padding - field_height) // stride + 1\n    out_width = (W + 2 * padding - field_width) // stride + 1\n    i0 = np.repeat(np.arange(field_height), field_width)\n    i0 = np.tile(i0, C)\n    i1 = stride * np.repeat(np.arange(out_height), out_width)\n    j0 = np.tile(np.arange(field_width), field_height * C)\n    j1 = stride * np.tile(np.arange(out_width), out_height)\n    i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n    j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n    k = np.repeat(np.arange(C), field_height * field_width).reshape(-1, 1)\n    return (k, i, j)\ndef im2col_indices(x, field_height, field_width, padding=1, stride=1):\n    p = padding\n    x_padded = np.pad(x, ((0, 0), (0, 0), (p, p), (p, p)), mode='constant')\n    (k, i, j) = get_im2col_indices(x.shape, field_height, field_width, padding, stride)\n    cols = x_padded[:, k, i, j]\n    C = x.shape[1]\n    cols = cols.transpose(1, 2, 0).reshape(field_height * field_width * C, -1)\n    return cols\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad = (pad[0], pad[0], pad[1], pad[1])\n        else:\n            pad = (pad[0], pad[1], pad[2], pad[3])\n    else:\n        pad = (0, 0, 0, 0)\n    X_pad = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), 'constant', constant_values=((0, 0), (0, 0), (0, 0), (0, 0)))\n    out_rows = int((in_rows + 2 * pad[0] - kernel_rows) / stride) + 1\n    out_cols = int((in_cols + 2 * pad[2] - kernel_cols) / stride) + 1\n    X_split = X_pad.reshape((X_pad.shape[0] * X_pad.shape[1] * X_pad.shape[2], X_pad.shape[3]))\n    X_col = im2col_indices(X_pad, kernel_rows, kernel_cols, padding=0, stride=1)\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    out = (W_col @ X_col).reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 4, "solution": "import numpy as np\ndef conv2D(X, W, stride, pad, dilation):\n    from numpy.lib.stride_tricks import as_strided\n    (n_ex, h, w, in_ch) = X.shape\n    (k_h, k_w, in_ch, out_ch) = W.shape\n    pad_tuple = (0, 0) if pad == 'same' else pad\n    if pad == 'same':\n        h_pad = int(((h - 1) * stride + dilation * (k_h - 1) + 1 - h) / 2)\n        w_pad = int(((w - 1) * stride + dilation * (k_w - 1) + 1 - w) / 2)\n    else:\n        (h_pad, w_pad) = pad_tuple\n    X = np.pad(X, ((0, 0), (h_pad, h_pad), (w_pad, w_pad), (0, 0)))\n    out_h = int((h + 2 * h_pad - dilation * (k_h - 1) - 1) / stride + 1)\n    out_w = int((w + 2 * w_pad - dilation * (k_w - 1) - 1) / stride + 1)\n    shape = (n_ex, out_h, out_w, k_h, k_w, in_ch)\n    strides = (X.strides[0], X.strides[1] * stride, X.strides[2] * stride, X.strides[1], X.strides[2], X.strides[3])\n    X_col = as_strided(X, shape=shape, strides=strides)\n    shape = (k_h, k_w, in_ch, 1, 1)\n    strides = (W.strides[0], W.strides[1], W.strides[2], W.strides[3], 0)\n    W_col = as_strided(W, shape=shape, strides=strides).reshape(k_h * k_w * in_ch, -1)\n    conv = np.matmul(W_col.T, X_col.transpose(0, 3, 4, 1, 2).reshape(-1, out_h * out_w))\n    conv = conv.reshape((out_ch, n_ex, out_h, out_w)).transpose(1, 2, 3, 0)\n    return conv.tolist()"}
{"task_id": 354, "completion_id": 5, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n\n    def im2col(x, kernel_rows, kernel_cols, padding, stride):\n        padded_x = np.pad(x, padding, mode='constant')\n        output_rows = int((padded_x.shape[0] - kernel_rows) / stride + 1)\n        output_cols = int((padded_x.shape[1] - kernel_cols) / stride + 1)\n        output_shape = (kernel_rows, kernel_cols, output_rows, output_cols)\n        strides = (padded_x.strides[0], padded_x.strides[1], padded_x.strides[0], padded_x.strides[1])\n        strided_x = np.lib.stride_tricks.as_strided(padded_x, shape=output_shape, strides=strides)\n        return strided_x\n\n    def compute_padding(pad, x_shape, kernel_shape):\n        if isinstance(pad, int):\n            return ((pad, pad), (pad, pad))\n        elif isinstance(pad, tuple):\n            return ((pad[0], pad[0]), (pad[1], pad[1]))\n        elif pad == 'same':\n            output_height = int(np.ceil(x_shape[0] / stride))\n            output_width = int(np.ceil(x_shape[1] / stride))\n            pad_h = int(((output_height - 1) * stride + kernel_shape[0] - x_shape[0]) / 2)\n            pad_w = int(((output_width - 1) * stride + kernel_shape[1] - x_shape[1]) / 2)\n            return ((pad_h, pad_h), (pad_w, pad_w))\n        else:\n            return ((0, 0), (0, 0))\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    (pad_top, pad_left) = compute_padding(pad, X.shape, W.shape)\n    X_col = np.array([im2col(x, kernel_rows, kernel_cols, (pad_top, pad_left), stride) for x in X.reshape(n_ex * in_ch, in_rows, in_cols)])\n    out_rows = int((in_rows + np.sum(pad_top) - kernel_rows) / stride + 1)\n    out_cols = int((in_cols + np.sum(pad_left) - kernel_cols) / stride + 1)\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    result = (W_col @ X_col.T).reshape(out_ch, n_ex, out_rows, out_cols).transpose(1, 2, 3, 0)\n    return result.tolist()"}
{"task_id": 354, "completion_id": 6, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n\n    def dilation(X, dilation):\n        if dilation == 0:\n            return X\n        else:\n            from scipy.ndimage import grey_dilation\n            return grey_dilation(X, size=(1 + 2 * dilation, 1 + 2 * dilation))\n\n    def padding(X, pad):\n        if pad == 'same':\n            pad_width = ((0, 0), (W.shape[0] // 2, W.shape[0] // 2), (W.shape[1] // 2, W.shape[1] // 2), (0, 0))\n        elif isinstance(pad, tuple):\n            pad_width = ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0))\n        elif isinstance(pad, int):\n            pad_width = ((0, 0), (pad, pad), (pad, pad), (0, 0))\n        return np.pad(X, pad_width, mode='constant')\n\n    def im2col(X, W, stride):\n        X_reshaped = np.concatenate([np.roll(X, shift=i, axis=(1, 2)) for i in range(W.shape[0] - 1, -1, -stride)], axis=3)\n        W_reshaped = W[::-1, ::-1, :, :].reshape((-1, W.shape[3]))\n        return (X_reshaped, W_reshaped)\n    X = dilation(X, dilation)\n    X = padding(X, pad)\n    (X_col, W_col) = im2col(X, W, stride)\n    out = np.matmul(X_col, W_col)\n    out = out.reshape((X.shape[0], X.shape[1] - W.shape[0] + 1, X.shape[2] - W.shape[1] + 1, -1))\n    return out.tolist()"}
{"task_id": 354, "completion_id": 7, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, input_ch, out_ch) = W.shape\n    if in_ch != input_ch:\n        raise ValueError('The number of input channels in X and W must match')\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_top = pad_bottom = pad[0]\n            pad_left = pad_right = pad[1]\n        elif len(pad) == 4:\n            (pad_top, pad_bottom, pad_left, pad_right) = pad\n        else:\n            raise ValueError('Invalid padding specification')\n    elif pad == 'same':\n        pad_top = pad_bottom = kernel_rows // 2\n        pad_left = pad_right = kernel_cols // 2\n    else:\n        raise ValueError('Invalid padding specification')\n    X_pad = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)))\n    out_rows = (in_rows + 2 * pad - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + 2 * pad - dilation * (kernel_cols - 1) - 1) // stride + 1\n    output = np.empty((n_ex, out_rows, out_cols, out_ch), dtype=X.dtype)\n    for i in range(out_rows):\n        for j in range(out_cols):\n            h_start = i * stride\n            h_end = h_start + kernel_rows\n            w_start = j * stride\n            w_end = w_start + kernel_cols\n            X_slice = X_pad[:, h_start:h_end:dilation, w_start:w_end:dilation, :]\n            output[:, i, j, :] = np.tensordot(X_slice, W, axes=([1, 2, 3], [0, 1, 2]))\n    return output.tolist()\nn_ex = 50\nstride = 1\npad = 'same'\ndilation = 0\nX = np.random.randn(n_ex, in_rows, in_cols, in_ch)\nW = np.random.randn(kernel_rows, kernel_cols, in_ch, out_ch)\noutput = conv2D(X, W, stride, pad, dilation)"}
{"task_id": 354, "completion_id": 8, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (kernel_rows, kernel_cols, in_ch, out_ch) = W.shape\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    if pad == 'same':\n        pad_rows = (in_rows // stride * stride + kernel_rows - in_rows) // 2\n        pad_cols = (in_cols // stride * stride + kernel_cols - in_cols) // 2\n    elif isinstance(pad, int):\n        pad_rows = pad\n        pad_cols = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_rows, pad_cols) = pad\n    else:\n        (pad_rows, pad_cols) = (pad[0], pad[3])\n    X_padded = np.pad(X, ((0, 0), (pad_rows, pad_rows), (pad_cols, pad_cols), (0, 0)), 'constant')\n    out_rows = (X_padded.shape[1] - kernel_rows) // stride + 1\n    out_cols = (X_padded.shape[2] - kernel_cols) // stride + 1\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for i in range(0, out_rows, stride):\n        for j in range(0, out_cols, stride):\n            patch = X_padded[:, i:i + kernel_rows, j:j + kernel_cols, :]\n            f_map = np.einsum('lior,rioc->loc', patch, W)\n            output[:, i // stride, j // stride, :] = f_map\n    return output.tolist()"}
{"task_id": 354, "completion_id": 9, "solution": "import numpy as np\ndef pad_input(X, pad):\n    if isinstance(pad, int):\n        return np.pad(X, ((0, 0), (pad, pad), (pad, pad), (0, 0)))\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        return np.pad(X, ((0, 0), (pad[0], pad[0]), (pad[1], pad[1]), (0, 0)))\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        return np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)))\n    elif pad == 'same':\n        padded_shape = (X.shape[0], X.shape[1] + 2 * int((W.shape[0] - 1) / 2), X.shape[2] + 2 * int((W.shape[1] - 1) / 2), X.shape[3])\n        return np.pad(X, ((0, 0), (int((W.shape[0] - 1) / 2), int((W.shape[0] - 1) / 2)), (int((W.shape[1] - 1) / 2), int((W.shape[1] - 1) / 2)), (0, 0)))\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    X = pad_input(X, pad)\n    out_rows = int((X.shape[1] - W.shape[0]) / stride + 1)\n    out_cols = int((X.shape[2] - W.shape[1]) / stride + 1)\n    out_ch = W.shape[3]\n    row_ext = dilation * (W.shape[0] - 1) + 1\n    col_ext = dilation * (W.shape[1] - 1) + 1\n    X_col = np.zeros((X.shape[0], X.shape[1] * X.shape[2], row_ext * col_ext * X.shape[3]))\n    for r in range(row_ext):\n        for c in range(col_ext):\n            ix = r * dilation\n            jx = c * dilation\n            X_col[:, :, r * col_ext + c] = X[:, ix:ix + W.shape[0], jx:jx + W.shape[1], :].reshape(X.shape[0], -1)\n    W_col = W.transpose(3, 2, 0, 1).reshape(W.shape[3], -1)\n    out = W_col @ X_col\n    out = out.reshape(W.shape[3], out_rows, out_cols, X.shape[0])\n    out = out.transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on data.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std_data = data - mean\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(std_data, full_matrices=False)\n        (eig_vals, eig_vecs) = (S ** 2, U)\n    elif solver == 'eigen':\n        cov_mat = np.cov(std_data, rowvar=False, ddof=1)\n        (eig_vals, eig_vecs) = np.linalg.eigh(cov_mat)\n        sort_indices = np.argsort(eig_vals)[::-1]\n        (eig_vals, eig_vecs) = (eig_vals[sort_indices], eig_vecs[:, sort_indices])\n    indices = np.argsort(eig_vals)[::-1]\n    (eig_vals, eig_vecs) = (eig_vals[indices], eig_vecs[:, indices])\n    for i in range(eig_vecs.shape[1]):\n        if eig_vecs[0, i] < 0:\n            eig_vecs[:, i] *= -1\n    scores = np.dot(std_data, eig_vecs)\n    total_variance = np.sum(eig_vals)\n    explained_variance_ratio = [np.round(value / total_variance, 4) for value in eig_vals[:n_components]]\n    scores = np.round(scores[:, :n_components], 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data, full_matrices=False)\n        L = Vt.T\n    elif solver == 'eigen':\n        (L, U) = np.linalg.eigh(np.cov(data, rowvar=False, ddof=1))\n        L = U.T[::-1]\n        S = L[:, 0]\n        L = L[:, 1:][::-1]\n    else:\n        raise ValueError(\"Unsupported solver. Use 'svd' or 'eigen'.\")\n    if n_components > S.shape[0]:\n        n_components = S.shape[0]\n    inds = np.argsort(S)[::-1]\n    S = S[inds]\n    L = L[:, inds]\n    for i in range(n_components):\n        if L[0, i] < 0:\n            L[:, i] *= -1\n            data[:, i] *= -1\n    scores = np.dot(data, L.T)[:, :n_components]\n    explained_variance_ratio = S[:n_components] / np.sum(S)\n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())"}
{"task_id": 355, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std_data = data - mean\n    if solver == 'svd':\n        (_, _, vt) = np.linalg.svd(std_data, full_matrices=False)\n        eigen_vectors = vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n        (_, eigen_vectors) = np.linalg.eigh(cov_matrix)\n        eigen_vectors = np.flip(eigen_vectors, axis=1)\n    norms = np.linalg.norm(eigen_vectors, axis=0)\n    order = np.argsort(norms)[::-1]\n    eigen_vectors = eigen_vectors[:, order]\n    explained_variance = norms[order] ** 2\n    if n_components < eigen_vectors.shape[1]:\n        eigen_vectors = eigen_vectors[:, :n_components]\n        explained_variance = explained_variance[:n_components]\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[0, i] < 0:\n            eigen_vectors[:, i] *= -1\n            std_data[:, i] *= -1\n    scores = np.dot(std_data, eigen_vectors)\n    scores = scores.round(4).tolist()\n    total_variance = explained_variance.sum()\n    explained_variance_ratio = (explained_variance / total_variance).round(4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    if solver == 'svd':\n        (_, _, Vt) = np.linalg.svd(data)\n        components = Vt.T\n    elif solver == 'eigen':\n        cov_mat = np.cov(data, rowvar=False, ddof=1)\n        (_, components) = np.linalg.eigh(cov_mat)\n        components = components.T[::-1]\n    explained_variance = np.var(data.dot(components.T), axis=0)\n    total_variance = explained_variance.sum()\n    explained_variance_ratio = explained_variance / total_variance\n    sort_indices = np.argsort(explained_variance)[::-1]\n    explained_variance_ratio = explained_variance_ratio[sort_indices]\n    components = components[sort_indices]\n    if n_components < len(components):\n        components = components[:n_components]\n        explained_variance_ratio = explained_variance_ratio[:n_components]\n    for (idx, component) in enumerate(components):\n        if (component < 0).any():\n            components[idx] *= -1\n            data = data.dot(-component)\n        else:\n            data = data.dot(component)\n    scores = np.round(data.astype(np.float64), 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio.astype(np.float64), 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    data_centered = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, V) = np.linalg.svd(data_centered)[::2]\n    elif solver == 'eigen':\n        (eigval, V) = np.linalg.eigh(np.cov(data_centered, rowvar=False, ddof=1))\n        sort_indices = np.argsort(eigval)[::-1]\n        (eigval, V) = (eigval[sort_indices], V[:, sort_indices])\n    else:\n        raise ValueError(f'Solver {solver} not recognized.')\n    sorted_indices = np.argsort(V)\n    sorted_V = V[:, sorted_indices]\n    n_components = min(n_components, sorted_V.shape[1])\n    sorted_V = sorted_V[:, :n_components]\n    sorted_V[:, np.argmax(sorted_V < 0, axis=0)] *= -1\n    scores = np.dot(data_centered, sorted_V)\n    explained_variance_ratio = np.sum(sorted_V ** 2, axis=0) / (len(data) - 1)\n    return (scores.round(4).tolist(), np.around(explained_variance_ratio, 4).tolist())"}
{"task_id": 355, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data, full_matrices=False)\n        scores = np.dot(U, np.diag(S))\n        components = Vt\n    elif solver == 'eigen':\n        covariance_matrix = np.cov(data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        components = eigenvectors[:, idx]\n        scores = np.dot(data, components)\n    explained_variance_ratio = np.round(eigenvalues / np.sum(eigenvalues) * 10000) / 10000\n    idx = np.argsort(explained_variance_ratio)[::-1]\n    explained_variance_ratio = explained_variance_ratio[idx].tolist()\n    components = components[:, idx]\n    components[:, np.sum(components < 0, axis=0) > n_components // 2] *= -1\n    scores[:, np.sum(components < 0, axis=0) > n_components // 2] *= -1\n    if n_components < components.shape[1]:\n        components = components[:, :n_components]\n        scores = np.dot(scores, components)\n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())"}
{"task_id": 355, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    data_std = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, UT) = np.linalg.svd(data_std, full_matrices=False)\n        directions = np.transpose(UT)\n    else:\n        cov_mat = np.cov(data_std, rowvar=False, ddof=1)\n        (_, U) = np.linalg.eigh(cov_mat)\n        directions = np.flip(U, axis=1)\n    explained_variance = np.var(np.dot(data_std, directions), axis=0)\n    explained_variance_order = np.argsort(explained_variance)[::-1]\n    explained_variance_ratio = [round(variance / np.sum(explained_variance), 4) for variance in sorted(explained_variance, reverse=True)]\n    directions = directions[:, explained_variance_order]\n    for i in range(n_components):\n        if directions[0, i] < 0:\n            directions[:, i] *= -1\n            data_std[:, i] *= -1\n    scores = np.dot(data_std, directions)\n    scores = scores[:, :n_components].tolist()\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    standardized_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(standardized_data, full_matrices=False)\n        eigenvectors = Vt.T\n    elif solver == 'eigen':\n        cov_mat = np.cov(standardized_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_mat)\n    else:\n        raise ValueError(\"Invalid solver. Choose from 'svd' or 'eigen'\")\n    indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[indices]\n    eigenvectors = eigenvectors[:, indices]\n    eigenvalues = eigenvalues[:n_components]\n    eigenvectors = eigenvectors[:, :n_components]\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n            standardized_data[:, i] *= -1\n    scores = np.dot(standardized_data, eigenvectors)\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = [i / total_variance for i in eigenvalues]\n    scores = [[round(val, 4) for val in row] for row in scores]\n    explained_variance_ratio = [round(val, 4) for val in explained_variance_ratio]\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centred = data - np.mean(data, axis=0)\n    solver = solver.lower()\n    if solver == 'svd':\n        (_, directions, scores) = np.linalg.svd(data_centred, full_matrices=False)\n        directions = directions.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centred, rowvar=False, ddof=1)\n        (evals, evecs) = np.linalg.eigh(cov_matrix)\n        directions = evecs.T\n        scores = np.dot(data_centred, directions.T)\n    else:\n        raise ValueError(\"Invalid solver. Supported solvers are 'svd' and 'eigen'.\")\n    (directions, evals) = zip(*sorted(zip(directions, evals), key=lambda x: -x[1]))\n    directions = np.array(directions[:n_components])\n    evals = np.array(evals[:n_components])\n    for i in range(directions.shape[0]):\n        if directions[i, 0] < 0:\n            directions[i, :] *= -1\n            scores[:, i] *= -1\n    scores = np.dot(data_centred, directions.T)\n    scores = np.round(scores, 4).tolist()\n    evals = np.round(evals / np.sum(evals), 4).tolist()\n    return (scores, evals)"}
{"task_id": 355, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, eigenvalues, eigenvectors_t) = np.linalg.svd(data_centered, full_matrices=False)\n    elif solver == 'eigen':\n        cov_mat = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_mat)\n        eigenvectors_t = eigenvectors.T\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors_t = eigenvectors_t[idx]\n    if n_components > len(eigenvalues):\n        n_components = len(eigenvalues)\n    eigenvalues = eigenvalues[:n_components]\n    eigenvectors_t = eigenvectors_t[:n_components]\n    for i in range(n_components):\n        if eigenvectors_t[i][0] < 0:\n            eigenvectors_t[i] *= -1.0\n    scores = np.dot(data_centered, eigenvectors_t.T)\n    scores_list = scores.round(4).tolist()\n    total_var = np.sum(eigenvalues)\n    explained_variance_ratio = (eigenvalues / total_var).round(4).tolist()\n    return (scores_list, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(enumerate(leaf.value), key=lambda x: x[1])[0]\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 1, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 2, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 3, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 4, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: leaf.value[i])\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 5, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=leaf.value.__getitem__)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 6, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 7, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 8, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        try:\n            return np.argmax(leaf.value)\n        except Exception as e:\n            return str(e)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 9, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        import numpy as np\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(data[:, None] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if data[labels == k].any() else centroids[k] for k in range(K)])\n        if np.allclose(new_centroids, centroids, rtol=1e-06, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = centroids[np.lexsort(centroids.T[::-1])].tolist()\n    centroids = [[round(y, 4) for y in x] for x in centroids]\n    return centroids"}
{"task_id": 357, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy().tolist()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for sample in data:\n            closest_centroid_idx = np.argmin([np.linalg.norm(sample - centroid) for centroid in centroids])\n            clusters[closest_centroid_idx].append(sample)\n        new_centroids = [np.mean(cluster, axis=0).round(4).tolist() for cluster in clusters]\n        if new_centroids == centroids:\n            break\n        centroids = new_centroids\n    centroids.sort()\n    return centroids"}
{"task_id": 357, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n    return centroids"}
{"task_id": 357, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K, :]\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=-1)\n        assignments = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[assignments == k].mean(axis=0) if np.any(assignments == k) else centroids[k] for k in range(K)])\n        if np.linalg.norm(new_centroids - centroids) < 1e-06:\n            break\n        centroids = new_centroids\n    centroids.sort()\n    centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]\n    return centroids"}
{"task_id": 357, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K]\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist(), key=lambda centroid: tuple(map(float, centroid)))\n    return [[round(x, 4) for x in centroid] for centroid in centroids]"}
{"task_id": 357, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K, :].copy()\n    for _ in range(max_iters):\n        clusters = np.zeros(data.shape[0], dtype=np.int32)\n        for i in range(data.shape[0]):\n            distances = np.linalg.norm(centroids - data[i, :], axis=1)\n            clusters[i] = np.argmin(distances)\n        new_centroids = np.zeros((K, data.shape[1]))\n        for k in range(K):\n            cluster_points = data[clusters == k, :]\n            if cluster_points.shape[0] > 0:\n                new_centroids[k, :] = np.mean(cluster_points, axis=0)\n            else:\n                new_centroids[k, :] = centroids[k, :]\n        if np.linalg.norm(new_centroids - centroids) < 1e-06:\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted([c.tolist() for c in centroids])\n    rounded_centroids = [[round(y, 4) for y in x] for x in sorted_centroids]\n    return rounded_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for sample in data:\n            closest_centroid_idx = np.argmin(np.linalg.norm(centroids - sample, axis=1))\n            clusters[closest_centroid_idx].append(sample)\n        new_centroids = np.array([np.mean(cluster, axis=0) for cluster in clusters])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(np.round(centroid, 4)) for centroid in sorted(centroids)]\n    return centroids"}
{"task_id": 357, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    prev_centroids = None\n    clusters = None\n    for _ in range(max_iters):\n        if np.all(centroids == prev_centroids):\n            break\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        clusters = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[clusters == k].mean(axis=0) for k in range(K)])\n        if np.all((new_centroids == centroids) | np.isnan(new_centroids)):\n            break\n        (prev_centroids, centroids) = (centroids, new_centroids)\n    sorted_centroids = sorted(centroids)\n    sorted_and_rounded_centroids = [list(np.round(c, 4)) for c in sorted_centroids]\n    return sorted_and_rounded_centroids"}
{"task_id": 357, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        clusters = np.argmin(np.linalg.norm(data[:, None] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([data[clusters == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist(), key=lambda x: tuple([round(i, 4) for i in x]))\n    return centroids"}
{"task_id": 357, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    centroids = data[:K]\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for sample in data:\n            closest_centroid_index = np.argmin(np.linalg.norm(centroids - sample, axis=1))\n            clusters[closest_centroid_index].append(sample)\n        new_centroids = np.array([np.mean(cluster, axis=0) if cluster else centroids[i] for (i, cluster) in enumerate(clusters)])\n        if np.allclose(centroids, new_centroids, rtol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    np_array = np.array(data, dtype=float)\n    row_sums = np_array.sum(axis=1)\n    if 0 in row_sums:\n        return -1\n    np_array /= row_sums[:, np.newaxis]\n    np_array = np_array.round(4)\n    return np_array.tolist()"}
{"task_id": 362, "completion_id": 1, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_np = np.array(data, dtype=float)\n    row_sums = np.sum(data_np, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data_np = data_np / row_sums[:, np.newaxis]\n    result = np.round(data_np, 4).tolist()\n    return result"}
{"task_id": 362, "completion_id": 2, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    data = np.round(data, 4)\n    return data.tolist()"}
{"task_id": 362, "completion_id": 3, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_np = np.array(data, dtype=float)\n    row_sums = data_np.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    else:\n        normalized_data = data_np / row_sums[:, np.newaxis]\n        normalized_data = np.round(normalized_data, 4)\n        return normalized_data.tolist()"}
{"task_id": 362, "completion_id": 4, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_totals = data.sum(axis=1)\n    if np.any(row_totals == 0):\n        return -1\n    data = data / row_totals[:, np.newaxis]\n    data = np.round(data, 4).tolist()\n    return data"}
{"task_id": 362, "completion_id": 5, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    data = np.round(data, 4)\n    return data.tolist()"}
{"task_id": 362, "completion_id": 6, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if (row_sums == 0).any():\n        return -1\n    data /= row_sums[:, np.newaxis]\n    return np.around(data, decimals=4).tolist()"}
{"task_id": 362, "completion_id": 7, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    data = data.round(4).tolist()\n    return data"}
{"task_id": 362, "completion_id": 8, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    np_array = np.array(data, dtype=float)\n    row_sums = np.sum(np_array, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    else:\n        normalized_matrix = np_array / row_sums[:, np.newaxis]\n        normalized_matrix = np.round(normalized_matrix, 4)\n        return normalized_matrix.tolist()"}
{"task_id": 362, "completion_id": 9, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_array = np.array(data, dtype=float)\n    row_sums = np.sum(data_array, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_array = data_array / row_sums[:, np.newaxis]\n    rounded_array = np.round(normalized_array, 4)\n    return rounded_array.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_space(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) and tuple_action:\n            return all((is_continuous_space(sub_space) for sub_space in space.spaces))\n        elif isinstance(space, Dict) and tuple_obs:\n            return all((is_continuous_space(sub_space) for sub_space in space.spaces.values()))\n        else:\n            return False\n    cont_action = is_continuous_space(env.action_space)\n    cont_obs = is_continuous_space(env.observation_space)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 1, "solution": "def is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n\n    def _is_continuous_space(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            res = True\n            for sub_space in space.spaces.values() if isinstance(space, Dict) else space.spaces:\n                if not _is_continuous_space(sub_space):\n                    res = False\n                    break\n            return res\n        else:\n            return False\n    cont_action = _is_continuous_space(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = _is_continuous_space(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 2, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space):\n        if isinstance(space, Box):\n            return True\n        elif tuple_action and isinstance(space, Tuple):\n            return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n        elif tuple_obs and isinstance(space, Tuple):\n            return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n        elif tuple_action and isinstance(space, Dict):\n            return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n        elif tuple_obs and isinstance(space, Dict):\n            return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n        else:\n            return False\n    return (check_space(env.action_space), check_space(env.observation_space))"}
{"task_id": 363, "completion_id": 3, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_composite_continuous(space):\n        if isinstance(space, Tuple) or isinstance(space, Dict):\n            return all((is_continuous(sub_space) for sub_space in space.spaces.values()))\n        else:\n            return False\n    cont_action = isinstance(env.action_space, Box) if not tuple_action else is_composite_continuous(env.action_space)\n    cont_obs = isinstance(env.observation_space, Box) if not tuple_obs else is_composite_continuous(env.observation_space)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 4, "solution": "from typing import Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env: Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs: Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_helper(space: Space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            return all((is_continuous_helper(sub_space) for sub_space in space.spaces.values()))\n        else:\n            return False\n    (cont_action, cont_obs) = (False, False)\n    if tuple_action:\n        cont_action = is_continuous_helper(env.action_space)\n    elif isinstance(env.action_space, Box):\n        cont_action = True\n    if tuple_obs:\n        cont_obs = is_continuous_helper(env.observation_space)\n    elif isinstance(env.observation_space, Box):\n        cont_obs = True\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 5, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = cont_obs = False\n    if isinstance(env.action_space, Box) or (not tuple_action and isinstance(env.action_space, (Tuple, Dict)) and all((isinstance(space, Box) for space in env.action_space.spaces.values()))):\n        cont_action = True\n    if isinstance(env.observation_space, Box) or (not tuple_obs and isinstance(env.observation_space, (Tuple, Dict)) and all((isinstance(space, Box) for space in env.observation_space.spaces.values()))):\n        cont_obs = True\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 6, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple"}
{"task_id": 363, "completion_id": 7, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            return all((is_space_continuous(sub_space) for (_, sub_space) in getattr(space, 'spaces').items()))\n        else:\n            return False\n    if tuple_action:\n        cont_action = is_space_continuous(env.action_space)\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs:\n        cont_obs = is_space_continuous(env.observation_space)\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 8, "solution": "def is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    (cont_action, cont_obs) = (True, True)\n    if tuple_action:\n        for space in env.action_space.spaces:\n            if not all((isinstance(subspace, Box) for subspace in space.spaces)):\n                cont_action = False\n                break\n    elif not isinstance(env.action_space, Box):\n        cont_action = False\n    if tuple_obs:\n        for space in env.observation_space.spaces:\n            if not all((isinstance(subspace, Box) for subspace in space.spaces)):\n                cont_obs = False\n                break\n    elif not isinstance(env.observation_space, Box):\n        cont_obs = False\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 9, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_all_boxes(spaces):\n        for space in spaces:\n            if not isinstance(space, Box):\n                return False\n        return True\n    cont_action = cont_obs = True\n    if tuple_action:\n        if isinstance(env.action_space, Tuple) or isinstance(env.action_space, Dict):\n            spaces = env.action_space.spaces if isinstance(env.action_space, Tuple) else env.action_space.spaces.values()\n            cont_action = is_all_boxes(spaces)\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple) or isinstance(env.observation_space, Dict):\n            spaces = env.observation_space.spaces if isinstance(env.observation_space, Tuple) else env.observation_space.spaces.values()\n            cont_obs = is_all_boxes(spaces)\n    else:\n        cont_action = cont_action and isinstance(env.action_space, Box)\n        cont_obs = cont_obs and isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    x_max = np.max(x, axis=-1, keepdims=True)\n    nume = np.exp(x - x_max)\n    deno = np.sum(nume, axis=-1, keepdims=True)\n    return nume / deno\ndef gradient_boosting_predict(updates, learning_rate, regression):\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = softmax(running_pred)\n        return np.argmax(class_probs, axis=-1)\nupdates = [np.array([[0.1, 0.2, -0.1, -0.2], [0.2, -0.1, 0.3, -0.2]]), np.array([[0.1, -0.2, 0.3, -0.1], [-0.1, 0.2, -0.3, 0.2]])]\nlearning_rate = 0.1\nregression = False"}
{"task_id": 369, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    running_pred = np.exp(running_pred)\n    running_pred /= np.sum(running_pred, axis=-1, keepdims=True)\n    return np.argmax(running_pred, axis=-1)\nupdates = [np.array([[0.2, 0.3, 0.4], [0.1, 0.2, 0.3]]), np.array([[0.3, 0.4, 0.5], [0.2, 0.3, 0.4]])]"}
{"task_id": 369, "completion_id": 2, "solution": "import numpy as np\nfrom scipy.special import softmax\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = softmax(running_pred, axis=-1)\n        class_labels = np.argmax(probs, axis=-1)\n        return class_labels"}
{"task_id": 369, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = np.exp(running_pred) / np.exp(running_pred).sum(axis=-1, keepdims=True)\n        predicted_class_labels = np.argmax(class_probs, axis=-1)\n        return predicted_class_labels"}
{"task_id": 369, "completion_id": 4, "solution": "import numpy as np\ndef softmax(X):\n    exp = np.exp(X)\n    return exp / np.sum(exp, axis=1)[:, None]\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        Classification \u2013 1-D array of integers representing the predicted\n        class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = softmax(running_pred)\n        return np.argmax(probs, axis=1)"}
{"task_id": 369, "completion_id": 5, "solution": "import numpy as np\ndef softmax(X, theta=1.0, axis=None):\n    \"\"\"\n    Compute the softmax of each element along an axis of X.\n\n    Parameters\n    ----------\n    X: ND-Array. Probably should be floats.\n    theta (optional): float parameter, used as a multiplier\n        prior to exponentiation. Default = 1.0\n    axis (optional): axis to compute values along. Default is the\n        first non-singleton axis.\n\n    Returns an array the same size as X. The result will sum to 1\n    along the specified axis.\n    \"\"\"\n    y = np.atleast_2d(X)\n    if axis is None:\n        axis = next((j[0] for j in enumerate(y.shape) if j[1] > 1))\n    y = y * float(theta)\n    y = y - np.expand_dims(np.max(y, axis=axis), axis)\n    y = np.exp(y)\n    ax_sum = np.expand_dims(np.sum(y, axis=axis), axis)\n    p = y / ax_sum\n    if len(X.shape) == 1:\n        p = p.flatten()\n    return p\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        prob = softmax(running_pred)\n        return np.argmax(prob, axis=1)"}
{"task_id": 369, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List\ndef gradient_boosting_predict(updates: List[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        proba = np.exp(running_pred) / np.exp(running_pred).sum(axis=-1, keepdims=True)\n        return np.argmax(proba, axis=-1)"}
{"task_id": 369, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = np.exp(running_pred) / np.exp(running_pred).sum(axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 369, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.special import softmax\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = softmax(running_pred, axis=-1)\n        return np.argmax(class_probs, axis=-1)"}
{"task_id": 369, "completion_id": 9, "solution": "import numpy as np\ndef softmax(X):\n    exps = np.exp(X)\n    return exps / np.sum(exps, axis=1, keepdims=True)\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = softmax(running_pred)\n        return np.argmax(probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef same_padding(size, kernel, stride, dilation=1):\n    out_size = math.ceil(size / stride)\n    pad_total = max(0, (out_size - 1) * stride + dilation * (kernel - 1) + 1 - size)\n    pad_begin = int(pad_total // 2)\n    pad_end = int(pad_total - pad_begin)\n    return (pad_begin, pad_end)\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = (kernel_width - 1) * dilation + 1\n    if pad == 'same':\n        (p_left, p_right) = same_padding(signal_length, kernel_width, stride, dilation)\n    elif isinstance(pad, int):\n        (p_left, p_right) = (pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(f\"pad must be 'same', int, or 2-tuple, not {type(pad)}\")\n    padding = np.zeros((n_examples, p_left + signal_length + p_right, in_channels))\n    padding[:, p_left:p_left + signal_length, :] = X\n    out_length = (signal_length + p_left + p_right - effective_kernel) // stride + 1\n    output = np.zeros((n_examples, out_length, out_channels))\n    for example in range(n_examples):\n        for out_pos in range(out_length):\n            for out_channel in range(out_channels):\n                start = out_pos * stride\n                end = start + effective_kernel\n                x_slice = padding[example, start:end:dilation, :]\n                w_slice = W[:, :, out_channel]\n                output[example, out_pos, out_channel] = np.sum(x_slice * w_slice)\n    return output.tolist()"}
{"task_id": 371, "completion_id": 1, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if pad == 'same':\n        output_length = (signal_length + stride - 1) // stride\n        total_pad = max(0, (output_length - 1) * stride + (kernel_width - 1) * dilation + 1 - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        output_length = (signal_length + 2 * pad - dilation * (kernel_width - 1) - 1) // stride + 1\n        (p_left, p_right) = (pad, pad)\n    else:\n        output_length = (signal_length - pad[0] - pad[1] - dilation * (kernel_width - 1) - 1) // stride + 1\n        (p_left, p_right) = pad\n    X = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)))\n    Z = np.zeros((n_examples, output_length, out_channels))\n    for i in range(output_length):\n        Z[:, i, :] = np.sum(X[:, i * stride:i * stride + (kernel_width - 1) * dilation + 1:dilation + 1, :, np.newaxis] * W[np.newaxis, np.newaxis, :, :], axis=(2, 3))\n    return Z.tolist()\nX = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]])\nW = np.array([[[1, 0]], [[0, 1]], [[0.5, 0.5]]])"}
{"task_id": 371, "completion_id": 2, "solution": "import numpy as np\nfrom math import ceil\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if isinstance(pad, tuple):\n        pad_width = (pad, (0, 0))\n    elif isinstance(pad, int):\n        pad_width = ((pad, pad), (0, 0))\n    elif pad == 'same':\n        total_pad = max(0, (ceil(X.shape[1] / stride) - 1) * stride + dilation * (W.shape[0] - 1) - X.shape[1] + 1)\n        pad_width = ((total_pad // 2, total_pad - total_pad // 2), (0, 0))\n    else:\n        raise ValueError(\"Invalid padding. Must be int, tuple, or 'same'\")\n    X_pad = np.pad(X, pad_width, mode='constant')\n    if dilation > 0:\n        X_new = np.zeros((X_pad.shape[0], int((X_pad.shape[1] + dilation * (W.shape[0] - 1)) / dilation), X_pad.shape[2]))\n        for i in range(X_pad.shape[0]):\n            for j in range(X_pad.shape[2]):\n                X_new[i, ::dilation, j] = X_pad[i, :, j]\n        X_pad = X_new\n    out_len = int((X_pad.shape[1] - W.shape[0]) / stride + 1)\n    Z = np.zeros((X_pad.shape[0], out_len, W.shape[2]))\n    for example in range(Z.shape[0]):\n        for out_channel in range(Z.shape[2]):\n            for out in range(Z.shape[1]):\n                Z[example, out, out_channel] += np.sum(X_pad[example, out * stride:out * stride + W.shape[0], :] * W[:, :, out_channel])\n    return Z.tolist()"}
{"task_id": 371, "completion_id": 3, "solution": "import numpy as np\nfrom math import ceil\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n\n    def compute_output_size(input_size: int, kernel_size: int, stride: int, dilation: int, padding: tuple):\n        return ceil((input_size + 2 * padding - dilation * (kernel_size - 1) - 1) / stride) + 1\n\n    def validate_padding(input_size: int, output_size: int, kernel_size: int, stride: int, dilation: int, padding: tuple):\n        needed_input_size = (output_size - 1) * stride + 1 + dilation * (kernel_size - 1)\n        return input_size + sum(padding) >= needed_input_size\n\n    def get_pad(p, n, w, s, d):\n        if p == 'same':\n            total_pad = d * (w - 1) + max(0, (n - 1) * s + w - n)\n            pad_l = total_pad // 2\n            pad_r = total_pad - pad_l\n        elif isinstance(p, int):\n            pad_l = pad_r = p\n        else:\n            (pad_l, pad_r) = p\n        return (pad_l, pad_r)\n    assert len(X.shape) == 3, 'X must be a 3D array'\n    assert len(W.shape) == 3, 'W must be a 3D array'\n    assert all((isinstance(p, int) or len(p) == 2 or p == 'same' for p in pad)), 'pad must be int, 2-tuple, or \"same\"'\n    (input_length, in_channels) = X.shape[1:]\n    (kernel_width, kernel_in_channels, out_channels) = W.shape\n    assert in_channels == kernel_in_channels, 'input channels and kernel input channels do not match'\n    (pad_l, pad_r) = zip(*[get_pad(p, input_length, kernel_width, stride, dilation) for p in pad])\n    pad = (max(pad_l), max(pad_r))\n    assert validate_padding(input_length, *X.shape[1:], *W.shape, stride, dilation, pad), 'Invalid padding'\n    output_length = compute_output_size(*X.shape[1:], *W.shape, stride, dilation, pad)\n    X_pad = np.pad(X, ((0, 0), (pad[0], pad[1]), (0, 0)))\n    W_rows = W.reshape(-1, in_channels)\n    Y = np.empty((X.shape[0], output_length, out_channels))\n    for i in range(output_length):\n        X_slice = X_pad[:, i * stride:i * stride + kernel_width * dilation:dilation, :]\n        Y[:, i] = np.dot(X_slice.reshape(X.shape[0], -1), W_rows)\n    return Y.tolist()"}
{"task_id": 371, "completion_id": 4, "solution": "import math\nimport numpy as np\nfrom typing import Union, Tuple\ndef calc_output_length(l_in: int, stride: int, effective_kernel: int):\n    \"\"\"Calculate the output length of a 1D convolution.\"\"\"\n    return math.ceil((l_in - effective_kernel + 1) / stride)\ndef calc_padding(l_in: int, stride: int, effective_kernel: int, out_len: int):\n    \"\"\"Calculate the padding for a \"SAME\" convolution.\"\"\"\n    total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n    pad_l = total_pad // 2\n    pad_r = total_pad - pad_r\n    return (pad_l, pad_r)\ndef pad_1D(X: np.ndarray, pad_l: int, pad_r: int, constant_values=0):\n    \"\"\"Pad a 1D signal.\"\"\"\n    X = np.pad(X, ((pad_l, pad_r), (0, 0), (0, 0)), mode='constant', constant_values=constant_values)\n    return X\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: Union[int, Tuple[int, int], str], dilation: int=0) -> list:\n    (kernel_width, in_channels, out_channels) = W.shape\n    (n_examples, signal_length, in_channels) = X.shape\n    effective_kernel = (kernel_width - 1) * dilation + 1\n    if pad == 'same':\n        out_len = calc_output_length(l_in=signal_length, stride=stride, effective_kernel=effective_kernel)\n        (pad_l, pad_r) = calc_padding(l_in=signal_length, stride=stride, effective_kernel=effective_kernel, out_len=out_len)\n    elif type(pad) is int:\n        pad_l = pad_r = pad\n    elif type(pad) is tuple and len(pad) == 2:\n        (pad_l, pad_r) = pad\n    X = pad_1D(X, pad_l, pad_r)\n    signal_length = X.shape[1]\n    out_len = calc_output_length(l_in=signal_length, stride=stride, effective_kernel=effective_kernel)\n    Y = np.zeros((n_examples, out_len, out_channels), dtype=X.dtype)\n    for example_idx in range(n_examples):\n        for out_channel_idx in range(out_channels):\n            for out_idx in range(out_len):\n                in_start_idx = out_idx * stride\n                in_end_idx = in_start_idx + effective_kernel\n                block = X[example_idx, in_start_idx:in_end_idx:dilation, :].T\n                Y[example_idx, out_idx, out_channel_idx] = np.sum(block * W[:, :, out_channel_idx])\n    return Y.tolist()"}
{"task_id": 371, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom typing import Tuple"}
{"task_id": 371, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if isinstance(pad, str) and pad.lower() == 'same':\n        output_length = math.ceil(signal_length / stride)\n        padding_needed = max(0, (output_length - 1) * stride + dilation * (kernel_width - 1) + 1 - signal_length)\n        left_pad = int(padding_needed / 2)\n        right_pad = padding_needed - left_pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (left_pad, right_pad) = pad\n    elif isinstance(pad, int):\n        left_pad = right_pad = pad\n    else:\n        raise ValueError('Invalid padding specification.')\n    X_padded = np.pad(X, ((0, 0), (left_pad, right_pad), (0, 0)))\n    output = []\n    for ex in range(n_examples):\n        example_output = []\n        for oc in range(out_channels):\n            channel_output = []\n            for i in range(0, signal_length + left_pad + right_pad - dilation * (kernel_width - 1) - 1, stride):\n                window = X_padded[ex, i:i + dilation * (kernel_width - 1) + 1:dilation, :]\n                result = np.sum(window * W[:, :, oc])\n                channel_output.append(result)\n            example_output.append(channel_output)\n        output.append(np.array(example_output).T.tolist())\n    return output"}
{"task_id": 371, "completion_id": 7, "solution": "import numpy as np\nimport math\nimport itertools\nfrom scipy.signal import convolve2d\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    (batch_size, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if type(pad) == int:\n        pad_left = pad_right = pad\n    elif type(pad) == tuple and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        out_len = math.ceil(signal_length / stride)\n        total_pad = max(0, (out_len - 1) * stride + dilation * (kernel_width - 1) + 1 - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)))\n    out_length = math.ceil((signal_length + pad_left + pad_right - dilation * (kernel_width - 1) - 1) / stride) + 1\n    output = np.zeros((batch_size, out_length, out_channels))\n    dilated_kernel = np.zeros(((kernel_width - 1) * dilation + 1, in_channels, out_channels))\n    dilated_kernel[::dilation + 1] = W\n    for (b, i, o) in itertools.product(range(batch_size), range(out_length), range(out_channels)):\n        x_window = X_padded[b, i * stride:i * stride + kernel_width * dilation:dilation + 1, :]\n        output[b, i, o] = np.sum(x_window * dilated_kernel[:, :, o])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef same_padding(kernel_size, stride, input_size):\n    out_len = math.ceil(input_size / stride)\n    total_pad = max(0, (out_len - 1) * stride + kernel_size - input_size)\n    p_left = total_pad // 2\n    p_right = total_pad - p_left\n    return (p_left, p_right)\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    (n_examples, input_length, in_channels) = X.shape\n    (kernel_width, W_in_channels, out_channels) = W.shape\n    assert in_channels == W_in_channels\n    if isinstance(pad, str):\n        pad = same_padding(kernel_width * (dilation + 1) - dilation, stride, input_length)\n    if isinstance(pad, int):\n        pad = (pad, pad)\n    (p_left, p_right) = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)))\n    output_length = math.floor((input_length + sum(pad) - dilation * (kernel_width - 1) - 1) / stride) + 1\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n    for i in range(output_length):\n        for j in range(out_channels):\n            for k in range(in_channels):\n                output_volume[:, i, j] += np.sum(X_padded[:, i * stride:i * stride + kernel_width:dilation + 1, k] * W[:, k, j], axis=(1, 2))\n    return output_volume.tolist()"}
{"task_id": 371, "completion_id": 9, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    if isinstance(pad, str) and pad.lower() == 'same':\n        out_len = int(np.ceil(X.shape[1] / stride))\n        total_pad = max(0, (out_len - 1) * stride + dilation * (W.shape[0] - 1) + 1 - X.shape[1])\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    elif isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    X_pad = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n    out_len = int(np.floor((X_pad.shape[1] - dilation * (W.shape[0] - 1) - 1) / stride + 1))\n    out_channels = W.shape[2]\n    Y = np.zeros((X.shape[0], out_len, out_channels))\n    for n in range(X.shape[0]):\n        for c in range(out_channels):\n            for i in range(out_len):\n                start = i * stride\n                end = start + dilation * W.shape[0]\n                Y[n, i, c] = np.sum(X_pad[n, start:end:dilation + 1, :] * W[:, :, c])\n    return Y.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    (labels, label_counts) = np.unique(y, return_counts=True)\n    N = label_counts.sum()\n    return round(1 - sum((label_counts / N) ** 2), 4) if N != 0 else 0.0"}
{"task_id": 373, "completion_id": 1, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(np.square(probabilities))\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 2, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    gini = 1 - np.sum(p ** 2)\n    return round(gini, 4)"}
{"task_id": 373, "completion_id": 3, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    p_c = counts / len(y)\n    Gini = 1 - np.sum(p_c ** 2)\n    return round(Gini, 4)"}
{"task_id": 373, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    counts = Counter(y)\n    probs = [counts[class_] / len(y) for class_ in counts]\n    gini = 1 - sum((p ** 2 for p in probs))\n    return round(gini, 4)"}
{"task_id": 373, "completion_id": 5, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) > 0:\n        y = np.array(y)\n        (unique_classes, counts) = np.unique(y, return_counts=True)\n        impurity = 1 - sum((counts / len(y)) ** 2)\n    else:\n        impurity = 0.0\n    return round(impurity, 4)"}
{"task_id": 373, "completion_id": 6, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (unique, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 4)"}
{"task_id": 373, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.array(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    class_freq = counts / len(y)\n    impurity = 1 - np.sum(np.square(class_freq))\n    if len(y) == 0:\n        impurity = 0.0\n    return round(impurity, 4)"}
{"task_id": 373, "completion_id": 8, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - sum(np.power(probabilities, 2))\n    return round(impurity, 4)"}
{"task_id": 373, "completion_id": 9, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (classes, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    gini = 1 - sum((counts / N) ** 2)\n    return round(gini, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    weights_list = list(np.round(theta, 4))\n    bias = round(b, 4)\n    return (weights_list, bias)"}
{"task_id": 374, "completion_id": 1, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Your task is to implement this function following the specification \n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 * np.dot(X.T, y_pred - y) / m\n        db = 2 * np.sum(y_pred - y) / m\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    theta = np.round(theta, 4).tolist()\n    b = np.round(b, 4)\n    return (theta, b)"}
{"task_id": 374, "completion_id": 2, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != len(y):\n        return (-1, -1)\n    weight = np.zeros(n)\n    bias = 0\n    for _ in range(n_iterations):\n        h = np.dot(X, weight) + bias\n        weight -= 2 / m * learning_rate * np.dot(X.T, h - y)\n        bias -= 2 / m * learning_rate * np.sum(h - y)\n    weight = [round(i, 4) for i in weight]\n    bias = round(bias, 4)\n    return (weight, bias)"}
{"task_id": 374, "completion_id": 3, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0\n    for iteration in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dtheta = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dtheta\n        b -= learning_rate * db\n    return ([round(i, 4) for i in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 4, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    This function implements the updates for the linear regression model learning.\n    \"\"\"\n    (m, n) = X.shape\n    if m != len(y):\n        return -1\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 374, "completion_id": 5, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    This function implements multiple linear regression using batch gradient descent.\n\n    Parameters:\n    X (numpy.ndarray): A matrix of shape (m,n) where 'm' is the number of samples and\n                        'n' is the number of features in the feature matrix.\n\n    y (numpy.ndarray): A vector of shape (m,) containing the target values.\n   \n    learning_rate (float): The learning rate to be used during training. Default value is 0.01.\n\n    n_iterations (int): The number of iterations to be used during training. Default value is 10000.\n\n    Returns:\n    Tuple: A tuple containing two elements - a list of weights (theta) and a scalar bias (b).\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros((n,))\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta = np.round(theta, 4)\n    b = np.round(b, 4)\n    return (theta.tolist(), b)"}
{"task_id": 374, "completion_id": 6, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != len(y):\n        return -1\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    return ([round(i, 4) for i in theta], round(b, 4))\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([2, 3, 4])"}
{"task_id": 374, "completion_id": 7, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    if len(X) != len(y):\n        return -1\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    y = np.array(y)\n    for _ in range(n_iterations):\n        y_predicted = np.dot(X, weights) + bias\n        dw = 2 / m * np.dot(X.T, y_predicted - y)\n        db = 2 / m * np.sum(y_predicted - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    return ([round(val, 4) for val in weights.tolist()], round(bias, 4))"}
{"task_id": 374, "completion_id": 8, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    bias = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    return np.round([theta, bias], 4)"}
{"task_id": 374, "completion_id": 9, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    m = len(X)\n    n = len(X[0])\n    theta = np.zeros((n,))\n    bias = 0\n    for _ in range(n_iterations):\n        y_predicted = np.dot(X, theta) + bias\n        dw = 2 / m * np.dot(X.T, y_predicted - y)\n        db = 2 / m * np.sum(y_predicted - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    return (list(np.round(theta, 4)), round(bias, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T)"}
{"task_id": 376, "completion_id": 1, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    try:\n        X = np.array(X)\n        return np.array_equal(X, X.T) and np.allclose(X, np.flip(X, 1), atol=1e-08)\n    except Exception as e:\n        return False"}
{"task_id": 376, "completion_id": 2, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 3, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    np_array = np.array(X)\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    return np.allclose(np_array, np_array.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 4, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 5, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    arr = np.array(X)\n    if arr.shape[0] != arr.shape[1]:\n        return False\n    return np.allclose(arr, arr.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 6, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T)"}
{"task_id": 376, "completion_id": 7, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 8, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    else:\n        return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 9, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Returns the negative gradient of logistic loss for binary classification\"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if np.any((y != 0) & (y != 1)):\n        return -1\n    y = 2 * y - 1\n    gradient = y / (1 + np.exp(y * f))\n    gradient = [round(val, 4) for val in gradient.tolist()]\n    return gradient\ny = [1, 0, 1, 0]\nf = [0.76, 0.23, -0.56, 0.67]"}
{"task_id": 377, "completion_id": 1, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function takes two one-dimensional arrays (or Python lists), where y are binary class labels (0 or 1) \n    and f are current prediction scores (floats). It returns the list of negative gradients rounded to the \n    nearest 4th decimal, using the logistic loss function for Gradient Boosting.\n    \n    If y contains values other than 0 or 1, it returns -1.\n    \"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y = np.array(y)\n    f = np.array(f)\n    y_prime = 2 * y - 1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return np.round(list(g), 4)"}
{"task_id": 377, "completion_id": 2, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient that Gradient Boosting uses to optimize\n    the logistic loss for binary classification.\n\n    Args:\n        y: A list of binary class labels with 0s or 1s.\n        f: A list of current prediction scores.\n    Returns:\n        A list of rounded negative gradients with each value rounded to nearest 4th decimal.\n        If y contains any other value than 0 or 1, it returns -1.\n    \"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y_prime = 2 * np.array(y) - 1\n    gradient = y_prime / (1 + np.exp(y_prime * f))\n    return [round(g, 4) for g in gradient]"}
{"task_id": 377, "completion_id": 3, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Calculates the negative gradient of the logistic loss for binary classification\"\"\"\n    y_prime = 2 * np.array(y) - 1\n    if len(set(y) - {0, 1}) > 0:\n        return -1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return [round(val, 4) for val in g.tolist()]\ny = [0, 1, 1, 0, 1]\nf = [0.1, 0.2, 0.3, 0.4, 0.5]"}
{"task_id": 377, "completion_id": 4, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient of the logistic loss function with respect to f.\n    :param y: a list of binary class labels (0 or 1). Must not contain values other than 0 or 1.\n    :param f: a list of current prediction scores (floats).\n    :return: a list of negative gradients g rounded to the nearest 4th decimal.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    y_prime = 2 * y - 1\n    if not np.all((y == 0) | (y == 1)):\n        return -1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g_rounded = [round(val, 4) for val in g.tolist()]\n    return g_rounded\ny = [0, 1, 0, 1]\nf = [0.1, 0.2, 0.3, 0.4]"}
{"task_id": 377, "completion_id": 5, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient of the logistic loss for binary \n    classification using Gradient Boosting.\n    \n    The function takes two parameters:\n    y: binary class labels (0 or 1)\n    f: current prediction scores (floats)\n    \n    The function returns a list of negative gradients rounded to four decimal places. \n    If the label array contains values other than 0 or 1, the function returns -1.\n\n    Parameters:\n    y (list): binary class labels\n    f (list): current prediction scores\n    \n    Returns: \n    list: list of negative gradients rounded to four decimal places\n    \"\"\"\n    if any((i not in [0, 1] for i in y)):\n        return -1\n    y_binary = 2 * np.array(y) - 1\n    g = y_binary / (1 + np.exp(y_binary * np.array(f)))\n    return [round(i, 4) for i in g.tolist()]"}
{"task_id": 377, "completion_id": 6, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function computes the negative gradient for the logistic loss function.\n    It first checks if all elements in `y` are either 0 or 1. If not, it returns -1.\n    Otherwise, it computes the negative gradient for each corresponding pair of labels and predictions\n    in `y` and `f`, rounded to the nearest 4th decimal, and returns the list of these \n    negative gradients.\n    \"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y_prime = 2 * np.array(y) - 1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return np.round(g, 4).tolist()"}
{"task_id": 377, "completion_id": 7, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Calculate the negative gradient of logistic loss at the given predictions.\"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y_prime = np.array([2 * i - 1 for i in y])\n    f = np.array(f)\n    gradient = y_prime / (1 + np.exp(y_prime * f))\n    return np.round(gradient, 4).tolist()"}
{"task_id": 377, "completion_id": 8, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient of logistic loss for binary classification.\n\n    Parameters:\n    y (list) : Binary class labels (0 or 1)\n    f (list) : Current prediction scores (floats)\n\n    Returns:\n    list: List of negative gradients g rounded to four decimal places\n\n    If label array contains values other than 0 or 1, it returns -1.\n    \"\"\"\n    y = np.array(y)\n    if not np.all((y == 0) | (y == 1)):\n        return -1\n    y = 2 * y - 1\n    f = np.array(f)\n    g = y / (1 + np.exp(y * f))\n    return np.round(g, 4).tolist()"}
{"task_id": 377, "completion_id": 9, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Function to compute the negative gradient of logistic loss for binary classification.\n    \n       Parameters:\n       y - list: a list of binary class labels (0 or 1)\n       f - list: a list of current prediction scores (floats)\n       \n       Returns:\n       g - list: a list of negative gradients.\n    \"\"\"\n    if len(y) != len(f):\n        raise ValueError('Input arrays should have the same length.')\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y = np.array([2 * i - 1 for i in y], dtype=float)\n    f = np.array(f, dtype=float)\n    g = y / (1 + np.exp(y * f))\n    g = [round(i, 4) for i in g]\n    return g"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if order == 0:\n        y = SCALE * np.where(x > 0, x, ALPHA * (np.exp(x) - 1))\n    elif order == 1:\n        y = SCALE * np.where(x > 0, 1, ALPHA * np.exp(x))\n    elif order == 2:\n        y = SCALE * np.where(x > 0, 0, ALPHA * np.exp(x))\n    else:\n        raise ValueError('Invalid order. Use 0, 1 or 2.')\n    return np.round(y, 4).tolist()"}
{"task_id": 380, "completion_id": 1, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    ALPHA = 1.6732632423543772\n    LAMBDA = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        return np.where(x > 0, LAMBDA * x, LAMBDA * ALPHA * (np.exp(x) - 1)).round(4).tolist()\n    elif order == 1:\n        return np.where(x > 0, LAMBDA, LAMBDA * ALPHA * np.exp(x)).round(4).tolist()\n    elif order == 2:\n        return np.where(x > 0, np.full_like(x, LAMBDA), LAMBDA * ALPHA * np.exp(x)).round(4).tolist()\n    else:\n        raise ValueError(f'Invalid order {order}. Valid options are 0, 1, 2')"}
{"task_id": 380, "completion_id": 2, "solution": "import numpy as np\nalpha = 1.6732632423543772\nscale = 1.0507009873554805\ndef elu(x, alpha):\n    \"\"\"Exponential Linear Unit (ELU) activation function.\"\"\"\n    return np.where(x > 0, x, alpha * (np.exp(x) - 1))\ndef selu(x, order: int=0):\n    \"\"\"Scaled Exponential Linear Unit (SELU) activation or its derivatives.\"\"\"\n    if isinstance(x, (int, float)):\n        if order == 0:\n            return round(scale * elu(x, alpha), 4)\n        elif order == 1:\n            return round(scale * np.where(x > 0, 1, alpha * np.exp(x)), 4)\n        elif order == 2:\n            return round(scale * np.where(x > 0, 0, alpha * np.exp(x)), 4)\n    x = np.array(x).squeeze().flatten()\n    res = np.zeros_like(x, dtype='float64')\n    for i in range(len(x)):\n        res[i] = selu(x[i], order)\n    return res.tolist()"}
{"task_id": 380, "completion_id": 3, "solution": "import numpy as np\nalpha = 1.6732632423543772\nscale = 1.0507009873554805\ndef elu(x, alpha):\n    return np.where(x > 0, x, alpha * (np.exp(x) - 1))\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x)\n    if order == 0:\n        y = scale * elu(x, alpha)\n    elif order == 1:\n        y = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        y = np.where(x > 0, scale, scale * alpha * np.exp(x)) * (alpha + np.where(x > 0, 0, x))\n    else:\n        raise ValueError('Order must be either 0, 1, or 2')\n    return np.round(y, 4).tolist()"}
{"task_id": 380, "completion_id": 4, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        return np.where(x > 0, x, alpha * (np.exp(x) - 1)) * scale\n    if order == 1:\n        return np.where(x > 0, 1, alpha * np.exp(x)) * scale\n    if order == 2:\n        return np.where(x > 0, 0, alpha * np.exp(x)) * scale\n    raise ValueError('Order parameter must be either 0, 1 or 2')"}
{"task_id": 380, "completion_id": 5, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    if order == 0:\n        return (np.where(x > 0, x, ALPHA * (np.exp(x) - 1)) * SCALE).round(4).tolist()\n    elif order == 1:\n        return np.where(x > 0, SCALE, ALPHA * np.exp(x) * SCALE).round(4).tolist()\n    else:\n        return (np.where(x > 0, 0, ALPHA * np.exp(x)) * SCALE).round(4).tolist()"}
{"task_id": 380, "completion_id": 6, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    return np.around(result, 4).tolist()"}
{"task_id": 380, "completion_id": 7, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        return np.where(x > 0, x, ALPHA * (np.exp(x) - 1)) * SCALE\n    elif order == 1:\n        return np.where(x > 0, 1, ALPHA * np.exp(x)) * SCALE\n    elif order == 2:\n        return np.where(x > 0, 0, ALPHA * np.exp(x)) * SCALE\n    else:\n        raise ValueError(f'Invalid derivative order: {order}')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 8, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative SELU(x)\n        2 \u2192 second derivative SELU(x)\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    x = np.asarray(x)\n\n    def elu_func(x, alpha):\n        return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n\n    def selu_func(x, alpha, scale):\n        return scale * elu_func(x, alpha)\n\n    def derivative_selu(x, alpha, scale, order):\n        if order > 2:\n            return 'None'\n        elif order == 1:\n            sub1 = 1.6732632423543772 * np.exp(x)\n            sub3 = x <= 0\n            return np.where(sub3, scale * sub1, scale)\n        elif order == 2:\n            sub1 = 1.6732632423543772 * np.exp(x)\n            sub2 = x > 0\n            sub3 = x < 0\n            return np.where(sub2, scale, np.where(sub3, scale * sub1, scale))\n        else:\n            return scale * elu_func(x, alpha)\n    if np.ndim(x) == 0:\n        return round(float(derivative_selu(x, ALPHA, SCALE, order)), 4)\n    else:\n        return [round(float(i), 4) for i in derivative_selu(x, ALPHA, SCALE, order)]"}
{"task_id": 380, "completion_id": 9, "solution": "import numpy as np\nALPHA = 1.6732632423543772\nSCALE = 1.0507009873554805\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    if order == 0:\n        y = np.where(x > 0, x, np.exp(x) - 1)\n        y *= ALPHA\n        y += SCALE\n    elif order == 1:\n        y = np.exp(x)\n        y = np.where(x <= 0, y, 1)\n        y *= ALPHA * SCALE\n    elif order == 2:\n        y = np.exp(x)\n        y *= ALPHA * SCALE\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    return y.round(4).tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef compute_residuals(y, y_hat):\n    return y - y_hat\ndef update_predictions(y_hat, learning_rate, r_t):\n    return y_hat + learning_rate * r_t\ndef get_mean_residual(residuals):\n    return np.mean(residuals)\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    n = x.shape[0]\n    y_hat = np.full(n, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = compute_residuals(y, y_hat)\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        split_candidates = (x_sorted[1:] + x_sorted[:-1]) / 2.0\n        optimal_split = None\n        min_mse = np.inf\n        for t in split_candidates:\n            L_mask = x_sorted <= t\n            R_mask = np.logical_not(L_mask)\n            r_L = residuals_sorted[L_mask].mean()\n            r_R = residuals_sorted[R_mask].mean()\n            r_t = np.where(L_mask, r_L, r_R)\n            mse = np.mean((y - r_t) ** 2)\n            if mse < min_mse:\n                min_mse = mse\n                optimal_split = t\n        if optimal_split is not None:\n            r_t = np.where(x <= optimal_split, get_mean_residual(residuals[x <= optimal_split]), get_mean_residual(residuals[x > optimal_split]))\n            y_hat = update_predictions(y_hat, learning_rate, r_t)\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 387, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    mean_y = np.mean(y)\n    pred = np.full(y.shape, mean_y)\n    for _ in range(n_estimators):\n        res = y - pred\n        sorted_idx = np.argsort(x)\n        x_sorted = x[sorted_idx]\n        res_sorted = res[sorted_idx]\n        unique_val = np.unique(x)\n        if unique_val.size > 1:\n            split_points = (unique_val[:-1] + unique_val[1:]) / 2\n        else:\n            split_points = unique_val\n        loss = np.inf\n        best_split = 0\n        for split in split_points:\n            left_mask = x_sorted <= split\n            right_mask = x_sorted > split\n            left_res = res_sorted[left_mask]\n            right_res = res_sorted[right_mask]\n            total_res_loss = np.sum(left_res ** 2) + np.sum(right_res ** 2)\n            if total_res_loss < loss:\n                loss = total_res_loss\n                best_split = split\n        if best_split != 0:\n            left_mask = x <= best_split\n            right_mask = x > best_split\n            pred[left_mask] += learning_rate * np.mean(res[left_mask])\n            pred[right_mask] += learning_rate * np.mean(res[right_mask])\n    return np.round(pred, 4).tolist()"}
{"task_id": 387, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sort_indices = np.argsort(x)\n        x_sorted = x[sort_indices]\n        residuals_sorted = residuals[sort_indices]\n        best_loss = np.inf\n        best_split = None\n        sum_residuals_left = 0\n        sum_residuals_right = residuals_sorted.sum()\n        for i in range(len(x) - 1):\n            sum_residuals_left += residuals_sorted[i]\n            sum_residuals_right -= residuals_sorted[i]\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            mean_residuals_left = sum_residuals_left / (i + 1)\n            mean_residuals_right = sum_residuals_right / (len(x) - i - 1)\n            pred_left = np.full(i + 1, mean_residuals_left)\n            pred_right = np.full(len(x) - i - 1, mean_residuals_right)\n            total_loss = np.sum((pred_left - residuals_sorted[:i + 1]) ** 2) + np.sum((pred_right - residuals_sorted[i + 1:]) ** 2)\n            if total_loss < best_loss:\n                best_loss = total_loss\n                best_split = (x_sorted[i] + x_sorted[i + 1]) / 2\n        if best_split is None:\n            stump_pred = np.full_like(y, np.mean(residuals))\n        else:\n            stump_pred = np.where(x <= best_split, mean_residuals_left, mean_residuals_right)\n        y_hat += learning_rate * stump_pred\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 387, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    pred = np.full_like(y, np.mean(y), dtype=float)\n    residuals = y - pred\n    indices = np.argsort(x)\n    sorted_x = x[indices]\n    sorted_residuals = residuals[indices]\n    for _ in range(n_estimators):\n        best_split_val = np.inf\n        best_split_idx = -1\n        mean_residual_left = np.zeros_like(y)\n        mean_residual_right = np.zeros_like(y)\n        mean_residual = 0.0\n        for i in range(len(sorted_residuals)):\n            mean_residual += sorted_residuals[i]\n            if i < len(sorted_residuals) - 1 and sorted_x[i] < sorted_x[i + 1]:\n                mean_residual_left[indices[i + 1:]] = mean_residual / (i + 1)\n                mean_residual_right[indices[i + 1:]] = (sorted_residuals[i + 1:].sum() + mean_residual) / (len(sorted_residuals) - i - 1)\n        sum_of_squared_residuals = np.sum(np.square(sorted_residuals)) - np.sum(np.square(mean_residual_left)) - np.sum(np.square(mean_residual_right))\n        for i in range(len(sorted_residuals) - 1):\n            split_val = sum_of_squared_residuals\n            if split_val < best_split_val:\n                best_split_val = split_val\n                best_split_idx = i\n        if best_split_idx != -1:\n            pred = np.where(x <= sorted_x[best_split_idx], pred + learning_rate * mean_residual_left, pred + learning_rate * mean_residual_right)\n        else:\n            pred += learning_rate * mean_residual\n    return np.round(pred, 4).tolist()"}
{"task_id": 387, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, np.mean(y)).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        candidate_splits = (x_sorted[1:] + x_sorted[:-1]) / 2\n        total_errors = []\n        for split in candidate_splits:\n            L_mask = x <= split\n            R_mask = x > split\n            left_mean = np.mean(residuals_sorted[L_mask])\n            right_mean = np.mean(residuals_sorted[R_mask])\n            pred_split = np.where(L_mask, left_mean, right_mean)\n            errors = residuals - pred_split\n            total_error = np.sum(errors ** 2)\n            total_errors.append(total_error)\n        if not total_errors:\n            split_min_error = np.mean(x)\n        else:\n            optimal_split_idx = np.argmin(total_errors)\n            split_min_error = candidate_splits[optimal_split_idx]\n        L_mask = x <= split_min_error\n        R_mask = x > split_min_error\n        left_mean = np.mean(residuals[L_mask])\n        right_mean = np.mean(residuals[R_mask])\n        y_pred += learning_rate * np.where(L_mask, left_mean, right_mean)\n    y_pred = np.round(y_pred, 4).tolist()\n    return y_pred"}
{"task_id": 387, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    yhat = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - yhat\n        idx_sort = np.argsort(x)\n        for i in range(len(x) - 1):\n            t = (x[idx_sort[i]] + x[idx_sort[i + 1]]) / 2\n            rhat_left = np.mean(residuals[idx_sort[:i + 1]])\n            rhat_right = np.mean(residuals[idx_sort[i + 1:]])\n            rhat = np.where(x <= t, rhat_left, rhat_right)\n            yhat += learning_rate * rhat\n    return list(np.round(yhat, 4))"}
{"task_id": 387, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = x.shape[0]\n    predictions = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        (x_sorted, residuals_sorted) = zip(*sorted(zip(x, residuals)))\n        (x_sorted, residuals_sorted) = (np.array(x_sorted), np.array(residuals_sorted))\n        best_split = None\n        min_sse = np.inf\n        for i in range(1, n_samples):\n            if x_sorted[i] != x_sorted[i - 1]:\n                split_point = (x_sorted[i] + x_sorted[i - 1]) / 2.0\n                residuals_left = residuals_sorted[:i]\n                residuals_right = residuals_sorted[i:]\n                sse = np.sum(residuals_left ** 2) + np.sum(residuals_right ** 2)\n                if sse < min_sse:\n                    min_sse = sse\n                    best_split = split_point\n        if best_split is None:\n            stump_preds = np.mean(residuals)\n        else:\n            stump_preds = np.full(n_samples, np.mean([np.mean(residuals_sorted[:i]), np.mean(residuals_sorted[i:])]))\n        predictions += learning_rate * stump_preds\n    return np.round(predictions, 4).tolist()"}
{"task_id": 387, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n = len(y)\n    y_pred = np.full(n, np.mean(y))\n    residuals = y - y_pred\n    for _ in range(n_estimators):\n        sort_idx = np.argsort(x)\n        x_sorted = x[sort_idx]\n        residuals_sorted = residuals[sort_idx]\n        avg_left = np.cumsum(residuals_sorted) / np.arange(1, n + 1)\n        avg_right = (np.cumsum(residuals_sorted[::-1])[::-1] / np.arange(n, 0, -1))[1:]\n        split_costs = np.square(avg_left[:-1]) + np.square(avg_right)\n        min_cost_idx = np.argmin(split_costs)\n        if min_cost_idx == 0 or np.all(x_sorted[:min_cost_idx] != x_sorted[min_cost_idx]) or np.all(x_sorted[min_cost_idx + 1:] != x_sorted[min_cost_idx]):\n            pred = np.mean(residuals_sorted)\n        else:\n            pred = np.where(x < x_sorted[min_cost_idx], avg_left[min_cost_idx], avg_right[min_cost_idx])\n        y_pred += learning_rate * pred\n        residuals = y - y_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.mean(y)\n    pred = [y_hat] * len(y)\n    for _ in range(n_estimators):\n        residuals = y - pred\n        x_index_sorted = np.argsort(x)\n        x_sorted = x[x_index_sorted]\n        residuals_sorted = residuals[x_index_sorted]\n        r_L_all = np.cumsum(residuals_sorted)[:-1] / np.arange(1, len(residuals_sorted))\n        r_R_all = (np.cumsum(residuals_sorted)[:-1] - residuals_sorted[:-1]) / np.arange(len(residuals_sorted) - 1, 0, -1)\n        sq_err = (np.cumsum(residuals_sorted)[:-1] ** 2)[:-1] / np.arange(1, len(residuals_sorted)) + ((np.cumsum(residuals_sorted)[:-1] - residuals_sorted[:-1]) ** 2)[1:] / np.arange(len(residuals_sorted) - 1, 0, -1)\n        best_t_index = np.argmin(sq_err)\n        best_t = (x_sorted[best_t_index] + x_sorted[best_t_index + 1]) / 2\n        pred_update = np.where(x <= best_t, r_L_all[best_t_index], r_R_all[best_t_index])\n        pred += learning_rate * pred_update\n    return list(np.round(pred, 4))"}
{"task_id": 387, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        resid = y - y_hat\n        sorted_idx = np.argsort(x)\n        x_sorted = x[sorted_idx]\n        resid_sorted = resid[sorted_idx]\n        split_points = (x_sorted[1:] + x_sorted[:-1]) / 2\n        sq_err = np.square(np.cumsum(resid_sorted[:-1])).sum() + np.square(np.cumsum(resid_sorted[::-1])).sum()\n        split_sq_err = np.diff(sq_err[sorted_idx])\n        if split_sq_err.size == 0:\n            r_hat = np.full_like(y, np.mean(resid), dtype=float)\n        else:\n            best_split_idx = np.argmin(split_sq_err)\n            t_star = split_points[best_split_idx]\n            r_hat = np.where(x < t_star, resid_sorted[:best_split_idx + 1].mean(), resid_sorted[best_split_idx + 1:].mean())\n        y_hat += learning_rate * r_hat\n    return list(np.round(y_hat, 4))"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (rho) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w_next, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 394, "completion_id": 1, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"\n    Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If None a zero array of the\n        same shape as ``grad`` should be used, by default None.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 394, "completion_id": 2, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.power(grad, 2)\n    w = w - learning_rate * grad / (np.sqrt(Eg) + 1e-08)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 394, "completion_id": 3, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    w_next = w.round(4).tolist()\n    Eg_next = Eg.round(4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 4, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    w = np.round(w, 4).tolist()\n    Eg = np.round(Eg, 4).tolist()\n    return (w, Eg)"}
{"task_id": 394, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 6, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    w_next = np.round(w_next, 4).tolist()\n    Eg = np.round(Eg, 4).tolist()\n    return (w_next, Eg)"}
{"task_id": 394, "completion_id": 7, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / (np.sqrt(Eg_next) + 1e-08)\n    w_next = np.round(w_next, 4).tolist()\n    Eg_next = np.round(Eg_next, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 8, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 394, "completion_id": 9, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, np.ones_like(x), elu(x, alpha) + alpha)\n    return np.round(result, 4).tolist()"}
{"task_id": 398, "completion_id": 1, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        return [round(y if x_i >= 0 else y + alpha, 4) for x_i in x]\n    else:\n        return [round(x_i if x_i >= 0 else alpha * (np.exp(x_i) - 1), 4) for x_i in x]"}
{"task_id": 398, "completion_id": 2, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x > 0, np.ones_like(x), elu(x, alpha, False) + alpha)\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 398, "completion_id": 3, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    x = np.array(x)\n    if derivative:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(val, 4) for val in result]"}
{"task_id": 398, "completion_id": 4, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, np.ones_like(x), elu(x, alpha=alpha, derivative=False) + alpha)\n    return [round(i, 4) for i in result]\nx = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]"}
{"task_id": 398, "completion_id": 5, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    elu_x = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    elu_prime_x = np.where(x >= 0, 1, elu_x + alpha)\n    return np.round(elu_prime_x if derivative else elu_x, 4).tolist()"}
{"task_id": 398, "completion_id": 6, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        temp = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, np.ones_like(x), temp + alpha)\n    return [round(num, 4) for num in result]"}
{"task_id": 398, "completion_id": 7, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(i, 4) for i in result]"}
{"task_id": 398, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef elu(x: List[float], alpha: float=0.1, derivative: bool=False) -> List[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        mask = x >= 0\n        return [np.round(i, 4) for i in np.where(mask, 1, elu(x, alpha) + alpha)]\n    else:\n        return [np.round(i, 4) * alpha if i < 0 else np.round(i, 4) for i in x]"}
{"task_id": 398, "completion_id": 9, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if not derivative:\n        result = [float(np.round(i if i >= 0 else alpha * (np.exp(i) - 1), 4)) for i in x]\n    else:\n        elu = [float(np.round(i if i >= 0 else alpha * (np.exp(i) - 1), 4)) for i in x]\n        result = [float(np.round(1 if i >= 0 else elu[j] + alpha, 4)) for (j, i) in enumerate(x)]\n    return result"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def collect_stats(lst):\n        tuple_lst = any((isinstance(i, (list, tuple, np.ndarray)) for i in lst))\n        multidim_lst = any((isinstance(i, (list, tuple, np.ndarray)) and len(i) > 1 for i in lst))\n        continuous_lst = any((isinstance(i, float) and i != int(i) for i in lst)) or any((isinstance(i, (list, tuple, np.ndarray)) and any((isinstance(j, float) and j != int(j) for j in i)) for i in lst))\n        if isinstance(lst[0], (list, tuple, np.ndarray)):\n            dim = len(lst[0])\n        else:\n            dim = 1\n        ids = [sorted(list(set((i if isinstance(i, (int, float)) else j for i in lst for j in i)))) if isinstance(lst[0], (list, tuple, np.ndarray)) else sorted(list(set((i if isinstance(i, (int, float)) else j for j in i for i in lst))))]\n        n_per_dim = [len(dim_ids) for dim_ids in ids]\n        return (tuple_lst, multidim_lst, continuous_lst, n_per_dim, dim, ids)\n    (action_tuple, action_multidim, action_continuous, action_n_per_dim, action_dim, action_ids) = collect_stats(actions)\n    (obs_tuple, obs_multidim, obs_continuous, obs_n_per_dim, obs_dim, obs_ids) = collect_stats(observations)\n    return {'tuple_actions': action_tuple, 'tuple_observations': obs_tuple, 'multidim_actions': action_multidim, 'multidim_observations': obs_multidim, 'continuous_actions': action_continuous, 'continuous_observations': obs_continuous, 'n_actions_per_dim': action_n_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': obs_n_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 411, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Union\ndef env_stats(actions: List[Union[int, float, tuple]], observations: List[Union[int, float, tuple]]) -> dict:\n\n    def flatten(lst):\n        for el in lst:\n            if isinstance(el, tuple):\n                yield from flatten(el)\n            else:\n                yield el\n\n    def get_ids_and_multidim_stats(data):\n        multi_dim = any((isinstance(x, tuple) for x in data))\n        ids = [list(set(flatten(x)) if isinstance(x, tuple) else set([x])) for x in data]\n        dim = len(ids)\n        continuous = any((isinstance(x, float) and (not x.is_integer()) for x in flatten(data)))\n        n_per_dim = [len(x) for x in ids]\n        return (multi_dim, ids, dim, continuous, n_per_dim)\n    (action_multi_dim, action_ids, action_dim, action_continuous, n_actions_per_dim) = get_ids_and_multidim_stats(actions)\n    (obs_multi_dim, obs_ids, obs_dim, obs_continuous, n_obs_per_dim) = get_ids_and_multidim_stats(observations)\n    return {'tuple_actions': any((isinstance(x, tuple) for x in actions)), 'tuple_observations': any((isinstance(x, tuple) for x in observations)), 'multidim_actions': action_multi_dim, 'multidim_observations': obs_multi_dim, 'continuous_actions': action_continuous, 'continuous_observations': obs_continuous, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 2, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def get_dim(data):\n        first = data[0]\n        is_tuple = isinstance(first, (tuple, list, np.ndarray))\n        dim = len(first) if is_tuple else 1\n        return (is_tuple, dim)\n\n    def get_type(data):\n        unique_values = set().union(*data)\n        is_continuous = any((isinstance(value, float) for value in unique_values))\n        is_discrete = all((isinstance(value, int) for value in unique_values))\n        return (is_discrete, is_continuous)\n\n    def get_unique(data):\n        if not data:\n            return []\n        dimensional_data = list(zip(*data))\n        return [sorted(list(set(dim_data))) for dim_data in dimensional_data]\n    (action_tuple, action_dim) = get_dim(actions)\n    (obs_tuple, obs_dim) = get_dim(observations)\n    (action_discrete, action_continuous) = get_type(actions)\n    (obs_discrete, obs_continuous) = get_type(observations)\n    action_unique = get_unique(actions)\n    obs_unique = get_unique(observations)\n    return {'tuple_actions': action_tuple, 'tuple_observations': obs_tuple, 'multidim_actions': action_dim > 1, 'multidim_observations': obs_dim > 1, 'continuous_actions': action_continuous, 'continuous_observations': obs_continuous, 'n_actions_per_dim': [len(dim) for dim in action_unique], 'action_dim': action_dim, 'n_obs_per_dim': [len(dim) for dim in obs_unique], 'obs_dim': obs_dim, 'action_ids': action_unique, 'obs_ids': obs_unique}"}
{"task_id": 411, "completion_id": 3, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    stats = {}\n    stats['tuple_actions'] = any((isinstance(act, tuple) for act in actions))\n    stats['tuple_observations'] = any((isinstance(obs, tuple) for obs in observations))\n    stats['multidim_actions'] = any((isinstance(act, (list, tuple, np.ndarray)) and len(np.shape(act)) > 1 for act in actions))\n    stats['multidim_observations'] = any((isinstance(obs, (list, tuple, np.ndarray)) and len(np.shape(obs)) > 1 for obs in observations))\n    stats['continuous_actions'] = any((isinstance(act, float) and (not act.is_integer()) for act in actions))\n    stats['continuous_observations'] = any((isinstance(obs, float) and (not obs.is_integer()) for obs in observations))\n    stats['n_actions_per_dim'] = [len(set(dim)) for dim in zip(*actions)]\n    stats['action_dim'] = len(actions[0]) if not stats['tuple_actions'] else len(actions[0][0])\n    stats['action_ids'] = [list(set(dim)) for dim in zip(*actions)]\n    stats['n_obs_per_dim'] = [len(set(dim)) for dim in zip(*observations)]\n    stats['obs_dim'] = len(observations[0]) if not stats['tuple_observations'] else len(observations[0][0])\n    stats['obs_ids'] = [list(set(dim)) for dim in zip(*observations)]\n    return stats"}
{"task_id": 411, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Union\ndef env_stats(actions: List[Union[int, float, List, Tuple]], observations: List[Union[int, float, List, Tuple]]) -> dict:\n    tuple_actions = any((isinstance(a, (list, tuple, np.ndarray)) for a in actions))\n    multidim_actions = bool(actions) and isinstance(actions[0], (list, tuple, np.ndarray))\n    continuous_actions = any((isinstance(v, float) and (not v.is_integer()) for a in actions for v in np.array(a).flat))\n    action_dim = len(actions[0]) if multidim_actions else 1\n    action_ids = [list(np.unique(np.array(a).flat)) if multidim_actions else [a] for a in actions]\n    n_actions_per_dim = [len(ids) for ids in action_ids]\n    tuple_observations = any((isinstance(o, (list, tuple, np.ndarray)) for o in observations))\n    multidim_observations = bool(observations) and isinstance(observations[0], (list, tuple, np.ndarray))\n    continuous_observations = any((isinstance(v, float) and (not v.is_integer()) for o in observations for v in np.array(o).flat))\n    obs_dim = len(observations[0]) if multidim_observations else 1\n    obs_ids = [list(np.unique(np.array(o).flat)) if multidim_observations else [o] for o in observations]\n    n_obs_per_dim = [len(ids) for ids in obs_ids]\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 411, "completion_id": 5, "solution": "def env_stats(actions: list, observations: list) -> dict:\n\n    def get_stats(input_list):\n        tuple_flag = any((isinstance(i, (list, tuple, np.ndarray)) for i in input_list))\n        multidim_flag = tuple_flag and any((isinstance(i, (list, tuple, np.ndarray)) and len(i) > 1 for i in input_list))\n        continuous_flag = any((isinstance(j, (float, np.float32, np.float64)) for i in input_list for j in i))\n        flattened_list = [j for i in input_list for j in (i if isinstance(i, (list, tuple, np.ndarray)) else [i])]\n        n_per_dim = [len(set((i if isinstance(i, (list, tuple, np.ndarray)) else [i] for i in (j for j in (i if isinstance(i, (list, tuple, np.ndarray)) else [i]))))) for i in zip(*[[j] if not isinstance(j, (list, tuple, np.ndarray)) else j for j in flattened_list])]\n        dim = len(n_per_dim)\n        ids = [[j for i in (j for j in (i if isinstance(i, (list, tuple, np.ndarray)) else [i])) for j in sorted(set(i))] for i in zip(*[[j] if not isinstance(j, (list, tuple, np.ndarray)) else j for j in flattened_list])]\n        return (tuple_flag, multidim_flag, continuous_flag, n_per_dim, dim, ids)\n    (actions_tuple, actions_multidim, actions_continuous, actions_per_dim, actions_dim, actions_ids) = get_stats(actions)\n    (observations_tuple, observations_multidim, observations_continuous, observations_per_dim, observations_dim, observations_ids) = get_stats(observations)\n    return {'tuple_actions': actions_tuple, 'multidim_actions': actions_multidim, 'continuous_actions': actions_continuous, 'n_actions_per_dim': actions_per_dim, 'action_dim': actions_dim, 'action_ids': actions_ids, 'tuple_observations': observations_tuple, 'multidim_observations': observations_multidim, 'continuous_observations': observations_continuous, 'n_obs_per_dim': observations_per_dim, 'obs_dim': observations_dim, 'obs_ids': observations_ids}"}
{"task_id": 411, "completion_id": 6, "solution": "import numpy as np\nfrom collections import defaultdict\ndef env_stats(actions: list, observations: list) -> dict:\n\n    def calculate_stats(data):\n        data_collection = defaultdict(set)\n        discrete = False\n        multi_dim = False\n        for datum in data:\n            if isinstance(datum, (list, tuple, np.ndarray)):\n                multi_dim = True\n                for dim_datum in flatten(datum):\n                    data_collection[datum_dimension(datum)].add(dim_datum)\n                    if not isinstance(dim_datum, int):\n                        if isinstance(dim_datum, int) or (isinstance(dim_datum, float) and dim_datum.is_integer()):\n                            discrete = True\n            else:\n                data_collection[0].add(datum)\n                if isinstance(dim_datum, float) and (not dim_datum.is_integer()):\n                    discrete = True\n        return (data_collection, discrete, multi_dim)\n\n    def flatten(lis):\n        for item in lis:\n            if isinstance(item, Iterable) and (not isinstance(item, (str, bytes))):\n                for x in flatten(item):\n                    yield x\n            else:\n                yield item\n\n    def datum_dimension(datum):\n        if isinstance(datum, (list, tuple, np.ndarray)):\n            dimensions = [datum_dimension(x) for x in datum]\n            return max(dimensions) + 1\n        else:\n            return 0\n    (actions_data, not_int_actions, tuple_actions) = calculate_stats(actions)\n    (observations_data, not_int_observations, tuple_observations) = calculate_stats(observations)\n    action_ids = sorted((list(actions_data[i]) for i in sorted(actions_data.keys())))\n    obs_ids = sorted((list(observations_data[i]) for i in sorted(observations_data.keys())))\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': any((len(x) > 1 for x in action_ids)), 'multidim_observations': any((len(x) > 1 for x in obs_ids)), 'continuous_actions': not_int_actions, 'continuous_observations': not_int_observations, 'n_actions_per_dim': [len(x) for x in action_ids], 'action_dim': len(action_ids), 'n_obs_per_dim': [len(x) for x in obs_ids], 'obs_dim': len(obs_ids), 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 411, "completion_id": 7, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n\n    def collect_stats(lst):\n        lst = map(lambda x: [x] if np.isscalar(x) else list(x), lst)\n        uni_lst = [set(x) for x in zip(*lst)]\n        return {'tuple': any((len(x) > 1 for x in lst)), 'multidim': all((len(x) > 1 for x in lst)), 'continuous': any((isinstance(y, float) for x in lst for y in x)), 'n_per_dim': [len(x) for x in uni_lst], 'dim': len(uni_lst), 'ids': [sorted(list(x)) for x in uni_lst]}\n    (action_stats, obs_stats) = map(collect_stats, (actions, observations))\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}"}
{"task_id": 411, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef flatten(lst):\n    return [item for sublist in lst for item in sublist]\ndef get_stats(lst):\n    total_len = len(lst)\n    dims = len(lst[0])\n    multidim = all((isinstance(item, (list, tuple)) for item in lst))\n    cont = any((isinstance(item, list) or isinstance(item, tuple) for item in lst))\n    flat = flatten(lst)\n    u_values = flat\n    dim_counters = [Counter() for _ in range(dims)]\n    for item in lst:\n        for (idx, val) in enumerate(item):\n            dim_counters[idx][val] += 1\n    u_per_dim = [sorted(list(counter.keys())) for counter in dim_counters]\n    n_per_dim = [len(counter.keys()) for counter in dim_counters]\n    return (u_values, total_len, dims, multidim, cont, u_per_dim, n_per_dim)\ndef env_stats(actions: list, observations: list) -> dict:\n    (actions_u_values, actions_total_len, action_dims, action_multidim, action_cont, action_u_per_dim, action_n_per_dim) = get_stats(actions)\n    (observations_u_values, observations_total_len, obs_dims, obs_multidim, obs_cont, obs_u_per_dim, obs_n_per_dim) = get_stats(observations)\n    stats = {'tuple_actions': action_cont, 'tuple_observations': obs_cont, 'multidim_actions': action_multidim, 'multidim_observations': obs_multidim, 'continuous_actions': any((isinstance(value, float) for value in actions_u_values)), 'continuous_observations': any((isinstance(value, float) for value in observations_u_values)), 'n_actions_per_dim': action_n_per_dim, 'action_dim': action_dims, 'n_obs_per_dim': obs_n_per_dim, 'obs_dim': obs_dims, 'action_ids': action_u_per_dim, 'obs_ids': obs_u_per_dim}\n    return stats\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 9, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n\n    def unique_vals(lst):\n        flattened = [item for sublist in lst for item in sublist]\n        return sorted(set(flattened))\n\n    def is_tuple(lst):\n        return any((isinstance(i, (tuple, list, np.ndarray)) for i in lst))\n\n    def is_multidim(lst):\n        return any((isinstance(i, (tuple, list, np.ndarray)) and len(i) > 1 for i in lst))\n\n    def is_continuous(lst):\n        flattened = [item for sublist in lst for item in sublist]\n        return any((isinstance(i, float) and (not i.is_integer()) for i in flattened))\n\n    def dims(lst):\n        return len(lst[0]) if isinstance(lst[0], (tuple, list, np.ndarray)) else 1\n\n    def values_per_dim(lst):\n        return [len(set(np.array(lst)[:, i])) for i in range(dims(lst))]\n    action_ids = unique_vals(actions) if is_tuple(actions) else sorted(set(actions))\n    obs_ids = unique_vals(observations) if is_tuple(observations) else sorted(set(observations))\n    return {'tuple_actions': is_tuple(actions), 'tuple_observations': is_tuple(observations), 'multidim_actions': is_multidim(actions), 'multidim_observations': is_multidim(observations), 'continuous_actions': is_continuous(actions), 'continuous_observations': is_continuous(observations), 'n_actions_per_dim': values_per_dim(actions), 'action_dim': dims(actions), 'n_obs_per_dim': values_per_dim(observations), 'obs_dim': dims(observations), 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature_idx=None, threshold=None, left=None, right=None, value=None):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\nclass GBDT:\n\n    def __init__(self, n_estimators=10, learning_rate=0.1, max_depth=3):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.max_depth = max_depth\n\n    def fit(self, X, y):\n        self.trees = []\n        initial_prediction = np.full(y.shape, np.mean(y))\n        residuals = y - initial_prediction\n        for _ in range(self.n_estimators):\n            tree = self._build_tree(X, residuals)\n            self.trees.append(tree)\n            prediction = self._predict_tree(X, tree)\n            residuals = residuals - self.learning_rate * prediction\n\n    def _build_tree(self, X, y, depth=0):\n        num_samples_per_step = 2 ** (depth + 1)\n        if num_samples_per_step > len(y) or depth == self.max_depth:\n            leaf_value = np.mean(y)\n            return Node(value=leaf_value)\n        feature_idx = depth % X.shape[1]\n        thresholds = np.unique(X[:, feature_idx])\n        best_gain = -np.inf\n        for threshold in thresholds:\n            left_idx = X[:, feature_idx] < threshold\n            right_idx = X[:, feature_idx] >= threshold\n            if left_idx.sum() == 0 or right_idx.sum() == 0:\n                continue\n            gain = self._information_gain(y[left_idx], y[right_idx])\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_idx = feature_idx\n                best_threshold = threshold\n                best_left_idx = left_idx\n                best_right_idx = right_idx\n        left = self._build_tree(X[best_left_idx], y[best_left_idx], depth + 1)\n        right = self._build_tree(X[best_right_idx], y[best_right_idx], depth + 1)\n        return Node(best_feature_idx, best_threshold, left, right)\n\n    def _information_gain(self, y1, y2):\n        total = np.concatenate([y1, y2])\n        return self._gini_index(total) - (len(y1) * self._gini_index(y1) + len(y2) * self._gini_index(y2)) / len(total)\n\n    def _gini_index(self, y):\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / y.shape[0]\n        return 1 - np.sum(probabilities ** 2)\n\n    def _predict_tree(self, X, tree):\n        if tree.value is not None:\n            return np.full(X.shape[0], tree.value)\n        if X[tree.feature_idx, :] < tree.threshold:\n            return self._predict_tree(X, tree.left)\n        else:\n            return self._predict_tree(X, tree.right)\n\n    def predict(self, X):\n        y_pred = np.full(X.shape[0], np.mean(self.initial_prediction))\n        for tree in self.trees:\n            y_pred = y_pred + self.learning_rate * self._predict_tree(X, tree)\n        return y_pred\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    model = GBDT(n_estimators=n_estimators, learning_rate=learning_rate, max_depth=max_depth)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    return [round(y, 4) for y in y_pred]"}
{"task_id": 413, "completion_id": 1, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\nclass GBDT:\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n        self.tree = None\n\n    def _split(self, X, y, feature_index, threshold):\n        left_indexes = np.where(X[:, feature_index] <= threshold)[0]\n        right_indexes = np.where(X[:, feature_index] > threshold)[0]\n        return (left_indexes, right_indexes)\n\n    def _mean_squared_error(self, y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def _best_split(self, X, y):\n        (best_idx, best_thr) = (None, None)\n        best_mse = float('inf')\n        for feature_index in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_index])[:-1]\n            for threshold in thresholds:\n                (left_indexes, right_indexes) = self._split(X, y, feature_index, threshold)\n                if len(left_indexes) == 0 or len(right_indexes) == 0:\n                    continue\n                left_y = y[left_indexes]\n                right_y = y[right_indexes]\n                left_mse = self._mean_squared_error(left_y, np.mean(left_y))\n                right_mse = self._mean_squared_error(right_y, np.mean(right_y))\n                mse = left_mse + right_mse\n                if mse < best_mse:\n                    best_mse = mse\n                    best_idx = feature_index\n                    best_thr = threshold\n        return (best_idx, best_thr)\n\n    def _build_tree(self, X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        n_labels = len(np.unique(y))\n        if depth >= self.max_depth or n_labels == 1 or n_samples < 2:\n            leaf_value = np.mean(y)\n            return Node(value=leaf_value)\n        (feature_idx, threshold) = self._best_split(X, y)\n        if feature_idx is None:\n            leaf_value = np.mean(y)\n            return Node(value=leaf_value)\n        (left_indexes, right_indexes) = self._split(X, y, feature_idx, threshold)\n        left = self._build_tree(X[left_indexes], y[left_indexes], depth + 1)\n        right = self._build_tree(X[right_indexes], y[right_indexes], depth + 1)\n        return Node(feature_idx, threshold, left, right)\n\n    def fit(self, X, y):\n        self.tree = self._build_tree(X, y)\n\n    def _predict_row(self, x, tree):\n        if tree.value is not None:\n            return tree.value\n        if x[tree.feature] <= tree.threshold:\n            return self._predict_row(x, tree.left)\n        else:\n            return self._predict_row(x, tree.right)\n\n    def predict(self, X):\n        return [self._predict_row(x, self.tree) for x in X]\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3):\n    y_pred = np.full(y_train.shape, np.mean(y_train))\n    model = GBDT(max_depth)\n    for _ in range(n_estimators):\n        residuals = y_pred - y_train\n        model.fit(X_train, residuals)\n        y_pred += -learning_rate * np.array(model.predict(X_train))\n    final_preds = model.predict(X_test)\n    return [round(pred, 4) for pred in final_preds]"}
{"task_id": 413, "completion_id": 2, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n\n    def MSE(y):\n        return np.mean((y - np.mean(y)) ** 2)\n\n    def split_feature(X, y):\n        (best_feature, best_split, min_error) = (None, None, float('inf'))\n        for feature in range(X.shape[1]):\n            feature_values = np.sort(np.unique(X[:, feature]))\n            split_candidates = (feature_values[1:] + feature_values[:-1]) / 2\n            for split in split_candidates:\n                err1 = MSE(y[X[:, feature] <= split])\n                err2 = MSE(y[X[:, feature] > split])\n                error = err1 + err2\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature\n                    best_split = split\n        return (best_feature, best_split, min_error)\n\n    def split_tree(X, y, depth=0):\n        (best_feature, best_split, min_error) = split_feature(X, y)\n        if min_error == float('inf') or depth == max_depth:\n            return (None, None, np.mean(y))\n        else:\n            X_left = X[X[:, best_feature] <= best_split]\n            y_left = y[X[:, best_feature] <= best_split]\n            X_right = X[X[:, best_feature] > best_split]\n            y_right = y[X[:, best_feature] > best_split]\n            return (best_feature, best_split, {'left': split_tree(X_left, y_left, depth + 1), 'right': split_tree(X_right, y_right, depth + 1)})\n\n    def predict_tree(tree, x):\n        (feature, split, subtrees) = tree\n        if feature is None:\n            return split\n        elif x[feature] <= split:\n            return predict_tree(subtrees['left'], x)\n        else:\n            return predict_tree(subtrees['right'], x)\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    predictions = np.zeros(len(y_test))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = split_tree(X_train, residuals)\n        trees.append(tree)\n        y_pred += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n    for (i, x) in enumerate(X_test):\n        predictions[i] = np.mean(y_pred) + learning_rate * np.sum([predict_tree(tree, x) for tree in trees])\n    return np.round(predictions, 4).tolist()"}
{"task_id": 413, "completion_id": 3, "solution": "import numpy as np\ndef mse(y_true, y_prediction):\n    return np.mean(np.square(y_true - y_prediction))\ndef build_tree(X, grad, indices, depth=0):\n    indices = list(indices)\n    if depth == max_depth or len(indices) < 2:\n        return {'prediction': np.mean(grad[indices]).tolist()}\n    (j, score, splits) = (None, float('inf'), None)\n    for j_ in range(X.shape[1]):\n        arg_sort = np.argsort(X[indices, j_])\n        (X_sorted, grad_sorted) = (X[indices, j_][arg_sort], grad[indices][arg_sort])\n        (score_c, split_candidates) = (None, None)\n        for i in range(1, len(arg_sort)):\n            (left, right) = (arg_sort[:i], arg_sort[i:])\n            score_c_new = mse(grad_sorted[left], np.mean(grad_sorted[left])) + mse(grad_sorted[right], np.mean(grad_sorted[right]))\n            if score_c_new < score_c or score_c is None:\n                (score_c, split_candidates) = (score_c_new, [np.mean([X_sorted[left], X_sorted[right]])])\n            elif score_c_new == score_c:\n                split_candidates.append(np.mean([X_sorted[left], X_sorted[right]]))\n        if score_c is not None and score_c < score:\n            (score, j, splits) = (score_c, j_, split_candidates)\n    return {'feature': j, 'split': np.mean([split for split in set(splits) | {-np.inf, np.inf}]), 'left': build_tree(X, grad, left, depth=depth + 1), 'right': build_tree(X, grad, right, depth=depth + 1)}\ndef predict_sample(sample, tree):\n    node = tree\n    while 'feature' in node:\n        if sample[node['feature']] < node['split'] and 'left' in node:\n            node = node['left']\n        elif 'right' in node:\n            node = node['right']\n    return node['prediction']\ndef gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3):\n    F0 = np.full(y_train.shape, np.mean(y_train))\n    y_pred = np.full(y_train.shape, np.mean(y_train))\n    trees = []\n    global max_depth\n    max_depth = max_depth\n    for i in range(n_estimators):\n        residual = y_train - y_pred\n        tree = build_tree(X_train, residual, np.array(range(X_train.shape[0])))\n        trees.append(tree)\n        y_pred += [predict_sample(sample, tree) for sample in X_train]\n    prediction = []\n    for sample in X_test:\n        prediction.append(np.mean([predict_sample(sample, tree) for tree in trees]))\n    return [round(p, 4) for p in prediction]"}
{"task_id": 413, "completion_id": 4, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\ndef mse(y):\n    return np.mean((y - np.mean(y)) ** 2)\ndef split_tree(X, y, depth=0):\n    (m, n) = X.shape\n    (best_feature, best_threshold, best_mse) = (None, None, np.inf)\n    for feature in range(n):\n        feature_values = np.sort(np.unique(X[:, feature]))\n        points_between_values = (feature_values[:-1] + feature_values[1:]) / 2\n        for threshold in points_between_values:\n            left_indices = X[:, feature] < threshold\n            right_indices = X[:, feature] >= threshold\n            left_mse = mse(y[left_indices])\n            right_mse = mse(y[right_indices])\n            total_mse = (left_mse * np.sum(left_indices) + right_mse * np.sum(right_indices)) / m\n            if total_mse < best_mse:\n                best_mse = total_mse\n                best_feature = feature\n                best_threshold = threshold\n    left_indices = X[:, best_feature] < best_threshold\n    right_indices = X[:, best_feature] >= best_threshold\n    left = split_tree(X[left_indices], y[left_indices], depth + 1) if depth < max_depth else None\n    right = split_tree(X[right_indices], y[right_indices], depth + 1) if depth < max_depth else None\n    return Node(best_feature, best_threshold, left, right, value=np.mean(y))\ndef regression_predict(X, tree):\n    if tree.value is not None:\n        return tree.value\n    if X[tree.feature] < tree.threshold:\n        return regression_predict(X, tree.left)\n    else:\n        return regression_predict(X, tree.right)\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    global max_depth\n    max_depth = max_depth\n    residual = y_train.copy()\n    initial_value = np.full(len(y_train), np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        tree = split_tree(X_train, residual)\n        prediction = np.array([regression_predict(sample, tree) for sample in X_train])\n        residual = residual - learning_rate * prediction\n        trees.append(tree)\n    predictions = initial_value + learning_rate * np.sum(np.array([[regression_predict(sample, tree) for tree in trees] for sample in X_test]), axis=1)\n    return [round(pred, 4) for pred in predictions.tolist()]"}
{"task_id": 413, "completion_id": 5, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_feature=None, split_value=None, left=None, right=None, value=None):\n        self.split_feature = split_feature\n        self.split_value = split_value\n        self.left = left\n        self.right = right\n        self.value = value\ndef build_tree(X, grad, hessian, depth=0):\n    if depth == max_depth or len(grad) == 0:\n        return Node(value=np.mean(grad))\n    (feature_best, threshold_best, min_loss) = (None, None, np.inf)\n    for feature in range(X.shape[1]):\n        order = np.argsort(X[:, feature])\n        (X_sorted, grad_sorted, hessian_sorted) = (X[order, feature], grad[order], hessian[order])\n        (score_left, score_right) = (np.zeros(len(grad)), np.zeros(len(grad)))\n        score_left[1:] = grad_sorted[1:] * hessian_sorted[1:]\n        score_right[1:] = score_right[:-1] - score_left[:-1] - grad_sorted[1:] * hessian_sorted[1:]\n        for i in range(1, len(grad)):\n            loss = score_left[i - 1:i + 1].sum() ** 2 / (hessian_sorted[:i + 1].sum() + score_right[i:].sum() ** 2)\n            if loss < min_loss:\n                (feature_best, threshold_best, min_loss) = (feature, X_sorted[i], loss)\n    (X_left, X_right) = (X[X[:, feature_best] <= threshold_best], X[X[:, feature_best] > threshold_best])\n    (grad_left, grad_right) = (grad[X[:, feature_best] <= threshold_best], grad[X[:, feature_best] > threshold_best])\n    (hessian_left, hessian_right) = (hessian[X[:, feature_best] <= threshold_best], hessian[X[:, feature_best] > threshold_best])\n    return Node(split_feature=feature_best, split_value=threshold_best, left=build_tree(X_left, grad_left, hessian_left, depth + 1), right=build_tree(X_right, grad_right, hessian_right, depth + 1))\ndef tree_prediction(X, tree):\n    if tree.value is not None:\n        return np.full(len(X), tree.value)\n    else:\n        X_left = X[:, tree.split_feature] <= tree.split_value\n        return np.where(X_left, tree_prediction(X[X_left], tree.left), tree_prediction(X[~X_left], tree.right))\ndef gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3):\n    global max_depth\n    max_depth = max_depth\n    pred = np.full(len(y_train), np.mean(y_train))\n    for i in range(n_estimators):\n        residuals = y_train - pred\n        trees = build_tree(X_train, residuals, np.ones(len(residuals)))\n        pred += learning_rate * tree_prediction(X_train, trees)\n    return list(map(lambda x: round(x, 4), tree_prediction(X_test, trees)))"}
{"task_id": 413, "completion_id": 6, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def decision_tree_fit(X, y, depth):\n        if depth == 0 or len(y) <= 1:\n            return np.mean(y)\n        else:\n            (best_feature, best_value, best_score, left_indices, right_indices) = binary_split(X, y)\n            if best_feature is None:\n                return np.mean(y)\n            left = decision_tree_fit(X[left_indices], y[left_indices], depth - 1)\n            right = decision_tree_fit(X[right_indices], y[right_indices], depth - 1)\n            return lambda x: left(x) if x[best_feature] <= best_value else right(x)\n\n    def binary_split(X, y):\n        (best_feature, best_value, best_score, left_indices, right_indices) = (None, None, np.inf, None, None)\n        for feature in range(X.shape[1]):\n            values = np.sort(np.unique(X[:, feature]))\n            if len(values) > 1:\n                for index in range(len(values) - 1):\n                    value = (values[index] + values[index + 1]) / 2\n                    left_indices = X[:, feature] <= value\n                    right_indices = X[:, feature] > value\n                    if np.sum(left_indices) > 0 and np.sum(right_indices) > 0:\n                        score = np.sum((y[left_indices] - np.mean(y[left_indices])) ** 2) + np.sum((y[right_indices] - np.mean(y[right_indices])) ** 2)\n                        if score < best_score:\n                            best_score = score\n                            best_feature = feature\n                            best_value = value\n        return (best_feature, best_value, best_score, left_indices, right_indices)\n    predictions = np.mean(y_train)\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = decision_tree_fit(X_train, residuals, max_depth)\n        predictions += learning_rate * np.array([tree(x) for x in X_train])\n    return [round(sum((tree(x) for tree in predictions for x in X_test)), 4)]"}
{"task_id": 413, "completion_id": 7, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    F0 = np.full(shape=y_train.shape, fill_value=np.mean(y_train, axis=0))\n    Fm = F0.copy()\n    for _ in range(n_estimators):\n        residual = y_train - Fm\n        tree = DecisionTreeRegressor(max_depth=max_depth, random_state=0)\n        tree.fit(X_train, residual)\n        Fm += learning_rate * tree.predict(X_train)\n    predictions = []\n    for x_test in X_test:\n        x_test = np.array([x_test])\n        prediction = Fm[0]\n        tree_index = 0\n        while tree_index < n_estimators:\n            x_test = np.array([x_test])\n            prediction += learning_rate * tree.predict(x_test)[0]\n            tree_index += 1\n        predictions.append(np.round(prediction, 4))\n    return predictions"}
{"task_id": 413, "completion_id": 8, "solution": "from typing import Tuple\ndef mse(y):\n    return np.mean((y - np.mean(y)) ** 2)\ndef split_data(X, y, feature, split_point):\n    left = np.where(X[:, feature] < split_point)\n    right = np.where(X[:, feature] >= split_point)\n    return ((X[left], y[left]), (X[right], y[right]))\ndef best_split(X, y):\n    best_mse = mse(y)\n    split_feature = None\n    split_point = None\n    for feature in range(X.shape[1]):\n        feature_values = np.unique(X[:, feature])\n        if len(feature_values) == 1:\n            continue\n        for value in feature_values[:-1]:\n            groups = split_data(X, y, feature, value)\n            prop_left = len(groups[0][1]) / len(y)\n            prop_right = len(groups[1][1]) / len(y)\n            mse_value = prop_left * mse(groups[0][1]) + prop_right * mse(groups[1][1])\n            if mse_value < best_mse:\n                best_mse = mse_value\n                split_feature = feature\n                split_point = value\n    return (split_feature, split_point)\ndef split(node, max_depth, min_size, depth):\n    (left, right) = node['groups']\n    del node['groups']\n    if not isinstance(left, np.ndarray) or not isinstance(right, np.ndarray):\n        node['left'] = node['right'] = get_terminal(np.append(left[:, -1], right[:, -1]))\n        return\n    if depth >= max_depth:\n        (node['left'], node['right']) = (get_terminal(left), get_terminal(right))\n        return\n    if len(left) <= min_size:\n        node['left'] = get_terminal(left)\n    else:\n        node['left'] = get_split(left)\n        split(node['left'], max_depth, min_size, depth + 1)\n    if len(right) <= min_size:\n        node['right'] = get_terminal(right)\n    else:\n        node['right'] = get_split(right)\n        split(node['right'], max_depth, min_size, depth + 1)\ndef get_terminal(group):\n    return np.mean(group[:, -1])\ndef get_split(group):\n    (feature, value) = best_split(group[:, :-1], group[:, -1])\n    groups = split_data(group[:, :-1], group[:, -1], feature, value)\n    return {'index': feature, 'value': value, 'groups': groups}\ndef gb_predict(X, tree):\n    if X[tree['index']] < tree['value']:\n        if isinstance(tree['left'], dict):\n            return gb_predict(X, tree['left'])\n        else:\n            return tree['left']\n    elif isinstance(tree['right'], dict):\n        return gb_predict(X, tree['right'])\n    else:\n        return tree['right']\ndef train_tree(X: np.ndarray, y: np.ndarray, max_depth: int, min_size: int) -> dict:\n    root = get_split(np.c_[X, y])\n    split(root, max_depth, min_size, 1)\n    return root\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    prediction = np.mean(y_train)\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - prediction\n        tree = train_tree(X_train, residuals, max_depth, 1)\n        output = np.array([gb_predict(sample, tree) for sample in X_train])\n        prediction += learning_rate * output\n        trees.append(tree)\n    final_predictions = np.array([gb_predict(sample, tree) for sample in X_test for tree in trees])\n    return np.round(final_predictions, 4).tolist()"}
{"task_id": 413, "completion_id": 9, "solution": "import numpy as np\nclass Node(object):\n\n    def __init__(self, split_feature=None, split_val=None, left=None, right=None, val=None):\n        self.split_feature = split_feature\n        self.split_val = split_val\n        self.left = left\n        self.right = right\n        self.val = val\nclass DecisionTreeRegressor:\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n\n    def fit(self, X, y):\n        self.tree = self._grow_tree(X, y)\n        return self\n\n    def predict(self, X):\n        return np.array([self._predict(inputs) for inputs in X])\n\n    def _grow_tree(self, X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        n_labels = len(np.unique(y))\n        if depth >= self.max_depth or n_labels == 1:\n            return Node(val=np.mean(y))\n        feature_idxs = np.random.choice(n_features, int(np.sqrt(n_features)))\n        (best_feature, best_value, min_mse) = self._best_split(X, y, feature_idxs)\n        if best_feature is None:\n            return Node(val=np.mean(y))\n        (left_idxs, right_idxs) = self._split(X[:, best_feature], best_value)\n        left = self._grow_tree(X[left_idxs, :], y[left_idxs], depth + 1)\n        right = self._grow_tree(X[right_idxs, :], y[right_idxs], depth + 1)\n        return Node(best_feature, best_value, left, right)\n\n    def _best_split(self, X, y, feature_idxs):\n        (best_feature, best_value, min_mse) = (None, None, np.inf)\n        for i in feature_idxs:\n            vals = np.unique(X[:, i])\n            for v in vals:\n                (left_idxs, right_idxs) = self._split(X[:, i], v)\n                if len(left_idxs) == 0 or len(right_idxs) == 0:\n                    continue\n                mse = self._mse(y[left_idxs], np.mean(y[left_idxs])) + self._mse(y[right_idxs], np.mean(y[right_idxs]))\n                if mse < min_mse:\n                    min_mse = mse\n                    best_feature = i\n                    best_value = v\n        return (best_feature, best_value, min_mse)\n\n    def _mse(self, y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def _split(self, vals, val):\n        left_idxs = np.nonzero(vals <= val)[0]\n        right_idxs = np.nonzero(vals > val)[0]\n        return (left_idxs, right_idxs)\n\n    def _predict(self, inputs):\n        node = self.tree\n        while node.val is None:\n            if inputs[node.split_feature] <= node.split_val:\n                node = node.left\n            else:\n                node = node.right\n        return node.val\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    predictions = np.full(y_train.shape, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = DecisionTreeRegressor(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        predictions += learning_rate * tree.predict(X_train)\n    return list(map(lambda x: float(np.round(x, 4)), DecisionTreeRegressor(max_depth=max_depth).fit(X_train, predictions).predict(X_test)))"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function takes as input a set of data points X (an n_samples by n_features numpy array),\n    a mean vector, and a covariance matrix, and returns a Python list whose i-th element is the PDF value for X[i].\n    \"\"\"\n    X = np.atleast_2d(X)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = (2 * math.pi) ** (-n_features / 2) / math.sqrt(det_cov)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exp_arg = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_factor * math.exp(exp_arg)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculates the PDF value for a multivariate Gaussian distribution\n    \n    Parameters:\n    X (numpy.ndarray): Data points for which the PDF values must be evaluated\n    mean (numpy.ndarray): Mean vector of the distribution\n    cov (numpy.ndarray): Covariance matrix of shape (n_features, n_features)\n\n    Returns:\n    list: PDF values rounded to the nearest 4th decimal\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    X_minus_mean = X - mean\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    pdf_values = []\n    for i in range(n_samples):\n        exponent = -0.5 * X_minus_mean[i].dot(inv_cov).dot(X_minus_mean[i].T)\n        denominator = ((2 * np.pi) ** n_features * det_cov) ** 0.5\n        pdf_value = np.exp(exponent) / denominator\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the PDF value of a multivariate Gaussian (Normal) distribution.\n    \n    Parameters:\n    X (NumPy array): Data points for which the PDF values must be evaluated. \n                      If X is provided as a one-dimensional array it must be treated as (n_samples, 1).\n    mean (list): Mean vector of the distribution.\n    cov (2D list): Covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n                    \n    Returns:\n    list: List of PDF values for X[i] rounded to four decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    mean = np.atleast_2d(mean)\n    cov = np.atleast_2d(cov)\n    (n_samples, n_features) = X.shape\n    cov_det = np.linalg.det(cov)\n    const = 1 / (math.pow(2 * math.pi, n_features / 2) * math.sqrt(cov_det))\n    cov_inv = np.linalg.inv(cov)\n    pdf_values = []\n    for x in X:\n        x_mu = x - mean\n        result = math.exp(-0.5 * x_mu.dot(cov_inv).dot(x_mu.T))\n        pdf_values.append(round(const * result, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the probability density function of a given\n    multivariate Gaussian distribution for each data point in X.\n\n    Parameters:\n    X (np.array): numpy array of shape (n_samples, n_features) containing the\n                  data points for which the PDF values must be evaluated. If X\n                  is provided as a one-dimensional array, it is treated as\n                  (n_samples, 1).\n\n    mean (np.array): mean vector, length equals to n_features\n\n    cov (np.array): covariance matrix of shape (n_features, n_features), must be\n                    positive-definite (invertible)\n\n    Returns:\n    list: Python list whose i-th element is the PDF value for X[i], rounded to four\n    decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = np.reshape(X, (-1, X.shape[0]))\n    (n_samples, n_features) = X.shape\n    cofactor = np.linalg.inv(cov)\n    det = np.linalg.det(cov)\n    denominator = np.sqrt((2 * np.pi) ** n_features * det)\n    pdfs = []\n    for x in X:\n        exponent = np.dot(np.dot((x - mean).T, cofactor), x - mean)\n        exponent = -0.5 * exponent\n        pdf = np.exp(exponent) / denominator\n        pdfs.append(round(pdf, 4))\n    return pdfs"}
{"task_id": 416, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function computes the PDF of a multivariate Gaussian distribution.\n\n    Args:\n    X (numpy array): shape (n_samples, n_features) containing the data points for \n                      which the PDF values must be evaluated\n    mean (list): mean vector of the distribution (length n_features)\n    cov (numpy array): covariance matrix of shape (n_features, n_features), which \n                        must be positive-definite (invertible)\n\n    Returns:\n    A Python list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n    d = n_features\n    det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    pdf_values = []\n    for x in X:\n        x_minus_mu = x - mean\n        pdf_value = 1 / np.sqrt((2 * math.pi) ** d * det) * np.exp(-0.5 * np.dot(np.dot(x_minus_mu, cov_inv), x_minus_mu))\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 5, "solution": "import numpy as np\nfrom math import pi, exp, sqrt, pow\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Function to compute the multivariate Gaussian PDF of a given dataset.\n\n    Parameters:\n        X (numpy array): Input data points. 'Shape' must be (n_samples, n_features)\n        mean (numpy array): Mean vector. 'Shape' must be 1-dimensional, of same size as number of features (n_features)\n        cov (numpy array): Covariance matrix. 'Shape' must be (n_features, n_features), and should be positive-definite (invertible)\n\n    Returns:\n        A list of PDF values rounded to the nearest 4th decimal for each data point. \n    \"\"\"\n    n_features = len(mean)\n    det = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        dot_product = np.dot(diff, inv_cov)\n        exp_term = -0.5 * np.dot(dot_product, diff.T)\n        pdf = 1 / sqrt(pow(2 * pi, n_features) * det) * exp(exp_term)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n\n    Parameters:\n    X (numpy array): A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean (numpy array): The mean vector of the distribution (length n_features).\n    cov (numpy array): The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n    results (list): A Python list whose *i-th* element is the PDF value for *X[i]* rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = np.expand_dims(X, axis=1)\n    (n_samples, n_features) = X.shape\n    if mean.ndim == 1:\n        mean = np.expand_dims(mean, axis=0)\n    if cov.ndim == 1:\n        cov = np.expand_dims(cov, axis=0)\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    results = []\n    for i in range(n_samples):\n        x_mu = X[i] - mean\n        exponent = -0.5 * np.dot(x_mu, np.dot(inv_cov, x_mu.T))\n        denominator = math.pow(2 * math.pi, n_features / 2) * math.sqrt(det_cov)\n        pdf_value = np.exp(exponent) / denominator\n        results.append(round(pdf_value, 4))\n    return results"}
{"task_id": 416, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian PDF for a given dataset X, mean vector and covariance matrix.\n    \"\"\"\n    n_features = len(mean)\n    if len(X.shape) == 1:\n        X = X.reshape((-1, n_features))\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_minus_mean.T, inv_cov), x_minus_mean)\n        pdf_value = 1 / np.sqrt((2 * np.pi) ** n_features * det_cov) * np.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculates the probability density function for multivariate Gaussian distribution\n    Parameters:\n        X - Array of shape (n_samples, n_features) containing data points\n        mean - Mean vector of the distribution (length n_features)\n        cov - Covariance matrix of shape (n_features, n_features)\n\n    Returns:\n        List with every element rounded to the nearest 4th decimal. \n    \"\"\"\n    if len(X.shape) == 1:\n        X = X[np.newaxis, :]\n    (n_samples, n_features) = X.shape\n    mean = mean.reshape(1, n_features)\n    centered = X - mean\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    exponent = -0.5 * np.sum(centered @ cov_inv * centered, axis=1)\n    norm_factor = np.power(2 * np.pi, n_features / 2) * np.sqrt(cov_det)\n    pdf_values = np.exp(exponent) / norm_factor\n    return [round(value, 4) for value in pdf_values]"}
{"task_id": 416, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function evaluates the probability density function (PDF) of a multivariate Gaussian \n    (Normal) distribution without using any third-party libraries such as SciPy.\n\n    Parameters:\n    X (numpy array): The data points for which the PDF values must be evaluated. The shape is (n_samples, n_features)\n    mean (list): The mean vector of the distribution (length n_features)\n    cov (numpy array): The covariance matrix of shape (n_features, n_features). This matrix must be positive-definite (invertible).\n\n    Returns:\n    list: A list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    mean = np.array(mean)\n    n_features = mean.shape[0]\n    if len(X.shape) == 1:\n        X = np.expand_dims(X, axis=-1)\n    n_samples = X.shape[0]\n    determinant = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    result = []\n    for x in X:\n        argument = np.matmul(np.matmul((x - mean).T, inv_cov), x - mean)\n        pdf_value = 1 / math.sqrt((2 * math.pi) ** n_features * determinant) * math.exp(-0.5 * argument)\n        result.append(round(pdf_value, 4))\n    return result"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.linalg import inv\nfrom typing import List, Union\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: Union[float, np.ndarray]=0.0, sigma: float=1.0, V: Union[float, np.ndarray, None]=None, fit_intercept: bool=True) -> List[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n        X_new = np.concatenate((np.ones((X_new.shape[0], 1)), X_new), axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = sigma * sigma * V * np.eye(X.shape[1])\n    else:\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n    V_inv = inv(V)\n    mu_old = np.dot(V_inv, mu)\n    sigma_old = inv(inv(V) + np.dot(X.T, X))\n    mu_post = np.dot(sigma_old, np.dot(X.T, y) + np.dot(V_inv, mu))\n    preds = np.dot(X_new, mu_post)\n    return [round(val, 4) for val in preds.tolist()]"}
{"task_id": 419, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n        X_new = np.concatenate((np.ones((X_new.shape[0], 1)), X_new), axis=1)\n    (N, M) = X.shape\n    if V is None:\n        V = np.identity(M)\n    elif np.isscalar(V):\n        V = V * np.identity(M)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ mu_p\n    return np.round(y_new, 4).tolist()"}
{"task_id": 419, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    if isinstance(V, float) or isinstance(V, int):\n        V = np.diag([V] * X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    elif V is None:\n        V = np.eye(X.shape[1])\n    V_inv = np.linalg.inv(V)\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = [mu] * X.shape[1]\n    mu = np.array(mu)\n    mu_post = np.dot(np.linalg.inv(V_inv + np.dot(X.T, X)), np.dot(V_inv, mu) + np.dot(X.T, y))\n    y_new = np.dot(X_new, mu_post)\n    return [round(y, 4) for y in y_new]"}
{"task_id": 419, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    if not isinstance(mu, np.ndarray):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V *= np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    cov_posterior = np.linalg.inv(V_inv + 1 / sigma ** 2 * X.T @ X)\n    mu_posterior = cov_posterior @ (V_inv @ mu + 1 / sigma ** 2 * X.T @ y)\n    y_new = X_new @ mu_posterior\n    y_new = [round(y, 4) for y in y_new]\n    return y_new"}
{"task_id": 419, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V *= np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    if isinstance(mu, float):\n        mu = mu * np.ones(X.shape[1])\n    V_inv = np.linalg.inv(V)\n    mu_inv = np.linalg.inv(V.shape[0] * sigma ** 2 * np.eye(V.shape[0]) + X.T @ X)\n    beta_map = mu_inv @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ beta_map\n    return [round(i, 4) for i in y_new.tolist()]"}
{"task_id": 419, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.concatenate([X, np.ones((X.shape[0], 1))], axis=1)\n        X_new = np.concatenate([X_new, np.ones((X_new.shape[0], 1))], axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = V * np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = V * np.eye(X.shape[1])\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n    inv_V = np.linalg.inv(V)\n    posterior_cov = np.linalg.inv(inv_V + X.T @ X)\n    posterior_mean = posterior_cov @ (inv_V @ mu + X.T @ y)\n    prediction = X_new @ posterior_mean\n    return list(np.round(prediction, 4))"}
{"task_id": 419, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((N, 1)), X))\n        (N, M) = X.shape\n    if isinstance(mu, (float, int)):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(M)\n    V_inv = np.linalg.inv(V)\n    beta_posterior_cov = np.linalg.inv(V_inv + 1 / sigma ** 2 * X.T @ X)\n    beta_posterior_mean = beta_posterior_cov @ (V_inv @ mu + 1 / sigma ** 2 * X.T @ y)\n    if fit_intercept:\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    y_pred = X_new @ beta_posterior_mean\n    return [round(i, 4) for i in y_pred]"}
{"task_id": 419, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n        X_new = np.insert(X_new, 0, 1, axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    if isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = np.ones(X.shape[1]) * mu\n    V_inv = np.linalg.inv(V)\n    S = np.linalg.inv(V_inv + X.T @ X)\n    mean = S @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ mean\n    return [round(val, 4) for val in y_new.tolist()]"}
{"task_id": 419, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim < 2:\n        V = np.diag(V)\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = np.full(X.shape[1], mu)\n    V_inv = np.linalg.inv(V)\n    mean_post = np.linalg.inv(V_inv + X.T @ X) @ (V_inv @ mu.T + X.T @ y)\n    y_new = X_new @ mean_post\n    return [round(val, 4) for val in y_new]"}
{"task_id": 419, "completion_id": 9, "solution": "import numpy as np\ndef format_float(num):\n    return round(num, 4)\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\n        X_new = np.concatenate([np.ones((X_new.shape[0], 1)), X_new], axis=1)\n    if isinstance(mu, float):\n        mu = np.ones(X.shape[1]) * mu\n    if V is None:\n        V = sigma ** 2 * np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = sigma ** 2 * V * np.eye(X.shape[1])\n    elif isinstance(V, list):\n        V = sigma ** 2 * np.diag(V)\n    V_inv = np.linalg.inv(V)\n    mu_post = np.dot(np.linalg.inv(sigma ** 2 * np.eye(X.shape[1]) + np.dot(X.T, X)), np.dot(V_inv, mu) + np.dot(X.T, y))\n    y_pred = np.dot(X_new, mu_post)\n    return [format_float(i) for i in y_pred]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted) or any((a < 0 or p < 0 for (a, p) in zip(actual, predicted))):\n        return -1\n    rmsle = np.sqrt(np.mean(np.power(np.log(predicted + 1) - np.log(actual + 1), 2)))\n    rmsle = round(rmsle, 4)\n    return rmsle"}
{"task_id": 423, "completion_id": 1, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted) or any((i < 0 for i in actual)) or any((i < 0 for i in predicted)):\n        return -1\n    else:\n        n = len(actual)\n        rmsle = np.sqrt(1 / n * sum(((np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n))))\n        return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 2, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n    rmsle = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 3, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    return round(np.sqrt(np.sum(np.power(np.log(predicted + 1) - np.log(actual + 1), 2)) / n), 4)"}
{"task_id": 423, "completion_id": 4, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"A function to compute the Root Mean Squared Logarithmic Error\"\"\"\n    if not isinstance(actual, list) or not isinstance(predicted, list):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    if any((i < 0 for i in actual)) or any((i < 0 for i in predicted)):\n        return -1\n    rmsle = np.sqrt(np.mean(np.square(np.log1p(predicted) - np.log1p(actual))))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 5, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n    n = len(actual)\n    rmsle = np.sqrt(np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2) / n)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 6, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted) or any((i < 0 for i in actual)) or any((i < 0 for i in predicted)):\n        return -1\n    log_sum = np.sum(np.power(np.log(np.add(predicted, 1)) - np.log(np.add(actual, 1)), 2))\n    result = np.sqrt(1 / len(actual) * log_sum)\n    return round(result, 4)"}
{"task_id": 423, "completion_id": 7, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((i < 0 for i in actual)) or any((i < 0 for i in predicted)):\n        return -1\n    n = len(actual)\n    sum_log_diff = sum(((np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n)))\n    rmsle = np.sqrt(sum_log_diff / n)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 8, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n    n = len(actual)\n    sum_val = 0\n    for i in range(n):\n        sum_val += (np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2\n    rmsle = np.sqrt(1 / n * sum_val)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 9, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if all(actual >= 0) and all(predicted >= 0):\n        rmsle = np.sqrt(np.mean(np.power(np.log1p(predicted) - np.log1p(actual), 2)))\n        return round(rmsle, 4)\n    else:\n        return -1"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)\n    window_coeffs = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1))\n    return np.round(window_coeffs, 4).tolist()"}
{"task_id": 428, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1))\n    return np.round(window, 4).tolist()"}
{"task_id": 428, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        result = []\n        for n in range(window_len):\n            if symmetric:\n                result.append(round(0.5 * (1 - math.cos(2 * math.pi * n / (window_len - 1))), 4))\n            else:\n                result.append(round(0.5 * (1 - math.cos(2 * math.pi * n / window_len)), 4))\n        return result"}
{"task_id": 428, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        coefficients = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n    else:\n        coefficients = [0.5 - 0.5 * math.cos(2 * math.pi * n / window_len) for n in range(window_len + 1)]\n        coefficients = coefficients[:-1]\n    coefficients = [round(coeff, 4) for coeff in coefficients]\n    return coefficients"}
{"task_id": 428, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        window = np.array([0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1)) for n in range(window_len)])\n        if not symmetric:\n            window = window[:-1]\n        return np.round(window, 4).tolist()"}
{"task_id": 428, "completion_id": 5, "solution": "import numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        sampleCount = window_len if symmetric else window_len + 1\n        x = np.linspace(0, sampleCount - 1, sampleCount)\n        windowValues = 0.5 * (1 - np.cos(2 * np.pi * x / (sampleCount - 1)))\n        return [round(value, 4) for value in windowValues]"}
{"task_id": 428, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        window = [0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1)) for n in range(window_len)]\n    else:\n        window = [0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len + 1 - 1)) for n in range(window_len)]\n    return [round(num, 4) for num in window]"}
{"task_id": 428, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        n = np.arange(window_len)\n        if symmetric:\n            hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n        else:\n            hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        return [round(num, 4) for num in hann_window]"}
{"task_id": 428, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    n = np.arange(window_len)\n    if symmetric:\n        return np.round(0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1)), 4).tolist()\n    else:\n        n = np.arange(window_len + 1)\n        return np.round(0.5 - 0.5 * np.cos(2 * np.pi * n / window_len), 4)[:-1].tolist()"}
{"task_id": 428, "completion_id": 9, "solution": "import numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    window_len = window_len if symmetric else window_len + 1\n    n = np.arange(window_len)\n    window = 0.5 - 0.5 * np.cos(2 * np.arcsin(1) * n / (window_len - 1))\n    return np.round(window, 4).tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        fan_out = shape[0] * shape[2] * shape[3]\n        fan_in = shape[1] * shape[2] * shape[3]\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 1, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n        return (fan_in, fan_out)\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n        return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 2, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    shape = list(shape)\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 3, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 4, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 5, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    shape = list(shape)\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n        (fan_in, fan_out) = (float(fan_in), float(fan_out))\n    return (fan_in, fan_out)\nshape = (64, 3, 5, 5)"}
{"task_id": 433, "completion_id": 6, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 7, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 8, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        fan_in = shape[1] * shape[2] * shape[3]\n        fan_out = shape[0] * shape[2] * shape[3]\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 9, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        fan_in = float(shape[1] * shape[2] * shape[3])\n        fan_out = float(shape[0] * shape[2] * shape[3])\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_hat = np.full(y.shape, np.mean(y))\n    if n_estimators <= 0 or learning_rate == 0:\n        return list(np.round(y_hat, 4))\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        coefficients = np.linalg.lstsq(np.c_[np.ones(X.shape[0]), X], residuals, rcond=None)[0]\n        h = np.dot(X, coefficients[1:]) + coefficients[0]\n        y_hat = y_hat + learning_rate * h\n    return list(np.round(y_hat, 4))"}
{"task_id": 435, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners (as implemented by NumPy lstsq \n    function) and squared-error loss. The algorithm proceeds exactly as described in\n    the task description.  Every returned value must be rounded to 4 decimal places \n    and packed into a plain Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_hat = np.full(y.shape, fill_value=np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        (beta, _) = np.linalg.lstsq(np.c_[np.ones(X.shape[0]), X], residuals, rcond=None)[:2]\n        h = np.c_[np.ones(X.shape[0]), X] @ beta\n        y_hat += learning_rate * h\n    return list(map(lambda x: round(x, 4), y_hat.tolist()))"}
{"task_id": 435, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  The\n    returned list has every predicted value rounded to the nearest 4th decimal.\n    \"\"\"\n\n    def fit_ols(X, r):\n        \"\"\"Fit an ordinary least squares regression model.\"\"\"\n        (X, r) = (np.array(X).T, np.array(r))\n        v = np.linalg.inv(X.T @ X) @ X.T @ r\n        return v\n    (npX, npy) = (np.array(X), np.array(y))\n    (m, n) = npX.shape\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * m\n    pred = [np.mean(npy)] * m\n    for _ in range(n_estimators):\n        residuals = npy - pred\n        model = fit_ols(np.c_[np.ones(m), npX], residuals)\n        pred = pred + learning_rate * (np.c_[np.ones(m), npX] @ model)\n    return [round(p, 4) for p in pred]"}
{"task_id": 435, "completion_id": 3, "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n    y_pred = np.full(y.shape, y.mean())\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        model = LinearRegression(fit_intercept=True).fit(X, residuals)\n        h_pred = model.predict(X)\n        y_pred = y_pred + learning_rate * h_pred\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 435, "completion_id": 4, "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return np.repeat(y.mean(), len(X)).tolist()\n    h_t_X = np.zeros(len(X))\n    y_hat_t = np.full(len(X), y.mean())\n    for t in range(n_estimators):\n        r_t = y - y_hat_t\n        model = LinearRegression(fit_intercept=True).fit(X, r_t)\n        h_t_X = model.predict(X)\n        y_hat_t = y_hat_t + learning_rate * h_t_X\n    return [round(x, 4) for x in y_hat_t.tolist()]"}
{"task_id": 435, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_hat = np.full(y.shape, fill_value=y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_hat]\n    for t in range(n_estimators):\n        r = y - y_hat\n        ols = np.linalg.pinv(X.T @ X) @ X.T @ r\n        h = X @ ols\n        y_hat = y_hat + learning_rate * h\n    return [round(val, 4) for val in y_hat.tolist()]"}
{"task_id": 435, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, fill_value=np.mean(y), dtype=float)\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        beta_hat = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        weak_learner_pred = X_with_intercept @ beta_hat\n        y_pred += learning_rate * weak_learner_pred\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 435, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_hat = np.full(y.shape, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        coeffs = np.polyfit(residuals, X, 1)\n        prediction = np.polyval(coeffs, X)\n        y_hat += learning_rate * prediction\n    return list(np.round(y_hat, 4))"}
{"task_id": 435, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_hat = np.mean(y)\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        W = np.linalg.pinv(X.T @ X) @ X.T @ residuals\n        h = X @ W\n        y_hat = y_hat + learning_rate * h\n    return list(np.round(y_hat, 4))"}
{"task_id": 435, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    (m, d) = X.shape\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * m\n    y_hat = np.full(m, y.mean())\n    for t in range(n_estimators):\n        r = y - y_hat\n        beta = np.linalg.inv(X.T @ X) @ X.T @ r\n        y_hat = y_hat + learning_rate * (X @ beta)\n    return list(np.round(y_hat, 4))"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list, preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    if isinstance(x, (float, int)):\n        x = np.array([x])\n        return_scalar = True\n    elif isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        return_scalar = False\n    else:\n        raise TypeError('Unsupported input type.')\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    else:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    if return_scalar:\n        return round(float(result), 4)\n    else:\n        return np.round(result, 4).tolist()"}
{"task_id": 437, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n    x = np.array(x)\n    sig = 1 / (1 + np.exp(-x))\n    sig_1 = sig * (1 - sig)\n    sig_2 = sig_1 * (1 - 2 * sig)\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig_1\n    elif order == 2:\n        result = sig_2\n    else:\n        return -1\n    return np.round(result.tolist(), 4)"}
{"task_id": 437, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.array(x)\n    if order == 0:\n        result = 1 / (1 + np.exp(-x))\n    elif order == 1:\n        result = np.exp(-x) / (1 + 2 * np.exp(-x) + np.exp(-2 * x))\n    elif order == 2:\n        result = np.exp(-x) * (4 * np.exp(2 * x) - 2 * (3 + x) * np.exp(x) + 1) / np.power(1 + 2 * np.exp(-x) + np.exp(-2 * x), 3)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if np.isscalar(x):\n        x = np.array([x])\n        scalar_flag = True\n    else:\n        scalar_flag = False\n    x = np.array(x)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 1:\n        result = np.multiply(sig, 1 - sig)\n    elif order == 2:\n        result = np.multiply(sig, (1 - sig) * (1 - 2 * sig))\n    elif order != 0:\n        return -1\n    else:\n        result = sig\n    result = np.around(result, 4).tolist()\n    if scalar_flag:\n        return result[0]\n    else:\n        return result"}
{"task_id": 437, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"\n    Compute the logistic sigmoid or its derivatives.\n    \n    Parameters:\n    x (float | int | list | np.ndarray): Input data. Can be a scalar, list, \n    or NumPy array.\n    order (int, optional): 0 = function value, 1 = first derivative, \n    2 = second derivative. Defaults to 0.\n\n    Returns:\n    float | list: Result rounded to 4 decimals. Scalar input returns a float;\n        vector/matrix input returns a Python list preserving the shape.\n        If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array(x)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        return sig.round(4).item() if x.size == 1 else sig.round(4).tolist()\n    elif order == 1:\n        derivative = sig * (1 - sig)\n        return derivative.round(4).item() if x.size == 1 else derivative.round(4).tolist()\n    else:\n        second_derivative = derivative * (1 - 2 * sig)\n        return second_derivative.round(4).item() if x.size == 1 else second_derivative.round(4).tolist()"}
{"task_id": 437, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n\n    def logistic_function(z):\n        return 1 / (1 + np.exp(-z))\n\n    def logistic_derivative(z):\n        return logistic_function(z) * (1 - logistic_function(z))\n\n    def logistic_second_derivative(z):\n        return logistic_derivative(z) * (1 - 2 * logistic_function(z))\n    if isinstance(x, (float, int)):\n        x = np.array([x])\n    if not isinstance(x, np.ndarray):\n        try:\n            x = np.array(x)\n        except:\n            print('Invalid input type')\n            return None\n    if order == 0:\n        result = logistic_function(x)\n    elif order == 1:\n        result = logistic_derivative(x)\n    elif order == 2:\n        result = logistic_second_derivative(x)\n    else:\n        print('Invalid order')\n        return -1\n    return np.round(result, 4).tolist() if result is not None else None"}
{"task_id": 437, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.array(x)\n\n    def sigmoid_func(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_deriv1(x):\n        sigma = sigmoid_func(x)\n        return sigma * (1 - sigma)\n\n    def sigmoid_deriv2(x):\n        sigma = sigmoid_func(x)\n        return sigma * (1 - sigma) * (1 - 2 * sigma)\n    if order == 0:\n        result = sigmoid_func(x)\n    elif order == 1:\n        result = sigmoid_deriv1(x)\n    elif order == 2:\n        result = sigmoid_deriv2(x)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.asarray(x)\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.asarray(x)\n    if order not in [0, 1, 2]:\n        return -1\n    s = 1.0 / (1.0 + np.exp(-x))\n    if order == 0:\n        pass\n    elif order == 1:\n        s = s * (1 - s)\n    elif order == 2:\n        s = s * (1 - s) * (1 - 2 * s)\n    if s.shape == (1,):\n        s = s.item()\n    else:\n        s = s.tolist()\n    return round(s, 4)"}
{"task_id": 437, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.array(x)\n    s = 1 / (1 + np.exp(-x))\n    if order == 0:\n        if x.size == 1:\n            return round(float(s), 4)\n        else:\n            return np.around(s, 4).tolist()\n    elif order == 1:\n        d = s * (1 - s)\n        if x.size == 1:\n            return round(float(d), 4)\n        else:\n            return np.around(d, 4).tolist()\n    elif order == 2:\n        d2 = d * (1 - 2 * s)\n        if x.size == 1:\n            return round(float(d2), 4)\n        else:\n            return np.around(d2, 4).tolist()\n    else:\n        return -1"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    one_hot = np.eye(num_classes)[y].tolist()\n    return one_hot"}
{"task_id": 438, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes))\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Union\ndef to_categorical(y: Union[list[int], np.ndarray], num_classes: int=None) -> Union[list[list[int]], int]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not isinstance(y, (list, np.ndarray)):\n        raise ValueError('y should be a list or numpy array.')\n    for i in y:\n        if not isinstance(i, (int, np.integer)) or i < 0:\n            raise ValueError('All elements in y should be non-negative integers.')\n    max_val = max(y)\n    if num_classes is not None and num_classes < max_val + 1:\n        return -1\n    num_classes = max_val + 1 if num_classes is None else num_classes\n    return [[1 if j == i else 0 for j in range(num_classes)] for i in y]"}
{"task_id": 438, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    result = [([1] if i == j else [0] for j in range(num_classes)) for i in y]\n    return list(map(list, map(np.concatenate, result)))"}
{"task_id": 438, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If None the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or -1 when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    categorical = np.zeros((len(y), num_classes), dtype=int)\n    categorical[np.arange(y.size), y] = 1\n    return categorical.tolist()"}
{"task_id": 438, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]] | int\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result.tolist()"}
{"task_id": 438, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = int(max(y) + 1)\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot_matrix = []\n    for label in y:\n        one_hot = [0] * num_classes\n        one_hot[label] = 1\n        one_hot_matrix.append(one_hot)\n    return one_hot_matrix"}
{"task_id": 438, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    else:\n        one_hot = np.eye(num_classes)[y].tolist()\n        return one_hot"}
{"task_id": 438, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y_arr = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y_arr) + 1\n    if np.any(y_arr >= num_classes):\n        return -1\n    one_hot_matrix = np.eye(num_classes, dtype=int)[y_arr]\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    max_val = max(y)\n    if num_classes is not None and max_val >= num_classes:\n        return -1\n    classes_num = max_val + 1 if num_classes is None else num_classes\n    one_hot_matrix = np.zeros((len(y), classes_num))\n    for i in range(len(y)):\n        one_hot_matrix[i, y[i]] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    itemsets = []\n    for transaction in transactions:\n        for item in transaction:\n            if (item,) not in itemsets:\n                itemsets.append((item,))\n    itemsets.sort()\n    k = 2\n    while len(itemsets) >= k - 1:\n        candidates = generate_candidates(itemsets, k)\n        itemsets = filter_itemsets(transactions, candidates, min_sup)\n        k += 1\n    return itemsets\ndef generate_candidates(itemsets: list[tuple], k: int) -> list[tuple]:\n    return [tuple(sorted(itertools.chain(x, y))) for x in itemsets for y in itemsets if x[:k - 2] == y[:k - 2] and x[k - 2:k - 1] != y[k - 2:k - 1]]\ndef filter_itemsets(transactions: list[list], candidates: list[tuple], min_sup: float) -> list[tuple]:\n    min_sup_count = min_sup * len(transactions)\n    items = list(set((item for itemset in transactions for item in itemset)))\n    frequent_itemsets = []\n    for candidate in candidates:\n        count = sum((set(candidate).issubset(transaction) for transaction in transactions))\n        if count >= min_sup_count:\n            frequent_itemsets.append(candidate)\n    frequent_itemsets.sort(key=lambda x: (-len(x), x))\n    return frequent_itemsets"}
{"task_id": 439, "completion_id": 1, "solution": "import itertools\nfrom collections import Counter\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    transaction_set = [set(transaction) for transaction in transactions]\n    single_item_counts = Counter((item for transaction in transaction_set for item in transaction))\n    single_item_counts_filtered = {item: count for (item, count) in single_item_counts.items() if count >= min_sup * len(transactions)}\n    final_itemsets = list(sorted([(item,) for (item, count) in single_item_counts_filtered.items()]))\n    if not final_itemsets:\n        return []\n    itemsets = [frozenset(iterable) for iterable in itertools.chain(*[itertools.combinations(transaction, k) for transaction in transaction_set for k in range(1, len(transaction) + 1) if k > len(transaction) // 2])]\n    while itemsets:\n        counts = Counter((itemset for itemset in itemsets))\n        filtered_counts = {itemset: count for (itemset, count) in counts.items() if count >= min_sup * len(transactions)}\n        itemsets = [frozenset(combination) for combination in filtered_counts.keys() if not any((set(subset) not in counts for subset in itertools.combinations(itemset, len(itemset) - 1)))]\n        final_itemsets.extend([tuple(sorted(itemset)) for itemset in filtered_counts.keys()])\n    return sorted(final_itemsets, key=lambda itemset: (len(itemset), itemset))"}
{"task_id": 439, "completion_id": 2, "solution": "import itertools\nfrom collections import Counter\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(transaction)\n    items = [item for (item, count) in item_counter.items() if count >= min_sup * len(transactions)]\n    items.sort()\n    freq_itemsets = []\n    k = 1\n    while True:\n        candidates = list(itertools.combinations(items, k))\n        if len(candidates) == 0:\n            break\n        counter = Counter()\n        for transaction in transactions:\n            for candidate in candidates:\n                if all((item in transaction for item in candidate)):\n                    counter[candidate] += 1\n        frequent_sets = [set(items) for (items, count) in counter.items() if count >= min_sup * len(transactions)]\n        freq_itemsets.extend(frequent_sets)\n        k += 1\n    freq_itemsets = [tuple(sorted(itemset)) for itemset in freq_itemsets]\n    freq_itemsets.sort(key=lambda x: (len(x), x))\n    return freq_itemsets"}
{"task_id": 439, "completion_id": 3, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_counts = defaultdict(int)\n    candidate_sets = defaultdict(int)\n    frequent_itemsets = []\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    _frequent_1_itemsets = {item: count for (item, count) in item_counts.items() if count / len(transactions) >= min_sup}\n    frequent_itemsets += sorted(list(_frequent_1_itemsets.items()))\n    k = 2\n    while True:\n        candidate_sets = defaultdict(int)\n        for transaction in transactions:\n            for itemset in itertools.combinations(transaction, k):\n                if all((parent in _frequent_1_itemsets for parent in itertools.combinations(itemset, k - 1))):\n                    candidate_sets[itemset] += 1\n        _frequent_k_itemsets = {item: count for (item, count) in candidate_sets.items() if count / len(transactions) >= min_sup}\n        if not _frequent_k_itemsets:\n            break\n        frequent_itemsets += sorted(_frequent_k_itemsets.keys())\n        k += 1\n    return frequent_itemsets"}
{"task_id": 439, "completion_id": 4, "solution": "from collections import defaultdict\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    L1 = {item: count for (item, count) in item_counts.items() if count / len(transactions) >= min_sup}\n    L = [L1]\n    k = 2\n    while len(L[k - 2]) > 0:\n        Ck = generate_candidates(L[k - 2], k)\n        Ck = {candidate: 0 for candidate in Ck}\n        for transaction in transactions:\n            transaction = sorted(transaction)\n            for candidate in Ck.keys():\n                if is_subset(candidate, transaction):\n                    Ck[candidate] += 1\n        Lk = {candidate: count for (candidate, count) in Ck.items() if count / len(transactions) >= min_sup}\n        L.append(Lk)\n        k += 1\n    L = [item for sublist in L for item in sublist.keys()]\n    L.sort(key=lambda x: (len(x), x))\n    return L\ndef generate_candidates(Lk_minus_1: dict, k: int) -> list:\n    \"\"\" Generate all possible candidate itemsets of length k from Lk-1 \"\"\"\n    Ck = []\n    for l1 in Lk_minus_1:\n        for l2 in Lk_minus_1:\n            if l1[:-1] == l2[:-1] and l1[-1] != l2[-1]:\n                c = list(set(l1) | set(l2))\n                c.sort()\n                Ck.append(tuple(c))\n    return Ck\ndef is_subset(small, big):\n    \"\"\" Check if small is a subset of big \"\"\"\n    i = j = 0\n    while i < len(small) and j < len(big):\n        if small[i] < big[j]:\n            return False\n        if small[i] == big[j]:\n            i += 1\n        j += 1\n    return i == len(small)"}
{"task_id": 439, "completion_id": 5, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\"\"\"\n    items = list(set((i for t in transactions for i in t)))\n    item_counts = {i: sum((i in t for t in transactions)) for i in items}\n    freq_1_itemsets = {(i,): count / len(transactions) for (i, count) in item_counts.items() if count / len(transactions) >= min_sup}\n    freq_itemsets = list(freq_1_itemsets.keys())\n    k = 2\n    while True:\n        candidates = list(set((t1 + t2 for (t1, t2) in itertools.permutations(freq_itemsets, 2) if t1[:k - 2] == t2[:k - 2])))\n        candidate_counts = {c: sum((set(c).issubset(t) for t in transactions)) for c in candidates}\n        freq_itemsets = [c for c in candidates if all((set(i).issubset(set(c)) for i in freq_itemsets))]\n        freq_itemsets += [c for c in freq_itemsets if candidate_counts[c] / len(transactions) >= min_sup]\n        if k > len(freq_itemsets):\n            break\n        k += 1\n    return sorted(sorted(freq_itemsets), key=len)"}
{"task_id": 439, "completion_id": 6, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    candidates = create_candidates(transactions)\n    transactions_count = len(transactions)\n    min_sup_count = min_sup * transactions_count\n    freq_itemsets = []\n    freq_itemsets_k = []\n    for c in candidates:\n        support_count = sum((all((x in t for x in c)) for t in transactions))\n        if support_count >= min_sup_count:\n            freq_itemsets_k.append(c)\n    while freq_itemsets_k:\n        freq_itemsets.extend(freq_itemsets_k)\n        k = len(freq_itemsets_k[0]) + 1\n        candidates = create_candidates(transactions, freq_itemsets_k, k)\n        freq_itemsets_k = []\n        for c in candidates:\n            support_count = sum((all((x in t for x in c)) for t in transactions))\n            if support_count >= min_sup_count:\n                freq_itemsets_k.append(c)\n    return [tuple(sorted(itemset)) for itemset in freq_itemsets]\ndef create_candidates(transactions, prev_itemsets=[], k=1):\n    \"\"\"Create candidates for next pass of Apriori algorithm.\n    Generates all unique k-sized itemsets if prev_itemsets is not provided,\n    else generates only those k-sized itemsets which have subsets of size k-1\n    in prev_itemsets.\n    \"\"\"\n    if not prev_itemsets:\n        candidates = set((item for transaction in transactions for item in transaction))\n        return [(c,) for c in candidates]\n    candidates = set()\n    for itemset in prev_itemsets:\n        for transaction in transactions:\n            if all((i in transaction for i in itemset)):\n                candidates.update(set(itertools.combinations(transaction, k)))\n    return [tuple(c) for c in candidates]"}
{"task_id": 439, "completion_id": 7, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n\n    def generate_candidates(L):\n        result = []\n        k = len(L[0])\n        for i in range(len(L)):\n            for j in range(i + 1, len(L)):\n                if L[i][:k - 1] == L[j][:k - 1]:\n                    result.append(L[i] + (L[j][-1],))\n        return result\n\n    def apriori_gen(Lk):\n        result = []\n        for x in list(Lk):\n            for y in list(Lk):\n                if x[:-1] == y[:-1] and x[-1] < y[-1] and (not check_subroup(x, y)):\n                    result.append(x + (y[-1],))\n        return result\n\n    def check_subroup(candidate, L):\n        k = len(candidate)\n        for subset in itertools.combinations(candidate, k - 1):\n            if subset not in L:\n                return False\n        return True\n\n    def is_frequent(candidate, transactions, min_sup):\n        cnt = 0\n        for transaction in transactions:\n            if set(candidate).issubset(set(transaction)):\n                cnt += 1\n        return cnt / len(transactions) >= min_sup\n\n    def generate_L(k, transactions):\n        candidates = [frozenset(x) for x in itertools.combinations(set().union(*transactions), k)]\n        items = defaultdict(int)\n        for transaction in transactions:\n            for item in set(transaction):\n                items[frozenset([item])] += 1\n        L = [(x, items[x]) for x in candidates if items[x] / len(transactions) >= min_sup]\n        return sorted(L)\n    C = generate_L(1, transactions)\n    C = [item[0] for item in C]\n    L = []\n    k = 2\n    while True:\n        if k > 2:\n            for x in C:\n                for subset in apriori_gen(L[-1]):\n                    if not is_frequent(subset, transactions, min_sup):\n                        C.remove(subset)\n            L.append(sorted([x for x in C if frozenset(x) in L_prev]))\n        else:\n            L.append(sorted([x for x in C if is_frequent(x, transactions, min_sup)]))\n        if len(L) >= k:\n            L_prev = L[-1]\n            if len(L_prev) == 0:\n                break\n        k += 1\n        C = generate_candidates(L_prev)\n    result = []\n    for x in sorted(L, key=lambda x: len(x[0])):\n        for t in x:\n            result.append(tuple(sorted(t)))\n    return result"}
{"task_id": 439, "completion_id": 8, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    trans_dict = {}\n    for (i, transaction) in enumerate(transactions):\n        transactions[i] = set(transaction)\n        for item in transactions[i]:\n            if item in trans_dict:\n                trans_dict[item].add(i)\n            else:\n                trans_dict[item] = {i}\n    trans_len = len(transactions)\n    trans_set_len_list = []\n    for item in trans_dict:\n        trans_set_len_list.append(len(trans_dict[item]))\n\n    def is_frequent(itemset):\n        intersection_set = trans_dict[itemset[0]]\n        for item in itemset[1:]:\n            intersection_set = intersection_set.intersection(trans_dict[item])\n        return len(intersection_set) / trans_len >= min_sup\n    result = []\n    possible_items = list(trans_dict.keys())\n    item_len_list = list(map(len, possible_items))\n    possible_items_set = trans_dict.keys()\n    k = 1\n    while possible_items:\n        new_candidates = itertools.combinations(possible_items, k)\n        frequent_itemsets = list(filter(is_frequent, new_candidates))\n        if frequent_itemsets:\n            result.extend(frequent_itemsets)\n        else:\n            break\n        removed_items = []\n        for itemset in possible_items:\n            for subset in itertools.combinations(itemset, k - 1):\n                if item_len_list[possible_items.index(itemset)] == trans_set_len_list[possible_items.index(subset)]:\n                    removed_items.append(subset)\n        possible_items = list(set(possible_items) - set(removed_items))\n        k += 1\n    return [tuple(sorted(itemset)) for itemset in result]"}
{"task_id": 439, "completion_id": 9, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    unique_items = set((item for transaction in transactions for item in transaction))\n    transaction_count = len(transactions)\n    min_count = min_sup * transaction_count\n\n    def count_items(itemset):\n        return sum((set(itemset).issubset(transaction) for transaction in transactions))\n    candidates = list(map(frozenset, map(lambda x: [x], unique_items)))\n    frequent_sets = []\n    while candidates:\n        frequent_single = [item for item in candidates if count_items(item) >= min_count]\n        frequent_sets.extend(frequent_single)\n        (candidates, _) = itertools.tee([a.union(b) for a in frequent_single for b in candidates if a != b and len(a.union(b)) == len(b) + 1], 2)\n        candidates = list(set(candidates))\n    frequent_sets.sort(key=lambda x: len(x))\n    frequent_sets.sort(key=lambda x: min(x), reverse=False)\n    frequent_sets = [tuple(sorted(list(itemset))) for itemset in frequent_sets]\n    return frequent_sets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    avg_prob = np.mean(predictions_array, axis=0)\n    avg_prob = avg_prob.tolist()\n    avg_prob = [[round(i, 4) for i in sublist] for sublist in avg_prob]\n    predicted_class_label = [np.argmax(i) for i in avg_prob]\n    return (avg_prob, predicted_class_label)"}
{"task_id": 440, "completion_id": 1, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    sum_predictions = np.sum(predictions_np, axis=0)\n    avg_predictions = np.mean(sum_predictions, axis=1)\n    avg_predictions_rounded = [list(np.round(x, 4)) for x in avg_predictions]\n    predicted_class_indexes = np.argmax(avg_predictions, axis=1)\n    predicted_class_indexes = predicted_class_indexes.tolist()\n    return (avg_predictions_rounded, predicted_class_indexes)"}
{"task_id": 440, "completion_id": 2, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    final_predictions = np.argmax(rounded_probabilities, axis=1)\n    return (rounded_probabilities.tolist(), final_predictions.tolist())"}
{"task_id": 440, "completion_id": 3, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    if not isinstance(predictions, list) or not predictions:\n        raise ValueError('Input should be a non-empty list')\n    np_predictions = np.array(predictions)\n    avg_predictions = np.round(np.mean(np_predictions, axis=0), 4).tolist()\n    predicted_classes = np.argmax(avg_predictions, axis=1).tolist()\n    return (avg_predictions, predicted_classes)"}
{"task_id": 440, "completion_id": 4, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_arr = np.array(predictions)\n    avg_prob = np.mean(predictions_arr, axis=0)\n    avg_prob_rounded = np.round(avg_prob, 4)\n    pred_labels = np.argmax(avg_prob_rounded, axis=1)\n    avg_prob_rounded_list = avg_prob_rounded.tolist()\n    pred_labels_list = pred_labels.tolist()\n    return (avg_prob_rounded_list, pred_labels_list)"}
{"task_id": 440, "completion_id": 5, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions = np.array(predictions)\n    averaged_probs = np.mean(predictions, axis=0)\n    averaged_probs = np.around(averaged_probs, decimals=4)\n    averaged_probs = averaged_probs.tolist()\n    predicted_classes = np.argmax(averaged_probs, axis=1)\n    predicted_classes = predicted_classes.tolist()\n    return (averaged_probs, predicted_classes)"}
{"task_id": 440, "completion_id": 6, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n i\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions = np.array(predictions)\n    averaged_probs = np.mean(predictions, axis=0)\n    averaged_probs = np.round(averaged_probs, 4)\n    predicted_class_labels = np.argmax(averaged_probs, axis=1)\n    averaged_probs_list = averaged_probs.tolist()\n    predicted_class_labels_list = predicted_class_labels.tolist()\n    return (averaged_probs_list, predicted_class_labels_list)"}
{"task_id": 440, "completion_id": 7, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    averaged_probs = np.mean(predictions_np, axis=0)\n    averaged_probs = np.round(averaged_probs, 4)\n    predicted_classes = np.argmax(averaged_probs, axis=1)\n    return (averaged_probs.tolist(), predicted_classes.tolist())\npredictions = [[[0.2, 0.8], [0.9, 0.1]], [[0.1, 0.9], [0.3, 0.7]], [[0.3, 0.7], [0.8, 0.2]]]"}
{"task_id": 440, "completion_id": 8, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    predictions = np.array(predictions)\n    averaged_probs = np.mean(predictions, axis=0)\n    averaged_probs = np.round(averaged_probs, 4)\n    predicted_labels = np.argmax(averaged_probs, axis=1)\n    return (averaged_probs.tolist(), predicted_labels.tolist())"}
{"task_id": 440, "completion_id": 9, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n    class_predictions = np.argmax(averaged_probabilities, axis=1)\n    return (averaged_probabilities.tolist(), class_predictions.tolist())"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y)\n    (N, D) = X.shape\n    (M, _) = Y.shape\n    if D != Y.shape[1]:\n        return -1\n    if isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(D, sigma)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != D or np.any(sigma <= 0):\n            return -1\n    else:\n        sigma = np.full(D, np.sqrt(D / 2))\n    kernel_matrix = []\n    for x in X:\n        row = []\n        for y in Y:\n            distance = np.sum(((x - y) / sigma) ** 2)\n            kernel = np.exp(-0.5 * distance)\n            row.append(round(kernel, 4))\n        kernel_matrix.append(row)\n    return kernel_matrix"}
{"task_id": 444, "completion_id": 1, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    X = np.array(X)\n    (N, C) = X.shape\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y)\n    if Y.shape[1] != C:\n        return -1\n    if isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        for s in sigma:\n            if s <= 0:\n                return -1\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * C\n    else:\n        sigma = [np.sqrt(C / 2)] * C\n    K = np.zeros((N, Y.shape[0]))\n    for i in range(N):\n        for j in range(Y.shape[0]):\n            K[i, j] = np.exp(-0.5 * np.sum(((X[i] - Y[j]) / sigma) ** 2))\n    return np.around(K, decimals=4).tolist()"}
{"task_id": 444, "completion_id": 2, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\"\"\"\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n    if isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(X.shape[1], sigma)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if any((v <= 0 for v in sigma)) or sigma.shape != (X.shape[1],):\n            return -1\n    elif sigma is None:\n        sigma = np.full(X.shape[1], np.sqrt(X.shape[1] / 2))\n    dist_matrix = np.sum(((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) / sigma) ** 2, axis=-1)\n    K = np.exp(-0.5 * dist_matrix)\n    K = K.round(4).tolist()\n    return K"}
{"task_id": 444, "completion_id": 3, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix.\n    \"\"\"\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n    (N, C) = X.shape\n    M = Y.shape[0]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (float, int)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma, dtype=float)\n    else:\n        sigma = np.array(sigma)\n        if sigma.ndim != 1 or len(sigma) != C:\n            return -1\n    X_norm = np.sum(X ** 2, axis=1).reshape(-1, 1)\n    Y_norm = np.sum(Y ** 2, axis=1).reshape(1, -1)\n    dist = X_norm + Y_norm - 2 * np.dot(X / sigma, Y.T)\n    kernel = np.exp(-0.5 * dist)\n    return np.round(kernel, 4).tolist()"}
{"task_id": 444, "completion_id": 4, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    X = np.array(X)\n    (N, C) = X.shape\n    Y = np.array(Y) if Y is not None else X\n    (M, _C) = Y.shape\n    if _C != C:\n        return -1\n    if isinstance(sigma, list):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * C\n    else:\n        sigma = [np.sqrt(C / 2)] * C\n    distance = np.sum(X ** 2, axis=1, keepdims=True) + np.sum(Y ** 2, axis=1) - 2 * X @ Y.T\n    K = np.exp(-distance / 2 / np.atleast_2d(sigma).T ** 2)\n    return np.round(K, 4).tolist()"}
{"task_id": 444, "completion_id": 5, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    (X, Y) = (np.array(X), np.array(Y) if Y else None)\n    if X.ndim != 2 or (Y is not None and Y.ndim != 2):\n        return -1\n    if Y is not None and X.shape[1] != Y.shape[1]:\n        return -1\n    if type(sigma) is list:\n        if len(sigma) != X.shape[1]:\n            return -1\n        if any((s <= 0 for s in sigma)):\n            return -1\n    elif type(sigma) is float:\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * X.shape[1]\n    elif sigma is None:\n        sigma = [np.sqrt(X.shape[1] / 2)] * X.shape[1]\n\n    def rbf(x, y, sigma):\n        return np.exp(-0.5 * np.sum(((x - y) / sigma) ** 2))\n    if Y is None:\n        Y = X\n    kernel = [[rbf(x, y, sigma) for y in Y] for x in X]\n    kernel = [[round(val, 4) for val in row] for row in kernel]\n    return kernel"}
{"task_id": 444, "completion_id": 6, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    X = np.array(X)\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y)\n    n_features_X = X.shape[1]\n    n_features_Y = Y.shape[1]\n    if n_features_X != n_features_Y:\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(n_features_X / 2)\n    if isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(n_features_X, sigma)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != n_features_X:\n            return -1\n        if any((s <= 0 for s in sigma)):\n            return -1\n    kernel_matrix = np.empty((X.shape[0], Y.shape[0]))\n    for (i, x) in enumerate(X):\n        for (j, y) in enumerate(Y):\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(((x - y) / sigma) ** 2))\n    return np.round(kernel_matrix, 4).tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 7, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    (n, d) = X.shape\n    (m, dy) = Y.shape\n    if sigma is None:\n        sigma = np.sqrt(d / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != d:\n            return -1\n        sigma = np.array(sigma)\n        if np.any(sigma <= 0):\n            return -1\n    else:\n        if sigma <= 0:\n            return -1\n        sigma = np.array([sigma] * d)\n    if d != dy:\n        return -1\n    distances = np.sum(X ** 2, axis=1, keepdims=True) + np.sum(Y ** 2, axis=1) - 2 * np.dot(X, Y.T)\n    kernel_matrix = np.exp(-0.5 * distances / sigma ** 2)\n    return np.round(kernel_matrix, 4).tolist()"}
{"task_id": 444, "completion_id": 8, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1]:\n            return -1\n        sigma = np.array(sigma)\n    else:\n        if sigma <= 0:\n            return -1\n        sigma = np.array([sigma] * X.shape[1])\n    if Y is None:\n        K = np.zeros((X.shape[0], X.shape[0]))\n        for (i, xi) in enumerate(X):\n            for (j, xj) in enumerate(X[:i + 1]):\n                K[i, j] = K[j, i] = np.exp(-0.5 * np.sum(((xi - xj) / sigma) ** 2))\n    else:\n        Y = np.array(Y)\n        if X.shape[1] != Y.shape[1]:\n            return -1\n        K = np.zeros((X.shape[0], Y.shape[0]))\n        for (i, xi) in enumerate(X):\n            for (j, yj) in enumerate(Y):\n                K[i, j] = np.exp(-0.5 * np.sum(((xi - yj) / sigma) ** 2))\n    return K.round(4).tolist()"}
{"task_id": 444, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y)\n    if sigma is None:\n        sigma = 1 / np.sqrt(2) if X.shape[1] > 1 else 1\n    if isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if sigma.shape[0] != X.shape[1]:\n            return -1\n    elif sigma <= 0:\n        return -1\n    K = np.exp(-0.5 * cdist(X, Y, 'sqeuclidean') / np.square(sigma))\n    return np.round(K, 4).tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef entropy(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    p = counts / len(labels)\n    return -np.sum(p * np.log2(p))\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (best_feature, best_threshold, max_gain) = (0, None, -1)\n    (best_left, best_right) = (np.argmax(np.bincount(y)), np.argmax(np.bincount(y)))\n    for feature in range(X.shape[1]):\n        values = np.sort(np.unique(X[:, feature]))\n        thresholds = (values[:-1] + values[1:]) / 2\n        for threshold in thresholds:\n            left_indices = X[:, feature] <= threshold\n            (left_y, right_y) = (y[left_indices], y[~left_indices])\n            gain = entropy(y) - (len(left_y) * entropy(left_y) + len(right_y) * entropy(right_y)) / len(y)\n            if gain > max_gain:\n                (best_feature, best_threshold, max_gain) = (feature, threshold, gain)\n                (_, left_counts) = np.unique(y[left_indices], return_counts=True)\n                (_, right_counts) = np.unique(y[~left_indices], return_counts=True)\n                (best_left, best_right) = (np.argmax(left_counts), np.argmax(right_counts))\n            elif gain == max_gain:\n                if feature < best_feature or (feature == best_feature and threshold < best_threshold):\n                    (best_feature, best_threshold) = (feature, threshold)\n                    (_, left_counts) = np.unique(y[left_indices], return_counts=True)\n                    (_, right_counts) = np.unique(y[~left_indices], return_counts=True)\n                    (best_left, best_right) = (np.argmax(left_counts), np.argmax(right_counts))\n    if max_gain <= 0:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature, round(best_threshold, 4), best_left, best_right)"}
{"task_id": 446, "completion_id": 1, "solution": "import numpy as np\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    majority_label = np.argmax(np.bincount(y))\n    (best_feature_index, best_threshold, best_gain) = (None, None, 0)\n    (left_majority_label, right_majority_label) = (majority_label, majority_label)\n    parent_entropy = entropy(y)\n    for feature_index in range(n_features):\n        feature_values = np.sort(np.unique(X[:, feature_index]))\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n        for threshold in thresholds:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            if np.any(left_indices) and np.any(right_indices):\n                left_entropy = entropy(y[left_indices])\n                right_entropy = entropy(y[right_indices])\n                gain = parent_entropy - (left_entropy * np.sum(left_indices) + right_entropy * np.sum(right_indices)) / n_samples\n                if gain > best_gain or (gain == best_gain and (best_feature_index is None or feature_index < best_feature_index)) or (gain == best_gain and best_feature_index == feature_index and (best_threshold is None or threshold < best_threshold)):\n                    best_feature_index = feature_index\n                    best_threshold = round(threshold, 4)\n                    best_gain = gain\n                    left_majority_label = np.argmax(np.bincount(y[left_indices]))\n                    right_majority_label = np.argmax(np.bincount(y[right_indices]))\n    if best_feature_index is None:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(labels):\n    proportions = np.bincount(labels) / len(labels)\n    return -np.sum([p * np.log2(p) for p in proportions if p > 0])"}
{"task_id": 446, "completion_id": 2, "solution": "def decision_stump(X, y):\n    from collections import Counter\n    import math\n    import numpy as np\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    counts = Counter(y)\n    parent_entropy = sum((-n / len(y) * math.log2(n / len(y)) for n in counts.values() if n))\n    best_info_gain = -math.inf\n    (best_threshold, best_feature) = (None, None)\n    (best_left_label, best_right_label) = Counter(y).most_common(1)[0]\n    for feature_idx in range(n_features):\n        threshold_options = np.unique(X[:, feature_idx])\n        for threshold in [(threshold_options[i] + threshold_options[i + 1]) / 2 for i in range(len(threshold_options) - 1)]:\n            left_labels = y[X[:, feature_idx] <= threshold]\n            right_labels = y[X[:, feature_idx] > threshold]\n            left_counts = Counter(left_labels)\n            right_counts = Counter(right_labels)\n            left_entropy = sum((-l / len(left_labels) * math.log2(l / len(left_labels)) for l in left_counts.values() if l))\n            right_entropy = sum((-r / len(right_labels) * math.log2(r / len(right_labels)) for r in right_counts.values() if r))\n            info_gain = parent_entropy - (left_labels.shape[0] * left_entropy + right_labels.shape[0] * right_entropy) / len(y)\n            if info_gain > best_info_gain:\n                best_info_gain = info_gain\n                best_threshold = round(threshold, 4)\n                best_feature = feature_idx\n                best_left_label = left_counts.most_common(1)[0][0]\n                best_right_label = right_counts.most_common(1)[0][0]\n    if best_info_gain > 0:\n        return (best_feature, best_threshold, best_left_label, best_right_label)\n    else:\n        majority_label = counts.most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)"}
{"task_id": 446, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    majority_label = Counter(y).most_common(1)[0][0]\n    best_gain = -np.inf\n    (best_feature_index, best_threshold) = (-1, None)\n    (left_majority_label, right_majority_label) = (majority_label, majority_label)\n    parent_entropy = entropy(y)\n    for feature in range(n_features):\n        feature_values = X[:, feature]\n        sort_indices = np.argsort(feature_values)\n        feature_values = feature_values[sort_indices]\n        y = y[sort_indices]\n        unique_thresholds = np.where(feature_values[:-1] < feature_values[1:])[0]\n        for threshold in unique_thresholds:\n            (left_y, right_y) = (y[:threshold + 1], y[threshold + 1:])\n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            p_left = len(left_y) / n_samples\n            p_right = len(right_y) / n_samples\n            info_gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if info_gain > best_gain:\n                best_gain = info_gain\n                best_feature_index = feature\n                best_threshold = round((feature_values[threshold] + feature_values[threshold + 1]) / 2, 4)\n                left_majority_label = Counter(left_y).most_common(1)[0][0]\n                right_majority_label = Counter(right_y).most_common(1)[0][0]\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    H = -np.sum(p * np.log2(p))\n    return H"}
{"task_id": 446, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nfrom copy import deepcopy\ndef entropy(y):\n    \"\"\"\n    Calculate the entropy of a given label vector.\n    \"\"\"\n    hist = np.bincount(y)\n    ps = hist / len(y)\n    return -np.sum([p * np.log2(p) for p in ps if p > 0])\ndef decision_stump(X, y):\n    (X, y) = (np.array(X), np.array(y))\n    (n_samples, n_features) = X.shape\n    entropies = [entropy(y)] * n_features\n    thresholds = [None] * n_features\n    for i in range(n_features):\n        ind_ordered = np.argsort(X[:, i])\n        (X_sorted, y_sorted) = (X[ind_ordered, i], y[ind_ordered])\n        thresholds[i] = [(X_sorted[j] + X_sorted[j + 1]) / 2 for j in range(n_samples - 1) if X_sorted[j] < X_sorted[j + 1]]\n        candidate_thresholds = np.array(list(set(thresholds[i])))\n        candidate_gains = np.zeros(len(candidate_thresholds))\n        for (j, thr) in enumerate(candidate_thresholds):\n            left_indices = X[:, i] <= thr\n            right_indices = ~left_indices\n            (p_left, p_right) = (np.sum(left_indices) / n_samples, np.sum(right_indices) / n_samples)\n            H_left = entropy(y_sorted[left_indices]) if np.sum(left_indices) > 0 else 0\n            H_right = entropy(y_sorted[right_indices]) if np.sum(right_indices) > 0 else 0\n            candidate_gains[j] = entropies[0] - p_left * H_left - p_right * H_right\n        if len(candidate_gains) > 0:\n            best_gain = np.max(candidate_gains)\n            best_thr = candidate_thresholds[np.argmax(candidate_gains)]\n        if len(candidate_gains) > 0 and best_gain > entropies[i]:\n            entropies[i] = best_gain\n            thresholds[i] = best_thr\n    best_thr_index = np.argmax(entropies)\n    best_threshold = round(thresholds[best_thr_index], 4)\n    left_indices = X[:, best_thr_index] <= best_threshold\n    (y_left, y_right) = (y[left_indices], y[~left_indices])\n    majority_label = Counter(y).most_common(1)[0][0]\n    left_majority_label = Counter(y_left).most_common(1)[0][0] if len(y_left) > 0 else majority_label\n    right_majority_label = Counter(y_right).most_common(1)[0][0] if len(y_right) > 0 else majority_label\n    if np.min(entropies) < entropies[0]:\n        return (best_thr_index, best_threshold, left_majority_label, right_majority_label)\n    else:\n        return (-1, None, majority_label, majority_label)"}
{"task_id": 446, "completion_id": 5, "solution": "import numpy as np\ndef entropy(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    probs = counts / counts.sum()\n    return -(probs * np.log2(probs)).sum()\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    majority_label = np.argmax(np.bincount(y))\n    best_gain = -np.inf\n    (best_feature, best_thr) = (-1, -1)\n    (best_left, best_right) = (majority_label, majority_label)\n    for feature in range(n_features):\n        values = np.sort(np.unique(X[:, feature]))\n        thresholds = (values[:-1] + values[1:]) / 2\n        for thr in thresholds:\n            left_idxs = X[:, feature] <= thr\n            right_idxs = ~left_idxs\n            if np.any(left_idxs) and np.any(right_idxs):\n                left_entropy = entropy(y[left_idxs])\n                right_entropy = entropy(y[right_idxs])\n                left_prob = left_idxs.mean()\n                right_prob = 1 - left_prob\n                gain = entropy(y) - left_prob * left_entropy - right_prob * right_entropy\n                if gain > best_gain or (gain == best_gain and feature < best_feature) or (gain == best_gain and feature == best_feature and (thr < best_thr)):\n                    best_feature = feature\n                    best_thr = thr\n                    best_gain = gain\n                    best_left = np.argmax(np.bincount(y[left_idxs]))\n                    best_right = np.argmax(np.bincount(y[right_idxs]))\n    if best_gain != -np.inf:\n        return (best_feature, round(best_thr, 4), int(best_left), int(best_right))\n    else:\n        return (-1, None, int(majority_label), int(majority_label))"}
{"task_id": 446, "completion_id": 6, "solution": "import numpy as np\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (unique_labels, y_counts) = np.unique(y, return_counts=True)\n    majority_label = unique_labels[np.argmax(y_counts)]\n    H_parent = entropy(y_counts)\n    best_feature_index = -1\n    best_threshold = None\n    best_gain = 0\n    best_left_label = majority_label\n    best_right_label = majority_label\n    for feature_index in range(X.shape[1]):\n        column_values = np.sort(np.unique(X[:, feature_index]))\n        for i in range(len(column_values) - 1):\n            threshold = (column_values[i] + column_values[i + 1]) / 2\n            left_indices = X[:, feature_index] <= threshold\n            (left_labels, left_counts) = np.unique(y[left_indices], return_counts=True)\n            (right_labels, right_counts) = np.unique(y[~left_indices], return_counts=True)\n            if len(left_counts) == 0:\n                left_majority_label = majority_label\n            else:\n                left_majority_label = left_labels[np.argmax(left_counts)]\n            if len(right_counts) == 0:\n                right_majority_label = majority_label\n            else:\n                right_majority_label = right_labels[np.argmax(right_counts)]\n            H_left = entropy(left_counts)\n            H_right = entropy(right_counts)\n            p_left = np.sum(left_counts) / len(y)\n            p_right = np.sum(right_counts) / len(y)\n            gain = H_parent - p_left * H_left - p_right * H_right\n            if gain > best_gain or (gain == best_gain and (feature_index < best_feature_index or (feature_index == best_feature_index and threshold < best_threshold))):\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                best_gain = gain\n                best_left_label = left_majority_label\n                best_right_label = right_majority_label\n    if best_gain > 0:\n        return (best_feature_index, best_threshold, best_left_label, best_right_label)\n    else:\n        return (-1, None, majority_label, majority_label)\ndef entropy(counts):\n    if len(counts) == 0:\n        return 0\n    p = counts / np.sum(counts)\n    return -np.sum(p * np.log2(p))"}
{"task_id": 446, "completion_id": 7, "solution": "import numpy as np\ndef decision_stump(X, y):\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        probs = counts / len(labels)\n        entropy_val = -probs.dot(np.log2(probs))\n        return entropy_val\n    X = np.array(X)\n    y = np.array(y)\n    best_feature_index = -1\n    best_threshold = None\n    best_gain = -1\n    majority_label = np.argmax(np.bincount(y))\n    for feature_index in range(X.shape[1]):\n        feature_column = X[:, feature_index]\n        sorted_indices = np.argsort(feature_column)\n        sorted_labels = y[sorted_indices]\n        thresholds = (feature_column[sorted_indices[:-1]] + feature_column[sorted_indices[1:]]) / 2.0\n        sorted_labels = np.insert(sorted_labels, 0, majority_label)\n        for (threshold, left, right) in zip(thresholds, range(len(sorted_labels)), range(1, len(sorted_labels))):\n            left_labels = sorted_labels[:left]\n            right_labels = sorted_labels[right:]\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            left_ratio = len(left_labels) / len(y)\n            right_ratio = len(right_labels) / len(y)\n            gain = entropy(sorted_labels) - left_ratio * left_entropy - right_ratio * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                (_, left_counts) = np.unique(left_labels, return_counts=True)\n                (_, right_counts) = np.unique(right_labels, return_counts=True)\n                left_majority_label = np.argmax(left_counts)\n                right_majority_label = np.argmax(right_counts)\n    left_majority_label = majority_label\n    right_majority_label = majority_label\n    if best_gain > 0:\n        return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n    else:\n        return (-1, None, majority_label, majority_label)"}
{"task_id": 446, "completion_id": 8, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    Args:\n        X: 2-D list (or array-like) in which every row is a feature vector\n           and every column is a feature.\n        y: 1-D list (or array-like) in which every row is a label.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    maj_label = np.argmax(np.bincount(y))\n    max_gain = -1\n    (best_feature, best_thr) = (-1, None)\n    (best_left_maj_label, best_right_maj_label) = (maj_label, maj_label)\n    H_y = entropy(y)\n    for feature_i in range(n_features):\n        feature_values = np.sort(np.unique(X[:, feature_i]))\n        mid_values = 0.5 * (feature_values[:-1] + feature_values[1:])\n        for thr in mid_values:\n            less_than_thr = X[:, feature_i] <= thr\n            (y_left, y_right) = (y[less_than_thr], y[~less_than_thr])\n            left_maj_label = np.argmax(np.bincount(y_left))\n            right_maj_label = np.argmax(np.bincount(y_right))\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            gain = H_y - p_left * H_left - p_right * H_right\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = feature_i\n                best_thr = round(thr, 4)\n                best_left_maj_label = left_maj_label\n                best_right_maj_label = right_maj_label\n            elif gain == max_gain:\n                if feature_i < best_feature or (feature_i == best_feature and thr < best_thr):\n                    best_feature = feature_i\n                    best_thr = round(thr, 4)\n                    best_left_maj_label = left_maj_label\n                    best_right_maj_label = right_maj_label\n    if max_gain < 0:\n        return (-1, None, best_left_maj_label, best_right_maj_label)\n    else:\n        return (best_feature, best_thr, best_left_maj_label, best_right_maj_label)\ndef entropy(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    probs = counts / len(y)\n    return -np.sum(probs * np.log2(probs))"}
{"task_id": 446, "completion_id": 9, "solution": "import numpy as np\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    counts = np.bincount(y)\n    parent_entropy = entropy(counts)\n    best_gain = 0\n    best_feature = -1\n    best_threshold = None\n    left_majority_label = np.argmax(np.bincount(y))\n    right_majority_label = np.argmax(np.bincount(y))\n    for f in range(n_features):\n        indices_sorted = np.argsort(X[:, f])\n        sorted_y = y[indices_sorted]\n        thresholds = (X[indices_sorted[:-1], f] + X[indices_sorted[1:], f]) / 2.0\n        for thr in thresholds:\n            left_labels = sorted_y[X[indices_sorted, f] <= thr]\n            right_labels = sorted_y[X[indices_sorted, f] > thr]\n            left_entropy = entropy(np.bincount(left_labels))\n            right_entropy = entropy(np.bincount(right_labels))\n            left_prop = len(left_labels) / n_samples\n            right_prop = len(right_labels) / n_samples\n            gain = parent_entropy - (left_prop * left_entropy + right_prop * right_entropy)\n            if gain > best_gain or (gain == best_gain and (f < best_feature or (f == best_feature and thr < best_threshold))):\n                best_gain = gain\n                best_feature = f\n                best_threshold = round(thr, 4)\n                left_majority_label = np.argmax(np.bincount(left_labels))\n                right_majority_label = np.argmax(np.bincount(right_labels))\n    if best_gain == 0:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature, best_threshold, left_majority_label, right_majority_label)\ndef entropy(counts):\n    probabilities = counts / np.sum(counts)\n    probabilities = probabilities[probabilities > 0]\n    return -np.sum(probabilities * np.log2(probabilities))"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value at column *feature_i* is greater than or equal to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value at column *feature_i* is exactly equal to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    (subset1, subset2) = ([], [])\n    for sample in X:\n        if isinstance(threshold, (int, float)) and sample[feature_i] >= threshold or (isinstance(threshold, str) and sample[feature_i] == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X_array = np.array(X)\n    if isinstance(threshold, (int, float)):\n        subset1 = X_array[X_array[:, feature_i] >= threshold].tolist()\n        subset2 = X_array[X_array[:, feature_i] < threshold].tolist()\n    else:\n        subset1 = X_array[X_array[:, feature_i] == threshold].tolist()\n        subset2 = X_array[X_array[:, feature_i] != threshold].tolist()\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    X = np.array(X)\n    (subset1, subset2) = ([], [])\n    for x in X:\n        if isinstance(threshold, (int, float)):\n            if x[feature_i] >= threshold:\n                subset1.append(x.tolist())\n            else:\n                subset2.append(x.tolist())\n        elif x[feature_i] == threshold:\n            subset1.append(x.tolist())\n        else:\n            subset2.append(x.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold].tolist() if isinstance(threshold, (int, float)) else X[X[:, feature_i] == threshold].tolist()\n    subset2 = X[X[:, feature_i] < threshold].tolist() if isinstance(threshold, (int, float)) else X[X[:, feature_i] != threshold].tolist()\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold].tolist()\n    subset2 = X[X[:, feature_i] < threshold].tolist()\n    return [subset1, subset2]\nX = np.array([[1, 'A'], [2, 'B'], [3, 'A'], [4, 'C']])"}
{"task_id": 452, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold].tolist()\n    subset2 = X[X[:, feature_i] < threshold].tolist()\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X_np = np.array(X)\n    threshold_mask = X_np[:, feature_i] >= threshold if isinstance(threshold, (int, float)) else X_np[:, feature_i] == threshold\n    subset1 = X_np[threshold_mask].tolist()\n    subset2 = X_np[~threshold_mask].tolist()\n    result = [subset1, subset2]\n    return result"}
{"task_id": 452, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold: int | float | str) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] == threshold]\n    subset2 = X[X[:, feature_i] < threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]"}
{"task_id": 452, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    X = np.array(X)\n    if isinstance(threshold, str):\n        subset1 = X[X[:, feature_i] == threshold].tolist()\n        subset2 = X[X[:, feature_i] != threshold].tolist()\n    else:\n        subset1 = X[X[:, feature_i] >= threshold].tolist()\n        subset2 = X[X[:, feature_i] < threshold].tolist()\n    return [subset1, subset2]\nX = np.array([[1, 'A'], [2, 'B'], [3, 'A'], [4, 'C']])"}
{"task_id": 452, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X1 = []\n    X2 = []\n    if isinstance(threshold, (int, float)):\n        for sample in X:\n            if sample[feature_i] >= threshold:\n                X1.append(sample)\n            else:\n                X2.append(sample)\n    else:\n        for sample in X:\n            if sample[feature_i] == threshold:\n                X1.append(sample)\n            else:\n                X2.append(sample)\n    return [X1.tolist(), X2.tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    Q = Q.tolist()\n    Q_next = Q_next.tolist()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        Q[i][actions[i]] = target\n    return [[round(num, 4) for num in sublist] for sublist in Q]"}
{"task_id": 453, "completion_id": 1, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            y[i, actions[i]] = rewards[i]\n        else:\n            y[i, actions[i]] = rewards[i] + gamma * max(Q_next[i])\n    y = np.round(y, 4).tolist()\n    return y"}
{"task_id": 453, "completion_id": 2, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    train_targets = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.amax(Q_next[i])\n        train_targets[i][actions[i]] = target\n    return np.round(train_targets, 4).tolist()"}
{"task_id": 453, "completion_id": 3, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if any([len(Q) != len(Q_next), len(Q) != len(actions), len(Q) != len(rewards), len(Q) != len(dones)]):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q_copy = Q.tolist()\n    Q_next = Q_next.tolist()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        Q_copy[i][actions[i]] = np.round(target, 4)\n    return Q_copy"}
{"task_id": 453, "completion_id": 4, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i][actions[i]] = round(target, 4)\n    return y.tolist()"}
{"task_id": 453, "completion_id": 5, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones) and 0 <= gamma <= 1):\n        return -1\n    Q_out = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        Q_out[i, actions[i]] = target\n    return np.round(Q_out, 4).tolist()"}
{"task_id": 453, "completion_id": 6, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if not 0 <= gamma <= 1 or len(Q) != len(Q_next) or len(Q) != len(actions) or (len(Q) != len(rewards)) or (len(Q) != len(dones)):\n        return -1\n    Q_updated = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n    return np.round(Q_updated, 4).tolist()"}
{"task_id": 453, "completion_id": 7, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not len(actions) == len(rewards) == len(dones) == len(Q) == len(Q_next):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = []\n    for i in range(len(Q)):\n        y_i = list(Q[i])\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y_i[actions[i]] = target\n        y_i = [round(q, 4) for q in y_i]\n        y.append(y_i)\n    return y"}
{"task_id": 453, "completion_id": 8, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if Q.shape[0] != len(actions) or Q.shape[0] != len(rewards) or Q.shape[0] != len(dones) or (gamma < 0 or gamma > 1):\n        return -1\n    Q_list = Q.tolist()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        Q_list[i][actions[i]] = round(target, 4)\n    return Q_list"}
{"task_id": 453, "completion_id": 9, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if len(Q) != len(Q_next) or len(Q_next) != len(actions) or len(actions) != len(rewards) or (len(rewards) != len(dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    y = np.copy(Q)\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = round(target, 4)\n    return y.tolist()"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) or min(labels) < 0:\n        return -1\n    result = [[0] * num_classes for _ in labels]\n    for (i, label) in enumerate(labels):\n        result[i][label] = 1\n    return result"}
{"task_id": 458, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = labels.max() + 1\n    elif num_classes < labels.max() + 1:\n        return -1\n    one_hot = np.zeros((labels.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(labels.shape[0]), labels] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not isinstance(labels, (list, tuple, np.ndarray)) or np.ndim(labels) != 1:\n        raise ValueError('labels must be 1-dimensional')\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if min(labels) < 0 or num_classes < max(labels) + 1:\n        return -1\n    result = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        result[i][label] = 1\n    return result"}
{"task_id": 458, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not num_classes:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1 or any((n < 0 for n in labels)):\n        return -1\n    res = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        res[i][label] = 1\n    return res\nlabels = [0, 2, -1, 1]\nnum_classes = 3"}
{"task_id": 458, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if any((label < 0 for label in labels)):\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if any((label >= num_classes for label in labels)):\n        return -1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    for (i, label) in enumerate(labels):\n        one_hot[i, label] = 1\n    one_hot_list = one_hot.tolist()\n    return one_hot_list\nlabels = [0, 1, 2, 5]\nnum_classes = 5"}
{"task_id": 458, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as ``max(labels) + 1``.\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if max(labels) >= num_classes or min(labels) < 0:\n        return -1\n    return [[1 if j == i else 0 for j in range(num_classes)] for i in labels]"}
{"task_id": 458, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Parameters:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = list(labels)\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if any((label < 0 or label >= num_classes for label in labels)):\n        return -1\n    one_hot_vectors = [[0] * num_classes for _ in labels]\n    for (i, label) in enumerate(labels):\n        one_hot_vectors[i][label] = 1\n    return one_hot_vectors"}
{"task_id": 458, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int=None) -> list[list[int]]:\n    \"\"\"\n        Convert integer class labels to one-hot encoded format.\n\n        Args:\n            labels: 1-D sequence of non-negative integer labels.\n            num_classes: Total number of classes. If None, infer as\n                ``max(labels) + 1``.\n\n        Returns:\n            A list of lists representing the one-hot encoded labels, or -1\n            when the input is invalid (negative label or `num_classes` too\n            small).\n        \"\"\"\n    labels = np.array(labels)\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if np.any(labels < 0) or num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((labels.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(labels.size), labels] = 1\n    one_hot_matrix = one_hot_matrix.tolist()\n    return one_hot_matrix"}
{"task_id": 458, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1 or any((i < 0 for i in labels)):\n        return -1\n    one_hot_labels = []\n    for label in labels:\n        one_hot_label = [0] * num_classes\n        one_hot_label[label] = 1\n        one_hot_labels.append(one_hot_label)\n    return one_hot_labels"}
{"task_id": 458, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    if isinstance(labels, tuple):\n        labels = list(labels)\n    if not num_classes:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1 or any((i < 0 for i in labels)):\n        return -1\n    result = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        result[i][label] = 1\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = y.mean()\n    if n_estimators <= 0:\n        return np.round(np.repeat(predictions, len(y)), 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        unique_x = np.unique(x)\n        if unique_x.shape[0] == 1:\n            residual_sse = (residuals ** 2).sum()\n            split_value = unique_x[0]\n        else:\n            split_values = (unique_x[:-1] + unique_x[1:]) / 2\n            residual_sse = np.zeros_like(split_values, dtype=float)\n            residual_mean_left = np.zeros_like(split_values, dtype=float)\n            residual_mean_right = np.zeros_like(split_values, dtype=float)\n            for (i, t) in enumerate(split_values):\n                left_mask = x <= t\n                right_mask = x > t\n                if left_mask.sum() > 0 and right_mask.sum() > 0:\n                    residual_mean_left[i] = residuals[left_mask].mean()\n                    residual_mean_right[i] = residuals[right_mask].mean()\n                    residual_sse[i] = ((residuals[left_mask] - residual_mean_left[i]) ** 2).sum() + ((residuals[right_mask] - residual_mean_right[i]) ** 2).sum()\n                else:\n                    residual_sse[i] = np.inf\n            best_split = np.argmin(residual_sse)\n            split_value = split_values[best_split]\n            v_l = residual_mean_left[best_split]\n            v_r = residual_mean_right[best_split]\n        stump_predictions = np.where(x <= split_value, v_l, v_r)\n        predictions += learning_rate * stump_predictions\n    return np.round(predictions, 4).tolist()\nx = [1, 2, 3, 4, 5]\ny = [5, 7, 9, 11, 13]"}
{"task_id": 461, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    prediction = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - prediction\n        split_values = np.unique(x)\n        split_values.sort()\n        stump_prediction = np.nan\n        for t in split_values[:-1]:\n            left_mask = x <= t\n            right_mask = ~left_mask\n            left_residuals = residuals[left_mask]\n            right_residuals = residuals[right_mask]\n            left_sse = np.sum(left_residuals ** 2)\n            right_sse = np.sum(right_residuals ** 2)\n            if left_sse <= right_sse or np.sum(left_mask) == 0:\n                stump_prediction = np.where(left_mask, np.mean(left_residuals), prediction)\n                break\n            else:\n                stump_prediction = np.where(right_mask, np.mean(right_residuals), prediction)\n        prediction += learning_rate * stump_prediction\n    return np.round(prediction, 4).tolist()"}
{"task_id": 461, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.mean(y)\n    if n_estimators <= 0:\n        return np.round(np.full(y.shape, y_pred), 4).tolist()\n    x_uniq = np.unique(x)\n    if len(x_uniq) == 1:\n        return np.round(np.full(y.shape, y_pred), 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        rss_best = np.inf\n        split = (None, None, None)\n        for t in x_uniq[:-1]:\n            mask = x <= t\n            if not np.any(mask) or not np.any(~mask):\n                continue\n            (y_L, y_R) = (residuals[mask], residuals[~mask])\n            (v_L, v_R) = (np.mean(y_L), np.mean(y_R))\n            rss = np.sum((y_L - v_L) ** 2) + np.sum((y_R - v_R) ** 2)\n            if rss < rss_best:\n                rss_best = rss\n                split = (t, v_L, v_R)\n        (t, v_L, v_R) = split\n        y_pred += learning_rate * np.where(x <= t, v_L, v_R)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(x, y, n_estimators=200, learning_rate=0.5):\n    (x, y) = (np.array(x), np.array(y))\n    initial_prediction = np.mean(y)\n    preds = np.full_like(y, initial_prediction)\n    if n_estimators <= 0:\n        return np.round(preds, 4).tolist()\n    for _ in range(n_estimators):\n        resids = y - preds\n        unique_x_vals = np.unique(x.round(4))\n        if unique_x_vals.shape[0] == 1:\n            split_value = unique_x_vals[0]\n            mean_resid_left = resids.mean()\n            mean_resid_right = mean_resid_left\n        else:\n            min_sse = np.inf\n            for t in unique_x_vals[:-1]:\n                mask_left = x <= t\n                mask_right = x > t\n                if np.sum(mask_left) == 0 or np.sum(mask_right) == 0:\n                    continue\n                (mean_resid_left, mean_resid_right) = (resids[mask_left].mean(), resids[mask_right].mean())\n                sse = np.sum((mean_resid_left - resids[mask_left]) ** 2) + np.sum((mean_resid_right - resids[mask_right]) ** 2)\n                if sse < min_sse:\n                    min_sse = sse\n                    split_value = t\n                    best_mean_resid_left = mean_resid_left\n                    best_mean_resid_right = mean_resid_right\n            if min_sse == np.inf:\n                split_value = unique_x_vals[0]\n                best_mean_resid_left = resids.mean()\n                best_mean_resid_right = best_mean_resid_left\n        mask_left = x <= split_value\n        mask_right = x > split_value\n        stump_preds = preds.copy()\n        stump_preds[mask_left] = best_mean_resid_left\n        stump_preds[mask_right] = best_mean_resid_right\n        preds += learning_rate * stump_preds\n    return np.round(preds, 4).tolist()"}
{"task_id": 461, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    preds = np.full_like(y, fill_value=y.mean(), dtype=float)\n    residuals = y - preds\n    for _ in range(n_estimators):\n        best_SSE = np.inf\n        n_features = None\n        thresh = None\n        left_mean = None\n        right_mean = None\n        for j in np.unique(x):\n            left_mask = x <= j\n            right_mask = x > j\n            SSE_left = np.square(residuals[left_mask]).sum()\n            SSE_right = np.square(residuals[right_mask]).sum()\n            SSE = SSE_left + SSE_right\n            if SSE < best_SSE:\n                best_SSE = SSE\n                left_mean = residuals[left_mask].mean()\n                right_mean = residuals[right_mask].mean()\n                n_features = j\n                thresh = j\n        if thresh is None:\n            break\n        left_idxs = x <= thresh\n        right_idxs = x > thresh\n        preds[left_idxs] += learning_rate * left_mean\n        preds[right_idxs] += learning_rate * right_mean\n        residuals = y - preds\n    return np.round(preds, 4).tolist()"}
{"task_id": 461, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    pred = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(pred, 4).tolist()\n    residuals = y - pred\n    for _ in range(n_estimators):\n        unique_x = np.sort(np.unique(x))\n        split_values = [(unique_x[i] + unique_x[i + 1]) / 2.0 for i in range(len(unique_x) - 1)]\n        best_split = (float('inf'), None, None, None)\n        for t in split_values:\n            left_inds = x <= t\n            right_inds = x > t\n            if np.any(left_inds) and np.any(right_inds):\n                v_L = np.mean(residuals[left_inds])\n                v_R = np.mean(residuals[right_inds])\n                sse = np.sum((residuals[left_inds] - v_L) ** 2) + np.sum((residuals[right_inds] - v_R) ** 2)\n                if sse < best_split[0]:\n                    best_split = (sse, t, v_L, v_R)\n        if best_split[1] is not None:\n            pred[x <= best_split[1]] += learning_rate * best_split[2]\n            pred[x > best_split[1]] += learning_rate * best_split[3]\n        else:\n            pred += learning_rate * np.mean(residuals)\n        residuals = y - pred\n    return np.round(pred, 4).tolist()"}
{"task_id": 461, "completion_id": 6, "solution": "import numpy as np\nimport collections\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    X = np.array(x)\n    Y = np.array(y)\n    N = len(Y)\n    y_hat = np.mean(Y) * np.ones(N)\n    r = Y.copy()\n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    for _ in range(n_estimators):\n        r = Y - y_hat\n        stump_values = collections.defaultdict(tuple)\n        unique_x = np.unique(X)\n        for t in unique_x[:-1]:\n            mask_left = X <= t\n            mask_right = X > t\n            if np.sum(mask_left) == 0 or np.sum(mask_right) == 0:\n                continue\n            v_L = np.mean(r[mask_left])\n            v_R = np.mean(r[mask_right])\n            r_left = y_hat[mask_left] + learning_rate * v_L\n            r_right = y_hat[mask_right] + learning_rate * v_R\n            SSE_left = np.sum((Y[mask_left] - r_left) ** 2)\n            SSE_right = np.sum((Y[mask_right] - r_right) ** 2)\n            weighted_SSE = SSE_left + SSE_right\n            stump_values[weighted_SSE] = (t, v_L, v_R)\n        if not stump_values:\n            v_L = np.mean(r)\n            stump_values[float('inf')] = (float('inf'), v_L, v_L)\n        (best_t, best_v_L, best_v_R) = stump_values[min(stump_values.keys())]\n        if best_t < unique_x[-1]:\n            y_hat[X <= best_t] += learning_rate * best_v_L\n            y_hat[X > best_t] += learning_rate * best_v_R\n        else:\n            y_hat += learning_rate * best_v_L\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 461, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return np.round([np.mean(y)] * len(x), 4).tolist()\n    x = np.array(x)\n    y = np.array(y)\n    init_prediction = np.mean(y)\n    preds = init_prediction\n    residuals = y - init_prediction\n    for _ in range(n_estimators):\n        unique_x = np.unique(x)\n        if unique_x.shape[0] == 1:\n            preds += learning_rate * np.mean(residuals)\n        else:\n            unique_x = np.sort(unique_x)\n            min_sse = np.inf\n            best_split = unique_x[0] - 1\n            best_side_means = [0.0, 0.0]\n            for t in unique_x[:-1]:\n                left_mask = x <= t\n                right_mask = x > t\n                if np.any(left_mask) and np.any(right_mask):\n                    v_L = np.mean(residuals[left_mask])\n                    v_R = np.mean(residuals[right_mask])\n                    sse = np.sum((residuals[left_mask] - v_L) ** 2) + np.sum((residuals[right_mask] - v_R) ** 2)\n                    if sse < min_sse:\n                        min_sse = sse\n                        best_split = t\n                        best_side_means = [v_L, v_R]\n            if best_split != unique_x[0] - 1:\n                preds_update = np.where(x <= best_split, best_side_means[0], best_side_means[1])\n                preds += learning_rate * preds_update\n        residuals = y - preds\n    return np.round(preds, 4).tolist()"}
{"task_id": 461, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    initial_prediction = np.mean(y)\n    if n_estimators <= 0:\n        return initial_prediction\n    predictions = np.full_like(y, initial_prediction, dtype=float)\n    residuals = y - initial_prediction\n    for _ in range(n_estimators):\n        unique_x = np.sort(np.unique(x))\n        candidate_splits = (unique_x[:-1] + unique_x[1:]) / 2\n        (best_split_index, best_split_residuals) = (None, None)\n        min_split_sse = np.inf\n        for t in candidate_splits:\n            left_mask = x <= t\n            right_mask = ~left_mask\n            if np.any(left_mask) and np.any(right_mask):\n                split_residuals = np.array([np.mean(residuals[left_mask]), np.mean(residuals[right_mask])])\n                split_sse = np.sum((residuals[left_mask] - split_residuals[0]) ** 2) + np.sum((residuals[right_mask] - split_residuals[1]) ** 2)\n                if split_sse < min_split_sse:\n                    best_split_index = x <= t\n                    best_split_residuals = split_residuals\n                    min_split_sse = split_sse\n        if best_split_index is not None:\n            residuals[best_split_index] = best_split_residuals[0]\n            residuals[~best_split_index] = best_split_residuals[1]\n            predictions += learning_rate * residuals\n    return np.round(predictions, 4).tolist()\nx = [2, 5, 7, 8, 10]\ny = [1, 2, 3, 4, 5]"}
{"task_id": 461, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    (x, y) = (np.array(x), np.array(y))\n    mean_y = np.mean(y)\n    preds = np.full_like(y, fill_value=mean_y, dtype=float)\n    if n_estimators <= 0:\n        return np.round(preds, 4).tolist()\n    residuals = y - preds\n    unique_x = np.unique(x)\n    if len(unique_x) == 1:\n        update = np.mean(residuals)\n        preds += learning_rate * update\n        return np.round(preds, 4).tolist()\n    for _ in range(n_estimators):\n        if np.all(residuals == 0):\n            break\n        (min_sse, split_value, update) = (np.inf, None, None)\n        for t in unique_x[:-1]:\n            (left_mask, right_mask) = (x <= t, x > t)\n            (left_residuals, right_residuals) = (residuals[left_mask], residuals[right_mask])\n            if len(left_residuals) == 0 or len(right_residuals) == 0:\n                continue\n            (l_mean, r_mean) = (np.mean(left_residuals), np.mean(right_residuals))\n            residual_sse = np.square(left_residuals - l_mean).sum() + np.square(right_residuals - r_mean).sum()\n            if residual_sse < min_sse:\n                (min_sse, split_value, update) = (residual_sse, t, np.full_like(y, fill_value=l_mean))\n                update[x > split_value] = r_mean\n        preds += learning_rate * update\n        residuals = y - preds\n    return np.round(preds, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        next_q_value = 0\n    else:\n        next_q_values = q_table[next_state]\n        expectation = 0\n        best_action = np.argmax(next_q_values)\n        for a in range(num_actions):\n            if a == best_action:\n                pi = 1 - epsilon + epsilon / num_actions\n            else:\n                pi = epsilon / num_actions\n            expectation += pi * next_q_values[a]\n        next_q_value = expectation\n    target = reward + gamma * next_q_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 1, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q-function.\n    \n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        expectation = sum(((1 - epsilon + epsilon / num_actions if q_table[next_state][a] == max(q_table[next_state]) else epsilon / num_actions) * q_table[next_state][a] for a in range(num_actions)))\n        target = reward + gamma * expectation\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(value, 4) for value in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 2, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    if next_state is not None:\n        expectation = sum([(1 - epsilon + epsilon / len(q_table[next_state])) * q if i == np.argmax(q_table[next_state]) else epsilon / len(q_table[next_state]) * q for (i, q) in enumerate(q_table[next_state])])\n        target = reward + gamma * expectation\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 3, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n\n    def expectation(q_values):\n        num_actions = len(q_values)\n        max_value = max(q_values)\n        pi = [epsilon / num_actions if value != max_value else 1 - epsilon + epsilon / num_actions for value in q_values]\n        return sum([pi[a] * q_values[a] for a in range(num_actions)])\n    if next_state is None:\n        target = reward\n    else:\n        target = reward + gamma * expectation(q_table[next_state])\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(entry, 4) for entry in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 4, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    if next_state is None:\n        maximum_future_reward = 0.0\n    else:\n        maximum_future_reward = max(q_table[next_state])\n    target = reward + gamma * max(q_table[next_state]) if next_state else 0.0\n    greedy_prob = 1 - epsilon + epsilon / len(q_table[state]) if q_table[state].index(max(q_table[state])) == action else epsilon / len(q_table[state])\n    expectation = max(q_table[next_state]) * greedy_prob if next_state else 0.0\n    updated_q_value = q_table[state][action] + lr * (target - q_table[state][action])\n    q_table[state][action] = round(updated_q_value, 4)\n    return q_table"}
{"task_id": 471, "completion_id": 5, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        best_next_action = np.argmax(q_table[next_state])\n        expectation = sum((q_table[next_state][a] * (1 - epsilon + epsilon / num_actions if a == best_next_action else epsilon / num_actions) for a in range(num_actions)))\n    else:\n        expectation = 0\n    target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(val, 4) for val in row] for row in q_table]"}
{"task_id": 471, "completion_id": 6, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q_value = max(q_table[next_state])\n        expectation = 0.0\n        for a in range(num_actions):\n            if q_table[next_state][a] == max_q_value:\n                policy = 1 - epsilon + epsilon / num_actions\n            else:\n                policy = epsilon / num_actions\n            expectation += policy * q_table[next_state][a]\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(x, 4) for x in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 7, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        expected_future_value = 0\n    else:\n        max_a = max(q_table[next_state])\n        num_greedy = sum([1 for a in range(num_actions) if q_table[next_state][a] == max_a])\n        non_greedy_prob = epsilon / num_actions\n        greedy_prob = 1 - epsilon + epsilon / num_greedy\n        expected_future_value = sum([q_table[next_state][a] * (greedy_prob if q_table[next_state][a] == max_a else non_greedy_prob) for a in range(num_actions)])\n    target = reward + gamma * expected_future_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(val, 4) for val in q_table[s]] for s in range(len(q_table))]\n    return q_table"}
{"task_id": 471, "completion_id": 8, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_next_q_value = max(q_table[next_state])\n        greedy_actions = [idx for (idx, value) in enumerate(q_table[next_state]) if value == max_next_q_value]\n        expectation = 0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expectation += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(q, 4) for q in q_list] for q_list in q_table]"}
{"task_id": 471, "completion_id": 9, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        target = reward\n    else:\n        action_values = q_table[next_state]\n        max_action_value = max(action_values)\n        greedy_actions = [i for (i, q) in enumerate(action_values) if q == max_action_value]\n        num_actions = len(action_values)\n        expected_future_value = sum(((1.0 - epsilon) * ((a in greedy_actions) * q / len(greedy_actions) + (a not in greedy_actions) * epsilon / num_actions) for (a, q) in enumerate(action_values)))\n        target = reward + gamma * expected_future_value\n    updated_value = round(q_table[state][action] + lr * (target - q_table[state][action]), 4)\n    q_table[state][action] = updated_value\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        for _ in range(n_train):\n            x = round(random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4)\n            y = round(random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10), 4)\n            label = round((i - 0.5) * 2, 4)\n            X_train.append([x, y])\n            Y_train.append(label)\n    for i in range(m):\n        for _ in range(n_val):\n            x = round(random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4)\n            y = round(random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10), 4)\n            label = round((i - 0.5) * 2, 4)\n            X_val.append([x, y])\n            Y_val.append(label)\n    X_train = np.array(X_train)\n    Y_train = np.array(Y_train)\n    X_val = np.array(X_val)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 1, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    Y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    Y_val = np.zeros(m * n_val)\n    for i in range(m):\n        lower_x = np.floor(i / 2) * 10 + 1\n        upper_x = np.floor(i / 2) * 10 + 9\n        lower_y = i % 2 * interval + 1\n        upper_y = i % 2 * interval + 9\n        for j in range(n_train):\n            X_train[i * n_train + j, :] = [np.random.uniform(lower_x, upper_x), np.random.uniform(lower_y, upper_y)]\n            Y_train[i * n_train + j] = (i - 0.5) * 2\n        for j in range(n_val):\n            X_val[i * n_val + j, :] = [np.random.uniform(lower_x, upper_x), np.random.uniform(lower_y, upper_y)]\n            Y_val[i * n_val + j] = (i - 0.5) * 2\n    return (np.round(X_train, 4), np.round(X_val, 4), np.round(Y_train, 4), np.round(Y_val, 4))"}
{"task_id": 474, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    Y_train = np.zeros(m * n_train)\n    Y_val = np.zeros(m * n_val)\n    for i in range(m):\n        X_train[i * n_train:(i + 1) * n_train, 0] = np.round(np.random.uniform(low=np.floor(i / 2) + 0.1, high=np.floor(i / 2) + 0.9, size=n_train), 4)\n        X_train[i * n_train:(i + 1) * n_train, 1] = np.round(np.random.uniform(low=i % 2 * interval + 0.1, high=i % 2 * interval + 0.9, size=n_train), 4)\n        Y_train[i * n_train:(i + 1) * n_train] = (i - 0.5) * 2\n        X_val[i * n_val:(i + 1) * n_val, 0] = np.round(np.random.uniform(low=np.floor(i / 2) + 0.1, high=np.floor(i / 2) + 0.9, size=n_val), 4)\n        X_val[i * n_val:(i + 1) * n_val, 1] = np.round(np.random.uniform(low=i % 2 * interval + 0.1, high=i % 2 * interval + 0.9, size=n_val), 4)\n        Y_val[i * n_val:(i + 1) * n_val] = (i - 0.5) * 2\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_train = np.round([np.random.uniform(i // 2 * 10 + 1, i // 2 * 10 + 9) for _ in range(n_train)], 4)\n        y_train = np.round([np.random.uniform(i % 2 * interval + 1, i % 2 * interval + 9) for _ in range(n_train)], 4)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, (i - 0.5) * 2))\n        x_val = np.round([np.random.uniform(i // 2 * 10 + 1, i // 2 * 10 + 9) for _ in range(n_val)], 4)\n        y_val = np.round([np.random.uniform(i % 2 * interval + 1, i % 2 * interval + 9) for _ in range(n_val)], 4)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, (i - 0.5) * 2))\n    return (np.concatenate(X_train), np.concatenate(X_val), np.concatenate(Y_train), np.concatenate(Y_val))"}
{"task_id": 474, "completion_id": 4, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    (X_train, X_val, Y_train, Y_val) = ([], [], [], [])\n    for i in range(m):\n        X = np.round(np.random.uniform(low=(np.floor(i / 2) + 0.1) * 10, high=(np.floor(i / 2) + 0.9) * 10, size=(n_train, 2)), 4)\n        X_val_temp = np.round(np.random.uniform(low=(i % 2 * interval + 0.1) * 10, high=(i % 2 * interval + 0.9) * 10, size=(n_val, 2)), 4)\n        Y = np.full(n_train, (i - 0.5) * 2.0)[:, np.newaxis]\n        Y_val_temp = np.full(n_val, (i - 0.5) * 2.0)[:, np.newaxis]\n        X_train.append(X)\n        X_val.append(X_val_temp)\n        Y_train.append(Y)\n        Y_val.append(Y_val_temp)\n    X_train = np.concatenate(X_train, axis=0)\n    X_val = np.concatenate(X_val, axis=0)\n    Y_train = np.concatenate(Y_train, axis=0).ravel()\n    Y_val = np.concatenate(Y_val, axis=0).ravel()\n    return (X_train, X_val, Y_train, Y_val)\nm = 10\nn_train = 50\nn_val = 10\ninterval = 1\nseed = 0"}
{"task_id": 474, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, Y_train, X_val, Y_val) = ([], [], [], [])\n    for i in range(m):\n        for _ in range(n_train):\n            X_train.append((random.uniform(np.floor(i / 2) + 0.1, np.floor(i / 2) + 0.9), random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9)))\n            Y_train.append((i - 0.5) * 2)\n        for _ in range(n_val):\n            X_val.append((random.uniform(np.floor(i / 2) + 0.1, np.floor(i / 2) + 0.9), random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9)))\n            Y_val.append((i - 0.5) * 2)\n    return (np.round(X_train, 4), np.round(X_val, 4), np.round(Y_train, 4), np.round(Y_val, 4))"}
{"task_id": 474, "completion_id": 6, "solution": "import numpy as np\nimport random"}
{"task_id": 474, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    Y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    Y_val = np.zeros(m * n_val)\n    for i in range(m):\n        x_train = np.round(np.random.uniform(low=int(np.floor(i / 2)) + 0.1, high=int(np.floor(i / 2)) + 0.9, size=(n_train, 2)), 4)\n        y_train = np.round(i % 2 * interval + 0.1, 4)\n        label_train = np.ones(n_train) * (i * 2 - 1)\n        X_train[i * n_train:(i + 1) * n_train, :] = x_train\n        X_train[i * n_train:(i + 1) * n_train, 1] += y_train\n        Y_train[i * n_train:(i + 1) * n_train] = label_train\n        x_val = np.round(np.random.uniform(low=int(np.floor(i / 2)) + 0.1, high=int(np.floor(i / 2)) + 0.9, size=(n_val, 2)), 4)\n        y_val = np.round(i % 2 * interval + 0.1, 4)\n        label_val = np.ones(n_val) * (i * 2 - 1)\n        X_val[i * n_val:(i + 1) * n_val, :] = x_val\n        X_val[i * n_val:(i + 1) * n_val, 1] += y_val\n        Y_val[i * n_val:(i + 1) * n_val] = label_val\n    return (np.round(X_train, 4), np.round(X_val, 4), np.round(Y_train, 4), np.round(Y_val, 4))"}
{"task_id": 474, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed:\n        random.seed(seed)\n    x_train = []\n    y_train = []\n    x_val = []\n    y_val = []\n    for i in range(m):\n        x = np.round(np.random.uniform(low=(i // 2 + 0.1) * 10, high=(i // 2 + 0.9) * 10, size=n_train), 4)\n        y = np.round(np.random.uniform(low=i % 2 * interval + 0.1, high=i % 2 * interval + 0.9, size=n_train), 4)\n        x_train.append(np.column_stack((x, y)))\n        y_train.append(np.full((n_train,), (i - 0.5) * 2))\n        x = np.round(np.random.uniform(low=(i // 2 + 0.1) * 10, high=(i // 2 + 0.9) * 10, size=n_val), 4)\n        y = np.round(np.random.uniform(low=i % 2 * interval + 0.1, high=i % 2 * interval + 0.9, size=n_val), 4)\n        x_val.append(np.column_stack((x, y)))\n        y_val.append(np.full((n_val,), (i - 0.5) * 2))\n    return (np.concatenate(x_train), np.concatenate(x_val), np.concatenate(y_train), np.concatenate(y_val))"}
{"task_id": 474, "completion_id": 9, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min_train = np.floor(i / 2) * 10 + 1\n        x_max_train = x_min_train + 8\n        y_min_train = i % 2 * interval + 1\n        y_max_train = y_min_train + 8\n        x_min_val = np.floor(i / 2) * 10 + 2\n        x_max_val = x_min_val + 6\n        y_min_val = i % 2 * interval + 2\n        y_max_val = y_min_val + 6\n        X_train.append(np.random.uniform(x_min_train, x_max_train, (n_train, 2)))\n        Y_train.append(np.full(n_train, 2 * (i % 2 * 2 - 1)))\n        X_val.append(np.random.uniform(x_min_val, x_max_val, (n_val, 2)))\n        Y_val.append(np.full(n_val, 2 * (i % 2 * 2 - 1)))\n    (X_train, Y_train, X_val, Y_val) = map(np.concatenate, (X_train, Y_train, X_val, Y_val))\n    (X_train, X_val) = map(lambda x: np.round(x, 4), (X_train, X_val))\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"\n    Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * np.power(grad, 2)\n    m_hat = m_t / (1 - np.power(b1, t))\n    v_hat = v_t / (1 - np.power(b2, t))\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``alpha``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` - updated parameters (same shape as ``w``)\n        * ``m_new`` - updated first moment\n        * ``v_new`` - updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - np.power(b1, t))\n    v_hat = v_new / (1 - np.power(b2, t))\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    (w, grad) = (np.asarray(w), np.asarray(grad))\n    if m_prev is None or v_prev is None:\n        (m_prev, v_prev) = (np.zeros_like(grad), np.zeros_like(grad))\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - np.power(b1, t))\n    v_hat = v_new / (1 - np.power(b2, t))\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    arm_counters = np.zeros(num_arms)\n    arm_values = np.full(num_arms, ev_prior)\n    for (t, reward_list) in enumerate(rewards):\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.randint(0, num_arms)\n        else:\n            chosen_arm = np.random.choice(np.flatnonzero(arm_values == arm_values.max()))\n        reward = reward_list[chosen_arm]\n        arm_values[chosen_arm] += (reward - arm_values[chosen_arm]) / (arm_counters[chosen_arm] + 1)\n        arm_counters[chosen_arm] += 1\n    return [round(value, 4) for value in arm_values]"}
{"task_id": 479, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    evs = [ev_prior for _ in range(N)]\n    counts = [0 for _ in range(N)]\n    for time_step in rewards:\n        if np.random.random() < epsilon:\n            arm = np.random.randint(0, N)\n        else:\n            max_ev = max(evs)\n            arm = evs.index(max_ev)\n        reward = time_step[arm]\n        counts[arm] += 1\n        evs[arm] += (reward - evs[arm]) / counts[arm]\n    return [round(ev, 4) for ev in evs]"}
{"task_id": 479, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Optional\nimport numpy as np\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    evs = [ev_prior for _ in range(N)]\n    counts = [0 for _ in range(N)]\n    for step in rewards:\n        if np.random.random() < epsilon:\n            arm = np.random.choice(range(N))\n        else:\n            max_evs = [i for (i, ev) in enumerate(evs) if ev == max(evs)]\n            arm = np.random.choice(max_evs)\n        r = step[arm]\n        counts[arm] += 1\n        evs[arm] += (r - evs[arm]) / counts[arm]\n    return [round(ev, 4) for ev in evs]"}
{"task_id": 479, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\"\"\"\n    num_arms = len(rewards[0])\n    if seed is not None:\n        np.random.seed(seed)\n    arm_value_estimates = [ev_prior] * num_arms\n    arm_pull_counts = [0] * num_arms\n    for (t, rewards_at_t) in enumerate(rewards):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(0, num_arms)\n        else:\n            max_estimate = max(arm_value_estimates)\n            chosen_arms = [i for (i, estimate) in enumerate(arm_value_estimates) if estimate == max_estimate]\n            chosen_arm = min(chosen_arms)\n        reward = rewards_at_t[chosen_arm]\n        arm_pull_counts[chosen_arm] += 1\n        arm_value_estimates[chosen_arm] += (reward - arm_value_estimates[chosen_arm]) / arm_pull_counts[chosen_arm]\n    return [round(estimate, 4) for estimate in arm_value_estimates]\nrewards = [[1.0, 2.0, 3.0], [2.0, 3.0, 1.0], [3.0, 1.0, 2.0]]"}
{"task_id": 479, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    np.random.seed(seed)\n    N = len(rewards[0])\n    arm_values = [ev_prior for _ in range(N)]\n    pull_counters = [0 for _ in range(N)]\n    for t in range(len(rewards)):\n        if np.random.random() < epsilon:\n            arm_chosen = np.random.choice(range(N))\n        else:\n            max_val = max(arm_values)\n            arm_chosen = np.random.choice([i for (i, v) in enumerate(arm_values) if v == max_val])\n        reward = rewards[t][arm_chosen]\n        pull_counters[arm_chosen] += 1\n        arm_values[arm_chosen] = arm_values[arm_chosen] + (reward - arm_values[arm_chosen]) / pull_counters[arm_chosen]\n    return [round(v, 4) for v in arm_values]"}
{"task_id": 479, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    estimates = np.full(n_arms, ev_prior)\n    pull_counts = np.zeros(n_arms)\n    for (t, reward_for_each_arm) in enumerate(rewards):\n        if np.random.random() < epsilon:\n            arm = np.random.randint(n_arms)\n        else:\n            max_indices = np.nonzero(estimates == np.max(estimates))[0]\n            arm = np.min(max_indices)\n        reward = reward_for_each_arm[arm]\n        pull_counts[arm] += 1\n        estimates[arm] += (reward - estimates[arm]) / pull_counts[arm]\n    return [round(estimate, 4) for estimate in estimates]"}
{"task_id": 479, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"\n    Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    rewards = np.array(rewards)\n    pull_counts = np.zeros(N)\n    estimated_values = np.zeros(N) + ev_prior\n    for reward in rewards:\n        if np.random.random() < epsilon:\n            arm = np.random.choice(N)\n        else:\n            arm = np.random.choice(np.flatnonzero(estimated_values == estimated_values.max()))\n        pull_counts[arm] += 1\n        estimated_values[arm] += (reward[arm] - estimated_values[arm]) / pull_counts[arm]\n    return [round(value, 4) for value in estimated_values]"}
{"task_id": 479, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    pull_counters = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() <= epsilon:\n            arm = np.random.choice(N)\n        else:\n            max_estimate = max(value_estimates)\n            best_arms = [arm for arm in range(N) if value_estimates[arm] == max_estimate]\n            arm = np.random.choice(best_arms)\n        reward = rewards[t][arm]\n        pull_counters[arm] += 1\n        value_estimates[arm] += (reward - value_estimates[arm]) / pull_counters[arm]\n    return [round(estimate, 4) for estimate in value_estimates]"}
{"task_id": 479, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    np.random.seed(seed)\n    arms = len(rewards[0])\n    mean_rewards = [ev_prior] * arms\n    pulls = [0] * arms\n    for time_step in rewards:\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.choice(arms)\n        else:\n            max_reward_arms = [i for (i, j) in enumerate(mean_rewards) if j == max(mean_rewards)]\n            chosen_arm = min(max_reward_arms)\n        reward = time_step[chosen_arm]\n        pulls[chosen_arm] += 1\n        mean_rewards[chosen_arm] += (reward - mean_rewards[chosen_arm]) / pulls[chosen_arm]\n    return [round(reward, 4) for reward in mean_rewards]\nrewards = [[1, 2, 1, 1, 3], [2, 2, 1, 1, 1], [3, 2, 1, 2, 1], [4, 2, 2, 2, 1], [0, 1, 1, 1, 1]]"}
{"task_id": 479, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    arm_values = [ev_prior] * N\n    pull_counts = [0] * N\n    for rewards_in_step in rewards:\n        if np.random.uniform() < epsilon:\n            arm = np.random.choice(N)\n        else:\n            max_value = max(arm_values)\n            max_indices = [i for (i, value) in enumerate(arm_values) if value == max_value]\n            arm = min(max_indices)\n        reward = rewards_in_step[arm]\n        pull_counts[arm] += 1\n        arm_values[arm] += (reward - arm_values[arm]) / pull_counts[arm]\n    return [round(estimate, 4) for estimate in arm_values]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\"\"\"\n    if len(data) == 0:\n        return []\n    labels = np.full(len(data), np.inf)\n    cluster_id = 0\n    for i in range(len(data)):\n        if not np.isinf(labels[i]):\n            continue\n        neighbors = region_query(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        labels[i] = cluster_id\n        grow_cluster(data, labels, i, neighbors, cluster_id, eps, min_samples)\n        cluster_id += 1\n    return labels.tolist()\ndef region_query(data, current_point, eps):\n    \"\"\"Find all points within distance `eps` of `points[current_point]`\"\"\"\n    distances = cdist(np.array([data[current_point]]), data)\n    neighbors = np.where(distances[0] < eps)[0]\n    return neighbors"}
{"task_id": 481, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = np.full(n_samples, np.inf)\n    cluster_id = 0\n    for point_id in range(n_samples):\n        if not np.isinf(labels[point_id]):\n            continue\n        neighbors = get_neighbors(data, point_id, eps)\n        if len(neighbors) < min_samples:\n            labels[point_id] = -1\n            continue\n        labels[point_id] = cluster_id\n        cluster_queue = deque(neighbors)\n        while cluster_queue:\n            neighbor_id = cluster_queue.popleft()\n            if labels[neighbor_id] == -1:\n                labels[neighbor_id] = cluster_id\n            if not np.isinf(labels[neighbor_id]):\n                continue\n            labels[neighbor_id] = cluster_id\n            new_neighbors = get_neighbors(data, neighbor_id, eps)\n            if len(new_neighbors) >= min_samples:\n                cluster_queue.extend(new_neighbors)\n        cluster_id += 1\n    return labels.tolist()\ndef get_neighbors(data: np.ndarray, point_id: int, eps: float) -> list[int]:\n    \"\"\"Return the indices of the neighbors of the point with id *point_id*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    point_id : int\n        Id of the point in *data*.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n\n    Returns\n    -------\n    list[int]\n        Indices of the neighbors of the point with id *point_id*.\n    \"\"\"\n    point = data[point_id]\n    distances = np.sqrt(np.sum((data - point) ** 2, axis=1))\n    return np.where(distances <= eps)[0].tolist()"}
{"task_id": 481, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    labels = np.full(data.shape[0], np.inf)\n    cluster_id = 0\n    for p_idx in range(data.shape[0]):\n        if labels[p_idx] != np.inf:\n            continue\n        neighbors = region_query(data, p_idx, eps)\n        if len(neighbors) < min_samples:\n            labels[p_idx] = -1\n        else:\n            labels[p_idx] = cluster_id\n            grow_cluster(data, labels, cluster_id, neighbors, eps, min_samples)\n            cluster_id += 1\n    return labels.tolist()\ndef region_query(data, p_idx, eps):\n    neighbors = []\n    for i in range(data.shape[0]):\n        if np.linalg.norm(data[p_idx] - data[i]) < eps:\n            neighbors.append(i)\n    return neighbors"}
{"task_id": 481, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if not data.any():\n        return []\n    labels = np.full(data.shape[0], np.inf)\n    core_points = {idx for (idx, point) in enumerate(data) if np.sum(np.linalg.norm(data - point, axis=1) <= eps) >= min_samples}\n    cluster_id = 0\n    queue = deque()\n    for (idx, point) in enumerate(data):\n        if labels[idx] != np.inf:\n            continue\n        if idx in core_points:\n            labels[idx] = cluster_id\n            queue.extend((neighbor for neighbor in get_neighbors(data, idx, eps)))\n            while queue:\n                cur_idx = queue.popleft()\n                if labels[cur_idx] == np.inf:\n                    labels[cur_idx] = cluster_id\n                    if cur_idx in core_points:\n                        queue.extend((neighbor for neighbor in get_neighbors(data, cur_idx, eps) if labels[neighbor] == np.inf))\n        else:\n            labels[idx] = -1\n        cluster_id += 1\n    return labels.tolist()\ndef get_neighbors(data: np.ndarray, idx: int, eps: float) -> list[int]:\n    \"\"\"Get indices of points within eps distance of the point at idx.\"\"\"\n    return np.where(np.linalg.norm(data - data[idx], axis=1) <= eps)[0]"}
{"task_id": 481, "completion_id": 4, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\"\"\"\n    cluster_label = 0\n    noise = -1\n    labels = [None] * len(data)\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=-1)\n    for i in range(len(data)):\n        if labels[i] is not None:\n            continue\n        neighbors = np.where(distances[i] <= eps)[0]\n        if len(neighbors) < min_samples:\n            labels[i] = noise\n            continue\n        labels[i] = cluster_label\n        core_samples = set(neighbors)\n        core_samples.remove(i)\n        while core_samples:\n            next_core_sample = core_samples.pop()\n            if labels[next_core_sample] is None:\n                labels[next_core_sample] = cluster_label\n            elif labels[next_core_sample] != noise:\n                continue\n            new_neighbors = np.where(distances[next_core_sample] <= eps)[0]\n            if len(new_neighbors) >= min_samples:\n                new_core_samples = set(new_neighbors) - core_samples\n                core_samples.update(new_core_samples)\n        cluster_label += 1\n    return labels"}
{"task_id": 481, "completion_id": 5, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    cluster_label = 0\n    labels = [0] * len(data)\n    for (point_idx, point) in enumerate(data):\n        if labels[point_idx] != 0:\n            continue\n        neighbors = region_query(data, point, eps)\n        if len(neighbors) < min_samples:\n            labels[point_idx] = -1\n            continue\n        cluster_label += 1\n        labels[point_idx] = cluster_label\n        seed_set = neighbors\n        while len(seed_set) > 0:\n            current_point_idx = seed_set.pop()\n            if labels[current_point_idx] == -1:\n                labels[current_point_idx] = cluster_label\n            if labels[current_point_idx] != 0:\n                continue\n            labels[current_point_idx] = cluster_label\n            current_point_neighbors = region_query(data, data[current_point_idx], eps)\n            if len(current_point_neighbors) >= min_samples:\n                seed_set.update(current_point_neighbors)\n    return labels\ndef region_query(data: np.ndarray, point: np.ndarray, eps: float) -> set[int]:\n    \"\"\"\n    Return the set of indices of all points within eps distance from given point.\n    \"\"\"\n    return set(np.where(np.linalg.norm(data - point, axis=1) < eps)[0])"}
{"task_id": 481, "completion_id": 6, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\nfrom queue import Queue\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    dist_matrix = distance_matrix(data, data)\n    core_points = np.sum(dist_matrix <= eps, axis=1) >= min_samples\n    labels = np.full(len(data), -1, dtype=int)\n    cluster_id = 0\n    for i in range(len(data)):\n        if labels[i] != -1 or not core_points[i]:\n            continue\n        labels[i] = cluster_id\n        pts_queue = Queue()\n        pts_queue.put(i)\n        while not pts_queue.empty():\n            current_pt_id = pts_queue.get()\n            current_pt_neighbors = np.where(dist_matrix[current_pt_id] <= eps)[0]\n            for neighbour_id in current_pt_neighbors:\n                if labels[neighbour_id] == -1:\n                    labels[neighbour_id] = cluster_id\n                if core_points[neighbour_id]:\n                    pts_queue.put(neighbour_id)\n        cluster_id += 1\n    return labels.tolist()"}
{"task_id": 481, "completion_id": 7, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    def dist(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def is_core(point_index):\n        count = 0\n        for point in data:\n            if dist(data[point_index], point) <= eps:\n                count += 1\n        return count >= min_samples\n\n    def is_reachable(point_index, reachable_points):\n        for i in range(0, len(data)):\n            if i != point_index and labels[i] == -1 and (dist(data[i], data[point_index]) <= eps):\n                reachable_points.add(i)\n    for i in range(0, len(data)):\n        if not labels[i] == 0:\n            continue\n        if is_core(i):\n            labels[i] = cluster_id\n            reachable_points = set()\n            is_reachable(i, reachable_points)\n            while len(reachable_points) > 0:\n                r = reachable_points.pop()\n                if not is_core(r):\n                    labels[r] = cluster_id\n                elif labels[r] == -1:\n                    labels[r] = cluster_id\n                    new_reachable_points = set()\n                    is_reachable(r, new_reachable_points)\n                    reachable_points.update(new_reachable_points)\n            cluster_id += 1\n        else:\n            labels[i] = -1\n    return labels"}
{"task_id": 481, "completion_id": 8, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = np.full(len(data), -1)\n    cluster_id = 0\n\n    def get_neighbors(sample_i):\n        distances = np.sqrt(np.sum((data - data[sample_i]) ** 2, axis=1))\n        return set(np.flatnonzero(distances <= eps))\n    for sample_i in range(len(data)):\n        if labels[sample_i] == -1:\n            neighbors = get_neighbors(sample_i)\n            if len(neighbors) >= min_samples:\n                labels[sample_i] = cluster_id\n                while neighbors:\n                    neighbor = neighbors.pop()\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if len(get_neighbors(neighbor)) >= min_samples:\n                            neighbors = neighbors.union(get_neighbors(neighbor))\n                cluster_id += 1\n    return labels.tolist()"}
{"task_id": 481, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    dist_matrix = distance_matrix(data, data)\n    core_points = np.sum(dist_matrix <= eps, axis=1) >= min_samples\n    cluster_assignments = -np.ones_like(core_points, dtype=int)\n    curr_cluster = -1\n    for point_idx in np.where(core_points)[0]:\n        if cluster_assignments[point_idx] == -1:\n            curr_cluster += 1\n            cluster_assignments[point_idx] = curr_cluster\n            neighbors = list(np.where((dist_matrix[point_idx] <= eps) & core_points)[0])\n            neighbors.remove(point_idx)\n            while len(neighbors) > 0:\n                neighbor_idx = neighbors.pop()\n                if cluster_assignments[neighbor_idx] == -1:\n                    cluster_assignments[neighbor_idx] = curr_cluster\n                    expansion = list(np.where((dist_matrix[neighbor_idx] <= eps) & core_points)[0])\n                    expansion.remove(neighbor_idx)\n                    neighbors.extend(expansion)\n    return cluster_assignments.tolist()"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int').ravel()\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y >= num_classes) or np.any(y < 0):\n        raise ValueError('Invalid class label(s).')\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes))\n    categorical[np.arange(n), y] = 1\n    return categorical.astype(int)"}
{"task_id": 482, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int')\n    input_shape = y.shape\n    if input_shape and input_shape[-1] > 1:\n        raise ValueError('`y` should be 1D. Received input with shape: ' + str(input_shape))\n    if not num_classes:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y):\n        raise ValueError('The maximum class index is %s, but `num_classes` was set to %s.' % (np.max(y), num_classes))\n    y_categorical = np.zeros((y.shape[0], num_classes), dtype='int')\n    y_categorical[np.arange(y.shape[0]), y] = 1\n    return y_categorical"}
{"task_id": 482, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y >= num_classes) or np.any(y < 0):\n        raise ValueError('Invalid label. It must be between 0 and num_classes-1.')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype='int').ravel()\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y >= num_classes) or np.any(y < 0):\n        raise ValueError('Label values must be non-negative and less than num_classes')\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes), dtype='int')\n    categorical[np.arange(n), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n        \n    Raises:\n        ValueError: If any label is negative or not smaller than `num_classes`.\n        \n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('All labels must be non-negative and smaller than `num_classes`')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if any((label < 0 or label >= num_classes for label in y)):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    categorical = np.zeros((len(y), num_classes), dtype=int)\n    categorical[np.arange(len(y)), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int')\n    input_shape = y.shape\n    if input_shape and input_shape[-1] > 1:\n        raise ValueError('y_true should be 1D')\n    if not num_classes:\n        num_classes = np.max(y) + 1\n    elif num_classes <= np.max(y) or np.min(y) < 0:\n        raise ValueError('All labels must be non-negative and smaller than num_classes')\n    y_onehot = np.zeros((y.shape[0], num_classes), dtype='int')\n    y_onehot[np.arange(y.shape[0]), y] = 1\n    return y_onehot"}
{"task_id": 482, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Negative labels or labels >= num_classes are not allowed.')\n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if not num_classes:\n        num_classes = max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Invalid label found')\n    n = y.shape[0]\n    one_hot = np.zeros((n, num_classes))\n    one_hot[np.arange(n), y] = 1\n    return one_hot.astype(int)"}
{"task_id": 482, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is not None:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError('Invalid labels: some labels are negative or larger than num_classes')\n    else:\n        num_classes = np.max(y) + 1\n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n        self.left = None\n        self.right = None\n        self.split_point = None\n        self.prediction = None\ndef best_split(X, y):\n    unique_X = np.sort(np.unique(X))\n    split_points = (unique_X[1:] + unique_X[:-1]) / 2.0\n    best_err = np.inf\n    best_split = None\n    for split in split_points:\n        left_idx = X <= split\n        right_idx = X > split\n        left_y = y[left_idx]\n        right_y = y[right_idx]\n        if len(left_y) == 0 or len(right_y) == 0:\n            continue\n        left_err = np.mean((left_y - np.mean(left_y)) ** 2)\n        right_err = np.mean((right_y - np.mean(right_y)) ** 2)\n        error = left_err + right_err\n        if error < best_err:\n            best_err = error\n            best_split = split\n    return (best_split, best_err)\ndef build_tree(node, max_depth, current_depth=0):\n    if current_depth == max_depth or len(node.y) < 2:\n        node.prediction = np.mean(node.y)\n        return\n    (split_point, error) = best_split(node.X, node.y)\n    if error == np.inf or split_point is None:\n        node.prediction = np.mean(node.y)\n        return\n    left_idx = node.X <= split_point\n    right_idx = node.X > split_point\n    node.left = Node(node.X[left_idx], node.y[left_idx])\n    node.right = Node(node.X[right_idx], node.y[right_idx])\n    node.split_point = split_point\n    build_tree(node.left, max_depth, current_depth + 1)\n    build_tree(node.right, max_depth, current_depth + 1)\ndef predict(node, x):\n    if x <= node.split_point:\n        if node.left is not None:\n            return predict(node.left, x)\n        else:\n            return node.prediction\n    elif node.right is not None:\n        return predict(node.right, x)\n    else:\n        return node.prediction\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(y_train) == 0:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    root = Node(X_train, y_train)\n    build_tree(root, max_depth)\n    return [predict(root, x) for x in X_test]"}
{"task_id": 485, "completion_id": 1, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, depth, points):\n        self.left_node = None\n        self.right_node = None\n        self.depth = depth\n        self.points = sorted(points, key=lambda x: x[0])\n        self.mean = np.mean([x[1] for x in self.points])\n        self.feature = None\n        self.split = None\ndef build_tree(node, max_depth):\n    if node.depth == max_depth or len(node.points) < 2:\n        return\n    (node.feature, node.split) = choose_split(node.points)\n    (left_points, right_points) = split_points(node.points, node.feature, node.split)\n    if left_points and right_points:\n        node.left_node = Node(node.depth + 1, left_points)\n        node.right_node = Node(node.depth + 1, right_points)\n        build_tree(node.left_node, max_depth)\n        build_tree(node.right_node, max_depth)\ndef choose_split(points):\n    min_sse = np.inf\n    feature = None\n    split = None\n    features = list(set([x[0] for x in points]))\n    for f in features:\n        left_points = [x for x in points if x[0] <= f]\n        right_points = [x for x in points if x[0] > f]\n        total_sse = sse(left_points) + sse(right_points)\n        if total_sse < min_sse:\n            min_sse = total_sse\n            feature = points[0][0]\n            split = f\n    return (feature, split)\ndef split_points(points, feature, split):\n    left_points = [x for x in points if x[0] <= split]\n    right_points = [x for x in points if x[0] > split]\n    return (left_points, right_points)\ndef sse(points):\n    if not points:\n        return 0\n    mean = np.mean([x[1] for x in points])\n    return sum(((x[1] - mean) ** 2 for x in points))\ndef predict(node, x):\n    if node.left_node is None and node.right_node is None:\n        return node.mean\n    if x[node.feature] <= node.split:\n        return predict(node.left_node, x)\n    else:\n        return predict(node.right_node, x)\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if not X_train:\n        return []\n    root = Node(0, list(zip(X_train, y_train)))\n    build_tree(root, max_depth)\n    return [predict(root, x) for x in X_test]"}
{"task_id": 485, "completion_id": 2, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_point):\n        self.split_point = split_point\n        self.left = None\n        self.right = None\n        self.value = None\ndef sse(data):\n    return np.sum(np.square(data - np.mean(data)))\ndef make_split(x_train, y_train):\n    sorted_data = sorted(zip(x_train, y_train))\n    x_train = [x for (x, _) in sorted_data]\n    y_train = [y for (_, y) in sorted_data]\n    (best_split_point, best_sse) = (None, float('inf'))\n    for i in range(1, len(x_train)):\n        if x_train[i] == x_train[i - 1]:\n            continue\n        split_point = (x_train[i] + x_train[i - 1]) / 2\n        left = [y for y in y_train if x < split_point for x in x_train]\n        right = [y for y in y_train if x >= split_point for x in x_train]\n        sse_split = sse(left) + sse(right)\n        if sse_split < best_sse:\n            (best_split_point, best_sse) = (split_point, sse_split)\n    return best_split_point\ndef recursive_split(x_train, y_train, max_depth, current_depth=0):\n    if current_depth == max_depth or len(x_train) < 2:\n        return Node(np.mean(y_train))\n    else:\n        split_point = make_split(x_train, y_train)\n        node = Node(split_point)\n        left_indices = [i for (i, x) in enumerate(x_train) if x < split_point]\n        right_indices = [i for (i, x) in enumerate(x_train) if x >= split_point]\n        node.left = recursive_split([x_train[i] for i in left_indices], [y_train[i] for i in left_indices], max_depth, current_depth + 1)\n        node.right = recursive_split([x_train[i] for i in right_indices], [y_train[i] for i in right_indices], max_depth, current_depth + 1)\n        return node\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    else:\n        tree = recursive_split(X_train, y_train, max_depth)\n\n        def predict(x_test, tree):\n            if isinstance(tree.value, (int, float)):\n                return tree.value\n            elif x_test < tree.split_point:\n                return predict(x_test, tree.left)\n            else:\n                return predict(x_test, tree.right)\n        return [predict(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 3, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, x, y, depth):\n        self.x = x\n        self.y = y\n        self.depth = depth\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n        self.value = np.mean(y)\ndef split_node(node, max_depth):\n    if node.depth >= max_depth or len(node.y) < 2:\n        node.is_leaf = True\n        return\n    best_split_value = None\n    best_ss_error = np.inf\n    feature = node.x\n    labels = node.y\n    unique_values = np.unique(feature)\n    if len(unique_values) == 1:\n        return\n    for value in unique_values:\n        left_indices = np.where(feature <= value)[0]\n        right_indices = np.where(feature > value)[0]\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            continue\n        left_y = labels[left_indices]\n        right_y = labels[right_indices]\n        ss_error = np.sum(np.power(left_y - np.mean(left_y), 2)) + np.sum(np.power(right_y - np.mean(right_y), 2))\n        if ss_error < best_ss_error:\n            best_ss_error = ss_error\n            best_split_value = value\n    if best_split_value is None:\n        return\n    left_indices = np.where(feature <= best_split_value)[0]\n    right_indices = np.where(feature > best_split_value)[0]\n    node.left = Node(node.x[left_indices], node.y[left_indices], node.depth + 1)\n    node.right = Node(node.x[right_indices], node.y[right_indices], node.depth + 1)\n    split_node(node.left, max_depth)\n    split_node(node.right, max_depth)\ndef predict(x, root):\n    node = root\n    while not node.is_leaf:\n        if x <= node.value:\n            node = node.left\n        else:\n            node = node.right\n    return node.value\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if len(X_train) == 0:\n        return []\n    (X_train, y_train) = (np.array(X_train), np.array(y_train))\n    root = Node(X_train, y_train, 0)\n    split_node(root, max_depth)\n    return [predict(x, root) for x in X_test]"}
{"task_id": 485, "completion_id": 4, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_point=None, left=None, right=None, y_mean=None):\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.y_mean = y_mean\ndef build_tree(X, y, depth=0, max_depth=3):\n    if len(X) < 2 or depth == max_depth:\n        return Node(y_mean=np.mean(y))\n    (split_point, min_error) = find_best_split(X, y)\n    if split_point is None:\n        return Node(y_mean=np.mean(y))\n    left_idx = X <= split_point\n    right_idx = ~left_idx\n    left = build_tree(X[left_idx], y[left_idx], depth + 1, max_depth)\n    right = build_tree(X[right_idx], y[right_idx], depth + 1, max_depth)\n    return Node(split_point, left, right)\ndef find_best_split(X, y):\n    unique_X = np.unique(X)\n    if len(unique_X) == 1:\n        return (None, np.inf)\n    best_split = unique_X[0]\n    min_error = np.inf\n    for split in unique_X:\n        left_idx = X <= split\n        right_idx = ~left_idx\n        error = np.sum((y[left_idx] - np.mean(y[left_idx])) ** 2) + np.sum((y[right_idx] - np.mean(y[right_idx])) ** 2)\n        if error < min_error:\n            min_error = error\n            best_split = split\n    return (best_split, min_error)\ndef predict(tree, X_test):\n    if tree.y_mean is not None:\n        return [tree.y_mean] * len(X_test)\n    elif X_test[0] <= tree.split_point:\n        return predict(tree.left, X_test)\n    else:\n        return predict(tree.right, X_test)\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return predict(tree, X_test)"}
{"task_id": 485, "completion_id": 5, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split=None, mean=None):\n        self.split = split\n        self.mean = mean\n        self.left = None\n        self.right = None\ndef build_tree(X, y, depth=0, max_depth=3):\n    if depth == max_depth or len(X) < 2:\n        return Node(mean=np.mean(y))\n    min_sse = np.inf\n    split_point = None\n    X = np.array(X)\n    y = np.array(y)\n    sorted_indices = np.argsort(X)\n    sorted_y = y[sorted_indices]\n    sorted_X = X[sorted_indices]\n    for i in range(1, len(X)):\n        left_y = sorted_y[:i]\n        right_y = sorted_y[i:]\n        sse = np.sum((left_y - np.mean(left_y)) ** 2) + np.sum((right_y - np.mean(right_y)) ** 2)\n        if sse < min_sse:\n            min_sse = sse\n            split_point = sorted_X[i]\n    left_indices = X < split_point\n    right_indices = X >= split_point\n    node = Node(split=split_point)\n    node.left = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    node.right = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    return node\ndef predict(node, X):\n    if node.split is None:\n        return node.mean\n    if X < node.split:\n        if node.left:\n            return predict(node.left, X)\n        else:\n            return node.mean\n    elif node.right:\n        return predict(node.right, X)\n    else:\n        return node.mean\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    root = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict(root, x) for x in X_test]"}
{"task_id": 485, "completion_id": 6, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_feature=None, split_value=None):\n        self.split_feature = split_feature\n        self.split_value = split_value\n        self.left = None\n        self.right = None\n        self.value = None\ndef fit(X, y, max_depth=3):\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y)\n    node = Node()\n    _fit(X, y, node, max_depth, 0)\n    return node\ndef _fit(X, y, node, max_depth, depth):\n    if depth == max_depth or len(y) < 2:\n        node.value = np.mean(y)\n        return\n    split_feature = np.random.randint(X.shape[1])\n    split_values = np.unique(X[:, split_feature])\n    split_value = None\n    min_sse = np.inf\n    for value in split_values:\n        left_index = X[:, split_feature] <= value\n        right_index = X[:, split_feature] > value\n        if min(np.sum(left_index), np.sum(right_index)) == 0:\n            continue\n        sse = np.sum(y[left_index] ** 2) + np.sum(y[right_index] ** 2)\n        if sse < min_sse:\n            min_sse = sse\n            split_value = value\n    if split_value is None:\n        node.value = np.mean(y)\n        return\n    node.split_feature = split_feature\n    node.split_value = split_value\n    node.left = Node()\n    node.right = Node()\n    _fit(X[X[:, split_feature] <= split_value], y[X[:, split_feature] <= split_value], node.left, max_depth, depth + 1)\n    _fit(X[X[:, split_feature] > split_value], y[X[:, split_feature] > split_value], node.right, max_depth, depth + 1)\ndef predict(node, X_test):\n    y_pred = []\n    for x in X_test:\n        y_pred.append(_predict(node, x))\n    return y_pred\ndef _predict(node, x):\n    if node.value is not None:\n        return node.value\n    if x[node.split_feature] <= node.split_value:\n        return _predict(node.left, x)\n    else:\n        return _predict(node.right, x)\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if len(X_train) == 0:\n        return []\n    node = fit(X_train, y_train, max_depth)\n    return predict(node, X_test)"}
{"task_id": 485, "completion_id": 7, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, value=None, left=None, right=None, is_leaf=False):\n        self.value = value\n        self.left = left\n        self.right = right\n        self.is_leaf = is_leaf\nclass RegressionTree:\n\n    def __init__(self, max_depth=3):\n        self.root = None\n        self.max_depth = max_depth\n\n    def fit(self, X, y):\n        self.root = self._build_tree(X, y)\n\n    def _build_tree(self, X, y, depth=0):\n        if depth == self.max_depth or len(X) < 2:\n            return Node(value=np.mean(y), is_leaf=True)\n        best_split = self._find_best_split(X, y)\n        if best_split is None:\n            return Node(value=np.mean(y), is_leaf=True)\n        (left_indices, right_indices) = best_split\n        left_tree = self._build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = self._build_tree(X[right_indices], y[right_indices], depth + 1)\n        return Node(left=left_tree, right=right_tree)\n\n    def _find_best_split(self, X, y):\n        best_sse = np.inf\n        best_split = None\n        for split_value in set(X):\n            left_indices = np.where(X < split_value)[0]\n            right_indices = np.where(X >= split_value)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            (y1, y2) = (y[left_indices], y[right_indices])\n            curr_sse = self._sse(y1) + self._sse(y2)\n            if curr_sse < best_sse:\n                best_sse = curr_sse\n                best_split = (left_indices, right_indices)\n        return best_split\n\n    def _sse(self, y):\n        return np.sum((y - np.mean(y)) ** 2)\n\n    def predict(self, X):\n        return [self._predict_one(x) for x in X]\n\n    def _predict_one(self, x, node=None):\n        if node is None:\n            node = self.root\n        if node.is_leaf:\n            return node.value\n        if x < node.value:\n            return self._predict_one(x, node.left)\n        else:\n            return self._predict_one(x, node.right)\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if len(X_train) == 0:\n        return []\n    (X_train, y_train, X_test) = (np.array(X_train), np.array(y_train), np.array(X_test))\n    tree = RegressionTree(max_depth=max_depth)\n    tree.fit(X_train, y_train)\n    return tree.predict(X_test)\nX_train = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_train = [2, 4, 6, 8, 10, 20, 24, 28, 32, 36]\nX_test = [1.5, 2.5, 3.5, 100]"}
{"task_id": 485, "completion_id": 8, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature_i=None, split_point=None, left=None, right=None, value=None):\n        self.feature_i = feature_i\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.value = value\ndef build_tree(X, y, depth=0):\n    if depth == max_depth or len(y) < 2:\n        return Node(value=np.mean(y))\n    features = sorted(set(X))\n    midpoints = [(features[i] + features[i + 1]) / 2 for i in range(len(features) - 1)]\n    (min_val, min_i, min_split) = (float('inf'), 0, 0)\n    for (i, split) in enumerate(midpoints):\n        left_y = [y_i for (x_i, y_i) in zip(X, y) if x_i <= split]\n        right_y = [y_i for (x_i, y_i) in zip(X, y) if x_i > split]\n        sse = np.sum((np.mean(left_y) - left_y) ** 2) + np.sum((np.mean(right_y) - right_y) ** 2)\n        if sse < min_val:\n            (min_val, min_i, min_split) = (sse, i, split)\n    left_indices = [i for (i, x) in enumerate(X) if x <= min_split]\n    right_indices = [i for (i, x) in enumerate(X) if x > min_split]\n    left = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n    right = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n    return Node(feature_i=0, split_point=min_split, left=left, right=right)\ndef predict(sample, tree):\n    node = tree\n    while node.value is None:\n        if sample[node.feature_i] <= node.split_point:\n            node = node.left\n        else:\n            node = node.right\n    return node.value\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    global max_depth\n    max_depth = max_depth\n    if not X_train or not y_train:\n        return []\n    tree = build_tree(X_train, y_train)\n    return [predict([x], tree) for x in X_test]"}
{"task_id": 485, "completion_id": 9, "solution": "import numpy as np\nclass TreeNode:\n\n    def __init__(self, depth, X, y):\n        self.depth = depth\n        self.X = X\n        self.y = y\n        self.left = None\n        self.right = None\n        self.split_value = None\n        self.predict_value = np.mean(y) if y else 0\ndef predict_single(root: TreeNode, x: float):\n    node = root\n    while node.left and node.right:\n        if x <= node.split_value:\n            node = node.left\n        else:\n            node = node.right\n    return node.predict_value\ndef predict_multiple(root: TreeNode, X: list[float | int]):\n    return [predict_single(root, x) for x in X]\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if not X_train or not y_train:\n        return []\n    root = TreeNode(0, np.array(X_train), np.array(y_train))\n    recursive_split(root, max_depth)\n    return predict_multiple(root, X_test)"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    if x.size == 0:\n        return []\n    matrix = np.zeros((x.size, x.size))\n    for i in range(x.size):\n        matrix[i][i] = x[i]\n    return matrix.tolist()"}
{"task_id": 490, "completion_id": 1, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        result = np.zeros((len(x), len(x)))\n        np.fill_diagonal(result, x)\n        return result.tolist()"}
{"task_id": 490, "completion_id": 2, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    if not x.size:\n        return []\n    result = np.diag(x)\n    return result.tolist()"}
{"task_id": 490, "completion_id": 3, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be a 1D array')\n    matrix = np.zeros((len(x), len(x)))\n    np.fill_diagonal(matrix, x)\n    return matrix.tolist()"}
{"task_id": 490, "completion_id": 4, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_array = np.array(x)\n    if x_array.ndim != 1:\n        raise ValueError('Input must be a one-dimensional array-like object.')\n    matrix_size = len(x_array)\n    diagonal_matrix = np.diag(x_array)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 5, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    try:\n        diagonal_matrix = np.diag(x).tolist()\n    except TypeError:\n        diagonal_matrix = []\n    return diagonal_matrix"}
{"task_id": 490, "completion_id": 6, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"\n    Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    if len(x) == 0:\n        return []\n    result = np.zeros((len(x), len(x)))\n    np.fill_diagonal(result, x)\n    return result.tolist()"}
{"task_id": 490, "completion_id": 7, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    result = np.zeros((len(x), len(x)))\n    for i in range(len(x)):\n        result[i, i] = x[i]\n    return result.tolist()"}
{"task_id": 490, "completion_id": 8, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    try:\n        x = np.array(x)\n        n = len(x)\n        result = np.zeros((n, n), dtype=float)\n        np.fill_diagonal(result, x)\n        return result.tolist()\n    except ValueError:\n        raise ValueError('Input list must only contain numeric values')"}
{"task_id": 490, "completion_id": 9, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not (x and np.issubdtype(type(x[0]), np.number)):\n        return []\n    x = np.array(x)\n    matrix = np.diag(x)\n    return matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict, deque\nimport itertools\nclass FPTree(object):\n\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(deque)\n        self.item_count = defaultdict(int)\n        self.total_count = 0\n\n    def build_tree(self, transactions):\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in self.item_count]\n            transaction.sort(key=lambda v: self.item_count[v], reverse=True)\n            if len(transaction) > 0:\n                self.insert_tree(transaction)\n\n    def insert_tree(self, transaction):\n        node = self.root\n        while len(transaction) > 0:\n            symbol = transaction[0]\n            node = node.add_child(symbol)\n            transaction.pop(0)\n\n    def tree_has_single_path(self):\n\n        def inner(node):\n            num_children = len(node.children)\n            if num_children > 1:\n                return False\n            elif num_children == 0:\n                return True\n            else:\n                return inner(list(node.children.values())[0])\n        return inner(self.root)\n\n    def mine_frequent_itemsets(self, min_sup):\n        patterns_seen_at_depth = defaultdict(set)\n        for (item, nodes) in self.header_table.items():\n            condition_pattern_base = defaultdict(int)\n            frequent_patterns = set()\n            for node in nodes:\n                path = node.get_path_to_root()\n                path.pop(0)\n                path.reverse()\n                for subset in subsets(path):\n                    condition_pattern_base[subset] += 1\n            for (pattern, count) in condition_pattern_base.items():\n                support = self.item_count[pattern[-1]]\n                if support >= min_sup:\n                    frequent_patterns.add(tuple(sorted(pattern)))\n            yield frequent_patterns\ndef subsets(nums):\n    result = []\n    for i in range(len(nums) + 1):\n        result += list(itertools.combinations(nums, i))\n    return result\nclass FPNode(object):\n\n    def __init__(self, value):\n        self.value = value\n        self.count = 1\n        self.parent = None\n        self.children = {}\n        self.next = None\n\n    def add_child(self, symbol):\n        if symbol in self.children:\n            node = self.children[symbol]\n            node.count += 1\n        else:\n            node = FPNode(symbol)\n            self.children[symbol] = node\n            node.parent = self\n        return node\n\n    def get_path_to_root(self):\n        path = []\n        node = self\n        while node is not None:\n            path.append(node.value)\n            node = node.parent\n        return path\ndef fp_growth(transactions, min_sup):\n    if min_sup < 1:\n        raise ValueError('Minimum support threshold must be a positive integer or zero')\n    item_count = fp_growth_first_scan(transactions, min_sup)\n    tree = FPTree()\n    tree.item_count = item_count\n    transaction_subset = [[item for item in transaction if item in item_count] for transaction in transactions]\n    tree.build_tree(transaction_subset)\n    if len(tree.header_table) == 0:\n        return []\n    return sorted(tree.mine_frequent_itemsets(min_sup))\ndef fp_growth_first_scan(transactions, min_sup):\n    item_count = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_count[item] += 1\n    return {item: count for (item, count) in item_count.items() if count >= min_sup}"}
{"task_id": 491, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass FPNode:\n\n    def __init__(self, value, count, parent):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = []\n\n    def has_child(self, value):\n        for node in self.children:\n            if node.value == value:\n                return True\n        return False\n\n    def get_child(self, value):\n        for node in self.children:\n            if node.value == value:\n                return node\n        return None\n\n    def add_child(self, value):\n        child = FPNode(value, 1, self)\n        self.children.append(child)\n        return child\ndef update_header(node, test):\n    while node and (not test(node)):\n        node = node.link\n    return node\ndef fp_growth(transactions, min_sup):\n    items = sorted([item for sublist in transactions for item in sublist])\n    items = [(i, items.count(i)) for i in items]\n    items = sorted([i for i in items if i[1] >= min_sup], key=lambda x: x[1])\n    tree = FPNode(None, 1, None)\n    header_table = {i: [None, None] for i in sorted(set(items))}\n    for transaction in transactions:\n        transaction = [i for i in transaction if i in header_table]\n        transaction.sort(key=lambda x: (header_table[x][0] is None, header_table[x][0].count))\n        update_fp_tree(transaction, tree, header_table, 1)\n    frequent_itemsets = dict()\n    ascend_fp_tree(tree, set(), frequent_itemsets)\n    for (item, nodes) in header_table.items():\n        conditional_pattern_base = dict()\n        conditional_fp_tree = FPNode(None, 1, None)\n        node = nodes[0]\n        while node:\n            prefix_path = []\n            ascend_fp_tree(node, prefix_path, conditional_pattern_base)\n            node = update_header(node.link, lambda node: True)\n        find_conditional_fp_tree(conditional_fp_tree, conditional_pattern_base, min_sup, conditional_fp_tree, set(), frequent_itemsets)\n    for (k, v) in frequent_itemsets.items():\n        frequent_itemsets[k] = sorted(list(k))\n    result = sorted(frequent_itemsets.values(), key=lambda x: (-len(x), x))\n    return result"}
{"task_id": 491, "completion_id": 2, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNode(None, 0)\n        self.header_table = defaultdict(list)\n\n    def add(self, transaction):\n        point = self.root\n        for item in sorted(transaction, key=lambda i: self.header_table[i][-1].count, reverse=True):\n            ht_points = self.header_table[item]\n            if ht_points:\n                point = ht_points[-1]\n            point = point.add_child(item)\n\n    def _get_frequent_items(self, min_sup):\n        items = {}\n        for point in self.header_table:\n            count = 0\n            node = self.header_table[point][-1]\n            while node is not None:\n                count += node.count\n                node = node.neighbor\n            if count >= min_sup:\n                items[point] = count\n        return items\nclass FPNode:\n\n    def __init__(self, item, count):\n        self.item = item\n        self.count = count\n        self.parent = None\n        self.neighbor = None\n        self.children = {}\n\n    def add_child(self, item):\n        if item in self.children:\n            child_node = self.children[item]\n            child_node.count += 1\n        else:\n            child_node = FPNode(item, 1)\n            self.children[item] = child_node\n            child_node.parent = self\n            if self.neighbor is not None:\n                self.neighbor.add_sibling(child_node)\n            child_node.neighbor = self.neighbor\n            self.neighbor = child_node\n        return child_node\ndef fp_growth(transactions, min_sup, suffix):\n    tree = FPTree()\n    for transaction in transactions:\n        transaction = list(filter(lambda v: v in suffix, transaction))\n        transaction.sort(key=lambda v: suffix[v], reverse=True)\n        tree.add(transaction)\n    items = tree._get_frequent_items(min_sup)\n    keys = list(items.keys())\n    keys.sort(key=lambda v: suffix[v], reverse=True)\n    return (keys, items)"}
{"task_id": 491, "completion_id": 3, "solution": "import itertools\nclass FPTree(object):\n\n    def __init__(self, transactions, threshold, root_value, root_count):\n        self.value = root_value\n        self.count = root_count\n        self.parent = None\n        self.children = {}\n        self.next = None\n\n        def order_transaction(transaction):\n            counter = Counter(transaction)\n            return sorted(transaction, key=lambda x: counter[x], reverse=True)\n        ordered_transactions = list(map(order_transaction, transactions))\n        items = set(itertools.chain.from_iterable(ordered_transactions))\n        items = sorted((x for x in items if sum((1 for t in ordered_transactions if x in t)) >= threshold))\n        (self.tree, _) = self._build_tree(ordered_transactions, items)\n\n    def _build_tree(self, ordered_transactions, items):\n        head = FPTree(None, None, None, None)\n        for transaction in ordered_transactions:\n            cur_node = head\n            for item in transaction:\n                cur_node = self._insert_node(cur_node, item)\n        return (head, self._cond_tree(head, items))\n\n    def _cond_tree(self, tree, items):\n        items = sorted((x for x in items if x in tree.children))\n        if len(items) > 0:\n            new_tree = FPTree(None, None, items[0], None)\n            new_tree.children = tree.children[items[0]]\n            new_tree.children[items[0]].parent = new_tree\n            items.pop(0)\n            for transaction in new_tree.children[items[0]].children:\n                self._cond_tree(transaction, items)\n            return new_tree\n        else:\n            return tree\n\n    def _insert_node(self, tree, item):\n        if item in tree.children:\n            child = tree.children[item]\n            child.count += 1\n        else:\n            child = FPTree(tree, item, 1, None)\n            if item in tree.children:\n                tree.children[item].next = child\n            else:\n                tree.children[item] = child\n        return child\ndef mine_items(tree):\n    order = []\n    while tree.next is not None:\n        tree = tree.next\n        order.append(tree.value)\n    return order\ndef fp_growth(transactions, threshold):\n    tree = FPTree(transactions, threshold, None, None)\n    return [x for x in generate_frequent(tree)]\ndef generate_frequent(tree):\n    if tree is not None:\n        order = mine_items(tree)\n        while len(order) > 0:\n            yield (order.pop(),)\n        for (value, child) in tree.children.items():\n            for x in generate_frequent(child):\n                yield ((value,) + x)\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]"}
{"task_id": 491, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass TreeNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increase(self, count):\n        self.count += count\ndef init_tree(transactions, min_sup):\n    item_count = Counter()\n    for transaction in transactions:\n        item_count.update(transaction)\n    items_above_min_sup = [item for item in item_count.items() if item[1] >= min_sup]\n    items_above_min_sup.sort(key=lambda x: x[1])\n    sorted_items = [item[0] for item in items_above_min_sup]\n    sorted_transactions = [[item for item in transaction if item in sorted_items] for transaction in transactions]\n    tree = TreeNode(None, None, None)\n    for transaction in sorted_transactions:\n        transaction.sort(key=lambda x: item_count[x], reverse=True)\n        update_tree(transaction, tree, {}, 1)\n    return (tree, sorted_items)\ndef fp_growth(transactions, min_sup):\n    (tree, header) = init_tree(transactions, min_sup)\n    frequent_itemsets = []\n    mine_frequent_patterns(tree, header, min_sup, set(), frequent_itemsets)\n    return frequent_itemsets"}
{"task_id": 491, "completion_id": 5, "solution": "from collections import namedtuple, defaultdict"}
{"task_id": 491, "completion_id": 6, "solution": "from collections import namedtuple, defaultdict\nclass Node(namedtuple('Node', 'itemCount, nodeLink')):\n    \"\"\"\n    An FP tree node that stores the count of the item and a link    to the next node that contains the same item.\n\n    Attributes:\n        itemCount : The count of this item in the current transaction        nodeLink : A link to next node that contains the same item.\n    \"\"\"\n\n    def increment(self):\n        return Node(self.itemCount + 1, self.nodeLink)\nclass Tree(namedtuple('Tree', 'children, nodeLink')):\n    \"\"\"\n    An FP tree with a dictionary with item:Node key-value pairs and     a link to the next node that contains the same item.\n\n    Attributes:\n        children : A dictionary with item:Node key-value pairs\n        nodeLink : A link to next node that contains the same item\n    \"\"\"\n\n    def add(self, item, node):\n        return Tree({**self.children, **{item: node}}, self.nodeLink)\ndef cond_tree_from_paths(paths, item):\n    \"\"\"\n    Create sub tree for a conditional FP Tree\n\n    Parameters:\n        path : list of paths to get sub tree\n        item : item to attach to base tree\n\n    Returns:\n        Sub tree of conditional FP Tree for input item\n    \"\"\"\n    tree = paths[0][1:]\n    if not tree:\n        return Tree({}, None)\n    subtrees = cond_tree_from_paths([path[1:] for path in paths], tree[0][0])\n    return subtrees.add(item + (tree[0][0],), tree[0][1])\ndef cond_trees_from_paths(paths):\n    \"\"\"\n    Create conditional FP Trees\n\n    Parameters:\n        paths : list of paths\n\n    Returns:\n        List of conditional FP Trees\n    \"\"\"\n    bases = list(set((next(iter(path))[0] for path in paths)))\n    condTrees = []\n    for base in bases:\n        condTrees.append((base, cond_tree_from_paths([path[1:] for path in paths if path[0][0] == base], (base,))))\n    return condTrees\ndef mine_fp_tree(header_table, prefix, frequent_item_set):\n    \"\"\"\n    Generate frequent item-set from FP-Tree\n\n    Parameters:\n        header_table : A dictionary with item:Node key-value pairs\n        prefix : the prefix tuple to be created recursively\n        frequent_item_set : a set of frequent item sets\n\n    Returns:\n        Set of all item sets with given prefix\n    \"\"\"\n    sorted_items = sorted(header_table.items(), key=lambda x: x[1][0], reverse=True)\n    for (base, node) in sorted_items:\n        new_item_set = prefix + (base,)\n        frequent_item_set.add(new_item_set)\n        cond_prefix_tree = cond_trees_from_paths(prefix_paths(base, header_table[base][1]))\n        for t in sorted(cond_prefix_tree, key=lambda x: x[1].itemCount):\n            mine_fp_tree(t[1].children, new_item_set, frequent_item_set)\n    return frequent_item_set\ndef prefix_paths(base, tree):\n    \"\"\"\n    Generate a list of conditional FP-tree paths\n\n    Parameters:\n        base : Root node of FP Tree\n        tree : Root node of FP Tree\n\n    Returns:\n        List of conditional FP-tree paths\n    \"\"\"\n    cond_pats = []\n    while tree:\n        prefix_path = []\n        suff_stat = []\n        cond_pat_tree = tree\n        while cond_pat_tree.nodeLink != cond_pat_tree:\n            prefix_path.append(cond_pat_tree)\n            suff_stat.append(cond_pat_tree.itemCount)\n            cond_pat_tree = cond_pat_tree.nodeLink\n        if len(suff_stat):\n            for i in range(suff_stat[-1]):\n                for pat in prefix_paths(base + (base[-1],), cond_pat_tree):\n                    cond_pats.append(prefix_path + pat)\n    return cond_pats or [prefix_path]\ndef fp_growth(transactions, min_sup):\n    \"\"\"\n    Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.        Every tuple itself is sorted lexicographically.\n    \"\"\"\n    items = defaultdict(int)\n    for trans in transactions:\n        for item in trans:\n            items[item] += 1\n    items = dict(((k, v) for (k, v) in items.items() if v >= min_sup))\n    tree_order = sorted(items.items(), key=lambda x: x[1], reverse=True)\n    trees = [Tree({}, None) for _ in range(len(transactions))]\n    for trans in ({i: items[i] for i in trans if i in items}.items() for trans in transactions):\n        if trans:\n            trans = [(k, v) for (k, v) in sorted(trans, key=lambda x: x[1], reverse=True)]\n            tree = trees[trans[0][1] - 1]\n            for (item, sup) in trans:\n                header_table = defaultdict(lambda : Node(0, None))\n                pref_itemset(tree, header_table, item, {})\n                tree = tree.add(item, Node(sup, header_table[item].nodeLink))\n                header_table[item] = header_table[item].increment()\n    return sorted(list(mine_fp_tree(trees[-1].children, (), set())), key=lambda x: (len(x), x))"}
{"task_id": 491, "completion_id": 7, "solution": "from collections import Counter\nimport itertools\nimport numpy as np\nimport pyfpgrowth\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for sublist in transactions for item in sublist))\n    frequent_items = set((item for (item, count) in item_counts.items() if count >= min_sup))\n    transactions_cleaned = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    transactions_sorted = [list(np.sort([item for item in transaction if item in frequent_items])) for transaction in transactions]\n    fp_tree = pyfpgrowth.FPTree(transactions_sorted, min_sup, None)\n    patterns = pyfpgrowth.find_frequent_patterns(fp_tree, min_sup)\n    result = [tuple(sorted(set(item) - frequent_items)) + tuple(item) for item in itertools.chain.from_iterable(patterns.items()) if not set(item).intersection(frequent_items)]\n    result = sorted(result, key=lambda x: (len(x), x))\n    return result"}
{"task_id": 491, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    support_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            support_counts[item] += 1\n    for key in list(support_counts.keys()):\n        if support_counts[key] < min_sup:\n            del support_counts[key]\n    transactions = [[item for item in transaction if item in support_counts] for transaction in transactions]\n    transactions = [sorted(transaction, key=lambda item: support_counts[item], reverse=True) for transaction in transactions if transaction]\n    tree_root = FPNode(None)\n    for transaction in transactions:\n        curr_node = tree_root\n        for item in transaction:\n            curr_node = curr_node.add_child(item)\n    item_sets = []\n    prefix = tuple()\n    mine_item_sets(tree_root, prefix, item_sets)\n    item_sets = [tuple(sorted(item_set)) for item_set in item_sets]\n    item_sets.sort(key=lambda item_set: (-len(item_set), item_set))\n    return item_sets\nclass FPNode:\n\n    def __init__(self, item):\n        self.item = item\n        self.count = 1\n        self.parent = None\n        self.children = {}\n        self.next_node = None\n\n    def add_child(self, item):\n        if item in self.children:\n            child = self.children[item]\n            child.count += 1\n        else:\n            child = FPNode(item)\n            child.parent = self\n            self.children[item] = child\n            if self.item is not None:\n                if self.item not in FPNode.header_table:\n                    FPNode.header_table[self.item] = None\n                current_node = FPNode.header_table[self.item]\n                while current_node is not None:\n                    current_node = current_node.next_node\n                current_node = child\n        return child\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]"}
{"task_id": 491, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nimport itertools\nimport numpy as np\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = get_item_counts(transactions)\n    freq_itemsets = filter_items(transactions, item_counts, min_sup)\n    freq_itemsets = grow_freq_itemset(transactions, freq_itemsets, min_sup)\n    return sorted(freq_itemsets)\ndef get_item_counts(transactions):\n    return Counter((item for transaction in transactions for item in transaction))\ndef filter_items(transactions, item_counts, min_sup):\n    return {item: count for (item, count) in item_counts.items() if count >= min_sup}\ndef order_transactions(transactions, freq_itemsets):\n    return [[item for item in transaction if item in freq_itemsets] for transaction in transactions]\ndef construct_fp_tree(ordered_transactions, freq_itemsets):\n    fp_tree = FPTree()\n    for transaction in ordered_transactions:\n        fp_tree.add_transaction(transaction, freq_itemsets)\n    return fp_tree\ndef grow_freq_itemset(transactions, freq_itemsets, min_sup):\n    ordered_transactions = order_transactions(transactions, freq_itemsets)\n    fp_tree = construct_fp_tree(ordered_transactions, freq_itemsets)\n    for item in freq_itemsets.copy():\n        mine_fp_tree(fp_tree, min_sup, item, freq_itemsets)\n    return freq_itemsets\nclass FPTree(object):\n\n    def __init__(self):\n        self.root = FPNode(self, None)\n        self.nodes = defaultdict(list)\n        self.cond_items = []\n\n    def add_transaction(self, transaction, freq_itemsets):\n        cur_node = self.root\n        for item in transaction:\n            next_node = cur_node.search(item)\n            if next_node is not None:\n                next_node.count += 1\n            else:\n                next_node = FPNode(self, item)\n                cur_node.add(next_node)\n                self.nodes[item].append(next_node)\n                self.cond_items.append((cur_node.item, item))\n            cur_node = next_node\n\n    def remove_node(self, node):\n        item = node[-1]\n        del self.nodes[item][node]\n        if not self.nodes[item]:\n            del self.nodes[item]\nclass FPNode(object):\n\n    def __init__(self, tree, item):\n        self.tree = tree\n        self.item = item\n        self.count = 1\n        self.parent = None\n        self.neighbors = None\n        self.children = {}\n\n    def add(self, child):\n        if self.neighbors is None:\n            self.neighbors = child\n        else:\n            self.neighbors.add_sibling(child)\n        child.parent = self\n        self.count += child.count\n        self.children[child.item] = child\n\n    def search(self, item):\n        return self.children.get(item)"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    result = [np.ones(len(X))]\n    for deg in range(1, degree + 1):\n        for item in combinations_with_replacement(range(X.shape[1]), deg):\n            result.append(np.product(X[:, item], axis=1))\n    return np.array(result).T.tolist()"}
{"task_id": 492, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    total_degree = lambda comb: sum(comb)\n    monomials = lambda deg: [com for com in combinations_with_replacement(range(n_features), deg) if total_degree(com) == deg]\n    all_monomials = [mon for deg in range(degree + 1) for mon in monomials(deg)]\n    X_poly = np.ones((n_samples, 1))\n    for monomial in all_monomials:\n        if len(monomial) == 0:\n            prod = np.ones((n_samples, 1))\n        else:\n            prod = np.prod(X[:, monomial], axis=1).reshape(-1, 1)\n        X_poly = np.concatenate((X_poly, prod), axis=1)\n    return X_poly.tolist()"}
{"task_id": 492, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement, chain\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list X whose rows correspond to\n    observations and columns correspond to original features.  It returns a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied degree.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If degree is negative the function returns -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        degree is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n\n    def index_combinations():\n        return chain.from_iterable((combinations_with_replacement(range(n_features), i) for i in range(degree + 1)))\n    output = []\n    for sample in X:\n        new_row = [np.prod(np.power(sample, np.array(comb))) for comb in index_combinations()]\n        output.append(new_row)\n    return output"}
{"task_id": 492, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It returns a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n    If *degree* is negative the function returns -1.\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_features = len(X[0])\n    n_samples = len(X)\n    result = []\n    for i in range(n_samples):\n        row_result = [1]\n        X_row = np.array(X[i])\n        for d in range(1, degree + 1):\n            for indices in combinations_with_replacement(range(n_features), d):\n                row_result.append(np.prod(X_row[list(indices)]))\n        result.append(row_result)\n    return result"}
{"task_id": 492, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import product\ndef polynomial_features(X, degree):\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    combination_indices = map(sum, product(*(range(degree + 1) for _ in range(n_features))))\n    all_combinations = list(map(list, combinations_with_replacement(range(n_features), degree)))\n    indices = np.array([[i for i in all_combinations if sum(i) == j] for j in combination_indices])\n    indices = [[0] + list(sum(np.array(X)[:, i], 0)) for i in indices]\n    indices = np.array([j.tolist() for i in indices for j in i])\n    X_new = []\n    for i in range(len(indices)):\n        X_product = np.array([np.prod(X[j, indices[i]])])\n        X_new.append(X_product)\n    return np.array(X_new).T.tolist()"}
{"task_id": 492, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    poly_X = []\n    for sample in X:\n        monomials = [1]\n        for degree in range(1, degree + 1):\n            for combination in combinations_with_replacement(sample, degree):\n                new_monomial = 1\n                for feature in combination:\n                    new_monomial *= feature\n                monomials.append(new_monomial)\n        poly_X.append(monomials)\n    return poly_X"}
{"task_id": 492, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int):\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    poly_features = np.full((n_samples, (degree + 1) ** n_features), 1.0)\n    index = n_features\n    for d in range(1, degree + 1):\n        combinations = []\n        for group in combinations_with_replacement(range(n_features), d):\n            for i in group:\n                poly_features[:, index] *= X[:, i]\n            combinations.append(group)\n            index += 1\n    return poly_features"}
{"task_id": 492, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree < 0:\n        return -1\n    X_poly = []\n    (m, n) = np.array(X).shape\n    for x in X:\n        monomials = [1]\n        for deg in range(1, degree + 1):\n            for combination in combinations_with_replacement(range(n), deg):\n                monomial = 1\n                for feature in combination:\n                    monomial *= x[feature]\n                monomials.append(monomial)\n        X_poly.append(monomials)\n    return np.array(X_poly).tolist()"}
{"task_id": 492, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    X = np.array(X)\n    if degree < 0:\n        return -1\n    X_poly = np.empty((X.shape[0], np.sum([(degree + i + 1) * (degree + i) // 2 for i in range(X.shape[1])])))\n    X_poly[:, 0] = 1\n    index = 1\n    for d in range(1, degree + 1):\n        for indices in combinations_with_replacement(range(X.shape[1]), d):\n            X_poly[:, index] = np.prod(X[:, indices], axis=1)\n            index += 1\n    return X_poly.tolist()"}
{"task_id": 492, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    combinations = [combinations_with_replacement(range(degree + 1), n_features) for _ in range(n_samples)]\n    features_monomials = [[np.prod(np.power(X[sample], degree)) for degree in combinations[sample]] for sample in range(n_samples)]\n    return np.array(features_monomials).tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    if len(y) == 0:\n        return -1\n    y_avg = np.mean(y)\n    mse = np.mean(np.square(np.subtract(y, y_avg)))\n    return round(mse, 4)"}
{"task_id": 493, "completion_id": 1, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"\n    Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y_mean = np.mean(y)\n    return round(np.sum((np.array(y) - y_mean) ** 2) / len(y), 4)"}
{"task_id": 493, "completion_id": 2, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    else:\n        y = np.array(y)\n        y_mean = np.mean(y)\n        squared_diff = (y - y_mean) ** 2\n        mse = np.mean(squared_diff)\n        return round(mse, 4)"}
{"task_id": 493, "completion_id": 3, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if len(y) == 0:\n        return -1\n    mean = np.mean(y)\n    return round(np.mean((y - mean) ** 2), 4)"}
{"task_id": 493, "completion_id": 4, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        return -1\n    mean_y = np.mean(y)\n    squared_diff = (y - mean_y) ** 2\n    mse = np.mean(squared_diff)\n    return round(mse, 4)"}
{"task_id": 493, "completion_id": 5, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        return -1\n    else:\n        avg = y.mean()\n        squared_diffs = (y - avg) ** 2\n        return round(np.mean(squared_diffs), 4)"}
{"task_id": 493, "completion_id": 6, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        return -1\n    average = np.mean(y)\n    squared_diffs = np.square(y - average)\n    return round(np.mean(squared_diffs), 4)"}
{"task_id": 493, "completion_id": 7, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if len(y) == 0:\n        return -1\n    else:\n        mean = np.mean(y)\n        squared_diffs = np.square(y - mean)\n        return round(np.mean(squared_diffs), 4)"}
{"task_id": 493, "completion_id": 8, "solution": "import numpy as np\ndef mse(y):\n    if len(y) == 0:\n        return -1\n    average = np.mean(y)\n    squared_diff = np.square(y - average)\n    return round(np.mean(squared_diff), 4)"}
{"task_id": 493, "completion_id": 9, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    n = len(y)\n    if n == 0:\n        return -1\n    else:\n        y_bar = sum(y) / n\n        return round(sum(((y_i - y_bar) ** 2 for y_i in y)) / n, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"\n    Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    y = np.round(slope * x + intercept, 4).tolist()\n    grad = np.round(np.full_like(x, slope), 4).tolist()\n    grad2 = np.round(np.zeros_like(x), 4).tolist()\n    return (y, grad, grad2)\nx = [1, 2, 3]"}
{"task_id": 496, "completion_id": 1, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = np.round(slope * x + intercept, 4)\n    grad = np.full_like(x, np.round(slope, 4))\n    grad2 = np.zeros_like(x)\n    return (y.tolist(), grad.tolist(), grad2.tolist())"}
{"task_id": 496, "completion_id": 2, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, list):\n        x = [x]\n    y = [round(slope * i + intercept, 4) for i in x]\n    grad = [round(slope, 4) for _ in x]\n    grad2 = [0.0 for _ in x]\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 3, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y = [round(val, 4) for val in y]\n    grad = [round(val, 4) for val in grad]\n    grad2 = [round(val, 4) for val in grad2]\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 4, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    activation = slope * x + intercept\n    first_derivative = slope * np.ones_like(x)\n    second_derivative = np.zeros_like(x)\n    activation = np.round(activation, 4).tolist()\n    first_derivative = np.round(first_derivative, 4).tolist()\n    second_derivative = np.round(second_derivative, 4).tolist()\n    return (activation, first_derivative, second_derivative)"}
{"task_id": 496, "completion_id": 5, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"\n    Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = np.round(slope * x + intercept, 4).tolist()\n    grad = np.round(np.full(len(x), slope), 4).tolist()\n    grad2 = np.round(np.zeros(len(x)), 4).tolist()\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 6, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = np.round(slope * x + intercept, 4)\n    grad = np.round(np.full(y.shape, slope), 4)\n    grad2 = np.zeros(y.shape)\n    return (y.tolist(), grad.tolist(), grad2.tolist())\nx = [1, 2, 3]\nslope = 2.5\nintercept = 1"}
{"task_id": 496, "completion_id": 7, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"\n    Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope, dtype=float)\n    grad2 = np.zeros_like(x, dtype=float)\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n    return (y.tolist(), grad.tolist(), grad2.tolist())\nx = [1, 2, 3, 4, 5]\nslope = 2.0\nintercept = 1.0"}
{"task_id": 496, "completion_id": 8, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = np.around(slope * x + intercept, 4)\n    grad = np.around(np.full(x.shape, slope), 4)\n    grad2 = np.around(np.zeros(x.shape), 4)\n    return (y.tolist(), grad.tolist(), grad2.tolist())"}
{"task_id": 496, "completion_id": 9, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"\n    Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n    slope = [slope] * len(x)\n    intercept = [intercept] * len(x)\n    y = np.around(np.add(np.multiply(slope, x), intercept, dtype='float64'), 4)\n    grad = np.full_like(x, np.around(slope, 4))\n    grad2 = np.zeros_like(x, dtype='float64')\n    return (list(y), list(grad), list(grad2))"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if not 1 <= k <= data.shape[1]:\n        return -1\n    data_standardised = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    data_standardised[np.isnan(data_standardised)] = 0\n    covariance_matrix = np.cov(data_standardised, rowvar=False, bias=True)\n    (eigen_values, eigen_vectors) = np.linalg.eig(covariance_matrix)\n    idx = eigen_values.argsort()[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    eigen_vectors = np.maximum(eigen_vectors, -eigen_vectors)\n    projection = np.dot(data_standardised, eigen_vectors)[:, :k]\n    return np.round(projection, 4).tolist()"}
{"task_id": 499, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)\n    std[std == 0] = 1\n    standardised_data = (data - mean) / std\n    covariance_matrix = np.cov(standardised_data.T, ddof=1)\n    (eigenvals, eigenvecs) = np.linalg.eig(covariance_matrix)\n    indices = np.argsort(eigenvals)[::-1]\n    eigenvals = eigenvals[indices]\n    eigenvecs = eigenvecs[:, indices]\n    max_abs_cols = np.argmax(np.abs(eigenvecs), axis=0)\n    signs = np.sign(eigenvecs[max_abs_cols, range(eigenvecs.shape[1])])\n    eigenvecs *= signs\n    if k >= 1 and k <= data.shape[1]:\n        projected_data = np.dot(standardised_data, eigenvecs[:, :k])\n        return np.round(projected_data, 4).tolist()\n    else:\n        return -1"}
{"task_id": 499, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)\n    std[std == 0] = 1\n    standardised_data = (data - mean) / std\n    covariance_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n    (eigen_values, eigen_vectors) = np.linalg.eig(covariance_matrix)\n    indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[indices]\n    eigen_vectors = eigen_vectors[:, indices]\n    max_abs_cols = np.argmax(np.abs(eigen_vectors), axis=0)\n    signs = np.sign(eigen_vectors[max_abs_cols, range(eigen_vectors.shape[1])])\n    eigen_vectors = eigen_vectors * signs\n    if k < 1 or k > len(eigen_vectors):\n        return -1\n    projection = np.dot(standardised_data, eigen_vectors)[:, :k]\n    return np.round(projection, 4).tolist()"}
{"task_id": 499, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if not 1 <= k <= data.shape[1]:\n        return -1\n    data_standardised = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    covariance_matrix = np.cov(data_standardised, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    sign_corrected_eigenvectors = eigenvectors * np.sign(eigenvectors[np.argmax(np.abs(eigenvectors), axis=0), :])\n    projected_data = np.dot(data_standardised, sign_corrected_eigenvectors[:, :k])\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    if k < 1 or k > data.shape[1]:\n        return -1\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    standardized_data = np.nan_to_num(standardized_data)\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors = np.abs(eigenvectors)\n    projected_data = np.dot(standardized_data, eigenvectors[:, :k])\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    if k < 1 or k > data.shape[1]:\n        return -1\n    data_standard = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    data_standard[np.isnan(data_standard)] = 0\n    cov_mat = np.cov(data_standard, rowvar=False)\n    (eig_val, eig_vec) = np.linalg.eigh(cov_mat)\n    sort_indices = np.argsort(eig_val)[::-1]\n    eig_val = eig_val[sort_indices]\n    eig_vec = eig_vec[:, sort_indices]\n    eig_vec = np.sign(eig_vec[:, 0])[np.newaxis, :] * eig_vec\n    proj_data = np.dot(data_standard, eig_vec)[:, :k]\n    return np.round(proj_data, 4).tolist()"}
{"task_id": 499, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    data_standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    cov_mat = np.cov(data_standardized, rowvar=False)\n    (evalues, evectors) = np.linalg.eigh(cov_mat)\n    indices = np.argsort(evalues)[::-1]\n    evalues = evalues[indices]\n    evectors = evectors[:, indices]\n    max_abs_cols = np.argmax(np.abs(evectors), axis=0)\n    signs = np.sign(evectors[max_abs_cols, range(evectors.shape[1])])\n    evectors *= signs\n    pca_data = np.dot(data_standardized, evectors[:, :k])\n    if k < 1 or k > data.shape[1]:\n        return -1\n    return np.round(pca_data, 4).tolist()"}
{"task_id": 499, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    standard_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    standard_data = np.nan_to_num(standard_data)\n    covariance_matrix = np.cov(standard_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors = np.sign(eigenvectors.max(axis=0)) * eigenvectors\n    projected_data = np.dot(standard_data, eigenvectors[:, :k])\n    projected_data = np.round(projected_data, 4).tolist()\n    if k < 1 or k > data.shape[1]:\n        return -1\n    else:\n        return projected_data"}
{"task_id": 499, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    normalized = data - np.mean(data, axis=0)\n    covariance_matrix = np.cov(normalized, rowvar=False, bias=True)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors[:, 0] = np.abs(eigenvectors[:, 0])\n    if 1 <= k <= len(eigenvalues):\n        projection = np.dot(normalized, eigenvectors[:, :k])\n        return np.round(projection, 4).tolist()\n    else:\n        return -1"}
{"task_id": 499, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    data_center = data - data.mean(axis=0)\n    data_std = data_center / data_center.std(axis=0, ddof=1)\n    cov_mat = np.cov(data_std, rowvar=False)\n    (eig_val, eig_vec) = np.linalg.eigh(cov_mat)\n    eig_val_sorted_ind = np.argsort(eig_val)[::-1]\n    eig_val_sorted = eig_val[eig_val_sorted_ind]\n    eig_vec_sorted = eig_vec[:, eig_val_sorted_ind]\n    max_abs_cols = np.argmax(np.abs(eig_vec_sorted), axis=0)\n    signs = np.sign(eig_vec_sorted[max_abs_cols, range(n_features)])\n    eig_vec_sorted *= signs\n    projections = np.dot(data_std, eig_vec_sorted)[:, :k]\n    return np.round(projections, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.column = None\n        self.value = None\n        self.less_than_value_label = None\n        self.greater_than_value_label = None\n        self.error = None\nclass GradientBoostingBinaryClassifier:\n\n    def __init__(self, n_estimators=20, learning_rate=0.1):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.weak_learners = []\n        self.c = None\n\n    def _fit_residuals(self, X, residuals):\n        (n_samples, n_features) = X.shape\n        weak_learner = DecisionStump()\n        min_error = float('inf')\n        for column in range(n_features):\n            for i in range(n_samples):\n                value = X[i, column]\n                less_than_value_label = np.mean(residuals[X[:, column] <= value])\n                greater_than_value_label = np.mean(residuals[X[:, column] > value])\n                error = sum((residuals[X[:, column] <= value] - less_than_value_label) ** 2) + sum((residuals[X[:, column] > value] - greater_than_value_label) ** 2)\n                if error < min_error:\n                    min_error = error\n                    weak_learner.column = column\n                    weak_learner.value = value\n                    weak_learner.less_than_value_label = less_than_value_label\n                    weak_learner.greater_than_value_label = greater_than_value_label\n                    weak_learner.error = error\n        return weak_learner\n\n    def fit(self, X, y):\n        if type(X) is list:\n            X = np.array(X)\n        if type(y) is list:\n            y = np.array(y)\n        self.c = np.mean(y)\n        y_pred = np.full_like(y, fill_value=self.c)\n        for _ in range(self.n_estimators):\n            residuals = y - y_pred\n            weak_learner = self._fit_residuals(X, residuals)\n            self.weak_learners.append(weak_learner)\n            y_pred += self.learning_rate * np.where(X[:, weak_learner.column] <= weak_learner.value, weak_learner.less_than_value_label, weak_learner.greater_than_value_label)\n\n    def predict(self, X):\n        y_pred = np.full((X.shape[0],), fill_value=self.c)\n        for weak_learner in self.weak_learners:\n            y_pred += self.learning_rate * np.where(X[:, weak_learner.column] <= weak_learner.value, weak_learner.less_than_value_label, weak_learner.greater_than_value_label)\n        return np.where(y_pred > 0.5, 1, 0).tolist()\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    model = GradientBoostingBinaryClassifier(n_estimators, learning_rate)\n    model.fit(X_train, y_train)\n    return model.predict(X_test)"}
{"task_id": 500, "completion_id": 1, "solution": "from sklearn.tree import DecisionTreeRegressor\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    (num_samples, num_features) = (len(X_train), len(X_train[0]))\n    F = np.mean(y_train)\n    residuals = y_train\n    tree_params = {'max_depth': 1}\n    for _ in range(n_estimators):\n        tree = DecisionTreeRegressor(**tree_params)\n        tree.fit(X_train, residuals)\n        residuals = [r - learning_rate * t for (r, t) in zip(residuals, tree.predict(X_train))]\n        F += learning_rate * tree.predict(X_test)\n    return [round(f) for f in F]"}
{"task_id": 500, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    def decision_stump(X, y):\n        (best_feature, best_threshold, best_score) = (None, None, np.inf)\n        for feature in range(X.shape[1]):\n            for threshold in np.unique(X[:, feature]):\n                (left_mask, right_mask) = (X[:, feature] <= threshold, X[:, feature] > threshold)\n                left_residuals = y[left_mask]\n                right_residuals = y[right_mask]\n                score = left_residuals.mean() ** 2 + right_residuals.mean() ** 2\n                if score < best_score:\n                    (best_feature, best_threshold, best_score) = (feature, threshold, score)\n        return (best_feature, best_threshold)\n\n    def predict_stump(X, feature, threshold):\n        return np.where(X[:, feature] <= threshold, 1, 0)\n    F_x = np.full(X_train.shape[0], np.mean(y_train))\n    predictions = np.where(F_x < 0.5, 0, 1)\n    for _ in range(n_estimators):\n        (feature, threshold) = decision_stump(X_train, y_train - predictions)\n        stump_predictions = learning_rate * predict_stump(X_train, feature, threshold)\n        F_x += stump_predictions\n        predictions = np.where(F_x < 0.5, 0, 1)\n    test_predictions = F_x.copy()\n    for _ in range(n_estimators):\n        test_predictions += learning_rate * predict_stump(X_test, feature, threshold)\n    return np.where(test_predictions < 0.5, 0, 1).tolist()"}
{"task_id": 500, "completion_id": 3, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature = None\n        self.threshold = None\n        self.alpha = None\n\n    def fit(self, X, y, sample_weight):\n        (best_feature, best_threshold, min_error) = (None, None, float('inf'))\n        for feature in range(X.shape[1]):\n            feature_values = sorted(set(X[:, feature]))\n            for j in range(len(feature_values) - 1):\n                threshold = (feature_values[j] + feature_values[j + 1]) / 2\n                predictions = (X[:, feature] > threshold).astype(int)\n                error = np.sum(sample_weight * np.power(y - predictions, 2))\n                if error < min_error:\n                    min_error = error\n                    (best_feature, best_threshold) = (feature, threshold)\n        (self.feature, self.threshold) = (best_feature, best_threshold)\n        predictions = (X[:, best_feature] > best_threshold).astype(int)\n        self.alpha = np.sum((y - predictions) * sample_weight) / np.sum(sample_weight)\n\n    def predict(self, X):\n        return (X[:, self.feature] > self.threshold).astype(int)\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    (X_train, y_train, X_test) = (np.array(X_train), np.array(y_train), np.array(X_test))\n    sample_weight = np.ones(len(y_train)) / len(y_train)\n    F = np.mean(y_train)\n    models = []\n    for _ in range(n_estimators):\n        model = DecisionStump()\n        model.fit(X_train, y_train, sample_weight)\n        predictions = model.predict(X_train)\n        F += learning_rate * model.alpha * predictions\n        sample_weight *= np.exp(-model.alpha * y_train * predictions)\n        sample_weight /= np.sum(sample_weight)\n        models.append(model)\n    predictions = np.zeros(X_test.shape[0])\n    for model in models:\n        predictions += learning_rate * model.predict(X_test)\n    return (F + predictions > 0.5).astype(int).tolist()"}
{"task_id": 500, "completion_id": 4, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature = None\n        self.threshold = None\n        self.alpha = None\n\n    def fit(self, X, y, sample_weight):\n        n_features = X.shape[1]\n        num_samples = X.shape[0]\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        for feature in range(n_features):\n            self.feature = feature\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                predictions = np.where(X[:, feature] <= threshold, 0, 1)\n                error = np.sum(sample_weight * (y != predictions))\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n        self.feature = best_feature\n        self.threshold = best_threshold\n        self.alpha = 0.5 * np.log((1 - min_error / num_samples) / (min_error / num_samples))\n\n    def predict(self, X):\n        return np.where(X[:, self.feature] <= self.threshold, 0, 1)\nclass GradientBoostingClassifier:\n\n    def __init__(self, n_estimators=20, learning_rate=0.1):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.estimators = []\n\n    def fit(self, X, y):\n        sample_weight = np.full(X.shape[0], 1 / X.shape[0])\n        F = np.mean(y)\n        for _ in range(self.n_estimators):\n            estimator = DecisionStump()\n            estimator.fit(X, y, sample_weight)\n            predictions = estimator.predict(X)\n            new_F = F + self.learning_rate * estimator.alpha * predictions\n            G = new_F - F\n            h_m = estimator.alpha * predictions\n            y = y - G\n            sample_weight = sample_weight * np.exp(-h_m * y)\n            sample_weight = sample_weight / np.sum(sample_weight)\n            F = new_F\n            self.estimators.append(estimator)\n\n    def predict(self, X):\n        F = np.mean([estimator.alpha * estimator.predict(X) for estimator in self.estimators])\n        return np.where(F < 0.5, 0, 1)\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    model = GradientBoostingClassifier(n_estimators=n_estimators, learning_rate=learning_rate)\n    model.fit(X_train, y_train)\n    return model.predict(X_test).tolist()"}
{"task_id": 500, "completion_id": 5, "solution": "from sklearn.tree import DecisionTreeClassifier\nimport numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_pred = [np.mean(y_train)] * len(y_train)\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        model = DecisionTreeClassifier(max_depth=1)\n        model.fit(X_train, residuals)\n        residual_pred = model.predict(X_train)\n        y_pred += learning_rate * residual_pred\n    y_pred_test = np.mean(y_train) + learning_rate * np.sum([learning_rate * model.predict(X_test) for model in models], axis=0)\n    return [1 if i > 0.5 else 0 for i in y_pred_test]"}
{"task_id": 500, "completion_id": 6, "solution": "import numpy as np\ndef compute_threshold(x, residuals):\n    if len(x) == 0:\n        return None\n    x = np.sort(x)\n    residuals = np.sort(residuals)\n    thresholds = (x[1:] + x[:-1]) / 2.0\n    losses = np.square(np.cumsum(residuals)[:-1]).argmin()\n    return thresholds[losses]\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    c = np.mean(y_train)\n    f = np.full(n_samples, c)\n    preds = np.zeros(n_samples)\n    for _ in range(n_estimators):\n        best_split_point = np.inf\n        best_feature = None\n        best_threshold = None\n        left_child = np.full(n_samples, -1)\n        right_child = np.full(n_samples, -1)\n        residuals = y_train - f\n        for feature in range(n_features):\n            thresholds = compute_threshold(X_train[:, feature], residuals)\n            if thresholds is None:\n                continue\n            left = X_train[:, feature] <= thresholds\n            right = X_train[:, feature] > thresholds\n            left_rss = np.sum(residuals[left])\n            right_rss = np.sum(residuals[right])\n            if left_rss + right_rss < best_split_point:\n                best_split_point = left_rss + right_rss\n                best_feature = feature\n                best_threshold = thresholds\n                (left_child[left], right_child[right]) = (0, 1)\n        split_point = best_split_point\n        left_rss /= len(left_child[left_child == 0])\n        right_rss /= len(right_child[right_child == 1])\n        preds = preds + learning_rate * (left_rss * (preds == left_child) + right_rss * (preds == right_child))\n    return [1 if p >= 0.5 else 0 for p in preds]"}
{"task_id": 500, "completion_id": 7, "solution": "import numpy as np\ndef calc_stump(x, y, sample_weight):\n    x_with_weight = x * np.sqrt(sample_weight)\n    indices = np.argsort(x_with_weight)\n    x_sorted = x_with_weight[indices]\n    y_sorted = y[indices]\n    weight_left = np.concatenate([[0], np.cumsum(sample_weight[indices])])\n    weight_right = np.sum(sample_weight) - weight_left\n    y_cumsum = np.cumsum(y_sorted * np.sqrt(sample_weight[indices]))\n    y_left = y_cumsum / weight_left\n    y_right = (np.sum(y_sorted * np.sqrt(sample_weight[indices])) - y_left) / weight_right\n    score = weight_left * y_left ** 2 + weight_right * y_right ** 2\n    if score[0] < score[-1]:\n        threshold = x_sorted[0] - 1e-09\n    else:\n        threshold = x_sorted[-1] + 1e-09\n    return (threshold, y_left[0], y_right[-1], score)\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    w = np.full(y_train.shape, 1 / len(y_train))\n    c = np.mean(y_train)\n    F = np.full(y_train.shape, c)\n    for m in range(n_estimators):\n        best_loss = np.inf\n        for feature in range(X_train.shape[1]):\n            (thresh, const1, const2, score) = calc_stump(X_train[:, feature], y_train - F, w)\n            loss = score.min()\n            if loss < best_loss:\n                (best_feature, best_thresh, best_const1, best_const2, best_score) = (feature, thresh, const1, const2, score)\n                best_loss = loss\n        F += learning_rate * np.where(X_train[:, best_feature] <= best_thresh, best_const1, best_const2)\n    return [int(x >= 0.5) for x in F]"}
{"task_id": 500, "completion_id": 8, "solution": "import numpy as np\ndef calculate_residuals(y_train, F):\n    \"\"\"Calculate the residuals for the current model.\"\"\"\n    return y_train - np.mean(y_train) - F\ndef find_stump(X_train, residuals):\n    \"\"\"Find the optimal decision stump for the current residuals.\"\"\"\n    sorted_indices = np.argsort(X_train)\n    X_train = np.array(X_train)[sorted_indices]\n    residuals = np.array(residuals)[sorted_indices]\n    candidate_points = (X_train[:-1] + X_train[1:]) / 2.0\n    candidate_responses = np.sign(residuals[1:] - residuals[:-1])\n    best_point_ind = np.argmin(np.abs(candidate_responses))\n    best_point = candidate_points[best_point_ind]\n    best_response = candidate_responses[best_point_ind]\n    left_mask = X_train <= best_point\n    right_mask = X_train > best_point\n    return (best_point, best_response, left_mask, right_mask)\ndef predict_labels(X_test, c, h_list):\n    \"\"\"Predict labels for X_test using the ensemble of weak classifiers.\"\"\"\n    F = np.full(len(X_test[0]), fill_value=c)\n    for (h, eta) in h_list:\n        F += eta * np.where(np.array(X_test) <= h, 1, -1)\n    return [1 if f > 0.5 else 0 for f in F]\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\"\"\"\n    c = np.mean(y_train)\n    residuals = calculate_residuals(y_train, 0)\n    h_list = []\n    for _ in range(n_estimators):\n        (h, response, left_mask, right_mask) = find_stump(X_train[0], residuals)\n        F = np.where(left_mask, response, -response)\n        residuals = calculate_residuals(y_train, F)\n        h_list.append((h, learning_rate))\n    return predict_labels(X_test, c, h_list)"}
{"task_id": 500, "completion_id": 9, "solution": "import numpy as np\ndef compute_split_points(feature):\n    unique_values = np.unique(feature)\n    return [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\ndef make_split(values, labels, split_point):\n    left_indices = np.where(values <= split_point)\n    right_indices = np.where(values > split_point)\n    left_labels = labels[left_indices]\n    right_labels = labels[right_indices]\n    return (left_labels, right_labels)\ndef compute_mean(labels):\n    return np.mean(labels)\ndef compute_residuals(labels, predictions):\n    return labels - predictions\ndef fit_stump(feature, labels):\n    split_points = compute_split_points(feature)\n    best_split_point = None\n    best_score = float('inf')\n    for split_point in split_points:\n        (left_labels, right_labels) = make_split(feature, labels, split_point)\n        if len(left_labels) == 0 or len(right_labels) == 0:\n            continue\n        left_mean = compute_mean(left_labels)\n        right_mean = compute_mean(right_labels)\n        residuals = compute_residuals(labels, np.where(feature <= split_point, left_mean, right_mean))\n        score = np.mean(residuals ** 2)\n        if score < best_score:\n            best_score = score\n            best_split_point = split_point\n    return best_split_point\ndef predict(model, X_test):\n    F = model['initial_prediction']\n    for (_, stump) in model['stumps'].items():\n        split_point = stump['split_point']\n        left_value = stump['left_value']\n        right_value = stump['right_value']\n        left_indices = np.where(X_test[:, stump['feature_idx']] <= split_point)\n        right_indices = np.where(X_test[:, stump['feature_idx']] > split_point)\n        F[left_indices] += stump['learning_rate'] * left_value\n        F[right_indices] += stump['learning_rate'] * right_value\n    return [int(f >= 0.5) for f in F]\ndef gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1):\n    feature_importances = np.zeros(len(X_train[0]))\n    initial_prediction = compute_mean(y_train)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_pred = initial_prediction * np.ones(len(y_train))\n    stumps = {}\n    y_residuals = compute_residuals(y_train, y_pred)\n    for i in range(n_estimators):\n        best_score = float('inf')\n        for feature_idx in range(X_train.shape[1]):\n            split_point = fit_stump(X_train[:, feature_idx], y_residuals)\n            if split_point is None:\n                continue\n            (left_labels, right_labels) = make_split(X_train[:, feature_idx], y_residuals, split_point)\n            left_value = compute_mean(left_labels)\n            right_value = compute_mean(right_labels)\n            left_indices = X_train[:, feature_idx] <= split_point\n            right_indices = X_train[:, feature_idx] > split_point\n            feature_importances[feature_idx] += len(left_labels) * left_value + len(right_labels) * right_value\n            y_pred[left_indices] += learning_rate * left_value\n            y_pred[right_indices] += learning_rate * right_value\n            residuals = compute_residuals(y_train, y_pred)\n            score = np.mean(residuals ** 2)\n            if score < best_score:\n                best_score = score\n                best_split_point = split_point\n                best_feature_idx = feature_idx\n                best_left_value = left_value\n                best_right_value = right_value\n        stumps[i] = {'split_point': best_split_point, 'feature_idx': best_feature_idx, 'left_value': best_left_value, 'right_value': best_right_value, 'learning_rate': learning_rate}\n        y_residuals = compute_residuals(y_train, y_pred)\n    model = {'initial_prediction': initial_prediction, 'stumps': stumps, 'feature_importances': feature_importances}\n    return predict(model, X_test)"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if len(X) == 0:\n        return []\n    n_visible = len(vbias)\n    n_hidden = len(hbias)\n    batch_size = len(X)\n    vhb = X.dot(W) + hbias\n    hbias_term = np.expand_dims(hbias, 0).repeat(batch_size, 0)\n    h0_prob = 1 / (1 + np.exp(-(vhb - hbias_term)))\n    vhb_k = X.dot(W)\n    for _ in range(k):\n        hb_k = vhb_k + hbias_term\n        h_k_prob = 1 / (1 + np.exp(-(hb_k - hbias_term)))\n        vb_k = h_k_prob.dot(W.T)\n        vbias_term = np.expand_dims(vbias, 0).repeat(batch_size, 0)\n        v_k_prob = 1 / (1 + np.exp(-(vb_k - vbias_term)))\n        vhb_k = v_k_prob.dot(W)\n    hb_k = vhb_k + hbias_term\n    h_k_prob = 1 / (1 + np.exp(-(hb_k - hbias_term)))\n    pos_grad = X.T.dot(h0_prob)\n    neg_grad = v_k_prob.T.dot(h_k_prob)\n    delta_W = learning_rate * (pos_grad - neg_grad) / batch_size\n    W_new = W + delta_W\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.shape[0] == 0:\n        return []\n    pos_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_hidden_states = np.random.binomial(1, pos_hidden_probs)\n    v_k = X\n    for _ in range(k):\n        h_k_probs = sigmoid(np.dot(v_k, W) + hbias)\n        h_k = np.random.binomial(1, h_k_probs)\n        v_k_probs = sigmoid(np.dot(h_k, W.T) + vbias)\n        v_k = np.random.binomial(1, v_k_probs)\n    neg_hidden_probs = sigmoid(np.dot(v_k, W) + hbias)\n    batch_size = X.shape[0]\n    pos_grad = np.dot(X.T, pos_hidden_probs) / batch_size\n    neg_grad = np.dot(v_k_probs.T, neg_hidden_probs) / batch_size\n    W_new = W + learning_rate * (pos_grad - neg_grad)\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.shape[0] == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = W.shape[1]\n    v0 = X\n    h0_prob = sigmoid(v0 @ W + hbias)\n    h0 = np.random.binomial(1, h0_prob)\n    v_k = v0\n    h_k = h0\n    for step in range(k):\n        v_k_prob = sigmoid(h_k @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n        v_k = v_k_prob\n        h_k = h_k_prob\n    pos_grad = X.T @ h0_prob / m\n    neg_grad = v_k_prob.T @ h_k_prob / m\n    W_new = W + learning_rate * (pos_grad - neg_grad)\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if len(X) == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = len(hbias)\n    h_0_prob = sigmoid(np.dot(X, W) + hbias)\n    h_k_prob = h_0_prob.copy()\n    for _ in range(k):\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n    pos_grad = np.dot(X.T, h_0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(W_new[i, j], 4) for j in range(n_h)] for i in range(n_v)]"}
{"task_id": 505, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if len(X) == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = len(hbias)\n    v0_prob = sigmoid(np.dot(X, W) + hbias)\n    h0_prob = sigmoid(np.dot(X, W).T + vbias).T\n    v_k_prob = v0_prob\n    h_k_prob = h0_prob\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(elem, 4) for elem in row] for row in W_new.tolist()]"}
{"task_id": 505, "completion_id": 5, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if len(X) == 0:\n        return []\n    X_term = np.dot(X, W) + hbias\n    h_pos_prob = np.mean([sigmoid(X_term) for X_term in X_term], axis=0)\n    (v_neg, h_neg) = (X.copy(), sigmoid(np.dot(X, W) + hbias))\n    for step in range(k):\n        h_neg_term = np.dot(v_neg, W) + hbias\n        v_neg_term = np.dot(h_neg, W.T) + vbias\n        h_neg = sigmoid(h_neg_term)\n        v_neg = sigmoid(v_neg_term)\n    pos_grad = np.dot(X.T, h_pos_prob)\n    neg_grad = np.dot(v_neg.T, h_neg)\n    update = learning_rate * (pos_grad - neg_grad) / len(X)\n    W_new = W + update\n    return [[round(num, 4) for num in row] for row in W_new.tolist()]\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 6, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if len(X) == 0:\n        return []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    batch_size = X.shape[0]\n    n_visible = X.shape[1]\n    n_hidden = W.shape[1]\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_k = h0_prob > np.random.rand(batch_size, n_hidden)\n    h_k = h0_prob\n    for step in range(k):\n        v_k = sigmoid(np.dot(h_k, W.T) + vbias)\n        h_k = sigmoid(np.dot(v_k, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k.T, h_k)\n    W_new = W + learning_rate * ((pos_grad - neg_grad) / batch_size)\n    return [[round(x, 4) for x in row] for row in W_new.tolist()]"}
{"task_id": 505, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if len(X) == 0:\n        return []\n    pos_h_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, pos_h_probs)\n    (neg_v_probs, neg_h_probs) = (X, pos_h_probs)\n    for _ in range(k):\n        neg_h_probs = sigmoid(np.dot(neg_v_probs, W) + hbias)\n        neg_v_probs = sigmoid(np.dot(neg_h_probs, W.T) + vbias)\n    neg_grad = np.dot(neg_v_probs.T, neg_h_probs)\n    update = learning_rate * (pos_grad - neg_grad) / len(X)\n    W_new = W + update\n    return [list(map(lambda x: round(x, 4), row)) for row in W_new.tolist()]"}
{"task_id": 505, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1 + np.exp(-x))\ndef contrastive_divergence(X, W, hbias, vbias, learning_rate, k):\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.size == 0:\n        return []\n    (n_samples, n_visible) = X.shape\n    (_, n_hidden) = W.shape\n    v_to_h = X @ W\n    v_to_h = sigmoid(v_to_h)\n    h_probs = v_to_h\n    v_probs = v_to_h\n    pos_grad = X.transpose() @ h_probs\n    v_to_h = np.random.random(size=(n_samples, n_hidden)) < v_probs\n    for _ in range(k):\n        h_to_v = v_to_h @ W.transpose()\n        v_to_h = sigmoid(h_to_v)\n        v_to_h = np.random.random(size=(n_samples, n_hidden)) < v_to_h\n    h_to_v = v_to_h @ W.transpose()\n    v_to_h = sigmoid(h_to_v)\n    v_to_h = np.random.random(size=(n_samples, n_visible)) < v_to_h\n    neg_grad = v_to_h.transpose() @ v_probs\n    W += learning_rate * ((pos_grad - neg_grad) / n_samples)\n    return np.round(W, 4).tolist()"}
{"task_id": 505, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid function\"\"\"\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, vbias: np.ndarray, hbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    (batch_size, n_visible) = X.shape\n    n_hidden = W.shape[1]\n    h0_prob = sigmoid(X @ W + hbias)\n    h_0 = np.random.binomial(n=1, p=h0_prob)\n    v_k_prob = h_0\n    h_k_prob = h0_prob\n    for _ in range(k):\n        v_k_prob = sigmoid(v_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    grad = pos_grad - neg_grad\n    new_W = W + learning_rate * grad / batch_size\n    return np.round(new_W, 4).tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    x_array = np.array(x) if isinstance(x, list) else x\n    y_array = np.array(y) if isinstance(y, list) else y\n    if len(x_array) != len(y_array):\n        return -1\n    differences = np.abs(x_array - y_array)\n    distance = np.max(differences)\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 1, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if x.shape != y.shape:\n        return -1\n    differences = np.abs(x - y)\n    return np.round(np.max(differences), 4)"}
{"task_id": 509, "completion_id": 2, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if len(x) != len(y):\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 509, "completion_id": 3, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    diff = [abs(xi - yi) for (xi, yi) in zip(x, y)]\n    return round(max(diff), 4)"}
{"task_id": 509, "completion_id": 4, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distances = np.abs(x - y)\n    return round(np.max(distances), 4)"}
{"task_id": 509, "completion_id": 5, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\" Compute the Chebyshev (maximum) distance between two real-valued vectors.\n    The input vectors 'x' and 'y' must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        return -1\n    if x.shape[0] != y.shape[0]:\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 509, "completion_id": 6, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    diffs = np.abs(x - y)\n    return round(np.max(diffs), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 7, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    if not (isinstance(x, (list, np.ndarray)) and isinstance(y, (list, np.ndarray))):\n        raise TypeError('x and y must be lists or numpy arrays')\n    if len(x) != len(y):\n        return -1\n    (x, y) = (np.array(x), np.array(y))\n    diff_array = np.abs(x - y)\n    return round(np.max(diff_array), 4)"}
{"task_id": 509, "completion_id": 8, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if len(x) != len(y):\n        return -1\n    max_diff = np.max(np.abs(x - y))\n    return round(max_diff, 4)\nx = np.array([1.1111])\ny = np.array([2.2222])"}
{"task_id": 509, "completion_id": 9, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    (x, y) = map(np.array, (x, y))\n    if len(x) != len(y):\n        return -1\n    return np.max(np.abs(x - y)).round(4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=-1)\n    total_loss = reconstruction_loss + kl_divergence\n    return np.round(np.mean(total_loss), 6)"}
{"task_id": 510, "completion_id": 1, "solution": "import numpy as np\nfrom scipy.stats import bernoulli\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    rec_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_div = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=-1)\n    loss = np.mean(rec_loss + kl_div)\n    return round(loss, 6)"}
{"task_id": 510, "completion_id": 2, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    loss = reconstruction_loss + kl_divergence\n    batch_size = y.shape[0]\n    average_loss = loss / batch_size\n    return round(average_loss, 6)\ny = np.random.choice([0, 1], size=(32, 64))\ny_pred = np.random.rand(32, 64)\nt_mean = np.random.randn(32, 20)\nt_log_var = np.random.rand(32, 20)"}
{"task_id": 510, "completion_id": 3, "solution": "def vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.power(t_mean, 2) - np.exp(t_log_var), axis=-1)\n    average_loss = np.mean(reconstruction_loss + kl_divergence)\n    return round(average_loss, 6)"}
{"task_id": 510, "completion_id": 4, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=-1)\n    vae_loss = np.mean(reconstruction_loss + kl_divergence)\n    return round(vae_loss, 6)"}
{"task_id": 510, "completion_id": 5, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    loss = (reconstruction_loss + kl_divergence) / y.shape[0]\n    return round(loss, 6)"}
{"task_id": 510, "completion_id": 6, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    binary_cross_entropy = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    KL_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    loss = (binary_cross_entropy + KL_divergence) / y.shape[0]\n    return round(loss, 6)"}
{"task_id": 510, "completion_id": 7, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    loss = reconstruction_loss + kl_divergence\n    return round(loss, 6)"}
{"task_id": 510, "completion_id": 8, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    reconstruction_loss = np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    reconstruction_loss = -np.mean(reconstruction_loss)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=-1)\n    kl_divergence = np.mean(kl_divergence)\n    loss = reconstruction_loss + kl_divergence\n    return round(loss, 6)"}
{"task_id": 510, "completion_id": 9, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    batch_size = y.shape[0]\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -1 * np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred)) / batch_size\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var)) / batch_size\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = X.dot(w)\n    V_pow2 = V ** 2\n    X_pow2 = X ** 2\n    interactions = np.sum(X.dot(V) ** 2 - X_pow2.dot(V_pow2), axis=1) / 2.0\n    predictions = w0 + linear_term + interactions\n    return predictions.round(4).tolist()"}
{"task_id": 513, "completion_id": 1, "solution": "import numpy as np\ndef fm_predict(X, w0, w, V):\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = np.dot(X, w) + w0\n    interaction_terms = np.sum(np.square(np.dot(X, V)) - np.dot(np.square(X), np.square(V)), axis=1)\n    predictions = linear_terms + 0.5 * interaction_terms\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 513, "completion_id": 2, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    (X, w, V) = map(np.array, (X, w, V))\n    linear_terms = np.dot(X, w)\n    interactions = (np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2)).sum(axis=1)\n    predictions = w0 + 0.5 * interactions + linear_terms\n    return np.round(predictions, 4).tolist()\nX = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\nw0 = 1.0\nw = [1.0, 2.0, 3.0]\nV = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 513, "completion_id": 3, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = np.dot(X, w)\n    interaction_terms = 0.5 * np.sum(np.power(np.dot(X, V), 2) - np.dot(np.power(X, 2), np.power(V, 2)), axis=1)\n    predictions = np.round(w0 + linear_terms + interaction_terms, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 4, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = w0 + np.dot(X, w)\n    square_terms = np.square(X.dot(V)) - np.square(X.dot(np.square(V)))\n    interaction_terms = 0.5 * np.sum(square_terms, axis=1)\n    predictions = (linear_terms + interaction_terms).round(4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 5, "solution": "import numpy as np\ndef fm_predict(X, w0, w, V):\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = X.dot(w)\n    interaction_terms = 0.5 * np.sum(np.subtract(np.power(X.dot(V), 2), np.power(X.dot(np.power(V, 2)), 1)), axis=1)\n    predictions = np.round(w0 + linear_terms + interaction_terms, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 6, "solution": "import numpy as np\ndef fm_predict(X, w0, w, V):\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_part = X.dot(w)\n    squared_V = np.square(X.dot(np.square(V)))\n    squared_X_V = np.sum(np.square(X.dot(V)), axis=1)\n    interaction_part = 0.5 * (squared_V - squared_X_V)\n    pred = w0 + linear_part + interaction_part\n    return np.round(pred, 4).tolist()"}
{"task_id": 513, "completion_id": 7, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = w0 + np.dot(X, w)\n    interacting_terms = 0.5 * np.sum(np.square(np.dot(X, V)) - np.square(np.dot(X, np.square(V))), axis=1)\n    predictions = linear_terms + interacting_terms\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 513, "completion_id": 8, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_predictor = X.dot(w)\n    first_interaction = (X.dot(V) ** 2).sum(axis=1)\n    second_interaction = (X ** 2).dot(V ** 2).sum(axis=1)\n    interaction_predictor = first_interaction - second_interaction\n    y_pred = w0 + 0.5 * interaction_predictor + linear_predictor\n    y_pred = np.round(y_pred, 4)\n    return y_pred.tolist()"}
{"task_id": 513, "completion_id": 9, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = np.dot(X, w)\n    interaction_terms = 0.5 * np.sum(np.square(np.dot(X, V)) - np.square(np.dot(X ** 2, np.square(V))), axis=1)\n    predictions = w0 + linear_terms + interaction_terms\n    return np.round(predictions, 4).tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + np.exp(-np.array(z)))\n    return result.round(4).tolist() if isinstance(z, (list, tuple, np.ndarray)) else float(result)"}
{"task_id": 517, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    result = 1 / (1 + np.exp(-z))\n    rounded_result = [round(num, 4) for num in result]\n    if isinstance(z, (float, int)):\n        return rounded_result[0]\n    else:\n        return rounded_result"}
{"task_id": 517, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sig = 1 / (1 + np.exp(-z))\n    small_z_indices = np.where(np.abs(z) < 700)\n    sig[small_z_indices] = 1 / (1 + np.exp(-z[small_z_indices]))\n    if isinstance(z, (np.ndarray, list, tuple)):\n        return np.around(sig, decimals=4).tolist()\n    else:\n        return sig.item()"}
{"task_id": 517, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if np.isscalar(z):\n        return round(1 / (1 + np.exp(-z)), 4)\n    else:\n        input_array = np.array(z)\n        result = 1 / (1 + np.exp(-input_array))\n        result = np.round(result, 4)\n        return result.tolist()"}
{"task_id": 517, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\"\"\"\n    if type(z) is list or type(z) is np.ndarray:\n        z = np.array(z)\n        result = 1 / (1 + np.exp(-z))\n        return np.round(result, 4).tolist()\n    elif type(z) is int or type(z) is float:\n        return round(1 / (1 + np.exp(-z)), 4)\n    else:\n        raise TypeError('Input type must be int, float, list, or ndarray.')"}
{"task_id": 517, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    exp_z = np.exp(-z)\n    sig = 1 / (1 + exp_z)\n    return np.around(sig, 4).tolist()"}
{"task_id": 517, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sig = 1 / (1 + np.exp(-z))\n    sig = np.around(sig, 4)\n    if sig.size == 1:\n        sig = sig[()]\n    else:\n        sig = sig.tolist()\n    return sig"}
{"task_id": 517, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    return np.where(z > 700, 1.0, np.where(z < -700, 0.0, 1 / (1 + np.exp(-z))))"}
{"task_id": 517, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    out = 1 / (1 + np.exp(-z))\n    out = np.round(out, 4)\n    return out.item() if out.size == 1 else out.tolist()"}
{"task_id": 517, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray - input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(1 / (1 + np.exp(-z)), 4)\n    elif isinstance(z, (list, tuple)):\n        z_array = np.array(z)\n    elif isinstance(z, np.ndarray):\n        z_array = z\n    else:\n        raise ValueError('Unsupported input type')\n    result = 1 / (1 + np.exp(-z_array))\n    result_rounded = np.around(result, 4)\n    return result_rounded.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = np.argmax(actual, axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = np.argmax(predicted, axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        actual = actual.argmax(axis=1) if actual.ndim == 2 and actual.shape[1] > 1 else actual\n        predicted = predicted.argmax(axis=1) if predicted.ndim == 2 and predicted.shape[1] > 1 else predicted\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if len(actual.shape) >= 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) >= 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        \"\"\"Wraps the function by converting one-hot encoded arrays to 1-D class labels.\"\"\"\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    else:\n        return np.round(z * (1 - z), 4)"}
{"task_id": 520, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(ele) for ele in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, (float, int)):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError('Unsupported input type')"}
{"task_id": 520, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    z = np.asarray(z)\n    if z.shape == ():\n        return np.round(z * (1 - z), 4).item()\n    else:\n        grad = z * (1 - z)\n        return np.round(grad, 4).tolist()"}
{"task_id": 520, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    if isinstance(z, (int, float)):\n        if 0 <= z <= 1:\n            return np.round(z * (1 - z), 4)\n        else:\n            raise ValueError('Scalar inputs must be in the range [0, 1]')\n    elif isinstance(z, list):\n        return [sigmoid_grad(x) if isinstance(x, (int, float)) else sigmoid_grad(x) for x in z]\n    elif isinstance(z, np.ndarray):\n        if np.all((z >= 0) & (z <= 1)):\n            return np.round(z * (1 - z), 4)\n        else:\n            raise ValueError('NumPy array values must be in the range [0, 1]')\n    else:\n        raise TypeError('Input must be a scalar, list, or NumPy array')"}
{"task_id": 520, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).\n    The derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or numpy array of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n\n    \"\"\"\n    if not np.isscalar(z) and (not z):\n        return z\n    z = np.array(z)\n    if not np.all((z >= 0) & (z <= 1)):\n        raise ValueError('All values in z must be in the range [0,1]')\n    grad = z * (1 - z)\n    grad = np.round(grad, 4)\n    if np.isscalar(z):\n        grad = grad.tolist()\n    return grad"}
{"task_id": 520, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, float) or isinstance(z, int):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list) and z:\n        return list(map(sigmoid_grad, z))\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4).tolist()\n    elif not z:\n        return []"}
{"task_id": 520, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(zi) for zi in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError('z must be either a number, list or NumPy ndarray.')"}
{"task_id": 520, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    z = np.array(z)\n    grad = z * (1 - z)\n    grad = np.round(grad, 4)\n    if z.shape == ():\n        return float(grad)\n    else:\n        return grad.tolist()"}
{"task_id": 520, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    if np.isscalar(z):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(x) for x in z]\n    else:\n        return np.round(z * (1 - z), 4)"}
{"task_id": 520, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise ValueError(f'Unsupported input type: {type(z)}')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n    A point (x1 , x2) is labelled with 1 if w1\u00b7x1 + w2\u00b7x2 + b >= 0 and\n    with -1 otherwise. The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n    Args:\n        X: The original data set as a list of [x1 , x2] pairs.\n        W: List or tuple with exactly two weights [w1 , w2].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x2_min) = np.min(X, axis=0)\n    (x1_max, x2_max) = np.max(X, axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    labels = np.sign(x1_mesh * W[0] + x2_mesh * W[1] + b)\n    return labels.tolist()\nbias = np.random.normal()\nlabels = decision_boundary_grid(data.tolist(), weights.tolist(), bias)"}
{"task_id": 528, "completion_id": 1, "solution": "import numpy as np\ndef decision_boundary_grid(X, W, b, grid_n=100):\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * X1 + W[1] * X2 + b\n    Y_pred = np.where(Z >= 0, 1, -1)\n    return Y_pred.tolist()"}
{"task_id": 528, "completion_id": 2, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (np.min(X[:, 0]), np.max(X[:, 0]))\n    (x2_min, x2_max) = (np.min(X[:, 1]), np.max(X[:, 1]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (xx1, xx2) = np.meshgrid(x1_plot, x2_plot)\n    Z = np.sign(W[0] * xx1 + W[1] * xx2 + b)\n    return Z.tolist()"}
{"task_id": 528, "completion_id": 3, "solution": "import numpy as np\ndef decision_boundary_grid(X, W, b, grid_n=100):\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    x = np.array(X)\n    (x1_min, x1_max) = (x[:, 0].min(), x[:, 0].max())\n    (x2_min, x2_max) = (x[:, 1].min(), x[:, 1].max())\n    (x1_plot, x2_plot) = (np.linspace(x1_min, x1_max, grid_n), np.linspace(x2_min, x2_max, grid_n))\n    (x1_matrix, x2_matrix) = np.meshgrid(x1_plot, x2_plot)\n    z = W[0] * x1_matrix + W[1] * x2_matrix + b\n    y_pred = [[-1 if i < 0 else 1 for i in j] for j in z]\n    return y_pred"}
{"task_id": 528, "completion_id": 4, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"\n    Generate a matrix of predictions for a 2-D linear classifier. \n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with -1 otherwise. The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape (grid_n x grid_n) containing only \n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    x1_range = np.linspace(X[:, 0].min(), X[:, 0].max(), grid_n)\n    x2_range = np.linspace(X[:, 1].min(), X[:, 1].max(), grid_n)\n    (x1_plot, x2_plot) = np.meshgrid(x1_range, x2_range)\n    output = np.sign(x1_plot[..., np.newaxis] * W[0] + x2_plot[..., np.newaxis] * W[1] + b)\n    return output.tolist()\noutput = decision_boundary_grid(X=[[0, 0], [1, 1], [0, 1], [1, 0]], W=[1, 1], b=-1.5, grid_n=2)"}
{"task_id": 528, "completion_id": 5, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(Z >= 0, 1, -1)\n    return labels.tolist()"}
{"task_id": 528, "completion_id": 6, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    X = np.array(X)\n    W = np.array(W)\n    (min1, max1) = (X[:, 0].min() - 1, X[:, 0].max() + 1)\n    (min2, max2) = (X[:, 1].min() - 1, X[:, 1].max() + 1)\n    x1_plot = np.linspace(min1, max1, grid_n)\n    x2_plot = np.linspace(min2, max2, grid_n)\n    (xx, yy) = np.meshgrid(x1_plot, x2_plot)\n    ones = np.ones((grid_n, 1))\n    bias = np.full(grid_n * grid_n, b).reshape(grid_n, grid_n)\n    grid = np.dstack((xx, yy))\n    prediction = np.dot(grid, W.reshape(-1, 1, 1))\n    prediction = np.where(prediction + bias > 0, 1, -1)\n    return prediction.tolist()"}
{"task_id": 528, "completion_id": 7, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (min1, max1) = (np.min(X[:, 0]), np.max(X[:, 0]))\n    (min2, max2) = (np.min(X[:, 1]), np.max(X[:, 1]))\n    x1_plot = np.linspace(min1, max1, grid_n)\n    x2_plot = np.linspace(min2, max2, grid_n)\n    (xx, yy) = np.meshgrid(x1_plot, x2_plot)\n    Z = np.sign(W[0] * xx + W[1] * yy + b)\n    return Z.tolist()"}
{"task_id": 528, "completion_id": 8, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (xx1, xx2) = np.meshgrid(x1_plot, x2_plot)\n    (r1, r2) = (xx1.flatten(), xx2.flatten())\n    (r1, r2) = (r1.reshape((len(r1), 1)), r2.reshape((len(r2), 1)))\n    grid = np.zeros((grid_n, grid_n))\n    for i in range(len(r1)):\n        pred = np.dot(W, [r1[i], r2[i]]) + b\n        if pred >= 0:\n            grid[i // grid_n, i % grid_n] = 1\n        else:\n            grid[i // grid_n, i % grid_n] = -1\n    return grid.tolist()"}
{"task_id": 528, "completion_id": 9, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    x1 = X[:, 0]\n    x2 = X[:, 1]\n    (x1_min, x1_max) = (x1.min(), x1.max())\n    (x2_min, x2_max) = (x2.min(), x2.max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    W = np.array(W)\n    x_grid_flat = np.c_[x1_grid.ravel(), x2_grid.ravel()]\n    scores = np.dot(x_grid_flat, W) + b\n    preds = (scores > 0).astype(int) * 2 - 1\n    labels_grid = preds.reshape(x1_grid.shape)\n    return labels_grid.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 537, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    X_train_class0 = X_train[y_train == 0]\n    X_train_class1 = X_train[y_train == 1]\n    mean_class0 = np.mean(X_train_class0, axis=0)\n    std_class0 = np.std(X_train_class0, axis=0) + 1e-09\n    mean_class1 = np.mean(X_train_class1, axis=0)\n    std_class1 = np.std(X_train_class1, axis=0) + 1e-09\n    prior_class0 = np.mean(y_train == 0)\n    prior_class1 = np.mean(y_train == 1)\n    log_likelihood_class0 = -0.5 * np.log(2 * np.pi * std_class0 ** 2) - (X_test - mean_class0) ** 2 / (2 * std_class0 ** 2)\n    log_likelihood_class1 = -0.5 * np.log(2 * np.pi * std_class1 ** 2) - (X_test - mean_class1) ** 2 / (2 * std_class1 ** 2)\n    posterior_class0 = np.sum(log_likelihood_class0, axis=1) + np.log(prior_class0)\n    posterior_class1 = np.sum(log_likelihood_class1, axis=1) + np.log(prior_class1)\n    y_pred = np.where(posterior_class0 < posterior_class1, 1, 0)\n    return y_pred.tolist()"}
{"task_id": 537, "completion_id": 2, "solution": "import numpy as np\nclass GaussianNaiveBayes:\n\n    def __init__(self, eps=1e-09):\n        self.eps = eps\n        self.parameters = {}\n        self.priors = {}\n\n    def fit(self, X_train, y_train):\n        self.classes = np.unique(y_train)\n        for c in self.classes:\n            X_train_c = X_train[y_train == c]\n            self.parameters[c] = {'mean': X_train_c.mean(axis=0), 'std': X_train_c.std(axis=0) + self.eps}\n            self.priors[c] = X_train_c.shape[0] / X_train.shape[0]\n\n    def predict(self, X_test):\n        y_pred = []\n        for x in X_test:\n            probs = []\n            for c in self.classes:\n                prior = np.log(self.priors[c])\n                posterior = -0.5 * np.sum(np.log(2.0 * np.pi * self.parameters[c]['std']))\n                posterior -= 0.5 * np.sum((x - self.parameters[c]['mean']) ** 2 / self.parameters[c]['std'] ** 2, axis=0)\n                prob = prior + posterior\n                probs.append(prob)\n            y = 1 if probs[0] < probs[1] else 0\n            y_pred.append(y)\n        return y_pred\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    nb = GaussianNaiveBayes()\n    nb.fit(X_train, y_train)\n    return nb.predict(X_test)"}
{"task_id": 537, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    n_classes = len(np.unique(y_train))\n    n_features = X_train.shape[1]\n    priors = np.zeros(n_classes)\n    means = np.zeros((n_classes, n_features))\n    std_devs = np.zeros((n_classes, n_features))\n    for c in range(n_classes):\n        X_c = X_train[y_train == c]\n        priors[c] = X_c.shape[0] / X_train.shape[0]\n        means[c, :] = np.mean(X_c, axis=0)\n        std_devs[c, :] = np.std(X_c, axis=0)\n    std_devs[std_devs == 0] = 1e-09\n    predictions = []\n    for x_test in X_test:\n        posteriors = np.zeros(n_classes)\n        for c in range(n_classes):\n            likelihood = 1 / (np.sqrt(2 * np.pi) * std_devs[c]) * np.exp(-0.5 * ((x_test - means[c]) / std_devs[c]) ** 2)\n            posterior = np.sum(np.log(likelihood)) + np.log(priors[c])\n            posteriors[c] = posterior\n        predictions.append(np.argmax(posteriors))\n    return predictions"}
{"task_id": 537, "completion_id": 4, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    mean_0 = np.mean(X_train[y_train == 0], axis=0)\n    std_0 = np.std(X_train[y_train == 0], axis=0)\n    prior_0 = np.mean(y_train == 0)\n    mean_1 = np.mean(X_train[y_train == 1], axis=0)\n    std_1 = np.std(X_train[y_train == 1], axis=0)\n    prior_1 = np.mean(y_train == 1)\n    eps = 1e-09\n    std_0 += eps\n    std_1 += eps\n    class_0_probs = np.prod(1 / (np.sqrt(2 * np.pi) * std_0) * np.exp(-0.5 * ((X_test - mean_0) / std_0) ** 2), axis=1) * prior_0\n    class_1_probs = np.prod(1 / (np.sqrt(2 * np.pi) * std_1) * np.exp(-0.5 * ((X_test - mean_1) / std_1) ** 2), axis=1) * prior_1\n    predictions = (class_1_probs > class_0_probs).astype(int)\n    return list(predictions)"}
{"task_id": 537, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    eps = 1e-09\n    X_train_class0 = X_train[y_train == 0]\n    X_train_class1 = X_train[y_train == 1]\n    (mu_class0, sigma_class0) = (np.mean(X_train_class0, axis=0), np.std(X_train_class0, axis=0) + eps)\n    (mu_class1, sigma_class1) = (np.mean(X_train_class1, axis=0), np.std(X_train_class1, axis=0) + eps)\n    prior_class0 = len(X_train_class0) / len(y_train)\n    prior_class1 = len(X_train_class1) / len(y_train)\n    y_test_predictions = []\n    for x in X_test:\n        likelihood_class0 = np.exp(-((x - mu_class0) ** 2 / (2 * sigma_class0 ** 2))) / np.sqrt(2 * np.pi * sigma_class0 ** 2)\n        likelihood_class1 = np.exp(-((x - mu_class1) ** 2 / (2 * sigma_class1 ** 2))) / np.sqrt(2 * np.pi * sigma_class1 ** 2)\n        posterior_class0 = np.sum(np.log(likelihood_class0)) + np.log(prior_class0)\n        posterior_class1 = np.sum(np.log(likelihood_class1)) + np.log(prior_class1)\n        y_test_predictions.append(np.argmax([posterior_class0, posterior_class1]))\n    return y_test_predictions"}
{"task_id": 537, "completion_id": 6, "solution": "import numpy as np\nclass GaussianNaiveBayes:\n\n    def __init__(self, eps=1e-09):\n        self.eps = eps\n        self.parameters = dict()\n\n    def fit(self, X_train, y_train):\n        classes = np.unique(y_train)\n        for c in classes:\n            X_train_c = X_train[y_train == c]\n            self.parameters[c] = {'mean': X_train_c.mean(axis=0), 'std_dev': X_train_c.std(axis=0) + self.eps, 'prior': len(X_train_c) / len(X_train)}\n\n    def gaussian_pdf(self, x, mean, std_dev):\n        \"\"\"Compute Gaussian PDF.\"\"\"\n        return 1 / (np.sqrt(2 * np.pi) * std_dev) * np.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n\n    def predict(self, X_test):\n        preds = []\n        for x in X_test:\n            posteriors = []\n            for c in self.parameters.keys():\n                likelihood = np.prod(self.gaussian_pdf(x, self.parameters[c]['mean'], self.parameters[c]['std_dev']))\n                posterior = self.parameters[c]['prior'] * likelihood\n                posteriors.append(posterior)\n            preds.append(np.argmax(posteriors))\n        return preds\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    gnb = GaussianNaiveBayes()\n    gnb.fit(X_train, y_train)\n    return gnb.predict(X_test)"}
{"task_id": 537, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    eps = 1e-09\n    X_train0 = X_train[y_train == 0]\n    X_train1 = X_train[y_train == 1]\n    mean0 = np.mean(X_train0, axis=0)\n    mean1 = np.mean(X_train1, axis=0)\n    std0 = np.std(X_train0, axis=0) + eps\n    std1 = np.std(X_train1, axis=0) + eps\n    prior0 = np.sum(y_train == 0) / y_train.shape[0]\n    prior1 = np.sum(y_train == 1) / y_train.shape[0]\n\n    def gaussian_likelihood(x, mean, std):\n        numerator = np.exp(-(x - mean) ** 2 / (2 * std ** 2))\n        denominator = np.sqrt(2 * np.pi) * std\n        return numerator / denominator\n    predictions = []\n    for x in X_test:\n        likelihood0 = np.prod(gaussian_likelihood(x, mean0, std0)) * prior0\n        likelihood1 = np.prod(gaussian_likelihood(x, mean1, std1)) * prior1\n        predictions.append(int(likelihood1 > likelihood0))\n    return predictions"}
{"task_id": 537, "completion_id": 8, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    eps = 1e-09\n    X_train_class0 = X_train[y_train == 0]\n    X_train_class1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_train_class0, axis=0)\n    std_0 = np.std(X_train_class0, axis=0) + eps\n    mean_1 = np.mean(X_train_class1, axis=0)\n    std_1 = np.std(X_train_class1, axis=0) + eps\n    prior_0 = len(X_train_class0) / len(X_train)\n    prior_1 = len(X_train_class1) / len(X_train)\n    gaussian_likelihood_0 = 1 / np.sqrt(2 * np.pi * np.square(std_0)) * np.exp(-np.square(X_test - mean_0) / (2 * np.square(std_0)))\n    gaussian_likelihood_1 = 1 / np.sqrt(2 * np.pi * np.square(std_1)) * np.exp(-np.square(X_test - mean_1) / (2 * np.square(std_1)))\n    posterior_0 = np.prod(gaussian_likelihood_0, axis=1) * prior_0\n    posterior_1 = np.prod(gaussian_likelihood_1, axis=1) * prior_1\n    y_pred = np.where(posterior_0 > posterior_1, 0, 1)\n    return y_pred.tolist()"}
{"task_id": 537, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    eps = 1e-09\n\n    def compute_params(X, y):\n        mean = X[y == 1].mean(axis=0)\n        std_dev = X[y == 1].std(axis=0)\n        std_dev[std_dev == 0] = eps\n        return (mean, std_dev)\n\n    def gaussian_likelihood(x, mean, std_dev):\n        numerator = np.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n        denominator = np.sqrt(2 * np.pi) * std_dev\n        return numerator / denominator\n\n    def post_probability(mean1, std_dev1, prior1, mean2, std_dev2, prior2, x):\n        likelihood1 = np.prod(gaussian_likelihood(x, mean1, std_dev1))\n        likelihood2 = np.prod(gaussian_likelihood(x, mean2, std_dev2))\n        return likelihood1 * prior1 / (likelihood1 * prior1 + likelihood2 * prior2)\n    (mean1, std_dev1) = compute_params(X_train, y_train)\n    prior1 = np.mean(y_train)\n    (mean2, std_dev2) = compute_params(X_train, 1 - y_train)\n    prior2 = 1 - prior1\n    posteriors = []\n    for x in X_test:\n        posterior = post_probability(mean1, std_dev1, prior1, mean2, std_dev2, prior2, x)\n        posteriors.append(1 if posterior >= 0.5 else 0)\n    return posteriors"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Arguments:\n    AL -- Activation Output Layer\n    Y -- True Labels\n\n    Returns:\n    cost -- Binary cross-entropy cost.\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = AL.shape[1]\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(float(cost), 4)"}
{"task_id": 539, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\" \n    Computes the cost function using binary cross-entropy.\n    \n    Parameters:\n    AL (np.ndarray): A vector of predicted probabilities\n    Y (np.ndarray): A vector of ground-truth labels\n    \n    Returns:\n    float: The computed cost\n    \"\"\"\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 539, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    :param AL: ndarray of shape (1,m) or (m,) where m is the number of training examples\n    :param Y: ndarray of shape (1,m) or (m,) where m is the number of training examples\n    :return: the binary cross-entropy cost\n    \"\"\"\n    assert AL.shape == Y.shape\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    J = -1 / Y.shape[1] * (np.dot(Y, np.log(AL).T) + np.dot(1 - Y, np.log(1 - AL).T))\n    return float(np.squeeze(J))"}
{"task_id": 539, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    This function computes binary cross-entropy cost.\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -np.mean(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 539, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)\nY = np.array([1, 0, 1, 0])\nAL = np.array([0.9, 0.3, 0.8, 0.1])"}
{"task_id": 539, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL)) / Y.shape[1]\n    return round(cost, 4)"}
{"task_id": 539, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Implementation of the binary cross entropy function.\n\n    Args:\n    AL: A numpy array of shape (m,) or (1,m) containing probabilities.\n    Y: A numpy array of shape (m,) or (1,m) containing true labels.\n\n    Returns:\n    cost: A built-in Python float representing the binary cross-entropy.\n\n    \"\"\"\n    assert AL.shape == Y.shape\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 539, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute binary cross-entropy cost.\n    \n    Arguments:\n    AL -- probabilities vector of shape (1,m) or (m,); type: numpy.ndarray\n    Y -- true label vector of shape (1,m) or (m,); type: numpy.ndarray\n\n    Returns:\n    cost -- binary cross-entropy cost; type: float\n    \"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must be of the same shape'\n    assert np.all(0 <= AL) and np.all(AL <= 1), 'AL must contain probabilities'\n    assert np.all(np.logical_or(Y == 0, Y == 1)), 'Y must contain binary labels'\n    epsilon = 1e-15\n    AL = np.clip(AL, a_min=epsilon, a_max=1 - epsilon)\n    m = AL.shape[1]\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(float(np.squeeze(cost)), 4)\nY = np.asarray([1, 1, 0])\nAL = np.asarray([0.8, 0.9, 0.4])\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"TODO: Write the implementation.\"\"\"\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    J = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL), axis=0, keepdims=True)\n    return J.squeeze().item()\nY = np.array([1, 1, 0, 0])\nAL = np.array([0.5, 0.5, 0.5, 0.5])"}
{"task_id": 539, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Implementation of binary cross-entropy cost\n    \"\"\"\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    J = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(float(J), 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import logsumexp\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n\n    def forward(hmm, observations):\n        \"\"\"Compute the forward probabilities \u03b1 for the HMM.\"\"\"\n        N = len(observations)\n        alphas = np.zeros((N, hmm['B'].shape[0]))\n        alphas[0] = hmm['pi'] * hmm['B'][:, observations[0]]\n        for t in range(1, N):\n            alphas[t] = np.dot(alphas[t - 1], hmm['A']) * hmm['B'][:, observations[t]]\n        return alphas\n\n    def backward(hmm, observations):\n        \"\"\"Compute the backward probabilities \u03b2 for the HMM.\"\"\"\n        N = len(observations)\n        betas = np.zeros((N, hmm['B'].shape[0]))\n        betas[-1] = 1\n        for t in reversed(range(N - 1)):\n            betas[t] = np.dot(hmm['A'], hmm['B'][:, observations[t + 1]] * betas[t + 1])\n        return betas\n    if t < 0 or t >= len(observations):\n        return []\n    alphas = forward(hmm, observations[:t + 1])\n    betas = backward(hmm, observations[t:])\n    prob_t = alphas[-1] * betas[0]\n    prob_t = prob_t / np.sum(prob_t)\n    return [round(p, 4) for p in prob_t]\nhmm = {'pi': np.array([0.5, 0.5]), 'A': np.array([[0.6, 0.4], [0.2, 0.8]]), 'B': np.array([[0.7, 0.3], [0.1, 0.9]])}\nobservations = [0, 1, 0, 1]"}
{"task_id": 552, "completion_id": 1, "solution": "import numpy as np\ndef gamma_probabilities(hmm, observations, t):\n    if t < 0 or t >= len(observations):\n        return []\n    alpha = forward_pass(hmm, observations)\n    beta = backward_pass(hmm, observations)\n    gamma = alpha[t] * beta[t]\n    return np.round(gamma / gamma.sum(), 4).tolist()\ndef forward_pass(hmm, observations):\n    N = len(observations)\n    n_states = len(hmm['pi'])\n    alpha = np.zeros((N, n_states))\n    alpha[0] = hmm['pi'] * hmm['B'][:, observations[0]]\n    for t in range(1, N):\n        alpha[t] = hmm['B'][:, observations[t]] * np.dot(alpha[t - 1], hmm['A'])\n    return alpha\ndef backward_pass(hmm, observations):\n    N = len(observations)\n    n_states = len(hmm['pi'])\n    beta = np.zeros((N, n_states))\n    beta[N - 1, :] = 1.0\n    for t in range(N - 2, -1, -1):\n        beta[t, :] = np.dot(hmm['A'], hmm['B'][:, observations[t + 1]] * beta[t + 1, :])\n    return beta"}
{"task_id": 552, "completion_id": 2, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    num_states = len(hmm['pi'])\n    alpha = forward(hmm, observations, t + 1)\n    beta = backward(hmm, observations, t + 1)\n    gamma = [alpha[t][i] * beta[t][i] for i in range(num_states)]\n    sum_gamma = sum(gamma)\n    gamma = [round(g / sum_gamma, 4) for g in gamma]\n    return gamma\ndef forward(hmm, observations, t_max):\n    num_states = len(hmm['pi'])\n    alpha = [[0 for _ in range(num_states)] for _ in range(t_max)]\n    for i in range(num_states):\n        alpha[0][i] = hmm['pi'][i] * hmm['B'][i][observations[0]]\n    for t in range(1, t_max):\n        for j in range(num_states):\n            alpha[t][j] = hmm['B'][j][observations[t]] * sum((alpha[t - 1][i] * hmm['A'][i][j] for i in range(num_states)))\n    return alpha\ndef backward(hmm, observations, t_max):\n    num_states = len(hmm['pi'])\n    beta = [[0 for _ in range(num_states)] for _ in range(t_max)]\n    for i in range(num_states):\n        beta[-1][i] = 1\n    for t in range(t_max - 2, -1, -1):\n        for i in range(num_states):\n            beta[t][i] = sum((hmm['A'][i][j] * hmm['B'][j][observations[t + 1]] * beta[t + 1][j] for j in range(num_states)))\n    return beta"}
{"task_id": 552, "completion_id": 3, "solution": "import numpy as np"}
{"task_id": 552, "completion_id": 4, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    initial_distribution = hmm['pi']\n    transition_matrix = hmm['A']\n    emission_matrix = hmm['B']\n    alpha = np.zeros((len(observations), len(initial_distribution)))\n    alpha[0] = initial_distribution * emission_matrix[:, observations[0]]\n    for i in range(1, len(observations)):\n        for j in range(len(initial_distribution)):\n            alpha[i, j] = alpha[i - 1].dot(transition_matrix[:, j]) * emission_matrix[j, observations[i]]\n    beta = np.zeros((len(observations), len(initial_distribution)))\n    beta[len(observations) - 1] = np.ones(len(initial_distribution))\n    for i in range(len(observations) - 2, -1, -1):\n        for j in range(len(initial_distribution)):\n            beta[i, j] = beta[i + 1].dot(transition_matrix[j, :]) * emission_matrix[:, observations[i + 1]]\n    gamma = alpha[t] * beta[t]\n    gamma_sum = np.sum(gamma)\n    gamma_normalized = gamma / gamma_sum\n    return [round(val, 4) for val in gamma_normalized]"}
{"task_id": 552, "completion_id": 5, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    if t < 0 or t >= len(observations):\n        return []\n    initial_distribution = np.array(hmm['pi'], dtype=np.bfloat16)\n    transition_matrix = np.array(hmm['A'], dtype=np.bfloat16)\n    emission_matrix = np.array(hmm['B'], dtype=np.bfloat16)\n    forward = np.zeros((len(hmm['pi']), len(observations)), dtype=np.bfloat16)\n    forward[:, 0] = np.array(initial_distribution) * np.array(emission_matrix)[:, observations[0]]\n    for t in range(1, len(observations)):\n        for s in range(len(hmm['pi'])):\n            forward[s, t] = np.sum(forward[:, t - 1] * transition_matrix[:, s]) * emission_matrix[s, observations[t]]\n    backward = np.zeros((len(hmm['pi']), len(observations)), dtype=np.bfloat16)\n    backward[:, -1] = 1\n    for t in range(len(observations) - 2, -1, -1):\n        for s in range(len(hmm['pi'])):\n            backward[s, t] = np.sum(transition_matrix[s, :] * np.array(emission_matrix)[:, observations[t + 1]] * backward[:, t + 1])\n    gamma = forward[:, t] * backward[:, t]\n    gamma = gamma / np.sum(gamma)\n    gamma = [round(x, 4) for x in gamma]\n    return gamma\nhmm = {'pi': [0.6, 0.4], 'A': [[0.7, 0.3], [0.4, 0.6]], 'B': [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]}\nobservations = [0, 1, 2, 0]\nt = 2"}
{"task_id": 552, "completion_id": 6, "solution": "import numpy as np\ndef forward(hmm, observations):\n    N = hmm['A'].shape[0]\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    alpha[0] = hmm['pi'] * hmm['B'][:, observations[0]]\n    for t in range(1, T):\n        for j in range(N):\n            alpha[t, j] = alpha[t - 1].dot(hmm['A'][:, j]) * hmm['B'][j, observations[t]]\n    return alpha\ndef backward(hmm, observations):\n    N = hmm['A'].shape[0]\n    T = len(observations)\n    beta = np.zeros((T, N))\n    beta[T - 1] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = hmm['A'][i, :].dot(hmm['B'][:, observations[t + 1]] * beta[t + 1, :])\n    return beta\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    alpha = forward(hmm, observations)\n    beta = backward(hmm, observations)\n    denominator = np.sum(alpha[t - 1] * beta[t - 1])\n    gamma = alpha[t - 1] * beta[t - 1] / denominator\n    return [round(prob, 4) for prob in gamma]"}
{"task_id": 552, "completion_id": 7, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    if t < 0 or t >= len(observations):\n        return []\n    (pi, A, B) = hmm.values()\n    (pi, A, B) = (np.array(pi), np.array(A), np.array(B))\n    (N, T) = (A.shape[0], len(observations))\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        for j in range(N):\n            alpha[i, j] = alpha[i - 1].dot(A[:, j]) * B[j, observations[i]]\n    beta[-1] = 1\n    for i in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[i, j] = A[j, :].dot(B[:, observations[i + 1]] * beta[i + 1, :])\n    gamma = alpha[t] * beta[t]\n    gamma /= np.sum(gamma)\n    return [round(g, 4) for g in gamma]\nhmm = {'pi': [0.2, 0.4, 0.4], 'A': [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]], 'B': [[0.5, 0.5], [0.4, 0.6], [0.7, 0.3]]}\nobservations = [0, 1, 0, 0, 1]\nt = 2\ngamma = gamma_probabilities(hmm, observations, t)"}
{"task_id": 552, "completion_id": 8, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if not 0 <= t < len(observations):\n        return []\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    (N, M) = (A.shape[0], B.shape[1])\n\n    def forward():\n        alpha = np.zeros((N, T))\n        alpha[:, 0] = pi * B[:, observations[0]]\n        for t in range(1, T):\n            for s in range(N):\n                alpha[s, t] = np.dot(alpha[:, t - 1], A[:, s]) * B[s, observations[t]]\n        return alpha\n\n    def backward():\n        beta = np.zeros((N, T))\n        beta[:, -1] = 1\n        for t in range(T - 2, -1, -1):\n            for s in range(N):\n                beta[s, t] = np.sum(A[s, :] * B[:, observations[t + 1]] * beta[:, t + 1])\n        return beta\n    T = len(observations)\n    alpha = forward()\n    beta = backward()\n    gamma = alpha[:, t] * beta[:, t]\n    gamma /= np.sum(gamma)\n    return gamma.round(4).tolist()"}
{"task_id": 552, "completion_id": 9, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if not 0 <= t < len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n\n    def calc_probs(obs):\n        alpha = pi * B[:, obs[0]]\n        beta = np.ones_like(pi)\n        for ob in obs[1:]:\n            alpha = alpha @ A * B[:, ob]\n        for ob in reversed(obs[1:]):\n            beta = A * B[:, ob] * beta\n            beta /= np.sum(alpha * beta[:, np.newaxis], axis=0)\n        return (alpha, beta)\n    (alpha, _) = calc_probs(observations[:t + 1])\n    (_, beta) = calc_probs(observations[t + 1:])\n    gamma = alpha * beta\n    return np.round(gamma / np.sum(gamma), 4).tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics.pairwise import euclidean_distances\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    distances = euclidean_distances(data)\n    neighborhoods = [[j for (j, distance) in enumerate(row) if distance <= eps] for row in distances]\n    labels = [0] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if not labels[i] == 0:\n            continue\n        neighbors = neighborhoods[i]\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque(neighbors)\n        while queue:\n            point = queue.popleft()\n            if labels[point] == -1:\n                labels[point] = cluster_id\n            if labels[point] != 0:\n                continue\n            labels[point] = cluster_id\n            new_neighbors = neighborhoods[point]\n            if len(new_neighbors) >= min_samples:\n                queue.extend(new_neighbors)\n    return labels"}
{"task_id": 555, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    dist_matrix = squareform(pdist(data, 'euclidean'))\n    neighbour_list = []\n    for i in range(len(data)):\n        neighbour_list.append(np.where(dist_matrix[i] < eps)[0])\n    core_points = [i for i in range(len(neighbour_list)) if len(neighbour_list[i]) >= min_samples]\n    labels = np.full(len(data), fill_value=-1)\n    cluster_id = 0\n    for i in core_points:\n        if labels[i] == -1:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque([i])\n            while queue:\n                curr_point = queue.popleft()\n                for x in neighbour_list[curr_point]:\n                    if labels[x] == -1:\n                        labels[x] = cluster_id\n                        if len(neighbour_list[x]) >= min_samples:\n                            queue.append(x)\n    return labels.tolist()"}
{"task_id": 555, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    labels = [0] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if not labels[i] == 0:\n            continue\n        neighbors = region_query(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            grow_cluster(data, labels, i, neighbors, cluster_id, eps, min_samples)\n    return labels\ndef region_query(data, point_id, eps):\n    \"\"\"Identify all points in the eps-neighborhood of a given point.\"\"\"\n    points = []\n    for i in range(len(data)):\n        distance = np.linalg.norm(data[point_id] - data[i])\n        if distance < eps:\n            points.append(i)\n    return points"}
{"task_id": 555, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\nfrom sklearn.metrics.pairwise import euclidean_distances\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    samples_count = data.shape[0]\n    labels = np.full((samples_count,), fill_value=-1)\n    cluster_id = 0\n    distances = euclidean_distances(data)\n    for sample_idx in range(samples_count):\n        if labels[sample_idx] != -1:\n            continue\n        neighbors = np.where(distances[sample_idx] <= eps)[0].tolist()\n        if len(neighbors) < min_samples:\n            labels[sample_idx] = -1\n            continue\n        cluster_id += 1\n        labels[sample_idx] = cluster_id\n        seeds = deque(neighbors)\n        while seeds:\n            current_point_idx = seeds.popleft()\n            if labels[current_point_idx] == -1:\n                new_neighbors = np.where(distances[current_point_idx] <= eps)[0].tolist()\n                if len(new_neighbors) >= min_samples:\n                    seeds.extend(new_neighbors)\n                labels[current_point_idx] = cluster_id\n    return labels.tolist()"}
{"task_id": 555, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\nfrom sklearn.metrics.pairwise import euclidean_distances\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    distances = euclidean_distances(data)\n    core_samples = np.sum(distances < eps, axis=1) >= min_samples\n    labels = -np.ones_like(core_samples, dtype=int)\n    cluster_id = 0\n    for sample in np.argwhere(core_samples).flatten():\n        if labels[sample] != -1:\n            continue\n        cluster = [sample]\n        labels[sample] = cluster_id\n        queue = deque([sample])\n        while len(queue) > 0:\n            current_sample = queue.pop()\n            neighbors = np.where(distances[current_sample] < eps)[0]\n            neighbors = neighbors[core_samples][labels[neighbors] == -1]\n            if len(neighbors) == 0:\n                continue\n            labels[neighbors] = cluster_id\n            queue.extend(neighbors)\n        cluster_id += 1\n    return labels.tolist()\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2"}
{"task_id": 555, "completion_id": 5, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    distance_matrix = squareform(pdist(data))\n    core_points = np.sum(distance_matrix <= eps, axis=0) >= min_samples\n    labels = np.full(data.shape[0], fill_value=-1, dtype=int)\n    cluster_id = 0\n    for i in range(data.shape[0]):\n        q = deque()\n        if not core_points[i] or labels[i] != -1:\n            continue\n        q.append(i)\n        labels[i] = cluster_id\n        while q:\n            point = q.popleft()\n            neighbourhood = [i for (i, near) in enumerate(distance_matrix[point]) <= eps if near]\n            neighbourhood = [i for i in neighbourhood if core_points[i]]\n            for neighbor in neighbourhood:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    q.append(neighbor)\n        cluster_id += 1\n    return labels.tolist()"}
{"task_id": 555, "completion_id": 6, "solution": "def dbscan(data, eps, min_samples):\n    from scipy.spatial.distance import pdist, squareform\n    from scipy.spatial import KDTree\n    from collections import deque\n    dists = pdist(data, 'euclidean')\n    dists = squareform(dists)\n    sort_idx = np.argsort(dists)\n    dists = np.take_along_axis(dists, sort_idx, axis=-1)\n    nbrs = np.take_along_axis(sort_idx, dists.argsort(axis=-1)[:, :min_samples], axis=-1)\n    core_samples = np.count_nonzero(dists < eps, axis=-1) >= min_samples\n    clusters = np.full(data.shape[0], -1, dtype=int)\n    cluster_id = 0\n    for start in np.flatnonzero(core_samples):\n        if clusters[start] != -1:\n            continue\n        clusters[start] = cluster_id\n        neighbours = deque(nbrs[start, 1:])\n        while neighbours:\n            current = neighbours.popleft()\n            if clusters[current] != -1:\n                continue\n            if not core_samples[current]:\n                clusters[current] = -1\n                continue\n            clusters[current] = cluster_id\n            neighbours.extend((c for c in nbrs[current] if clusters[c] == -1))\n        cluster_id += 1\n    return clusters.tolist()"}
{"task_id": 555, "completion_id": 7, "solution": "import numpy as np\nfrom collections import deque\nfrom sklearn.metrics.pairwise import euclidean_distances\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    n_samples = data.shape[0]\n    labels = np.zeros(n_samples)\n    current_cluster_id = 0\n    distances = euclidean_distances(data)\n    for sample in range(n_samples):\n        if not labels[sample]:\n            neighbors = np.where(distances[sample] <= eps)[0]\n            if len(neighbors) >= min_samples:\n                current_cluster_id += 1\n                labels[sample] = current_cluster_id\n                to_visit = deque(neighbors)\n                while to_visit:\n                    visiting_sample = to_visit.popleft()\n                    if labels[visiting_sample] != 0:\n                        continue\n                    visiting_neighbors = np.where(distances[visiting_sample] <= eps)[0]\n                    if len(visiting_neighbors) >= min_samples:\n                        to_visit.extend(visiting_neighbors)\n                    labels[visiting_sample] = current_cluster_id\n    labels[labels == 0] = -1\n    return labels.tolist()"}
{"task_id": 555, "completion_id": 8, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial import distance_matrix\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    dist_matrix = distance_matrix(data, data)\n    core_points = dist_matrix < eps\n    n_neighbors = np.sum(core_points, axis=1)\n    core_points = np.where(n_neighbors >= min_samples)[0]\n    labels = np.zeros(data.shape[0], dtype=int)\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] == 0:\n            cluster_id += 1\n            labels[core_point] = cluster_id\n            neighbors = np.where(core_points < eps)[0]\n            while neighbors.size > 0:\n                neighbor = neighbors[0]\n                neighbors = np.delete(neighbors, 0)\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    new_neighbors = np.where(core_points < eps)[0]\n                    neighbors = np.append(neighbors, new_neighbors)\n    labels[labels == 0] = -1\n    return labels.tolist()"}
{"task_id": 555, "completion_id": 9, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    cluster_id = 0\n    n_samples = data.shape[0]\n    labels = np.full(n_samples, np.inf, dtype=int)\n    for i in range(n_samples):\n        if labels[i] != np.inf:\n            continue\n        neighbors = get_neighbors(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque(neighbors)\n        while queue:\n            point_index = queue.popleft()\n            if labels[point_index] == -1:\n                labels[point_index] = cluster_id\n            if labels[point_index] != np.inf:\n                continue\n            labels[point_index] = cluster_id\n            new_neighbors = get_neighbors(data, point_index, eps)\n            if len(new_neighbors) >= min_samples:\n                queue.extend(new_neighbors)\n    return labels.tolist()\ndef get_neighbors(data: np.ndarray, index: int, eps: float) -> list[int]:\n    \"\"\"Return indices of all elements with a Euclidean distance <= eps.\"\"\"\n    distances = np.linalg.norm(data - data[index], axis=1)\n    return np.where(distances <= eps)[0]"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n\n    def initialize_parameters(data, k):\n        (n, d) = data.shape\n        resp = np.random.rand(n, k)\n        resp /= resp.sum(axis=1)[:, None]\n        weights = resp.mean(axis=0)\n        means = np.dot(data.T, resp) / resp.sum(axis=0)[:, None]\n        covs = np.empty((k, d, d))\n        for j in range(k):\n            diff = data - means[j]\n            covs[j] = np.dot(resp[:, j] * diff.T, diff) / resp[:, j].sum()\n        return (weights, means, covs)\n\n    def expectation(data, weights, means, covs):\n        n = data.shape[0]\n        k = weights.shape[0]\n        resp = np.zeros((n, k))\n        for j in range(k):\n            diff = data - means[j]\n            temp = np.dot(diff, np.linalg.inv(covs[j]))\n            exp_log_prob = -0.5 * np.sum(temp * diff, axis=1)\n            log_det = -np.linalg.slogdet(covs[j])[1]\n            exp_log_prob -= 0.5 * (d * np.log(2 * np.pi) + log_det)\n            resp[:, j] = np.exp(exp_log_prob)\n        total_weight = resp.sum(axis=1)[:, None]\n        resp /= total_weight\n        return resp\n\n    def maximization(data, resp):\n        (n, d) = data.shape\n        k = resp.shape[1]\n        weights = resp.mean(axis=0)\n        means = np.dot(data.T, resp) / resp.sum(axis=0)[:, None]\n        covs = np.empty((k, d, d))\n        for j in range(k):\n            diff = data - means[j]\n            covs[j] = np.dot(resp[:, j] * diff.T, diff) / resp[:, j].sum()\n        return (weights, means, covs)\n    if k == 1:\n        return [0] * len(data)\n    (weights, means, covs) = initialize_parameters(data, k)\n    prev_weights = np.zeros_like(weights)\n    for i in range(max_iter):\n        if np.linalg.norm(weights - prev_weights) < epsilon:\n            break\n        prev_weights[:] = weights\n        resp = expectation(data, weights, means, covs)\n        (weights, means, covs) = maximization(data, resp)\n    result = np.argmax(resp, axis=1)\n    order = np.argsort(means[:, 0])\n    result = [order[i] for i in result]\n    return result"}
{"task_id": 561, "completion_id": 1, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (N, D) = data.shape\n    resp = np.random.rand(N, k)\n    resp /= resp.sum(axis=1)[:, None]\n    weights = resp.mean(axis=0)\n    means = np.array([np.mean(data[resp[:, j] > 0], axis=0) for j in range(k)])\n    covariances = np.array([np.cov(data[resp[:, j] > 0].T) for j in range(k)])\n    for _ in range(max_iter):\n        old_weights = weights.copy()\n        for i in range(N):\n            denom_vals = [weights[j] * multivariate_normal.pdf(data[i], means[j], covariances[j]) for j in range(k)]\n            denom = sum(denom_vals)\n            resp[i, :] = denom_vals / denom\n        Nk = np.sum(resp, axis=0)\n        weights = Nk / N\n        means = (data.T @ resp / Nk).T\n        for j in range(k):\n            diff = data - means[j]\n            covariances[j] = resp[:, j] * np.matmul(diff.T, diff) / (Nk[j] * D)\n        if np.all(np.abs(old_weights - weights) < epsilon):\n            break\n    labels = np.argmax(resp, axis=1)\n    order = np.argsort(means[:, 0])\n    labels = order[labels]\n    unique_labels = np.unique(labels)\n    for (i, label) in enumerate(unique_labels):\n        labels[labels == label] = i\n    return labels.tolist()\ndata = np.random.randn(100, 2)\nlabels = gmm_em(data, 3)"}
{"task_id": 561, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Your docstring here.\"\"\"\n    (N, D) = data.shape\n    mixture_weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, False)]\n    covariances = np.array([np.cov(data, rowvar=False)] * k)\n    for _ in range(max_iter):\n        resp = np.zeros((N, k))\n        log_likelihood_new = 0\n        for n in range(N):\n            for j in range(k):\n                diff = data[n] - means[j]\n                solved = np.linalg.solve(covariances[j], diff).T\n                resp[n, j] = np.exp(-0.5 * diff @ solved) / np.sqrt((2 * np.pi) ** D * np.linalg.det(covariances[j]))\n                resp[n, j] *= mixture_weights[j]\n            resp[n, :] /= np.sum(resp[n, :])\n            log_likelihood_new += np.log(np.sum(resp[n, :]))\n        N_k = np.sum(resp, axis=0)\n        mixture_weights = N_k / N\n        means = np.dot(resp.T, data) / N_k.reshape(-1, 1)\n        covariances = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - means[j]\n            covariances[j] = np.dot(resp[:, j] * diff.T, diff) / N_k[j]\n        if np.abs(np.sum(np.log(resp)) - log_likelihood_new) < epsilon:\n            break\n    labels = resp.argmax(axis=1)\n    order = np.argsort(means[:, 0])\n    relabel = np.zeros(k, dtype=int)\n    for j in range(k):\n        relabel[order[j]] = j\n    labels = relabel[labels]\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Your docstring here.\"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    pi = np.random.rand(k)\n    pi /= pi.sum()\n    mu = np.random.randn(k, D)\n    sigma = np.array([np.eye(D) for _ in range(k)])\n    R = np.zeros((N, k))\n    log_likelihoods = []\n    for _ in range(max_iter):\n        for i in range(N):\n            denom_sum = sum([pi[j] * np.linalg.det(sigma[j]) ** (-0.5) * math.e ** (-0.5 * (data[i] - mu[j]).T @ np.linalg.inv(sigma[j]) @ (data[i] - mu[j])) for j in range(k)])\n            for j in range(k):\n                R[i, j] = pi[j] * np.linalg.det(sigma[j]) ** (-0.5) * math.e ** (-0.5 * (data[i] - mu[j]).T @ np.linalg.inv(sigma[j]) @ (data[i] - mu[j])) / denom_sum\n        N_k = R.sum(0)\n        pi = N_k / N\n        mu = R.T @ data / N_k.reshape(-1, 1)\n        sigma = [R[:, j] @ (data - mu[j]).T @ (data - mu[j]) / N_k[j] for j in range(k)]"}
{"task_id": 561, "completion_id": 4, "solution": "import numpy as np\nimport math\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data, k, max_iter=200, epsilon=0.0001):\n    \"\"\"\n    Implements Gaussian Mixture Model via Expectation\u2013Maximization (EM) algorithm\n    :param data: 2-D Numpy array of shape (N, D) where N is the number of samples and D is the number of features\n    :param k: The number of Gaussian components\n    :param max_iter: Maximum number of iterations\n    :param epsilon: Tolerance to check for convergence\n    :return: List of final cluster label of each sample\n    \"\"\"\n    (N, D) = data.shape\n    pi = np.random.rand(k)\n    pi /= pi.sum()\n    mu = np.random.rand(k, D) * data.max()\n    Sigma = [np.eye(D) for _ in range(k)]\n    R = np.zeros((N, k))\n    log_likelihoods = []\n    for _ in range(max_iter):\n        for i in range(N):\n            den = 0\n            for j in range(k):\n                den += pi[j] * multivariate_normal.pdf(data[i], mu[j], Sigma[j])\n            for j in range(k):\n                R[i, j] = pi[j] * multivariate_normal.pdf(data[i], mu[j], Sigma[j]) / den\n        N_ks = R.sum(axis=0)\n        pi = N_ks / N\n        mu = R.T.dot(data) / N_ks.reshape(-1, 1)\n        for j in range(k):\n            tmp = data - mu[j]\n            Sigma[j] = np.dot(R[:, j] * tmp.T, tmp) / N_ks[j]\n        log_likelihood = np.sum(np.log(np.sum(R, axis=1)))\n        log_likelihoods.append(log_likelihood)\n        if _ > 1 and abs(log_likelihoods[-1] - log_likelihoods[-2]) < epsilon:\n            break\n    labels = np.argmax(R, axis=1)\n    order = np.argsort(mu, axis=0)[:, 0]\n    labels = order[labels]\n    return list(labels)"}
{"task_id": 561, "completion_id": 5, "solution": "import numpy as np\nfrom sklearn.mixture import GaussianMixture\ndef gmm_em(data, k, max_iter=200, epsilon=0.0001):\n    \"\"\"\n    Function to implement Gaussian Mixture Model via Expectation\u2013Maximization algorithm.\n    \n    Parameters:\n        data: 2-D NumPy array containing samples with features.\n        k: Number of Gaussian components.\n        max_iter: Maximum number of iterations.\n        epsilon: Tolerance for stopping criterion.\n        \n    Returns:\n        A list of length N (number of samples) containing the final cluster label of each sample.\n    \"\"\"\n    gmm = GaussianMixture(n_components=k, max_iter=max_iter, tol=epsilon, random_state=0)\n    if k == 1:\n        return [0 for _ in range(len(data))]\n    labels = gmm.fit_predict(data)\n    means = gmm.means_\n    sorted_means_indices = np.argsort(means, axis=0).flatten()\n    relabeled_labels = np.zeros_like(labels)\n    for i in range(k):\n        relabeled_labels[labels == i] = sorted_means_indices[i]\n    return relabeled_labels.tolist()"}
{"task_id": 561, "completion_id": 6, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    This function implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    :param data: 2-D NumPy array with N samples with D features\n    :param k: integer specifying number of Gaussian components\n    :param max_iter: integer specifying maximum number of iterations\n    :param epsilon: float for stopping criterion value\n    :return: Python list of length N containing the final cluster label of each sample \n    \"\"\"\n    (num_data, dim) = data.shape\n    if k == 1:\n        return [0] * num_data\n    resp = np.random.rand(num_data, k)\n    resp /= resp.sum(axis=1)[:, np.newaxis]\n    weights = np.mean(resp, axis=0)\n    means = []\n    covariances = []\n    for j in range(k):\n        means.append(np.mean(data[np.argwhere(resp[:, j] == 1), :], axis=0))\n        covariances.append(np.cov(data[np.argwhere(resp[:, j] == 1)[:, 0], :].T))\n    means = np.array(means)\n    covariances = np.array(covariances)\n    for _ in range(max_iter):\n        for j in range(k):\n            likelihood = multivariate_normal.pdf(data, mean=means[j, :], cov=covariances[j, :])\n            resp[:, j] = weights[j] * likelihood\n        row_sums = resp.sum(axis=1)[:, np.newaxis]\n        resp = resp / row_sums\n        new_weights = np.mean(resp, axis=0)\n        diff = np.abs(new_weights - weights)\n        if np.amax(diff) < epsilon:\n            break\n        weights = new_weights\n        for j in range(k):\n            resp_weights = resp[:, j][:, np.newaxis]\n            new_means = np.sum(resp_weights * data, axis=0) / np.sum(resp_weights)\n            new_cov = ((data - new_means).T * resp[:, j]).dot(data - new_means) / np.sum(resp_weights)\n            means[j, :] = new_means\n            covariances[j, :] = new_cov\n    resp_rounded = np.argmax(resp, axis=1)\n    labels = list(range(k))\n    means_sorted = means[np.argsort(means[:, 0])]\n    resp_sorted = []\n    for mean in means_sorted:\n        label = labels[np.where([np.allclose(mean, x) for x in means])[0][0]]\n        resp_sorted.append(resp[:, label])\n    resp_sorted = np.array(resp_sorted).T\n    final_labels = np.argmax(resp_sorted, axis=1)\n    return final_labels.tolist()"}
{"task_id": 561, "completion_id": 7, "solution": "import numpy as np\nfrom sklearn.mixture import GaussianMixture\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Your docstring here.\"\"\"\n    if k == 1:\n        return [0] * len(data)\n    gmm = GaussianMixture(n_components=k, max_iter=max_iter, tol=epsilon)\n    gmm.fit(data)\n    labels = gmm.predict(data)\n    means = gmm.means_\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_means = means[sorted_indices]\n    remap_dict = {old_label: new_label for (new_label, old_label) in enumerate(sorted_indices)}\n    remapped_labels = [remap_dict[old_label] for old_label in labels]\n    return remapped_labels"}
{"task_id": 561, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (N, D) = data.shape\n    weights = np.random.rand(k)\n    weights /= np.sum(weights)\n    means = np.random.rand(k, D)\n    covs = np.array([np.eye(D) for _ in range(k)])\n    responsibilities = np.zeros((N, k))\n    for _ in range(max_iter):\n        for i in range(N):\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * multivariate_normal.pdf(data[i], means[j], covs[j])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        weights_new = np.mean(responsibilities, axis=0)\n        for j in range(k):\n            means[j] = np.sum(responsibilities[:, j].reshape(-1, 1) * data, axis=0) / np.sum(responsibilities[:, j])\n            covs[j] = np.cov(data.T, aweights=responsibilities[:, j], ddof=0)\n            covs[j][covs[j] < 1e-05] = 1e-05\n        if np.linalg.norm(weights_new - weights) < epsilon:\n            break\n        weights = weights_new\n    cluster = np.argmax(responsibilities, axis=1)\n    order = np.argsort(means[:, 0])\n    cluster = order[cluster]\n    return cluster.tolist()"}
{"task_id": 561, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    np.random.seed(0)\n    data_mean = np.mean(data, axis=0)\n    data_cov = np.cov(data.T)\n    mixing_coeffs = np.random.rand(k)\n    mixing_coeffs /= np.sum(mixing_coeffs)\n    mixing_mus = np.random.multivariate_normal(data_mean, data_cov, size=k)\n    mixing_sigmas = np.array([data_cov] * k)\n    (n_samples, _) = data.shape\n    posterior_probs = np.empty((n_samples, k))\n    old_mixing_coeffs = np.ones(k)\n    for _ in range(max_iter):\n        for i in range(n_samples):\n            for j in range(k):\n                posterior_probs[i, j] = mixing_coeffs[j] * multivariate_normal.pdf(data[i], mean=mixing_mus[j], cov=mixing_sigmas[j])\n        norm_constant = posterior_probs.sum(axis=1)[:, np.newaxis]\n        posterior_probs /= norm_constant\n        mixing_coeffs = posterior_probs.mean(axis=0)\n        mixing_mus = (posterior_probs[:, :, np.newaxis] * data).sum(axis=0) / posterior_probs.sum(axis=0)[:, np.newaxis]\n        for j in range(k):\n            diff = data - mixing_mus[j]\n            mixing_sigmas[j] = np.dot(posterior_probs[:, j] * diff.T, diff) / (posterior_probs.sum(axis=0)[j] * data.shape[1])\n        if np.sum(np.absolute(old_mixing_coeffs - mixing_coeffs)) < epsilon:\n            break\n        old_mixing_coeffs = mixing_coeffs\n    predicted_labels = np.argmax(posterior_probs, axis=1)\n    sorting_indices = np.argsort(mixing_mus[:, 0])\n    sorting_indices_reverse = np.zeros_like(sorting_indices)\n    sorting_indices_reverse[sorting_indices] = np.arange(k)\n    predicted_labels = sorting_indices_reverse[predicted_labels]\n    return predicted_labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.linalg import eigh\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    sq_dists = pdist(data, 'sqeuclidean')\n    mat_sq_dists = squareform(sq_dists)\n    similarity = np.exp(-gamma * mat_sq_dists)\n    row_sums = np.sum(similarity, axis=1)\n    D = np.diag(row_sums)\n    L = D - similarity\n    if method == 'normalized':\n        D_sqrt_inv = np.sqrt(row_sums)\n        D_sqrt_inv[D_sqrt_inv == 0] = 1\n        D_sqrt_inv = np.diag(1 / D_sqrt_inv)\n        L = D_sqrt_inv @ L @ D_sqrt_inv\n    (_, eigenvectors) = eigh(L)\n    k_eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_sums = np.sum(k_eigenvectors ** 2, axis=1) ** 0.5\n        row_sums[row_sums == 0] = 1\n        k_eigenvectors /= row_sums[:, np.newaxis]\n    (_, cluster_labels) = k_means_clustering(k_eigenvectors, n_cluster)\n    return cluster_labels\ndef k_means_clustering(data, n_clusters):\n    \"\"\"Simple k-means clustering implementation.\"\"\"\n    centroids = data[:n_clusters]\n    labels = np.zeros(len(data), dtype=int)\n    while True:\n        for (i, x) in enumerate(data):\n            labels[i] = np.argmin(np.sum((centroids - x) ** 2, axis=1))\n        new_centroids = np.array([np.mean(data[labels == i], axis=0) for i in range(n_clusters)])\n        if np.all(centroids == new_centroids):\n            sorted_centroids_indices = np.argsort(np.min(data, axis=0))\n            mapping = {old_label: new_label for (new_label, old_label) in enumerate(sorted_centroids_indices)}\n            labels = [mapping[label] for label in labels]\n            return (labels, centroids)\n        centroids = new_centroids"}
{"task_id": 562, "completion_id": 1, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    (N, _) = data.shape\n    affinity_matrix = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            affinity_matrix[i, j] = np.exp(-gamma * np.linalg.norm(data[i] - data[j]) ** 2)\n    diagonal_matrix = np.sum(affinity_matrix, axis=1)\n    diagonal_matrix = np.diag(diagonal_matrix)\n    if method == 'unnormalized':\n        laplacian_matrix = diagonal_matrix - affinity_matrix\n        (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian_matrix)\n    else:\n        laplacian_matrix = np.linalg.inv(diagonal_matrix) @ (diagonal_matrix - affinity_matrix)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian_matrix)\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    indices = np.argsort(eigenvalues)[1:n_cluster]\n    eigenvectors = eigenvectors[:, indices]\n    centroids = eigenvectors[0:n_cluster]\n    labels = np.argmin(np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2), axis=1)\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    (N, d) = data.shape\n    pairwise_dist = np.sum(data ** 2, axis=1).reshape(N, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    w = np.exp(-gamma * pairwise_dist)\n    d = np.sum(w, axis=0)\n    d_sqrt = np.sqrt(1 / d)\n    if method == 'unnormalized':\n        L = np.diag(d) - w\n    elif method == 'normalized':\n        L = np.eye(N) - d_sqrt * np.dot(np.diag(1 / d), d_sqrt * w)\n    else:\n        raise ValueError('Invalid method. Choose either \"unnormalized\" or \"normalized\".')\n    (_, v) = np.linalg.eigh(L)\n    v = v[:, :n_cluster]\n    if method == 'normalized':\n        row_sums = np.sqrt(np.sum(v ** 2, axis=1))\n        v = v / row_sums[:, np.newaxis]\n    centroids = v[:n_cluster]\n    labels = np.argmin(np.sum((v[:, np.newaxis, :] - centroids) ** 2, axis=-1), axis=1)\n    order = np.argsort(np.argmin(np.sum((data - np.mean(data, axis=0)) ** 2, axis=-1)))\n    reorder_map = {old: new for (new, old) in enumerate(order)}\n    labels = [reorder_map[l] for l in labels]\n    return labels"}
{"task_id": 562, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    dists = np.sum(data ** 2, axis=1)[:, np.newaxis] + np.sum(data ** 2, axis=1)[np.newaxis, :] - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * dists)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        L = np.eye(len(data)) - np.dot(np.linalg.inv(D) ** 0.5, np.dot(W, np.linalg.inv(D) ** 0.5))\n    (eigenvals, eigenvecs) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvals)[:n_cluster]\n    vecs = eigenvecs[:, idx]\n    if method == 'normalized':\n        row_sums = np.sum(np.abs(vecs), axis=1)\n        vecs = vecs / row_sums[:, np.newaxis]\n    centroids = vecs[:n_cluster]\n    new_assignments = np.argmin(np.sum((vecs[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2), axis=1)\n    assignments = np.zeros(len(data), dtype=int)\n    assignments[np.argsort(eigenvals)[n_cluster:]] = new_assignments\n    return assignments.tolist()"}
{"task_id": 562, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    (N, d) = data.shape\n    sim_mat = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            sim_mat[i, j] = np.sum((data[i] - data[j]) ** 2)\n    W = np.exp(-gamma * sim_mat)\n    if method == 'normalized':\n        D = np.diag(np.sum(W, axis=1))\n        L = D - W\n        D_sqrt_inv = np.diag(1 / np.diag(D) ** (1 / 2))\n        L_sym = np.dot(np.dot(D_sqrt_inv, L), D_sqrt_inv)\n    else:\n        D = np.diag(np.sum(W, axis=1))\n        L = D - W\n    (_, v) = np.linalg.eigh(L)\n    if method == 'normalized':\n        v = np.dot(np.dot(W, v), D_sqrt_inv)\n    v = v[:, :n_cluster]\n    kmeans_centroids = v[:n_cluster, :]\n    kmeans_labels = np.zeros(N, dtype=int)\n    while True:\n        distances = np.linalg.norm(v[:, np.newaxis, :] - kmeans_centroids[np.newaxis, :, :], axis=-1)\n        new_kmeans_labels = np.argmin(distances, axis=1)\n        if np.all(new_kmeans_labels == kmeans_labels):\n            break\n        kmeans_labels = new_kmeans_labels\n        for i in range(n_cluster):\n            kmeans_centroids[i, :] = np.mean(v[kmeans_labels == i, :], axis=0)\n    reordered_labels = np.zeros(N, dtype=int)\n    for i in range(n_cluster):\n        cluster_i = np.where(kmeans_labels == i)[0]\n        reordered_labels[np.min(cluster_i)] = i\n    return reordered_labels.tolist()"}
{"task_id": 562, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy import linalg\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    sq_dists = squareform(pdist(data, 'sqeuclidean'))\n    affinity_matrix = np.exp(-gamma * sq_dists)\n    if method == 'unnormalized':\n        diag_matrix = np.diag(np.sum(affinity_matrix, axis=1))\n        laplacian = diag_matrix - affinity_matrix\n    elif method == 'normalized':\n        row_sums = affinity_matrix.sum(axis=1)\n        D = np.sqrt(row_sums)[:, np.newaxis]\n        D[D == 0] = 1\n        diag_matrix = np.diag(1 / D.flatten())\n        I = np.eye(affinity_matrix.shape[0])\n        laplacian = I - np.dot(np.dot(diag_matrix, affinity_matrix), diag_matrix)\n    (eigen_values, eigen_vectors) = linalg.eigh(laplacian)\n    indices = np.argsort(eigen_values)[1:n_cluster + 1]\n    eigen_subset = eigen_vectors[:, indices]\n    if method == 'normalized':\n        row_sums = np.sqrt((eigen_subset ** 2).sum(axis=1))[:, np.newaxis]\n        row_sums[row_sums == 0] = 1\n        eigen_subset = eigen_subset / row_sums\n    centroids = eigen_subset[:n_cluster]\n    labels = np.argmin(linalg.norm(eigen_subset[:, None] - centroids[None], axis=-1), axis=-1)\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    pairwise_square_distance = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    rbf_kernel = np.exp(-gamma * pairwise_square_distance)\n    D = np.diag(np.sum(rbf_kernel, axis=1))\n    if method == 'unnormalized':\n        L = D - rbf_kernel\n    else:\n        sqrt_inv_D = np.sqrt(np.linalg.pinv(np.sqrt(D)))\n        L = np.eye(len(data)) - np.dot(np.dot(sqrt_inv_D, rbf_kernel), sqrt_inv_D)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(L)\n    indices = np.argsort(eigen_values)[:n_cluster]\n    eigen_vectors = eigen_vectors[:, indices]\n    if method == 'normalized':\n        row_sums = eigen_vectors.sum(axis=1)\n        eigen_vectors = eigen_vectors / row_sums[:, np.newaxis]\n    centroids = eigen_vectors[:n_cluster]\n    labels = np.argmin(np.sum((eigen_vectors[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n    return sorted(range(n_cluster), key=lambda k: np.sum(labels == k))"}
{"task_id": 562, "completion_id": 7, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom scipy.sparse.linalg import eigs\nfrom collections import OrderedDict\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized'):\n    if n_cluster == 1:\n        return np.zeros(data.shape[0], dtype=int).tolist()\n    N = data.shape[0]\n    sq_dists = distance.squareform(distance.pdist(data, 'sqeuclidean'))\n    sim_matrix = np.exp(-gamma * sq_dists)\n    diag = np.sum(sim_matrix, axis=1)\n    deg_matrix = np.diag(diag)\n    laplacian = deg_matrix - sim_matrix\n    if method == 'normalized':\n        sqrt_deg_matrix_inv = np.diag(1 / np.sqrt(diag))\n        laplacian = sqrt_deg_matrix_inv @ laplacian @ sqrt_deg_matrix_inv\n    (_, eigenvectors) = eigs(laplacian, k=n_cluster, which='SR')\n    eigenvectors = eigenvectors.real\n    eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    embeddings_dict = OrderedDict(sorted({i: vec for (i, vec) in enumerate(eigenvectors)}.items(), key=lambda x: np.sum(x[1])))\n    embeddings = np.array(list(embeddings_dict.values()))\n    (_, labels) = k_means(embeddings, n_cluster)\n    labels_dict = OrderedDict(sorted({i: l for (i, l) in enumerate(labels)}.items(), key=lambda x: np.sum(embeddings_dict[x[0]])))\n    labels = np.array(list(labels_dict.values()))\n    labels = rearrange_labels(labels)\n    return labels.tolist()\ndef k_means(data, k, centroids=None, max_iters=300, tol=0.0001):\n    if centroids is None:\n        centroids = data[:k]\n    for _ in range(max_iters):\n        labels = np.argmin(distance.cdist(data, centroids), axis=1)\n        new_centroids = np.array([np.mean(data[labels == i], axis=0) for i in range(k)])\n        if np.linalg.norm(new_centroids - centroids) < tol:\n            break\n        centroids = new_centroids\n    return (centroids, labels)\ndef rearrange_labels(labels):\n    label_dict = {label: i for (i, label) in enumerate(sorted(np.unique(labels)))}\n    return np.vectorize(label_dict.get)(labels)"}
{"task_id": 562, "completion_id": 8, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    sq_dists = np.sum(data ** 2, axis=1)[:, np.newaxis] + np.sum(data ** 2, axis=1)[np.newaxis, :] - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * sq_dists)\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'unnormalized':\n        L = D - W\n    else:\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.eye(N) - D_inv_sqrt @ W @ D_inv_sqrt\n    (eigenvals, eigenvecs) = np.linalg.eigh(L)\n    ix_order = np.argsort(eigenvals)[:n_cluster]\n    reduced_vecs = eigenvecs[:, ix_order]\n    if method == 'normalized':\n        row_sums = np.linalg.norm(reduced_vecs, axis=1)\n        reduced_vecs = reduced_vecs / row_sums[:, np.newaxis]\n    centroids = reduced_vecs[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n    while True:\n        dists = np.linalg.norm(reduced_vecs[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=-1)\n        new_labels = np.argmin(dists, axis=1)\n        if np.all(labels == new_labels):\n            break\n        labels = new_labels\n        for i in range(n_cluster):\n            centroids[i] = np.mean(reduced_vecs[labels == i], axis=0)\n    labels = labels.tolist()\n    relabel_dict = {old_label: new_label for (old_label, new_label) in zip(sorted(set(labels)), range(n_cluster))}\n    labels = [relabel_dict[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 9, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    N = data.shape[0]\n    squared_distances = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity = np.exp(-gamma * squared_distances)\n    if method == 'unnormalized':\n        degree = np.sum(similarity, axis=0)\n        laplacian = np.diag(degree) - similarity\n    else:\n        degree = np.sum(similarity, axis=0)\n        degree_sqrt = np.diag(1 / np.sqrt(degree))\n        laplacian = np.eye(N) - np.dot(degree_sqrt, np.dot(similarity, degree_sqrt))\n    (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian)\n    indices = np.argsort(eigenvalues)[1:n_cluster + 1]\n    eigenvectors = eigenvectors[:, indices]\n    if method == 'normalized':\n        norms = np.linalg.norm(eigenvectors, axis=1)\n        eigenvectors = eigenvectors / norms[:, np.newaxis]\n    centroids = eigenvectors[:n_cluster]\n    labels = np.argmin(np.sum((eigenvectors[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n    relabeled_labels = np.empty_like(labels)\n    for i in range(n_cluster):\n        cluster_i = np.where(labels == i)[0]\n        original_index = np.argmin(data[cluster_i])\n        relabeled_labels[labels == i] = np.where(cluster_i == original_index)[0]\n    return relabeled_labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    (N, d) = X_data.shape\n    G = np.dot(X_data, X_data.T)\n    alpha = np.zeros(N)\n    b = 0.0\n    for _ in range(max_iter):\n        no_update = True\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        if no_update:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        update_count = 0\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                update_count += 1\n        if update_count == 0:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    return (np.round(w, 4).tolist(), np.round(b, 4))"}
{"task_id": 563, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            G[i, j] = np.dot(X_data[i], X_data[j])\n    converged = False\n    for iter in range(max_iter):\n        no_update = True\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        if no_update:\n            converged = True\n            break\n    w = np.sum([alpha[i] * y_data[i] * X_data[i] for i in range(N)], axis=0)\n    w_rounded = [round(el, 4) for el in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        update_count = 0\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                update_count += 1\n        if update_count == 0:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    return (np.round(w, 4).tolist(), round(b, 4))\nX_data = np.array([[0, 0], [1, 1], [2, 2]])\ny_data = np.array([1, 1, -1])"}
{"task_id": 563, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        error_count = 0\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                error_count += 1\n        if error_count == 0:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        no_update = True\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        if no_update:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            G[i, j] = np.dot(X_data[i], X_data[j])\n    for _ in range(max_iter):\n        num_updates = 0\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[i, :])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                num_updates += 1\n        if num_updates == 0:\n            break\n    w = np.sum(alpha.reshape(N, 1) * y_data.reshape(N, 1) * X_data, axis=0)\n    return (np.round(w, 4).tolist(), round(b, 4))"}
{"task_id": 563, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000):\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        changed = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                changed = True\n        if not changed:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)\nX_data = np.array([[1, 2], [3, 4], [5, 6]])\ny_data = np.array([1, -1, 1])\neta = 1.0\nmax_iter = 1000"}
{"task_id": 563, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 1, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 2, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    while root.y is None:\n        if task_type == 'classification':\n            for child in root.child:\n                if child.x == features[root.label]:\n                    root = child\n                    break\n            else:\n                root = root.child[1]\n        elif task_type == 'regression':\n            if features[root.label] <= root.s:\n                root = root.child[0]\n            else:\n                root = root.child[1]\n    return root.y"}
{"task_id": 564, "completion_id": 3, "solution": "class Node:\n\n    def __init__(self):\n        self.label = None\n        self.x = None\n        self.s = None\n        self.y = None\n        self.child = []\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        if root.y is not None:\n            return root.y\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if root.y is not None:\n            return root.y\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    else:\n        raise ValueError(\"Unknown task type. Only 'classification' and 'regression' are supported\")"}
{"task_id": 564, "completion_id": 4, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for node in root.child:\n            if node.x == features[root.label]:\n                return predict_sample(node, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 5, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        if len(root.child) > 1:\n            return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    raise ValueError(f'Unknown task type: {task_type}')"}
{"task_id": 564, "completion_id": 6, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif features[root.label] <= root.s:\n        return predict_sample(root.child[0], features, task_type)\n    else:\n        return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 7, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 8, "solution": "class Node:\n\n    def __init__(self, label=None, x=None, s=None, y=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = []\n\n    def add_child(self, node):\n        self.child.append(node)\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (List of float or tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    else:\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 9, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif features[root.label] <= root.s:\n        return predict_sample(root.child[0], features, task_type)\n    else:\n        return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        (_, counts) = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        res = 0\n        for (val, count) in zip(np.unique(feature), counts):\n            sub_labels = labels[feature == val]\n            res += count / len(feature) * entropy(sub_labels)\n        return res\n    H_y = entropy(y)\n    max_gain = -np.inf\n    best_feature = -1\n    num_features = X.shape[1]\n    for i in range(num_features):\n        H_y_given_feature = conditional_entropy(X[:, i], y)\n        gain = H_y - H_y_given_feature\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = i\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 565, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\nfrom math import log2\ndef entropy(labels: np.ndarray) -> float:\n    n_labels = len(labels)\n    if n_labels <= 1:\n        return 0\n    (value, counts) = np.unique(labels, return_counts=True)\n    probs = counts / n_labels\n    n_classes = np.count_nonzero(probs)\n    if n_classes <= 1:\n        return 0\n    return -sum([p * log2(p) for p in probs])\ndef information_gain(X, y, feature):\n    original_entropy = entropy(y)\n    (values, counts) = np.unique(X[:, feature], return_counts=True)\n    weighted_entropies = sum([counts[i] / sum(counts) * entropy(y[X[:, feature] == values[i]]) for i in range(len(values))])\n    return original_entropy - weighted_entropies\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    (best_feature, max_info_gain) = (None, -1)\n    for feature in range(X.shape[1]):\n        curr_info_gain = information_gain(X, y, feature)\n        if curr_info_gain > max_info_gain:\n            (best_feature, max_info_gain) = (feature, curr_info_gain)\n    return (best_feature, round(max_info_gain, 6))"}
{"task_id": 565, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0\n        counts = np.bincount(labels)\n        probs = counts[np.nonzero(counts)] / len(labels)\n        return -np.sum(probs * np.log2(probs))\n\n    def conditional_entropy(feature, y):\n        values = np.unique(feature)\n        total_entropy = 0\n        for value in values:\n            subset_y = y[feature == value]\n            total_entropy += len(subset_y) / len(y) * entropy(subset_y)\n        return total_entropy\n    H_y = entropy(y)\n    max_information_gain = 0\n    best_feature_index = None\n    n_features = X.shape[0] if X.ndim == 1 else X.shape[1]\n    for feature_index in range(n_features):\n        feature = X[feature_index, :] if X.ndim == 1 else X[:, feature_index]\n        H_y_given_feature = conditional_entropy(feature, y)\n        information_gain = H_y - H_y_given_feature\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n        elif information_gain == max_information_gain and feature_index < best_feature_index:\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\nfrom math import log2\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(labels):\n        counts = Counter(labels)\n        total = sum(counts.values())\n        return sum((-count / total * log2(count / total) for count in counts.values()))\n\n    def conditional_entropy(feature, labels):\n        counts = Counter(feature)\n        total = sum(counts.values())\n        return sum((sum(labels[feature == value] == cl) / count * log2(sum(feature == value) / total) for (value, count) in counts.items()))\n    best_feature_index = None\n    max_information_gain = -np.inf\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        info_gain = entropy(y) - conditional_entropy(feature, y)\n        if info_gain > max_information_gain:\n            max_information_gain = info_gain\n            best_feature_index = i\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n    H_y = entropy(y)\n    best_info_gain = -math.inf\n    best_feature_idx = None\n    for feature_idx in range(X.shape[1]):\n        (vals, counts) = np.unique(X[:, feature_idx], return_counts=True)\n        p = counts / len(X)\n        H_y_conditional = np.sum(p * entropy(y[X[:, feature_idx] == val]))\n        info_gain = H_y - H_y_conditional\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_feature_idx = feature_idx\n    return (best_feature_idx, round(best_info_gain, 6))"}
{"task_id": 565, "completion_id": 5, "solution": "import numpy as np\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        (_, counts) = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        ent = 0\n        for (val, prob) in zip(np.unique(feature), p):\n            idx = np.where(feature == val)\n            subset_labels = labels[idx]\n            ent += entropy(subset_labels) * prob\n        return ent\n    y_entropy = entropy(y)\n    max_info_gain = 0.0\n    best_feature_index = 0\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        info_gain = y_entropy - conditional_entropy(feature, y)\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = i\n    return (best_feature_index, round(max_info_gain, 6))"}
{"task_id": 565, "completion_id": 6, "solution": "import numpy as np\nfrom math import log2\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate entropy of a list of labels\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    entropy_value = 0.0\n    for i in counts.values():\n        p_i = i / n\n        entropy_value += -p_i * log2(p_i)\n    return entropy_value\ndef conditional_entropy(values, labels):\n    \"\"\"Calculate the conditional entropy for a list of values and labels\"\"\"\n    n = len(values)\n    counts = Counter(values)\n    cond_entropy_value = 0.0\n    for value in counts:\n        indices = [i for i in range(n) if values[i] == value]\n        p_value = counts[value] / n\n        value_labels = [labels[i] for i in indices]\n        cond_entropy_value += p_value * entropy(value_labels)\n    return cond_entropy_value\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    base_entropy = entropy(y)\n    max_info_gain = -1\n    best_feature_index = -1\n    for feature in range(d):\n        values = X[:, feature]\n        cond_entropy = conditional_entropy(values, y)\n        info_gain = base_entropy - cond_entropy\n        if info_gain > max_info_gain or (info_gain == max_info_gain and feature < best_feature_index):\n            max_info_gain = info_gain\n            best_feature_index = feature\n    return (best_feature_index, round(max_info_gain, 6))"}
{"task_id": 565, "completion_id": 7, "solution": "import numpy as np\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / counts.sum()\n        return np.sum([-pi * np.log2(pi) for pi in p])\n\n    def conditional_entropy(labels, feature):\n        (values, counts) = np.unique(feature, return_counts=True)\n        probs = counts / counts.sum()\n        entropy_list = []\n        for value in values:\n            subset_labels = labels[feature == value]\n            entropy_value = entropy(subset_labels)\n            entropy_list.append(entropy_value * probs[value])\n        return np.sum(entropy_list)\n    H_y = entropy(y)\n    (best_information_gain, best_feature) = (-np.inf, None)\n    for col in X.T:\n        H_y_given_x = conditional_entropy(y, col)\n        information_gain = H_y - H_y_given_x\n        if information_gain > best_information_gain:\n            best_information_gain = information_gain\n            best_feature = col\n    return (np.where(X.T == best_feature)[0][0], round(best_information_gain, 6))\ny = np.array([0, 1, 0])"}
{"task_id": 565, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(y):\n        hist = np.bincount(y)\n        ps = hist / len(y)\n        return -np.sum([p * np.log2(p) for p in ps if p > 0])\n\n    def conditional_entropy(feature, y):\n        values = np.unique(X[:, feature])\n        entropy_sum = 0\n        for value in values:\n            indices = X[:, feature] == value\n            subset_y = y[indices]\n            subset_proportion = len(subset_y) / len(y)\n            entropy_sum += subset_proportion * entropy(subset_y)\n        return entropy_sum\n    current_entropy = entropy(y)\n    best_information_gain = -np.inf\n    best_feature = None\n    for feature in range(X.shape[1]):\n        feature_entropy = conditional_entropy(feature, y)\n        information_gain = current_entropy - feature_entropy\n        if information_gain > best_information_gain:\n            best_information_gain = information_gain\n            best_feature = feature\n    return (best_feature, round(best_information_gain, 6))"}
{"task_id": 565, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    counts = np.bincount(y)\n    before_split_entropy = entropy(counts)\n    max_gain = -1\n    best_feature = -1\n    for i in range(n_features):\n        feature_values = X[:, i]\n        feature_entropy = compute_feature_entropy(y, feature_values)\n        gain = before_split_entropy - feature_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = i\n    return (best_feature, round(max_gain, 6))\ndef entropy(counts: np.ndarray) -> float:\n    \"\"\"Compute the entropy of an array of class counts.\"\"\"\n    proportions = counts / counts.sum()\n    entropy = 0.0\n    for proportion in proportions:\n        if proportion != 0.0:\n            entropy -= proportion * np.log2(proportion)\n    return entropy\ndef compute_feature_entropy(y: np.ndarray, feature_values: np.ndarray) -> float:\n    \"\"\"Compute the conditional entropy of y given feature values.\"\"\"\n    total_count = len(y)\n    feature_value_set = set(feature_values)\n    feature_entropy = 0.0\n    for value in feature_value_set:\n        indices = feature_values == value\n        subset_counts = Counter(y[indices])\n        total_subset_count = sum(subset_counts.values())\n        feature_entropy += total_subset_count / total_count * entropy(subset_counts.values())\n    return feature_entropy"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, data, feature=None, threshold=None, left=None, right=None):\n        self.data = data\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\ndef build_tree(data, depth=0):\n    if len(data) <= 1 or depth >= 30:\n        return Node(data)\n    feature = np.random.randint(data.shape[1])\n    threshold = np.random.uniform(data[:, feature].min(), data[:, feature].max())\n    left_data = data[data[:, feature] < threshold]\n    right_data = data[data[:, feature] >= threshold]\n    return Node(data, feature, threshold, build_tree(left_data, depth + 1), build_tree(right_data, depth + 1))\ndef path_length(x, tree, depth=0):\n    if tree.feature is None:\n        if len(tree.data) > 1:\n            c = 2 * np.log(len(tree.data) - 1) + 0.5772156649 - 2 * (len(tree.data) - 1) / len(tree.data)\n        else:\n            c = 0\n        return c + depth\n    if x[tree.feature] < tree.threshold:\n        return path_length(x, tree.left, depth + 1)\n    else:\n        return path_length(x, tree.right, depth + 1)\ndef anomaly_score(x, forest):\n    phi = 2 * np.log(len(forest)) - 2 * (len(forest) - 1) / len(forest)\n    avg_hl = sum((path_length(x, tree) for tree in forest)) / len(forest)\n    return 2 ** (-avg_hl / phi)\ndef detect_outliers(data, n_trees, sample_size, epsilon):\n    np.random.seed(42)\n    if n_trees * sample_size > len(data):\n        sample_size = len(data) // n_trees\n    forest = [build_tree(data[np.random.choice(len(data), sample_size, replace=False)]) for _ in range(n_trees)]\n    scores = [anomaly_score(x, forest) for x in data]\n    threshold = sorted(scores, reverse=True)[int(np.ceil(len(scores) * epsilon))]\n    outliers = [i for i in range(len(scores)) if scores[i] <= threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n\n    def c(n):\n        return 2.0 * (np.log(n - 1) + 0.5772156649) - 2.0 * (n - 1) / n if n > 1 else 0\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n    path_lengths = np.zeros(n_samples)\n    total_splits = 0\n    for _ in range(n_trees):\n        subsample = data[np.random.choice(range(n_samples), size=sample_size, replace=False), :]\n        max_depth = math.ceil(math.log2(sample_size))\n        root = {'x': subsample, 'depth': 0}\n        nodes = [root]\n        while nodes:\n            node = nodes.pop(0)\n            n_samples_node = node['x'].shape[0]\n            total_splits += 1\n            if node['depth'] < max_depth and n_samples_node > 1:\n                feature = np.random.choice(n_features)\n                threshold = np.random.uniform(low=node['x'][:, feature].min(), high=node['x'][:, feature].max())\n                left = {'x': node['x'][node['x'][:, feature] < threshold], 'depth': node['depth'] + 1}\n                right = {'x': node['x'][node['x'][:, feature] >= threshold], 'depth': node['depth'] + 1}\n                nodes.extend([left, right])\n            elif n_samples_node > 0:\n                path_lengths[node['x'][:, 0].astype(int)] += node['depth'] + c(n_samples_node)\n    avg_path_lengths = path_lengths / total_splits\n    phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    anomaly_scores = np.power(2.0, -(avg_path_lengths / phi))\n    anomalies = np.where(anomaly_scores > np.percentile(anomaly_scores, 100 * (1 - epsilon)))\n    return sorted(list(anomalies[0]))"}
{"task_id": 566, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    if epsilon == 0:\n        return []\n    (n_samples, n_features) = data.shape\n    depth_limit = math.ceil(math.log2(sample_size))\n\n    def build_tree_and_compute_score(sample, depth=0):\n        if depth == depth_limit or len(sample) == 1:\n            return (0, 1)\n        else:\n            feature = np.random.randint(n_features)\n            threshold = np.random.uniform(low=np.min(sample[:, feature]), high=np.max(sample[:, feature]))\n            split = sample[:, feature] < threshold\n            (left_score, left_c) = build_tree_and_compute_score(sample[split], depth=depth + 1)\n            (right_score, right_c) = build_tree_and_compute_score(sample[~split], depth=depth + 1)\n            score = (1 + (left_score + right_score)) / (1 + (left_c + right_c))\n            if len(sample[~split]) == 1:\n                c = 0\n            else:\n                c = 2 * (np.log(len(sample[~split]) - 1) + 0.5772156649) - 2 * (len(sample[~split]) - 1) / len(sample[~split])\n            return (score, c)\n    scores = np.empty(n_samples)\n    for i in range(n_trees):\n        indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        sample = data[indices]\n        (scores[i], _) = build_tree_and_compute_score(sample)\n    overall_scores = 2 ** (-scores * np.log(2) / (2 * (np.log(n_samples) - np.log(n_samples - 1)) / n_samples - 2 / n_samples))\n    epsilon_index = int(np.ceil(n_samples * (1 - epsilon)))\n    thresh = sorted(overall_scores)[-epsilon_index]\n    outliers = np.where(overall_scores >= thresh)[0]\n    return np.sort(outliers).tolist()"}
{"task_id": 566, "completion_id": 3, "solution": "import numpy as np\nclass TreeNode:\n\n    def __init__(self, min_val, max_val, depth, h_func):\n        self.min_val = min_val\n        self.max_val = max_val\n        self.depth = depth\n        self.h_func = h_func\n\n    def split(self, split_feature, split_val, curr_depth, max_depth):\n        left_node = TreeNode(self.min_val, split_val, curr_depth + 1, self.h_func)\n        right_node = TreeNode(split_val, self.max_val, curr_depth + 1, self.h_func)\n        if curr_depth >= max_depth:\n            return (left_node, right_node)\n        if np.random.random() < 0.5:\n            return left_node.split(split_feature, split_val, curr_depth + 1, max_depth)\n        else:\n            return right_node.split(split_feature, split_val, curr_depth + 1, max_depth)\ndef get_path_length(data_row, tree):\n    node = tree\n    path_length = 0\n    while isinstance(node, TreeNode):\n        path_length += 1\n        if np.random.random() < 0.5:\n            node = node.split(0, np.random.uniform(node.min_val, node.max_val), node.depth, node.h_func)\n        else:\n            node = node.split(1, np.random.uniform(node.min_val, node.max_val), node.depth, node.h_func)\n    return path_length\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    h_func = int(np.ceil(np.log2(sample_size)))\n    trees = []\n    scores = []\n    phi = 2 * np.log(sample_size) - 2 * (sample_size - 1) / sample_size if sample_size > 1 else 0\n    for _ in range(n_trees):\n        tree = TreeNode(data.min(), data.max(), 0, h_func)\n        trees.append(tree)\n        for row in data:\n            scores.append(get_path_length(row, tree))\n    scores = np.array(scores)\n    anomaly_scores = 2 ** (-scores / phi)\n    threshold = np.quantile(anomaly_scores, 1 - epsilon)\n    return sorted([i[0] for i in sorted(enumerate(anomaly_scores), key=lambda x: -x[1]) if x[1] >= threshold])"}
{"task_id": 566, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    phi = 2 * (math.log(sample_size) + math.log(n_samples)) - 4 * (n_samples / (n_samples - 1))\n    height_limit = math.ceil(math.log2(sample_size))\n    scores = np.zeros(n_samples)\n    if epsilon == 0:\n        return []\n    for _ in range(n_trees):\n        subset = data[np.random.choice(n_samples, size=sample_size, replace=False), :]\n        tree = IsolationTree(subset, height_limit)\n        path_lengths = tree.path_length(data)\n        scores += path_lengths / n_trees\n    s = np.power(2.0, -(scores / phi))\n    n_outliers = int(np.ceil(epsilon * n_samples))\n    indices = np.argsort(s)[-n_outliers:]\n    return sorted(indices.tolist())\nclass Node:\n\n    def __init__(self, data, height_limit):\n        self.size = len(data)\n        if len(data) <= 1 or height_limit == 0:\n            self.exNode = True\n            self.size = 1\n            self.left = None\n            self.right = None\n        else:\n            self.exNode = False\n            split_attr = np.random.choice(data.shape[1])\n            split_value = np.random.uniform(np.min(data[:, split_attr]), np.max(data[:, split_attr]))\n            self.split_attr = split_attr\n            self.split_value = split_value\n            left_data = data[data[:, split_attr] < split_value]\n            right_data = data[data[:, split_attr] >= split_value]\n            self.left = Node(left_data, height_limit - 1)\n            self.right = Node(right_data, height_limit - 1)\nclass IsolationTree:\n\n    def __init__(self, data, height_limit):\n        self.threshold = np.mean([self.c(2), self.c(2 ** 2 - 1 + 1)])\n        self.root = Node(data, height_limit)\n\n    @staticmethod\n    def c(n):\n        return 2.0 * (np.log(n - 1) + np.euler_gamma) - 2.0 * (n - 1.0) / n if n > 2 else 0.0\n\n    def path_length(self, x):\n        x = np.atleast_2d(x)\n        return np.array([self.path_length_single(row) for row in x])\n\n    def path_length_single(self, x):\n        node = self.root\n        path_length = 0.0\n        while not node.exNode:\n            path_length += 1.0\n            if x[node.split_attr] < node.split_value:\n                node = node.left\n            else:\n                path_length += self.c(node.right.size)\n                node = node.right\n        return path_length"}
{"task_id": 566, "completion_id": 5, "solution": "import numpy as np\nimport math\nclass RandomFeatureTree:\n\n    def __init__(self, data, sample_size):\n        self.depth_limit = math.ceil(np.log2(sample_size))\n        self.data = data[np.random.choice(range(len(data)), sample_size, replace=False)]\n        self.build_tree(self.data, depth=0)\n\n    def build_tree(self, data, depth):\n        if depth >= self.depth_limit or len(data) <= 1:\n            self.c = self.corrected_path_length(len(data))\n        else:\n            feature = np.random.randint(data.shape[1])\n            threshold = np.random.uniform(data[:, feature].min(), data[:, feature].max())\n            (left, right) = (data[data[:, feature] <= threshold], data[data[:, feature] > threshold])\n            self.build_tree(left, depth + 1)\n            self.build_tree(right, depth + 1)\n\n    def corrected_path_length(self, n):\n        if n <= 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list:\n    np.random.seed(42)\n    if n_trees <= 0 or epsilon < 0 or epsilon >= 1 or (sample_size > len(data)):\n        return []\n    trees = [RandomFeatureTree(data, sample_size) for _ in range(n_trees)]\n    scores = []\n    for i in range(len(data)):\n        path_lengths = []\n        for tree in trees:\n            path_lengths.append(tree.path_length(data[i]))\n        scores.append(np.mean(path_lengths))\n    scores = np.array(scores)\n    phi = 2 * np.log(len(data) - 1) - 2 * (len(data) - 1) / len(data)\n    scores_s = np.power(2, -(scores / phi))\n    sorted_indices = np.argsort(scores_s)\n    outliers = sorted_indices[np.floor((1 - epsilon) * len(data)).astype(int):].tolist()\n    return outliers"}
{"task_id": 566, "completion_id": 6, "solution": "import numpy as np\nimport math\nfrom collections import Counter\nfrom typing import Tuple\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    height_limit = math.ceil(math.log2(sample_size))\n    paths = []\n    leaf_stats = []\n    for _ in range(n_trees):\n        (tree_paths, tree_leaf_stats) = build_isolation_tree(data, sample_size, height_limit)\n        paths.append(tree_paths)\n        leaf_stats.append(tree_leaf_stats)\n    avg_path_lengths = np.mean(paths, axis=0)\n    scores = get_scores(avg_path_lengths)\n    outlier_indices = get_outlier_indices(scores, epsilon)\n    return sorted(list(outlier_indices))\ndef build_isolation_tree(data: np.ndarray, sample_size: int, height_limit: int) -> Tuple[np.ndarray, Counter]:\n    tree_paths = np.zeros(len(data))\n    leaf_stats = Counter()\n    for i in range(len(data)):\n        sample_indices = np.random.choice(len(data), sample_size, replace=False)\n        tree = build_isolation_tree_recursive(data[sample_indices], height_limit)\n        path_length = get_path_length(tree)\n        tree_paths[i] = path_length\n        leaf_stats[tree.leaf] += 1\n    return (tree_paths, leaf_stats)\ndef build_isolation_tree_recursive(data: np.ndarray, height_limit: int, depth: int=0) -> 'Node':\n    if len(data) <= 1 or depth == height_limit:\n        current_node = Node()\n        current_node.leaf = tuple(data[0])\n        return current_node\n    feature_idx = np.random.choice(data.shape[1])\n    threshold = np.random.uniform(low=data[:, feature_idx].min(), high=data[:, feature_idx].max())\n    left_data = data[data[:, feature_idx] < threshold]\n    right_data = data[data[:, feature_idx] >= threshold]\n    current_node = Node()\n    current_node.feature_idx = feature_idx\n    current_node.threshold = threshold\n    current_node.left = build_isolation_tree_recursive(left_data, height_limit, depth + 1)\n    current_node.right = build_isolation_tree_recursive(right_data, height_limit, depth + 1)\n    return current_node\ndef get_path_length(tree: 'Node', depth: int=0) -> float:\n    if tree.leaf is not None:\n        return depth + c(len(tree.leaf))\n    path_length = 0\n    if tree.feature_idx % 2 == 0:\n        path_length += get_path_length(tree.left, depth + 1)\n        path_length += get_path_length(tree.right, depth + 1)\n    else:\n        path_length += max(get_path_length(tree.left, depth + 1), get_path_length(tree.right, depth + 1))\n    return path_length\ndef c(n: int) -> float:\n    if n <= 1:\n        return 0\n    else:\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\ndef get_scores(avg_path_lengths: np.ndarray) -> np.ndarray:\n    return np.power(2, -(avg_path_lengths / (2 * np.log(len(avg_path_lengths) - 1) - 2 * (len(avg_path_lengths) - 1) / len(avg_path_lengths))))\ndef get_outlier_indices(scores: np.ndarray, epsilon: float) -> np.ndarray:\n    if epsilon == 0:\n        return np.array([])\n    else:\n        threshold = np.percentile(scores, 100 * (1 - epsilon))\n        return np.where(scores > threshold)[0]\nclass Node:\n\n    def __init__(self):\n        self.feature_idx = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.leaf = None"}
{"task_id": 566, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom scipy.stats import entropy\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    outliers = []\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    c_n = [0] + [2 * math.log(i - 1) + 0.5772156649 - 2 * (i - 1) / i for i in range(2, n_samples + 1)]\n    for _ in range(n_trees):\n        subsample = data[np.random.choice(n_samples, min(sample_size, n_samples), replace=False), :]\n        tree = _grow_tree(subsample, 0, subsample.shape[1] - 1, height_limit)\n        paths = np.zeros(n_samples)\n        for (i, sample) in enumerate(data):\n            paths[i] = _path_length(sample, tree, 0) + c_n[_count_leaf_samples(sample, tree, data)]\n        outliers.extend(paths / (2 ** np.mean(paths) / phi))\n    outliers = np.argsort(outliers)[::-1]\n    return outliers[:int(epsilon * n_samples)].tolist()\ndef _grow_tree(data, col_start, col_end, height_limit):\n    if height_limit <= 0 or data.shape[0] <= 1 or col_start > col_end:\n        return {'col': None, 'split': None, 'left': None, 'right': None}\n    col = np.random.randint(col_start, col_end + 1)\n    split = np.random.uniform(np.min(data[:, col]), np.max(data[:, col]))\n    left = data[data[:, col] < split]\n    right = data[data[:, col] >= split]\n    tree = {'col': col, 'split': split, 'left': _grow_tree(left, col_start, col - 1, height_limit - 1), 'right': _grow_tree(right, col + 1, col_end, height_limit - 1)}\n    return tree\ndef _path_length(sample, tree, path):\n    if tree['col'] is None:\n        return path\n    if sample[tree['col']] < tree['split']:\n        return _path_length(sample, tree['left'], path + 1)\n    else:\n        return _path_length(sample, tree['right'], path + 1)\ndef _count_leaf_samples(sample, tree, data):\n    if tree['col'] is None:\n        return (data[:, tree['col']] == sample[tree['col']]).sum()\n    if sample[tree['col']] < tree['split']:\n        return _count_leaf_samples(sample, tree['left'], data)\n    else:\n        return _count_leaf_samples(sample, tree['right'], data)"}
{"task_id": 566, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    data_size = data.shape[0]\n    height_limit = math.ceil(math.log2(sample_size))\n\n    def c(n):\n        return 2 * (n - 1) / n if n > 2 else 1\n\n    def generate_random_tree(height_limit, min_val, max_val, current_height=0):\n        if current_height >= height_limit or sample_size <= 1:\n            return {'value': np.random.uniform(min_val, max_val)}\n        feature = np.random.randint(data.shape[1])\n        threshold = np.random.uniform(min_val[feature], max_val[feature])\n        return {'feature': feature, 'threshold': threshold, 'left': generate_random_tree(height_limit, min_val, max_val, current_height + 1), 'right': generate_random_tree(height_limit, min_val, max_val, current_height + 1)}\n\n    def path_length(tree, sample, e=0):\n        if 'value' in tree:\n            return e + c(sample_size)\n        if sample[tree['feature']] < tree['threshold']:\n            return path_length(tree['left'], sample, e + 1)\n        else:\n            return path_length(tree['right'], sample, e + 1)\n    isolation_forest = []\n    min_val = data.min(axis=0)\n    max_val = data.max(axis=0)\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(data_size, size=sample_size, replace=False)\n        sample_data = data[sample_indices]\n        isolation_forest.append({'tree': generate_random_tree(height_limit, min_val, max_val), 'sample_indices': sample_indices})\n    scores = []\n    for i in range(data_size):\n        avg_path_length = sum((path_length(tree['tree'], data[i]) for tree in isolation_forest)) / n_trees\n        scores.append(math.pow(2, -(avg_path_length / (2 * (np.log(sample_size) - 0.5772156649)))))\n    outlier_threshold = np.quantile(scores, 1 - epsilon)\n    return sorted([i for i in range(data_size) if scores[i] >= outlier_threshold])"}
{"task_id": 566, "completion_id": 9, "solution": "import numpy as np\nclass TreeNode:\n\n    def __init__(self):\n        self.n_samples = 0\n        self.left = None\n        self.right = None\ndef get_c(n):\n    return 2.0 * (np.log(n - 1) + 0.5772156649) - 2.0 * (n - 1) / n if n > 1 else 0.0\ndef get_h(n, height_limit, tree_height):\n    if tree_height >= height_limit or n <= 1:\n        return tree_height + get_c(n)\n    else:\n        feature_idx = np.random.randint(n_features)\n        feature = data[:, feature_idx]\n        threshold = np.random.uniform(np.min(feature), np.max(feature))\n        left = np.where(feature <= threshold)\n        right = np.where(feature > threshold)\n        node = TreeNode()\n        node.left = get_h(len(left[0]), height_limit, tree_height + 1)\n        node.right = get_h(len(right[0]), height_limit, tree_height + 1)\n        return node.n_samples + node.left[1] + node.right[1]\ndef build_tree(data, height_limit):\n    idxes = np.random.choice(np.arange(n_samples), size=sample_size, replace=False)\n    sub_samples = data[idxes]\n    return get_h(len(sub_samples), height_limit, 0)\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    global n_features\n    global n_samples\n    (n_samples, n_features) = data.shape\n    outlier_scores = np.zeros(n_samples)\n    height_limit = np.log2(sample_size)\n    for _ in range(n_trees):\n        tree = build_tree(data, height_limit)\n        for (i, sample) in enumerate(data):\n            outlier_scores[i] += tree.nodes[sample].n_samples\n    threshold = np.percentile(outlier_scores, 100 * (1 - epsilon))\n    outliers = np.where(outlier_scores > threshold)[0]\n    return sorted(outliers.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    X_train = np.array([np.array(x) for x in X_train])\n    X_test = np.array([np.array(x) for x in X_test])\n    y_train = np.array(y_train)\n    classes = np.unique(y_train)\n    features = X_train.shape[1]\n    pairs = defaultdict(int)\n    marginals = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for i in range(features):\n            pairs[x[i], y] += 1\n        marginals[y] += 1\n    weights = np.zeros((features, len(classes)))\n    for j in range(n_iter):\n        exp_weights = np.exp(weights)\n        old_weights = weights.copy()\n        for i in range(features):\n            update = np.zeros(len(classes))\n            for y in range(len(classes)):\n                for x in X_train:\n                    update[y] += exp_weights[i, y] * (x[i] == X_train[:, i])\n                update[y] /= marginals[y]\n                weights[i, y] = np.log(update[y])\n        if np.allclose(old_weights, weights, atol=epsilon):\n            break\n    predictions = []\n    for x in X_test:\n        conditional_probs = np.zeros(len(classes))\n        for y in range(len(classes)):\n            conditional_probs[y] = np.sum(exp_weights[range(features), y] * (x == X_train[:, range(features)]))\n            conditional_probs[y] /= np.sum(exp_weights[range(features), y])\n        predictions.append(np.argmax(conditional_probs))\n    return predictions"}
{"task_id": 568, "completion_id": 1, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    labels = set(y_train)\n    feat_freqs = defaultdict(int)\n    weights = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        for (feat_index, feat_value) in enumerate(x):\n            feat_freqs[feat_index, feat_value, y] += 1\n    scores = defaultdict(float, {feat_values: freq / len(y_train) for (feat_values, freq) in feat_freqs.items()})\n    for _ in range(n_iter):\n        weight_updates = {feat_values: feat_freq * math.exp(weights[feat_values]) for (feat_values, feat_freq) in scores.items()}\n        max_update = max((abs(update) for update in weight_updates.values()))\n        Z_x = math.fsum(weight_updates.values())\n        if max_update < epsilon:\n            break\n        for (feat_values, update) in weight_updates.items():\n            (feat_index, feat_value, y) = feat_values\n            weights[feat_index, feat_value, y] += update / Z_x\n    y_pred = []\n    for x in X_test:\n        scores = {}\n        for y in labels:\n            score = sum((weights[feat_index, feat_value, y] for (feat_index, feat_value) in enumerate(x)))\n            scores[y] = score\n        y_pred.append(max(scores, key=scores.get))\n    return y_pred"}
{"task_id": 568, "completion_id": 2, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    N = defaultdict(lambda : defaultdict(int))\n    for (feature_vector, label) in zip(X_train, y_train):\n        N[label][tuple(feature_vector)] += 1\n    V = defaultdict(lambda : defaultdict(int))\n    for key in N.keys():\n        V[key]['total'] = sum(N[key].values())\n        V[key]['N'] = len(N[key])\n    w = defaultdict(float)\n    for _ in range(n_iter):\n        delta_w = defaultdict(float)\n        for j in V.keys():\n            for i in N[j].keys():\n                exp_sum = sum((N[k][i] * w[i] for k in range(len(V)) if k != j))\n                delta_w[i, j] = math.log((V[j]['total'] + (V[j]['N'] - 1)) / (V[j]['total'] - (N[j][i] - 1)) * (sum(N[j].values()) / (V[j]['total'] - N[j][i] + 1)) * (N[j][i] / (V[j]['total'] + 1))) - exp_sum\n        if all((abs(delta_w[k]) < epsilon for k in delta_w.keys())):\n            break\n        else:\n            max_update_key = max(delta_w.items(), key=lambda x: abs(x[1]))[0]\n            w[max_update_key] += delta_w[max_update_key]\n    y_test = []\n    for feature_vector in X_test:\n        exp_sum = defaultdict(float)\n        for j in V.keys():\n            exp_sum[j] = sum((w[i, j] for i in N[j].keys() if tuple(i) == tuple(feature_vector)))\n        y_test += [max(exp_sum.items(), key=lambda x: x[1])[0]]\n    return y_test"}
{"task_id": 568, "completion_id": 3, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef estimate_feature_expectations(X, y, w, feature_counts):\n    exp_f = np.zeros(len(feature_counts))\n    for (x, y) in zip(X, y):\n        for (feature, value) in enumerate(x):\n            exp_f[feature_counts[feature, value, y]] += w[feature_counts[feature, value, y]]\n    total_f_count = sum(exp_f)\n    return [f_count / total_f_count for f_count in exp_f]\ndef maxent_predict(X_train, y_train, X_test, epsilon=0.001, n_iter=100):\n    feature_counts = defaultdict(int)\n    features = []\n    for (x, y) in zip(X_train, y_train):\n        features.append([])\n        for (feature, value) in enumerate(x):\n            features[-1].append((feature, value, y))\n            feature_id = feature_counts[feature, value, y] = len(feature_counts)\n    w = np.zeros(len(feature_counts))\n    for _ in range(n_iter):\n        exp_f = estimate_feature_expectations(features, y_train, np.exp(w), feature_counts)\n        for (i, exp_f_i) in enumerate(exp_f):\n            if abs(exp_f_i - 1) < epsilon:\n                break\n            w[i] += math.log(1 / exp_f_i)\n    predictions = []\n    for x in X_test:\n        x_features = []\n        for (feature, value) in enumerate(x):\n            feature_id = feature_counts[feature, value, 1]\n            x_features.append(w[feature_id] if feature_id in feature_counts else -np.inf)\n        predictions.append(int(np.argmax(x_features)))\n    return predictions"}
{"task_id": 568, "completion_id": 4, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    feature_counts = defaultdict(int)\n    for (sample, label) in zip(X_train, y_train):\n        for (feature, value) in enumerate(sample):\n            feature_counts[feature, value, label] += 1\n    empirical_probabilities = defaultdict(float)\n    for ((feature, value, label), count) in feature_counts.items():\n        empirical_probabilities[feature, value, label] = count / len(y_train)\n    weights = np.zeros(len(feature_counts))\n    for _ in range(n_iter):\n        normalization_factors = np.array([math.exp(weights.dot([feature, value, label])) for ((feature, value, label), _) in empirical_probabilities.items()])\n        new_weights = sum((prob * math.exp(weights.dot([feature, value, label])) / normalization_factors.dot([feature, value, label]) for ((feature, value, label), prob) in empirical_probabilities.items()))\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n        else:\n            weights = new_weights\n    y_pred = []\n    for sample in X_test:\n        label_probabilities = {label: np.exp(weights.dot([feature, value, label])) for ((feature, value), label) in empirical_probabilities.keys()}\n        y_pred.append(max(label_probabilities, key=label_probabilities.get))\n    return y_pred"}
{"task_id": 568, "completion_id": 5, "solution": "import numpy as np\nfrom collections import defaultdict\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    feature_indices = X_train.T[0]\n    feature_values = X_train.T[1]\n    labels = y_train\n    empirical_distributions = defaultdict(dict)\n    for (i, (feature_index, feature_value)) in enumerate(zip(feature_indices, feature_values)):\n        empirical_distributions[feature_index, feature_value][labels[i]] = empirical_distributions[feature_index, feature_value].get(labels[i], 0) + 1\n    for (feature_feature_value, label_counts) in empirical_distributions.items():\n        total_count = sum(label_counts.values())\n        for label in label_counts:\n            empirical_distributions[feature_feature_value][label] /= total_count\n    weights = np.ones(len(empirical_distributions))\n    for _ in range(n_iter):\n        update = np.zeros_like(weights)\n        for (i, (feature_feature_value, probabilities)) in enumerate(empirical_distributions.items()):\n            weight_sum = sum((weights[j] * probabilities.get(label, 0) for (j, label) in enumerate(empirical_distributions.keys())))\n            for label in probabilities:\n                update[i] += weights[i] * probabilities[label]\n            update[i] /= -weight_sum\n        weights += update\n        if np.max(np.abs(update)) < epsilon:\n            break\n    predictions = []\n    for x_test in X_test:\n        probabilities = defaultdict(float)\n        for ((feature_index, feature_value), weight) in zip(empirical_distributions.keys(), weights):\n            probabilities[x_test[1]] += weight * empirical_distributions[feature_index, feature_value].get(x_test[1], 0)\n        predictions.append(max(probabilities, key=probabilities.get))\n    return predictions"}
{"task_id": 568, "completion_id": 6, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n\n    def calculate_feature_exp(features, j):\n        f_j_value = 0.0\n        for i in range(m):\n            f_j_value += w[j] * features[i][j]\n        return math.exp(f_j_value)\n    y_train = y_train.flatten()\n    X_train = X_train.tolist()\n    m = len(X_train)\n    n = len(X_test)\n    feature_map = defaultdict(int)\n    label_list = list(set(y_train))\n    for i in range(m):\n        for j in range(len(X_train[i])):\n            if (j, X_train[i][j], y_train[i]) not in feature_map:\n                feature_map[j, X_train[i][j], y_train[i]] = len(feature_map)\n    num_features = len(feature_map)\n    w = [0.0] * num_features\n    for _ in range(n_iter):\n        feature_exp = [calculate_feature_exp(X_train, j) for j in range(num_features)]\n        Z_x = 0.0\n        for y in label_list:\n            temp_sum = sum([w[feature_map[j, X_train[i][j], y]] * feature for (j, feature) in enumerate(X_train[i])])\n            Z_x += math.exp(temp_sum)\n        new_w = [0.0] * num_features\n        for i in range(m):\n            for j in range(num_features):\n                new_w[j] += feature_exp[j] * X_train[i][j]\n        delta_w_max = max([abs(w[i] - new_w[i] / Z_x) for i in range(num_features)])\n        w = [new_w[i] / Z_x for i in range(num_features)]\n        if delta_w_max < epsilon:\n            break\n    predictions = []\n    for i in range(n):\n        prob_all_classes = []\n        for y_class in label_list:\n            temp_sum = sum([w[feature_map[j, X_test[i][j], y_class]] * feature for (j, feature) in enumerate(X_test[i])])\n            Z_x = 0.0\n            for y in label_list:\n                temp_sum = sum([w[feature_map[j, X_test[i][j], y]] * feature for (j, feature) in enumerate(X_test[i])])\n                Z_x += math.exp(temp_sum)\n            prob_all_classes.append(math.exp(temp_sum) / Z_x)\n        predictions.append(label_list[np.argmax(prob_all_classes)])\n    return predictions"}
{"task_id": 568, "completion_id": 7, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    X_train_unique = set([tuple(x) for x in X_train])\n    y_train_unique = set(y_train)\n    em_prob = defaultdict(lambda : defaultdict(float))\n    em_count = defaultdict(int)\n    f_count = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        em_count[tuple(x), y] += 1\n        f_count[tuple(list(x) + [y])] += 1\n    for (xy, count) in em_count.items():\n        em_prob[xy[0]][xy[1]] = count / len(X_train)\n    weights = np.zeros([len(X_train_unique), len(y_train_unique)])\n    Zx = np.zeros([len(X_train_unique), len(y_train_unique)])\n    for it in range(n_iter):\n        Zx.fill(0.0)\n        weights_next = weights.copy()\n        for ((x, y), em_prob_xy) in sorted(em_prob.items()):\n            for (x_dash, y_dash, _) in sorted(f_count.keys()):\n                Zx[x][y] += em_prob[x_dash, y_dash] * math.exp(weights[x_dash][y_dash])\n            weights_next[x][y] += math.log(f_count[x, y, y_dash]) - math.log(max(1e-15, Zx[x][y]))\n        weight_update = max(np.abs(weights - weights_next))\n        weights = weights_next\n        if weight_update < epsilon:\n            break\n    predict_labels = []\n    for x_test in X_test:\n        P_label = {y: em_prob[tuple(x), y] * math.exp(weights[tuple(x)][y]) for y in y_train_unique}\n        predict_labels.append(max(P_label, key=P_label.get))\n    return predict_labels"}
{"task_id": 568, "completion_id": 8, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n\n    def build_empirical_distributions(X_train, y_train):\n        empirical_dist = defaultdict(lambda : defaultdict(float))\n        num_samples = X_train.shape[0]\n        for i in range(num_samples):\n            empirical_dist[y_train[i]][tuple(X_train[i])] += 1.0\n        for label in empirical_dist.keys():\n            for key in empirical_dist[label].keys():\n                empirical_dist[label][key] /= num_samples\n        return empirical_dist\n\n    def compute_Z(X, empirical_dist, weights):\n        Z_x = 0.0\n        for y in empirical_dist.keys():\n            dot_product_y_x = np.dot(weights[y], X)\n            Z_x += math.exp(dot_product_y_x)\n        return Z_x\n\n    def predict_sample(X, empirical_dist, weights):\n        Z_x = compute_Z(X, empirical_dist, weights)\n        max_prob = -math.inf\n        opt_label = -1\n        for label in empirical_dist.keys():\n            dot_product_y_x = np.dot(weights[label], X)\n            prob_y_given_x = math.exp(dot_product_y_x) / Z_x\n            if prob_y_given_x > max_prob:\n                max_prob = prob_y_given_x\n                opt_label = label\n        return opt_label\n    num_features = X_train.shape[1]\n    empirical_dist = build_empirical_distributions(X_train, y_train)\n    weights = {y: np.zeros(num_features) for y in empirical_dist.keys()}\n    for _ in range(n_iter):\n        weight_copies = {y: np.copy(weights[y]) for y in empirical_dist.keys()}\n        for y in empirical_dist.keys():\n            for (X, count) in empirical_dist[y].items():\n                dot_product_y_x = np.dot(weight_copies[y], X)\n                weights[y] += count * X * math.exp(dot_product_y_x)\n        Z_train = sum((compute_Z(X, empirical_dist, weights) for X in X_train))\n        weights = {y: weights[y] / Z_train for y in empirical_dist.keys()}\n    predictions = [predict_sample(X_test_i, empirical_dist, weights) for X_test_i in X_test]\n    return predictions"}
{"task_id": 568, "completion_id": 9, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n\n    def emp_Z(X_data, y_data, weights):\n        Z = 0\n        for (sample, label) in zip(X_data, y_data):\n            exp_sum = sum((weights[feature] * feature in sample for feature in features))\n            Z += math.exp(exp_sum)\n        return Z\n\n    def f(feature, sample, label):\n        return 1 if feature in sample and y_train[label] == label else 0\n\n    def emp_freq(X_data, y_data, weights, feature):\n        freq = 0\n        for (sample, label) in zip(X_data, y_data):\n            freq += f(feature, sample, label) * math.exp(weights[feature] * f(feature, sample, label))\n        return freq\n    classes = np.unique(y_train)\n    features = np.unique(X_train)\n    weights = defaultdict(int)\n    Z_train = emp_Z(X_train, y_train, weights)\n    freqs_train = {feature: emp_freq(X_train, y_train, weights, feature) for feature in features}\n    for _ in range(n_iter):\n        prev_weights = weights.copy()\n        for feature in features:\n            freq = freqs_train[feature]\n            exp_sum = sum((weights[f] * f in x for (f, x) in zip(features, X_train)))\n            weights[feature] += math.log(freq / Z_train / math.exp(exp_sum))\n        diff = max([abs(i - j) for (i, j) in zip(weights.values(), prev_weights.values())])\n        if diff < epsilon:\n            break\n    Z_test = emp_Z(X_test, y_train, weights)\n    predictions = []\n    for sample in X_test:\n        probs = {label: np.exp(sum((weights[feature] if f in sample else 0 for (feature, f) in zip(features, sample)))) / Z_test for (feature, f) in zip(features, sample)}\n        predictions.append(max(probs, key=probs.get))\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_counts = Counter()\n    for (_, words) in data:\n        word_counts.update(set(words))\n    word_ratios = {word: round(count / total_documents, 4) for (word, count) in word_counts.items()}\n    sorted_words = sorted(word_ratios.items(), key=lambda item: item[1], reverse=True)\n    cut_off_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, cut_off_words)\ndata = [('doc1', ['hello', 'world', 'hello', 'world', 'hello']), ('doc2', ['world', 'world', 'world', 'hello']), ('doc3', ['this', 'is', 'a', 'test'])]\ncut_off = 2"}
{"task_id": 569, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter()\n    num_documents = len(data)\n    for (_, words) in data:\n        word_counts.update(set(words))\n    word_ratios = [(word, round(count / num_documents, 4)) for (word, count) in word_counts.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    top_words = set((word for (word, _) in word_ratios[:cut_off]))\n    return (word_ratios, top_words)"}
{"task_id": 569, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    words = [word for (label, doc_words) in data for word in doc_words]\n    word_counts = Counter(words)\n    num_docs = len(data)\n    word_ratios = {word: round(count / num_docs, 4) for (word, count) in word_counts.items()}\n    sorted_words = sorted(word_ratios.items(), key=lambda item: item[1], reverse=True)\n    common_words = set((word for (word, _) in sorted_words[:cut_off])) if cut_off is not None else word_ratios.keys()\n    return (sorted_words, common_words)"}
{"task_id": 569, "completion_id": 3, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter()\n    for doc in data:\n        word_counts.update(set(doc[1]))\n    doc_freq_ratios = {word: round(count / len(data), 4) for (word, count) in word_counts.items()}\n    sorted_words = sorted(doc_freq_ratios.items(), key=lambda x: (-x[1], x[0]))\n    cut_off = cut_off if cut_off is not None and cut_off < len(sorted_words) else len(sorted_words)\n    most_common_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, most_common_words)\ndata = [(None, ['hello', 'world', 'hello', 'hello']), (None, ['new', 'world', 'new']), (None, ['hello', 'again'])]"}
{"task_id": 569, "completion_id": 4, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter()\n    total_docs = len(data)\n    for (_, words) in data:\n        word_set = set(words)\n        word_counts.update(word_set)\n    word_ratios = {word: round(count / total_docs, 4) for (word, count) in word_counts.items()}\n    sorted_word_ratios = sorted(word_ratios.items(), key=lambda x: (-x[1], x[0]))\n    cut_off_words = set((word for (word, _) in sorted_word_ratios[:cut_off]))\n    return (sorted_word_ratios, cut_off_words)\ndata = [('doc1', ['apple', 'banana', 'cherry', 'apple']), ('doc2', ['banana', 'cherry', 'date', 'elderberry']), ('doc3', ['apple', 'fig', 'grape', 'banana']), ('doc4', ['banana', 'cherry', 'grape', 'honeydew', 'kiwi', 'apple'])]"}
{"task_id": 569, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not cut_off:\n        cut_off = float('inf')\n    elif cut_off < 0:\n        return ([], set())\n    words = [word for (_, document) in data for word in document]\n    word_count = Counter(words)\n    total_docs = len(data)\n    word_ratio = {word: round(count / total_docs, 4) for (word, count) in word_count.items()}\n    sorted_words = sorted(word_ratio.items(), key=lambda item: item[1], reverse=True)\n    top_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, top_words)"}
{"task_id": 569, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    num_documents = len(data)\n    word_counts = Counter()\n    for (_, words) in data:\n        word_counts.update(words)\n    word_ratios = {word: round(count / num_documents, 4) for (word, count) in word_counts.items()}\n    sorted_words = sorted(word_ratios.items(), key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        common_words = set(word_ratios.keys())\n    else:\n        common_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, common_words)"}
{"task_id": 569, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_counts = Counter()\n    for doc in data:\n        words_in_doc = set(doc[1])\n        word_counts.update(words_in_doc)\n    df_ratios = {word: round(count / total_docs, 4) for (word, count) in word_counts.items()}\n    sorted_df_ratios = sorted(df_ratios.items(), key=lambda x: x[1], reverse=True)\n    most_common_words_set = set((word for (word, ratio) in sorted_df_ratios[:cut_off]))\n    return (sorted_df_ratios, most_common_words_set)"}
{"task_id": 569, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_counter = Counter()\n    for (_, words) in data:\n        word_counter.update(set(words))\n    ratio_list = [(word, round(count / total_docs, 4)) for (word, count) in word_counter.items()]\n    ratio_list.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        return (ratio_list, set(word_counter.keys()))\n    elif cut_off <= 0:\n        return (ratio_list, set())\n    else:\n        most_common_words = set((word for (word, _) in ratio_list[:cut_off]))\n        return (ratio_list, most_common_words)\ndata = [(1, ['apple', 'banana', 'cherry', 'date']), (2, ['banana', 'cherry', 'date', 'elderberry']), (3, ['apple', 'banana', 'cherry', 'dragonfruit'])]"}
{"task_id": 569, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    frequency = Counter()\n    for (label, words) in data:\n        frequency.update(words)\n    total_docs = len(data)\n    frequency = {word: round(count / total_docs, 4) for (word, count) in frequency.items()}\n    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    cut_off_words = set((word for (word, freq) in sorted_frequency[:cut_off]))\n    return (sorted_frequency, cut_off_words)\ndata = [(1, ['one', 'two', 'three', 'four']), (2, ['one', 'two', 'two', 'three', 'three', 'three', 'four', 'four', 'four', 'four']), (3, ['one', 'one', 'one'])]\ncut_off = 2"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    if w.ndim > 1:\n        w = w.sum(axis=1)\n    else:\n        w = w.tolist()\n    b = np.mean(y - np.dot(X, w))\n    w = [round(elem, 4) for elem in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 571, "completion_id": 1, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = list(np.round(w, 4))\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 2, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_list = np.round(w, 4).tolist()\n    b_unrounded = np.mean(y - np.dot(X, w))\n    b = round(b_unrounded, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 3, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    w = np.dot(X.T, y * alpha)\n    w_list = np.round(w, 4).tolist()\n    b_numerator = np.sum(y - np.dot(X, w))\n    b = np.round(b_numerator / X.shape[0], 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 4, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = np.round(w.tolist(), 4)\n    b_rounded = round(b, 4)\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 5, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, np.transpose(alpha * y.reshape(-1, 1)))\n    w_list = w.flatten().tolist()\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(val, 4) for val in w_list]\n    b = round(b, 4)\n    return (w_list, b)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.1, 0.2, 0.3])"}
{"task_id": 571, "completion_id": 6, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the Sequential \n    Minimal Optimization (SMO) algorithm for a hard/soft margin linear Support \n    Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the \n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the optimized \n           Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight \n        vector and b is the bias term. Both w and b are rounded to four decimal \n        places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    if len(w) == 1:\n        w_list = w.tolist()\n    else:\n        w_list = w.flatten().tolist()\n    n_samples = X.shape[0]\n    b = 1 / n_samples * np.sum(y - np.dot(X, w))\n    w_list = [round(x, 4) for x in w_list]\n    b = round(float(b), 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 7, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_list = w.tolist()\n    if w.shape[0] == 1:\n        w_list = w.flatten().tolist()\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(w_i, 4) for w_i in w_list]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 8, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha[:, None] * y[:, None] * X, axis=0)\n    bias = np.mean(y - np.dot(X, w))\n    (w_list, b) = (w.tolist(), round(b, 4))\n    return ([round(i, 4) for i in w_list], b)"}
{"task_id": 571, "completion_id": 9, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = np.round(w, decimals=4).tolist()\n    b = np.round(b, decimals=4)\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    dist_matrix = np.sqrt(np.sum((data[None, :, :] - data[:, None, :]) ** 2, -1))\n    k_distand_idx = []\n    for i in range(len(data)):\n        sorted_dists = np.sort(dist_matrix[i])\n        k_dist = sorted_dists[k]\n        k_neighbours = np.where(dist_matrix[i] <= k_dist)[0]\n        k_distand_idx.append((k_dist, k_neighbours))\n    lof = np.zeros(len(data))\n    for i in range(len(data)):\n        sum_reach_dist = 0.0\n        for j in k_distand_idx[i][1]:\n            reach_dist = max(k_distand_idx[j][0], dist_matrix[i][j])\n            sum_reach_dist += reach_dist\n        lof[i] = k_distand_idx[i][1].shape[0] / sum_reach_dist / (len(data) / k)\n    return (np.round(lof, 4), np.where(lof >= epsilon)[0])\ndata = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [100, 100]])"}
{"task_id": 572, "completion_id": 1, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute Local Outlier Factor (LOF) of data.\n\n    Parameters:\n        data (list of list): n x d matrix (n samples, d dimensions)\n        k (int): number of nearest neighbors\n        epsilon (float): threshold for outlier detection\n\n    Returns:\n        tuple: (list_of_scores, list_of_outlier_indices)\n    \"\"\"\n    n = len(data)\n    dim = len(data[0])\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.linalg.norm(np.array(data[i]) - np.array(data[j]))\n            dist_matrix[i, j] = dist_matrix[j, i] = dist\n    kdist = []\n    knearest = []\n    for i in range(n):\n        dist_i = sorted(enumerate(dist_matrix[i]), key=lambda x: x[1])\n        kdist.append(dist_i[k - 1][1])\n        knearest.append([x[0] for x in dist_i[1:k]])\n    lrd = np.zeros(n)\n    for i in range(n):\n        reach_dist = [max(kdist[i], dist_matrix[i, j]) for j in knearest[i]]\n        lrd[i] = k / sum(reach_dist)\n    lof = np.zeros(n)\n    for i in range(n):\n        lof[i] = sum((lrd[j] / k for j in knearest[i])) / (lrd[i] / k)\n    list_of_scores = np.round(lof, 4).tolist()\n    list_of_outlier_indices = [i for i in range(n) if lof[i] > epsilon]\n    return (list_of_scores, list_of_outlier_indices)"}
{"task_id": 572, "completion_id": 2, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    dist_mat = distance_matrix(data, data)\n    lof_list = []\n    outlier_idx = []\n    for i in range(n):\n        k_dist_idx = np.argpartition(dist_mat[i], k + 1)[:k + 1]\n        reach_dist = []\n        lrd = []\n        for idx in range(len(k_dist_idx)):\n            r_dist = max(dist_mat[i, k_dist_idx[idx]], dist_mat[k_dist_idx, k_dist_idx])\n            reach_dist.append(r_dist)\n            lrd.append(k / sum(reach_dist))\n        lof = sum((lrd[idx] / lrd[i] for idx in range(len(k_dist_idx)))) / (k * lrd[i])\n        lof_list.append(lof)\n        if lof > epsilon:\n            outlier_idx.append(i)\n    lof_list = [np.round(lof, 4) for lof in lof_list]\n    return (lof_list, outlier_idx)"}
{"task_id": 572, "completion_id": 3, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distance_matrix = np.sqrt(np.sum((data[np.newaxis, :, :] - data[:, np.newaxis, :]) ** 2, axis=-1))\n    knn_indices = np.argsort(distance_matrix, axis=1)[:, 1:k + 1]\n    knn_distances = np.sort(distance_matrix, axis=1)[:, 1:k + 1]\n    k_distances = np.max(knn_distances, axis=1)\n    reachability_distances = np.maximum(distance_matrix, knn_distances[..., np.newaxis].repeat(n, axis=2))\n    local_reachability_densities = k / np.sum(reachability_distances, axis=1)\n    lof = np.sum(local_reachability_densities[knn_indices], axis=1) / (n * k_distances) / local_reachability_densities\n    lof = np.round(lof, 4)\n    outlier_indices = np.where(lof > epsilon)[0].tolist()\n    return (lof.tolist(), outlier_indices)"}
{"task_id": 572, "completion_id": 4, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.array([[np.linalg.norm(data[i] - data[j]) for j in range(n)] for i in range(n)])\n    knn_distances = np.sort(distances)[:, 1:k + 1]\n    knn_indices = np.argsort(distances)[:, 1:k + 1]\n    reach_distances = np.maximum(knn_distances, distances[:, :, np.newaxis])\n    lrd = k / np.sum(reach_distances, axis=2)\n    lof = np.sum(lrd[knn_indices] / k, axis=1) / lrd.diagonal()\n    lof_scores = list(np.round(lof, 4))\n    outlier_indices = [i for i in range(n) if lof[i] > epsilon]\n    return (lof_scores, outlier_indices)"}
{"task_id": 572, "completion_id": 5, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Your task is to implement this function!\"\"\"\n    n = len(data)\n    pair_dist = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            pair_dist[i, j] = np.linalg.norm(data[i] - data[j])\n            pair_dist[j, i] = pair_dist[i, j]\n    knn_dist = np.zeros(n)\n    knn_ind = np.zeros((n, k), dtype=int)\n    for i in range(n):\n        ind_sorted = np.argsort(pair_dist[i])\n        knn_dist[i] = np.max(pair_dist[i, ind_sorted[1:k + 1]])\n        knn_ind[i] = ind_sorted[1:k + 1]\n    reach_dist = np.maximum(np.tile(np.expand_dims(knn_dist, axis=1), (1, n)), pair_dist)\n    lrd = np.zeros(n)\n    for i in range(n):\n        lrd[i] = k / np.sum(reach_dist[i, knn_ind[i]])\n    lof = np.zeros(n)\n    for i in range(n):\n        lof[i] = np.sum(lrd[knn_ind[i]] / (k * lrd[i])) / k\n    outlier_indices = np.where(lof > epsilon)[0]\n    return (np.round(lof, 4), sorted(outlier_indices.tolist()))"}
{"task_id": 572, "completion_id": 6, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\nfrom collections import defaultdict\ndef local_outlier_factor(data, k, epsilon=1.5):\n    distances = cdist(data, data)\n    k_distance = defaultdict(list)\n    reach_dist = defaultdict(list)\n    lrd = list()\n    lof = list()\n    for i in range(len(data)):\n        distances[i, i] = np.inf\n        k_neighbour = np.argpartition(distances[i], k)[:k]\n        k_distance[i] = np.max(distances[i, k_neighbour])\n        for j in k_neighbour:\n            reach_dist[i].append(max(k_distance[j], distances[i, j]))\n    for i in range(len(data)):\n        lrd.append(k / sum(reach_dist[i]))\n    for i in range(len(data)):\n        lof.append(sum([lrd[j] / (k * lrd[i]) for j in range(len(data)) if distances[i, j] <= k_distance[i]]) / (k * lrd[i]))\n    scores = np.round(lof, 4)\n    outliers = [i for (i, x) in enumerate(scores) if x > epsilon]\n    return (scores.tolist(), outliers)"}
{"task_id": 572, "completion_id": 7, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    dist_matrix = np.sqrt(np.sum((data[None, :] - data[:, None]) ** 2, -1))\n    k_distances = []\n    k_neighbours = []\n    reach_distances = []\n    lrds = []\n    for i in range(n):\n        dist_i = np.sort(dist_matrix[i])\n        k_distance = dist_i[k - 1]\n        k_distances.append(k_distance)\n        k_neighbour = np.where(dist_matrix[i] <= k_distance)[0]\n        k_neighbours.append(k_neighbour)\n        reach_dist_i = np.maximum(dist_i[k - 1], dist_matrix[i])\n        reach_distances.append(reach_dist_i)\n        lrd = k / np.sum(reach_distances[i][k_neighbour])\n        lrds.append(lrd)\n    lofs = []\n    for i in range(n):\n        lof = np.sum(lrds[k_neighbours[i]]) / (n * lrds[i])\n        lofs.append(np.round(lof, 4))\n    outliers_indices = [i for (i, lof) in enumerate(lofs) if lof > epsilon]\n    return (lofs, outliers_indices)\ndata = np.array([[1, 2], [3, 4], [2, 3], [3, 2], [10, 10], [11, 11]])"}
{"task_id": 572, "completion_id": 8, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    data: ndarray of shape (n_samples, n_features)\n    k: integer number of neighbors to consider, greater than 0 and less than n_samples\n    epsilon: float threshold for what to consider as an outlier, higher than 1.0\n    \"\"\"\n    n_samples = data.shape[0]\n    dist_matrix = np.sqrt(((data[:, np.newaxis, :] - data) ** 2).sum(-1))\n    kn_distances = np.sort(dist_matrix)[:, 1:k + 1]\n    kn_indices = np.argsort(dist_matrix)[:, 1:k + 1]\n    reach_dist = np.maximum(dist_matrix, kn_distances)\n    lrd = 1 / (np.sum(reach_dist, axis=1) / k)\n    lof = np.sum(lrd[kn_indices] / lrd[:, np.newaxis], axis=1) / k\n    return (np.round(lof, 4), list(np.where(lof > epsilon)[0]))"}
{"task_id": 572, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef local_outlier_factor(data, k, epsilon=1.5):\n\n    def get_k_distance(distances, k):\n        return sorted(distances)[k]\n\n    def get_reachability_distance(distances, k, k_distance):\n        return max(k_distance, distances[k])\n\n    def get_local_reachability_density(distances, k_distance, reachability_distances):\n        return k / sum(reachability_distances)\n\n    def get_local_outlier_factor(lrd, k_lrd):\n        denom = k / (np.sum(k_lrd) - k)\n        if denom == 0:\n            return 1\n        return denom / lrd\n    pairwise_distances = distance.cdist(data, data, 'euclidean')\n    outlier_factors = []\n    outlier_indices = []\n    for i in range(len(data)):\n        distances = list(pairwise_distances[i])\n        distances.remove(0)\n        k_distance = get_k_distance(distances, k)\n        reachability_distances = [get_reachability_distance(distances, k, k_distance) for distances in pairwise_distances]\n        lrd = [get_local_reachability_density(distances, k_distance, reachability_distances[j]) for j in range(len(data))]\n        lof = get_local_outlier_factor(lrd[i], lrd)\n        outlier_factors.append(lof)\n        if lof > epsilon:\n            outlier_indices.append(i)\n    return (np.around(outlier_factors, decimals=4), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(np.round(np.random.uniform(base + 1, base + 9, (n_train, 2)), 4))\n        X_val.append(np.round(np.random.uniform(base + 1, base + 9, (n_val, 2)), 4))\n        y_train.append(np.full(n_train, c))\n        y_val.append(np.full(n_val, c))\n    return (np.vstack(X_train), np.vstack(X_val), np.hstack(y_train), np.hstack(y_val))"}
{"task_id": 574, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, y_train, X_val, y_val) = ([], [], [], [])\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        x_train = np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 2))\n        y_train.extend([c] * n_train)\n        x_val = np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 2))\n        y_val.extend([c] * n_val)\n        X_train.extend(np.round(x_train, 4).tolist())\n        X_val.extend(np.round(x_val, 4).tolist())\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))"}
{"task_id": 574, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, y_train) = ([], [])\n    (X_val, y_val) = ([], [])\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        for i in range(n_train):\n            x_train = random.uniform(base + 1, base + 9)\n            y_train = random.uniform(base + 1, base + 9)\n            x_train = round(x_train, 4)\n            y_train = round(y_train, 4)\n            X_train.append([x_train, y_train])\n            y_train.append(c)\n        for i in range(n_val):\n            x_val = random.uniform(base + 1, base + 9)\n            y_val = random.uniform(base + 1, base + 9)\n            x_val = round(x_val, 4)\n            y_val = round(y_val, 4)\n            X_val.append([x_val, y_val])\n            y_val.append(c)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_val = np.array(X_val)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * np.floor(c / 2) + 5\n        X_train_c = np.round(random.uniform(base + 1, base + 9, size=(n_train, 2)), 4)\n        y_train_c = np.full((n_train,), c)\n        X_train.append(X_train_c)\n        y_train.append(y_train_c)\n        X_val_c = np.round(random.uniform(base + 1, base + 9, size=(n_val, 2)), 4)\n        y_val_c = np.full((n_val,), c)\n        X_val.append(X_val_c)\n        y_val.append(y_val_c)\n    X_train = np.vstack(X_train)\n    y_train = np.hstack(y_train)\n    X_val = np.vstack(X_val)\n    y_val = np.hstack(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 4, "solution": "import numpy as np\nimport random\nfrom math import floor\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    y_val = np.zeros(m * n_val)\n    for i in range(m):\n        base = 10 * floor(i / 2) + 5\n        X_train[i * n_train:(i + 1) * n_train, :] = np.random.uniform(base + 1, base + 9, (n_train, 2)).round(4)\n        y_train[i * n_train:(i + 1) * n_train] = i\n        X_val[i * n_val:(i + 1) * n_val, :] = np.random.uniform(base + 1, base + 9, (n_val, 2)).round(4)\n        y_val[i * n_val:(i + 1) * n_val] = i\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    y_val = np.zeros(m * n_val)\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        x_train = np.round(np.random.uniform(base + 1, base + 9, (n_train, 2)), 4)\n        X_train[c * n_train:(c + 1) * n_train] = x_train\n        y_train[c * n_train:(c + 1) * n_train] = c\n        x_val = np.round(np.random.uniform(base + 1, base + 9, (n_val, 2)), 4)\n        X_val[c * n_val:(c + 1) * n_val] = x_val\n        y_val[c * n_val:(c + 1) * n_val] = c\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    y_val = np.zeros(m * n_val)\n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        X_train[c * n_train:(c + 1) * n_train] = np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 2))\n        y_train[c * n_train:(c + 1) * n_train] = np.full(n_train, c)\n        X_val[c * n_val:(c + 1) * n_val] = np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 2))\n        y_val[c * n_val:(c + 1) * n_val] = np.full(n_val, c)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, y_train.astype(int), y_val.astype(int))"}
{"task_id": 574, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, y_train, X_val, y_val) = ([], [], [], [])\n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        X_train.append(np.round(np.random.uniform(base + 1, base + 9, (n_train, 2)), 4))\n        y_train.append(np.full((n_train,), c))\n        X_val.append(np.round(np.random.uniform(base + 1, base + 9, (n_val, 2)), 4))\n        y_val.append(np.full((n_val,), c))\n    return (np.concatenate(X_train), np.concatenate(X_val), np.concatenate(y_train), np.concatenate(y_val))"}
{"task_id": 574, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, y_train, X_val, y_val) = ([], [], [], [])\n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        for _ in range(n_train):\n            x = 10 ** (-4) * round(np.random.uniform(base + 1, base + 9) * 10 ** 4)\n            y = 10 ** (-4) * round(np.random.uniform(base + 1, base + 9) * 10 ** 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = 10 ** (-4) * round(np.random.uniform(base + 1, base + 9) * 10 ** 4)\n            y = 10 ** (-4) * round(np.random.uniform(base + 1, base + 9) * 10 ** 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))"}
{"task_id": 574, "completion_id": 9, "solution": "import numpy as np\nimport random\nfrom math import floor\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * floor(c / 2) + 5\n        X_train_c = np.random.uniform(base + 1, base + 9, (n_train, 2))\n        y_train_c = np.full((n_train,), c)\n        X_train.append(X_train_c)\n        y_train.append(y_train_c)\n        X_val_c = np.random.uniform(base + 1, base + 9, (n_val, 2))\n        y_val_c = np.full((n_val,), c)\n        X_val.append(X_val_c)\n        y_val.append(y_val_c)\n    X_train = np.concatenate(X_train)\n    y_train = np.concatenate(y_train)\n    X_val = np.concatenate(X_val)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = [X[i] for i in range(k)]\n    labels = [0] * len(X)\n    for _ in range(max_iters):\n        new_labels = np.argmin(np.sqrt(np.sum((X - centres[:, np.newaxis]) ** 2, axis=-1)), axis=0)\n        if np.all(labels == new_labels):\n            break\n        else:\n            labels = new_labels\n        for i in range(k):\n            points_in_cluster_i = X[labels == i]\n            if len(points_in_cluster_i) > 0:\n                centres[i] = np.mean(points_in_cluster_i, axis=0)\n    centres = [list(np.around(centre, 4)) for centre in centres]\n    return (list(labels), centres)"}
{"task_id": 579, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    centres = X[:k].tolist()\n    labels = []\n    for _ in range(max_iters):\n        new_labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centres]) for x in X])\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        centres = [np.mean(X[labels == i], axis=0).tolist() for i in range(k)]\n    centres = [[round(y, 4) for y in c] for c in centres]\n    return (labels.tolist(), centres)"}
{"task_id": 579, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].tolist()\n    dist_matrix = np.empty((X.shape[0], k))\n    labels = np.zeros(X.shape[0], dtype=int).tolist()\n    for _ in range(max_iters):\n        for i in range(k):\n            dist_matrix[:, i] = np.linalg.norm(X - centres[i], axis=1)\n        new_labels = np.argmin(dist_matrix, axis=1)\n        if labels == new_labels.tolist():\n            break\n        labels = new_labels.tolist()\n        for i in range(k):\n            cluster_points = X[np.array(labels) == i]\n            if cluster_points.size == 0:\n                continue\n            centres[i] = np.mean(cluster_points, axis=0).tolist()\n    centres = [[round(y, 4) for y in x] for x in centres]\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = [x.round(4).tolist() for x in X[:k]]\n    labels = np.zeros(X.shape[0], dtype=int).tolist()\n    for _ in range(max_iters):\n        new_labels = []\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centres]\n            new_labels.append(np.argmin(distances))\n        if new_labels == labels:\n            break\n        labels = new_labels\n        for i in range(k):\n            if np.sum(np.array(labels) == i) == 0:\n                continue\n            centres[i] = np.mean(X[np.array(labels) == i], axis=0).round(4).tolist()\n    return (labels[:len(X)], centres)"}
{"task_id": 579, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    (m, d) = X.shape\n    centres = X[:k, :].copy()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        for i in range(m):\n            distances = np.linalg.norm(centres - X[i], axis=1)\n            labels[i] = np.argmin(distances)\n        for j in range(k):\n            if np.any(labels == j):\n                centres[j] = np.mean(X[labels == j], axis=0)\n        if np.all(old_labels == labels):\n            break\n    centres = [list(np.round(centre, 4)) for centre in centres]\n    return (labels.tolist(), centres)"}
{"task_id": 579, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [np.round(centroid, 4).tolist() for centroid in centroids.tolist()]\n    return (labels.tolist(), final_centroids)"}
{"task_id": 579, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    (m, d) = X.shape\n    centroids = X[:k].astype(np.float64)\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        prev_labels = labels.copy()\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        labels = np.argmin(distances, axis=0)\n        if np.all(labels == prev_labels):\n            break\n        for i in range(k):\n            centroids[i] = X[labels == i].mean(axis=0)\n    centroids = [list(np.round(c, 4)) for c in centroids]\n    return (labels.tolist(), centroids)"}
{"task_id": 579, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].tolist()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        sums = np.zeros((k, d))\n        counts = np.zeros(k, dtype=int)\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            label = np.argmin(distances)\n            new_labels[i] = label\n            sums[label] += X[i]\n            counts[label] += 1\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        centres = (sums / counts.reshape(-1, 1)).tolist()\n    return (labels.tolist(), [[round(coord, 4) for coord in centre] for centre in centres])"}
{"task_id": 579, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    centers = X[:k]\n    labels = np.argmin(np.sqrt(((X - centers[:, np.newaxis]) ** 2).sum(axis=-1)), axis=0)\n    for _ in range(max_iters):\n        new_centers = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centers == new_centers):\n            break\n        centers = new_centers\n        labels = np.argmin(np.sqrt(((X - centers[:, np.newaxis]) ** 2).sum(axis=-1)), axis=0)\n    return (labels.tolist(), np.round(centers, 4).tolist())"}
{"task_id": 579, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k, :].tolist()\n    labels = [0] * m\n    for _ in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = [np.linalg.norm(X[i] - np.array(centre)) for centre in centres]\n            new_labels[i] = np.argmin(distances)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels.tolist()\n        for j in range(k):\n            if j in labels:\n                centres[j] = np.around(np.mean(X[np.array(labels) == j], axis=0).tolist(), 4)\n            else:\n                centres[j] = np.around(centres[j], 4)\n    return (labels, centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        db = -2 * np.sum(residuals) / m\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * n, 0.0)\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        bias_gradient = -2 * np.sum(residuals) / m\n        bias -= learning_rate * bias_gradient\n        weights_gradient = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        weights -= learning_rate * weights_gradient\n    return ([round(val, 4) for val in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\"\"\"\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (weights.tolist(), round(bias, 4))\n    m = X.shape[0]\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residual = y - y_pred\n        weights_grad = -2 * np.dot(X.T, residual) / m + np.sign(weights) * l1_penalty + 2 * l2_penalty * weights\n        bias_grad = -2 * np.sum(residual) / m\n        weights -= learning_rate * weights_grad\n        bias -= learning_rate * bias_grad\n    weights = [round(w, 4) for w in weights.tolist()]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 581, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (w.tolist(), round(b, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residual = y - y_pred\n        dl_dw = (-2 * np.dot(X.T, residual) + l1_penalty * np.sign(w) + 2 * l2_penalty * w) / m\n        dl_db = -2 * np.sum(residual) / m\n        w -= learning_rate * dl_dw\n        b -= learning_rate * dl_db\n    return ([round(weight, 4) for weight in w], round(b, 4))\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 3, 5])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.1\nl2_penalty = 0.2"}
{"task_id": 581, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        weights = [round(weight, 4) for weight in weights.tolist()]\n        return (weights, round(bias, 4))\n    m = len(y)\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        gradients_w = 2 * (np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        gradients_b = 2 * np.sum(residuals) / m\n        weights = weights - learning_rate * gradients_w\n        bias = bias - learning_rate * gradients_b\n    weights = [round(weight, 4) for weight in weights.tolist()]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 581, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if iterations == 0 or learning_rate == 0:\n        return (list(np.round(w, 4)), round(b, 4))\n    for _ in range(iterations):\n        y_hat = X.dot(w) + b\n        r = y - y_hat\n        dw = (-2 * X.T.dot(r) + np.sign(w) * l1_penalty + 2 * l2_penalty * w) / m\n        db = -2 * np.sum(r) / m\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    return (list(np.round(w, 4)), round(b, 4))"}
{"task_id": 581, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple:\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        dL_dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / X.shape[0]\n        dL_db = -2 * np.sum(residuals) / X.shape[0]\n        weights -= learning_rate * dL_dw\n        bias -= learning_rate * dL_db\n    return ([round(i, 4) for i in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    m = X.shape[0]\n    n = X.shape[1]\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        gradients = 2 * np.dot(X.T, residuals) - l1_penalty * np.sign(weights) - 2 * l2_penalty * weights\n        weights = weights - learning_rate / m * gradients\n        bias_gradient = -2 * np.sum(residuals)\n        bias = bias - learning_rate / m * bias_gradient\n    return (list(np.round(weights, 4)), np.round(bias, 4))\nX = np.array([[1, 2], [3, 4]])\ny = np.array([5, 6])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.5\nl2_penalty = 0.01"}
{"task_id": 581, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        dL_dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / X.shape[0]\n        dL_db = -2 * np.sum(residuals) / X.shape[0]\n        weights -= learning_rate * dL_dw\n        bias -= learning_rate * dL_db\n    return (list(np.round(weights, 4)), np.round(bias, 4))"}
{"task_id": 581, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    m = X.shape[0]\n    for _ in range(iterations):\n        predictions = X.dot(weights) + bias\n        residuals = y - predictions\n        dLdw = -2 / m * X.T.dot(residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        dLdb = -2 / m * np.sum(residuals)\n        weights = weights - learning_rate * dLdw\n        bias = bias - learning_rate * dLdb\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.append(1, x)\n    for weights_layer in weights[:-1]:\n        result = np.dot(x, np.transpose(weights_layer))\n        result = np.maximum(result, 0)\n        x = np.append(1, result)\n    result = np.dot(x, np.transpose(weights[-1]))\n    return np.round(result, 4)"}
{"task_id": 591, "completion_id": 1, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    a = np.array([1] + x)\n    for layer_weights in weights[:-1]:\n        a = np.maximum(0, np.dot(layer_weights, a))\n    output = np.dot(weights[-1], a)\n    output = np.round(output, 4).tolist()\n    return output[0] if len(output) == 1 else output"}
{"task_id": 591, "completion_id": 2, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.array([max(0, np.dot(neuron_weights[1:], x) + neuron_weights[0]) for neuron_weights in layer_weights])\n    output = np.array([np.dot(weights[-1][i], np.append(x, 1)) for i in range(len(weights[-1]))])\n    return [round(x, 4) for x in output] if len(output) > 1 else round(output[0], 4)"}
{"task_id": 591, "completion_id": 3, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input_vector = np.array(x)\n    bias = np.array([1])\n    x = np.concatenate((bias, input_vector))\n    for weight_matrix in weights:\n        output = np.dot(x, weight_matrix)\n        if weights.index(weight_matrix) != len(weights) - 1:\n            output = np.maximum(0, output)\n        x = output\n    output = np.round(output, 4)\n    return output if output.size > 1 else output.item()"}
{"task_id": 591, "completion_id": 4, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    x = np.array([1] + x)\n    for layer in weights[:-1]:\n        x = np.maximum(0, np.dot(x, layer))\n    output = np.dot(x, weights[-1]).tolist()\n    return round(output[0], 4) if len(output) == 1 else [round(x, 4) for x in output]\nweights = [[[0.1, -0.2, 0.3], [-0.4, 0.5, -0.6]], [[0.7, -0.8, 0.9], [-1.0, 1.1, -1.2]], [[1.3, -1.4, 1.5], [-1.6, 1.7, -1.8]]]\nx = [0.6, -0.7]"}
{"task_id": 591, "completion_id": 5, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(x):\n        return np.maximum(0, x)\n    x = np.array(x, dtype=float)\n    output = x\n    num_layers = len(weights)\n    for (i, weight_matrix) in enumerate(weights):\n        output = np.array([relu(np.dot(np.insert(output, 0, 1), weights)) for weights in weight_matrix])\n        if i < num_layers - 1:\n            output = relu(output)\n    output = [round(o, 4) for o in output]\n    if len(output) == 1:\n        return output[0]\n    else:\n        return output"}
{"task_id": 591, "completion_id": 6, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.array([neuron[1:] for neuron in layer_weights]) @ x + np.array([neuron[0] for neuron in layer_weights])\n        x = np.maximum(x, 0)\n    output = np.array([neuron[1:] for neuron in weights[-1]]) @ x + np.array([neuron[0] for neuron in weights[-1]])\n    return output.round(4) if len(output) > 1 else float(output)"}
{"task_id": 591, "completion_id": 7, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array([1] + x)\n    for layer_weights in weights:\n        output = [np.dot(w, x) for w in layer_weights]\n        output = np.array([o if layer_weights != weights[-1] else o for o in output])\n        output[output < 0] = 0\n        x = output\n    return [round(o, 4) for o in x] if len(x) > 1 else round(float(x), 4)"}
{"task_id": 591, "completion_id": 8, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    for i in range(len(weights)):\n        x = np.concatenate((np.array([1]), x))\n        z = np.dot(weights[i], x)\n        if i < len(weights) - 1:\n            x = np.maximum(0, z)\n        else:\n            x = z\n    return np.round(x.tolist(), 4)"}
{"task_id": 591, "completion_id": 9, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        layer_weights = np.array(layer_weights)\n        x = np.dot(layer_weights, np.insert(x, 0, 1))\n        x = np.maximum(x, 0)\n    x = np.dot(np.array(weights[-1]), np.insert(x, 0, 1))\n    return np.round(x, 4).tolist()"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[np.random.choice(np.arange(len(X)), size=k, replace=False)]\n    for _ in range(max_iters):\n        clusters = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([np.mean(X[np.where(clusters == i)], axis=0) for i in range(k)])\n        if np.all(np.linalg.norm(centroids - new_centroids, axis=-1) < 0.0001):\n            break\n        new_centroids[np.isnan(new_centroids)] = centroids[np.isnan(new_centroids)]\n        centroids = new_centroids\n    sorted_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted(centroids)]\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 1, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> 'list[list[float]]':\n\n    def calculate_distance(a: 'list[float]', b: 'list[float]') -> float:\n        \"\"\"Calculate Euclidean distance between two vectors.\n\n        Args:\n            a: First vector.\n            b: Second vector.\n\n        Returns:\n            The Euclidean distance between vector a and b.\n        \"\"\"\n        return np.sqrt(np.sum((np.array(a) - np.array(b)) ** 2))\n\n    def calculate_centroid(cluster: 'list[list[float]]') -> 'list[float]':\n        \"\"\"Calculate the centroid from the current cluster.\n\n        Args:\n            cluster: A list of lists representing the current cluster.\n\n        Returns:\n            A list representing the centroid of the cluster.\n        \"\"\"\n        return np.round(np.mean(cluster, axis=0), decimals=4).tolist()\n\n    def sort_and_round(centroid: 'list[float]') -> 'list[float]':\n        \"\"\"Sort and round the centroid coordinates.\n\n        Args:\n            centroid: The list representing the centroid to sort and round.\n\n        Returns:\n            A list representing the sorted and rounded centroid.\n        \"\"\"\n        return sorted(centroid)\n\n    def assign_to_nearest_centroid(X: 'np.ndarray', centroids: 'list[list[float]]') -> 'list[int]':\n        \"\"\"Assign each sample in X to the nearest centroid.\n\n        Args:\n            X: The 2-D NumPy array.\n            centroids: The current centroids.\n\n        Returns:\n            A list where each element is the index of the nearest centroid for the corresponding sample in X.\n        \"\"\"\n        assignments = []\n        for x in X:\n            distances = [calculate_distance(x.tolist(), centroid) for centroid in centroids]\n            assignments.append(np.argmin(distances))\n        return assignments\n\n    def update_centroids(X: 'np.ndarray', assignments: 'list[int]', k: int, old_centroids: 'list[list[float]]') -> 'list[list[float]]':\n        \"\"\"Update the centroids based on the assignments.\n\n        Args:\n            X: The 2-D NumPy array.\n            assignments: The list containing the assignments for each sample in X.\n            k: The number of clusters.\n            old_centroids: The old centroids\n\n        Returns:\n            The updated centroids as a sorted list.\n        \"\"\"\n        new_centroids = []\n        for i in range(k):\n            cluster = [x.tolist() for (j, x) in enumerate(X) if assignments[j] == i]\n            if not cluster:\n                new_centroids.append(old_centroids[i])\n            else:\n                new_centroids.append(calculate_centroid(cluster))\n        return [sort_and_round(centroid) for centroid in new_centroids]\n    centroids = [x.tolist() for x in X[:k]]\n    for _ in range(max_iters):\n        assignments = assign_to_nearest_centroid(X, centroids)\n        new_centroids = update_centroids(X, assignments, k, centroids)\n        if np.allclose(np.array(new_centroids) - np.array(centroids), 0, atol=0.0001):\n            break\n        centroids = new_centroids\n    return sorted(centroids)"}
{"task_id": 595, "completion_id": 2, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        clusters = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[clusters == c].mean(axis=0) if X[clusters == c].any() else centroids[c] for c in range(k)])\n        centroids_change = np.abs(new_centroids - centroids).sum()\n        if centroids_change < 0.0001:\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted([list(map(lambda x: round(x, 4), centroid)) for centroid in centroids])\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 3, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n\n    def compute_distances(centroids):\n        return np.array([np.sum((X - c) ** 2, axis=1) for c in centroids])\n\n    def update_centroids(assignments):\n        new_centroids = []\n        for c in range(k):\n            assigned_samples = X[assignments == c]\n            if len(assigned_samples) > 0:\n                new_centroids.append(np.mean(assigned_samples, axis=0))\n            else:\n                new_centroids.append(centroids[c])\n        return np.array(new_centroids)\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = compute_distances(centroids)\n        assignments = np.argmin(distances, axis=0)\n        new_centroids = update_centroids(assignments)\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    centroids.sort(axis=0)\n    output = np.round(centroids, decimals=4).tolist()\n    return output"}
{"task_id": 595, "completion_id": 4, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k]\n    for _ in range(max_iters):\n        clusters = np.argmin(np.sqrt(np.sum((X - centroids[:, np.newaxis]) ** 2, axis=-1)), axis=0)\n        new_centroids = np.array([np.mean(X[clusters == i], axis=0) for i in range(k)])\n        if np.all(np.abs(new_centroids - centroids) < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = centroids[np.argsort(centroids, axis=0)]\n    centroids = np.round(centroids, 4).tolist()\n    return centroids\nX = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.5], [9, 11]])\nk = 2"}
{"task_id": 595, "completion_id": 5, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        assigned_centroids = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[assigned_centroids == i].mean(axis=0) if X[assigned_centroids == i].any() else centroids[i] for i in range(k)])\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted([list(map(lambda c: round(c, 4), centr)) for centr in centroids], key=lambda x: [round(_, 4) for _ in x])\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 6, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X.copy()[:k]\n    distances = np.zeros((n_samples, k))\n    assignments = np.zeros(n_samples)\n    for _ in range(max_iters):\n        for i in range(k):\n            distances[:, i] = np.sqrt(np.sum((X - centroids[i]) ** 2, axis=1))\n        assignments = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for i in range(k):\n            points = X[assignments == i]\n            if len(points) > 0:\n                new_centroids[i] = np.mean(points, axis=0)\n        move = np.sqrt(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if np.all(move < 0.0001):\n            break\n        centroids = new_centroids\n    centroids.sort(axis=0)\n    return [list(map(lambda x: round(x, 4), c)) for c in centroids]"}
{"task_id": 595, "completion_id": 7, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k].copy()\n    clusters = np.zeros(len(X))\n    for _ in range(max_iters):\n        clusters = np.argmin(np.linalg.norm(X - centroids[:, None], axis=2), axis=0)\n        new_centroids = np.array([X[clusters == k].mean(axis=0) for k in range(centroids.shape[0])])\n        new_centroids[np.isnan(new_centroids)] = centroids[np.isnan(new_centroids)]\n        if np.linalg.norm(centroids - new_centroids) < 0.0001:\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids.round(4).tolist())\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 8, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k, :]\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        assignments = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[assignments == k].mean(axis=0) for k in range(k)])\n        new_centroids = np.where(np.isnan(new_centroids), centroids, new_centroids)\n        if np.all(np.abs(centroids - new_centroids) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = centroids[np.lexsort(centroids.T)]\n    sorted_centroids = [[round(val, 4) for val in centroid] for centroid in sorted_centroids]\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 9, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    np.random.seed(0)\n    idx = np.random.choice(len(X), k, replace=False)\n    centroids = X[idx, :]\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        assigned_centroids = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[assigned_centroids == i].mean(axis=0) if X[assigned_centroids == i].any() else centroids[i] for i in range(k)])\n        if np.linalg.norm(new_centroids - centroids) < 0.0001:\n            break\n        centroids = new_centroids\n    centroids_sorted = sorted(centroids.tolist(), key=lambda x: [round(a, 4) for a in x])\n    return [[round(a, 4) for a in centroid] for centroid in centroids_sorted]"}
