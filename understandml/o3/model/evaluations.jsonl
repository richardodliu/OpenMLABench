{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name '_np' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Closed-form Ridge (L2-regularised) linear-regression solver.\n    \n    Parameters\n    ----------\n    data  : np.ndarray\n        2-D array where the last column is the target y and the remaining\n        columns are the features X.\n    alpha : float, default 0.0\n        Regularisation strength (\u03b1 \u2265 0).\n        \n    Returns\n    -------\n    list[float]\n        Weight vector (including the bias/intercept as the first element)\n        rounded to 4 decimal places.  \n        If (X\u1d40X + \u03b1I) is numerically singular the function returns -1.\n    \"\"\"\n    (X, y) = (data[:, :-1], data[:, -1])\n    n_samples = X.shape[0]\n    X_bias = np.hstack((np.ones((n_samples, 1)), X))\n    A = X_bias.T @ X_bias + alpha * np.eye(X_bias.shape[1])\n    try:\n        det = np.linalg.det(A)\n    except np.linalg.LinAlgError:\n        return -1\n    if np.isclose(det, 0.0, atol=1e-12):\n        return -1\n    w = np.linalg.inv(A) @ X_bias.T @ y\n    return np.round(w, 4).tolist()\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples, shape (n_samples, n_features).\n    y_train : np.ndarray\n        Labels (+1 or -1), length n_samples.\n    eta : float, optional\n        Learning rate, default 1.0.\n    n_iter : int, optional\n        Maximum number of parameter updates, default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        Weight vector (as a list) and bias, both rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X_train, dtype=float)\n    y = np.asarray(y_train, dtype=float).ravel()\n    if not set(np.unique(y)).issubset({-1.0, 1.0}):\n        raise ValueError('y_train must contain only +1 and -1.')\n    (n_samples, n_features) = X.shape\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    updates = 0\n    gram = X @ X.T\n    while updates < n_iter:\n        no_mistake_in_pass = True\n        for i in range(n_samples):\n            activation = np.dot(alpha * y, gram[:, i])\n            margin = y[i] * (activation + b)\n            if margin <= 0.0:\n                alpha[i] += eta\n                b += eta * y[i]\n                updates += 1\n                no_mistake_in_pass = False\n                break\n        if no_mistake_in_pass:\n            break\n    w = np.dot(alpha * y, X)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded)\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: 'link_prime'", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A dictionary with three entries  (\"identity\", \"log\", \"logit\").\n        Each entry itself is a dictionary with three callables\n\n            \u2022 \"link\"      :  g(\u03bc)\n            \u2022 \"inv_link\"  :  g\u207b\u00b9(\u03b7)\n            \u2022 \"derivative\":  g\u2032(\u03bc)\n\n        All functions work element\u2013wise on numpy scalars, 1-D and 2-D\n        numpy arrays.\n    \"\"\"\n\n    def _id_link(mu):\n        return mu\n\n    def _id_inv_link(eta):\n        return eta\n\n    def _id_derivative(mu):\n        return np.ones_like(mu, dtype=float)\n\n    def _log_link(mu):\n        return np.log(mu)\n\n    def _log_inv_link(eta):\n        return np.exp(eta)\n\n    def _log_derivative(mu):\n        return 1.0 / mu\n\n    def _logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def _logit_inv_link(eta):\n        eta = np.asarray(eta)\n        return np.where(eta >= 0, 1.0 / (1.0 + np.exp(-eta)), np.exp(eta) / (1.0 + np.exp(eta)))\n\n    def _logit_derivative(mu):\n        return 1.0 / (mu * (1.0 - mu))\n    return {'identity': {'link': _id_link, 'inv_link': _id_inv_link, 'derivative': _id_derivative}, 'log': {'link': _log_link, 'inv_link': _log_inv_link, 'derivative': _log_derivative}, 'logit': {'link': _logit_link, 'inv_link': _logit_inv_link, 'derivative': _logit_derivative}}\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 3, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Return, for every sample, the depth of the leaf it lands in inside a\n    single random isolation tree grown as described in the task statement.\n    \"\"\"\n    np.random.seed(0)\n    if data.size == 0:\n        return []\n    (n_samples, n_features) = data.shape\n    depths = [-1] * n_samples\n\n    def grow(indices: list[int], depth: int) -> None:\n        \"\"\"Recursively grow the isolation tree while filling `depths`.\"\"\"\n        if len(indices) < 3:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        f = np.random.randint(0, n_features)\n        vals = data[indices, f]\n        (down, up) = (vals.min(), vals.max())\n        if down == up:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        v = np.random.uniform(down, up)\n        left = [idx for idx in indices if data[idx, f] <= v]\n        right = [idx for idx in indices if data[idx, f] > v]\n        if len(left) == 0 or len(right) == 0:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        grow(left, depth + 1)\n        grow(right, depth + 1)\n    grow(list(range(n_samples)), depth=0)\n    return depths\nassert isolation_tree_path_length(np.arange(1).reshape(-1, 1)) == [0], \"test case failed: n=1\"\nassert isolation_tree_path_length(np.arange(2).reshape(-1, 1)) == [0, 0], \"test case failed: n=2\"\nassert isolation_tree_path_length(np.arange(3).reshape(-1, 1)) == [1, 1, 1], \"test case failed: n=3\"\nassert isolation_tree_path_length(np.arange(4).reshape(-1, 1)) == [1, 1, 1, 1], \"test case failed: n=4\"\nassert isolation_tree_path_length(np.arange(5).reshape(-1, 1)) == [2, 2, 2, 1, 1], \"test case failed: n=5\"\nassert isolation_tree_path_length(np.arange(6).reshape(-1, 1)) == [2, 2, 2, 2, 2, 2], \"test case failed: n=6\"\nassert isolation_tree_path_length(np.arange(7).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2], \"test case failed: n=7\"\nassert isolation_tree_path_length(np.arange(8).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2], \"test case failed: n=8\"\nassert isolation_tree_path_length(np.arange(9).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2, 2], \"test case failed: n=9\"\nassert isolation_tree_path_length(np.arange(10).reshape(-1, 1)) == [3, 3, 3, 2, 2, 3, 3, 3, 2, 2], \"test case failed: n=10\""}
{"task_id": 4, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A nested Python list where element [i][j] is the squared Euclidean\n        distance between samples i and j, rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    sq_norms = np.sum(X ** 2, axis=1, keepdims=True)\n    D = sq_norms + sq_norms.T - 2 * X @ X.T\n    D = np.maximum(D, 0.0)\n    return np.round(D, 4).tolist()\nassert l2_distance(np.array([[0, 0], [1, 0]], dtype=float)) == [[0.0, 1.0], [1.0, 0.0]], \"failed on two points, axis-aligned\"\nassert l2_distance(np.array([[1, 2]], dtype=float)) == [[0.0]], \"failed on single sample\"\nassert l2_distance(np.array([[1, 2], [3, 4], [5, 6]], dtype=float)) == [[0.0, 8.0, 32.0], [8.0, 0.0, 8.0], [32.0, 8.0, 0.0]], \"failed on three points 2-D\"\nassert l2_distance(np.array([[-1, -1], [1, 1]], dtype=float)) == [[0.0, 8.0], [8.0, 0.0]], \"failed on negative coordinates\"\nassert l2_distance(np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]], dtype=float)) == [[0.0, 3.0, 12.0], [3.0, 0.0, 3.0], [12.0, 3.0, 0.0]], \"failed on 3-D points\"\nassert l2_distance(np.array([[0.5, 0.5], [1.5, 1.5]], dtype=float)) == [[0.0, 2.0], [2.0, 0.0]], \"failed on float coordinates\"\nassert l2_distance(np.zeros((0, 5), dtype=float)) == [], \"failed on empty input\"\nrnd = np.random.RandomState(0); X_rand = rnd.randn(4, 3); D = l2_distance(X_rand); assert all(abs(D[i][i]) < 1e-8 for i in range(4)), \"diagonal not zero on random data\"\nX_same = np.array([[2, 3], [2, 3], [2, 3]], dtype=float); assert l2_distance(X_same) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed on identical points\""}
{"task_id": 6, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        Each element is a 2-D array-like object of shape (n_samples, n_classes)\n        containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning-rate (eta) used by the booster.\n\n    Returns\n    -------\n    list[int]\n        The predicted class label for every sample.\n    \"\"\"\n    total = np.asarray(predictions[0], dtype=float)\n    for tree_out in predictions[1:]:\n        total += np.asarray(tree_out, dtype=float)\n    raw_scores = -learning_rate * total\n    row_max = np.max(raw_scores, axis=1, keepdims=True)\n    exp_scores = np.exp(raw_scores - row_max)\n    probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    return np.argmax(probs, axis=1).tolist()\nassert xgboost_predict([np.array([[0.2, -0.1], [1.0, -1.0]]), np.array([[-0.4, 0.3], [0.5, -0.2]])], 0.5) == [0, 1], \"test case failed: example case\"\nassert xgboost_predict([np.array([[2, 1], [1, 2], [0, 0]])], 0.1) == [1, 0, 0], \"test case failed: single tree\"\nassert xgboost_predict([np.array([[1, 5, 3]]), np.array([[1, 5, 3]])], 0.5) == [0], \"test case failed: two identical trees\"\nassert xgboost_predict([np.array([[-2, 2]])], 1.0) == [0], \"test case failed: negative vs positive\"\nassert xgboost_predict([np.array([[0, 1, 0]]), np.array([[0, 1, 0]])], 1.0) == [0], \"test case failed: tie situation\"\nassert xgboost_predict([np.array([[ 1, -1], [-1,  1], [0,  0]]), np.array([[ 1, -1], [-1,  1], [1, -1]]), np.array([[ 1, -1], [-1,  1], [2, -2]])], 0.2) == [1, 0, 1], \"test case failed: three trees, three samples\"\nassert xgboost_predict([np.zeros((2, 3)) for _ in range(5)], 0.5) == [0, 0], \"test case failed: all zeros\"\nassert xgboost_predict([np.array([[0.5, 1.5], [2.0, 0.0]])], 1.0) == [0, 1], \"test case failed: 1 tree, 2 samples\"\nassert xgboost_predict([np.array([[1, 2, 3, 4]]), np.array([[4, 3, 2, 1]])], 0.1) == [0], \"test case failed: four classes\"\nassert xgboost_predict([np.array([[1, 0, 0], [0, 1, 0]]), np.array([[0, 1, 0], [0, 0, 1]])], 0.3) == [2, 0], \"test case failed: 3 classes, 2 trees\""}
{"task_id": 7, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable, Iterable, FrozenSet\ndef _sorted_tuple(it: Iterable[Hashable]) -> Tuple[Hashable, ...]:\n    \"\"\"\n    Return the items of *it* as an ascending tuple.\n\n    When item types are not mutually comparable we fall back to comparing their\n    textual representation, which is at least deterministic.\n    \"\"\"\n    try:\n        return tuple(sorted(it))\n    except TypeError:\n        return tuple(sorted(it, key=repr))\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent item-sets together with their absolute support.\n\n    Args\n    ----\n    transactions : list[list[hashable]]\n        Transactional data base \u2013 duplicates inside one transaction are ignored.\n    minsup       : float\n        Minimum support given as a fraction in the (0, 1] interval.\n\n    Returns\n    -------\n    dict[tuple, int]\n        Maps every frequent item-set (tuple with ascending items) to its support.\n        The empty dict is returned when no item-set fulfils the threshold.\n    \"\"\"\n    if not 0 < minsup <= 1:\n        raise ValueError('minsup must be in the interval (0, 1].')\n    transactions = [set(t) for t in transactions]\n    n_transactions = len(transactions)\n    if n_transactions == 0:\n        return {}\n    min_count = max(1, math.ceil(minsup * n_transactions))\n    result: Dict[Tuple[Hashable, ...], int] = {}\n    item_counter = Counter()\n    for t in transactions:\n        item_counter.update(t)\n    L_k: Dict[FrozenSet[Hashable], int] = {frozenset([item]): supp for (item, supp) in item_counter.items() if supp >= min_count}\n    for (fs, supp) in L_k.items():\n        result[_sorted_tuple(fs)] = supp\n    k = 2\n    while L_k:\n        L_prev = list(L_k.keys())\n        candidates: set[FrozenSet[Hashable]] = set()\n        for i in range(len(L_prev)):\n            for j in range(i + 1, len(L_prev)):\n                union = L_prev[i] | L_prev[j]\n                if len(union) != k:\n                    continue\n                if all((union - frozenset([item]) in L_k for item in union)):\n                    candidates.add(union)\n        if not candidates:\n            break\n        cand_counter = Counter()\n        for t in transactions:\n            for cand in candidates:\n                if cand.issubset(t):\n                    cand_counter[cand] += 1\n        L_k = {cand: supp for (cand, supp) in cand_counter.items() if supp >= min_count}\n        for (fs, supp) in L_k.items():\n            result[_sorted_tuple(fs)] = supp\n        k += 1\n    return result\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 8, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        Python list with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n\n    def _sigmoid(z: np.ndarray) -> np.ndarray:\n        z_clipped = np.clip(z, -709, 709)\n        return 1.0 / (1.0 + np.exp(-z_clipped))\n    X_train = np.asarray(X_train, dtype=np.float64)\n    y_train = np.asarray(y_train, dtype=np.float64).flatten()\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features, dtype=np.float64)\n    b = 0.0\n    for _ in range(n_iterations):\n        z = X_train @ w + b\n        p = _sigmoid(z)\n        error = p - y_train\n        grad_w = X_train.T @ error / n_samples\n        grad_b = error.mean()\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n    z_test = X_test @ w + b\n    probs = _sigmoid(z_test)\n    preds = np.round(probs).astype(int)\n    return preds.tolist()\nassert logistic_regression_predict(np.array([[0],[10]]), np.array([0,1]), np.array([[0],[10]])) == [0,1], \"failed: simple two-point case\"\nassert logistic_regression_predict(np.array([[-10],[10]]), np.array([0,1]), np.array([[-5],[5]])) == [0,1], \"failed: symmetric case\"\nassert logistic_regression_predict(np.array([[-3],[-2],[-1],[1],[2],[3]]), np.array([0,0,0,1,1,1]), np.array([[-4],[4]])) == [0,1], \"failed: clustered 1-D case\"\ntrain_X4 = np.array([[1,1],[2,2],[3,3],[-1,-1],[-2,-2],[-3,-3]]); train_y4 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X4, train_y4, np.array([[0.5,0.5],[-2.5,-2.5]])) == [1,0], \"failed: 2-D diagonal case\"\ntrain_X5 = np.array([[1,4],[2,5],[3,6],[-1,-4],[-2,-5],[-3,-6]]); train_y5 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X5, train_y5, np.array([[4,7],[-4,-7]])) == [1,0], \"failed: 2-D magnitudes case\"\ntrain_X6 = np.array([[0,0],[0,1],[0,2],[4,0],[4,1],[4,2]]); train_y6 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X6, train_y6, np.array([[0,1.5],[4,1.5]])) == [0,1], \"failed: vertical split\"\ntrain_X7 = np.array([[-50],[-40],[-30],[30],[40],[50]]); train_y7 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X7, train_y7, np.array([[-25],[25]])) == [0,1], \"failed: wide 1-D separation\"\ntrain_X8 = np.array([[-5],[-4],[-3],[-2],[-1],[1],[2],[3],[4],[5]]); train_y8 = np.array([0,0,0,0,0,1,1,1,1,1]); assert logistic_regression_predict(train_X8, train_y8, np.array([[-6],[6]])) == [0,1], \"failed: dense clusters\"\ntrain_X9 = np.array([[-1,-3],[-2,-5],[-3,-4],[1,3],[2,5],[3,4]]); train_y9 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X9, train_y9, np.array([[-2,-4],[2,4]])) == [0,1], \"failed: mixed 2-D clusters\"\ntrain_X10 = np.array([[2,1],[3,1],[4,1],[-2,-1],[-3,-1],[-4,-1]]); train_y10 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X10, train_y10, np.array([[3,1],[-3,-1]])) == [1,0], \"failed: rotated 2-D split\""}
{"task_id": 10, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (X\u0303_{t-1}).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (X_t).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \u03b5, 0 \u2264 weight \u2264 1.  Scalars or one\u2013dimensional\n        vectors are supported and broadcast against each other.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n\n    def _is_scalar(x):\n        return np.isscalar(x) or (isinstance(x, np.ndarray) and x.ndim == 0)\n    prev_arr = np.asarray(prev, dtype=float)\n    cur_arr = np.asarray(cur, dtype=float)\n    weight_arr = np.asarray(weight, dtype=float)\n    if np.any(weight_arr < 0) or np.any(weight_arr > 1):\n        raise ValueError('weight must lie in the interval [0, 1].')\n    result = weight_arr * prev_arr + (1.0 - weight_arr) * cur_arr\n    result = np.round(result, 4)\n    if _is_scalar(prev) and _is_scalar(cur) and _is_scalar(weight):\n        return float(result)\n    else:\n        return result.tolist()\nassert smooth(10.0, 12.0, 0.8) == 10.4, \"failed on (10,12,0.8)\"\nassert smooth(5, 7, 0.6) == 5.8, \"failed on (5,7,0.6)\"\nassert smooth([1,2,3], [4,5,6], 0.5) == [2.5, 3.5, 4.5], \"failed on vector weight scalar 0.5\"\nassert smooth([1,2,3], [4,5,6], 0.2) == [3.4, 4.4, 5.4], \"failed on scalar weight 0.2\"\nassert smooth([2,4,6], [8,10,12], [0.75,0.25,0.5]) == [3.5, 8.5, 9.0], \"failed on vector weight\"\nassert smooth(0, 1, 1/3) == 0.6667, \"failed on rounding check\"\nassert smooth(3, 9, 0.0) == 9.0, \"failed when weight=0\"\nassert smooth(3, 9, 1.0) == 3.0, \"failed when weight=1\"\nassert smooth([0,0,0], [10,20,30], 0) == [10.0, 20.0, 30.0], \"vector weight=0\"\nassert smooth([100,200], [50,  0], [0.5,0.2]) == [75.0, 40.0], \"mixed vector values\""}
{"task_id": 11, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array (n_samples \u00d7 n_features).\n    k : int\n        Number of desired clusters (1 \u2264 k \u2264 n_samples).\n    epsilon : float, default 1e-3\n        Stop if the largest centre movement is smaller than *epsilon*.\n    max_iter : int, default 2000\n        Hard iteration cap.\n\n    Returns\n    -------\n    (centres, labels)\n        centres : list[list[float]]\n            k cluster centres rounded to 4 decimals.\n        labels : list[int]\n            Cluster index (0 \u2026 k-1) assigned to every sample.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('data must be a 2-D array')\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_samples:\n        raise ValueError('k must satisfy 1 \u2264 k \u2264 number of samples')\n    data = data.astype(float, copy=False)\n    centres = data[:k].copy()\n    for _ in range(max_iter):\n        dists = np.sum((data[:, None, :] - centres[None, :, :]) ** 2, axis=2)\n        labels = np.argmin(dists, axis=1)\n        new_centres = centres.copy()\n        for j in range(k):\n            mask = labels == j\n            if mask.any():\n                new_centres[j] = data[mask].mean(axis=0)\n            else:\n                rnd_idx = np.random.randint(0, n_samples)\n                new_centres[j] = data[rnd_idx]\n        shifts = np.linalg.norm(new_centres - centres, axis=1)\n        if np.max(shifts) < epsilon:\n            centres = new_centres\n            break\n        centres = new_centres\n    centres_rounded = np.round(centres, 4).tolist()\n    return (centres_rounded, labels.tolist())\nassert kmeans(np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]), 2) == ([[5.5, 1.0], [5.5, 4.0]], [0, 1, 0, 0, 1, 0]), \"test case failed: basic two-cluster example\"\nassert kmeans(np.array([[0, 0], [0, 2], [10, 0], [10, 2]]), 2) == ([[5.0, 0.0], [5.0, 2.0]], [0, 1, 0, 1]), \"test case failed: symmetric rectangle\"\nassert kmeans(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[3.0, 4.0]], [0, 0, 0]), \"test case failed: single cluster mean\"\nassert kmeans(np.array([[0, 0], [1, 1], [2, 2]]), 3) == ([[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]], [0, 1, 2]), \"test case failed: k equals number of samples\"\nassert kmeans(np.array([[0], [10]]), 2) == ([[0.0], [10.0]], [0, 1]), \"test case failed: one-dimensional data\"\nassert kmeans(np.zeros((3, 2)), 1) == ([[0.0, 0.0]], [0, 0, 0]), \"test case failed: all identical samples\"\nassert kmeans(np.array([[0, 0], [10, 10], [20, 20]]), 3) == ([[0.0, 0.0], [10.0, 10.0], [20.0, 20.0]], [0, 1, 2]), \"test case failed: three isolated samples\"\nassert kmeans(np.array([[0, 0], [1, 0], [0, 1], [1, 1]]), 1) == ([[0.5, 0.5]], [0, 0, 0, 0]), \"test case failed: square to single centre\"\nassert kmeans(np.array([[2, 2], [2, 2], [2, 2]]), 1) == ([[2.0, 2.0]], [0, 0, 0]), \"test case failed: duplicate points single centre\"\nassert kmeans(np.array([[0, 0], [1, 1], [0, 0], [1, 1]]), 2) == ([[0.0, 0.0], [1.0, 1.0]], [0, 1, 0, 1]), \"test case failed: duplicates two centres\""}
{"task_id": 12, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool=False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True, each spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        Power spectrum (positive frequencies only) for every frame,\n        rounded to four decimal places and converted to a regular Python list.\n    \"\"\"\n    N = frames.shape[1]\n    fft_vals = np.fft.rfft(frames, axis=1)\n    power = np.abs(fft_vals) ** 2\n    if scale:\n        power /= N // 2 + 1\n    return np.round(power, 4).tolist()\nassert power_spectrum(np.array([[1, 2, 1, 0], [0, 1, 0, 1]]), False) == [[16.0, 4.0, 0.0], [4.0, 0.0, 4.0]], \"test case failed: power_spectrum([[1,2,1,0],[0,1,0,1]], False)\"\nassert power_spectrum(np.array([[1, 2, 1, 0], [0, 1, 0, 1]]), True) == [[5.3333, 1.3333, 0.0], [1.3333, 0.0, 1.3333]], \"test case failed: power_spectrum([[1,2,1,0],[0,1,0,1]], True)\"\nassert power_spectrum(np.array([[1, 1, 1, 1]]), False) == [[16.0, 0.0, 0.0]], \"test case failed: power_spectrum([[1,1,1,1]], False)\"\nassert power_spectrum(np.array([[1, 1, 1, 1]]), True) == [[5.3333, 0.0, 0.0]], \"test case failed: power_spectrum([[1,1,1,1]], True)\"\nassert power_spectrum(np.zeros((1, 4)), False) == [[0.0, 0.0, 0.0]], \"test case failed: power_spectrum(zeros, False)\"\nassert power_spectrum(np.array([[1, -1]]), False) == [[0.0, 4.0]], \"test case failed: power_spectrum([[1,-1]], False)\"\nassert power_spectrum(np.array([[1, -1]]), True) == [[0.0, 2.0]], \"test case failed: power_spectrum([[1,-1]], True)\"\nassert power_spectrum(np.array([[2, 0, 2, 0]]), False) == [[16.0, 0.0, 16.0]], \"test case failed: power_spectrum([[2,0,2,0]], False)\"\nassert power_spectrum(np.array([[0, 1, 1, 0]]), False) == [[4.0, 2.0, 0.0]], \"test case failed: power_spectrum([[0,1,1,0]], False)\""}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'D1' is not defined", "solution": "import numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item\u2013based k-NN collaborative\u2013filtering recommender.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Rating matrix of shape (n_user, n_item); 0 = *not rated*.\n    user_ind : int\n        Index of the active user.\n    k : int\n        Maximal number of items to recommend.\n    criterion : {'cosine', 'pearson'}, default 'cosine'\n        Similarity measure to use.\n\n    Returns\n    -------\n    list[int]\n        Indices of at most *k* unseen items ordered by decreasing\n        predicted attractiveness.\n    \"\"\"\n    if criterion not in ('cosine', 'pearson'):\n        raise ValueError(\"criterion must be either 'cosine' or 'pearson'\")\n    (n_user, n_item) = data.shape\n    if not 0 <= user_ind < n_user:\n        raise IndexError('user_ind out of bounds')\n    S = np.zeros((n_item, n_item), dtype=np.float64)\n    for i in range(n_item - 1):\n        col_i = data[:, i]\n        r_i_mask = col_i > 0\n        for j in range(i + 1, n_item):\n            col_j = data[:, j]\n            common = r_i_mask & (col_j > 0)\n            if not np.any(common):\n                continue\n            v1 = col_i[common].astype(np.float64)\n            v2 = col_j[common].astype(np.float64)\n            if criterion == 'cosine':\n                if np.std(v1, ddof=1) > 0.001:\n                    v1c = v1 - v1.mean()\n                else:\n                    v1c = v1\n                if np.std(v2, ddof=1) > 0.001:\n                    v2c = v2 - v2.mean()\n                else:\n                    v2c = v2\n                (n1, n2) = (np.linalg.norm(v1c), np.linalg.norm(v2c))\n                sim = 0.0 if n1 == 0.0 or n2 == 0.0 else float(v1c @ v2c / (n1 * n2))\n            elif len(v1) < 2 or np.std(v1, ddof=1) < 0.001 or np.std(v2, ddof=1) < 0.001:\n                sim = 0.0\n            else:\n                sim = float(np.corrcoef(v1, v2, ddof=1)[0, 1])\n                if np.isnan(sim):\n                    sim = 0.0\n            S[i, j] = S[j, i] = sim\n    user_row = data[user_ind]\n    rated_mask = user_row > 0\n    rated_idx = np.where(rated_mask)[0]\n    if len(rated_idx) == n_item:\n        return []\n    scores = {}\n    for t in range(n_item):\n        if rated_mask[t]:\n            continue\n        sims_to_rated = S[t, rated_idx]\n        ratings = user_row[rated_idx]\n        denom = np.sum(np.abs(sims_to_rated))\n        if denom == 0.0:\n            score = 0.0\n        else:\n            score = float(ratings @ sims_to_rated / denom)\n        scores[t] = score\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    return [idx for (idx, _) in sorted_items[:k]]\nassert knn_recommend(D1, 0, 1) == [1], \"failed: knn_recommend(D1,0,1)\"\nassert knn_recommend(D1, 2, 1) == [0], \"failed: knn_recommend(D1,2,1)\"\nassert knn_recommend(D1, 0, 1, 'pearson') == [1], \"failed: pearson D1 user0\"\nassert knn_recommend(D1, 1, 1) == [1], \"failed: knn_recommend(D1,1,1)\"\nassert knn_recommend(D1, 3, 1) == [0], \"failed: knn_recommend(D1,3,1)\"\nassert knn_recommend(D1, 0, 2) == [1], \"failed: k larger than unrated items\"\nassert knn_recommend(D2, 0, 1) == [0], \"failed: knn_recommend(D2,0,1)\"\nassert knn_recommend(D2, 1, 1) == [1], \"failed: knn_recommend(D2,1,1)\"\nassert knn_recommend(D2, 2, 1) == [2], \"failed: knn_recommend(D2,2,1)\"\nassert knn_recommend(D3, 0, 1) == [0], \"failed: knn_recommend(D3,0,1)\""}
{"task_id": 14, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss, its gradient and Hessian diagonal.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) with shape (n,).\n        y_pred (np.ndarray): Logits (pre-sigmoid scores) with shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian_diagonal) with every value\n               rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y).ravel()\n    y_pred = np.asarray(y_pred).ravel()\n    p = 1.0 / (1.0 + np.exp(-y_pred))\n    eps = 1e-15\n    p_clipped = np.clip(p, eps, 1.0 - eps)\n    losses = -(y * np.log(p_clipped) + (1.0 - y) * np.log(1.0 - p_clipped))\n    mean_loss = round(float(np.mean(losses)), 4)\n    grad = p - y\n    grad_rounded = [round(g, 4) for g in grad]\n    hess = p * (1.0 - p)\n    hess_rounded = [round(h, 4) for h in hess]\n    return (mean_loss, grad_rounded, hess_rounded)\nassert logistic_loss_metrics(np.array([1, 0, 1]), np.array([0.0, 0.0, 0.0])) == (0.6931, [-0.5, 0.5, -0.5], [0.25, 0.25, 0.25]), \"failed on zeros logits\"\nassert logistic_loss_metrics(np.array([0, 1]), np.array([2.0, -2.0])) == (2.1269, [0.8808, -0.8808], [0.105, 0.105]), \"failed on mixed logits 2 & -2\"\nassert logistic_loss_metrics(np.array([1]), np.array([1.0])) == (0.3133, [-0.2689], [0.1966]), \"failed on single positive logit\"\nassert logistic_loss_metrics(np.array([0]), np.array([-1.0])) == (0.3133, [0.2689], [0.1966]), \"failed on single negative logit\"\nassert logistic_loss_metrics(np.array([1, 0]), np.array([3.0, 3.0])) == (1.5486, [-0.0474, 0.9526], [0.0452, 0.0452]), \"failed on identical large positive logits\"\nassert logistic_loss_metrics(np.zeros(4), np.zeros(4)) == (0.6931, [0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25]), \"failed on all-zero labels\"\nassert logistic_loss_metrics(np.ones(4), np.zeros(4)) == (0.6931, [-0.5, -0.5, -0.5, -0.5], [0.25, 0.25, 0.25, 0.25]), \"failed on all-one labels\"\nassert logistic_loss_metrics(np.array([0, 1, 0, 1]), np.array([-2.0, -2.0, 2.0, 2.0])) == (1.1269, [0.1192, -0.8808, 0.8808, -0.1192], [0.105, 0.105, 0.105, 0.105]), \"failed on alternating logits\"\nassert logistic_loss_metrics(np.array([0]), np.array([5.0])) == (5.0067, [0.9933], [0.0066]), \"failed on large positive logit with label 0\"\nassert logistic_loss_metrics(np.array([1]), np.array([-5.0])) == (5.0067, [-0.9933], [0.0066]), \"failed on large negative logit with label 1\""}
{"task_id": 16, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be an integer \u2265 1')\n    seq_len = len(sequence)\n    if N > seq_len:\n        return []\n    return [tuple(sequence[i:i + N]) for i in range(seq_len - N + 1)]\nassert ngrams([1, 2, 3, 4, 5], 2) == [(1, 2), (2, 3), (3, 4), (4, 5)], \"Test 1 failed: ngrams([1, 2, 3, 4, 5], 2)\"\nassert ngrams([1], 1) == [(1,)], \"Test 2 failed: ngrams([1], 1)\"\nassert ngrams([1], 2) == [], \"Test 3 failed: ngrams([1], 2)\"\nassert ngrams(\"hello\", 2) == [('h', 'e'), ('e', 'l'), ('l', 'l'), ('l', 'o')], \"Test 4 failed: ngrams('hello', 2)\"\nassert ngrams((1, 2, 3, 4), 3) == [(1, 2, 3), (2, 3, 4)], \"Test 5 failed: ngrams((1,2,3,4), 3)\"\nassert ngrams(range(6), 4) == [(0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5)], \"Test 6 failed: ngrams(range(6), 4)\"\nassert ngrams(['I', 'love', 'AI'], 2) == [('I', 'love'), ('love', 'AI')], \"Test 7 failed: ngrams(['I','love','AI'],2)\"\nassert ngrams([True, False, True, False], 3) == [(True, False, True), (False, True, False)], \"Test 8 failed: ngrams([True,False,True,False],3)\"\nassert ngrams([1, 1, 1, 1], 2) == [(1, 1), (1, 1), (1, 1)], \"Test 9 failed: ngrams([1,1,1,1],2)\"\nassert ngrams([7, 8, 9], 3) == [(7, 8, 9)], \"Test 10 failed: ngrams([7,8,9],3)\""}
{"task_id": 17, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    n = len(items)\n    if n == 0:\n        return {}\n    nodes = [{'item': items[i], 'count': counts[i], 'children': []} for i in range(n)]\n    root_idx = None\n    for (i, parent_idx) in enumerate(parents):\n        if parent_idx == -1:\n            root_idx = i\n        else:\n            nodes[parent_idx]['children'].append(nodes[i])\n    return nodes[root_idx]\nassert build_tree([], [], []) == {}, \"test case failed: empty input lists\"\nassert build_tree(['A'], [5], [-1]) == {'item':'A','count':5,'children':[]}, \"test case failed: single node\"\nassert build_tree(['A','B','C','D'], [5,3,2,1], [-1,0,0,0]) == {'item':'A','count':5,'children':[{'item':'B','count':3,'children':[]},{'item':'C','count':2,'children':[]},{'item':'D','count':1,'children':[]}]}, \"test case failed: star tree\"\nassert build_tree(['A','B','C','D'], [7,6,5,4], [-1,0,1,2]) == {'item':'A','count':7,'children':[{'item':'B','count':6,'children':[{'item':'C','count':5,'children':[{'item':'D','count':4,'children':[]}]}]}]}, \"test case failed: linear chain\"\nassert build_tree(['R','A','B','C','D','E','F'], [9,4,4,2,2,1,1], [-1,0,0,1,1,2,2]) == {'item':'R','count':9,'children':[{'item':'A','count':4,'children':[{'item':'C','count':2,'children':[]},{'item':'D','count':2,'children':[]}]},{'item':'B','count':4,'children':[{'item':'E','count':1,'children':[]},{'item':'F','count':1,'children':[]}]}]}, \"test case failed: balanced tree\"\nassert build_tree(['root','n1','n2','n3','n4','n5','n6','n7','n8'], [9,8,7,6,5,4,3,2,1], [-1,0,0,1,1,2,2,3,6]) == {'item':'root','count':9,'children':[{'item':'n1','count':8,'children':[{'item':'n3','count':6,'children':[{'item':'n7','count':2,'children':[]}]},{'item':'n4','count':5,'children':[]}]},{'item':'n2','count':7,'children':[{'item':'n5','count':4,'children':[]},{'item':'n6','count':3,'children':[{'item':'n8','count':1,'children':[]}]}]}]}, \"test case failed: complex tree\"\nassert build_tree(['P','Q','R','S'], [1,1,1,1], [-1,0,1,2])['children'][0]['children'][0]['children'][0]['item'] == 'S', \"test case failed: verify deep child label\"\nassert len(build_tree(['A','B','C'], [1,1,1], [-1,0,0])['children']) == 2, \"test case failed: number of children\"\nassert build_tree(['A','B','C','D','E'], [6,4,3,2,1], [-1,0,1,1,2]) == {'item':'A','count':6,'children':[{'item':'B','count':4,'children':[{'item':'C','count':3,'children':[{'item':'E','count':1,'children':[]} ]},{'item':'D','count':2,'children':[]} ]} ]}, \"test case failed: provided example\""}
{"task_id": 18, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs\n        Supported keyword argument\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is Python float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.pop('dtype', float)\n    if kwargs:\n        unexpected = ', '.join(kwargs.keys())\n        raise TypeError(f'zero() got unexpected keyword argument(s): {unexpected}')\n    return np.zeros(shape, dtype=dtype)\nassert zero(5).shape == (5,), \"test case failed: zero(5) shape incorrect\"\nassert np.array_equal(zero(5), np.zeros(5)), \"test case failed: zero(5) values incorrect\"\nassert zero((2, 3)).shape == (2, 3), \"test case failed: zero((2, 3)) shape incorrect\"\nassert np.array_equal(zero((2, 3)), np.zeros((2, 3))), \"test case failed: zero((2, 3)) values incorrect\"\nassert zero((2, 3), dtype=int).dtype == np.int_, \"test case failed: dtype=int not respected\"\nassert zero((1, 1, 1)).shape == (1, 1, 1), \"test case failed: triple-dim shape\"\nassert zero((4,)).ndim == 1, \"test case failed: ndim for 1-tuple shape\"\nassert zero(()).shape == (), \"test case failed: zero-dimensional array shape\"\nassert zero(0).size == 0, \"test case failed: zero length vector size\"\nassert zero((2, 0, 3)).size == 0, \"test case failed: array with a zero axis size\""}
{"task_id": 19, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split maximises the reduction in the regularised loss used by\n    gradient-boosting decision trees.  If no legal split gives a positive\n    gain the function returns ``None``.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_samples < 4:\n        return None\n\n    def leaf_loss(G: float, H: float) -> float:\n        return -0.5 * (G * G) / (H + lam) + gamma\n    G_total = g.sum()\n    H_total = h.sum()\n    parent_loss = leaf_loss(G_total, H_total)\n    best_gain = 0.0\n    best_feature = None\n    best_threshold = None\n    for feat_idx in range(n_features):\n        order = np.argsort(X[:, feat_idx], kind='mergesort')\n        x_sorted = X[order, feat_idx]\n        g_sorted = g[order]\n        h_sorted = h[order]\n        g_cumsum = np.cumsum(g_sorted)\n        h_cumsum = np.cumsum(h_sorted)\n        for i in range(1, n_samples - 2):\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            G_left = g_cumsum[i]\n            H_left = h_cumsum[i]\n            G_right = G_total - G_left\n            H_right = H_total - H_left\n            if n_samples - i - 1 < 2:\n                break\n            loss_left = leaf_loss(G_left, H_left)\n            loss_right = leaf_loss(G_right, H_right)\n            gain = parent_loss - loss_left - loss_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feat_idx\n                best_threshold = x_sorted[i]\n    if best_feature is None:\n        return None\n    return (best_feature, float(best_threshold))\nassert best_split(np.array([[2],[4],[6],[8]]), np.array([ 1, 1,-1,-1]), np.array([1,1,1,1]), 0.1, 1.0)==(0,4), \"test-case 1 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([5,4,3,2,1]), np.ones(5), 0.2, 1.0)==(0,3), \"test-case 2 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([-5,-4,-3,-2,-1]), np.ones(5), 0.2, 0.5)==(0,3), \"test-case 3 failed\"\nassert best_split(np.array([[1],[2],[3],[4]]), np.array([1,-1,1,-1]), np.ones(4), 0.8, 1.0) is None, \"test-case 4 failed\"\nassert best_split(np.array([[0,0],[1,1],[2,2],[3,3],[4,4]]), np.array([1,1,1,-1,-1]), np.ones(5), 0.1, 1.0)==(0,2), \"test-case 5 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,0,0,0]), np.ones(6), 0.1, 1.0) is None, \"test-case 7 failed\"\nassert best_split(np.array([[10],[20],[30],[40]]), np.array([10,-5,-5,0]), np.ones(4), 0.05, 1.0)==(0,20), \"test-case 8 failed\"\nassert best_split(np.array([[2],[2],[2],[2]]), np.array([1,1,1,1]), np.ones(4), 0.1, 1.0) is None, \"test-case 10 failed\""}
{"task_id": 20, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x_arr = np.asarray(x, dtype=float)\n    sigmoid_arr = 1.0 / (1.0 + np.exp(-x_arr))\n    gradient_arr = sigmoid_arr * (1.0 - sigmoid_arr)\n    sigmoid_arr = np.round(sigmoid_arr, 4)\n    gradient_arr = np.round(gradient_arr, 4)\n    if is_scalar:\n        return (float(sigmoid_arr), float(gradient_arr))\n    else:\n        return (sigmoid_arr.tolist(), gradient_arr.tolist())\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 21, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble of decision stumps and returns test predictions.\"\"\"\n\n    def stump_predict(x: np.ndarray, d: int, theta: float) -> np.ndarray:\n        \"\"\"Return \u00b11 predictions of the stump (d , \u03b8) on vector x.\"\"\"\n        if d == 0:\n            return np.where(x <= theta, 1, -1)\n        else:\n            return np.where(x > theta, 1, -1)\n    x_train = np.asarray(x_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    x_test = np.asarray(x_test, dtype=float)\n    n = len(x_train)\n    if n == 0:\n        return [1] * len(x_test)\n    order = np.argsort(x_train)\n    x_sorted = x_train[order]\n    thresholds = [x_sorted[0] - 1.0]\n    for i in range(n - 1):\n        if x_sorted[i] != x_sorted[i + 1]:\n            thresholds.append(0.5 * (x_sorted[i] + x_sorted[i + 1]))\n    thresholds.append(x_sorted[-1] + 1.0)\n    stumps = [(d, th) for th in thresholds for d in (0, 1)]\n    w = np.full(n, 1.0 / n)\n    (alphas, chosen_stumps) = ([], [])\n    while True:\n        best_err = float('inf')\n        best_pred = None\n        best_stump = None\n        for (d, th) in stumps:\n            pred = stump_predict(x_train, d, th)\n            err = w[pred != y_train].sum()\n            if err < best_err - 1e-12:\n                (best_err, best_stump, best_pred) = (err, (d, th), pred)\n        if best_err >= 0.5 - 1e-12:\n            break\n        err = max(best_err, 1e-12)\n        alpha = 0.5 * math.log((1.0 - err) / err)\n        chosen_stumps.append(best_stump)\n        alphas.append(alpha)\n        w *= np.exp(-alpha * y_train * best_pred)\n        w = w / w.sum()\n        F = np.zeros(n)\n        for (a, (d, th)) in zip(alphas, chosen_stumps):\n            F += a * stump_predict(x_train, d, th)\n        train_pred = np.where(F >= 0.0, 1, -1)\n        train_error = (train_pred != y_train).mean()\n        if train_error <= epsilon:\n            break\n    if not alphas:\n        return [1] * len(x_test)\n    F_test = np.zeros(len(x_test))\n    for (a, (d, th)) in zip(alphas, chosen_stumps):\n        F_test += a * stump_predict(x_test, d, th)\n    y_pred = np.where(F_test >= 0.0, 1, -1)\n    return y_pred.tolist()\nassert adaboost_1d_predict([1,2,3,4],[1,1,-1,-1],[1.5,3.5])==[1,-1],\"failed on basic separable set\"\nassert adaboost_1d_predict([1,2,3,4,5],[1,1,1,-1,-1],[1,5])==[1,-1],\"failed on unbalanced set\"\nassert adaboost_1d_predict([0,1,2,3],[1,1,-1,-1],[0.5,2.5])==[1,-1],\"failed on shift threshold\"\nassert adaboost_1d_predict([-3,-2,-1,0],[-1,-1,1,1],[-2.5,-0.5])==[-1,1],\"failed on negative values\"\nassert adaboost_1d_predict([10,20,30,40],[1,1,-1,-1],[15,35])==[1,-1],\"failed on large values\"\nassert adaboost_1d_predict([1,3,5,7],[1,1,-1,-1],[2,6])==[1,-1],\"failed on odd spacing\"\nassert adaboost_1d_predict([2,4,6,8],[1,1,-1,-1],[3,7],epsilon=0)==[1,-1],\"failed with explicit epsilon\"\nassert adaboost_1d_predict([0.1,0.2,0.8,0.9],[1,1,-1,-1],[0.15,0.85])==[1,-1],\"failed on float inputs\"\nassert adaboost_1d_predict([5,6,7,8,9,10],[1,1,1,-1,-1,-1],[5.5,9.5])==[1,-1],\"failed on bigger set\"\nassert adaboost_1d_predict([-5,-4,-3,-2,-1,0],[1,1,1,-1,-1,-1],[-4.5,-0.5])==[1,-1],\"failed on negative range\""}
{"task_id": 22, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as\n        offset + u\n    where\n        offset ~ DiscreteUniform{-300, \u2026, 299}\n        u      ~ ContinuousUniform[0, 1)\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, every column (axis-0 slice) is shifted to mean 0\n            and scaled to unit variance.  A tiny constant \u03b5 is added to the\n            denominator to avoid division by zero.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    rng = np.random.default_rng()\n    offset = rng.integers(low=-300, high=300, size=shape)\n    u = rng.random(size=shape)\n    data = offset + u\n    if not standardize:\n        return data\n    eps = np.finfo(float).eps\n    if data.ndim == 0:\n        return np.array(0.0, dtype=float)\n    if data.ndim == 1:\n        mean = data.mean()\n        std = data.std()\n        return (data - mean) / (std + eps)\n    mean = data.mean(axis=0, keepdims=True)\n    std = data.std(axis=0, keepdims=True)\n    return (data - mean) / (std + eps)\nassert random_tensor((5, 3), True).shape == (5, 3), \"test case failed: random_tensor((5, 3), True) shape check\"\nassert (random_tensor((7, 1), False) >= -300).all(), \"test case failed: value range check\"\nx = random_tensor((4, 2), True); import numpy as _np; assert _np.allclose(x.mean(axis=0), 0, atol=1e-10), \"test case failed: column means not zero\"\nx = random_tensor((4, 2), True); import numpy as _np; assert _np.allclose(x.std(axis=0), 1, atol=1e-10), \"test case failed: column stds not one\"\nx = random_tensor((3, 4), False); import numpy as _np; assert not _np.allclose(x.std(axis=0), 1, atol=1e-2), \"test case failed: standardization wrongly applied\"\nassert random_tensor((1, 5), False).shape == (1, 5), \"test case failed: random_tensor((1,5), False) shape check\"\nassert random_tensor((6, 6), True).shape == (6, 6), \"test case failed: random_tensor((6,6), True) shape check\"\nx = random_tensor((10, 2), True); import numpy as _np; assert _np.isfinite(x).all(), \"test case failed: finite values\"\nassert random_tensor((2, 3), False).dtype == float, \"test case failed: dtype check\"\nx = random_tensor((8, 4), True); import numpy as _np; assert _np.allclose(x.mean(axis=0), 0, atol=1e-10) and _np.allclose(x.std(axis=0), 1, atol=1e-10), \"test case failed: standardization (8,4)\""}
{"task_id": 24, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\"\"\"\n    w = np.asarray(w, dtype=float)\n    if len(velocity) == 0:\n        v = np.zeros_like(w, dtype=float)\n    else:\n        v = np.asarray(velocity, dtype=float)\n    w_tilde = w - momentum * v\n    g = np.asarray(grad_func(w_tilde), dtype=float)\n    g = np.clip(g, -1.0, 1.0)\n    v_new = momentum * v + learning_rate * g\n    w_new = w - v_new\n    w_new = np.round(w_new, 4).tolist()\n    v_new = np.round(v_new, 4).tolist()\n    return (w_new, v_new)\nassert nesterov_update([1.5, -0.8], [0, 0], lambda x: 2 * x, 0.1, 0.9) == ([1.4, -0.7], [0.1, -0.1]), \"failed on basic 2-D update\"\nassert nesterov_update([1.4, -0.7], [0.1, -0.1], lambda x: 2 * x, 0.1, 0.9) == ([1.21, -0.51], [0.19, -0.19]), \"failed on consecutive 2-D step\"\nassert nesterov_update([2.0], [], lambda x: 4 * x, 0.05, 0.8) == ([1.95], [0.05]), \"failed on 1-D first step\"\nassert nesterov_update([-0.2, 0.2], [0, 0], lambda x: np.array([10, -10]), 0.2, 0.0) == ([-0.4, 0.4], [0.2, -0.2]), \"failed on gradient clipping\"\nassert nesterov_update([0.0, 0.0], [0, 0], lambda x: np.array([-0.5, 0.3]), 0.1, 0.5) == ([0.05, -0.03], [-0.05, 0.03]), \"failed on mixed-sign gradient\"\nassert nesterov_update([0.5, -0.5], [0.2, -0.1], lambda x: x, 0.1, 0.9) == ([0.288, -0.369], [0.212, -0.131]), \"failed on non-zero initial velocity\"\nassert nesterov_update([1.0, 1.0], [0, 0], lambda x: np.zeros_like(x), 0.1, 0.85) == ([1.0, 1.0], [0.0, 0.0]), \"failed on zero gradient\"\nassert nesterov_update([0.1], [0], lambda x: np.array([100]), 0.01, 0.0) == ([0.09], [0.01]), \"failed on extreme gradient clipping\"\nassert nesterov_update([2.0, -1.0, 0.5], [0, 0, 0], lambda x: 0.5 * x, 0.2, 0.4) == ([1.8, -0.9, 0.45], [0.2, -0.1, 0.05]), \"failed on 3-D first step\"\nassert nesterov_update([1.8, -0.9, 0.45], [0.2, -0.1, 0.05], lambda x: 0.5 * x, 0.2, 0.4) == ([1.548, -0.774, 0.387], [0.252, -0.126, 0.063]), \"failed on 3-D consecutive step\""}
{"task_id": 25, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\"\"\"\n    y_train = y_train.ravel()\n    alpha = alpha.ravel()\n    coef = alpha * y_train\n    train_sq = np.sum(X_train ** 2, axis=1)\n    test_sq = np.sum(X_test ** 2, axis=1)\n    dists_sq = test_sq[:, None] + train_sq[None, :] - 2.0 * X_test @ X_train.T\n    K = np.exp(-gamma * dists_sq)\n    g = K @ coef + b\n    pred = np.sign(g)\n    pred[pred == 0] = 1\n    return pred.astype(int).tolist()\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 26, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu(x: list | int | float) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient mask.\n\n    Parameters\n    ----------\n    x : list or nested list (or scalar)\n        Input data of arbitrary (rectangular) shape.\n\n    Returns\n    -------\n    tuple[list, list]\n        `activation, gradient`, both as (nested) Python lists that keep the\n        exact same shape as the input.\n    \"\"\"\n    arr = np.asarray(x, dtype=float)\n    activation = np.maximum(0, arr)\n    gradient = np.where(arr >= 0, 1, 0)\n    return (activation.tolist(), gradient.tolist())\nassert relu([-2,-1,0,1,3]) == ([0,0,0,1,3],[0,0,1,1,1]), \"failed on 1-D mixed values\"\nassert relu([0,0,0]) == ([0,0,0],[1,1,1]), \"failed on all zeros\"\nassert relu([[1,-2],[3,-4]]) == ([[1,0],[3,0]],[[1,0],[1,0]]), \"failed on simple 2-D array\"\nassert relu([[-1.5,2.7,-3.2]]) == ([[0,2.7,0]],[[0,1,0]]), \"failed on float values\"\nassert relu([5]) == ([5],[1]), \"failed on single positive scalar\"\nassert relu([-5]) == ([0],[0]), \"failed on single negative scalar\"\nassert relu([[0.0,-0.0]]) == ([[0.0,0.0]],[[1,1]]), \"failed on signed zeros\"\nassert relu([[1000,-1000],[0,0.0001]]) == ([[1000,0],[0,0.0001]],[[1,0],[1,1]]), \"failed on large magnitude values\"\nassert relu([[-2,-1],[-0.5,0.5],[1,2]]) == ([[0,0],[0,0.5],[1,2]],[[0,0],[0,1],[1,1]]), \"failed on rectangular 2-D list\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        (X_hat, mse) where\n            \u2022 X_hat \u2013 rank-k reconstruction of X (each entry rounded to 4 decimals)\n            \u2022 mse    \u2013 mean-squared reconstruction error (rounded to 4 decimals)\n        If k is not in [1, min(m, n)] the function returns -1.\n    \"\"\"\n    if not isinstance(k, int):\n        return -1\n    try:\n        X_arr = np.asarray(X, dtype=float)\n    except Exception:\n        return -1\n    if X_arr.ndim != 2:\n        return -1\n    (m, n) = X_arr.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, VT) = np.linalg.svd(X_arr, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = S[:k]\n    VT_k = VT[:k, :]\n    X_hat = U_k * S_k @ VT_k\n    mse = float(np.round(np.mean((X_arr - X_hat) ** 2), 4))\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    return (X_hat_rounded, mse)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 29, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"1-D gradient boosting with decision stumps and prediction for *x_query*.\n    \"\"\"\n    x = np.asarray(x_train, dtype=float).ravel()\n    y = np.asarray(y_train, dtype=float).ravel()\n    if x.size == 0:\n        return float('nan')\n    if np.all(x == x[0]) or x.size == 1:\n        return round(float(y.mean()), 4)\n    order = np.argsort(x)\n    x_sorted = x[order]\n    y_sorted = y[order]\n    distinct_mask = x_sorted[1:] != x_sorted[:-1]\n    mids = (x_sorted[:-1] + x_sorted[1:]) / 2.0\n    candidate_s = mids[distinct_mask]\n    if candidate_s.size == 0:\n        return round(float(y.mean()), 4)\n    residuals = y_sorted.copy()\n    stumps = []\n    rss = np.sum(residuals ** 2)\n    max_iter = 1000\n    iteration = 0\n    while rss > epsilon and iteration < max_iter:\n        best_rss = np.inf\n        best_params = None\n        for s in candidate_s:\n            mask_left = x_sorted <= s\n            mask_right = ~mask_left\n            if not mask_left.any() or not mask_right.any():\n                continue\n            c1 = residuals[mask_left].mean()\n            c2 = residuals[mask_right].mean()\n            new_residuals = residuals - np.where(mask_left, c1, c2)\n            rss_candidate = np.sum(new_residuals ** 2)\n            if rss_candidate < best_rss:\n                best_rss = rss_candidate\n                best_params = (s, c1, c2, mask_left)\n        if best_params is None or best_rss >= rss - 1e-12:\n            break\n        (s_best, c1_best, c2_best, mask_left_best) = best_params\n        stumps.append((s_best, c1_best, c2_best))\n        residuals = residuals - np.where(mask_left_best, c1_best, c2_best)\n        rss = best_rss\n        iteration += 1\n    prediction = 0.0\n    for (s, c1, c2) in stumps:\n        prediction += c1 if x_query <= s else c2\n    return round(float(prediction), 4)\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],3)==3.5, \"failed: piece-wise constant right side\"\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],2)==1.5, \"failed: piece-wise constant left side\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],5)==4.0, \"failed: split at 3.0, right prediction\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],2)==2.0, \"failed: split at 3.0, left prediction\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],6)==20.0, \"failed: right side prediction 20\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],2)==10.0, \"failed: left side prediction 10\"\nassert predict_boosting_tree([1,2,3,4],[0,0,0,0],3)==0.0, \"failed: all zeros\"\nassert predict_boosting_tree([1,1.5,2],[2,2,2],1.2)==2.0, \"failed: identical targets\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],4)==2.0, \"failed: two-segment data, right\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],2)==1.0, \"failed: two-segment data, left\""}
{"task_id": 32, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    Accepts ints, floats, or numeric strings.  Any string is converted\n    with `float()`; already-numeric values are left unchanged.\n    Returns a tuple (a, b) in the original order.\n    \"\"\"\n\n    def _convert(x):\n        if isinstance(x, str):\n            return float(x)\n        if isinstance(x, (int, float)):\n            return x\n        return float(x)\n    return (_convert(a), _convert(b))\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\n\n    If the result is mathematically an integer, return it as an `int`;\n    otherwise return a `float`.\n    \"\"\"\n    result = a + b\n    if isinstance(result, float) and result.is_integer():\n        return int(result)\n    return result\nassert sum_numbers(3, 4) == 7, \"failed on (3, 4)\"\nassert sum_numbers(\"3\", 4) == 7.0, \"failed on ('3', 4)\"\nassert sum_numbers(\"3.5\", \"4.5\") == 8.0, \"failed on ('3.5', '4.5')\"\nassert sum_numbers(-2, \"5\") == 3.0, \"failed on (-2, '5')\"\nassert sum_numbers(\"0\", \"0\") == 0, \"failed on ('0', '0')\"\nassert sum_numbers(\"10.75\", 1.25) == 12.0, \"failed on ('10.75', 1.25)\"\nassert sum_numbers(0.1, 0.2) == 0.30000000000000004, \"failed on (0.1, 0.2)\"\nassert sum_numbers(\"-2.5\", \"-2.5\") == -5.0, \"failed on ('-2.5', '-2.5')\"\nassert sum_numbers(\" 6 \", \"7\") == 13.0, \"failed on (' 6 ', '7')\"\nassert sum_numbers(100, \"200\") == 300, \"failed on (100, '200')\""}
{"task_id": 34, "completion_id": 0, "passed": false, "result": "failed: test failed: shape (2,3), sparsity 0.3, seed 42", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Create a tensor whose entries are 0.0 or 1.0.\n    \n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        Desired shape of the returned NumPy array.\n    sparsity : float, default=0.5\n        Probability that any individual entry is 1.0.  Must satisfy\n        0.0 \u2264 sparsity \u2264 1.0.  Values outside this range cause the\n        function to return -1.\n    seed : int | None, default=None\n        If provided, ``np.random.seed(seed)`` is called first so the\n        output is reproducible.\n    \n    Returns\n    -------\n    numpy.ndarray | int\n        \u2022 A floating-dtype NumPy array containing only 0.0 and 1.0, if\n          `sparsity` is legal.  \n        \u2022 The integer -1 when `sparsity` is outside the closed interval\n          [0, 1].\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    binary_tensor = (random_values < sparsity).astype(float)\n    return binary_tensor\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 35, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Any\nfrom typing import Any\nfrom typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Classify *sample* by walking the decision tree rooted at *root*.\n\n    If at any point the traversal cannot continue (missing feature or\n    missing branch), the function returns -1.\n    \"\"\"\n    if root is None:\n        return -1\n    current = root\n    while current.fea != -1:\n        idx = current.fea\n        if idx < 0 or idx >= len(sample):\n            return -1\n        value = sample[idx]\n        if value not in current.child:\n            return -1\n        current = current.child[value]\n    return current.res\nassert classify(node(res=\"Yes\"), []) == \"Yes\", \"test case failed: classify(node(res='Yes'), [])\"\nroot1 = node(fea=0, child={\"sunny\": node(res=\"No\"), \"rainy\": node(res=\"Yes\")})\nassert classify(root1, [\"sunny\"]) == \"No\", \"test case failed: classify(root1, ['sunny'])\"\nassert classify(root1, [\"rainy\"]) == \"Yes\", \"test case failed: classify(root1, ['rainy'])\"\nassert classify(root1, [\"cloudy\"]) == -1, \"test case failed: classify(root1, ['cloudy'])\"\nassert classify(root1, []) == -1, \"test case failed: classify(root1, [])\"\nsub = node(fea=1, child={\"Y\": node(res=\"Yes\"), \"Z\": node(res=\"No\")})\nroot2 = node(fea=0, child={\"A\": node(res=\"X\"), \"B\": sub})\nassert classify(root2, [\"B\", \"Y\"]) == \"Yes\", \"test case failed: classify(root2, ['B','Y'])\"\nassert classify(root2, [\"B\", \"Z\"]) == \"No\", \"test case failed: classify(root2, ['B','Z'])\"\nassert classify(root2, [\"B\", \"Unknown\"]) == -1, \"test case failed: classify(root2, ['B','Unknown'])\"\nassert classify(root2, [\"A\"]) == \"X\", \"test case failed: classify(root2, ['A'])\"\nlevel3 = node(fea=2, child={\"D\": node(res=\"OK\")})\nroot3 = node(fea=0, child={\"R\": node(fea=1, child={\"C\": level3})})\nassert classify(root3, [\"R\", \"C\", \"D\"]) == \"OK\", \"test case failed: classify(root3, ['R','C','D'])\""}
{"task_id": 36, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Optional\nfrom typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node: rule  = (feature_index, threshold)\n    Leaf node:     rule  = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"\n    Run a binary decision tree on a batch of samples.\n\n    Parameters\n    ----------\n    root : Optional[Node]\n        Root node of the decision tree (may be None for an empty tree).\n    X : List[List[float]]\n        Batch of input samples; one sample = list/sequence of feature values.\n\n    Returns\n    -------\n    List[float]\n        Predictions for each sample, in the same order as `X`.\n    \"\"\"\n    if root is None:\n        return []\n    preds: List[float] = []\n    for sample in X:\n        node = root\n        while True:\n            is_leaf = node.left is None and node.right is None\n            if is_leaf:\n                preds.append(node.threshold)\n                break\n            feat_idx = node.feature\n            if sample[feat_idx] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n    return preds\nassert predict_tree(None, [[1, 2], [3, 4]]) == [], \"failed on empty tree\"\nsingle_leaf = Node(None, None, (None, 42))\nassert predict_tree(single_leaf, [[0], [100]]) == [42, 42], \"failed on single-leaf tree\"\nleaf0 = Node(None, None, (None, 0))\nleaf1 = Node(None, None, (None, 1))\nroot = Node(leaf0, leaf1, (0, 2.5))\nassert predict_tree(root, [[1.4, 0], [4.0, 0]]) == [0, 1], \"failed on depth-1 tree\"\nleaf_left = Node(None, None, (None, 0))\nleaf_mid  = Node(None, None, (None, 1))\nleaf_right= Node(None, None, (None, 2))\nright_child = Node(leaf_mid, leaf_right, (1, 1.7))\nroot2 = Node(leaf_left, right_child, (0, 5))\nassert predict_tree(root2, [[2, 0], [7, 1.0], [7, 4]]) == [0, 1, 2], \"failed on depth-2 tree, assorted samples\"\nassert predict_tree(root2, [[1, 100], [3, -5]]) == [0, 0], \"failed when all samples end in the same leaf\"\nl1 = Node(None, None, (None, -1))\nl2 = Node(None, None, (None, -2))\nl3 = Node(None, None, (None, -3))\nint_node = Node(l2, l3, (2, 0.0))\nroot3 = Node(l1, int_node, (0, 10.0))\nassert predict_tree(root3, [[5, 0, -1], [20, 0, -2], [20, 0, 1]]) == [-1, -2, -3], \"failed on multi-feature tree\"\nleaf_neg = Node(None, None, (None, 9))\nleaf_pos = Node(None, None, (None, 8))\nroot4 = Node(leaf_neg, leaf_pos, (0, -3.0))\nassert predict_tree(root4, [[-10], [0]]) == [9, 8], \"failed on negative threshold splitting\"\nleaf_a = Node(None, None, (None, 0.1))\nleaf_b = Node(None, None, (None, 0.9))\nroot5 = Node(leaf_a, leaf_b, (0, 0.123))\nassert predict_tree(root5, [[0.0], [0.5]]) == [0.1, 0.9], \"failed on fractional values\"\nbig_batch = [[i] for i in range(100)]\nexpected  = [0 if i <= 50 else 1 for i in range(100)]\nbig_root  = Node(Node(None, None, (None, 0)), Node(None, None, (None, 1)), (0, 50))\nassert predict_tree(big_root, big_batch) == expected, \"failed on large batch\"\nleaf_c = Node(None, None, (None, 'left'))\nleaf_d = Node(None, None, (None, 'right'))\nroot6  = Node(leaf_c, leaf_d, (2, 3))\nassert predict_tree(root6, [[0, 0, 2], [0, 0, 5]]) == ['left', 'right'], \"failed when splitting on non-first feature\""}
{"task_id": 37, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import cycle\nimport numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features+1).  The first\n        n_features columns contain the point coordinates, the last\n        column an arbitrary label/value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary that represents the kd-tree or *None* when\n        *data* is empty.\n    \"\"\"\n    if data.size == 0:\n        return None\n    m: int = data.shape[1] - 1\n    dim_generator = cycle(range(m))\n\n    def _build(subset: np.ndarray) -> dict | None:\n        \"\"\"Recursive helper that uses the *global* ``dim_generator``.\"\"\"\n        if subset.size == 0:\n            return None\n        d = next(dim_generator)\n        order = subset[:, d].argsort(kind='mergesort')\n        sorted_subset = subset[order]\n        n = sorted_subset.shape[0]\n        median_idx = n // 2\n        median_row = sorted_subset[median_idx]\n        left_subset = sorted_subset[:median_idx]\n        right_subset = sorted_subset[median_idx + 1:]\n        node = {'point': median_row[:m].tolist(), 'label': median_row[m], 'left': _build(left_subset), 'right': _build(right_subset)}\n        return node\n    return _build(data)\nassert build_kd_tree(np.empty((0, 3))) is None, \"failed: empty dataset should return None\"\nsingle = np.array([[3, 5, 1]])\nassert build_kd_tree(single) == {\"point\": [3, 5], \"label\": 1, \"left\": None, \"right\": None}, \"failed: single point test\"\nasc_two = np.array([[1, 2, 0], [3, 4, 1]])\nexp_asc_two = {\"point\": [3, 4], \"label\": 1, \"left\": {\"point\": [1, 2], \"label\": 0, \"left\": None, \"right\": None}, \"right\": None}\nassert build_kd_tree(asc_two) == exp_asc_two, \"failed: two-row ascending test\"\ndesc_two = np.array([[3, 4, 1], [1, 2, 0]])\nassert build_kd_tree(desc_two) == exp_asc_two, \"failed: two-row descending test\"\nthree = np.array([[2, 3, 0], [1, 5, 1], [4, 4, 0]])\nexp_three = {\"point\": [2, 3], \"label\": 0, \"left\": {\"point\": [1, 5], \"label\": 1, \"left\": None, \"right\": None}, \"right\": {\"point\": [4, 4], \"label\": 0, \"left\": None, \"right\": None}}\nassert build_kd_tree(three) == exp_three, \"failed: three-row test\"\nfour = np.array([[1, 1, 0], [2, 2, 1], [3, 3, 0], [4, 4, 1]])\nexp_four = {\"point\": [3, 3], \"label\": 0, \"left\": {\"point\": [2, 2], \"label\": 1, \"left\": {\"point\": [1, 1], \"label\": 0, \"left\": None, \"right\": None}, \"right\": None}, \"right\": {\"point\": [4, 4], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(four) == exp_four, \"failed: four-row test\"\nfloats = np.array([[1.5, 2.5, 0], [3.5, 4.5, 1], [2.5, 3.5, 1]])\nexp_floats = {\"point\": [2.5, 3.5], \"label\": 1, \"left\": {\"point\": [1.5, 2.5], \"label\": 0, \"left\": None, \"right\": None}, \"right\": {\"point\": [3.5, 4.5], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(floats) == exp_floats, \"failed: float data test\"\nthree_feat = np.array([[2, 3, 4, 0], [5, 4, 3, 1], [4, 6, 2, 0]])\nexp_three_feat = {\"point\": [4, 6, 2], \"label\": 0, \"left\": {\"point\": [2, 3, 4], \"label\": 0, \"left\": None, \"right\": None}, \"right\": {\"point\": [5, 4, 3], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(three_feat) == exp_three_feat, \"failed: 3-feature data test\"\nsingle3 = np.array([[7, 8, 9, 5]])\nassert build_kd_tree(single3) == {\"point\": [7, 8, 9], \"label\": 5, \"left\": None, \"right\": None}, \"failed: single 3-feature test\"\npair3 = np.array([[9, 9, 0, 0], [1, 1, 1, 1]])\nexp_pair3 = {\"point\": [9, 9, 0], \"label\": 0, \"left\": {\"point\": [1, 1, 1], \"label\": 1, \"left\": None, \"right\": None}, \"right\": None}\nassert build_kd_tree(pair3) == exp_pair3, \"failed: two-row 3-feature test\""}
{"task_id": 38, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\"\"\"\n    n_arms = context.shape[1]\n    scores = np.empty(n_arms, dtype=float)\n    for a in range(n_arms):\n        A_a = np.asarray(A[a], dtype=float)\n        b_a = np.asarray(b[a], dtype=float)\n        c_a = context[:, a]\n        theta_hat = np.linalg.solve(A_a, b_a)\n        A_inv_c = np.linalg.solve(A_a, c_a)\n        exploit = theta_hat @ c_a\n        explore = alpha * np.sqrt(c_a @ A_inv_c)\n        scores[a] = exploit + explore\n    return int(np.argmax(scores))\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [np.eye(2), 2*np.eye(2)], [np.zeros(2), np.zeros(2)], 1.0) == 0, \"failed on orthogonal identity contexts\"\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [np.eye(2), 5*np.eye(2)], [np.zeros(2), np.zeros(2)], 3.0) == 0, \"failed high-alpha exploration preference\"\nassert linucb_select_arm(np.array([[1,0,0],[0,1,0],[0,0,1]]), [np.eye(3), np.eye(3), 2*np.eye(3)], [np.zeros(3), np.array([1,0,0]), np.zeros(3)], 1.0) == 0, \"failed tie-breaking smallest index\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.5]], 0.2) == 1, \"failed single-feature small-alpha exploitation\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.5]], 5.0) == 1, \"failed single-feature large-alpha\"\nassert linucb_select_arm(np.array([[1,0],[1,0]]), [np.eye(2), np.eye(2)], [np.array([2,2]), np.array([1,1])], 0.1) == 0, \"failed higher theta\"\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [10*np.eye(2), np.eye(2)], [np.zeros(2), np.zeros(2)], 5.0) == 1, \"failed uncertainty driven choice\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.0]], 0.5) == 0, \"failed identical arms pick smallest index\""}
{"task_id": 39, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median\n          (upper median for even *n*);\n        \u2022 left  is a list of row indices with strictly smaller values;\n        \u2022 right is a list of row indices with strictly larger  values.\n        The two lists are sorted increasingly.\n    \"\"\"\n    col = data[:, d]\n    n = col.shape[0]\n    k = n // 2\n    part_idx = np.argpartition(col, k)\n    pivot = int(part_idx[k])\n    pivot_value = col[pivot]\n    left = []\n    right = []\n    for idx in range(n):\n        if idx == pivot:\n            continue\n        v = col[idx]\n        if v < pivot_value:\n            left.append(idx)\n        elif v > pivot_value:\n            right.append(idx)\n    return (pivot, left, right)\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into equally sized, possibly overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length N.\n    frame_width : int\n        Number of samples per frame.\n    stride : int\n        Hop size (number of samples between the starts of successive frames).\n    writeable : bool, default=False\n        If False the returned view is marked read-only.\n        If True the view is writeable only when the source array is writeable.\n\n    Returns\n    -------\n    np.ndarray\n        View on *x* with shape (n_frames, frame_width), where\n            n_frames = (len(x) - frame_width) // stride + 1\n    \"\"\"\n    assert x.ndim == 1, 'x must be one-dimensional'\n    assert frame_width > 0, 'frame_width must be a positive integer'\n    assert stride > 0, 'stride must be a positive integer'\n    assert len(x) >= frame_width, 'frame_width larger than signal length'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    item_stride = x.strides[0]\n    strides = (item_stride * stride, item_stride)\n    view_writeable = x.flags.writeable if writeable else False\n    frames = as_strided(x, shape=shape, strides=strides, writeable=view_writeable)\n    return frames\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 41, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    if not X_data:\n        raise ValueError('Training set is empty.')\n    if k <= 0:\n        raise ValueError('k must be a positive integer.')\n    X_train = np.asarray(X_data, dtype=float)\n    X_query = np.asarray(X, dtype=float)\n    n_train = X_train.shape[0]\n    k_eff = min(k, n_train)\n    predictions: list = []\n    for x in X_query:\n        diff = X_train - x\n        dists2 = np.einsum('ij,ij->i', diff, diff)\n        knn_idx = np.argpartition(dists2, k_eff - 1)[:k_eff]\n        neighbour_labels = [y_data[i] for i in knn_idx]\n        counts = Counter(neighbour_labels)\n        max_count = max(counts.values())\n        best_labels = [lbl for (lbl, cnt) in counts.items() if cnt == max_count]\n        predictions.append(min(best_labels))\n    return predictions\nassert knn_predict([[1,2],[2,3],[3,3],[6,5],[7,7]], ['A','A','A','B','B'], [[1.5,2.5],[6,6]], 3) == ['A','B'], \"failed: basic 2-D example\"\nassert knn_predict([[0],[1],[2],[3]], [0,0,1,1], [[1.1],[2.9]], 1) == [0,1], \"failed: 1-D k=1\"\nassert knn_predict([[0],[1],[2],[3]], [0,0,1,1], [[1.1],[2.9]], 3) == [0,1], \"failed: 1-D k=3\"\nassert knn_predict([[0],[1],[5],[6]], ['A','A','B','B'], [[3]], 2) == ['A'], \"failed: tie case, lexicographic rule\"\nassert knn_predict([[2,2],[2,-2],[-2,2],[-2,-2]], ['X','Y','Y','X'], [[0,0]], 4) == ['X'], \"failed: even tie chose X\"\nassert knn_predict([[1,0],[2,0],[3,0]], [1,2,3], [[2,0]], 2) == [1], \"failed: numeric labels tie resolved to 1\"\nassert knn_predict([[1,1],[1,2],[1,3],[10,10]], ['a','a','a','b'], [[9,9]], 3) == ['a'], \"failed: distant outlier\"\ntrain_X = [[i] for i in range(20)]\ntrain_y = ['even' if i%2==0 else 'odd' for i in range(20)]\nassert knn_predict(train_X, train_y, [[0.1],[19.9]], 5) == ['even','odd'], \"failed: large set\""}
{"task_id": 42, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        return -1\n    if len(actual) == 0 or len(actual) != len(predicted):\n        return -1\n    a = np.asarray(actual, dtype=float)\n    p = np.asarray(predicted, dtype=float)\n    if np.any(a < 0) or np.any(p < 0):\n        return -1\n    log_diff_sq = (np.log1p(p) - np.log1p(a)) ** 2\n    rmsle_val = np.sqrt(np.mean(log_diff_sq))\n    return round(float(rmsle_val), 4)\nassert rmsle([3, 5, 2.5, 7], [2.5, 5, 4, 8]) == 0.1993, \"failed: example case\"\nassert rmsle([1, 2, 3], [1, 2, 3]) == 0.0, \"failed: perfect prediction\"\nassert rmsle([100], [150]) == 0.4022, \"failed: single element\"\nassert rmsle([1, 2, 3], [1, 2]) == -1, \"failed: length mismatch\"\nassert rmsle([-1, 2], [0, 2]) == -1, \"failed: negative value in actual\"\nassert rmsle([1000, 2000], [1000, 2000]) == 0.0, \"failed: large identical numbers\"\nassert rmsle([0, 0], [0, 0]) == 0.0, \"failed: all zeros prediction\"\nassert rmsle([0], [1]) == 0.6931, \"failed: zero actual, positive prediction\"\nassert rmsle([1], [0]) == 0.6931, \"failed: positive actual, zero prediction\"\nassert rmsle([5, 10, 15], [6, 12, 18]) == 0.1645, \"failed: moderate deviation\""}
{"task_id": 44, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh; otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    z = np.asarray(x, dtype=float).ravel()\n    tanh_z = 2.0 / (1.0 + np.exp(-2.0 * z)) - 1.0\n    out = 1.0 - tanh_z ** 2 if derivative else tanh_z\n    return np.round(out, 4).tolist()\nassert tanh_activation([0, 1, -1], False) == [0.0, 0.7616, -0.7616], \"failed on basic forward pass\"\nassert tanh_activation([2], False) == [0.9640], \"failed on single positive value\"\nassert tanh_activation([2], True) == [0.0707], \"failed on gradient single\"\nassert tanh_activation([-2], False) == [-0.9640], \"failed on single negative value\"\nassert tanh_activation([-2], True) == [0.0707], \"failed on gradient negative\"\nassert tanh_activation([3, -3], False) == [0.9951, -0.9951], \"failed on larger magnitudes\"\nassert tanh_activation([3, -3], True) == [0.0099, 0.0099], \"failed on larger gradient\"\nassert tanh_activation([0.5, -0.5], False) == [0.4621, -0.4621], \"failed on half values\"\nassert tanh_activation([0.5, -0.5], True) == [0.7864, 0.7864], \"failed on half gradient\""}
{"task_id": 46, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence (Python list or NumPy array) of length N.\n\n    Returns:\n        A Python list [a0, a1, \u2026, a_{N-1}] where\n            a_k = \u03a3_{n=0}^{N-k-1} x_{n+k} * x_n\n        If N == 0 the empty list is returned.\n    \"\"\"\n    N = len(x)\n    if N == 0:\n        return []\n    x_arr = np.asarray(x)\n    result: list = []\n    for k in range(N):\n        s = 0\n        for n in range(N - k):\n            s += x_arr[n + k] * x_arr[n]\n        result.append(s)\n    return result\nassert autocorrelate_1d([1, 2, 3]) == [14, 8, 3], \"failed: autocorrelate_1d([1, 2, 3])\"\nassert autocorrelate_1d([1]) == [1], \"failed: autocorrelate_1d([1])\"\nassert autocorrelate_1d([1, 0, 0]) == [1, 0, 0], \"failed: autocorrelate_1d([1, 0, 0])\"\nassert autocorrelate_1d([1, -1, 1, -1]) == [4, -3, 2, -1], \"failed: autocorrelate_1d([1, -1, 1, -1])\"\nassert autocorrelate_1d([0.5, 0.5]) == [0.5, 0.25], \"failed: autocorrelate_1d([0.5, 0.5])\"\nassert autocorrelate_1d([1, 2, 3, 4]) == [30, 20, 11, 4], \"failed: autocorrelate_1d([1, 2, 3, 4])\"\nassert autocorrelate_1d([-1, 2, -3]) == [14, -8, 3], \"failed: autocorrelate_1d([-1, 2, -3])\"\nassert autocorrelate_1d([]) == [], \"failed: autocorrelate_1d([])\"\nassert autocorrelate_1d([2, 2]) == [8, 4], \"failed: autocorrelate_1d([2, 2])\"\nassert autocorrelate_1d([1, 3, 5, 7, 9]) == [165, 116, 71, 34, 9], \"failed: autocorrelate_1d([1, 3, 5, 7, 9])\""}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\"\"\"\n    try:\n        A = np.asarray(X, dtype=float)\n    except Exception:\n        return False\n    if A.ndim != 2 or A.size == 0:\n        return False\n    if (~np.isfinite(A)).any():\n        return False\n    if ((A < 0) | (A > 1)).any():\n        return False\n    if not np.allclose(A.sum(axis=1), 1.0, atol=1e-08):\n        return False\n    return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 49, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    Scan *nums* once while maintaining a max-heap (size \u2264 k) implemented\n    with a plain Python list.  At the end, the heap contains exactly the\n    k smallest elements (in no particular order) \u2013 we then sort and\n    return it.\n\n    If *k* is not strictly between 0 and len(nums) (inclusive), return -1.\n\n    The standard ``heapq`` module is **not** used: the helpers\n    ``_move_up`` and ``_move_down`` restore the heap property after\n    insertions and replacements.\n    \"\"\"\n    n = len(nums)\n    if k <= 0 or k > n:\n        return -1\n\n    def _move_up(heap: List[Number], idx: int) -> None:\n        \"\"\"Bubble the element at *idx* up until the max-heap property holds.\"\"\"\n        while idx > 0:\n            parent = (idx - 1) // 2\n            if heap[idx] > heap[parent]:\n                (heap[idx], heap[parent]) = (heap[parent], heap[idx])\n                idx = parent\n            else:\n                break\n\n    def _move_down(heap: List[Number], idx: int) -> None:\n        \"\"\"Push the element at *idx* down until the max-heap property holds.\"\"\"\n        size = len(heap)\n        while True:\n            left = 2 * idx + 1\n            right = left + 1\n            largest = idx\n            if left < size and heap[left] > heap[largest]:\n                largest = left\n            if right < size and heap[right] > heap[largest]:\n                largest = right\n            if largest != idx:\n                (heap[idx], heap[largest]) = (heap[largest], heap[idx])\n                idx = largest\n            else:\n                break\n    heap: List[Number] = []\n    for x in nums:\n        if len(heap) < k:\n            heap.append(x)\n            _move_up(heap, len(heap) - 1)\n        elif x < heap[0]:\n            heap[0] = x\n            _move_down(heap, 0)\n    heap.sort()\n    return heap\nassert k_smallest([7,10,4,3,20,15],3) == [3,4,7], \"failed for [7,10,4,3,20,15], k=3\"\nassert k_smallest([1,2,3,4,5],5) == [1,2,3,4,5], \"failed for already sorted list\"\nassert k_smallest([5,4,3,2,1],2) == [1,2], \"failed for reverse order list, k=2\"\nassert k_smallest([3,1,4,1,5,9,2],4) == [1,1,2,3], \"failed with duplicates, k=4\"\nassert k_smallest([8.5,3.2,7.7,4.4,2.2],1) == [2.2], \"failed for k=1 with floats\"\nassert k_smallest([0],1) == [0], \"failed for single element list\"\nassert k_smallest([9,8,7,6,5],3) == [5,6,7], \"failed for [9,8,7,6,5], k=3\"\nassert k_smallest([2,2,2,2],3) == [2,2,2], \"failed for all identical values, k=3\"\nassert k_smallest([10,9,8,7],4) == [7,8,9,10], \"failed when k equals length\"\nassert k_smallest([1,2,3],0) == -1, \"failed for invalid k (0)\""}
{"task_id": 51, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"Newton\u2019s method for 2\u2013D linear least\u2013squares.\n\n    Parameters\n    ----------\n    X : (n, 2) array_like\n        Design matrix.\n    y : (n,) or (n, 1) array_like\n        Target vector.\n    epsilon : float, optional\n        Stopping threshold for \u2016\u2207\u2016\u2082.\n    max_iter : int, optional\n        Maximum number of Newton steps.\n\n    Returns\n    -------\n    list[list[float]]\n        2\u00d71 list with each coefficient rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).reshape(-1)\n    n = X.shape[0]\n    w = np.ones(2, dtype=float)\n    H = 2.0 / n * X.T @ X\n    H_inv = np.linalg.pinv(H)\n    for _ in range(max_iter):\n        grad = 2.0 / n * X.T @ (X @ w - y)\n        if np.linalg.norm(grad) < epsilon:\n            break\n        w -= H_inv @ grad\n    return [[round(float(w[0]), 4)], [round(float(w[1]), 4)]]\nassert newton(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[3], [7], [11]])) == [[1.0], [1.0]], \"test case failed: newton([[1,2],[3,4],[5,6]],[3,7,11])\"\nassert newton(np.array([[1, 0], [0, 1], [1, 1]]), np.array([[2], [3], [5]])) == [[2.0], [3.0]], \"test case failed: newton([[1,0],[0,1],[1,1]],[2,3,5])\"\nassert newton(np.array([[2, 4], [1, 3], [0, 1], [1, 2]]), np.array([[-3], [-2.5], [-1], [-1.5]])) == [[0.5], [-1.0]], \"test case failed: newton([[2,4],[1,3],[0,1],[1,2]],y)\"\nassert newton(np.array([[1, 2], [2, 3], [3, 4], [4, 5]]), np.array([[3], [5], [7], [9]])) == [[1.0], [1.0]], \"test case failed: newton(sequential data)\"\nassert newton(np.array([[1, 0], [0, 1], [2, 2]]), np.array([[2], [1], [6]])) == [[2.0], [1.0]], \"test case failed: newton([[1,0],[0,1],[2,2]],y)\"\nassert newton(np.array([[1, 3], [2, 1], [3, 2]]), np.array([[1], [7], [10]])) == [[4.0], [-1.0]], \"test case failed: newton([[1,3],[2,1],[3,2]],y)\"\nassert newton(np.array([[1, 2], [2, 1], [3, 3], [4, 1]]), np.array([[-1], [1], [0], [3]])) == [[1.0], [-1.0]], \"test case failed: newton(mixed signs)\"\nassert newton(np.array([[1, 4], [2, 2], [3, 1]]), np.array([[-0.5], [2], [4]])) == [[1.5], [-0.5]], \"test case failed: newton([[1,4],[2,2],[3,1]],y)\"\nassert newton(np.array([[1, 0], [0, 2], [2, 1], [3, 4], [4, 2]]), np.array([[0.75], [2.5], [2.75], [7.25], [5.5]])) == [[0.75], [1.25]], \"test case failed: newton(varied data)\"\n\n"}
{"task_id": 54, "completion_id": 0, "passed": false, "result": "failed: name '_STOP_WORDS' is not defined", "solution": "import string\nimport string\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation\n    stripping and stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip ASCII punctuation from each token.\n        **kwargs: Placeholder for future options.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    if lowercase:\n        line = line.lower()\n    raw_tokens = line.split()\n    processed: list[str] = []\n    punct_table = string.punctuation\n    for token in raw_tokens:\n        if filter_punctuation:\n            token = token.strip(punct_table)\n        if not token:\n            continue\n        if filter_stopwords and token.lower() in _STOP_WORDS:\n            continue\n        processed.append(token)\n    return processed\nassert tokenize_whitespace(\"Hello, world! This is an example.\") == [\"hello\", \"world\", \"example\"], \"failed on default settings\"\nassert tokenize_whitespace(\"Hello, world!\", filter_punctuation=False) == [\"hello,\", \"world!\"] , \"failed punctuation=False\"\nassert tokenize_whitespace(\"This is a test\", filter_stopwords=False) == [\"this\", \"is\", \"a\", \"test\"], \"failed stopword=False\"\nassert tokenize_whitespace(\"Mixed CASE Sentence\", lowercase=False) == [\"Mixed\", \"CASE\", \"Sentence\"], \"failed lowercase=False\"\nassert tokenize_whitespace(\"\") == [], \"failed empty string\"\nassert tokenize_whitespace(\"!!! ???\") == [], \"failed all punctuation string\"\nassert tokenize_whitespace(\"Can't won't shouldn't\") == [\"cant\", \"wont\", \"shouldnt\"], \"failed apostrophes\"\nassert tokenize_whitespace(\"Line\\nwith\\tmultiple\\tspaces\") == [\"line\", \"multiple\", \"spaces\"], \"failed whitespace variants\"\nassert tokenize_whitespace(\"Repeated  the   the\", filter_stopwords=False) == [\"repeated\", \"the\", \"the\"], \"failed repeated tokens\"\nassert tokenize_whitespace(\"A quick brown fox\", filter_stopwords=True, filter_punctuation=True, lowercase=True) == [\"quick\", \"brown\", \"fox\"], \"failed combined settings\""}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    batch_size = n if n < batch_size else batch_size\n    for it in range(max_iter):\n        start = it * batch_size % n\n        idx = np.arange(start, start + batch_size) % n\n        X_b = X[idx]\n        y_b = y[idx]\n        err = X_b @ w - y_b\n        g = X_b.T @ err / len(y_b)\n        s = rho * s + (1.0 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        full_grad = X.T @ (X @ w - y) / n\n        if np.linalg.norm(full_grad) < epsilon:\n            break\n    return np.round(w, 4).tolist()\nimport numpy as np\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([1,3,5,7],float)),[1,2])), \"Failed on y = 1+2x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3],[1,4]],float),np.array([3,7,11,15,19],float)),[3,4])), \"Failed on y = 3+4x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2]],float),np.array([5,5,5],float)),[5,0])), \"Failed on constant function\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([10,8,6,4],float)),[10,-2])), \"Failed on y = 10-2x\"\nX8=np.array([[1,-1],[1,0],[1,1],[1,2]],float);y8=np.array([4,5,6,7],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X8,y8),[5,1])), \"Failed on negative to positive x\"\nX9=np.array([[1,2],[1,4],[1,6],[1,8]],float);y9=np.array([5,9,13,17],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X9,y9),[1,2])), \"Failed on even x\"\nX10=np.array([[1,3],[1,6],[1,9]],float);y10=np.array([2,4,6],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X10,y10),[0,0.6667])), \"Failed on small sample 10\""}
{"task_id": 56, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Numerically\u2013stable SoftPlus activation (and its gradient).\n\n    Parameters\n    ----------\n    x     : scalar, list or np.ndarray\n        Input value(s).\n    deriv : bool, default False\n        If True return the gradient (sigmoid), otherwise SoftPlus.\n\n    Returns\n    -------\n    float or list\n        Rounded result(s) \u2013 float when the input was a scalar,\n        otherwise a Python list.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.asarray(x, dtype=np.float64)\n    if deriv:\n        pos_mask = x >= 0\n        neg_mask = ~pos_mask\n        out = np.empty_like(x)\n        out[pos_mask] = 1.0 / (1.0 + np.exp(-x[pos_mask]))\n        exp_x = np.exp(x[neg_mask])\n        out[neg_mask] = exp_x / (1.0 + exp_x)\n    else:\n        out = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    out = np.round(out, 4)\n    if is_scalar:\n        return float(out)\n    else:\n        return out.tolist()\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: failed test 1", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef _count_ngrams(tokens: list[str], n: int) -> Counter:\n    \"\"\"\n    Helper: return a Counter of all length-n n-grams found in *tokens*.\n    Unigrams are counted as the string itself, higher orders as tuples.\n    \"\"\"\n    if n == 1:\n        return Counter(tokens)\n    counts = Counter()\n    for i in range(len(tokens) - n + 1):\n        counts[tuple(tokens[i:i + n])] += 1\n    return counts\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Unsmooth\\xaded MLE N-gram log-probability of *sequence* given *corpus*.\"\"\"\n    if N < 1:\n        raise ValueError('N must be >= 1')\n    if len(sequence) < N:\n        return 0.0\n    if N == 1:\n        unigram_counts = _count_ngrams(corpus, 1)\n        corpus_len = len(corpus)\n    else:\n        ngram_counts = _count_ngrams(corpus, N)\n        prefix_counts = _count_ngrams(corpus, N - 1)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        if N == 1:\n            word = sequence[i]\n            numerator = unigram_counts.get(word, 0)\n            denominator = corpus_len\n        else:\n            ngram = tuple(sequence[i:i + N])\n            prefix = ngram[:-1]\n            numerator = ngram_counts.get(ngram, 0)\n            denominator = prefix_counts.get(prefix, 0)\n        if numerator == 0 or denominator == 0:\n            return float('-inf')\n        prob = numerator / denominator\n        total_log_prob += float(np.log(prob))\n    return round(total_log_prob, 4)\nassert unsmoothed_ngram_log_prob([\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"],[\"the\",\"lazy\",\"dog\"],2)==-0.6931, \"failed test 1\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],2)==-0.4055, \"failed test 2\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"a\",\"b\"],2)==-0.4055, \"failed test 3\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"c\"],2)==float('-inf'), \"failed test 4\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],1)==-1.4271, \"failed test 5\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"c\"],1)==float('-inf'), \"failed test 6\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"i\",\"love\",\"deep\"],3)==-0.6931, \"failed test 7\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"love\",\"deep\",\"machine\"],3)==float('-inf'), \"failed test 8\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\"],2)==float('-inf'), \"failed test 9\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"machine\",\"learning\",\"i\"],3)==0.0, \"failed test 10\""}
{"task_id": 60, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if y.size == 0:\n        return 0.0\n    criterion = criterion.lower()\n    if criterion in ('entropy', 'gini'):\n        (_, counts) = np.unique(y, return_counts=True)\n        p = counts / counts.sum()\n        if criterion == 'entropy':\n            impurity = -np.sum(p * np.log2(p))\n        else:\n            impurity = 1.0 - np.sum(p ** 2)\n    elif criterion == 'mse':\n        mean_y = y.mean()\n        impurity = np.mean((y - mean_y) ** 2)\n    else:\n        raise ValueError(f'Unsupported criterion: {criterion!r}')\n    return round(float(impurity), 4)\nassert compute_impurity(np.array([0, 1]), \"gini\") == 0.5, \"failed on gini([0,1])\"\nassert compute_impurity(np.array([0, 0, 1, 1]), \"entropy\") == 1.0, \"failed on entropy([0,0,1,1])\"\nassert compute_impurity(np.array([0, 0, 0, 0]), \"gini\") == 0.0, \"failed on gini(all same)\"\nassert compute_impurity(np.array([0, 0, 0, 0]), \"entropy\") == 0.0, \"failed on entropy(all same)\"\nassert compute_impurity(np.array([1.0, 2.0, 3.0, 4.0]), \"mse\") == 1.25, \"failed on mse([1,2,3,4])\"\nassert compute_impurity(np.array([3.0, 3.0, 4.0, 5.0]), \"mse\") == 0.6875, \"failed on mse([3,3,4,5])\"\nassert compute_impurity(np.array([0, 1, 2]), \"gini\") == 0.6667, \"failed on gini([0,1,2])\"\nassert compute_impurity(np.array([0, 1, 2]), \"entropy\") == 1.585, \"failed on entropy([0,1,2])\"\nassert compute_impurity(np.array([10, 10]), \"mse\") == 0.0, \"failed on mse([10,10])\"\nassert compute_impurity(np.array([0, 1, 1, 1, 1]), \"gini\") == 0.32, \"failed on gini(1 dominant)\""}
{"task_id": 61, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    W_arr = np.asarray(W, dtype=float)\n    if X_arr.ndim != 2:\n        return -1\n    (n_samples, n_features) = X_arr.shape\n    if y_arr.ndim == 1:\n        y_arr = y_arr.reshape(-1, 1)\n    if y_arr.ndim != 2 or y_arr.shape[1] != 1 or y_arr.shape[0] != n_samples:\n        return -1\n    if W_arr.ndim == 1:\n        W_arr = W_arr.reshape(-1, 1)\n    if W_arr.ndim != 2 or W_arr.shape[1] != 1 or W_arr.shape[0] != n_features:\n        return -1\n    residual = X_arr @ W_arr - y_arr\n    gradient = X_arr.T @ residual / n_samples\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return gradient_rounded\nassert grad([[1, 2], [3, 4]], [[5], [6]], [[0], [0]]) == [[-11.5], [-17.0]], \"test case 1 failed\"\nassert grad([[1, 0], [0, 1], [1, 1]], [[1], [2], [3]], [[0], [0]]) == [[-1.3333], [-1.6667]], \"test case 2 failed\"\nassert grad([[1, 2], [3, 4]], [[1], [2], [3]], [[1], [1]]) == -1, \"test case 3 failed\"\nassert grad([[1, 2], [3, 4]], [[1], [2]], [[1], [1], [1]]) == -1, \"test case 4 failed\"\nassert grad([[2, 1], [1, 3]], [[1], [2]], [[0.5], [-1]]) == [[-3.25], [-7.25]], \"test case 5 failed\"\nassert grad([[1, 2, 3], [4, 5, 6]], [[1], [0]], [[1], [0], [-1]]) == [[-5.5], [-8.0], [-10.5]], \"test case 6 failed\"\nassert grad([[2, 4, 6]], [[5]], [[1], [1], [1]]) == [[14.0], [28.0], [42.0]], \"test case 7 failed\"\nassert grad([[1, 2], [3, 4], [5, 6]], [1, 2, 3], [0, 0]) == [[-7.3333], [-9.3333]], \"test case 8 failed\"\nassert grad([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], [[0],[0],[0],[0]], [[4],[8],[12],[16]]) == [[1.0], [2.0], [3.0], [4.0]], \"test case 9 failed\"\nassert grad([[1], [1], [1]], [[0], [1], [2]], [[1]]) == [[0.0]], \"test case 10 failed\""}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Univariate Lasso regression with polynomial features (coordinate descent).\"\"\"\n    X = np.asarray(X, dtype=float).ravel()\n    y = np.asarray(y, dtype=float).ravel()\n    m = X.size\n    if m == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y.size != m:\n        raise ValueError('X and y must have the same length.')\n    if degree < 0:\n        raise ValueError('degree must be non-negative.')\n    if reg_factor < 0:\n        raise ValueError('reg_factor must be non-negative.')\n    X_poly = np.column_stack([np.ones_like(X)] + [X ** k for k in range(1, degree + 1)])\n    d_plus_1 = degree + 1\n    w = np.zeros(d_plus_1)\n\n    def soft_threshold(rho: float, lam: float) -> float:\n        if rho > lam:\n            return rho - lam\n        if rho < -lam:\n            return rho + lam\n        return 0.0\n    for _ in range(n_iterations):\n        w_old = w.copy()\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        y_minus_pred = None\n        for j in range(1, d_plus_1):\n            x_j = X_poly[:, j]\n            if y_minus_pred is None:\n                y_minus_pred = y - X_poly @ w\n            rho = x_j @ (y_minus_pred + w[j] * x_j)\n            if reg_factor == 0.0:\n                w[j] = rho / (x_j @ x_j)\n            else:\n                w[j] = soft_threshold(rho, reg_factor) / (x_j @ x_j)\n            y_minus_pred = y_minus_pred - (w[j] - w_old[j]) * x_j\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    return [round(float(coef), 4) for coef in w]\nassert lasso_regression([0,1,2,3],[1,3,5,7],1,0)==[1.0,2.0],\"failed: linear data degree 1\"\nassert lasso_regression([1,2,3],[4,6,8],1,0)==[2.0,2.0],\"failed: linear data intercept 2 slope 2\"\nassert lasso_regression([0,1,2],[0,1,4],2,0)==[0.0,0.0,1.0],\"failed: quadratic x^2\"\nassert lasso_regression([0,1,2],[1,2,5],2,0)==[1.0,0.0,1.0],\"failed: quadratic x^2+1\"\nassert lasso_regression([0,1,2],[2,6,12],2,0)==[2.0,3.0,1.0],\"failed: quadratic 2+3x+x^2\"\nassert lasso_regression([-1,0,1],[2,1,0],1,0)==[1.0,-1.0],\"failed: negative slope\"\nassert lasso_regression([0,5],[7,17],1,0)==[7.0,2.0],\"failed: two-point line\""}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: name 'A1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward-probability vector \u03b2_t for a discrete Hidden Markov\n    Model.\n\n    Parameters\n    ----------\n    A   : transition-probability matrix, shape (N, N)\n    B   : emission-probability matrix, shape (N, M)\n    obs : list with the indices of the observed symbols; length = T\n    t   : time index for which \u03b2_t is required  (0 \u2264 t < T)\n\n    Returns\n    -------\n    list[float]\n        The N backward probabilities \u03b2_t(i) (i = 0 \u2026 N-1), each rounded\n        to 4 decimal places.\n    \"\"\"\n    A = np.asarray(A, dtype=float)\n    B = np.asarray(B, dtype=float)\n    T = len(obs)\n    N = A.shape[0]\n    if not 0 <= t < T:\n        raise ValueError('t must satisfy 0 \u2264 t < len(obs)')\n    beta_next = np.ones(N)\n    for k in range(T - 2, t - 1, -1):\n        emis_beta = B[:, obs[k + 1]] * beta_next\n        beta_curr = A.dot(emis_beta)\n        beta_next = beta_curr\n    return np.round(beta_next, 4).tolist()\nassert backward_beta(A1, B1, obs1, 0) == [0.2032, 0.2164], \"failed: example t=0\"\nassert backward_beta(A1, B1, obs1, 1) == [0.38, 0.26], \"failed: example t=1\"\nassert backward_beta(A1, B1, obs1, 2) == [1.0, 1.0], \"failed: example t=2 (last index)\"\nassert backward_beta(A2, B2, obs2, 3) == [1.0, 1.0, 1.0], \"failed: 3-state t=3\"\nassert backward_beta(A2, B2, obs2, 2) == [0.49, 0.5, 0.47], \"failed: 3-state t=2\"\nassert backward_beta(A2, B2, obs2, 1) == [0.2488, 0.2434, 0.2552], \"failed: 3-state t=1\"\nassert backward_beta(A2, B2, obs2, 0) == [0.1267, 0.1245, 0.133], \"failed: 3-state t=0\"\nassert backward_beta(A3, B3, obs3, 0) == [1.0, 1.0], \"failed: single observation\"\nassert backward_beta(A4, B4, obs4, 0) == [0.45, 0.54], \"failed: custom 2-state t=0\"\nassert backward_beta(A4, B4, obs4, 1) == [1.0, 1.0], \"failed: custom 2-state t=1\""}
{"task_id": 64, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"Compute the (naive) Discrete Fourier Transform of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array (real or complex) containing the samples.\n        positive_only: If True, return only the non-negative-frequency\n            terms (first N//2+1 coefficients).\n\n    Returns\n    -------\n        list[complex]: DFT spectrum rounded to 4 decimals (real and imag\n        parts separately).  Length is N//2+1 when `positive_only` is True,\n        otherwise N.\n    \"\"\"\n    x = np.asarray(frame, dtype=complex).ravel()\n    N = x.size\n    if N == 0:\n        return []\n    coeffs = np.empty(N, dtype=complex)\n    n = np.arange(N)\n    for k in range(N):\n        coeffs[k] = np.sum(x * np.exp(-2j * np.pi * k * n / N))\n    if positive_only:\n        coeffs = coeffs[:N // 2 + 1]\n    rounded = [complex(round(c.real, 4), round(c.imag, 4)) for c in coeffs]\n    return rounded\nassert dft(np.array([1, 0, -1, 0]), True) == [0j, (2+0j), 0j], \"failed on basic 4-point signal (positive_only)\"\nassert dft(np.array([1, 0, -1, 0]), False) == [0j, (2+0j), 0j, (2+0j)], \"failed on basic 4-point signal (full)\"\nassert dft(np.array([0, 1, 0, -1])) == (np.round(np.fft.fft(np.array([0,1,0,-1]))[:3].real,4)+1j*np.round(np.fft.fft(np.array([0,1,0,-1]))[:3].imag,4)).tolist(), \"failed on shifted square wave (positive_only)\"\nassert dft(np.arange(8), False) == (np.round(np.fft.fft(np.arange(8)).real,4)+1j*np.round(np.fft.fft(np.arange(8)).imag,4)).tolist(), \"failed on ramp signal length 8 (full)\"\nassert dft(np.random.RandomState(0).rand(5)) == (np.round(np.fft.fft(np.random.RandomState(0).rand(5))[:3].real,4)+1j*np.round(np.fft.fft(np.random.RandomState(0).rand(5))[:3].imag,4)).tolist(), \"failed on random len-5 frame (positive_only)\"\nassert dft(np.array([7])) == [(7+0j)], \"failed on length-1 signal\"\nassert dft(np.array([1,2]), False) == (np.round(np.fft.fft(np.array([1,2])).real,4)+1j*np.round(np.fft.fft(np.array([1,2])).imag,4)).tolist(), \"failed on length-2 signal\"\nassert dft(np.array([1+1j,2-2j,-3+3j])) == (np.round(np.fft.fft(np.array([1+1j,2-2j,-3+3j]))[:2].real,4)+1j*np.round(np.fft.fft(np.array([1+1j,2-2j,-3+3j]))[:2].imag,4)).tolist(), \"failed on complex input (positive_only)\"\nassert dft(np.zeros(6)) == [0j]*4, \"failed on all-zeros input\"\nassert dft(np.ones(6), False) == (np.round(np.fft.fft(np.ones(6)).real,4)+1j*np.round(np.fft.fft(np.ones(6)).imag,4)).tolist(), \"failed on all-ones input\""}
{"task_id": 65, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Args:\n        A: transition matrix (NxN)\n        B: emission   matrix (NxM)\n        pi: initial state distribution (N)\n        obs: observation index sequence (length T)\n\n    Returns:\n        Probability P(O | \u03bb) rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.asarray(A, dtype=float)\n    B = np.asarray(B, dtype=float)\n    pi = np.asarray(pi, dtype=float)\n    obs = np.asarray(obs, dtype=int)\n    N = len(pi)\n    T = len(obs)\n    beta = np.ones(N, dtype=float)\n    for t in range(T - 2, -1, -1):\n        factor = B[:, obs[t + 1]] * beta\n        beta = A.dot(factor)\n    prob = float(np.dot(pi * B[:, obs[0]], beta))\n    return round(prob, 6)\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2]) == 0.033612, \"test case failed: example sequence\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [2,1]) == 0.1246, \"test case failed: sequence [2,1]\"\nassert backward_prob([[1.0]], [[0.2,0.8]], [1.0], [0,1,1,0]) == 0.0256, \"test case failed: single-state model 1\"\nassert backward_prob([[1.0]], [[0.5,0.5]], [1.0], [1,1,1]) == 0.125, \"test case failed: single-state model 2\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [1]) == 0.36, \"test case failed: length-1 sequence\"\nassert backward_prob([[0.5,0.5,0.0],[0.2,0.3,0.5],[0.0,0.0,1.0]], [[0.1,0.9],[0.7,0.3],[0.4,0.6]], [1.0,0.0,0.0], [0,1]) == 0.06, \"test case failed: 3-state model\"\nassert backward_prob([[1,0],[0,1]], [[0.6,0.4],[0.2,0.8]], [0.5,0.5], [0,1]) == 0.2, \"test case failed: deterministic transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [0,0]) == 0.25, \"test case failed: symmetric transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [1]) == 0.5, \"test case failed: length-1 identity emissions\"\nassert backward_prob([[1.0]], [[0.3,0.7]], [1.0], [1,1,0]) == 0.147, \"test case failed: single-state model 3\""}
{"task_id": 67, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import accumulate\nimport numpy as np\nfrom itertools import accumulate\nTOL = 1e-08\ndef _row_valid(row: list[float]) -> bool:\n    \"\"\"\n    True  -> row is a valid probability vector\n    False -> row is invalid\n    \"\"\"\n    if any((p < 0 for p in row)):\n        return False\n    return abs(sum(row) - 1.0) <= TOL\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]] | int:\n    \"\"\"\n    Generate a sequence of hidden states and observations from a Hidden Markov\n    Model defined by (S, A, B).\n\n    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Returns (states, observations) or -1 when *any* probability distribution\n    is invalid (i.e. a row does not sum to 1 within 1 \u00d7 10\u207b\u2078 or contains a\n    negative entry).\n    \"\"\"\n    if n_sample < 1:\n        raise ValueError('n_sample must be \u2265 1')\n    N = len(S)\n    if len(A) != N or len(B) != N:\n        return -1\n    if not _row_valid(S):\n        return -1\n    for row in A:\n        if len(row) != N or not _row_valid(row):\n            return -1\n    M = len(B[0])\n    for row in B:\n        if len(row) != M or not _row_valid(row):\n            return -1\n    if seed is not None:\n        np.random.seed(seed)\n    states: list[int] = []\n    observations: list[int] = []\n    curr_state = int(np.random.choice(N, p=S))\n    states.append(curr_state)\n    obs = int(np.random.choice(M, p=B[curr_state]))\n    observations.append(obs)\n    for _ in range(1, n_sample):\n        curr_state = int(np.random.choice(N, p=A[curr_state]))\n        states.append(curr_state)\n        obs = int(np.random.choice(M, p=B[curr_state]))\n        observations.append(obs)\n    return (states, observations)\nassert gen_hmm_data([0.6,0.4],[[0.7,0.3],[0.4,0.6]],[[0.5,0.4,0.1],[0.1,0.3,0.6]],5,seed=42)==([0,1,0,0,0],[2,2,0,1,1]),\"tc1 failed\"\nassert gen_hmm_data([1,0],[[1,0],[0,1]],[[0,1],[1,0]],5,seed=7)==([0,0,0,0,0],[1,1,1,1,1]),\"tc2 failed\"\nassert gen_hmm_data([0,1],[[1,0],[0,1]],[[1,0],[0,1]],3,seed=10)==([1,1,1],[1,1,1]),\"tc3 failed\"\nassert gen_hmm_data([0.3,0.3],[[1,0],[0,1]],[[1,0],[0,1]],4)==-1,\"tc5 failed\"\nassert gen_hmm_data([0.5,0.5],[[0.5,0.5],[0.5,0.5]],[[0.5,0.5],[0.5,0.5]],2,seed=0)==([1,1],[1,1]),\"tc6 failed\"\nassert gen_hmm_data([0,0,1],[[0,0,1],[0,1,0],[0,0,1]],[[0,1],[1,0],[1,0]],3,seed=21)==([2,2,2],[0,0,0]),\"tc7 failed\"\nassert gen_hmm_data([1],[[1]],[[0,1]],4)==([0,0,0,0],[1,1,1,1]),\"tc8 failed\"\nassert gen_hmm_data([0.5,0.5],[[1,0],[0,1]],[[0.7,0.3],[0.2,0.8]],1,seed=123)==([1],[1]),\"tc9 failed\""}
{"task_id": 68, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1.0 - momentum) * grad\n    updated_w = w - learning_rate * new_update\n    updated_w_list = np.round(updated_w, 4).tolist()\n    new_update_list = np.round(new_update, 4).tolist()\n    return (updated_w_list, new_update_list)\nassert sgd_momentum_update(np.array([1.0, 2.0]), np.array([0.1, -0.2]), 0.1, 0.9, None) == ([0.999, 2.002], [0.01, -0.02]), \"failed on basic initial step\"\nassert sgd_momentum_update(np.array([0.5]), np.array([0.2]), 0.05, 0.8, np.array([0.03])) == ([0.4968], [0.064]), \"failed when previous update is given\"\nassert sgd_momentum_update(np.array([2.0, -3.0]), np.array([-0.5, 0.5]), 0.01, 0.0, None) == ([2.005, -3.005], [-0.5, 0.5]), \"failed with zero momentum\"\nassert sgd_momentum_update(np.array([1.0]), np.array([0.1]), 0.1, 1.0, np.array([0.2])) == ([0.98], [0.2]), \"failed with momentum equal to 1\"\nassert sgd_momentum_update(np.array([10.0]), np.array([1.0]), 0.001, 0.5, None) == ([9.9995], [0.5]), \"failed scalar update with 0.5 momentum\"\nassert sgd_momentum_update(np.array([1.0, 2.0, 3.0]), np.array([0.0, 0.0, 1.0]), 0.1, 0.5, np.zeros(3)) == ([1.0, 2.0, 2.95], [0.0, 0.0, 0.5]), \"failed on higher-dim vector\"\nassert sgd_momentum_update(np.zeros(2), np.ones(2), 0.5, 0.8, None) == ([-0.1, -0.1], [0.2, 0.2]), \"failed on zero parameters\"\nassert sgd_momentum_update(np.array([5.0]), np.array([-2.0]), 0.01, 0.7, np.array([-0.5])) == ([5.0095], [-0.95]), \"failed on negative gradient and prev_update\"\nassert sgd_momentum_update(np.array([[0.0,1.0],[1.0,0.0]]), np.array([[0.5,0.0],[0.0,0.5]]), 0.2, 0.6, np.full((2,2),0.1)) == ([[-0.052,0.988],[0.988,-0.052]], [[0.26,0.06],[0.06,0.26]]), \"failed on mixed matrix with previous velocity\""}
{"task_id": 69, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0 or not observations:\n        return -1\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if len(B) != n or len(B[0]) == 0:\n        return -1\n    m = len(B[0])\n    if any((len(row) != m for row in B)):\n        return -1\n    for o in observations:\n        if o < 0 or o >= m:\n            return -1\n    S = np.asarray(S, dtype=float)\n    A = np.asarray(A, dtype=float)\n    B = np.asarray(B, dtype=float)\n    alpha = S * B[:, observations[0]]\n    for ot in observations[1:]:\n        alpha = B[:, ot] * (alpha @ A)\n    likelihood = float(alpha.sum())\n    return round(likelihood, 4)\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [0,1,2]) == 0.0363, \"failed: basic 2-state example\"\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [1]) == 0.36, \"failed: single observation\"\nassert forward_algorithm([1.0,0.0], [[0.5,0.5],[0.2,0.8]], [[0.6,0.4],[0.3,0.7]], [0,1,1]) == 0.2004, \"failed: asymmetric model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [2,0]) == 0.097, \"failed: different start distribution\"\nassert forward_algorithm([1.0], [[1.0]], [[0.2,0.3]], [1,1,0]) == 0.018, \"failed: single-state model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.5]], [0]) == -1, \"failed: B wrong dimensions\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [-1,0]) == -1, \"failed: negative observation index\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [0,2]) == -1, \"failed: observation index out of range\"\nassert forward_algorithm([], [], [], [0]) == -1, \"failed: empty S\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3]], [[0.5,0.5],[0.5,0.5]], [0]) == -1, \"failed: A not square\""}
{"task_id": 70, "completion_id": 0, "passed": false, "result": "failed: Forward reference must be an expression -- got '._FPNode'", "solution": "from collections import Counter, defaultdict\nfrom collections import Counter\nfrom typing import Optional, Dict, List\nclass _FPNode:\n    \"\"\"A node in an FP-tree.\"\"\"\n    __slots__ = ('item', 'count', 'parent', 'children', 'link')\n\n    def __init__(self, item: Optional[str], parent: Optional['._FPNode']):\n        self.item: Optional[str] = item\n        self.count: int = 0\n        self.parent: Optional['_FPNode'] = parent\n        self.children: Dict[str, _FPNode] = {}\n        self.link: Optional['_FPNode'] = None\ndef _build_fp_tree(transactions: List[List[str]], min_support: int) -> tuple[Optional[_FPNode], Optional[dict]]:\n    \"\"\"\n    Build an FP-tree and the accompanying header table from *transactions*.\n    Returns (root, header_table) or (None, None) if the tree would be empty.\n    The header table maps an item -> [support, head-of-node-link].\n    \"\"\"\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    freq = {item: c for (item, c) in freq.items() if c >= min_support}\n    if not freq:\n        return (None, None)\n    header: dict[str, list] = {i: [c, None] for (i, c) in freq.items()}\n    root = _FPNode(None, None)\n    for transaction in transactions:\n        filtered = [i for i in transaction if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=lambda x: (-freq[x], x))\n        current = root\n        for item in ordered:\n            if item in current.children:\n                child = current.children[item]\n                child.count += 1\n            else:\n                child = _FPNode(item, current)\n                child.count = 1\n                current.children[item] = child\n                head = header[item][1]\n                if head is None:\n                    header[item][1] = child\n                else:\n                    while head.link is not None:\n                        head = head.link\n                    head.link = child\n            current = child\n    return (root, header)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings). `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result is deterministic:\n      \u2022 inside each item-set items are sorted alphabetically;\n      \u2022 the outer list is sorted by `(len(itemset), itemset)`.\n    \"\"\"\n    if not transactions or min_support < 1:\n        return []\n    (root, header) = _build_fp_tree(transactions, min_support)\n    if header is None:\n        return []\n    frequent_itemsets: list[list[str]] = []\n    _mine_tree(header, [], frequent_itemsets, min_support)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\nassert fp_growth([], 1) == [], \"test case failed: empty dataset\"\nassert fp_growth([[\"x\", \"y\"]], 2) == [], \"test case failed: single transaction, high support\"\nassert fp_growth([[\"x\", \"y\"]], 1) == [[\"x\"], [\"y\"], [\"x\", \"y\"]], \"test case failed: single transaction, min_support=1\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 4) == [], \"test case failed: support greater than number of transactions\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: small data set min_support=2\"\nassert fp_growth([[\"a\", \"b\", \"c\"]]*3, 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"b\", \"c\"]], \"test case failed: identical transactions\"\nassert fp_growth([[\"bread\", \"milk\"], [\"bread\", \"diaper\", \"beer\", \"egg\"], [\"milk\", \"diaper\", \"beer\", \"coke\"], [\"bread\", \"milk\", \"diaper\", \"beer\"], [\"bread\", \"milk\", \"diaper\", \"coke\"]], 2) == [[\"beer\"], [\"bread\"], [\"coke\"], [\"diaper\"], [\"milk\"], [\"beer\", \"bread\"], [\"beer\", \"diaper\"], [\"beer\", \"milk\"], [\"bread\", \"diaper\"], [\"bread\", \"milk\"], [\"coke\", \"diaper\"], [\"coke\", \"milk\"], [\"diaper\", \"milk\"], [\"beer\", \"bread\", \"diaper\"], [\"beer\", \"diaper\", \"milk\"], [\"bread\", \"diaper\", \"milk\"], [\"coke\", \"diaper\", \"milk\"]], \"test case failed: example data min_support=2\"\nassert fp_growth([[\"a\", \"b\"], [\"b\", \"c\"], [\"a\", \"c\"], [\"a\", \"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: mixed transactions\"\nassert fp_growth([[\"d\"]], 1) == [[\"d\"]], \"test case failed: single item single transaction\""}
{"task_id": 71, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function returns a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    counts: dict = {}\n    for sample in data:\n        if not sample:\n            raise ValueError('Each sample must contain at least one element (the label).')\n        label = sample[-1]\n        counts[label] = counts.get(label, 0) + 1\n    return counts\nassert label_uniq_cnt([[1, 2, 'A'], [3, 5, 'B'], [7, 1, 'A']]) == {'A': 2, 'B': 1}, \"test case failed: multiple labels\"\nassert label_uniq_cnt([[0, 'cat'], [4, 'dog'], [9, 'dog'], [3, 'cat'], [1, 'cat']]) == {'cat': 3, 'dog': 2}, \"test case failed: string labels\"\nassert label_uniq_cnt([[0.2, 5.1, 1], [1.3, 3.3, 1], [9.0, 2.2, 2]]) == {1: 2, 2: 1}, \"test case failed: numeric labels\"\nassert label_uniq_cnt([[42, 'single']]) == {'single': 1}, \"test case failed: single sample\"\nassert label_uniq_cnt([[5, 7, 'same'], [1, 2, 'same'], [3, 4, 'same']]) == {'same': 3}, \"test case failed: all same label\"\nassert label_uniq_cnt([]) == {}, \"test case failed: empty data set\"\nassert label_uniq_cnt([[1,2,3,'x'],[2,3,4,'y'],[3,4,5,'x'],[4,5,6,'z']]) == {'x':2,'y':1,'z':1}, \"test case failed: longer samples\"\nassert label_uniq_cnt([[True, False, True, 'yes'], [False, True, False, 'no'], [True, True, True, 'yes']]) == {'yes':2,'no':1}, \"test case failed: boolean features\"\nassert label_uniq_cnt([[('tuple',1), 'T'], [('tuple',2), 'T'], [('tuple',3), 'S']]) == {'T':2,'S':1}, \"test case failed: tuple feature\"\nassert label_uniq_cnt([[1,'A'],[2,'B'],[3,'C'],[4,'D']]) == {'A':1,'B':1,'C':1,'D':1}, \"test case failed: all unique labels\""}
{"task_id": 72, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Compute the variance reduction obtained by splitting the parent\u2010node targets ``y`` into\n    the two child nodes ``y_left`` and ``y_right`` in a regression tree.\n\n    Variance reduction (VR) is defined as\n        VR = Var(y) - (n_left / n) * Var(y_left) - (n_right / n) * Var(y_right)\n\n    where Var(\u00b7) is the (population) variance computed feature-wise and then summed over\n    all features to yield a single scalar. ``n``, ``n_left`` and ``n_right`` denote the\n    number of samples in the parent and the two children, respectively.\n\n    The function returns the VR rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Target values in the parent node, shape (n_samples, n_targets) or (n_samples,).\n    y_left : np.ndarray\n        Target values that would go to the left child, non-empty.\n    y_right : np.ndarray\n        Target values that would go to the right child, non-empty.\n\n    Returns\n    -------\n    float\n        The variance reduction produced by the split, rounded to 4 decimals.\n    \"\"\"\n\n    def total_variance(arr: np.ndarray) -> float:\n        \"\"\"\n        Population variance summed over all target dimensions.\n        \"\"\"\n        return np.var(arr, axis=0).sum()\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    var_parent = total_variance(y)\n    var_left = total_variance(y_left)\n    var_right = total_variance(y_right)\n    vr = var_parent - n_left / n * var_left - n_right / n * var_right\n    return round(float(vr), 4)\nassert variance_reduction(np.array([3,7,4,6]), np.array([3,4]), np.array([7,6])) == 2.25, \"failed on simple 1-D split\"\nassert variance_reduction(np.array([1,1,1,1]), np.array([1,1]), np.array([1,1])) == 0.0, \"failed when all variances are zero\"\nassert variance_reduction(np.array([[1,2],[3,4],[5,6]]), np.array([[1,2]]), np.array([[3,4],[5,6]])) == 4.0, \"failed on 2-D target\"\nassert variance_reduction(np.array([-3,-1,-4,-2]), np.array([-3,-4]), np.array([-1,-2])) == 1.0, \"failed on negative values\"\nassert variance_reduction(np.column_stack((np.arange(5), np.arange(5,10))), np.column_stack((np.arange(3), np.arange(5,8))), np.column_stack((np.arange(3,5), np.arange(8,10)))) == 3.0, \"failed on larger 2-D input\"\nassert variance_reduction(np.array([[2,2],[2,2],[2,2]]), np.array([[2,2]]), np.array([[2,2],[2,2]])) == 0.0, \"failed on identical multi-output\"\nassert variance_reduction(np.array([0,1]), np.array([0]), np.array([1])) == 0.25, \"failed on minimal split\""}
{"task_id": 74, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array that is treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The positive-frequency magnitude spectrum of every frame\n        (length N//2+1), rounded to four decimals.\n    \"\"\"\n    frames = np.asarray(frames)\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]\n    elif frames.ndim != 2:\n        raise ValueError('Input must be a 1-D or 2-D NumPy array.')\n    spectrum = np.abs(np.fft.rfft(frames, axis=-1))\n    spectrum = np.round(spectrum, 4)\n    return spectrum.tolist()\nassert magnitude_spectrum(np.array([[1.0, 0.0, -1.0, 0.0]])) == [[0.0, 2.0, 0.0]], \"test case failed: single frame [1,0,-1,0]\"\nassert magnitude_spectrum(np.array([[1,1,1,1]])) == [[4.0, 0.0, 0.0]], \"test case failed: constant frame ones length 4\"\nassert magnitude_spectrum(np.array([[1,0,0,0,0,0,0,0]])) == [[1.0,1.0,1.0,1.0,1.0]], \"test case failed: impulse length 8\"\nassert magnitude_spectrum(np.array([[0,0,0,0]])) == [[0.0,0.0,0.0]], \"test case failed: all zeros\"\nassert magnitude_spectrum(np.array([1.0, 0.0, -1.0, 0.0])) == [[0.0, 2.0, 0.0]], \"test case failed: 1-D input\"\nassert magnitude_spectrum(np.array([[1,1,1,1],[1,0,-1,0]])) == [[4.0,0.0,0.0],[0.0,2.0,0.0]], \"test case failed: two frames batch\"\nassert magnitude_spectrum(np.zeros((2,6))) == [[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]], \"test case failed: zeros batch 6 samples\"\nassert magnitude_spectrum(np.array([[1,2,3,4]])) == [[10.0,2.8284,2.0]], \"test case failed: frame [1,2,3,4]\"\nassert magnitude_spectrum(np.array([[2,2,2,2],[0,0,0,0]])) == [[8.0,0.0,0.0],[0.0,0.0,0.0]], \"test case failed: constant twos and zeros\""}
{"task_id": 75, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbour classifier (Euclidean metric).\n\n    Returns a list with the predicted class for every row in `X_test`.\n    If *k* is not a positive integer or *k* > n_train the function\n    returns the scalar -1 (as required by the specification).\n    \"\"\"\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.asarray(X_train, dtype=float)\n    X_test = np.asarray(X_test, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    preds: list[int] = []\n    for x in X_test:\n        diff = X_train - x\n        dists = np.einsum('ij,ij->i', diff, diff)\n        if k == 1:\n            nn_idx = [int(np.argmin(dists))]\n        else:\n            nn_idx = np.argpartition(dists, k - 1)[:k]\n        votes: dict[int, int] = {}\n        for lbl in y_train[nn_idx]:\n            votes[int(lbl)] = votes.get(int(lbl), 0) + 1\n        max_vote = max(votes.values())\n        winner = min((lbl for (lbl, cnt) in votes.items() if cnt == max_vote))\n        preds.append(winner)\n    return preds\nassert knn_predict([[1,2],[2,3],[3,4]],[0,1,1],[[2,2]],2)==[0],\"failed on single sample, tie case\"\nassert knn_predict([[0,0],[1,1],[2,2],[3,3]],[1,1,0,0],[[1.1,1.1],[2.9,3.1]],3)==[1,0],\"failed on multi predict\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],1)==[0],\"failed on k=1\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],3)==[0],\"failed on k==n_train\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,2,2],[[0.9,0.9]],2)==[2],\"failed on majority >1\"\nassert knn_predict([[1,1]], [3], [[2,2],[0,0]], 1)==[3,3],\"failed on single-point training set\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],2)==[0],\"failed on tie chooses smaller label\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],0)==-1,\"failed on invalid k=0\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],3)==-1,\"failed on k>n_train\"\nassert knn_predict([[1,2],[2,1],[0,0],[2,2]],[1,1,0,0],[[1,1]],2)==[1],\"failed on mixed labels\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities (same shape).\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    eps = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + eps))\n    return float(np.round(loss, 4))\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]):\n    \"\"\"Forward propagation for an L-layer fully-connected neural network\n    that uses ReLU in all hidden layers and a sigmoid in the output layer.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing weights W1 \u2026 WL and biases b1 \u2026 bL.\n\n    Returns\n    -------\n    tuple[list[list[float]], list]\n        \u2022 AL_list  \u2013 the final activation rounded to 4 decimals\n                     and converted to a regular Python list.\n        \u2022 caches   \u2013 list with one cache per layer (kept for a backward pass).\n    \"\"\"\n\n    def linear_forward(A_prev, W, b):\n        Z = W @ A_prev + b\n        return (Z, (A_prev, W, b))\n\n    def relu(Z):\n        A = np.maximum(0, Z)\n        return (A, Z)\n\n    def sigmoid(Z):\n        A = 1.0 / (1.0 + np.exp(-Z))\n        return (A, Z)\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        (Z, lin_cache) = linear_forward(A, W, b)\n        (A, act_cache) = relu(Z)\n        caches.append((lin_cache, act_cache))\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    (ZL, lin_cache) = linear_forward(A, WL, bL)\n    (AL, act_cache) = sigmoid(ZL)\n    caches.append((lin_cache, act_cache))\n    AL_list = np.round(AL, 4).tolist()\n    return (AL_list, caches)\nassert L_model_forward(X1, params1) == [[0.5374, 0.5671]], \"test case failed: example input\"\nassert L_model_forward(X2, params2) == [[0.5]], \"test case failed: zero weights and bias\"\nassert L_model_forward(X2, params3) == [[0.7311]], \"test case failed: bias = 1\"\nassert L_model_forward(X4, params4) == [[0.5]], \"test case failed: two-layer, Z=0\"\nassert L_model_forward(X5, params5) == [[0.5]], \"test case failed: ReLU zeros\"\nassert L_model_forward(X6, params6) == [[0.8808, 0.5]], \"test case failed: batch of 2 examples\"\nassert L_model_forward(X7, params7) == [[0.3775]], \"test case failed: mixed weights\"\nassert L_model_forward(X8, params8) == [[0.2689]], \"test case failed: negative bias\"\nassert L_model_forward(X9, params9) == [[0.6457]], \"test case failed: realistic 2-layer\"\nassert L_model_forward(X10, params10) == [[0.4502]], \"test case failed: small negative Z\""}
{"task_id": 78, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step and return the updated state.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates.\n        u:       Exponentially weighted infinity-norms.\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        (new_params, new_m, new_u, new_t) with every float rounded to 6 decimals.\n    \"\"\"\n    params_arr = np.asarray(params, dtype=np.float64)\n    grads_arr = np.asarray(grads, dtype=np.float64)\n    m_arr = np.asarray(m, dtype=np.float64)\n    u_arr = np.asarray(u, dtype=np.float64)\n    m_t = beta1 * m_arr + (1.0 - beta1) * grads_arr\n    u_t = np.maximum(beta2 * u_arr, np.abs(grads_arr))\n    step_size = learning_rate / (1.0 - beta1 ** t)\n    step = step_size * (m_t / (u_t + epsilon))\n    new_params = params_arr - step\n    new_t = t + 1\n    round_params = np.round(new_params, 6).tolist()\n    round_m = np.round(m_t, 6).tolist()\n    round_u = np.round(u_t, 6).tolist()\n    return (round_params, round_m, round_u, new_t)\nassert adamax_step([1.0, 2.0], [0.1, -0.2], [0.0, 0.0], [0.0, 0.0], 1) == ([0.998, 2.002], [0.01, -0.02], [0.1, 0.2], 2), \"test case failed: basic two-dim update\"\nassert adamax_step([1.5], [0.5], [0.0], [0.0], 1) == ([1.498], [0.05], [0.5], 2), \"test case failed: positive grad single dim\"\nassert adamax_step([-1.0], [-1.0], [0.0], [0.0], 1) == ([-0.998], [-0.1], [1.0], 2), \"test case failed: negative grad single dim\"\nassert adamax_step([0.0, 0.0, 0.0], [1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 1) == ([-0.002, -0.002, -0.002], [0.1, 0.2, 0.3], [1.0, 2.0, 3.0], 2), \"test case failed: three-dim positive grads\"\nassert adamax_step([5.0, -3.0], [-2.0, 4.0], [0.0, 0.0], [0.0, 0.0], 1) == ([5.002, -3.002], [-0.2, 0.4], [2.0, 4.0], 2), \"test case failed: mixed sign grads\"\nassert adamax_step([1.498], [0.5], [0.05], [0.5], 2) == ([1.496], [0.095], [0.5], 3), \"test case failed: consecutive update positive grad\"\nassert adamax_step([-0.998], [-1.0], [-0.1], [1.0], 2) == ([-0.996], [-0.19], [1.0], 3), \"test case failed: consecutive update negative grad\"\nassert adamax_step([-0.002, -0.002, -0.002], [1.0, 2.0, 3.0], [0.1, 0.2, 0.3], [1.0, 2.0, 3.0], 2) == ([-0.004, -0.004, -0.004], [0.19, 0.38, 0.57], [1.0, 2.0, 3.0], 3), \"test case failed: consecutive update three-dim\"\nassert adamax_step([0.0], [0.3], [0.0], [0.0], 1) == ([-0.002], [0.03], [0.3], 2), \"test case failed: small positive grad\"\nassert adamax_step([0.0], [-0.3], [0.0], [0.0], 1) == ([0.002], [-0.03], [0.3], 2), \"test case failed: small negative grad\""}
{"task_id": 80, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform ONE Adadelta update assuming both running averages are zero.\"\"\"\n    w = np.asarray(w, dtype=np.float64)\n    grad_w = np.asarray(grad_w, dtype=np.float64)\n    one_minus_rho = 1.0 - rho\n    E_grad = one_minus_rho * grad_w ** 2\n    RMS_grad = np.sqrt(E_grad + eps)\n    RMS_delta = np.sqrt(eps)\n    adaptive_lr = RMS_delta / RMS_grad\n    delta_w = adaptive_lr * grad_w\n    E_delta = one_minus_rho * delta_w ** 2\n    w_new = w - delta_w\n    return np.round(w_new, 4).tolist()\nassert adadelta_update([1, 2], [0, 0]) == [1.0, 2.0], \"test failed: zero gradient\"\nassert adadelta_update([1, 2], [1, 1]) == [0.9955, 1.9955], \"test failed: grad=[1,1]\"\nassert adadelta_update([1, 2], [1, -1]) == [0.9955, 2.0045], \"test failed: grad=[1,-1]\"\nassert adadelta_update([1, 2], [10, -10]) == [0.9955, 2.0045], \"test failed: large gradients\"\nassert adadelta_update([0, 0, 0], [1, -2, 0.5]) == [-0.0045, 0.0045, -0.0045], \"test failed: mixed gradients\"\nassert adadelta_update([-1, -2], [5, -5]) == [-1.0045, -1.9955], \"test failed: negative weights\"\nassert adadelta_update([3.1415], [0]) == [3.1415], \"test failed: single weight zero grad\"\nassert adadelta_update([100, 200], [50, 50]) == [99.9955, 199.9955], \"test failed: large weights\"\nassert adadelta_update([0.5, -0.5], [-0.1, 0.1]) == [0.5045, -0.5045], \"test failed: sign check\"\nassert adadelta_update([1, 1, 1, 1], [0, 1, 2, 3]) == [1.0, 0.9955, 0.9955, 0.9955], \"test failed: partial zero grad\""}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n    \n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n    \n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1.0 - eps)\n    m = Y.size\n    cost = -np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2)) / m\n    return float(np.round(cost, 6))\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft action\u2013selection probabilities.\n\n    Parameters\n    ----------\n    Q : 1-D sequence (list or np.ndarray)\n        Q-values for every available action in the current state.\n    epsilon : float\n        Exploration parameter 0 \u2264 \u03b5 \u2264 1.\n\n    Returns\n    -------\n    list[float]\n        A list with the probability of choosing every action under the \u03b5-soft\n        policy.  All probabilities are rounded to 4 decimal places and sum to\n        1 (within 1\u00d710\u207b\u00b9\u00b2).\n    \"\"\"\n    q = np.asarray(Q, dtype=float).ravel()\n    if q.ndim != 1:\n        raise ValueError('Q must be a one-dimensional sequence of numbers.')\n    if not 0.0 <= epsilon <= 1.0:\n        raise ValueError('epsilon must satisfy 0 \u2264 \u03b5 \u2264 1.')\n    n = q.size\n    if n == 0:\n        raise ValueError('Q must contain at least one action.')\n    greedy_idx = int(np.argmax(q))\n    base_prob = epsilon / n\n    probs = np.full(n, base_prob, dtype=float)\n    probs[greedy_idx] += 1.0 - epsilon\n    ticks = probs * 10000.0\n    int_part = np.floor(ticks).astype(int)\n    remainder = ticks - int_part\n    deficit = 10000 - int_part.sum()\n    if deficit > 0:\n        order = np.argsort(-remainder)\n        int_part[order[:deficit]] += 1\n    elif deficit < 0:\n        order = np.argsort(remainder)\n        int_part[order[:-deficit]] -= 1\n    final_probs = int_part / 10000.0\n    if abs(final_probs.sum() - 1.0) > 1e-12:\n        raise RuntimeError('Probabilities do not sum to one within tolerance.')\n    return final_probs.round(4).tolist()\nassert epsilon_soft([1.2, 0.3, 1.2, -0.1], 0.1) == [0.925, 0.025, 0.025, 0.025], \"Test-1 failed: tie situation with \u03b5 = 0.1\"\nassert epsilon_soft([5, 6, 7], 0) == [0.0, 0.0, 1.0], \"Test-2 failed: \u03b5 = 0 (pure greedy)\"\nassert epsilon_soft([2, 2, 2], 0.3) == [0.8, 0.1, 0.1], \"Test-3 failed: all equal Q-values\"\nassert epsilon_soft([-1, -5], 1) == [0.5, 0.5], \"Test-4 failed: \u03b5 = 1 (fully uniform)\"\nassert epsilon_soft([0], 0.5) == [1.0], \"Test-5 failed: single action case\"\nassert epsilon_soft([10, 0, -1, 8], 0.2) == [0.85, 0.05, 0.05, 0.05], \"Test-6 failed: general case\"\nassert len(epsilon_soft([1, 2, 3, 4, 5], 0.4)) == 5, \"Test-10 failed: wrong output length\""}
{"task_id": 84, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean-squared-error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        True target values.\n    y_pred : np.ndarray\n        Current model predictions.\n    h_pred : np.ndarray\n        Predictions of the new base learner.\n\n    Returns\n    -------\n    float\n        Optimal step size \u03b3 rounded to four decimal places.  If all h_pred are\n        zero (perfect residual fit) the function returns 1.0.\n    \"\"\"\n    residual = y - y_pred\n    numerator = np.dot(residual, h_pred)\n    denominator = np.dot(h_pred, h_pred)\n    if np.isclose(denominator, 0.0):\n        gamma = 1.0\n    else:\n        gamma = numerator / denominator\n    return float(round(gamma, 4))\nassert mse_line_search(np.array([1.0]), np.array([0.0]), np.array([1.0])) == 1.0, \"failed on single element perfect fit\"\nassert mse_line_search(np.array([3, -0.5, 2]), np.array([2.5, 0.0, 2]), np.array([-0.5, 0.5, 0])) == -1.0, \"failed on example with negative gamma\"\nassert mse_line_search(np.array([0, 0]), np.array([0, 0]), np.array([1, 1])) == 0.0, \"failed on zero numerator\"\nassert mse_line_search(np.array([1, 2, 3]), np.array([1, 2, 3]), np.array([1, 2, 3])) == 0.0, \"failed when residuals are zero\"\nassert mse_line_search(np.array([1, 2]), np.array([0, 0]), np.array([0, 0])) == 1.0, \"failed when h_pred is all zeros\"\nassert mse_line_search(np.array([2, 4, 6]), np.array([1, 3, 5]), np.array([1, 1, 1])) == 1.0, \"failed on uniform positive residuals\"\nassert mse_line_search(np.array([1, 2, 3, 4]), np.array([4, 3, 2, 1]), np.array([-3, -1, 1, 3])) == 1.0, \"failed on symmetric residuals\"\nassert mse_line_search(np.array([1, 3]), np.array([2, 2]), np.array([0.5, -0.5])) == -2.0, \"failed on fractional h_pred\"\nassert mse_line_search(np.array([1]), np.array([1]), np.array([0])) == 1.0, \"failed on single zero h_pred\"\nassert mse_line_search(np.array([10, 20, 30, 40, 50]), np.array([8, 18, 26, 39, 49]), np.array([2, 2, 4, 1, 1])) == 1.0, \"failed on larger array\""}
{"task_id": 85, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"Perform one gradient\u2013descent update step for multi-class Softmax regression.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Input samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weight matrix of shape (D, C).\n    lr : float\n        Learning-rate (if 0 \u2192 no update).\n    \n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimals.\n    \"\"\"\n    if lr == 0 or np.all(X == 0):\n        return np.round(W, 4).tolist()\n    N = X.shape[0]\n    Z = X @ W\n    Z_shift = Z - np.max(Z, axis=1, keepdims=True)\n    exp_Z = np.exp(Z_shift)\n    Y_hat = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n    grad = X.T @ (Y_hat - Y) / N\n    W_new = W - lr * grad\n    return np.round(W_new, 4).tolist()\nassert softmax_regression_step(np.array([[1,2],[3,4]]), np.array([[1,0],[0,1]]), np.array([[0.1,0.2],[0.3,0.4]]), 0.1) == [[0.079, 0.221], [0.2911, 0.4089]], \"test case failed: basic 2\u00d72 example\"\nassert softmax_regression_step(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]]), np.zeros((2,2)), 0.1) == [[0.025, -0.025], [-0.025, 0.025]], \"test case failed: identity data\"\nassert softmax_regression_step(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.eye(3), np.zeros((3,3)), 0.1) == [[-0.1, 0.0, 0.1], [-0.1, 0.0, 0.1], [-0.1, 0.0, 0.1]], \"test case failed: 3-class symmetric\"\nassert softmax_regression_step(np.eye(3), np.eye(3), np.zeros((3,3)), 0.5) == [[0.1111, -0.0556, -0.0556], [-0.0556, 0.1111, -0.0556], [-0.0556, -0.0556, 0.1111]], \"test case failed: larger learning rate\"\nassert softmax_regression_step(np.array([[1,2],[3,4],[5,6]]), np.array([[1,0],[1,0],[1,0]]), np.zeros((2,2)), 0.1) == [[0.15, -0.15], [0.2, -0.2]], \"test case failed: all same class\"\nassert softmax_regression_step(np.array([[1,1]]), np.array([[0,1]]), np.zeros((2,2)), 1.0) == [[-0.5, 0.5], [-0.5, 0.5]], \"test case failed: single sample\"\nassert softmax_regression_step(np.array([[1,0],[0,1]]), np.array([[1,0,0],[0,0,1]]), np.zeros((2,3)), 0.3) == [[0.1, -0.05, -0.05], [-0.05, -0.05, 0.1]], \"test case failed: 3-class diagonal\"\nassert softmax_regression_step(np.array([[1,2],[3,4]]), np.array([[1,0],[0,1]]), np.array([[0.1,0.2],[0.3,0.4]]), 0.0) == [[0.1, 0.2], [0.3, 0.4]], \"test case failed: zero learning rate\"\nassert softmax_regression_step(np.array([[1,2,3,4]]), np.array([[0,0,1]]), np.zeros((4,3)), 0.2) == [[-0.0667, -0.0667, 0.1333], [-0.1333, -0.1333, 0.2667], [-0.2, -0.2, 0.4], [-0.2667, -0.2667, 0.5333]], \"test case failed: 1\u00d74 sample 3-class\"\nassert softmax_regression_step(np.zeros((2,2)), np.array([[1,0],[0,1]]), np.zeros((2,2)), 1.0) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zero data matrix\""}
{"task_id": 86, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import List, Union\nLabel = Union[int, float, str]\ndef aggregate_random_forest_votes(predictions: List[List[Label]]) -> List[Label]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not predictions[0]:\n        return []\n    n_samples = len(predictions[0])\n    majority_votes: List[Label] = []\n    for idx in range(n_samples):\n        votes = [tree_preds[idx] for tree_preds in predictions]\n        vote_counts = Counter(votes)\n        max_count = max(vote_counts.values())\n        tied_labels = [label for (label, cnt) in vote_counts.items() if cnt == max_count]\n        majority_votes.append(min(tied_labels))\n    return majority_votes\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 87, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) that contains the input data,\n           stored column-wise (each column is one example).\n        Y: 2-D NumPy array of shape (n_y, m) that contains the labels,\n           stored column-wise.\n\n    Returns:\n        A tuple (n_x, n_h, n_y) where\n            n_x \u2013 number of input features  (rows of X),\n            n_h \u2013 size of the hidden layer (fixed to 10),\n            n_y \u2013 number of output units    (rows of Y).\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)\nassert layer_sizes(np.zeros((3, 5)), np.zeros((1, 5))) == (3, 10, 1), \"failed on (3x5,1x5)\"\nassert layer_sizes(np.zeros((1, 10)), np.zeros((1, 10))) == (1, 10, 1), \"failed on (1x10,1x10)\"\nassert layer_sizes(np.zeros((8, 2)), np.zeros((4, 2))) == (8, 10, 4), \"failed on (8x2,4x2)\"\nassert layer_sizes(np.zeros((6, 9)), np.zeros((3, 9))) == (6, 10, 3), \"failed on (6x9,3x9)\"\nassert layer_sizes(np.zeros((10, 1)), np.zeros((5, 1))) == (10, 10, 5), \"failed on (10x1,5x1)\"\nassert layer_sizes(np.zeros((2, 7)), np.zeros((2, 7))) == (2, 10, 2), \"failed on (2x7,2x7)\"\nassert layer_sizes(np.zeros((4, 4)), np.zeros((6, 4))) == (4, 10, 6), \"failed on (4x4,6x4)\"\nassert layer_sizes(np.zeros((9, 3)), np.zeros((3, 3))) == (9, 10, 3), \"failed on (9x3,3x3)\"\nassert layer_sizes(np.zeros((12, 6)), np.zeros((2, 6))) == (12, 10, 2), \"failed on (12x6,2x6)\"\nassert layer_sizes(np.zeros((5, 20)), np.zeros((8, 20))) == (5, 10, 8), \"failed on (5x20,8x20)\""}
{"task_id": 88, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    is_scalar = np.isscalar(z) or (isinstance(z, np.ndarray) and z.shape == ())\n    z_arr = np.asarray(z, dtype=float)\n    soft = np.logaddexp(0.0, z_arr)\n    soft = np.round(soft, 4)\n    if is_scalar:\n        return float(soft)\n    else:\n        return soft.tolist()\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 89, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        Activation to use: \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        (A_as_list, (linear_cache, activation_cache))\n        where A_as_list is rounded to 4 decimals and converted to a list.\n    \"\"\"\n    Z = W @ A_prev + b\n    linear_cache = (A_prev, W, b)\n    if activation.lower() == 'relu':\n        A = np.maximum(0, Z)\n    elif activation.lower() == 'sigmoid':\n        A = 1.0 / (1.0 + np.exp(-Z))\n    else:\n        raise ValueError('activation must be either \"relu\" or \"sigmoid\"')\n    assert A.shape == (W.shape[0], A_prev.shape[1]), f'Output shape {A.shape} does not match expected {(W.shape[0], A_prev.shape[1])}'\n    activation_cache = Z\n    A_out = A.round(4).tolist()\n    cache = (linear_cache, activation_cache)\n    return (A_out, cache)\nassert linear_activation_forward(np.array([[1, 2], [3, 4]]), np.array([[0.2, 0.8]]), np.array([[0.1]]), \"sigmoid\")[0] == [[0.937, 0.9759]], \"test case 1 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4]]), np.array([[0.2, 0.8]]), np.array([[0.1]]), \"relu\")[0] == [[2.7, 3.7]], \"test case 2 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, -1, 0.5], [0.5, 0.5, 0.5]]), np.array([[0.0], [1.0]]), \"relu\")[0] == [[0.5, 1.0], [5.5, 7.0]], \"test case 3 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, -1, 0.5], [0.5, 0.5, 0.5]]), np.array([[0.0], [1.0]]), \"sigmoid\")[0] == [[0.6225, 0.7311], [0.9959, 0.9991]], \"test case 4 failed\"\nassert linear_activation_forward(np.array([[0, -1, 2]]), np.array([[-3]]), np.array([[0]]), \"relu\")[0] == [[0.0, 3.0, 0.0]], \"test case 5 failed\"\nassert linear_activation_forward(np.array([[0, -1, 2]]), np.array([[-3]]), np.array([[0]]), \"sigmoid\")[0] == [[0.5, 0.9526, 0.0025]], \"test case 6 failed\"\nassert linear_activation_forward(np.array([[1], [2]]), np.array([[1, 1], [-1, 2]]), np.array([[0.5], [-0.5]]), \"sigmoid\")[0] == [[0.9707], [0.9241]], \"test case 7 failed\"\nassert linear_activation_forward(np.array([[1], [2]]), np.array([[1, 1], [-1, 2]]), np.array([[0.5], [-0.5]]), \"relu\")[0] == [[3.5], [2.5]], \"test case 8 failed\"\nassert linear_activation_forward(np.array([[1], [-1]]), np.array([[2, 3]]), np.array([[-0.5]]), \"relu\")[0] == [[0.0]], \"test case 9 failed\"\nassert linear_activation_forward(np.array([[0], [0]]), np.array([[2, 3]]), np.array([[-0.5]]), \"sigmoid\")[0] == [[0.3775]], \"test case 10 failed\""}
{"task_id": 90, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef _get_field(obj: Any, name: str):\n    \"\"\"Return attribute or (key) item `name` from `obj`, else raise KeyError.\"\"\"\n    if hasattr(obj, name):\n        return getattr(obj, name)\n    try:\n        return obj[name]\n    except Exception as exc:\n        raise KeyError(f'{name!r} not found in supplied object.') from exc\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Mean-squared error between a policy\u2019s value estimates and the truth.\"\"\"\n    try:\n        arm_evs = _get_field(bandit, 'arm_evs')\n    except KeyError:\n        raise ValueError('`bandit` must supply an `arm_evs` field.')\n    try:\n        ev_estimates = _get_field(policy, 'ev_estimates')\n    except KeyError:\n        return np.nan\n    if not ev_estimates:\n        return np.nan\n    errors = []\n    for arm_idx in sorted(ev_estimates):\n        if 0 <= arm_idx < len(arm_evs):\n            diff = ev_estimates[arm_idx] - arm_evs[arm_idx]\n            errors.append(diff * diff)\n    if not errors:\n        return np.nan\n    mse_val = float(np.mean(errors))\n    return round(mse_val, 4)\nassert mse({\"arm_evs\": [0.5, 0.2, 0.9]}, {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}) == 0.0075, \"test 1 failed\"\nassert mse({\"arm_evs\": [1.0, 0.0]}, {\"ev_estimates\": {1: 0.2, 0: 0.8}}) == 0.04, \"test 2 failed\"\nassert mse({\"arm_evs\": [0.3, 0.6, 0.9, 0.1]}, {\"ev_estimates\": {0: 0.3, 1: 0.6, 2: 0.9, 3: 0.1}}) == 0.0, \"test 3 failed\"\nassert mse({\"arm_evs\": [0.0, -1.0, 1.0]}, {\"ev_estimates\": {0: 0.5, 1: 0.0, 2: 1.5}}) == 0.5, \"test 4 failed\"\nassert np.isnan(mse({\"arm_evs\": [0.1, 0.2]}, {\"ev_estimates\": {}})), \"test 5 failed\"\nassert mse({\"arm_evs\": [2.0]}, {\"ev_estimates\": {0: 3.5}}) == 2.25, \"test 6 failed\"\nassert mse({\"arm_evs\": [0.0, 1.0]}, {\"ev_estimates\": {0: 0.35, 1: 0.35}}) == 0.2725, \"test 9 failed\"\nassert mse({\"arm_evs\": [5.0, 5.0, 5.0]}, {\"ev_estimates\": {0: 4.0, 1: 6.0, 2: 5.0}}) == 0.6667, \"test 10 failed\""}
{"task_id": 91, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]] | int:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z (same shape as dA).\n        Returns -1 if dA and activation_cache do not share the same shape.\n    \"\"\"\n    dA_arr = np.asarray(dA)\n    Z_arr = np.asarray(activation_cache)\n    if dA_arr.shape != Z_arr.shape:\n        return -1\n    dZ_arr = dA_arr * (Z_arr > 0)\n    return dZ_arr.tolist()\nassert relu_backward([[-1, 2], [3, -4]], [[1, -2], [0, 5]]) == [[-1, 0], [0, -4]], \"failed on mixed signs\"\nassert relu_backward([[1, 2], [3, 4]], [[5, 6], [7, 8]]) == [[1, 2], [3, 4]], \"failed on all positive Z\"\nassert relu_backward([[1, 2], [3, 4]], [[-5, -6], [-7, -8]]) == [[0, 0], [0, 0]], \"failed on all negative Z\"\nassert relu_backward([[0.5, -1.2, 3.0], [4.1, -2.2, 0.0], [7.7, 8.8, -9.9]], [[1, -1, 0], [2, 0, -2], [-3, 3, 4]]) == [[0.5, 0.0, 0.0], [4.1, 0.0, 0.0], [0.0, 8.8, -9.9]], \"failed on 3x3 mixed\"\nassert relu_backward([[1, 2, 3, 4]], [[-1, 0, 2, -3]]) == [[0, 0, 3, 0]], \"failed on 1x4 vector\"\nassert relu_backward([[1.5, -2.5], [3.5, -4.5]], [[0.0, 2.0], [0.0, -2.0]]) == [[0.0, -2.5], [0.0, 0.0]], \"failed on zeros in Z\"\nassert relu_backward([[1, 2], [3, 4]], [[1, 2], [3, 4]]) == [[1, 2], [3, 4]], \"failed when gradients passthrough\"\nassert relu_backward([[10, -10], [5, -5]], [[-1, 1], [-1, 1]]) == [[0, -10], [0, -5]], \"failed on alternating Z\"\nassert relu_backward([[3]], [[-7]]) == [[0]], \"failed on single negative element\"\nassert relu_backward([[3]], [[7]]) == [[3]], \"failed on single positive element\""}
{"task_id": 92, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numbers\nimport numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))\nassert is_number(10) is True, \"test case failed: is_number(10)\"\nassert is_number(3.14) is True, \"test case failed: is_number(3.14)\"\nassert is_number(1+2j) is True, \"test case failed: is_number(1+2j)\"\nassert is_number(\"5\") is False, \"test case failed: is_number('5')\"\nassert is_number([1,2]) is False, \"test case failed: is_number([1,2])\"\nassert is_number(True) is False, \"test case failed: is_number(True)\"\nassert is_number(None) is False, \"test case failed: is_number(None)\"\nassert is_number(-7) is True, \"test case failed: is_number(-7)\"\nassert is_number(float('nan')) is True, \"test case failed: is_number(float('nan'))\"\nassert is_number({'num': 5}) is False, \"test case failed: is_number({'num': 5})\""}
{"task_id": 93, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU).\n\n    Args\n    ----\n    Z : array-like\n        A NumPy array, Python scalar or (nested) list of numbers representing\n        the pre-activation values.\n\n    Returns\n    -------\n    tuple[list, list]\n        A 2-tuple ``(A, cache)`` where\n            \u2022 A     \u2013 ReLU(Z)  (all negatives set to 0),\n            \u2022 cache \u2013 the original input Z,\n        both converted to plain Python (sub)lists via ``tolist()`` so the\n        result is JSON-serialisable.\n    \"\"\"\n    Z_arr = np.asarray(Z)\n    A_arr = np.maximum(0, Z_arr)\n    return (A_arr.tolist(), Z_arr.tolist())\nassert relu(np.array([[-1, 2], [3, -4]])) == ([[0, 2], [3, 0]], [[-1.0, 2.0], [3.0, -4.0]]), \"test case failed: relu([[-1,2],[3,-4]])\"\nassert relu(np.array([[0, 0], [0, 0]])) == ([[0, 0], [0, 0]], [[0.0, 0.0], [0.0, 0.0]]), \"test case failed: relu([[0,0],[0,0]])\"\nassert relu(np.array([[1, -1, 0]])) == ([[1, 0, 0]], [[1.0, -1.0, 0.0]]), \"test case failed: relu([[1,-1,0]])\"\nassert relu(np.array([-5, 4, -3, 2, 0])) == ([0, 4, 0, 2, 0], [-5.0, 4.0, -3.0, 2.0, 0.0]), \"test case failed: relu([-5,4,-3,2,0])\"\nassert relu(np.array(5)) == (5.0, 5.0), \"test case failed: relu(5)\"\nassert relu(np.array(-7)) == (0.0, -7.0), \"test case failed: relu(-7)\"\nassert relu(np.zeros((3, 3))) == ([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]), \"test case failed: relu(zeros)\"\nassert relu([[1, 2], [3, 4]]) == ([[1, 2], [3, 4]], [[1.0, 2.0], [3.0, 4.0]]), \"test case failed: relu([[1,2],[3,4]])\"\nassert relu([[-0.1, -0.2, -0.3]]) == ([[0, 0, 0]], [[-0.1, -0.2, -0.3]]), \"test case failed: relu([[-0.1,-0.2,-0.3]])\"\nassert relu(np.arange(-4, 5)) == ([0, 0, 0, 0, 0, 1, 2, 3, 4], [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0]), \"test case failed: relu(arange(-4,5))\""}
{"task_id": 94, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Hashable, Sequence, TypeVar\nLabel = TypeVar('Label', bound=Hashable)\ndef knn_majority_vote(neighbors_targets: Sequence[Label]) -> Label:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A non-empty sequence containing the class labels of\n            the k nearest neighbours.\n\n    Returns:\n        The label that appears most frequently.  In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n\n    Raises:\n        ValueError: If *neighbors_targets* is empty.\n    \"\"\"\n    if not neighbors_targets:\n        raise ValueError('neighbors_targets must contain at least one label.')\n    counts = Counter(neighbors_targets)\n    top_freq = max(counts.values())\n    top_labels = (label for (label, freq) in counts.items() if freq == top_freq)\n    return min(top_labels)\nassert knn_majority_vote(['cat', 'dog', 'cat', 'bird']) == 'cat', \"failed on ['cat', 'dog', 'cat', 'bird']\"\nassert knn_majority_vote([1, 2, 2, 3, 1, 2]) == 2, \"failed on [1, 2, 2, 3, 1, 2]\"\nassert knn_majority_vote(['apple', 'banana', 'apple', 'banana']) == 'apple', \"failed on ['apple', 'banana', 'apple', 'banana']\"\nassert knn_majority_vote([42]) == 42, \"failed on [42]\"\nassert knn_majority_vote(['a', 'b', 'c']) == 'a', \"failed on ['a', 'b', 'c']\"\nassert knn_majority_vote([3, 3, 2, 2]) == 2, \"failed on [3, 3, 2, 2]\"\nassert knn_majority_vote([5, 4, 5, 4, 4, 5]) == 4, \"failed on [5, 4, 5, 4, 4, 5]\"\nassert knn_majority_vote(['x', 'y', 'y', 'x', 'z', 'z']) == 'x', \"failed on ['x', 'y', 'y', 'x', 'z', 'z']\"\nassert knn_majority_vote(list('aabbccd')) == 'a', \"failed on list('aabbccd')\"\nassert knn_majority_vote([0, 0, 1]) == 0, \"failed on [0, 0, 1]\""}
{"task_id": 96, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    seq_tokens = sequence.split()\n    if len(seq_tokens) < N:\n        return 0.0\n    vocab = set()\n    ngram_counts: dict[int, Counter] = {n: Counter() for n in range(1, N + 1)}\n    for sent in corpus:\n        tokens = sent.split()\n        vocab.update(tokens)\n        for n in range(1, N + 1):\n            if len(tokens) < n:\n                continue\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i + n])\n                ngram_counts[n][ngram] += 1\n    vocab.add('<UNK>')\n    V = len(vocab)\n    total_tokens = sum(ngram_counts[1].values())\n    seq_tokens = [tok if tok in vocab else '<UNK>' for tok in seq_tokens]\n    log_prob = 0.0\n    for i in range(len(seq_tokens) - N + 1):\n        ngram = tuple(seq_tokens[i:i + N])\n        context = ngram[:-1]\n        target = ngram[-1]\n        count_ngram = ngram_counts[N].get(ngram, 0)\n        if N == 1:\n            context_count = total_tokens\n        else:\n            context_count = ngram_counts[N - 1].get(context, 0)\n        prob = (count_ngram + K) / (context_count + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\nassert additive_ngram_log_prob([\"hello world\"], \"hello world hello\", 1, 1) == -2.7489, \"failed on unigram repetition\"\nassert additive_ngram_log_prob([\"a b c d\"], \"a b c d\", 3, 1) == -2.1972, \"failed on exact trigram\"\nassert additive_ngram_log_prob([\"the cat\"], \"the mouse\", 2, 1) == -1.3863, \"failed on unseen word in bigram\"\nassert additive_ngram_log_prob([\"cat sat\"], \"mouse cat\", 2, 1) == -1.0986, \"failed on unseen context\"\nassert additive_ngram_log_prob([\"a a b b\"], \"a b\", 1, 0.5) == -1.5769, \"failed on K=0.5 smoothing\"\nassert additive_ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 3, 1) == -1.9459, \"failed on trigram with unknown\"\nassert additive_ngram_log_prob([\"a b c\", \"a b d\"], \"a b d\", 2, 2) == -2.4849, \"failed on K=2 bigram\"\nassert additive_ngram_log_prob([\"hello world\"], \"foo\", 1, 1) == -1.6094, \"failed on completely unknown word\""}
{"task_id": 97, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        0.0\\u2006/\\u20061.0 with the same layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    if np.isscalar(Z) or (isinstance(Z, np.ndarray) and Z.ndim == 0):\n        return 1.0 if float(Z) > 0.0 else 0.0\n    arr = np.asarray(Z)\n    derivative = (arr > 0).astype(float)\n    return derivative.tolist()\nassert drelu([-2, -1, 0, 1, 5]) == [0.0, 0.0, 0.0, 1.0, 1.0], \"failed: drelu([-2, -1, 0, 1, 5])\"\nassert drelu([[1, -1], [-0.5, 2]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: drelu([[1, -1], [-0.5, 2]])\"\nassert drelu(3) == 1.0, \"failed: drelu(3)\"\nassert drelu(0) == 0.0, \"failed: drelu(0)\"\nassert drelu([[[-1, 2], [3, 0]], [[0, -2], [4, 5]]]) == [[[0.0, 1.0], [1.0, 0.0]], [[0.0, 0.0], [1.0, 1.0]]], \"failed: multi-dimensional input\"\nassert drelu(np.array([-3, -0.1, 0, 0.1, 5])) == [0.0, 0.0, 0.0, 1.0, 1.0], \"failed: ndarray input\"\nassert drelu(np.zeros((2, 3))) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed: zeros array\"\nassert drelu([-9999, 0.0001]) == [0.0, 1.0], \"failed: extreme values\"\nassert drelu([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed: list of zeros\"\nassert drelu([[5]]) == [[1.0]], \"failed: single element 2-D list\""}
{"task_id": 99, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The returned object keeps the *same container type* as the input:\n    scalar \u2192 scalar, list \u2192 list / list-of-lists, NumPy array \u2192 NumPy array.\n\n    Args\n    ----\n    Z : int | float | list | numpy.ndarray\n        Scalar, 1-D or 2-D data on which ReLU is to be applied.\n\n    Returns\n    -------\n    Same type as *Z* with all negative entries replaced by 0.\n    \"\"\"\n    if isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    if isinstance(Z, (int, float, np.number)):\n        return max(Z, 0)\n    if isinstance(Z, list):\n        return np.maximum(np.asarray(Z), 0).tolist()\n    raise TypeError('relu_ only accepts int, float, list, or numpy.ndarray as input.')\nassert relu_(np.array([-1, 2, -3, 4])) .tolist() == [0, 2, 0, 4], \"failed: relu_(np.array([-1, 2, -3, 4]))\"\nassert relu_([-5, -4, -3]) == [0, 0, 0], \"failed: relu_([-5, -4, -3])\"\nassert relu_(np.array([[1, -1], [0, 3]])).tolist() == [[1, 0], [0, 3]], \"failed: relu_(np.array([[1, -1], [0, 3]]))\"\nassert relu_([[1, -2, 3], [-4, 5, -6]]) == [[1, 0, 3], [0, 5, 0]], \"failed: relu_([[1, -2, 3], [-4, 5, -6]])\"\nassert relu_(5) == 5, \"failed: relu_(5)\"\nassert relu_(-7) == 0, \"failed: relu_(-7)\"\nassert relu_([0.5, -0.2, 3.3]) == [0.5, 0, 3.3], \"failed: relu_([0.5, -0.2, 3.3])\"\nassert relu_(np.array([[0, -0.1], [-2.5, 4.4]])).tolist() == [[0, 0], [0, 4.4]], \"failed: relu_(np.array([[0, -0.1], [-2.5, 4.4]]))\"\nassert relu_(0) == 0, \"failed: relu_(0)\"\nassert relu_(np.array([-0.0001]))[0] == 0, \"failed: relu_(np.array([-0.0001]))\""}
{"task_id": 100, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Labels predicted by a classifier.\n\n    Returns\n    -------\n    float | int\n        Classification error rate rounded to four decimals,\n        or \u22121 when the input lengths are not identical.\n    \"\"\"\n    actual_arr = np.asarray(actual).ravel()\n    predicted_arr = np.asarray(predicted).ravel()\n    if actual_arr.size != predicted_arr.size:\n        return -1\n    total = actual_arr.size\n    if total == 0:\n        return 0.0\n    mismatches = np.count_nonzero(actual_arr != predicted_arr)\n    error_rate = round(mismatches / total, 4)\n    return error_rate\nassert classification_error([1, 0, 1, 1], [1, 0, 1, 1]) == 0.0, \"Failed: identical arrays\"\nassert classification_error([0, 1, 2, 2, 1], [0, 0, 2, 1, 1]) == 0.4, \"Failed: basic example\"\nassert classification_error([0, 0, 0], [1, 1, 1]) == 1.0, \"Failed: all mismatched\"\nassert classification_error([1, 2, 3], [1, 2]) == -1, \"Failed: length mismatch\"\nassert classification_error(np.array([3, 3, 2, 1]), np.array([3, 2, 2, 1])) == 0.25, \"Failed: numpy arrays\"\nassert classification_error((5, 6, 7, 8), (5, 6, 0, 0)) == 0.5, \"Failed: tuples\"\nassert classification_error([\"cat\", \"dog\"], [\"dog\", \"dog\"]) == 0.5, \"Failed: string labels\"\nassert classification_error([True, False, True], [True, True, False]) == 0.6667, \"Failed: boolean labels\"\nassert classification_error(range(8), [0,1,2,3,4,5,6,7]) == 0.0, \"Failed: range vs list\"\nassert classification_error(np.array([1]), np.array([2])) == 1.0, \"Failed: single element mismatch\""}
{"task_id": 101, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Axis along which to apply the softmax (negative values allowed).\n\n    Returns:\n        A (nested) Python list containing the soft-maxed probabilities,\n        each rounded to four decimal places.\n\n    Raises:\n        ValueError: If ``x`` is 1-D.\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    max_along_axis = np.max(x, axis=axis, keepdims=True)\n    shifted = x - max_along_axis\n    exp_shifted = np.exp(shifted)\n    sum_exp = np.sum(exp_shifted, axis=axis, keepdims=True)\n    softmax_vals = exp_shifted / sum_exp\n    softmax_vals = np.round(softmax_vals, 4)\n    return softmax_vals.tolist()\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]]), 1) == [[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]], \"test case failed: softmax([[1,2,3],[4,5,6]], axis=1)\"\nassert softmax(np.array([[1, 1], [2, 2]]), 0) == [[0.2689, 0.2689], [0.7311, 0.7311]], \"test case failed: softmax([[1,1],[2,2]], axis=0)\"\nassert softmax(np.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]]), 2) == [[[0.2689, 0.7311], [0.2689, 0.7311]], [[0.2689, 0.7311], [0.2689, 0.7311]]], \"test case failed: softmax(3-D array, axis=2)\"\nassert softmax(np.array([[[1, 2]], [[3, 4]]]), 1) == [[[1.0, 1.0]], [[1.0, 1.0]]], \"test case failed: softmax(shape=(2,1,2), axis=1)\"\nassert softmax(np.array([[1000, 1000], [1000, 1000]]), 1) == [[0.5, 0.5], [0.5, 0.5]], \"test case failed: softmax(large values)\"\nassert softmax(np.array([[0, 1, 2], [2, 3, 4]]), 0) == [[0.1192, 0.1192, 0.1192], [0.8808, 0.8808, 0.8808]], \"test case failed: softmax([[0,1,2],[2,3,4]], axis=0)\"\nassert softmax(np.zeros((2, 2, 3)), -1) == [[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], [[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]], \"test case failed: softmax(zeros 3-D, axis=-1)\"\nassert softmax(np.array([[[1, 2, 3], [4, 5, 6]]]), 2) == [[[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]]], \"test case failed: softmax(shape=(1,2,3), axis=2)\"\nassert softmax(np.array([[-1, -1, -1], [0, 0, 0]]), 1) == [[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], \"test case failed: softmax(equal values)\""}
{"task_id": 102, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float] | int\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if\n        the model cannot be fitted (e.g. wrong input, not enough data).\n    \"\"\"\n    if not isinstance(degree, int) or degree < 0:\n        return -1\n    if len(x) != len(y) or len(x) == 0:\n        return -1\n    if len(x) < degree + 1:\n        return -1\n    X = np.vander(np.asarray(x, dtype=float), N=degree + 1, increasing=True)\n    y_vec = np.asarray(y, dtype=float)\n    try:\n        (w, *_) = np.linalg.lstsq(X, y_vec, rcond=None)\n    except Exception:\n        return -1\n    if len(x_pred) == 0:\n        return []\n    X_pred = np.vander(np.asarray(x_pred, dtype=float), N=degree + 1, increasing=True)\n    y_pred = X_pred @ w\n    return [round(float(val), 4) for val in y_pred]\nassert polynomial_regression_predict([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], 2, [6, 7]) == [36.0, 49.0], \"Failed on perfect quadratic.\"\nassert polynomial_regression_predict([0, 1], [1, 3], 1, [2]) == [5.0], \"Failed on simple line y=2x+1.\"\nassert polynomial_regression_predict([1, 2, 3, 4], [1, 8, 27, 64], 3, [5]) == [125.0], \"Failed on cubic y=x^3.\"\nassert polynomial_regression_predict([0, 1, 2], [3, 3, 3], 0, [10]) == [3.0], \"Failed on constant model.\"\nassert polynomial_regression_predict([1, 2], [1, 4], 2, [3]) == -1, \"Did not catch insufficient data.\"\nassert polynomial_regression_predict([1, 2, 3, 4], [2, 3, 5, 4], 1, [5]) == [5.5], \"Failed on general linear data.\"\nassert polynomial_regression_predict([], [], 1, [1]) == -1, \"Did not handle empty input.\"\nassert polynomial_regression_predict([1, 2, 3], [2, 4, 6], 1, [4, 5, 6]) == [8.0, 10.0, 12.0], \"Failed on y=2x.\"\nassert polynomial_regression_predict([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], 2, [2.5]) == [6.25], \"Failed on fractional prediction.\"\nassert polynomial_regression_predict([0, 1, 2], [1, 2, 3], 0, [5]) == [2.0], \"Failed on degree-0 averaging.\""}
{"task_id": 104, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef _entropy(labels: np.ndarray) -> float:\n    \"\"\"Base-2 entropy of a 1-D label array.\"\"\"\n    n = labels.size\n    if n == 0:\n        return 0.0\n    (_, counts) = np.unique(labels, return_counts=True)\n    probs = counts / n\n    return -np.sum(probs * np.log2(probs))\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Each array contains the labels that\n                fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    parent_entropy = _entropy(y)\n    n_parent = y.size\n    weighted_child_entropy = 0.0\n    for child in splits:\n        weight = child.size / n_parent if n_parent else 0.0\n        weighted_child_entropy += weight * _entropy(child)\n    ig = parent_entropy - weighted_child_entropy\n    ig = max(ig, 0.0)\n    return round(float(ig), 4)\nassert information_gain(np.array([1,1,0,0]), [np.array([1,1]), np.array([0,0])]) == 1.0, \"test case failed: pure binary split\"\nassert information_gain(np.array([0,0,0,1,1,1]), [np.array([0,0,0]), np.array([1,1,1])]) == 1.0, \"test case failed: another pure binary split\"\nassert information_gain(np.array([0,0,1,1,0,1]), [np.array([0,1,1]), np.array([0,0,1])]) == 0.0817, \"test case failed: mixed binary split\"\nassert information_gain(np.array([0,0,1,1,2,2]), [np.array([0,0]), np.array([1,1,2]), np.array([2])]) == 1.1258, \"test case failed: ternary parent-node\"\nassert information_gain(np.array([1,1,1,1]), [np.array([1,1]), np.array([1,1])]) == 0.0, \"test case failed: zero entropy parent\"\nassert information_gain(np.array([1,0,1,0,1]), [np.array([1,0,1,0,1])]) == 0.0, \"test case failed: single child identical to parent\"\nassert information_gain(np.array([0,0,1,1,2,2,3,3]), [np.array([0,0]), np.array([1,1]), np.array([2,2]), np.array([3,3])]) == 2.0, \"test case failed: perfectly pure four-way split\"\nassert information_gain(np.array([0,0,0,0,1,1]), [np.array([0,0]), np.array([0,0]), np.array([1,1])]) == 0.9183, \"test case failed: unbalanced split with pure children\"\nassert information_gain(np.array([0,1,2,2,2,2]), [np.array([0,2,2]), np.array([1,2,2])]) == 0.3333, \"test case failed: two children, three classes\"\nassert information_gain(np.array([0,0,1,1,1,1,1,0,0,0]), [np.array([0,0,0]), np.array([0,0,1,1]), np.array([1,1])]) == 0.6, \"test case failed: three-way split, binary classes\""}
{"task_id": 105, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    arr = np.asarray(x, dtype=float)\n    if arr.size == 0:\n        return []\n    coeff = 1.0 / (np.sqrt(2.0 * np.pi) * sigma)\n    exponent = -(arr - mean) ** 2 / (2.0 * sigma ** 2)\n    pdf_vals = coeff * np.exp(exponent)\n    pdf_vals = np.round(pdf_vals, 5)\n    if pdf_vals.ndim == 0:\n        return [float(pdf_vals)]\n    return pdf_vals.ravel().tolist()\nassert gaussian_pdf([1, 2, 3], 2, 1) == [0.24197, 0.39894, 0.24197], \"test case failed: gaussian_pdf([1, 2, 3], 2, 1)\"\nassert gaussian_pdf([0], 0, 1) == [0.39894], \"test case failed: gaussian_pdf([0], 0, 1)\"\nassert gaussian_pdf([0], 0, 0.5) == [0.79788], \"test case failed: gaussian_pdf([0], 0, 0.5)\"\nassert gaussian_pdf([-1, 0, 1], 0, 1) == [0.24197, 0.39894, 0.24197], \"test case failed: gaussian_pdf([-1, 0, 1], 0, 1)\"\nassert gaussian_pdf([2], 1, 1) == [0.24197], \"test case failed: gaussian_pdf([2], 1, 1)\"\nassert gaussian_pdf([1], 0, -1) == -1, \"test case failed: gaussian_pdf([1], 0, -1)\"\nassert gaussian_pdf([1], 0, 0) == -1, \"test case failed: gaussian_pdf([1], 0, 0)\"\nassert gaussian_pdf([5], 2, 3) == [0.08066], \"test case failed: gaussian_pdf([5], 2, 3)\"\nassert gaussian_pdf([2.5, 3.5], 3, 0.5) == [0.48394, 0.48394], \"test case failed: gaussian_pdf([2.5, 3.5], 3, 0.5)\"\nassert gaussian_pdf([], 0, 1) == [], \"test case failed: gaussian_pdf([], 0, 1)\""}
{"task_id": 107, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        (updated parameters, new first-moment, new second-moment, next time-step).\n        All numerical arrays are rounded to 6 decimal places and converted to\n        native Python lists.\n    \"\"\"\n    m_t = beta1 * m_prev + (1.0 - beta1) * grad\n    v_t = beta2 * v_prev + (1.0 - beta2) * grad ** 2\n    m_hat = m_t / (1.0 - beta1 ** t)\n    v_hat = v_t / (1.0 - beta2 ** t)\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    theta_out = np.round(theta_new, 6).tolist()\n    m_out = np.round(m_t, 6).tolist()\n    v_out = np.round(v_t, 6).tolist()\n    return (theta_out, m_out, v_out, t + 1)\nassert adam_step(np.array([1.0, 2.0]), np.array([0.1, -0.2]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([0.99, 2.01], [0.01, -0.02], [0.0001, 0.0004], 2), \"test case failed: adam_step([1,2],[0.1,-0.2])\"\nassert adam_step(np.array([1.0]), np.array([0.0]), np.array([0.0]), np.array([0.0]), 1) == ([1.0], [0.0], [0.0], 2), \"test case failed: zero gradient\"\nassert adam_step(np.array([-1.0, 2.0, -3.0]), np.array([-0.3, -0.5, 0.7]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), 1) == ([-0.99, 2.01, -3.01], [-0.03, -0.05, 0.07], [0.0009, 0.0025, 0.0049], 2), \"test case failed: mixed signs\"\nassert adam_step(np.array([0.0]), np.array([1.0]), np.array([0.0]), np.array([0.0]), 1) == ([-0.01], [0.1], [0.01], 2), \"test case failed: positive gradient scalar\"\nassert adam_step(np.array([0.0, 0.0]), np.array([1.0, 1.0]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([-0.01, -0.01], [0.1, 0.1], [0.01, 0.01], 2), \"test case failed: identical gradients\"\nassert adam_step(np.array([2.0]), np.array([-2.0]), np.array([0.0]), np.array([0.0]), 1) == ([2.01], [-0.2], [0.04], 2), \"test case failed: large negative gradient\"\nassert adam_step(np.array([1.0]), np.array([0.3]), np.array([0.0]), np.array([0.0]), 2) == ([0.992575], [0.03], [0.0009], 3), \"test case failed: second step\"\nassert adam_step(np.array([1.0]), np.array([-1.0]), np.array([0.0]), np.array([0.0]), 1) == ([1.01], [-0.1], [0.01], 2), \"test case failed: negative gradient scalar\"\nassert adam_step(np.array([1.0, 2.0, 3.0]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), 1) == ([1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 2), \"test case failed: all zero gradients\"\nassert adam_step(np.array([1.2, 3.4]), np.array([0.2, 0.2]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([1.19, 3.39], [0.02, 0.02], [0.0004, 0.0004], 2), \"test case failed: small identical gradients\""}
{"task_id": 108, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    (N, M) = X.shape\n    rng = np.random.RandomState(0)\n    W = rng.randn(N, K)\n    H = rng.randn(K, M)\n    I_K = np.eye(K, dtype=np.float64)\n\n    def _solve(A: np.ndarray, B: np.ndarray) -> np.ndarray:\n        \"\"\"Solve AX = B for X with fallback to pseudo-inverse if singular.\"\"\"\n        try:\n            return np.linalg.solve(A, B)\n        except np.linalg.LinAlgError:\n            return np.linalg.pinv(A) @ B\n    (best_W, best_H) = (W.copy(), H.copy())\n    best_loss = np.inf\n    for _ in range(max_iter):\n        HHT = H @ H.T + alpha * I_K\n        W = _solve(HHT, H @ X.T).T\n        WTW = W.T @ W + alpha * I_K\n        H = _solve(WTW, W.T @ X)\n        diff = X - W @ H\n        loss = np.sum(diff ** 2) + alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n        if loss < best_loss:\n            best_loss = loss\n            (best_W, best_H) = (W.copy(), H.copy())\n        if loss <= tol:\n            break\n    X_hat = (best_W @ best_H).round(4).tolist()\n    return X_hat\nassert np.allclose(als_factorization(np.array([[1.,2.],[3.,4.]]),2,alpha=0.0,max_iter=1000,tol=1e-8),[[1.0,2.0],[3.0,4.0]],atol=1e-3),\"failed on 2\u00d72 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.,3.],[4.,5.,6.]]),2,alpha=0.0),[[1.0,2.0,3.0],[4.0,5.0,6.0]],atol=1e-3),\"failed on 2\u00d73 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[7.,8.],[2.,1.],[3.,4.]]),2,alpha=0.0),[[7.0,8.0],[2.0,1.0],[3.0,4.0]],atol=1e-3),\"failed on 3\u00d72 matrix\"\nassert np.allclose(als_factorization(np.array([[1.5,2.5],[3.5,4.5]]),2,alpha=0.0),[[1.5,2.5],[3.5,4.5]],atol=1e-3),\"failed on decimal matrix\"\nassert np.allclose(als_factorization(np.array([[10.]]),1,alpha=0.0),[[10.0]],atol=1e-3),\"failed on 1\u00d71 matrix\"\nassert np.allclose(als_factorization(np.array([[2.,2.],[2.,2.]]),1,alpha=0.0),[[2.0,2.0],[2.0,2.0]],atol=1e-3),\"failed on constant matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.],[2.,4.]]),1,alpha=0.0),[[1.0,2.0],[2.0,4.0]],atol=1e-3),\"failed on rank-1 2\u00d72 matrix\""}
{"task_id": 109, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef _euclidean_squared(a: np.ndarray, b: np.ndarray) -> np.ndarray:\n    \"\"\"Squared Euclidean distance between every row of `a` and `b` (broadcast).\"\"\"\n    return ((a[:, None, :] - b[None, :, :]) ** 2).sum(axis=2)\ndef _kmeans_pp_init(X: np.ndarray, K: int) -> np.ndarray:\n    \"\"\"Return K initial centroids picked with the K-Means++ heuristic.\"\"\"\n    m = X.shape[0]\n    centroids = [X[np.random.randint(m)]]\n    for _ in range(1, K):\n        d2 = _euclidean_squared(X, np.array(centroids)).min(axis=1)\n        probs = d2 / d2.sum()\n        r = random.random()\n        cumulative = np.cumsum(probs)\n        idx = np.searchsorted(cumulative, r)\n        centroids.append(X[idx])\n    return np.array(centroids)\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    X = np.asarray(X, dtype=float)\n    (m, n) = X.shape\n    if K <= 0 or K > m:\n        raise ValueError('K must be a positive integer \u2264 number of samples.')\n    centroids = _kmeans_pp_init(X, K)\n    labels = np.full(m, -1, dtype=int)\n    for _ in range(max_iter):\n        distances = _euclidean_squared(X, centroids)\n        new_labels = distances.argmin(axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for k in range(K):\n            mask = labels == k\n            if mask.any():\n                centroids[k] = X[mask].mean(axis=0)\n    centroids_rounded = [[round(float(v), 4) for v in centroid] for centroid in centroids]\n    centroids_sorted = sorted(centroids_rounded, key=lambda c: (c[0], c))\n    return centroids_sorted\nassert kmeans(np.array([[1,2],[1,4],[1,0],[10,2],[10,4],[10,0]]),2,random_state=42)==[[1.0,2.0],[10.0,2.0]],\"failed: basic 2-cluster example\"\nassert kmeans(np.array([[-5,0],[-6,-1],[-4,1],[0,5],[1,6],[-1,4],[5,0],[6,1],[4,-1]]),3,random_state=0)==[[-5.0,0.0],[0.0,5.0],[5.0,0.0]],\"failed: three clearly separated clusters\"\nassert kmeans(np.array([[0,0],[0,1],[10,0],[10,1]]),2,random_state=7)==[[0.0,0.5],[10.0,0.5]],\"failed: two vertical stripes\"\nassert kmeans(np.array([[1],[2],[8],[9]]),2,random_state=3)==[[1.5],[8.5]],\"failed: one-dimensional data\"\nassert kmeans(np.array([[1],[2],[3],[4],[5]]),1,random_state=11)==[[3.0]],\"failed: single cluster\"\nassert kmeans(np.array([[0,0,0],[0,1,0],[0,0,1],[10,0,0],[10,1,0],[10,0,1]]),2,random_state=13)==[[0.0,0.3333,0.3333],[10.0,0.3333,0.3333]],\"failed: 3-D example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),3,random_state=19)==[[1.0,1.0],[2.0,2.0],[3.0,3.0]],\"failed: K equals number of points\"\nassert kmeans(np.array([[-1,0],[-2,0],[1,0],[2,0]]),2,random_state=23)==[[-1.5,0.0],[1.5,0.0]],\"failed: symmetric clusters on x-axis\"\nassert kmeans(np.array([[0,0],[0,1],[1,0],[1,1]]),4,random_state=29)==[[0.0,0.0],[0.0,1.0],[1.0,0.0],[1.0,1.0]],\"failed: each point its own cluster\"\nassert kmeans(np.array([[2,2],[2,4],[8,2],[8,4]]),2,random_state=5)==[[2.0,3.0],[8.0,3.0]],\"failed: square split into two rectangles\""}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: name '_identity_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nTIME_STEPS = 20\nPAD_TOKEN = 0\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode a raw string into a fixed-length list of integer ids.\n\n    \u2022 Each character is looked up in `vocabulary`.\n    \u2022 Unknown characters map to PAD_TOKEN (0).\n    \u2022 The returned list is exactly `time_steps` long:\n        \u2013 shorter input  \u2192 pad with 0 on the right\n        \u2013 longer  input  \u2192 truncate on the right\n    \"\"\"\n    encoded = [vocabulary.get(ch, PAD_TOKEN) for ch in text[:time_steps]]\n    if len(encoded) < time_steps:\n        encoded.extend([PAD_TOKEN] * (time_steps - len(encoded)))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a sequence of integer ids back into a string.\n\n    \u2022 Works with Python lists, tuples or NumPy arrays.\n    \u2022 Padding / unknown tokens (id 0) are ignored.\n    \"\"\"\n    indices = np.ravel(indices)\n    chars = []\n    for idx in indices:\n        if idx == PAD_TOKEN:\n            continue\n        char = inverse_vocab.get(idx)\n        if char is not None:\n            chars.append(char)\n    return ''.join(chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    End-to-end helper:\n    1. encode text\n    2. feed the single example to `model.predict`\n    3. take arg-max over the last axis\n    4. decode the predicted ids back to text\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array(encoded, dtype=np.int64)[np.newaxis, :]\n    logits = model.predict(batch)\n    pred_ids = np.argmax(logits, axis=-1)\n    decoded = int_to_string(pred_ids[0], inv_output_vocabulary)\n    return decoded\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hello') == 'hello', 'failed on \"hello\"'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'HELLO') == 'hello', 'failed on upper-case input'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '') == '', 'failed on empty string'\na20 = 'a' * 25\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, a20) == 'a' * 20, 'failed on long input truncation'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hi!') == 'hi', 'failed on unknown character removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'data science') == 'data science', 'failed on string with space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '       ') == '       ', 'failed on only spaces'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc xyz') == 'abc xyz', 'failed on mixed letters and space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc_def') == 'abcdef', 'failed on underscore removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'padding test') == 'padding test', 'failed on general case'"}
{"task_id": 112, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nfrom collections import Counter\nimport re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\"\"\"\n    words = re.findall('[A-Za-z]+', text)\n    if not words:\n        return []\n    words = [w.lower() for w in words]\n    freq = Counter(words)\n    sorted_words = sorted(freq.items(), key=lambda item: (-item[1], item[0]))\n    tokens: list[Token] = []\n    for (word, count) in sorted_words:\n        tok = Token(word)\n        tok.count = count\n        tokens.append(tok)\n    return tokens\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"Hello, hello world!\")] == [(\"hello\", 2), (\"world\", 1)], \"test case failed: 'Hello, hello world!'\"\nassert tokenize_and_count(\"\") == [], \"test case failed: empty string\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"A a A a b B\")] == [(\"a\", 4), (\"b\", 2)], \"test case failed: 'A a A a b B'\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"b a\")] == [(\"a\", 1), (\"b\", 1)], \"test case failed: 'b a'\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"This is a test. This test is only a test.\")] == [(\"test\", 3), (\"a\", 2), (\"is\", 2), (\"this\", 2), (\"only\", 1)], \"test case failed: sentence with punctuation\"\nassert tokenize_and_count(\"123 456 !!!\") == [], \"test case failed: numeric input\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"co-op co op\")] == [(\"co\", 2), (\"op\", 2)], \"test case failed: hyphenated words\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"Python\")] == [(\"python\", 1)], \"test case failed: single word\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"one1 two2 two2 one1 one1\")] == [(\"one\", 3), (\"two\", 2)], \"test case failed: alphanumeric words\"\nlarge_text = \"word \" * 1000 + \"test \" * 500\nassert [(tok.word, tok.count) for tok in tokenize_and_count(large_text)][:2] == [(\"word\", 1000), (\"test\", 500)], \"test case failed: large repetition\""}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: name 'run_example' is not defined", "solution": "\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str] or None\n        A collection of input strings.  If *None*, the function uses the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise ValueError('No `examples` provided and the global constant `EXAMPLES` is not defined.')\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 114, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray (or array-like) containing real values.\n        derivative: If False (default) returns SELU(x);\n                    if True  returns d(SELU)/dx.\n\n    Returns:\n        A (nested) Python list with the same shape as *x*, with every value\n        rounded to six decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    lam = 1.0507009873554805\n    x = np.asarray(x, dtype=float)\n    if derivative:\n        out = np.where(x >= 0, lam, lam * alpha * np.exp(x))\n    else:\n        out = np.where(x >= 0, lam * x, lam * alpha * (np.exp(x) - 1))\n    return np.round(out, 6).tolist()\nimport numpy as np\nassert selu(np.array([-1, 0, 1])) == [-1.111331, 0.0, 1.050701], \"test case failed: selu([-1,0,1])\"\nassert selu(np.array([0])) == [0.0], \"test case failed: selu([0])\"\nassert selu(np.array([0]), derivative=True) == [1.050701], \"test case failed: selu([0], True)\"\nassert selu(np.array([])) == [], \"test case failed: empty array activation\"\nassert selu(np.array([]), derivative=True) == [], \"test case failed: empty array derivative\""}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: name '_expected' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Binary cross-entropy loss and gradient for logistic regression.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (m, n)\n    y : np.ndarray\n        Binary targets of shape (m,) or (m, 1)\n    w : np.ndarray\n        Weight vector of shape (n,) or (n, 1)\n    \n    Returns\n    -------\n    tuple\n        (loss, gradient) where\n          \u2022 loss is a float rounded to 4 decimals\n          \u2022 gradient is a nested list (shape (n, 1)) whose\n            elements are rounded to 4 decimals\n    \"\"\"\n    y = y.reshape(-1)\n    w = w.reshape(-1)\n    m = X.shape[0]\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = float(np.round(loss, 4))\n    grad = X.T @ (p - y) / m\n    grad = grad.reshape(-1, 1)\n    grad = np.round(grad, 4).tolist()\n    return (loss, grad)\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])) == _expected(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])), \"test case failed: #1\"\nassert logistic_loss_and_gradient(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])) == _expected(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])), \"test case failed: #2\"\nassert logistic_loss_and_gradient(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])) == _expected(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])), \"test case failed: #3\"\nassert logistic_loss_and_gradient(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])) == _expected(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])), \"test case failed: #4\"\nassert logistic_loss_and_gradient(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])) == _expected(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])), \"test case failed: #5\"\nassert logistic_loss_and_gradient(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])) == _expected(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])), \"test case failed: #6\"\nassert logistic_loss_and_gradient(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])) == _expected(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])), \"test case failed: #7\"\nassert logistic_loss_and_gradient(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])) == _expected(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])), \"test case failed: #8\"\nassert logistic_loss_and_gradient(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])) == _expected(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])), \"test case failed: #9\"\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])) == _expected(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])), \"test case failed: #10\""}
{"task_id": 116, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Reduction in mean\u2013squared error obtained by a split.\n\n    Args:\n        y: 1-D array of original target values.\n        splits: List with one 1-D array per child node after the split.\n\n    Returns:\n        Parent MSE minus weighted child MSE, rounded to 4 decimals.\n    \"\"\"\n    if y.size == 0 or not splits:\n        return 0.0\n    y_mean = y.mean()\n    mse_parent = np.mean((y - y_mean) ** 2)\n    N = y.size\n    mse_children = 0.0\n    for child in splits:\n        n_child = child.size\n        if n_child == 0:\n            continue\n        child_mean = child.mean()\n        child_mse = np.mean((child - child_mean) ** 2)\n        mse_children += n_child / N * child_mse\n    delta = mse_parent - mse_children\n    return round(float(delta), 4)\nimport numpy as np\nassert mse_criterion(np.array([1, 2, 3, 4]), [np.array([1, 2]), np.array([3, 4])]) == 1.0, \"test case failed: basic two-way split\"\nassert mse_criterion(np.array([1, 2, 3]), [np.array([1, 2, 3])]) == 0.0, \"test case failed: no real split\"\nassert mse_criterion(np.array([1, 1, 1]), [np.array([1, 1]), np.array([1])]) == 0.0, \"test case failed: zero variance data\"\nassert mse_criterion(np.array([0, 10, 20, 30]), [np.array([0, 10]), np.array([20, 30])]) == 100.0, \"test case failed: large variance reduction\"\nassert mse_criterion(np.array([1, 4, 7, 10, 13]), [np.array([1, 4, 7]), np.array([10, 13])]) == 13.5, \"test case failed: uneven split sizes\"\nassert mse_criterion(np.array([2, 2, 2, 2]), [np.array([2, 2]), np.array([2, 2])]) == 0.0, \"test case failed: identical targets\"\nassert mse_criterion(np.array([1, 2]), [np.array([1]), np.array([2])]) == 0.25, \"test case failed: singletons\"\nassert mse_criterion(np.array([1, 2, 3, 4, 5, 6]), [np.array([1, 2, 3]), np.array([4, 5, 6])]) == 2.25, \"test case failed: six elements split in half\"\nassert mse_criterion(np.array([1, 4, 7, 10]), [np.array([1]), np.array([4]), np.array([7, 10])]) == 10.125, \"test case failed: three-way split\"\nassert mse_criterion(np.array([0, 0, 10, 10, 20, 20]), [np.array([0, 0, 10]), np.array([10, 20, 20])]) == 44.4444, \"test case failed: mixed targets split\""}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: failed: larger n_clf", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array (m, n) with train features.\n        y_train: 1-D NumPy array (m,) with labels **-1** or **1**.\n        X_test : 2-D NumPy array (k, n) with test features.\n        n_clf  : Number of weak classifiers (\u22651).\n\n    Returns\n        Python list (length k) with predicted labels (-1 or 1).\n    \"\"\"\n\n    def _best_stump(X, y, w):\n        \"\"\"Find the decision stump that minimises weighted error.\"\"\"\n        (m, n_features) = X.shape\n        best_err = np.inf\n        stump = {}\n        best_pred = None\n        for j in range(n_features):\n            Xj = X[:, j]\n            uniq = np.unique(Xj)\n            if uniq.size == 1:\n                thresholds = [uniq[0] - 1e-10, uniq[0] + 1e-10]\n            else:\n                thresholds = list((uniq[:-1] + uniq[1:]) / 2.0)\n                thresholds.append(uniq[0] - 1e-10)\n                thresholds.append(uniq[-1] + 1e-10)\n            for thresh in thresholds:\n                for polarity in (1, -1):\n                    preds = np.ones(m, dtype=int)\n                    if polarity == 1:\n                        preds[Xj < thresh] = -1\n                    else:\n                        preds[Xj < thresh] = 1\n                    err = np.sum(w[preds != y])\n                    if err < best_err:\n                        best_err = err\n                        stump = {'feature': j, 'threshold': thresh, 'polarity': polarity}\n                        best_pred = preds\n        return (stump, best_err, best_pred)\n    if n_clf < 1:\n        n_clf = 1\n    y_train = y_train.astype(int)\n    m = X_train.shape[0]\n    weights = np.full(m, 1 / m, dtype=float)\n    stumps = []\n    eps = 1e-10\n    for _ in range(n_clf):\n        (stump, err, preds) = _best_stump(X_train, y_train, weights)\n        err = np.clip(err, eps, 1 - eps)\n        alpha = 0.5 * np.log((1 - err) / err)\n        weights *= np.exp(-alpha * y_train * preds)\n        weights /= weights.sum()\n        stump['alpha'] = alpha\n        stumps.append(stump)\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n    for stump in stumps:\n        j = stump['feature']\n        thresh = stump['threshold']\n        pol = stump['polarity']\n        pred = np.ones(k, dtype=int)\n        if pol == 1:\n            pred[X_test[:, j] < thresh] = -1\n        else:\n            pred[X_test[:, j] < thresh] = 1\n        agg += stump['alpha'] * pred\n    final_pred = np.sign(agg)\n    final_pred[final_pred == 0] = 1\n    return final_pred.astype(int).tolist()\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 119, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Corresponding gradients.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        A list of updated parameters converted to native Python lists, with all\n        values rounded to four decimal places.  If the inputs are invalid\n        (empty or of different lengths) an empty list is returned.\n    \"\"\"\n    if not params or not grads or len(params) != len(grads):\n        return []\n    updated_params = []\n    for (p, g) in zip(params, grads):\n        p_arr = np.asarray(p, dtype=float)\n        g_arr = np.asarray(g, dtype=float)\n        new_p = p_arr - alpha * g_arr\n        updated_params.append(np.round(new_p, 4).tolist())\n    return updated_params\nassert sgd_update([np.array([1.0, 2.0, 3.0])], [np.array([0.1, -0.2, 0.3])], 0.1) == [[0.99, 2.02, 2.97]], \"failed on basic vector update\"\nassert sgd_update([np.array([[1.5, -2.0], [3.0, 4.0]])], [np.array([[0.5, 0.5], [1.0, -1.0]])], 0.2) == [[ [1.4, -2.1], [2.8, 4.2] ]], \"failed on matrix update\"\nassert sgd_update([], [], 0.1) == [], \"failed on empty input\"\nassert sgd_update([np.array(5.0)], [np.array(2.0)], 0.5) == [4.0], \"failed on scalar update\"\nassert sgd_update([np.array([0.0, 0.0])], [np.array([0.0, 0.0])], 10.0) == [[0.0, 0.0]], \"failed on zero gradients\"\nassert sgd_update([np.array([1.0, 1.0])], [np.array([1.0, 1.0])], 1.0) == [[0.0, 0.0]], \"failed on alpha=1\"\nassert sgd_update([np.array([-1.0, -2.0])], [np.array([-0.5, 0.5])], 0.4) == [[-0.8, -2.2]], \"failed on negative params/gradients\"\nassert sgd_update([np.array([[2.0, 3.0, 4.0]])], [np.array([[1.0, 1.0, 1.0]])], 0.25) == [[[1.75, 2.75, 3.75]]], \"failed on 1xN matrix\""}
{"task_id": 120, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function returns -1.\n    \"\"\"\n    if len(X) == 0 or len(X) != len(y):\n        return -1\n    X_np = np.asarray(X, dtype=float)\n    if X_np.ndim == 1:\n        X_np = X_np.reshape(-1, 1)\n    m = X_np.shape[0]\n    ones = np.ones((m, 1))\n    X_aug = np.hstack((ones, X_np))\n    y_np = np.asarray(y, dtype=float).reshape(-1, 1)\n    N = X_aug.shape[1]\n    limit = 1 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, size=(N, 1))\n    lr = float(learning_rate)\n    for _ in range(max(0, int(n_iterations))):\n        preds = X_aug @ w\n        errors = preds - y_np\n        gradient = X_aug.T @ errors / m\n        w -= lr * gradient\n    w_rounded = np.round(w.flatten(), 4)\n    return w_rounded.tolist()\nassert linear_regression([[1], [2], [3]], [2, 4, 6], 10000, 0.01) == [0.0, 2.0], \"failed: slope 2 intercept 0\"\nassert linear_regression([[1], [2], [3], [4]], [3, 5, 7, 9], 10000, 0.01) == [1.0, 2.0], \"failed: slope 2 intercept 1\"\nassert linear_regression([[0], [1], [2], [3]], [5, 4, 3, 2], 15000, 0.01) == [5.0, -1.0], \"failed: slope -1 intercept 5\"\nassert linear_regression([[1, 2, 3], [2, 1, 0], [0, 0, 1], [3, 5, 1]], [6, 3, 1, 9], 25000, 0.01) == [0.0, 1.0, 1.0, 1.0], \"failed: three-feature weights [0,1,1,1]\"\nassert linear_regression([[1], [2], [3]], [7, 7, 7], 15000, 0.01) == [7.0, 0.0], \"failed: constant function\"\nassert linear_regression([[-1], [0], [1]], [-1, 1, 3], 10000, 0.01) == [1.0, 2.0], \"failed: negative feature values\"\nassert linear_regression([[2], [4], [6], [8]], [4, 8, 12, 16], 10000, 0.01) == [0.0, 2.0], \"failed: larger inputs slope 2\"\nassert linear_regression([[1, 1], [2, 3], [3, 2], [4, 0]], [0, -1, 1, 4], 20000, 0.01) == [0.0, 1.0, -1.0], \"failed: weights [0,1,-1]\"\nassert linear_regression([[1, 2], [2, 0], [0, 1], [3, 4]], [-0.5, -2.0, -2.0, 2.5], 20000, 0.01) == [-3.0, 0.5, 1.0], \"failed: weights [-3,0.5,1]\""}
{"task_id": 122, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, \u2026, wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    X_np = np.asarray(X, dtype=float)\n    y_np = np.asarray(y, dtype=float).ravel()\n    if X_np.shape[0] != y_np.shape[0]:\n        raise ValueError('X and y must contain the same number of samples.')\n    ones = np.ones((X_np.shape[0], 1), dtype=float)\n    X_aug = np.hstack([ones, X_np])\n    w = np.linalg.pinv(X_aug) @ y_np\n    return np.round(w, 4).tolist()\nassert linear_regression_weights([[0], [1], [2]], [1, 2, 3]) == [1.0, 1.0], \"failed on y = x + 1\"\nassert linear_regression_weights([[0], [1], [2], [3]], [5, 5, 5, 5]) == [5.0, 0.0], \"failed on constant target\"\nassert linear_regression_weights([[1], [2], [3]], [2, 4, 6]) == [0.0, 2.0], \"failed on y = 2x\"\nassert linear_regression_weights([[1, 2], [2, 3], [3, 4], [4, 5]], [3, 5, 7, 9]) == [0.0, 1.0, 1.0], \"failed on y = x1 + x2\"\nassert linear_regression_weights([[1, 0], [0, 1], [1, 1], [2, 3]], [3, 3, 4, 7]) == [2.0, 1.0, 1.0], \"failed on y = 2 + x1 + x2\"\nassert linear_regression_weights([[4], [5], [6]], [9, 11.5, 14]) == [-1.0, 2.5], \"failed on y = -1 + 2.5x\"\nassert linear_regression_weights([[2, 1], [0, 1], [1, 3]], [0, 2, 5]) == [0.0, -1.0, 2.0], \"failed on y = -x1 + 2x2\"\nassert linear_regression_weights([[1], [2], [3]], [1.5, 1.5, 1.5]) == [1.5, 0.0], \"failed on y = 1.5\"\nassert linear_regression_weights([[0, 1], [1, 0], [2, 2]], [0, 1.5, 1.5]) == [0.5, 1.0, -0.5], \"failed on mixed weights\"\nassert linear_regression_weights([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]], [1, 2, 3, 6]) == [0.0, 1.0, 2.0, 3.0], \"failed on 3-feature dataset\""}
{"task_id": 123, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    The distinct categories are detected automatically, sorted, and each\n    element of *y* is converted to a binary vector that has length equal to\n    the number of unique categories.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like) of integers or\n           strings representing categorical data.\n\n    Returns:\n        A list of lists containing 0/1 integers \u2013 the one-hot encoded matrix.\n    \"\"\"\n    arr = np.asarray(y)\n    if arr.ndim != 1:\n        raise ValueError('Input must be a one-dimensional array or list.')\n    categories = sorted(set(arr.tolist()))\n    n_classes = len(categories)\n    cat2idx = {cat: idx for (idx, cat) in enumerate(categories)}\n    one_hot = [[0] * n_classes for _ in range(len(arr))]\n    for (row_idx, value) in enumerate(arr):\n        col_idx = cat2idx[value]\n        one_hot[row_idx][col_idx] = 1\n    return one_hot\nassert one_hot_encoding(np.array([0, 1, 2])) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]], \"Test case failed: integers [0,1,2]\"\nassert one_hot_encoding(np.array([2, 2, 1, 0])) == [[0, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0]], \"Test case failed: integers with repetition [2,2,1,0]\"\nassert one_hot_encoding(np.array([-1, 0, -1])) == [[1, 0], [0, 1], [1, 0]], \"Test case failed: negative integers [-1,0,-1]\"\nassert one_hot_encoding(np.array([\"cat\", \"dog\", \"cat\"])) == [[1, 0], [0, 1], [1, 0]], \"Test case failed: strings ['cat','dog','cat']\"\nassert one_hot_encoding([3, 1, 3, 3]) == [[0, 1], [1, 0], [0, 1], [0, 1]], \"Test case failed: list [3,1,3,3]\"\nassert one_hot_encoding(np.array([42])) == [[1]], \"Test case failed: single element [42]\"\nassert one_hot_encoding(np.array([1, 1, 2, 2])) == [[1, 0], [1, 0], [0, 1], [0, 1]], \"Test case failed: sorted integers [1,1,2,2]\"\nlarge_input = np.arange(10)\nexpected_large = np.eye(10, dtype=int).tolist()\nassert one_hot_encoding(large_input) == expected_large, \"Test case failed: large range 0-9\"\nassert one_hot_encoding([\"a\", \"b\", \"c\", \"a\"]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], \"Test case failed: list of strings ['a','b','c','a']\"\nassert one_hot_encoding(np.array([\"x\", \"z\", \"x\", \"y\"])) == [[1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]], \"Test case failed: strings ['x','z','x','y']\""}
{"task_id": 126, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n    \n    Args\n    ----\n    X : list of list of numbers\n        First data matrix with shape (N, C).\n    Y : list of list of numbers or None, optional\n        Second data matrix with shape (M, C).  If *None* defaults to *X*.\n    d : int, default=3\n        Degree of the polynomial.\n    gamma : float or None, default=None\n        Scale factor.  Uses 1/C when *None*.\n    c0 : float, default=1\n        Bias (independent) term.\n    \n    Returns\n    -------\n    list of list of floats\n        The (N\u00d7M) Gram matrix rounded to 4 decimals.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=np.float64)\n    Y_arr = X_arr if Y is None else np.asarray(Y, dtype=np.float64)\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        raise ValueError('X and Y must be 2-D matrices.')\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        raise ValueError('X and Y must have the same number of columns/features.')\n    (_, C) = X_arr.shape\n    if gamma is None:\n        gamma = 1.0 / C\n    dot_products = X_arr @ Y_arr.T\n    base = gamma * dot_products + c0\n    K = np.power(base, d)\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()\nassert polynomial_kernel([[1, 2], [3, 4]]) == [[42.875, 274.625], [274.625, 2460.375]], \"test failed: default parameters with 2\u00d72 input\"\nassert polynomial_kernel([[1, 0], [0, 1]], d=2, gamma=1, c0=0) == [[1.0, 0.0], [0.0, 1.0]], \"test failed: homogeneous degree-2 kernel on identity\"\nassert polynomial_kernel([[1, 2, 1]], [[0, 1, 0]], d=2, gamma=0.5, c0=1) == [[4.0]], \"test failed: explicit X, Y with gamma=.5\"\nassert polynomial_kernel([[2, 3]], [[2, 3]], d=1, gamma=1, c0=0) == [[13.0]], \"test failed: degree-1 (linear) kernel, c0=0\"\nassert polynomial_kernel([[2, 3]], [[2, 3]], d=1, gamma=1, c0=5) == [[18.0]], \"test failed: degree-1 with bias term\"\nassert polynomial_kernel([[1, 2], [3, 4]], [[5, 6], [7, 8]], d=2, gamma=1, c0=1) == [[324.0, 576.0], [1600.0, 2916.0]], \"test failed: 2\u00d72 vs 2\u00d72 different matrices\"\nassert polynomial_kernel([[1, 2, 3]], d=3, gamma=None, c0=0) == [[101.6296]], \"test failed: automatic gamma = 1/C\"\nassert polynomial_kernel([[0, 0]], [[0, 0]], d=3, gamma=2, c0=1) == [[1.0]], \"test failed: zero vectors\"\nassert polynomial_kernel([[1, 1]], [[-1, -1]], d=2, gamma=1, c0=0) == [[4.0]], \"test failed: negative correlation\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], d=2, gamma=0.5, c0=0) == [[30.25]], \"test failed: gamma=0.5, degree=2\""}
{"task_id": 127, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances whose true class equals the\n        *i-th* sorted unique label and whose predicted class equals the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if len(y_true) == 0:\n        return []\n    classes = sorted(set(y_true).union(y_pred))\n    c2idx = {cls: idx for (idx, cls) in enumerate(classes)}\n    C = len(classes)\n    M = [[0 for _ in range(C)] for _ in range(C)]\n    for (t, p) in zip(y_true, y_pred):\n        i = c2idx[t]\n        j = c2idx[p]\n        M[i][j] += 1\n    return M\nassert confusion_matrix(['cat','dog','cat'],['cat','cat','dog']) == [[1,1],[1,0]], \"failed on example with strings\"\nassert confusion_matrix([1,2,3,4],[4,3,2,1]) == [[0,0,0,1],[0,0,1,0],[0,1,0,0],[1,0,0,0]], \"failed on reversed labels\"\nassert confusion_matrix([0,0,0,0],[0,0,0,0]) == [[4]], \"failed on single class perfect match\"\nassert confusion_matrix([0,1,1,1],[1,1,1,1]) == [[0,1],[0,3]], \"failed on partial mismatch\"\nassert confusion_matrix([],[]) == [], \"failed on empty lists\"\nassert confusion_matrix([1,2],[1]) == -1, \"failed on unequal length detection\"\nassert confusion_matrix([2,2,1,0],[2,1,1,0]) == [[1,0,0],[0,1,0],[0,1,1]], \"failed on unsorted class order\"\nassert confusion_matrix(['a','b','c'],['c','b','a']) == [[0,0,1],[0,1,0],[1,0,0]], \"failed on character labels\"\nassert confusion_matrix([True,False,True],[True,True,False]) == [[0,1],[1,1]], \"failed on boolean labels\""}
{"task_id": 128, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Fisher LDA and project the data.\"\"\"\n    if n_components == 0:\n        return []\n    (n_samples, n_features) = X.shape\n    classes = np.unique(y)\n    n_classes = classes.size\n    global_mean = X.mean(axis=0)\n    S_W = np.zeros((n_features, n_features), dtype=float)\n    S_B = np.zeros_like(S_W)\n    for cls in classes:\n        X_c = X[y == cls]\n        n_c = X_c.shape[0]\n        mean_c = X_c.mean(axis=0)\n        diff = X_c - mean_c\n        S_W += diff.T @ diff\n        mean_diff = (mean_c - global_mean).reshape(-1, 1)\n        S_B += n_c * (mean_diff @ mean_diff.T)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, sorted_idx]\n    eig_vecs = eig_vecs[:, :n_components]\n    for i in range(eig_vecs.shape[1]):\n        vec = eig_vecs[:, i]\n        for v in vec:\n            if np.abs(v) > 1e-12:\n                if v < 0:\n                    eig_vecs[:, i] = -vec\n                break\n    projected = X @ eig_vecs\n    projected = np.round(projected, 4)\n    return projected.tolist()\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 1) == [[1.4142],[2.1213],[2.1213],[2.8284],[11.3137],[12.0208],[12.0208],[12.7279]], \"test case failed: multi_class_lda(example 1, 1 component)\"\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 2) == [[1.4142,0.0],[2.1213,-0.7071],[2.1213,0.7071],[2.8284,0.0],[11.3137,0.0],[12.0208,0.7071],[12.0208,-0.7071],[12.7279,0.0]], \"test case failed: multi_class_lda(example 1, 2 components)\"\nassert multi_class_lda(np.array([[2,0],[4,0],[0,2],[0,4]]), np.array([0,0,1,1]), 1) == [[1.4142],[2.8284],[-1.4142],[-2.8284]], \"test case failed: axis-separated data\"\nassert multi_class_lda(np.array([[1],[2],[8],[9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: one-dimensional data #1\"\nassert multi_class_lda(np.array([[1,0],[2,0],[8,0],[9,0]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis data #2\"\nassert multi_class_lda(np.array([[2],[4],[6],[8],[10],[12]]), np.array([0,0,1,1,2,2]), 1) == [[2.0],[4.0],[6.0],[8.0],[10.0],[12.0]], \"test case failed: one-dimensional data #2\"\nassert multi_class_lda(np.array([[0,1],[0,2],[0,8],[0,9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis y-data\"\nassert multi_class_lda(np.array([[-2,0],[-4,0],[0,-2],[0,-4]]), np.array([0,0,1,1]), 1) == [[-1.4142],[-2.8284],[1.4142],[2.8284]], \"test case failed: negative axis data\"\nassert multi_class_lda(np.array([[0,-1],[0,-2],[0,3],[0,4]]), np.array([0,0,1,1]), 1) == [[-1.0],[-2.0],[3.0],[4.0]], \"test case failed: axis y negative-positive data\""}
{"task_id": 129, "completion_id": 0, "passed": true, "result": "passed", "solution": "from itertools import islice, cycle\nfrom itertools import islice, cycle\ndef cycle_sequence(sequence: list | tuple, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    return list(islice(cycle(sequence), samples))\nassert cycle_sequence([1,2,3], 8) == [1,2,3,1,2,3,1,2], \"failed on cycle_sequence([1,2,3], 8)\"\nassert cycle_sequence(['x'], 4) == ['x','x','x','x'], \"failed on single-element sequence\"\nassert cycle_sequence([], 5) == [], \"failed on empty sequence\"\nassert cycle_sequence([0,1], 0) == [], \"failed on zero samples\"\nassert cycle_sequence([0,1], -3) == [], \"failed on negative samples\"\nassert cycle_sequence(['a','b','c'], 1) == ['a'], \"failed on one sample\"\nassert cycle_sequence(['a','b','c'], 2) == ['a','b'], \"failed on two samples\"\nassert cycle_sequence(['a','b','c'], 3) == ['a','b','c'], \"failed on exactly full length\"\nassert cycle_sequence(['a','b','c'], 4) == ['a','b','c','a'], \"failed on length+1 samples\"\nassert cycle_sequence([True, False], 7) == [True, False, True, False, True, False, True], \"failed on boolean sequence\""}
{"task_id": 130, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities are rounded to 4 decimal places.  If the\n    pair never occurred, an empty list is returned.\n    \"\"\"\n    relevant_next_states = [next_state for (s, a, _r, next_state) in transitions if s == state and a == action]\n    if not relevant_next_states:\n        return []\n    counts = Counter(relevant_next_states)\n    total = len(relevant_next_states)\n    result = [[ns, round(cnt / total, 4)] for (ns, cnt) in sorted(counts.items(), key=lambda item: item[0])]\n    return result\nassert outcome_probs([(0,'left',-1,1),(0,'left',-1,1),(0,'left',-1,2),(0,'right',0,3)],0,'left') == [[1,0.6667],[2,0.3333]], \"failed: basic two-outcome distribution\"\nassert outcome_probs([(1,'up',0,2),(1,'up',0,2),(1,'up',0,2)],1,'up') == [[2,1.0]], \"failed: single deterministic outcome\"\nassert outcome_probs([(0,'left',-1,1),(0,'right',0,3)],99,'none') == [], \"failed: unseen pair\"\nassert outcome_probs([(2,0,1,3),(2,0,0,3),(2,0,2,4)],2,0) == [[3,0.6667],[4,0.3333]], \"failed: numeric action\"\nassert outcome_probs([('s0','jump',0,'s1'),('s0','jump',0,'s2'),('s0','jump',0,'s1')],'s0','jump') == [['s1',0.6667],['s2',0.3333]], \"failed: string labels\"\nassert outcome_probs([(10,'a',0,i) for i in range(10)] + [(10,'a',0,0)],10,'a') == [[0,0.1818]] + [[i,0.0909] for i in range(1,10)], \"failed: many outcomes\"\nassert outcome_probs([(1.2,'go',0,2),(1.2,'go',0,2),(1.2,'go',0,3)],1.2,'go') == [[2,0.6667],[3,0.3333]], \"failed: float state\"\nassert outcome_probs([(1.2,'go',0,2)],1.2,'stop') == [], \"failed: unseen action\"\nassert outcome_probs([(0,'a',0,1)]*333 + [(0,'a',0,2)]*667,0,'a') == [[1,0.333],[2,0.667]], \"failed: rounding\"\nassert outcome_probs([(5,'x',0,7),(5,'x',0,6),(5,'x',0,7)],5,'x') == [[6,0.3333],[7,0.6667]], \"failed: sorting order\""}
{"task_id": 131, "completion_id": 0, "passed": false, "result": "failed: name '_SHARED_SEQUENCES' is not defined", "solution": "\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    try:\n        seq = _SHARED_SEQUENCES[uid]\n    except (IndexError, TypeError):\n        return None\n    seq_len = len(seq)\n    if i < 0:\n        i += seq_len\n    if i < 0 or i >= seq_len:\n        return None\n    return seq[i]\nassert get_index(1, 0) == 5, \"test case failed: get_index(1, 0)\"\nassert get_index(2, 0) is None, \"test case failed: get_index(2, 0) \u2013 empty sequence should return None\"\nassert get_index(1, -1) == 2, \"test case failed: get_index(1, -1)\"\nassert get_index(0, 3) is None, \"test case failed: get_index(0, 3) \u2013 out of range\"\n_SHARED_SEQUENCES.append([100, 200])\nassert get_index(3, 1) == 200, \"test case failed: get_index(3, 1) after append\"\n_SHARED_SEQUENCES[0] = ['a', 'b']\nassert get_index(0, 1) == 'b', \"test case failed: get_index(0, 1) after replacement\"\n_SHARED_SEQUENCES.append([])\nassert get_index(4, 0) is None, \"test case failed: get_index(4, 0) \u2013 newly appended empty sequence\""}
{"task_id": 132, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if np.isscalar(z):\n        return z\n    if isinstance(z, np.ndarray):\n        return z\n    if isinstance(z, (list, tuple)):\n        return np.asarray(z)\n    return np.asarray(z)\nassert linear(5) == 5, \"Failed on integer scalar 5\"\nassert linear(3.14159) == 3.14159, \"Failed on float scalar 3.14159\"\na = np.array([1, 2, 3]); assert linear(a) is a and np.array_equal(linear(a), np.array([1, 2, 3])), \"Failed on ndarray identity property\"\nassert np.array_equal(linear([4, 5, 6]), np.array([4.0, 5.0, 6.0])), \"Failed on list to ndarray conversion\"\nassert np.array_equal(linear([[1, 2], [3, 4]]), np.array([[1.0, 2.0], [3.0, 4.0]])), \"Failed on nested list conversion\"\nb = np.array([[7.5, -8.2]]); assert linear(b) is b, \"Failed on ndarray object identity (no copy)\"\nassert np.array_equal(linear((9, 10, 11)), np.array([9.0, 10.0, 11.0])), \"Failed on tuple to ndarray conversion\"\nc = np.arange(12).reshape(3, 4); assert linear(c) is c and np.array_equal(linear(c), c), \"Failed on multi-dimensional ndarray identity\"\nassert linear(-42) == -42, \"Failed on negative scalar\"\nd = np.zeros((2, 2, 2)); assert linear(d) is d and np.array_equal(linear(d), d), \"Failed on 3-D zeros ndarray\""}
{"task_id": 133, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    if not isinstance(vocab_length, int) or vocab_length <= 0:\n        return -1\n    eye = np.eye(vocab_length, dtype=int)\n    Y_train: list[list[list[int]]] = []\n    for sequence in X_train:\n        y_seq: list[list[int]] = []\n        for token in sequence:\n            if not isinstance(token, (int, np.integer)) or token < 0 or token >= vocab_length:\n                return -1\n            y_seq.append(eye[token].tolist())\n        Y_train.append(y_seq)\n    return Y_train\nassert one_hot_targets([[0, 2, 1], [1, 3, 2]], 4) == [[[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]], [[0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]], \"failed: basic example\"\nassert one_hot_targets([[3, 3, 3]], 4) == [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]]], \"failed: repeated tokens\"\nassert one_hot_targets([[0]], 1) == [[[1]]], \"failed: single token single vocab\"\nassert one_hot_targets([[1, 0], [0, 1]], 2) == [[[0, 1], [1, 0]], [[1, 0], [0, 1]]], \"failed: two-class alternating\"\nassert one_hot_targets([], 5) == [], \"failed: empty input list\"\nassert one_hot_targets([[0, 4]], 4) == -1, \"failed: index equal to vocab_length should be invalid\"\nassert one_hot_targets([[0, -1]], 3) == -1, \"failed: negative index should be invalid\"\nassert one_hot_targets([[2, 1, 0]], 3) == [[[0, 0, 1], [0, 1, 0], [1, 0, 0]]], \"failed: descending indices\"\nassert one_hot_targets([[1, 2, 1, 0]], 3) == [[[0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]], \"failed: longer single sequence\"\nassert one_hot_targets([[2, 2], [2, 2], [2, 2]], 3) == [[[0, 0, 1], [0, 0, 1]], [[0, 0, 1], [0, 0, 1]], [[0, 0, 1], [0, 0, 1]]], \"failed: all same tokens multiple samples\""}
{"task_id": 134, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        Success probabilities for each arm.  Each probability must satisfy\n        0.0 \u2264 p \u2264 1.0.\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid entry, returns (-1.0, -1).\n    \"\"\"\n    if not payoff_probs:\n        return (-1.0, -1)\n    best_prob = -1.0\n    best_index = -1\n    for (idx, p) in enumerate(payoff_probs):\n        try:\n            prob = float(p)\n        except (TypeError, ValueError):\n            return (-1.0, -1)\n        if not 0.0 <= prob <= 1.0:\n            return (-1.0, -1)\n        if prob > best_prob:\n            (best_prob, best_index) = (prob, idx)\n    return (best_prob, best_index)\nassert best_arm([0.15, 0.6, 0.35]) == (0.6, 1), \"failed on [0.15, 0.6, 0.35]\"\nassert best_arm([0.8, 0.8, 0.5]) == (0.8, 0), \"failed on tie with first max\"\nassert best_arm([0.0, 0.0, 0.0]) == (0.0, 0), \"failed on all zeros\"\nassert best_arm([1.0]) == (1.0, 0), \"failed on single arm\"\nassert best_arm([]) == (-1.0, -1), \"failed on empty list\"\nassert best_arm([0.2, -0.1, 0.3]) == (-1.0, -1), \"failed on probability < 0\"\nassert best_arm([0.2, 1.1, 0.3]) == (-1.0, -1), \"failed on probability > 1\"\nassert best_arm([0.333, 0.333, 0.3329]) == (0.333, 0), \"failed on close tie\"\nassert best_arm([0.25, 0.5, 0.75, 0.74]) == (0.75, 2), \"failed on normal case\"\nassert best_arm([0.9, 0.1]) == (0.9, 0), \"failed on two arms\""}
{"task_id": 135, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float] | int:\n    \"\"\"\n    Fits an Ordinary Least Squares (OLS) linear-regression model via the normal\n    equation and returns predictions for X_test rounded to 4 decimal places.\n\n    If (X\u1d40X) is singular (non-invertible) the function returns -1.\n    \"\"\"\n    X_tr = np.asarray(X_train, dtype=float)\n    y_tr = np.asarray(y_train, dtype=float).reshape(-1, 1)\n    X_te = np.asarray(X_test, dtype=float)\n    ones_tr = np.ones((X_tr.shape[0], 1))\n    ones_te = np.ones((X_te.shape[0], 1))\n    X_tr_aug = np.hstack((ones_tr, X_tr))\n    X_te_aug = np.hstack((ones_te, X_te))\n    XtX = X_tr_aug.T @ X_tr_aug\n    Xty = X_tr_aug.T @ y_tr\n    if np.linalg.matrix_rank(XtX) < XtX.shape[0]:\n        return -1\n    beta = np.linalg.inv(XtX) @ Xty\n    preds = X_te_aug @ beta\n    preds = np.round(preds.flatten(), 4)\n    return preds.tolist()\nassert linear_regression_predict([[1],[2],[3]],[2,3,4],[[4],[5]]) == [5.0, 6.0], \"test case failed: basic single feature\"\nassert linear_regression_predict([[1,2],[2,0],[3,1],[0,2]],[4,3,5,2],[[1,1]]) == [2.6], \"test case failed: two features, invertible\"\nassert linear_regression_predict([[1],[1]],[2,3],[[2]]) == -1, \"test case failed: singular design matrix\"\nassert linear_regression_predict([[0,0],[1,2],[2,1],[3,3]],[2,3,7,8],[[4,5]]) == [9.0], \"test case failed: exact fit two features\"\nassert linear_regression_predict([[0],[1],[2],[3]],[1,3,5,7],[[4],[5]]) == [9.0, 11.0], \"test case failed: larger single-feature set\"\nassert linear_regression_predict([[-2],[-1],[0],[1],[2]],[-3,-1,1,3,5],[[3]]) == [7.0], \"test case failed: negative values\"\nassert linear_regression_predict([[1,0,0],[0,1,0],[0,0,1],[1,1,1]],[-0.5,1,-2,0.5],[[2,0,1]]) == [-1.0], \"test case failed: three features\"\nassert linear_regression_predict([[0],[0],[0]],[1,1,1],[[0]]) == -1, \"test case failed: all zero features (singular)\"\nassert linear_regression_predict([[1],[2],[3]],[2,4,6],[[4]]) == [8.0], \"test case failed: zero intercept line\""}
{"task_id": 136, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    Steps\n    -----\n    1. Shift by the maximum value along *axis* to prevent overflow.\n    2. Exponentiate the shifted values.\n    3. Normalize by the sum of exponentials along the same axis.\n    4. Round to four decimal places.\n    5. Return as a regular Python list.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array of raw scores.\n    axis : int, optional\n        Axis along which softmax is computed (default: -1).\n\n    Returns\n    -------\n    list\n        Softmax probabilities (same shape as *z*), rounded to four decimals.\n    \"\"\"\n    z = np.asarray(z)\n    z_max = np.max(z, axis=axis, keepdims=True)\n    z_shifted = z - z_max\n    exp_z = np.exp(z_shifted)\n    sum_exp = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_vals = exp_z / sum_exp\n    softmax_vals = np.round(softmax_vals, 4)\n    return softmax_vals.tolist()\nassert softmax(np.array([1, 2, 3])) == [0.09, 0.2447, 0.6652], \"test 1 failed: softmax([1,2,3])\"\nassert softmax(np.array([0, 0])) == [0.5, 0.5], \"test 2 failed: softmax([0,0])\"\nassert softmax(np.array([-1, -2, -3])) == [0.6652, 0.2447, 0.09], \"test 3 failed: softmax([-1,-2,-3])\"\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]])) == [[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]], \"test 4 failed: row-wise softmax\"\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]]), axis=0) == [[0.0474, 0.0474, 0.0474], [0.9526, 0.9526, 0.9526]], \"test 5 failed: column-wise softmax\"\nassert softmax(np.array([[1000, 1000], [1000, 1000]]), axis=1) == [[0.5, 0.5], [0.5, 0.5]], \"test 6 failed: large identical values\"\nassert softmax(np.array([1000, 1000])) == [0.5, 0.5], \"test 7 failed: vector of large identical values\"\nassert softmax(np.array([[1], [2]]), axis=0) == [[0.2689], [0.7311]], \"test 8 failed: column vector, axis=0\"\nassert softmax(np.array([[1], [2]]), axis=1) == [[1.0], [1.0]], \"test 9 failed: column vector, axis=1\"\nassert softmax(np.array([-1, 1])) == [0.1192, 0.8808], \"test 10 failed: softmax([-1,1])\""}
{"task_id": 138, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if len(y_true) == 0 or len(y_true) != len(y_pred):\n        return -1\n    matches = sum((1 for (a, b) in zip(y_true, y_pred) if a == b))\n    accuracy = matches / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score([1, 0, 1, 1], [1, 0, 0, 1]) == 0.75, \"test case failed: basic numerical example\"\nassert accuracy_score([1, 1, 1], [1, 1, 1]) == 1.0, \"test case failed: all correct predictions\"\nassert accuracy_score([0, 0, 0], [1, 1, 1]) == 0.0, \"test case failed: no correct predictions\"\nassert accuracy_score([\"cat\", \"dog\", \"cat\"], [\"cat\", \"cat\", \"cat\"]) == 0.6667, \"test case failed: string labels\"\nassert accuracy_score([True, False, True, False], [True, False, False, False]) == 0.75, \"test case failed: boolean labels\"\nassert accuracy_score([1.2, 3.4, 5.6], [1.2, 3.5, 5.6]) == 0.6667, \"test case failed: float labels\"\nassert accuracy_score([42], [42]) == 1.0, \"test case failed: single element correct\"\nassert accuracy_score([], []) == -1, \"test case failed: empty input sequences\"\nassert accuracy_score([1, 2, 3], [1, 2]) == -1, \"test case failed: different length sequences\"\nassert accuracy_score(list(\"abcdef\"), list(\"abcxyz\")) == 0.5, \"test case failed: half correct predictions\""}
{"task_id": 139, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    arr = np.asarray(list(z), dtype=float)\n    if arr.size == 0:\n        return []\n    tanh_vals = 2.0 / (1.0 + np.exp(-2.0 * arr)) - 1.0\n    return np.round(tanh_vals, 4).tolist()\nassert tanh_activation([-1, 0, 1]) == [-0.7616, 0.0, 0.7616], \"test case failed: tanh_activation([-1, 0, 1])\"\nassert tanh_activation([2, -2]) == [0.964, -0.964], \"test case failed: tanh_activation([2, -2])\"\nassert tanh_activation([5]) == [0.9999], \"test case failed: tanh_activation([5])\"\nassert tanh_activation([-5]) == [-0.9999], \"test case failed: tanh_activation([-5])\"\nassert tanh_activation([0.5, -0.5]) == [0.4621, -0.4621], \"test case failed: tanh_activation([0.5, -0.5])\"\nassert tanh_activation([10]) == [1.0], \"test case failed: tanh_activation([10])\"\nassert tanh_activation([-10]) == [-1.0], \"test case failed: tanh_activation([-10])\"\nassert tanh_activation([0]) == [0.0], \"test case failed: tanh_activation([0])\"\nassert tanh_activation([3.3]) == [0.9973], \"test case failed: tanh_activation([3.3])\"\nassert tanh_activation([-3.3]) == [-0.9973], \"test case failed: tanh_activation([-3.3])\""}
{"task_id": 140, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Return the minimum number of minutes required for the agent to reach\n    the lower-right corner of a square maze that contains spreading fire.\n\n    The fire spreads first every minute, then the agent moves.  The agent may\n    enter a cell only if that cell is not burning at the moment he arrives.\n\n    Parameters\n    ----------\n    grid : list[str]\n        An n\u00d7n list of strings consisting only of '.', '#', 'F'.\n\n    Returns\n    -------\n    int\n        The minimum time to reach the goal, or \u20111 if it is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    INF = math.inf\n    fire_time = [[INF] * n for _ in range(n)]\n    q_fire = deque()\n    for r in range(n):\n        for (c, ch) in enumerate(grid[r]):\n            if ch == 'F':\n                fire_time[r][c] = 0\n                q_fire.append((r, c))\n    dirs = ((1, 0), (-1, 0), (0, 1), (0, -1))\n    while q_fire:\n        (r, c) = q_fire.popleft()\n        for (dr, dc) in dirs:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#'):\n                if fire_time[nr][nc] == INF:\n                    fire_time[nr][nc] = fire_time[r][c] + 1\n                    q_fire.append((nr, nc))\n\n    def burning_at_start(cell_r, cell_c) -> bool:\n        \"\"\"True if that cell is already burning at t = 0.\"\"\"\n        return fire_time[cell_r][cell_c] == 0\n    if grid[0][0] == '#' or grid[n - 1][n - 1] == '#' or burning_at_start(0, 0) or burning_at_start(n - 1, n - 1):\n        return -1\n    if n == 1:\n        return 0\n    q = deque([(0, 0, 0)])\n    best_arrival = [[INF] * n for _ in range(n)]\n    best_arrival[0][0] = 0\n    while q:\n        (r, c, t) = q.popleft()\n        for (dr, dc) in dirs:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#'):\n                next_t = t + 1\n                if next_t >= fire_time[nr][nc]:\n                    continue\n                if next_t < best_arrival[nr][nc]:\n                    best_arrival[nr][nc] = next_t\n                    if nr == n - 1 and nc == n - 1:\n                        return next_t\n                    q.append((nr, nc, next_t))\n    return -1\nassert escape_fire_maze([\".\"]) == 0, \"test case failed: grid=['.']\"\nassert escape_fire_maze([\"F\"]) == -1, \"test case failed: grid=['F']\"\nassert escape_fire_maze([\"..\", \"..\"]) == 2, \"test case failed: grid=['..','..']\"\nassert escape_fire_maze([\"F.\", \"..\"]) == -1, \"test case failed: grid=['F.','..']\"\nassert escape_fire_maze([\"..F\", \"...\", \"...\"]) == -1, \"test case failed: grid=['..F','...','...']\"\nassert escape_fire_maze([\"...\", \".F.\", \"...\"]) == -1, \"test case failed: grid=['...','.F.','...']\"\nassert escape_fire_maze([\"..\", \".F\"]) == -1, \"test case failed: grid=['..','.F']\"\nassert escape_fire_maze([\"...\", \"...\", \"...\"]) == 4, \"test case failed: grid=['...','...','...']\"\nassert escape_fire_maze([\"....\", \"....\", \"....\", \"....\"]) == 6, \"test case failed: grid=['....','....','....','....']\"\nassert escape_fire_maze([\"F..\", \".F.\", \"..F\"]) == -1, \"test case failed: grid=['F..','.F.','..F']\""}
{"task_id": 141, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k\u2013Nearest Neighbours classifier.\n    \n    Parameters\n    ----------\n    X_train : (n_train, n_features) ndarray\n        Training samples.\n    y_train : (n_train,) ndarray\n        Labels of the training samples.\n    X_test  : (n_test,  n_features) ndarray\n        Samples to classify.\n    k       : int\n        Number of neighbours to use (if k > n_train, k == n_train).\n    metric  : {'euclidean', 'manhattan', 'cosine'}, optional\n        Distance metric. Anything else falls back to 'euclidean'.\n    \n    Returns\n    -------\n    preds : (n_test,) ndarray\n        Predicted labels for X_test.\n    \"\"\"\n    if k <= 0:\n        raise ValueError('k must be a positive integer.')\n    metric = metric.lower()\n    n_train = X_train.shape[0]\n    k = min(k, n_train)\n    if metric == 'manhattan':\n        D = np.abs(X_test[:, None, :] - X_train[None, :, :]).sum(axis=2)\n    elif metric == 'cosine':\n        eps = 1e-10\n        t_norm = np.linalg.norm(X_test, axis=1, keepdims=True) + eps\n        r_norm = np.linalg.norm(X_train, axis=1) + eps\n        sim = X_test @ X_train.T / (t_norm * r_norm)\n        D = 1.0 - sim\n    else:\n        diff = X_test[:, None, :] - X_train[None, :, :]\n        D = np.sum(diff ** 2, axis=2)\n    nn_idx = np.argpartition(D, kth=k - 1, axis=1)[:, :k]\n    preds = np.empty(X_test.shape[0], dtype=y_train.dtype)\n    for (i, neighbours) in enumerate(nn_idx):\n        labels = y_train[neighbours]\n        (uniq, counts) = np.unique(labels, return_counts=True)\n        majority = uniq[counts == counts.max()]\n        preds[i] = majority.min()\n    return preds\nassert knn_predict(np.array([[0, 0], [1, 1], [0, 1], [1, 0]]), np.array([0, 0, 1, 1]), np.array([[0.9, 0.9]]), 3, 'euclidean').tolist() == [1], 'Test 1 failed.'\nassert knn_predict(np.array([[0, 0], [1, 2], [3, 4]]), np.array([0, 1, 1]), np.array([[0, 1]]), 1, 'manhattan').tolist() == [0], 'Test 2 failed.'\nassert knn_predict(np.array([[1, 0], [0, 1]]), np.array([0, 1]), np.array([[1, 0.1]]), 1, 'cosine').tolist() == [0], 'Test 3 failed.'\nassert knn_predict(np.array([[0, 0], [0, 2]]), np.array([0, 1]), np.array([[0, 1]]), 2, 'euclidean').tolist() == [0], 'Test 4 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3], [8, 8], [9, 9]]), np.array([0, 0, 0, 1, 1]), np.array([[1.5, 1.5], [9, 8.9]]), 3, 'euclidean').tolist() == [0, 1], 'Test 5 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 0, 0]), np.array([[2.1, 2]]), 1).tolist() == [0], 'Test 6 failed.'\nassert knn_predict(np.array([[0, 0], [0, 1], [1, 1]]), np.array([0, 0, 1]), np.array([[0.1, 0.1]]), 2, 'minkowski').tolist() == [0], 'Test 7 failed.'\nassert knn_predict(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1.1]]), 3, 'manhattan').tolist() == [1], 'Test 8 failed.'\nassert knn_predict(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 2]), np.array([[0.9, 0.05, 0.05]]), 1, 'cosine').tolist() == [0], 'Test 9 failed.'\nassert knn_predict(np.array([[-1, -1], [-2, -2], [1, 1], [2, 2]]), np.array([0, 0, 1, 1]), np.array([[-1.5, -1.5]]), 2, 'euclidean').tolist() == [0], 'Test 10 failed.'"}
{"task_id": 143, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    if derivative:\n        out = np.where(x >= 0, 1.0, alpha)\n    else:\n        out = np.where(x >= 0, x, alpha * x)\n    return out\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.1), np.array([-0.3, -0.1, 0., 1., 3.])), \"failed on mixed signs activation\"\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.05), np.array([-0.15, -0.05, 0., 1., 3.])), \"failed on custom alpha activation\"\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.1, derivative=True), np.array([0.1, 0.1, 1., 1., 1.])), \"failed on gradient computation\"\nassert leaky_relu(5) == 5, \"scalar positive input failed\"\nassert leaky_relu(-5, alpha=0.3) == -1.5, \"scalar negative input failed\"\nassert leaky_relu(-5, alpha=0.3, derivative=True) == 0.3, \"scalar gradient negative failed\"\nx = np.random.randn(1000)\nassert leaky_relu(x).shape == x.shape, \"shape mismatch on random vector\"\nmat = np.random.randn(5, 4, 3)\nassert leaky_relu(mat, derivative=True).shape == mat.shape, \"shape mismatch on tensor derivative\"\nzero_arr = np.zeros((10,))\nassert np.array_equal(leaky_relu(zero_arr), zero_arr), \"zeros activation failed\""}
{"task_id": 144, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    try:\n        a = np.asarray(actual, dtype=float)\n        p = np.asarray(predicted, dtype=float)\n    except Exception:\n        return -1\n    if a.shape != p.shape or a.size == 0:\n        return -1\n    mae = np.mean(np.abs(a - p))\n    return float(np.round(mae, 4))\nassert mean_absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.5, \"failed: basic 1-D list input\"\nassert mean_absolute_error((1, 2, 3), (1, 2, 3)) == 0.0, \"failed: identical tuples must give 0\"\nassert mean_absolute_error(np.array([[1, 2], [3, 4]]), np.array([[2, 3], [4, 5]])) == 1.0, \"failed: 2-D numpy arrays\"\nassert mean_absolute_error([1, 2, 3], [1, 2]) == -1, \"failed: length mismatch expected \u20111\"\nassert mean_absolute_error([[1, 2, 3]], [[1, 2, 3]]) == 0.0, \"failed: single-row matrix\"\nassert mean_absolute_error([0.12345], [0.12344]) == 0.0, \"failed: rounding to 4 decimals\"\nassert mean_absolute_error([10, 20, 30], [0, 0, 0]) == 20.0, \"failed: large errors\"\nassert mean_absolute_error(np.linspace(0, 1, 5), np.full(5, 0.5)) == 0.3, \"failed: linspace vs constant\""}
{"task_id": 146, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n    if X.ndim != 2 or X_test.ndim != 2:\n        raise ValueError('X and X_test must be 2-D arrays')\n    if len(X) != len(y):\n        raise ValueError('X and y must contain the same number of samples')\n    if k <= 0:\n        raise ValueError('k must be a positive integer')\n    metric = metric.lower()\n    n_train = X.shape[0]\n    n_test = X_test.shape[0]\n    k = min(k, n_train)\n    if metric == 'euclidean':\n        diff = X_test[:, None, :] - X[None, :, :]\n        dists = np.linalg.norm(diff, axis=2)\n    elif metric == 'manhattan':\n        diff = X_test[:, None, :] - X[None, :, :]\n        dists = np.abs(diff).sum(axis=2)\n    elif metric == 'cosine':\n        eps = 1e-12\n        x_norm = np.linalg.norm(X, axis=1) + eps\n        xt_norm = np.linalg.norm(X_test, axis=1) + eps\n        dot_prod = X_test @ X.T\n        denom = np.outer(xt_norm, x_norm)\n        dists = 1.0 - dot_prod / denom\n    else:\n        raise ValueError(\"metric must be 'euclidean', 'manhattan', or 'cosine'\")\n    predictions = []\n    for i in range(n_test):\n        idx = np.argpartition(dists[i], k - 1)[:k]\n        neigh_y = y[idx]\n        (unique, counts) = np.unique(neigh_y, return_counts=True)\n        max_count = counts.max()\n        winners = unique[counts == max_count]\n        pred = winners.min()\n        predictions.append(pred)\n    return predictions\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'euclidean') == [0], \"Test 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 1, 'euclidean') == [1], \"Test 2 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'manhattan') == [0], \"Test 3 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'cosine') == [0], \"Test 4 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 3, 'euclidean') == [0], \"Test 5 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 1, 'manhattan') == [0], \"Test 6 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.2,0.2]]), 10, 'euclidean') == [0], \"Test 7 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), 4, 'euclidean') == [0], \"Test 8 failed\"\nassert knn_predict(np.array([[1,0],[0,1],[1,1]]), np.array([0,1,1]), np.array([[1,1]]), 1, 'cosine') == [1], \"Test 9 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.1,0.1],[0.9,0.9]]), 1, 'euclidean') == [0,1], \"Test 10 failed\""}
{"task_id": 147, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"Numerically\u2013stable sigmoid.\"\"\"\n    z = np.clip(z, -500, 500)\n    return 1.0 / (1.0 + np.exp(-z))\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for X_test.\n    See task description for full documentation.\n    \"\"\"\n    if X_train.ndim != 2 or X_test.ndim != 2:\n        raise ValueError('X_train and X_test must be 2-D arrays.')\n    if X_train.shape[1] != X_test.shape[1]:\n        raise ValueError('Train and test must have the same number of features.')\n    if set(np.unique(y_train)) - {0, 1}:\n        raise ValueError('y_train must contain only 0 and 1.')\n    if np.all(y_train == y_train[0]):\n        return [int(y_train[0])] * len(X_test)\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    for _ in range(epochs):\n        z = X_train @ w + b\n        p = _sigmoid(z)\n        error = p - y_train\n        grad_w = X_train.T @ error / n_samples\n        grad_b = error.mean()\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n    probs_test = _sigmoid(X_test @ w + b)\n    preds = (probs_test >= 0.5).astype(int)\n    return preds.tolist()\nassert logistic_regression(np.array([[-2,-1],[-3,-2],[-1,-2],[-2,-3],[2,1],[3,2],[1,2],[2,3]]), np.array([0,0,0,0,1,1,1,1]), np.array([[-2,-2],[2,2]])) == [0,1], \"test case failed: basic 2D separation\"\nassert logistic_regression(np.array([[-2],[-1.5],[-1],[5],[6],[7]]), np.array([0,0,0,1,1,1]), np.array([[-1.25],[6]])) == [0,1], \"test case failed: 1D simple\"\nassert logistic_regression(np.array([[-3,1],[-2,2],[-1,1],[4,1],[5,2],[6,2]]), np.array([0,0,0,1,1,1]), np.array([[-2,1],[5,1]])) == [0,1], \"test case failed: 2D x-axis split\"\nassert logistic_regression(np.array([[-4,0,1],[-3,1,0],[-2,1,1],[3,0,0],[4,1,1],[5,0,1]]), np.array([0,0,0,1,1,1]), np.array([[-3,0,1],[4,0,0]])) == [0,1], \"test case failed: 3D features\"\nassert logistic_regression(np.array([[-1,-1],[-2,-1],[-1,-2],[1,1],[2,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[-1.5,-1.5],[1.5,1.5]])) == [0,1], \"test case failed: negative vs positive quadrant\"\nassert logistic_regression(np.array([[-5],[-4],[-3],[3],[4],[5]]), np.array([0,0,0,1,1,1]), np.array([[-4.5],[4.5]])) == [0,1], \"test case failed: symmetric 1D\"\nassert logistic_regression(np.array([[-3,0],[-2,-2],[-1,0],[1,1],[2,2],[3,1]]), np.array([0,0,0,1,1,1]), np.array([[-2,-1],[2,1]])) == [0,1], \"test case failed: diagonal separation\"\nassert logistic_regression(np.array([[-1,10],[-2,9],[-3,11],[4,10],[5,9],[6,11]]), np.array([0,0,0,1,1,1]), np.array([[-2,10],[5,10]])) == [0,1], \"test case failed: irrelevant second feature\"\nassert logistic_regression(np.array([[-20],[-15],[-10],[10],[15],[20]]), np.array([0,0,0,1,1,1]), np.array([[-12],[12]])) == [0,1], \"test case failed: large magnitude 1D\"\nassert logistic_regression(np.array([[-3,-2,0],[-2,-1,-1],[-4,-1,-2],[3,2,1],[2,1,1],[4,2,2]]), np.array([0,0,0,1,1,1]), np.array([[-3,-1,-1],[3,1,1]])) == [0,1], \"test case failed: sum of features\""}
{"task_id": 148, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List\nfrom typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average (EMA) of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not data or not 0.0 <= alpha <= 1.0:\n        return -1\n    if alpha == 0:\n        return [round(data[0], 4)] * len(data)\n    if alpha == 1:\n        return [round(x, 4) for x in data]\n    smoothed: List[float] = [data[0]]\n    for k in range(1, len(data)):\n        s_k = (1 - alpha) * smoothed[-1] + alpha * data[k]\n        smoothed.append(s_k)\n    return [round(v, 4) for v in smoothed]\nassert exp_smoothing([10, 20, 30, 25, 15], 0.1) == [10.0, 11.0, 12.9, 14.11, 14.199], \"failed on basic example\"\nassert exp_smoothing([5, 4, 3, 2, 1], 0.3) == [5.0, 4.7, 4.19, 3.533, 2.7731], \"failed on decreasing list\"\nassert exp_smoothing([1, 1, 1, 1], 0.25) == [1.0, 1.0, 1.0, 1.0], \"failed on constant list\"\nassert exp_smoothing([3, 6, 9], 0.5) == [3.0, 4.5, 6.75], \"failed on alpha 0.5\"\nassert exp_smoothing([7, 8, 9], 0) == [7.0, 7.0, 7.0], \"failed on alpha 0\"\nassert exp_smoothing([7, 8, 9], 1) == [7.0, 8.0, 9.0], \"failed on alpha 1\"\nassert exp_smoothing([], 0.3) == -1, \"failed on empty data list\"\nassert exp_smoothing([1, 2, 3], -0.1) == -1, \"failed on negative alpha\"\nassert exp_smoothing([1, 2, 3], 1.1) == -1, \"failed on alpha greater than 1\"\nassert exp_smoothing([100], 0.6) == [100.0], \"failed on single element list\""}
{"task_id": 150, "completion_id": 0, "passed": true, "result": "passed", "solution": "from heapq import heappush, heappop\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Return any shortest path from (0,0) to (m-1,n-1) in a 0/1 grid using A*.\n    If such a path does not exist, return -1.\n    \"\"\"\n    if not grid:\n        return -1\n    (m, n) = (len(grid), len(grid[0]))\n    if grid[0][0] == 1 or grid[m - 1][n - 1] == 1:\n        return -1\n\n    def h(r: int, c: int) -> int:\n        return abs(r - (m - 1)) + abs(c - (n - 1))\n    open_heap: List[Tuple[int, int, int, int]] = []\n    heappush(open_heap, (h(0, 0), 0, 0, 0))\n    g_cost = {(0, 0): 0}\n    parent: dict[Tuple[int, int], Tuple[int, int]] = {(0, 0): None}\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while open_heap:\n        (f, g, r, c) = heappop(open_heap)\n        if (r, c) == (m - 1, n - 1):\n            path: List[Tuple[int, int]] = []\n            cur: Tuple[int, int] | None = (r, c)\n            while cur:\n                path.append(cur)\n                cur = parent[cur]\n            return path[::-1]\n        for (dr, dc) in dirs:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] == 0):\n                new_g = g + 1\n                if new_g < g_cost.get((nr, nc), float('inf')):\n                    g_cost[nr, nc] = new_g\n                    parent[nr, nc] = (r, c)\n                    heappush(open_heap, (new_g + h(nr, nc), new_g, nr, nc))\n    return -1\nassert find_shortest_path([[0]]) == [(0, 0)], \"failed on 1x1 open grid\"\nassert find_shortest_path([[1]]) == -1, \"failed when single cell is blocked\"\nassert find_shortest_path([[0,0],[0,0]]) == [(0,0),(0,1),(1,1)], \"failed on 2x2 open grid\"\nassert find_shortest_path([[0,1,0],[0,1,0],[0,0,0]]) == [(0,0),(1,0),(2,0),(2,1),(2,2)], \"failed on narrow corridor\"\nassert find_shortest_path([[0,0,0],[1,1,0],[0,0,0]]) == [(0,0),(0,1),(0,2),(1,2),(2,2)], \"failed on example grid\"\nassert find_shortest_path([[0,1,0],[1,1,0],[0,0,0]]) == -1, \"failed on disconnected grid\"\nassert len(find_shortest_path([[0]*5 for _ in range(5)])) == 9, \"failed on 5x5 clear grid length\"\nassert find_shortest_path([[0,0,1,0],[1,0,1,0],[1,0,0,0],[1,1,1,0]])[-1] == (3,3), \"failed to reach correct goal\"\nassert find_shortest_path([[0,1,1],[0,1,1],[0,0,0]]) == [(0,0),(1,0),(2,0),(2,1),(2,2)], \"failed on bottom route\""}
{"task_id": 151, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _sigmoid(x: np.ndarray) -> np.ndarray:\n    return 1.0 / (1.0 + np.exp(-x))\ndef _sigmoid_grad(y: np.ndarray) -> np.ndarray:\n    return y * (1.0 - y)\ndef _tanh(x: np.ndarray) -> np.ndarray:\n    return np.tanh(x)\ndef _tanh_grad(y: np.ndarray) -> np.ndarray:\n    return 1.0 - y ** 2\ndef _relu(x: np.ndarray) -> np.ndarray:\n    return np.maximum(0.0, x)\ndef _relu_grad(y: np.ndarray) -> np.ndarray:\n    return (y > 0).astype(y.dtype)\ndef _softmax(x: np.ndarray) -> np.ndarray:\n    z = x - np.max(x, axis=-1, keepdims=True)\n    exp_z = np.exp(z)\n    return exp_z / np.sum(exp_z, axis=-1, keepdims=True)\ndef _softmax_grad(_: np.ndarray) -> np.ndarray:\n    return 1.0\n_FORWARD = {'sigmoid': _sigmoid, 'tanh': _tanh, 'relu': _relu, 'softmax': _softmax}\n_BACKWARD = {'sigmoid': _sigmoid_grad, 'tanh': _tanh_grad, 'relu': _relu_grad, 'softmax': _softmax_grad}\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Apply an activation function and its element-wise derivative in one pass.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        One of: \"sigmoid\", \"tanh\", \"relu\", \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient flowing from the layer above (same shape as X).\n\n    Returns\n    -------\n    (A, grad) : tuple[np.ndarray, np.ndarray]\n        A   \u2013 activation(X)  (rounded to 4 decimals)\n        grad \u2013 upstream_grad * local_derivative  (rounded to 4 decimals)\n    \"\"\"\n    activation = activation.lower()\n    if activation not in _FORWARD:\n        raise ValueError(f\"Unsupported activation '{activation}'. Choose from {list(_FORWARD.keys())}.\")\n    A = _FORWARD[activation](X)\n    local_grad = _BACKWARD[activation](A)\n    grad = upstream_grad * local_grad\n    A = np.round(A, 4)\n    grad = np.round(grad, 4)\n    return (A, grad)\nassert (activation_forward_backward(np.array([[-1,0,1]]),\"sigmoid\",np.ones((1,3)))[0] == np.array([[0.2689,0.5,0.7311]])).all(), \"test-case 1 failed: forward sigmoid\"\nassert (activation_forward_backward(np.array([[-1,0,1]]),\"sigmoid\",np.ones((1,3)))[1] == np.array([[0.1966,0.25,0.1966]])).all(), \"test-case 2 failed: backward sigmoid\"\nassert (activation_forward_backward(np.array([[0,-0.5,0.5]]),\"tanh\",np.ones((1,3)))[0] == np.array([[0.0,-0.4621,0.4621]])).all(), \"test-case 3 failed: forward tanh\"\nassert (activation_forward_backward(np.array([[-3,0,3]]),\"relu\",np.ones((1,3)))[0] == np.array([[0.0,0.0,3.0]])).all(), \"test-case 5 failed: forward relu\"\nassert (activation_forward_backward(np.array([[-3,0,3]]),\"relu\",np.ones((1,3)))[1] == np.array([[0.0,0.0,1.0]])).all(), \"test-case 6 failed: backward relu\"\nassert (activation_forward_backward(np.array([[1.0,2.0,3.0]]),\"softmax\",np.full((1,3),2.0))[1] == np.full((1,3),2.0)).all(), \"test-case 8 failed: backward softmax\"\nA,G = activation_forward_backward(np.array([[-1,0,1],[2,-2,0.5]]),\"sigmoid\",np.ones((2,3))); assert (A == np.array([[0.2689,0.5,0.7311],[0.8808,0.1192,0.6225]])).all() and (G == np.array([[0.1966,0.25,0.1966],[0.105,0.105,0.235]])).all(), \"test-case 9 failed: full sigmoid example\"\nassert (activation_forward_backward(np.array([[10,-10]]),\"relu\",np.array([[0.3,0.7]]))[1] == np.array([[0.3,0.0]])).all(), \"test-case 10 failed: mixed relu gradient\""}
{"task_id": 152, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    y_true = np.asarray(y_true).ravel()\n    y_pred = np.asarray(y_pred).ravel()\n    if y_true.size == 0 or y_pred.size == 0 or y_true.size != y_pred.size:\n        return -1\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / y_true.size\n    return round(float(accuracy), 4)\nassert accuracy_score([1, 0, 2, 2, 1], [1, 0, 1, 2, 0]) == 0.6, \"Test case failed: basic mixed correctness\"\nassert accuracy_score([0, 1, 2], [0, 1, 2]) == 1.0, \"Test case failed: perfect accuracy\"\nassert accuracy_score([1, 2, 3], [1, 2]) == -1, \"Test case failed: unequal length should return -1\"\nassert accuracy_score([0, 1, 1, 1], [1, 1, 1, 1]) == 0.75, \"Test case failed: one misclassification\"\nassert accuracy_score([1, 2, 3, 4], [4, 3, 2, 1]) == 0.0, \"Test case failed: zero accuracy\"\nassert accuracy_score([1], [1]) == 1.0, \"Test case failed: single element correct\"\nassert accuracy_score([0, 0, 0, 0, 0], [0, 1, 0, 1, 0]) == 0.6, \"Test case failed: majority correct\"\nimport numpy as np\nassert accuracy_score(np.array([1, 2, 1, 2]), np.array([1, 2, 2, 2])) == 0.75, \"Test case failed: numpy array input\"\nassert accuracy_score([], []) == -1, \"Test case failed: empty input\"\nassert accuracy_score([1, 1, 1, 0, 0], [1, 0, 1, 0, 0]) == 0.8, \"Test case failed: 80 percent accuracy\""}
{"task_id": 154, "completion_id": 0, "passed": false, "result": "failed: gamma must be a positive value.", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF (Gaussian) kernel matrix between two sets of vectors.\n\n    Args:\n        X: Array of shape (n_samples, n_features) or a 1-D array treated as one sample.\n        Y: Array of shape (m_samples, n_features) or a 1-D array treated as one sample.\n        gamma: Positive scalar controlling the kernel width.\n\n    Returns:\n        Nested Python list with the RBF kernel matrix,\n        every entry rounded to six decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    Y = np.asarray(Y, dtype=float)\n    if X.ndim == 1:\n        X = X[np.newaxis, :]\n    if Y.ndim == 1:\n        Y = Y[np.newaxis, :]\n    if X.shape[1] != Y.shape[1]:\n        raise ValueError('X and Y must have the same number of features.')\n    if gamma <= 0:\n        raise ValueError('gamma must be a positive value.')\n    X_norm_sq = np.sum(X ** 2, axis=1)[:, np.newaxis]\n    Y_norm_sq = np.sum(Y ** 2, axis=1)[np.newaxis, :]\n    dist_sq = X_norm_sq + Y_norm_sq - 2 * X @ Y.T\n    dist_sq = np.maximum(dist_sq, 0.0)\n    K = np.exp(-gamma * dist_sq)\n    return np.round(K, 6).tolist()\nassert rbf_kernel(np.array([[1, 2], [3, 4]]), np.array([[1, 2], [5, 5]]), 0.1) == [[1.0, 0.082085], [0.449329, 0.606531]], \"test case failed: example\"\nassert rbf_kernel(np.array([[1, 2, 3]]), np.array([[1, 2, 4]]), 0.5) == [[0.606531]], \"test case failed: single samples\"\nassert rbf_kernel(np.array([[1]]), np.array([[3]]), 0.0) == [[1.0]], \"test case failed: gamma 0\"\nassert rbf_kernel(np.array([[0, 0], [1, 1], [2, 2]]), np.array([[0, 0], [2, 2]]), 1.0) == [[1.0, 0.000335], [0.135335, 0.135335], [0.000335, 1.0]], \"test case failed: multiple samples\"\nassert rbf_kernel(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), 0.5) == [[1.0, 0.367879], [0.367879, 1.0]], \"test case failed: symmetric matrix\"\nassert rbf_kernel(np.array([[1, 2]]), np.array([[1, 2]]), 10.0) == [[1.0]], \"test case failed: large gamma\"\nassert rbf_kernel(np.array([[0, 0]]), np.array([[100, 100]]), 0.01) == [[0.0]], \"test case failed: distant points\"\nassert rbf_kernel(np.zeros((2, 2)), np.ones((2, 2)), 0.2) == [[0.67032, 0.67032], [0.67032, 0.67032]], \"test case failed: zeros vs ones\"\nassert rbf_kernel(np.array([[0], [1], [2]]), np.array([[1], [2]]), 0.5) == [[0.606531, 0.135335], [1.0, 0.606531], [0.606531, 1.0]], \"test case failed: 1-D features\"\nassert rbf_kernel(np.array([[1, 2, 3]]), np.array([[1, 2, 3]])) == [[1.0]], \"test case failed: default gamma\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Forward pass of a two-hidden-layer actor network (Linear \u2192 ReLU \u2192\n    Linear \u2192 ReLU \u2192 Linear \u2192 tanh).\n\n    Args:\n        state (list[float] | np.ndarray): 1-D state vector.\n        weights (dict): Dictionary containing the NumPy arrays\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector, each element rounded to four decimals.\n    \"\"\"\n    x = np.asarray(state, dtype=float)\n    (W1, b1) = (weights['W1'], weights['b1'])\n    (W2, b2) = (weights['W2'], weights['b2'])\n    (W3, b3) = (weights['W3'], weights['b3'])\n    z1 = x @ W1 + b1\n    a1 = np.maximum(0, z1)\n    z2 = a1 @ W2 + b2\n    a2 = np.maximum(0, z2)\n    z3 = a2 @ W3 + b3\n    actions = np.tanh(z3)\n    actions_rounded = np.round(actions, 4)\n    if actions_rounded.shape == ():\n        return [float(actions_rounded)]\n    return actions_rounded.tolist()\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 157, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if len(y_true) == 0:\n        return 0\n    correct = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score([1, 2, 3], [1, 2, 3]) == 1.0, \"test case failed: identical labels\"\nassert accuracy_score([1, 2, 3], [3, 2, 1]) == 0.3333, \"test case failed: one correct out of three\"\nassert accuracy_score([], []) == 0, \"test case failed: empty inputs\"\nassert accuracy_score([1], []) == -1, \"test case failed: length mismatch\"\nassert accuracy_score([0, 1, 2, 2, 1], [0, 0, 2, 2, 1]) == 0.8, \"test case failed: mixed correctness\"\nassert accuracy_score([\"cat\", \"dog\", \"cat\"], [\"cat\", \"cat\", \"cat\"]) == 0.6667, \"test case failed: string labels\"\nassert accuracy_score([True, False, True, False], [True, True, True, False]) == 0.75, \"test case failed: boolean labels\"\nassert accuracy_score(list(range(100)), list(range(100))) == 1.0, \"test case failed: large perfect match\"\nassert accuracy_score(list(range(100)), list(range(99)) + [101]) == 0.99, \"test case failed: one error in 100\"\nassert accuracy_score((1, 1, 1, 1), (1, 0, 1, 0)) == 0.5, \"test case failed: tuple input\""}
{"task_id": 158, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients (closed-form).\n\n    Args:\n        X: Feature matrix as nested list with shape (N, M).\n        y: Target vector of length N.\n        alpha: Non-negative regularisation strength.\n        fit_intercept: If True, adds an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.\n        When fit_intercept is True the first element is the intercept.\n    \"\"\"\n    X_mat = np.asarray(X, dtype=float)\n    y_vec = np.asarray(y, dtype=float)\n    if fit_intercept:\n        ones = np.ones((X_mat.shape[0], 1), dtype=float)\n        X_mat = np.hstack((ones, X_mat))\n    n_features = X_mat.shape[1]\n    A = np.eye(n_features) * alpha\n    if fit_intercept:\n        A[0, 0] = 0.0\n    XtX_plus_A = X_mat.T @ X_mat + A\n    XTy = X_mat.T @ y_vec\n    beta = np.linalg.solve(XtX_plus_A, XTy)\n    return [round(float(b), 4) for b in beta]\nassert ridge_regression([[1, 2], [3, 4], [5, 6]], [1, 2, 3], 1.0, True) == [0.3529, 0.2353, 0.2353], \"failed: example case\"\nassert ridge_regression([[1], [2], [3]], [1, 2, 3], 0.0, False) == [1.0], \"failed: simple OLS without intercept\"\nassert ridge_regression([[1], [2], [3]], [1, 2, 3], 1.0, False) == [0.9333], \"failed: ridge without intercept, \u03b1=1\"\nassert ridge_regression([[1, 0], [0, 1]], [1, 1], 1.0, True) == [1.0, 0.0, 0.0], \"failed: tiny matrix with intercept\"\nassert ridge_regression([[1, 2], [3, 4]], [5, 6], 0.0, False) == [-4.0, 4.5], \"failed: 2\u00d72 OLS\"\nassert ridge_regression([[1, 2], [3, 4]], [5, 6], 1.0, False) == [0.2, 1.4857], \"failed: 2\u00d72 ridge \u03b1=1\"\nassert ridge_regression([[1], [2]], [1, 1], 1.0, True) == [1.0, 0.0], \"failed: intercept only fit\"\nassert ridge_regression([[0], [0], [0]], [1, 1, 1], 1.0, True) == [1.0, 0.0], \"failed: zero feature with intercept\"\nassert ridge_regression([[1], [1]], [2, 4], 1.0, False) == [2.0], \"failed: single feature duplicates\"\nassert ridge_regression([[2, 0], [0, 2]], [1, 2], 0.0, False) == [0.5, 1.0], \"failed: diagonal X matrix\""}
{"task_id": 159, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute log p(x_i | \u03bc, \u03a3) for a multivariate normal distribution.\n\n    Parameters\n    ----------\n    x_i : np.ndarray\n        Sample vector of shape (d,).\n    mu : np.ndarray\n        Mean vector of shape (d,).\n    sigma : np.ndarray\n        Positive\u2013definite covariance matrix of shape (d, d).\n\n    Returns\n    -------\n    float\n        Log probability density rounded to four decimal places.\n    \"\"\"\n    x_i = np.asarray(x_i).ravel()\n    mu = np.asarray(mu).ravel()\n    sigma = np.asarray(sigma)\n    d = x_i.size\n    diff = x_i - mu\n    (sign, logdet) = np.linalg.slogdet(sigma)\n    if sign <= 0:\n        raise ValueError('Covariance matrix must be positive-definite.')\n    alpha = np.linalg.solve(sigma, diff)\n    quad_form = diff @ alpha\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + logdet + quad_form)\n    return round(float(log_prob), 4)\nassert log_gaussian_pdf(np.array([0]), np.array([0]), np.array([[1]])) == -0.9189, \"failed on 1D standard normal at mean\"\nassert log_gaussian_pdf(np.array([1]), np.array([0]), np.array([[1]])) == -1.4189, \"failed on 1D standard normal at x=1\"\nassert log_gaussian_pdf(np.array([0,0]), np.array([0,0]), np.eye(2)) == -1.8379, \"failed on 2D standard normal at mean\"\nassert log_gaussian_pdf(np.array([1,1]), np.array([0,0]), np.eye(2)) == -2.8379, \"failed on 2D standard normal at [1,1]\"\nassert log_gaussian_pdf(np.array([2,0]), np.array([1,0]), np.eye(2)) == -2.3379, \"failed on 2D standard normal shifted point\"\nassert log_gaussian_pdf(np.array([0,0]), np.array([0,0]), np.diag([2,2])) == -2.5310, \"failed on 2D diagonal covariance det>1\"\nassert log_gaussian_pdf(np.array([1,0]), np.array([0,0]), np.diag([2,2])) == -2.7810, \"failed on 2D diagonal covariance at [1,0]\"\nassert log_gaussian_pdf(np.array([0,0,0]), np.array([0,0,0]), np.eye(3)) == -2.7568, \"failed on 3D standard normal at mean\"\nassert log_gaussian_pdf(np.array([0]), np.array([0]), np.array([[0.5]])) == -0.5724, \"failed on 1D variance 0.5 at mean\"\nassert log_gaussian_pdf(np.array([1]), np.array([0]), np.array([[0.5]])) == -1.5724, \"failed on 1D variance 0.5 at x=1\""}
{"task_id": 160, "completion_id": 0, "passed": false, "result": "failed: failed on simple perfect line", "solution": "import numpy as np\nimport numpy as np\ndef _soft_threshold(a: float, tau: float) -> float:\n    \"\"\"Soft-thresholding operator S(a, \u03c4).\"\"\"\n    if a > tau:\n        return a - tau\n    if a < -tau:\n        return a + tau\n    return 0.0\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Lasso (L1) linear regression fitted with coordinate descent.\"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    (m, n) = X.shape\n    intercept_col = np.ones((m, 1)) if fit_intercept else np.zeros((m, 1))\n    XA = np.hstack((intercept_col, X))\n    p = n + 1\n    w = np.zeros(p)\n    col_sq_norms = (XA ** 2).sum(axis=0)\n    for _ in range(max_iters):\n        if fit_intercept:\n            y_hat_wo_b = XA[:, 1:].dot(w[1:])\n            w[0] = (y - y_hat_wo_b).mean()\n        for j in range(1, p):\n            x_j = XA[:, j]\n            r_j = y - XA.dot(w) + w[j] * x_j\n            rho = x_j.dot(r_j)\n            w[j] = _soft_threshold(rho, lambda_param * m) / col_sq_norms[j]\n    weights = np.round(w[1:], 4).tolist()\n    bias = round(float(w[0]), 4)\n    return (weights, bias)\nassert fit_lasso(np.array([[1], [2], [3]]), np.array([2, 4, 6]), 0.0, 60) == ([2.0], 0.0), \"failed on simple perfect line\"\nassert fit_lasso(np.array([[0], [1], [2]]), np.array([1, 3, 5]), 0.0, 60) == ([2.0], 1.0), \"failed on line with intercept\"\nassert fit_lasso(np.array([[3], [3], [3]]), np.array([2, 2, 2]), 0.0, 30, False) == ([0.6667], 0.0), \"no intercept forces through origin\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 0.0, 50) == ([1.0, 2.0, 3.0], 0.0), \"identity design matrix\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 5.0, 50) == ([0.0, 0.0, 0.0], 2.0), \"\u03bb eliminates weights\"\nassert fit_lasso(np.array([[1, -1], [-1, 1]]), np.array([0, 0]), 0.0, 40) == ([0.0, 0.0], 0.0), \"all zeros target\""}
{"task_id": 161, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predict binary labels (+1 / -1) with a second-order Factorization Machine.\n\n    Parameters\n    ----------\n    X  : array_like, shape = (m, n)\n         Design matrix containing m samples with n features each.\n    w0 : float\n         Global bias term.\n    w  : array_like, shape = (n,)\n         Linear weights.\n    V  : array_like, shape = (n, k)\n         Latent factor matrix (k is the embedding dimension).\n\n    Returns\n    -------\n    list\n        Predicted labels (+1 or -1) for the m samples.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    w = np.asarray(w, dtype=float)\n    V = np.asarray(V, dtype=float)\n    linear_term = X @ w\n    XV = X @ V\n    X2V2 = X ** 2 @ V ** 2\n    interaction_term = 0.5 * (XV ** 2 - X2V2).sum(axis=1)\n    scores = w0 + linear_term + interaction_term\n    labels = np.where(scores >= 0, 1, -1)\n    return labels.tolist()\nassert factorization_machine_predict(np.array([[1, 0], [0, 1]]), 0.0, np.array([-0.5, 0.5]), np.zeros((2, 1))) == [-1, 1], \"test case 1 failed\"\nassert factorization_machine_predict(np.array([[1, 1]]), 0.0, np.array([0.2, 0.2]), np.zeros((2, 1))) == [1], \"test case 2 failed\"\nassert factorization_machine_predict(np.array([[1, 0], [1, 1]]), -1.0, np.array([1.0, 0.0]), np.zeros((2, 1))) == [1, 1], \"test case 3 failed\"\nassert factorization_machine_predict(np.array([[1, 0, 1], [0, 1, 1]]), 0.5, np.array([0.2, -0.3, 0.8]), np.array([[0.1, 0.2], [0.0, -0.1], [0.5, 0.6]])) == [1, 1], \"test case 4 failed\"\nassert factorization_machine_predict(np.array([[1, 0, 1], [0, 1, 1]]), 0.0, np.zeros(3), np.array([[0.1, 0.2], [0.0, -0.1], [0.5, 0.6]])) == [1, -1], \"test case 5 failed\"\nassert factorization_machine_predict(np.array([[1, 1]]), 0.0, np.zeros(2), np.array([[1.0], [1.0]])) == [1], \"test case 6 failed\"\nassert factorization_machine_predict(np.array([[3, 4]]), 0.0, np.zeros(2), np.zeros((2, 1))) == [1], \"test case 7 failed\"\nassert factorization_machine_predict(np.array([[1, 2]]), -0.2, np.array([0.2, 0.1]), np.array([[0.1, 0.2], [0.3, 0.4]])) == [1], \"test case 8 failed\"\nassert factorization_machine_predict(np.array([[2, 1]]), 0.0, np.array([-0.4, -0.3]), np.zeros((2, 1))) == [-1], \"test case 9 failed\"\nassert factorization_machine_predict(np.array([[0, 0], [1, 0], [0, 1]]), 0.2, np.array([0.1, 0.1]), np.zeros((2, 1))) == [1, 1, 1], \"test case 10 failed\""}
{"task_id": 162, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as Y_hat.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        (loss, gradient) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, 'Y_hat and Y must have the same shape'\n    m = Y_hat.shape[0]\n    log_probs = np.log(Y_hat + epsilon)\n    loss = -np.sum(Y * log_probs) / m\n    grad = (Y_hat - Y) / m\n    loss_rounded = float(np.round(loss, 4))\n    grad_rounded = np.round(grad, 4).tolist()\n    return (loss_rounded, grad_rounded)\nassert cross_entropy(np.array([[0.7, 0.2, 0.1], [0.1, 0.8, 0.1]]), np.array([[1, 0, 0], [0, 1, 0]])) == (0.2899, [[-0.15, 0.1, 0.05], [0.05, -0.1, 0.05]]), \"test case failed: example 1\"\nassert cross_entropy(np.array([[0.9, 0.1], [0.2, 0.8]]), np.array([[1, 0], [0, 1]])) == (0.1643, [[-0.05, 0.05], [0.1, -0.1]]), \"test case failed: example 2\"\nassert cross_entropy(np.array([[0.5, 0.5]]), np.array([[1, 0]])) == (0.6931, [[-0.5, 0.5]]), \"test case failed: example 3\"\nassert cross_entropy(np.array([[1.0, 0.0], [0.0, 1.0], [1.0, 0.0]]), np.array([[1, 0], [0, 1], [1, 0]])) == (0.0, [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]), \"test case failed: example 4\"\nassert cross_entropy(np.array([[0.2, 0.3, 0.5]]), np.array([[0, 0, 1]])) == (0.6931, [[0.2, 0.3, -0.5]]), \"test case failed: example 5\"\nassert cross_entropy(np.array([[0.0, 1.0]]), np.array([[1, 0]])) == (46.0517, [[-1.0, 1.0]]), \"test case failed: example 6\"\nassert cross_entropy(np.array([[0.25, 0.25, 0.25, 0.25], [0.1, 0.2, 0.3, 0.4]]), np.array([[0, 0, 0, 1], [0, 0, 1, 0]])) == (1.2951, [[0.125, 0.125, 0.125, -0.375], [0.05, 0.1, -0.35, 0.2]]), \"test case failed: example 7\"\nassert cross_entropy(np.array([[0.6, 0.4], [0.3, 0.7], [0.5, 0.5], [0.9, 0.1]]), np.array([[1, 0], [0, 1], [1, 0], [0, 1]])) == (0.9658, [[-0.1, 0.1], [0.075, -0.075], [-0.125, 0.125], [0.225, -0.225]]), \"test case failed: example 8\"\nassert cross_entropy(np.array([[1.0, 0.0]]), np.array([[1, 0]])) == (0.0, [[0.0, 0.0]]), \"test case failed: example 9\"\nassert cross_entropy(np.array([[0.1, 0.8, 0.1], [0.3, 0.4, 0.3], [0.2, 0.2, 0.6]]), np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])) == (0.646, [[0.0333, -0.0667, 0.0333], [-0.2333, 0.1333, 0.1], [0.0667, 0.0667, -0.1333]]), \"test case failed: example 10\""}
{"task_id": 163, "completion_id": 0, "passed": false, "result": "failed: Test case 7 failed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Elastic-Net / Ridge (\u03b1=0) for one feature and arbitrary polynomial degree.\"\"\"\n    X = np.asarray(X, dtype=float).reshape(-1)\n    y = np.asarray(y, dtype=float).reshape(-1)\n    n_samples = X.size\n    X_poly = np.vstack([X ** p for p in range(degree + 1)]).T\n    d_plus1 = degree + 1\n    if l1_ratio == 0.0:\n        R = np.eye(d_plus1)\n        R[0, 0] = 0\n        lam = n_samples * reg_factor / 2.0\n        A = X_poly.T @ X_poly + lam * R\n        b = X_poly.T @ y\n        beta = np.linalg.pinv(A) @ b\n    else:\n        beta = np.zeros(d_plus1)\n        for _ in range(n_iterations):\n            y_pred = X_poly @ beta\n            err = y_pred - y\n            grad = 2.0 / n_samples * (X_poly.T @ err)\n            grad_l2 = reg_factor * (1 - l1_ratio) * beta\n            grad_l2[0] = 0.0\n            grad_l1 = reg_factor * l1_ratio * np.sign(beta)\n            grad_l1[0] = 0.0\n            grad += grad_l1 + grad_l2\n            beta -= learning_rate * grad\n    preds = X_poly @ beta\n    return [round(float(v), 4) for v in preds]\nassert elastic_net_regression([0, 1, 2, 3], [3, 5, 7, 9], 1, 0.0, 0.0, 0.01, 1000) == [3.0, 5.0, 7.0, 9.0], \"Test case 1 failed\"\nassert elastic_net_regression([0, 1, 2], [1, 3, 7], 2, 0.0, 0.0, 0.01, 1000) == [1.0, 3.0, 7.0], \"Test case 2 failed\"\nassert elastic_net_regression([-1, 0, 1], [1, 0, 1], 2, 0.0, 0.0, 0.01, 1000) == [1.0, 0.0, 1.0], \"Test case 3 failed\"\nassert elastic_net_regression([1, 2, 3], [6, 11, 18], 2, 0.0, 0.0, 0.01, 1000) == [6.0, 11.0, 18.0], \"Test case 4 failed\"\nassert elastic_net_regression([0.5, 1.5, 2.5], [1, 3, 5], 1, 0.0, 0.0, 0.01, 1000) == [1.0, 3.0, 5.0], \"Test case 5 failed\"\nassert elastic_net_regression([-1, 0, 1], [-1, 0, 1], 1, 0.0, 0.0, 0.01, 1000) == [-1.0, 0.0, 1.0], \"Test case 6 failed\"\nassert elastic_net_regression([0, 1, 2, 3], [5, 6, 7, 8], 1, 1.0, 0.0, 0.01, 1000) == [5.25, 6.0833, 6.9167, 7.75], \"Test case 7 failed\"\nassert elastic_net_regression([0, 1, 2], [1, 2, 3], 1, 0.5, 0.0, 0.01, 1000) == [1.2, 2.0, 2.8], \"Test case 8 failed\"\nassert elastic_net_regression([1, 3, 5], [2, 4, 6], 1, 2.0, 0.0, 0.01, 1000) == [2.4, 4.0, 5.6], \"Test case 9 failed\"\nassert elastic_net_regression([0, 1, 2], [5, 5, 5], 1, 0.0, 0.0, 0.01, 1000) == [5.0, 5.0, 5.0], \"Test case 10 failed\""}
{"task_id": 164, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Compute the binary classification log-loss (cross-entropy loss).\n\n    Parameters\n    ----------\n    actual : sequence of int (0 or 1)\n        Ground-truth binary labels.\n    predicted : sequence of float (in [0, 1])\n        Predicted probabilities for the positive class.\n\n    Returns\n    -------\n    float\n        The average log-loss rounded to six decimal places.\n\n    Raises\n    ------\n    ValueError\n        If *actual* and *predicted* have different lengths\n        or if *actual* contains values other than 0 or 1.\n    \"\"\"\n    EPS = 1e-15\n    y_true = np.asarray(actual, dtype=np.float64)\n    y_pred = np.asarray(predicted, dtype=np.float64)\n    if y_true.shape[0] != y_pred.shape[0]:\n        raise ValueError('`actual` and `predicted` must be of the same length.')\n    if not np.isin(y_true, [0, 1]).all():\n        raise ValueError('`actual` must contain only 0s and 1s.')\n    y_pred_clipped = np.clip(y_pred, EPS, 1.0 - EPS)\n    loss = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    return round(float(loss), 6)\nassert compute_log_loss([1, 0, 1, 1], [0.9, 0.2, 0.8, 0.7]) == 0.227081, \"test case failed: basic example\"\nassert compute_log_loss([1, 0, 1, 0], [1, 0, 1, 0]) == 0.0, \"test case failed: perfect predictions\"\nassert compute_log_loss([1, 1, 0, 0], [0.5, 0.5, 0.5, 0.5]) == 0.693147, \"test case failed: fifty-fifty predictions\"\nassert compute_log_loss([1], [0.01]) == 4.60517, \"test case failed: single poor prediction\"\nassert compute_log_loss([0, 0, 0], [0.1, 0.2, 0.3]) == 0.228393, \"test case failed: all zeros\"\nassert compute_log_loss([1, 1, 1], [0.9, 0.8, 0.7]) == 0.228393, \"test case failed: all ones\"\nassert compute_log_loss([1, 0, 1, 0, 1], [0.9, 0.1, 0.8, 0.2, 0.99]) == 0.133412, \"test case failed: mixed high confidence\"\nassert compute_log_loss([0], [0.999]) == 6.907755, \"test case failed: near-certain wrong prediction\"\nassert compute_log_loss([1], [1e-15]) == 34.538776, \"test case failed: clipped to EPS\"\nassert compute_log_loss([1, 0, 1, 0, 0, 1], [0.6, 0.4, 0.8, 0.3, 0.2, 0.9]) == 0.321662, \"test case failed: general mixture\""}
{"task_id": 165, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length vectors.\n\n    Args:\n        x: 1-D list or NumPy array of integers.\n        y: 1-D list or NumPy array of integers.\n\n    Returns:\n        Float rounded to 4 decimal places representing the distance, or \u20111\n        if the vectors have different lengths.\n    \"\"\"\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        raise ValueError('Input vectors must be 1-D.')\n    if x_arr.size != y_arr.size:\n        return -1\n    N = x_arr.size\n    if N == 0:\n        return 0.0\n    diff = np.count_nonzero(x_arr != y_arr)\n    distance = diff / N\n    return round(float(distance), 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 166, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"Classic binary Perceptron (learning-rate = 1).\"\"\"\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    for _ in range(max_iter):\n        errors = 0\n        for (x_i, y_i) in zip(X_train, y_train):\n            margin = y_i * (np.dot(w, x_i) + b)\n            if margin <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        if errors == 0:\n            break\n    scores = X_test @ w + b\n    preds = np.sign(scores)\n    preds[preds == 0] = 1\n    return preds.astype(int).tolist()\nassert perceptron_predict(np.array([[1], [2], [-2], [-1]]), np.array([1, 1, -1, -1]), np.array([[0.5], [-1.5]])) == [1, -1], \"test case 1 failed\"\nassert perceptron_predict(np.array([[2, 2], [1, 1], [-2, -2], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[3, 3], [-3, -3]])) == [1, -1], \"test case 2 failed\"\nassert perceptron_predict(np.array([[2, 1], [2, 2], [-1, 1], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [-3, 2]])) == [1, -1], \"test case 3 failed\"\nassert perceptron_predict(np.array([[3, 1], [2, 1], [-3, -1], [-2, -1]]), np.array([1, 1, -1, -1]), np.array([[5, 2], [-4, -2]])) == [1, -1], \"test case 4 failed\"\nassert perceptron_predict(np.array([[1, 2, 0], [1, 1, 0], [-1, -2, 0], [-1, -1, 0]]), np.array([1, 1, -1, -1]), np.array([[2, 3, 0], [-2, -3, 0]])) == [1, -1], \"test case 5 failed\"\nassert perceptron_predict(np.array([[1, 0], [1, 1], [-1, 0], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[0.5, 0.5], [-0.5, -0.1]])) == [1, -1], \"test case 6 failed\"\nassert perceptron_predict(np.array([[2], [3], [-1], [-2]]), np.array([1, 1, -1, -1]), np.array([[1], [-1]])) == [1, -1], \"test case 7 failed\"\nassert perceptron_predict(np.array([[4, 4], [1, 2], [-3, -3], [-2, -4]]), np.array([1, 1, -1, -1]), np.array([[6, 5], [-3, -2]])) == [1, -1], \"test case 8 failed\"\nassert perceptron_predict(np.array([[2, 2, 2], [1, 1, 1], [-2, -2, -2], [-1, -1, -1]]), np.array([1, 1, -1, -1]), np.array([[3, 3, 3], [-2, -2, -2]])) == [1, -1], \"test case 9 failed\"\nassert perceptron_predict(np.array([[0, 2], [0, 1], [0, -2], [0, -1]]), np.array([1, 1, -1, -1]), np.array([[0, 3], [0, -3]])) == [1, -1], \"test case 10 failed\""}
{"task_id": 167, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"Compute the Binary Cross-Entropy (BCE) loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities, each in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: (loss, gradient) both rounded to 4 decimals.\n    \"\"\"\n    y_hat = np.asarray(y_hat, dtype=float)\n    y = np.asarray(y, dtype=float)\n    y_hat_clipped = np.clip(y_hat, epsilon, 1.0 - epsilon)\n    m = y_hat_clipped.size\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1.0 - y) * np.log(1.0 - y_hat_clipped))\n    grad = (y_hat_clipped - y) / m\n    loss_rounded = float(np.round(loss, 4))\n    grad_rounded = np.round(grad, 4).tolist()\n    return (loss_rounded, grad_rounded)\nassert binary_cross_entropy(np.array([0.9, 0.2, 0.1, 0.7]), np.array([1, 0, 0, 1])) == (0.1976, [-0.025, 0.05, 0.025, -0.075]), \"test case failed: ([0.9,0.2,0.1,0.7],[1,0,0,1])\"\nassert binary_cross_entropy(np.array([0.5, 0.5]), np.array([1, 0])) == (0.6931, [-0.25, 0.25]), \"test case failed: ([0.5,0.5],[1,0])\"\nassert binary_cross_entropy(np.array([0.99, 0.01, 0.8, 0.2]), np.array([1, 0, 1, 0])) == (0.1166, [-0.0025, 0.0025, -0.05, 0.05]), \"test case failed: high-confidence predictions\"\nassert binary_cross_entropy(np.array([0.15, 0.85, 0.7]), np.array([0, 1, 1])) == (0.2272, [0.05, -0.05, -0.1]), \"test case failed: mixed predictions\"\nassert binary_cross_entropy(np.array([0.3]), np.array([0])) == (0.3567, [0.3]), \"test case failed: single sample negative\"\nassert binary_cross_entropy(np.array([0.8]), np.array([1])) == (0.2231, [-0.2]), \"test case failed: single sample positive\"\nassert binary_cross_entropy(np.array([0.4, 0.6]), np.array([0, 1])) == (0.5108, [0.2, -0.2]), \"test case failed: ([0.4,0.6],[0,1])\"\nassert binary_cross_entropy(np.array([0.01, 0.99]), np.array([0, 1])) == (0.0101, [0.005, -0.005]), \"test case failed: near-perfect predictions\"\nassert binary_cross_entropy(np.array([0.25, 0.75, 0.5, 0.5]), np.array([0, 1, 0, 1])) == (0.4904, [0.0625, -0.0625, 0.125, -0.125]), \"test case failed: varied predictions\"\nassert binary_cross_entropy(np.array([0.6, 0.6, 0.6]), np.array([1, 1, 1])) == (0.5108, [-0.1333, -0.1333, -0.1333]), \"test case failed: uniform over-confident negative\""}
{"task_id": 168, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"\n    Train a Gaussian-Naive-Bayes classifier on (X_train, y_train) and predict the\n    labels of X_test.\n\n    Notes\n    -----\n    \u2022 Feature independence and a Gaussian distribution per feature/class are\n      assumed.\n    \u2022 A small \u03b5 is added to every variance to avoid division-by-zero.\n    \u2022 Only NumPy is used.\n    \"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    X_test = np.asarray(X_test, dtype=float)\n    (n_samples, n_features) = X_train.shape\n    classes = np.unique(y_train)\n    n_classes = classes.size\n    eps = 1e-06\n    means = np.zeros((n_classes, n_features))\n    var = np.zeros_like(means)\n    priors = np.zeros(n_classes)\n    for (idx, c) in enumerate(classes):\n        X_c = X_train[y_train == c]\n        priors[idx] = X_c.shape[0] / n_samples\n        means[idx] = X_c.mean(axis=0)\n        var[idx] = X_c.var(axis=0) + eps\n    log_priors = np.log(priors)\n    log_coef = -0.5 * np.log(2.0 * np.pi * var)\n    predictions = []\n    for x in X_test:\n        log_likelihood = log_coef - 0.5 * (x - means) ** 2 / var\n        log_posterior = log_priors + np.sum(log_likelihood, axis=1)\n        predicted_class = classes[np.argmax(log_posterior)]\n        predictions.append(int(predicted_class))\n    return predictions\nassert gaussian_naive_bayes([[1.0,20.0],[2.0,21.0],[3.0,22.0],[4.0,21.0],[120.0,180.0],[130.0,195.0],[125.0,190.0]],[0,0,0,0,1,1,1],[[2.5,20.5],[128.0,190.0]])==[0,1], \"test case failed: gaussian_naive_bayes(example)\"\nassert gaussian_naive_bayes([[1],[2],[3],[20],[22],[19]],[0,0,0,1,1,1],[[2],[21]])==[0,1], \"test case failed: gaussian_naive_bayes(one_dimensional)\"\nassert gaussian_naive_bayes([[0.1,0.1],[0.2,-0.1],[-0.1,0.05],[4.9,5.1],[5.2,4.9],[5.0,5.0]],[0,0,0,1,1,1],[[0,0],[5,5]])==[0,1], \"test case failed: gaussian_naive_bayes(two_clusters)\"\nassert gaussian_naive_bayes([[1,1],[2,2],[1,2],[7,7],[8,8],[7,8],[13,13],[14,14],[15,15]],[0,0,0,1,1,1,2,2,2],[[1.5,1.5],[7.5,7.5],[14,14.5]])==[0,1,2], \"test case failed: gaussian_naive_bayes(three_classes)\"\nassert gaussian_naive_bayes([[1,1],[1,1.1],[1,0.9],[10,10],[9.9,10],[10.1,10]],[0,0,0,1,1,1],[[1,1],[10,10]])==[0,1], \"test case failed: gaussian_naive_bayes(almost_zero_variance)\"\nassert gaussian_naive_bayes([[1,1,1],[1,1,2],[2,2,2],[10,10,10],[11,10,10],[10,11,10]],[0,0,0,1,1,1],[[1,1,1.5],[10.5,10,10]])==[0,1], \"test case failed: gaussian_naive_bayes(three_features)\"\nassert gaussian_naive_bayes([[-1,-1],[-2,-1.5],[-1.5,-2],[3,3],[2.5,3.5],[3.2,2.8]],[0,0,0,1,1,1],[[-1.2,-1.4],[3,3]])==[0,1], \"test case failed: gaussian_naive_bayes(negative_coordinates)\"\nassert gaussian_naive_bayes([[5],[5],[6],[14],[15],[15]],[0,0,0,1,1,1],[[5],[15]])==[0,1], \"test case failed: gaussian_naive_bayes(duplicated_values)\"\nassert gaussian_naive_bayes([[1,2],[1,2.1],[50,50],[49,51]],[0,0,1,1],[[1,2],[50,50]])==[0,1], \"test case failed: gaussian_naive_bayes(large_gap)\"\nassert gaussian_naive_bayes([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10],[20,20],[21,20],[20,21]],[0,0,0,1,1,1,2,2,2],[[0.5,0.5],[10.2,10.1],[20.3,20.5]])==[0,1,2], \"test case failed: gaussian_naive_bayes(three_classes_revisited)\""}
{"task_id": 169, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Window name: \"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate (must be > 0).\n    coefficients : list[float] | None, optional\n        Cosine-series coefficients a\u2080\u2026a_M, required only when\n        window == \"generalized_cosine\".\n\n    Returns\n    -------\n    list[float]\n        List with N floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    name = window.lower()\n    if name not in {'hamming', 'hann', 'blackman_harris', 'generalized_cosine'}:\n        raise ValueError(f'Unknown window type: {window!r}')\n    n = np.arange(N)\n    denom = N - 1\n    two_pi_term = 2.0 * np.pi * n / denom\n    if name == 'hamming':\n        w = 0.54 - 0.46 * np.cos(two_pi_term)\n    elif name == 'hann':\n        w = 0.5 - 0.5 * np.cos(two_pi_term)\n    elif name == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(two_pi_term) + a2 * np.cos(2 * two_pi_term) - a3 * np.cos(3 * two_pi_term)\n    elif name == 'generalized_cosine':\n        if not coefficients:\n            raise ValueError(\"For 'generalized_cosine' you must supply a non-empty 'coefficients' list.\")\n        w = np.zeros(N, dtype=float)\n        for (k, ak) in enumerate(coefficients):\n            w += ak * np.cos(2.0 * np.pi * k * n / denom)\n    return [round(float(v), 4) for v in w]\nassert generate_window(\"hamming\", 5) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: hamming, N=5\"\nassert generate_window(\"hann\", 5) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann, N=5\"\nassert generate_window(\"blackman_harris\", 5) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"test case failed: blackman_harris, N=5\"\nassert generate_window(\"generalized_cosine\", 5, coefficients=[0.5, -0.5]) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: generalized_cosine, N=5, coeff=[0.5,-0.5]\"\nassert generate_window(\"hamming\", 1) == [1.0], \"test case failed: hamming, N=1\"\nassert generate_window(\"hann\", 1) == [1.0], \"test case failed: hann, N=1\"\nassert generate_window(\"blackman_harris\", 1) == [1.0], \"test case failed: blackman_harris, N=1\"\nassert generate_window(\"hamming\", 6) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979, 0.08], \"test case failed: hamming, N=6\"\nassert generate_window(\"blackman_harris\", 3) == [0.0001, 1.0, 0.0001], \"test case failed: blackman_harris, N=3\"\nassert generate_window(\"generalized_cosine\", 4, coefficients=[1.0]) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine, N=4, coeff=[1.0]\""}
{"task_id": 171, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Binary Logistic-Regression trained with mini-batch Gradient Descent.\"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_test = np.asarray(X_test, dtype=float)\n    y_train = np.asarray(y_train)\n    uniq = np.unique(y_train)\n    if len(uniq) == 1:\n        return [int(uniq[0])] * len(X_test)\n    if len(uniq) != 2:\n        raise ValueError('Exactly two distinct labels are required for training.')\n    pos_label = uniq[1]\n    y_bin = (y_train == pos_label).astype(float)\n    ones_train = np.ones((X_train.shape[0], 1))\n    ones_test = np.ones((X_test.shape[0], 1))\n    X_train = np.hstack([ones_train, X_train])\n    X_test_aug = np.hstack([ones_test, X_test])\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n\n    def sigmoid(z):\n        z = np.clip(z, -500, 500)\n        return 1.0 / (1.0 + np.exp(-z))\n    for _ in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        for start in range(0, n_samples, batch_size):\n            idx = permutation[start:start + batch_size]\n            X_b = X_train[idx]\n            y_b = y_bin[idx]\n            preds = sigmoid(X_b @ w)\n            grad = X_b.T @ (preds - y_b) / len(idx)\n            w -= learning_rate * grad\n    probs = sigmoid(X_test_aug @ w)\n    preds_bin = (probs >= 0.5).astype(int)\n    label_map = {0: int(uniq[0]), 1: int(uniq[1])}\n    preds_original = [label_map[int(p)] for p in preds_bin]\n    return preds_original\nassert logistic_regression_train_predict([[-3],[-2],[2],[3]],[0,0,1,1],[[-2.5],[2.5]]) == [0,1], \"failed on shifted 1D separation\"\nassert logistic_regression_train_predict([[1],[2],[3]],[0,0,0],[[10],[-10]]) == [0,0], \"failed on constant-zero label case\"\nassert logistic_regression_train_predict([[1],[2],[3]],[1,1,1],[[0],[4]]) == [1,1], \"failed on constant-one label case\"\nassert logistic_regression_train_predict([[1,1],[1,2],[2,3],[3,3]],[0,0,1,1],[[1,1.5],[3,4]]) == [0,1], \"failed on simple 2D separation\"\nassert logistic_regression_train_predict([[0,0,1],[1,1,1],[2,2,3],[3,3,3]],[0,0,1,1],[[0,0,0.5],[3,3,4]]) == [0,1], \"failed on 3D separation\"\nassert logistic_regression_train_predict([[1],[2],[3],[4]],[1,1,0,0],[[1.5],[3.5]]) == [1,0], \"failed on negative slope separation\"\nassert logistic_regression_train_predict([[0],[1],[10],[11]],[0,0,1,1],[[0.5],[10.5]]) == [0,1], \"failed on large gap separation\"\nassert logistic_regression_train_predict([[1,0],[0,1],[1,1],[2,2]],[0,0,1,1],[[0.2,0.2],[1.5,1.5]]) == [0,1], \"failed on mixed 2D separation\""}
{"task_id": 172, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 \u2212 tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    if np.isscalar(z):\n        grad = 1.0 - np.tanh(z) ** 2\n        return float(np.round(grad, 4))\n    else:\n        arr = np.asarray(z, dtype=float)\n        grad = 1.0 - np.tanh(arr) ** 2\n        grad = np.round(grad, 4)\n        return grad.tolist()\nassert tanh_grad(0) == 1.0, \"test case failed: tanh_grad(0)\"\nassert tanh_grad(1) == 0.42, \"test case failed: tanh_grad(1)\"\nassert tanh_grad(-1) == 0.42, \"test case failed: tanh_grad(-1)\"\nassert tanh_grad(2) == 0.0707, \"test case failed: tanh_grad(2)\"\nassert tanh_grad(-2) == 0.0707, \"test case failed: tanh_grad(-2)\"\nassert tanh_grad(0.5) == 0.7864, \"test case failed: tanh_grad(0.5)\"\nassert tanh_grad([0, 1, -1, 2]) == [1.0, 0.42, 0.42, 0.0707], \"test case failed: tanh_grad([0, 1, -1, 2])\"\nassert tanh_grad(np.array([4])) == [0.0013], \"test case failed: tanh_grad(np.array([4]))\"\nassert tanh_grad(np.array([-4])) == [0.0013], \"test case failed: tanh_grad(np.array([-4]))\"\nassert tanh_grad(np.array([0.123])) == [0.985], \"test case failed: tanh_grad(np.array([0.123]))\""}
{"task_id": 173, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute Unicode-code-point (ASCII) differences between\n        corresponding characters.  If the strings differ in length, \u20131 is\n        returned.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    return sum((abs(ord(c) - ord(t)) for (c, t) in zip(candidate, target)))\nassert alphabetical_distance(\"HELLO\", \"WORLD\") == 42, \"Test 1 failed: alphabetical_distance('HELLO', 'WORLD')\"\nassert alphabetical_distance(\"ABC\", \"ABC\") == 0, \"Test 2 failed: alphabetical_distance('ABC', 'ABC')\"\nassert alphabetical_distance(\"aaaa\", \"bbbb\") == 4, \"Test 3 failed: alphabetical_distance('aaaa', 'bbbb')\"\nassert alphabetical_distance(\"abcd\", \"dcba\") == 8, \"Test 4 failed: alphabetical_distance('abcd', 'dcba')\"\nassert alphabetical_distance(\"HI\", \"HI\") == 0, \"Test 5 failed: alphabetical_distance('HI', 'HI')\"\nassert alphabetical_distance(\"AZ\", \"ZA\") == 50, \"Test 6 failed: alphabetical_distance('AZ', 'ZA')\"\nassert alphabetical_distance(\"\", \"\") == 0, \"Test 7 failed: alphabetical_distance('', '')\"\nassert alphabetical_distance(\"Genetic\", \"Algorithm\") == -1, \"Test 8 failed: alphabetical_distance('Genetic', 'Algorithm')\"\nassert alphabetical_distance(\"2023\", \"2024\") == 1, \"Test 9 failed: alphabetical_distance('2023', '2024')\"\nassert alphabetical_distance(\"Python3\", \"Python3\") == 0, \"Test 10 failed: alphabetical_distance('Python3', 'Python3')\""}
{"task_id": 174, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\"\"\"\n    preds = predictions.astype(np.float64)\n    lbls = labels.astype(np.float64)\n    eps = 1e-12\n    preds = np.clip(preds, eps, 1.0 - eps)\n    logp = np.log(preds)\n    ce_per_sample = -np.sum(lbls * logp, axis=1)\n    loss = ce_per_sample.mean()\n    pred_classes = np.argmax(preds, 1)\n    true_classes = np.argmax(lbls, 1)\n    accuracy = np.mean(pred_classes == true_classes)\n    return (round(loss, 4), round(accuracy, 4))\nassert gan_discriminator_metrics(np.array([[0.9,0.1],[0.1,0.9]]), np.array([[1,0],[0,1]])) == (0.1054,1.0), \"test case failed: perfect separation\"\nassert gan_discriminator_metrics(np.array([[0.7,0.3],[0.6,0.4],[0.2,0.8]]), np.array([[1,0],[1,0],[0,1]])) == (0.3635,1.0), \"test case failed: mixed high confidence\"\nassert gan_discriminator_metrics(np.array([[0.4,0.6],[0.4,0.6]]), np.array([[1,0],[0,1]])) == (0.7136,0.5), \"test case failed: one correct, one wrong\"\nassert gan_discriminator_metrics(np.array([[0.5,0.5]]), np.array([[1,0]])) == (0.6931,1.0), \"test case failed: tie handled by argmax\"\nassert gan_discriminator_metrics(np.array([[0.2,0.8],[0.7,0.3]]), np.array([[1,0],[0,1]])) == (1.4067,0.0), \"test case failed: all misclassified\"\nassert gan_discriminator_metrics(np.array([[0.8,0.2],[0.8,0.2],[0.8,0.2],[0.8,0.2]]), np.array([[1,0],[1,0],[1,0],[1,0]])) == (0.2231,1.0), \"test case failed: uniform batch\"\nassert gan_discriminator_metrics(np.array([[0.1,0.7,0.2],[0.25,0.25,0.5]]), np.array([[0,1,0],[0,0,1]])) == (0.5249,1.0), \"test case failed: 3-class perfect\"\nassert gan_discriminator_metrics(np.array([[0.33,0.33,0.34]]), np.array([[1,0,0]])) == (1.1087,0.0), \"test case failed: wrong prediction with 3 classes\"\nassert gan_discriminator_metrics(np.array([[0.0,1.0]]), np.array([[0,1]])) == (0.0,1.0), \"test case failed: clipping at boundaries\"\nassert gan_discriminator_metrics(np.array([[0.6,0.4],[0.3,0.7],[0.8,0.2],[0.1,0.9],[0.55,0.45]]), np.array([[1,0],[0,1],[1,0],[0,1],[1,0]])) == (0.3588,1.0), \"test case failed: mixed confident batch\""}
{"task_id": 175, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    if C < 0:\n        raise ValueError('Regularization strength C must be non-negative.')\n    w = np.asarray(weights, dtype=float).ravel()\n    penalty = float(C) * float(np.dot(w, w))\n    return round(penalty, 4)\nassert l2_penalty([1, 2, 3], 1) == 14.0, \"failed: l2_penalty([1, 2, 3], 1)\"\nassert l2_penalty(np.array([1, -2, 3]), 0.5) == 7.0, \"failed: l2_penalty(np.array([1,-2,3]),0.5)\"\nassert l2_penalty([], 2) == 0.0, \"failed: l2_penalty([],2)\"\nassert l2_penalty([0, 0, 0], 1.5) == 0.0, \"failed: l2_penalty([0,0,0],1.5)\"\nassert l2_penalty([1.1111, 2.2222], 0.3) == round(0.3 * ((1.1111**2) + (2.2222**2)), 4), \"failed: l2_penalty([1.1111,2.2222],0.3)\"\nassert l2_penalty(np.array([5]), 0.1) == 2.5, \"failed: l2_penalty([5],0.1)\"\nassert l2_penalty(np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4]), 0.05) == round(0.05 * np.sum(np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4]) ** 2), 4), \"failed: mixed range\"\nassert l2_penalty([10, 20, 30], 0.0) == 0.0, \"failed: zero C\"\nassert l2_penalty([1e-3, -1e-3], 1) == round(((1e-3)**2 + (1e-3)**2), 4), \"failed: small weights\"\nassert l2_penalty([3.1415, 2.7182], 0.25) == round(0.25 * ((3.1415**2) + (2.7182**2)), 4), \"failed: l2_penalty([pi,e],0.25)\""}
{"task_id": 176, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"AdaBoost (SAMME-R) with decision stumps, implemented from scratch.\n\n    Parameters\n    ----------\n    X_train : list of list of float\n        Training features.\n    y_train : list of int (0/1)\n        Training labels, 0 = negative class, 1 = positive class.\n    X_test  : list of list of float\n        Samples whose labels must be predicted.\n    n_estimators : int, default=10\n        Maximum number of boosting rounds.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (0/1) for every row of *X_test*.\n    \"\"\"\n\n    def train_best_stump(X: np.ndarray, y: np.ndarray, w: np.ndarray):\n        \"\"\"\n        Exhaustively search the decision-stump with the smallest\n        *weighted* classification error.  Tie-breaking is deterministic:\n            1) smallest error\n            2) smallest feature index\n            3) smallest threshold\n            4) polarity  +1 before \u20131\n        \"\"\"\n        (n_samples, n_features) = X.shape\n        best = {'feature': None, 'threshold': None, 'polarity': None, 'pred': None, 'error': np.inf}\n        for j in range(n_features):\n            column = X[:, j]\n            thresholds = np.unique(column)\n            for thr in thresholds:\n                for pol in (1, -1):\n                    if pol == 1:\n                        h = np.where(column < thr, 1, -1)\n                    else:\n                        h = np.where(column >= thr, 1, -1)\n                    err = np.sum(w * (h != y))\n                    if err < best['error'] - 1e-12:\n                        best.update(feature=j, threshold=float(thr), polarity=pol, pred=h, error=err)\n        return best\n\n    def stump_predict(stump, X):\n        \"\"\"Vectorised prediction of a single stump on data matrix X.\"\"\"\n        col = X[:, stump['feature']]\n        if stump['polarity'] == 1:\n            return np.where(col < stump['threshold'], 1, -1)\n        else:\n            return np.where(col >= stump['threshold'], 1, -1)\n    X = np.asarray(X_train, dtype=float)\n    y = np.asarray(y_train, dtype=int)\n    y = 2 * y - 1\n    n_samples = X.shape[0]\n    w = np.full(n_samples, 1.0 / n_samples)\n    stumps: list[dict] = []\n    alphas: list[float] = []\n    for _ in range(n_estimators):\n        stump = train_best_stump(X, y, w)\n        error = stump['error']\n        if error <= 1e-12:\n            alpha = 0.5 * np.log((1.0 - 1e-12) / 1e-12)\n            stumps.append(stump)\n            alphas.append(alpha)\n            break\n        alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        w *= np.exp(-alpha * y * stump['pred'])\n        w /= np.sum(w)\n        stumps.append(stump)\n        alphas.append(alpha)\n    X_te = np.asarray(X_test, dtype=float)\n    agg = np.zeros(X_te.shape[0], dtype=float)\n    for (stump, alpha) in zip(stumps, alphas):\n        agg += alpha * stump_predict(stump, X_te)\n    preds = (agg >= 0).astype(int).tolist()\n    return preds\nassert adaboost_predict([[0,0],[1,0],[0,1],[1,1]],[0,1,1,1],[[0,0],[1,1]],3)==[0,1],\"failed OR data\"\nassert adaboost_predict([[1,2],[2,3],[3,4],[4,5]],[0,0,1,1],[[1.5,2.5],[3.5,4.5]],4)==[0,1],\"failed linear split\"\nassert adaboost_predict([[1],[2],[3],[4]],[0,0,1,1],[[2],[4]],3)==[0,1],\"failed 1-D split\"\nassert adaboost_predict([[1],[2],[3]],[0,1,1],[[1],[3]],3)==[0,1],\"failed small 1-D\"\nassert adaboost_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,0,1],[[0,1],[1,1]],4)==[0,1],\"failed AND-like data\"\nassert adaboost_predict([[0],[2],[4],[6]],[0,0,1,1],[[1],[5]],5)==[0,1],\"failed even/odd split\"\nassert adaboost_predict([[1,1],[1,2],[2,1],[2,2]],[0,0,1,1],[[1,1],[2,2]],3)==[0,1],\"failed grid split\"\nassert adaboost_predict([[2],[3],[10],[12]],[0,0,1,1],[[2.5],[11]],4)==[0,1],\"failed distant clusters\"\nassert adaboost_predict([[0,5],[1,6],[2,7],[3,8]],[0,0,1,1],[[0.5,5.5],[2.5,7.5]],4)==[0,1],\"failed correlated features\""}
{"task_id": 177, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Union\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute tanh without using numpy.tanh (4-decimal rounding).\"\"\"\n\n    def _tanh_array(arr: np.ndarray) -> np.ndarray:\n        exp_neg = np.exp(-2 * np.abs(arr))\n        return np.sign(arr) * (1 - exp_neg) / (1 + exp_neg)\n    if np.isscalar(z):\n        z = float(z)\n        result = _tanh_array(np.array(z))\n        return round(float(result), 4)\n    arr = np.asarray(z, dtype=float)\n    result = _tanh_array(arr)\n    return np.round(result, 4).tolist()\nassert tanh(0) == 0.0, \"test case failed: tanh(0)\"\nassert tanh(1) == 0.7616, \"test case failed: tanh(1)\"\nassert tanh(-1) == -0.7616, \"test case failed: tanh(-1)\"\nassert tanh(np.array([-2, -1, 0, 1, 2])) == [-0.964, -0.7616, 0.0, 0.7616, 0.964], \"test case failed: tanh(np.array([-2,-1,0,1,2]))\"\nassert tanh([0.5, -0.5]) == [0.4621, -0.4621], \"test case failed: tanh([0.5,-0.5])\"\nassert tanh(np.array([5])) == [0.9999], \"test case failed: tanh(np.array([5]))\"\nassert tanh(np.array([10, -10])) == [1.0, -1.0], \"test case failed: tanh(np.array([10,-10]))\"\nassert tanh([[0, 1], [2, -2]]) == [[0.0, 0.7616], [0.964, -0.964]], \"test case failed: tanh([[0,1],[2,-2]])\"\nassert tanh(3) == 0.9951, \"test case failed: tanh(3)\"\nassert tanh(-3) == -0.9951, \"test case failed: tanh(-3)\""}
{"task_id": 178, "completion_id": 0, "passed": false, "result": "failed: test failed: particle_swarm_optimisation(2,1,1,2)", "solution": "import numpy as np\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function with Particle Swarm Optimisation.\n\n    Args:\n        n_dims:            number of decision variables  (>0)\n        num_particles:     swarm size                   (>0)\n        num_iterations:    optimisation iterations      (>0)\n        seed:              RNG seed (default 1)\n\n    Returns\n        Best objective value found, rounded to 4 decimals, or \u20131 on bad input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    (lo, hi) = (-1.0, 1.0)\n    positions = rng.uniform(lo, hi, size=(num_particles, n_dims))\n    velocities = rng.uniform(lo, hi, size=(num_particles, n_dims))\n    pbest_pos = positions.copy()\n    pbest_val = np.sum(pbest_pos ** 2, axis=1)\n    gbest_idx = np.argmin(pbest_val)\n    gbest_pos = pbest_pos[gbest_idx].copy()\n    gbest_val = pbest_val[gbest_idx]\n    for _ in range(num_iterations):\n        r1 = rng.random(size=(num_particles, n_dims))\n        r2 = rng.random(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (pbest_pos - positions) + c2 * r2 * (gbest_pos - positions)\n        positions = np.clip(positions + velocities, lo, hi)\n        curr_val = np.sum(positions ** 2, axis=1)\n        improved = curr_val < pbest_val\n        pbest_pos[improved] = positions[improved]\n        pbest_val[improved] = curr_val[improved]\n        gbest_idx = np.argmin(pbest_val)\n        gbest_pos = pbest_pos[gbest_idx].copy()\n        gbest_val = pbest_val[gbest_idx]\n    return round(float(gbest_val), 4)\nassert particle_swarm_optimisation(2, 30, 100, seed=42) == 0.0, \"test failed: particle_swarm_optimisation(2,30,100,42)\"\nassert particle_swarm_optimisation(5, 50, 200, seed=3) == 0.0, \"test failed: particle_swarm_optimisation(5,50,200,3)\"\nassert particle_swarm_optimisation(10, 60, 300, seed=7) == 0.0, \"test failed: particle_swarm_optimisation(10,60,300,7)\"\nassert particle_swarm_optimisation(3, 10, 150, seed=11) == 0.0, \"test failed: particle_swarm_optimisation(3,10,150,11)\"\nassert particle_swarm_optimisation(4, 80, 250, seed=19) == 0.0, \"test failed: particle_swarm_optimisation(4,80,250,19)\"\nassert particle_swarm_optimisation(6, 40, 120, seed=23) == 0.0, \"test failed: particle_swarm_optimisation(6,40,120,23)\"\nassert particle_swarm_optimisation(1, 20, 90, seed=29) == 0.0, \"test failed: particle_swarm_optimisation(1,20,90,29)\"\nassert particle_swarm_optimisation(8, 70, 300, seed=31) == 0.0, \"test failed: particle_swarm_optimisation(8,70,300,31)\"\nassert particle_swarm_optimisation(2, 1, 1, seed=2) == 0.0, \"test failed: particle_swarm_optimisation(2,1,1,2)\"\nassert particle_swarm_optimisation(-1, 30, 100) == -1, \"test failed: invalid input not handled\""}
{"task_id": 179, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nimport string\nimport re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case beforehand.\n        filter_punctuation: When *True*, remove every character contained in\n            ``string.punctuation`` (the 32 standard ASCII punctuation marks).\n\n    Returns\n    -------\n    list[str]\n        A list of single-character strings after the selected preprocessing\n        steps have been applied.  Runs of \u22652 spaces are collapsed into a single\n        space, and leading/trailing spaces are stripped.  If the final string\n        is empty, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    if lowercase:\n        line = line.lower()\n    if filter_punctuation:\n        line = line.translate(str.maketrans('', '', string.punctuation))\n    line = re.sub(' {2,}', ' ', line).strip()\n    return list(line) if line else []\nassert tokenize_chars(\"Hello, World!\") == ['h','e','l','l','o',' ','w','o','r','l','d'], \"failed: default params\"\nassert tokenize_chars(\"Hello, World!\", lowercase=False, filter_punctuation=True) == ['H','e','l','l','o',' ','W','o','r','l','d'], \"failed: keep case\"\nassert tokenize_chars(\"Hello, World!\", lowercase=False, filter_punctuation=False) == ['H','e','l','l','o',',',' ','W','o','r','l','d','!'], \"failed: keep case & punctuation\"\nassert tokenize_chars(\"  Hi   there  \") == ['h','i',' ','t','h','e','r','e'], \"failed: extra spaces\"\nassert tokenize_chars(\"!!!\") == [], \"failed: only punctuation removed\"\nassert tokenize_chars(\"!!!\", filter_punctuation=False) == ['!','!','!'], \"failed: keep punctuation only\"\nassert tokenize_chars(\"\") == [], \"failed: empty string\"\nassert tokenize_chars(None) == [], \"failed: None input\"\nassert tokenize_chars(\"A.B,C\", filter_punctuation=True) == ['a','b','c'], \"failed: punctuation removal with dots and commas\"\nassert tokenize_chars(\"MixED CaSe\") == ['m','i','x','e','d',' ','c','a','s','e'], \"failed: lowercasing mixed case\""}
{"task_id": 180, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\"\"\"\n    X_tr = np.asarray(X_train, dtype=float)\n    X_te = np.asarray(X_test, dtype=float)\n    y_tr = np.asarray(y_train, dtype=object)\n    n_train = X_tr.shape[0]\n    if k <= 0 or k > n_train:\n        k = n_train\n    predictions: list = []\n    for x in X_te:\n        dists = np.linalg.norm(X_tr - x, axis=1)\n        if k == n_train:\n            nn_idx = np.arange(n_train)\n        else:\n            nn_idx = np.argpartition(dists, k - 1)[:k]\n        neighbours = y_tr[nn_idx]\n        if task == 'regression':\n            mean_val = float(np.mean(neighbours.astype(float)))\n            predictions.append(round(mean_val, 4))\n        else:\n            counts = Counter(neighbours)\n            max_cnt = max(counts.values())\n            best_label = min((lbl for (lbl, cnt) in counts.items() if cnt == max_cnt))\n            predictions.append(best_label)\n    return predictions\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 181, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\"\"\"\n    if problem not in {'classify', 'regress'}:\n        raise ValueError(\"`problem` must be 'classify' or 'regress'.\")\n    if k < 1:\n        raise ValueError('`k` must be a positive integer.')\n    if len(X_train) == 0:\n        raise ValueError('`X_train` must contain at least one sample.')\n    X_train_np = np.asarray(X_train, dtype=float)\n    X_test_np = np.asarray(X_test, dtype=float)\n    n_train = X_train_np.shape[0]\n    k = min(k, n_train)\n    preds = []\n    for x in X_test_np:\n        diff = X_train_np - x\n        dists = np.einsum('ij,ij->i', diff, diff)\n        idx = np.argpartition(dists, k - 1)[:k]\n        neigh_targets = [y_train[i] for i in idx]\n        if problem == 'classify':\n            cnt = Counter(neigh_targets)\n            max_votes = max(cnt.values())\n            winners = [label for (label, v) in cnt.items() if v == max_votes]\n            preds.append(sorted(winners)[0])\n        else:\n            mean_val = float(np.mean(neigh_targets))\n            preds.append(round(mean_val, 4))\n    return preds\nassert knn_predict([[1,1],[2,2],[0,0]],[0,0,1],[[1.2,1.2]],3,'classify')==[0],\"failed: basic classification example\"\nassert knn_predict([[1],[3],[7],[8],[9]],[1,1,3,3,3],[[2],[4]],3,'classify')==[1,1],\"failed: classification with k=3\"\nassert knn_predict([[1],[2],[3]],[2,4,6],[[1.5],[2.5]],2,'regress')==[3.0,5.0],\"failed: simple regression\"\nassert knn_predict([[1],[2],[3]],[2,4,6],[[2]],5,'regress')==[4.0],\"failed: k larger than training set\"\nassert knn_predict([[0,0],[10,10]],[\"A\",\"B\"],[[1,1],[8,8]],1,'classify')==[\"A\",\"B\"],\"failed: k=1 classification\"\nassert knn_predict([[0],[1],[2],[3]],[0,0,1,1],[[1.5]],4,'classify')==[0],\"failed: tie breaking numeric\"\nassert knn_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,1,1],[[0.9,0.9]],3,'classify')==[1],\"failed: 2-D classification\"\nassert knn_predict([[0,0],[0,1],[1,0],[1,1]],[0,1,1,2],[[0.2,0.2]],2,'regress')==[0.5],\"failed: 2-D regression\"\nassert knn_predict([[0],[1],[2],[3]],[\"cat\",\"dog\",\"cat\",\"dog\"],[[1.5]],4,'classify')==[\"cat\"],\"failed: tie breaking strings\"\nassert knn_predict([[i] for i in range(10)],[i**2 for i in range(10)],[[4.5]],3,'regress')==[16.6667],\"failed: larger regression dataset\""}
{"task_id": 182, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Compute the polynomial-kernel (Gram) matrix K where\n    \n        K[i][j] = ( <X_i , Y_j> ) ** degree,\n    \n    <\u00b7 , \u00b7> being the ordinary dot product.  \n    The result is rounded to 4 decimal places and returned as a\n    plain nested Python list.\n    \n    Parameters\n    ----------\n    X : 2-D list or numpy.ndarray\n        Data matrix of shape (n_samples_X, n_features).\n    Y : 2-D list or numpy.ndarray\n        Data matrix of shape (n_samples_Y, n_features).\n    degree : int, optional (default=2)\n        Positive integer \u2265 1 \u2013 the polynomial degree.\n    \n    Returns\n    -------\n    list\n        Kernel matrix as a nested Python list, rounded to 4 decimals.\n        If any validation check fails the function returns -1.\n    \"\"\"\n    if not isinstance(degree, int) or isinstance(degree, bool) or degree < 1:\n        return -1\n    try:\n        X_arr = np.asarray(X, dtype=float)\n        Y_arr = np.asarray(Y, dtype=float)\n    except Exception:\n        return -1\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        return -1\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    try:\n        kernel = (X_arr @ Y_arr.T) ** degree\n    except Exception:\n        return -1\n    kernel = np.round(kernel, 4)\n    return kernel.tolist()\nassert polynomial_kernel([[1, 2], [3, 4]], [[5, 6], [7, 8]], 2) == [[289.0, 529.0], [1521.0, 2809.0]], \"failed: basic 2\u00d72 degree-2 example\"\nassert polynomial_kernel([[1, 0], [0, 1]], [[1, 0], [0, 1]], 1) == [[1.0, 0.0], [0.0, 1.0]], \"failed: identity dot product degree 1\"\nassert polynomial_kernel([[1, 2, 3]], [[4, 5, 6]], 3) == [[32768.0]], \"failed: single row, degree 3\"\nassert polynomial_kernel([[0.5, 1.5]], [[2.0, 3.0], [1.0, 1.0]], 2) == [[30.25, 4.0]], \"failed: float inputs\"\nassert polynomial_kernel([[1, 2]], [[3, 4, 5]], 2) == -1, \"failed: mismatched feature dimensions should return -1\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], 0) == -1, \"failed: degree 0 should return -1\"\nassert polynomial_kernel([[1, -1], [2, -2]], [[3, -3], [4, -4]], 2) == [[36.0, 64.0], [144.0, 256.0]], \"failed: negatives and degree 2\"\nassert polynomial_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 1) == [[50.0], [122.0]], \"failed: rectangular result\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], 1) == [[11.0]], \"failed: simple dot, degree 1\""}
{"task_id": 183, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    weight_shape = tuple(weight_shape)\n    ndim = len(weight_shape)\n    if ndim == 2:\n        fan_in = weight_shape[0]\n    elif ndim == 4:\n        (f_w, f_h, in_ch, _) = weight_shape\n        fan_in = f_w * f_h * in_ch\n    else:\n        raise ValueError(f'he_uniform only supports shapes of length 2 (dense) or 4 (conv); got shape with {ndim} dimensions.')\n    if fan_in <= 0:\n        raise ValueError('fan_in must be positive, got {}'.format(fan_in))\n    limit = np.sqrt(6.0 / fan_in)\n    return np.random.uniform(low=-limit, high=limit, size=weight_shape)\nw = he_uniform((2, 3)); assert w.shape == (2, 3) and np.all(w >= -np.sqrt(6/2)) and np.all(w <= np.sqrt(6/2)), \"test case failed: he_uniform((2, 3))\"\nw = he_uniform((5, 10)); assert w.shape == (5, 10) and np.all(w >= -np.sqrt(6/5)) and np.all(w <= np.sqrt(6/5)), \"test case failed: he_uniform((5, 10))\"\nw = he_uniform((3, 3, 1, 32)); assert w.shape == (3, 3, 1, 32) and np.all(w >= -np.sqrt(6/9)) and np.all(w <= np.sqrt(6/9)), \"test case failed: he_uniform((3, 3, 1, 32))\"\nw = he_uniform((5, 5, 16, 32)); assert w.shape == (5, 5, 16, 32) and np.all(w >= -np.sqrt(6/400)) and np.all(w <= np.sqrt(6/400)), \"test case failed: he_uniform((5, 5, 16, 32))\"\nw = he_uniform((1, 1, 64, 128)); assert w.shape == (1, 1, 64, 128) and np.all(w >= -np.sqrt(6/64)) and np.all(w <= np.sqrt(6/64)), \"test case failed: he_uniform((1, 1, 64, 128))\"\nw = he_uniform((10, 1)); assert w.shape == (10, 1) and np.all(w >= -np.sqrt(6/10)) and np.all(w <= np.sqrt(6/10)), \"test case failed: he_uniform((10, 1))\"\nw = he_uniform((7, 7, 3, 64)); assert w.shape == (7, 7, 3, 64) and np.all(w >= -np.sqrt(6/147)) and np.all(w <= np.sqrt(6/147)), \"test case failed: he_uniform((7, 7, 3, 64))\"\nw = he_uniform((128, 256)); assert w.shape == (128, 256) and np.all(w >= -np.sqrt(6/128)) and np.all(w <= np.sqrt(6/128)), \"test case failed: he_uniform((128, 256))\"\nw = he_uniform((4, 4)); assert w.shape == (4, 4) and np.all(w >= -np.sqrt(6/4)) and np.all(w <= np.sqrt(6/4)), \"test case failed: he_uniform((4, 4))\"\nw = he_uniform((3, 3, 3, 3)); assert w.shape == (3, 3, 3, 3) and np.all(w >= -np.sqrt(6/27)) and np.all(w <= np.sqrt(6/27)), \"test case failed: he_uniform((3, 3, 3, 3))\""}
{"task_id": 184, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"CART-style binary decision tree (Gini) completely from scratch.\"\"\"\n\n    class Node:\n        __slots__ = ('is_leaf', 'prediction', 'feature', 'threshold', 'left', 'right')\n\n        def __init__(self, *, is_leaf: bool, prediction: int | None=None, feature: int | None=None, threshold: float | None=None, left: 'Node | None'=None, right: 'Node | None'=None):\n            self.is_leaf = is_leaf\n            self.prediction = prediction\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n    y_train = y_train.astype(int, copy=False)\n    n_classes = int(y_train.max()) + 1\n\n    def gini(counts: np.ndarray) -> float:\n        \"\"\"Gini impurity from class counts.\"\"\"\n        total = counts.sum()\n        if total == 0:\n            return 0.0\n        probs = counts / total\n        return 1.0 - np.sum(probs ** 2)\n\n    def majority_class(counts: np.ndarray) -> int:\n        \"\"\"Smallest label in case of ties keeps result deterministic.\"\"\"\n        return int(np.argmax(counts))\n\n    def find_best_split(indices: np.ndarray) -> tuple[int, float, float, np.ndarray, np.ndarray] | None:\n        \"\"\"\n        Returns (best_feature, best_threshold, best_gain, left_idx, right_idx)\n        or None if no split brings positive gain.\n        \"\"\"\n        X_node = X_train[indices]\n        y_node = y_train[indices]\n        parent_counts = np.bincount(y_node, minlength=n_classes)\n        parent_gini = gini(parent_counts)\n        best_gain = 0.0\n        best_feature = -1\n        best_threshold = 0.0\n        best_left_idx = best_right_idx = None\n        (n_samples, n_features) = X_node.shape\n        for feat in range(n_features):\n            values = X_node[:, feat]\n            order = np.argsort(values)\n            sorted_y = y_node[order]\n            sorted_vals = values[order]\n            left_counts = np.zeros(n_classes, dtype=int)\n            right_counts = parent_counts.copy()\n            for i in range(1, n_samples):\n                cls = sorted_y[i - 1]\n                left_counts[cls] += 1\n                right_counts[cls] -= 1\n                if sorted_vals[i] == sorted_vals[i - 1]:\n                    continue\n                left_n = i\n                right_n = n_samples - i\n                g_left = gini(left_counts)\n                g_right = gini(right_counts)\n                weighted = (left_n * g_left + right_n * g_right) / n_samples\n                gain = parent_gini - weighted\n                if gain > best_gain + 1e-12:\n                    best_gain = gain\n                    best_feature = feat\n                    best_threshold = (sorted_vals[i] + sorted_vals[i - 1]) / 2.0\n                    mask = X_train[indices, feat] <= best_threshold\n                    best_left_idx = indices[mask]\n                    best_right_idx = indices[~mask]\n        if best_gain <= 0.0 or best_left_idx.size == 0 or best_right_idx.size == 0:\n            return None\n        return (best_feature, best_threshold, best_gain, best_left_idx, best_right_idx)\n\n    def build(indices: np.ndarray, depth: int) -> Node:\n        y_subset = y_train[indices]\n        counts = np.bincount(y_subset, minlength=n_classes)\n        if np.unique(y_subset).size == 1:\n            return Node(is_leaf=True, prediction=int(y_subset[0]))\n        if max_depth is not None and depth >= max_depth:\n            return Node(is_leaf=True, prediction=majority_class(counts))\n        split = find_best_split(indices)\n        if split is None:\n            return Node(is_leaf=True, prediction=majority_class(counts))\n        (feat, thr, _, left_idx, right_idx) = split\n        left_child = build(left_idx, depth + 1)\n        right_child = build(right_idx, depth + 1)\n        return Node(is_leaf=False, feature=feat, threshold=thr, left=left_child, right=right_child)\n    root = build(np.arange(X_train.shape[0]), depth=0)\n\n    def predict_single(x: np.ndarray) -> int:\n        node = root\n        while not node.is_leaf:\n            node = node.left if x[node.feature] <= node.threshold else node.right\n        return node.prediction\n    return [predict_single(row) for row in X_test]\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5],[5.5]])) == [0,0,1], \"failed: simple 1-D split\"\nassert decision_tree_predict(np.array([[0,0],[1,1],[2,2],[9,9],[10,10],[11,11]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[10,10]])) == [0,1], \"failed: two-dimensional clearly separated\"\nassert decision_tree_predict(np.array([[1],[2],[3],[10],[11],[12],[20],[21],[22]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[2.5],[11.5],[21]])) == [0,1,2], \"failed: three-class 1-D split\"\nassert decision_tree_predict(np.array([[1],[2],[3]]), np.array([1,1,1]), np.array([[0],[5]])) == [1,1], \"failed: all labels identical\"\nassert decision_tree_predict(np.array([[0.1],[0.2],[0.3],[0.4],[0.5],[0.6]]), np.array([0,0,0,1,1,1]), np.array([[0.25],[0.55]])) == [0,1], \"failed: threshold around 0.35\"\nassert decision_tree_predict(np.array([[5.1,3.5,1.4],[4.9,3.0,1.4],[6.2,3.4,5.4],[5.9,3.0,5.1]]), np.array([0,0,1,1]), np.array([[5.0,3.4,1.5],[6.0,3.1,5.0]])) == [0,1], \"failed: example in task description\"\nassert decision_tree_predict(np.array([[0,2],[1,2],[2,2],[0,10],[1,10],[2,10]]), np.array([0,0,0,1,1,1]), np.array([[0,3],[0,9]])) == [0,1], \"failed: split on second feature\"\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1]), np.array([[1.5],[4.5]])) == [0,1], \"failed: odd number of samples\"\nassert decision_tree_predict(np.array([[1],[1],[2],[2],[3],[3],[10],[10],[11],[11]]), np.array([0,0,0,0,0,0,1,1,1,1]), np.array([[1],[10],[3]])) == [0,1,0], \"failed: duplicates in features\"\nassert decision_tree_predict(np.array([[0],[5],[10],[15]]), np.array([0,1,2,3]), np.array([[12],[1]])) == [2,0], \"failed: multi-class, arbitrary values\""}
{"task_id": 185, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    X_arr = np.asarray(X)\n    if X_arr.size == 0:\n        raise ValueError('Got an empty matrix.')\n    if X_arr.ndim == 1:\n        n_samples = 1\n        n_features = int(X_arr.shape[0])\n        return (n_samples, n_features)\n    if X_arr.ndim >= 2:\n        n_samples = int(X_arr.shape[0])\n        n_features = int(np.prod(X_arr.shape[1:], dtype=int))\n        return (n_samples, n_features)\n    raise ValueError('Input must be at least 1-dimensional (got a scalar).')\nassert dataset_shape([[1, 2], [3, 4]]) == (2, 2), \"test case failed: dataset_shape([[1, 2], [3, 4]])\"\nassert dataset_shape([1, 2, 3, 4]) == (1, 4), \"test case failed: dataset_shape([1, 2, 3, 4])\"\nassert dataset_shape(np.array([[1, 2, 3], [4, 5, 6]])) == (2, 3), \"test case failed: dataset_shape(np.array([[1, 2, 3], [4, 5, 6]]))\"\nassert dataset_shape(np.zeros((3, 4, 5))) == (3, 20), \"test case failed: dataset_shape(np.zeros((3, 4, 5)))\"\nassert dataset_shape([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == (2, 4), \"test case failed: nested 3-D list\"\nassert dataset_shape(np.ones((1,))) == (1, 1), \"test case failed: dataset_shape(np.ones((1,)))\"\nassert dataset_shape(np.arange(12).reshape(3, 2, 2)) == (3, 4), \"test case failed: dataset_shape(np.arange(12).reshape(3, 2, 2))\"\nassert dataset_shape([[7]]) == (1, 1), \"test case failed: dataset_shape([[7]])\"\nassert dataset_shape(np.array([[0, 1]])) == (1, 2), \"test case failed: dataset_shape(np.array([[0, 1]]))\"\nassert dataset_shape(np.random.rand(5, 3)) == (5, 3), \"test case failed: dataset_shape(np.random.rand(5, 3))\""}
{"task_id": 186, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (ignored).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places. If *X_test* is empty an\n        empty list is returned.\n    \"\"\"\n    X_test_arr = np.asarray(X_test)\n    y_train_arr = np.asarray(y_train)\n    m_samples = 0 if X_test_arr.ndim == 0 else X_test_arr.shape[0]\n    if m_samples == 0:\n        return []\n    mean_val = round(float(np.mean(y_train_arr)), 4)\n    return [mean_val] * m_samples\nassert baseline_mean_predict(np.array([[1],[2],[3]]), np.array([2, 4, 6]), np.array([[4],[5]])) == [4.0, 4.0], \"test case failed: basic integer example\"\nassert baseline_mean_predict([[1],[2],[3],[4]], [1, 1, 1, 1], [[3],[4]]) == [1.0, 1.0], \"test case failed: identical targets\"\nassert baseline_mean_predict([[1],[2],[3]], [1.5, 2.5, 4.0], [[0],[1],[2]]) == [2.6667, 2.6667, 2.6667], \"test case failed: mean needs rounding\"\nassert baseline_mean_predict([], [1.1111, 2.2222, 3.3333], [[1],[2]]) == [2.2222, 2.2222], \"test case failed: 4-decimal precision targets\"\nassert baseline_mean_predict([[1],[2],[3]], [-1, -2, -3], [[10]]) == [-2.0], \"test case failed: negative targets\"\nassert baseline_mean_predict([[1],[2],[3]], [5, 6, 7], np.empty((0, 1))) == [], \"test case failed: empty X_test\"\nassert baseline_mean_predict([[42]], [10], [[4],[5],[6]]) == [10.0, 10.0, 10.0], \"test case failed: single training sample\"\nassert baseline_mean_predict([[1,2,3],[4,5,6]], [0, 10], [[7,8,9],[9,8,7]]) == [5.0, 5.0], \"test case failed: multi-feature X_test\"\nassert baseline_mean_predict([[1],[2]], [3, 5], [[9],[9],[9]]) == [4.0, 4.0, 4.0], \"test case failed: pure python lists\"\nassert baseline_mean_predict(np.random.rand(1000, 5), list(range(1,1001)), np.zeros((5,5))) == [500.5]*5, \"test case failed: large dataset\""}
{"task_id": 188, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n\n    Returns the value rounded to 4 decimal places, or \u22121 if any input is invalid.\n    \"\"\"\n    if not isinstance(step, int):\n        return -1\n    valid = 0.0 <= min_epsilon < max_epsilon and decay_rate > 0.0 and (step >= 0)\n    if not valid:\n        return -1\n    decayed = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n    decayed = max(decayed, min_epsilon)\n    return round(decayed, 4)\nassert epsilon_decay(0.9, 0.1, 0.005, 0) == 0.9, \"failed: step 0 should return max_epsilon\"\nassert epsilon_decay(0.9, 0.1, 0.005, 100) == 0.5852, \"failed: step 100, \u03b5 should be 0.5852\"\nassert epsilon_decay(0.9, 0.1, 0.005, 200) == 0.3943, \"failed: step 200, \u03b5 should be 0.3943\"\nassert epsilon_decay(0.9, 0.1, 0.005, 500) == 0.1657, \"failed: step 500, \u03b5 should be 0.1657\"\nassert epsilon_decay(0.9, 0.1, 0.005, 1000) == 0.1054, \"failed: step 1000, \u03b5 should be 0.1054\"\nassert epsilon_decay(0.9, 0.1, 0.005, 10000) == 0.1, \"failed: \u03b5 must never drop below \u03b5_min\"\nassert epsilon_decay(0.5, 0.5, 0.01, 10) == -1, \"failed: \u03b5_max equal to \u03b5_min should be invalid\"\nassert epsilon_decay(0.5, 0.6, 0.01, 10) == -1, \"failed: \u03b5_max smaller than \u03b5_min should be invalid\"\nassert epsilon_decay(0.9, 0.1, -0.01, 10) == -1, \"failed: negative decay_rate should be invalid\"\nassert epsilon_decay(0.9, 0.1, 0.005, -5) == -1, \"failed: negative step should be invalid\""}
{"task_id": 189, "completion_id": 0, "passed": false, "result": "failed: test case failed: upsample bilinear 2x2->4x4", "solution": "import numpy as np\nimport numpy as np\ndef _get_indices_weights(in_size, out_size):\n    \"\"\"\n    Compute the source indices and interpolation weights needed to resize one\n    dimension from ``in_size`` to ``out_size`` using the classic\n    (i + 0.5) * scale - 0.5  mapping (i \u2011 centre format).\n\n    Returns\n    -------\n    idx0 : ndarray (out_size,)   \u2013  left / top  indices  (\u230acoord\u230b)\n    idx1 : ndarray (out_size,)   \u2013  right / bottom indices (idx0+1, clipped)\n    w    : ndarray (out_size,)   \u2013  weight for idx1   (w = coord \u2212 idx0)\n                                     so that value = (1-w)*v[idx0] + w*v[idx1]\n    \"\"\"\n    scale = in_size / out_size\n    coord = (np.arange(out_size) + 0.5) * scale - 0.5\n    idx0 = np.floor(coord).astype(np.int64)\n    idx1 = idx0 + 1\n    idx0 = np.clip(idx0, 0, in_size - 1)\n    idx1 = np.clip(idx1, 0, in_size - 1)\n    w = coord - idx0\n    w = np.clip(w, 0.0, 1.0)\n    return (idx0, idx1, w)\ndef batch_resample(X, new_dim, mode='bilinear'):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels),\n        rounded to 4 decimal places.\n    \"\"\"\n    if mode not in ('bilinear', 'neighbor'):\n        raise NotImplementedError(f'Unrecognized resampling mode: {mode}')\n    if not (isinstance(new_dim, (tuple, list)) and len(new_dim) == 2):\n        raise ValueError('`new_dim` must be a tuple/list like (rows, cols)')\n    (n_ex, in_rows, in_cols, n_ch) = X.shape\n    (out_rows, out_cols) = map(int, new_dim)\n    if mode == 'neighbor':\n        row_scale = in_rows / out_rows\n        col_scale = in_cols / out_cols\n        row_coords = (np.arange(out_rows) + 0.5) * row_scale - 0.5\n        col_coords = (np.arange(out_cols) + 0.5) * col_scale - 0.5\n        row_idx = np.clip(np.round(row_coords).astype(np.int64), 0, in_rows - 1)\n        col_idx = np.clip(np.round(col_coords).astype(np.int64), 0, in_cols - 1)\n        tmp = np.take(X, row_idx, axis=1)\n        out = np.take(tmp, col_idx, axis=2)\n    else:\n        (r0, r1, wy) = _get_indices_weights(in_rows, out_rows)\n        (c0, c1, wx) = _get_indices_weights(in_cols, out_cols)\n        top = np.take(X, r0, axis=1)\n        bottom = np.take(X, r1, axis=1)\n        wy = wy.reshape(1, -1, 1, 1)\n        row_interp = (1.0 - wy) * top + wy * bottom\n        left = np.take(row_interp, c0, axis=2)\n        right = np.take(row_interp, c1, axis=2)\n        wx = wx.reshape(1, 1, -1, 1)\n        out = (1.0 - wx) * left + wx * right\n    return np.round(out, 4)\nassert np.allclose(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(4,4)),np.array([[[[0.    ],[0.3333],[0.6667],[1.    ]],[[0.6667],[1.    ],[1.3333],[1.6667]],[[1.3333],[1.6667],[2.    ],[2.3333]],[[2.    ],[2.3333],[2.6667],[3.    ]]]])), \"test case failed: upsample bilinear 2x2->4x4\"\nassert np.array_equal(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(2,2)),np.array([[[[0.],[1.]],[[2.],[3.]]]])), \"test case failed: identity bilinear\"\nassert np.array_equal(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(4,4),\"neighbor\"),np.array([[[[0.],[0.],[1.],[1.]],[[0.],[0.],[1.],[1.]],[[2.],[2.],[3.],[3.]],[[2.],[2.],[3.],[3.]]]])), \"test case failed: neighbor 2x2->4x4\"\nassert np.array_equal(batch_resample(np.arange(16.).reshape(1,4,4,1),(2,2)),np.array([[[[0.],[3.]],[[12.],[15.]]]])), \"test case failed: downsample 4x4->2x2 bilinear\"\nassert batch_resample(np.arange(12.).reshape(1,2,2,3),(3,3),\"neighbor\").shape == (1,3,3,3), \"test case failed: shape mismatch for multichannel\"\nassert np.array_equal(batch_resample(np.arange(12.).reshape(1,2,2,3),(3,3),\"neighbor\")[0,0,0],np.arange(12.).reshape(1,2,2,3)[0,0,0]), \"test case failed: neighbour first pixel value\"\nassert batch_resample(np.zeros((5,2,2,1)),(1,1)).shape == (5,1,1,1), \"test case failed: batch size preserved\"\nassert np.array_equal(batch_resample(np.zeros((1,3,3,2)),(5,5)),np.zeros((1,5,5,2))), \"test case failed: zeros remain zeros\"\nassert batch_resample(np.zeros((1,3,3,2)),(1,1),\"neighbor\").shape == (1,1,1,2), \"test case failed: neighbour 1x1 shape\"\nassert np.array_equal(batch_resample(np.array([[[[5.]]]]),(1,1)),np.array([[[[5.]]]])), \"test case failed: trivial 1x1 image\""}
{"task_id": 190, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted\n    Gini impurity for a single binary split.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray  (n_samples \u00d7 n_features)\n    y : list[int] | np.ndarray          (n_samples,)\n\n    Returns\n    -------\n    (int, float | None, float)\n        (best_feature_index, best_threshold_value, best_gini_rounded)\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y)\n    if X.ndim != 2:\n        raise ValueError('X must be 2-dimensional')\n    if y.ndim != 1 or y.shape[0] != X.shape[0]:\n        raise ValueError('y must be 1-D and have the same length as X')\n    (n_samples, n_features) = X.shape\n    if n_samples == 0 or n_features == 0:\n        return (-1, None, 0.0)\n    (classes, y_enc) = np.unique(y, return_inverse=True)\n    n_classes = classes.size\n\n    def gini(counts, n):\n        if n == 0:\n            return 0.0\n        p = counts / n\n        return 1.0 - np.sum(p * p)\n    total_counts = np.bincount(y_enc, minlength=n_classes)\n    g_whole = gini(total_counts, n_samples)\n    best_gini = np.inf\n    best_feat = -1\n    best_th = None\n    tol = 1e-12\n    for j in range(n_features):\n        col = X[:, j]\n        if np.all(col == col[0]):\n            continue\n        order = np.argsort(col, kind='mergesort')\n        col_sorted = col[order]\n        y_sorted = y_enc[order]\n        left_counts = np.zeros(n_classes, dtype=int)\n        for i in range(n_samples):\n            cls = y_sorted[i]\n            left_counts[cls] += 1\n            is_last_occurrence = i == n_samples - 1 or col_sorted[i] != col_sorted[i + 1]\n            if not is_last_occurrence:\n                continue\n            n_left = i + 1\n            n_right = n_samples - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            right_counts = total_counts - left_counts\n            g_left = gini(left_counts, n_left)\n            g_right = gini(right_counts, n_right)\n            g_split = n_left / n_samples * g_left + n_right / n_samples * g_right\n            if g_split + tol < best_gini:\n                (best_gini, best_feat, best_th) = (g_split, j, col_sorted[i])\n            elif abs(g_split - best_gini) < tol:\n                if j < best_feat:\n                    (best_feat, best_th) = (j, col_sorted[i])\n                elif j == best_feat and col_sorted[i] < best_th:\n                    best_th = col_sorted[i]\n    if best_feat == -1:\n        return (-1, None, round(g_whole, 4))\n    return (best_feat, best_th, round(best_gini, 4))\nassert best_gini_split([[2], [3], [10], [19]], [0, 0, 1, 1]) == (0, 3, 0.0), \"test 1 failed\"\nassert best_gini_split([[2,3],[1,5],[3,2],[4,4]], [0,0,1,1]) == (0, 2, 0.0), \"test 2 failed\"\nassert best_gini_split([[1],[2],[3],[4]], [0,1,0,1]) == (0, 1, 0.3333), \"test 4 failed\"\nassert best_gini_split([[1,10], [2,1], [3,1], [4,10]], [0,0,1,1]) == (0, 2, 0.0), \"test 5 failed\"\nassert best_gini_split([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]], [0,0,0,1,1,1]) == (0, 3, 0.0), \"test 6 failed\"\nassert best_gini_split([[1],[2],[3]], [0,1,2]) == (0, 1, 0.3333), \"test 7 failed\"\nassert best_gini_split([[1,10],[2,10],[1,1],[2,1]], [0,0,1,1]) == (1, 1, 0.0), \"test 8 failed\"\nassert best_gini_split([[1],[1],[1]], [0,1,0]) == (-1, None, 0.4444), \"test 9 failed\"\nassert best_gini_split([[1,5,9],[2,6,8],[3,7,7],[4,8,6]], [0,0,1,1]) == (0, 2, 0.0), \"test 10 failed\""}
{"task_id": 191, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef metric(name: str):\n    \"\"\"Return a distance function with integrated validation.\"\"\"\n    supported = ('euclidean', 'manhattan', 'chebyshev', 'cosine')\n\n    def d(v1, v2):\n        if name not in supported:\n            return -1\n        if not isinstance(v1, (list, tuple, np.ndarray)):\n            return -1\n        if not isinstance(v2, (list, tuple, np.ndarray)):\n            return -1\n        try:\n            a = np.asarray(v1, dtype=float)\n            b = np.asarray(v2, dtype=float)\n        except Exception:\n            return -1\n        if a.ndim != 1 or b.ndim != 1:\n            return -1\n        if a.size == 0 or b.size == 0:\n            return -1\n        if a.size != b.size:\n            return -1\n        if name == 'euclidean':\n            value = np.linalg.norm(a - b)\n        elif name == 'manhattan':\n            value = np.sum(np.abs(a - b))\n        elif name == 'chebyshev':\n            value = np.max(np.abs(a - b))\n        else:\n            (na, nb) = (np.linalg.norm(a), np.linalg.norm(b))\n            if na == 0 or nb == 0:\n                return -1\n            value = 1 - a @ b / (na * nb)\n        return round(float(value), 4)\n    return d\nassert metric('euclidean')([1,2,3],[4,5,6]) == 5.1962, \"test failed: metric('euclidean')([1,2,3],[4,5,6])\"\nassert metric('manhattan')([1,2,3],[4,5,6]) == 9.0, \"test failed: metric('manhattan')([1,2,3],[4,5,6])\"\nassert metric('chebyshev')([1,2,3],[4,5,6]) == 3.0, \"test failed: metric('chebyshev')([1,2,3],[4,5,6])\"\nassert metric('cosine')([1,0],[0,1]) == 1.0, \"test failed: metric('cosine')([1,0],[0,1])\"\nassert metric('cosine')([1,2],[1,2]) == 0.0, \"test failed: metric('cosine')([1,2],[1,2])\"\nassert metric('euclidean')([0,0],[0,0]) == 0.0, \"test failed: metric('euclidean')([0,0],[0,0])\"\nassert metric('manhattan')([3,4,5],[3,4,5]) == 0.0, \"test failed: metric('manhattan') identical vectors\"\nassert metric('unknown')([1,2],[3,4]) == -1, \"test failed: metric('unknown') should be -1\"\nassert metric('euclidean')([1,2,3],[1,2]) == -1, \"test failed: metric('euclidean') mismatched length\"\nassert metric('cosine')([0,0,0],[1,0,0]) == -1, \"test failed: metric('cosine') zero-norm vector\""}
{"task_id": 193, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    Parameters\n    ----------\n    z : int, float, list or np.ndarray\n        \u2022 Scalar (int/float/NumPy scalar) \u2013 returns a single float  \n        \u2022 1-D list / NumPy array        \u2013 returns a list of floats\n\n    Returns\n    -------\n    float or list\n        Softsign-transformed value(s), rounded to 4 decimal places.\n    \"\"\"\n    if np.isscalar(z):\n        return round(z / (1 + abs(z)), 4)\n    arr = np.asarray(z, dtype=np.float64)\n    if arr.size == 0:\n        return []\n    result = arr / (1 + np.abs(arr))\n    return [round(float(x), 4) for x in result.tolist()]\nassert softsign(3) == 0.75, \"test case failed: softsign(3)\"\nassert softsign(-4) == -0.8, \"test case failed: softsign(-4)\"\nassert softsign(0) == 0.0, \"test case failed: softsign(0)\"\nassert softsign([1, -2, 0]) == [0.5, -0.6667, 0.0], \"test case failed: softsign([1, -2, 0])\"\nassert softsign(np.array([10, -10])) == [0.9091, -0.9091], \"test case failed: softsign(np.array([10, -10]))\"\nassert softsign([]) == [], \"test case failed: softsign([])\"\nassert softsign(np.array([])).__eq__([]), \"test case failed: softsign(np.array([]))\"\nassert softsign([0.5]) == [0.3333], \"test case failed: softsign([0.5])\"\nassert softsign(np.array([1000])) == [0.999], \"test case failed: softsign(np.array([1000]))\"\nassert softsign([-1, -2, -3]) == [-0.5, -0.6667, -0.75], \"test case failed: softsign([-1, -2, -3])\""}
{"task_id": 194, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    w = np.asarray(weights, dtype=float)\n    grad = np.asarray(gradients, dtype=float)\n    if w.shape != grad.shape:\n        raise ValueError('`weights` and `gradients` must have the same length.')\n    if G is None:\n        G_prev = np.zeros_like(w)\n    else:\n        G_prev = np.asarray(G, dtype=float)\n        if G_prev.shape != w.shape:\n            raise ValueError('`G` must be the same length as `weights`.')\n    G_new = G_prev + grad ** 2\n    w_new = w - learning_rate * grad / np.sqrt(G_new + eps)\n    w_new = np.round(w_new, 6).tolist()\n    G_new = np.round(G_new, 6).tolist()\n    return (w_new, G_new)\nassert adagrad_update([1.0], [0.1], None, 0.1) == ([0.9], [0.01]), \"test 1 failed: first single-dim step\"\nassert adagrad_update([3.0, 4.0], [0.1, -0.2], None, 0.1) == ([2.9, 4.1], [0.01, 0.04]), \"test 2 failed: example from description\"\nassert adagrad_update([2.0], [-0.5], None, 0.05) == ([2.05], [0.25]), \"test 3 failed: negative gradient single-dim\"\nassert adagrad_update([1.5, -2.0], [0.2, 0.1], [0.04, 0.01], 0.1) == ([1.429289, -2.070711], [0.08, 0.02]), \"test 4 failed: update with existing G\"\nassert adagrad_update([2.0, -3.5], [0.0, 0.0], [0.01, 0.04], 0.1) == ([2.0, -3.5], [0.01, 0.04]), \"test 5 failed: zero gradient should keep weights\"\nassert adagrad_update([0.9], [0.05], [0.01], 0.1) == ([0.855279], [0.0125]), \"test 6 failed: second single-dim step\"\nassert adagrad_update([1.0, 2.0, 3.0], [1.0, -1.0, 0.5], None, 0.05) == ([0.95, 2.05, 2.95], [1.0, 1.0, 0.25]), \"test 7 failed: three-dim first step\"\nassert adagrad_update([10.0, -10.0], [1.0, 1.0], [100.0, 100.0], 1.0) == ([9.900496, -10.099504], [101.0, 101.0]), \"test 8 failed: large prior G\"\nassert adagrad_update([0.0, 0.0], [-2.0, -2.0], None, 0.1) == ([0.1, 0.1], [4.0, 4.0]), \"test 9 failed: negative gradient both dims\"\nassert adagrad_update([0.95, 2.05, 2.95], [0.1, 0.1, 0.1], [1.0, 1.0, 0.25], 0.05) == ([0.945025, 2.045025, 2.940194], [1.01, 1.01, 0.26]), \"test 10 failed: three-dim second step\""}
{"task_id": 197, "completion_id": 0, "passed": false, "result": "failed: name 'SimpleNamespace' is not defined", "solution": "import numpy as np\nfrom itertools import product\nimport math\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\nimport numpy as np\ndef _is_discrete(space: Any) -> bool:\n    \"\"\"Utility: does the sub-space describe a discrete set?\"\"\"\n    return hasattr(space, 'n')\ndef _is_continuous(space: Any) -> bool:\n    \"\"\"Utility: does the sub-space describe a continuous set?\"\"\"\n    return hasattr(space, 'shape')\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"\n    Summarise an RL environment's action space.\n\n    Parameters\n    ----------\n    env : Any\n        Environment exposing an `action_space` attribute \u00e0-la OpenAI-Gym.\n    md_action : bool\n        Ignored by the logic (kept for the required signature) \u2013 the function\n        determines the true structure directly from `env.action_space`.\n    cont_action : bool\n        Ignored by the logic (kept for the required signature) \u2013 the function\n        determines the true structure directly from `env.action_space`.\n\n    Returns\n    -------\n    Tuple containing\n        n_actions_per_dim : list[int | float]\n            Number of distinct actions for every dimension\n            (`np.inf` for continuous ones).\n        action_ids : list[tuple[int, ...]] | None\n            All possible discrete actions as tuples; `None` if at least one\n            dimension is continuous.\n        action_dim : int\n            Number of action dimensions.\n    \"\"\"\n    space = env.action_space\n    n_actions_per_dim: List[Union[int, float]] = []\n    if hasattr(space, 'spaces'):\n        subspaces = space.spaces\n        for sub in subspaces:\n            if _is_discrete(sub):\n                n_actions_per_dim.append(int(sub.n))\n            elif _is_continuous(sub):\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(np.inf)\n        action_dim = len(subspaces)\n    elif _is_discrete(space):\n        n_actions_per_dim.append(int(space.n))\n        action_dim = 1\n    elif _is_continuous(space):\n        dim = int(space.shape[0]) if len(space.shape) > 0 else 1\n        n_actions_per_dim.extend([np.inf] * dim)\n        action_dim = dim\n    else:\n        n_actions_per_dim.append(np.inf)\n        action_dim = 1\n    contains_continuous = any((np.isinf(x) for x in n_actions_per_dim))\n    if contains_continuous:\n        action_ids = None\n    else:\n        ranges = [range(int(n)) for n in n_actions_per_dim]\n        action_ids = [tuple(p) for p in product(*ranges)]\n    return (n_actions_per_dim, action_ids, action_dim)\nassert action_stats(SimpleNamespace(action_space=D(4)), False, False) == ([4], [0, 1, 2, 3], 1), \"failed test 1\"\nexpected_ids = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(3)])), True, False) == ([2, 3], expected_ids, 2), \"failed test 2\"\nmix_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), C(3)]))\nassert action_stats(mix_env, True, False) == ([2, np.inf], None, 2), \"failed test 3\"\nassert action_stats(SimpleNamespace(action_space=C(5)), False, True) == ([np.inf], None, 1), \"failed test 4\"\ncont_env = SimpleNamespace(action_space=SimpleNamespace(shape=(4,)))\nassert action_stats(cont_env, True, True) == ([np.inf, np.inf, np.inf, np.inf], None, 4), \"failed test 5\"\nassert action_stats(SimpleNamespace(action_space=D(1)), False, False) == ([1], [0], 1), \"failed test 6\"\nids_3d = list(product(range(2), repeat=3))\ntri_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(2), D(2)]))\nassert action_stats(tri_env, True, False) == ([2, 2, 2], ids_3d, 3), \"failed test 7\"\nids_31 = list(product(range(3), range(1)))\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(3), D(1)])), True, False) == ([3, 1], ids_31, 2), \"failed test 8\"\nmix2_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[C(2), D(3)]))\nassert action_stats(mix2_env, True, False) == ([np.inf, 3], None, 2), \"failed test 9\"\nassert action_stats(SimpleNamespace(action_space=D(10)), False, False) == ([10], list(range(10)), 1), \"failed test 10\""}
{"task_id": 198, "completion_id": 0, "passed": false, "result": "failed: name 'phi1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        One array per document. Array of document *d* has shape (N_d, T)\n        and contains the current variational parameter \u03d5 of this document.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the index of the *n*-th token\n        in document *d*.\n    V : int\n        Size of the vocabulary.\n\n    Returns\n    -------\n    list[list[float]]\n        (V \u00d7 T) matrix with the updated word\u2013topic probabilities.\n        Each column sums to one (\u2264 1e-4 rounding error) and every\n        number is rounded to four decimals.\n    \"\"\"\n    if not phi:\n        return [[0.0] * 0 for _ in range(V)]\n    T = phi[0].shape[1]\n    counts = np.zeros((V, T), dtype=np.float64)\n    for (doc_phi, doc_words) in zip(phi, corpus):\n        words = np.asarray(doc_words, dtype=np.intp)\n        np.add.at(counts, words, doc_phi)\n    seen_words_mask = counts.sum(axis=1) > 0\n    col_sums = counts.sum(axis=0)\n    beta = np.zeros_like(counts)\n    non_zero_cols = col_sums > 0\n    beta[:, non_zero_cols] = counts[:, non_zero_cols] / col_sums[non_zero_cols]\n    zero_cols = ~non_zero_cols\n    if zero_cols.any():\n        observed_idx = np.where(seen_words_mask)[0]\n        if observed_idx.size == 0:\n            beta[:, zero_cols] = 1.0 / V\n        else:\n            beta[observed_idx[:, None], zero_cols] = 1.0 / observed_idx.size\n    beta = np.round(beta, 4)\n    for t in range(T):\n        diff = 1.0 - beta[:, t].sum()\n        if abs(diff) > 0.0001:\n            col = beta[:, t]\n            idx = int(np.argmax(col))\n            adj = np.round(diff, 4)\n            new_val = np.round(col[idx] + adj, 4)\n            beta[idx, t] = max(new_val, 0.0)\n    return beta.tolist()\nassert update_beta(phi1, corpus1, 3) == [[0.3684, 0.0968], [0.4737, 0.6774], [0.1579, 0.2258]], \"failed: test case 1\"\nassert update_beta(phi2, corpus2, 2) == [[0.6667], [0.3333]], \"failed: test case 2\"\nassert update_beta(phi3, corpus3, 3) == [[0.1429, 0.5], [0.3571, 0.3125], [0.5, 0.1875]], \"failed: test case 3\"\nassert update_beta(phi4, corpus4, 2) == [[1.0, 0.0], [0.0, 1.0]], \"failed: test case 4\"\nassert update_beta(phi5, corpus5, 2) == [[0.3333, 0.3333], [0.6667, 0.6667]], \"failed: test case 5\"\nassert update_beta(phi6, corpus6, 3) == [[0.9474, 0.0952, 0.0952], [0.0263, 0.8571, 0.0476], [0.0263, 0.0476, 0.8571]], \"failed: test case 6\"\nassert update_beta(phi7, corpus7, 1) == [[1.0, 1.0]], \"failed: test case 7\"\nassert update_beta(phi8, corpus8, 4) == [[0.0, 0.0], [0.3333, 0.6364], [0.6667, 0.3636], [0.0, 0.0]], \"failed: test case 8\"\nassert update_beta(phi9, corpus9, 2) == [[0.5, 0.5], [0.5, 0.5]], \"failed: test case 9\"\nassert update_beta(phi10, corpus10, 2) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"failed: test case 10\""}
{"task_id": 199, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    if X.ndim != 1 or y.ndim != 1:\n        raise ValueError('X and y must be one-dimensional arrays.')\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same length.')\n    left_mask = X < value\n    right_mask = ~left_mask\n    y_left = y[left_mask].tolist()\n    y_right = y[right_mask].tolist()\n    return (y_left, y_right)\nassert split(np.array([2,3,1,5,4]), np.array([0,1,0,1,0]), 3) == ([0,0],[1,1,0]), \"failed: basic split\"\nassert split(np.array([1,2,3,4]), np.array([10,20,30,40]), 4) == ([10,20,30],[40]), \"failed: threshold at max element\"\nassert split(np.array([1,2,3,4]), np.array([10,20,30,40]), 0) == ([],[10,20,30,40]), \"failed: threshold below min\"\nassert split(np.array([1,1,1,1]), np.array([7,8,9,10]), 1) == ([],[7,8,9,10]), \"failed: all equal to threshold\"\nassert split(np.array([1,1,1,1]), np.array([7,8,9,10]), 2) == ([7,8,9,10],[]), \"failed: all below threshold\"\nassert split(np.array([-5,-2,0,3]), np.array([5,4,3,2]), 0) == ([5,4],[3,2]), \"failed: negative values\"\nassert split(np.array([0.1,0.2,0.3]), np.array([1,2,3]), 0.25) == ([1,2],[3]), \"failed: float threshold\"\nassert split(np.array([5]), np.array([42]), 5) == ([],[42]), \"failed: single element equal threshold\"\nassert split(np.array([5]), np.array([42]), 10) == ([42],[]), \"failed: single element below threshold\"\nassert split(np.array([5]), np.array([42]), 0) == ([],[42]), \"failed: single element above threshold\""}
{"task_id": 200, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom numbers import Number\nfrom collections.abc import Iterable\ndef _abs_sum(x):\n    \"\"\"Recursively compute \u03a3|x\u1d62| for any nested structure.\"\"\"\n    if isinstance(x, Number):\n        return abs(float(x))\n    if isinstance(x, np.ndarray):\n        return float(np.abs(x).sum())\n    if isinstance(x, Iterable) and (not isinstance(x, (str, bytes))):\n        total = 0.0\n        for item in x:\n            total += _abs_sum(item)\n        return total\n    raise TypeError(f'Unsupported element type: {type(x)}')\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights.\n        C: Non-negative regularization strength (float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    if weights is None:\n        return 0.0\n    try:\n        arr = np.asarray(weights, dtype=float)\n        if arr.size == 0:\n            return 0.0\n        base_sum = float(np.abs(arr).sum())\n    except (ValueError, TypeError):\n        base_sum = _abs_sum(weights)\n    penalty = C * base_sum\n    return round(penalty, 4)\nassert compute_l1_penalty([1.5, -2.0, 0.0, 3.2], 0.1) == 0.67, \"failed on simple 1-D list\"\nassert compute_l1_penalty([[1, -2], [3, -4]], 0.25) == 2.5, \"failed on 2-D list\"\nassert compute_l1_penalty([], 1.0) == 0.0, \"failed on empty list\"\nassert compute_l1_penalty([0, 0, 0], 10.0) == 0.0, \"failed on all zeros\"\nassert compute_l1_penalty([-3.3, 4.4], 1.0) == 7.7, \"failed on negative values\"\nassert compute_l1_penalty(np.array([0.3333, -0.6666]), 3) == 2.9997, \"failed on numpy 1-D array\"\nassert compute_l1_penalty(np.array([[1.1, -1.1], [2.2, -2.2]]), 0.5) == 3.3, \"failed on numpy 2-D array\"\nassert compute_l1_penalty([1]*1000, 0.001) == 1.0, \"failed on large list\"\nassert compute_l1_penalty([[[]]], 5) == 0.0, \"failed on deeply nested empty list\"\nassert compute_l1_penalty([[0.12345]], 2) == 0.2469, \"failed on rounding rule\""}
{"task_id": 201, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2-norm of slices of *p* along *axis* so that they do not exceed *m*.\"\"\"\n    p = np.asarray(p, dtype=float)\n    eps = 1e-12\n    if axis is None:\n        norm = np.linalg.norm(p)\n        scale = min(1.0, m / (norm + eps))\n        p_hat = p * scale\n    else:\n        axis = axis if axis >= 0 else p.ndim + axis\n        norms = np.linalg.norm(p, axis=axis, keepdims=True)\n        scales = np.minimum(1.0, m / (norms + eps))\n        p_hat = p * scales\n    return np.round(p_hat, 4).tolist()\nassert max_norm(np.array([[1.,2.]]),3,1)==[[1.0,2.0]],\"failed: norms already below m\"\nassert max_norm(np.array([[3.,4.],[5.,12.]]),4,1)==[[2.4,3.2],[1.5385,3.6923]],\"failed: axis 1 clip\"\nassert max_norm(np.array([5.,0.]),3,0)==[3.0,0.0],\"failed: 1D vector clip\"\nassert max_norm(np.array([3.,4.]),5,0)==[3.0,4.0],\"failed: exact norm equals m\"\nassert max_norm(np.zeros((2,3)),1,-1)==[[0.0,0.0,0.0],[0.0,0.0,0.0]],\"failed: zero tensor remains zero\"\nassert max_norm(np.array([[-3.,-4.]]),5,1)==[[-3.0,-4.0]],\"failed: negative values no change\"\nassert max_norm(np.array([[1.,1.],[2.,2.]]),2,None)==[[0.6325,0.6325],[1.2649,1.2649]],\"failed: axis None\"\nassert max_norm(np.array([[0.,0.],[1.,1.]]),1,1)==[[0.0,0.0],[0.7071,0.7071]],\"failed: row with zero norm\""}
{"task_id": 202, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _total_cost(dist_matrix: np.ndarray, medoid_idx: list[int]) -> float:\n    \"\"\"\n    Return the sum of distances of every sample to its nearest medoid.\n    \"\"\"\n    d_to_medoids = dist_matrix[:, medoid_idx]\n    return np.min(d_to_medoids, axis=1).sum()\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        Input data.\n    k : int\n        Number of desired clusters (1 \u2264 k \u2264 n_samples).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels (0 \u2026 k-1) for every sample.\n    \"\"\"\n    if X.ndim != 2:\n        raise ValueError('X must be a 2-D NumPy array.')\n    n_samples = X.shape[0]\n    if not 1 <= k <= n_samples:\n        raise ValueError('k must satisfy 1 \u2264 k \u2264 n_samples')\n    diff = X[:, None, :] - X[None, :, :]\n    dist_matrix = np.linalg.norm(diff, axis=-1)\n    medoid_idx: list[int] = list(range(k))\n    current_cost = _total_cost(dist_matrix, medoid_idx)\n    improved = True\n    while improved:\n        best_swap = None\n        best_reduction = 0.0\n        non_medoid_idx = [i for i in range(n_samples) if i not in medoid_idx]\n        for (p_pos, p) in enumerate(medoid_idx):\n            for h in non_medoid_idx:\n                candidate_medoid_idx = medoid_idx.copy()\n                candidate_medoid_idx[p_pos] = h\n                cand_cost = _total_cost(dist_matrix, candidate_medoid_idx)\n                reduction = current_cost - cand_cost\n                if reduction > best_reduction:\n                    best_reduction = reduction\n                    best_swap = (p_pos, h)\n        if best_swap is not None:\n            (p_pos, h) = best_swap\n            medoid_idx[p_pos] = h\n            current_cost -= best_reduction\n        else:\n            improved = False\n    final_dists = dist_matrix[:, medoid_idx]\n    labels = final_dists.argmin(axis=1).tolist()\n    return labels\nassert pam_clustering(np.array([[0,0]]),1)==[0],\"failed: single sample, k=1\"\nassert pam_clustering(np.array([[0,0],[1,0],[0,1],[5,5],[6,5],[5,6]]),2)==[0,0,0,1,1,1],\"failed: two well-separated clusters\"\nassert pam_clustering(np.array([[0],[10]]),2)==[0,1],\"failed: two samples, k=2\"\nassert pam_clustering(np.array([[1],[2],[3]]),3)==[0,1,2],\"failed: k equals number of samples\"\nassert pam_clustering(np.array([[-1,-1],[0,0],[1,1]]),1)==[0,0,0],\"failed: k=1, centre should move\"\nassert pam_clustering(np.array([[0],[1],[2],[3],[4]]),1)==[0,0,0,0,0],\"failed: all points one cluster\"\nassert pam_clustering(np.array([[1],[4],[7],[10]]),4)==[0,1,2,3],\"failed: each point its own cluster\""}
{"task_id": 203, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]] | int:\n    \"\"\"Build probability and alias tables for Vose\u2019s alias sampling method.\n\n    Parameters\n    ----------\n    probs : list[float] | np.ndarray\n        1-D array\u2010like of positive numbers that must sum to 1.\n\n    Returns\n    -------\n    (prob_table, alias_table) : tuple[list[float], list[int]]\n        Both lists have length N.  Values in `prob_table` are rounded\n        to four decimals.\n        If the input is invalid the function returns -1.\n    \"\"\"\n    probs = np.asarray(probs, dtype=float)\n    if probs.ndim != 1 or probs.size == 0:\n        return -1\n    if np.any(probs < 0):\n        return -1\n    if abs(probs.sum() - 1.0) > 1e-12:\n        return -1\n    N = probs.size\n    scaled_probs = probs * N\n    small = [i for (i, p) in enumerate(scaled_probs) if p < 1.0]\n    large = [i for (i, p) in enumerate(scaled_probs) if p >= 1.0]\n    prob_table = np.zeros(N, dtype=float)\n    alias_table = np.zeros(N, dtype=int)\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1.0\n        if scaled_probs[g] < 1.0:\n            small.append(g)\n        else:\n            large.append(g)\n    for idx in large:\n        prob_table[idx] = 1.0\n    for idx in small:\n        prob_table[idx] = 1.0\n    prob_list = [round(float(x), 4) for x in prob_table]\n    alias_list = alias_table.tolist()\n    return (prob_list, alias_list)\nassert build_alias_table([0.1, 0.2, 0.7]) == ([0.3, 0.6, 1.0], [2, 2, 0]), \"Test-1 failed: probs=[0.1,0.2,0.7]\"\nassert build_alias_table([0.5, 0.5]) == ([1.0, 1.0], [0, 0]), \"Test-2 failed: probs=[0.5,0.5]\"\nassert build_alias_table([0.0, 1.0]) == ([0.0, 1.0], [1, 0]), \"Test-3 failed: probs=[0,1]\"\nassert build_alias_table([0.6, 0.4]) == ([1.0, 0.8], [0, 0]), \"Test-4 failed: probs=[0.6,0.4]\"\nassert build_alias_table([0.05, 0.9, 0.05]) == ([0.15, 1.0, 0.15], [1, 0, 1]), \"Test-5 failed: probs=[0.05,0.9,0.05]\"\nassert build_alias_table([0.25, 0.25, 0.25, 0.25]) == ([1.0, 1.0, 1.0, 1.0], [0, 0, 0, 0]), \"Test-6 failed: uniform 4\"\nimport numpy as np\nassert build_alias_table(np.array([0.2, 0.8])) == ([0.4, 1.0], [1, 0]), \"Test-7 failed: numpy input\"\nassert build_alias_table([0.2] * 5) == ([1.0] * 5, [0, 0, 0, 0, 0]), \"Test-8 failed: uniform 5\"\nassert build_alias_table([0.2, -0.1, 0.9]) == -1, \"Test-9 failed: negative prob not detected\"\nassert build_alias_table([0.3, 0.3, 0.3]) == -1, \"Test-10 failed: sum != 1 not detected\""}
{"task_id": 204, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or the special floating-point\n    value ``NaN`` (Not-a-Number).\n\n    Parameters\n    ----------\n    data : iterable\n        Any one-dimensional iterable (list, tuple, NumPy array, \u2026).\n\n    Returns\n    -------\n    int\n        Number of missing elements.  Returns 0 for an empty input.\n    \"\"\"\n    try:\n        iterator = iter(data)\n    except TypeError:\n        raise TypeError('`data` must be an iterable')\n    missing = 0\n    for item in iterator:\n        if item is None:\n            missing += 1\n            continue\n        try:\n            if math.isnan(item):\n                missing += 1\n                continue\n        except TypeError:\n            pass\n        try:\n            if np.isnan(item):\n                missing += 1\n        except (TypeError, ValueError):\n            pass\n    return int(missing)\nassert num_missing([1, 2, None, 4]) == 1, \"failed on [1, 2, None, 4]\"\nassert num_missing([np.nan, np.nan]) == 2, \"failed on two nans\"\nassert num_missing([]) == 0, \"failed on empty list\"\nassert num_missing([None, np.nan, 5]) == 2, \"failed on mixed missing\"\nassert num_missing(list(range(10))) == 0, \"failed on no missing\"\nassert num_missing([None, None, None]) == 3, \"failed on all missing\"\nassert num_missing(np.array([1.0, np.nan, 2.0])) == 1, \"failed on numpy array\"\nassert num_missing([float('nan'), 'nan', None]) == 2, \"failed on string 'nan' handling\"\nassert num_missing([True, False, None]) == 1, \"failed on boolean values\"\nassert num_missing([3.0, 4.5, 6.7]) == 0, \"failed on all valid numbers\""}
{"task_id": 205, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    unique_ids = []\n    seen = set()\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            env_id = item['id']\n            if env_id not in seen:\n                unique_ids.append(env_id)\n                seen.add(env_id)\n    return unique_ids\nassert get_gym_environs([]) == [], \"test case failed: empty list\"\nassert get_gym_environs([{\"id\": \"CartPole-v1\"}]) == [\"CartPole-v1\"], \"test case failed: single element\"\nassert get_gym_environs([{\"id\": \"A\"}, {\"id\": \"B\"}, {\"id\": \"A\"}]) == [\"A\", \"B\"], \"test case failed: duplicates must be removed\"\nassert get_gym_environs([{\"name\": \"NoId\"}, {\"id\": \"X\"}]) == [\"X\"], \"test case failed: items without 'id' key are ignored\"\nassert get_gym_environs([{\"id\": \"X\"}, 42, \"string\", (1, 2), {\"id\": \"Y\"}]) == [\"X\", \"Y\"], \"test case failed: non-dict elements should be ignored\"\nassert get_gym_environs([{\"id\": \"D\"}, {\"id\": \"C\"}, {\"id\": \"B\"}, {\"id\": \"A\"}, {\"id\": \"C\"}, {\"id\": \"D\"}]) == [\"D\", \"C\", \"B\", \"A\"], \"test case failed: preserve order of first occurrence\"\nassert get_gym_environs([{\"id\": 1}, {\"id\": 2}, {\"id\": 1}]) == [1, 2], \"test case failed: ids can be non-string\"\nassert get_gym_environs([{\"id\": \"same\"}, {\"id\": \"same\"}, {\"id\": \"same\"}]) == [\"same\"], \"test case failed: all ids identical\"\nassert get_gym_environs([{\"id\": \"X\"}, {\"name\": \"n/a\"}, {\"id\": \"Y\"}, {\"foo\": \"bar\"}, {\"id\": \"X\"}]) == [\"X\", \"Y\"], \"test case failed: mixed valid and invalid elements\"\nassert get_gym_environs([{\"id\": \"first\"}, {\"ignore\": \"me\"}, {\"id\": \"second\"}, {\"id\": \"third\"}, {\"id\": \"second\"}]) == [\"first\", \"second\", \"third\"], \"test case failed: general behaviour\""}
{"task_id": 206, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    try:\n        actual_arr = np.asarray(actual, dtype=float)\n        predicted_arr = np.asarray(predicted, dtype=float)\n    except (TypeError, ValueError):\n        return -1\n    if actual_arr.ndim != 1 or predicted_arr.ndim != 1 or actual_arr.size != predicted_arr.size or (actual_arr.size == 0):\n        return -1\n    mae = np.mean(np.abs(actual_arr - predicted_arr))\n    return float(np.round(mae, 4))\nassert absolute_error([1, 2, 3], [1, 2, 3]) == 0.0, \"Test case failed: perfect prediction\"\nassert absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.5, \"Test case failed: sample data\"\nassert absolute_error([1, 2, 3], [2, 2, 2]) == 0.6667, \"Test case failed: rounding check\"\nassert absolute_error([1, 2], [1]) == -1, \"Test case failed: length mismatch\"\nassert absolute_error([-1, -2, -3], [-1.5, -2.5, -2.5]) == 0.5, \"Test case failed: negative values\"\nassert absolute_error(list(range(10)), [0] * 10) == 4.5, \"Test case failed: larger range\"\nassert absolute_error([5], [3]) == 2.0, \"Test case failed: single element\"\nassert absolute_error(np.array([1, 2, 3, 4]), [2, 3, 4, 5]) == 1.0, \"Test case failed: mixed input types\"\nassert absolute_error([1, 1, 1], [0.9999, 1.0001, 1.0002]) == 0.0001, \"Test case failed: small decimals\"\nassert absolute_error([10, 20, 30, 40], [8, 25, 28, 41]) == 2.5, \"Test case failed: general case\""}
{"task_id": 207, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height  (H) of the input image.\n        img_width  (int): Width   (W) of the input image.\n        filter_shape (tuple[int, int]): (kernel_height KH, kernel_width KW).\n        stride       (tuple[int, int]): (stride_height SH, stride_width  SW).\n        padding      (tuple[int, int]): (pad_height    PH, pad_width     PW).\n\n    Returns\n    -------\n        (OH, OW): tuple[int, int]   if the configuration is valid.\n        -1:                        otherwise.\n    \"\"\"\n    is_pos_int = lambda x: isinstance(x, int) and x > 0\n    is_nonneg_int = lambda x: isinstance(x, int) and x >= 0\n    if not (is_pos_int(img_height) and is_pos_int(img_width)):\n        return -1\n    if not isinstance(filter_shape, tuple) or len(filter_shape) != 2:\n        return -1\n    (KH, KW) = filter_shape\n    if not (is_pos_int(KH) and is_pos_int(KW)):\n        return -1\n    if not isinstance(stride, tuple) or len(stride) != 2:\n        return -1\n    (SH, SW) = stride\n    if not (is_pos_int(SH) and is_pos_int(SW)):\n        return -1\n    if not isinstance(padding, tuple) or len(padding) != 2:\n        return -1\n    (PH, PW) = padding\n    if not (is_nonneg_int(PH) and is_nonneg_int(PW)):\n        return -1\n    num_H = img_height + 2 * PH - KH\n    num_W = img_width + 2 * PW - KW\n    if num_H < 0 or num_W < 0:\n        return -1\n    if num_H % SH != 0 or num_W % SW != 0:\n        return -1\n    OH = num_H // SH + 1\n    OW = num_W // SW + 1\n    if OH <= 0 or OW <= 0:\n        return -1\n    return (OH, OW)\nassert convolution_shape(32, 32, (3, 3), (1, 1), (1, 1)) == (32, 32), \"failed: case (32,32),(3,3),(1,1),(1,1)\"\nassert convolution_shape(32, 32, (5, 5), (1, 1), (0, 0)) == (28, 28), \"failed: case (32,32),(5,5),(1,1),(0,0)\"\nassert convolution_shape(64, 64, (7, 7), (1, 1), (3, 3)) == (64, 64), \"failed: case (64,64),(7,7),(1,1),(3,3)\"\nassert convolution_shape(32, 32, (4, 4), (2, 2), (1, 1)) == (16, 16), \"failed: case (32,32),(4,4),(2,2),(1,1)\"\nassert convolution_shape(28, 28, (3, 3), (2, 2), (0, 0)) == -1, \"failed: invalid divisibility (28,28),(3,3),(2,2),(0,0)\"\nassert convolution_shape(28, 28, (3, 3), (2, 2), (1, 1)) == -1, \"failed: invalid divisibility (28,28),(3,3),(2,2),(1,1)\"\nassert convolution_shape(10, 10, (11, 11), (1, 1), (0, 0)) == -1, \"failed: kernel larger than input (10,10),(11,11)\"\nassert convolution_shape(227, 227, (11, 11), (4, 4), (0, 0)) == (55, 55), \"failed: case (227,227),(11,11),(4,4),(0,0)\"\nassert convolution_shape(32, 32, (3, 3), (0, 1), (1, 1)) == -1, \"failed: stride height zero invalid (32,32),(3,3),(0,1),(1,1)\""}
{"task_id": 208, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list (length N) with the categorical labels to be encoded.\n        categories: Optional list (length C) that contains the complete set\n            of allowed categories and fixes their order.  If *None*, the\n            categories are inferred from *labels* preserving the order of\n            their first appearance.\n\n    Returns\n    -------\n    list[list[int]]\n        An (N \u00d7 C) one-hot encoded matrix represented as a list of lists.\n        If *categories* is given and an unknown label is encountered, the\n        function returns **-1**.\n    \"\"\"\n    if categories is None:\n        categories = []\n        seen = set()\n        for lbl in labels:\n            if lbl not in seen:\n                seen.add(lbl)\n                categories.append(lbl)\n    else:\n        categories = list(categories)\n    cat2idx = {cat: idx for (idx, cat) in enumerate(categories)}\n    C = len(categories)\n    N = len(labels)\n    one_hot = np.zeros((N, C), dtype=int)\n    for (row, lbl) in enumerate(labels):\n        idx = cat2idx.get(lbl)\n        if idx is None:\n            return -1\n        one_hot[row, idx] = 1\n    return one_hot.tolist()\nassert one_hot_encode(['red','green','blue','green'], ['red','green','blue']) == [[1,0,0],[0,1,0],[0,0,1],[0,1,0]], \"Test case failed: predefined categories\"\nassert one_hot_encode(['cat','dog','cat'], None) == [[1,0],[0,1],[1,0]], \"Test case failed: inferred categories\"\nassert one_hot_encode(['sun','moon','star'], ['sun','moon','star','cloud']) == [[1,0,0,0],[0,1,0,0],[0,0,1,0]], \"Test case failed: extra unused category\"\nassert one_hot_encode(['a','b','c','a'], ['a','b','c']) == [[1,0,0],[0,1,0],[0,0,1],[1,0,0]], \"Test case failed: repeated labels\"\nassert one_hot_encode(['apple','banana'], ['banana','apple']) == [[0,1],[1,0]], \"Test case failed: category order\"\nassert one_hot_encode(['x','y'], ['x','y','z']) == [[1,0,0],[0,1,0]], \"Test case failed: missing label category present\"\nassert one_hot_encode(['alpha','beta'], ['alpha','beta','gamma','delta']) == [[1,0,0,0],[0,1,0,0]], \"Test case failed: larger category list\"\nassert one_hot_encode(['dog'], None) == [[1]], \"Test case failed: single label\"\nassert one_hot_encode(['unknown'], ['a','b','c']) == -1, \"Test case failed: unknown label should return -1\""}
{"task_id": 209, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float] | int:\n    \"\"\"Validate a multi-armed bandit description and compute the arms\u2019 expected pay-offs.\n\n    The function returns\n        (expected_values, best_arm, best_ev)\n\n    or the integer \u20131 if the input is invalid (see the doc-string in the task\n    description for the exact requirements).\n    \"\"\"\n    tol = 1e-08\n    if not isinstance(payoffs, list) or not isinstance(payoff_probs, list):\n        return -1\n    if len(payoffs) != len(payoff_probs):\n        return -1\n    expected_values = []\n    for (arm_idx, (vals, probs)) in enumerate(zip(payoffs, payoff_probs)):\n        if len(vals) != len(probs) or len(vals) == 0:\n            return -1\n        if not all((isinstance(p, (int, float)) and 0.0 <= p <= 1.0 for p in probs)):\n            return -1\n        if abs(sum(probs) - 1.0) > tol:\n            return -1\n        ev = float(np.dot(vals, probs))\n        expected_values.append(round(ev, 4))\n    max_ev = max(expected_values)\n    best_arm = next((i for (i, ev) in enumerate(expected_values) if ev == max_ev))\n    return (expected_values, best_arm, max_ev)\nassert analyze_bandit([[1,2,5],[0,3]], [[0.2,0.5,0.3],[0.6,0.4]]) == ([2.7,1.2],0,2.7), \"failed: basic two-arm example\"\nassert analyze_bandit([[10]], [[1.0]]) == ([10.0],0,10.0), \"failed: single arm certain reward\"\nassert analyze_bandit([[1,2,3]], [[0.3,0.3,0.4]]) == ([2.1],0,2.1), \"failed: single arm multi-outcome\"\nassert analyze_bandit([[1,2],[3]], [[0.5,0.5],[1.0]]) == ([1.5,3.0],1,3.0), \"failed: ragged lengths ok\"\nassert analyze_bandit([[1,2]], [[0.6,0.3]]) == -1, \"failed: probabilities not summing to 1\"\nassert analyze_bandit([[1,2]], [[0.6]]) == -1, \"failed: length mismatch\"\nassert analyze_bandit([[5,5],[5,5]], [[0.5,0.5],[0.5,0.5]]) == ([5.0,5.0],0,5.0), \"failed: tie choose smallest index\"\nassert analyze_bandit([[1,9],[5]], [[0.5,0.5],[1.0]]) == ([5.0,5.0],0,5.0), \"failed: tie different sized arms\""}
{"task_id": 210, "completion_id": 0, "passed": false, "result": "failed: name 'two' is not defined", "solution": "import functools\nimport functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Make *decorator_func* usable with or without its own parentheses.\n\n    The returned object can therefore be written either as\n\n        @wrapped_deco\n        def func(...): ...\n\n    or\n\n        @wrapped_deco(arg, kw=val)\n        def func(...): ...\n\n    while in both cases *decorator_func* is finally invoked as\n\n        decorator_func(func, *arg, **kw)\n    \"\"\"\n\n    @functools.wraps(decorator_func)\n    def decorator_or_factory(*args, **kwargs):\n        if args and callable(args[0]) and (len(args) == 1) and (not kwargs):\n            target_func = args[0]\n            return decorator_func(target_func)\n\n        @functools.wraps(decorator_func)\n        def real_decorator(func: Callable[..., Any]) -> Callable[..., Any]:\n            return decorator_func(func, *args, **kwargs)\n        return real_decorator\n    return decorator_or_factory\nassert two() == 2, \"failed: @multiply without args should double the result of two()\"\nassert three() == 15, \"failed: @multiply(5) should multiply by 5\"\nassert greet() == \"Hi!!!\", \"failed: @add_suffix(suffix='!!!') should append three exclamation marks\"\nassert word() == \"HaHaHa!\", \"failed: combined decorators order mismatch\"\nassert multiply.__name__ == \"multiply\", \"failed: metadata (name) was not preserved in multiply\"\nassert add_suffix.__doc__.startswith(\"Append\"), \"failed: metadata (docstring) was not preserved in add_suffix\"\nassert one() == 8, \"failed: stacked multiply decorators give wrong result\"\nassert echo() == \"Echo!\", \"failed: @add_suffix default suffix not appended\"\nassert add_suffix.__name__ == \"add_suffix\", \"failed: doublewrap did not preserve decorator name\"\nassert any_number() == 0, \"failed: @multiply(0) should return 0\""}
{"task_id": 211, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    actual_list = list(actual)\n    predicted_list = list(predicted)\n    if not actual_list or len(actual_list) != len(predicted_list):\n        return -1\n    mismatches = sum((1 for (a, p) in zip(actual_list, predicted_list) if a != p))\n    classification_error = mismatches / len(actual_list)\n    acc = 1.0 - classification_error\n    return round(acc, 4)\nassert accuracy([1, 0, 1, 1], [1, 1, 1, 0]) == 0.5, \"failed: accuracy([1, 0, 1, 1], [1, 1, 1, 0])\"\nassert accuracy(['cat', 'dog', 'bird'], ['cat', 'dog', 'bird']) == 1.0, \"failed: perfect prediction\"\nassert accuracy([1, 1, 1], [0, 0, 0]) == 0.0, \"failed: completely wrong prediction\"\nassert accuracy([1, 2], [1]) == -1, \"failed: different lengths should give -1\"\nassert accuracy([], []) == -1, \"failed: empty lists should give -1\"\nassert accuracy([True, False, True, False], [True, False, False, False]) == 0.75, \"failed: boolean labels\"\nassert accuracy(['a', 'b', 'c', 'd'], ['a', 'x', 'c', 'y']) == 0.5, \"failed: string labels\"\nassert accuracy([0, 1, 2, 3, 4], [0, 2, 2, 3, 5]) == 0.6, \"failed: mixed correct/incorrect\"\nassert accuracy([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0.2, \"failed: reversed list\"\nassert accuracy([0], [1]) == 0.0, \"failed: single element wrong\""}
{"task_id": 212, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import deque\nfrom collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Return one shortest \u2013 and lexicographically smallest \u2013 path from the\n    layer called \"input\" to the layer called \"output_realtime\".\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Directed graph given as adjacency list (layer -> list[successors]).\n\n    Returns\n    -------\n    list[str]\n        Names of the layers on the desired path or an empty list if no\n        such path exists.\n    \"\"\"\n    start = 'input'\n    goal = 'output_realtime'\n    if start == goal:\n        return [start]\n    queue = deque([start])\n    visited = {start}\n    parent: dict[str, str] = {}\n    while queue:\n        current = queue.popleft()\n        for neighbour in sorted(graph.get(current, [])):\n            if neighbour in visited:\n                continue\n            visited.add(neighbour)\n            parent[neighbour] = current\n            if neighbour == goal:\n                path = [goal]\n                while path[-1] != start:\n                    path.append(parent[path[-1]])\n                return list(reversed(path))\n            queue.append(neighbour)\n    return []\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-1 failed\"\nassert extract_realtime_model({\"input\": [\"a\", \"b\"], \"a\": [\"c\"], \"b\": [\"c\"], \"c\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"c\", \"output_realtime\"], \"Test-2 failed\"\nassert extract_realtime_model({\"input\": [\"a\", \"b\"], \"a\": [\"output_realtime\"], \"b\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-3 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"b\"], \"b\": [\"a\", \"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"b\", \"output_realtime\"], \"Test-4 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [], \"output_realtime\": []}) == [], \"Test-5 failed\"\nassert extract_realtime_model({\"a\": [\"output_realtime\"], \"output_realtime\": []}) == [], \"Test-6 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": []}) == [], \"Test-7 failed\"\nassert extract_realtime_model({\"input\": [\"b\", \"a\"], \"a\": [\"d\"], \"b\": [\"c\"], \"c\": [\"d\"], \"d\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"d\", \"output_realtime\"], \"Test-8 failed\"\nassert extract_realtime_model({\"input\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"output_realtime\"], \"Test-9 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"output_realtime\"], \"output_realtime\": [], \"junk1\": [\"junk2\"], \"junk2\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-10 failed\""}
{"task_id": 213, "completion_id": 0, "passed": false, "result": "failed: test failed: empty shape should return empty list", "solution": "import numpy as np\nimport numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with the He (Kaiming) Normal strategy.\n    \n    Args:\n        shape: Desired tensor shape.\n        \n    Returns:\n        Nested Python list of weights drawn from \ud835\udca9(0, \u221a(2 / fan_in)).\n    \"\"\"\n    dim = len(shape)\n    if dim == 0:\n        fan_in = fan_out = 1\n    elif dim == 1:\n        fan_in = fan_out = shape[0]\n    elif dim == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        (out_channels, in_channels) = (shape[0], shape[1])\n        receptive_field = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    if fan_in == 0:\n        return []\n    rng = np.random.default_rng(seed=42)\n    std = np.sqrt(2.0 / fan_in)\n    data = rng.normal(loc=0.0, scale=std, size=shape)\n    return data.tolist()\nassert tuple(len(row) for row in he_normal((2, 3))) == (3, 3), \"test failed: wrong shape for (2, 3)\"\nw1 = np.array(he_normal((100, 50))); fan_in_1 = 100; expected_std_1 = (2.0 / fan_in_1) ** 0.5; assert abs(w1.mean()) < 0.05 and abs(w1.std(ddof=0) - expected_std_1) < 0.05, \"test failed: stats check for (100, 50)\"\nw2 = np.array(he_normal((64, 3, 3, 3))); fan_in_2 = 3 * 3 * 3; expected_std_2 = (2.0 / fan_in_2) ** 0.5; assert abs(w2.mean()) < 0.05 and abs(w2.std(ddof=0) - expected_std_2) < 0.05, \"test failed: stats check for conv kernel\"\nassert he_normal(()) == [], \"test failed: empty shape should return empty list\"\nassert len(he_normal((1,))) == 1, \"test failed: shape (1,)\"\nw3 = np.array(he_normal((3, 2))); assert w3.shape == (3, 2), \"test failed: shape (3,2)\"\nw5 = np.array(he_normal((10, 10))); fan_in_5 = 10; assert abs(w5.mean()) < 0.1, \"test failed: mean too far from 0\"\nw6 = np.array(he_normal((10,))); fan_in_6 = 10; expected_std_6 = (2.0 / fan_in_6) ** 0.5; assert abs(w6.std(ddof=0) - expected_std_6) < 0.3, \"test failed: 1D tensor std\"\nassert isinstance(he_normal((2, 3)), list), \"test failed: output type must be list\""}
{"task_id": 214, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function returns -1 if the two input sequences do not share the same\n    shape/length. Otherwise, it returns the MSE rounded to 4 decimal places.\n    Both Python lists and NumPy arrays are supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    a = np.asarray(actual, dtype=float)\n    p = np.asarray(predicted, dtype=float)\n    if a.shape != p.shape:\n        return -1\n    mse = np.mean((a - p) ** 2)\n    return float(np.round(mse, 4))\nassert mean_squared_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed: identical lists should return 0.0\"\nassert mean_squared_error([1, 2, 3], [1, 2, 5]) == 1.3333, \"failed: mean_squared_error([1,2,3],[1,2,5])\"\nassert mean_squared_error(np.array([1, 2]), np.array([2, 3])) == 1.0, \"failed: numpy array input\"\nassert mean_squared_error([-1, -2, -3], [1, 2, 3]) == 18.6667, \"failed: negative values\"\nassert mean_squared_error([2.5, 0.0, 2.1], [3.0, -0.5, 2.0]) == 0.17, \"failed: float inputs\"\nassert mean_squared_error([7], [5]) == 4.0, \"failed: single element input\"\nassert mean_squared_error([1, 2], [1]) == -1, \"failed: unequal length should return -1\"\nassert mean_squared_error([100, 200], [110, 190]) == 100.0, \"failed: large numbers\"\nassert mean_squared_error(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0.0, \"failed: zeros input\"\nassert mean_squared_error([3, -3, 5, -5], [0, 0, 0, 0]) == 17.0, \"failed: mixed signs input\""}
{"task_id": 216, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic-Net linear regression trained with batch gradient descent.\"\"\"\n    try:\n        X_tr = np.asarray(x_train, dtype=float)\n        X_te = np.asarray(x_test, dtype=float)\n        y_tr = np.asarray(y_train, dtype=float).ravel()\n    except Exception:\n        return -1\n    if X_tr.ndim == 1:\n        X_tr = X_tr.reshape(-1, 1)\n    if X_te.ndim == 1:\n        X_te = X_te.reshape(-1, 1)\n    if X_tr.shape[1] != X_te.shape[1] or n_iterations < 1:\n        return -1\n\n    def poly_expansion(matrix, deg):\n        if deg <= 1:\n            return matrix.copy()\n        powers = [matrix ** p for p in range(1, deg + 1)]\n        return np.concatenate(powers, axis=1)\n    X_tr_poly = poly_expansion(X_tr, degree)\n    X_te_poly = poly_expansion(X_te, degree)\n    mu = X_tr_poly.mean(axis=0)\n    sigma = X_tr_poly.std(axis=0)\n    sigma[sigma == 0] = 1.0\n    X_tr_std = (X_tr_poly - mu) / sigma\n    X_te_std = (X_te_poly - mu) / sigma\n    X_tr_std = np.hstack((np.ones((X_tr_std.shape[0], 1)), X_tr_std))\n    X_te_std = np.hstack((np.ones((X_te_std.shape[0], 1)), X_te_std))\n    (n_samples, n_features) = X_tr_std.shape\n    w = np.zeros(n_features)\n    l2_factor = reg_factor * (1.0 - l1_ratio)\n    l1_factor = reg_factor * l1_ratio\n    for _ in range(int(n_iterations)):\n        y_hat = X_tr_std @ w\n        error = y_hat - y_tr\n        grad = X_tr_std.T @ error / n_samples\n        grad[1:] += l2_factor * w[1:]\n        grad[1:] += l1_factor * np.sign(w[1:])\n        w -= learning_rate * grad\n    y_pred = X_te_std @ w\n    return np.round(y_pred, 4).tolist()\nassert elastic_net_regression([[1],[2],[3],[4]],[2,4,6,8],[[5],[6]],1,0.0,0.5,5000,0.1)==[10.0,12.0],\"failed: simple linear case\"\nassert elastic_net_regression([[0],[1],[2],[3]],[1,3,5,7],[[4]],1,0.0,0.5,6000,0.05)==[9.0],\"failed: another linear case\"\nassert elastic_net_regression([[1,1],[2,1],[3,1]],[3,5,7],[[4,1]],1,0.0,0.0,6000,0.1)==[9.0],\"failed: multi-feature ridge (ratio 0)\"\nassert elastic_net_regression([[1],[2],[3]],[2,4,6],[[4]],1,0.0,0.5,0,0.1)==-1,\"failed: n_iterations validation\"\nassert elastic_net_regression([[1,2]], [3], [[1]], 1,0.0,0.5,10,0.1)==-1,\"failed: dimension mismatch\"\nassert len(elastic_net_regression([[1],[2],[3],[4]],[1,2,3,4],[[5],[6]],1,0.0,0.5,5000,0.1))==2,\"failed: output length\"\nassert all(isinstance(v,float) for v in elastic_net_regression([[1],[2]], [2,4], [[3]], 1, 0.0,0.5,4000,0.1)),\"failed: output contains non-float values\""}
{"task_id": 217, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    Args:\n        actual    : 1-D container (list/tuple/np.ndarray) with elements +1 or \u22121.\n        predicted : 1-D container (list/tuple/np.ndarray) with raw model scores.\n\n    Returns:\n        (grad_list, hess_list, prob_list) \u2013 three ordinary Python lists,\n        each value rounded to exactly 6 decimal places.\n    \"\"\"\n    y = np.asarray(actual, dtype=float)\n    z = np.asarray(predicted, dtype=float)\n    if y.shape != z.shape:\n        raise ValueError('`actual` and `predicted` must have the same length.')\n\n    def _sigmoid(x):\n        out = np.empty_like(x, dtype=float)\n        pos_mask = x >= 0\n        neg_mask = ~pos_mask\n        out[pos_mask] = 1.0 / (1.0 + np.exp(-x[pos_mask]))\n        exp_x = np.exp(x[neg_mask])\n        out[neg_mask] = exp_x / (1.0 + exp_x)\n        return out\n    prob = _sigmoid(z)\n    grad = y * _sigmoid(-y * z)\n    hess = prob * (1.0 - prob)\n    prob = np.round(prob, 6).tolist()\n    grad = np.round(grad, 6).tolist()\n    hess = np.round(hess, 6).tolist()\n    return (grad, hess, prob)\nassert logistic_components([1, -1], [0.5, -0.5]) == ([0.377541, -0.377541], [0.235004, 0.235004], [0.622459, 0.377541]), \"failed on ([1, -1], [0.5, -0.5])\"\nassert logistic_components([1, -1], [10, -10]) == ([0.000045, -0.000045], [0.000045, 0.000045], [0.999955, 0.000045]), \"failed on large magnitude scores\"\nassert logistic_components([1, 1, 1], [0, 0, 0]) == ([0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with positive labels\"\nassert logistic_components([-1, -1, -1], [0, 0, 0]) == ([-0.5, -0.5, -0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with negative labels\"\nassert logistic_components([1], [-2]) == ([0.880797], [0.104994], [0.119203]), \"failed on single sample (1, -2)\"\nassert logistic_components([-1], [2]) == ([-0.880797], [0.104994], [0.880797]), \"failed on single sample (-1, 2)\"\nassert logistic_components([1, -1, 1, -1], [1, 1, -1, -1]) == ([0.268941, -0.731059, 0.731059, -0.268941], [0.196612, 0.196612, 0.196612, 0.196612], [0.731059, 0.731059, 0.268941, 0.268941]), \"failed on mixed signs\"\nassert logistic_components([1], [0]) == ([0.5], [0.25], [0.5]), \"failed on ([1], [0])\"\nassert logistic_components([1, -1], [5, -5]) == ([0.006693, -0.006693], [0.006648, 0.006648], [0.993307, 0.006693]), \"failed on moderate magnitude scores\"\nassert logistic_components([-1], [3]) == ([-0.952574], [0.045177], [0.952574]), \"failed on (-1, 3)\""}
{"task_id": 218, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand: list[int]) -> int:\n        \"\"\"Return the best score (\u226421 if possible) for this hand.\"\"\"\n        s = sum(hand)\n        if 1 in hand and s + 10 <= 21:\n            return s + 10\n        return s\n\n    def is_bust(hand: list[int]) -> bool:\n        \"\"\"True if the hand is bust (>21).\"\"\"\n        return hand_score(hand) > 21\n\n    def is_natural(hand: list[int]) -> bool:\n        \"\"\"True if the hand is a natural blackjack (exactly two cards: Ace + 10).\"\"\"\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    player_natural = is_natural(player)\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.5 if player_natural else 1.0\n    if player_score > dealer_score:\n        return 1.5 if player_natural else 1.0\n    if player_score < dealer_score:\n        return -1.0\n    return 0.0\nassert blackjack_outcome([1,10],[10,7]) == 1.5, \"Failed on natural blackjack win [1,10] vs [10,7]\"\nassert blackjack_outcome([1,10],[1,10]) == 0.0, \"Failed on natural blackjack draw [1,10] vs [1,10]\"\nassert blackjack_outcome([10,6],[9,7]) == 0.0, \"Failed on simple draw 16 vs 16\"\nassert blackjack_outcome([10,6],[9,8]) == -1.0, \"Failed on player loses 16 vs 17\"\nassert blackjack_outcome([10,5,9],[10,6]) == -1.0, \"Failed on player bust 24 vs 16\"\nassert blackjack_outcome([10,7],[10,6,9]) == 1.0, \"Failed on dealer bust 17 vs 25\"\nassert blackjack_outcome([1,7,3],[10,10]) == 1.0, \"Failed on soft 21 win\"\nassert blackjack_outcome([1,5,5,10],[10,9,2]) == 0.0, \"Failed on 21 draw\"\nassert blackjack_outcome([10,2],[10,10,5]) == 1.0, \"Failed on dealer bust scenario\"\nassert blackjack_outcome([9,9,9],[1,9]) == -1.0, \"Failed on large bust 27 vs 20\""}
{"task_id": 220, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) \n    distributions for an LDA model with symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix  (V \u00d7 T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix (D \u00d7 T).\n    alpha : float\n        Symmetric Dirichlet prior for theta.\n    beta  : float\n        Symmetric Dirichlet prior for phi.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        (phi, theta) \u2013 both rounded to 4 decimals and given \n        as ordinary Python nested lists.  If a count matrix is\n        empty, the corresponding output is an empty list.\n    \"\"\"\n    C_wt = np.asarray(C_wt)\n    C_dt = np.asarray(C_dt)\n    if C_wt.size == 0:\n        phi = []\n    else:\n        (V, T) = C_wt.shape\n        topic_totals = C_wt.sum(axis=0) + V * beta\n        phi_mat = (C_wt + beta) / topic_totals\n        phi = np.round(phi_mat, 4).tolist()\n    if C_dt.size == 0:\n        theta = []\n    else:\n        (D, T_) = C_dt.shape\n        doc_totals = C_dt.sum(axis=1, keepdims=True) + T_ * alpha\n        theta_mat = (C_dt + alpha) / doc_totals\n        theta = np.round(theta_mat, 4).tolist()\n    return (phi, theta)\nassert estimate_lda_params(np.array([[2, 1], [3, 4], [5, 0]]), np.array([[3, 2], [1, 4]]), 0.1, 0.5) == ([[0.2174, 0.2308], [0.3043, 0.6923], [0.4783, 0.0769]], [[0.5962, 0.4038], [0.2115, 0.7885]]), \"test case failed: asymmetric example\"\nassert estimate_lda_params(np.zeros((2,2)), np.zeros((1,2)), 1, 1) == ([[0.5,0.5],[0.5,0.5]], [[0.5,0.5]]), \"test case failed: all zero counts\"\nassert estimate_lda_params(np.array([[3],[7]]), np.array([[10],[0]]), 0.1, 0.1) == ([[0.3039],[0.6961]], [[1.0],[1.0]]), \"test case failed: single topic\"\nassert estimate_lda_params(np.ones((2,2)), 2*np.ones((2,2)), 0.1, 0.1) == ([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]]), \"test case failed: symmetric counts\"\nassert estimate_lda_params(2*np.ones((3,3)), 3*np.ones((1,3)), 0.5, 0.5) == ([[0.3333,0.3333,0.3333],[0.3333,0.3333,0.3333],[0.3333,0.3333,0.3333]], [[0.3333,0.3333,0.3333]]), \"test case failed: three topics uniform\"\nassert estimate_lda_params(np.array([[4,0],[1,3]]), np.array([[2,1],[0,3]]), 0.2, 0.2) == ([[0.7778,0.0588],[0.2222,0.9412]], [[0.6471,0.3529],[0.0588,0.9412]]), \"test case failed: skewed word counts\"\nassert estimate_lda_params(np.array([[0,1],[2,3],[4,5]]), np.array([[6,9]]), 1.0, 1.0) == ([[0.1111,0.1667],[0.3333,0.3333],[0.5556,0.5]], [[0.4118,0.5882]]), \"test case failed: single document varying topics\"\nassert estimate_lda_params(np.array([[10,0],[0,10]]), np.array([[4,6],[7,3]]), 10, 10) == ([[0.6667,0.3333],[0.3333,0.6667]], [[0.4667,0.5333],[0.5667,0.4333]]), \"test case failed: large priors\"\nassert estimate_lda_params(np.array([[5,2,0]]), np.array([[1,2,3],[4,5,6]]), 0.3, 0.3) == ([[1.0,1.0,1.0]], [[0.1884,0.3333,0.4783],[0.2704,0.3333,0.3962]]), \"test case failed: single vocabulary word\"\nassert estimate_lda_params(np.zeros((2,4)), np.zeros((1,4)), 0.5, 0.5) == ([[0.5,0.5,0.5,0.5],[0.5,0.5,0.5,0.5]], [[0.25,0.25,0.25,0.25]]), \"test case failed: four topics zero counts\""}
{"task_id": 221, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Element-wise squared logarithmic error.\n\n    Parameters\n    ----------\n    actual, predicted : np.ndarray\n        Arrays of the same shape containing non-negative numbers.\n\n    Returns\n    -------\n    np.ndarray\n        (log1p(actual) - log1p(predicted))**2 computed element-wise.\n    \"\"\"\n    return np.square(np.log1p(actual) - np.log1p(predicted))\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        True target values (must be non-negative).\n    predicted : list | tuple | np.ndarray\n        Predicted values (must be non-negative and same shape as `actual`).\n\n    Returns\n    -------\n    float\n        MSLE rounded to 4 decimal places, or -1 if the inputs are invalid.\n    \"\"\"\n    try:\n        actual_arr = np.asarray(actual, dtype=float)\n        pred_arr = np.asarray(predicted, dtype=float)\n    except Exception:\n        return -1\n    if actual_arr.shape != pred_arr.shape:\n        return -1\n    if actual_arr.size == 0:\n        return -1\n    if np.isnan(actual_arr).any() or np.isnan(pred_arr).any():\n        return -1\n    if np.any(actual_arr < 0) or np.any(pred_arr < 0):\n        return -1\n    sq_log_err = squared_log_error(actual_arr, pred_arr)\n    msle = float(np.mean(sq_log_err))\n    return round(msle, 4)\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function works for scalar numbers, Python lists and NumPy arrays and\n    remains numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: If `z` is a scalar, the sigmoid value rounded to 4\n        decimals (float).  Otherwise, a Python list with the same nested\n        structure where every element is rounded to 4 decimals.\n    \"\"\"\n    if np.isscalar(z):\n        z = float(z)\n        if z >= 0:\n            val = 1.0 / (1.0 + np.exp(-z))\n        else:\n            exp_z = np.exp(z)\n            val = exp_z / (1.0 + exp_z)\n        return round(val, 4)\n    arr = np.asarray(z, dtype=float)\n    out = np.empty_like(arr)\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n    out[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    exp_vals = np.exp(arr[neg_mask])\n    out[neg_mask] = exp_vals / (1.0 + exp_vals)\n    return np.round(out, 4).tolist()\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky-ReLU activation to every element in *z*.\n\n    Args:\n        z:  A scalar, (nested) list or ``numpy.ndarray`` of numbers.\n        a:  Slope used for the negative part, a float in the half-open\n            interval [0, 1).  Defaults to 0.01.\n\n    Returns\n    -------\n    Same \u201cshape\u201d as *z* but converted to plain Python objects\n    (i.e. lists / scalars).  For array or list inputs the function\n    returns a (possibly nested) list; for a scalar input it returns a\n    scalar.\n    \"\"\"\n    if not 0.0 <= a < 1.0:\n        raise ValueError(\"Parameter 'a' must lie in the interval [0, 1).\")\n    arr = np.asarray(z)\n    activated = np.where(arr >= 0, arr, a * arr)\n    return activated.tolist()\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 225, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use:\n        \u2022 \"htk\"    \u2013 2595 * log10(1 + hz / 700)\n        \u2022 \"slaney\" \u2013 1127 * ln   (1 + hz / 700)\n        Default is \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n\n    Raises\n    ------\n    AssertionError\n        If *formula* is not \"htk\" or \"slaney\".\n    \"\"\"\n    assert formula in {'htk', 'slaney'}, \"formula must be either 'htk' or 'slaney'\"\n    hz_arr = np.asarray(hz, dtype=float)\n    if formula == 'htk':\n        mel = 2595.0 * np.log10(1.0 + hz_arr / 700.0)\n    else:\n        mel = 1127.0 * np.log(1.0 + hz_arr / 700.0)\n    return np.round(mel, 4).tolist()\nassert hz2mel(np.array([0.0]), \"htk\") == [0.0], \"failed: hz2mel([0], 'htk')\"\nassert hz2mel([6300], \"htk\") == [2595.0], \"failed: hz2mel([6300], 'htk')\"\nassert hz2mel([69300], \"htk\") == [5190.0], \"failed: hz2mel([69300], 'htk')\"\nassert hz2mel([0.0, 6300, 69300], \"htk\") == [0.0, 2595.0, 5190.0], \"failed: hz2mel([...], 'htk')\"\nassert hz2mel(np.array([0.0]), \"slaney\") == [0.0], \"failed: hz2mel([0], 'slaney')\"\nassert hz2mel([1202.7972799213314], \"slaney\") == [1127.0], \"failed: hz2mel([1202.7972799], 'slaney')\"\nassert hz2mel([4472.339268], \"slaney\") == [2254.0], \"failed: hz2mel([4472.339268], 'slaney')\"\nassert hz2mel([0.0, 1202.7972799213314, 4472.339268], \"slaney\") == [0.0, 1127.0, 2254.0], \"failed: hz2mel([...], 'slaney')\"\nassert hz2mel([[0, 6300],[6300, 0]], \"htk\") == [[0.0, 2595.0],[2595.0, 0.0]], \"failed: hz2mel(2D, 'htk')\"\nassert hz2mel([[0, 1202.7972799213314],[4472.339268, 0]], \"slaney\") == [[0.0, 1127.0],[2254.0, 0.0]], \"failed: hz2mel(2D, 'slaney')\""}
{"task_id": 226, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef _stump_predict(column: np.ndarray, threshold: float, polarity: int) -> np.ndarray:\n    \"\"\"\n    Helper \u2013 returns the predictions of one decision stump for a single feature column.\n    \"\"\"\n    if polarity == 1:\n        return np.where(column < threshold, -1, 1)\n    else:\n        return np.where(column < threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1.0 / n_samples)\n    ensemble: list[tuple[int, float, int, float]] = []\n    for _ in range(n_clf):\n        best_feat = 0\n        best_thresh = 0.0\n        best_polarity = 1\n        best_error = float('inf')\n        best_pred_train = None\n        for feat_idx in range(n_features):\n            col = X_train[:, feat_idx]\n            thresholds = np.unique(col)\n            for thr in thresholds:\n                pred = _stump_predict(col, thr, 1)\n                err = np.sum(w[pred != y_train])\n                if err < best_error:\n                    (best_error, best_feat, best_thresh, best_polarity) = (err, feat_idx, thr, 1)\n                    best_pred_train = pred\n                pred = _stump_predict(col, thr, -1)\n                err = np.sum(w[pred != y_train])\n                if err < best_error:\n                    (best_error, best_feat, best_thresh, best_polarity) = (err, feat_idx, thr, -1)\n                    best_pred_train = pred\n        eps = 1e-10\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + eps))\n        w *= np.exp(-alpha * y_train * best_pred_train)\n        w /= np.sum(w)\n        ensemble.append((best_feat, best_thresh, best_polarity, alpha))\n    agg = np.zeros(X_test.shape[0])\n    for (feat_idx, thr, pol, alpha) in ensemble:\n        preds = _stump_predict(X_test[:, feat_idx], thr, pol)\n        agg += alpha * preds\n    final_preds = np.sign(agg)\n    final_preds[final_preds == 0] = 1\n    return final_preds.astype(int).tolist()\nassert adaboost_predict(np.array([[0, 1], [1, 1], [1, 0], [0, 0]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [0, 1]]), 3) == [-1, 1], \"Test-1 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4], [5]]), np.array([-1, -1, 1, 1, 1]), np.array([[2], [4]]), 5) == [-1, 1], \"Test-2 failed\"\nassert adaboost_predict(np.array([[2, 9], [3, 8], [1, 10], [5, 2], [6, 3], [4, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 9], [6, 2]]), 4) == [1, -1], \"Test-3 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4]]), np.array([1, 1, -1, -1]), np.array([[1], [4]]), 3) == [1, -1], \"Test-4 failed\"\nassert adaboost_predict(np.array([[0], [1], [2], [3], [4], [5]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[0], [5]]), 6) == [-1, 1], \"Test-5 failed\"\nassert adaboost_predict(np.array([[1, 2], [1, 3], [1, 4], [10, 1], [10, 2], [10, 3]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[1, 3], [10, 1]]), 5) == [-1, 1], \"Test-6 failed\"\nassert adaboost_predict(np.array([[0.1], [0.4], [0.5], [0.6], [0.9]]), np.array([-1, -1, 1, 1, 1]), np.array([[0.2], [0.8]]), 4) == [-1, 1], \"Test-7 failed\"\nassert adaboost_predict(np.array([[2], [4], [6], [8], [10], [12]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[3], [11]]), 6) == [-1, 1], \"Test-8 failed\"\nassert adaboost_predict(np.array([[1, 5], [2, 5], [3, 5], [4, 1], [5, 1], [6, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 5], [5, 1]]), 5) == [1, -1], \"Test-9 failed\"\nassert adaboost_predict(np.array([[0], [1]]), np.array([-1, 1]), np.array([[0], [1]]), 1) == [-1, 1], \"Test-10 failed\""}
{"task_id": 227, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)", "solution": "import numpy as np\nimport numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\"\"\"\n    try:\n        s = np.asarray(state, dtype=float)\n        W1 = np.asarray(W1, dtype=float)\n        W2 = np.asarray(W2, dtype=float)\n        W3 = np.asarray(W3, dtype=float)\n    except Exception:\n        return -1\n    if s.ndim != 1:\n        return -1\n    N = s.shape[0]\n    if W1.ndim != 2 or W1.shape[0] != N:\n        return -1\n    H1 = W1.shape[1]\n    if W2.ndim != 2 or W2.shape[0] != H1:\n        return -1\n    H2 = W2.shape[1]\n    if W3.ndim == 2 and W3.shape != (H2, 1):\n        return -1\n    elif W3.ndim == 1 and W3.shape[0] != H2:\n        return -1\n    elif W3.ndim not in (1, 2):\n        return -1\n    h1 = np.tanh(s @ W1)\n    h2 = np.tanh(h1 @ W2)\n    v = float(h2 @ W3.squeeze())\n    return round(v, 4)\nassert value_network_forward([0.0, 0.0, 0.0], [[3,1], [2,2], [1,3]], [[5],[4]], [[7.0]]) == 0.0, \"test case 2 failed\"\nassert value_network_forward([3,4], [[0,0,0],[0,0,0]], [[1,2,3],[1,2,3],[1,2,3]], [[1],[1],[1]]) == 0.0, \"test case 3 failed\"\nassert value_network_forward([2], [[2]], [[0]], [[5]]) == 0.0, \"test case 4 failed\"\nassert value_network_forward([2], [[2]], [[2]], [[0]]) == 0.0, \"test case 5 failed\"\nassert value_network_forward([1,0], [[-1],[ -1]], [[-1]], [[-1]]) == -0.642, \"test case 6 failed\"\nassert value_network_forward([1,2], [[1]], [[1]], [[1]]) == -1, \"test case 7 failed (shape mismatch)\"\nassert value_network_forward([1], [[1]], [[1]], [[1,1]]) == -1, \"test case 8 failed (shape mismatch)\"\nassert value_network_forward([0.5], [[2]], [[1]], [[1]]) == 0.642, \"test case 10 failed\""}
{"task_id": 228, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the pair-wise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If ``Y`` is None the distances inside X itself are computed instead.\n    The distances are rounded to four decimal places and returned as a\n    pure Python nested list.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Array of shape (N, C).\n    Y : np.ndarray | None, optional\n        Array of shape (M, C).  If None, Y is taken to be X.\n\n    Returns\n    -------\n    list[list[float]]\n        The (N \u00d7 M) matrix of pair-wise Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    if X.ndim != 2 or Y.ndim != 2:\n        raise ValueError('X and Y must be 2-D arrays.')\n    if X.shape[1] != Y.shape[1]:\n        raise ValueError('X and Y must have the same number of columns (features).')\n    x2 = np.sum(X ** 2, axis=1, keepdims=True)\n    y2 = np.sum(Y ** 2, axis=1, keepdims=True).T\n    d2 = x2 + y2 - 2.0 * X @ Y.T\n    d2 = np.maximum(d2, 0.0)\n    D = np.sqrt(d2)\n    return np.round(D, 4).tolist()\nassert pairwise_l2_distances(np.array([[0, 0], [1, 0]]), np.array([[1, 0], [2, 0], [0, 0]])) == [[1.0, 2.0, 0.0], [0.0, 1.0, 1.0]], \"failed on X1, Y1\"\nassert pairwise_l2_distances(np.array([[0, 0]]), np.array([[0, 0]])) == [[0.0]], \"failed on zero-distance case\"\nassert pairwise_l2_distances(np.array([[0, 0], [3, 4], [6, 8]])) == [[0.0, 5.0, 10.0], [5.0, 0.0, 5.0], [10.0, 5.0, 0.0]], \"failed when Y is None\"\nassert pairwise_l2_distances(np.array([[1, 2, 3], [4, 5, 6]]), np.array([[7, 8, 9]])) == [[10.3923], [5.1962]], \"failed on 3-D vectors\"\nassert pairwise_l2_distances(np.array([[1, 2]])) == [[0.0]], \"failed on single vector (Y None)\"\nassert pairwise_l2_distances(np.ones((1, 100)), np.zeros((1, 100))) == [[10.0]], \"failed on 100-D vectors\"\nassert pairwise_l2_distances(np.array([[-1, -1]]), np.array([[1, 1]])) == [[2.8284]], \"failed on negative coordinates\"\nassert pairwise_l2_distances(np.array([[0, 1], [1, 1]]), np.array([[1, 0]])) == [[1.4142], [1.0]], \"failed on mixed distances\"\nassert pairwise_l2_distances(np.array([[1, 2], [2, 1], [3, 3]])) == [[0.0, 1.4142, 2.2361], [1.4142, 0.0, 2.2361], [2.2361, 2.2361, 0.0]], \"failed on 3\u00d73 symmetry\"\nassert pairwise_l2_distances(np.array([[2]]), np.array([[5]])) == [[3.0]], \"failed on 1-D feature space\""}
{"task_id": 230, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Gaussian Naive Bayes classifier (binary) implemented from scratch.\n\n    Parameters\n    ----------\n    X_train : ndarray, shape (n_samples, n_features)\n    y_train : ndarray, shape (n_samples,)       \u2013 labels 0 / 1\n    X_test  : ndarray, shape (m_samples, n_features)\n\n    Returns\n    -------\n    list[int]  \u2013 predicted labels for X_test\n    \"\"\"\n    eps = 1e-09\n    classes = np.array([0, 1])\n    n_features = X_train.shape[1]\n    means = np.zeros((2, n_features))\n    variances = np.zeros((2, n_features))\n    priors = np.zeros(2)\n    n_samples = len(y_train)\n    for (idx, c) in enumerate(classes):\n        X_c = X_train[y_train == c]\n        if X_c.size == 0:\n            means[idx] = 0.0\n            variances[idx] = 1.0\n            priors[idx] = eps\n            continue\n        means[idx] = X_c.mean(axis=0)\n        variances[idx] = X_c.var(axis=0) + eps\n        priors[idx] = X_c.shape[0] / n_samples\n    priors[priors == 0] = eps\n    diff = X_test[:, None, :] - means[None, :, :]\n    log_likelihood = -0.5 * (np.log(2.0 * np.pi * variances)[None, :, :] + diff ** 2 / variances[None, :, :])\n    log_posteriors = np.sum(log_likelihood, axis=2) + np.log(priors)[None, :]\n    predictions = np.argmax(log_posteriors, axis=1)\n    return predictions.tolist()\nassert gaussian_naive_bayes(np.array([[1.0,2.1],[1.5,1.8],[5.0,8.0],[6.0,8.5]]),np.array([0,0,1,1]),np.array([[1.2,2.0],[5.5,8.2]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.0,2.1],...])\"\nassert gaussian_naive_bayes(np.array([[1.0],[1.2],[0.8],[4.0],[5.0],[6.0]]),np.array([0,0,0,1,1,1]),np.array([[1.1],[5.5]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.0],[1.2],...])\"\nassert gaussian_naive_bayes(np.array([[1.,2.],[1.2,1.9],[3.,3.2],[3.1,2.9]]),np.array([0,0,1,1]),np.array([[1.1,1.95],[3.,3.]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.,2.],...])\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,0.],[1.,1.],[1.,1.]]),np.array([0,0,1,1]),np.array([[0.,0.],[1.,1.]]))==[0,1],\"test case failed: gaussian_naive_bayes([[0.,0.],...])\"\nassert gaussian_naive_bayes(np.array([[1.,1.,1.],[1.1,0.9,1.2],[5.,5.,5.],[4.9,5.1,5.2]]),np.array([0,0,1,1]),np.array([[1.,1.,1.],[5.,5.,5.]]))==[0,1],\"test case failed: gaussian_naive_bayes(3D case)\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,1.],[5.,5.],[6.,6.],[7.,7.]]),np.array([0,0,1,1,1]),np.array([[0.,0.],[6.5,6.5]]))==[0,1],\"test case failed: priors test\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,1.],[4.,4.],[4.,5.]]),np.array([0,0,1,1]),np.array([[0.,0.5],[4.,4.5]]))==[0,1],\"test case failed: separation by x coordinate\"\nassert gaussian_naive_bayes(np.array([[-6.],[-5.],[-4.],[4.],[5.],[6.]]),np.array([0,0,0,1,1,1]),np.array([[-4.5],[5.5]]))==[0,1],\"test case failed: negative vs positive\"\nassert gaussian_naive_bayes(np.array([[10.],[9.5],[10.5],[0.],[-0.5],[1.]]),np.array([0,0,0,1,1,1]),np.array([[10.],[0.]]))==[0,1],\"test case failed: reversed ordering\"\nassert gaussian_naive_bayes(np.array([[2.,2.],[2.,2.],[9.,9.],[9.,9.]]),np.array([0,0,1,1]),np.array([[2.,2.],[9.,9.]]))==[0,1],\"test case failed: second constant-feature example\""}
{"task_id": 231, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"\n    Determine whether a given two-card blackjack hand is a natural (blackjack).\n\n    A natural hand must satisfy BOTH conditions:\n        1. It contains exactly two cards.\n        2. Those two cards consist of one Ace (encoded as 1) and one ten-valued card\n           (10, J, Q, or K \u2013 all encoded as 10).\n\n    Parameters\n    ----------\n    hand : list[int]\n        A list with the numerical ranks of the cards (Ace \u2192 1, 10/J/Q/K \u2192 10).\n\n    Returns\n    -------\n    bool\n        True  \u2013 if `hand` is exactly [1, 10] in any order.\n        False \u2013 for every other combination/length.\n    \"\"\"\n    return len(hand) == 2 and set(hand) == {1, 10}\nassert is_natural([1, 10]) is True, \"failed on: [1, 10]\"\nassert is_natural([10, 1]) is True, \"failed on: [10, 1]\"\nassert is_natural([1, 5]) is False, \"failed on: [1, 5]\"\nassert is_natural([10, 10]) is False, \"failed on: [10, 10]\"\nassert is_natural([1, 1]) is False, \"failed on: [1, 1]\"\nassert is_natural([5, 10]) is False, \"failed on: [5, 10]\"\nassert is_natural([1, 9]) is False, \"failed on: [1, 9]\"\nassert is_natural([7, 1]) is False, \"failed on: [7, 1]\"\nassert is_natural([10, 11]) is False, \"failed on: [10, 11] (11 is not allowed, no Ace)\"\nassert is_natural([1, 10, 5]) is False, \"failed on: [1, 10, 5] (more than two cards)\""}
{"task_id": 232, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if not isinstance(x, np.ndarray) or x.ndim != 2:\n        return False\n    if x.shape[0] == 0 or x.shape[1] == 0:\n        return False\n    if not np.isin(x, (0, 1)).all():\n        return False\n    if not (x.sum(axis=1) == 1).all():\n        return False\n    return True\nassert is_one_hot(np.array([[1, 0, 0], [0, 1, 0]])) == True, \"failed: basic valid matrix\"\nassert is_one_hot(np.array([[0, 1], [1, 0], [0, 1]])) == True, \"failed: rectangular valid matrix\"\nassert is_one_hot(np.array([[0, 1], [1, 1]])) == False, \"failed: row with two ones\"\nassert is_one_hot(np.array([[0, 2], [1, 0]])) == False, \"failed: value other than 0/1 present\"\nassert is_one_hot(np.array([[0, 0, 0], [0, 1, 0]])) == False, \"failed: row with no ones\"\nassert is_one_hot(np.array([1, 0, 0])) == False, \"failed: not a 2-D array\"\nassert is_one_hot(np.array([[True, False], [False, True]])) == True, \"failed: boolean dtype matrix\"\nassert is_one_hot(np.array([[False, False], [False, True]])) == False, \"failed: boolean matrix with invalid row\"\nassert is_one_hot(np.eye(5)) == True, \"failed: identity matrix\"\nassert is_one_hot(np.array([[0, 0], [0, 0]])) == False, \"failed: all zeros matrix\""}
{"task_id": 234, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\"\"\"\n    if not isinstance(successes, (list, tuple)) or not isinstance(failures, (list, tuple)) or len(successes) == 0 or (len(successes) != len(failures)):\n        return -1\n    try:\n        succ_arr = np.asarray(successes, dtype=float)\n        fail_arr = np.asarray(failures, dtype=float)\n    except Exception:\n        return -1\n    if (succ_arr < 0).any() or (fail_arr < 0).any():\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    alpha = prior_alpha + succ_arr\n    beta = prior_beta + fail_arr\n    samples = np.random.beta(alpha, beta)\n    chosen_arm = int(np.argmax(samples))\n    return chosen_arm\nassert thompson_sampling_beta_binomial([10,0],[0,10],seed=42)==0, \"test case failed: ([10,0],[0,10],seed=42)\"\nassert thompson_sampling_beta_binomial([0,10],[10,0],seed=42)==1, \"test case failed: ([0,10],[10,0],seed=42)\"\nassert thompson_sampling_beta_binomial([100,0,50],[0,100,30])==0, \"test case failed: ([100,0,50],[0,100,30])\"\nassert thompson_sampling_beta_binomial([5],[3])==0, \"test case failed: single arm ([5],[3])\"\nassert thompson_sampling_beta_binomial([],[])==-1, \"test case failed: empty input\"\nassert thompson_sampling_beta_binomial([1,2,3],[3,2,1],seed=7)==2, \"test case failed: ([1,2,3],[3,2,1],seed=7)\"\nassert thompson_sampling_beta_binomial([20,5],[5,20])==0, \"test case failed: ([20,5],[5,20])\"\nassert thompson_sampling_beta_binomial([0,1,0,1],[1,0,1,0],seed=123)==3, \"test case failed: ([0,1,0,1],[1,0,1,0],seed=123)\"\n"}
{"task_id": 235, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as ``labels.max() + 1``.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError('`labels` must be a 1-D array.')\n    if not np.issubdtype(labels.dtype, np.integer):\n        raise ValueError('`labels` must contain integer values.')\n    if labels.size == 0:\n        if n_classes is None:\n            raise ValueError('Cannot infer number of classes from an empty array.')\n        return np.zeros((0, n_classes), dtype=float)\n    max_label = int(labels.max())\n    if max_label < 0:\n        raise ValueError('Negative class labels are not allowed.')\n    if n_classes is None:\n        C = max_label + 1\n    else:\n        if n_classes < max_label + 1:\n            raise ValueError('`n_classes` ({}) is smaller than max label + 1 ({}).'.format(n_classes, max_label + 1))\n        C = int(n_classes)\n    N = labels.shape[0]\n    one_hot = np.zeros((N, C), dtype=float)\n    one_hot[np.arange(N), labels] = 1.0\n    return one_hot\nassert to_one_hot(np.array([0, 1, 2])).tolist() == [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], \"Test case 1 failed: labels=[0,1,2]\"\nassert to_one_hot(np.array([2, 0, 1]), 4).tolist() == [[0.0, 0.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0]], \"Test case 2 failed: labels=[2,0,1], n_classes=4\"\nassert to_one_hot(np.array([1, 1, 1, 1])).tolist() == [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]], \"Test case 3 failed: repeated label 1\"\nassert to_one_hot(np.array([3, 2])).tolist() == [[0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0]], \"Test case 4 failed: labels=[3,2]\"\nassert to_one_hot(np.array([0]), 1).tolist() == [[1.0]], \"Test case 5 failed: single label 0 with n_classes=1\"\nassert to_one_hot(np.array([0]), 3).tolist() == [[1.0, 0.0, 0.0]], \"Test case 6 failed: single label 0 with n_classes=3\"\nassert to_one_hot(np.array([2, 2, 0]), 3).tolist() == [[0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]], \"Test case 7 failed: labels=[2,2,0]\"\nassert to_one_hot(np.array([4, 1, 3]), 6).tolist() == [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 8 failed: labels=[4,1,3], n_classes=6\"\nassert to_one_hot(np.array([5]), 8).tolist() == [[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 9 failed: labels=[5], n_classes=8\"\nassert to_one_hot(np.array([1, 0, 4, 2]), 5).tolist() == [[0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 10 failed: mixed labels with n_classes=5\""}
{"task_id": 236, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    if batchsize <= 0:\n        raise ValueError('`batchsize` must be a positive integer.')\n    if X.ndim == 0:\n        raise ValueError('`X` must have at least one dimension (samples).')\n    N = int(X.shape[0])\n    n_batches = (N + batchsize - 1) // batchsize\n    indices = np.arange(N, dtype=np.int64)\n    if shuffle:\n        np.random.shuffle(indices)\n\n    def _generator():\n        for start in range(0, N, batchsize):\n            yield indices[start:start + batchsize]\n    return (_generator(), n_batches)\n# 1  --- basic sequential batching\\nX = np.arange(10).reshape(10, 1)\\ngen, n = minibatch(X, batchsize=4, shuffle=False)\\nassert n == 3, \"failed: n_batches should be 3 for 10 samples and batchsize 4\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3],[4,5,6,7],[8,9]], \"failed: wrong indices for sequential batching\"\n# 2 --- full batch (batchsize == N)\\nX = np.arange(7).reshape(7,1)\\ngen, n = minibatch(X, batchsize=7, shuffle=False)\\nassert n == 1, \"failed: there should be 1 batch\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3,4,5,6]], \"failed: indices do not cover full data set\"\n# 3 --- batchsize larger than N\\nX = np.arange(5).reshape(5,1)\\ngen, n = minibatch(X, batchsize=8, shuffle=False)\\nassert n == 1, \"failed: ceil(5/8) == 1\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3,4]], \"failed: should return all indices in single batch\"\n# 4 --- batchsize = 1 (all singles)\\nX = np.arange(4).reshape(4,1)\\ngen, n = minibatch(X, batchsize=1, shuffle=False)\\nassert n == 4, \"failed: there should be 4 single-element batches\"\\nassert [int(b) for b in gen] == [0,1,2,3], \"failed: sequential single indices incorrect\"\n# 5 --- uneven last batch\\nX = np.arange(9).reshape(9,1)\\ngen, n = minibatch(X, batchsize=4, shuffle=False)\\nassert n == 3, \"failed: ceil(9/4) == 3\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3],[4,5,6,7],[8]], \"failed: last batch should contain index 8 only\"\n# 6 --- empty data set\\nX = np.empty((0,2))\\ngen, n = minibatch(X, batchsize=3, shuffle=False)\\nassert n == 0, \"failed: zero samples must give zero batches\"\\nassert list(gen) == [], \"failed: generator should yield nothing for empty data set\"\n# 7 --- reproducible shuffle\\nnp.random.seed(123)\\nX = np.arange(10).reshape(10,1)\\ngen, n = minibatch(X, batchsize=3, shuffle=True)\\nshuffled = np.concatenate(list(gen))\\nnp.random.seed(123)\\nexpected = np.arange(10)\\nnp.random.shuffle(expected)\\nassert np.array_equal(shuffled, expected), \"failed: shuffle does not match NumPy's shuffle with same seed\"\n# 8 --- shuffled batches preserve sizes\\nnp.random.seed(0)\\nX = np.arange(12).reshape(12,1)\\ngen, n = minibatch(X, batchsize=5, shuffle=True)\\nlengths = [len(b) for b in gen]\\nassert lengths == [5,5,2], \"failed: batch sizes after shuffle should be 5,5,2\"\n# 9 --- generator is single-pass\\nX = np.arange(6).reshape(6,1)\\ngen, _ = minibatch(X, batchsize=2, shuffle=False)\\n_ = list(gen)\\nassert list(gen) == [], \"failed: generator should be exhausted after first iteration\"\n# 10 --- large dataset quick check\\nX = np.arange(1000).reshape(1000,1)\\nbs = 128\\n_, n = minibatch(X, batchsize=bs, shuffle=False)\\nassert n == int(np.ceil(1000/bs)), \"failed: incorrect number of batches for large data set\""}
{"task_id": 237, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    total = 0\n    aces = 0\n    for card in hand:\n        if card == 'A':\n            aces += 1\n            total += 11\n        elif card in {'J', 'Q', 'K'}:\n            total += 10\n        else:\n            total += int(card)\n    while total > 21 and aces:\n        total -= 10\n        aces -= 1\n    return total if total <= 21 else 0\nassert score(['A','K']) == 21, \"Test case 1 failed: ['A','K']\"\nassert score(['10','8','5']) == 0, \"Test case 2 failed: ['10','8','5']\"\nassert score(['A','9','A']) == 21, \"Test case 3 failed: ['A','9','A']\"\nassert score(['5','3','7','6']) == 21, \"Test case 4 failed: ['5','3','7','6']\"\nassert score(['J','Q']) == 20, \"Test case 5 failed: ['J','Q']\"\nassert score(['A','A','9']) == 21, \"Test case 6 failed: ['A','A','9']\"\nassert score(['A','A','A','7']) == 20, \"Test case 7 failed: ['A','A','A','7']\"\nassert score(['2','3','4','5','6']) == 20, \"Test case 8 failed: ['2','3','4','5','6']\"\nassert score(['K','Q','2']) == 0, \"Test case 9 failed: ['K','Q','2']\"\nassert score(['A']) == 11, \"Test case 10 failed: ['A']\""}
{"task_id": 239, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nfrom typing import Tuple\ndef determine_padding(filter_shape: Tuple[int, int], output_shape: str='same') -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution\n    with stride 1.\n\n    Parameters\n    ----------\n    filter_shape : (int, int)\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : {\"same\", \"valid\"}, default=\"same\"\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input.\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    ((int, int), (int, int))\n        ((pad_top, pad_bottom), (pad_left, pad_right))\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    if output_shape == 'same':\n        (fh, fw) = filter_shape\n        total_pad_h = fh - 1\n        total_pad_w = fw - 1\n        pad_top = total_pad_h // 2\n        pad_bottom = total_pad_h - pad_top\n        pad_left = total_pad_w // 2\n        pad_right = total_pad_w - pad_left\n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n    raise ValueError(\"output_shape must be either 'same' or 'valid'\")\nassert determine_padding((3, 3), \"same\") == ((1, 1), (1, 1)), \"failed: (3,3) same\"\nassert determine_padding((1, 1), \"same\") == ((0, 0), (0, 0)), \"failed: (1,1) same\"\nassert determine_padding((5, 5), \"same\") == ((2, 2), (2, 2)), \"failed: (5,5) same\"\nassert determine_padding((4, 4), \"same\") == ((1, 2), (1, 2)), \"failed: (4,4) same\"\nassert determine_padding((4, 2), \"same\") == ((1, 2), (0, 1)), \"failed: (4,2) same\"\nassert determine_padding((2, 4), \"same\") == ((0, 1), (1, 2)), \"failed: (2,4) same\"\nassert determine_padding((3, 3), \"valid\") == ((0, 0), (0, 0)), \"failed: (3,3) valid\"\nassert determine_padding((2, 2), \"valid\") == ((0, 0), (0, 0)), \"failed: (2,2) valid\"\nassert determine_padding((2, 2), \"same\") == ((0, 1), (0, 1)), \"failed: (2,2) same\"\nassert determine_padding((7, 3), \"same\") == ((3, 3), (1, 1)), \"failed: (7,3) same\""}
{"task_id": 240, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns\n    -------\n        dict\n            A dictionary that contains the keys 'obs2num', 'num2obs',\n            'act2num', and 'num2act'.\n    \"\"\"\n\n    def _build_maps(items: list, given_encoder: dict | None):\n        \"\"\"\n        Helper that creates a forward dictionary (sym\u2192int) and its inverse\n        (int\u2192sym) either from a supplied encoder or by enumerating *items*.\n        \"\"\"\n        if given_encoder is not None:\n            forward = dict(given_encoder)\n        else:\n            forward = {item: idx for (idx, item) in enumerate(items)}\n        inverse = {v: k for (k, v) in forward.items()}\n        return (forward, inverse)\n    (obs2num, num2obs) = _build_maps(obs_ids, obs_encoder) if obs_ids or obs_encoder else ({}, {})\n    (act2num, num2act) = _build_maps(action_ids, act_encoder) if action_ids or act_encoder else ({}, {})\n    for obs in obs2num:\n        assert num2obs[obs2num[obs]] == obs, 'Inconsistent obs dictionaries'\n    for act in act2num:\n        assert num2act[act2num[act]] == act, 'Inconsistent action dictionaries'\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}\nassert create_encoding_dicts(['a', 'b'], ['x', 'y']) == {'obs2num': {'a': 0, 'b': 1}, 'num2obs': {0: 'a', 1: 'b'}, 'act2num': {'x': 0, 'y': 1}, 'num2act': {0: 'x', 1: 'y'}}, 'test case failed: basic enumeration'\nres = create_encoding_dicts(['left', 'right', 'front', 'back'], ['move', 'turn']); assert res['obs2num']['front'] == 2 and res['num2obs'][2] == 'front', 'test case failed: larger lists (obs)'\nobs_enc = {'cold': 5, 'hot': 7}; act_enc = {'go': 9, 'stop': 3}; res = create_encoding_dicts(['cold', 'hot'], ['go', 'stop'], obs_enc, act_enc); assert res['obs2num'] == obs_enc and res['num2obs'] == {5: 'cold', 7: 'hot'}, 'test case failed: explicit obs encoder'\nassert create_encoding_dicts([], []) == {'obs2num': {}, 'num2obs': {}, 'act2num': {}, 'num2act': {}}, 'test case failed: empty lists'\nres = create_encoding_dicts(['sun', 'rain'], ['walk', 'run'], {'sun': 2, 'rain': 4}); assert res['act2num']['walk'] == 0 and res['num2act'][1] == 'run', 'test case failed: mixed encoders (act)'\nres = create_encoding_dicts([], ['jump'], None, {'jump': 42}); assert res['act2num']['jump'] == 42 and res['num2act'][42] == 'jump', 'test case failed: encoder with empty obs list'\nres = create_encoding_dicts(['x1', 'x2', 'x3'], ['y']); assert all(res['num2obs'][res['obs2num'][o]] == o for o in ['x1', 'x2', 'x3']), 'test case failed: consistency (obs)'\nres = create_encoding_dicts([10, 20], [30, 40]); assert res['obs2num'][10] == 0 and res['num2act'][0] == 30, 'test case failed: numerical identifiers'\nres = create_encoding_dicts(['only_obs'], ['only_act']); assert res['obs2num']['only_obs'] == 0 and res['act2num']['only_act'] == 0, 'test case failed: single element lists'\nres = create_encoding_dicts(['A','B','C'], ['L']); assert res['num2act'][res['act2num']['L']] == 'L', 'test case failed: consistency (act)'"}
{"task_id": 241, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list:\n    \"\"\"Initialise a tensor with an orthogonal matrix (Saxe et al., 2014).\n\n    Args:\n        shape: Desired output shape. Must have length \u2265 2.\n        scale: Multiplicative scaling factor (default 0.5).\n\n    Returns:\n        A (possibly nested) python list whose first two dimensions are\n        orthogonal up to the given scaling factor, or \u20131 if `shape` is 1-D.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d_rest = int(np.prod(shape[1:], dtype=int))\n    A = np.random.standard_normal((d0, d_rest))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    tensor = (scale * Q.reshape(shape)).tolist()\n    return tensor\nnp.random.seed(0); assert (m := orthogonal((2, 2), 1.0)); flat = np.array(m); assert np.allclose(flat @ flat.T, np.eye(2), atol=1e-6), \"orthogonal((2,2),1.0) rows not orthonormal\"\nnp.random.seed(1); assert (m := orthogonal((3, 4), 0.1)); flat = np.array(m).reshape(3, -1); assert np.allclose(flat @ flat.T, 0.01 * np.eye(3), atol=1e-6), \"orthogonal((3,4),0.1) row-orthogonality failed\"\nnp.random.seed(2); assert (m := orthogonal((4, 3), 0.7)); flat = np.array(m).reshape(4, -1); assert np.allclose(flat.T @ flat, 0.49 * np.eye(3), atol=1e-6), \"orthogonal((4,3),0.7) column-orthogonality failed\"\nnp.random.seed(3); assert (m := orthogonal((5, 5), 0.3)); flat = np.array(m); assert np.allclose(flat @ flat.T, 0.09 * np.eye(5), atol=1e-6), \"orthogonal((5,5),0.3) failed\"\nnp.random.seed(4); assert (m := orthogonal((2, 8), 0.2)); flat = np.array(m).reshape(2, -1); assert np.allclose(flat @ flat.T, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((2,8),0.2) failed\"\nnp.random.seed(5); assert (m := orthogonal((8, 2), 0.2)); flat = np.array(m).reshape(8, -1); assert np.allclose(flat.T @ flat, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((8,2),0.2) failed\"\nnp.random.seed(6); assert isinstance(orthogonal((3, 3), 1.0), list), \"Return type is not list\"\nnp.random.seed(7); assert orthogonal((1,), 0.5) == -1, \"Shape length < 2 should return -1\"\nnp.random.seed(9); shape = (4, 6); scale = 0.75; m = orthogonal(shape, scale); flat = np.array(m).reshape(shape[0], -1); expected = scale**2 * np.eye(shape[0]); assert np.allclose(flat @ flat.T, expected, atol=1e-6), \"orthogonality condition failed for (4,6)\""}
{"task_id": 242, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nfrom typing import List\ndef ucb1_select(ev_estimates: List[float], pull_counts: List[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\"\"\"\n    if len(ev_estimates) != len(pull_counts):\n        raise ValueError('`ev_estimates` and `pull_counts` must have the same length')\n    if len(ev_estimates) == 0:\n        raise ValueError('At least one arm is required')\n    for (idx, pulls) in enumerate(pull_counts):\n        if pulls == 0:\n            return idx\n    log_term = math.log(current_step + 1) * 2.0\n    best_idx = 0\n    best_score = float('-inf')\n    for (idx, (mean, pulls)) in enumerate(zip(ev_estimates, pull_counts)):\n        exploration = C * math.sqrt(log_term / pulls)\n        score = mean + exploration\n        if score > best_score:\n            best_score = score\n            best_idx = idx\n    return best_idx\nassert ucb1_select([0.5, 0.7], [1, 1], 2) == 1, \"failed on basic two-arm example\"\nassert ucb1_select([0.2, 0.9, 0.1], [0, 5, 3], 8) == 0, \"failed when an arm was never pulled\"\nassert ucb1_select([0.6, 0.6], [10, 1], 11) == 1, \"failed when counts differ greatly\"\nassert ucb1_select([0.3, 0.4, 0.5, 0.6], [5, 5, 5, 5], 20) == 3, \"failed on equal counts different EVs\"\nassert ucb1_select([0.5, 0.5], [1, 1], 2) == 0, \"failed tie-breaking rule\"\nassert ucb1_select([0.2], [10], 10) == 0, \"failed single-arm bandit\"\nassert ucb1_select([0.4, 0.4], [3, 3], 6, C=0.5) == 0, \"failed tie with custom C\"\nassert ucb1_select([0.1, 0.2, 0.3], [2, 4, 6], 12) == 0, \"failed three-arm varying counts\"\nassert ucb1_select([0.9, 0.1], [100, 1], 101) == 1, \"failed exploration against high EV arm\"\nassert ucb1_select([0.0, 0.0, 0.0], [1, 0, 1], 2) == 1, \"failed when exactly one arm untried\""}
{"task_id": 243, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a tiny fully-connected Actor\u2013Critic network\n    whose weights are all ones and whose biases are all zeros.\n\n    Args:\n        state: List with three floats \u2013 the environment state.\n\n    Returns:\n        (action_probabilities, state_value) where\n            action_probabilities \u2013 list with three floats, each rounded to 4 decimals\n            state_value          \u2013 single float, rounded to 4 decimals\n    \"\"\"\n    s_sum = np.sum(state)\n    z1 = max(0.0, s_sum)\n    z3 = 16.0 * z1\n    action_probs = [round(1 / 3, 4)] * 3\n    state_value = round(64.0 * z1, 4)\n    return (action_probs, state_value)\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 244, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom numbers import Real\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    Parameters\n    ----------\n    shape : tuple\n        Desired tensor shape (tuple of positive integers).\n    sparsity : float, optional\n        Probability that an entry is 1.0 (must lie in the interval [0,\\u20061]).\n\n    Returns\n    -------\n    list\n        Nested Python list containing only 0.0 and 1.0, or -1 on invalid input.\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) == 0 or (not all((isinstance(dim, int) and dim > 0 for dim in shape))):\n        return -1\n    if not isinstance(sparsity, Real) or not 0.0 <= sparsity <= 1.0:\n        return -1\n    threshold = 1.0 - sparsity\n    random_draws = np.random.rand(*shape)\n    binary_tensor = (random_draws >= threshold).astype(float)\n    return binary_tensor.tolist()\nnp.random.seed(0)\nassert random_binary_tensor((2, 3), 0.5) == [[1.0, 1.0, 1.0], [1.0, 0.0, 1.0]], \"test case failed: seed=0, shape=(2,3), sparsity=0.5\"\nnp.random.seed(1)\nassert random_binary_tensor((5,), 0.3) == [0.0, 1.0, 0.0, 0.0, 0.0], \"test case failed: seed=1, shape=(5,), sparsity=0.3\"\nnp.random.seed(2)\nassert random_binary_tensor((1, 4), 0.0) == [[0.0, 0.0, 0.0, 0.0]], \"test case failed: seed=2, shape=(1,4), sparsity=0.0\"\nnp.random.seed(3)\nassert random_binary_tensor((2, 2), 1.0) == [[1.0, 1.0], [1.0, 1.0]], \"test case failed: seed=3, shape=(2,2), sparsity=1.0\"\nnp.random.seed(4)\nassert random_binary_tensor((3, 2), 0.7) == [[1.0, 1.0], [1.0, 1.0], [1.0, 0.0]], \"test case failed: seed=4, shape=(3,2), sparsity=0.7\"\nassert random_binary_tensor((2, 2), 1.2) == -1, \"test case failed: sparsity > 1\"\nassert random_binary_tensor((2, 2), -0.1) == -1, \"test case failed: sparsity < 0\"\nassert random_binary_tensor([2, 3], 0.5) == -1, \"test case failed: shape is not tuple\"\nassert random_binary_tensor((0, 3), 0.5) == -1, \"test case failed: zero dimension in shape\"\nassert random_binary_tensor((2.5, 3), 0.5) == -1, \"test case failed: non-integer dimension\""}
{"task_id": 247, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Return the highest expected reward (rounded to 4 decimals) and its arm\n    index for a Gaussian bandit, or -1 if the input is invalid.\"\"\"\n    if not isinstance(payoff_dists, list) or not isinstance(payoff_probs, list):\n        return -1\n    K = len(payoff_dists)\n    if K == 0 or len(payoff_probs) != K:\n        return -1\n    try:\n        dists_arr = np.asarray(payoff_dists, dtype=float)\n    except (ValueError, TypeError):\n        return -1\n    if dists_arr.ndim != 2 or dists_arr.shape[1] != 2 or dists_arr.shape[0] != K:\n        return -1\n    mus = dists_arr[:, 0]\n    vars_ = dists_arr[:, 1]\n    try:\n        probs = np.asarray(payoff_probs, dtype=float)\n    except (ValueError, TypeError):\n        return -1\n    if np.any(vars_ <= 0) or np.any(probs < 0) or np.any(probs > 1):\n        return -1\n    exp_vals = mus * probs\n    best_arm = int(np.argmax(exp_vals))\n    best_ev = round(float(exp_vals[best_arm]), 4)\n    return (best_ev, best_arm)\nassert gaussian_bandit_oracle([(5, 2), (3, 1), (10, 4)], [1.0, 0.5, 0.2]) == (5.0, 0), \"failed on basic example\"\nassert gaussian_bandit_oracle([(0, 1), (7, 2)], [1, 1]) == (7.0, 1), \"failed when best arm is last\"\nassert gaussian_bandit_oracle([(4, 1), (4, 1)], [1, 1]) == (4.0, 0), \"failed on tie breaking\"\nassert gaussian_bandit_oracle([(4, 1), (1, 1)], [0, 1]) == (1.0, 1), \"failed with zero probability on an arm\"\nassert gaussian_bandit_oracle([(3.3333, 0.5)], [0.3]) == (1.0, 0), \"failed on rounding check\"\nassert gaussian_bandit_oracle([], []) == -1, \"failed on empty input\"\nassert gaussian_bandit_oracle([(1, -1)], [0.5]) == -1, \"failed to detect non-positive variance\"\nassert gaussian_bandit_oracle([(1, 1)], [1.2]) == -1, \"failed to detect probability > 1\"\nassert gaussian_bandit_oracle([(1, 1)], [-0.1]) == -1, \"failed to detect probability < 0\"\nassert gaussian_bandit_oracle([(1, 1), (2, 2), (3, 3), (4, 4)], [0.1, 0.2, 0.3, 0.4]) == (1.6, 3), \"failed on larger input\""}
{"task_id": 248, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Unused by this baseline; included only for API completeness.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 = negative, 1 = positive).\n    X_test : np.ndarray\n        Feature matrix whose rows require a probability prediction.\n\n    Returns\n    -------\n    list[float]\n        List of identical, 4-decimal-rounded probabilities.\n    \"\"\"\n    if y_train.size == 0:\n        positive_fraction = 0.0\n    else:\n        positive_fraction = y_train.sum() / len(y_train)\n    positive_fraction = round(float(positive_fraction), 4)\n    n_rows_test = len(X_test)\n    if n_rows_test == 0:\n        return []\n    return [positive_fraction] * n_rows_test\nassert baseline_prob_predict(np.array([[1, 2], [3, 4], [5, 6]]), np.array([0, 1, 1]), np.array([[7, 8], [9, 10]])) == [0.6667, 0.6667], \"test case failed: p = 2/3\"\nassert baseline_prob_predict(np.array([[0], [1]]), np.array([0, 0]), np.array([[5], [6], [7]])) == [0.0, 0.0, 0.0], \"test case failed: all negatives\"\nassert baseline_prob_predict(np.array([[0], [1], [2]]), np.array([1, 1, 1]), np.array([[5], [6]])) == [1.0, 1.0], \"test case failed: all positives\"\nassert baseline_prob_predict(np.array([[0], [1], [2], [3]]), np.array([1, 0, 0, 0]), np.array([[9], [9], [9], [9]])) == [0.25, 0.25, 0.25, 0.25], \"test case failed: p = 0.25\"\nassert baseline_prob_predict(np.array([[0], [1], [2], [3], [4]]), np.array([1, 0, 1, 0, 0]), np.array([[0], [0], [0], [0], [0]])) == [0.4, 0.4, 0.4, 0.4, 0.4], \"test case failed: p = 0.4\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([1]), np.empty((0, 2))) == [], \"test case failed: empty X_test\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([0]), np.array([[3, 4]])) == [0.0], \"test case failed: single negative\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([1]), np.array([[3, 4], [5, 6]])) == [1.0, 1.0], \"test case failed: single positive\"\nassert baseline_prob_predict(np.array([[0], [1], [2]]), np.array([1, 0, 0]), np.array([[8], [8], [8]])) == [0.3333, 0.3333, 0.3333], \"test case failed: rounding 1/3\"\nassert baseline_prob_predict(np.arange(100).reshape(100, 1), np.array([1] * 55 + [0] * 45), np.array([[0], [0], [0], [0]])) == [0.55, 0.55, 0.55, 0.55], \"test case failed: p = 0.55\""}
{"task_id": 249, "completion_id": 0, "passed": false, "result": "failed: name 'params_1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef _dense(x: np.ndarray, w: np.ndarray, b: np.ndarray) -> np.ndarray:\n    \"\"\"\n    A small helper that applies a fully-connected layer to a 1-D input vector.\n    It copes with both common weight layouts:\n        \u2022  (in_dim , out_dim)   so   x @ w\n        \u2022  (out_dim, in_dim )   so   w @ x\n    \"\"\"\n    if x.shape[-1] == w.shape[0]:\n        return x @ w + b\n    if x.shape[-1] == w.shape[1]:\n        return w @ x + b\n    raise ValueError('Weight matrix has incompatible shape.')\ndef _relu(z: np.ndarray) -> np.ndarray:\n    return np.maximum(0.0, z)\ndef _softmax(z: np.ndarray) -> np.ndarray:\n    z = z - np.max(z)\n    e = np.exp(z)\n    return e / e.sum()\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max) \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)            \u2192 state value\n    \"\"\"\n    x = np.asarray(state, dtype=np.float64)\n    W1 = np.asarray(params['W1'], dtype=np.float64)\n    b1 = np.asarray(params['b1'], dtype=np.float64)\n    W2 = np.asarray(params['W2'], dtype=np.float64)\n    b2 = np.asarray(params['b2'], dtype=np.float64)\n    W3 = np.asarray(params['W3'], dtype=np.float64)\n    b3 = np.asarray(params['b3'], dtype=np.float64)\n    Wa = np.asarray(params['Wa'], dtype=np.float64)\n    ba = np.asarray(params['ba'], dtype=np.float64)\n    Wc = np.asarray(params['Wc'], dtype=np.float64)\n    bc = np.asarray(params['bc'], dtype=np.float64)\n    x = _relu(_dense(x, W1, b1))\n    x = _relu(_dense(x, W2, b2))\n    hidden = _relu(_dense(x, W3, b3))\n    logits = _dense(hidden, Wa, ba)\n    probs = _softmax(logits)\n    value = float(_dense(hidden, Wc, bc))\n    probs_rounded = [round(float(p), 4) for p in probs]\n    value_rounded = round(value, 4)\n    return (probs_rounded, value_rounded)\nassert actor_critic_forward([1, 0], params_1) == ([0.7311, 0.2689], 1.0), \"test case failed: state=[1,0]\"\nassert actor_critic_forward([0, 1], params_1) == ([0.2689, 0.7311], 1.0), \"test case failed: state=[0,1]\"\nassert actor_critic_forward([-1, 2], params_1) == ([0.1192, 0.8808], 2.0), \"test case failed: state=[-1,2]\"\nassert actor_critic_forward([3, 3], params_1)  == ([0.5, 0.5], 6.0),       \"test case failed: state=[3,3]\"\nassert actor_critic_forward([-2, -3], params_1)== ([0.5, 0.5], 0.0),       \"test case failed: state=[-2,-3]\"\nassert actor_critic_forward([0, 0], params_2)  == ([0.8808, 0.1192], 2.0), \"test case failed: state=[0,0]\"\nassert actor_critic_forward([1, -1], params_2) == ([0.982, 0.018],  3.0), \"test case failed: state=[1,-1]\"\nassert actor_critic_forward([-1, 1], params_2) == ([0.5, 0.5],     1.0), \"test case failed: state=[-1,1]\"\nassert actor_critic_forward([-5, -5], params_2)== ([0.5, 0.5],     1.0), \"test case failed: state=[-5,-5]\"\nassert actor_critic_forward([10, 0], params_2) == ([1.0, 0.0],    12.0), \"test case failed: state=[10,0]\""}
{"task_id": 251, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _is_scalar(x):\n    \"\"\"Return True if *x* is a Python scalar (int/float or 0-d ndarray).\"\"\"\n    return np.isscalar(x) or (isinstance(x, np.ndarray) and x.ndim == 0)\ndef _round4(x):\n    \"\"\"Round every numeric entry to 4 decimal places and keep structure.\"\"\"\n    if _is_scalar(x):\n        return round(float(x), 4)\n    return np.round(x, 4)\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid.\"\"\"\n    if _is_scalar(x):\n        return _round4(1 / (1 + np.exp(-x)))\n    x = np.asarray(x, dtype=float).ravel()\n    out = 1 / (1 + np.exp(-x))\n    return _round4(out)\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent.\"\"\"\n    if _is_scalar(x):\n        return _round4(np.tanh(x))\n    x = np.asarray(x, dtype=float).ravel()\n    out = np.tanh(x)\n    return _round4(out)\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit.\"\"\"\n    if _is_scalar(x):\n        return _round4(max(0, x))\n    x = np.asarray(x, dtype=float).ravel()\n    out = np.maximum(0, x)\n    return _round4(out)\ndef leaky_relu(x, alpha: float=0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope *alpha* for negative inputs.\"\"\"\n    if _is_scalar(x):\n        return _round4(x if x >= 0 else alpha * x)\n    x = np.asarray(x, dtype=float).ravel()\n    out = np.where(x >= 0, x, alpha * x)\n    return _round4(out)\ndef softmax(x):\n    \"\"\"Numerically stable softmax for a 1-D input.\"\"\"\n    if _is_scalar(x):\n        return 1.0\n    x = np.asarray(x, dtype=float).ravel()\n    shift = x - np.max(x)\n    exp_shift = np.exp(shift)\n    probs = exp_shift / np.sum(exp_shift)\n    return _round4(probs)\ndef get_activation(name):\n    \"\"\"\n    Return the activation function associated with *name*.\n    \n    Parameters\n    ----------\n    name : str\n        One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}.\n    \n    Returns\n    -------\n    Callable\n        The corresponding activation function.\n    \n    Raises\n    ------\n    ValueError\n        If *name* is not recognised.\n    \"\"\"\n    lookup = {'sigmoid': sigmoid, 'tanh': tanh, 'relu': relu, 'leaky_relu': leaky_relu, 'softmax': softmax}\n    try:\n        return lookup[name]\n    except KeyError:\n        raise ValueError('Invalid activation function.')\nact = get_activation(\"relu\"); assert np.array_equal(act(np.array([-1, 0, 2])), np.array([0., 0., 2.])), \"test case failed: relu([-1,0,2])\"\nact = get_activation(\"sigmoid\"); assert act(0) == 0.5, \"test case failed: sigmoid(0)\"\nact = get_activation(\"sigmoid\"); assert np.allclose(act([0,1]), np.array([0.5,0.7311])), \"test case failed: sigmoid([0,1])\"\nact = get_activation(\"tanh\"); assert act(0) == 0.0, \"test case failed: tanh(0)\"\nact = get_activation(\"leaky_relu\"); assert np.array_equal(act([-1, 0, 2]), np.array([-0.01, 0., 2.])), \"test case failed: leaky_relu([-1,0,2])\"\nact = get_activation(\"softmax\"); assert np.allclose(act([0,1,2]), np.array([0.09,0.2447,0.6652])), \"test case failed: softmax([0,1,2])\"\nact = get_activation(\"softmax\"); assert np.allclose(act([1000, 1000]), np.array([0.5,0.5])), \"test case failed: softmax([1000,1000])\"\ntry:\n    get_activation(\"_bad_\")\n    assert False, \"test case failed: expected ValueError for unknown activation\"\nexcept ValueError:\n    pass\nassert np.allclose(get_activation(\"sigmoid\")([-2,2]), np.array([0.1192,0.8808])), \"test case failed: sigmoid([-2,2])\"\nassert np.array_equal(get_activation(\"relu\")(0), 0.0), \"test case failed: relu(0)\""}
{"task_id": 252, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad = (actual - predicted).tolist()\n    hess = np.ones_like(actual, dtype=float).tolist()\n    return (grad, hess)\nassert least_squares_loss(np.array([3.0, -0.5, 2.0, 7.0]), np.array([2.5, 0.0, 2.0, 8.0])) == ([0.5, -0.5, 0.0, -1.0], [1.0, 1.0, 1.0, 1.0]), \"failed on mixed positive/negative values\"\nassert least_squares_loss(np.array([0.0]), np.array([0.0])) == ([0.0], [1.0]), \"failed on single zero element\"\nassert least_squares_loss(np.array([1.0]), np.array([-1.0])) == ([2.0], [1.0]), \"failed on single element opposite sign\"\nassert least_squares_loss(np.array([5.0, 5.0]), np.array([5.0, 5.0])) == ([0.0, 0.0], [1.0, 1.0]), \"failed on identical vectors\"\nassert least_squares_loss(np.array([-2.0, -4.0]), np.array([-3.0, -1.0])) == ([1.0, -3.0], [1.0, 1.0]), \"failed on negative values\"\nassert least_squares_loss(np.array([1e6, -1e6]), np.array([0.0, 0.0])) == ([1000000.0, -1000000.0], [1.0, 1.0]), \"failed on large magnitude values\"\nassert least_squares_loss(np.array([0.123, 0.456]), np.array([0.321, 0.654])) == ([-0.198, -0.198], [1.0, 1.0]), \"failed on decimal values\"\nassert least_squares_loss(np.array([10.0, 20.0, 30.0]), np.array([9.0, 18.0, 33.0])) == ([1.0, 2.0, -3.0], [1.0, 1.0, 1.0]), \"failed on three-element vector\"\nassert least_squares_loss(np.array([7.0, 8.0, 9.0, 10.0]), np.array([7.0, 8.0, 9.0, 10.0])) == ([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]), \"failed on perfect prediction\""}
{"task_id": 253, "completion_id": 0, "passed": false, "result": "failed: failed on value, case 1", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w        : 1-D weight vector (list or NumPy array).\n        alpha    : Regularisation strength (non-negative float).\n        l1_ratio : Fraction of L1 component (float in [0, 1]).\n        gradient : If True, return gradient, else return penalty value.\n\n    Returns\n        float  \u2013 if *gradient* is False  (penalty value),\n        list   \u2013 if *gradient* is True   (element-wise gradient).\n    \"\"\"\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative.')\n    if not 0.0 <= l1_ratio <= 1.0:\n        raise ValueError('l1_ratio must be in [0, 1].')\n    w = np.asarray(w, dtype=float).ravel()\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1.0 - l1_ratio) * w)\n        return list(np.round(grad, 4))\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 1) + (1.0 - l1_ratio) * 0.5 * np.dot(w, w))\n        return round(float(penalty), 4)\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 255, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    An ace is *usable* if it can be counted as 11 without the hand busting.\n    Counting one ace as 11 instead of 1 adds 10 to the hand\u2019s total.\n\n    Args:\n        hand: List of integers representing card values (ace == 1).\n\n    Returns:\n        True if the hand has a usable ace, else False.\n    \"\"\"\n    if 1 not in hand:\n        return False\n    total = sum(hand)\n    return total + 10 <= 21\nassert usable_ace([1, 7]) is True, \"failed on [1, 7]\"\nassert usable_ace([1, 10]) is True, \"failed on [1, 10]\"\nassert usable_ace([1, 10, 10]) is False, \"failed on [1, 10, 10]\"\nassert usable_ace([2, 3, 4]) is False, \"failed on [2, 3, 4]\"\nassert usable_ace([1]) is True, \"failed on [1]\"\nassert usable_ace([1, 1, 9]) is True, \"failed on [1, 1, 9]\"\nassert usable_ace([1, 1, 9, 2]) is False, \"failed on [1, 1, 9, 2]\"\nassert usable_ace([1, 2, 3, 4, 5, 6]) is False, \"failed on [1, 2, 3, 4, 5, 6]\"\nassert usable_ace([1, 1, 1, 1, 8]) is False, \"failed on [1, 1, 1, 1, 8]\"\nassert usable_ace([1, 8, 1]) is True, \"failed on [1, 8, 1]\""}
{"task_id": 256, "completion_id": 0, "passed": false, "result": "failed: name 'ToyLinearRNN' is not defined", "solution": "import numpy as np\nfrom copy import deepcopy\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred\n    finite differences (double precision).\n\n    See the task description for a detailed specification.\n    \"\"\"\n    if param_name in ('X', 'y'):\n        return None\n    real_name = param_name\n    if param_name == 'Ba':\n        real_name = 'ba'\n    elif param_name == 'Bx':\n        real_name = 'bx'\n    if real_name not in model.parameters:\n        raise KeyError(f\"Parameter '{real_name}' not found in model.\")\n    X = np.asarray(X, dtype=np.float64)\n    param: np.ndarray = model.parameters[real_name].astype(np.float64, copy=False)\n    model.parameters[real_name] = param\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    def _reset_state_if_possible():\n        if hasattr(model, 'reset_state') and callable(model.reset_state):\n            model.reset_state()\n\n    def _sequence_loss():\n        model.flush_gradients()\n        _reset_state_if_possible()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t]))\n        return float(loss_func(preds))\n    it = np.ndindex(param.shape)\n    for idx in it:\n        original_val = param[idx]\n        param[idx] = original_val + epsilon\n        loss_plus = _sequence_loss()\n        param[idx] = original_val - epsilon\n        loss_minus = _sequence_loss()\n        grads[idx] = (loss_plus - loss_minus) / (2.0 * epsilon)\n        param[idx] = original_val\n    return grads.T.astype(np.float64)\nimport numpy as np, math, random; from copy import deepcopy; rng = np.random.default_rng(0); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(3, 2, 3)); n_t = 3; expected = analytic_grad_P(model, n_t, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', n_t, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 2x2'\nimport numpy as np; rng = np.random.default_rng(1); model = ToyLinearRNN(3, 1, rng); X = rng.normal(size=(4, 3, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 3x1'\nimport numpy as np; rng = np.random.default_rng(2); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(5, 1, 1)); expected = analytic_grad_P(model, 1, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 1, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: n_t = 1'\nimport numpy as np; rng = np.random.default_rng(3); model = ToyLinearRNN(2, 4, rng); X = rng.normal(size=(2, 2, 3)); expected = analytic_grad_ba(model, 3, X); numeric = grad_check_RNN(model, squared_loss, 'Ba', 3, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for Ba'\nimport numpy as np; rng = np.random.default_rng(4); model = ToyLinearRNN(4, 2, rng); X = rng.normal(size=(3, 4, 4)); expected = analytic_grad_P(model, 4, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 4, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 4x2'\nimport numpy as np; rng = np.random.default_rng(5); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X, epsilon=1e-8); assert np.allclose(numeric, expected, atol=1e-4), 'test case failed: small epsilon'\nimport numpy as np; rng = np.random.default_rng(6); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(3, 1, 5)); expected = analytic_grad_P(model, 5, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 5, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 1x3'\nimport numpy as np; rng = np.random.default_rng(7); model = ToyLinearRNN(3, 2, rng); X = rng.normal(size=(2, 3, 2)); expected = analytic_grad_ba(model, 2, X); numeric = grad_check_RNN(model, squared_loss, 'ba', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for ba'\nimport numpy as np; rng = np.random.default_rng(8); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'X', 2, X) is None, 'test case failed: param X should return None'\nimport numpy as np; rng = np.random.default_rng(9); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'y', 2, X) is None, 'test case failed: param y should return None'"}
{"task_id": 257, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n\n    def stump_predict(X, feature, thresh, polarity):\n        \"\"\"\n        Predict with a single decision stump.\n        polarity =  1 : x < thresh  -> -1     else 1\n        polarity = -1 : x < thresh  ->  1     else -1\n        \"\"\"\n        col = X[:, feature]\n        if polarity == 1:\n            return np.where(col < thresh, -1, 1)\n        else:\n            return np.where(col < thresh, 1, -1)\n    n_clf = max(1, int(n_clf))\n    (m, n_features) = X_train.shape\n    w = np.full(m, 1.0 / m)\n    stumps = []\n    eps = 1e-10\n    for _ in range(n_clf):\n        (best_feature, best_thresh, best_pol, min_err) = (None, None, None, np.inf)\n        for feature in range(n_features):\n            values = X_train[:, feature]\n            thresholds = np.unique(values)\n            for thresh in thresholds:\n                for polarity in (1, -1):\n                    pred = stump_predict(X_train, feature, thresh, polarity)\n                    err = np.sum(w[pred != y_train])\n                    if err < min_err:\n                        (best_feature, best_thresh, best_pol) = (feature, thresh, polarity)\n                        min_err = err\n        if min_err >= 0.5 - eps:\n            break\n        min_err = max(min_err, eps)\n        alpha = 0.5 * np.log((1 - min_err) / min_err)\n        stumps.append((best_feature, best_thresh, best_pol, alpha))\n        predictions = stump_predict(X_train, best_feature, best_thresh, best_pol)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= w.sum()\n    if not stumps:\n        return [-1] * len(X_test)\n    agg = np.zeros(X_test.shape[0])\n    for (feature, thresh, polarity, alpha) in stumps:\n        agg += alpha * stump_predict(X_test, feature, thresh, polarity)\n    return [1 if x >= 0 else -1 for x in agg]\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 258, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    y_true = np.asarray(actual, dtype=float)\n    y_pred = np.asarray(predicted, dtype=float)\n    per_sample_loss = np.maximum(0, 1 - y_true * y_pred)\n    mean_loss = np.round(per_sample_loss.mean(), 4)\n    return float(mean_loss)\nassert hinge_loss([1, -1, 1, -1], [2, -0.5, 0.3, -3]) == 0.3, \"failed: basic mixed example\"\nassert hinge_loss([1, 1, 1], [3, 2, 4]) == 0.0, \"failed: all correct positive class\"\nassert hinge_loss([-1, -1, -1], [-2, -2, -1]) == 0.0, \"failed: all correct negative class\"\nassert hinge_loss([1, -1], [-1, -1]) == 1.0, \"failed: one mis-classified sample\"\nassert hinge_loss([-1, 1], [0, 0]) == 1.0, \"failed: zero predictions\"\nassert hinge_loss([1], [1]) == 0.0, \"failed: single perfect prediction\"\nassert hinge_loss([-1], [1]) == 2.0, \"failed: single worst-case prediction\"\nassert hinge_loss([1, -1, 1, -1], [0.5, 0.5, -0.5, -0.5]) == 1.0, \"failed: margin violations\"\nassert hinge_loss([1, -1, 1, -1], [1, -1, 1, -1]) == 0.0, \"failed: predictions on decision boundary\"\nassert hinge_loss([1, -1, 1, -1, 1], [2, -2, 0, -3, 0.8]) == 0.24, \"failed: larger array mixed case\""}
{"task_id": 259, "completion_id": 0, "passed": true, "result": "passed", "solution": "import random\nimport random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Return *batch_size* different transitions sampled from the replay buffer.\n    \n    The sampling is deterministic because it is performed with a `random.Random`\n    instance that is always initialised with seed 42.\n    \n    If *batch_size* is larger than the number of stored transitions, -1\n    is returned instead.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    rng = random.Random(42)\n    return rng.sample(memory, batch_size)\nassert sample_replay_memory([1, 2, 3, 4, 5], 3) == [1, 5, 3], \"failed: sample_replay_memory([1,2,3,4,5],3)\"\nassert sample_replay_memory(['a', 'b', 'c', 'd'], 2) == ['a', 'd'], \"failed: sample_replay_memory(['a','b','c','d'],2)\"\nassert sample_replay_memory([10], 1) == [10], \"failed: sample_replay_memory([10],1)\"\nassert sample_replay_memory([0, 1, 2], 4) == -1, \"failed: sample_replay_memory request larger than buffer\"\nassert sample_replay_memory(['x', 'y'], 1) == ['x'], \"failed: sample_replay_memory(['x','y'],1)\"\nassert sample_replay_memory(['x', 'y'], 2) == ['x', 'y'], \"failed: sample_replay_memory(['x','y'],2)\""}
{"task_id": 260, "completion_id": 0, "passed": true, "result": "passed", "solution": "from itertools import zip_longest\nfrom math import floor\nfrom itertools import zip_longest\nfrom math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"Wrapping tile-coder that returns the index of the active tile in every\n    one of `numtilings` tilings.\n\n    The code follows the algorithm described in the task text verbatim:\n        1. quantise each float -> q_i\n        2. build coordinates for every tiling, applying wrapping if requested\n        3. hash the integer coordinate list with the fixed polynomial hash\n    \"\"\"\n    if ihtORsize <= 0:\n        raise ValueError('ihtORsize must be a positive integer.')\n    if numtilings <= 0:\n        raise ValueError('numtilings must be a positive integer.')\n    if len(list(zip_longest(floats, wrapwidths))) != len(floats):\n        raise ValueError('wrapwidths must be the same length as floats.')\n    ints = ints or []\n    q_vals = [int(floor(x * numtilings)) for x in floats]\n    active_tiles: list[int] = []\n    for t in range(numtilings):\n        coords: list[int] = [t]\n        b = t\n        for (q, wrap) in zip(q_vals, wrapwidths):\n            offset = b % numtilings\n            c = (q + offset) // numtilings\n            if wrap and wrap > 0:\n                c %= wrap\n            coords.append(c)\n            b += t * 2\n        coords.extend(ints)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n        active_tiles.append(index)\n    return active_tiles\nassert tileswrap(32, 2, [0.1], [5]) == [0, 31], \"test case failed: tileswrap(32, 2, [0.1], [5])\"\nassert tileswrap(64, 4, [0.35], [6]) == [0, 31, 62, 30], \"test case failed: tileswrap(64, 4, [0.35], [6])\"\nassert tileswrap(16, 4, [2.4], [5]) == [2, 1, 0, 0], \"test case failed: tileswrap(16, 4, [2.4], [5])\"\nassert tileswrap(128, 2, [1.2, 3.7], [5, None]) == [34, 100], \"test case failed: tileswrap(128, 2, [1.2, 3.7], [5, None])\"\nassert tileswrap(50, 3, [0.0], [3], [1]) == [1, 12, 23], \"test case failed: tileswrap(50, 3, [0.0], [3], [1])\"\nassert tileswrap(20, 3, [0.99], [2]) == [0, 12, 3], \"test case failed: tileswrap(20, 3, [0.99], [2])\"\nassert tileswrap(30, 2, [0.25, 0.25], []) == [0, 1], \"test case failed: tileswrap(30, 2, [0.25, 0.25], [])\"\nassert tileswrap(10, 1, [1.0], [None]) == [1], \"test case failed: tileswrap(10, 1, [1.0], [None])\"\nassert tileswrap(40, 2, [2.1], [None], [2, 3]) == [27, 18], \"test case failed: tileswrap(40, 2, [2.1], [None], [2, 3])\"\nassert tileswrap(8, 1, [0.0], [1]) == [0], \"test case failed: tileswrap(8, 1, [0.0], [1])\""}
{"task_id": 261, "completion_id": 0, "passed": false, "result": "failed: `shape` must have at least two dimensions.", "solution": "import numpy as np\nimport numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate an array initialised with Glorot/Xavier normal distribution.\n\n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        Desired tensor shape. Must have at least two dimensions so that\n        fan-in and fan-out are well defined.\n\n    Returns\n    -------\n    np.ndarray\n        Array of the requested shape whose elements are drawn independently\n        from \ud835\udca9(0, s\u00b2) with  s = \u221a[2 / (fan_in + fan_out)].\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('`shape` must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field = int(np.prod(shape[2:], dtype=int))\n        fan_in = shape[1] * receptive_field\n        fan_out = shape[0] * receptive_field\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape).astype(float)\nnp.random.seed(1)\nshape=(64,32)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (64,32)\"\nnp.random.seed(2)\nshape=(16,3,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (16,3,3,3)\"\nnp.random.seed(3)\nshape=(5,5)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.2,\"mean far from 0 for shape (5,5)\"\nnp.random.seed(4)\nshape=(8,8,1,1)\nW=glorot_normal(shape)\nfan_in=8*1*1\nfan_out=8*1*1\nexp_std=np.sqrt(2/(fan_in+fan_out))\nassert abs(W.std()-exp_std)<0.1,\"std incorrect for shape (8,8,1,1)\"\nnp.random.seed(5)\nshape=(1,1,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (1,1,3,3)\"\nnp.random.seed(6)\nshape=(10,)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (10,)\"\nnp.random.seed(7)\nshape=(12,6,2,2)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.1,\"mean far from 0 for shape (12,6,2,2)\"\nnp.random.seed(8)\nshape=(4,4,4)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (4,4,4)\"\nnp.random.seed(9)\nshape=(128,256)\nW=glorot_normal(shape)\nassert abs(W.std()-np.sqrt(2/(128+256)))<0.05,\"std incorrect for shape (128,256)\""}
{"task_id": 263, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n\n    def apply_activation(z, name):\n        \"\"\"Element-wise activation.\"\"\"\n        if name == 'sigmoid':\n            return 1.0 / (1.0 + np.exp(-z))\n        elif name == 'relu':\n            return np.maximum(0, z)\n        elif name == 'linear':\n            return z\n        else:\n            raise ValueError(f'Unsupported activation: {name}')\n    a = np.asarray(x, dtype=float)\n    for (W_list, act_name) in zip(weights, activations):\n        W = np.asarray(W_list, dtype=float)\n        a_tilde = np.insert(a, 0, 1.0)\n        z = W @ a_tilde\n        a = apply_activation(z, act_name)\n    a = np.round(a, 4)\n    return float(a) if a.size == 1 else a.tolist()\nassert feedforward_predict([1.0, 0.5], [[[0.4,0.3,-0.2],[-0.1,0.2,0.5]], [[0.1,0.2,-0.3]]], ['sigmoid','linear']) == 0.0531, \"test case 1 failed\"\nassert feedforward_predict([0,0], [[[0.5,0.3,-0.1]], [[0.2,0.4]]], ['relu','linear']) == 0.4, \"test case 2 failed\"\nassert feedforward_predict([2.0], [[[0.1,-0.2]]], ['sigmoid']) == 0.4256, \"test case 3 failed\"\nassert feedforward_predict([1,2], [[[0.2,0.4,0.6],[0.1,-0.5,0.2]], [[0.3,0.2,-0.1],[0.5,-0.4,0.3]]], ['relu','linear']) == [0.66,-0.22], \"test case 4 failed\"\nassert feedforward_predict([0.5,-0.5], [[[0.1,0.2,0.3],[0.2,-0.1,0.4]], [[-0.2,0.5,0.1]]], ['sigmoid','sigmoid']) == 0.5262, \"test case 5 failed\"\nassert feedforward_predict([1], [[[0.3,0.4]], [[0.2,0.5]]], ['relu','sigmoid']) == 0.6341, \"test case 6 failed\"\nassert feedforward_predict([3], [[[-1.0,0.5]]], ['linear']) == 0.5, \"test case 7 failed\"\nassert feedforward_predict([-2,1], [[[-0.5,1,2]], [[1.0,0.7]]], ['relu','linear']) == 1.0, \"test case 8 failed\"\nassert feedforward_predict([0.2,0.8], [[[0.1,0.2,0.3]], [[0.05,0.1],[-0.2,0.4]]], ['sigmoid','linear']) == [0.1094,0.0375], \"test case 9 failed\"\nassert feedforward_predict([0], [[[0.0,0.0]]], ['linear']) == 0.0, \"test case 10 failed\""}
{"task_id": 265, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    Segments:\n      \u2022 x \u2264 250             : L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600       : L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700       : L(x) = \u20130.2  * x + 140.00372665317207\n      \u2022 x > 700             : L(x) = 0.003726653172066108\n\n    Result is rounded to 4 decimal places.\n\n    Args:\n        x: Scalar input (int or float).\n\n    Returns:\n        Loss value rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        value = -0.25 * x + 82.50372665317208\n    elif x <= 600:\n        value = 20.00372665317208\n    elif x <= 700:\n        value = -0.2 * x + 140.00372665317207\n    else:\n        value = 0.003726653172066108\n    return round(value, 4)\nassert king_loss_fn(0) == 82.5037, \"test case failed: king_loss_fn(0)\"\nassert king_loss_fn(100) == 57.5037, \"test case failed: king_loss_fn(100)\"\nassert king_loss_fn(250) == 20.0037, \"test case failed: king_loss_fn(250)\"\nassert king_loss_fn(-50) == 95.0037, \"test case failed: king_loss_fn(-50)\"\nassert king_loss_fn(300) == 20.0037, \"test case failed: king_loss_fn(300)\"\nassert king_loss_fn(555) == 20.0037, \"test case failed: king_loss_fn(555)\"\nassert king_loss_fn(600) == 20.0037, \"test case failed: king_loss_fn(600)\"\nassert king_loss_fn(650) == 10.0037, \"test case failed: king_loss_fn(650)\"\nassert king_loss_fn(700) == 0.0037, \"test case failed: king_loss_fn(700)\"\nassert king_loss_fn(800) == 0.0037, \"test case failed: king_loss_fn(800)\""}
{"task_id": 266, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples ``(u, v)`` describing undirected edges that connect\n        vertices ``u`` and ``v``.\n        \u2022 Multiple occurrences of the same edge may be present.  \n        \u2022 Vertices that do not occur in ``V`` are ignored.  \n        \u2022 Self-loops (u == v) are ignored.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list ``G`` where ``G[i]`` contains all vertices adjacent to ``V[i]``.\n        \u2022 The outer list is in the same order as ``V``.  \n        \u2022 Inner lists contain *no duplicates* and are ordered by the vertices\u2019\n          order of appearance in ``V``.\n    \"\"\"\n    index = {vertex: i for (i, vertex) in enumerate(V)}\n    neighbours: List[set] = [set() for _ in V]\n    for (u, v) in E:\n        if u not in index or v not in index:\n            continue\n        if u == v:\n            continue\n        (ui, vi) = (index[u], index[v])\n        neighbours[ui].add(v)\n        neighbours[vi].add(u)\n    G: List[List[Any]] = []\n    for nb_set in neighbours:\n        ordered_nb = sorted(nb_set, key=index.get)\n        G.append(ordered_nb)\n    return G\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 267, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Best stump (see task description).\n    \"\"\"\n    y = y.ravel().astype(int)\n    w = sample_weights.ravel().astype(float)\n    (n_samples, n_features) = X.shape\n    best_feature = -1\n    best_threshold = 0.0\n    best_polarity = 1\n    best_error = np.inf\n    for j in range(n_features):\n        sorted_idx = np.argsort(X[:, j])\n        f_vals = X[sorted_idx, j]\n        lbls = y[sorted_idx]\n        ws = w[sorted_idx]\n        pos_total = ws[lbls == 1].sum()\n        neg_total = ws[lbls == -1].sum()\n        cum_pos = 0.0\n        cum_neg = 0.0\n        i = 0\n        n = n_samples\n        while i < n:\n            theta = f_vals[i]\n            err_p_1 = cum_neg + (pos_total - cum_pos)\n            err_p_neg1 = cum_pos + (neg_total - cum_neg)\n            if err_p_1 < best_error - 1e-12:\n                best_error = err_p_1\n                best_feature = j\n                best_threshold = float(theta)\n                best_polarity = 1\n            if err_p_neg1 < best_error - 1e-12:\n                best_error = err_p_neg1\n                best_feature = j\n                best_threshold = float(theta)\n                best_polarity = -1\n            while i < n and f_vals[i] == theta:\n                if lbls[i] == 1:\n                    cum_pos += ws[i]\n                else:\n                    cum_neg += ws[i]\n                i += 1\n    return {'feature_index': int(best_feature), 'threshold': round(best_threshold, 4), 'polarity': int(best_polarity), 'weighted_error': round(best_error, 4)}\nassert train_decision_stump(np.array([[1],[1],[1]]), np.array([1,-1,1]), np.array([0.1,0.2,0.7]))[\"weighted_error\"] == 0.2, \"test case 5 failed\"\nassert train_decision_stump(np.array([[0],[1]]), np.array([-1,1]), np.array([0.8,0.2]))[\"threshold\"] in (0.0,1.0), \"test case 6 failed\"\nassert train_decision_stump(np.array([[2,0],[0,2],[2,2],[0,0]]), np.array([1,-1,1,-1]), np.ones(4))[\"weighted_error\"] == 0.0, \"test case 7 failed\"\nassert train_decision_stump(np.array([[5],[6],[7]]), np.array([1,1,1]), np.array([0.3,0.3,0.4]))[\"weighted_error\"] == 0.0, \"test case 8 failed\"\nassert train_decision_stump(np.array([[0],[1],[2],[3]]), np.array([1,-1,1,-1]), np.array([0.25,0.25,0.25,0.25]))[\"polarity\"] in (1,-1), \"test case 9 failed\"\nassert train_decision_stump(np.array([[2,3],[2,2],[2,1]]), np.array([-1,1,1]), np.ones(3))[\"feature_index\"] == 1, \"test case 10 failed\""}
{"task_id": 268, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import combinations, permutations\nimport numpy as np\nfrom itertools import combinations, permutations\nfrom itertools import combinations, permutations\nimport numpy as np\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi G(n,p) random graph.\n\n    Parameters\n    ----------\n    n_vertices : int\n        Number of vertices (labelled 0 \u2026 n_vertices-1).\n    edge_prob  : float, default 0.5\n        Probability p that any admissible edge exists.\n    directed   : bool, default False\n        If True build a directed graph, otherwise an undirected one.\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix A where A[i][j] == 1  iff  edge i\u2192j exists.\n        The matrix contains only integers 0/1 and has shape\n        (n_vertices, n_vertices).  When n_vertices == 1, [[0]] is\n        returned.\n    \"\"\"\n    if n_vertices == 1:\n        return [[0]]\n    if n_vertices <= 0:\n        raise ValueError('n_vertices must be a positive integer.')\n    if not 0.0 <= edge_prob <= 1.0:\n        raise ValueError('edge_prob must be in the interval [0, 1].')\n    A = np.zeros((n_vertices, n_vertices), dtype=int)\n    rng_rand = np.random.rand\n    if directed:\n        for i in range(n_vertices):\n            for j in range(n_vertices):\n                if i == j:\n                    continue\n                if rng_rand() <= edge_prob:\n                    A[i, j] = 1\n    else:\n        for i in range(n_vertices):\n            for j in range(i + 1, n_vertices):\n                if rng_rand() <= edge_prob:\n                    A[i, j] = A[j, i] = 1\n    return A.tolist()\nimport numpy as np\nnp.random.seed(0)\nassert random_unweighted_graph(1, 1.0, False) == [[0]], \"test failed: single vertex graph\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 0.0, False) == [[0,0],[0,0]], \"test failed: no edges undirected\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 1.0, False) == [[0,1],[1,0]], \"test failed: full graph undirected\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 0.0, True) == [[0,0],[0,0]], \"test failed: no edges directed\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 1.0, True) == [[0,1],[1,0]], \"test failed: full graph directed\"\nnp.random.seed(0)\nassert random_unweighted_graph(3, 1.0, False) == [[0,1,1],[1,0,1],[1,1,0]], \"test failed: triangle full\"\nnp.random.seed(0)\nassert random_unweighted_graph(3, 0.0, False) == [[0,0,0],[0,0,0],[0,0,0]], \"test failed: triangle empty\"\nnp.random.seed(1)\nassert random_unweighted_graph(3, 0.5, False) == [[0,1,0],[1,0,1],[0,1,0]], \"test failed: seeded example\"\nnp.random.seed(0)\nassert random_unweighted_graph(4, 0.0, False) == [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], \"test failed: 4-vertex empty graph\"\nnp.random.seed(0)\nassert random_unweighted_graph(4, 1.0, False) == [[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]], \"test failed: 4-vertex clique\""}
{"task_id": 269, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    layer1_params = state_dimensions * 164 + 164\n    layer2_params = 164 * action_dimensions + action_dimensions\n    return layer1_params + layer2_params\nassert count_trainable_params(4, 2) == 1150, \"failed for (4,2)\"\nassert count_trainable_params(1, 1) == 493, \"failed for (1,1)\"\nassert count_trainable_params(10, 5) == 2629, \"failed for (10,5)\"\nassert count_trainable_params(3, 7) == 1811, \"failed for (3,7)\"\nassert count_trainable_params(20, 20) == 6744, \"failed for (20,20)\"\nassert count_trainable_params(100, 100) == 33064, \"failed for (100,100)\""}
{"task_id": 270, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Return best (rounded) expected reward and corresponding arm index.\n\n    Parameters\n    ----------\n    context : np.ndarray, shape (D, K)\n        Column k holds the D\u2013dimensional context vector x_{t,k}.\n    thetas  : np.ndarray, shape (D, K)\n        Column k holds the parameter vector \u03b8_k for arm k.\n\n    Returns\n    -------\n    (best_reward, best_arm) : (float, int)\n        best_reward \u2013 maximal expected reward rounded to 4 decimals,\n        best_arm    \u2013 smallest index of an arm that attains best_reward\n                      after rounding.\n    \"\"\"\n    if context.shape != thetas.shape:\n        raise ValueError('context and thetas must have identical shape (D, K).')\n    if context.ndim != 2:\n        raise ValueError('context and thetas must be 2-D arrays (D, K).')\n    rewards = np.sum(context * thetas, axis=0)\n    rounded = np.round(rewards, 4)\n    best_reward = np.max(rounded)\n    best_indices = np.where(rounded == best_reward)[0]\n    best_arm = int(best_indices.min())\n    return (float(best_reward), best_arm)\nassert oracle_payoff(np.array([[0.5, 1.0],[1.5, 0.2]]), np.array([[0.1, 0.3],[0.4, 0.2]])) == (0.65, 0), \"test case failed: example input\"\nassert oracle_payoff(np.array([[1,2,3],[4,5,6]]), np.array([[0.1,0.2,0.3],[0.4,0.5,0.6]])) == (4.5, 2), \"test case failed: 3-arm matrix\"\nassert oracle_payoff(np.array([[-1,2],[3,-4],[5,6]]), np.array([[-0.2,0.3],[0.4,-0.5],[0.6,0.7]])) == (6.8, 1), \"test case failed: negative values\"\nassert oracle_payoff(np.array([[1,1],[1,1]]), np.array([[1,1],[1,1]])) == (2.0, 0), \"test case failed: tie \u2011 choose smallest index\"\nassert oracle_payoff(np.array([[1],[2],[3]]), np.array([[0.1],[0.2],[0.3]])) == (1.4, 0), \"test case failed: single arm\"\nassert oracle_payoff(np.array([[0,1,0.5],[1,0,0.5]]), np.array([[0.5,0.2,0.1],[0.1,0.9,0.2]])) == (0.2, 1), \"test case failed: mixed zeros\"\nassert oracle_payoff(np.array([[-1,-2],[2,1]]), np.array([[0.5,0.5],[-0.5,-0.5]])) == (-1.5, 0), \"test case failed: negative reward tie\"\nassert oracle_payoff(np.array([[0.3333,0.6667],[0.1,0.2]]), np.array([[0.2,0.4],[0.3,0.6]])) == (0.3867, 1), \"test case failed: rounding check\"\nassert oracle_payoff(np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]), np.ones((4,4))) == (1.0, 0), \"test case failed: identity context\"\nassert oracle_payoff(np.array([[2,4],[6,8]]), np.array([[0.5,0.25],[0.75,1]])) == (9.0, 1), \"test case failed: larger numbers\""}
{"task_id": 271, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\"\"\"\n    l_true = np.asarray(left_true, dtype=float)\n    l_pred = np.asarray(left_pred, dtype=float)\n    r_true = np.asarray(right_true, dtype=float)\n    r_pred = np.asarray(right_pred, dtype=float)\n    H_L = l_true.size\n    H_R = r_true.size\n    if H_L == 0 or H_R == 0:\n        return 0.0\n    G_L = np.sum(l_pred - l_true)\n    G_R = np.sum(r_pred - r_true)\n    G_P = G_L + G_R\n    H_P = H_L + H_R\n    gain = 0.5 * (G_L ** 2 / H_L + G_R ** 2 / H_R - G_P ** 2 / H_P)\n    gain_rounded = round(gain, 4)\n    if gain_rounded == -0.0:\n        gain_rounded = 0.0\n    return gain_rounded\nassert xgboost_split_gain([3, 5], [2.5, 5.5], [2, 7], [2, 8]) == 0.125, \"failed on example 1\"\nassert xgboost_split_gain([1, 2], [1, 2], [3, 4], [3, 4]) == 0.0, \"failed when gain should be zero\"\nassert xgboost_split_gain([0], [1], [0], [-1]) == 1.0, \"failed on opposite gradients\"\nassert xgboost_split_gain([2, 2, 2], [3, 3, 3], [1, 1], [1, 1]) == 0.6, \"failed on mixed split 1\"\nassert xgboost_split_gain([1], [2], [3], [4]) == 0.0, \"failed on zero-gain split\"\nassert xgboost_split_gain([5, 6], [4, 5], [7], [8]) == 1.3333, \"failed on mixed split 2\"\nassert xgboost_split_gain([0], [0.5], [0.5], [0.5]) == 0.0625, \"failed on uneven sample counts\"\nassert xgboost_split_gain([1, 1, 1], [1, 1, 1], [1, 2], [2, 2]) == 0.15, \"failed on partially perfect left\"\nassert xgboost_split_gain([2, 3], [2, 3], [4, 5], [5, 6]) == 0.5, \"failed on right only error\"\nassert xgboost_split_gain([10, 10, 10], [9, 9, 9], [5, 5, 5], [5, 5, 5]) == 0.75, \"failed on big left error\""}
{"task_id": 273, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float (rounded to 4 decimals) or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n <= 1:\n        return (None, 0.0)\n\n    def entropy(counter):\n        total = sum(counter.values())\n        if total == 0:\n            return 0.0\n        h = 0.0\n        for cnt in counter.values():\n            p = cnt / total\n            h -= p * math.log2(p)\n        return h\n    pairs = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_feat = [p[0] for p in pairs]\n    sorted_label = [p[1] for p in pairs]\n    if sorted_feat[0] == sorted_feat[-1]:\n        return (None, 0.0)\n    right_counts = Counter(sorted_label)\n    left_counts = Counter()\n    parent_entropy = entropy(right_counts)\n    best_gain = 0.0\n    best_threshold = None\n    eps = 1e-12\n    for i in range(n - 1):\n        lbl = sorted_label[i]\n        left_counts[lbl] += 1\n        right_counts[lbl] -= 1\n        if right_counts[lbl] == 0:\n            del right_counts[lbl]\n        if sorted_feat[i] != sorted_feat[i + 1]:\n            thr = (sorted_feat[i] + sorted_feat[i + 1]) / 2.0\n            n_left = i + 1\n            n_right = n - n_left\n            gain = parent_entropy - n_left / n * entropy(left_counts) - n_right / n * entropy(right_counts)\n            if gain > best_gain + eps:\n                (best_gain, best_threshold) = (gain, thr)\n            elif abs(gain - best_gain) <= eps and best_gain > 0.0:\n                best_threshold = min(best_threshold, thr)\n    if best_threshold is None:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_gain, 4))\nassert best_split([2, 3, 10, 19], [0, 0, 1, 1]) == (6.5, 1.0), \"failed on perfect 2-class separation\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 1]) == (3.5, 0.8113), \"failed on unbalanced classes\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 0]) == (None, 0.0), \"failed on pure node\"\nassert best_split([1, 2, 3, 4], [0, 1, 0, 1]) == (1.5, 0.3113), \"failed on symmetric classes\"\nassert best_split([1, 2, 5, 6], [0, 0, 1, 1]) == (3.5, 1.0), \"failed on separated clusters\"\nassert best_split([10, 20, 30], [0, 1, 1]) == (15.0, 0.9183), \"failed on small dataset\"\nassert best_split([1, 2], [0, 1]) == (1.5, 1.0), \"failed on two-point perfect split\"\nassert best_split([1, 2], [0, 0]) == (None, 0.0), \"failed on two identical labels\"\nassert best_split([1, 2, 3, 4, 5], [0, 0, 1, 1, 1]) == (2.5, 0.971), \"failed on 5-point uneven split\"\nassert best_split([3, 3, 3, 3], [0, 1, 0, 1]) == (None, 0.0), \"failed on identical feature values\""}
{"task_id": 274, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    if isinstance(values, np.ndarray):\n        if values.ndim != 1:\n            raise ValueError('Input array must be one-dimensional.')\n        return np.clip(values, -5, 5).tolist()\n    if isinstance(values, (list, tuple)):\n        return [5 if x > 5 else -5 if x < -5 else x for x in values]\n    raise TypeError('Input must be a list or a one-dimensional NumPy array.')\nassert small_norm_clip([-10, -3, 0, 2, 20]) == [-5, -3, 0, 2, 5], \"test case failed: small_norm_clip([-10, -3, 0, 2, 20])\"\nassert small_norm_clip([5, -5, 4.9, -4.9]) == [5, -5, 4.9, -4.9], \"test case failed: small_norm_clip([5, -5, 4.9, -4.9])\"\nassert small_norm_clip([0]) == [0], \"test case failed: small_norm_clip([0])\"\nassert small_norm_clip([6, -6]) == [5, -5], \"test case failed: small_norm_clip([6, -6])\"\nassert small_norm_clip(np.array([-7.5, 7.5])) == [-5.0, 5.0], \"test case failed: small_norm_clip(np.array([-7.5, 7.5]))\"\nassert small_norm_clip([]) == [], \"test case failed: small_norm_clip([])\"\nassert small_norm_clip([3.333, -5.001]) == [3.333, -5], \"test case failed: small_norm_clip([3.333, -5.001])\"\nassert small_norm_clip([100, -100, 0]) == [5, -5, 0], \"test case failed: small_norm_clip([100, -100, 0])\"\nassert small_norm_clip([4.9999, -4.9999]) == [4.9999, -4.9999], \"test case failed: small_norm_clip([4.9999, -4.9999])\""}
{"task_id": 276, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport string\nfrom collections import Counter\nimport math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    \"\"\"Return base-10 log-probability of *sentence* under an additive-smoothed\n    N-gram model that is trained on *corpus*.\"\"\"\n    if N < 1:\n        raise ValueError('N must be a positive integer.')\n    if k <= 0:\n        raise ValueError('k (smoothing parameter) must be > 0.')\n    punct = set(string.punctuation)\n\n    def tokenize(text: str) -> list[str]:\n        \"\"\"Lower-case, white-space split, strip leading/trailing punctuation.\"\"\"\n        out = []\n        for tok in text.lower().split():\n            tok = tok.strip(string.punctuation)\n            if tok:\n                out.append(tok)\n        return out\n    vocab: set[str] = set()\n    sentences_tokens: list[list[str]] = []\n    total_tokens = 0\n    for sent in corpus:\n        toks = tokenize(sent)\n        padded = ['<bol>', *toks, '<eol>']\n        sentences_tokens.append(padded)\n        vocab.update(padded)\n        total_tokens += len(padded)\n    vocab.update({'<bol>', '<eol>'})\n    if unk:\n        vocab.add('<unk>')\n    V = len(vocab)\n    if N == 1:\n        unigram_counts = Counter()\n        for toks in sentences_tokens:\n            unigram_counts.update(toks)\n    else:\n        ngram_counts = Counter()\n        hist_counts = Counter()\n        for toks in sentences_tokens:\n            for i in range(len(toks) - N + 1):\n                ngram = tuple(toks[i:i + N])\n                ngram_counts[ngram] += 1\n                hist_counts[ngram[:-1]] += 1\n    tgt_tokens = tokenize(sentence)\n    if unk:\n        tgt_tokens = [t if t in vocab else '<unk>' for t in tgt_tokens]\n    tgt_tokens = ['<bol>', *tgt_tokens, '<eol>']\n    log_prob = 0.0\n    if N == 1:\n        denom = total_tokens + k * V\n        for w in tgt_tokens:\n            num = unigram_counts.get(w, 0) + k\n            log_prob += math.log10(num / denom)\n    else:\n        for i in range(len(tgt_tokens) - N + 1):\n            ngram = tuple(tgt_tokens[i:i + N])\n            history = ngram[:-1]\n            num = ngram_counts.get(ngram, 0) + k\n            denom = hist_counts.get(history, 0) + k * V\n            log_prob += math.log10(num / denom)\n    return round(log_prob, 4)\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"I love cats\", 2) == -2.2095, \"test 1 failed: bigram, seen words\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"I love birds\", 2) == -2.7536, \"test 2 failed: bigram, unseen word\"\nassert additive_ngram_log_prob([\"a a a b\"], \"a b\", 1) == -2.6604, \"test 3 failed: unigram standard\"\nassert additive_ngram_log_prob([\"a a a b\"], \"c\", 1) == -2.5221, \"test 4 failed: unigram with <unk>\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"dogs love\", 2) == -2.8116, \"test 5 failed: bigram, unseen order\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"birds birds\", 2) == -2.6444, \"test 6 failed: bigram, consecutive <unk>\"\nassert additive_ngram_log_prob([\"to be or not to be\"], \"to be or\", 3) == -2.1584, \"test 7 failed: trigram, seen history\"\nassert additive_ngram_log_prob([\"to be or not to be\"], \"or not to\", 3) == -2.3502, \"test 8 failed: trigram, partly unseen history\"\nassert additive_ngram_log_prob([\"hello world\"], \"hello world\", 2) == -1.4314, \"test 9 failed: minimal corpus, perfect match\"\nassert additive_ngram_log_prob([\"hello world\"], \"world hello\", 2) == -2.3345, \"test 10 failed: minimal corpus, unseen order\""}
{"task_id": 277, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    action_space = env['action_space']\n    observation_space = env['observation_space']\n    tuple_action = isinstance(action_space, (tuple, dict))\n    tuple_obs = isinstance(observation_space, (tuple, dict))\n    return (tuple_action, tuple_obs)\nassert is_tuple({\"action_space\": (0, 1), \"observation_space\": {\"x\": 0}}) == (True, True), \"test case failed: both composite\"\nassert is_tuple({\"action_space\": [0, 1], \"observation_space\": (0, 1)}) == (False, True), \"test case failed: obs composite (tuple)\"\nassert is_tuple({\"action_space\": {\"a\": 1}, \"observation_space\": 42}) == (True, False), \"test case failed: action composite (dict)\"\nassert is_tuple({\"action_space\": 3.14, \"observation_space\": \"state\"}) == (False, False), \"test case failed: none composite\"\nassert is_tuple({\"action_space\": ((1, 2), (3, 4)), \"observation_space\": {\"a\": {\"b\": 2}}}) == (True, True), \"test case failed: nested composites\"\nassert is_tuple({\"action_space\": None, \"observation_space\": None}) == (False, False), \"test case failed: None spaces\"\nassert is_tuple({\"action_space\": [1, 2, 3], \"observation_space\": {}}) == (False, True), \"test case failed: observation dict\"\nassert is_tuple({\"action_space\": (\"left\", \"right\"), \"observation_space\": -1}) == (True, False), \"test case failed: action tuple\"\nassert is_tuple({\"action_space\": tuple(range(100)), \"observation_space\": {i: i*i for i in range(10)}}) == (True, True), \"test case failed: large composites\"\nassert is_tuple({\"action_space\": (1, {\"a\": 2}), \"observation_space\": {\"tuple\": (1, 2)}}) == (True, True), \"test case failed: mixed inner types\""}
{"task_id": 278, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    node = tree\n    while True:\n        if 'value' in node:\n            return node['value']\n        feature_i = node['feature_i']\n        threshold = node['threshold']\n        if feature_i >= len(sample) or feature_i < 0:\n            raise IndexError(f'Feature index {feature_i} is out of bounds for sample of length {len(sample)}')\n        if sample[feature_i] <= threshold:\n            node = node['true_branch']\n        else:\n            node = node['false_branch']\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': 2.5, 'true_branch': {'value': 1}, 'false_branch': {'value': 0}}, [3.0]) == 0, \"test case failed: simple_tree, sample [3.0]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': 2.5, 'true_branch': {'value': 1}, 'false_branch': {'value': 0}}, [2.0]) == 1, \"test case failed: simple_tree, sample [2.0]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.4, 1.2]) == 2, \"test case failed: deep_tree, sample [0.4,1.2]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.6, 1.2]) == 3, \"test case failed: deep_tree, sample [0.6,1.2]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.1, 0.5]) == -1, \"test case failed: deep_tree, sample [0.1,0.5]\"\nassert evaluate_decision_tree({'value': 42}, [10, 20, 30]) == 42, \"test case failed: leaf_tree should always return 42\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [-2, 3]) == 'inside', \"test case failed: neg_tree, sample [-2,3]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [0, 0]) == 'edge', \"test case failed: neg_tree, sample [0,0]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [1, 1]) == 'outside', \"test case failed: neg_tree, sample [1,1]\""}
{"task_id": 279, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground-truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        (mse, gradient_list, accuracy), all rounded to 4 decimals.\n    \"\"\"\n    y_true = np.asarray(y_true, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    n = y_true.size\n    diff = y_pred - y_true\n    mse = np.mean(diff ** 2)\n    grad = 2.0 / n * diff\n    pred_class = (y_pred >= 0.5).astype(int)\n    true_class = y_true.astype(int)\n    accuracy = np.mean(pred_class == true_class)\n    mse = round(float(mse), 4)\n    grad_list = [round(float(g), 4) for g in grad.tolist()]\n    accuracy = round(float(accuracy), 4)\n    return (mse, grad_list, accuracy)\nassert mse_loss([1, 0, 1], [0.8, 0.2, 0.6]) == (0.08, [-0.1333, 0.1333, -0.2667], 1.0), \"test case failed: mse_loss([1,0,1],[0.8,0.2,0.6])\"\nassert mse_loss([0, 0, 0], [0, 0, 0]) == (0.0, [0.0, 0.0, 0.0], 1.0), \"test case failed: mse_loss all zeros\"\nassert mse_loss([1, 1], [1, 1]) == (0.0, [0.0, 0.0], 1.0), \"test case failed: mse_loss perfect ones\"\nassert mse_loss([1, 0, 1, 0], [0, 1, 0, 1]) == (1.0, [-0.5, 0.5, -0.5, 0.5], 0.0), \"test case failed: mse_loss inverted predictions\"\nassert mse_loss([0, 1], [0.49, 0.51]) == (0.2401, [0.49, -0.49], 1.0), \"test case failed: mse_loss edge threshold\"\nassert mse_loss([0, 0, 1, 1], [0.25, 0.75, 0.35, 0.65]) == (0.2925, [0.125, 0.375, -0.325, -0.175], 0.5), \"test case failed: mse_loss mixed predictions\"\nassert mse_loss([1,1,1,0,0], [0.9,0.8,0.2,0.1,0.4]) == (0.172, [-0.04, -0.08, -0.32, 0.04, 0.16], 0.8), \"test case failed: mse_loss random 5\"\nimport numpy as np\nassert mse_loss(np.array([0,1,0,1]), np.array([0.2,0.8,0.3,0.7])) == (0.065, [0.1, -0.1, 0.15, -0.15], 1.0), \"test case failed: mse_loss numpy arrays\"\nassert mse_loss([1,0,1,0,1,0], [0.6,0.3,0.9,0.2,0.4,0.7]) == (0.1917, [-0.1333, 0.1, -0.0333, 0.0667, -0.2, 0.2333], 0.6667), \"test case failed: mse_loss length 6\"\nassert mse_loss([0], [0.9]) == (0.81, [1.8], 0.0), \"test case failed: mse_loss single sample\""}
{"task_id": 280, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector / matrix / tensor of any shape.\n    alpha : float\n        Non-negative regularization strength.\n    return_grad : bool, optional (default=False)\n        \u2022 False \u2192 return the scalar regularization value  \n        \u2022 True  \u2192 return the gradient (same shape as *w*)\n\n    Returns\n    -------\n    float or np.ndarray\n        Rounded to 4 decimal places as required.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative')\n    if return_grad:\n        grad = alpha * w\n        return np.round(grad, 4)\n    else:\n        value = 0.5 * alpha * np.sum(w ** 2)\n        return float(np.round(value, 4))\nassert l2_regularization(np.array([1.0, -2.0, 3.0]), 0.1) == 0.7, \"Failed on scalar value with vector input\"\nassert np.allclose(l2_regularization(np.array([1.0, -2.0, 3.0]), 0.1, True), np.array([0.1, -0.2, 0.3])), \"Failed on gradient with vector input\"\nassert l2_regularization(np.array([0.0]), 0.3) == 0.0, \"Failed on zero vector value\"\nassert np.allclose(l2_regularization(np.zeros(5), 0.3, True), np.zeros(5)), \"Failed on zero vector gradient\"\nassert l2_regularization(np.array([4.0]), 2.0) == 16.0, \"Failed on single weight value\"\nassert np.allclose(l2_regularization(np.array([4.0]), 2.0, True), np.array([8.0])), \"Failed on single weight gradient\"\nassert l2_regularization(np.array([2.0, 2.0, 2.0, 2.0]), 0.5) == 4.0, \"Failed on equal elements value\"\nassert np.allclose(l2_regularization(np.array([2.0, 2.0, 2.0, 2.0]), 0.5, True), np.array([1.0, 1.0, 1.0, 1.0])), \"Failed on equal elements gradient\"\nassert l2_regularization(np.array([[1.0, 2.0], [3.0, 4.0]]), 0.2) == 3.0, \"Failed on matrix value\"\nassert np.allclose(l2_regularization(np.array([[1.0, 2.0], [3.0, 4.0]]), 0.2, True), np.array([[0.2, 0.4], [0.6, 0.8]])), \"Failed on matrix gradient\""}
{"task_id": 281, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"Factory that returns a callable implementing L1 (Lasso) regularisation.\n\n    The resulting object *r* supports\n        value = r(w)          # penalty      (Python float)\n        grad  = r.grad(w)     # gradient     (NumPy array, same shape as w)\n\n    Parameters\n    ----------\n    alpha : float\n        Non-negative strength of the regularisation.  If alpha == 0 both the\n        penalty and its gradient are identically zero.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative.')\n\n    class _L1:\n        __slots__ = ('alpha',)\n\n        def __init__(self, alpha_):\n            self.alpha = float(alpha_)\n\n        def __call__(self, w):\n            \"\"\"\n            Parameters\n            ----------\n            w : np.ndarray\n                Weight array (any shape)\n\n            Returns\n            -------\n            float\n                J_L1(w) = alpha * ||w||_1\n            \"\"\"\n            if self.alpha == 0.0:\n                return 0.0\n            return float(self.alpha * np.abs(w).sum())\n\n        def grad(self, w):\n            \"\"\"\n            Gradient of the L1 penalty with respect to w.\n\n            Parameters\n            ----------\n            w : np.ndarray\n                Weight array\n\n            Returns\n            -------\n            np.ndarray\n                alpha * sign(w)  (same shape as w, zeros where w == 0)\n            \"\"\"\n            if self.alpha == 0.0:\n                return np.zeros_like(w, dtype=w.dtype)\n            return self.alpha * np.sign(w).astype(w.dtype, copy=False)\n\n        def __repr__(self):\n            return f'L1Regularization(alpha={self.alpha})'\n    return _L1(alpha)\nimport numpy as np\nreg1 = L1Regularization(0.1)\nreg2 = L1Regularization(0.0)\nw2 = np.random.randn(5,3)\nreg3 = L1Regularization(2.5)\nw3 = np.array([[0.0, 4.0], [-3.0, 1.0]])\nreg4 = L1Regularization(1.0)\nw4 = np.array([0.0, 0.0, 0.0])"}
{"task_id": 282, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nfrom typing import Union, List, Tuple\nNumber = Union[int, float]\ndef running_stats(data: List[Number]) -> Tuple[float, float, float]:\n    \"\"\"Compute sample mean, variance and standard deviation in one pass.\n\n    Parameters\n    ----------\n    data : list[int | float]\n        Stream of numeric observations (may be empty).\n\n    Returns\n    -------\n    (mean, variance, std) : tuple[float, float, float]\n        Sample statistics rounded to 4 decimal places.  For an empty\n        input all three numbers are 0.0.\n    \"\"\"\n    if not data:\n        return (0.0, 0.0, 0.0)\n    n = 0\n    mean = 0.0\n    s = 0.0\n    for x in data:\n        n += 1\n        delta = x - mean\n        mean += delta / n\n        s += delta * (x - mean)\n    variance = s / (n - 1) if n > 1 else 0.0\n    std = math.sqrt(variance)\n    return (round(mean, 4), round(variance, 4), round(std, 4))\nassert running_stats([4, 7, 13, 16]) == (10.0, 30.0, 5.4772), \"failed on [4, 7, 13, 16]\"\nassert running_stats([1]) == (1.0, 0.0, 0.0), \"failed on single element\"\nassert running_stats([1, 1, 1, 1]) == (1.0, 0.0, 0.0), \"failed on identical elements\"\nassert running_stats([1, -1, 1, -1]) == (0.0, 1.3333, 1.1547), \"failed on alternating signs\"\nassert running_stats([-5, -4, -3, -2, -1]) == (-3.0, 2.5, 1.5811), \"failed on negative numbers\"\nassert running_stats([1_000_000, 1_000_001]) == (1000000.5, 0.5, 0.7071), \"failed on large numbers\"\nassert running_stats([0, 0, 0, 5, 5]) == (2.0, 7.5, 2.7386), \"failed on mixed zeros and fives\"\nassert running_stats([10, 20, 30]) == (20.0, 100.0, 10.0), \"failed on simple arithmetic progression\"\nassert running_stats([2.5, 3.5]) == (3.0, 0.5, 0.7071), \"failed on floats\"\nassert running_stats(list(range(1, 101))) == (50.5, 841.6667, 29.0115), \"failed on 1..100\""}
{"task_id": 283, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _stable_sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"Numerically stable sigmoid.\"\"\"\n    pos_mask = x >= 0\n    neg_mask = ~pos_mask\n    out = np.empty_like(x, dtype=float)\n    out[pos_mask] = 1.0 / (1.0 + np.exp(-x[pos_mask]))\n    exp_x = np.exp(x[neg_mask])\n    out[neg_mask] = exp_x / (1.0 + exp_x)\n    return out\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute Newton leaf value and split gain for binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true binary labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw scores (before sigmoid).\n    regularization : float, default 1.0\n        L2-regularisation term \u03bb.\n\n    Returns\n    -------\n    list[float]\n        [leaf_value, gain] \u2013 each rounded to 4 decimals.\n    \"\"\"\n    y = np.asarray(actual, dtype=float).ravel()\n    f = np.asarray(predicted, dtype=float).ravel()\n    if y.shape != f.shape:\n        raise ValueError('`actual` and `predicted` must have the same shape.')\n    p = _stable_sigmoid(f)\n    g = p - y\n    h = p * (1.0 - p)\n    sum_g = g.sum()\n    sum_h = h.sum()\n    denom = sum_h + regularization\n    leaf_value = sum_g / denom\n    gain = 0.5 * sum_g ** 2 / denom\n    leaf_value = round(leaf_value, 4)\n    gain = round(gain, 4)\n    return [leaf_value, gain]\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([0.0, 0.0])) == [0.0, 0.0], \"test case failed: all-zero scores\"\nassert binary_log_loss_metrics(np.array([1]), np.array([2.0])) == [-0.1079, 0.0064], \"test case failed: single positive sample\"\nassert binary_log_loss_metrics(np.array([0]), np.array([-2.0])) == [0.1079, 0.0064], \"test case failed: single negative sample\"\nassert binary_log_loss_metrics(np.array([1, 0, 1, 0]), np.array([0.5, -0.5, 1.0, -1.5])) == [-0.0476, 0.0021], \"test case failed: mixed labels\"\nassert binary_log_loss_metrics(np.array([0, 0, 0]), np.array([0.0, 0.0, 0.0])) == [0.8571, 0.6429], \"test case failed: all negatives same score\"\nassert binary_log_loss_metrics(np.array([1, 1, 1]), np.array([0.0, 0.0, 0.0])) == [-0.8571, 0.6429], \"test case failed: all positives same score\"\nassert binary_log_loss_metrics(np.array([0, 1]), np.array([-1.0, 1.0])) == [0.0, 0.0], \"test case failed: symmetric scores\"\nassert binary_log_loss_metrics(np.array([1, 0, 1, 0, 1, 0]), np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])) == [0.0, 0.0], \"test case failed: alternating labels\"\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([10.0, -10.0])) == [0.0, 0.0], \"test case failed: extreme scores\"\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([0.5, -0.5]), regularization=0.5) == [0.0, 0.0], \"test case failed: custom regularisation\""}
{"task_id": 284, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef iht_get_index(obj: object, size: int, table: dict, overfull_count: list[int], readonly: bool=False) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    if obj in table:\n        return table[obj]\n    if readonly:\n        return None\n    if len(table) < size:\n        index = len(table)\n        table[obj] = index\n        return index\n    collision_index = hash(obj) % size\n    overfull_count[0] += 1\n    return collision_index\n# 1 first insertion\\n_table = {}\\n_over = [0]\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 1'\\nassert _table == {'dog': 0} and _over == [0], 'failed test 1 (state)'\n# 2 same object again, should not change anything\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 2'\n# 3 readonly request for unknown object\\nassert iht_get_index('cat', 3, _table, _over, readonly=True) is None, 'failed test 3'\n# 4 fill the table to capacity\\nassert iht_get_index('cat', 3, _table, _over) == 1, 'failed test 4'\\nassert iht_get_index('bird', 3, _table, _over) == 2, 'failed test 4'\n# 5 collision after full\\ncollision_idx = iht_get_index('fish', 3, _table, _over)\\nassert 0 <= collision_idx < 3, 'failed test 5'\n# 6 repeated collision\\nassert iht_get_index('fish', 3, _table, _over) == collision_idx, 'failed test 6'\n# 7 new collision\\nidx_new = iht_get_index(('tuple', 42), 3, _table, _over)\\nassert 0 <= idx_new < 3, 'failed test 7'\n# 8 original entries unaffected\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 8'\n# 9 readonly after collision\\nassert iht_get_index('unknown', 3, _table, _over, readonly=True) is None, 'failed test 9'\n# 10 collision count correct\\nfor i in range(5):\\n    iht_get_index(f'x{i}', 3, _table, _over)\\nassert _over == [8], 'failed test 10'"}
{"task_id": 285, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list.  \n        If the feature dimensions of *x* and *y* differ, returns -1.\n    \"\"\"\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    elif x.ndim != 2:\n        raise ValueError('Input x must be 1-D or 2-D.')\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    elif y.ndim != 2:\n        raise ValueError('Input y must be 1-D or 2-D.')\n    if x.shape[1] != y.shape[1]:\n        return -1\n    return (x @ y.T).tolist()\nimport numpy as np\nassert linear_kernel(np.array([1,2,3]), np.array([4,5,6])) == [[32]], \"failed on 1-D vs 1-D\"\nassert linear_kernel(np.array([[1,2],[3,4]]), np.array([[5,6],[7,8]])) == [[17,23],[39,53]], \"failed on 2\u00d72 vs 2\u00d72\"\nassert linear_kernel(np.array([[1,2,3],[4,5,6]]), np.array([[7,8,9],[1,0,1]])) == [[50,4],[122,10]], \"failed on 2\u00d73 vs 2\u00d73\"\nassert linear_kernel(np.array([[1,2]]), np.array([[3,4],[5,6]])) == [[11,17]], \"failed on 1\u00d7d vs 2\u00d7d\"\nassert linear_kernel(np.array([[3,4],[5,6]]), np.array([1,2])) == [[11],[17]], \"failed on 2\u00d7d vs 1\u00d7d\"\nassert linear_kernel(np.array([[1,2]]), np.array([[1,2,3]])) == -1, \"failed on mismatched features (2 vs 3)\"\nassert linear_kernel(np.array([1,2,3]), np.array([1,2])) == -1, \"failed on mismatched 1-D lengths\"\nassert linear_kernel(np.array([[1,2,3]]), np.array([[4,5,6],[7,8,9],[1,1,1]])) == [[32,50,6]], \"failed on 1\u00d73 vs 3\u00d73\"\nassert linear_kernel(np.array([[2,0],[0,2]]), np.array([[1,1]])) == [[2],[2]], \"failed on 2\u00d72 vs 1\u00d72\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Retrieve an initializer function by its name.\n\n    Args:\n        name: The name of the initializer to look up (e.g. \"zeros_init\").\n\n    Returns:\n        The corresponding callable weight initializer.\n\n    Raises:\n        ValueError: If `name` is not found or is not callable.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 287, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input tensor of shape (N, C, H, W).\n    pool_shape : (int, int)\n        Height and width of the pooling window  (p_h, p_w).\n    stride : (int, int)\n        Vertical and horizontal stride          (s_h, s_w).\n    accum_grad : np.ndarray\n        Gradient wrt. the pooled output. Shape must match the\n        forward-pass output.\n\n    Returns\n    -------\n    tuple[list, list]\n        (pooled_output, grad_input) \u2013 both rounded to 4 decimals and\n        converted to Python lists.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled = np.zeros((N, C, out_h, out_w), dtype=X.dtype)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                (h_start, h_end) = (i * s_h, i * s_h + p_h)\n                for j in range(out_w):\n                    (w_start, w_end) = (j * s_w, j * s_w + p_w)\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled[n, c, i, j] = window.mean()\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n    scale = 1.0 / (p_h * p_w)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                (h_start, h_end) = (i * s_h, i * s_h + p_h)\n                for j in range(out_w):\n                    (w_start, w_end) = (j * s_w, j * s_w + p_w)\n                    g = accum_grad[n, c, i, j] * scale\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += g\n    pooled = np.round(pooled, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled, grad_input)\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[1]]]])) == ([[[[2.5]]]], [[[[0.25, 0.25], [0.25, 0.25]]]]), \"test case 1 failed: overlapping 2x2 window with unit gradient\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.5, 0.25], [0.5, 1.0, 0.5], [0.25, 0.5, 0.25]]]]), \"test case 2 failed: 3x3 input with overlapping windows\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]), (2, 2), (2, 2), np.ones((1, 2, 1, 1))) == ([[[[2.5]], [[6.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 3 failed: 2 channels, non-overlapping windows\"\nassert average_pool2d(np.arange(32, dtype=float).reshape(2, 1, 4, 4), (2, 2), (2, 2), np.ones((2, 1, 2, 2))) == ([ [[[2.5, 4.5], [10.5, 12.5]]], [[[18.5, 20.5], [26.5, 28.5]]] ], [ [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]], [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]]]), \"test case 4 failed: batch size 2 with non-overlapping windows\"\nassert average_pool2d(np.array([[[[10, 20], [30, 40]]]]), (1, 1), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[10.0, 20.0], [30.0, 40.0]]]], [[[[1.0, 1.0], [1.0, 1.0]]]]), \"test case 5 failed: pooling window 1x1 should be identity\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]]), (2, 2), (2, 2), np.ones((1, 3, 1, 1))) == ([[[[2.5]], [[6.5]], [[10.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 6 failed: three-channel input\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6]]]]), (1, 3), (1, 3), np.ones((1, 1, 2, 1))) == ([[[[2.0], [5.0]]]], [[[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]]]), \"test case 7 failed: pooling window covers full width\"\nassert average_pool2d(np.array([[[[1], [2], [3]]]]), (3, 1), (1, 1), np.ones((1, 1, 1, 1))) == ([[[[2.0]]]], [[[[0.3333], [0.3333], [0.3333]]]]), \"test case 8 failed: pooling window covers full height\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[2]]]])) == ([[[[2.5]]]], [[[[0.5, 0.5], [0.5, 0.5]]]]), \"test case 9 failed: scaled gradient for single window\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.array([[[[1, 2], [3, 4]]]])) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.75, 0.5], [1.0, 2.5, 1.5], [0.75, 1.75, 1.0]]]]), \"test case 10 failed: non-uniform incoming gradient\""}
{"task_id": 288, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length/type mismatches or empty iterables.\n\n    All results are rounded to 4 decimal places.\n    \"\"\"\n    numeric_scalar = (int, float, np.integer, np.floating)\n    is_scalar_a = isinstance(actual, numeric_scalar)\n    is_scalar_p = isinstance(predicted, numeric_scalar)\n    if is_scalar_a and is_scalar_p:\n        return round((actual - predicted) ** 2, 4)\n    if is_scalar_a ^ is_scalar_p:\n        return -1\n    if isinstance(actual, (str, bytes)) or isinstance(predicted, (str, bytes)):\n        return -1\n    try:\n        a_arr = np.asarray(actual, dtype=float)\n        p_arr = np.asarray(predicted, dtype=float)\n    except Exception:\n        return -1\n    if a_arr.ndim != 1 or p_arr.ndim != 1:\n        return -1\n    if a_arr.size == 0 or p_arr.size == 0 or a_arr.size != p_arr.size:\n        return -1\n    mse = np.mean((a_arr - p_arr) ** 2)\n    return round(float(mse), 4)\nassert squared_error(3, 5) == 4, \"test case failed: squared_error(3, 5)\"\nassert squared_error(2.5, 0.5) == 4, \"test case failed: squared_error(2.5, 0.5)\"\nassert squared_error(2, 3) == 1, \"test case failed: squared_error(2, 3)\"\nassert squared_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.375, \"test case failed: list example\"\nassert squared_error([1, 2, 3], [1, 2, 3]) == 0, \"test case failed: perfect prediction\"\nassert squared_error([1, 2], [1, 2, 3]) == -1, \"test case failed: length mismatch\"\nassert squared_error(np.array([1, 2, 3]), np.array([1, 2, 4])) == 0.3333, \"test case failed: numpy array input\"\nassert squared_error((1, 4), (3, 4)) == 2, \"test case failed: tuple input\"\nassert squared_error([1.1, 2.2, 3.3], [1.0, 2.0, 3.0]) == 0.0467, \"test case failed: float rounding\"\nassert squared_error([], []) == -1, \"test case failed: empty iterable input\""}
{"task_id": 289, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    if not entries:\n        return ''\n    formatted_lines = (f'{field}: \"{value}\"' for (field, value) in entries)\n    return '\\n'.join(formatted_lines)\nassert format_entries([(\"username\", \"john_doe\"), (\"password\", \"s3cr3t\")]) == \"username: \\\"john_doe\\\"\\npassword: \\\"s3cr3t\\\"\", \"Test case 1 failed: two simple pairs\"\nassert format_entries([]) == \"\", \"Test case 2 failed: empty list should return empty string\"\nassert format_entries([(\"Quote\", \"He said \\\"Hello\\\"\")]) == \"Quote: \\\"He said \\\"Hello\\\"\\\"\", \"Test case 3 failed: value containing quotes\"\nassert format_entries([(\"a\", \"\"), (\"b\", \"\")]) == \"a: \\\"\\\"\\nb: \\\"\\\"\", \"Test case 4 failed: empty strings as values\"\nassert format_entries([(\"single\", \"one\")]) == \"single: \\\"one\\\"\", \"Test case 5 failed: single pair\"\nassert format_entries([(\"x\", \"1\"), (\"y\", \"2\"), (\"z\", \"3\")]) == \"x: \\\"1\\\"\\ny: \\\"2\\\"\\nz: \\\"3\\\"\", \"Test case 6 failed: three numeric-string pairs\"\nassert format_entries([(\"\", \"blank field\"), (\"space\", \"with space\")]) == \": \\\"blank field\\\"\\nspace: \\\"with space\\\"\", \"Test case 7 failed: empty field name\"\nassert format_entries([(\"UPPER\", \"lower\"), (\"MiXeD\", \"CaSe\")]) == \"UPPER: \\\"lower\\\"\\nMiXeD: \\\"CaSe\\\"\", \"Test case 8 failed: case sensitivity\"\nassert format_entries([(\"special\", \"!@#$%^&*()\")]) == \"special: \\\"!@#$%^&*()\\\"\", \"Test case 9 failed: special characters\"\nassert format_entries([(\"newline\", \"line1\\\\nline2\")]) == \"newline: \\\"line1\\\\nline2\\\"\", \"Test case 10 failed: value containing newline\""}
{"task_id": 290, "completion_id": 0, "passed": false, "result": "failed: failed on threshold mismatch", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\n_TOL = 1e-08\ndef _values_equal(a, b):\n    \"\"\"Compare two prediction values with the required tolerance.\"\"\"\n    try:\n        return np.allclose(a, b, atol=_TOL, rtol=_TOL)\n    except TypeError:\n        return a == b\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return _values_equal(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=_TOL, rtol=_TOL) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 291, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d).\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals, or -1 if *n_components*\n        is outside the valid range.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        return -1\n    if X.ndim != 2:\n        return -1\n    (m, d) = X.shape\n    if not 1 <= n_components <= d:\n        return -1\n    cov_mat = np.cov(X, rowvar=False)\n    (eig_vals, eig_vecs) = np.linalg.eig(cov_mat)\n    eig_vals = eig_vals.real\n    eig_vecs = eig_vecs.real\n    order = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, order]\n    V = eig_vecs[:, :n_components]\n    first_elements_negative = V[0, :] < 0\n    V[:, first_elements_negative] *= -1\n    transformed = X @ V\n    transformed = np.round(transformed, 4)\n    return transformed.tolist()\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[2.1213], [4.9497], [7.7782]], \"test case failed: pca_transform(example 1)\"\nassert pca_transform(np.array([[2, 4], [4, 8], [6, 12]]), 1) == [[4.4721], [8.9443], [13.4164]], \"test case failed: perfect correlation data\"\nassert pca_transform(np.array([[1, 2], [3, 4]]), 0) == -1, \"test case failed: invalid n_components (0)\"\nassert pca_transform(np.array([[1, 2], [3, 4]]), 3) == -1, \"test case failed: n_components greater than number of features\"\nassert pca_transform(np.array([[2, 3], [4, 9], [6, 15]]), 1) == [[3.4785], [9.8031], [16.1276]], \"test case failed: linear relation data\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[0.7071], [-0.7071]], \"test case failed: two point anti-correlation data\"\nassert pca_transform(np.array([[1, 2], [2, 1], [3, 3]]), 1) == [[2.1213], [2.1213], [4.2426]], \"test case failed: mixed data\"\nassert pca_transform(np.array([[1, 2], [3, 2], [5, 2]]), 1) == [[1.0], [3.0], [5.0]], \"test case failed: variance only in first feature\""}
{"task_id": 292, "completion_id": 0, "passed": false, "result": "failed: cutoff must be in [0, 3]", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix (list of lists).\n        parent2: Second parent weight matrix (same shape as *parent1*).\n        cutoff : Column index at which crossover starts (inclusive).\n\n    Returns\n    -------\n        Tuple (child1, child2) with the two children as ordinary Python\n        lists, or -1 if the parent matrices do not have identical shapes.\n    \"\"\"\n    p1 = np.asarray(parent1, dtype=float)\n    p2 = np.asarray(parent2, dtype=float)\n    if p1.ndim != 2 or p2.ndim != 2 or p1.shape != p2.shape:\n        return -1\n    (rows, cols) = p1.shape\n    if not 0 <= cutoff <= cols:\n        raise ValueError(f'cutoff must be in [0, {cols}]')\n    child1 = p1.copy()\n    child2 = p2.copy()\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2[:, cutoff:] = p1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 293, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces.  \n    If the agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    key = agent_name.strip().lower()\n    mapping = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    return mapping.get(key, -1)\nassert map_agent_environment(\"dqn\") == (\"CartPole-v0\", \"unwrapped\"), \"failed on dqn\"\nassert map_agent_environment(\"Ddpg\") == (\"Pendulum-v0\", \"env\"), \"failed on Ddpg (case-insensitive)\"\nassert map_agent_environment(\"A3C\") == (\"Pendulum-v0\", \"unwrapped\"), \"failed on A3C\"\nassert map_agent_environment(\"a2c\") == (\"CartPole-v0\", \"env\"), \"failed on a2c\"\nassert map_agent_environment(\"A2C_MULTI\") == (\"CartPole-v0\", \"raw\"), \"failed on A2C_MULTI\"\nassert map_agent_environment(\"trpo\") == (\"Pendulum-v0\", \"unwrapped\"), \"failed on trpo\"\nassert map_agent_environment(\"random_agent\") == -1, \"failed on unknown agent\"\nassert map_agent_environment(\"  dqn  \") == (\"CartPole-v0\", \"unwrapped\"), \"failed on whitespace handling\"\nassert map_agent_environment(\"\") == -1, \"failed on empty string\"\nassert map_agent_environment(\"A2c\") == (\"CartPole-v0\", \"env\"), \"failed on mixed-case A2c\""}
{"task_id": 294, "completion_id": 0, "passed": false, "result": "failed: name '_build_graph' is not defined", "solution": "from typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert the custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph with the keys\n          * 'is_directed' : bool\n          * '_V2I'        : dict  (vertex label -> consecutive index 0..n-1)\n          * '_G'          : list  (for each vertex index a list with tuples\n                                   (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary mapping every vertex label to a list of (neighbour, weight)\n        tuples.  Lists are sorted lexicographically by the neighbour label.\n        For undirected graphs every edge appears once in each direction.\n    \"\"\"\n    if not G or not G.get('_V2I'):\n        return {}\n    directed: bool = bool(G.get('is_directed', False))\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in G['_V2I']}\n    processed_undirected = set()\n    for edge_list in G['_G']:\n        for (u, v, w) in edge_list:\n            if directed:\n                adj[u].append((v, w))\n            else:\n                key = (u, v) if u <= v else (v, u)\n                if key in processed_undirected:\n                    continue\n                processed_undirected.add(key)\n                adj[u].append((v, w))\n                adj[v].append((u, w))\n    for neighbours in adj.values():\n        neighbours.sort(key=lambda t: str(t[0]))\n    return adj\nassert to_networkx(_build_graph(False, [('A','B',3),('A','C',2),('B','C',4)])) == {'A':[('B',3),('C',2)],'B':[('A',3),('C',4)],'C':[('A',2),('B',4)]}, \"test case failed: simple undirected graph\"\nassert to_networkx(_build_graph(True, [('A','B',1),('B','C',2),('C','A',3)])) == {'A':[('B',1)],'B':[('C',2)],'C':[('A',3)]}, \"test case failed: directed cycle\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','A',1),('B','C',2),('C','B',2)])) == {'A':[('B',1)],'B':[('A',1),('C',2)],'C':[('B',2)]}, \"test case failed: duplicate undirected edges\"\nassert to_networkx(_build_graph(True, [('A','B',1),('A','B',1),('A','B',1)])) == {'A':[('B',1)],'B':[]}, \"test case failed: repeated directed edges\"\nassert to_networkx(_build_graph(False, [('A','A',5)])) == {'A':[('A',5)]}, \"test case failed: self-loop in undirected graph\"\nassert to_networkx(_build_graph(True, [('X','Y',-3)])) == {'X':[('Y',-3)],'Y':[]}, \"test case failed: negative weight\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','C',2),('C','D',3),('D','A',4)])) == {'A':[('B',1),('D',4)],'B':[('A',1),('C',2)],'C':[('B',2),('D',3)],'D':[('A',4),('C',3)]}, \"test case failed: larger undirected graph\"\nassert to_networkx(_build_graph(False, [('A','B',1.5),('B','C',2.25)])) == {'A':[('B',1.5)],'B':[('A',1.5),('C',2.25)],'C':[('B',2.25)]}, \"test case failed: float weights\"\nassert to_networkx({'is_directed':False,'_V2I':{},'_G':[]}) == {}, \"test case failed: empty graph\""}
{"task_id": 296, "completion_id": 0, "passed": false, "result": "failed: Failed on integer vector", "solution": "import numpy as np\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1 (or, for boolean arrays,\n        only ``True``/``False``), otherwise ``False``.\n    \"\"\"\n    arr = np.asarray(x)\n    if arr.dtype == np.bool_:\n        return True\n    return np.isin(arr, (0, 1)).all()\nassert is_binary(np.array([0, 1, 1, 0])) is True, \"Failed on integer vector\"\nassert is_binary(np.array([[0, 1], [1, 0]], dtype=bool)) is True, \"Failed on boolean matrix\"\nassert is_binary(np.array([0.0, 1.0])) is True, \"Failed on float vector\"\nassert is_binary(np.array([0, 2])) is False, \"Failed on non-binary value 2\"\nassert is_binary(np.array([-1, 0, 1])) is False, \"Failed on negative non-binary value\"\nassert is_binary(np.array([0, 1, 3])) is False, \"Failed on non-binary value 3\"\nassert is_binary(np.array([[0], [1], [0]])) is True, \"Failed on column vector\"\nassert is_binary(np.zeros((3, 4))) is True, \"Failed on all-zeros matrix\"\nassert is_binary(np.ones((2, 2))) is True, \"Failed on all-ones matrix\"\nassert is_binary(np.array([True, False, True])) is True, \"Failed on boolean vector\""}
{"task_id": 297, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``.\n        The default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  \n        Returns ``-1`` if ``feature_range`` is invalid.\n    \"\"\"\n    if not isinstance(feature_range, tuple) or len(feature_range) != 2:\n        return -1\n    (a, b) = feature_range\n    if a >= b:\n        return -1\n    if data == []:\n        return []\n    arr = np.asarray(data, dtype=np.float64)\n    if arr.ndim == 1:\n        arr = arr.reshape(-1, 1)\n    col_min = arr.min(axis=0)\n    col_max = arr.max(axis=0)\n    col_range = col_max - col_min\n    const_mask = col_range == 0\n    col_range[const_mask] = 1.0\n    scaled = (arr - col_min) / col_range\n    scaled = scaled * (b - a) + a\n    if np.any(const_mask):\n        scaled[:, const_mask] = a\n    scaled = np.nan_to_num(scaled, nan=0.0, posinf=0.0, neginf=0.0)\n    scaled = np.round(scaled, 4)\n    return scaled.tolist()\nassert min_max_scale([[-1, 2], [-0.5, 6], [0, 10], [1, 18]]) == [[0.0, 0.0], [0.25, 0.25], [0.5, 0.5], [1.0, 1.0]], \"failed on basic example\"\nassert min_max_scale([[5, 2], [5, 8]]) == [[0.0, 0.0], [0.0, 1.0]], \"failed when a feature is constant\"\nassert min_max_scale([[0, 10], [5, 30]], feature_range=(1, 3)) == [[1.0, 1.0], [3.0, 3.0]], \"failed on custom range (1,3)\"\nassert min_max_scale([[1, 2], [3, 4]], feature_range=(2, 2)) == -1, \"failed to detect invalid feature_range\"\nassert min_max_scale([[-10, -20], [0, -10], [10, 0]]) == [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]], \"failed on negative numbers\"\nassert min_max_scale([[1.5], [3.0]]) == [[0.0], [1.0]], \"failed on single-column input\"\nassert min_max_scale([[2, 2], [2, 2]]) == [[0.0, 0.0], [0.0, 0.0]], \"failed when all columns are constant\"\nassert min_max_scale([[2, 2], [4, 6]], feature_range=(-1, 1)) == [[-1.0, -1.0], [1.0, 1.0]], \"failed on range (-1,1)\"\ninput_9 = [[i, i * 2, 10 - i] for i in range(6)]\noutput_9 = min_max_scale(input_9)\nexpected_9 = [[0.0, 0.0, 1.0],[0.2, 0.2, 0.8],[0.4, 0.4, 0.6],[0.6, 0.6, 0.4],[0.8, 0.8, 0.2],[1.0, 1.0, 0.0]]\nassert output_9 == expected_9, \"failed on larger matrix\"\nassert min_max_scale([[1, 2.5], [3, 7.5], [5, 12.5]]) == [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]], \"failed on mixed numeric types\""}
{"task_id": 298, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Notes\n    -----\n    \u2022 White-space is used for tokenisation.\n    \u2022 For N > 1 every sentence is padded with N\u22121 '<bol>' tokens in front\n      and a single '<eol>' token at the end.  Unigrams use no padding.\n    \u2022 If any N-gram (or its (N-1)-gram prefix) required for the query is\n      unseen in *corpus*, or if the query is too short, the function\n      returns float('-inf').\n    \u2022 The final result is rounded to 4 decimal places.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be \u2265 1')\n    if not corpus:\n        return float('-inf')\n    if N == 1:\n        unigram_counts: Counter[str] = Counter()\n        total_tokens = 0\n        for sent in corpus:\n            tokens = sent.split()\n            unigram_counts.update(tokens)\n            total_tokens += len(tokens)\n    else:\n        ngram_counts: Counter[Tuple[str, ...]] = Counter()\n        prefix_counts: Counter[Tuple[str, ...]] = Counter()\n        for sent in corpus:\n            tokens = ['<bol>'] * (N - 1) + sent.split() + ['<eol>']\n            for i in range(len(tokens) - N + 1):\n                ngram = tuple(tokens[i:i + N])\n                prefix = tuple(tokens[i:i + N - 1])\n                ngram_counts[ngram] += 1\n                prefix_counts[prefix] += 1\n    if N == 1:\n        q_tokens = query.split()\n        if not q_tokens or total_tokens == 0:\n            return float('-inf')\n    else:\n        q_tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n        if len(q_tokens) < N:\n            return float('-inf')\n    log_sum = 0.0\n    if N == 1:\n        for tok in q_tokens:\n            cnt = unigram_counts.get(tok, 0)\n            if cnt == 0:\n                return float('-inf')\n            prob = cnt / total_tokens\n            log_sum += math.log(prob)\n    else:\n        for i in range(len(q_tokens) - N + 1):\n            ngram = tuple(q_tokens[i:i + N])\n            prefix = tuple(q_tokens[i:i + N - 1])\n            cnt_ng = ngram_counts.get(ngram, 0)\n            cnt_pre = prefix_counts.get(prefix, 0)\n            if cnt_ng == 0 or cnt_pre == 0:\n                return float('-inf')\n            prob = cnt_ng / cnt_pre\n            log_sum += math.log(prob)\n    return round(log_sum, 4)\nassert ngram_log_prob([\"a b a\", \"b a b\"], \"a b\", 1) == -1.3863, \"test case failed: unigram example\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love AI\", 2) == -0.6931, \"test case failed: bigram simple\"\nassert ngram_log_prob([\"hello world\"], \"hello world\", 2) == 0.0, \"test case failed: probability 1 for every bigram\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b c\", 3) == -0.6931, \"test case failed: trigram with mixed counts\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b e\", 3) == float('-inf'), \"test case failed: unseen trigram should be -inf\"\nassert ngram_log_prob([\"hello world\"], \"unknown\", 1) == float('-inf'), \"test case failed: unseen unigram should be -inf\"\nassert ngram_log_prob([\"red blue blue red\"], \"red\", 1) == -0.6931, \"test case failed: unigram single token\"\nassert ngram_log_prob([\"a a b\", \"a a a\"], \"a a\", 2) == -2.1203, \"test case failed: complex bigram counts\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 2) == float('-inf'), \"test case failed: unknown bigram\"\nassert ngram_log_prob([\"cat sat\"], \"cat sat\", 2) == 0.0, \"test case failed: perfect bigram match\""}
{"task_id": 299, "completion_id": 0, "passed": false, "result": "failed: from __future__ imports must occur at the beginning of the file (<string>, line 2)", "solution": "import numpy as np\nfrom __future__ import annotations\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"K-Means clustering from scratch (deterministic initialisation).\n\n    Args:\n        X: 2-D NumPy array of shape (m, n).\n        k:  Number of clusters (must satisfy 1 \u2264 k \u2264 m).\n        max_iterations: Hard limit on the number of iterations.\n\n    Returns:\n        List[int] of length m; the i-th entry is the cluster index of sample i.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise TypeError('X must be a NumPy array.')\n    if X.ndim != 2:\n        raise ValueError('X must be a 2-D array (m samples \u00d7 n features).')\n    (m, n) = X.shape\n    if not 1 <= k <= m:\n        raise ValueError('k must be in the range [1, m].')\n    X = X.astype(float, copy=False)\n    centroids = X[:k].copy()\n    for _ in range(max_iterations):\n        diff = X[:, None, :] - centroids[None, :, :]\n        distances = np.sum(diff ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            mask = labels == j\n            if np.any(mask):\n                new_centroids[j] = X[mask].mean(axis=0)\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()\nassert k_means(np.array([[1.0,1.0],[5.0,5.0],[1.2,0.8],[5.1,6.0]]),2)==[0,1,0,1],\"failed: basic 2-cluster test\"\nassert k_means(np.array([[0.0,0.0],[10.0,0.0],[0.0,1.0],[10.0,1.0],[0.0,-1.0],[10.0,-1.0]]),2)==[0,1,0,1,0,1],\"failed: x-separated clusters\"\nassert k_means(np.array([[0.0],[10.0],[20.0],[0.1],[9.9],[19.8]]),3)==[0,1,2,0,1,2],\"failed: 1-D 3-cluster test\"\nassert k_means(np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[0.1,-0.1,0.05],[10.2,9.9,10.1]]),2)==[0,1,0,1],\"failed: 3-D clusters\"\nassert k_means(np.arange(5.0).reshape(-1,1),5)==[0,1,2,3,4],\"failed: k equals number of samples\"\nassert k_means(np.array([[0.0,0.0],[0.0,10.0],[0.1,0.0],[0.2,10.0]]),2)==[0,1,0,1],\"failed: y-separated clusters\"\nassert k_means(np.array([[1.0,1.0],[8.0,8.0],[2.0,2.0],[7.0,7.0],[1.5,1.5]]),2)==[0,1,0,1,0],\"failed: diagonal clusters\"\nassert k_means(np.array([[-5.0,-5.0],[5.0,5.0],[-4.0,-4.0],[6.0,6.0]]),2)==[0,1,0,1],\"failed: negative vs positive cluster\"\nassert k_means(np.array([[0.0,0.0],[0.0,10.0],[10.0,0.0],[0.1,0.2],[10.2,0.1],[0.0,9.9]]),3)==[0,1,2,0,2,1],\"failed: 3 clusters in 2-D\""}
{"task_id": 300, "completion_id": 0, "passed": true, "result": "passed", "solution": "import heapq\nimport heapq\nfrom typing import List, Union\nNumber = Union[int, float]\ndef top_k_elements(sequence: List[Number], k: int, order: str='largest') -> List[Number]:\n    \"\"\"Return the k largest or k smallest elements of *sequence*.\n\n    The data stream is inspected exactly once and never keeps more than k\n    elements in memory by exploiting the binary\u2010heap semantics provided by\n    heapq.\n\n    Args:\n        sequence: Iterable of numbers.\n        k: How many extreme values to retain.\n        order: Either \"largest\" (keep the biggest values) or \"smallest\"\n               (keep the smallest values).\n\n    Returns:\n        A list of at most k numbers sorted according to *order*.\n\n    Raises:\n        ValueError: If *order* is neither \"largest\" nor \"smallest\".\n    \"\"\"\n    if k <= 0 or not sequence:\n        return []\n    if order not in {'largest', 'smallest'}:\n        raise ValueError('order must be either \"largest\" or \"smallest\"')\n    n = len(sequence)\n    if k >= n:\n        return sorted(sequence, reverse=order == 'largest')\n    if order == 'largest':\n        heap: List[Number] = []\n        for value in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, value)\n            elif value > heap[0]:\n                heapq.heapreplace(heap, value)\n        return sorted(heap, reverse=True)\n    else:\n        heap: List[Number] = []\n        for value in sequence:\n            neg_val = -value\n            if len(heap) < k:\n                heapq.heappush(heap, neg_val)\n            elif neg_val > heap[0]:\n                heapq.heapreplace(heap, neg_val)\n        return sorted([-x for x in heap])\nassert top_k_elements([5,1,3,2,4],2,\"largest\") == [5,4], \"failed: top_k_elements([5,1,3,2,4],2,'largest')\"\nassert top_k_elements([5,1,3,2,4],2,\"smallest\") == [1,2], \"failed: top_k_elements([5,1,3,2,4],2,'smallest')\"\nassert top_k_elements([7,2,9,4,1],3,\"largest\") == [9,7,4], \"failed: top_k_elements([7,2,9,4,1],3,'largest')\"\nassert top_k_elements([7,2,9,4,1],3,\"smallest\") == [1,2,4], \"failed: top_k_elements([7,2,9,4,1],3,'smallest')\"\nassert top_k_elements([1,2,3,4],4,\"largest\") == [4,3,2,1], \"failed: k==n case\"\nassert top_k_elements([1,2,2,3],3,\"largest\") == [3,2,2], \"failed: duplicate numbers\"\nassert top_k_elements([-10,-20,-30],2,\"largest\") == [-10,-20], \"failed: negative numbers largest\"\nassert top_k_elements([1.5,2.7,-3.4,2.7],2,\"largest\") == [2.7,2.7], \"failed: float input\"\nassert top_k_elements([3,1],5,\"largest\") == [3,1], \"failed: k>len(sequence)\"\nassert top_k_elements([],3,\"largest\") == [], \"failed: empty sequence\""}
{"task_id": 301, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nclass Node:\n    \"\"\"\n    Simple binary-search-tree node that compares itself by ``val`` only.\n    \"\"\"\n    __slots__ = ('key', 'val', 'left', 'right')\n\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left: 'Node | None' = None\n        self.right: 'Node | None' = None\n\n    def __lt__(self, other):\n        return self.val < other.val\n\n    def __le__(self, other):\n        return self.val <= other.val\n\n    def __gt__(self, other):\n        return self.val > other.val\n\n    def __ge__(self, other):\n        return self.val >= other.val\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value).  Empty list if *pairs* is empty.\n    \"\"\"\n\n    def insert(root: Node, node: Node) -> None:\n        \"\"\"Iteratively insert *node* into the BST whose root is *root*.\"\"\"\n        cur = root\n        while True:\n            if node < cur:\n                if cur.left is None:\n                    cur.left = node\n                    return\n                cur = cur.left\n            else:\n                if cur.right is None:\n                    cur.right = node\n                    return\n                cur = cur.right\n\n    def inorder(node: Node | None, out: list) -> None:\n        \"\"\"Recursive in-order traversal collecting *key*s.\"\"\"\n        if node is None:\n            return\n        inorder(node.left, out)\n        out.append(node.key)\n        inorder(node.right, out)\n    if not pairs:\n        return []\n    root = Node(*pairs[0])\n    for (key, val) in pairs[1:]:\n        insert(root, Node(key, val))\n    result: list = []\n    inorder(root, result)\n    return result\nassert inorder_keys([('a', 3), ('b', 1), ('c', 5), ('d', 2)]) == ['b', 'd', 'a', 'c'], \"test case failed: [('a',3),('b',1),('c',5),('d',2)]\"\nassert inorder_keys([('x', 10), ('y', 20), ('z', 30)]) == ['x', 'y', 'z'], \"test case failed: ascending values\"\nassert inorder_keys([('x', 30), ('y', 20), ('z', 10)]) == ['z', 'y', 'x'], \"test case failed: descending values\"\nassert inorder_keys([('k', 1)]) == ['k'], \"test case failed: single node\"\nassert inorder_keys([]) == [], \"test case failed: empty list\"\nassert inorder_keys([('a', 2), ('b', 2), ('c', 2)]) == ['a', 'b', 'c'], \"test case failed: equal values\"\nassert inorder_keys([('a', -1), ('b', -5), ('c', 0)]) == ['b', 'a', 'c'], \"test case failed: negative numbers\"\nassert inorder_keys([('p', 1.5), ('q', 1.2), ('r', 2.8)]) == ['q', 'p', 'r'], \"test case failed: floating values\"\nassert inorder_keys([('d', 4), ('b', 2), ('a', 1), ('c', 3)]) == ['a', 'b', 'c', 'd'], \"test case failed: balanced tree\"\nassert inorder_keys([('root', 50), ('l1', 30), ('l2', 20), ('l3', 40), ('r1', 70), ('r2', 60), ('r3', 80)]) == ['l2', 'l1', 'l3', 'root', 'r2', 'r1', 'r3'], \"test case failed: larger tree\""}
{"task_id": 302, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample (shape = [n_samples, n_features]).\n        k: Desired number of clusters (k \u2264 n_samples).\n\n    Returns:\n        Python list of length n_samples whose entries are integers in [0, k-1].\n    \"\"\"\n    n_samples = X.shape[0]\n    diff = X[:, None, :] - X[None, :, :]\n    dist = np.linalg.norm(diff, axis=2)\n    W = 1.0 / (1.0 + dist)\n    np.fill_diagonal(W, 0.0)\n    degree = W.sum(axis=1)\n    L = np.diag(degree) - W\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    E = eig_vecs[:, :k]\n    centroids = E[:k].copy()\n    labels = np.full(n_samples, -1, dtype=int)\n    max_iter = 100\n    rng = np.random.default_rng()\n    for _ in range(max_iter):\n        dists = np.linalg.norm(E[:, None, :] - centroids[None, :, :], axis=2)\n        new_labels = dists.argmin(axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for c in range(k):\n            mask = labels == c\n            if np.any(mask):\n                centroids[c] = E[mask].mean(axis=0)\n            else:\n                random_idx = rng.integers(0, n_samples)\n                centroids[c] = E[random_idx]\n    return labels.tolist()\nassert spectral_clustering(X1, 2) == [0, 0, 1, 1], \"test case failed: spectral_clustering(X1, 2)\"\nassert spectral_clustering(X2, 3) == [0, 1, 2, 0, 1, 2], \"test case failed: spectral_clustering(X2, 3)\"\nassert spectral_clustering(X3, 1) == [0] * 10, \"test case failed: spectral_clustering(X3, 1)\"\nassert spectral_clustering(X4, 1) == [0, 0, 0], \"test case failed: spectral_clustering(X4, 1)\"\nassert set(res5) == {0, 1} and res5.count(0) != 0 and res5.count(1) != 0, \"test case failed: spectral_clustering(X5, 2)\"\nassert set(labels6) == {0, 1, 2}, \"test case failed: spectral_clustering(X6, 3)\"\nassert set(labels7) == {0, 1}, \"test case failed: spectral_clustering(X7, 2)\"\nassert labels8 == list(range(5)), \"test case failed: spectral_clustering(X8, 5)\"\nassert spectral_clustering(X9, 2) == [0, 1], \"test case failed: spectral_clustering(X9, 2)\"\nassert set(labels10) <= {0, 1}, \"test case failed: spectral_clustering(X10, 2)\""}
{"task_id": 303, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    gold_prev = golds.get(prev_label, '')\n    gold_curr = golds.get(curr_label, '')\n    header = '-' * 25 + ' DEBUG ' + '-' * 25\n    footer = '-' * 23 + ' END DEBUG ' + '-' * 23\n    lines = [header, f'Mine (prev) [{prev_label}]:', f'{prev_mine}', '', f'Theirs (prev) [{prev_label}]:', f'{gold_prev}', '', f'Mine [{curr_label}]:', f'{curr_mine}', '', f'Theirs [{curr_label}]:', f'{gold_curr}{warn_str}', footer]\n    return '\\n'.join(lines)\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 304, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Posterior mean (MAP) of the coefficients in Bayesian linear regression.\n\n    Parameters\n    ----------\n    X : (N, M) array_like\n        Design matrix.\n    y : (N,) array_like\n        Targets.\n    alpha, beta : float\n        Hyper\u2013parameters of the inverse-gamma prior on \u03c3\u00b2 (kept for API\n        completeness \u2013 they do not enter the MAP of the weights).\n    mu : float or array_like\n        Prior mean for the weights.  Scalar values are broadcast.\n    V : None, float, 1-D or 2-D array_like\n        Prior scale.  None\u2192I, scalar\u2192s\u00b7I, 1-D\u2192diag(v), 2-D\u2192full matrix.\n    fit_intercept : bool\n        Whether to include a bias column of ones.\n\n    Returns\n    -------\n    list[float]\n        Posterior mean rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    (N, M) = X.shape\n    if V is None:\n        V_mat = np.eye(M)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 0:\n            V_mat = float(V_arr) * np.eye(M)\n        elif V_arr.ndim == 1:\n            if V_arr.size != M:\n                raise ValueError('Diagonal length of V does not match #features.')\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError('Shape of V does not match #features.')\n            V_mat = V_arr\n        else:\n            raise ValueError('Unsupported shape for V.')\n    V_inv = np.linalg.inv(V_mat)\n    if np.isscalar(mu):\n        mu_vec = np.full(M, float(mu))\n    else:\n        mu_vec = np.asarray(mu, dtype=float).ravel()\n        if mu_vec.size != M:\n            raise ValueError('Length of mu does not match #features.')\n    XtX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XtX)\n    rhs = V_inv @ mu_vec + X.T @ y\n    mu_b = Sigma_b @ rhs\n    return np.round(mu_b, 4).tolist()\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0])) == [0.5, 1.6667], \"test case 1 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,5.0])) == [1.0, 1.6667], \"test case 2 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0])) == [0.8, 0.8], \"test case 3 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0]), fit_intercept=False) == [1.8667], \"test case 4 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,3.0]), V=[2,2]) == [1.2632, 0.9474], \"test case 5 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0]), mu=1.0) == [1.0, 1.0], \"test case 6 failed\"\nassert bayesian_posterior_mean(np.array([[2.0],[4.0],[6.0]]), np.array([1.0,2.0,3.0]), V=2, fit_intercept=False) == [0.4956], \"test case 7 failed\"\nassert bayesian_posterior_mean(np.array([[0.0],[1.0]]), np.array([1.0,2.0]), fit_intercept=False) == [1.0], \"test case 8 failed\"\nassert bayesian_posterior_mean(np.array([[0.0]]), np.array([0.0]), mu=10.0, fit_intercept=False) == [10.0], \"test case 9 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0],[4.0]]), np.array([1.0,2.0,3.0,4.0]), V=[1,1000]) == [0.0002, 0.9999], \"test case 10 failed\""}
{"task_id": 305, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function accepts a scalar, list, tuple or NumPy array and returns a\n    Python list with each sigmoid value rounded to 4 decimal places.\n    \"\"\"\n    arr = np.asarray(x, dtype=float)\n    out = np.empty_like(arr)\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n    out[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    exp_x = np.exp(arr[neg_mask])\n    out[neg_mask] = exp_x / (1.0 + exp_x)\n    out = np.round(out, 4)\n    return out.ravel().tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"failed on [-1,0,1]\"\nassert sigmoid([10, -10]) == [1.0, 0.0], \"failed on [10,-10]\"\nassert sigmoid(np.array([5.0, -5.0])) == [0.9933, 0.0067], \"failed on [5,-5]\"\nassert sigmoid([0]) == [0.5], \"failed on [0]\"\nassert sigmoid([-1000, 1000]) == [0.0, 1.0], \"failed on large magnitude values\"\nassert sigmoid([20]) == [1.0], \"failed on [20]\"\nassert sigmoid([-20]) == [0.0], \"failed on [-20]\"\nassert sigmoid([0.0001]) == [0.5], \"failed on small positive value\"\nassert sigmoid([-0.0001]) == [0.5], \"failed on small negative value\"\nassert sigmoid([3.5]) == [0.9707], \"failed on [3.5]\""}
{"task_id": 307, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Generate a bootstrap sample (sampling with replacement) from the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector/array of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        (X_sample, y_sample) \u2013 both have exactly the same shapes as the\n        corresponding inputs.\n\n    Notes\n    -----\n    \u2022 Sampling is performed exclusively with NumPy\u2019s global RNG, so results are\n      reproducible if `np.random.seed(...)` is set beforehand.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(f'X and y must have the same number of samples along axis 0 (got {X.shape[0]} and {y.shape[0]}).')\n    n_samples = X.shape[0]\n    indices = np.random.randint(0, n_samples, size=n_samples)\n    return (X[indices], y[indices])\nimport numpy as np\n\n# Test 1 \u2013 basic reproducibility\nnp.random.seed(0)\nX = np.arange(20).reshape(10, 2)\ny = np.arange(10)\nXb, yb = bootstrap_sample(X, y)\nnp.random.seed(0)\nidx = np.random.choice(10, 10, replace=True)\nassert np.array_equal(Xb, X[idx]) and np.array_equal(yb, y[idx]), \"test case failed: reproducibility with seed 0\"\nimport numpy as np\n\n# Test 2 \u2013 1-D feature array\nnp.random.seed(1)\nX = np.array([5, 6, 7, 8])\ny = np.array([1, 1, 0, 0])\nXb, yb = bootstrap_sample(X, y)\nassert Xb.shape == X.shape and yb.shape == y.shape, \"test case failed: shape mismatch for 1D feature array\"\nimport numpy as np\n\n# Test 3 \u2013 correspondence between X and y\nnp.random.seed(2)\nX = np.arange(12).reshape(6, 2)\ny = np.array(list(\"abcdef\"))\nXb, yb = bootstrap_sample(X, y)\nfor row, label in zip(Xb, yb):\n    idx = np.where((X == row).all(axis=1))[0][0]\n    assert y[idx] == label, \"test case failed: X and y got out of sync\"\nimport numpy as np\n\n# Test 4 \u2013 single-sample data set (deterministic)\nnp.random.seed(123)\nX = np.array([[42, 99]])\ny = np.array([7])\nXb, yb = bootstrap_sample(X, y)\nassert np.array_equal(Xb, X) and np.array_equal(yb, y), \"test case failed: single-sample data set\"\nimport numpy as np\n\n# Test 5 \u2013 larger data set shape test\nnp.random.seed(5)\nX = np.arange(300).reshape(100, 3)\ny = np.arange(100)\nXb, yb = bootstrap_sample(X, y)\nassert Xb.shape == X.shape and yb.shape == y.shape, \"test case failed: shape mismatch on larger data set\"\nimport numpy as np\n\n# Test 6 \u2013 values belong to original set\nnp.random.seed(6)\nX = np.arange(15).reshape(5, 3)\ny = np.arange(5)\nXb, yb = bootstrap_sample(X, y)\nassert set(map(tuple, Xb)).issubset(set(map(tuple, X))), \"test case failed: unknown rows in X_sample\"\nimport numpy as np\n\n# Test 7 \u2013 multiple consecutive calls produce different samples without reseeding\nnp.random.seed(7)\nX = np.arange(20).reshape(10, 2)\ny = np.arange(10)\nXa, ya = bootstrap_sample(X, y)\nXb, yb = bootstrap_sample(X, y)\nassert not np.array_equal(Xa, Xb) or not np.array_equal(ya, yb), \"test case failed: consecutive calls returned identical samples\"\nimport numpy as np\n\n# Test 8 \u2013 reseeding reproduces previous sample\nnp.random.seed(8)\nX = np.arange(12).reshape(6, 2)\ny = np.arange(6)\nX1, y1 = bootstrap_sample(X, y)\nnp.random.seed(8)\nX2, y2 = bootstrap_sample(X, y)\nassert np.array_equal(X1, X2) and np.array_equal(y1, y2), \"test case failed: reseeding did not reproduce sample\"\nimport numpy as np\n\n# Test 9 \u2013 check that replacement really happens (probabilistic)\nnp.random.seed(9)\nX = np.arange(50).reshape(25, 2)\ny = np.arange(25)\nXb, _ = bootstrap_sample(X, y)\nunique_rows = {tuple(row) for row in Xb}\nassert len(unique_rows) < 25, \"test case failed: sampling seems to be without replacement\""}
{"task_id": 308, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    Parameters\n    ----------\n    N : int\n        DFT length (number of frequency-domain samples).\n    n_filters : int, default 20\n        Number of Mel filters to construct.\n    fs : int, default 44_000\n        Sampling frequency of the signal in Hertz.\n    min_freq : int, default 0\n        Lower frequency limit of the filterbank in Hertz.\n    max_freq : int | None, optional\n        Upper frequency limit of the filterbank in Hertz.  If *None* the\n        Nyquist frequency *fs/2* is used.\n    normalize : bool, default True\n        Whether to scale each filter so that its (Mel-domain) area equals 1.\n\n    Returns\n    -------\n    list[list[float]]\n        The filterbank matrix with shape (n_filters, N//2 + 1).  All values are\n        rounded to four decimal places.\n    \"\"\"\n\n    def hz2mel(f_hz: np.ndarray | float) -> np.ndarray | float:\n        return 2595.0 * np.log10(1.0 + np.asarray(f_hz) / 700.0)\n\n    def mel2hz(mel: np.ndarray | float) -> np.ndarray | float:\n        return 700.0 * (10 ** (np.asarray(mel) / 2595.0) - 1.0)\n    if max_freq is None:\n        max_freq = fs / 2\n    if not 0 <= min_freq < max_freq <= fs / 2:\n        raise ValueError('min_freq must be >= 0, and max_freq must not exceed fs/2 with min_freq < max_freq.')\n    (mel_min, mel_max) = (hz2mel(min_freq), hz2mel(max_freq))\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel2hz(mel_points)\n    bin_freqs = np.arange(N // 2 + 1) * (fs / N)\n    F = np.zeros((n_filters, N // 2 + 1), dtype=float)\n    for i in range(n_filters):\n        (f_left, f_center, f_right) = hz_points[i:i + 3]\n        left_mask = np.logical_and(bin_freqs >= f_left, bin_freqs <= f_center)\n        F[i, left_mask] = (bin_freqs[left_mask] - f_left) / (f_center - f_left)\n        right_mask = np.logical_and(bin_freqs >= f_center, bin_freqs <= f_right)\n        F[i, right_mask] = (f_right - bin_freqs[right_mask]) / (f_right - f_center)\n        if normalize:\n            F[i, :] *= 2.0 / (f_right - f_left)\n    F_rounded = np.round(F, 4).tolist()\n    return F_rounded\nimport numpy as np\n\nfb = mel_filterbank(16, 6, 16000)\nassert (len(fb), len(fb[0])) == (6, 16//2 + 1), \"shape mismatch for mel_filterbank(16,6,16000)\"\nimport numpy as np\n\nfb = mel_filterbank(1024, 40, 22050)\nassert all(0.0 <= w <= 1.0 for row in fb for w in row), \"weights out of range in mel_filterbank(1024,40,22050)\"\nimport numpy as np\n\nfb = mel_filterbank(32, 10, 16000, min_freq=300, max_freq=6000)\nassert fb[0][0] == 0.0 and fb[-1][-1] == 0.0, \"edge bins should be zero for out-of-band frequencies\"\nimport numpy as np\n\nfb1 = mel_filterbank(512, 26, 16000)\nfb2 = mel_filterbank(512, 26, 16000)\nassert fb1 == fb2, \"function must be deterministic for identical parameters\"\nimport numpy as np\n\nfb = mel_filterbank(64, 5, 8000)\n# every filter must have non-zero values somewhere\nassert all(any(v > 0.0 for v in row) for row in fb), \"empty filter detected in mel_filterbank(64,5,8000)\"\nimport numpy as np\n\nfb = mel_filterbank(8, 3, 8000)\n# with normalization the maximum value must be below 1\nassert max(max(r) for r in fb) < 1.0, \"filters are not normalized when normalize=True\"\nimport numpy as np\n\nfb = mel_filterbank(128, 20, 44100)\nassert len({tuple(row) for row in fb}) == 20, \"filters must be distinct in mel_filterbank(128,20,44100)\""}
{"task_id": 309, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n    \n    Parameters\n    ----------\n    X  : (m, n) np.ndarray\n        Feature matrix with m samples and n features.\n    w0 : float\n        Global bias term.\n    w  : (n,) np.ndarray\n        Linear weight vector.\n    v  : (n, k) np.ndarray\n        Factor matrix whose columns contain the latent factors.\n    \n    Returns\n    -------\n    list[float]\n        FM predictions for each sample, rounded to four decimal places.\n    \"\"\"\n    linear_term = X @ w\n    xv = X @ v\n    xv_sq = xv ** 2\n    x_sq_v_sq = X ** 2 @ v ** 2\n    interaction_term = 0.5 * np.sum(xv_sq - x_sq_v_sq, axis=1)\n    y_hat = w0 + linear_term + interaction_term\n    return np.round(y_hat, 4).tolist()\nassert fm_predict(np.array([[1, 2], [3, 4]]), 0.5, np.array([0.1, 0.2]), np.array([[0.05, 0.1], [0.2, 0.3]])) == [1.08, 2.08], \"test case failed: example input\"\nassert fm_predict(np.array([[0, 0, 0]]), 1.0, np.array([0.0, 0.0, 0.0]), np.zeros((3, 2))) == [1.0], \"test case failed: bias only\"\nassert fm_predict(np.array([[2], [3]]), 0.2, np.array([0.5]), np.array([[0.1, 0.2]])) == [1.2, 1.7], \"test case failed: single feature\"\nassert fm_predict(np.array([[1, 1]]), 0.5, np.array([0.3, 0.2]), np.zeros((2, 3))) == [1.0], \"test case failed: zero factor matrix\"\nassert fm_predict(np.array([[1, 0], [0, 1]]), 0.0, np.array([1.0, 1.0]), np.array([[0.5, 0.5], [0.5, 0.5]])) == [1.0, 1.0], \"test case failed: sparse rows\"\nassert fm_predict(np.array([[1, 2, 3]]), 0.3, np.array([0.1, 0.2, 0.3]), np.array([[0.1, 0.0], [0.0, 0.1], [0.1, 0.1]])) == [1.79], \"test case failed: 3-feature interaction\"\nassert fm_predict(np.array([[1, 2], [3, 4], [5, 6]]), 0.0, np.array([0.0, 0.0]), np.array([[0.1], [0.2]])) == [0.04, 0.24, 0.6], \"test case failed: single latent factor\"\nassert fm_predict(np.array([[1, 1, 1]]), 0.0, np.array([1.0, 1.0, 1.0]), np.zeros((3, 2))) == [3.0], \"test case failed: linear only\"\nassert fm_predict(np.array([[1, 2]]), -1.0, np.array([-0.5, 0.5]), np.zeros((2, 1))) == [-0.5], \"test case failed: negative weights\"\nassert fm_predict(np.array([[2, 0, 1], [0, 2, 3]]), 0.1, np.array([0.2, 0.1, 0.0]), np.array([[0.1, 0.2], [0.2, 0.1], [0.3, 0.2]])) == [0.64, 0.78], \"test case failed: mixed interactions\""}
{"task_id": 310, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    try:\n        n_actual = len(actual)\n        n_pred = len(predicted)\n    except TypeError:\n        return -1\n    if n_actual == 0 or n_pred == 0 or n_actual != n_pred:\n        return -1\n    actual_arr = np.asarray(actual, dtype=float)\n    predicted_arr = np.asarray(predicted, dtype=float)\n    mse = np.mean((actual_arr - predicted_arr) ** 2)\n    rmse = np.sqrt(mse)\n    return round(float(rmse), 4)\nassert root_mean_squared_error([1, 2, 3], [1, 2, 2]) == 0.5774, \"test case failed: rmse([1,2,3],[1,2,2])\"\nassert root_mean_squared_error([5, 5, 5], [5, 5, 5]) == 0.0, \"test case failed: identical arrays\"\nassert root_mean_squared_error([2.5, 0.0, 2, 8], [3, -0.5, 2, 7]) == 0.6124, \"test case failed: rmse with floats\"\nassert root_mean_squared_error([1, 2], [1]) == -1, \"test case failed: mismatched lengths\"\nassert root_mean_squared_error([], []) == -1, \"test case failed: empty lists\"\nassert root_mean_squared_error([0, 0, 0, 0], [1, 1, 1, 1]) == 1.0, \"test case failed: zeros vs ones\"\nassert root_mean_squared_error(list(range(100)), list(range(100))) == 0.0, \"test case failed: long identical arrays\"\nassert root_mean_squared_error(np.array([1,2,3,4]), np.array([4,3,2,1])) == 2.2361, \"test case failed: numpy array input\""}
{"task_id": 311, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    arr_np = np.array(arr, dtype=float, copy=True)\n    clipped = np.clip(arr_np, a_min=0.0, a_max=None)\n    return clipped.tolist()\nassert clip_non_negative([-1, 2, -3, 4]) == [0.0, 2.0, 0.0, 4.0], \"failed: clip_non_negative([-1, 2, -3, 4])\"\nassert clip_non_negative([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed: clip_non_negative([0, 0, 0])\"\nassert clip_non_negative([[-1, 0, 3], [4, -5, -6]]) == [[0.0, 0.0, 3.0], [4.0, 0.0, 0.0]], \"failed: 2-D list input\"\nassert clip_non_negative(np.array([-1.1, 2.2, -0.1])) == [0.0, 2.2, 0.0], \"failed: 1-D NumPy input\"\nassert clip_non_negative(np.array([[1, -1], [-2, 3]])) == [[1.0, 0.0], [0.0, 3.0]], \"failed: 2-D NumPy input\"\nassert clip_non_negative([]) == [], \"failed: empty list\"\nassert clip_non_negative([[-7]]) == [[0.0]], \"failed: single negative element\"\nassert clip_non_negative([1, 2, 3]) == [1.0, 2.0, 3.0], \"failed: all positive\"\nassert clip_non_negative([[0, -0, -0.0]]) == [[0.0, 0.0, 0.0]], \"failed: negative zeros\"\nassert clip_non_negative(np.array([[-1, -2], [-3, -4]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed: all negative NumPy\""}
{"task_id": 312, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len - 1 if symmetric else window_len\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    n = np.arange(window_len)\n    w = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(float(x), 4) for x in w]\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 313, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Return E[log X_t] for X ~ Dir(gamma[d, :]), rounded to 4 decimals.\"\"\"\n\n    def digamma(x):\n        \"\"\"\n        Digamma \u03c8(x) for positive real x.\n        Small arguments are stepped up with the recurrence\n            \u03c8(x) = \u03c8(x + 1) \u2212 1/x\n        until x \u2265 6, after which an asymptotic expansion is applied:\n            \u03c8(x) \u2248 ln x \u2212 1/(2x) \u2212 1/(12x\u00b2) + 1/(120x\u2074) \u2212 1/(252x\u2076)\n        The combination is accurate to better than 1e-6 for all x > 0.\n        \"\"\"\n        res = 0.0\n        x = float(x)\n        while x < 6.0:\n            res -= 1.0 / x\n            x += 1.0\n        inv = 1.0 / x\n        inv2 = inv * inv\n        inv4 = inv2 * inv2\n        inv6 = inv4 * inv2\n        res += math.log(x) - 0.5 * inv - inv2 / 12.0 + inv4 / 120.0 - inv6 / 252.0\n        return res\n    g = np.asarray(gamma, dtype=float)\n    row = g[d]\n    alpha_t = row[t]\n    row_sum = float(row.sum())\n    value = digamma(alpha_t) - digamma(row_sum)\n    return round(value, 4)\nassert expected_log_dirichlet([[1,1]],0,0) == -1.0, \"failed: gamma=[[1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[2,3]],0,1) == -0.5833, \"failed: gamma=[[2,3]], d=0, t=1\"\nassert expected_log_dirichlet([[4,5,6],[1,1,1]],0,2) == -0.9682, \"failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2\"\nassert expected_log_dirichlet([[4,1,1]],0,0) == -0.45, \"failed: gamma=[[4,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[3,7]],0,1) == -0.379, \"failed: gamma=[[3,7]], d=0, t=1\"\nassert expected_log_dirichlet([[10,10,10]],0,2) == -1.1327, \"failed: gamma=[[10,10,10]], d=0, t=2\"\nassert expected_log_dirichlet([[8,1,1]],0,0) == -0.2361, \"failed: gamma=[[8,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[1,1,1,1]],0,3) == -1.8333, \"failed: gamma=[[1,1,1,1]], d=0, t=3\"\nassert expected_log_dirichlet([[1,2,1]],0,1) == -0.8333, \"failed: gamma=[[1,2,1]], d=0, t=1\"\nassert expected_log_dirichlet([[2,2,2,2,2]],0,2) == -1.829, \"failed: gamma=[[2,2,2,2,2]], d=0, t=2\""}
{"task_id": 315, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _to_array(x):\n    \"\"\"Convert *x* to a NumPy float array.\"\"\"\n    return np.asarray(x, dtype=float)\ndef _mae(y_true, y_pred):\n    \"\"\"Mean Absolute Error.\"\"\"\n    (y_true, y_pred) = (_to_array(y_true), _to_array(y_pred))\n    return float(np.round(np.mean(np.abs(y_true - y_pred)), 4))\ndef _mse(y_true, y_pred):\n    \"\"\"Mean Squared Error.\"\"\"\n    (y_true, y_pred) = (_to_array(y_true), _to_array(y_pred))\n    return float(np.round(np.mean((y_true - y_pred) ** 2), 4))\ndef _bce(y_true, y_pred):\n    \"\"\"Binary Cross-Entropy / Log-loss.\"\"\"\n    (y_true, y_pred) = (_to_array(y_true), _to_array(y_pred))\n    y_pred = np.clip(y_pred, 1e-15, 1.0 - 1e-15)\n    loss = -np.mean(y_true * np.log(y_pred) + (1.0 - y_true) * np.log(1.0 - y_pred))\n    return float(np.round(loss, 4))\ndef get_loss(name: str):\n    \"\"\"Return the loss function identified by *name* (case-insensitive).\n\n    Recognised aliases (underscores ignored):\n        MAE  \u2013  \"mae\", \"mean_absolute_error\"\n        MSE  \u2013  \"mse\", \"mean_squared_error\"\n        BCE  \u2013  \"cross_entropy\", \"log_loss\", \"ce\"\n\n    Raises\n    ------\n    ValueError\n        If *name* does not correspond to a supported loss.\n    \"\"\"\n    if not isinstance(name, str):\n        raise ValueError('Invalid loss function.')\n    key = name.replace('_', '').lower()\n    registry = {'mae': _mae, 'meanabsoluteerror': _mae, 'mse': _mse, 'meansquarederror': _mse, 'crossentropy': _bce, 'logloss': _bce, 'ce': _bce}\n    try:\n        return registry[key]\n    except KeyError:\n        raise ValueError('Invalid loss function.')\nassert get_loss(\"mse\")([1, 2, 3], [2, 2, 2]) == 0.6667, \"failed: mse basic\"\nassert get_loss(\"MAE\")([1, 2, 3], [3, 2, 1]) == 1.3333, \"failed: mae alias upper\"\nassert get_loss(\"mean_squared_error\")([1, 1, 1], [1, 1, 1]) == 0.0, \"failed: mse perfect\"\nassert get_loss(\"mean_absolute_error\")([1, 1, 1], [1, 1, 1]) == 0.0, \"failed: mae perfect\"\nassert get_loss(\"cross_entropy\")([1, 0, 1, 0], [0.9, 0.1, 0.8, 0.2]) == 0.1643, \"failed: ce basic\"\nassert get_loss(\"log_loss\")([1, 0, 1, 0], [0.9, 0.1, 0.8, 0.2]) == 0.1643, \"failed: ce alias log_loss\"\nassert get_loss(\"ce\")([0, 1], [0.7, 0.3]) == 1.204, \"failed: ce alias short\"\nassert get_loss(\"mse\")(np.array([1, 4]), np.array([1, 1])) == 4.5, \"failed: mse numpy arrays\"\nassert get_loss(\"mae\")([0, 0, 0], [0, 0, 0]) == 0.0, \"failed: mae zeros\"\nassert get_loss(\"mse\")([1.5, 2.5], [1.5, 2.0]) == 0.125, \"failed: mse floats\""}
{"task_id": 316, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list | tuple | np.ndarray): First real vector.\n        y (list | tuple | np.ndarray): Second real vector.\n\n    Returns:\n        float | int: L2 distance rounded to four decimals, or -1 if lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x_arr = np.asarray(x, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    dist = np.linalg.norm(x_arr - y_arr)\n    return round(dist, 4)\nassert euclidean([0, 0], [0, 0]) == 0.0, \"failed: euclidean([0,0],[0,0])\"\nassert euclidean([1, 2, 3], [4, 5, 6]) == 5.1962, \"failed: euclidean([1,2,3],[4,5,6])\"\nassert euclidean([1], [4]) == 3.0, \"failed: euclidean([1],[4])\"\nassert euclidean([2, -1], [-2, 3]) == 5.6569, \"failed: euclidean([2,-1],[-2,3])\"\nassert euclidean([1.5, 2.5], [3.5, 4.5]) == 2.8284, \"failed: euclidean([1.5,2.5],[3.5,4.5])\"\nassert euclidean([1, 2], [1, 2, 3]) == -1, \"failed: euclidean length mismatch\"\nassert euclidean([0, 0, 0], [-1, -1, -1]) == 1.7321, \"failed: euclidean([0,0,0],[-1,-1,-1])\""}
{"task_id": 317, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic two-element list, ix=1", "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    (curr_pred, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    header = '-' * 25 + ' DEBUG ' + '-' * 25\n    footer = '-' * 23 + ' END DEBUG ' + '-' * 23\n    parts = [header, f'Mine (prev) [{prev_label}]:', prev_pred, '', f'Theirs (prev) [{prev_label}]:', prev_gold, '', '', f'Mine [{curr_label}]:', curr_pred, '', f'Theirs [{curr_label}]:', f'{curr_gold}{warn_str}', footer]\n    return '\\n'.join(parts)\nassert err_fmt([(\"cat\",\"A\"),(\"dog\",\"B\")],{\"A\":\"feline\",\"B\":\"canine\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\ncat\\n\\nTheirs (prev) [A]:\\nfeline\\n\\nMine [B]:\\ndog\\n\\nTheirs [B]:\\ncanine\\n----------------------- END DEBUG -----------------------\", \"test case failed: basic two-element list, ix=1\"\nassert err_fmt([(\"hi\",\"g\")],{\"g\":\"hello\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [g]:\\nhi\\n\\nTheirs (prev) [g]:\\nhello\\n\\nMine [g]:\\nhi\\n\\nTheirs [g]:\\nhello\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},2,\" -- mismatch\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [L2]:\\nv2\\n\\nTheirs (prev) [L2]:\\nt2\\n\\nMine [L3]:\\nv3\\n\\nTheirs [L3]:\\nt3 -- mismatch\\n----------------------- END DEBUG -----------------------\", \"test case failed: three elements, last index\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nv1\\n\\nTheirs (prev) [L1]:\\nt1\\n\\nMine [L2]:\\nv2\\n\\nTheirs [L2]:\\nt2\\n----------------------- END DEBUG -----------------------\", \"test case failed: middle index\"\nassert err_fmt([(\"x\",\"X\"),(\"y\",\"Y\")],{\"X\":\"alpha\",\"Y\":\"beta\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [X]:\\nx\\n\\nTheirs (prev) [X]:\\nalpha\\n\\nMine [X]:\\nx\\n\\nTheirs [X]:\\nalpha\\n----------------------- END DEBUG -----------------------\", \"test case failed: duplicate first idx\"\nassert err_fmt([(\"p\",\"a\"),(\"q\",\"b\")],{\"a\":\"A\",\"b\":\"B\"},1,\" !!!\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [a]:\\np\\n\\nTheirs (prev) [a]:\\nA\\n\\nMine [b]:\\nq\\n\\nTheirs [b]:\\nB !!!\\n----------------------- END DEBUG -----------------------\", \"test case failed: warn_str appended\"\nassert err_fmt([(\"first\",\"1\"),(\"second\",\"2\"),(\"third\",\"3\")],{\"1\":\"I\",\"2\":\"II\",\"3\":\"III\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [1]:\\nfirst\\n\\nTheirs (prev) [1]:\\nI\\n\\nMine [1]:\\nfirst\\n\\nTheirs [1]:\\nI\\n----------------------- END DEBUG -----------------------\", \"test case failed: multi-element, ix=0\"\nassert err_fmt([(\"A\",\"A\"),(\"B\",\"B\"),(\"C\",\"C\"),(\"D\",\"D\")],{\"A\":\"a\",\"B\":\"b\",\"C\":\"c\",\"D\":\"d\"},3) == \"------------------------- DEBUG -------------------------\\nMine (prev) [C]:\\nC\\n\\nTheirs (prev) [C]:\\nc\\n\\nMine [D]:\\nD\\n\\nTheirs [D]:\\nd\\n----------------------- END DEBUG -----------------------\", \"test case failed: four elements, last index\"\nassert err_fmt([(\"only\",\"one\")],{\"one\":\"1\"},0,\" <end>\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [one]:\\nonly\\n\\nTheirs (prev) [one]:\\n1\\n\\nMine [one]:\\nonly\\n\\nTheirs [one]:\\n1 <end>\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element with warn_str\""}
{"task_id": 318, "completion_id": 0, "passed": false, "result": "failed: failed on horizontal vs vertical split", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef _sign(z):\n    \"\"\"Return -1 for z < 0, +1 otherwise (i.e. sign(0)=+1).\"\"\"\n    return np.where(z < 0, -1, 1)\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples with labels \u20131 or +1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (\u20131 or +1) for each sample in X_test.\n    \"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    X_test = np.asarray(X_test, dtype=float)\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1.0 / n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_j = best_t = best_p = None\n        for j in range(n_features):\n            xj = X_train[:, j]\n            idx = np.argsort(xj)\n            x_sorted = xj[idx]\n            y_sorted = y_train[idx]\n            w_sorted = w[idx]\n            pos_mask = y_sorted == 1\n            neg_mask = ~pos_mask\n            pos_cumsum = np.cumsum(w_sorted * pos_mask)\n            neg_cumsum = np.cumsum(w_sorted * neg_mask)\n            pos_total = pos_cumsum[-1]\n            neg_total = neg_cumsum[-1]\n            pos_left = np.concatenate(([0.0], pos_cumsum))\n            neg_left = np.concatenate(([0.0], neg_cumsum))\n            err_p1 = pos_left + (neg_total - neg_left)\n            err_pn1 = neg_left + (pos_total - pos_left)\n            for (polarity, errors) in ((1, err_p1), (-1, err_pn1)):\n                k = int(np.argmin(errors))\n                err = errors[k]\n                if err < best_error - 1e-12:\n                    best_error = err\n                    best_j = j\n                    best_p = polarity\n                    if k == 0:\n                        best_t = x_sorted[0] - 1e-10\n                    elif k == len(x_sorted):\n                        best_t = x_sorted[-1] + 1e-10\n                    else:\n                        best_t = 0.5 * (x_sorted[k - 1] + x_sorted[k])\n        eps = max(best_error, 1e-10)\n        alpha = 0.5 * math.log((1.0 - eps) / eps)\n        preds = best_p * _sign(X_train[:, best_j] - best_t)\n        w *= np.exp(-alpha * y_train * preds)\n        w /= w.sum()\n        stumps.append((best_j, best_t, best_p, alpha))\n    agg = np.zeros(X_test.shape[0])\n    for (j, t, p, alpha) in stumps:\n        agg += alpha * p * _sign(X_test[:, j] - t)\n    y_pred = _sign(agg).astype(int)\n    return y_pred.tolist()\nassert adaboost_predict(np.array([[-2],[-1],[-0.5],[0.5],[1],[2]]), np.array([-1,-1,-1,1,1,1]), np.array([[-1.5],[-0.3],[1.5]]), 5) == [-1,-1,1], \"failed on simple 1-D split\"\nassert adaboost_predict(np.array([[1,1],[1,2],[1,3],[-1,1],[-1,2],[-1,3]]), np.array([1,1,1,-1,-1,-1]), np.array([[1,2],[-1,2],[0,1]]), 5) == [1,-1,-1], \"failed on horizontal vs vertical split\"\nassert adaboost_predict(np.array([[0,5],[0,6],[0,-5],[0,-6]]), np.array([-1,-1,1,1]), np.array([[0,10],[0,-10]]), 5) == [-1,1], \"failed on feature-2 split\"\nassert adaboost_predict(np.array([[-3],[ -2],[-1],[ 1],[ 2],[ 3]]), np.array([-1,-1,-1,1,1,1]), np.array([[-4],[-0.2],[0.2],[4]]), 3) == [-1,-1,1,1], \"failed on wider range\"\nassert adaboost_predict(np.array([[2,2],[3,3],[-2,-2],[-3,-3]]), np.array([1,1,-1,-1]), np.array([[1.5,1.5],[-1.5,-1.5]]), 10) == [1,-1], \"failed on diagonal clusters\"\nassert adaboost_predict(np.array([[1,0],[2,0],[3,0],[-1,0],[-2,0],[-3,0]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.5,0],[-0.5,0]]), 4) == [1,-1], \"failed on feature-0 split\"\nassert adaboost_predict(np.array([[0,1],[0,2],[0,3],[0,-1],[0,-2],[0,-3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0.5],[0,-0.5]]), 4) == [1,-1], \"failed on feature-1 split\"\nassert adaboost_predict(np.array([[1],[2],[3],[4],[-1],[-2],[-3],[-4]]), np.array([1,1,1,1,-1,-1,-1,-1]), np.array([[5],[-5]]), 6) == [1,-1], \"failed on extended 1-D\"\nassert adaboost_predict(np.array([[1,2],[2,3],[3,4],[-1,-2],[-2,-3],[-3,-4]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0],[4,5],[-4,-5]]), 6) == [-1,1,-1], \"failed on 2-D linear split\"\nassert adaboost_predict(np.array([[0.1],[0.2],[0.3],[-0.1],[-0.2],[-0.3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.15],[-0.15]]), 5) == [1,-1], \"failed on small decimal values\""}
{"task_id": 319, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 NumPy array or list-of-lists.\n        y: Target vector (m,) or (m,1) \u2013 NumPy array or list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n],\n        rounded to 4 decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    (m, n) = X.shape\n    X_b = np.hstack((np.ones((m, 1)), X))\n    theta = np.zeros(n + 1, dtype=float)\n    for _ in range(epochs):\n        for i in range(m):\n            xi = X_b[i]\n            error = theta @ xi - y[i]\n            theta -= learning_rate * error * xi\n    return [round(val, 4) for val in theta.tolist()]\nassert stochastic_gradient_descent(np.array([[1],[2],[3]]), np.array([3,5,7]), 0.01, 5000) == [1.0, 2.0], \"test case failed: simple 1-D, y=1+2x\"\nassert stochastic_gradient_descent([[0],[1],[2],[3]], [ -2, 3, 8, 13], 0.01, 8000) == [-2.0, 5.0], \"test case failed: 1-D, y=-2+5x\"\nassert stochastic_gradient_descent([[-2],[-1],[0],[1],[2]], [10, 7, 4, 1, -2], 0.01, 10000) == [4.0, -3.0], \"test case failed: 1-D, y=4-3x\"\nassert stochastic_gradient_descent([[0,0],[1,0],[0,1],[1,1]], [1,3,4,6], 0.01, 10000) == [1.0, 2.0, 3.0], \"test case failed: 2-D, y=1+2x1+3x2\"\nassert stochastic_gradient_descent([[0],[5],[10]], [0.3, 1.3, 2.3], 0.005, 30000) == [0.3, 0.2], \"test case failed: fractional slope\"\nassert stochastic_gradient_descent([[0],[1],[2],[3]], [7,7,7,7], 0.01, 6000) == [7.0, 0.0], \"test case failed: constant function\"\nassert stochastic_gradient_descent([[1,0],[0,1],[2,2],[3,1]], [-2, -5, -5, -2], 0.01, 12000) == [-3.0, 1.0, -2.0], \"test case failed: 2-D, negatives\"\nassert stochastic_gradient_descent([[0,0,0],[1,0,0],[0,1,0],[0,0,1],[1,1,1]], [2,3,4,5,8], 0.01, 20000) == [2.0,1.0,2.0,3.0], \"test case failed: 3-D\"\nassert stochastic_gradient_descent([[0],[2],[4]], [-4, -7, -10], 0.01, 8000) == [-4.0, -1.5], \"test case failed: negative intercept & slope\""}
{"task_id": 321, "completion_id": 0, "passed": false, "result": "failed: low >= high", "solution": "import numpy as np\nimport string\nimport numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards *target* and\n    return the fittest string encountered.\"\"\"\n    np.random.seed(42)\n    chars = ' ' + string.ascii_lowercase + string.ascii_uppercase\n    char2idx = {c: i for (i, c) in enumerate(chars)}\n    idx2char = np.array(list(chars))\n    L = len(target)\n    target_idx = np.fromiter((char2idx[c] for c in target), dtype=np.int16, count=L)\n\n    def random_individual() -> str:\n        return ''.join(np.random.choice(idx2char, size=L))\n\n    def fitness(population):\n        \"\"\"Return fitness np.array of shape (n,) for list/array of strings.\"\"\"\n        pop_idx = np.array([[char2idx[c] for c in s] for s in population], dtype=np.int16)\n        diff = np.abs(pop_idx - target_idx)\n        score = 1.0 / (diff.sum(axis=1) + 1e-06)\n        return score\n    population = [random_individual() for _ in range(population_size)]\n    best_individual = ''\n    best_score = -np.inf\n    for _ in range(iterations):\n        fit = fitness(population)\n        idx_best = int(np.argmax(fit))\n        if fit[idx_best] > best_score:\n            best_score = float(fit[idx_best])\n            best_individual = population[idx_best]\n        if best_individual == target:\n            break\n        probs = fit / fit.sum()\n        parent_indices = np.random.choice(population_size, size=population_size, replace=False, p=probs)\n        parents = [population[i] for i in parent_indices]\n        children = []\n        for i in range(0, population_size - 1, 2):\n            (p1, p2) = (parents[i], parents[i + 1])\n            cx_point = np.random.randint(1, L)\n            c1 = p1[:cx_point] + p2[cx_point:]\n            c2 = p2[:cx_point] + p1[cx_point:]\n\n            def mutate(child):\n                if mutation_rate == 0.0:\n                    return child\n                child_arr = np.frombuffer(child.encode('ascii'), dtype='S1')\n                mask = np.random.rand(L) < mutation_rate\n                if mask.any():\n                    child_arr[mask] = np.random.choice(idx2char, size=mask.sum())\n                return b''.join(child_arr).decode()\n            children.extend((mutate(c1), mutate(c2)))\n        if population_size % 2 == 1:\n            children.append(parents[-1])\n        population = children[:population_size]\n    return best_individual\nassert genetic_algorithm(\"a\", 20, 0.1, 400) == \"a\", \"test failed: target='a'\"\nassert genetic_algorithm(\"Z\", 25, 0.05, 600) == \"Z\", \"test failed: target='Z'\"\nassert genetic_algorithm(\" \", 30, 0.05, 500) == \" \", \"test failed: target=' '\"\nassert genetic_algorithm(\"Hi\", 30, 0.05, 2000) == \"Hi\", \"test failed: target='Hi'\"\nassert genetic_algorithm(\"AB\", 40, 0.05, 3000) == \"AB\", \"test failed: target='AB'\"\nassert genetic_algorithm(\"GA\", 35, 0.08, 3000) == \"GA\", \"test failed: target='GA'\"\nassert genetic_algorithm(\"Py\", 50, 0.1, 3000) == \"Py\", \"test failed: target='Py'\"\nassert genetic_algorithm(\"AI\", 45, 0.07, 3500) == \"AI\", \"test failed: target='AI'\"\nassert genetic_algorithm(\"Go\", 25, 0.06, 2500) == \"Go\", \"test failed: target='Go'\"\nassert genetic_algorithm(\"OK\", 30, 0.09, 3000) == \"OK\", \"test failed: target='OK'\""}
{"task_id": 322, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    if actual.shape != predicted.shape:\n        raise ValueError('`actual` and `predicted` must have the same shape.')\n    clipped_pred = np.clip(predicted, EPS, 1.0 - EPS)\n    loss = -np.mean(actual * np.log(clipped_pred) + (1.0 - actual) * np.log(1.0 - clipped_pred))\n    return float(round(loss, 4))\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.9, 0.1, 0.8, 0.2])) == 0.1643, \"test case failed: binary_crossentropy([1,0,1,0],[0.9,0.1,0.8,0.2])\"\nassert binary_crossentropy(np.array([1, 1, 1]), np.array([1, 1, 1])) == 0.0, \"test case failed: binary_crossentropy([1,1,1],[1,1,1])\"\nassert binary_crossentropy(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0.0, \"test case failed: binary_crossentropy([0,0,0],[0,0,0])\"\nassert binary_crossentropy(np.array([[1,0],[0,1]]), np.array([[0.8,0.2],[0.2,0.8]])) == 0.2231, \"test case failed: binary_crossentropy([[1,0],[0,1]],[[0.8,0.2],[0.2,0.8]])\"\nassert binary_crossentropy(np.array([1,0]), np.array([0.5,0.5])) == 0.6931, \"test case failed: binary_crossentropy([1,0],[0.5,0.5])\"\nassert binary_crossentropy(np.array([0,1]), np.array([0.1,0.9])) == 0.1054, \"test case failed: binary_crossentropy([0,1],[0.1,0.9])\"\nassert binary_crossentropy(np.array([1]), np.array([0.001])) == 6.9078, \"test case failed: binary_crossentropy([1],[0.001])\"\nassert binary_crossentropy(np.array([0]), np.array([0.999])) == 6.9078, \"test case failed: binary_crossentropy([0],[0.999])\"\nassert binary_crossentropy(np.array([1,1,0,0]), np.array([0.7,0.6,0.4,0.3])) == 0.4338, \"test case failed: binary_crossentropy([1,1,0,0],[0.7,0.6,0.4,0.3])\"\nassert binary_crossentropy(np.array([1,0,1,0,1]), np.array([0.2,0.8,0.6,0.4,0.9])) == 0.8692, \"test case failed: binary_crossentropy([1,0,1,0,1],[0.2,0.8,0.6,0.4,0.9])\""}
{"task_id": 324, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n    if len(x) == 0:\n        return []\n    if X.ndim == 2:\n        X = X[:, :, None]\n    (rows, cols, ch) = X.shape\n    Xf = X.astype(float)\n    xs = np.asarray(x, dtype=float)\n    ys = np.asarray(y, dtype=float)\n    xs = np.clip(xs, 0, cols - 1)\n    ys = np.clip(ys, 0, rows - 1)\n    if cols > 1:\n        x0 = np.floor(xs).astype(int)\n        x0 = np.clip(x0, 0, cols - 2)\n        x1 = x0 + 1\n        dx = xs - x0\n    else:\n        x0 = x1 = np.zeros_like(xs, dtype=int)\n        dx = np.zeros_like(xs)\n    if rows > 1:\n        y0 = np.floor(ys).astype(int)\n        y0 = np.clip(y0, 0, rows - 2)\n        y1 = y0 + 1\n        dy = ys - y0\n    else:\n        y0 = y1 = np.zeros_like(ys, dtype=int)\n        dy = np.zeros_like(ys)\n    Ia = Xf[y0, x0]\n    Ib = Xf[y0, x1]\n    Ic = Xf[y1, x0]\n    Id = Xf[y1, x1]\n    wa = (1 - dx) * (1 - dy)\n    wb = dx * (1 - dy)\n    wc = (1 - dx) * dy\n    wd = dx * dy\n    wa = wa[:, None]\n    wb = wb[:, None]\n    wc = wc[:, None]\n    wd = wd[:, None]\n    out = Ia * wa + Ib * wb + Ic * wc + Id * wd\n    return np.round(out, 4).tolist()\nassert bilinear_interpolate(np.array([[[0],[10]],[[20],[30]]]),[0.5],[0.5]) == [[15.0]], \"failed on 2x2 grayscale at centre\"\nassert bilinear_interpolate(np.array([[[0],[10]],[[20],[30]]]),[0.0],[0.0]) == [[0.0]], \"failed on exact pixel (0,0)\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[1.0],[1.0]) == [[4.0]], \"failed on 3x3 centre pixel\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[1.5],[1.5]) == [[6.0]], \"failed on fractional inside 3x3\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[-1.0],[-1.0]) == [[0.0]], \"failed on top-left out-of-bounds\"\nassert bilinear_interpolate(np.array([[[0,0,0],[10,10,10]],[[20,20,20],[30,30,30]]]),[0.75],[0.25]) == [[12.5,12.5,12.5]], \"failed on RGB sample\""}
{"task_id": 326, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\"\"\"\n    X = np.asarray(X, dtype=float)\n    SV = np.asarray(support_vectors, dtype=float)\n    alpha = np.asarray(lagr_multipliers, dtype=float)\n    y_sv = np.asarray(support_vector_labels, dtype=float)\n    if X.ndim != 2 or SV.ndim != 2:\n        raise ValueError('X and support_vectors must be 2-D (samples \u00d7 features).')\n    if SV.shape[0] != alpha.size or alpha.size != y_sv.size:\n        raise ValueError('Lengths of support_vectors, lagr_multipliers and support_vector_labels must match.')\n    (n_query, n_features) = X.shape\n    if gamma is None:\n        gamma = 1.0 / n_features\n    kernel = kernel.lower()\n    if kernel == 'linear':\n        K = X @ SV.T\n    elif kernel == 'polynomial':\n        K = (gamma * (X @ SV.T) + coef) ** power\n    elif kernel == 'rbf':\n        X_sq = np.sum(X ** 2, axis=1, keepdims=True)\n        SV_sq = np.sum(SV ** 2, axis=1)\n        sq_dists = X_sq + SV_sq - 2.0 * (X @ SV.T)\n        K = np.exp(-gamma * sq_dists)\n    else:\n        raise ValueError(\"Unknown kernel '{}'. Choose from 'linear', 'polynomial', 'rbf'.\".format(kernel))\n    alpha_y = alpha * y_sv\n    decision_values = K @ alpha_y + float(intercept)\n    labels = np.where(decision_values >= 0.0, 1, -1)\n    return labels.astype(int).tolist()\nassert svm_predict([[2, 2], [0, 0]], [[0, 0], [1, 1]], [0.5, 0.5], [-1, 1], -0.5, kernel=\"linear\") == [1, -1], \"test case failed: example from the statement\"\nassert svm_predict([[1], [-1]], [[1]], [1.2], [1], -0.5, kernel=\"linear\") == [1, -1], \"test case failed: 1-D linear\"\nassert svm_predict([[0, 0]], [[0, 0]], [0.0], [1], 3.2, kernel=\"linear\") == [1], \"test case failed: intercept only positive\"\nassert svm_predict([[1, 0]], [[1, 0]], [1], [1], -3, kernel=\"polynomial\", power=2, gamma=1, coef=1) == [1], \"test case failed: polynomial positive\"\nassert svm_predict([[0, 1]], [[1, 0]], [1], [1], -3, kernel=\"polynomial\", power=2, gamma=1, coef=1) == [-1], \"test case failed: polynomial negative\"\nassert svm_predict([[2, 2]], [[2, 2]], [0.8], [1], 0, kernel=\"rbf\", gamma=0.5) == [1], \"test case failed: rbf identical vector\"\nassert svm_predict([[10, 10]], [[0, 0]], [1.0], [1], -0.2, kernel=\"rbf\", gamma=1) == [-1], \"test case failed: rbf far away\"\nassert svm_predict([[1, 1]], [[0, 0], [2, 2]], [1, 1], [-1, 1], 0, kernel=\"rbf\", gamma=0.5) == [1], \"test case failed: rbf two svs\"\nassert svm_predict([[0, 0]], [[1, 1]], [1], [-1], 0, kernel=\"rbf\") == [-1], \"test case failed: default gamma\"\nassert svm_predict([[0]], [[0]], [0], [1], 0, kernel=\"linear\") == [1], \"test case failed: sign zero handling\""}
{"task_id": 328, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Return a one-element list with the first word whose first character is\n    uppercase, or an empty list if no such word exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\nassert first_capitalized_word([\"hello\", \"World\", \"again\"]) == [\"World\"], \"failed: ['hello','World','again']\"\nassert first_capitalized_word([\"Python\", \"java\", \"c++\"]) == [\"Python\"], \"failed: ['Python','java','c++']\"\nassert first_capitalized_word([\"lower\", \"case\", \"only\"]) == [], \"failed: ['lower','case','only']\"\nassert first_capitalized_word([\"CONSTANT\", \"CamelCase\"]) == [\"CONSTANT\"], \"failed: ['CONSTANT','CamelCase']\"\nassert first_capitalized_word([]) == [], \"failed: []\"\nassert first_capitalized_word([\"hello\", \"world\", \"123\", \"!\"]) == [], \"failed: ['hello','world','123','!']\"\nassert first_capitalized_word([\"test\", \"StackOverflow\", \"github\"]) == [\"StackOverflow\"], \"failed: ['test','StackOverflow','github']\"\nassert first_capitalized_word([\"python3\", \"Ruby\", \"perl\"]) == [\"Ruby\"], \"failed: ['python3','Ruby','perl']\"\nassert first_capitalized_word([\"A\", \"b\", \"C\"]) == [\"A\"], \"failed: ['A','b','C']\"\nassert first_capitalized_word([\"lower\", \"UPPER\"]) == [\"UPPER\"], \"failed: ['lower','UPPER']\""}
{"task_id": 329, "completion_id": 0, "passed": false, "result": "failed: dft_bins() takes from 1 to 2 positional arguments but 3 were given", "solution": "import numpy as np\nimport numpy as np\ndef dft_bins(N: int, fs: int=44000, *, positive_only: bool=True) -> list[float]:\n    \"\"\"Return the centre frequency (Hz) of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        If True, return only the non-negative frequencies (indices\n        0 \u2026 \u230aN/2\u230b).  If False, return all N frequency bins in the same\n        order as `numpy.fft.fftfreq`.  Default is True.\n\n    Returns\n    -------\n    list[float]\n        Frequencies rounded to 4 decimal places.  Empty list if `N`\n        or `fs` is not strictly positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        freqs = np.arange(0, N // 2 + 1) * (fs / N)\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    return np.round(freqs, 4).tolist()\nassert dft_bins(8, 8000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(8, 8000, True)\"\nassert dft_bins(8, 8000, False) == [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(8, 8000, False)\"\nassert dft_bins(5, 10000, True) == [0.0, 2000.0, 4000.0], \"test case failed: dft_bins(5, 10000, True)\"\nassert dft_bins(5, 10000, False) == [0.0, 2000.0, 4000.0, -4000.0, -2000.0], \"test case failed: dft_bins(5, 10000, False)\"\nassert dft_bins(1, 48000, True) == [0.0], \"test case failed: dft_bins(1, 48000, True)\"\nassert dft_bins(2, 48000, False) == [0.0, -24000.0], \"test case failed: dft_bins(2, 48000, False)\"\nassert dft_bins(16, 16000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0], \"test case failed: dft_bins(16, 16000, True)\"\nassert dft_bins(16, 16000, False) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, -8000.0, -7000.0, -6000.0, -5000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(16, 16000, False)\"\nassert dft_bins(9, 9000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(9, 9000, True)\"\nassert dft_bins(3, 3000, False) == [0.0, 1000.0, -1000.0], \"test case failed: dft_bins(3, 3000, False)\""}
{"task_id": 330, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Return *new* dicts where values found in ``summary_dict`` have been\n    merged into ``parameters`` and/or ``hyperparameters`` without mutating\n    the originals.\n\n    See task description for the exact semantics.\n    \"\"\"\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n    updates = {}\n    for (key, value) in summary_dict.items():\n        if key == 'parameters' and isinstance(value, dict):\n            updates.update(value)\n        elif key == 'hyperparameters' and isinstance(value, dict):\n            updates.update(value)\n        else:\n            updates[key] = value\n    for (key, value) in updates.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n    return (new_parameters, new_hyperparameters)\n# Basic update of both dictionaries\\nparams = {\"sigma\": 1, \"gamma\": 0.5}\\nhparams = {\"id\": \"RBF\", \"trainable\": True}\\nsummary = {\"parameters\": {\"sigma\": 2}, \"hyperparameters\": {\"trainable\": False}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"sigma\": 2, \"gamma\": 0.5}, {\"id\": \"RBF\", \"trainable\": False} ), \"test 1 failed\"\n# Only parameter update\\nparams = {\"a\": 10, \"b\": 20}\\nhparams = {\"id\": \"LIN\"}\\nsummary = {\"parameters\": {\"a\": 15}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"a\": 15, \"b\": 20}, {\"id\": \"LIN\"} ), \"test 2 failed\"\n# Only hyperparameter update\\nparams = {\"c\": 3}\\nhparams = {\"id\": \"POLY\", \"degree\": 2}\\nsummary = {\"hyperparameters\": {\"degree\": 3}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"c\": 3}, {\"id\": \"POLY\", \"degree\": 3} ), \"test 3 failed\"\n# Mixed nested and flat updates\\nparams = {\"p\": 1, \"q\": 2}\\nhparams = {\"id\": \"MIX\", \"flag\": False}\\nsummary = {\"parameters\": {\"p\": 7}, \"flag\": True}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"p\": 7, \"q\": 2}, {\"id\": \"MIX\", \"flag\": True} ), \"test 4 failed\"\n# Unknown keys are ignored\\nparams = {\"x\": 0}\\nhparams = {\"id\": \"UNK\"}\\nsummary = {\"parameters\": {\"y\": 99}, \"foo\": 123}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"x\": 0}, {\"id\": \"UNK\"} ), \"test 5 failed\"\n# Original dictionaries remain unchanged\\nparams = {\"u\": 4}\\nhparams = {\"id\": \"ORI\"}\\nsummary = {\"parameters\": {\"u\": 5}}\\nupdate_kernel_settings(params, hparams, summary)\\nassert params == {\"u\": 4} and hparams == {\"id\": \"ORI\"}, \"test 6 failed\"\n# Empty summary dictionary\\nparams = {\"a\": 1}\\nhparams = {\"id\": \"EMPTY\"}\\nsummary = {}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"a\": 1}, {\"id\": \"EMPTY\"} ), \"test 7 failed\"\n# Flattening removes nested keys influence on iteration order\\nparams = {\"k1\": 1}\\nhparams = {\"id\": \"X\"}\\nsummary = {\"parameters\": {\"k1\": 2}, \"hyperparameters\": {\"id\": \"Y\"}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"k1\": 2}, {\"id\": \"Y\"} ), \"test 8 failed\"\n# Summary provides direct key also present in nested dict\\nparams = {\"alpha\": 0.1}\\nhparams = {\"id\": \"ALPHA\", \"beta\": 0.2}\\nsummary = {\"parameters\": {\"alpha\": 0.3}, \"alpha\": 0.4, \"beta\": 0.25}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"alpha\": 0.4}, {\"id\": \"ALPHA\", \"beta\": 0.25} ), \"test 9 failed\"\n# Large dictionary stress test\\nparams = {str(i): i for i in range(100)}\\nhparams = {\"id\": \"BIG\", **{f\"h{i}\": i for i in range(100)}}\\nsummary = {\"parameters\": {\"0\": -1, \"50\": -50}, \"hyperparameters\": {\"h99\": -99}}\\nassert update_kernel_settings(params, hparams, summary)[0][\"0\"] == -1 and update_kernel_settings(params, hparams, summary)[1][\"h99\"] == -99, \"test 10 failed\""}
{"task_id": 331, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix whose element (i, j) is True/1 iff sample i\n        was out of bag for tree j, same shape as *predictions*.\n\n    Returns\n    -------\n    float\n        OOB mean squared error rounded to 4 decimal places, or -1 if it cannot\n        be computed.\n    \"\"\"\n    y_true = np.asarray(y_true, dtype=float).ravel()\n    preds = np.asarray(predictions, dtype=float)\n    mask = np.asarray(oob_mask).astype(bool)\n    if preds.shape != mask.shape:\n        raise ValueError('`predictions` and `oob_mask` must have the same shape.')\n    oob_counts = mask.sum(axis=1)\n    valid_idx = oob_counts > 0\n    if not np.any(valid_idx):\n        return -1\n    oob_sums = (preds * mask).sum(axis=1)\n    oob_means = np.zeros_like(y_true)\n    oob_means[valid_idx] = oob_sums[valid_idx] / oob_counts[valid_idx]\n    sq_err = (oob_means[valid_idx] - y_true[valid_idx]) ** 2\n    mse = sq_err.mean()\n    return round(float(mse), 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree represented with plain nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of *transactions* an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node is a mapping:\n        {\"support\": <int>, \"children\": {item -> child-node}}\n    \"\"\"\n    item_counter = Counter()\n    for trx in transactions:\n        for item in set(trx):\n            item_counter[item] += 1\n    freq_items = {item: sup for (item, sup) in item_counter.items() if sup >= min_support}\n    if not freq_items:\n        return {'support': 0, 'children': {}}\n    ordered = sorted(freq_items.items(), key=lambda pair: (-pair[1], pair[0]))\n    order_rank = {item: rank for (rank, (item, _)) in enumerate(ordered)}\n    frequent_set = set(freq_items)\n    root = {'support': 0, 'children': {}}\n    for trx in transactions:\n        filtered = [item for item in set(trx) if item in frequent_set]\n        if not filtered:\n            continue\n        filtered.sort(key=lambda it: order_rank[it])\n        node = root\n        for item in filtered:\n            children = node['children']\n            if item not in children:\n                children[item] = {'support': 0, 'children': {}}\n            node = children[item]\n            node['support'] += 1\n    return root\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 333, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"Train a logistic-regression classifier with batch gradient descent and\n    return the predicted labels for the *training* data.\n\n    Parameters\n    ----------\n    X : np.ndarray (m, n)\n        Feature matrix.\n    y : np.ndarray (m,)\n        Binary targets (0 / 1).\n    alpha : float, default=0.1\n        Learning-rate.\n    num_iter : int, default=10_000\n        Number of GD iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for the input samples.\n    \"\"\"\n    eps = 1e-08\n    mu = X.mean(axis=0)\n    sigma = X.std(axis=0) + eps\n    Xn = (X - mu) / sigma\n    (m, n) = Xn.shape\n    X_aug = np.hstack((np.ones((m, 1)), Xn))\n    theta = np.zeros(n + 1)\n    for _ in range(num_iter):\n        z = X_aug @ theta\n        h = 1 / (1 + np.exp(-z))\n        grad = X_aug.T @ (h - y) / m\n        theta -= alpha * grad\n    probs = 1 / (1 + np.exp(-X_aug @ theta))\n    preds = (probs >= 0.5).astype(int)\n    return preds.tolist()\nassert logistic_regression(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 1, 1, 1])) == [0, 1, 1, 1], \"test case failed: OR gate\"\nassert logistic_regression(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1])) == [0, 0, 0, 1], \"test case failed: AND gate\"\nassert logistic_regression(np.array([[-3], [-2], [-1], [1], [2], [3]]), np.array([0, 0, 0, 1, 1, 1])) == [0, 0, 0, 1, 1, 1], \"test case failed: 1-D separable\"\nassert logistic_regression(np.array([[-2, -2], [-1, -1], [1, 2], [2, 3]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: 2-D clusters\"\nassert logistic_regression(np.array([[1], [2], [4], [5]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: 1-D threshold\"\nassert logistic_regression(np.array([[-1], [1]]), np.array([0, 1])) == [0, 1], \"test case failed: minimal set\"\nassert logistic_regression(np.array([[1, 0], [0, 1], [1, 1], [2, 0], [0, 2]]), np.array([0, 0, 1, 1, 1])) == [0, 0, 1, 1, 1], \"test case failed: mixed patterns\"\nassert logistic_regression(np.array([[10], [20], [30], [40]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: large magnitude\"\nassert logistic_regression(np.array([[-5, -5], [-4, -4], [4, 4], [5, 5]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: symmetric data\"\nassert logistic_regression(np.array([[1, 2], [2, 1], [2, 2], [3, 3], [3, 1]]), np.array([0, 0, 1, 1, 1])) == [0, 0, 1, 1, 1], \"test case failed: harder pattern\""}
{"task_id": 334, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef noam_learning_rate(step: int, model_dim: int=512, scale_factor: float=1.0, warmup_steps: int=4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    lr = scale_factor * model_dim^{-0.5} *\n         min(step^{-0.5}, step * warmup_steps^{-1.5})\n\n    The result is rounded to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n    model_term = model_dim ** (-0.5)\n    warmup_term = warmup_steps ** (-1.5)\n    decay_part = step ** (-0.5)\n    warmup_part = step * warmup_term\n    lr = scale_factor * model_term * min(decay_part, warmup_part)\n    return round(lr, 9)\nassert noam_learning_rate(10) == 0.000001747, \"test case failed: noam_learning_rate(10)\"\nassert noam_learning_rate(100) == 0.000017469, \"test case failed: noam_learning_rate(100)\"\nassert noam_learning_rate(250) == 0.000043673, \"test case failed: noam_learning_rate(250)\"\nassert noam_learning_rate(1000) == 0.000174693, \"test case failed: noam_learning_rate(1000)\"\nassert noam_learning_rate(2000) == 0.000349386, \"test case failed: noam_learning_rate(2000)\"\nassert noam_learning_rate(4000) == 0.000698771, \"test case failed: noam_learning_rate(4000)\"\nassert noam_learning_rate(5000, scale_factor=2) == 0.00125, \"test case failed: noam_learning_rate(5000, scale_factor=2)\"\nassert noam_learning_rate(1, model_dim=256, warmup_steps=1000) == 0.000001976, \"test case failed: noam_learning_rate(1, model_dim=256, warmup_steps=1000)\""}
{"task_id": 335, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable has the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n\n    Supported strategies (case-insensitive)\n        - \"zeros\"            \u2013 array of zeros          (scale ignored)\n        - \"ones\"             \u2013 ones  * scale\n        - \"normal\"           \u2013 N(0, scale)\n        - \"glorot_uniform\"   \u2013 U[\u2212limit, +limit] with\n                               limit = scale * sqrt(6 / (fan_in + fan_out))\n\n    Any other *name* raises ValueError.\n    \"\"\"\n    name_lc = name.lower()\n    if name_lc == 'zeros':\n\n        def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.zeros(shape, dtype=float)\n        return initializer\n    if name_lc == 'ones':\n\n        def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.ones(shape, dtype=float) * scale\n        return initializer\n    if name_lc == 'normal':\n\n        def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n        return initializer\n    if name_lc == 'glorot_uniform':\n\n        def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            if len(shape) < 2:\n                raise ValueError('glorot_uniform requires at least 2-D shape')\n            (fan_in, fan_out) = (shape[0], shape[1])\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(low=-limit, high=limit, size=shape)\n        return initializer\n    raise ValueError(f'Unknown initialisation strategy: {name}')\n# 1 \u2013 zeros\narr = get_initializer(\"zeros\")((2, 3), 0.7)\nassert arr.shape == (2, 3) and np.all(arr == 0), \"zeros initialiser failed\"\n# 2 \u2013 ones (check scaling)\narr = get_initializer(\"ones\")((3, 1), 2.5)\nassert np.all(arr == 2.5), \"ones initialiser failed with scaling\"\n# 3 \u2013 normal (mean close to 0)\nnp.random.seed(0)\narr = get_initializer(\"normal\")((1000,), 0.1)\nassert abs(arr.mean()) < 0.02, \"normal initialiser mean too far from 0\"\n# 5 \u2013 glorot_uniform (limits respected)\nnp.random.seed(1)\nshape = (4, 5)\nscale = 0.8\nlimit = scale * (6 / (shape[0] + shape[1])) ** 0.5\narr = get_initializer(\"glorot_uniform\")(shape, scale)\nassert arr.shape == shape and arr.max() <= limit + 1e-7 and arr.min() >= -limit - 1e-7, \"glorot uniform limits violated\"\n# 6 \u2013 glorot_uniform raises on 1-D shape\nraised = False\ntry:\n    get_initializer(\"glorot_uniform\")((10,), 1.0)\nexcept ValueError:\n    raised = True\nassert raised, \"glorot_uniform did not raise on 1-D shape\"\n# 7 \u2013 unsupported name raises\nraised = False\ntry:\n    get_initializer(\"invalid\")\nexcept ValueError:\n    raised = True\nassert raised, \"Unsupported initializer name did not raise ValueError\"\n# 8 \u2013 multiple independent calls produce independent arrays (different seeds)\narr1 = get_initializer(\"zeros\")((2, 2), 1.0)\narr2 = get_initializer(\"zeros\")((2, 2), 1.0)\nassert arr1 is not arr2 and np.array_equal(arr1, arr2), \"independent calls issue\"\n# 9 \u2013 ones with scale 1 equals all ones\narr = get_initializer(\"ones\")((4,), 1.0)\nassert np.all(arr == 1.0), \"ones initialiser with scale 1 failed\"\n# 10 \u2013 normal shape correctness\narr = get_initializer(\"normal\")((3, 4, 5), 0.2)\nassert arr.shape == (3, 4, 5), \"normal initializer gives wrong shape\""}
{"task_id": 336, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n    Y : 2-D list or NumPy array with shape (M, C) or None.  If None, Y = X.\n    c0 : additive constant of the kernel (default 0).\n\n    Returns\n    -------\n    list[list[float]] | int\n        Kernel matrix rounded to 4 decimals, or \u20111 for incompatible shapes.\n    \"\"\"\n\n    def _to_2d_float_array(obj):\n        arr = np.asarray(obj, dtype=float)\n        if arr.ndim == 0:\n            arr = arr.reshape(1, 1)\n        elif arr.ndim == 1:\n            arr = arr.reshape(1, -1)\n        return arr\n    if isinstance(X, (list, tuple)) and len(X) == 0:\n        return []\n    X_arr = _to_2d_float_array(X)\n    if Y is None:\n        Y_arr = X_arr\n    elif isinstance(Y, (list, tuple)) and len(Y) == 0:\n        Y_arr = _to_2d_float_array(Y)\n    else:\n        Y_arr = _to_2d_float_array(Y)\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    K = X_arr @ Y_arr.T\n    if c0 != 0:\n        K = K + c0\n    return np.round(K.astype(float), 4).tolist()\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 337, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of x (column) coordinates.\n        y: List of y (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values, where k == len(x) == len(y).\n    \"\"\"\n    if not x and (not y):\n        return []\n    if len(x) != len(y):\n        raise ValueError('x and y must have the same length')\n    (rows, cols, _) = X.shape\n    x_arr = np.asarray(x, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    x_idx = np.around(x_arr).astype(int)\n    y_idx = np.around(y_arr).astype(int)\n    x_idx = np.clip(x_idx, 0, cols - 1)\n    y_idx = np.clip(y_idx, 0, rows - 1)\n    out = X[y_idx, x_idx]\n    return out.tolist()\nassert nn_interpolate_2D(np.arange(1,10).reshape(3,3,1), [0.1,1.7,2.6], [0.2,1.4,2.8]) == [[1],[6],[9]], \"failed on basic 3\u00d73 single-channel example\"\nassert nn_interpolate_2D(np.array([[[1],[2]],[[3],[4]]]), [0.4,1.6], [1.2,0.9]) == [[3],[4]], \"failed when rounding & clipping on 2\u00d72 image\"\nassert nn_interpolate_2D(np.array([[[255,0,0],[0,255,0]],[[0,0,255],[255,255,0]]]), [1.2], [0.2]) == [[0,255,0]], \"failed on RGB sample extraction\"\nassert nn_interpolate_2D(np.arange(1,10).reshape(3,3,1), [-1,2], [-2,4]) == [[1],[9]], \"failed on negative and overshoot coordinates\"\nassert nn_interpolate_2D(np.arange(1,7).reshape(2,3,1), [1.49], [0.51]) == [[5]], \"failed on banker\u2019s rounding behaviour\"\nassert nn_interpolate_2D(np.zeros((4,4,3)), [], []) == [], \"failed on empty coordinate lists\"\nassert nn_interpolate_2D(np.arange(24).reshape(4,3,2), [2.49,0.5], [3.6,1.4]) == [[22,23],[6,7]], \"failed on mixed boundary and interior coordinates\"\nassert nn_interpolate_2D(np.arange(8).reshape(2,2,2), [1.0,0.0], [0.0,1.0]) == [[2,3],[4,5]], \"failed on exact integer coordinates\""}
{"task_id": 338, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"\n    Closed-form Ridge regression.\n\n    Parameters\n    ----------\n    X : array-like of shape (n_samples, n_features)\n        Design/feature matrix.\n    y : array-like of shape (n_samples,)\n        Target vector.\n    reg_factor : float, >= 0\n        L2 regularisation strength (\u03b1).\n\n    Returns\n    -------\n    list\n        Weight vector [bias, w1, \u2026, wd] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    n_samples = X.shape[0]\n    X_bar = np.hstack((np.ones((n_samples, 1)), X))\n    d_plus_1 = X_bar.shape[1]\n    A = X_bar.T @ X_bar + reg_factor * np.eye(d_plus_1)\n    b = X_bar.T @ y\n    w = np.linalg.solve(A, b)\n    return np.round(w, 4).tolist()\nassert ridge_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,9,11]), 1) == [1.5, 1.55, 2.15], \"test case failed: reg_factor=1 example\"\nassert ridge_regression(np.array([[0],[1],[2]]), np.array([1,3,5]), 0.1) == [1.0132, 1.953], \"test case failed: simple 1-feature, \u03b1=0.1\"\nassert ridge_regression(np.array([[1],[2],[3],[4]]), np.array([3,5,7,9]), 0) == [1.0, 2.0], \"test case failed: ordinary least squares\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[2,3]]), np.array([5,4,6,10]), 0) == [2.0, 1.0, 2.0], \"test case failed: 2-feature, \u03b1=0\"\nassert ridge_regression(np.array([[1],[2],[3]]), np.array([1,2,3]), 100) == [0.0513, 0.1201], \"test case failed: strong regularisation\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,2]]), np.array([1,3,5]), 0.5) == [0.88, 0.9867, 0.9867], \"test case failed: symmetric features\"\nassert ridge_regression(np.array([[1],[1],[1]]), np.array([2,2,2]), 1) == [0.8571, 0.8571], \"test case failed: singular design matrix with reg\"\nassert ridge_regression(np.array([[1,0],[0,1],[1,1],[2,2]]), np.array([3,4,6,11]), 5) == [1.1786, 1.5908, 1.7574], \"test case failed: moderate regularisation\"\nassert ridge_regression(np.array([[10,10],[20,20]]), np.array([30,60]), 100) == [0.0815, 1.3614, 1.3614], \"test case failed: scaled features with strong reg\""}
{"task_id": 339, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef most_common_label(y):\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n    \"\"\"\n    if not y:\n        return None\n    counts = Counter(y)\n    max_freq = max(counts.values())\n    for label in y:\n        if counts[label] == max_freq:\n            return label\nassert most_common_label(['cat', 'dog', 'cat', 'bird']) == 'cat', \"failed on ['cat', 'dog', 'cat', 'bird']\"\nassert most_common_label(['apple','banana','apple','banana']) == 'apple', \"failed on tie ['apple','banana','apple','banana']\"\nassert most_common_label([1,2,3,2,3,3]) == 3, \"failed on [1,2,3,2,3,3]\"\nassert most_common_label([True, False, True, True, False]) is True, \"failed on booleans\"\nassert most_common_label([]) is None, \"failed on empty list\"\nassert most_common_label(['x']) == 'x', \"failed on single element\"\nassert most_common_label(['a','b','c','d','e']) == 'a', \"failed on all unique\"\nassert most_common_label([0,0,0,1,1,2]) == 0, \"failed on numeric counts\"\nassert most_common_label(['red','blue','green','blue','red','blue']) == 'blue', \"failed on colour list\"\nassert most_common_label(['same','same','same']) == 'same', \"failed on identical elements\""}
{"task_id": 340, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1.\n        beta1: Exponential decay rate for the first moment.\n        beta2: Exponential decay rate for the second moment.\n        eps:   Small constant to avoid division by zero.\n\n    Returns:\n        Tuple of python lists rounded to 8 decimal places:\n        (updated_parameter, new_moment, new_variance)\n    \"\"\"\n    param = np.asarray(param, dtype=np.float64)\n    grad = np.asarray(grad, dtype=np.float64)\n    m = np.asarray(m, dtype=np.float64)\n    v = np.asarray(v, dtype=np.float64)\n    m_t = beta1 * m + (1.0 - beta1) * grad\n    v_t = beta2 * v + (1.0 - beta2) * grad ** 2\n    m_hat = m_t / (1.0 - beta1 ** t)\n    v_hat = v_t / (1.0 - beta2 ** t)\n    if np.all(grad == 0):\n        param_t = param.copy()\n    else:\n        param_t = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    def to_rounded_list(arr: np.ndarray) -> list:\n        return np.round(arr, 8).tolist()\n    return (to_rounded_list(param_t), to_rounded_list(m_t), to_rounded_list(v_t))\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 342, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    dist = np.abs(np.asarray(x, dtype=float) - np.asarray(y, dtype=float)).sum()\n    return float(round(dist, 4))\nassert manhattan([1, 2, 3], [2, 4, 6]) == 6.0, \"failed: manhattan([1,2,3],[2,4,6])\"\nassert manhattan([0, -1, 4.5], [-2, 3.5, 1]) == 10.0, \"failed: manhattan([...])\"\nassert manhattan([], []) == 0.0, \"failed: manhattan([],[])\"\nassert manhattan([1], []) == -1, \"failed: manhattan([1],[])\"\nassert manhattan([1.1111, 2.2222], [3.3333, 4.4444]) == 4.4444, \"failed: manhattan([...]) rounding\"\nassert manhattan([5,5,5,5],[5,5,5,5]) == 0.0, \"failed: identical vectors\"\nassert manhattan([-1,-2,-3],[-1,-2,-3]) == 0.0, \"failed: identical negative\"\nassert manhattan([100,200,300],[0,0,0]) == 600.0, \"failed: large numbers\"\nassert manhattan([0.1,0.2,0.3],[0.3,0.2,0.1]) == 0.4, \"failed: decimals\"\nassert manhattan([1e-5,-1e-5],[0,0]) == 0.0, \"failed: small numbers rounding\""}
{"task_id": 343, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists with the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.asarray(rewards)\n    n_samples = theta_samples.shape[0]\n    k = max(1, int(retain_prcnt * n_samples))\n    elite_idx = np.argsort(rewards)[::-1][:k]\n    elite_samples = theta_samples[elite_idx]\n    mean = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0)\n    mean_rounded = np.round(mean, 4).tolist()\n    var_rounded = np.round(var, 4).tolist()\n    return (mean_rounded, var_rounded)\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 344, "completion_id": 0, "passed": true, "result": "passed", "solution": "import heapq\nimport heapq\nimport itertools\nfrom collections import Counter\nfrom typing import Dict, List\nclass _Node:\n    \"\"\"Internal helper node for the Huffman tree.\"\"\"\n    __slots__ = ('freq', 'token', 'left', 'right')\n\n    def __init__(self, freq: int, token: str='', left: '_Node | None'=None, right: '_Node | None'=None) -> None:\n        self.freq = freq\n        self.token = token\n        self.left = left\n        self.right = right\ndef huffman_encode(tokens: List[str]) -> Dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function returns a dictionary mapping every unique token in *tokens*\n    to its binary, prefix-free Huffman code.\n    \"\"\"\n    if not tokens:\n        return {}\n    counter = Counter(tokens)\n    if len(counter) == 1:\n        return {next(iter(counter)): '0'}\n    heap: list[tuple[int, str, int, _Node]] = []\n    seq = itertools.count()\n    for (tok, freq) in counter.items():\n        node = _Node(freq=freq, token=tok)\n        heapq.heappush(heap, (freq, tok, next(seq), node))\n    while len(heap) > 1:\n        (f1, _, _, n1) = heapq.heappop(heap)\n        (f2, _, _, n2) = heapq.heappop(heap)\n        parent = _Node(freq=f1 + f2, token='', left=n1, right=n2)\n        heapq.heappush(heap, (parent.freq, '', next(seq), parent))\n    root = heap[0][3]\n    codes: Dict[str, str] = {}\n\n    def _walk(node: _Node, prefix: str) -> None:\n        if node.left is None and node.right is None:\n            codes[node.token] = prefix or '0'\n            return\n        _walk(node.left, prefix + '0')\n        _walk(node.right, prefix + '1')\n    _walk(root, '')\n    return codes\nassert huffman_encode([]) == {}, \"failed on empty input\"\nassert huffman_encode([\"a\"]) == {\"a\": \"0\"}, \"failed on single token\"\nassert huffman_encode([\"a\", \"b\"]) == {\"a\": \"0\", \"b\": \"1\"}, \"failed on two tokens\"\nassert huffman_encode([\"a\", \"b\", \"a\", \"b\"]) == {\"a\": \"0\", \"b\": \"1\"}, \"failed on uniform frequencies\"\nassert huffman_encode([\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"]) == {\"a\": \"1\", \"b\": \"01\", \"c\": \"00\"}, \"failed on example 1\"\nassert huffman_encode([\"x\", \"y\", \"z\", \"x\", \"x\", \"y\", \"y\", \"y\"]) == {\"y\": \"1\", \"x\": \"01\", \"z\": \"00\"}, \"failed on example 2\"\nassert len({code for code in huffman_encode([\"m\", \"n\", \"o\", \"p\", \"q\", \"n\", \"o\", \"p\", \"o\", \"p\", \"p\"]).values()}) == 5, \"failed on five token set\"\nassert all(set(code) <= {\"0\", \"1\"} for code in huffman_encode(list(\"abracadabra\")).values()), \"found non-binary characters\"\nassert len(huffman_encode([str(i) for i in range(10)])) == 10, \"did not encode all unique tokens\"\nassert all(not any(code.startswith(other) for other in huffman_encode(list(\"huffman\")).values() if other != code) for code in huffman_encode(list(\"huffman\")).values()), \"codes are not prefix-free\""}
{"task_id": 345, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function adds an intercept, computes the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and returns the predictions\n    rounded to four decimals.\n    \"\"\"\n    ones_train = np.ones((X_train.shape[0], 1))\n    ones_test = np.ones((X_test.shape[0], 1))\n    X_train_b = np.hstack((ones_train, X_train))\n    X_test_b = np.hstack((ones_test, X_test))\n    XtX = X_train_b.T @ X_train_b\n    posterior_prec = XtX + omega0\n    rhs = X_train_b.T @ y_train.ravel() + omega0 @ mu0\n    mu_n = np.linalg.solve(posterior_prec, rhs)\n    y_pred = X_test_b @ mu_n\n    return np.round(y_pred, 4).tolist()\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([2, 3, 5]), np.array([[4]]), np.zeros(2), np.eye(2)) == [5.8333], \"Test-1 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), np.eye(2)) == [8.5417], \"Test-2 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3],[4]]), np.array([1, 2, 3, 4]), np.array([[5]]), np.zeros(2), np.eye(2)) == [4.7273], \"Test-3 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2]]), np.array([1, 2]), np.array([[3]]), np.zeros(2), np.eye(2)) == [2.3333], \"Test-4 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), 5 * np.eye(2)) == [6.9741], \"Test-5 failed\"\nassert bayesian_linear_regression_predict(np.array([[2]]), np.array([4]), np.array([[3]]), np.zeros(2), np.eye(2)) == [4.6667], \"Test-6 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.array([1, 1]), np.eye(2)) == [8.5833], \"Test-7 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3],[4],[5]]), np.array([5, 7, 9, 11, 13]), np.array([[6]]), np.zeros(2), np.eye(2)) == [15.5405], \"Test-8 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), 0.5 * np.eye(2)) == [8.7797], \"Test-9 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.array([2, 2]), np.eye(2)) == [8.625], \"Test-10 failed\""}
{"task_id": 346, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    n_samples = y.size\n    if n_samples == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / n_samples\n    entropy_val = -np.sum(p * np.log2(p))\n    return round(float(entropy_val), 4)\nassert entropy([0, 0, 1, 1, 1, 1]) == 0.9183, \"failed: entropy([0,0,1,1,1,1])\"\nassert entropy([0, 0, 0, 0]) == 0.0, \"failed: entropy([0,0,0,0])\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy([0, 1, 2, 3]) == 2.0, \"failed: entropy([0,1,2,3])\"\nassert entropy([0, 1, 1, 1]) == 0.8113, \"failed: entropy([0,1,1,1])\"\nassert entropy([1, 1, 1, 1, 2, 2]) == 0.9183, \"failed: entropy([1,1,1,1,2,2])\"\nassert entropy([3, 3, 3, 3, 3, 4, 4, 5]) == 1.2988, \"failed: entropy([3,3,3,3,3,4,4,5])\"\nassert entropy([0]) == 0.0, \"failed: entropy([0])\"\nassert entropy([0, 0, 1, 2]) == 1.5, \"failed: entropy([0,0,1,2])\"\nassert entropy([10, 10, 10, 10, 10, 10, 10]) == 0.0, \"failed: entropy(repeated single label)\""}
{"task_id": 347, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex, \u2026)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\".\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples w.r.t. those samples.\n            Required when *module* == \"C\".\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb.\n\n    Returns:\n        float: Requested loss rounded to four decimals.\n    \"\"\"\n    module = module.upper()\n    if module not in {'C', 'G'}:\n        raise ValueError('module must be either \"C\" or \"G\".')\n    Y_fake = np.asarray(Y_fake, dtype=np.float32)\n    if module == 'G':\n        loss = -np.mean(Y_fake)\n        return round(float(loss), 4)\n    if Y_real is None or gradInterp is None:\n        raise ValueError('Y_real and gradInterp must be provided for critic loss.')\n    Y_real = np.asarray(Y_real, dtype=np.float32)\n    gradInterp = np.asarray(gradInterp, dtype=np.float32)\n    mean_fake = np.mean(Y_fake)\n    mean_real = np.mean(Y_real)\n    if gradInterp.ndim == 1:\n        grad_norm = np.abs(gradInterp)\n    else:\n        axes = tuple(range(1, gradInterp.ndim))\n        grad_norm = np.sqrt(np.sum(gradInterp ** 2, axis=axes))\n    gp = np.mean((grad_norm - 1.0) ** 2)\n    loss = mean_fake - mean_real + lambda_ * gp\n    return round(float(loss), 4)\nassert wgan_gp_loss(np.array([0.3, -0.2, 0.1]), \"C\", np.array([0.8, 0.4, 0.6]), np.array([[0.5, 0.5],[1.0, -1.0],[0.0, 1.0]])) == 0.3245, \"failed on example critic loss\"\nassert wgan_gp_loss(np.array([-1,-1,-1]), \"C\", np.array([1,1,1]), np.zeros((3,2))) == 8.0, \"failed on critic loss with zero gradients\"\nassert wgan_gp_loss(np.array([2,2]), \"C\", np.array([2,2]), np.array([[1.0],[1.0]])) == 0.0, \"failed on critic loss, zero Wasserstein, zero penalty\"\nassert wgan_gp_loss(np.array([0.0]), \"C\", np.array([0.0]), np.array([[1.5,0.0]])) == 2.5, \"failed on single-sample critic loss\"\nassert wgan_gp_loss(np.array([1.0,1.0]), \"G\") == -1.0, \"failed on generator loss, positive mean\"\nassert wgan_gp_loss(np.array([-0.2,0.2]), \"G\") == 0.0, \"failed on generator loss, zero mean\"\nassert wgan_gp_loss(np.array([0.0]), \"G\") == 0.0, \"failed on generator loss, zero output\"\nassert wgan_gp_loss(np.array([3,-1]), \"G\") == -1.0, \"failed on generator loss, mixed signs\"\nassert wgan_gp_loss(np.array([-2,-2,-2,-2]), \"G\") == 2.0, \"failed on generator loss, negative mean\"\nassert wgan_gp_loss(np.array([0.1234,0.5678]), \"G\") == -0.3456, \"failed on generator loss, rounding check\""}
{"task_id": 348, "completion_id": 0, "passed": false, "result": "failed: failed on symmetric PD matrix [[2,-1],[-1,2]]", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or X.ndim != 2:\n        return False\n    (n_rows, n_cols) = X.shape\n    if n_rows != n_cols:\n        return False\n    if not np.isrealobj(X):\n        return False\n    if not np.allclose(X, X.T, atol=1e-08, rtol=1e-08):\n        return False\n    try:\n        eigvals = np.linalg.eigvalsh(X)\n    except np.linalg.LinAlgError:\n        return False\n    return np.all(eigvals > 1e-08)\nassert is_symmetric_positive_definite(np.array([[2, -1], [-1, 2]])) is True, \"failed on symmetric PD matrix [[2,-1],[-1,2]]\"\nassert is_symmetric_positive_definite(np.array([[1, 2], [3, 4]])) is False, \"failed on non-symmetric matrix [[1,2],[3,4]]\"\nassert is_symmetric_positive_definite(np.array([[0, 0], [0, 0]])) is False, \"failed on zero matrix\"\nassert is_symmetric_positive_definite(np.array([[4, 1], [1, 3]])) is True, \"failed on symmetric PD matrix [[4,1],[1,3]]\"\nassert is_symmetric_positive_definite(np.eye(3)) is True, \"failed on identity matrix\"\nassert is_symmetric_positive_definite(np.array([[1, 0, 0], [0, 1, 0]])) is False, \"failed on non-square matrix\"\nassert is_symmetric_positive_definite(np.diag([-1, 5])) is False, \"failed on matrix with a negative eigenvalue\"\nassert is_symmetric_positive_definite(np.array([[1, 2, 3], [2, 1, 2], [3, 2, 1]])) is False, \"failed on indefinite symmetric matrix\"\nassert is_symmetric_positive_definite(np.array([[1e-9, 0], [0, 1e-9]])) is False, \"failed on nearly zero eigenvalues\"\nassert is_symmetric_positive_definite(np.diag([2, 3, 4])) is True, \"failed on positive diagonal matrix\""}
{"task_id": 350, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_ridge_regression(X: list[float | int], y: list[float | int], degree: int, reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non\u2013negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    Phi = np.vander(X_arr, N=degree + 1, increasing=True)\n    XtX = Phi.T @ Phi\n    reg_matrix = reg_factor * np.eye(degree + 1)\n    Xt_y = Phi.T @ y_arr\n    w = np.linalg.solve(XtX + reg_matrix, Xt_y)\n    return [round(coef, 4) for coef in w]\nassert polynomial_ridge_regression([0,1,2,3],[1,6,17,34],2,0) == [1.0, 2.0, 3.0], \"failed: quadratic without regularisation\"\nassert polynomial_ridge_regression([0,1],[1,3],1,0) == [1.0, 2.0], \"failed: simple line fit\"\nassert polynomial_ridge_regression([-2,-1,0,1,2],[2,3.5,4.0,3.5,2],2,0) == [4.0, 0.0, -0.5], \"failed: symmetric parabola\"\nassert polynomial_ridge_regression([0,0,0],[3,3,3],0,2) == [1.8], \"failed: constant with ridge\"\nassert polynomial_ridge_regression([0,1],[0,1],1,1) == [0.2, 0.4], \"failed: line with ridge\"\nassert polynomial_ridge_regression([-1,0,1],[1,0,1],2,1) == [0.25, 0.0, 0.5], \"failed: parabola with ridge\"\nassert polynomial_ridge_regression([-5,0,5],[2,2,2],0,0) == [2.0], \"failed: constant fit\"\nassert polynomial_ridge_regression([1,2,3,4],[4,15,40,85],3,0) == [1.0, 1.0, 1.0, 1.0], \"failed: cubic polynomial\"\nassert polynomial_ridge_regression([0,1,2],[0,1,4],2,0) == [0.0, 0.0, 1.0], \"failed: pure square\"\nassert polynomial_ridge_regression([-1,1],[-1,1],1,20) == [0.0, 0.0909], \"failed: heavy ridge shrinkage\""}
{"task_id": 351, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max-pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list with shape (N, C, out_h, out_w) obtained via\n        ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if X.ndim != 4:\n        raise ValueError('Input must be a 4-D tensor of shape (N, C, H, W).')\n    (p_h, p_w) = pool_shape\n    (N, C, H, W) = X.shape\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    shape_windows = (N, C, out_h, out_w, p_h, p_w)\n    (sN, sC, sH, sW) = X.strides\n    stride_windows = (sN, sC, sH * stride, sW * stride, sH, sW)\n    windows = as_strided(X, shape=shape_windows, strides=stride_windows, writeable=False)\n    pooled = windows.max(axis=(4, 5))\n    return pooled.tolist()\nassert max_pool2d(np.array([[[[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 9, 10, 11, 12],[13, 14, 15, 16]]]]), (2, 2), 2) == [[[[6, 8], [14, 16]]]], \"test case 1 failed\"\nassert max_pool2d(np.arange(1, 17).reshape(1, 1, 4, 4), (4, 4), 4) == [[[[16]]]], \"test case 2 failed\"\nassert max_pool2d(np.array([[[[1,2,3],[4,5,6],[7,8,9]],[[9,8,7],[6,5,4],[3,2,1]]]]), (2, 2), 1) == [[[[5, 6], [8, 9]], [[9, 8], [6, 5]]]], \"test case 3 failed\"\nassert max_pool2d(np.stack([np.arange(1,17).reshape(1,4,4)[0] for _ in range(2)]).reshape(2,1,4,4), (2, 2), 2) == [[[[6, 8], [14, 16]]], [[[6, 8], [14, 16]]]], \"test case 4 failed\"\nassert max_pool2d(np.array([[[[0,1,0],[2,3,2],[0,1,0]]]]), (2, 2), 1) == [[[[3, 3], [3, 3]]]], \"test case 5 failed\"\nassert max_pool2d(np.array([[[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]]]), (3, 3), 2) == [[[[13, 15], [23, 25]]]], \"test case 6 failed\"\nassert max_pool2d(np.zeros((1,1,3,3)), (2, 2), 1) == [[[[0.0, 0.0], [0.0, 0.0]]]], \"test case 7 failed\"\nassert max_pool2d(np.ones((1,3,2,2))*7, (2, 2), 2) == [[[ [7.0] ], [[7.0]], [[7.0]]]], \"test case 8 failed\"\nassert max_pool2d(np.arange(1,10).reshape(1,1,3,3), (1, 1), 1) == np.arange(1,10).reshape(1,1,3,3).tolist(), \"test case 9 failed\"\nassert max_pool2d(np.array([[[[5,4],[3,2]]]]), (2, 2), 2) == [[[[5]]]], \"test case 10 failed\""}
{"task_id": 353, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n                class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_list = list(labels)\n    if not label_list:\n        return 0.0\n    total = len(label_list)\n    counts = Counter(label_list)\n    if len(counts) == 1:\n        return 0.0\n    entropy_val = 0.0\n    for count in counts.values():\n        p = count / total\n        if p > 0.0:\n            entropy_val -= p * math.log2(p)\n    return round(entropy_val, 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 354, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _parse_padding(pad, k_r, k_c, dil, stride, in_r, in_c):\n    \"\"\"Returns the 4 individual paddings (top, bottom, left, right).\"\"\"\n    eff_k_r = k_r + (k_r - 1) * dil\n    eff_k_c = k_c + (k_c - 1) * dil\n    if isinstance(pad, int):\n        return (pad, pad, pad, pad)\n    if isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n        return (pr, pr, pc, pc)\n    if isinstance(pad, tuple) and len(pad) == 4:\n        return pad\n    if pad == 'same':\n        total_pad_r = max(eff_k_r - 1, 0)\n        total_pad_c = max(eff_k_c - 1, 0)\n        pr1 = total_pad_r // 2\n        pr2 = total_pad_r - pr1\n        pc1 = total_pad_c // 2\n        pc2 = total_pad_c - pc1\n        return (pr1, pr2, pc1, pc2)\n    return (0, 0, 0, 0)\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation) via im2col + GEMM.\"\"\"\n    (n_ex, in_r, in_c, in_ch) = X.shape\n    (k_r, k_c, in_ch_w, out_ch) = W.shape\n    assert in_ch == in_ch_w, 'Input / kernel channels mismatch'\n    dil = dilation\n    eff_k_r = k_r + (k_r - 1) * dil\n    eff_k_c = k_c + (k_c - 1) * dil\n    (pr1, pr2, pc1, pc2) = _parse_padding(pad, k_r, k_c, dil, stride, in_r, in_c)\n    X_pad = np.pad(X, pad_width=((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    (pad_r, pad_c) = (in_r + pr1 + pr2, in_c + pc1 + pc2)\n    out_r = (pad_r - eff_k_r) // stride + 1\n    out_c = (pad_c - eff_k_c) // stride + 1\n    cols = np.empty((n_ex, out_r, out_c, k_r, k_c, in_ch), dtype=X.dtype)\n    for kr in range(k_r):\n        row_start = kr * (dil + 1)\n        row_end = row_start + stride * out_r\n        row_slice = slice(row_start, row_end, stride)\n        for kc in range(k_c):\n            col_start = kc * (dil + 1)\n            col_end = col_start + stride * out_c\n            col_slice = slice(col_start, col_end, stride)\n            cols[:, :, :, kr, kc, :] = X_pad[:, row_slice, col_slice, :]\n    cols_2d = cols.reshape(n_ex * out_r * out_c, -1)\n    W_col = W.reshape(-1, out_ch)\n    out_mat = cols_2d @ W_col\n    out = out_mat.reshape(n_ex, out_r, out_c, out_ch)\n    return out.tolist()\nassert conv2D(np.arange(1, 10, dtype=float).reshape(1,3,3,1), np.array([[[[1.]],[[0.]]],[[[0.]],[[-1.]]]]), 1, 0) == [[[[-4.0], [-4.0]], [[-4.0], [-4.0]]]], \"basic 3\u00d73 no-pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, \"same\") == [[[ [1.0], [2.0] ], [ [3.0], [4.0] ]]], \"same pad identity\"\nassert conv2D(np.arange(1,17,dtype=float).reshape(1,4,4,1), np.ones((2,2,1,1)), 2, 0) == [[[ [14.0], [22.0] ], [ [46.0], [54.0] ]]], \"stride 2\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.concatenate([np.ones((1,1,1,1)), -np.ones((1,1,1,1))], axis=3), 1, 0) == [[[[1.0,-1.0],[2.0,-2.0]],[[3.0,-3.0],[4.0,-4.0]]]], \"multi-out ch\"\nassert conv2D(np.array([[[[1.,10.],[2.,20.]],[[3.,30.],[4.,40.]]]]), np.array([[[[1.],[1.]]]]), 1, 0) == [[[ [11.0], [22.0] ], [ [33.0], [44.0] ]]], \"multi-in ch\"\nassert conv2D(np.array([[[[7.]]]]), np.ones((1,1,1,1)), 1, (1,1)) == [[[[0.0],[0.0],[0.0]],[[0.0],[7.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"2-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, (0,1,0,1)) == [[[[1.0],[2.0],[0.0]],[[3.0],[4.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"4-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]],[[[5.],[6.]],[[7.],[8.]]]]), np.full((1,1,1,1),2.), 1, 0) == [[[[2.0],[4.0]],[[6.0],[8.0]]],[[[10.0],[12.0]],[[14.0],[16.0]]]], \"batching\"\nassert conv2D(np.full((1,2,2,1),5.), np.zeros((1,1,1,1)), 1, 0) == [[[ [0.0], [0.0] ], [ [0.0], [0.0] ]]], \"zero kernel\""}
{"task_id": 355, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _deterministic_sign_flip(components: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Flip the sign of each component so that the first non\u2013zero loading is \u2265 0.\n    The operation is done in-place and the resulting array is also returned.\n    \"\"\"\n    for i in range(components.shape[1]):\n        col = components[:, i]\n        for v in col:\n            if abs(v) > 1e-12:\n                if v < 0:\n                    components[:, i] *= -1\n                break\n    return components\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis with a deterministic sign convention.\"\"\"\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D array (samples \u00d7 features).')\n    if n_components < 1:\n        raise ValueError('`n_components` must be at least 1.')\n    if solver not in {'svd', 'eigen'}:\n        raise ValueError(\"`solver` must be either 'svd' or 'eigen'.\")\n    (n_samples, n_features) = data.shape\n    n_components = min(n_components, n_features)\n    X = data.astype(float) - data.mean(axis=0, keepdims=True)\n    if solver == 'svd':\n        (_, singular_vals, Vt) = np.linalg.svd(X, full_matrices=False)\n        components = Vt.T[:, :n_components]\n        expl_var = singular_vals ** 2 / (n_samples - 1)\n    else:\n        cov = np.cov(X, rowvar=False, ddof=1)\n        (eig_vals, eig_vecs) = np.linalg.eigh(cov)\n        idx = eig_vals.argsort()[::-1]\n        (eig_vals, eig_vecs) = (eig_vals[idx], eig_vecs[:, idx])\n        components = eig_vecs[:, :n_components]\n        expl_var = eig_vals\n    total_variance = expl_var.sum()\n    explained_variance_ratio = (expl_var / total_variance)[:n_components]\n    components = _deterministic_sign_flip(components)\n    scores = X @ components\n    scores_rounded = np.round(scores, 4).tolist()\n    evr_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, evr_rounded)\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: centred diagonal data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 svd\"\nassert pca_transform(np.array([[2, 2], [4, 4], [6, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: scaled diagonal \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [1, 1], [1, 2]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: variation along second axis \u2013 svd\"\nassert pca_transform(np.array([[1], [2], [3], [4]]), 1) == ([[-1.5], [-0.5], [0.5], [1.5]], [1.0]), \"failed: one-dimensional data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1, solver=\"eigen\") == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 eigen\"\nassert pca_transform(np.array([[1, 2], [1, 4]]), 1, solver=\"eigen\") == ([[-1.0], [1.0]], [1.0]), \"failed: two samples \u2013 eigen\"\nassert pca_transform(np.array([[0, 0, 1], [0, 0, 2], [0, 0, 3]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: third axis variation \u2013 svd\"\nassert pca_transform(np.array([[1, 2], [2, 4], [3, 6], [4, 8]]), 1) == ([[-3.3541], [-1.118 ], [1.118 ], [3.3541]], [1.0]), \"failed: perfectly collinear \u2013 svd\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                    classification tree; otherwise treat it as regression.\n\n    Returns\n    -------\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = list(leaf.value)\n        best_idx = 0\n        best_val = probs[0]\n        for (idx, val) in enumerate(probs[1:], start=1):\n            if val > best_val:\n                best_val = val\n                best_idx = idx\n        return best_idx\n    return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 357, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array of shape (n_samples, n_features).\n    K : int\n        Number of clusters.\n    max_iters : int, optional\n        Maximum number of iterations (default 100).\n\n    Returns\n    -------\n    list[list[float]]\n        Sorted centroids, rounded to four decimals.\n    \"\"\"\n    data = np.asarray(data, dtype=float)\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D array')\n    (n_samples, n_features) = data.shape\n    if K < 1 or K > n_samples:\n        raise ValueError('K must be between 1 and the number of samples')\n    if K == 1:\n        centroid = np.mean(data, axis=0, keepdims=True)\n        centroid = np.round(centroid, 4)\n        return centroid.tolist()\n    centroids = data[:K].astype(float, copy=True)\n    tol = 1e-06\n    for _ in range(max_iters):\n        diff = data[:, None, :] - centroids[None, :, :]\n        dists = np.sum(diff ** 2, axis=2)\n        labels = np.argmin(dists, axis=1)\n        new_centroids = centroids.copy()\n        for k in range(K):\n            members = data[labels == k]\n            if members.size:\n                new_centroids[k] = members.mean(axis=0)\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) <= tol):\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n    sort_keys = tuple((centroids[:, i] for i in reversed(range(n_features))))\n    order = np.lexsort(sort_keys)\n    centroids_sorted = np.round(centroids[order], 4)\n    return centroids_sorted.tolist()\nassert kmeans(np.array([[1,1],[1,2],[2,1],[8,8],[9,8],[8,9]]),2)==[[1.3333,1.3333],[8.3333,8.3333]],\"failed on separated two-cluster example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),1)==[[2.0,2.0]],\"failed on single-cluster mean\"\nassert kmeans(np.array([[0,0],[1,0],[0,1],[1,1]]),2)==[[0.0,0.5],[1.0,0.5]],\"failed on square dataset\"\nassert kmeans(np.array([[1,0],[0,1],[-1,0],[0,-1]]),2)==[[-0.5,0.5],[0.5,-0.5]],\"failed on cross dataset\"\nassert kmeans(np.array([[2,2],[2,4],[4,2],[4,4],[10,10]]),2)==[[3.0,3.0],[10.0,10.0]],\"failed on distant outlier dataset\"\nassert kmeans(np.array([[0,0],[1,1]]),2)==[[0.0,0.0],[1.0,1.0]],\"failed on two-point two-cluster dataset\"\nassert kmeans(np.array([[0,0],[0,1],[1,0]]),3)==[[0.0,0.0],[0.0,1.0],[1.0,0.0]],\"failed on three-point three-cluster dataset\"\nassert kmeans(np.array([[1],[2],[3]]),2)==[[1.0],[2.5]],\"failed on one-dimensional dataset\"\nassert kmeans(np.array([[3,3],[4,3],[3,4],[4,4]]),2)==[[3.0,3.5],[4.0,3.5]],\"failed on 2x2 square dataset\"\nassert kmeans(np.array([[0,0,0],[0,0,1],[0,1,0],[1,0,0],[9,9,9],[9,9,8],[9,8,9],[8,9,9]]),2)==[[0.25,0.25,0.25],[8.75,8.75,8.75]],\"failed on 3-D dataset\""}
{"task_id": 358, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    y_true_arr = np.asarray(y_true)\n    y_pred_arr = np.asarray(y_pred)\n    correct = np.sum(y_true_arr == y_pred_arr)\n    acc = correct / len(y_true_arr)\n    return round(float(acc), 4)\nassert accuracy([1, 0, 1, 1], [1, 0, 0, 1]) == 0.75, \"failed: basic mixed case\"\nassert accuracy([0, 0, 0], [0, 0, 0]) == 1.0, \"failed: perfect accuracy\"\nassert accuracy([1, 2, 3], [4, 5, 6]) == 0.0, \"failed: zero accuracy\"\nassert accuracy(np.array([1, 2, 3, 4, 2]), np.array([1, 2, 4, 4, 2])) == 0.8, \"failed: numpy array input\"\nassert accuracy([1, 2], [1]) == -1, \"failed: length mismatch\"\nassert accuracy(['cat', 'dog', 'cat'], ['cat', 'dog', 'dog']) == 0.6667, \"failed: string labels\"\nassert accuracy([True, False, True], [True, True, True]) == 0.6667, \"failed: boolean labels\"\nassert accuracy([1,1,1,1,1], [0,0,0,0,0]) == 0.0, \"failed: all incorrect large same label\"\nassert accuracy(list(range(100)), list(range(100))) == 1.0, \"failed: large perfect accuracy\""}
{"task_id": 359, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One\u2013hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    y = np.asarray(y, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    eps = np.finfo(float).eps\n    if derivative:\n        grad = y_pred - y\n        return np.round(grad, 4).tolist()\n    else:\n        loss = -np.sum(y * np.log(y_pred + eps))\n        return round(loss, 4)\nassert cross_entropy(np.array([[0,1,0],[1,0,0]]), np.array([[0.2,0.7,0.1],[0.6,0.3,0.1]])) == 0.8675, \"test case 1 failed\"\nassert cross_entropy(np.array([[0,1,0],[1,0,0]]), np.array([[0.2,0.7,0.1],[0.6,0.3,0.1]]), True) == [[0.2,-0.3,0.1],[-0.4,0.3,0.1]], \"test case 2 failed\"\nassert cross_entropy(np.array([[1,0],[0,1]]), np.array([[0.9,0.1],[0.2,0.8]])) == 0.3285, \"test case 3 failed\"\nassert cross_entropy(np.array([[1,0],[0,1]]), np.array([[0.9,0.1],[0.2,0.8]]), True) == [[-0.1,0.1],[0.2,-0.2]], \"test case 4 failed\"\nassert cross_entropy(np.array([[0,0,1],[0,1,0],[1,0,0]]), np.array([[0.3,0.2,0.5],[0.1,0.7,0.2],[0.6,0.3,0.1]])) == 1.5606, \"test case 5 failed\"\nassert cross_entropy(np.array([[0,0,1],[0,1,0],[1,0,0]]), np.array([[0.3,0.2,0.5],[0.1,0.7,0.2],[0.6,0.3,0.1]]), True) == [[0.3,0.2,-0.5],[0.1,-0.3,0.2],[-0.4,0.3,0.1]], \"test case 6 failed\"\nassert cross_entropy(np.array([[1,0,0]]), np.array([[1/3,1/3,1/3]])) == 1.0986, \"test case 7 failed\"\nassert cross_entropy(np.array([[1,0,0]]), np.array([[1/3,1/3,1/3]]), True) == [[-0.6667,0.3333,0.3333]], \"test case 8 failed\"\nassert cross_entropy(np.array([[0,1],[1,0],[0,1]]), np.array([[0.4,0.6],[0.9,0.1],[0.2,0.8]])) == 0.8393, \"test case 9 failed\"\nassert cross_entropy(np.array([[0,1],[1,0],[0,1]]), np.array([[0.4,0.6],[0.9,0.1],[0.2,0.8]]), True) == [[0.4,-0.4],[-0.1,0.1],[0.2,-0.2]], \"test case 10 failed\""}
{"task_id": 360, "completion_id": 0, "passed": false, "result": "failed: failed: dct([1,1],True)", "solution": "import numpy as np\nimport numpy as np\ndef dct(frame: np.ndarray | list[float], orthonormal: bool=True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame* (na\u00efve implementation).\n\n    Parameters\n    ----------\n    frame : 1-D array-like\n        Real-valued input signal (length N).\n    orthonormal : bool, default=True\n        If True, apply orthonormal scaling (so the transform matrix is unitary).\n\n    Returns\n    -------\n    list[float]\n        DCT-II coefficients rounded to four decimal places.\n    \"\"\"\n    x = np.asarray(frame, dtype=float).ravel()\n    if x.ndim != 1:\n        raise ValueError('Input *frame* must be one-dimensional.')\n    N = x.size\n    if N == 0:\n        return []\n    k = np.arange(N).reshape(-1, 1)\n    n = np.arange(N).reshape(1, -1)\n    cos_kn = np.cos(np.pi * k * (2 * n + 1) / (2 * N))\n    coeffs = 2.0 * cos_kn @ x\n    if orthonormal:\n        coeffs[0] *= 1 / np.sqrt(N)\n        if N > 1:\n            coeffs[1:] *= np.sqrt(2 / N)\n    return np.round(coeffs, 4).tolist()\nassert dct(np.array([1, 1]), True) == [1.4142, 0.0], \"failed: dct([1,1],True)\"\nassert dct(np.array([1, 1]), False) == [4.0, 0.0], \"failed: dct([1,1],False)\"\nassert dct(np.array([0, 0, 0]), True) == [0.0, 0.0, 0.0], \"failed: dct([0,0,0],True)\"\nassert dct(np.array([1, 0]), True) == [0.7071, 0.7071], \"failed: dct([1,0],True)\"\nassert dct(np.array([1, 0]), False) == [2.0, 1.4142], \"failed: dct([1,0],False)\"\nassert dct(np.array([1, 2, 3, 4]), True) == [5.0, -2.2304, 0.0, -0.1585], \"failed: dct([1,2,3,4],True)\"\nassert dct(np.array([1, 2, 3, 4]), False) == [20.0, -6.3086, 0.0, -0.4483], \"failed: dct([1,2,3,4],False)\"\nassert dct(np.array([2, 2, 2, 2]), True) == [4.0, 0.0, 0.0, 0.0], \"failed: dct([2,2,2,2],True)\"\nassert dct(np.array([2, 2, 2, 2]), False) == [16.0, 0.0, 0.0, 0.0], \"failed: dct([2,2,2,2],False)\"\nassert dct(np.array([1, 2, 3]), True) == [3.4641, -1.4142, 0.0], \"failed: dct([1,2,3],True)\""}
{"task_id": 362, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row is divided by its own sum so that every row finally sums to 1.\n    If any row has a sum of exactly 0 normalisation is impossible and \u20131\n    is returned.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The row-normalised matrix (rounded to 4 decimals) or \u20131 when a\n        zero-sum row is encountered.\n    \"\"\"\n    arr = np.asarray(data, dtype=float)\n    if arr.ndim != 2:\n        raise ValueError('Input must be a 2-D structure')\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic = arr / row_sums[:, None]\n    return np.round(stochastic, 4).tolist()\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: name 'Discrete' is not defined", "solution": "\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite\n    (`Tuple` or `Dict`) spaces the space is continuous only if **all** its\n    immediate sub-spaces are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: True if the action space is known to be composite.\n        tuple_obs:    True if the observation space is known to be composite.\n\n    Returns:\n        A tuple (cont_action, cont_obs) with the continuity result for the\n        action and observation spaces, respectively.\n    \"\"\"\n\n    def is_simple_box(space: Space) -> bool:\n        \"\"\"Return True only when `space` itself is a `Box`.\"\"\"\n        return isinstance(space, Box)\n\n    def all_subspaces_box(space: Space) -> bool:\n        \"\"\"Return True if every direct sub-space of `space` is a `Box`.\"\"\"\n        if isinstance(space, Tuple):\n            subspaces = space.spaces\n        elif isinstance(space, Dict):\n            subspaces = space.spaces.values()\n        else:\n            return False\n        return all((isinstance(s, Box) for s in subspaces))\n    if tuple_action:\n        cont_action = all_subspaces_box(env.action_space)\n    else:\n        cont_action = is_simple_box(env.action_space)\n    if tuple_obs:\n        cont_obs = all_subspaces_box(env.observation_space)\n    else:\n        cont_obs = is_simple_box(env.observation_space)\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 364, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function returns\n        1  if x > 0\n        0  if x == 0  (handles both 0 and -0.0)\n       -1  if x < 0\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        An integer: -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\nassert sign(10) == 1, \"test case failed: sign(10)\"\nassert sign(-5) == -1, \"test case failed: sign(-5)\"\nassert sign(0) == 0, \"test case failed: sign(0)\"\nassert sign(3.14) == 1, \"test case failed: sign(3.14)\"\nassert sign(-2.71) == -1, \"test case failed: sign(-2.71)\"\nassert sign(1e-12) == 1, \"test case failed: sign(1e-12)\"\nassert sign(-1e-8) == -1, \"test case failed: sign(-1e-8)\"\nassert sign(-0.0) == 0, \"test case failed: sign(-0.0)\"\nassert sign(999999999) == 1, \"test case failed: sign(999999999)\"\nassert sign(-999999999) == -1, \"test case failed: sign(-999999999)\""}
{"task_id": 366, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array of shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: n \u00d7 n matrix where entry (i, j) is the squared\n            \u2113\u2082 distance between samples i and j.  The diagonal entries are 0.0.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim != 2:\n        raise ValueError('X must be a 2-D NumPy array')\n    n_samples = X.shape[0]\n    if n_samples == 1:\n        return [[0.0]]\n    sq_norms = np.sum(X * X, axis=1)\n    D = sq_norms[:, None] + sq_norms[None, :] - 2.0 * (X @ X.T)\n    D[D < 0] = 0.0\n    np.fill_diagonal(D, 0.0)\n    return D.tolist()\nassert l2_distance(np.array([[0, 0], [1, 0], [1, 1]])) == [[0.0, 1.0, 2.0], [1.0, 0.0, 1.0], [2.0, 1.0, 0.0]], \"failed on basic 2-D example\"\nassert l2_distance(np.array([[2, 3]])) == [[0.0]], \"failed on single sample\"\nassert l2_distance(np.array([[1, 1], [1, 1]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed on identical samples\"\nassert l2_distance(np.array([[0, 0], [1, 0], [1, 1], [0, 1]])) == [[0.0, 1.0, 2.0, 1.0], [1.0, 0.0, 1.0, 2.0], [2.0, 1.0, 0.0, 1.0], [1.0, 2.0, 1.0, 0.0]], \"failed on square\"\nassert l2_distance(np.array([[0, 1, 2], [3, 4, 5]])) == [[0.0, 27.0], [27.0, 0.0]], \"failed on 3-D points\"\nassert l2_distance(np.array([[-1, -1], [1, 1]])) == [[0.0, 8.0], [8.0, 0.0]], \"failed on negative coordinates\"\nassert l2_distance(np.array([[0.5, 0.5], [0.5, 0.5]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed on duplicate float rows\"\nassert l2_distance(np.array([[2, 0], [0, 2], [2, 0]])) == [[0.0, 8.0, 0.0], [8.0, 0.0, 8.0], [0.0, 8.0, 0.0]], \"failed on partial duplicates\"\nassert l2_distance(np.array([[0], [3], [6]])) == [[0.0, 9.0, 36.0], [9.0, 0.0, 9.0], [36.0, 9.0, 0.0]], \"failed on 1-D samples\"\nD_tmp = np.array(l2_distance(np.random.default_rng(123).normal(size=(4, 3)))); assert np.allclose(D_tmp, D_tmp.T) and np.allclose(np.diag(D_tmp), np.zeros(4)), \"failed on random symmetry/diagonal\""}
{"task_id": 367, "completion_id": 0, "passed": false, "result": "failed: Unknown kernel 'poly'.", "solution": "import re\nimport re\nimport ast\nfrom typing import Any, Dict, Optional\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get('hyperparameters', {})\n        self.params.update({k: v for (k, v) in hp.items() if k != 'id'})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {'hyperparameters': {'id': self.__class__.__name__, **self.params}}\nclass LinearKernel(KernelBase):\n\n    def __init__(self):\n        super().__init__()\nclass PolynomialKernel(KernelBase):\n\n    def __init__(self, degree: int=3, coef0: float=1.0):\n        super().__init__(degree=degree, coef0=coef0)\nclass RBFKernel(KernelBase):\n\n    def __init__(self, gamma: float=1.0):\n        super().__init__(gamma=gamma)\ndef _str_to_kwargs(arg_string: str) -> Dict[str, Any]:\n    \"\"\"\n    Convert the inside of the \"(\u2026)\" part of a textual kernel description\n    (\"degree=4, coef0=2\") to a dictionary of correctly-typed Python values.\n    \"\"\"\n    kwargs: Dict[str, Any] = {}\n    if not arg_string:\n        return kwargs\n    for token in [t.strip() for t in arg_string.split(',') if t.strip()]:\n        if '=' not in token:\n            raise ValueError(f\"Malformed argument '{token}'.\")\n        (key, value_txt) = token.split('=', 1)\n        (key, value_txt) = (key.strip(), value_txt.strip())\n        try:\n            value = ast.literal_eval(value_txt)\n        except Exception:\n            value = value_txt.strip('\"\\'')\n        kwargs[key] = value\n    return kwargs\ndef initialize_kernel(param: Optional[Any]=None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    if isinstance(param, KernelBase):\n        return param\n    _KERNEL_MAP = {'linear': LinearKernel, 'linearkernel': LinearKernel, 'polynomial': PolynomialKernel, 'polynomialkernel': PolynomialKernel, 'rbf': RBFKernel, 'rbfkernel': RBFKernel}\n    if isinstance(param, str):\n        txt = param.strip()\n        match = re.fullmatch('\\\\s*([A-Za-z_]\\\\w*)\\\\s*(?:\\\\((.*)\\\\))?\\\\s*', txt)\n        if not match:\n            raise ValueError(f\"Cannot parse kernel description '{param!s}'.\")\n        (k_name, arg_string) = (match.group(1), match.group(2))\n        cls = _KERNEL_MAP.get(k_name.lower())\n        if cls is None:\n            raise NotImplementedError(f\"Unknown kernel '{k_name}'.\")\n        kwargs = _str_to_kwargs(arg_string or '')\n        return cls(**kwargs)\n    if isinstance(param, dict):\n        if 'hyperparameters' not in param or not isinstance(param['hyperparameters'], dict):\n            raise ValueError('Dictionary must contain a \"hyperparameters\" key.')\n        hp: Dict[str, Any] = param['hyperparameters']\n        k_id = hp.get('id')\n        if k_id is None:\n            raise ValueError('\"hyperparameters\" dictionary misses required \"id\".')\n        cls = _KERNEL_MAP.get(k_id.lower())\n        if cls is None:\n            raise NotImplementedError(f\"Unknown kernel id '{k_id}'.\")\n        kwargs = {k: v for (k, v) in hp.items() if k != 'id'}\n        return cls(**kwargs)\n    raise TypeError(f\"Unsupported parameter type '{type(param).__name__}' for initialize_kernel.\")\nassert isinstance(initialize_kernel(), LinearKernel), \"Test failed: None should give LinearKernel\"\nlin = LinearKernel(); assert initialize_kernel(lin) is lin, \"Test failed: Existing instance should be returned unchanged\"\nassert isinstance(initialize_kernel(\"linear\"), LinearKernel), \"Test failed: 'linear' string\"\nrbf = initialize_kernel(\"RBF(gamma=0.5)\"); assert isinstance(rbf, RBFKernel) and abs(rbf.params[\"gamma\"] - 0.5) < 1e-12, \"Test failed: RBF with gamma\"\npoly = initialize_kernel(\"Polynomial(degree=4, coef0=2)\"); assert isinstance(poly, PolynomialKernel) and poly.params == {\"degree\": 4, \"coef0\": 2}, \"Test failed: Polynomial with kwargs\"\nd1 = {\"hyperparameters\": {\"id\": \"LinearKernel\"}}; assert isinstance(initialize_kernel(d1), LinearKernel), \"Test failed: dict \u2192 LinearKernel\"\nd2 = {\"hyperparameters\": {\"id\": \"PolynomialKernel\", \"degree\": 5}}; poly2 = initialize_kernel(d2); assert isinstance(poly2, PolynomialKernel) and poly2.params[\"degree\"] == 5, \"Test failed: dict \u2192 PolynomialKernel\"\nd3 = {\"hyperparameters\": {\"id\": \"RBFKernel\", \"gamma\": 2.5}}; rbf2 = initialize_kernel(d3); assert isinstance(rbf2, RBFKernel) and rbf2.params[\"gamma\"] == 2.5, \"Test failed: dict \u2192 RBFKernel\"\nassert isinstance(initialize_kernel(\"rbf\"), RBFKernel), \"Test failed: 'rbf' string\"\nassert isinstance(initialize_kernel(\"poly\"), PolynomialKernel), \"Test failed: 'poly' shorthand\""}
{"task_id": 368, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector (same length as x).\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places,\n               or -1 when the input validation fails.\n    \"\"\"\n    if p is None or p <= 0:\n        return -1\n    try:\n        x_arr = np.asarray(x, dtype=float)\n        y_arr = np.asarray(y, dtype=float)\n    except Exception:\n        return -1\n    if x_arr.ndim != 1 or y_arr.ndim != 1 or x_arr.shape != y_arr.shape:\n        return -1\n    diff_p = np.abs(x_arr - y_arr) ** p\n    distance = np.sum(diff_p) ** (1.0 / p)\n    return round(float(distance), 4)\nassert minkowski([1,2,3],[4,0,3],1)==5.0,\"failed: ([1,2,3],[4,0,3],1)\"\nassert minkowski([0,0,0],[0,0,0],2)==0.0,\"failed: (zero vectors)\"\nassert minkowski([5],[2],3)==3.0,\"failed: ([5],[2],3)\"\nassert minkowski([1,2,3],[1,2],2)==-1,\"failed: shape mismatch\"\nassert minkowski([1,2],[3,4],0)==-1,\"failed: p<=0\"\nassert minkowski([-1,-2,-3],[1,2,3],1)==12.0,\"failed: negatives, p=1\""}
{"task_id": 369, "completion_id": 0, "passed": false, "result": "failed: `updates` must contain at least one tree output.", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError('`updates` must contain at least one tree output.')\n    stacked_updates = np.stack(updates, axis=0)\n    running_pred = -learning_rate * stacked_updates.sum(axis=0)\n    if regression:\n        return np.round(running_pred.astype(float), 4)\n    logits = running_pred\n    logits -= logits.max(axis=1, keepdims=True)\n    exp_logits = np.exp(logits)\n    probas = exp_logits / exp_logits.sum(axis=1, keepdims=True)\n    return probas.argmax(axis=1)\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 370, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"\n    Compute the multivariate normal (Gaussian) density for each sample in `X`.\n\n    Parameters\n    ----------\n    X   : array_like, shape (m, n)\n          Each row is a sample (observation) of dimension n.\n    mu  : array_like, shape (n,)\n          Mean vector of the distribution.\n    cov : array_like, shape (n, n)\n          Positive\u2013definite covariance matrix.\n\n    Returns\n    -------\n    list[float]\n          Densities of each sample rounded to 4 decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    mu = np.ravel(mu)\n    n = mu.size\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    denom = np.sqrt((2.0 * np.pi) ** n * det_cov)\n    diff = X - mu\n    mahal = np.einsum('ij,jk,ik->i', diff, inv_cov, diff)\n    densities = np.exp(-0.5 * mahal) / denom\n    return [round(d, 4) for d in densities]\nassert multivariate_gaussian(np.array([[0.]]), np.array([0.]), np.array([[1.]])) == [0.3989], \"Case 1 failed: 1-D, \u03bc=0, \u03c3\u00b2=1, x=0\"\nassert multivariate_gaussian(np.array([[1.]]), np.array([0.]), np.array([[1.]])) == [0.242], \"Case 2 failed: 1-D, \u03bc=0, \u03c3\u00b2=1, x=1\"\nassert multivariate_gaussian(np.array([[2.]]), np.array([2.]), np.array([[4.]])) == [0.1995], \"Case 3 failed: 1-D, \u03bc=2, \u03c3\u00b2=4, x=2\"\nassert multivariate_gaussian(np.array([[1,2],[3,4]]), np.array([2,3]), np.eye(2)) == [0.0585,0.0585], \"Case 4 failed: 2-D identity \u03a3, two samples\"\nassert multivariate_gaussian(np.array([[2,3]]), np.array([2,3]), np.eye(2)) == [0.1592], \"Case 5 failed: 2-D, centred sample\"\nassert multivariate_gaussian(np.array([[0,0]]), np.array([0,0]), np.array([[2,0],[0,2]])) == [0.0796], \"Case 6 failed: 2-D, \u03a3=diag(2,2)\"\nassert multivariate_gaussian(np.array([[1,2]]), np.array([1,1]), np.array([[2,0],[0,1]])) == [0.0683], \"Case 7 failed: 2-D, mixed variances sample A\"\nassert multivariate_gaussian(np.array([[2,1]]), np.array([1,1]), np.array([[2,0],[0,1]])) == [0.0876], \"Case 8 failed: 2-D, mixed variances sample B\"\nassert multivariate_gaussian(np.array([[0,0,0]]), np.array([0,0,0]), np.eye(3)) == [0.0635], \"Case 9 failed: 3-D, origin\""}
{"task_id": 371, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"1-D cross-correlation (a.k.a. \u201cconvolution\u201d in DL frameworks).\n\n    Parameters\n    ----------\n    X : ndarray, shape (batch, signal_length, in_channels)\n        Input signals.\n    W : ndarray, shape (kernel_width, in_channels, out_channels)\n        Convolution kernels (not flipped \u2013 cross-correlation).\n    stride : int\n        Step size of the sliding window.\n    pad : int | tuple(int, int) | \"same\"\n        Zero padding to the left / right of the signal.\n    dilation : int, default 0\n        Number of zeros inserted *between* kernel elements\n        (0 \u21d2 normal, contiguous kernel).\n\n    Returns\n    -------\n    list\n        Convolved output with shape\n        (batch, output_length, out_channels), converted via ``tolist()``.\n    \"\"\"\n    if X.ndim != 3:\n        raise ValueError('X must have shape (batch, length, in_ch).')\n    if W.ndim != 3:\n        raise ValueError('W must have shape (k_width, in_ch, out_ch).')\n    if X.shape[2] != W.shape[1]:\n        raise ValueError('Input-channel dimensions of X and W differ.')\n    if stride <= 0:\n        raise ValueError('stride must be a positive integer.')\n    if dilation < 0:\n        raise ValueError('dilation must be non-negative.')\n    (batch, L_in, C_in) = X.shape\n    (K, _, C_out) = W.shape\n    eff_K = (K - 1) * (dilation + 1) + 1\n    if isinstance(pad, str):\n        pad = pad.lower()\n    if pad == 'same':\n        out_len = int(np.ceil(L_in / stride))\n        total_pad = max(0, (out_len - 1) * stride + eff_K - L_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = int(pad)\n    elif isinstance(pad, (tuple, list)) and len(pad) == 2 and all((isinstance(x, int) for x in pad)):\n        (p_left, p_right) = pad\n    else:\n        raise ValueError('pad must be int, 2-tuple or \"same\".')\n    if p_left < 0 or p_right < 0:\n        raise ValueError('Padding values must be non-negative.')\n    X_pad = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    L_pad = L_in + p_left + p_right\n    out_len = (L_pad - eff_K) // stride + 1\n    if out_len <= 0:\n        return np.empty((batch, 0, C_out)).tolist()\n    start_idx = np.arange(out_len) * stride\n    kernel_offset = np.arange(K) * (dilation + 1)\n    idx = start_idx[:, None] + kernel_offset[None, :]\n    windows = X_pad[:, idx, :]\n    out = np.tensordot(windows, W, axes=([2, 3], [0, 1]))\n    return out.tolist()\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, \"same\", 0) == [[[-2.0],[-2.0],[-2.0],[-2.0],[4.0]]], \"failed on same-pad basic example\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, 0) == [[[-2.0],[-2.0],[-2.0]]], \"failed on zero-pad example\"\nassert conv1D(np.array([[[1],[2],[1],[2],[1],[2]]]), np.array([[[1]],[[1]]]), 2, 0) == [[[3.0],[3.0],[3.0]]], \"failed on stride 2\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[1]]]), 1, 0, 1) == [[[4.0],[6.0],[8.0]]], \"failed on dilation 1\"\nassert conv1D(np.array([[[1,2],[3,4],[5,6],[7,8]]]),\n              np.array([[[1,0,1],[1,0,0]],[[1,0,0],[1,0,1]]]), 1, 0) == [[[10,0,5],[18,0,9],[26,0,13]]], \"failed on multi-channel\"\nassert conv1D(np.array([[[1],[2],[3],[4]]]), np.array([[[1]],[[1]],[[1]]]), 2, \"same\") == [[[6.0],[7.0]]], \"failed on same-pad + stride 2\"\nassert conv1D(np.array([[[1],[2]]]), np.array([[[1]],[[1]]]), 1, 1) == [[[1.0],[3.0],[2.0]]], \"failed on symmetric integer pad\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5],[6],[7]]]), np.array([[[1]],[[1]],[[1]]]), 1, 0, 2) == [[[12.0]]], \"failed on dilation 2\"\nassert conv1D(np.array([[[1],[2],[3]],[[4],[5],[6]]]), np.array([[[1]],[[1]]]), 1, 0) == [[[3.0],[5.0]],[[9.0],[11.0]]], \"failed on batch processing\"\nassert conv1D(np.array([[[1],[2],[3]]]), np.array([[[2]]]), 1, (2,1)) == [[[0.0],[0.0],[2.0],[4.0],[6.0],[0.0]]], \"failed on asymmetric tuple pad\""}
{"task_id": 373, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.asarray(y).ravel()\n    if y.size == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probs = counts / counts.sum()\n    impurity = 1.0 - np.sum(probs ** 2)\n    return float(np.round(impurity, 4))\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple-linear\u2010regression model by batch gradient descent.\n\n    Parameters\n    ----------\n    X : np.ndarray (m \u00d7 n)\n        Feature matrix.\n    y : np.ndarray (m,)\n        Target vector.\n    learning_rate : float, default 0.01\n        Step size for gradient descent.\n    n_iterations : int, default 10_000\n        Number of gradient\u2010descent steps.\n\n    Returns\n    -------\n    (weights_list, bias) : tuple[list[float], float]\n        Learned parameters rounded to 4 decimal places.\n        If X and y have inconsistent sample sizes, returns -1.\n    \"\"\"\n    if X.ndim != 2:\n        X = np.atleast_2d(X)\n    y = np.ravel(y)\n    (m, n) = X.shape\n    if m != y.shape[0] or m == 0:\n        return -1\n    theta = np.zeros(n, dtype=float)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X @ theta + b\n        error = y_hat - y\n        dw = 2 / m * (X.T @ error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (theta_rounded, b_rounded)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 375, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calc_pad_dims_2D(X_shape: tuple, out_dim: tuple, kernel_shape: tuple, stride: int, dilation: int=0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Convolution stride (the same value is used in both directions).\n    dilation : int, optional (default = 0)\n        Dilation factor (number of zeros inserted between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)``.\n\n    Raises\n    ------\n    ValueError\n        If an argument has a wrong type/size or the requested output\n        dimensions cannot be achieved with non-negative padding.\n    \"\"\"\n\n    def _check_positive_int(name, value, minimum=1):\n        if not isinstance(value, int):\n            raise ValueError(f'{name} must be an integer.')\n        if value < minimum:\n            raise ValueError(f'{name} must be >= {minimum} (got {value}).')\n    if not isinstance(X_shape, (tuple, list)) or len(X_shape) != 4 or (not all((isinstance(x, int) for x in X_shape))):\n        raise ValueError('X_shape has to be a tuple of 4 integers (n_ex, in_rows, in_cols, in_ch).')\n    if not isinstance(out_dim, (tuple, list)) or len(out_dim) != 2 or (not all((isinstance(x, int) for x in out_dim))):\n        raise ValueError('out_dim has to be a tuple (out_rows, out_cols).')\n    if not isinstance(kernel_shape, (tuple, list)) or len(kernel_shape) != 2 or (not all((isinstance(x, int) for x in kernel_shape))):\n        raise ValueError('kernel_shape has to be a tuple (fr, fc).')\n    _check_positive_int('stride', stride, 1)\n    _check_positive_int('dilation', dilation, 0)\n    (_, in_rows, in_cols, _) = X_shape\n    (out_rows, out_cols) = out_dim\n    (fr, fc) = kernel_shape\n    _check_positive_int('in_rows', in_rows, 1)\n    _check_positive_int('in_cols', in_cols, 1)\n    _check_positive_int('out_rows', out_rows, 1)\n    _check_positive_int('out_cols', out_cols, 1)\n    _check_positive_int('fr', fr, 1)\n    _check_positive_int('fc', fc, 1)\n\n    def _pad_1d(in_size: int, out_size: int, k_size: int) -> tuple:\n        \"\"\"\n        Compute (pad_before, pad_after) for a single spatial dimension.\n        \"\"\"\n        eff_k = k_size + (k_size - 1) * dilation\n        total_pad = (out_size - 1) * stride - in_size + eff_k\n        if total_pad < 0:\n            raise ValueError('Requested output size is too small for the given input size, kernel, stride and dilation.')\n        pad_before = total_pad // 2\n        pad_after = total_pad - pad_before\n        return (pad_before, pad_after)\n    (up_pad, down_pad) = _pad_1d(in_rows, out_rows, fr)\n    (left_pad, right_pad) = _pad_1d(in_cols, out_cols, fc)\n    return (up_pad, down_pad, left_pad, right_pad)\nassert calc_pad_dims_2D((1, 28, 28, 1), (28, 28), (3, 3), 1) == (1, 1, 1, 1), \"failed: same 3\u00d73 stride-1 on 28\u00d728\"\nassert calc_pad_dims_2D((1, 32, 32, 3), (16, 16), (3, 3), 2) == (0, 1, 0, 1), \"failed: 3\u00d73 stride-2 on 32\u00d732\"\nassert calc_pad_dims_2D((1, 64, 64, 1), (64, 64), (5, 3), 1) == (2, 2, 1, 1), \"failed: non-square kernel same padding\"\nassert calc_pad_dims_2D((1, 28, 28, 1), (28, 28), (3, 3), 1, 1) == (2, 2, 2, 2), \"failed: dilated convolution same padding\"\nassert calc_pad_dims_2D((1, 31, 31, 1), (11, 11), (3, 3), 3) == (1, 1, 1, 1), \"failed: stride-3 upsample target\"\nassert calc_pad_dims_2D((1, 100, 100, 1), (45, 45), (5, 5), 2, 2) == (0, 1, 0, 1), \"failed: large dilation and stride\"\nassert calc_pad_dims_2D((1, 28, 28, 1), (26, 26), (3, 3), 1) == (0, 0, 0, 0), \"failed: valid convolution (no padding)\"\nassert calc_pad_dims_2D((1, 50, 30, 1), (25, 15), (4, 6), 2) == (1, 1, 2, 2), \"failed: rectangular input and kernel\"\nassert calc_pad_dims_2D((1, 10, 10, 3), (10, 10), (1, 1), 1) == (0, 0, 0, 0), \"failed: 1\u00d71 kernel should never pad\"\nassert calc_pad_dims_2D((1, 33, 33, 3), (17, 17), (3, 3), 2) == (1, 1, 1, 1), \"failed: stride-2 odd input size\""}
{"task_id": 376, "completion_id": 0, "passed": false, "result": "failed: failed on empty matrix", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if and only if it is square and equal (within\n    numerical tolerance) to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists of numbers.\n\n    Returns:\n        True if *X* is symmetric, otherwise False.\n    \"\"\"\n    if not X:\n        return False\n    n_rows = len(X)\n    for row in X:\n        if len(row) != n_rows:\n            return False\n    A = np.asarray(X, dtype=float)\n    return np.allclose(A, A.T, atol=1e-08, rtol=0.0)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 377, "completion_id": 0, "passed": false, "result": "failed: failed: mismatched lengths", "solution": "import numpy as np\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient that Gradient Boosting uses when minimising the\n    logistic (binomial-deviance) loss for binary classification.\n    \n    Parameters\n    ----------\n    y : list or 1-D array-like of int (0 or 1)\n        Ground-truth binary labels.\n    f : list or 1-D array-like of float\n        Current prediction scores.\n    \n    Returns\n    -------\n    list\n        Negative gradients for each sample, rounded to 4 decimal places.\n        If `y` contains values other than 0 or 1, returns -1.\n    \"\"\"\n    y_arr = np.asarray(y)\n    f_arr = np.asarray(f, dtype=float)\n    if not np.all(np.isin(y_arr, [0, 1])):\n        return -1\n    y_prime = 2 * y_arr - 1\n    g = y_prime / (1.0 + np.exp(y_prime * f_arr))\n    return np.round(g, 4).tolist()\nassert logistic_negative_gradient([0,1,0],[0.0,0.5,-0.5])==[-0.5,0.3775,-0.3775],\"failed: basic example\"\nassert logistic_negative_gradient([1,1,1],[0,0,0])==[0.5,0.5,0.5],\"failed: all ones zero score\"\nassert logistic_negative_gradient([0,0,0],[0,0,0])==[-0.5,-0.5,-0.5],\"failed: all zeros zero score\"\nassert logistic_negative_gradient([1,0],[2,-2])==[0.1192,-0.1192],\"failed: symmetric scores\"\nassert logistic_negative_gradient([1],[10])==[0.0],\"failed: large positive score\"\nassert logistic_negative_gradient([0],[-10])==[-0.0],\"failed: large negative score\"\nassert logistic_negative_gradient([],[])==[],\"failed: empty input\"\nassert logistic_negative_gradient([0,2],[0,0])==-1,\"failed: invalid label\"\nassert logistic_negative_gradient([0,1,0],[0.1])==-1,\"failed: mismatched lengths\""}
{"task_id": 378, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0\nassert indicator(1) == 1, \"test case failed: indicator(1)\"\nassert indicator(0) == 0, \"test case failed: indicator(0)\"\nassert indicator(-1) == 0, \"test case failed: indicator(-1)\"\nassert indicator(2) == 0, \"test case failed: indicator(2)\"\nassert indicator(999) == 0, \"test case failed: indicator(999)\"\nassert indicator(-999) == 0, \"test case failed: indicator(-999)\"\nassert indicator(int(False)) == 0, \"test case failed: indicator(int(False))\"\nassert indicator(1+0) == 1, \"test case failed: indicator(1+0)\"\nassert indicator(1*1) == 1, \"test case failed: indicator(1*1)\""}
{"task_id": 379, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Return the `key` values of the given priority-queue nodes in order.\n\n    Order definition:\n        1. Smaller ``priority`` ranks before larger ``priority``.\n        2. If ``priority`` ties, smaller ``entry_id`` ranks before larger\n           ``entry_id``.\n\n    The original input list is left untouched.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n               keys ``'key'``, ``'val'``, ``'priority'`` and ``'entry_id'``.\n\n    Returns:\n        A list of keys in their correct priority order.\n    \"\"\"\n    return [n['key'] for n in sorted(nodes, key=lambda n: (n['priority'], n['entry_id']))]\n# Test Case 1: Example from the description\nassert sort_priority_nodes([\n    {\"key\": \"A\", \"val\": 10, \"priority\": 3, \"entry_id\": 2},\n    {\"key\": \"B\", \"val\": 20, \"priority\": 2, \"entry_id\": 1},\n    {\"key\": \"C\", \"val\": 30, \"priority\": 3, \"entry_id\": 1}\n]) == ['B', 'C', 'A'], \"failed on example input\"\n# Test Case 2: already ordered input\nassert sort_priority_nodes([\n    {\"key\": \"X\", \"val\": 1, \"priority\": 1, \"entry_id\": 1},\n    {\"key\": \"Y\", \"val\": 2, \"priority\": 2, \"entry_id\": 2},\n    {\"key\": \"Z\", \"val\": 3, \"priority\": 3, \"entry_id\": 3}\n]) == ['X', 'Y', 'Z'], \"failed on already ordered input\"\n# Test Case 3: reverse ordered input\nassert sort_priority_nodes([\n    {\"key\": \"Z\", \"val\": 3, \"priority\": 3, \"entry_id\": 3},\n    {\"key\": \"Y\", \"val\": 2, \"priority\": 2, \"entry_id\": 2},\n    {\"key\": \"X\", \"val\": 1, \"priority\": 1, \"entry_id\": 1}\n]) == ['X', 'Y', 'Z'], \"failed on reverse ordered input\"\n# Test Case 4: duplicate priorities, different entry_ids\nassert sort_priority_nodes([\n    {\"key\": \"A\", \"val\": 0, \"priority\": 5, \"entry_id\": 2},\n    {\"key\": \"B\", \"val\": 0, \"priority\": 5, \"entry_id\": 1},\n    {\"key\": \"C\", \"val\": 0, \"priority\": 5, \"entry_id\": 3}\n]) == ['B', 'A', 'C'], \"failed on identical priorities\"\n# Test Case 5: single element list\nassert sort_priority_nodes([\n    {\"key\": \"only\", \"val\": 42, \"priority\": 7, \"entry_id\": 0}\n]) == ['only'], \"failed on single element\"\n# Test Case 6: empty input\nassert sort_priority_nodes([]) == [], \"failed on empty input\"\n# Test Case 7: negative priorities\nassert sort_priority_nodes([\n    {\"key\": \"neg\", \"val\": -1, \"priority\": -10, \"entry_id\": 5},\n    {\"key\": \"zero\", \"val\": 0, \"priority\": 0, \"entry_id\": 1}\n]) == ['neg', 'zero'], \"failed on negative priorities\"\n# Test Case 8: priorities with floats\nassert sort_priority_nodes([\n    {\"key\": \"low\", \"val\": 1, \"priority\": 1.5, \"entry_id\": 1},\n    {\"key\": \"high\", \"val\": 2, \"priority\": 0.5, \"entry_id\": 2}\n]) == ['high', 'low'], \"failed on float priorities\"\n# Test Case 9: mixed identical priorities and entry_ids (order stable for equal tuples)\nassert sort_priority_nodes([\n    {\"key\": \"first\", \"val\": 0, \"priority\": 4, \"entry_id\": 4},\n    {\"key\": \"second\", \"val\": 0, \"priority\": 4, \"entry_id\": 4}\n]) == ['first', 'second'], \"failed on identical priority and entry_id\"\n# Test Case 10: non-consecutive entry_ids\nassert sort_priority_nodes([\n    {\"key\": \"k1\", \"val\": 0, \"priority\": 2, \"entry_id\": 10},\n    {\"key\": \"k2\", \"val\": 0, \"priority\": 2, \"entry_id\": 3},\n    {\"key\": \"k3\", \"val\": 0, \"priority\": 1, \"entry_id\": 7}\n]) == ['k3', 'k2', 'k1'], \"failed on non-consecutive entry_ids\""}
{"task_id": 380, "completion_id": 0, "passed": false, "result": "failed: test failed: selu([-1,0,1],1)", "solution": "import numpy as np\nimport numpy as np\n_ALPHA = 1.6732632423543772\n_SCALE = 1.0507009873554805\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its first / second derivative.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Works for scalars and any-shaped arrays/lists.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 d(SELU)/dx\n        2 \u2192 d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimals.  For array-like inputs the shape is\n        preserved and a Python list is returned; for scalar input a float\n        is returned.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=np.float64)\n    pos_mask = x_arr > 0\n    neg_mask = ~pos_mask\n    if order == 0:\n        out = np.empty_like(x_arr)\n        out[pos_mask] = _SCALE * x_arr[pos_mask]\n        out[neg_mask] = _SCALE * _ALPHA * (np.exp(x_arr[neg_mask]) - 1)\n    elif order == 1:\n        out = np.empty_like(x_arr)\n        out[pos_mask] = _SCALE\n        out[neg_mask] = _SCALE * _ALPHA * np.exp(x_arr[neg_mask])\n    elif order == 2:\n        out = np.empty_like(x_arr)\n        out[pos_mask] = 0.0\n        out[neg_mask] = _SCALE * _ALPHA * np.exp(x_arr[neg_mask])\n    else:\n        raise ValueError('order must be 0, 1 or 2')\n    rounded = np.round(out, 4)\n    return rounded.tolist()\nassert selu([-1, 0, 1], 0) == [-1.1113, 0.0, 1.0507], \"test failed: selu([-1,0,1],0)\"\nassert selu([2], 0) == [2.1014], \"test failed: selu([2],0)\"\nassert selu(0, 0) == 0.0, \"test failed: selu(0,0)\"\nassert selu([[1, 0], [-1, 2]], 0) == [[1.0507, 0.0], [-1.1113, 2.1014]], \"test failed: selu([[1,0],[-1,2]],0)\"\nassert selu([-1, 0, 1], 1) == [0.6468, 1.0507, 1.0507], \"test failed: selu([-1,0,1],1)\"\nassert selu([2.5], 1) == [1.0507], \"test failed: selu([2.5],1)\"\nassert selu(0, 1) == 1.0507, \"test failed: selu(0,1)\"\nassert selu([-1, 1], 2) == [0.6468, 0.0], \"test failed: selu([-1,1],2)\"\nassert selu([0], 2) == [1.7581], \"test failed: selu([0],2)\"\nassert selu(2, 2) == 0.0, \"test failed: selu(2,2)\""}
{"task_id": 382, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\nimport numpy as np\nimport math\ndef gaussian_naive_bayes_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    Every feature is assumed to follow an independent Gaussian distribution\n    inside each class.  The implementation follows the exact formulae given\n    in the task statement.  The returned value is a *Python list* whose i-th\n    element is the predicted label for the i-th row of *X_test*.\n    \"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train)\n    X_test = np.asarray(X_test, dtype=float)\n    eps = 0.0001\n    classes = np.unique(y_train)\n    n_classes = classes.shape[0]\n    n_features = X_train.shape[1]\n    priors = np.zeros(n_classes, dtype=float)\n    means = np.zeros((n_classes, n_features))\n    variances = np.zeros((n_classes, n_features))\n    for (idx, c) in enumerate(classes):\n        X_c = X_train[y_train == c]\n        priors[idx] = X_c.shape[0] / X_train.shape[0]\n        means[idx, :] = X_c.mean(axis=0)\n        variances[idx, :] = X_c.var(axis=0)\n    log_priors = np.log(priors)\n    n_test = X_test.shape[0]\n    log_posteriors = np.zeros((n_test, n_classes), dtype=float)\n    for idx in range(n_classes):\n        mu = means[idx]\n        var = variances[idx]\n        log_coef = -0.5 * np.log(2 * np.pi * var + eps)\n        inv_denom = 1.0 / (2 * var + eps)\n        diff2 = (X_test - mu) ** 2\n        log_likelihood = (log_coef - diff2 * inv_denom).sum(axis=1)\n        log_posteriors[:, idx] = log_priors[idx] + log_likelihood\n    best_class_indices = np.argmax(log_posteriors, axis=1)\n    predicted_labels = classes[best_class_indices]\n    return predicted_labels.tolist()\nassert gaussian_naive_bayes_predict(np.array([[1],[2],[10],[12]]), np.array([0,0,1,1]), np.array([[1.5],[11]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,1],[1.1,0.9],[5,5],[5.1,5.2]]), np.array([0,0,1,1]), np.array([[1,0.8],[5.2,5.1]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes_predict(np.array([[0,0],[0,1],[1,0],[5,5],[5,6],[6,5],[9,9],[9.5,9],[8.5,9.2]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[0.2,0.2],[5.5,5.5],[9,8.8]])) == [0,1,2], \"test case 3 failed\"\nassert gaussian_naive_bayes_predict(np.array([[0],[5]]), np.array([0,1]), np.array([[0.1],[4.9]])) == [0,1], \"test case 4 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,1,1],[1.1,1,1.2],[4,4,4],[4.1,4.2,4]]), np.array([0,0,1,1]), np.array([[1,1.2,0.9],[4,3.9,4.1]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes_predict(np.array([[-5],[-4],[-3],[0],[0.5],[1],[5],[5.5],[6]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[-4.5],[0.2],[5.2]])) == [0,1,2], \"test case 6 failed\"\nassert gaussian_naive_bayes_predict(np.array([[2,3],[2,3],[8,9],[8,9]]), np.array([0,0,1,1]), np.array([[2.1,3.1],[8.2,9.1]])) == [0,1], \"test case 7 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,8],[2,9],[8,1],[9,2]]), np.array([0,0,1,1]), np.array([[1.5,8.5],[8.5,1.5]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1],[2],[3],[7],[8],[9]]), np.array([0,0,0,1,1,1]), np.array([[2],[8]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes_predict(np.array([[-10],[-9],[-11],[10],[11],[12]]), np.array([0,0,0,1,1,1]), np.array([[-10.5],[11.5]])) == [0,1], \"test case 10 failed\""}
{"task_id": 383, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]\nassert find_bounds(1, -1, 0.3, 0.4, 1.0) == [0.1, 1.0], \"failed: (1,-1,0.3,0.4,1)\"\nassert find_bounds(1, 1, 0.2, 0.5, 1.0) == [0.0, 0.7], \"failed: (1,1,0.2,0.5,1)\"\nassert find_bounds(1, 1, 0.8, 0.5, 1.0) == [0.3, 1.0], \"failed: (1,1,0.8,0.5,1)\"\nassert find_bounds(-1, 1, 0.1, 0.3, 1.0) == [0.2, 1.0], \"failed: (-1,1,0.1,0.3,1)\"\nassert find_bounds(-1, -1, 0.0, 0.0, 1.0) == [0.0, 0.0], \"failed: (-1,-1,0,0,1)\"\nassert find_bounds(-1, 1, 0.6, 0.2, 1.0) == [0.0, 0.6], \"failed: (-1,1,0.6,0.2,1)\"\nassert find_bounds(1, 1, 0.0, 0.0, 1.0) == [0.0, 0.0], \"failed: (1,1,0,0,1)\"\nassert find_bounds(1, -1, 0.9, 0.1, 1.0) == [0.0, 0.2], \"failed: (1,-1,0.9,0.1,1)\"\nassert find_bounds(-1, -1, 0.4, 0.9, 1.0) == [0.3, 1.0], \"failed: (-1,-1,0.4,0.9,1)\""}
{"task_id": 384, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_eigvecs(L: list[list[int | float]] | np.ndarray, k: int):\n    \"\"\"\n    Calculate the eigenvectors that correspond to the k smallest eigenvalues\n    of a Laplacian matrix L.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix.\n    k : int\n        Number of eigenvectors wanted.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix (as a list of lists) whose columns are the eigenvectors\n        associated with the k smallest eigenvalues, rounded to 4 decimals.\n        Returns -1 if k is invalid (k > n or k <= 0) or L is not square.\n    \"\"\"\n    L = np.asarray(L, dtype=float)\n    if L.ndim != 2 or L.shape[0] != L.shape[1]:\n        return -1\n    n = L.shape[0]\n    if k <= 0 or k > n:\n        return -1\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    eigvecs = np.real(eigvecs[:, :k])\n    for j in range(k):\n        v = eigvecs[:, j]\n        norm = np.linalg.norm(v)\n        if norm != 0:\n            v /= norm\n        nz = np.flatnonzero(v)\n        if nz.size > 0 and v[nz[0]] < 0:\n            v *= -1\n        eigvecs[:, j] = v\n    eigvecs = np.round(eigvecs, 4)\n    return eigvecs.tolist()\nassert get_eigvecs(np.array([[1, -1], [-1, 1]]), 1) == [[0.7071], [0.7071]], \"failed: k=1, 2x2 Laplacian\"\nassert get_eigvecs(np.diag([0, 2, 3]), 1) == [[1.0], [0.0], [0.0]], \"failed: diag 3x3, k=1\"\nassert get_eigvecs(np.diag([0, 2, 3]), 2) == [[1.0, 0.0], [0.0, 1.0], [0.0, 0.0]], \"failed: diag 3x3, k=2\"\nassert get_eigvecs(np.diag([4, 1, 3, 2]), 3) == [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]], \"failed: diag 4x4, k=3\"\nassert get_eigvecs(np.diag([0, 1]), 3) == -1, \"failed: k larger than dimension should return -1\"\nassert get_eigvecs(np.array([[0]]), 1) == [[1.0]], \"failed: 1x1 matrix\"\nassert get_eigvecs(np.diag([7, 6, 5, 4]), 1) == [[0.0], [0.0], [0.0], [1.0]], \"failed: diag 4x4 descending, k=1\"\nassert get_eigvecs(np.diag([1, 1, 2]), 2) == [[1.0, 0.0], [0.0, 1.0], [0.0, 0.0]], \"failed: repeated eigenvalues\"\nassert get_eigvecs(np.diag([5, 4, 3, 2, 1]), 5) == [[0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0]], \"failed: diag 5x5 full set\"\nassert get_eigvecs(np.array([[2, -1, -1], [-1, 2, -1], [-1, -1, 2]]), 1) == [[0.5774], [0.5774], [0.5774]], \"failed: complete graph Laplacian 3x3, k=1\""}
{"task_id": 385, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"\n    Project a labelled data set onto its first k Linear Discriminant\n    components and return the projected data rounded to 4 decimals.\n\n    Parameters\n    ----------\n    X : list of list (n_samples, n_features)\n        The input data matrix.\n    y : list (n_samples,)\n        Class labels for every sample.\n    k : int\n        Number of LDA directions that should be retained.\n\n    Returns\n    -------\n    list of list\n        The data projected onto the top-k LDA directions, rounded\n        to 4 decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    (classes, class_indices) = np.unique(y, return_inverse=True)\n    c = len(classes)\n    max_k = max(c - 1, 0)\n    k = min(k, max_k, n_features)\n    if k == 0:\n        return [[] for _ in range(n_samples)]\n    overall_mean = np.mean(X, axis=0)\n    Sw = np.zeros((n_features, n_features), dtype=float)\n    Sb = np.zeros((n_features, n_features), dtype=float)\n    for cls in classes:\n        cls_mask = y == cls\n        X_c = X[cls_mask]\n        mean_c = np.mean(X_c, axis=0)\n        centered = X_c - mean_c\n        Sw += centered.T @ centered\n        mean_diff = (mean_c - overall_mean).reshape(-1, 1)\n        Sb += X_c.shape[0] * (mean_diff @ mean_diff.T)\n    Sw_inv = np.linalg.pinv(Sw)\n    eig_mat = Sw_inv @ Sb\n    (eigvals, eigvecs) = np.linalg.eig(eig_mat)\n    eigvals = eigvals.real\n    eigvecs = eigvecs.real\n    sorted_idx = np.argsort(eigvals)[::-1]\n    W = eigvecs[:, sorted_idx[:k]]\n    for i in range(W.shape[1]):\n        vec = W[:, i]\n        vec /= np.linalg.norm(vec) + 1e-15\n        if vec[0] < 0:\n            vec = -vec\n        W[:, i] = vec\n    projected = X @ W\n    projected = np.round(projected, 4)\n    return projected.tolist()\nassert lda_transform([[1, 0], [2, 0], [5, 0], [6, 0]], [0, 0, 1, 1], 1) == [[1.0], [2.0], [5.0], [6.0]], \"test case failed: simple 2-class (1)\"\nassert lda_transform([[-3, 0], [-2, 0], [7, 0], [8, 0]], [0, 0, 1, 1], 1) == [[-3.0], [-2.0], [7.0], [8.0]], \"test case failed: simple 2-class (2)\"\nassert lda_transform([[10, 1], [12, 1], [20, 1], [22, 1]], [0, 0, 1, 1], 1) == [[10.0], [12.0], [20.0], [22.0]], \"test case failed: constant second feature\"\nassert lda_transform([[0, 3], [1, 3], [10, 3], [11, 3]], [0, 0, 1, 1], 1) == [[0.0], [1.0], [10.0], [11.0]], \"test case failed: shifted constant feature\"\nassert lda_transform([[-5, 2], [-4, 2], [4, 2], [5, 2]], [0, 0, 1, 1], 1) == [[-5.0], [-4.0], [4.0], [5.0]], \"test case failed: negative values\"\nassert lda_transform([[1, 7], [2, 7], [5, 7], [6, 7]], [0, 0, 1, 1], 1) == [[1.0], [2.0], [5.0], [6.0]], \"test case failed: constant high second feature\"\nassert lda_transform([[-8, -3], [-7, -3], [2, -3], [3, -3]], [0, 0, 1, 1], 1) == [[-8.0], [-7.0], [2.0], [3.0]], \"test case failed: negative constant second feature\"\nassert lda_transform([[1, 0], [2, 0], [3, 0], [8, 0], [9, 0], [10, 0]], [0, 0, 0, 1, 1, 1], 1) == [[1.0], [2.0], [3.0], [8.0], [9.0], [10.0]], \"test case failed: 3-vs-3 samples\"\nassert lda_transform([[1, 0], [2, 0], [4, 0], [8, 0], [10, 0], [12, 0]], [0, 0, 1, 1, 2, 2], 1) == [[1.0], [2.0], [4.0], [8.0], [10.0], [12.0]], \"test case failed: 3 classes k=1\"\nassert lda_transform([[0, 0], [1, 0], [2, 0], [9, 0], [10, 0], [11, 0], [20, 0], [21, 0]], [0, 0, 0, 1, 1, 1, 2, 2], 1) == [[0.0], [1.0], [2.0], [9.0], [10.0], [11.0], [20.0], [21.0]], \"test case failed: 8 samples 3 classes\""}
{"task_id": 386, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-15\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    loss = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    return float(np.round(loss, 4))\nassert binary_crossentropy(np.array([1, 0, 1]), np.array([0.9, 0.2, 0.7])) == 0.2284, \"Failed on mixed probabilities.\"\nassert binary_crossentropy(np.array([0, 1]), np.array([0.0, 1.0])) == 0.0, \"Failed on perfect predictions.\"\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.5, 0.5, 0.5, 0.5])) == 0.6931, \"Failed on 0.5 predictions.\"\nassert binary_crossentropy(np.array([1]), np.array([0.1])) == 2.3026, \"Failed on single sample (positive).\"\nassert binary_crossentropy(np.array([0]), np.array([0.9])) == 2.3026, \"Failed on single sample (negative).\"\nassert binary_crossentropy(np.array([1, 1, 1]), np.array([0.99, 0.99, 0.99])) == 0.0101, \"Failed on confident positives.\"\nassert binary_crossentropy(np.array([0, 0, 0]), np.array([0.01, 0.01, 0.01])) == 0.0101, \"Failed on confident negatives.\"\nassert binary_crossentropy(np.array([1, 0]), np.array([1e-6, 0.999999])) == 13.8155, \"Failed on extreme wrong predictions.\"\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.8, 0.3, 0.4, 0.2])) == 0.4298, \"Failed on assorted probabilities.\"\nassert binary_crossentropy(np.array([1,0,1,0,1,0,1,0]), np.array([0.75,0.25,0.75,0.25,0.75,0.25,0.75,0.25])) == 0.2877, \"Failed on repeated pattern predictions.\""}
{"task_id": 387, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\"\"\"\n    x = np.asarray(x, dtype=float)\n    y = np.asarray(y, dtype=float)\n    n = y.size\n    if n == 0:\n        return []\n    pred = np.full(n, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - pred\n        if np.all(x == x[0]):\n            stump_out = np.full(n, residuals.mean())\n        else:\n            order = np.argsort(x)\n            xs = x[order]\n            rs = residuals[order]\n            csum = np.cumsum(rs)\n            csum_sq = np.cumsum(rs ** 2)\n            total_sum = csum[-1]\n            total_sq = csum_sq[-1]\n            k_left = np.arange(1, n)\n            k_right = n - k_left\n            sum_left = csum[:-1]\n            sum_sq_left = csum_sq[:-1]\n            sum_right = total_sum - sum_left\n            sum_sq_right = total_sq - sum_sq_left\n            mean_left = sum_left / k_left\n            mean_right = sum_right / k_right\n            sse_left = sum_sq_left - k_left * mean_left ** 2\n            sse_right = sum_sq_right - k_right * mean_right ** 2\n            total_sse = sse_left + sse_right\n            valid = xs[:-1] != xs[1:]\n            if not np.any(valid):\n                stump_out = np.full(n, residuals.mean())\n            else:\n                best_pos = np.argmin(np.where(valid, total_sse, np.inf))\n                thr = (xs[best_pos] + xs[best_pos + 1]) / 2.0\n                mu_left = mean_left[best_pos]\n                mu_right = mean_right[best_pos]\n                stump_out = np.where(x <= thr, mu_left, mu_right)\n        pred += learning_rate * stump_out\n    return np.round(pred, 4).tolist()\nassert gradient_boosting_1d([1, 2], [2, 4], 1, 0.5) == [2.5, 3.5], \"failed on simple two-point example\"\nassert gradient_boosting_1d([1, 2, 3, 4], [5, 5, 5, 5], 3, 0.1) == [5.0, 5.0, 5.0, 5.0], \"failed on constant target\"\nassert gradient_boosting_1d([1, 2, 3], [1, 2, 3], 2, 0.5) == [1.3125, 2.0625, 2.625], \"failed on small increasing sequence\"\nassert gradient_boosting_1d([1, 2, 3], [3, 3, 3], 5, 0.2) == [3.0, 3.0, 3.0], \"failed on constant target, many rounds\"\nassert gradient_boosting_1d([1, 2, 3, 4], [2, 4, 6, 8], 2, 0.5) == [3.0, 4.3333, 6.3333, 6.3333], \"failed on linear 4-point set\"\nassert gradient_boosting_1d([1, 2, 3], [2, 2, 6], 1, 1.0) == [2.0, 2.0, 6.0], \"failed on perfect one-round fit\"\nassert gradient_boosting_1d([1, 1, 1], [1, 2, 3], 3, 0.3) == [2.0, 2.0, 2.0], \"failed when all features identical\"\nassert gradient_boosting_1d([5, 6], [10, 10], 4, 0.1) == [10.0, 10.0], \"failed on two identical targets\"\nassert gradient_boosting_1d([1, 2, 3], [10, 0, 10], 1, 0.5) == [8.3333, 5.8333, 5.8333], \"failed on uneven targets\"\nassert gradient_boosting_1d([1, 2], [0, 0], 2, 0.4) == [0.0, 0.0], \"failed on zero targets\""}
{"task_id": 389, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    try:\n        A = np.asarray(W, dtype=float)\n    except (ValueError, TypeError):\n        return -1\n    if A.ndim != 2 or A.shape[0] != A.shape[1]:\n        return -1\n    degrees = A.sum(axis=1)\n    D = np.diag(degrees)\n    L = D - A\n    L = np.round(L, 4)\n    return L.tolist()\nassert compute_laplacian([[0,1],[1,0]]) == [[1,-1],[-1,1]], \"failed: 2-node unweighted graph\"\nassert compute_laplacian([[0,2,0],[2,0,3],[0,3,0]]) == [[2,-2,0],[-2,5,-3],[0,-3,3]], \"failed: 3-node weighted graph\"\nassert compute_laplacian([[0,0,0],[0,0,0]]) == -1, \"failed: non-square matrix should return -1\"\nassert compute_laplacian([[0]]) == [[0]], \"failed: single-node graph\"\nassert compute_laplacian([[0,0,0],[0,0,0],[0,0,0]]) == [[0,0,0],[0,0,0],[0,0,0]], \"failed: graph with no edges\"\nassert compute_laplacian([[0,1,1],[1,0,1],[1,1,0]]) == [[2,-1,-1],[-1,2,-1],[-1,-1,2]], \"failed: complete graph K3\"\nassert compute_laplacian([[0,0.5],[0.5,0]]) == [[0.5,-0.5],[-0.5,0.5]], \"failed: fractional weights\"\nassert compute_laplacian([[0,1,0,0],[1,0,1,1],[0,1,0,0],[0,1,0,0]]) == [[1,-1,0,0],[-1,3,-1,-1],[0,-1,1,0],[0,-1,0,1]], \"failed: 4-node graph\"\nassert compute_laplacian([[0,4],[4,0]]) == [[4,-4],[-4,4]], \"failed: weight 4 edge\"\nassert compute_laplacian([[0,0,0],[0,0,5],[0,5,0]]) == [[0,0,0],[0,5,-5],[0,-5,5]], \"failed: isolated node present\""}
{"task_id": 391, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D (multi-channel) signal.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Array of shape (in_length, in_channels) containing the sampled signal.\n        A 1-D array of shape (in_length,) is also accepted (treated as a single\n        channel).\n    t : list[float]\n        Coordinates at which to interpolate.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated samples as a plain Python list with shape\n        (len(t), in_channels).\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim == 1:\n        X = X[:, None]\n    in_len = X.shape[0]\n    idx = np.around(np.asarray(t, dtype=float)).astype(int)\n    idx = np.clip(idx, 0, in_len - 1)\n    return X[idx].tolist()\nassert nn_interpolate_1D(np.arange(10).reshape(10, 1), [0, 2.3, 4.8, 9.7]) == [[0], [2], [5], [9]], \"Test 1 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [1.2, 2.7, -0.6, 3.9]) == [[1, 10], [3, 30], [0, 0], [3, 30]], \"Test 2 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [0, 1, 2, 3]) == [[0, 0], [1, 10], [2, 20], [3, 30]], \"Test 3 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), []) == [], \"Test 4 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [10, 5.3]) == [[3, 30], [3, 30]], \"Test 5 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [-10, -1.2]) == [[0, 0], [0, 0]], \"Test 6 failed\"\nassert nn_interpolate_1D(np.array([[5, 4, 3]]), [2.4]) == [[5, 4, 3]], \"Test 7 failed\"\nassert nn_interpolate_1D(np.arange(5).reshape(5, 1), [0.5, 1.5]) == [[0], [2]], \"Test 8 failed\"\nbig_X = np.arange(1000).reshape(1000, 1)\nassert nn_interpolate_1D(big_X, [0, 999.4, 500.2]) == [[0], [999], [500]], \"Test 9 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [1.1, 1.9, 1.6]) == [[1, 10], [2, 20], [2, 20]], \"Test 10 failed\""}
{"task_id": 392, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef preemphasis(x: 'list[float] | np.ndarray', alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: 1-D (or n-D) array-like sequence of numeric samples.\n        alpha: Pre-emphasis coefficient, 0 \u2264 alpha < 1.\n\n    Returns:\n        Filtered signal as a Python list, with every element rounded\n        to four decimal places.\n    \"\"\"\n    if not 0 <= alpha < 1:\n        raise ValueError('`alpha` must satisfy 0 \u2264 alpha < 1.')\n    arr = np.asarray(x, dtype=float).ravel()\n    if arr.size == 0:\n        return []\n    y = np.empty_like(arr)\n    y[0] = arr[0]\n    if arr.size > 1:\n        y[1:] = arr[1:] - alpha * arr[:-1]\n    return np.round(y, 4).tolist()\nassert preemphasis([1, 2, 3, 2.5], 0.97) == [1.0, 1.03, 1.06, -0.41], \"test case failed: preemphasis([1, 2, 3, 2.5], 0.97)\"\nassert preemphasis([0, 0, 0], 0.5) == [0.0, 0.0, 0.0], \"test case failed: preemphasis([0, 0, 0], 0.5)\"\nassert preemphasis([5, -5, 10, -10, 20], 0.8) == [5.0, -9.0, 14.0, -18.0, 28.0], \"test case failed: preemphasis([5, -5, 10, -10, 20], 0.8)\"\nassert preemphasis([1, 2, 3], 0.0) == [1.0, 2.0, 3.0], \"test case failed: preemphasis([1, 2, 3], 0.0)\"\nassert preemphasis([1, 1, 1, 1], 0.9) == [1.0, 0.1, 0.1, 0.1], \"test case failed: preemphasis([1, 1, 1, 1], 0.9)\"\nassert preemphasis([10], 0.5) == [10.0], \"test case failed: preemphasis([10], 0.5)\"\nassert preemphasis([-1, -2, -3, -2], 0.5) == [-1.0, -1.5, -2.0, -0.5], \"test case failed: preemphasis([-1, -2, -3, -2], 0.5)\"\nassert preemphasis([0.1, 0.2, 0.3, 0.4], 0.95) == [0.1, 0.105, 0.11, 0.115], \"test case failed: preemphasis([0.1, 0.2, 0.3, 0.4], 0.95)\"\nassert preemphasis(list(range(5)), 0.5) == [0.0, 1.0, 1.5, 2.0, 2.5], \"test case failed: preemphasis(list(range(5)), 0.5)\"\nassert preemphasis([2.5, 3.7, 4.1, 5.6, 7.8], 0.3) == [2.5, 2.95, 2.99, 4.37, 6.12], \"test case failed: preemphasis([2.5, 3.7, 4.1, 5.6, 7.8], 0.3)\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'float'", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` is used.\n    learning_rate : float, optional\n        Step size (\u03b1). Default is 0.01.\n    rho : float, optional\n        Decay rate (\u03c1). Default is 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        Tuple ``(w_next, Eg_next)`` \u2013 both rounded to four decimal places and\n        converted to regular Python lists.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad, dtype=float)\n    epsilon = 1e-08\n    Eg_next = rho * Eg + (1.0 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 395, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string has to look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n    \"\"\"\n    header = '*' * 50\n    beta_str = str(beta)\n    prob_str = f'Probability of sequence: {b_prob}'\n    return '\\n'.join([header, 'Beta:', beta_str, prob_str])\nassert print_backward_result(np.array([[1, 2], [3, 4]]), 0.75) == \"**************************************************\\nBeta:\\n[[1 2]\\n [3 4]]\\nProbability of sequence: 0.75\", \"failed on integer matrix\"\nassert print_backward_result(np.array([[0.1, 0.2]]), 0.3) == \"**************************************************\\nBeta:\\n[[0.1 0.2]]\\nProbability of sequence: 0.3\", \"failed on single-row matrix\"\nassert print_backward_result(np.array([[0.5]]), 1.0) == \"**************************************************\\nBeta:\\n[[0.5]]\\nProbability of sequence: 1.0\", \"failed on 1\u00d71 matrix\"\nassert print_backward_result(np.array([[0., 0.], [0., 0.]]), 0.0) == \"**************************************************\\nBeta:\\n[[0. 0.]\\n [0. 0.]]\\nProbability of sequence: 0.0\", \"failed on zero values\"\nassert print_backward_result(np.array([[0.123456]]), 0.987654) == \"**************************************************\\nBeta:\\n[[0.123456]]\\nProbability of sequence: 0.987654\", \"failed on longer decimals\"\nassert print_backward_result(np.array([[10, 20, 30]]), 42) == \"**************************************************\\nBeta:\\n[[10 20 30]]\\nProbability of sequence: 42\", \"failed on row vector\"\nassert print_backward_result(np.array([[5], [6], [7]]), 0.001) == \"**************************************************\\nBeta:\\n[[5]\\n [6]\\n [7]]\\nProbability of sequence: 0.001\", \"failed on column vector\"\nassert print_backward_result(np.array([[1.1, 2.2], [3.3, 4.4]]), np.float64(0.55)) == \"**************************************************\\nBeta:\\n[[1.1 2.2]\\n [3.3 4.4]]\\nProbability of sequence: 0.55\", \"failed on numpy.float64 input\"\nassert print_backward_result(np.array([[0, 1], [1, 0]]), 0.999) == \"**************************************************\\nBeta:\\n[[0 1]\\n [1 0]]\\nProbability of sequence: 0.999\", \"failed on mixed values\""}
{"task_id": 396, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        [\n            tanh(x),                     # element-wise tanh\n            1 - tanh(x)**2,              # 1st derivative\n            -2 * tanh(x) * (1 - tanh(x)**2)  # 2nd derivative\n        ]\n    All inner lists are rounded to 6 decimal places.\n    \"\"\"\n    z = np.asarray(x, dtype=float).copy()\n    t = np.tanh(z)\n    dt = 1.0 - t ** 2\n    d2t = -2.0 * t * dt\n    out = [arr.round(6).tolist() for arr in (t, dt, d2t)]\n    return out\nassert tanh_with_derivatives([0]) == [[0.0], [1.0], [0.0]], \"test case failed: tanh_with_derivatives([0])\"\nassert tanh_with_derivatives([0,1,-1]) == [np.round(np.tanh([0,1,-1]),6).tolist(), np.round(1 - np.tanh([0,1,-1])**2,6).tolist(), np.round(-2*np.tanh([0,1,-1])*(1 - np.tanh([0,1,-1])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0,1,-1])\"\nassert tanh_with_derivatives([2,-2]) == [np.round(np.tanh([2,-2]),6).tolist(), np.round(1 - np.tanh([2,-2])**2,6).tolist(), np.round(-2*np.tanh([2,-2])*(1 - np.tanh([2,-2])**2),6).tolist()], \"test case failed: tanh_with_derivatives([2,-2])\"\nassert tanh_with_derivatives([10,-10]) == [np.round(np.tanh([10,-10]),6).tolist(), np.round(1 - np.tanh([10,-10])**2,6).tolist(), np.round(-2*np.tanh([10,-10])*(1 - np.tanh([10,-10])**2),6).tolist()], \"test case failed: tanh_with_derivatives([10,-10])\"\nassert tanh_with_derivatives([0.5,-0.5,3]) == [np.round(np.tanh([0.5,-0.5,3]),6).tolist(), np.round(1 - np.tanh([0.5,-0.5,3])**2,6).tolist(), np.round(-2*np.tanh([0.5,-0.5,3])*(1 - np.tanh([0.5,-0.5,3])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0.5,-0.5,3])\"\nassert tanh_with_derivatives(np.array([0.2,-0.2])) == [np.round(np.tanh(np.array([0.2,-0.2])),6).tolist(), np.round(1 - np.tanh(np.array([0.2,-0.2]))**2,6).tolist(), np.round(-2*np.tanh(np.array([0.2,-0.2]))*(1 - np.tanh(np.array([0.2,-0.2]))**2),6).tolist()], \"test case failed: tanh_with_derivatives(np.array([0.2,-0.2]))\"\nassert tanh_with_derivatives([4]) == [np.round(np.tanh([4]),6).tolist(), np.round(1 - np.tanh([4])**2,6).tolist(), np.round(-2*np.tanh([4])*(1 - np.tanh([4])**2),6).tolist()], \"test case failed: tanh_with_derivatives([4])\"\nassert tanh_with_derivatives([-3]) == [np.round(np.tanh([-3]),6).tolist(), np.round(1 - np.tanh([-3])**2,6).tolist(), np.round(-2*np.tanh([-3])*(1 - np.tanh([-3])**2),6).tolist()], \"test case failed: tanh_with_derivatives([-3])\"\nassert tanh_with_derivatives([0.25]) == [np.round(np.tanh([0.25]),6).tolist(), np.round(1 - np.tanh([0.25])**2,6).tolist(), np.round(-2*np.tanh([0.25])*(1 - np.tanh([0.25])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0.25])\"\nassert tanh_with_derivatives([-0.75,0.75]) == [np.round(np.tanh([-0.75,0.75]),6).tolist(), np.round(1 - np.tanh([-0.75,0.75])**2,6).tolist(), np.round(-2*np.tanh([-0.75,0.75])*(1 - np.tanh([-0.75,0.75])**2),6).tolist()], \"test case failed: tanh_with_derivatives([-0.75,0.75])\""}
{"task_id": 397, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.zeros((0, n_classes), dtype=float)\n    indices = np.random.randint(0, n_classes, size=n_examples)\n    one_hot = np.eye(n_classes, dtype=float)[indices]\n    return one_hot\nnp.random.seed(1)\nassert np.array_equal(random_one_hot_matrix(1, 1), np.array([[1.]])), \"failed: (1,1) edge-case\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert mat.shape == (5, 3), \"shape mismatch for (5,3)\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert np.all((mat == 0) | (mat == 1)), \"non-binary values (5,3)\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert np.all(mat.sum(axis=1) == 1), \"row sum not equal to 1 (5,3)\"\nnp.random.seed(2)\nmat = random_one_hot_matrix(0, 4)\nassert mat.shape == (0, 4), \"shape mismatch for zero rows\"\nnp.random.seed(3)\nmat = random_one_hot_matrix(10, 4)\nassert mat.shape == (10, 4), \"shape mismatch (10,4)\"\nnp.random.seed(5)\nmat = random_one_hot_matrix(6, 6)\nassert np.all(mat.sum(axis=1) == 1), \"row sum error square matrix\"\nnp.random.seed(6)\nmat = random_one_hot_matrix(100, 50)\nassert mat.shape == (100, 50), \"shape mismatch (100,50)\"\nnp.random.seed(7)\nmat1 = random_one_hot_matrix(8, 3)\nnp.random.seed(8)\nmat2 = random_one_hot_matrix(8, 3)\nassert not np.array_equal(mat1, mat2), \"different seeds should produce different matrices\"\nnp.random.seed(10)\nmat = random_one_hot_matrix(2, 4)\nassert np.all(mat.sum(axis=1) == 1), \"row sum error (2,4)\""}
{"task_id": 398, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient element-wise.\n\n    Args:\n        x: 1-D list or NumPy array of numeric values.\n        alpha: Positive ELU hyper-parameter (default 0.1).\n        derivative: If True, return the gradient; otherwise return the activation.\n\n    Returns:\n        Python list of floats rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    pos_mask = x_arr >= 0\n    neg_mask = ~pos_mask\n    if not derivative:\n        out = x_arr.copy()\n        out[neg_mask] = alpha * (np.exp(x_arr[neg_mask]) - 1)\n    else:\n        out = np.ones_like(x_arr)\n        out[neg_mask] = alpha * np.exp(x_arr[neg_mask])\n    return np.round(out, 4).tolist()\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 399, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not isinstance(Y, np.ndarray):\n        return -1\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    XX = np.sum(X * X, axis=1)[:, None]\n    YY = np.sum(Y * Y, axis=1)[None, :]\n    d2 = XX + YY - 2 * X @ Y.T\n    d2 = np.clip(d2, 0.0, None)\n    D = np.sqrt(d2)\n    return np.round(D, 4).tolist()\nassert pairwise_distances(np.array([[0, 0], [3, 4]]), np.array([[3, 0], [0, 4]])) == [[3.0, 4.0], [4.0, 3.0]], \"Test-1 failed\"\nassert pairwise_distances(np.array([[0, 0]]), np.array([[0, 0]])) == [[0.0]], \"Test-2 failed\"\nassert pairwise_distances(np.array([[1, 2], [3, 4]]), np.array([[5, 6]])) == [[5.6569], [2.8284]], \"Test-3 failed\"\nassert pairwise_distances(np.array([[0, 0, 0]]), np.array([[1, 2, 2], [2, 2, 1]])) == [[3.0, 3.0]], \"Test-4 failed\"\nassert pairwise_distances(np.array([[1, 2]]), np.array([[1, 2, 3]])) == -1, \"Test-5 failed (shape mismatch)\"\nassert pairwise_distances(np.array([[1, 1]]), np.array([[2, 2]])) == [[1.4142]], \"Test-6 failed\"\nassert pairwise_distances(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]])) == [[0.0, 1.4142], [1.4142, 0.0]], \"Test-7 failed\"\nassert pairwise_distances(np.array([[2, -3]]), np.array([[-2, 3]])) == [[7.2111]], \"Test-8 failed\"\nassert pairwise_distances(np.empty((0, 2)), np.array([[1, 1]])) == [], \"Test-9 failed (empty X)\"\nassert pairwise_distances(np.array([[1, 2]]), np.empty((0, 2))) == [[]], \"Test-10 failed (empty Y)\""}
{"task_id": 400, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with the given\n        parameters does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance < 0:\n        raise ValueError('Variance must be non-negative.')\n    if variance == 0:\n        if x < mean:\n            prob = 0.0\n        elif x > mean:\n            prob = 1.0\n        else:\n            prob = 0.5\n        return round(prob, 6)\n    sigma = math.sqrt(variance)\n    z = (x - mean) / (sigma * math.sqrt(2.0))\n    prob = 0.5 * (1.0 + math.erf(z))\n    return round(prob, 6)\nassert gaussian_cdf(0.0, 0.0, 1.0) == 0.5, \"Failed on standard normal at 0\"\nassert gaussian_cdf(2.0, 2.0, 4.0) == 0.5, \"Failed on N(2,4) at mean\"\nassert gaussian_cdf(10.0, 0.0, 1.0) == 1.0, \"Failed on far right tail\"\nassert gaussian_cdf(-10.0, 0.0, 1.0) == 0.0, \"Failed on far left tail\"\nassert gaussian_cdf(0.0, 0.0, 0.0) == 0.5, \"Failed on degenerate var=0 at mean\"\nassert gaussian_cdf(-1.0, 0.0, 0.0) == 0.0, \"Failed on degenerate var=0 left\"\nassert gaussian_cdf(1.0, 0.0, 0.0) == 1.0, \"Failed on degenerate var=0 right\""}
{"task_id": 401, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_one_hot(y: np.ndarray, num_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        \u2022 Shape (N,)  : flat vector of labels  \n        \u2022 Shape (N,1) : column vector of labels  \n        \u2022 Shape (N,C) : already one-hot (every row sums to 1)\n    num_classes : int | None, optional\n        Desired number of classes (width of the output).  If ``None`` it is\n        inferred as ``max(y) + 1`` for label vectors, or the second dimension\n        of ``y`` when it is already one-hot.\n\n    Returns\n    -------\n    np.ndarray\n        Float array of shape (N, C) containing only 0.0 and 1.0.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim == 2 and y.shape[1] > 1:\n        is_binary = np.logical_or(y == 0, y == 1).all()\n        sums_to_one = np.allclose(y.sum(axis=1), 1)\n        if is_binary and sums_to_one:\n            return y.astype(float, copy=False)\n    if y.ndim == 2 and y.shape[1] == 1:\n        y = y.ravel()\n    elif y.ndim != 1:\n        raise ValueError('Input must be a 1-D label vector, a (N,1) label matrix, or an already one-hot encoded (N,C) matrix.')\n    if not np.issubdtype(y.dtype, np.integer):\n        raise ValueError('Class labels must be integers.')\n    if np.any(y < 0):\n        raise ValueError('Negative class labels are not supported.')\n    inferred_classes = int(y.max()) + 1\n    C = num_classes if num_classes is not None else inferred_classes\n    if C <= y.max():\n        raise ValueError(f'`num_classes` must be greater than the largest label (y.max()={y.max()!r}, C={C!r}).')\n    N = y.shape[0]\n    one_hot = np.zeros((N, C), dtype=float)\n    one_hot[np.arange(N), y] = 1.0\n    return one_hot\nassert np.array_equal(to_one_hot(np.array([2, 0, 1])), np.array([[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]])), \"Test case 1 failed: basic three-class example\"\nassert np.array_equal(to_one_hot(np.array([[2],[0],[1]])), np.array([[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]])), \"Test case 2 failed: column vector input\"\nassert np.array_equal(to_one_hot(np.array([0, 0, 0])), np.array([[1.], [1.], [1.]])), \"Test case 3 failed: single-class input\"\nassert np.array_equal(to_one_hot(np.array([3, 1]), num_classes=5), np.array([[0., 0., 0., 1., 0.], [0., 1., 0., 0., 0.]])), \"Test case 4 failed: user-supplied num_classes > max label\"\nalready = np.array([[0,1,0],[1,0,0]])\nassert np.array_equal(to_one_hot(already), already.astype(float)), \"Test case 5 failed: already one-hot input\"\nassert to_one_hot(np.array([5])).shape == (1, 6), \"Test case 6 failed: single sample, inferred classes\"\nassert to_one_hot(np.array([4]), num_classes=10).shape == (1, 10), \"Test case 7 failed: single sample with explicit num_classes\"\nlabels = np.random.randint(0, 4, size=100)\nencoded = to_one_hot(labels)\nassert encoded.shape == (100, 4) and np.allclose(encoded.sum(axis=1), 1), \"Test case 8 failed: random vector of length 100\"\nassert np.array_equal(to_one_hot(np.array([1,1,1,1])), np.array([[0.,1.]]*4)), \"Test case 9 failed: all labels identical (multi-class)\"\nlabels2d = np.arange(12).reshape(12,1)%3\nenc = to_one_hot(labels2d)\nassert enc.shape == (12,3) and np.allclose(enc.sum(axis=1),1), \"Test case 10 failed: reshape check\""}
{"task_id": 402, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float=1e-06) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    (classes, y_inv) = np.unique(y_train, return_inverse=True)\n    n_classes = classes.size\n    n_features = X_train.shape[1]\n    class_counts = np.bincount(y_inv).astype(np.float64)\n    priors = class_counts / class_counts.sum()\n    log_priors = np.log(priors)\n    means = np.empty((n_classes, n_features), dtype=np.float64)\n    vars_ = np.empty_like(means)\n    for (idx, c) in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[idx] = X_c.mean(axis=0)\n        vars_[idx] = X_c.var(axis=0) + eps\n    log_coeff = -0.5 * (np.log(2.0 * np.pi) + np.log(vars_))\n    class_const = log_coeff.sum(axis=1)\n    diff = X_test[:, None, :] - means[None, :, :]\n    sq_term = -0.5 * diff ** 2 / vars_[None, :, :]\n    log_lik = class_const[None, :] + sq_term.sum(axis=2)\n    log_post = log_priors[None, :] + log_lik\n    y_pred = classes[np.argmax(log_post, axis=1)]\n    return y_pred\nassert (gaussian_nb_predict(np.array([[1.0], [2.0], [1.1], [5.0], [6.0], [5.5]]), np.array([0,0,0,1,1,1]), np.array([[1.2], [5.1]])) == np.array([0,1])).all(), \"failed on simple 1-D binary case\"\nassert (gaussian_nb_predict(np.array([[1,2],[2,1],[1,1],[9,8],[8,9],[9,9]]), np.array([0,0,0,1,1,1]), np.array([[1,1.5],[8.5,8.7]])) == np.array([0,1])).all(), \"failed on 2-D binary case\"\nassert (gaussian_nb_predict(np.array([[0],[0.5],[-0.2],[5],[5.5],[4.5],[10],[10.2],[9.7]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[1],[5],[9.9]])) == np.array([0,1,2])).all(), \"failed on 1-D three-class case\"\nassert (gaussian_nb_predict(np.array([[1],[1],[1],[2],[2],[2]]), np.array([0,0,0,1,1,1]), np.array([[1],[2]])) == np.array([0,1])).all(), \"failed on zero-variance handling\"\nassert (gaussian_nb_predict(np.array([[1,1],[1,2],[2,1],[8,8],[8,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.1,1.2],[8.4,8.7],[1.8,1.3]])) == np.array([0,1,0])).all(), \"failed on mixed predictions\"\nassert (gaussian_nb_predict(np.array([[0,0],[0.1,0.2],[5,5],[5.1,4.9],[10,10],[10.2,9.8]]), np.array([0,0,1,1,2,2]), np.array([[0,0.1],[5.2,5.2],[9.9,10.1]])) == np.array([0,1,2])).all(), \"failed on evenly spaced clusters\"\nassert (gaussian_nb_predict(np.array([[2,3],[3,2],[3,3],[7,7],[8,7],[7,8]]), np.array([0,0,0,1,1,1]), np.array([[2.5,2.5],[7.5,7.2]])) == np.array([0,1])).all(), \"failed on overlapping variance\"\nassert (gaussian_nb_predict(np.array([[1,0],[0,1],[1,1],[9,10],[10,9],[9,9]]), np.array([0,0,0,1,1,1]), np.array([[0.9,0.2],[9.5,9.1]])) == np.array([0,1])).all(), \"failed on correlated-looking but independent assumption\"\nassert (gaussian_nb_predict(np.array([[0],[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5]])) == np.array([0,1])).all(), \"failed on basic contiguous ranges\""}
{"task_id": 405, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport re\nimport numpy as np\nimport re\n_FLOAT = '[+-]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?'\ndef _parse_leaky(param: str) -> float:\n    \"\"\"\n    Parse   leaky relu(alpha=<float>)\n    \"\"\"\n    pat = f'^leaky\\\\s*relu(?:\\\\(\\\\s*alpha\\\\s*=\\\\s*({_FLOAT})\\\\s*\\\\))?$'\n    m = re.fullmatch(pat, param, flags=re.I)\n    if not m:\n        raise ValueError(f'Unknown activation: {param}')\n    return float(m.group(1)) if m.group(1) is not None else 0.01\ndef _parse_affine(param: str) -> tuple[float, float]:\n    \"\"\"\n    Parse   affine(slope=<float>, intercept=<float>)\n    (order inside the parentheses may be swapped, white-spaces ignored)\n    \"\"\"\n    m = re.fullmatch('affine\\\\((.*)\\\\)', param, flags=re.I)\n    if not m:\n        raise ValueError(f'Unknown activation: {param}')\n    inside = m.group(1)\n    pieces = [p.strip() for p in inside.split(',') if p.strip()]\n    kv = {}\n    for p in pieces:\n        if '=' not in p:\n            raise ValueError(f'Unknown activation: {param}')\n        (k, v) = [s.strip().lower() for s in p.split('=', 1)]\n        if not re.fullmatch(_FLOAT, v, flags=re.I):\n            raise ValueError(f'Unknown activation: {param}')\n        kv[k] = float(v)\n    if 'slope' not in kv or 'intercept' not in kv:\n        raise ValueError(f'Unknown activation: {param}')\n    return (kv['slope'], kv['intercept'])\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    arr = np.asarray(x, dtype=float)\n    if param is None or (isinstance(param, str) and param.strip().lower() == 'identity'):\n        res = arr\n    elif isinstance(param, str) and param.strip().lower() == 'relu':\n        res = np.maximum(0, arr)\n    elif isinstance(param, str) and param.strip().lower() == 'tanh':\n        res = np.tanh(arr)\n    elif isinstance(param, str) and param.strip().lower() == 'sigmoid':\n        res = 1.0 / (1.0 + np.exp(-arr))\n    elif isinstance(param, str) and param.lower().startswith('leaky'):\n        alpha = _parse_leaky(param.strip().lower())\n        res = np.where(arr > 0, arr, alpha * arr)\n    elif isinstance(param, str) and param.lower().startswith('affine'):\n        (slope, intercept) = _parse_affine(param.strip().lower())\n        res = slope * arr + intercept\n    else:\n        raise ValueError(f'Unknown activation: {param}')\n    res = np.round(res, 6)\n    if res.ndim == 0:\n        return [float(res)]\n    return res.tolist()\nassert apply_activation([-2, 0, 3], None) == [-2.0, 0.0, 3.0], \"failed: identity with None\"\nassert apply_activation([-2, 0, 3], \"identity\") == [-2.0, 0.0, 3.0], \"failed: explicit identity\"\nassert apply_activation([-1, 0, 2], \"relu\") == [0.0, 0.0, 2.0], \"failed: relu\"\nassert apply_activation([0], \"sigmoid\") == [0.5], \"failed: sigmoid on zero\"\nassert apply_activation([0, 1], \"tanh\") == [0.0, 0.761594], \"failed: tanh\"\nassert apply_activation([-1, 3], \"leaky relu(alpha=0.2)\") == [-0.2, 3.0], \"failed: custom leaky relu\"\nassert apply_activation([1, 2, 3], \"affine(slope=2, intercept=1)\") == [3.0, 5.0, 7.0], \"failed: affine 2x+1\"\nimport numpy as _np\na = _np.array([-3, -2, 10])\nassert apply_activation(a, \"relu\") == [0.0, 0.0, 10.0], \"failed: relu with numpy array\"\nassert apply_activation([-100, 100], \"leaky relu(alpha=0.01)\") == [-1.0, 100.0], \"failed: leaky relu with default alpha\"\nassert apply_activation([-2, 0, 2], \"affine(slope=-1.5, intercept=2.5)\") == [5.5, 2.5, -0.5], \"failed: affine -1.5x+2.5\""}
{"task_id": 406, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: 'np.ndarray', y_train: 'np.ndarray', X_test: 'np.ndarray', k: int=5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_test = np.asarray(X_test, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    if X_train.ndim != 2 or X_test.ndim != 2:\n        raise ValueError('X_train and X_test must be 2-D arrays')\n    if X_train.shape[0] != y_train.shape[0]:\n        raise ValueError('X_train and y_train have incompatible shapes')\n    if k <= 0:\n        raise ValueError('k must be a positive integer')\n    n_train = X_train.shape[0]\n    k = min(k, n_train)\n    diff = X_test[:, None, :] - X_train[None, :, :]\n    dists = np.einsum('ijk,ijk->ij', diff, diff)\n    predictions: list[int] = []\n    for row in dists:\n        nn_idx = np.argpartition(row, k - 1)[:k]\n        nearest_labels = y_train[nn_idx]\n        vote_count = np.bincount(nearest_labels)\n        predictions.append(int(vote_count.argmax()))\n    return predictions\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,1,1,0]), np.array([[0.9,0.9],[0.1,0.2]]), k=1) == [0,0], \"Test case 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,1,1,0]), np.array([[0.9,0.9],[0.1,0.2]]), k=3) == [1,1], \"Test case 2 failed\"\nassert knn_predict(np.array([[2,3],[3,4],[4,5]]), np.array([0,1,1]), np.array([[3,3]]), k=5) == [1], \"Test case 3 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), k=2) == [0], \"Test case 4 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,1,1,0]), np.array([[1.5]]), k=4) == [0], \"Test case 5 failed\"\nassert knn_predict(np.array([[-1,-1],[2,2]]), np.array([0,1]), np.array([[1,1]]), k=1) == [1], \"Test case 6 failed\"\nassert knn_predict(np.array([[0,0,0],[1,1,1],[2,2,2]]), np.array([0,1,1]), np.array([[0.1,0.1,0.1]]), k=2) == [0], \"Test case 7 failed\"\nassert knn_predict(np.array([[5,5]]), np.array([3]), np.array([[0,0]]), k=1) == [3], \"Test case 8 failed\"\nassert knn_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[1.2]]), k=2) == [1], \"Test case 9 failed\"\nassert knn_predict(np.array([[0],[2]]), np.array([0,1]), np.array([[1]]), k=2) == [0], \"Test case 10 failed\""}
{"task_id": 410, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nimport re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    number_pat = '[-+]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)'\n    patterns = [(re.compile('^ReLU$'), lambda _: {'type': 'ReLU'}), (re.compile('^Sigmoid$'), lambda _: {'type': 'Sigmoid'}), (re.compile('^Tanh$'), lambda _: {'type': 'Tanh'}), (re.compile(f'^Affine\\\\(slope=({number_pat}), intercept=({number_pat})\\\\)$'), lambda m: {'type': 'Affine', 'slope': float(m.group(1)), 'intercept': float(m.group(2))}), (re.compile(f'^Leaky ReLU\\\\(alpha=({number_pat})\\\\)$'), lambda m: {'type': 'Leaky ReLU', 'alpha': float(m.group(1))})]\n    for (pat, builder) in patterns:\n        m = pat.match(act_str)\n        if m:\n            return builder(m)\n    return -1\nassert parse_activation(\"ReLU\") == {\"type\": \"ReLU\"}, \"test failed: 'ReLU'\"\nassert parse_activation(\"Sigmoid\") == {\"type\": \"Sigmoid\"}, \"test failed: 'Sigmoid'\"\nassert parse_activation(\"Tanh\") == {\"type\": \"Tanh\"}, \"test failed: 'Tanh'\"\nassert parse_activation(\"Affine(slope=3, intercept=2)\") == {\"type\": \"Affine\", \"slope\": 3.0, \"intercept\": 2.0}, \"test failed: integer parameters\"\nassert parse_activation(\"Affine(slope=3.5, intercept=-1.2)\") == {\"type\": \"Affine\", \"slope\": 3.5, \"intercept\": -1.2}, \"test failed: float & negative parameters\"\nassert parse_activation(\"Leaky ReLU(alpha=0.1)\") == {\"type\": \"Leaky ReLU\", \"alpha\": 0.1}, \"test failed: leaky relu 0.1\"\nassert parse_activation(\"Leaky ReLU(alpha=.01)\") == {\"type\": \"Leaky ReLU\", \"alpha\": 0.01}, \"test failed: leaky relu .01\"\nassert parse_activation(\"affine(slope=1, intercept=2)\") == -1, \"test failed: case sensitivity\"\nassert parse_activation(\"Affine(slope=1)\") == -1, \"test failed: missing intercept\"\nassert parse_activation(\"ELU\") == -1, \"test failed: unknown activation\""}
{"task_id": 411, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom numbers import Integral, Real\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute simple statistics of action / observation trajectories.\"\"\"\n\n    def is_iterable(x):\n        \"\"\"Return True if *x* is a list/tuple/ndarray with length.\"\"\"\n        return isinstance(x, (list, tuple, np.ndarray)) and (not np.isscalar(x))\n\n    def analyse(collection):\n        \"\"\"\n        Inspect a list of (possibly-vector) values and return\n        tuple_flag  \u2026 at least one element is an iterable\n        multi_dim   \u2026 dimensionality > 1\n        continuous  \u2026 at least one value is a non-integer float\n        n_per_dim   \u2026 list with #unique values per dimension\n        dim         \u2026 dimensionality\n        ids         \u2026 list with sorted unique ids per dimension\n        \"\"\"\n        if len(collection) == 0:\n            raise ValueError('Empty trajectory supplied.')\n        tuple_flag = any((is_iterable(x) for x in collection))\n        if tuple_flag:\n            for sample in collection:\n                if is_iterable(sample):\n                    dim = len(sample)\n                    break\n        else:\n            dim = 1\n        multi_dim = dim > 1\n        uniq_sets = [set() for _ in range(dim)]\n        continuous = False\n        for sample in collection:\n            if tuple_flag:\n                values = list(sample)\n                if len(values) != dim:\n                    raise ValueError('Inconsistent dimensionality in data.')\n            else:\n                values = [sample]\n            for (d, val) in enumerate(values):\n                uniq_sets[d].add(val)\n                if not continuous:\n                    if isinstance(val, (Real, np.floating, np.integer)):\n                        if isinstance(val, (Integral, np.integer)):\n                            continue\n                        if not float(val).is_integer():\n                            continuous = True\n                    else:\n                        continuous = True\n        ids = [sorted(list(s)) for s in uniq_sets]\n        n_per_dim = [len(s) for s in uniq_sets]\n        return (tuple_flag, multi_dim, continuous, n_per_dim, dim, ids)\n    (tuple_a, multi_a, cont_a, n_a, dim_a, ids_a) = analyse(actions)\n    (tuple_o, multi_o, cont_o, n_o, dim_o, ids_o) = analyse(observations)\n    return {'tuple_actions': tuple_a, 'tuple_observations': tuple_o, 'multidim_actions': multi_a, 'multidim_observations': multi_o, 'continuous_actions': cont_a, 'continuous_observations': cont_o, 'n_actions_per_dim': n_a, 'action_dim': dim_a, 'n_obs_per_dim': n_o, 'obs_dim': dim_o, 'action_ids': ids_a, 'obs_ids': ids_o}\nacts = [0, 1, 2, 0]\nobs  = [10, 11, 10]\nassert env_stats(acts, obs)['n_actions_per_dim'] == [3], \"test case failed: scalar integers\"\nacts = [0.0, 1.5, 2.0]\nobs  = [1, 2, 3]\nassert env_stats(acts, obs)['continuous_actions'] is True, \"test case failed: continuous actions\"\nacts = [(0, 0), (1, 1), (0, 1)]\nobs  = [5, 6, 7]\nassert env_stats(acts, obs)['multidim_actions'] is True, \"test case failed: 2-D integer actions\"\nacts = [(0, 0, 0)]\nobs  = [(1.1, 2.2)]\nassert env_stats(acts, obs)['obs_dim'] == 2, \"test case failed: single sample multi-dim\"\nacts = [[1], [2], [3], [1]]\nobs  = [[10], [10], [12]]\nassert env_stats(acts, obs)['tuple_actions'] is True, \"test case failed: tuple single-dim\"\nacts = [(1, 2), (2, 3), (1, 3)]\nobs  = [0.1, 0.2, 0.3]\nassert env_stats(acts, obs)['continuous_observations'] is True, \"test 6 failed\"\nacts = [1, 2, 3]\nobs  = [(0, 0), (1, 1)]\nassert env_stats(acts, obs)['multidim_observations'] is True, \"test 7 failed\"\nacts = [2.0, 3.0]\nobs  = [1, 1]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 8 failed\"\nacts = [True, False, True]\nobs  = [0, 1, 0]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 9 failed\"\nacts = list(range(100))\nobs  = list(range(0, 200, 2))\nassert env_stats(acts, obs)['n_obs_per_dim'] == [100], \"test 10 failed\""}
{"task_id": 412, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function returns -1.\n    The returned metric functions accept two equal-length iterables\n    (y_true, y_pred) of 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n\n    def _accuracy(y_true, y_pred):\n        total = 0\n        correct = 0\n        for (t, p) in zip(y_true, y_pred):\n            total += 1\n            if t == p:\n                correct += 1\n        if total == 0:\n            return 0.0\n        return round(correct / total, 4)\n\n    def _precision(y_true, y_pred):\n        tp = fp = 0\n        for (t, p) in zip(y_true, y_pred):\n            if p == 1:\n                if t == 1:\n                    tp += 1\n                else:\n                    fp += 1\n        denom = tp + fp\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def _recall(y_true, y_pred):\n        tp = fn = 0\n        for (t, p) in zip(y_true, y_pred):\n            if t == 1:\n                if p == 1:\n                    tp += 1\n                else:\n                    fn += 1\n        denom = tp + fn\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def _f1(y_true, y_pred):\n        tp = fp = fn = 0\n        for (t, p) in zip(y_true, y_pred):\n            if t == 1:\n                if p == 1:\n                    tp += 1\n                else:\n                    fn += 1\n            elif p == 1:\n                fp += 1\n        prec_denom = tp + fp\n        rec_denom = tp + fn\n        precision = tp / prec_denom if prec_denom else 0.0\n        recall = tp / rec_denom if rec_denom else 0.0\n        if precision == 0 and recall == 0:\n            return 0.0\n        f1_value = 2 * precision * recall / (precision + recall)\n        return round(f1_value, 4)\n    metrics = {'accuracy': _accuracy, 'precision': _precision, 'recall': _recall, 'f1': _f1}\n    return metrics.get(name, -1)\nassert get_metric('accuracy')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6, \"failed: accuracy case 1\"\nassert get_metric('precision')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: precision case 1\"\nassert get_metric('recall')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: recall case 1\"\nassert get_metric('f1')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: f1 case 1\"\nassert get_metric('precision')([1,0,1], [0,0,0]) == 0.0, \"failed: zero-division precision\"\nassert get_metric('f1')([1,0,1], [0,0,0]) == 0.0, \"failed: zero-division f1\"\nassert get_metric('accuracy')([1,1,0,0], [1,1,0,0]) == 1.0, \"failed: all correct accuracy\"\nassert get_metric('recall')([1,1,1,1], [1,0,0,0]) == 0.25, \"failed: unbalanced recall\"\nassert get_metric('f1')([1,1,1,1], [1,0,0,0]) == 0.4, \"failed: unbalanced f1\"\nassert get_metric('auc') == -1, \"failed: unknown metric name\""}
{"task_id": 413, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nclass _TreeNode:\n    \"\"\"A single node in a CART regression tree.\"\"\"\n    __slots__ = ('is_leaf', 'value', 'feature', 'threshold', 'left', 'right')\n\n    def __init__(self, *, value=None, feature=None, threshold=None, left=None, right=None, is_leaf=False):\n        self.is_leaf = is_leaf\n        self.value = value\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\nclass _CARTRegressor:\n    \"\"\"Very small, depth\u2013limited CART regressor (MSE criterion).\"\"\"\n\n    def __init__(self, max_depth: int=3):\n        self.max_depth = max_depth\n        self.root: _TreeNode | None = None\n\n    def fit(self, X: np.ndarray, y: np.ndarray) -> None:\n        self.root = self._grow(X, y, depth=0)\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        preds = np.empty(X.shape[0], dtype=float)\n        for (i, x) in enumerate(X):\n            preds[i] = self._predict_row(self.root, x)\n        return preds\n\n    def _predict_row(self, node: _TreeNode, x: np.ndarray) -> float:\n        while not node.is_leaf:\n            node = node.left if x[node.feature] <= node.threshold else node.right\n        return node.value\n\n    def _grow(self, X: np.ndarray, y: np.ndarray, depth: int) -> _TreeNode:\n        (n_samples, n_feats) = X.shape\n        if depth >= self.max_depth or n_samples <= 1 or np.all(y == y[0]):\n            return _TreeNode(value=float(y.mean()), is_leaf=True)\n        best_sse = np.var(y) * n_samples\n        (best_feat, best_thr, best_split) = (None, None, None)\n        for feat in range(n_feats):\n            x_col = X[:, feat]\n            sorted_idx = np.argsort(x_col)\n            (x_sorted, y_sorted) = (x_col[sorted_idx], y[sorted_idx])\n            uniq_vals = np.unique(x_sorted)\n            if uniq_vals.size == 1:\n                continue\n            thr_candidates = (uniq_vals[:-1] + uniq_vals[1:]) / 2.0\n            y_cumsum = np.cumsum(y_sorted)\n            y_sq_cumsum = np.cumsum(y_sorted ** 2)\n            for (idx, thr) in enumerate(thr_candidates, start=1):\n                n_left = np.searchsorted(x_sorted, thr, side='right')\n                if n_left == 0 or n_left == n_samples:\n                    continue\n                sum_y_left = y_cumsum[n_left - 1]\n                sum_yy_left = y_sq_cumsum[n_left - 1]\n                n_l = n_left\n                mse_left = sum_yy_left - sum_y_left ** 2 / n_l\n                sum_y_right = y_cumsum[-1] - sum_y_left\n                sum_yy_right = y_sq_cumsum[-1] - sum_yy_left\n                n_r = n_samples - n_l\n                mse_right = sum_yy_right - sum_y_right ** 2 / n_r\n                sse_split = mse_left + mse_right\n                if sse_split < best_sse - 1e-07:\n                    best_sse = sse_split\n                    best_feat = feat\n                    best_thr = thr\n                    best_split = (n_left, sorted_idx)\n        if best_feat is None:\n            return _TreeNode(value=float(y.mean()), is_leaf=True)\n        (split_idx, sorted_idx) = best_split\n        x_sorted_global = X[sorted_idx, best_feat]\n        mask_left = x_sorted_global <= best_thr\n        left_idx = sorted_idx[mask_left]\n        right_idx = sorted_idx[~mask_left]\n        left_child = self._grow(X[left_idx], y[left_idx], depth + 1)\n        right_child = self._grow(X[right_idx], y[right_idx], depth + 1)\n        return _TreeNode(feature=best_feat, threshold=best_thr, left=left_child, right=right_child, value=float(y.mean()), is_leaf=False)\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor (simplified).\"\"\"\n    init_pred = y_train.mean()\n    y_hat_train = np.full_like(y_train, init_pred, dtype=float)\n    y_hat_test = np.full(X_test.shape[0], init_pred, dtype=float)\n    for _ in range(n_estimators):\n        residuals = y_train - y_hat_train\n        tree = _CARTRegressor(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        y_hat_train += learning_rate * tree.predict(X_train)\n        y_hat_test += learning_rate * tree.predict(X_test)\n    return np.round(y_hat_test, 4).tolist()\nassert gbdt_regression(np.array([[0],[1]]), np.array([0,1]), np.array([[0],[1]]), 1, 1.0, 1) == [0.0, 1.0], \"test-1 failed: two-point identity mapping\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[1]]), 3, 0.5, 1) == [5.0], \"test-2 failed: constant target 5\"\nassert gbdt_regression(np.array([[0,1],[1,2],[2,3]]), np.array([7,7,7]), np.array([[0.5,1.5]]), 5, 0.3, 2) == [7.0], \"test-3 failed: 2-D constant target 7\"\nassert gbdt_regression(np.array([[-1],[0],[1]]), np.array([-2,-2,-2]), np.array([[0]]), 4, 0.8, 1) == [-2.0], \"test-4 failed: negative constant target\"\nassert gbdt_regression(np.array([[10]]), np.array([42]), np.array([[15]]), 6, 0.2, 1) == [42.0], \"test-5 failed: single-sample dataset\"\nassert gbdt_regression(np.array([[2],[4]]), np.array([4,8]), np.array([[2],[4]]), 1, 1.0, 1) == [4.0, 8.0], \"test-6 failed: two-point linear x2 mapping\"\nassert gbdt_regression(np.array([[0,1],[1,2]]), np.array([1,3]), np.array([[0,1],[1,2]]), 1, 1.0, 1) == [1.0, 3.0], \"test-7 failed: two-point 2-D features\"\nassert gbdt_regression(np.array([[5]]), np.array([10]), np.array([[7]]), 3, 0.9, 1) == [10.0], \"test-8 failed: single-sample constant 10\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([0,0,0]), np.array([[0],[2]]), 2, 0.7, 1) == [0.0, 0.0], \"test-9 failed: zero target\"\nassert gbdt_regression(np.array([[0],[1]]), np.array([-5,10]), np.array([[0],[1]]), 1, 1.0, 1) == [-5.0, 10.0], \"test-10 failed: mixed sign targets\""}
{"task_id": 414, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef exponential_scheduler(step: int, initial_lr: float=0.01, stage_length: int=500, staircase: bool=False, decay: float=0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as:\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio ``step / stage_length``\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Returns the learning-rate rounded to 6 decimal places or \u20131 if any\n    argument is invalid.\n    \"\"\"\n    if step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n    lr = initial_lr * decay ** curr_stage\n    return round(float(lr), 6)\nassert exponential_scheduler(0) == 0.01, \"test failed: exponential_scheduler(0)\"\nassert exponential_scheduler(500) == 0.001, \"test failed: exponential_scheduler(500)\"\nassert exponential_scheduler(250) == 0.003162, \"test failed: exponential_scheduler(250)\"\nassert exponential_scheduler(250, staircase=True) == 0.01, \"test failed: exponential_scheduler(250, staircase=True)\"\nassert exponential_scheduler(750, staircase=True) == 0.001, \"test failed: exponential_scheduler(750, staircase=True)\"\nassert exponential_scheduler(1500, stage_length=1000, decay=0.5) == 0.003536, \"test failed: exponential_scheduler(1500, stage_length=1000, decay=0.5)\"\nassert exponential_scheduler(2000, stage_length=1000, decay=0.5, staircase=True) == 0.0025, \"test failed: exponential_scheduler(2000, stage_length=1000, decay=0.5, staircase=True)\"\nassert exponential_scheduler(10, stage_length=0) == -1, \"test failed: exponential_scheduler(10, stage_length=0)\"\nassert exponential_scheduler(-5) == -1, \"test failed: exponential_scheduler(-5)\"\nassert exponential_scheduler(300, initial_lr=0.1, stage_length=100, decay=0.9) == 0.0729, \"test failed: exponential_scheduler(300, initial_lr=0.1, stage_length=100, decay=0.9)\""}
{"task_id": 415, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Un-normalised 1-D Discrete Cosine Transform (type II).\n\n    Parameters\n    ----------\n    frame : list[int | float]\n        Real-valued input samples (length N).\n\n    Returns\n    -------\n    list[float]\n        Length-N list with the DCT-II coefficients, each rounded\n        to 4 decimal places.\n    \"\"\"\n    if not frame:\n        return []\n    x = np.asarray(frame, dtype=float)\n    N = x.size\n    n = np.arange(N).reshape(-1, 1)\n    k = np.arange(N).reshape(1, -1)\n    angles = np.pi / N * (n + 0.5) * k\n    cosines = np.cos(angles)\n    coeffs = (x.reshape(-1, 1) * cosines).sum(axis=0)\n    return [round(float(c), 4) for c in coeffs]\nassert dct2([1]) == [1.0], \"failed on [1]\"\nassert dct2([1, 1]) == [2.0, 0.0], \"failed on [1,1]\"\nassert dct2([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed on all-zero vector\"\nassert dct2([2, 2, 2, 2]) == [8.0, 0.0, 0.0, 0.0], \"failed on constant vector\"\nassert dct2([0.5, 2.5, 3.5]) == [6.5, -2.5981, -0.5], \"failed on [0.5,2.5,3.5]\"\nassert dct2([5, 5, 5]) == [15.0, 0.0, 0.0], \"failed on constant length-3 vector\""}
{"task_id": 416, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Evaluate the multivariate normal (Gaussian) probability-density function for\n    every sample contained in `X`.\n\n    Parameters\n    ----------\n    X : array_like, shape (n_samples, n_features)  or  (n_samples,)\n        Data points at which the PDF will be evaluated.  If `X` is one\u2013dimensional\n        it is treated as having shape (n_samples, 1).\n    mean : array_like, shape (n_features,)\n        Mean vector (\u03bc) of the distribution.\n    cov : array_like, shape (n_features, n_features)\n        Positive-definite covariance matrix (\u03a3) of the distribution.\n\n    Returns\n    -------\n    list\n        A list whose *i-th* element is the PDF value for `X[i]`, rounded to\n        four decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    mean = np.asarray(mean, dtype=float)\n    cov = np.asarray(cov, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    if mean.shape[0] != n_features:\n        raise ValueError('Mean vector length must equal the number of features.')\n    if cov.shape != (n_features, n_features):\n        raise ValueError('Covariance matrix shape must be (n_features, n_features).')\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError('Covariance matrix must be positive-definite (determinant > 0).')\n    coeff = 1.0 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    diff = X - mean\n    mahal = np.einsum('ij,jk,ik->i', diff, inv_cov, diff)\n    exponent = -0.5 * mahal\n    pdf_vals = coeff * np.exp(exponent)\n    return [round(val, 4) for val in pdf_vals.tolist()]\nassert multivariate_gaussian_pdf(np.array([[0]]), [0], [[1]]) == [0.3989], \"test case failed: N(0,1) at 0\"\nassert multivariate_gaussian_pdf(np.array([[1]]), [0], [[1]]) == [0.2420], \"test case failed: N(0,1) at 1\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[1,0],[0,1]]) == [0.1592], \"test case failed: 2D standard normal at (0,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,1]]), [0,0], [[1,0],[0,1]]) == [0.0585], \"test case failed: 2D standard normal at (1,1)\"\nassert multivariate_gaussian_pdf(np.array([[0,0,0]]), [0,0,0], np.identity(3)) == [0.0635], \"test case failed: 3D standard normal at origin\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[2,0],[0,2]]) == [0.0796], \"test case failed: 2D diag(2,2) at origin\"\nassert multivariate_gaussian_pdf(np.array([[1,0]]), [0,0], [[1,0],[0,2]]) == [0.0683], \"test case failed: diag(1,2) at (1,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,0],[0,1]]), [0,0], [[1,0],[0,2]]) == [0.0683,0.0876], \"test case failed: two points with diag(1,2)\"\nassert multivariate_gaussian_pdf(np.array([[0,0],[2,0]]), [0,0], [[1,0],[0,1]]) == [0.1592,0.0215], \"test case failed: (0,0) and (2,0) in 2D standard normal\"\nassert multivariate_gaussian_pdf(np.array([[-1],[0],[1]]), [0], [[1]]) == [0.2420,0.3989,0.2420], \"test case failed: vectorised 1D standard normal\""}
{"task_id": 417, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D NumPy array.')\n    (n_samples, n_features) = data.shape\n    mean = data.mean(axis=0, keepdims=True)\n    Xc = data - mean\n    if n_samples > 1:\n        cov = Xc.T @ Xc / (n_samples - 1)\n    else:\n        cov = np.zeros((n_features, n_features), dtype=Xc.dtype)\n    (eig_vals, eig_vecs) = np.linalg.eigh(cov)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    k = min(max(int(k), 0), n_features)\n    eig_vecs = eig_vecs[:, :k]\n    for j in range(eig_vecs.shape[1]):\n        vec = eig_vecs[:, j]\n        nz = np.flatnonzero(vec)\n        if nz.size and vec[nz[0]] < 0:\n            eig_vecs[:, j] *= -1\n    low_dim = Xc @ eig_vecs\n    recon = low_dim @ eig_vecs.T + mean\n    low_dim_rounded = np.round(low_dim, 4).tolist()\n    recon_rounded = np.round(recon, 4).tolist()\n    return (low_dim_rounded, recon_rounded)\nassert pca(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]), \"test case 1 failed\"\nassert pca(np.array([[3, 1], [4, 1], [5, 1]]), 1) == ([[-1.0], [0.0], [1.0]], [[3.0, 1.0], [4.0, 1.0], [5.0, 1.0]]), \"test case 2 failed\"\nassert pca(np.array([[0, 1], [0, 3], [0, 5]]), 1) == ([[-2.0], [0.0], [2.0]], [[0.0, 1.0], [0.0, 3.0], [0.0, 5.0]]), \"test case 3 failed\"\nassert pca(np.array([[0, 0], [1, 1], [2, 2]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]]), \"test case 4 failed\"\nassert pca(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == ([[-1.7321], [0.0], [1.7321]], [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]]), \"test case 5 failed\"\nassert pca(np.array([[10, 10], [20, 20], [30, 30]]), 1) == ([[-14.1421], [0.0], [14.1421]], [[10.0, 10.0], [20.0, 20.0], [30.0, 30.0]]), \"test case 6 failed\"\nassert pca(np.array([[2, 5], [3, 6], [4, 7]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[2.0, 5.0], [3.0, 6.0], [4.0, 7.0]]), \"test case 7 failed\"\nassert pca(np.array([[7, 0], [9, 2], [11, 4]]), 1) == ([[-2.8284], [0.0], [2.8284]], [[7.0, 0.0], [9.0, 2.0], [11.0, 4.0]]), \"test case 8 failed\"\nassert pca(np.array([[-1, -2], [0, -1], [1, 0]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[-1.0, -2.0], [0.0, -1.0], [1.0, 0.0]]), \"test case 9 failed\"\nassert pca(np.array([[50, 52], [51, 53], [52, 54]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[50.0, 52.0], [51.0, 53.0], [52.0, 54.0]]), \"test case 10 failed\""}
{"task_id": 418, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a (nested) Python list whose rows correspond\n           to samples and columns correspond to features.\n\n    Returns:\n        The sample covariance matrix as a nested Python list, with every\n        element rounded to four decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    if X.ndim != 2:\n        raise ValueError('Input data must be 1-D or 2-D (samples \u00d7 features).')\n    (n_samples, n_features) = X.shape\n    if n_samples < 2:\n        return np.zeros((n_features, n_features), dtype=float).tolist()\n    X_centered = X - X.mean(axis=0, keepdims=True)\n    cov_matrix = X_centered.T @ X_centered / (n_samples - 1)\n    return np.round(cov_matrix, 4).tolist()\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[9.0, 9.0, 9.0], [9.0, 9.0, 9.0], [9.0, 9.0, 9.0]], \"test case failed: ascending 3\u00d73 matrix\"\nassert calculate_covariance_matrix([[1, 2], [1, 2]]) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: identical rows\"\nassert calculate_covariance_matrix([[1, 1], [1, 3], [1, 5]]) == [[0.0, 0.0], [0.0, 4.0]], \"test case failed: variance only in second feature\"\nassert calculate_covariance_matrix([[0, 0, 0], [1, 1, 1]]) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"test case failed: two samples with identical features\"\nassert calculate_covariance_matrix([[1, 2, 3]]) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"test case failed: single sample\"\nassert calculate_covariance_matrix([[1, 0], [0, 1]]) == [[0.5, -0.5], [-0.5, 0.5]], \"test case failed: negative covariance\"\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[15.0, 15.0, 15.0], [15.0, 15.0, 15.0], [15.0, 15.0, 15.0]], \"test case failed: 4\u00d73 ascending matrix\"\nassert calculate_covariance_matrix([[0, 1], [1, 1], [2, 1]]) == [[1.0, 0.0], [0.0, 0.0]], \"test case failed: constant second feature\"\nassert calculate_covariance_matrix([[1, 1], [2, 0], [3, 1], [4, 0]]) == [[1.6667, -0.3333], [-0.3333, 0.3333]], \"test case failed: mild negative correlation\"\nassert calculate_covariance_matrix([[1, 4], [2, 3], [3, 2], [4, 1]]) == [[1.6667, -1.6667], [-1.6667, 1.6667]], \"test case failed: strong negative correlation\""}
{"task_id": 419, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression \u2013 MAP predictive mean (rounded to 4 dp).\"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    X_new = np.asarray(X_new, dtype=float)\n    if fit_intercept:\n        ones_train = np.ones((X.shape[0], 1))\n        ones_test = np.ones((X_new.shape[0], 1))\n        X = np.hstack((ones_train, X))\n        X_new = np.hstack((ones_test, X_new))\n    (N, D) = X.shape\n    if np.isscalar(mu):\n        mu_vec = np.full(D, mu, dtype=float)\n    else:\n        mu_vec = np.asarray(mu, dtype=float).ravel()\n        if mu_vec.size != D:\n            raise ValueError('`mu` has incompatible length.')\n    if V is None:\n        V_inv = np.eye(D)\n    elif np.isscalar(V):\n        if V == 0:\n            raise ValueError('Scalar `V` must be non-zero.')\n        V_inv = np.eye(D) / float(V)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            if np.any(V_arr == 0):\n                raise ValueError('Zero on the diagonal of `V` is not allowed.')\n            V_inv = np.diag(1.0 / V_arr)\n        else:\n            if V_arr.shape != (D, D):\n                raise ValueError('`V` shape incompatible with number of features.')\n            V_inv = np.linalg.inv(V_arr)\n    XtX = X.T @ X\n    A = V_inv + XtX\n    Sigma_p = np.linalg.inv(A)\n    rhs = V_inv @ mu_vec + X.T @ y\n    mu_p = Sigma_p @ rhs\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 420, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n\n    Notes\n    -----\n    If *column* is outside the valid range, two empty lists are returned.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or X.ndim != 2 or (not 0 <= column < X.shape[1]):\n        return ([], [])\n    left_mask_np = X[:, column] < value\n    right_mask_np = X[:, column] >= value\n    return (left_mask_np.tolist(), right_mask_np.tolist())\nassert get_split_mask(np.array([[1,2,3],[4,5,6],[7,8,9]]),1,5) == ([True, False, False],[False, True, True]), \"failed: column 1, value 5\"\nassert get_split_mask(np.array([[0],[0],[1]]),0,0) == ([False, False, False],[True, True, True]), \"failed: threshold equal to 0\"\nassert get_split_mask(np.array([[0],[0],[1]]),0,2) == ([True, True, True],[False, False, False]), \"failed: threshold greater than max\"\nassert get_split_mask(np.array([[-3],[-2],[5]]),0,0) == ([True, True, False],[False, False, True]), \"failed: negative values\"\nassert get_split_mask(np.array([[1,2],[3,4]]),1,3) == ([True, False],[False, True]), \"failed: last column\"\nassert get_split_mask(np.array([[1,2],[3,4]]),-1,0) == ([],[]), \"failed: negative column index\"\nassert get_split_mask(np.array([[1,2],[3,4]]),5,0) == ([],[]), \"failed: column index out of range\"\nassert get_split_mask(np.array([[5,5,5],[5,5,5]]),2,5) == ([False, False],[True, True]), \"failed: values equal to threshold\"\nassert get_split_mask(np.array([[10,20],[30,40],[50,60]]),0,25) == ([True, False, False],[False, True, True]), \"failed: mix split on first column\"\nassert get_split_mask(np.array([[1.1,2.2],[3.3,4.4],[5.5,6.6]]),0,3.3) == ([True, False, False],[False, True, True]), \"failed: float threshold\""}
{"task_id": 421, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density\u2010Based Spatial Clustering (DBSCAN) from scratch.\n\n    Args\n    ----\n    data : np.ndarray, shape = (n_samples, n_features)\n        The data to cluster.\n    eps : float\n        Maximum distance at which two points are considered neighbours.\n    min_samples : int\n        Minimum number of neighbours (including the point itself) that makes a\n        point a *core* point.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise is labelled -1, while clusters\n        are numbered 1, 2, \u2026 in the order they are first encountered during the\n        left-to-right scan over *data*.\n    \"\"\"\n    if eps <= 0:\n        raise ValueError('eps must be positive.')\n    if min_samples <= 0:\n        raise ValueError('min_samples must be a positive integer.')\n    n_samples = data.shape[0]\n    labels = np.zeros(n_samples, dtype=int)\n    cluster_id = 0\n    eps_sq = eps * eps\n\n    def region_query(idx: int) -> np.ndarray:\n        \"\"\"Return indices of all points within *eps* of point *idx* (incl. itself).\"\"\"\n        diff = data - data[idx]\n        dists_sq = np.sum(diff * diff, axis=1)\n        return np.flatnonzero(dists_sq <= eps_sq)\n\n    def expand_cluster(seed_idx: int, neighbours: np.ndarray, cid: int) -> None:\n        \"\"\"Flood-fill the cluster *cid* starting from the core point *seed_idx*.\"\"\"\n        labels[seed_idx] = cid\n        search_queue = list(neighbours)\n        i = 0\n        while i < len(search_queue):\n            point_idx = search_queue[i]\n            if labels[point_idx] == -1:\n                labels[point_idx] = cid\n            elif labels[point_idx] == 0:\n                labels[point_idx] = cid\n                neighbour_pts = region_query(point_idx)\n                if neighbour_pts.size >= min_samples:\n                    for n in neighbour_pts:\n                        if labels[n] == 0 or labels[n] == -1:\n                            search_queue.append(n)\n            i += 1\n    for point_idx in range(n_samples):\n        if labels[point_idx] != 0:\n            continue\n        neighbours = region_query(point_idx)\n        if neighbours.size < min_samples:\n            labels[point_idx] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, neighbours, cluster_id)\n    return labels.tolist()\nimport numpy as np\nassert dbscan(np.array([[0.,0.],[0.,1.],[1.,0.],[8.,8.]]),1.5,2) == [1,1,1,-1], \"test case failed: simple cluster with noise\"\nassert dbscan(np.array([[0.,0.],[0.2,0.1],[1.,-0.1],[10.,10.],[10.1,9.9],[9.9,10.2]]),1.5,2) == [1,1,1,2,2,2], \"test case failed: two well separated clusters\"\nassert dbscan(np.array([[0.,0.],[3.,3.]]),1.,2) == [-1,-1], \"test case failed: all noise\"\nassert dbscan(np.array([[0.,0.],[0.2,0.2],[0.3,0.1]]),1.,2) == [1,1,1], \"test case failed: single compact cluster\"\nassert dbscan(np.array([[0.,0.],[3.,0.],[0.,3.]]),1.,1) == [1,2,3], \"test case failed: each point its own cluster when min_samples=1\"\nassert dbscan(np.array([[0.,0.,0.],[0.1,0.,0.2],[5.,5.,5.]]),0.5,2) == [1,1,-1], \"test case failed: 3D data with noise\"\nassert dbscan(np.array([[0.,0.],[0.1,0.2],[0.2,0.]]),0.5,4) == [-1,-1,-1], \"test case failed: not enough points to form cluster\"\nassert dbscan(np.array([[0.,0.],[0.1,0.2],[0.2,0.],[5.,5.]]),0.5,3) == [1,1,1,-1], \"test case failed: cluster plus distant noise\"\nassert dbscan(np.array([[0.,0.],[0.1,-0.1],[-0.2,0.05],[3.,3.],[3.1,2.9],[2.9,3.1]]),0.3,2) == [1,1,1,2,2,2], \"test case failed: two tight clusters\"\nassert dbscan(np.array([[0.,0.],[0.,0.],[0.,0.]]),0.1,2) == [1,1,1], \"test case failed: duplicate points forming a single cluster\""}
{"task_id": 422, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef _as_python(obj):\n    \"\"\"\n    Helper that converts a NumPy scalar/array into regular Python\n    scalars / (nested) lists after rounding to 4 decimals.\n    \"\"\"\n    obj = np.round(obj, 4)\n    if np.isscalar(obj) or obj.shape == ():\n        return float(obj)\n    return obj.tolist()\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value makes the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    x = np.asarray(x, dtype=float)\n    if order == 0:\n        res = np.logaddexp(0.0, x)\n    elif order == 1:\n        res = 1.0 / (1.0 + np.exp(-x))\n    elif order == 2:\n        sig = 1.0 / (1.0 + np.exp(-x))\n        res = sig * (1.0 - sig)\n    else:\n        return -1\n    return _as_python(res)\nassert softplus(-1, 0) == 0.3133, \"failed: softplus(-1, 0)\"\nassert softplus(0, 0) == 0.6931, \"failed: softplus(0, 0)\"\nassert softplus(2, 0) == 2.1269, \"failed: softplus(2, 0)\"\nassert softplus([-1, 0, 2], 0) == [0.3133, 0.6931, 2.1269], \"failed: softplus([-1,0,2],0)\"\nassert softplus(np.array([0]), 1) == [0.5], \"failed: softplus(np.array([0]),1)\"\nassert softplus(0, 1) == 0.5, \"failed: softplus(0,1)\"\nassert softplus(-10, 1) == 0.0, \"failed: softplus(-10,1)\"\nassert softplus(10, 1) == 1.0, \"failed: softplus(10,1)\"\nassert softplus([0], 2) == [0.25], \"failed: softplus([0],2)\"\nassert softplus(3, 3) == -1, \"failed: softplus(3,3)\""}
{"task_id": 423, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute Root Mean Squared Logarithmic Error (RMSLE).\n\n    Returns\n    -------\n    float\n        RMSLE rounded to four decimal places, or -1 if validation fails.\n    \"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)) or len(actual) != len(predicted) or (len(actual) == 0):\n        return -1\n    try:\n        actual_arr = np.asarray(actual, dtype=float)\n        predicted_arr = np.asarray(predicted, dtype=float)\n    except (ValueError, TypeError):\n        return -1\n    if np.any(actual_arr < 0) or np.any(predicted_arr < 0):\n        return -1\n    log_diff = np.log1p(predicted_arr) - np.log1p(actual_arr)\n    rmsle = np.sqrt(np.mean(np.square(log_diff)))\n    return round(float(rmsle), 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 424, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    labels = np.asarray(y)\n    n = labels.size\n    (_, counts) = np.unique(labels, return_counts=True)\n    probs = counts / n\n    h = -np.sum(probs * np.log2(probs))\n    return float(np.round(h, 4))\nassert entropy([0, 0, 1, 1]) == 1.0, \"test case failed: entropy([0, 0, 1, 1])\"\nassert entropy([0, 0, 0, 0]) == 0.0, \"test case failed: entropy([0, 0, 0, 0])\"\nassert entropy([0, 1, 2, 3]) == 2.0, \"test case failed: entropy([0, 1, 2, 3])\"\nassert entropy([0, 1]) == 1.0, \"test case failed: entropy([0, 1])\"\nassert entropy([0, 1, 1, 1]) == 0.8113, \"test case failed: entropy([0, 1, 1, 1])\"\nassert entropy([i % 3 for i in range(300)]) == 1.585, \"test case failed: entropy([i % 3 for i in range(300)])\"\nassert entropy([0, 0, 0, 1]) == 0.8113, \"test case failed: entropy([0, 0, 0, 1])\"\nassert entropy([0, 1, 2, 2]) == 1.5, \"test case failed: entropy([0, 1, 2, 2])\"\nassert entropy([0, 1, 2, 3, 4]) == 2.3219, \"test case failed: entropy([0, 1, 2, 3, 4])\""}
{"task_id": 425, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef f_entropy(x: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Shannon (natural-log) entropy of a 1-D collection of non-negative integers.\n\n    Parameters\n    ----------\n    x : list[int] | np.ndarray\n        Input data. May be a Python list or a NumPy 1-D array containing\n        non-negative integers.\n\n    Returns\n    -------\n    float\n        Shannon entropy  H = -\u03a3 p_i ln(p_i)  rounded to 4 decimal places.\n        If the input contains only one distinct value (or is empty),\n        the function returns 0.0.\n    \"\"\"\n    arr = np.asarray(x, dtype=int).ravel()\n    if arr.size == 0:\n        return 0.0\n    (unique, counts) = np.unique(arr, return_counts=True)\n    if unique.size == 1:\n        return 0.0\n    probs = counts.astype(float) / arr.size\n    entropy = -np.sum(probs * np.log(probs))\n    return round(float(entropy), 4)\nassert f_entropy(np.array([1, 1, 2, 2])) == 0.6931, \"failed on [1,1,2,2]\"\nassert f_entropy([0, 0, 0]) == 0.0, \"failed on [0,0,0]\"\nassert f_entropy([0, 1]) == 0.6931, \"failed on [0,1]\"\nassert f_entropy([0, 1, 2, 3]) == 1.3863, \"failed on [0,1,2,3]\"\nassert f_entropy([1, 2, 3, 3]) == 1.0397, \"failed on [1,2,3,3]\"\nassert f_entropy([0, 1, 1, 1]) == 0.5623, \"failed on [0,1,1,1]\"\nassert f_entropy([2]) == 0.0, \"failed on single element [2]\"\nassert f_entropy(list(range(10))) == 2.3026, \"failed on range(10)\"\nassert f_entropy([0, 0, 0, 0, 1]) == 0.5004, \"failed on [0,0,0,0,1]\"\nassert f_entropy([0, 0, 1, 1, 2, 2, 3, 3]) == 1.3863, \"failed on balanced eight elements\""}
{"task_id": 426, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n               Returns -1 when the inputs have different lengths or when\n               either of the inputs is empty.\n    \"\"\"\n    if not y_true or not y_pred or len(y_true) != len(y_pred):\n        return -1\n    correct = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)\nassert classification_accuracy([1, 0, 1, 1], [1, 1, 1, 0]) == 0.5, \"test case failed: basic integer labels\"\nassert classification_accuracy(['cat', 'dog', 'cat'], ['cat', 'dog', 'dog']) == 0.6667, \"test case failed: string labels\"\nassert classification_accuracy([1, 2], []) == -1, \"test case failed: unequal length\"\nassert classification_accuracy([], []) == -1, \"test case failed: empty lists\"\nassert classification_accuracy([1, 2, 3], [1, 2, 3]) == 1.0, \"test case failed: perfect accuracy\"\nassert classification_accuracy([0, 0, 0, 0], [1, 1, 1, 1]) == 0.0, \"test case failed: zero accuracy\"\nassert classification_accuracy(['a'], ['b']) == 0.0, \"test case failed: single wrong prediction\"\nassert classification_accuracy([True, False, True], [True, True, True]) == 0.6667, \"test case failed: boolean labels\"\nassert classification_accuracy([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0.2, \"test case failed: reversed list\"\nassert classification_accuracy(list('abcde'), list('abcdf')) == 0.8, \"test case failed: sequence of characters\""}
{"task_id": 427, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data (any dimensionality).\n\n    Returns:\n        tuple[list, list]: (activation, derivative) \u2013\n            both are regular Python lists mirroring the shape of *z*.\n    \"\"\"\n    z_arr = np.asarray(z)\n    activation = z_arr.copy()\n    derivative = np.ones_like(z_arr)\n    return (activation.tolist(), derivative.tolist())\nassert identity_activation([-2, 0, 3.5]) == ([-2.0, 0.0, 3.5], [1.0, 1.0, 1.0]), \"test case failed: identity_activation([-2, 0, 3.5])\"\nassert identity_activation([0]) == ([0.0], [1.0]), \"test case failed: identity_activation([0])\"\nassert identity_activation((5, -7)) == ([5.0, -7.0], [1.0, 1.0]), \"test case failed: identity_activation((5, -7))\"\nassert identity_activation([[1, 2], [3, 4]]) == ([[1.0, 2.0], [3.0, 4.0]], [[1.0, 1.0], [1.0, 1.0]]), \"test case failed: identity_activation([[1, 2], [3, 4]])\"\nassert identity_activation(np.array([[0, -1, 2], [3, -4, 5]])) == ([[0.0, -1.0, 2.0], [3.0, -4.0, 5.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]), \"test case failed: identity_activation(np.array([[0, -1, 2], [3, -4, 5]]))\"\ninput_3d = np.arange(8).reshape(2, 2, 2)\nexpected_activation = input_3d.astype(float).tolist()\nexpected_derivative = np.ones_like(input_3d, dtype=float).tolist()\nassert identity_activation(input_3d) == (expected_activation, expected_derivative), \"test case failed: identity_activation(3-D array)\"\nassert identity_activation([1.2, -3.4, 5.6]) == ([1.2, -3.4, 5.6], [1.0, 1.0, 1.0]), \"test case failed: identity_activation([1.2, -3.4, 5.6])\"\nassert identity_activation([1e9, -1e9]) == ([1e9, -1e9], [1.0, 1.0]), \"test case failed: identity_activation([1e9, -1e9])\"\nassert identity_activation([[1, 2, 3], (4, 5, 6)]) == ([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]), \"test case failed: identity_activation([[1, 2, 3], (4, 5, 6)])\"\nassert identity_activation(0) == (0.0, 1.0), \"test case failed: identity_activation(0)\""}
{"task_id": 428, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine\u2010sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places. Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    build_len = window_len if symmetric else window_len + 1\n    n = np.arange(build_len, dtype=float)\n    denom = build_len - 1\n    window = 0.5 - 0.5 * np.cos(2.0 * math.pi * n / denom)\n    if not symmetric:\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 429, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        2-D array of shape (D, K); row i is the success probabilities of all K\n        arms when the active context is i.\n    context : np.ndarray\n        One-hot vector of length D identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward\n        (rounded to four decimals) and the index of the arm that achieves it.\n        If *context* is not a valid one-hot vector the function returns (-1, -1).\n    \"\"\"\n    if context.ndim != 1:\n        return (-1, -1)\n    D = context_probs.shape[0]\n    if len(context) != D:\n        return (-1, -1)\n    if np.count_nonzero(context) != 1:\n        return (-1, -1)\n    unique_vals = np.unique(context)\n    if not np.all(np.isin(unique_vals, [0, 1])):\n        return (-1, -1)\n    ctx_idx = int(np.argmax(context))\n    row = context_probs[ctx_idx]\n    optimal_arm = int(np.argmax(row))\n    optimal_rwd = float(np.round(row[optimal_arm], 4))\n    return (optimal_rwd, optimal_arm)\nassert oracle_payoff(np.array([[0.1,0.8],[0.6,0.4]]), np.array([1,0])) == (0.8,1), \"failed on basic 2x2 (context 0)\"\nassert oracle_payoff(np.array([[0.1,0.8],[0.6,0.4]]), np.array([0,1])) == (0.6,0), \"failed on basic 2x2 (context 1)\"\nassert oracle_payoff(np.array([[0.5,0.5],[0.9,0.9]]), np.array([0,1])) == (0.9,0), \"failed when best arms tie (choose smallest)\"\nassert oracle_payoff(np.array([[0.3,0.2,0.7]]), np.array([1])) == (0.7,2), \"failed single-context multi-arm\"\nassert oracle_payoff(np.array([[0.4,0.2,0.6],[0.1,0.5,0.3],[0.7,0.4,0.9]]), np.array([0,0,1])) == (0.9,2), \"failed on example from task description\"\nassert oracle_payoff(np.array([[0.123456,0.654321]]), np.array([1])) == (0.6543,1), \"failed on rounding to 4 decimals\"\nassert oracle_payoff(np.array([[0.2,0.8],[0.3,0.4]]), np.array([0,0])) == (-1,-1), \"failed on invalid context (no 1 present)\"\nassert oracle_payoff(np.array([[0.2,0.8],[0.3,0.4]]), np.array([0,1,0])) == (-1,-1), \"failed on length mismatch\"\nassert oracle_payoff(np.array([[0.2],[0.7],[0.6],[0.1]]), np.array([0,1,0,0])) == (0.7,0), \"failed on K=1\""}
{"task_id": 430, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Dict, Set, Tuple\nfrom typing import List, Dict, Set, Tuple, Optional\ndef topological_sort(vertices: List, edges: List[Tuple]) -> Optional[List]:\n    \"\"\"Return a deterministic topological ordering of a directed graph.\n\n    The function performs a depth-first search (DFS) that\n    1. starts the search in *vertices* order, left-to-right;\n    2. explores every vertex\u2019s outgoing neighbours in the same left-to-right\n       order induced by *vertices*.\n\n    If during the DFS a back-edge (an edge to a vertex that is still on the\n    recursion stack) is encountered, the graph contains a directed cycle and\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    vertices : list\n        List of vertex identifiers (must be hashable).\n    edges : list[tuple]\n        List of directed edges (u, v) with u \u2192 v.\n\n    Returns\n    -------\n    list\n        A list containing the vertices in deterministic topological order, or\n    None\n        if the graph contains at least one directed cycle.\n    \"\"\"\n    position: Dict = {v: i for (i, v) in enumerate(vertices)}\n    adj: Dict = {v: [] for v in vertices}\n    for (u, v) in edges:\n        if u in position and v in position:\n            adj[u].append(v)\n    for u in adj:\n        adj[u].sort(key=position.__getitem__)\n    state: Dict = {v: 0 for v in vertices}\n    topo: List = []\n\n    def dfs(node) -> bool:\n        \"\"\"Return False on cycle detection, True otherwise.\"\"\"\n        state[node] = 1\n        for nei in adj[node]:\n            if state[nei] == 0:\n                if not dfs(nei):\n                    return False\n            elif state[nei] == 1:\n                return False\n        state[node] = 2\n        topo.append(node)\n        return True\n    for v in vertices:\n        if state[v] == 0:\n            if not dfs(v):\n                return None\n    topo.reverse()\n    return topo\nassert topological_sort([0, 1, 2, 3], [(0, 1), (0, 2), (1, 3), (2, 3)]) == [0, 2, 1, 3], \"failed on DAG with shared children\"\nassert topological_sort([0, 1, 2, 3, 4], [(0, 2), (2, 3)]) == [4, 1, 0, 2, 3], \"failed on disconnected DAG\"\nassert topological_sort([0, 1, 2], [(0, 1), (1, 2), (2, 0)]) is None, \"failed to detect 3-cycle\"\nassert topological_sort([0], [(0, 0)]) is None, \"failed to detect self-loop\"\nassert topological_sort(['a', 'b', 'c'], []) == ['c', 'b', 'a'], \"failed on edgeless graph\"\nassert topological_sort([0, 1, 2, 3], [(0, 1), (0, 1), (1, 2), (2, 3)]) == [0, 1, 2, 3], \"failed with duplicate edges\"\nassert topological_sort([1, 2, 3, 4, 5, 6], [(1, 2), (1, 3), (3, 4), (2, 4), (4, 5), (5, 6)]) == [1, 3, 2, 4, 5, 6], \"failed on larger DAG\"\nassert topological_sort([1, 2, 3], [(2, 3)]) == [2, 3, 1], \"failed on simple chain with isolated vertex\"\nassert topological_sort([10], []) == [10], \"failed on single isolated vertex\"\nassert topological_sort([0, 1, 2], [(0, 1), (1, 2), (2, 1)]) is None, \"failed to detect 2-cycle\""}
{"task_id": 431, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two 1-D vectors.\n\n    Parameters\n    ----------\n    x1, x2 : list | tuple | np.ndarray\n        1-D sequences/arrays containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        L2 distance rounded to 4 decimal places, or -1 if the vectors\n        have different lengths.\n    \"\"\"\n    try:\n        a = np.asarray(x1, dtype=float).ravel()\n        b = np.asarray(x2, dtype=float).ravel()\n    except (TypeError, ValueError):\n        raise ValueError('Both vectors must contain numeric data only.')\n    if a.size != b.size:\n        return -1\n    dist_val = np.linalg.norm(a - b)\n    return float(round(dist_val, 4))\nassert dist([0, 0], [3, 4]) == 5.0, \"Test case failed: dist([0, 0], [3, 4])\"\nassert dist(np.array([1, 2, 3]), np.array([4, 5, 6])) == 5.1962, \"Test case failed: dist(np.array([1,2,3]), np.array([4,5,6]))\"\nassert dist([1.5, 2.5], [1.5, 2.5]) == 0.0, \"Test case failed: identical vectors\"\nassert dist([1], [0]) == 1.0, \"Test case failed: single-element vectors\"\nassert dist([], []) == 0.0, \"Test case failed: empty vectors\"\nassert dist([1, 2, 3], [1, 2]) == -1, \"Test case failed: unequal lengths should return -1\"\nassert dist([1, -2, -3], [-1, 2, 3]) == 7.4833, \"Test case failed: dist([1,-2,-3],[-1,2,3])\"\nassert dist(np.array([10, 20]), np.array([13, 24])) == 5.0, \"Test case failed: dist([10,20],[13,24])\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute Xavier/Glorot fan-in and fan-out values for a weight tensor.\n\n    Args:\n        shape: Tensor shape. For 4-D convolutional kernels the expected layout\n               is (out_channels, in_channels, kernel_height, kernel_width).\n\n    Returns:\n        A tuple (fan_in, fan_out) as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_c, in_c, k_h, k_w) = shape[:4]\n        receptive_field_size = k_h * k_w\n        fan_in = in_c * receptive_field_size\n        fan_out = out_c * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 434, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a numerically-stable, row-wise softmax.\n\n    Parameters\n    ----------\n    logits : np.ndarray\n        1-D array of shape (n,) or 2-D array of shape (m, n)\n        containing the raw scores.\n\n    Returns\n    -------\n    list[list[float]]\n        Row-wise softmax probabilities, each rounded to 6 decimals.\n        Even for a 1-D input, a list containing a single list is returned.\n    \"\"\"\n    logits = np.asarray(logits, dtype=np.float64)\n    if logits.ndim == 1:\n        logits = logits[np.newaxis, :]\n    shifted = logits - np.max(logits, axis=1, keepdims=True)\n    exp_vals = np.exp(shifted)\n    probs = exp_vals / np.sum(exp_vals, axis=1, keepdims=True)\n    return np.round(probs, 6).tolist()\nassert softmax(np.array([[1.0, 2.0, 3.0]])) == [[0.090031, 0.244728, 0.665241]], \"failed: single row [[1,2,3]]\"\nassert softmax(np.array([1.0, 2.0, 3.0])) == [[0.090031, 0.244728, 0.665241]], \"failed: 1-D input [1,2,3]\"\nassert softmax(np.array([[0.0, 0.0, 0.0]])) == [[0.333333, 0.333333, 0.333333]], \"failed: equal logits\"\nassert softmax(np.array([[2.0, -2.0]])) == [[0.982014, 0.017986]], \"failed: [2,-2]\"\nassert softmax(np.array([[1000.0, 1000.0]])) == [[0.5, 0.5]], \"failed: large identical logits\"\nassert softmax(np.array([[-1000.0, -1000.0]])) == [[0.5, 0.5]], \"failed: large negative identical logits\"\nassert softmax(np.array([[1.0, 2.0, 3.0], [-1.0, 0.0, 1.0]])) == [[0.090031, 0.244728, 0.665241], [0.090031, 0.244728, 0.665241]], \"failed: two rows\"\nassert softmax(np.array([[5.0]])) == [[1.0]], \"failed: single element\""}
{"task_id": 435, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear-regression weak learners and squared-error loss.\n    All returned numbers are rounded to 4 decimal places and packed into\n    a plain Python list.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    if X_arr.ndim == 1:\n        X_arr = X_arr.reshape(-1, 1)\n    m = y_arr.shape[0]\n    y_mean = y_arr.mean()\n    if n_estimators <= 0 or learning_rate == 0:\n        return np.round(np.full(m, y_mean), 4).tolist()\n    current_pred = np.full(m, y_mean, dtype=float)\n    ones = np.ones((m, 1), dtype=float)\n    X_design = np.concatenate((ones, X_arr), axis=1)\n    for _ in range(n_estimators):\n        residuals = y_arr - current_pred\n        (beta, _, _, _) = np.linalg.lstsq(X_design, residuals, rcond=None)\n        h_pred = X_design @ beta\n        current_pred += learning_rate * h_pred\n    return np.round(current_pred, 4).tolist()\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    arr = np.asarray(x, dtype=float)\n    sig = 1.0 / (1.0 + np.exp(-arr))\n    if order == 0:\n        res = sig\n    elif order == 1:\n        res = sig * (1.0 - sig)\n    else:\n        res = sig * (1.0 - sig) * (1.0 - 2.0 * sig)\n    res = np.round(res, 4)\n    if res.shape == ():\n        return float(res)\n    return res.tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of *y*, or ``-1`` when the given\n        *num_classes* is smaller than required.\n    \"\"\"\n    y_arr = np.asarray(y, dtype=int).ravel()\n    if y_arr.size == 0:\n        inferred_classes = 0 if num_classes is None else num_classes\n        return [] if inferred_classes == 0 else [[] for _ in range(0)]\n    max_label = int(y_arr.max())\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    one_hot = np.zeros((y_arr.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y_arr.shape[0]), y_arr] = 1\n    return one_hot.tolist()\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 439, "completion_id": 0, "passed": true, "result": "passed", "solution": "import itertools\nimport itertools\nimport math\nfrom collections import defaultdict\nfrom typing import Hashable, List, Tuple\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find all frequent item-sets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        The data base: one list per transaction, containing *hashable* items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction in (0, 1].\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets ordered first by their length and then\n        lexicographically inside each length block; inside every tuple the items\n        themselves appear in ascending (lexicographic) order.\n    \"\"\"\n    if not 0 < min_sup <= 1:\n        raise ValueError('min_sup must be in the range (0, 1].')\n    n_transactions = len(transactions)\n    if n_transactions == 0:\n        return []\n    transactions = [set(t) for t in transactions]\n\n    def is_frequent(count: int) -> bool:\n        \"\"\"True if empirical support \u2265 min_sup.\"\"\"\n        return count >= min_sup * n_transactions - 1e-12\n    item_counts: defaultdict[Hashable, int] = defaultdict(int)\n    for t in transactions:\n        for item in t:\n            item_counts[item] += 1\n    L1 = [tuple([item]) for (item, cnt) in item_counts.items() if is_frequent(cnt)]\n    L1.sort()\n    frequent_itemsets: list[tuple] = []\n    frequent_itemsets.extend(L1)\n    prev_L = L1\n    k = 2\n    while prev_L:\n        prev_L_len = len(prev_L)\n        prev_L_set = set(prev_L)\n        Ck: set[tuple] = set()\n        for i in range(prev_L_len):\n            for j in range(i + 1, prev_L_len):\n                (a, b) = (prev_L[i], prev_L[j])\n                if a[:-1] != b[:-1]:\n                    break\n                candidate = tuple(sorted(set(a) | set(b)))\n                if len(candidate) != k:\n                    continue\n                if all((tuple(subset) in prev_L_set for subset in itertools.combinations(candidate, k - 1))):\n                    Ck.add(candidate)\n        if not Ck:\n            break\n        candidate_counts = defaultdict(int)\n        cand_sets = {cand: frozenset(cand) for cand in Ck}\n        for t in transactions:\n            for (cand, cand_set) in cand_sets.items():\n                if cand_set.issubset(t):\n                    candidate_counts[cand] += 1\n        Lk = [cand for (cand, cnt) in candidate_counts.items() if is_frequent(cnt)]\n        Lk.sort()\n        if not Lk:\n            break\n        frequent_itemsets.extend(Lk)\n        prev_L = Lk\n        k += 1\n    return frequent_itemsets\nassert apriori_frequent_itemsets([[1,2,3],[1,2],[2,3],[1,3]],0.5)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed: basic example\"\nassert apriori_frequent_itemsets([],0.5)==[],\"failed: empty dataset\"\nassert apriori_frequent_itemsets([[\"a\",\"b\",\"c\"],[\"a\",\"b\"],[\"a\",\"c\"],[\"b\",\"c\"]],0.75)==[(\"a\",),(\"b\",),(\"c\",)],\"failed: high threshold\"\nassert apriori_frequent_itemsets([[1,2],[1,3],[2,3],[1,2,3]],0.25)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed: very low threshold\"\nassert apriori_frequent_itemsets([[1,2],[3,4],[5,6]],0.34)==[],\"failed: no frequent itemsets across disjoint transactions\"\nassert apriori_frequent_itemsets([[\"x\",\"y\"],[\"x\",\"y\"],[\"x\",\"y\"]],0.2)==[(\"x\",),(\"y\",),(\"x\",\"y\",)],\"failed: every item always occurs\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class\u2013probability predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        Shape (n_estimators, n_samples, n_classes).  Each innermost list is a\n        valid probability distribution (sums to 1).\n\n    Returns\n    -------\n    tuple\n        (\n          averaged_probs,      # list[list[float]] shape (n_samples, n_classes)\n          predicted_labels     # list[int]          length == n_samples\n        )\n        `averaged_probs` are rounded to 4 decimal places; `predicted_labels`\n        are obtained with arg-max on the rounded probabilities.  Ties are\n        resolved by the smallest class index (numpy\u2019s default behaviour).\n    \"\"\"\n    if not predictions:\n        raise ValueError('`predictions` must contain at least one estimator.')\n    arr = np.asarray(predictions, dtype=float)\n    if arr.ndim != 3:\n        raise ValueError('`predictions` must be 3-dimensional (n_estimators, n_samples, n_classes).')\n    mean_probs = arr.mean(axis=0)\n    mean_probs = np.round(mean_probs, 4)\n    predicted = np.argmax(mean_probs, axis=1)\n    averaged_probs_list = mean_probs.tolist()\n    predicted_labels_list = predicted.tolist()\n    return (averaged_probs_list, predicted_labels_list)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 441, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a 1-D Hamming window.\n    \n    Parameters\n    ----------\n    window_len : int\n        Number of samples that must be returned.\n    symmetric : bool, optional\n        If True  \u2013 return the symmetric window (for FIR design).\n        If False \u2013 return the periodic window (for FFT analysis).\n\n    Returns\n    -------\n    list[float]\n        The requested window as ordinary Python floats rounded\n        to 4 decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len if symmetric else window_len + 1\n    n = np.arange(N, dtype=float)\n    w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    if not symmetric:\n        w = w[:-1]\n    return np.round(w, 4).tolist()\nassert hamming(5, True) == [0.08, 0.54, 1.0, 0.54, 0.08], \"failed for hamming(5, True)\"\nassert hamming(5, False) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979], \"failed for hamming(5, False)\"\nassert hamming(1, True) == [1.0], \"failed for hamming(1, True)\"\nassert hamming(1, False) == [1.0], \"failed for hamming(1, False)\"\nassert hamming(2, True) == [0.08, 0.08], \"failed for hamming(2, True)\"\nassert hamming(2, False) == [0.08, 1.0], \"failed for hamming(2, False)\"\nassert hamming(7, True) == [0.08, 0.31, 0.77, 1.0, 0.77, 0.31, 0.08], \"failed for hamming(7, True)\"\nassert hamming(7, False) == [0.08, 0.2532, 0.6424, 0.9544, 0.9544, 0.6424, 0.2532], \"failed for hamming(7, False)\"\nassert hamming(3, True) == [0.08, 1.0, 0.08], \"failed for hamming(3, True)\"\nassert hamming(3, False) == [0.08, 0.77, 0.77], \"failed for hamming(3, False)\""}
{"task_id": 442, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport heapq\nimport numpy as np\nimport heapq\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a (hand-written) KD-Tree.\"\"\"\n    (n_train, n_features) = X_train.shape\n    indices_all = np.arange(n_train)\n\n    def build(node_indices: np.ndarray):\n        \"\"\"\n        Recursively builds a balanced KD-Tree.\n\n        Every inner node stores:\n            (split_dim, split_val, point_index, left_child, right_child)\n        A leaf is represented by None.\n        \"\"\"\n        if node_indices.size == 0:\n            return None\n        pts = X_train[node_indices]\n        split_dim = np.argmax(pts.var(axis=0))\n        order = np.argsort(pts[:, split_dim])\n        ordered_idx = node_indices[order]\n        mid = ordered_idx.size // 2\n        point_idx = ordered_idx[mid]\n        left_child = build(ordered_idx[:mid])\n        right_child = build(ordered_idx[mid + 1:])\n        split_val = X_train[point_idx, split_dim]\n        return (split_dim, split_val, point_idx, left_child, right_child)\n    root = build(indices_all)\n    predictions: list[int] = []\n\n    def knn_search(node, query_point, heap):\n        \"\"\"\n        Depth-first search with back-tracking & pruning.\n\n        'heap' is a max-heap (implemented as a min-heap of negative distances)\n        that stores at most k entries (-dist_sq, index).\n        \"\"\"\n        if node is None:\n            return\n        (split_dim, split_val, p_idx, left, right) = node\n        if query_point[split_dim] <= split_val:\n            (near, far) = (left, right)\n        else:\n            (near, far) = (right, left)\n        knn_search(near, query_point, heap)\n        dist_sq = float(np.sum((query_point - X_train[p_idx]) ** 2))\n        heapq.heappush(heap, (-dist_sq, p_idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n        worst_sq = -heap[0][0] if len(heap) == k else float('inf')\n        plane_dist_sq = (query_point[split_dim] - split_val) ** 2\n        if plane_dist_sq < worst_sq:\n            knn_search(far, query_point, heap)\n    for q in X_test:\n        heap: list[tuple[float, int]] = []\n        knn_search(root, q, heap)\n        neighbour_indices = [idx for (_, idx) in heap]\n        vote = np.argmax(np.bincount(y_train[neighbour_indices]))\n        predictions.append(int(vote))\n    return predictions\nassert knn_kdtree(np.array([[1,1],[2,2],[3,3],[10,10]]), np.array([0,0,0,1]), np.array([[1.5,1.5],[9,9]]), 1) == [0,1], \"test-1 failed\"\nassert knn_kdtree(np.array([[1,1],[2,2],[3,3],[10,10]]), np.array([0,0,0,1]), np.array([[1.5,1.5],[9,9]]), 3) == [0,0], \"test-2 failed\"\nassert knn_kdtree(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]), np.array([0,0,0,1,1,1]), np.array([[0.1,0.2],[10.2,10.1]]), 3) == [0,1], \"test-3 failed\"\nassert knn_kdtree(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), 1) == [0,1], \"test-4 failed\"\nassert knn_kdtree(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), 2) == [0,1], \"test-5 failed\"\nassert knn_kdtree(np.array([[0,0],[0,1],[1,1]]), np.array([1,1,2]), np.array([[0.2,0.2]]), 3) == [1], \"test-6 failed\"\nassert knn_kdtree(np.array([[1,2,3,4],[2,2,3,4],[10,10,10,10]]), np.array([0,0,1]), np.array([[1,2.1,2.9,4.1],[9,9.5,9.8,10]]), 1) == [0,1], \"test-7 failed\"\nassert knn_kdtree(np.array([[0,0],[0,0],[1,1]]), np.array([0,1,1]), np.array([[0,0]]), 2) == [0], \"test-8 failed\"\nimport numpy as _np, numpy as _npt\n_rng = _np.random.default_rng(42)\n_X = _rng.random((50,3))\n_y = _rng.integers(0,3,50)\n_q = _X[0:2] + 1e-4\nassert knn_kdtree(_X, _y, _q, 1) == _y[0:2].tolist(), \"test-9 failed\"\nassert knn_kdtree(np.array([[0],[1],[2]]), np.array([0,1,1]), np.array([[1]]), 2) == [1], \"test-10 failed\""}
{"task_id": 443, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom numbers import Number\ndef _is_numeric(value) -> bool:\n    \"\"\"\n    Decide whether *value* should be treated as \u201cnumeric\u201d **for this task**.\n    Booleans are deliberately excluded although they are subclasses of int.\n    \"\"\"\n    return isinstance(value, Number) and (not isinstance(value, bool))\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n        \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n        \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        raise ValueError('X must be a 2-D NumPy array')\n    col = X[:, feature_i]\n    if _is_numeric(threshold):\n        mask = col >= threshold\n    else:\n        mask = col == threshold\n    left_subset = X[mask]\n    right_subset = X[~mask]\n    if left_subset.size == 0:\n        left_subset = left_subset.reshape(0, X.shape[1])\n    if right_subset.size == 0:\n        right_subset = right_subset.reshape(0, X.shape[1])\n    return (left_subset, right_subset)\nX1 = np.array([[1, 2], [3, 4], [5, 6]])\nassert np.array_equal(divide_on_feature(X1, 0, 3)[0], np.array([[3, 4], [5, 6]])), \"failed on X1 left\"\nassert np.array_equal(divide_on_feature(X1, 0, 3)[1], np.array([[1, 2]])), \"failed on X1 right\"\nX2 = np.array([[10.5, 0], [ 2.0, 1], [10.5, 2]])\nleft, right = divide_on_feature(X2, 0, 10.5)\nassert left.shape == (2, 2) and right.shape == (1, 2), \"shape mismatch on floats\"\nassert np.all(left[:, 0] >= 10.5) and np.all(right[:, 0] < 10.5), \"wrong split on floats\"\nX3 = np.array([[\"red\", 1], [\"blue\", 2], [\"red\", 3]], dtype=object)\nleft, right = divide_on_feature(X3, 0, \"red\")\nassert np.array_equal(left, np.array([[\"red\", 1], [\"red\", 3]], dtype=object)), \"categorical left wrong\"\nassert np.array_equal(right, np.array([[\"blue\", 2]], dtype=object)), \"categorical right wrong\"\nX4 = np.array([[0, 0], [1, 1], [2, 2]])\nleft, right = divide_on_feature(X4, 1, 5)\nassert left.size == 0 and right.shape == (3, 2), \"all rows should be right when threshold too high\"\nX5 = np.array([[5, 5], [6, 6], [7, 7]])\nleft, right = divide_on_feature(X5, 1, 5)\nassert right.size == 0 and left.shape == (3, 2), \"all rows should be left when threshold too low\"\nX6 = np.array([[1, 0, 1], [2, 0, 2], [3, 1, 3]])\nleft, right = divide_on_feature(X6, 1, 0)\nassert np.all(left[:, 1] >= 0), \"numeric equality/greater failed\"\nX7 = np.array([[\"a\"], [\"b\"], [\"c\"], [\"b\"]], dtype=object)\nleft, right = divide_on_feature(X7, 0, \"b\")\nassert left.shape == (2, 1) and right.shape == (2, 1), \"string split size wrong\"\nX8 = np.arange(20).reshape(10, 2)\nleft, right = divide_on_feature(X8, 0, 8)\nassert np.all(left[:, 0] >= 8) and np.all(right[:, 0] < 8), \"large numeric matrix split failed\"\nX9 = np.array([[True, 1], [False, 2], [True, 3]], dtype=object)\nleft, right = divide_on_feature(X9, 0, True)\nassert left.shape == (2, 2) and right.shape == (1, 2), \"boolean threshold split failed\"\nX10 = np.random.randint(0, 100, size=(100, 5))\nleft, right = divide_on_feature(X10, 4, 50)\nassert left.shape[0] + right.shape[0] == 100, \"row count mismatch on random test\""}
{"task_id": 444, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications given in the task description.\n    It returns -1 on invalid input, otherwise a nested list containing the\n    kernel matrix rounded to four decimal places.\n    \"\"\"\n\n    def _to_2d_array(mat):\n        try:\n            arr = np.asarray(mat, dtype=float)\n        except Exception:\n            return None\n        if arr.ndim != 2 or arr.shape[1] == 0:\n            return None\n        return arr\n    X_arr = _to_2d_array(X)\n    if X_arr is None:\n        return -1\n    (n_samples, n_features) = X_arr.shape\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = _to_2d_array(Y)\n        if Y_arr is None or Y_arr.shape[1] != n_features:\n            return -1\n    if sigma is None:\n        sigma_scalar = np.sqrt(n_features / 2.0)\n        if sigma_scalar <= 0:\n            return -1\n        sigma_vec = None\n    elif isinstance(sigma, (int, float, np.floating)):\n        sigma_scalar = float(sigma)\n        if sigma_scalar <= 0:\n            return -1\n        sigma_vec = None\n    else:\n        try:\n            sigma_vec = np.asarray(sigma, dtype=float)\n        except Exception:\n            return -1\n        if sigma_vec.ndim != 1 or sigma_vec.shape[0] != n_features:\n            return -1\n        if np.any(sigma_vec <= 0):\n            return -1\n        sigma_scalar = None\n    if sigma_vec is None:\n        diff = X_arr[:, None, :] - Y_arr[None, :, :]\n        dist2 = np.sum(diff ** 2, axis=-1) / sigma_scalar ** 2\n    else:\n        diff = (X_arr[:, None, :] - Y_arr[None, :, :]) / sigma_vec\n        dist2 = np.sum(diff ** 2, axis=-1)\n    K = np.exp(-0.5 * dist2)\n    return np.round(K, 4).tolist()\nassert rbf_kernel([[1,0],[0,1]], [[1,0],[0,1]], 1.0) == [[1.0, 0.3679], [0.3679, 1.0]], \"Test 1 failed: isotropic \u03c3=1.0\"\nassert rbf_kernel([[1,1],[2,2],[3,3]], None, None) == [[1.0, 0.3679, 0.0183], [0.3679, 1.0, 0.3679], [0.0183, 0.3679, 1.0]], \"Test 3 failed: default \u03c3\"\nassert rbf_kernel([[0,0],[1,1]], [[1,0]], 1.0) == [[0.6065], [0.6065]], \"Test 4 failed: X\u2260Y shapes\"\nassert rbf_kernel([[1,0],[0,1]], None, [2,2]) == [[1.0, 0.7788], [0.7788, 1.0]], \"Test 5 failed: larger anisotropic \u03c3\"\nassert rbf_kernel([[0],[1],[2]], None, 1.0) == [[1.0, 0.6065, 0.1353], [0.6065, 1.0, 0.6065], [0.1353, 0.6065, 1.0]], \"Test 6 failed: 1-D data\"\nassert rbf_kernel([[0,0,0]], None, None) == [[1.0]], \"Test 7 failed: single vector\"\nassert rbf_kernel([[1,2,3]], None, [1,2]) == -1, \"Test 8 failed: wrong \u03c3 length\"\nassert rbf_kernel([[1,2]], None, -1.0) == -1, \"Test 9 failed: negative \u03c3\"\nassert rbf_kernel([[1,2]], None, [1,0]) == -1, \"Test 10 failed: zero in \u03c3 list\""}
{"task_id": 446, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find the best 1-level split (decision stump) by information gain.\"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    (classes, y_indices) = np.unique(y, return_inverse=True)\n    n_classes = len(classes)\n\n    def entropy_from_counts(counts: np.ndarray) -> float:\n        \"\"\"Shannon entropy (base 2) from a 1-D array with class counts.\"\"\"\n        total = counts.sum()\n        if total == 0:\n            return 0.0\n        probs = counts[counts > 0] / total\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(counts: np.ndarray) -> int:\n        \"\"\"Most frequent label, ties resolved by smaller label value.\"\"\"\n        max_count = counts.max()\n        winner_idx = np.where(counts == max_count)[0][0]\n        return int(classes[winner_idx])\n    total_counts = np.bincount(y_indices, minlength=n_classes)\n    parent_entropy = entropy_from_counts(total_counts)\n    if parent_entropy == 0.0:\n        maj = majority_label(total_counts)\n        return (-1, None, maj, maj)\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    best_left_label = None\n    best_right_label = None\n    eps = 1e-12\n    for j in range(n_features):\n        col = X[:, j]\n        order = np.argsort(col)\n        sorted_vals = col[order]\n        sorted_y_idx = y_indices[order]\n        left_counts = np.zeros(n_classes, dtype=int)\n        for i in range(n_samples - 1):\n            left_counts[sorted_y_idx[i]] += 1\n            if sorted_vals[i] == sorted_vals[i + 1]:\n                continue\n            thr = (sorted_vals[i] + sorted_vals[i + 1]) / 2.0\n            n_left = i + 1\n            n_right = n_samples - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            right_counts = total_counts - left_counts\n            h_left = entropy_from_counts(left_counts)\n            h_right = entropy_from_counts(right_counts)\n            p_left = n_left / n_samples\n            p_right = 1.0 - p_left\n            gain = parent_entropy - p_left * h_left - p_right * h_right\n            better_gain = gain > best_gain + eps\n            same_gain = abs(gain - best_gain) <= eps\n            update = False\n            if better_gain:\n                update = True\n            elif same_gain:\n                if j < best_feature:\n                    update = True\n                elif j == best_feature and (best_threshold is None or thr < best_threshold - eps):\n                    update = True\n            if update:\n                best_gain = gain\n                best_feature = j\n                best_threshold = thr\n                best_left_label = majority_label(left_counts)\n                best_right_label = majority_label(right_counts)\n    if best_gain <= eps:\n        maj = majority_label(total_counts)\n        return (-1, None, maj, maj)\n    return (best_feature, round(best_threshold, 4), best_left_label, best_right_label)\nassert decision_stump([[1],[2],[3],[4]],[0,0,1,1])==(0,2.5,0,1),\"failed on simple 1-D split\"\nassert decision_stump([[1,1],[2,1],[3,2],[4,2]],[0,0,1,1])==(0,2.5,0,1),\"failed when two features tie\"\nassert decision_stump([[1],[2]],[1,1])==(-1,None,1,1),\"failed when no split improves gain\"\nassert decision_stump([[0],[1],[2],[3],[4],[5]],[1,1,1,0,0,0])==(0,2.5,1,0),\"failed on mixed labels\"\nassert decision_stump([[10,0],[20,0],[30,1],[40,1]],[0,0,1,1])==(0,25.0,0,1),\"failed on threshold rounding\"\nassert decision_stump([[5,2],[6,2],[7,3],[8,3]],[1,1,0,0])==(0,6.5,1,0),\"failed different labels/values\"\nassert decision_stump([[1,10],[2,20],[3,30],[4,40]],[0,0,1,1])==(0,2.5,0,1),\"failed preference of feature 0 over 1\"\nassert decision_stump([[1,1,1],[2,2,2],[3,3,3],[4,4,4]],[0,0,1,1])==(0,2.5,0,1),\"failed more than two features\"\nassert decision_stump([[1],[1.5],[2],[2.5],[3]], [0,0,0,1,1])==(0,2.25,0,1),\"failed uneven split\"\nassert decision_stump([[1,2],[1,3],[1,4]],[2,2,2])==(-1,None,2,2),\"failed when all labels identical\""}
{"task_id": 447, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A (possibly nested) Python list containing only ones that mirrors the\n        provided shape.\n    \"\"\"\n    return np.ones(shape, **kwargs).tolist()\nassert one(3) == [1.0, 1.0, 1.0], \"failed on one(3)\"\nassert one((2, 2)) == [[1.0, 1.0], [1.0, 1.0]], \"failed on one((2, 2))\"\nassert one((1,)) == [1.0], \"failed on one((1,))\"\nassert one((2, 3)) == [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], \"failed on one((2, 3))\"\nassert one((2, 2, 1)) == [[[1.0], [1.0]], [[1.0], [1.0]]], \"failed on one((2, 2, 1))\"\nassert one(0) == [], \"failed on one(0)\"\nassert len(one((1, 2, 3))) == 1 and len(one((1, 2, 3))[0]) == 2, \"failed on shape dimensions for one((1, 2, 3))\"\nassert one((2,), dtype=int) == [1, 1], \"failed on dtype=int for one((2,))\"\nassert one(4, dtype=int) == [1, 1, 1, 1], \"failed on dtype=int for one(4)\"\nassert one((2, 1)) == [[1.0], [1.0]], \"failed on one((2, 1))\""}
{"task_id": 448, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n        (Only its length is relevant for this baseline.)\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every row in ``X_test`` rounded to 4 decimal places.\n        If ``y_train`` is empty, an empty list is returned.\n    \"\"\"\n    y_train = np.asarray(y_train)\n    if y_train.size == 0:\n        return []\n    mean_val = np.mean(y_train)\n    preds = np.full(X_test.shape[0], mean_val, dtype=float)\n    preds = np.round(preds, 4)\n    return preds.tolist()\nassert mean_baseline_predict(np.array([[1,2],[3,4]]), np.array([2,4]), np.array([[5,6],[7,8],[9,10]])) == [3.0,3.0,3.0], \"tc1 failed: simple ints\"\nassert mean_baseline_predict(np.array([[0]]), np.array([1.2345, 5.4321]), np.zeros((4,2))) == [3.3333,3.3333,3.3333,3.3333], \"tc2 failed: float mean rounding\"\nassert mean_baseline_predict(np.random.randn(10,3), np.arange(10), np.random.randn(5,3)) == [4.5]*5, \"tc3 failed: sequential targets\"\nassert mean_baseline_predict(np.zeros((2,2)), np.array([-1,-1,-1]), np.ones((6,1))) == [-1.0]*6, \"tc4 failed: negative mean\"\nassert mean_baseline_predict(np.random.randn(3,4), np.array([7.8]), np.random.randn(2,4)) == [7.8,7.8], \"tc5 failed: single target\"\nassert mean_baseline_predict(np.random.randn(4,2), np.array([1,2,3,4]), np.empty((0,2))) == [], \"tc6 failed: no test samples\"\nassert mean_baseline_predict(np.random.randn(4,5), np.array([]), np.random.randn(3,5)) == [], \"tc7 failed: no training targets\"\nassert mean_baseline_predict(np.array([[10,20],[30,40]]), np.array([1e6,1e6]), np.array([[5,6]])) == [1000000.0], \"tc8 failed: large numbers\"\nassert mean_baseline_predict(np.array([[1,2,3]]*10), np.linspace(0,9,10), np.array([[0,0,0]]*3)) == [4.5,4.5,4.5], \"tc9 failed: high dimensional features\""}
{"task_id": 449, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a (simplified) Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples, shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary training labels (0/1), length n_samples.\n    X_test : np.ndarray\n        Test samples, shape (k_samples, n_features).\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for every row in `X_test`.\n    \"\"\"\n    (X0, X1) = (X_train[y_train == 0], X_train[y_train == 1])\n    Mu0 = X0.mean(axis=0)\n    Mu1 = X1.mean(axis=0)\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = X_train.shape[1]\n    Sigma = 1.0 / m * (X_sub_Mu.T @ X_sub_Mu)\n    normal_vec = Mu1 - Mu0\n    norm = np.linalg.norm(normal_vec)\n    w = normal_vec / norm if norm != 0 else np.zeros_like(normal_vec)\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2.0)\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    scores = X_test @ w + b\n    preds = (scores > 0).astype(int) * sign\n    return preds.astype(int).tolist()\nassert gda(np.array([[1,2],[2,1],[3,4],[4,3]]), np.array([0,0,1,1]), np.array([[1.5,1.5],[3,3]])) == [0, 1], \"failed: simple symmetric dataset\"\nassert gda(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0.2,0.2],[0.9,0.9]])) == [0, 1], \"failed: XOR-like but linearly separable\"\nassert gda(np.array([[2,3],[3,3],[3,4],[5,5],[1,0]]), np.array([0,0,1,1,0]), np.array([[4,4],[1,1]])) == [1, 0], \"failed: unbalanced classes\"\nassert gda(np.array([[-1,-2],[-2,-1],[2,1],[3,1]]), np.array([0,0,1,1]), np.array([[-1.5,-1.5],[2.5,1]])) == [0, 1], \"failed: negative coordinates\"\nassert gda(np.array([[1,0],[2,0],[3,0],[4,0]]), np.array([0,0,1,1]), np.array([[1.5,0],[3.5,0]])) == [0, 1], \"failed: 1-D manifold in 2-D space\"\nassert gda(np.array([[0,0],[1,1],[2,2],[3,3]]), np.array([0,0,1,1]), np.array([[0.5,0.5],[2.5,2.5]])) == [0, 1], \"failed: diagonal line\"\nassert gda(np.array([[1,2],[3,4],[5,6],[7,8]]), np.array([0,0,1,1]), np.array([[2,3],[6,7]])) == [0, 1], \"failed: larger coordinate values\"\nassert gda(np.array([[5,5],[6,5],[7,5],[8,5]]), np.array([0,0,1,1]), np.array([[5.5,5],[7.5,5]])) == [0, 1], \"failed: horizontal line\"\nassert gda(np.array([[1,1],[1,2],[2,1],[2,2]]), np.array([0,0,1,1]), np.array([[1.25,1.25],[1.75,1.75]])) == [0, 1], \"failed: small grid\"\nassert gda(np.array([[10,10],[10,11],[11,10],[11,11]]), np.array([0,0,1,1]), np.array([[10.2,10.2],[10.9,10.9]])) == [0, 1], \"failed: shifted square\""}
{"task_id": 450, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape (n_samples, n_estimators) whose entries are\n        *non-negative integer* class labels predicted by the individual\n        estimators.\n\n    Returns\n    -------\n    list[int]\n        The chosen class label for every sample.  In case of a tie the smallest\n        label is returned (NumPy\u2019s argmax behaviour).\n    \"\"\"\n    if preds.ndim != 2:\n        raise ValueError('`preds` must be a 2-D array of shape (n_samples, n_estimators).')\n    winners = [int(np.bincount(row).argmax()) for row in preds]\n    return winners\nassert majority_vote(np.array([[0, 1, 1], [2, 2, 1], [0, 0, 0]])) == [1, 2, 0], \"test failed: simple majority\"\nassert majority_vote(np.array([[1, 1, 2, 2], [3, 3, 3, 3]])) == [1, 3], \"test failed: even tie followed by clear majority\"\nassert majority_vote(np.array([[4, 4, 4, 2, 2, 2]])) == [2], \"test failed: tie for label 2 and 4, expect smallest\"\nassert majority_vote(np.array([[0]])) == [0], \"test failed: single estimator single sample\"\nassert majority_vote(np.array([[5, 5, 5], [6, 7, 6], [9, 8, 8]])) == [5, 6, 8], \"test failed: varied labels\"\nassert majority_vote(np.array([[1, 2, 3, 4, 5]])) == [1], \"test failed: all distinct labels pick smallest\"\nassert majority_vote(np.array([[2, 2, 2], [1, 1, 2], [3, 4, 4]])) == [2, 1, 4], \"test failed: mixed patterns\"\nassert majority_vote(np.array([[0, 0, 1, 1, 2, 2]])) == [0], \"test failed: triple tie choose smallest\"\nassert majority_vote(np.array([[10, 10], [0, 1], [1, 0]])) == [10, 0, 0], \"test failed: two estimators case\"\nassert majority_vote(np.array([[3, 3, 3, 3], [2, 3, 2, 3]])) == [3, 2], \"test failed: majority vs tie\""}
{"task_id": 451, "completion_id": 0, "passed": false, "result": "failed: Forward reference must be an expression -- got '._KDNode'", "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List\nimport numpy as np\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"Classify *X_test* with a KD-Tree based exact k-NN search (Euclidean).\n\n    When two or more labels are equally frequent among the *k* neighbours,\n    the smallest label is returned.\n\n    If *X_train* is empty or *k* \u2264 0 an empty list is returned.\n    \"\"\"\n\n    class _KDNode:\n        \"\"\"Light-weight KD-Tree node.\"\"\"\n        __slots__ = ('point', 'label', 'axis', 'left', 'right')\n\n        def __init__(self, point: np.ndarray, label: int, axis: int, left: Optional['._KDNode'], right: Optional['._KDNode']):\n            self.point = point\n            self.label = label\n            self.axis = axis\n            self.left = left\n            self.right = right\n\n    def _build(points: np.ndarray, labels: np.ndarray, depth: int=0) -> Optional[_KDNode]:\n        \"\"\"Recursively build a balanced KD-Tree.\"\"\"\n        if points.shape[0] == 0:\n            return None\n        axis = depth % points.shape[1]\n        idx = np.argsort(points[:, axis])\n        mid = len(idx) // 2\n        return _KDNode(point=points[idx[mid]], label=int(labels[idx[mid]]), axis=axis, left=_build(points[idx[:mid]], labels[idx[:mid]], depth + 1), right=_build(points[idx[mid + 1:]], labels[idx[mid + 1:]], depth + 1))\n\n    def _knn_search(node: Optional[_KDNode], query: np.ndarray, heap: List[tuple]):\n        \"\"\"Fill *heap* with the k closest points to *query* found below *node*.\"\"\"\n        if node is None:\n            return\n        diff = query[node.axis] - node.point[node.axis]\n        (near_branch, far_branch) = (node.left, node.right) if diff < 0 else (node.right, node.left)\n        _knn_search(near_branch, query, heap)\n        dist_sq = float(np.sum((node.point - query) ** 2))\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist_sq, node.label))\n        elif dist_sq < -heap[0][0]:\n            heapq.heapreplace(heap, (-dist_sq, node.label))\n        if len(heap) < k or diff * diff < -heap[0][0]:\n            _knn_search(far_branch, query, heap)\n    if k <= 0 or X_train.size == 0:\n        return []\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    X_test = np.asarray(X_test, dtype=float)\n    k = min(k, X_train.shape[0])\n    root = _build(X_train, y_train)\n    predictions: list[int] = []\n    for query in X_test:\n        heap: list[tuple[float, int]] = []\n        _knn_search(root, query, heap)\n        labels = [lbl for (_, lbl) in heap]\n        counts = Counter(labels)\n        max_votes = max(counts.values())\n        chosen = min((lbl for (lbl, cnt) in counts.items() if cnt == max_votes))\n        predictions.append(chosen)\n    return predictions\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0],[1,1],[4,4],[4,5],[5,4],[5,5]]), np.array([0,0,0,0,1,1,1,1]), np.array([[0.1,0.2],[4.2,4.3]]), 3) == [0,1], \"failed: basic separated clusters\"\nassert knn_kdtree_predict(np.array([[0,0]]), np.array([7]), np.array([[1,1],[2,2]]), 1) == [7,7], \"failed: single training sample\"\nassert knn_kdtree_predict(np.array([[0,0],[0,2]]), np.array([1,2]), np.array([[0,1]]), 2) == [1], \"failed: tie should choose smaller label\"\nassert knn_kdtree_predict(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.array([0,1,1]), np.array([[1,2,4],[6,5,4]]), 1) == [0,1], \"failed: 3-D space k=1\"\nassert knn_kdtree_predict(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.array([0,1,1]), np.array([[1,2,4],[6,5,4]]), 2) == [0,1], \"failed: 3-D space k=2\"\nassert knn_kdtree_predict(np.empty((0,2)), np.array([]), np.array([[0,0]]), 3) == [], \"failed: empty training set\"\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,1]), np.array([[0.9,0.1]]), 3) == [1], \"failed: majority vote 2-1\"\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0]]), np.array([2,2,3]), np.array([[0.1,0.9]]), 3) == [2], \"failed: majority vote with tie breaking\""}
{"task_id": 452, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numbers\nimport numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split *X* into two subsets according to one feature and a threshold.\n\n    For a numeric *threshold* (int / float) the first subset contains every\n    sample whose value in column *feature_i* is >= threshold, otherwise the\n    first subset contains every sample whose value equals *threshold*.\n\n    The second subset gets all remaining samples.  The original row order is\n    preserved and both subsets are returned as regular Python lists.\n    \"\"\"\n    is_numeric = isinstance(threshold, numbers.Real) and (not isinstance(threshold, bool))\n    (left, right) = ([], [])\n    for row in X:\n        value = row[feature_i]\n        if is_numeric:\n            goes_left = value >= threshold\n        else:\n            goes_left = value == threshold\n        (left if goes_left else right).append(row)\n    left_out = np.asarray(left, dtype=object).tolist() if left else []\n    right_out = np.asarray(right, dtype=object).tolist() if right else []\n    return [left_out, right_out]\nassert divide_on_feature([[1,5],[3,2],[4,6],[2,1]],0,3) == [[[3,2],[4,6]],[[1,5],[2,1]]], \"test case failed: numeric split >= 3\"\nassert divide_on_feature([[1.0,1],[2.5,3],[2.4,0],[3.1,2]],0,2.5) == [[[2.5,3],[3.1,2]],[[1.0,1],[2.4,0]]], \"test case failed: float threshold\"\nassert divide_on_feature([[1,'A'],[2,'B'],[3,'A'],[4,'C']],1,'A') == [[[1,'A'],[3,'A']],[[2,'B'],[4,'C']]], \"test case failed: categorical split\"\nassert divide_on_feature([[5],[6],[7]],0,10) == [[],[[5],[6],[7]]], \"test case failed: threshold greater than all\"\nassert divide_on_feature([[5],[6],[7]],0,0) == [[[5],[6],[7]],[]], \"test case failed: threshold smaller than all\"\nassert divide_on_feature([[1,2,3]],2,3) == [[[1,2,3]],[]], \"test case failed: single sample equal\"\nassert divide_on_feature([[1,2,3]],2,4) == [[],[[1,2,3]]], \"test case failed: single sample not equal\"\nassert divide_on_feature([[1,'yes'],[2,'no'],[3,'yes']],1,'no') == [[[2,'no']],[[1,'yes'],[3,'yes']]], \"test case failed: exactly one match\"\nassert divide_on_feature([[1.2],[3.4],[5.6],[7.8]],0,5.6) == [[[5.6],[7.8]],[[1.2],[3.4]]], \"test case failed: equality on floats\"\nassert divide_on_feature(np.array([[1,'cat'],[2,'dog'],[3,'cat']],dtype=object),1,'cat') == [[[1,'cat'],[3,'cat']],[[2,'dog']]], \"test case failed: ndarray object dtype\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: test 4 failed", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch (see doc-string above).\"\"\"\n    if not 0.0 <= gamma <= 1.0:\n        return -1\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape or Q.ndim != 2:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    if not len(actions) == len(rewards) == len(dones) == batch_size:\n        return -1\n    if any((a < 0 or a >= n_actions for a in actions)):\n        return -1\n    targets = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n    targets = np.round(targets, 4).tolist()\n    return targets\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 454, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function returns (valid_half, fake_half, valid_full), each\n    converted to a plain Python list via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple containing three Python lists with one-hot vectors.\n    \"\"\"\n    half = batch_size // 2\n    valid_half = np.tile([1, 0], (half, 1))\n    fake_half = np.tile([0, 1], (half, 1))\n    valid_full = np.tile([1, 0], (batch_size, 1))\n    return (valid_half.tolist(), fake_half.tolist(), valid_full.tolist())\nassert generate_dcgan_labels(2) == ([[1,0]], [[0,1]], [[1,0],[1,0]]), \"failed on batch_size=2\"\nassert generate_dcgan_labels(4) == ([[1,0],[1,0]], [[0,1],[0,1]], [[1,0],[1,0],[1,0],[1,0]]), \"failed on batch_size=4\"\nassert generate_dcgan_labels(6)[0] == [[1,0],[1,0],[1,0]], \"valid_half incorrect for batch_size=6\"\nassert generate_dcgan_labels(6)[1] == [[0,1],[0,1],[0,1]], \"fake_half incorrect for batch_size=6\"\nassert len(generate_dcgan_labels(8)[2]) == 8, \"valid_full length incorrect for batch_size=8\"\nassert all(label==[1,0] for label in generate_dcgan_labels(10)[2]), \"valid_full content incorrect for batch_size=10\"\nvh, fh, vf = generate_dcgan_labels(12); assert len(vh)==len(fh)==6, \"half batch size wrong for batch_size=12\"\nassert generate_dcgan_labels(14)[0].count([1,0]) == 7, \"valid_half repetition error for batch_size=14\"\nassert generate_dcgan_labels(14)[1].count([0,1]) == 7, \"fake_half repetition error for batch_size=14\""}
{"task_id": 455, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter, namedtuple\n_KDNode = namedtuple('_KDNode', ['point', 'label', 'axis', 'left', 'right'])\ndef _build_kdtree(points, labels, depth=0):\n    \"\"\"Returns root node of a balanced KD-Tree built from the data\"\"\"\n    if len(points) == 0:\n        return None\n    n_features = points.shape[1]\n    axis = depth % n_features\n    median_idx = len(points) // 2\n    idx = np.argpartition(points[:, axis], median_idx)\n    idx_med = idx[median_idx]\n    point = points[idx_med]\n    label = labels[idx_med]\n    left = _build_kdtree(points[idx[:median_idx]], labels[idx[:median_idx]], depth + 1)\n    right = _build_kdtree(points[idx[median_idx + 1:]], labels[idx[median_idx + 1:]], depth + 1)\n    return _KDNode(point, label, axis, left, right)\ndef _kdtree_search(node, query, k, heap):\n    \"\"\"Best-first traversal that keeps the k closest points in *heap*.\n\n    *heap* is a max-heap implemented through a min-heap that stores\n    (-distance, label).  The root of the heap is therefore the farthest\n    neighbour currently kept.\n    \"\"\"\n    if node is None:\n        return\n    dist = float(np.sum((node.point - query) ** 2))\n    if len(heap) < k:\n        heapq.heappush(heap, (-dist, node.label))\n    elif dist < -heap[0][0]:\n        heapq.heapreplace(heap, (-dist, node.label))\n    axis = node.axis\n    diff = query[axis] - node.point[axis]\n    (first, second) = (node.left, node.right) if diff < 0 else (node.right, node.left)\n    _kdtree_search(first, query, k, heap)\n    if len(heap) < k or diff * diff < -heap[0][0]:\n        _kdtree_search(second, query, k, heap)\ndef _vote(labels):\n    \"\"\"Return the majority label; tie is resolved in favour of the\n    numerically smallest label.\"\"\"\n    counts = Counter(labels)\n    max_count = max(counts.values())\n    winners = [lab for (lab, c) in counts.items() if c == max_count]\n    return min(winners)\ndef knn_classifier(X_train, y_train, X_query, k, method='naive'):\n    \"\"\"k-Nearest Neighbours classifier supporting three search strategies.\n\n    Parameters\n    ----------\n    X_train : (n_samples, n_features) array_like\n    y_train : (n_samples,) array_like of int\n    X_query : (n_queries, n_features) array_like\n    k       : int\n    method  : {\"naive\", \"heap\", \"kdtree\"}\n\n    Returns\n    -------\n    list[int] \u2013 predicted labels for the queries\n    \"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_query = np.asarray(X_query, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    (n_train, n_feat) = X_train.shape\n    if k <= 0:\n        raise ValueError('k must be >= 1')\n    k_eff = min(k, n_train)\n    preds = []\n    if method == 'naive':\n        for q in X_query:\n            dists = np.sum((X_train - q) ** 2, axis=1)\n            idx = np.argsort(dists)[:k_eff]\n            preds.append(_vote(y_train[idx]))\n    elif method == 'heap':\n        for q in X_query:\n            heap = []\n            for (xi, yi) in zip(X_train, y_train):\n                d = float(np.sum((xi - q) ** 2))\n                if len(heap) < k_eff:\n                    heapq.heappush(heap, (-d, yi))\n                elif d < -heap[0][0]:\n                    heapq.heapreplace(heap, (-d, yi))\n            preds.append(_vote([lab for (_, lab) in heap]))\n    elif method == 'kdtree':\n        root = _build_kdtree(X_train, y_train)\n        for q in X_query:\n            heap = []\n            _kdtree_search(root, q, k_eff, heap)\n            preds.append(_vote([lab for (_, lab) in heap]))\n    else:\n        raise ValueError(\"Unknown method: choose 'naive', 'heap' or 'kdtree'.\")\n    return preds\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"naive\") == [0,1], \"Failed on basic 2D naive case\"\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"heap\") == [0,1], \"Failed on basic 2D heap case\"\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"kdtree\") == [0,1], \"Failed on basic 2D kdtree case\"\nassert knn_classifier([[1,2],[2,3],[3,3],[8,8],[9,8]],[0,0,0,1,1],[[2,2],[9,9]],1,\"naive\") == [0,1], \"Failed with k=1 naive\"\nassert knn_classifier([[1,2],[2,3],[3,3],[8,8],[9,8]],[0,0,0,1,1],[[2,2],[9,9]],1,\"kdtree\") == [0,1], \"Failed with k=1 kdtree\"\nassert knn_classifier([[0,0],[10,10]],[0,1],[[5,5]],2) == [0], \"Tie with equal votes\"\nassert knn_classifier([[0],[1],[2],[3],[4]],[0,0,1,1,1],[[1.8]],3,\"kdtree\") == [1], \"1D kdtree case\"\nassert knn_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0,0]],4) == [0], \"k equals n\""}
{"task_id": 456, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the unbiased sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        (n_samples \u00d7 n_features) data matrix.\n    Y : np.ndarray | None, optional\n        (n_samples \u00d7 m_features) data matrix. If None, the covariance\n        of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Covariance matrix rounded to 4 decimals, or -1 for invalid input.\n    \"\"\"\n    X = np.asarray(X)\n    n_samples = X.shape[0]\n    if n_samples < 2:\n        return -1\n    if Y is None:\n        Y = X\n    else:\n        Y = np.asarray(Y)\n        if Y.shape[0] != n_samples:\n            return -1\n    Xc = X - X.mean(axis=0, keepdims=True)\n    Yc = Y - Y.mean(axis=0, keepdims=True)\n    cov = Xc.T @ Yc / (n_samples - 1)\n    return np.round(cov, 4).tolist()\nassert calculate_covariance_matrix(np.array([[1, 2], [3, 4], [5, 6]])) == [[4.0, 4.0], [4.0, 4.0]], \"failed on example 1\"\nassert calculate_covariance_matrix(np.array([[1,2,3],[4,5,6],[7,8,9]])) == [[9.0,9.0,9.0],[9.0,9.0,9.0],[9.0,9.0,9.0]], \"failed on 3\u00d73 all-equal differences\"\nassert calculate_covariance_matrix(np.array([[2,0],[0,2],[2,2],[0,0]])) == [[1.3333,0.0],[0.0,1.3333]], \"failed on zero cross-covariance\"\nassert calculate_covariance_matrix(np.array([[1,2],[3,4]]), np.array([[5,6],[7,8]])) == [[2.0,2.0],[2.0,2.0]], \"failed on X\u2260Y cross-covariance\"\nassert calculate_covariance_matrix(np.array([[1,2],[3,4],[5,6]]), np.array([[1,2]])) == -1, \"failed on mismatched sample sizes\"\nassert calculate_covariance_matrix(np.array([[1,2]])) == -1, \"failed on too few samples\"\nassert calculate_covariance_matrix(np.array([[0,1],[1,0],[2,2]])) == [[1.0,0.5],[0.5,1.0]], \"failed on asymmetrical covariances\"\nassert calculate_covariance_matrix(np.array([[1],[2],[3],[4]])) == [[1.6667]], \"failed on single-feature dataset\"\nassert calculate_covariance_matrix(np.array([[2],[2],[2]])) == [[0.0]], \"failed on zero variance data\"\nassert calculate_covariance_matrix(np.array([[0,0,0],[1,1,1],[2,2,2],[3,3,3],[4,4,4]])) == [[2.5,2.5,2.5],[2.5,2.5,2.5],[2.5,2.5,2.5]], \"failed on linear trend data\""}
{"task_id": 457, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    Parameters\n    ----------\n    weights : list | tuple | np.ndarray\n        1-D collection of numerical weights.\n    alpha : float\n        Mixing parameter. Must satisfy 0 \u2264 alpha \u2264 1.  If outside this\n        range the function returns -1.\n\n    Returns\n    -------\n    float | int\n        Elastic-Net penalty rounded to 4 decimals, or -1 if *alpha* is\n        outside the valid interval.\n    \"\"\"\n    if not 0.0 <= alpha <= 1.0:\n        return -1\n    w = np.asarray(weights, dtype=float)\n    l2_term = 0.5 * alpha * np.sum(w ** 2)\n    l1_term = (1.0 - alpha) * np.sum(np.abs(w))\n    penalty = l2_term + l1_term\n    return float(round(penalty, 4))\nassert elastic_net_penalty([1.5, -2.0, 0.5], 0.6) == 3.55, \"failed: example case\"\nassert elastic_net_penalty([1, -1, 2], 1.0) == 3.0, \"failed: pure L2 case\"\nassert elastic_net_penalty([1, -1, 2], 0.0) == 4.0, \"failed: pure L1 case\"\nassert elastic_net_penalty([0, 0, 0], 0.4) == 0.0, \"failed: zero weights\"\nassert elastic_net_penalty([10], 0.5) == 30.0, \"failed: single weight\"\nassert elastic_net_penalty([1, 2, 3], -0.2) == -1, \"failed: alpha < 0 handling\"\nassert elastic_net_penalty([1, 2, 3], 1.2) == -1, \"failed: alpha > 1 handling\"\nassert elastic_net_penalty(np.array([-3.5, 2.0]), 0.75) == 7.4688, \"failed: numpy array input\"\nassert elastic_net_penalty((0.1234, -0.9876), 0.33) == 0.9078, \"failed: tuple input\"\nassert elastic_net_penalty([2, -3, 4, -5], 0.25) == 17.25, \"failed: larger vector\""}
{"task_id": 458, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes.  If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists (shape: (len(labels), num_classes)) containing\n        0/1 integers, or -1 when:\n            \u2022 any label is negative, or\n            \u2022 `num_classes` is provided but smaller than `max(labels)+1`.\n    \"\"\"\n    try:\n        labels_list = list(labels)\n    except TypeError:\n        return -1\n    if not labels_list:\n        inferred_classes = 0 if num_classes is None else num_classes\n        return [] if inferred_classes >= 0 else -1\n    max_label = -1\n    for lbl in labels_list:\n        if not isinstance(lbl, (int, np.integer)) or lbl < 0:\n            return -1\n        if lbl > max_label:\n            max_label = int(lbl)\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    one_hot: list[list[int]] = [[1 if class_idx == lbl else 0 for class_idx in range(num_classes)] for lbl in labels_list]\n    return one_hot\nassert to_categorical([0, 2, 1, 3], 4) == [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]], \"test case failed: to_categorical([0, 2, 1, 3], 4)\"\nassert to_categorical(np.array([1,1,1]), None) == [[0,1],[0,1],[0,1]], \"test case failed: to_categorical(np.array([1,1,1]), None)\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical([3,2,4], 5) == [[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,1]], \"test case failed: to_categorical([3,2,4], 5)\"\nassert to_categorical([], 0) == [], \"test case failed: to_categorical([], 0)\"\nassert to_categorical([0], None) == [[1]], \"test case failed: to_categorical([0], None)\"\nassert to_categorical([9,8,7,6,5], None) == [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0]], \"test case failed: labels 9..5\"\nassert to_categorical([1,0,1,0], 2) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: alternating labels\"\nassert to_categorical([0,0,0], 1) == [[1],[1],[1]], \"test case failed: single class\"\nassert to_categorical([2,1], 2) == -1, \"test case failed: num_classes too small\""}
{"task_id": 459, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport heapq\nimport numpy as np\nimport heapq\ndef knn_validate_heap(X_train: 'np.ndarray', Y_train: 'np.ndarray', X_val: 'np.ndarray', Y_val: 'np.ndarray', k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\"\"\"\n    predicted = []\n    Y_train = np.asarray(Y_train, dtype=int)\n    Y_val = np.asarray(Y_val, dtype=int)\n    for x in X_val:\n        diff = X_train - x\n        dists = np.einsum('ij,ij->i', diff, diff)\n        heap: list[tuple[float, int]] = []\n        for (idx, dist) in enumerate(dists):\n            nd = -dist\n            if len(heap) < k:\n                heapq.heappush(heap, (nd, idx))\n            elif nd > heap[0][0]:\n                heapq.heapreplace(heap, (nd, idx))\n        neighbour_indices = [idx for (_, idx) in heap]\n        votes = Y_train[neighbour_indices]\n        pred_label = int(np.bincount(votes).argmax())\n        predicted.append(pred_label)\n    accuracy = round((np.array(predicted) == Y_val).mean(), 4)\n    return (accuracy, predicted)\nassert knn_validate_heap(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 1]), np.array([[0, 0], [2, 2]]), np.array([0, 1]), 1) == (1.0, [0, 1]), \"test case 1 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1]), np.array([[0.1, 0.1]]), np.array([0]), 3) == (1.0, [0]), \"test case 2 failed\"\nassert knn_validate_heap(np.array([[0, 0], [5, 5], [0, 5]]), np.array([0, 1, 2]), np.array([[0, 4]]), np.array([2]), 1) == (1.0, [2]), \"test case 3 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1]), np.array([[0.5, 0.5]]), np.array([0]), 4) == (1.0, [0]), \"test case 4 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1]]), np.array([0, 0]), np.array([[1, 1]]), np.array([1]), 1) == (0.0, [0]), \"test case 5 failed\"\nassert knn_validate_heap(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1]]), np.array([1]), 3) == (1.0, [1]), \"test case 6 failed\"\nassert knn_validate_heap(np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]]), np.array([0, 1, 1]), np.array([[1, 2, 3.1]]), np.array([0]), 2) == (1.0, [0]), \"test case 7 failed\"\nassert knn_validate_heap(np.array([[0, 0], [1, 1], [2, 2], [3, 3]]), np.array([0, 0, 1, 1]), np.array([[0, 0.1], [3, 2.9], [1.5, 1.5]]), np.array([0, 1, 1]), 2) == (0.6667, [0, 1, 0]), \"test case 8 failed\"\nassert knn_validate_heap(np.array([[0], [1]]), np.array([0, 1]), np.array([[0], [1]]), np.array([0, 1]), 1) == (1.0, [0, 1]), \"test case 9 failed\"\nassert knn_validate_heap(np.array([[i, i] for i in range(10)]), np.array([0 if i < 5 else 1 for i in range(10)]), np.array([[2.1, 2.1], [7.9, 7.9]]), np.array([0, 1]), 3) == (1.0, [0, 1]), \"test case 10 failed\""}
{"task_id": 460, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    If *Y* is omitted the auto-correlation \u03c1(X,X) is returned.\n    If any column of *X* or *Y* has a population standard deviation of zero\n    the correlation is undefined and the function returns -1.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        (n_samples, n_features_X) data matrix.\n    Y : np.ndarray | None, optional\n        (n_samples, n_features_Y) data matrix; must have the same number of\n        rows as *X* when supplied.\n\n    Returns\n    -------\n    list | int\n        Correlation matrix (Python list of lists, rounded to 4 decimals)\n        or -1 if the computation is impossible.\n    \"\"\"\n    if X.ndim != 2:\n        raise ValueError('X must be two-dimensional')\n    n_samples = X.shape[0]\n    if Y is None:\n        Y = X\n    else:\n        if Y.ndim != 2:\n            raise ValueError('Y must be two-dimensional')\n        if Y.shape[0] != n_samples:\n            raise ValueError('X and Y must have the same number of rows')\n    Xc = X - np.mean(X, axis=0, keepdims=True)\n    Yc = Y - np.mean(Y, axis=0, keepdims=True)\n    std_X = np.sqrt(np.mean(Xc ** 2, axis=0))\n    std_Y = np.sqrt(np.mean(Yc ** 2, axis=0))\n    if np.any(std_X == 0) or np.any(std_Y == 0):\n        return -1\n    cov = Xc.T @ Yc / n_samples\n    corr = cov / (std_X[:, None] * std_Y[None, :])\n    corr_rounded = np.round(corr, 4).tolist()\n    return corr_rounded\nassert calculate_correlation_matrix(np.array([[1,2],[3,4],[5,6]])) == [[1.0, 1.0], [1.0, 1.0]], \"failed: identical linear columns should give 1 everywhere\"\nassert calculate_correlation_matrix(np.array([[1,2],[2,1],[3,0]])) == [[1.0, -1.0], [-1.0, 1.0]], \"failed: perfect negative correlation expected\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[4,5,6]]), np.array([[1,1],[2,2]])) == [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], \"failed: X columns perfectly correlate with Y columns\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[1,2,3],[1,2,3]])) == -1, \"failed: zero variance columns should return -1\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[2,4,6],[3,6,9],[4,8,12]])) == [[1.0,1.0,1.0],[1.0,1.0,1.0],[1.0,1.0,1.0]], \"failed: perfectly collinear columns expected\"\nassert calculate_correlation_matrix(np.array([[1,0],[2,0],[3,0]])) == -1, \"failed: second column zero variance\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[4,5,6]]), np.array([[1,1],[2,2]])) == [[1.0,1.0],[1.0,1.0],[1.0,1.0]], \"failed: repeated test with explicit Y\"\nassert calculate_correlation_matrix(np.array([[1,0],[0,1],[1,0],[0,1]])) == [[1.0,-1.0],[-1.0,1.0]], \"failed: alternating pattern should give -1 off diagonal\"\nassert calculate_correlation_matrix(np.array([[1,2],[1,3],[1,4],[1,5]])) == -1, \"failed: first column constant\"\nassert calculate_correlation_matrix(np.array([[1,2],[2,3],[3,4]]), np.array([[5,5],[5,5],[5,5]])) == -1, \"failed: Y has zero variance\""}
{"task_id": 461, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    if n_estimators <= 0:\n        return np.round(np.full_like(y_arr, y_arr.mean()), 4).tolist()\n    y_pred = np.full_like(y_arr, y_arr.mean(), dtype=float)\n    uniq_x = np.unique(x_arr)\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        if np.allclose(residuals, 0.0):\n            break\n        best_sse = np.inf\n        best_t = None\n        best_left_mean = best_right_mean = 0.0\n        thresholds = uniq_x[:-1]\n        for t in thresholds:\n            left_mask = x_arr <= t\n            right_mask = ~left_mask\n            if not left_mask.any() or not right_mask.any():\n                continue\n            r_left = residuals[left_mask]\n            r_right = residuals[right_mask]\n            (m_left, m_right) = (r_left.mean(), r_right.mean())\n            sse = np.sum((r_left - m_left) ** 2) + np.sum((r_right - m_right) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                (best_left_mean, best_right_mean) = (m_left, m_right)\n        if best_t is None:\n            stump_pred = np.full_like(residuals, residuals.mean())\n        else:\n            stump_pred = np.where(x_arr <= best_t, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()\nassert gradient_boosting_regressor([1, 2], [1, 2], 1, 1.0) == [1.0, 2.0], \"failed case: ([1,2],[1,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2], [1, 3], 1, 1.0) == [1.0, 3.0], \"failed case: ([1,2],[1,3],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3], [2, 2, 2], 1, 1.0) == [2.0, 2.0, 2.0], \"failed case: ([1,2,3],[2,2,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [4, 3, 2, 1], 1, 1.0) == [3.5, 3.5, 1.5, 1.5], \"failed case: descending targets\"\nassert gradient_boosting_regressor([1, 2], [2, 4], 2, 0.5) == [2.25, 3.75], \"failed case: two iterations, shrinkage 0.5\"\nassert gradient_boosting_regressor([1, 2], [1, 2], 0, 0.5) == [1.5, 1.5], \"failed case: n_estimators == 0\"\nassert gradient_boosting_regressor([1, 1, 2, 2], [1, 1, 3, 3], 1, 1.0) == [1.0, 1.0, 3.0, 3.0], \"failed case: repeated feature values\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [2, 2, 2, 10], 2, 1.0) == [2.0, 2.0, 2.0, 10.0], \"failed case: perfect fit in first round\"\nassert gradient_boosting_regressor([1, 2, 3], [1, 2, 4], 1, 0.5) == [1.9167, 1.9167, 3.1667], \"failed case: fractional shrinkage\"\nassert gradient_boosting_regressor([1, 2, 3, 4, 5], [3, 3, 3, 3, 3], 3, 0.3) == [3.0, 3.0, 3.0, 3.0, 3.0], \"failed case: constant targets\""}
{"task_id": 462, "completion_id": 0, "passed": false, "result": "failed: failed on random 5\u00d77, D=5", "solution": "import numpy as np\nimport numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  \n           A value of 0 or 1 returns the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    if D < 0:\n        raise ValueError('D has to be a non-negative integer.')\n    if mfccs.ndim != 2:\n        raise ValueError('mfccs must be a 2-D array of shape (G, C).')\n    if D <= 1:\n        return mfccs.copy()\n    (G, C) = mfccs.shape\n    n = np.arange(C, dtype=mfccs.dtype)\n    lifter = 1.0 + D / 2.0 * np.sin(np.pi * n / D)\n    lifter = lifter.astype(mfccs.dtype, copy=False)\n    return mfccs * lifter\nassert np.array_equal(cepstral_lifter(np.array([[1,2,3],[4,5,6]]),0), np.array([[1,2,3],[4,5,6]])), \"failed on D=0 (no liftering)\"\nassert np.array_equal(cepstral_lifter(np.array([[1,2,3],[4,5,6]]),1), np.array([[1,2,3],[4,5,6]])), \"failed on D=1 (sinusoid zero)\"\nassert np.array_equal(cepstral_lifter(np.array([[0,0,0]]),4), np.zeros((1,3))), \"failed on all-zeros input\"\nrng = np.random.default_rng(42)\nA = rng.integers(0, 10, size=(5, 7))\nD = 5\nassert np.array_equal(cepstral_lifter(A, D), A * (1 + (D/2)*np.sin(np.pi*np.arange(7)/D))), \"failed on random 5\u00d77, D=5\"\nassert cepstral_lifter(np.array([[1]]),2)[0,0] == 1, \"failed on single coefficient\"\nB = np.array([[3,5,7],[1,1,1]], dtype=float)\nassert cepstral_lifter(B,4).dtype == B.dtype, \"dtype changed\"\nC = np.array([[1,2],[3,4]], dtype=float)\nassert np.allclose(cepstral_lifter(C,8), C * (1 + 4*np.sin(np.pi*np.arange(2)/8))), \"failed on small float matrix, D=8\"\nDmat = np.array([[1,2,3,4,5]])\nassert np.array_equal(cepstral_lifter(Dmat,6).shape, Dmat.shape), \"shape mismatch\""}
{"task_id": 463, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nfrom typing import List\ndef compute_ball_radius(centroid: List[float], X: List[List[float]]) -> float:\n    \"\"\"Return the Ball-tree node radius, i.e. the largest Euclidean distance\n    between *centroid* and any point in *X*, rounded to 4 decimals.\n\n    Parameters\n    ----------\n    centroid : List[float]\n        The node\u2019s centroid (a single point).\n    X : List[List[float]]\n        Points belonging to the node.\n\n    Returns\n    -------\n    float\n        The radius rounded to 4 decimal places. 0.0 if *X* is empty.\n    \"\"\"\n    if not X:\n        return 0.0\n    max_sq_dist = 0.0\n    for point in X:\n        sq_dist = sum(((c - p) ** 2 for (c, p) in zip(centroid, point)))\n        if sq_dist > max_sq_dist:\n            max_sq_dist = sq_dist\n    radius = math.sqrt(max_sq_dist)\n    return round(radius, 4)\nassert compute_ball_radius([0, 0], [[1, 0], [0, 2]]) == 2.0, \"failed on simple 2-D example\"\nassert compute_ball_radius([1, 1], [[1, 1]]) == 0.0, \"failed on zero radius case\"\nassert compute_ball_radius([0.0], [[-3.0], [3.0]]) == 3.0, \"failed on 1-D symmetric points\"\nassert compute_ball_radius([0, 0, 0], [[1, 1, 1], [-2, -2, -2]]) == 3.4641, \"failed on 3-D mixed points\"\nassert compute_ball_radius([2], []) == 0.0, \"failed on empty data set\"\nassert compute_ball_radius([0, 0], [[-5, -12]]) == 13.0, \"failed on single far point\"\nassert compute_ball_radius([2, -1], [[2, -1], [3, -1], [2, -3]]) == 2.0, \"failed on mixed distances\"\nassert compute_ball_radius([1, 2, 3, 4], [[1, 2, 3, 4], [5, 6, 7, 8]]) == 8.0, \"failed on 4-D example\"\nassert compute_ball_radius([0], [[0.0001], [-0.0001]]) == 0.0001, \"failed on small distances\"\nassert compute_ball_radius([10, 10], [[10, 10], [13, 14], [7, 6]]) == 5.0, \"failed on mixed near/far points\""}
{"task_id": 464, "completion_id": 0, "passed": false, "result": "failed: kth(=1) out of bounds (1)", "solution": "import numpy as np\nimport numpy as np\ndef knn_validate(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_val = np.asarray(X_val, dtype=float)\n    Y_train = np.asarray(Y_train, dtype=int)\n    Y_val = np.asarray(Y_val, dtype=int)\n    n_val = X_val.shape[0]\n    predictions = []\n    diff = X_val[:, None, :] - X_train[None, :, :]\n    dists = np.sum(diff ** 2, axis=2)\n    for i in range(n_val):\n        nn_idx = np.argpartition(dists[i], k)[:k]\n        nn_labels = Y_train[nn_idx]\n        label_counts = np.bincount(nn_labels)\n        pred_label = int(np.argmax(label_counts))\n        predictions.append(pred_label)\n    correct = np.sum(np.array(predictions) == Y_val)\n    accuracy = round(correct / n_val if n_val else 0.0, 4)\n    return (accuracy, predictions)\nassert knn_validate(np.array([[0,0],[1,1],[0,1],[1,0]]), np.array([0,0,1,1]), np.array([[0.9,0.9],[0.2,0.8]]), np.array([1,0]), 3) == (1.0, [1, 0]), \"test case 1 failed\"\nassert knn_validate(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), np.array([0,1]), 1) == (1.0, [0, 1]), \"test case 2 failed\"\nassert knn_validate(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2]]), np.array([0]), 2) == (1.0, [0]), \"test case 3 failed\"\nassert knn_validate(np.array([[0,0,0],[1,1,1],[2,2,2]]), np.array([0,1,1]), np.array([[1,1,0]]), np.array([0]), 2) == (1.0, [0]), \"test case 4 failed\"\nassert knn_validate(np.array([[0],[2],[4],[6]]), np.array([0,1,1,2]), np.array([[3]]), np.array([1]), 3) == (1.0, [1]), \"test case 5 failed\"\nassert knn_validate(np.array([[0,0]]), np.array([1]), np.array([[1,1]]), np.array([1]), 1) == (1.0, [1]), \"test case 6 failed\"\nassert knn_validate(np.array([[0],[1],[2]]), np.array([1,1,0]), np.array([[1.5]]), np.array([1]), 3) == (1.0, [1]), \"test case 7 failed\"\nassert knn_validate(np.array([[0],[1]]), np.array([0,1]), np.array([[0.3]]), np.array([0]), 2) == (1.0, [0]), \"test case 8 failed\"\nassert knn_validate(np.array([[0],[5]]), np.array([0,1]), np.array([[0],[5]]), np.array([0,1]), 1) == (1.0, [0, 1]), \"test case 9 failed\"\nassert knn_validate(np.array([[0,0],[1,1]]), np.array([0,0]), np.array([[1,0],[0,1]]), np.array([1,1]), 1) == (0.0, [0, 0]), \"test case 10 failed\""}
{"task_id": 465, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n    if gamma < 0:\n        raise ValueError('gamma must be non-negative')\n\n    def f(x1, x2):\n        \"\"\"Gaussian RBF similarity between two 1-D vectors.\"\"\"\n        a = np.asarray(x1, dtype=float).ravel()\n        b = np.asarray(x2, dtype=float).ravel()\n        if a.shape != b.shape:\n            raise ValueError('Input vectors must have the same length')\n        if gamma == 0:\n            return 1.0\n        diff = a - b\n        dist_sq = np.dot(diff, diff)\n        sim = np.exp(-gamma * dist_sq)\n        return round(float(sim), 4)\n    return f\nassert rbf_kernel(0.5)(np.array([1, 2]), np.array([2, 4])) == 0.0821, \"failed on gamma=0.5, vectors [1,2] [2,4]\"\nassert rbf_kernel(0.2)(np.array([3, 4]), np.array([0, 0])) == 0.0067, \"failed on gamma=0.2, vectors [3,4] [0,0]\"\nassert rbf_kernel(0)(np.array([1, 1]), np.array([2, 2])) == 1.0, \"failed on gamma=0, arbitrary vectors\"\nassert rbf_kernel(1)(np.array([1, 1, 1]), np.array([1, 1, 1])) == 1.0, \"failed on identical vectors, gamma=1\"\nassert rbf_kernel(1)(np.array([1, 0]), np.array([0, 1])) == 0.1353, \"failed on gamma=1, vectors [1,0] [0,1]\"\nassert rbf_kernel(5)(np.array([1, 0]), np.array([1, 0])) == 1.0, \"failed on identical vectors, gamma=5\"\nassert rbf_kernel(5)(np.array([1, 0]), np.array([0, 0])) == 0.0067, \"failed on gamma=5, vectors [1,0] [0,0]\"\nassert rbf_kernel(0.5)(np.array([2, -1]), np.array([-2, 2])) == 0.0, \"failed on gamma=0.5, distant vectors\"\nassert rbf_kernel(0.1)(np.array([-1, -1]), np.array([1, 1])) == 0.4493, \"failed on gamma=0.1, vectors [-1,-1] [1,1]\"\nassert rbf_kernel(2)(np.array([3]), np.array([4])) == 0.1353, \"failed on gamma=2, scalar vectors\""}
{"task_id": 466, "completion_id": 0, "passed": false, "result": "failed: name '_PUNC_TABLE' is not defined", "solution": "import string\nimport string\nimport string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    return line.translate(_PUNC_TABLE).strip()\nassert strip_punctuation(\"Hello, World!!!\") == \"Hello World\", \"failed: strip_punctuation('Hello, World!!!')\"\nassert strip_punctuation(\"  ...Python?? \") == \"Python\", \"failed: strip_punctuation('  ...Python?? ')\"\nassert strip_punctuation(\"No-punctuation\") == \"Nopunctuation\", \"failed: strip_punctuation('No-punctuation')\"\nassert strip_punctuation(\"Numbers 1234 remain 1234.\") == \"Numbers 1234 remain 1234\", \"failed: strip_punctuation('Numbers 1234 remain 1234.')\"\nassert strip_punctuation(\"!!!\") == \"\", \"failed: strip_punctuation('!!!')\"\nassert strip_punctuation(\"\") == \"\", \"failed: strip_punctuation('')\"\nassert strip_punctuation(\"email@example.com\") == \"emailexamplecom\", \"failed: strip_punctuation('email@example.com')\"\nassert strip_punctuation(\"   spaced   \") == \"spaced\", \"failed: strip_punctuation('   spaced   ')\"\nassert strip_punctuation(\"[brackets]{curly}(parentheses)\") == \"bracketscurlyparentheses\", \"failed: strip_punctuation('[brackets]{curly}(parentheses)')\""}
{"task_id": 467, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]] | int:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient) \u2014 every value rounded to 4 decimals.\n        If *norm* is unsupported, returns -1.\n    \"\"\"\n    if norm not in {'l1', 'l2'}:\n        return -1\n    w = np.asarray(weights, dtype=float)\n    if norm == 'l1':\n        penalty = C * np.sum(np.abs(w))\n        grad = C * np.sign(w)\n    else:\n        penalty = 0.5 * C * np.sum(w ** 2)\n        grad = C * w\n    penalty = round(float(penalty), 4)\n    grad = [round(float(g), 4) for g in grad]\n    return (penalty, grad)\nassert regularization([1.0, -2.0, 3.0], 0.1, 'l2') == (0.7, [0.1, -0.2, 0.3]), \"test case failed: regularization([1.0, -2.0, 3.0], 0.1, 'l2')\"\nassert regularization([1.0, -2.0, 3.0], 0.1, 'l1') == (0.6, [0.1, -0.1, 0.1]), \"test case failed: regularization([1.0, -2.0, 3.0], 0.1, 'l1')\"\nassert regularization([0, 0, 0], 1.0, 'l2') == (0.0, [0.0, 0.0, 0.0]), \"test case failed: zero weights l2\"\nassert regularization([0, 0, 0], 0.5, 'l1') == (0.0, [0.0, 0.0, 0.0]), \"test case failed: zero weights l1\"\nassert regularization([-5], 0.2, 'l2') == (2.5, [-1.0]), \"test case failed: single weight l2\"\nassert regularization([-5], 0.2, 'l1') == (1.0, [-0.2]), \"test case failed: single weight l1\"\nassert regularization([1,2,3], 0.1, 'elastic') == -1, \"test case failed: unsupported norm\""}
{"task_id": 468, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, num_iters: int=10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    if y_train.ndim == 1:\n        y = y_train.reshape(-1, 1)\n    else:\n        y = y_train.copy()\n    (m, n) = X_train.shape\n    Xb_train = np.hstack((np.ones((m, 1)), X_train))\n    Xb_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    W = np.zeros((n + 1, 1))\n\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    for _ in range(num_iters):\n        z = Xb_train @ W\n        h = sigmoid(z)\n        dW = Xb_train.T @ (h - y) / m\n        W -= learning_rate * dW\n    probs = sigmoid(Xb_test @ W)\n    preds = (probs >= 0.5).astype(int)\n    return preds.ravel().tolist()\nassert logistic_regression_predict(np.array([[-2.0], [-1.0], [1.0], [2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.5], [1.5]])) == [0, 1], \"test case 1 failed: basic 1-D symmetrical dataset\"\nassert logistic_regression_predict(np.array([[-3.0], [-2.0], [2.0], [3.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.5], [2.5]])) == [0, 1], \"test case 2 failed: shifted 1-D dataset\"\nassert logistic_regression_predict(np.array([[-1.5], [-0.5], [1.0], [2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-1.0], [1.5]])) == [0, 1], \"test case 3 failed: uneven distances\"\nassert logistic_regression_predict(np.array([[-4.0], [-1.0], [1.0], [4.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.0], [3.0]])) == [0, 1], \"test case 4 failed: wider margin\"\nassert logistic_regression_predict(np.array([[-2.0], [-1.0], [1.0], [2.0]]), np.array([0, 0, 1, 1]), np.array([[-0.75], [1.25]])) == [0, 1], \"test case 5 failed: 1-D y given as 1-D array\"\nassert logistic_regression_predict(np.array([[-2.0, -2.0], [-1.0, -1.0], [1.0, 1.0], [2.0, 2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.5, -0.5], [1.5, 1.5]])) == [0, 1], \"test case 6 failed: 2-D symmetrical dataset\"\nassert logistic_regression_predict(np.array([[-3.0, -2.0], [-2.0, -1.5], [2.0, 1.5], [3.0, 2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.5, -2.0], [2.5, 2.0]])) == [0, 1], \"test case 7 failed: slanted 2-D dataset\"\nassert logistic_regression_predict(np.array([[-5.0], [-4.0], [4.0], [5.0]]), np.array([[0], [0], [1], [1]]), np.array([[-4.5], [4.5]])) == [0, 1], \"test case 8 failed: distant points\"\nassert logistic_regression_predict(np.array([[-1.0], [-0.8], [0.8], [1.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.9], [0.9]])) == [0, 1], \"test case 9 failed: close points\"\nassert logistic_regression_predict(np.array([[-6.0, -3.0], [-4.0, -2.0], [4.0, 2.0], [6.0, 3.0]]), np.array([[0], [0], [1], [1]]), np.array([[-5.0, -2.5], [5.0, 2.5]])) == [0, 1], \"test case 10 failed: large-scale 2-D dataset\""}
{"task_id": 469, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef linear_kernel(**kwargs) -> callable:\n    \"\"\"Factory returning a linear-kernel (dot-product) callable.\n\n    Any supplied keyword arguments are ignored so that the signature stays\n    compatible with more elaborate kernel factories.\n    \"\"\"\n\n    def f(x1, x2):\n        \"\"\"\n        Parameters\n        ----------\n        x1, x2 : 1-D list-like or np.ndarray\n            Input feature vectors.\n\n        Returns\n        -------\n        float\n            Dot product of the two vectors, or \u20111 if their lengths differ.\n        \"\"\"\n        x1_arr = np.asarray(x1, dtype=float).ravel()\n        x2_arr = np.asarray(x2, dtype=float).ravel()\n        if x1_arr.size != x2_arr.size:\n            return -1\n        return float(np.inner(x1_arr, x2_arr))\n    return f\nk = linear_kernel(); assert k([1, 2, 3], [4, 5, 6]) == 32.0, \"test case failed: k([1,2,3],[4,5,6])\"\nk = linear_kernel(); assert k([-1, 2], [3, -4]) == -11.0, \"test case failed: k([-1,2],[3,-4])\"\nk = linear_kernel(); assert k([0, 0], [0, 0]) == 0.0, \"test case failed: k([0,0],[0,0])\"\nk = linear_kernel(); assert k([1.5, 2.5], [3.0, -1.0]) == 2.0, \"test case failed: k([1.5,2.5],[3.0,-1.0])\"\nk = linear_kernel(); assert k([1, 2, 3], [1, 2]) == -1, \"test case failed: k([1,2,3],[1,2])\"\nk = linear_kernel(); assert k(np.array([1, 2, 3]), np.array([4, 5, 6])) == 32.0, \"test case failed: arrays input\"\nk = linear_kernel(); assert k(list(range(5)), list(range(5))) == 30.0, \"test case failed: k(range5,range5)\"\nx = np.arange(100); k = linear_kernel(); assert k(x, x) == float(np.dot(x, x)), \"test case failed: large vector\"\nk = linear_kernel(); assert k([1, -1, 1, -1], [-1, 1, -1, 1]) == -4.0, \"test case failed: alternating signs\"\nk = linear_kernel(); assert k([3], [4]) == 12.0, \"test case failed: single element vectors\""}
{"task_id": 470, "completion_id": 0, "passed": true, "result": "passed", "solution": "import os\nimport os\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                   relative and may contain symlinks or redundant path\n                   elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    canonical_path = os.path.realpath(file_path)\n    directory = os.path.dirname(canonical_path)\n    directory = os.path.normpath(directory)\n    return directory\nassert get_scriptdir(\"/home/alice/project/script.py\") == \"/home/alice/project\", \"failed on /home/alice/project/script.py\"\nassert get_scriptdir(\"/home/alice/project/src/../script.py\") == \"/home/alice/project\", \"failed on path with .. segments\"\nassert get_scriptdir(\"/tmp/script\") == \"/tmp\", \"failed on /tmp/script\"\nassert get_scriptdir(\"/script.py\") == \"/\", \"failed on root-level file\"\nassert get_scriptdir(\"/a/./b/./c/d.txt\") == \"/a/b/c\", \"failed on path with . segments\"\nassert get_scriptdir(\"/etc//passwd\") == \"/etc\", \"failed on path with repeated separator\"\nassert get_scriptdir(\"/var/log/../log/nginx/access.log\") == \"/var/log/nginx\", \"failed on /var/log/../log/nginx/access.log\"\nassert get_scriptdir(\"/opt/\") == \"/\", \"failed on directory path ending with separator\"\nassert get_scriptdir(\"/single\") == \"/\", \"failed on single component under root\"\nassert get_scriptdir(\"/home/user/docs/../../photos/./pic.jpg\") == \"/home/photos\", \"failed on complex mixed path\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: test5 failed", "solution": "import numpy as np\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One-step tabular Expected-SARSA TD(0) update.\"\"\"\n    n_actions = len(q_table[0])\n    if next_state is None:\n        expected_q = 0.0\n    else:\n        next_row = q_table[next_state]\n        greedy_idx = max(range(n_actions), key=next_row.__getitem__)\n        base_prob = epsilon / n_actions\n        expected_q = 0.0\n        for a in range(n_actions):\n            prob = base_prob\n            if a == greedy_idx:\n                prob += 1.0 - epsilon\n            expected_q += prob * next_row[a]\n    target = reward + gamma * expected_q\n    q_table[state][action] += lr * (target - q_table[state][action])\n    rounded_q = [[round(v, 4) for v in row] for row in q_table]\n    return rounded_q\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
{"task_id": 472, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        (probabilities, gradient) \u2013 both with the same shape as *x*,\n        rounded to 4 decimal places.\n    \"\"\"\n    arr = np.asarray(x, dtype=float)\n    shifted = arr - arr.max(axis=-1, keepdims=True)\n    exp_vals = np.exp(shifted)\n    probs = exp_vals / exp_vals.sum(axis=-1, keepdims=True)\n    grad = probs * (1.0 - probs)\n    probs_out = np.round(probs, 4).tolist()\n    grad_out = np.round(grad, 4).tolist()\n    return (probs_out, grad_out)\nassert softmax([1000, 1001]) == ([0.2689, 0.7311], [0.1966, 0.1966]), \"failed on large positives\"\nassert softmax([[0, 0], [0, 0]]) == ([[0.5, 0.5], [0.5, 0.5]], [[0.25, 0.25], [0.25, 0.25]]), \"failed on zeros matrix\"\nassert softmax([[0], [1], [2]]) == ([[1.0], [1.0], [1.0]], [[0.0], [0.0], [0.0]]), \"failed on column vector\"\nassert softmax([0, 0, 0, 0]) == ([0.25, 0.25, 0.25, 0.25], [0.1875, 0.1875, 0.1875, 0.1875]), \"failed on uniform vector\"\nassert softmax([[2, 2, 2], [2, 2, 2]]) == ([[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], [[0.2222, 0.2222, 0.2222], [0.2222, 0.2222, 0.2222]]), \"failed on identical rows\"\nassert softmax([10, -10]) == ([1.0, 0.0], [0.0, 0.0]), \"failed on extreme gap\"\nassert softmax([[5]]) == ([[1.0]], [[0.0]]), \"failed on single element 2-D\""}
{"task_id": 474, "completion_id": 0, "passed": false, "result": "failed: test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set consisting of `m` rectangular clusters.\n\n    Each class i (0-based index) is located at\n        x \u2208 [(\u230ai/2\u230b+0.1)\u00b710 , (\u230ai/2\u230b+0.9)\u00b710]\n        y \u2208 [((i mod 2)*interval+0.1)\u00b710 , ((i mod 2)*interval+0.9)\u00b710]\n    and is assigned the label  (i \u2212 0.5)\u00b72  (\u2192 \u22121, +1, 3, 5, \u2026).\n\n    All returned coordinates are rounded to 4 decimals.\n    \"\"\"\n    if m < 2:\n        raise ValueError('`m` (number of classes) must be at least 2.')\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    (X_train_parts, X_val_parts) = ([], [])\n    (Y_train_parts, Y_val_parts) = ([], [])\n    for i in range(m):\n        col = i // 2\n        row = i % 2\n        (x_min, x_max) = ((col + 0.1) * 10, (col + 0.9) * 10)\n        (y_min, y_max) = ((row * interval + 0.1) * 10, (row * interval + 0.9) * 10)\n        x_tr = np.random.uniform(x_min, x_max, n_train)\n        y_tr = np.random.uniform(y_min, y_max, n_train)\n        X_train_parts.append(np.column_stack((x_tr, y_tr)))\n        x_va = np.random.uniform(x_min, x_max, n_val)\n        y_va = np.random.uniform(y_min, y_max, n_val)\n        X_val_parts.append(np.column_stack((x_va, y_va)))\n        label = int((i - 0.5) * 2)\n        Y_train_parts.append(np.full(n_train, label, dtype=int))\n        Y_val_parts.append(np.full(n_val, label, dtype=int))\n    X_train = np.round(np.vstack(X_train_parts), 4)\n    X_val = np.round(np.vstack(X_val_parts), 4)\n    Y_train = np.concatenate(Y_train_parts)\n    Y_val = np.concatenate(Y_val_parts)\n    return (X_train, X_val, Y_train, Y_val)\nassert generate_data(2, 2, 1, 1, seed=0)[0].tolist() == [[7.7554, 7.0636], [4.3646, 3.0713], [7.2704, 13.4265], [4.8128, 15.6671]], \"test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train\"\nassert generate_data(2, 1, 1, 1, seed=1)[2].tolist() == [-1, 1], \"test case failed: generate_data(2,1,1,1,seed=1) \u2013 Y_train\"\nassert generate_data(2, 3, 0, 1, seed=0)[0].shape == (6, 2), \"test case failed: generate_data(2,3,0,1,seed=0) \u2013 shapes\"\nassert generate_data(3, 2, 1, 0.5, seed=3)[2].shape == (6,), \"test case failed: generate_data(3,2,1,0.5,seed=3) \u2013 label shape\"\nassert generate_data(4, 1, 0, 1, seed=4)[1].size == 0, \"test case failed: generate_data(4,1,0,1,seed=4) \u2013 empty validation\"\nassert len(set(generate_data(5, 2, 2, 1, seed=6)[2].tolist())) == 5, \"test case failed: unique labels\"\nassert not np.array_equal(generate_data(2, 2, 0, 1, seed=7)[0], generate_data(2, 2, 0, 1, seed=8)[0]), \"test case failed: different seeds\"\nassert generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==1][:,1].min() - generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==-1][:,1].max() >= 20, \"test case failed: interval separation\"\nassert isinstance(generate_data(2, 1, 1, 1, seed=10)[0], np.ndarray), \"test case failed: return type\"\nassert generate_data(2, 1, 1, 1, seed=0)[0].dtype == float, \"test case failed: dtype check\""}
{"task_id": 475, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not subscriptable", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step (see doc-string above).\"\"\"\n    grad_arr = np.asarray(grad, dtype=float)\n    if m_prev is None:\n        m_prev = np.zeros_like(grad_arr, dtype=float)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad_arr, dtype=float)\n    m_new = b1 * m_prev + (1.0 - b1) * grad_arr\n    v_new = b2 * v_prev + (1.0 - b2) * grad_arr ** 2\n    m_hat = m_new / (1.0 - b1 ** t)\n    v_hat = v_new / (1.0 - b2 ** t)\n    w_new = np.asarray(w, dtype=float) - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    if np.isscalar(w):\n        w_new = w_new.item()\n        m_new = m_new.item()\n        v_new = v_new.item()\n    return (w_new, m_new, v_new)\nimport numpy as np\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1)[0], 0.999000001, atol=1e-8), \"failed: scalar, t=1, positive grad\"\nassert np.allclose(adam_update(1.0, -0.1, 0.0, 0.0, 1)[0], 1.000999999, atol=1e-8), \"failed: scalar, t=1, negative grad\"\nw_vec, m_vec, v_vec = adam_update(np.array([1.0, -1.0]), np.array([0.2, -0.2]), np.zeros(2), np.zeros(2), 1)\nassert np.allclose(w_vec, np.array([0.999, -0.999]), atol=1e-8), \"failed: vector, t=1\"\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1, learning_rate=0.01)[0], 0.990000001, atol=1e-8), \"failed: different learning rate\"\nassert np.allclose(adam_update(1.0, 0.0, 0.0, 0.0, 1)[0], 1.0, atol=1e-12), \"failed: zero gradient gives no update\"\nw6, m6, v6 = adam_update(2.5, -0.5, 0.0, 0.0, 1)\nassert np.allclose([w6, m6, v6], [2.501, -0.05, 0.00025], atol=1e-8), \"failed: scalar, large grad\"\nw7, m7, v7 = adam_update(0.999000001, 0.1, 0.01, 1e-5, 2)\nassert np.allclose([w7, m7, v7[...]], [0.998000002, 0.019, 1.999e-5], atol=1e-8), \"failed: scalar, t=2\"\nvec_prev_m = np.array([0.02, -0.02])\nvec_prev_v = np.array([4e-5, 4e-5])\nwv, mv, vv = adam_update(np.array([0.999, -0.999]), np.array([0.2, -0.2]), vec_prev_m, vec_prev_v, 2)\nassert np.allclose(wv, np.array([0.998, -0.998]), atol=1e-8), \"failed: vector, t=2\"\nassert np.allclose(adam_update(5.0, 0.0, None, None, 3)[1:], (0.0, 0.0), atol=1e-12), \"failed: None moments treated as zeros\""}
{"task_id": 477, "completion_id": 0, "passed": true, "result": "passed", "solution": "import heapq\nimport heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid using 4-directional movement.\n\n    Args:\n        grid: 2-D list with 0 = free cell, 1 = obstacle.\n        start: (row, col) start position.\n        dest:  (row, col) destination position.\n\n    Returns:\n        Length of the shortest path (number of moves) or \u20111 if unreachable.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n    (rows, cols) = (len(grid), len(grid[0]))\n    (sr, sc) = start\n    (dr, dc) = dest\n    if not (0 <= sr < rows and 0 <= sc < cols and (0 <= dr < rows) and (0 <= dc < cols)):\n        return -1\n    if grid[sr][sc] == 1 or grid[dr][dc] == 1:\n        return -1\n    if start == dest:\n        return 0\n\n    def heuristic(r: int, c: int) -> int:\n        \"\"\"Manhattan distance to destination.\"\"\"\n        return abs(r - dr) + abs(c - dc)\n    open_heap: List[Tuple[int, int, int, int]] = []\n    g_cost = {start: 0}\n    heapq.heappush(open_heap, (heuristic(sr, sc), 0, sr, sc))\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    while open_heap:\n        (f, g, r, c) = heapq.heappop(open_heap)\n        if g != g_cost.get((r, c), float('inf')):\n            continue\n        if (r, c) == dest:\n            return g\n        for (drc, dcc) in directions:\n            (nr, nc) = (r + drc, c + dcc)\n            if not (0 <= nr < rows and 0 <= nc < cols):\n                continue\n            if grid[nr][nc] == 1:\n                continue\n            ng = g + 1\n            if ng < g_cost.get((nr, nc), float('inf')):\n                g_cost[nr, nc] = ng\n                heapq.heappush(open_heap, (ng + heuristic(nr, nc), ng, nr, nc))\n    return -1\nassert astar([[0, 0, 0], [1, 1, 0], [0, 0, 0]], (0, 0), (2, 2)) == 4, \"test case failed: simple 3\u00d73 grid\"\nassert astar([[0]], (0, 0), (0, 0)) == 0, \"test case failed: start equals destination\"\nassert astar([[0, 1], [1, 0]], (0, 0), (1, 1)) == -1, \"test case failed: unreachable destination\"\nassert astar([[0, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (3, 2)) == 5, \"test case failed: 4\u00d73 grid with obstacles\"\nassert astar([[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0]], (0, 0), (4, 4)) == 8, \"test case failed: 5\u00d75 mixed grid\"\nassert astar([[0, 1, 1], [0, 0, 0], [1, 1, 0]], (0, 0), (2, 2)) == 4, \"test case failed: narrow corridor\"\nassert astar([[0, 0], [0, 1]], (0, 0), (1, 1)) == -1, \"test case failed: destination is an obstacle\"\nassert astar([[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0]], (0, 0), (3, 3)) == 6, \"test case failed: 4\u00d74 grid with a detour\"\nassert astar([[0, 1, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (0, 2)) == 6, \"test case failed: central wall requiring long detour\"\ngrid10 = [[0]*10 for _ in range(10)]; assert astar(grid10, (0, 0), (9, 9)) == 18, \"test case failed: 10\u00d710 empty grid\""}
{"task_id": 478, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: Standard deviation of each feature (population version),\n            rounded to 4 decimal places.  If *X* is empty, [] is returned.\n    \"\"\"\n    arr = np.asarray(X, dtype=float)\n    if arr.size == 0:\n        return []\n    if arr.ndim == 1:\n        arr = arr.reshape(-1, 1)\n    n_samples = arr.shape[0]\n    mean = np.sum(arr, axis=0) / n_samples\n    sq_diffs = (arr - mean) ** 2\n    variance = np.sum(sq_diffs, axis=0) / n_samples\n    std_dev = np.sqrt(variance)\n    std_rounded = np.round(std_dev, 4)\n    return std_rounded.tolist()\nassert calculate_std_dev([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2.4495, 2.4495, 2.4495], \"test case failed: equal spread 3\u00d73\"\nassert calculate_std_dev([[2, 2], [2, 2]]) == [0.0, 0.0], \"test case failed: constant columns\"\nassert calculate_std_dev([[1, 4], [2, 4], [3, 4]]) == [0.8165, 0.0], \"test case failed: mixed constant/varying\"\nassert calculate_std_dev([[10], [10], [10], [10]]) == [0.0], \"test case failed: single constant feature\"\nassert calculate_std_dev([[1, 2, 3, 4]]) == [0.0, 0.0, 0.0, 0.0], \"test case failed: single row\"\nassert calculate_std_dev([[0, 1], [1, 0]]) == [0.5, 0.5], \"test case failed: swapped values\"\nassert calculate_std_dev([[-1, -2], [-3, -4], [-5, -6]]) == [1.633, 1.633], \"test case failed: negative spread\"\nassert calculate_std_dev([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]) == [1.5, 1.5, 1.5], \"test case failed: float values\"\nassert calculate_std_dev([[1, 2], [3, 4], [5, 1], [2, 3]]) == [1.479, 1.118], \"test case failed: irregular data\"\nassert calculate_std_dev([]) == [], \"test case failed: empty dataset\""}
{"task_id": 479, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not rewards:\n        return [round(ev_prior, 4)]\n    n_arms = len(rewards[0])\n    values = np.full(n_arms, float(ev_prior))\n    counts = np.zeros(n_arms, dtype=int)\n    for row in rewards:\n        if np.random.random() < epsilon:\n            arm = np.random.randint(n_arms)\n        else:\n            arm = int(np.argmax(values))\n        r = row[arm]\n        counts[arm] += 1\n        values[arm] += (r - values[arm]) / counts[arm]\n    return [round(v, 4) for v in values]\nassert epsilon_greedy_bandit([[1,0,0],[0,1,0],[1,0,0],[0,1,0],[1,0,0]],0,0.5,42) == [0.6,0.5,0.5], \"test case 1 failed\"\nassert epsilon_greedy_bandit([[0,1],[0,1],[0,1]],0,0) == [0.0,0.0], \"test case 2 failed\"\nassert epsilon_greedy_bandit([[1,0],[1,0],[1,0]],0,0.5) == [1.0,0.5], \"test case 3 failed\"\nassert epsilon_greedy_bandit([[0,0,1],[0,1,0],[1,0,0]],0,0) == [0.3333,0.0,0.0], \"test case 4 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,1],[0,1],[0,1]],0,0.1) == [0.0,1.0], \"test case 5 failed\"\nassert epsilon_greedy_bandit([[1],[0],[1],[1],[1]],0,0.5) == [0.8], \"test case 6 failed\"\nassert epsilon_greedy_bandit([[0,0,0],[0,0,1],[0,1,0],[0,0,1]],0,0.0) == [0.0,0.0,0.0], \"test case 7 failed\"\nassert epsilon_greedy_bandit([[0.5,1.0,0.2,0.2]],0,0.5) == [0.5,0.5,0.5,0.5], \"test case 8 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,0]],0,0.7) == [0.0,0.0], \"test case 9 failed\"\nassert epsilon_greedy_bandit([[1,1]],0,0.5) == [1.0,0.5], \"test case 10 failed\""}
{"task_id": 480, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mel_spectrogram(x: 'np.ndarray', window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\"\"\"\n    if x.ndim != 1:\n        raise ValueError('x must be one-dimensional')\n\n    def hz2mel(hz):\n        return 2595.0 * np.log10(1.0 + hz / 700.0)\n\n    def mel2hz(mel):\n        return 700.0 * (10.0 ** (mel / 2595.0) - 1.0)\n    x = np.asarray(x, dtype=np.float64)\n    if alpha != 0.0:\n        x = np.append(x[0], x[1:] - alpha * x[:-1])\n    frame_len = int(round(window_duration * fs))\n    frame_step = int(round(stride_duration * fs))\n    if center:\n        pad = frame_len // 2\n        x = np.pad(x, (pad, pad), mode='constant')\n    num_frames = 1 + int(np.floor((len(x) - frame_len) / frame_step))\n    if num_frames <= 0:\n        raise ValueError('Not enough samples for even one frame')\n    shape = (num_frames, frame_len)\n    strides = (x.strides[0] * frame_step, x.strides[0])\n    frames = np.lib.stride_tricks.as_strided(x, shape=shape, strides=strides).copy()\n    win_name = window.lower()\n    if win_name == 'hamming':\n        win = np.hamming(frame_len)\n    elif win_name == 'hann':\n        win = np.hanning(frame_len)\n    elif win_name == 'blackman_harris':\n        n = np.arange(frame_len)\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        win = a0 - a1 * np.cos(2 * np.pi * n / (frame_len - 1)) + a2 * np.cos(4 * np.pi * n / (frame_len - 1)) - a3 * np.cos(6 * np.pi * n / (frame_len - 1))\n    else:\n        raise ValueError(\"window must be 'hamming', 'hann' or 'blackman_harris'\")\n    frames *= win\n    N = frame_len\n    fft_frames = np.fft.rfft(frames, n=N)\n    power_spec = np.abs(fft_frames) ** 2 / N\n    energy_per_frame = power_spec.sum(axis=1)\n    (mel_low, mel_high) = (0.0, hz2mel(fs / 2.0))\n    mel_points = np.linspace(mel_low, mel_high, n_filters + 2)\n    hz_points = mel2hz(mel_points)\n    bin_idxs = np.floor(N * hz_points / fs).astype(int)\n    bin_idxs = np.clip(bin_idxs, 0, N // 2)\n    fbank = np.zeros((n_filters, N // 2 + 1))\n    for m in range(1, n_filters + 1):\n        (left, center, right) = (bin_idxs[m - 1], bin_idxs[m], bin_idxs[m + 1])\n        if center - left != 0:\n            up = (np.arange(left, center) - left) / (center - left)\n            fbank[m - 1, left:center] = up\n        if right - center != 0:\n            down = (right - np.arange(center, right)) / (right - center)\n            fbank[m - 1, center:right] = down\n    filter_energies = power_spec @ fbank.T\n    if mean_normalize:\n        filter_energies -= filter_energies.mean(axis=0, keepdims=True)\n    eps = np.finfo(float).eps\n    filter_energies[filter_energies == 0.0] = eps\n    energy_per_frame[energy_per_frame == 0.0] = eps\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    return (filter_energies, energy_per_frame)\nimport numpy as np\nrng = np.random.RandomState(0)  # deterministic pseudo-random numbers\nsig2 = np.ones(3200)\nsig3 = np.zeros(8000)\nsig4 = np.sin(2*np.pi*440*np.arange(0,0.1,1/8000))\nassert True, \"Function executed without errors when center=False\""}
{"task_id": 481, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    eps_sq = eps * eps\n    neighbours: list[np.ndarray] = []\n    for i in range(n_samples):\n        diff = data - data[i]\n        dist_sq = np.einsum('ij,ij->i', diff, diff)\n        neighbours.append(np.where(dist_sq <= eps_sq)[0])\n    UNASSIGNED = -1\n    labels = np.full(n_samples, UNASSIGNED, dtype=int)\n    visited = np.zeros(n_samples, dtype=bool)\n    cluster_id = 0\n    for point_idx in range(n_samples):\n        if visited[point_idx]:\n            continue\n        visited[point_idx] = True\n        neigh = neighbours[point_idx]\n        if neigh.size < min_samples:\n            labels[point_idx] = UNASSIGNED\n            continue\n        labels[point_idx] = cluster_id\n        stack = list(neigh)\n        while stack:\n            current = stack.pop()\n            if not visited[current]:\n                visited[current] = True\n                neigh_current = neighbours[current]\n                if neigh_current.size >= min_samples:\n                    stack.extend(neigh_current.tolist())\n            if labels[current] == UNASSIGNED:\n                labels[current] = cluster_id\n        cluster_id += 1\n    return labels.tolist()\nassert dbscan(np.array([[1,1],[1.1,1.1],[0.9,1],[5,5],[5.2,5.1],[4.9,5],[8,0]]),0.3,2)==[0,0,0,1,1,1,-1],\"test case failed: example dataset\"\nassert dbscan(np.array([[0,0],[0.1,0],[0.05,0.05],[0.2,0.2]]),0.25,1)==[0,0,0,0],\"test case failed: single cluster with min_samples=1\"\nassert dbscan(np.array([[0,0],[5,5],[10,10]]),0.5,2)==[-1,-1,-1],\"test case failed: all noise\"\nassert dbscan(np.empty((0,2)),0.5,2)==[],\"test case failed: empty dataset\"\nassert dbscan(np.array([[0,0],[0,0],[0,0]]),0.01,2)==[0,0,0],\"test case failed: duplicate points cluster\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[0,0,0,0],\"test case failed: linear chain cluster\"\nassert dbscan(np.array([[0,0],[3,3],[0.1,0.1],[3.1,3.1],[6,6]]),0.25,2)==[0,1,0,1,-1],\"test case failed: two small clusters plus noise\"\nassert dbscan(np.array([[0,0],[0.05,0.05],[2,2],[2.05,2.05]]),0.1,2)==[0,0,1,1],\"test case failed: two tight clusters\""}
{"task_id": 482, "completion_id": 0, "passed": false, "result": "failed: `y` must contain integer values only.", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    Parameters\n    ----------\n    y : array_like\n        1-D sequence of non-negative integer labels.\n    num_classes : int or None, optional\n        Number of classes (columns in the output).  If None, it is inferred\n        as max(y) + 1.  Every label must satisfy\n        0 <= label < num_classes, otherwise ValueError is raised.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (len(y), num_classes) with dtype=int.\n    \"\"\"\n    y_arr = np.asarray(y)\n    if y_arr.ndim == 0:\n        y_arr = y_arr.reshape(1)\n    if y_arr.ndim != 1:\n        raise ValueError('`y` must be a 1-D sequence of integer labels.')\n    try:\n        y_int = y_arr.astype(int, casting='safe', copy=False)\n    except TypeError:\n        raise ValueError('`y` must contain integer values only.')\n    n_samples = y_int.size\n    if n_samples == 0:\n        if num_classes is None:\n            return np.zeros((0, 0), dtype=int)\n        if num_classes <= 0:\n            raise ValueError('`num_classes` must be a positive integer.')\n        return np.zeros((0, num_classes), dtype=int)\n    max_label = int(y_int.max())\n    min_label = int(y_int.min())\n    if num_classes is None:\n        if min_label < 0:\n            raise ValueError('Negative labels are not allowed.')\n        num_classes = max_label + 1\n    else:\n        if num_classes <= 0:\n            raise ValueError('`num_classes` must be a positive integer.')\n        if min_label < 0 or max_label >= num_classes:\n            raise ValueError('All labels must satisfy 0 <= label < num_classes.')\n    one_hot = np.zeros((n_samples, num_classes), dtype=int)\n    rows = np.arange(n_samples)\n    one_hot[rows, y_int] = 1\n    return one_hot\nassert (to_categorical([0, 1, 2]) == np.array([[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: basic consecutive labels\"\nassert (to_categorical(np.array([2,0,1,2])) == np.array([[0,0,1],[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: shuffled labels\"\nassert (to_categorical([0,1,2], num_classes=5) == np.array([[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]])).all(), \"failed: extra unused columns\"\nassert (to_categorical([4], num_classes=5) == np.array([[0,0,0,0,1]])).all(), \"failed: single element\"\nassert (to_categorical((3,3,3)) == np.array([[0,0,0,1],[0,0,0,1],[0,0,0,1]])).all(), \"failed: tuple input\"\nassert (to_categorical(np.arange(6)) == np.eye(6, dtype=int)).all(), \"failed: arange sequence\"\nassert (to_categorical([1,1,1,1]) == np.array([[0,1],[0,1],[0,1],[0,1]])).all(), \"failed: duplicate labels\"\nassert to_categorical([], num_classes=0).shape == (0,0), \"failed: empty input with explicit classes\"\ntry:\n    to_categorical([0,2], num_classes=2)\n    assert False, \"failed: did not raise on out-of-range label\"\nexcept ValueError:\n    pass\ntry:\n    to_categorical([-1,0,1])\n    assert False, \"failed: did not raise on negative label\"\nexcept ValueError:\n    pass"}
{"task_id": 483, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function uses\n        ``max(labels) + 1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    labels = np.asarray(labels, dtype=int).ravel()\n    if num_classes is None:\n        num_classes = int(labels.max()) + 1\n    one_hot = [[0] * num_classes for _ in range(len(labels))]\n    for (i, lbl) in enumerate(labels):\n        one_hot[i][int(lbl)] = 1\n    return one_hot\nassert to_categorical([0, 1, 2]) == [[1,0,0],[0,1,0],[0,0,1]], \"test case failed: to_categorical([0, 1, 2])\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical(np.array([1,1,0])) == [[0,1],[0,1],[1,0]], \"test case failed: to_categorical(np.array([1,1,0]))\"\nassert to_categorical([3,3,3,3]) == [[0,0,0,1]]*4, \"test case failed: to_categorical([3,3,3,3])\"\nassert to_categorical([0]) == [[1]], \"test case failed: to_categorical([0])\"\nassert to_categorical([4,2], 6) == [[0,0,0,0,1,0],[0,0,1,0,0,0]], \"test case failed: to_categorical([4,2], 6)\"\nassert to_categorical(np.arange(5)) == [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], \"test case failed: to_categorical(np.arange(5))\"\nassert to_categorical([1,0,1,0]) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: to_categorical([1,0,1,0])\"\nassert to_categorical([2], 5) == [[0,0,1,0,0]], \"test case failed: to_categorical([2], 5)\"\nassert to_categorical([1,2,3,4], 5) == [[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], \"test case failed: to_categorical([1,2,3,4], 5)\""}
{"task_id": 484, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], degree: int, reg_factor: float=0.1, n_iterations: int=1000) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model (coordinate descent)\n    and predict on `X_test`.\"\"\"\n\n    def soft_threshold(rho: float, lam: float) -> float:\n        \"\"\"Soft\u2013thresholding operator S(\u03c1, \u03bb).\"\"\"\n        if rho > lam:\n            return rho - lam\n        if rho < -lam:\n            return rho + lam\n        return 0.0\n    X_train = np.asarray(X_train, dtype=float).ravel()\n    y_train = np.asarray(y_train, dtype=float).ravel()\n    X_test = np.asarray(X_test, dtype=float).ravel()\n    n_samples = X_train.size\n    n_features = degree + 1\n    Phi_train = np.column_stack([X_train ** k for k in range(n_features)])\n    Phi_test = np.column_stack([X_test ** k for k in range(n_features)])\n    z = (Phi_train ** 2).sum(axis=0)\n    w = np.zeros(n_features)\n    y_pred = Phi_train @ w\n    for _ in range(n_iterations):\n        for j in range(n_features):\n            residual = y_train - (y_pred - Phi_train[:, j] * w[j])\n            rho_j = (Phi_train[:, j] * residual).sum()\n            if j == 0:\n                new_w_j = rho_j / z[j] if z[j] != 0 else 0.0\n            else:\n                new_w_j = soft_threshold(rho_j, reg_factor) / z[j] if z[j] != 0 else 0.0\n            if new_w_j != w[j]:\n                y_pred += Phi_train[:, j] * (new_w_j - w[j])\n                w[j] = new_w_j\n    y_test_pred = Phi_test @ w\n    return [float(np.round(val, 4)) for val in y_test_pred]\nassert lasso_regression_predict([0, 1, 2], [1, 3, 7], [0, 1, 2], 2, 0.0) == [1.0, 3.0, 7.0], \"test case failed: quadratic fit\"\nassert lasso_regression_predict([0, 1, 2, 3], [0, 2, 4, 6], [0, 1, 2, 3], 1, 0.0) == [0.0, 2.0, 4.0, 6.0], \"test case failed: linear fit\"\nassert lasso_regression_predict([2, 4, 6], [3, 3, 3], [2, 4, 6], 3, 0.0) == [3.0, 3.0, 3.0], \"test case failed: constant function\"\nassert lasso_regression_predict([-1, 0, 1], [1, 0, 1], [-1, 0, 1], 2, 0.0) == [1.0, 0.0, 1.0], \"test case failed: symmetric quadratic\"\nassert lasso_regression_predict([0, 1, 2, 3], [1, 3, 5, 7], [0, 1, 2, 3], 1, 0.0) == [1.0, 3.0, 5.0, 7.0], \"test case failed: linear with intercept\"\nassert lasso_regression_predict([0, 1, 2], [0, 1, 8], [0, 1, 2], 3, 0.0) == [0.0, 1.0, 8.0], \"test case failed: cubic fit\"\nassert lasso_regression_predict([-3, -2, -1, 0, 1, 2, 3], [9, 4, 1, 0, 1, 4, 9], [-3, -2, -1, 0, 1, 2, 3], 2, 0.0) == [9.0, 4.0, 1.0, 0.0, 1.0, 4.0, 9.0], \"test case failed: wide quadratic\"\nassert lasso_regression_predict([0, 1], [1, 1], [0, 1], 1, 0.0) == [1.0, 1.0], \"test case failed: horizontal line\"\nassert lasso_regression_predict([2, 4], [5, 5], [2, 4], 2, 0.0) == [5.0, 5.0], \"test case failed: horizontal line (different X)\"\nassert lasso_regression_predict([-1, 1], [-1, 1], [-1, 1], 1, 0.0) == [-1.0, 1.0], \"test case failed: diagonal line\""}
{"task_id": 485, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\"\"\"\n\n    def build(x: np.ndarray, y: np.ndarray, depth: int):\n        if depth == max_depth or x.size < 2 or np.all(x == x[0]):\n            return {'leaf': True, 'value': float(y.mean())}\n        order = np.argsort(x)\n        (xs, ys) = (x[order], y[order])\n        n = xs.size\n        csum = np.cumsum(ys)\n        csum2 = np.cumsum(ys ** 2)\n        (total_sum, total_sum2) = (csum[-1], csum2[-1])\n        (best_sse, best_idx) = (np.inf, None)\n        for i in range(n - 1):\n            if xs[i] == xs[i + 1]:\n                continue\n            (n_l, n_r) = (i + 1, n - (i + 1))\n            (sum_l, sum_r) = (csum[i], total_sum - csum[i])\n            (sum2_l, sum2_r) = (csum2[i], total_sum2 - csum2[i])\n            sse_l = sum2_l - sum_l ** 2 / n_l\n            sse_r = sum2_r - sum_r ** 2 / n_r\n            sse = sse_l + sse_r\n            if sse < best_sse:\n                (best_sse, best_idx) = (sse, i)\n        if best_idx is None:\n            return {'leaf': True, 'value': float(y.mean())}\n        thr = (xs[best_idx] + xs[best_idx + 1]) / 2.0\n        left_mask = x <= thr\n        right_mask = ~left_mask\n        return {'leaf': False, 'thr': float(thr), 'left': build(x[left_mask], y[left_mask], depth + 1), 'right': build(x[right_mask], y[right_mask], depth + 1)}\n\n    def predict_one(node, x_val: float):\n        while not node['leaf']:\n            node = node['left'] if x_val <= node['thr'] else node['right']\n        return node['value']\n    if len(X_train) == 0:\n        return []\n    X_arr = np.asarray(X_train, dtype=float)\n    y_arr = np.asarray(y_train, dtype=float)\n    tree = build(X_arr, y_arr, depth=0)\n    return [predict_one(tree, float(x)) for x in X_test]\nassert regression_tree_predict([1,2,3,4,5,6,7], [2,2,2,8,8,8,8], [2,3,5,7], 1) == [2.0,2.0,8.0,8.0], \"Failed test 1 \u2013 description example\"\nassert regression_tree_predict([1,2,3,4], [1,1,3,3], [1,3,4], 1) == [1.0,3.0,3.0], \"Failed test 2 \u2013 perfect binary split\"\nassert regression_tree_predict([1,2,3,4], [1,2,3,4], [1,3,4], 3) == [1.0,3.0,4.0], \"Failed test 3 \u2013 deeper splits\"\nassert regression_tree_predict([0,1,2,3], [5,5,5,5], [0,2,3], 2) == [5.0,5.0,5.0], \"Failed test 4 \u2013 constant target\"\nassert regression_tree_predict([], [], [1,2,3], 1) == [], \"Failed test 5 \u2013 empty training data\"\nassert regression_tree_predict([1,1,2,2,3,3], [1,1,2,2,3,3], [1.1,2.1,3.1], 2) == [1.0,2.0,3.0], \"Failed test 6 \u2013 duplicate X values\"\nassert regression_tree_predict([1,2,3,10,11,12], [1,1,1,2,2,2], [2,11], 4) == [1.0,2.0], \"Failed test 7 \u2013 two clusters\"\nassert regression_tree_predict([5,6], [7,9], [5,6], 5) == [7.0,9.0], \"Failed test 8 \u2013 tiny dataset\"\nassert regression_tree_predict([1,2,3], [3,4,5], [1,2,3], 0) == [4.0,4.0,4.0], \"Failed test 9 \u2013 depth 0\"\nassert regression_tree_predict([4,1,3,2], [4,1,3,2], [1,2,3,4], 2) == [1.0,2.0,3.0,4.0], \"Failed test 10 \u2013 unsorted inputs\""}
{"task_id": 486, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the Mean Squared Error (MSE) between two numeric sequences.\n\n    The function returns -1 if the two inputs do not have the same\n    non-zero length, otherwise it returns the MSE rounded to 4 decimals.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        float: The MSE rounded to 4 decimal places, or -1 on error.\n    \"\"\"\n    try:\n        a_true = np.asarray(y_true, dtype=float).ravel()\n        a_pred = np.asarray(y_pred, dtype=float).ravel()\n    except (TypeError, ValueError):\n        return -1\n    if a_true.size == 0 or a_true.size != a_pred.size:\n        return -1\n    mse = np.mean((a_true - a_pred) ** 2)\n    return float(round(mse, 4))\nassert mean_squared_error([1, 2, 3], [1, 2, 3]) == 0.0, \"Failed on identical lists\"\nassert mean_squared_error([1, 2, 3], [1, 2, 4]) == 0.3333, \"Failed on basic example\"\nassert mean_squared_error([0.1, 0.2, 0.3], [0.1, 0.25, 0.35]) == 0.0017, \"Failed on float inputs\"\nassert mean_squared_error([5], [3]) == 4.0, \"Failed on single-element inputs\"\nassert mean_squared_error([], []) == -1, \"Failed on empty inputs\"\nassert mean_squared_error([1, 2, 3], [1, 2]) == -1, \"Failed on length mismatch\"\nimport numpy as np\narr1 = np.array([2, 4, 6, 8])\narr2 = np.array([1, 3, 5, 7])\nassert mean_squared_error(arr1, arr2) == 1.0, \"Failed on NumPy arrays\"\nassert mean_squared_error((1, 2, 3, 4), (4, 3, 2, 1)) == 5.0, \"Failed on tuple inputs\""}
{"task_id": 487, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int=300, tol: float=0.0001) -> list[int]:\n    \"\"\"Classical K-Means clustering (from scratch, NumPy only).\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        Data matrix.\n    k : int\n        Number of clusters (1 \u2264 k \u2264 n_samples).\n    max_iters : int, optional\n        Hard iteration cap (default 300).\n    tol : float, optional\n        Convergence threshold on centroid displacement (default 1e-4).\n\n    Returns\n    -------\n    list[int]\n        Cluster index (0 \u2026 k-1) for every sample, in the original order.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    centroids = X[:k].copy()\n    labels = np.zeros(X.shape[0], dtype=int)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(X[:, None, :] - centroids[None, :, :], axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            members = labels == j\n            if np.any(members):\n                new_centroids[j] = X[members].mean(axis=0)\n        if np.linalg.norm(new_centroids - centroids) < tol:\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n    return labels.tolist()\nassert k_means(np.array([[1, 1], [5, 5], [1.2, 0.9], [6, 5.1]]), 2) == [0, 1, 0, 1], \"test case 1 failed\"\nassert k_means(np.array([[0, 0], [0, 1], [5, 5], [5, 4], [9, 9], [9, 10]]), 3) == [0, 1, 2, 2, 2, 2], \"test case 2 failed\"\nassert k_means(np.array([[0, 0], [1, 1], [2, 2]]), 1) == [0, 0, 0], \"test case 3 failed\"\nassert k_means(np.array([[0, 0], [1, 1], [2, 2]]), 3) == [0, 1, 2], \"test case 4 failed\"\nassert k_means(np.array([[1, 0, 0], [10, 0, 0], [1, 10, 0], [10, 10, 0], [1, 0, 10], [10, 0, 10]]), 2) == [0, 1, 0, 1, 0, 1], \"test case 5 failed\"\nassert k_means(np.array([[0, 0], [5, 0], [0, 5], [5, 5]]), 2) == [0, 1, 0, 1], \"test case 6 failed\"\nassert k_means(np.array([[0, 0], [10, 0], [0, 10], [10, 10]]), 3) == [0, 1, 2, 1], \"test case 7 failed\"\nassert k_means(np.array([[i, 0] for i in range(5)]), 5) == [0, 1, 2, 3, 4], \"test case 8 failed\"\nassert k_means(np.array([[0], [10], [20]]), 2) == [0, 1, 1], \"test case 9 failed\"\nassert k_means(np.array([[0, 0], [0, 10], [20, 0], [20, 10]]), 2) == [0, 1, 0, 1], \"test case 10 failed\""}
{"task_id": 488, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty, has <1 sample,\n        or is not strictly two-dimensional.\n    \"\"\"\n    try:\n        arr = np.asarray(X, dtype=float)\n    except Exception:\n        return -1\n    if arr.ndim != 2 or arr.shape[0] < 1:\n        return -1\n    mean = arr.mean(axis=0)\n    var = np.mean((arr - mean) ** 2, axis=0)\n    return np.round(var, 4).tolist()\nassert calculate_variance([[1,2,3],[4,5,6],[7,8,9]]) == [6.0, 6.0, 6.0], \"test case failed: calculate_variance([[1,2,3],[4,5,6],[7,8,9]])\"\nassert calculate_variance([[0,0],[1,1],[2,2],[3,3]]) == [1.25, 1.25], \"test case failed: calculate_variance([[0,0],[1,1],[2,2],[3,3]])\"\nassert calculate_variance([[4,5,6]]) == [0.0, 0.0, 0.0], \"test case failed: single sample\"\nassert calculate_variance([[1],[2],[3],[4]]) == [1.25], \"test case failed: single column\"\nassert calculate_variance([[0,0,0],[0,0,0]]) == [0.0, 0.0, 0.0], \"test case failed: zeros\"\nassert calculate_variance([[-1,-2,-3],[-4,-5,-6]]) == [2.25, 2.25, 2.25], \"test case failed: negative numbers\"\nassert calculate_variance([[1,2],[1,2],[1,2]]) == [0.0, 0.0], \"test case failed: identical rows\"\nassert calculate_variance([[2,4,6,8],[1,3,5,7],[0,2,4,6]]) == [0.6667, 0.6667, 0.6667, 0.6667], \"test case failed: varied features\"\nassert calculate_variance([]) == -1, \"test case failed: empty input\""}
{"task_id": 489, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        List with the class index for every sample when the input is valid;\n        otherwise the integer \u20111.\n    \"\"\"\n    arr = np.asarray(one_hot)\n    if arr.ndim != 2:\n        return -1\n    labels = []\n    for row in arr:\n        if not np.all((row == 0) | (row == 1)):\n            return -1\n        ones_idx = np.flatnonzero(row)\n        if ones_idx.size != 1:\n            return -1\n        labels.append(int(ones_idx[0]))\n    return labels\nassert to_nominal([[0,1,0],[1,0,0],[0,0,1]]) == [1,0,2], \"failed on simple 3-class example\"\nassert to_nominal(np.array([[1,0,0,0],[0,0,1,0]])) == [0,2], \"failed on NumPy input\"\nassert to_nominal([[0,0,1]]) == [2], \"failed on single sample\"\nassert to_nominal([[0,0,0]]) == -1, \"did not detect all-zero row\"\nassert to_nominal([[0,1,1]]) == -1, \"did not detect multiple ones in a row\"\nassert to_nominal([[2,0,0]]) == -1, \"did not detect non-binary value\"\nassert to_nominal([[0,1,0],[0,0,0],[1,0,0]]) == -1, \"did not detect mixed validity\"\nassert to_nominal([[0,1]]) == [1], \"failed on two-class case\"\nassert to_nominal(np.array([[0,0,0,1],[0,1,0,0],[1,0,0,0]])) == [3,1,0], \"failed on 4-class NumPy\"\nassert to_nominal(np.zeros((2,3))) == -1, \"did not detect all-zero matrix\""}
{"task_id": 490, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    arr = np.asarray(x)\n    if arr.size == 0:\n        return []\n    arr = arr.ravel()\n    diag_matrix = np.diag(arr).tolist()\n    return diag_matrix\nassert make_diagonal([1, 2, 3]) == [[1, 0, 0], [0, 2, 0], [0, 0, 3]], \"test case failed: make_diagonal([1, 2, 3])\"\nassert make_diagonal([5]) == [[5]], \"test case failed: make_diagonal([5])\"\nassert make_diagonal([]) == [], \"test case failed: make_diagonal([])\"\nassert make_diagonal((0, 0, 0, 0)) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], \"test case failed: make_diagonal((0, 0, 0, 0))\"\nassert make_diagonal(np.array([3.5, -2.1])) == [[3.5, 0.0], [0.0, -2.1]], \"test case failed: make_diagonal(np.array([3.5, -2.1]))\"\nassert make_diagonal([1, -1, 1, -1]) == [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, -1]], \"test case failed: make_diagonal([1, -1, 1, -1])\"\nassert make_diagonal(np.arange(4)) == [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]], \"test case failed: make_diagonal(np.arange(4))\"\nassert make_diagonal([1.1, 2.2, 3.3]) == [[1.1, 0.0, 0.0], [0.0, 2.2, 0.0], [0.0, 0.0, 3.3]], \"test case failed: make_diagonal([1.1, 2.2, 3.3])\"\nassert make_diagonal(tuple(range(6))) == [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5]], \"test case failed: make_diagonal(tuple(range(6)))\"\nassert make_diagonal(np.array([])) == [], \"test case failed: make_diagonal(np.array([]))\""}
{"task_id": 491, "completion_id": 0, "passed": false, "result": "failed: name '_mine' is not defined", "solution": "from collections import Counter, defaultdict\nimport itertools\nfrom collections import Counter, defaultdict\nfrom itertools import combinations\nclass _FPNode:\n    __slots__ = ('item', 'count', 'parent', 'children', 'link')\n\n    def __init__(self, item, parent):\n        self.item = item\n        self.count = 0\n        self.parent = parent\n        self.children = {}\n        self.link = None\ndef _build_fp_tree(trans_iterable, min_sup):\n    \"\"\"\n    Build an FP-tree from `trans_iterable` and return (root, header_table).\n    `trans_iterable` must yield tuples   (items_in_transaction , multiplicity)\n    in which every `items_in_transaction` is already ordered according to a\n    global frequency order and contains *only* items that are frequent in the\n    projected data set.\n    \"\"\"\n    header = {}\n    for (items, cnt) in trans_iterable:\n        for itm in items:\n            header.setdefault(itm, [0, None])[0] += cnt\n    header = {itm: val for (itm, val) in header.items() if val[0] >= min_sup}\n    if not header:\n        return (None, None)\n    order = sorted(header.items(), key=lambda x: (-x[1][0], x[0]))\n    rank = {itm: idx for (idx, (itm, _)) in enumerate(order)}\n    root = _FPNode(None, None)\n    for (items, cnt) in trans_iterable:\n        ordered = [i for i in sorted(items, key=lambda x: rank.get(x, 10 ** 9)) if i in header]\n        if not ordered:\n            continue\n        cur = root\n        for itm in ordered:\n            nxt = cur.children.get(itm)\n            if nxt is None:\n                nxt = _FPNode(itm, cur)\n                cur.children[itm] = nxt\n                if header[itm][1] is None:\n                    header[itm][1] = nxt\n                else:\n                    last = header[itm][1]\n                    while last.link is not None:\n                        last = last.link\n                    last.link = nxt\n            nxt.count += cnt\n            cur = nxt\n    return (root, header)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    freq = {k: v for (k, v) in freq.items() if v >= min_sup}\n    if not freq:\n        return []\n    order = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    rank = {itm: idx for (idx, (itm, _)) in enumerate(order)}\n    preprocessed = []\n    for t in transactions:\n        filtered = [i for i in t if i in freq]\n        if not filtered:\n            continue\n        filtered.sort(key=lambda x: rank[x])\n        preprocessed.append((tuple(filtered), 1))\n    (root, header) = _build_fp_tree(preprocessed, min_sup)\n    patterns = set()\n    _mine(root, header, min_sup, [], patterns)\n    result = [tuple(sorted(p)) for p in patterns]\n    result.sort(key=lambda x: (len(x), x))\n    return result\nassert fp_growth([['A','B','D','E'],['B','C','E'],['A','B','D','E'],['A','B','C','E'],['A','B','C','D','E'],['B','C','D']],3)==[('A',),('B',),('C',),('D',),('E',),('A','B'),('A','D'),('A','E'),('B','C'),('B','D'),('B','E'),('C','E'),('D','E'),('A','B','D'),('A','B','E'),('A','D','E'),('B','C','E'),('B','D','E'),('A','B','D','E')],\"failed on classic example\"\nassert fp_growth([['milk','bread'],['bread','butter'],['milk','bread','butter'],['bread'],['milk','bread']],3)==[('bread',),('milk',),('bread','milk')],\"failed on bread/milk example\"\nassert fp_growth([[1],[2],[3]],2)==[],\"failed on no frequent items\"\nassert fp_growth([[1,2],[1,2],[1,2]],1)==[(1,),(2,),(1,2)],\"failed on min_sup 1\"\nassert fp_growth([[1,2,3,4]],1)==[(1,),(2,),(3,),(4,),(1,2),(1,3),(1,4),(2,3),(2,4),(3,4),(1,2,3),(1,2,4),(1,3,4),(2,3,4),(1,2,3,4)],\"failed on single transaction\"\nassert fp_growth([[1,2,3],[1,2,3],[1,2,3]],3)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed on identical transactions\"\nassert fp_growth([[1,2],[2,3],[1,3],[1,2,3]],2)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed on triangle dataset\"\nassert fp_growth([[\"x\",\"y\"],[\"x\",\"z\"],[\"y\",\"z\"],[\"x\",\"y\",\"z\"]],2)==[(\"x\",),(\"y\",),(\"z\",),(\"x\",\"y\"),(\"x\",\"z\"),(\"y\",\"z\")],\"failed on string xyz\"\nassert fp_growth([],2)==[],\"failed on empty transaction list\""}
{"task_id": 492, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a polynomial feature matrix up to *degree*.\n\n    Parameters\n    ----------\n    X : list of list\n        Input data of shape (n_samples, n_features).\n    degree : int\n        Maximum total degree of the generated polynomial terms.\n        If degree < 0 the function returns -1.\n\n    Returns\n    -------\n    list of list\n        Enriched feature matrix whose columns are all monomials of the\n        original variables having total degree \u2264 *degree*, ordered\n        (i)   by increasing total degree,\n        (ii)  lexicographically within the same degree.\n        The first column is 1 (degree-0 term).\n    \"\"\"\n    if degree < 0:\n        return -1\n    X_arr = np.asarray(X, dtype=float)\n    if X_arr.ndim != 2:\n        raise ValueError('X must be a 2-D array-like structure')\n    (n_samples, n_features) = X_arr.shape\n    index_tuples: list[tuple[int, ...]] = [()]\n    for p in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), p):\n            index_tuples.append(combo)\n    n_terms = len(index_tuples)\n    out = np.empty((n_samples, n_terms), dtype=float)\n    for (j, comb) in enumerate(index_tuples):\n        if not comb:\n            out[:, j] = 1.0\n        else:\n            col = np.ones(n_samples, dtype=float)\n            for idx in comb:\n                col *= X_arr[:, idx]\n            out[:, j] = col\n    return out.tolist()\nassert polynomial_features([[2, 3]], 2) == [[1, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[2,3]],2)\"\nassert polynomial_features([[1, 2], [3, 4]], 1) == [[1, 1.0, 2.0], [1, 3.0, 4.0]], \"test case failed: ([[1,2],[3,4]],1)\"\nassert polynomial_features([[1], [2], [3]], 3) == [[1, 1.0, 1.0, 1.0], [1, 2.0, 4.0, 8.0], [1, 3.0, 9.0, 27.0]], \"test case failed: ([[1],[2],[3]],3)\"\nassert polynomial_features([[5, 0], [0, 5]], 0) == [[1], [1]], \"test case failed: ([[5,0],[0,5]],0)\"\nassert polynomial_features([[0, 0]], 3) == [[1] + [0.0]*9], \"test case failed: ([[0,0]],3)\"\nassert polynomial_features([[1, 2, 3]], 2) == [[1, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[1,2,3]],2)\"\nassert polynomial_features([[1, 2]], -1) == -1, \"test case failed: negative degree\"\nassert polynomial_features([[0.5, 1.5]], 2) == [[1, 0.5, 1.5, 0.25, 0.75, 2.25]], \"test case failed: ([[0.5,1.5]],2)\"\nassert polynomial_features([[1, 2], [3, 4], [5, 6]], 2) == [[1, 1.0, 2.0, 1.0, 2.0, 4.0], [1, 3.0, 4.0, 9.0, 12.0, 16.0], [1, 5.0, 6.0, 25.0, 30.0, 36.0]], \"test case failed: ([[1,2],[3,4],[5,6]],2)\"\nassert polynomial_features([[2, 1]], 3) == [[1, 2.0, 1.0, 4.0, 2.0, 1.0, 8.0, 4.0, 2.0, 1.0]], \"test case failed: ([[2,1]],3)\""}
{"task_id": 493, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    If *y* is empty return -1.\n\n    Parameters\n    ----------\n    y : Sequence[int | float] | numpy.ndarray\n        One-dimensional collection of numbers.\n\n    Returns\n    -------\n    float\n        MSE rounded to four decimal places, or -1 when *y* is empty.\n    \"\"\"\n    arr = np.asarray(y, dtype=float).ravel()\n    if arr.size == 0:\n        return -1\n    diff = arr - arr.mean()\n    mse_val = (diff ** 2).mean()\n    return float(round(mse_val, 4))\nassert mse([1, 2, 3]) == 0.6667, \"failed on mse([1, 2, 3])\"\nassert mse(np.array([0, 0, 0])) == 0.0, \"failed on mse([0,0,0])\"\nassert mse([-1, 1]) == 1.0, \"failed on mse([-1,1])\"\nassert mse([5]) == 0.0, \"failed on mse([5])\"\nassert mse([1, 3, 5, 7]) == 5.0, \"failed on mse([1,3,5,7])\"\nassert mse([2.5, 2.5, 2.5, 2.5]) == 0.0, \"failed on identical values\"\nassert mse(np.arange(10)) == 8.25, \"failed on np.arange(10)\"\nassert mse([]) == -1, \"failed on empty list\"\nassert mse(np.array([])) == -1, \"failed on empty np.array\"\nassert mse([100, -100, 0]) == 6666.6667, \"failed on mse([100,-100,0])\""}
{"task_id": 494, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        Each row contains the predictions of one base model and each\n        column corresponds to a data sample.\n    classifier : bool, default True\n        True  -> classification  (majority voting)\n        False -> regression      (mean of predictions)\n\n    Returns\n    -------\n    list[int | float]\n        Aggregated predictions.  For regression results are rounded to\n        4 decimal places.\n    \"\"\"\n    arr = np.asarray(preds)\n    if arr.ndim != 2:\n        raise ValueError('`preds` must be a 2-D structure (n_models, n_samples).')\n    if classifier:\n\n        def _majority(col: np.ndarray) -> int:\n            (values, counts) = np.unique(col, return_counts=True)\n            return int(values[np.argmax(counts)])\n        majority_per_sample = np.apply_along_axis(_majority, 0, arr)\n        return majority_per_sample.tolist()\n    else:\n        mean_per_sample = np.round(arr.mean(axis=0), 4)\n        return mean_per_sample.tolist()\nassert aggregate_predictions([[0, 1, 1], [1, 1, 0], [1, 0, 1]], True) == [1, 1, 1], \"failed: aggregate_predictions([...], True) case 1\"\nassert aggregate_predictions([[0, 1], [1, 0]], True) == [0, 0], \"failed: tie-breaking majority voting\"\nassert aggregate_predictions([[2, 2, 3], [3, 2, 3], [3, 3, 3]], True) == [3, 2, 3], \"failed: aggregate_predictions([...], True) case 3\"\nassert aggregate_predictions([[2.5, 3.0], [3.0, 4.0]], False) == [2.75, 3.5], \"failed: aggregate_predictions([...], False) case 4\"\nassert aggregate_predictions([[1.2, 2.2, 3.2], [1.8, 2.8, 3.8], [1.0, 2.0, 3.0]], False) == [1.3333, 2.3333, 3.3333], \"failed: aggregate_predictions([...], False) case 5\"\nassert aggregate_predictions([[1, 0, 1]], True) == [1, 0, 1], \"failed: single model classification\"\nassert aggregate_predictions([[4.123456]], False) == [4.1235], \"failed: single model regression rounding\"\nassert aggregate_predictions([[10, 20], [20, 10], [20, 20]], True) == [20, 20], \"failed: majority voting correctness\"\nassert aggregate_predictions([[-1.5, -2.5], [-2.5, -3.5]], False) == [-2.0, -3.0], \"failed: negative regression values\""}
{"task_id": 495, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) will have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance become all zeros.\n\n    The input array is **not** modified in place.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    means = X.mean(axis=0)\n    stds = X.std(axis=0)\n    safe_stds = np.where(stds == 0, 1, stds)\n    Z = (X - means) / safe_stds\n    Z[:, stds == 0] = 0.0\n    return np.round(Z, 4).tolist()\nassert standardize(np.array([[1, 2], [3, 4], [5, 6]])) == [[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], \"failed on symmetric data\"\nassert standardize(np.array([[1, 2, 3], [1, 5, 3], [1, 8, 3]])) == [[0.0, -1.2247, 0.0], [0.0, 0.0, 0.0], [0.0, 1.2247, 0.0]], \"failed on zero-variance first & third columns\"\nassert standardize(np.array([[10, 10, 10]])) == [[0.0, 0.0, 0.0]], \"failed on single-row input\"\nassert standardize(np.array([[0, -1], [0, -1], [0, -1]])) == [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]], \"failed on identical rows\"\nassert standardize(np.array([[2, 4], [4, 4], [6, 4]])) == [[-1.2247, 0.0], [0.0, 0.0], [1.2247, 0.0]], \"failed on zero-variance second column\"\nassert standardize(np.array([[1], [2], [3], [4]])) == [[-1.3416], [-0.4472], [0.4472], [1.3416]], \"failed on single-column data\"\nassert standardize(np.array([[5, -5], [10, -10]])) == [[-1.0, 1.0], [1.0, -1.0]], \"failed on negative numbers\"\nassert standardize(np.array([[7, 7, 7], [7, 7, 7]])) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed on all-equal matrix\"\nassert standardize(np.array([[1, 2, 3], [4, 5, 6]])) == [[-1.0, -1.0, -1.0], [1.0, 1.0, 1.0]], \"failed on two-row input\"\nassert standardize(np.array([[2, 6], [4, 8], [6, 10]])) == [[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], \"failed on positive correlation columns\""}
{"task_id": 496, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list/array or a scalar.\n        slope: Coefficient multiplying x (default 1.0).\n        intercept: Constant term added to the product (default 0.0).\n\n    Returns:\n        (y, grad, grad2): tuple of three lists (all rounded to 4 decimals)\n            y[i]     = slope * x[i] + intercept\n            grad[i]  = slope\n            grad2[i] = 0\n    \"\"\"\n    arr = np.asarray(x, dtype=float)\n    if arr.ndim == 0:\n        arr = arr.reshape(1)\n    y = slope * arr + intercept\n    grad = np.full(arr.shape, slope, dtype=float)\n    grad2 = np.zeros(arr.shape, dtype=float)\n    y = np.round(y, 4).tolist()\n    grad = np.round(grad, 4).tolist()\n    grad2 = np.round(grad2, 4).tolist()\n    return (y, grad, grad2)\nassert apply_affine([0, 1, 2], 2, 1) == ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0]), \"failed on ([0,1,2],2,1)\"\nassert apply_affine([-1, 0, 1], 0.5, -1) == ([-1.5, -1.0, -0.5], [0.5, 0.5, 0.5], [0.0, 0.0, 0.0]), \"failed on ([-1,0,1],0.5,-1)\"\nassert apply_affine([4]) == ([4.0], [1.0], [0.0]), \"failed on default params ([4])\"\nassert apply_affine([2, 4], -1, 0) == ([-2.0, -4.0], [-1.0, -1.0], [0.0, 0.0]), \"failed on negative slope\"\nassert apply_affine([0.1, 0.2], 3.3333, 0) == ([0.3333, 0.6667], [3.3333, 3.3333], [0.0, 0.0]), \"failed on fractional slope\"\nassert apply_affine([10, 20, 30], 0, 5) == ([5.0, 5.0, 5.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]), \"failed on zero slope\"\nassert apply_affine([1000, -1000], 0.1, 10) == ([110.0, -90.0], [0.1, 0.1], [0.0, 0.0]), \"failed on large magnitude inputs\"\nassert apply_affine([-7], -0.25, 2) == ([3.75], [-0.25], [0.0]), \"failed on single element negative slope\"\nassert apply_affine([0, 0, 0], 3, -2) == ([-2.0, -2.0, -2.0], [3.0, 3.0, 3.0], [0.0, 0.0, 0.0]), \"failed on zeros input\""}
{"task_id": 497, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    arr = np.asarray(x, dtype=float)\n    result = np.exp(arr)\n    result = np.round(result, 6)\n    return result.tolist()\nassert exponential_activation([0, 1]) == [1.0, 2.718282], \"failed on activation 1D list\"\nassert exponential_activation([0, 1], 1) == [1.0, 2.718282], \"failed on first derivative 1D list\"\nassert exponential_activation([0, 1], 2) == [1.0, 2.718282], \"failed on second derivative 1D list\"\nassert exponential_activation([0, 1], 3) == -1, \"failed on invalid order\"\nassert exponential_activation([[0, 1], [2, -1]]) == [[1.0, 2.718282], [7.389056, 0.367879]], \"failed on 2D activation\"\nassert exponential_activation(np.array([[0, -2], [3.5, 4]]), 1) == [[1.0, 0.135335], [33.115452, 54.59815]], \"failed on ndarray first derivative\"\nassert exponential_activation(0) == 1.0, \"failed on scalar input activation\"\nassert exponential_activation(0, 2) == 1.0, \"failed on scalar input second derivative\"\nassert exponential_activation([-1, -1, -1]) == [0.367879, 0.367879, 0.367879], \"failed on repeated values\"\nassert exponential_activation([[1]]) == [[2.718282]], \"failed on single-element 2D list\""}
{"task_id": 498, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value;\n               1 \u2013 return the first derivative;\n               2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* (scalars wrapped in a\n        one-element list) that contains the requested quantity.\n        Returns an empty list if *order* is not 0, 1, or 2.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return []\n    arr = np.asarray(x, dtype=float)\n    if order == 0:\n        result = np.where(arr > 0, arr, alpha * arr)\n    elif order == 1:\n        result = np.where(arr > 0, 1.0, alpha)\n    else:\n        result = np.zeros_like(arr)\n    if result.ndim == 0:\n        return [result.item()]\n    return result.tolist()\nassert leaky_relu([-2, -1, 0, 1, 2], 0.2, 0) == [-0.4, -0.2, 0.0, 1.0, 2.0], \"failed on basic forward values\"\nassert leaky_relu([-2, -1, 0, 1, 2], 0.2, 2) == [0.0, 0.0, 0.0, 0.0, 0.0], \"failed on second derivative\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 0) == [[-0.3, 2.0], [3.0, -1.2]], \"failed on 2D forward\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 1) == [[0.3, 1.0], [1.0, 0.3]], \"failed on 2D derivative\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 2) == [[0.0, 0.0], [0.0, 0.0]], \"failed on 2D second derivative\"\nassert leaky_relu([1,2,3], 0.5, 3) == [], \"failed on invalid order handling\""}
{"task_id": 499, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places.  \n        If *k* is outside the valid range, return \u22121.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D NumPy array.')\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    data = data.astype(float, copy=False)\n    means = data.mean(axis=0)\n    stds = data.std(axis=0, ddof=0)\n    stds_safe = stds.copy()\n    stds_safe[stds_safe == 0] = 1.0\n    Z = (data - means) / stds_safe\n    if n_samples > 1:\n        cov = Z.T @ Z / (n_samples - 1)\n    else:\n        cov = np.zeros((n_features, n_features))\n    (eigvals, eigvecs) = np.linalg.eigh(cov)\n    order = eigvals.argsort()[::-1]\n    eigvals = eigvals[order]\n    eigvecs = eigvecs[:, order]\n    for i in range(eigvecs.shape[1]):\n        v = eigvecs[:, i]\n        if v[np.argmax(np.abs(v))] < 0:\n            eigvecs[:, i] = -v\n    components = eigvecs[:, :k]\n    projected = Z @ components\n    return np.round(projected, 4).tolist()\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[-1.7321], [0.0], [1.7321]], \"test case failed: basic 2D, k=1\"\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 2) == [[-1.7321, 0.0], [0.0, 0.0], [1.7321, 0.0]], \"test case failed: basic 2D, k=2\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[1.4142], [-1.4142]], \"test case failed: identity subset, k=1\"\nassert pca_transform(np.array([[2, 2], [2, 2]]), 1) == [[0.0], [0.0]], \"test case failed: zero variance, k=1\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 3) == -1, \"test case failed: k greater than features\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 0) == -1, \"test case failed: k equals zero\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 1) == [[-1.4142], [1.4142]], \"test case failed: diagonal line, k=1\"\nassert pca_transform(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == [[-2.1213], [0.0], [2.1213]], \"test case failed: collinear 3D, k=1\"\nassert pca_transform(np.array([[1, 2], [1, 2], [1, 2]]), 1) == [[0.0], [0.0], [0.0]], \"test case failed: identical rows\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 2) == [[-1.4142, 0.0], [1.4142, 0.0]], \"test case failed: diagonal line, k=2\""}
{"task_id": 500, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom math import inf\ndef _fit_best_stump(X: np.ndarray, residuals: np.ndarray):\n    \"\"\"Find the decision stump (feature, threshold, left_val, right_val)\n    that minimises the squared error w.r.t. the provided residuals.\"\"\"\n    (n_samples, n_features) = X.shape\n    (best_feature, best_thr) = (None, None)\n    (best_left_val, best_right_val) = (None, None)\n    best_sse = inf\n    for j in range(n_features):\n        f = X[:, j]\n        order = np.argsort(f)\n        f_sorted = f[order]\n        r_sorted = residuals[order]\n        cumsum_r = np.cumsum(r_sorted)\n        cumsum_r2 = np.cumsum(r_sorted ** 2)\n        total_sum = cumsum_r[-1]\n        total_sum2 = cumsum_r2[-1]\n        for i in range(1, n_samples):\n            if f_sorted[i] == f_sorted[i - 1]:\n                continue\n            n_left = i\n            n_right = n_samples - i\n            sum_left = cumsum_r[i - 1]\n            sum_right = total_sum - sum_left\n            sum2_left = cumsum_r2[i - 1]\n            sum2_right = total_sum2 - sum2_left\n            mean_left = sum_left / n_left\n            mean_right = sum_right / n_right\n            sse_left = sum2_left - sum_left ** 2 / n_left\n            sse_right = sum2_right - sum_right ** 2 / n_right\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_feature = j\n                best_thr = 0.5 * (f_sorted[i] + f_sorted[i - 1])\n                best_left_val = mean_left\n                best_right_val = mean_right\n    return (best_feature, best_thr, best_left_val, best_right_val)\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Tiny gradient\u2013boosted binary classifier (decision-stump base learners).\"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_test = np.asarray(X_test, dtype=float)\n    y_train = np.asarray(y_train, dtype=float)\n    n_train = X_train.shape[0]\n    c0 = y_train.mean()\n    F_train = np.full(n_train, c0, dtype=float)\n    F_test = np.full(X_test.shape[0], c0, dtype=float)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F_train\n        (feat, thr, left_val, right_val) = _fit_best_stump(X_train, residuals)\n        stumps.append((feat, thr, left_val, right_val))\n        pred_train = np.where(X_train[:, feat] <= thr, left_val, right_val)\n        pred_test = np.where(X_test[:, feat] <= thr, left_val, right_val)\n        F_train += learning_rate * pred_train\n        F_test += learning_rate * pred_test\n    y_pred = (F_test >= 0.5).astype(int).tolist()\n    return y_pred\nassert gradient_boosting_classifier([[0],[1],[2],[3]],[0,0,1,1],[[0],[3]],20,0.1)==[0,1],\"failed: basic one-dimensional separation\"\nassert gradient_boosting_classifier([[1],[2],[3],[10]],[0,0,1,1],[[2],[9]],15,0.2)==[0,1],\"failed: unequal gap separation\"\nassert gradient_boosting_classifier([[0],[1],[2],[3],[4]],[0,0,0,1,1],[[0.3],[3.7]],25,0.1)==[0,1],\"failed: threshold after three negatives\"\nassert gradient_boosting_classifier([[-3],[-2],[-1],[1],[2],[3]],[0,0,0,1,1,1],[[-2.5],[2.5]],20,0.1)==[0,1],\"failed: negatives versus positives\"\nassert gradient_boosting_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0.1,0.1],[2.5,2.5]],20,0.1)==[0,1],\"failed: two-feature data\"\nassert gradient_boosting_classifier([[i] for i in range(10)],[0]*5+[1]*5,[[0.5],[7.2]],30,0.05)==[0,1],\"failed: larger dataset\"\nassert gradient_boosting_classifier([[1],[1.1],[1.2],[4],[4.1],[4.2]],[0,0,0,1,1,1],[[1.3],[4.05]],25,0.1)==[0,1],\"failed: close clusters\"\nassert gradient_boosting_classifier([[0,5],[0,6],[1,5],[1,6],[10,5],[10,6],[11,5],[11,6]],[0,0,0,0,1,1,1,1],[[0.5,5.5],[10.5,5.5]],20,0.1)==[0,1],\"failed: two-feature well separated\"\nassert gradient_boosting_classifier([[-2],[-1],[0],[1],[2]],[0,0,0,1,1],[[-1.5],[1.5]],20,0.1)==[0,1],\"failed: centred split\"\nassert gradient_boosting_classifier([[0],[1],[2],[3]], [0,0,1,1], [[1.4],[1.6]], 20, 0.1)==[0,1],\"failed: borderline predictions\""}
{"task_id": 501, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr\nassert constant_scheduler(0.01, 0) == 0.01, \"Failed on (0.01, 0)\"\nassert constant_scheduler(0.01, 999) == 0.01, \"Failed on (0.01, 999)\"\nassert constant_scheduler(0.1, 5) == 0.1, \"Failed on (0.1, 5)\"\nassert constant_scheduler(1.0, 1000) == 1.0, \"Failed on (1.0, 1000)\"\nassert constant_scheduler(0.5, -1) == 0.5, \"Failed on (0.5, -1)\"\nassert constant_scheduler(0.0, 10) == 0.0, \"Failed on (0.0, 10)\"\nassert constant_scheduler(1e-6, 123) == 1e-6, \"Failed on (1e-6, 123)\"\nassert constant_scheduler(2.5, 0) == 2.5, \"Failed on (2.5, 0)\"\nassert constant_scheduler(3.1415, 42) == 3.1415, \"Failed on (3.1415, 42)\"\nassert constant_scheduler(0.007, 999999) == 0.007, \"Failed on (0.007, 999999)\""}
{"task_id": 502, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hard_sigmoid(z: np.ndarray, order: int=0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array.\n    order : int, optional\n        0 \u2013 activation (default)\n        1 \u2013 first derivative\n        2 \u2013 second derivative\n\n    Returns\n    -------\n    list[float]\n        Rounded results (4 decimals) as a Python list.\n        Returns an empty list for unsupported *order* values.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return []\n    z = np.asarray(z, dtype=float)\n    if order == 0:\n        out = np.where(z < -2.5, 0.0, np.where(z > 2.5, 1.0, 0.2 * z + 0.5))\n    elif order == 1:\n        out = np.where((-2.5 <= z) & (z <= 2.5), 0.2, 0.0)\n    else:\n        out = np.zeros_like(z)\n    return np.round(out, 4).tolist()\nassert hard_sigmoid(np.array([-3, -1, 0, 1, 3])) == [0.0, 0.3, 0.5, 0.7, 1.0], \"failed: activation basic\"\nassert hard_sigmoid(np.array([-2.5, 2.5])) == [0.0, 1.0], \"failed: activation boundaries\"\nassert hard_sigmoid(np.array([-2.6, 2.6])) == [0.0, 1.0], \"failed: activation outside boundaries\"\nassert hard_sigmoid(np.array([-2.4, 2.4])) == [0.02, 0.98], \"failed: activation inside boundaries\"\nassert hard_sigmoid(np.array([-3, -1, 0, 1, 3]), 1) == [0.0, 0.2, 0.2, 0.2, 0.0], \"failed: derivative basic\"\nassert hard_sigmoid(np.array([-2.5, 2.5]), 1) == [0.2, 0.2], \"failed: derivative boundaries\"\nassert hard_sigmoid(np.array([-2.6, 2.6]), 1) == [0.0, 0.0], \"failed: derivative outside\"\nassert hard_sigmoid(np.array([0]), 1) == [0.2], \"failed: derivative center\"\nassert hard_sigmoid(np.array([-10, 0, 10]), 2) == [0.0, 0.0, 0.0], \"failed: second derivative\"\nassert hard_sigmoid(np.array([1, 2, 3]), 99) == [], \"failed: invalid order\""}
{"task_id": 503, "completion_id": 0, "passed": true, "result": "passed", "solution": "from copy import deepcopy\nfrom copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Return a deep-copied version of *hparams* with selective updates applied.\n\n    Only the keys that already exist in *hparams* are overwritten by *updates*.\n    The original inputs are never modified (purely functional).\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, the function returns -1.\n    updates : dict | None\n        Dictionary containing new values.  Keys not present in *hparams* are\n        ignored.  If None, no changes are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied (and possibly updated) dictionary, or \u22121 if *hparams* is\n        None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    result = deepcopy(hparams)\n    if updates is not None:\n        for (key, value) in updates.items():\n            if key in result:\n                result[key] = value\n    return result\nassert selective_update({'lr': 0.1, 'momentum': 0.9}, {'lr': 0.01, 'weight_decay': 0.0001}) == {'lr': 0.01, 'momentum': 0.9}, \"failed: basic selective update\"\nassert selective_update({'lr': 0.1, 'momentum': 0.9}, None) == {'lr': 0.1, 'momentum': 0.9}, \"failed: updates is None\"\nassert selective_update(None, {'lr': 0.2}) == -1, \"failed: hparams is None\"\nassert selective_update({'a': 1}, {'b': 2}) == {'a': 1}, \"failed: update with non-existent key\"\nassert selective_update({}, {'anything': 1}) == {}, \"failed: empty hparams\"\nassert selective_update({'depth': 3, 'min_samples': 2}, {}) == {'depth': 3, 'min_samples': 2}, \"failed: empty updates\"\nassert selective_update({'x': {'y': 1}}, {'x': {'y': 2}}) == {'x': {'y': 2}}, \"failed: nested dictionary update\"\nassert selective_update({'alpha': 0.5, 'beta': 0.1}, {'alpha': 0.6, 'gamma': 1}) == {'alpha': 0.6, 'beta': 0.1}, \"failed: mixed valid/invalid keys\"\nassert selective_update({'only': 1}, {'only': 2, 'extra': 3}) == {'only': 2}, \"failed: extra key ignored\"\nassert selective_update({'k1': 5, 'k2': 6, 'k3': 7}, {'k1': 9, 'k2': 8}) == {'k1': 9, 'k2': 8, 'k3': 7}, \"failed: multiple key update\""}
{"task_id": 505, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM (probabilities only).\"\"\"\n    if X.size == 0:\n        return []\n    m = X.shape[0]\n\n    def _sigmoid(a: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-a))\n    h_prob = _sigmoid(X @ W + hbias)\n    pos_grad = X.T @ h_prob\n    for _ in range(k):\n        v_prob = _sigmoid(h_prob @ W.T + vbias)\n        h_prob = _sigmoid(v_prob @ W + hbias)\n    neg_grad = v_prob.T @ h_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.1, 1) == [[0.1007, -0.1997], [-0.0003, 0.0499], [-0.1006, 0.199]], \"test case failed: mixed mini-batch update\"\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.0, 1) == [[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]], \"test case failed: learning_rate = 0 should keep weights unchanged\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 1.0, 1) == [[-0.25, -0.25], [-0.25, -0.25]], \"test case failed: zero input should drive weights negative\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 0.0, 1) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: no-update expected with lr=0\"\nassert contrastive_divergence(np.array([[1.0, 1.0]]), np.array([[0.0], [0.0]]), np.zeros(1), np.zeros(2), 0.1, 1) == [[0.025], [0.025]], \"test case failed: ones input update\"\nassert contrastive_divergence(np.array([[1.0, 0.0, 0.0]]), np.zeros((3, 1)), np.zeros(1), np.zeros(3), 1.0, 1) == [[0.25], [-0.25], [-0.25]], \"test case failed: directional update\"\nassert contrastive_divergence(np.array([[0.0, 1.0]]), np.zeros((2, 1)), np.zeros(1), np.zeros(2), 0.5, 1) == [[-0.125], [0.125]], \"test case failed: lr=0.5 update\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.1, 1) == [[0.0737]], \"test case failed: decay on inactive visible node\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.0, 1) == [[0.1]], \"test case failed: learning_rate 0 with 1\u00d71 matrix\"\nassert contrastive_divergence(np.array([[1.0]]), np.array([[0.0]]), np.zeros(1), np.zeros(1), 0.2, 1) == [[0.05]], \"test case failed: 1\u00d71 positive update with lr=0.2\""}
{"task_id": 508, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import Any, Dict, List\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The original insertion order of the dictionary is preserved.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to search for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).  \n        Returns an empty list if no key matches.\n    \"\"\"\n    return [value for (key, value) in params.items() if name in key]\nassert params_with_name({'weight1': 0.2, 'bias': 1.0, 'weight2': 0.8}, 'weight') == [0.2, 0.8], \"Test case failed: basic filtering\"\nassert params_with_name({'w': 5, 'weight': 10, 'bias': 1}, 'weight') == [10], \"Test case failed: single match\"\nassert params_with_name({'Weight1': 7, 'weight2': 3}, 'weight') == [3], \"Test case failed: case sensitivity\"\nassert params_with_name({'a': 1, 'b': 2, 'c': 3}, '') == [1, 2, 3], \"Test case failed: empty substring should return all values\"\nassert params_with_name({'alpha': 1, 'beta': 2}, 'gamma') == [], \"Test case failed: no key contains substring\"\nassert params_with_name({}, 'anything') == [], \"Test case failed: empty dictionary\"\nassert params_with_name({'x_weight': 4, 'weight_y': 5, 'w_z': 6}, 'weight') == [4, 5], \"Test case failed: substring appears in multiple positions\"\nassert params_with_name({'one': 1, 'two': 2, 'three': 3}, 'o') == [1, 2], \"Test case failed: overlapping substring matches\"\nassert params_with_name({'first': 'a', 'second': 'b', 'third': 'c'}, 'ir') == ['a', 'c'], \"Test case failed: non-numeric values\"\nassert params_with_name({'abc': 1, 'def': 2, 'ghi': 3}, 'xyz') == [], \"Test case failed: substring not present in any key\""}
{"task_id": 509, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float).ravel()\n    y_arr = np.asarray(y, dtype=float).ravel()\n    if x_arr.size != y_arr.size:\n        return -1.0\n    dist = np.max(np.abs(x_arr - y_arr))\n    return float(round(dist, 4))\nassert chebyshev([1, 2, 3], [2, 4, 6]) == 3.0, \"failed for ([1,2,3],[2,4,6])\"\nassert chebyshev([0, 0, 0], [0, 0, 0]) == 0.0, \"failed for zero vectors\"\nassert chebyshev([-1, -2, -3], [1, 2, 3]) == 6.0, \"failed for negatives\"\nassert chebyshev([1.5, 2.5], [1.4, 2.7]) == 0.2, \"failed for floats\"\nassert chebyshev(np.array([1, 2, 3]), np.array([1, 3, 5])) == 2.0, \"failed for numpy arrays\"\nassert chebyshev([1], [10]) == 9.0, \"failed for single-element vectors\"\nassert chebyshev([0.12345], [0.12344]) == 0.0, \"failed for rounding requirement\"\nassert chebyshev([1, 2, 3], [1, 2]) == -1, \"failed for length mismatch\""}
{"task_id": 510, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    Returns the mini-batch average of the binary cross-entropy reconstruction\n    loss plus the analytical KL divergence, rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1.0 - eps)\n    recon_element = -y * np.log(y_pred_clipped) - (1.0 - y) * np.log(1.0 - y_pred_clipped)\n    recon_loss = recon_element.sum(axis=1)\n    kl_element = 1.0 + t_log_var - np.square(t_mean) - np.exp(t_log_var)\n    kl_loss = -0.5 * kl_element.sum(axis=1)\n    total_loss = recon_loss + kl_loss\n    batch_mean_loss = total_loss.mean()\n    return round(float(batch_mean_loss), 6)\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.9,0.2],[0.1,0.8]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.328504, \"test case failed: basic reconstruction only\"\nassert vae_loss(np.array([[1,1],[0,0]]),\n                 np.array([[0.8,0.7],[0.3,0.2]]),\n                 np.array([[0.2,-0.1],[-0.3,0.5]]),\n                 np.array([[-0.2,0.1],[0.1,-0.3]])) == 0.694791, \"test case failed: reconstruction + KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.5]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 0.693147, \"test case failed: single element, zero KL\"\nassert vae_loss(np.array([[1,0,1]]),\n                 np.array([[0.9,0.1,0.4]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 1.127012, \"test case failed: three features, no KL\"\nassert vae_loss(np.array([[1,0],[1,0]]),\n                 np.array([[0.7,0.3],[0.6,0.4]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.867501, \"test case failed: batch size 2, no KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.8]]),\n                 np.array([[0.5]]),\n                 np.array([[-0.1]])) == 0.350562, \"test case failed: single element with KL\"\nassert vae_loss(np.array([[0]]),\n                 np.array([[0.2]]),\n                 np.array([[0.0]]),\n                 np.array([[0.2]])) == 0.233845, \"test case failed: y=0 with KL\"\nassert vae_loss(np.array([[0,1,0,1]]),\n                 np.array([[0.2,0.9,0.4,0.8]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 1.062473, \"test case failed: four features, no KL\"\nassert vae_loss(np.array([[1,1,1]]),\n                 np.array([[0.5,0.5,0.5]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 2.079442, \"test case failed: three identical probabilities\"\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.55,0.45],[0.45,0.55]]),\n                 np.array([[0.1,-0.1],[0.2,0.3]]),\n                 np.zeros((2,2))) == 1.233174, \"test case failed: mixed KL values\""}
{"task_id": 511, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_bernoulli_mab(n_arms: int=10) -> list[float]:\n    \"\"\"\n    Build a random Bernoulli multi-armed bandit environment.\n\n    Parameters\n    ----------\n    n_arms : int, default=10\n        Number of arms in the bandit.  If `n_arms` is less than 1, an\n        empty list is returned.\n\n    Returns\n    -------\n    list[float]\n        List of success probabilities (rounded to 4 decimal places)\n        whose pre-rounding values sum to 1.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    samples = np.random.rand(n_arms)\n    probs = samples / samples.sum()\n    return np.round(probs, 4).tolist()\nnp.random.seed(0); assert random_bernoulli_mab(5) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(0).uniform(size=5)), \"test failed: seed 0, n=5\"\nnp.random.seed(1); assert random_bernoulli_mab(10) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(1).uniform(size=10)), \"test failed: seed 1, n=10\"\nnp.random.seed(42); assert random_bernoulli_mab(3) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(42).uniform(size=3)), \"test failed: seed 42, n=3\"\nnp.random.seed(123); assert random_bernoulli_mab(7) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(123).uniform(size=7)), \"test failed: seed 123, n=7\"\nnp.random.seed(999); assert random_bernoulli_mab(4) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(999).uniform(size=4)), \"test failed: seed 999, n=4\"\nnp.random.seed(2021); assert random_bernoulli_mab(8) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(2021).uniform(size=8)), \"test failed: seed 2021, n=8\"\nnp.random.seed(314); assert random_bernoulli_mab(6) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(314).uniform(size=6)), \"test failed: seed 314, n=6\"\nnp.random.seed(1234); assert random_bernoulli_mab(2) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(1234).uniform(size=2)), \"test failed: seed 1234, n=2\"\nnp.random.seed(8888); assert random_bernoulli_mab(9) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(8888).uniform(size=9)), \"test failed: seed 8888, n=9\"\nnp.random.seed(77);  assert random_bernoulli_mab(1) == [1.0], \"test failed: seed 77, n=1\""}
{"task_id": 512, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D no-padding pooling layer.\n\n    out_h = (h - k_h) / s_h + 1\n    out_w = (w - k_w) / s_w + 1\n\n    Return (out_h, out_w) when both are integers and the kernel fits,\n    otherwise return -1.\n    \"\"\"\n    try:\n        (k_h, k_w) = pool_shape\n        (_, _, h, w) = image_shape\n        (s_h, s_w) = stride\n    except ValueError:\n        return -1\n    if k_h <= 0 or k_w <= 0 or s_h <= 0 or (s_w <= 0):\n        return -1\n    if k_h > h or k_w > w:\n        return -1\n    num_h = h - k_h\n    num_w = w - k_w\n    if num_h % s_h or num_w % s_w:\n        return -1\n    out_h = num_h // s_h + 1\n    out_w = num_w // s_w + 1\n    return (out_h, out_w)\nassert pooling_shape((2, 2), (10, 3, 28, 28), (2, 2)) == (14, 14), \"failed on (2,2) kernel, (28,28) input, stride (2,2)\"\nassert pooling_shape((3, 3), (1, 1, 28, 28), (2, 2)) == -1, \"should fail because (28-3) is not divisible by 2\"\nassert pooling_shape((30, 3), (4, 5, 28, 28), (1, 1)) == -1, \"kernel taller than input height\"\nassert pooling_shape((3, 3), (2, 3, 32, 32), (1, 1)) == (30, 30), \"stride 1, 3x3 kernel on 32x32 input\"\nassert pooling_shape((8, 8), (2, 16, 64, 64), (8, 8)) == (8, 8), \"kernel equal to stride\"\nassert pooling_shape((3, 3), (1, 1, 7, 7), (2, 2)) == (3, 3), \"7x7 input with 3x3 kernel and stride 2\"\nassert pooling_shape((3, 5), (1, 1, 20, 20), (2, 2)) == -1, \"width not divisible\"\nassert pooling_shape((1, 1), (1, 1, 1, 1), (1, 1)) == (1, 1), \"trivial 1x1 case\"\nassert pooling_shape((2, 4), (3, 3, 10, 20), (2, 4)) == (5, 5), \"different strides for h and w\""}
{"task_id": 513, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix (n_samples \u00d7 n_features) given as a list of lists.\n        w0: Global bias term.\n        w: Linear weights (length = n_features).\n        V: Latent factor matrix (n_features \u00d7 k).\n\n    Returns:\n        List with one prediction per sample, rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    w = np.asarray(w, dtype=float)\n    V = np.asarray(V, dtype=float)\n    linear_term = w0 + X @ w\n    XV = X @ V\n    X2_V2 = X ** 2 @ V ** 2\n    interaction_term = 0.5 * np.sum(XV ** 2 - X2_V2, axis=1)\n    y_hat = linear_term + interaction_term\n    return np.round(y_hat, 4).tolist()\nassert fm_predict([[1, 0], [0, 1], [1, 1]], 0.5, [1, 2], [[0.1, 0.2], [0.3, 0.4]]) == [1.5, 2.5, 3.61], \"test case failed: basic example\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[1], [1]]) == [2.0], \"test case failed: interaction only\"\nassert fm_predict([[3, 4]], 1.0, [-1, -1], [[0, 0], [0, 0]]) == [-6.0], \"test case failed: no interactions\"\nassert fm_predict([[1, 1], [2, 2]], 0.0, [1, 1], [[0.5], [0.5]]) == [2.25, 5.0], \"test case failed: repeated sample\"\nassert fm_predict([[0, 0]], 0.0, [1, 2], [[0, 0], [0, 0]]) == [0.0], \"test case failed: all zeros\"\nassert fm_predict([[1, 3]], 2.0, [0, 1], [[-0.5], [0.5]]) == [4.25], \"test case failed: negative factors\"\nassert fm_predict([[1, 2, 3], [0, 1, 0]], 0.1, [1, -1, 0.5], [[0.2, 0.3], [0.4, 0.1], [0.5, 0.7]]) == [3.37, -0.9], \"test case failed: 3 features, 2 factors\"\nassert fm_predict([[2]], -1.0, [1], [[0.5]]) == [1.0], \"test case failed: single feature\"\nassert fm_predict([[1, 0], [0, 0], [0, 1]], 0.0, [1, 1], [[0, 0], [0, 0]]) == [1.0, 0.0, 1.0], \"test case failed: mixed zeros\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[0.5], [1.5]]) == [1.5], \"test case failed: fractional interaction\""}
{"task_id": 514, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str:\n    \"\"\"Update the training/testing phase.\n    \n    See task description for full specification.\n    \"\"\"\n    if current_phase not in ('training', 'testing'):\n        return -1\n    if set_train is not None and set_test is not None:\n        return -1\n    if set_train is not None and (not isinstance(set_train, bool)):\n        return -1\n    if set_test is not None and (not isinstance(set_test, bool)):\n        return -1\n    if set_train is not None:\n        return 'training' if set_train else 'testing'\n    if set_test is not None:\n        return 'testing' if set_test else 'training'\n    return 'testing' if current_phase == 'training' else 'training'\nassert switch_phase(\"training\", set_test=True) == \"testing\", \"failed: switch_phase('training', set_test=True)\"\nassert switch_phase(\"testing\", set_train=True) == \"training\", \"failed: switch_phase('testing', set_train=True)\"\nassert switch_phase(\"training\") == \"testing\", \"failed: switch_phase('training')\"\nassert switch_phase(\"testing\") == \"training\", \"failed: switch_phase('testing')\"\nassert switch_phase(\"training\", set_train=False) == \"testing\", \"failed: switch_phase('training', set_train=False)\"\nassert switch_phase(\"testing\", set_test=False) == \"training\", \"failed: switch_phase('testing', set_test=False)\"\nassert switch_phase(\"training\", set_train=True) == \"training\", \"failed: switch_phase('training', set_train=True)\"\nassert switch_phase(\"training\", set_train=True, set_test=False) == -1, \"failed: simultaneous switches should return -1\"\nassert switch_phase(\"validate\") == -1, \"failed: invalid phase string should return -1\"\nassert switch_phase(\"training\", set_test=True) == \"testing\", \"failed: set_test should override current phase\""}
{"task_id": 515, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Any, Dict\nfrom typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Return a flattened (dot\u2010separated) copy of a potentially nested\n    parameter dictionary.\n\n    The function is purely functional: the *input dictionary is never\n    mutated*; instead a brand-new flat dictionary is produced.\n\n    Examples\n    --------\n    >>> params = {\n    ...     \"optimizer\": {\n    ...         \"type\": \"SGD\",\n    ...         \"config\": {\"lr\": 0.01, \"momentum\": 0.9}\n    ...     },\n    ...     \"epochs\": 25\n    ... }\n    >>> flatten_parameters(params)\n    {'optimizer.type': 'SGD',\n     'optimizer.config.lr': 0.01,\n     'optimizer.config.momentum': 0.9,\n     'epochs': 25}\n    \"\"\"\n\n    def _recurse(current: Dict[str, Any], prefix: str, out: Dict[str, Any]) -> None:\n        \"\"\"Recursive helper that populates `out` in-place.\"\"\"\n        for (key, value) in current.items():\n            full_key = f'{prefix}.{key}' if prefix else key\n            if isinstance(value, dict):\n                _recurse(value, full_key, out)\n            else:\n                out[full_key] = value\n    flat: Dict[str, Any] = {}\n    _recurse(params, prefix='', out=flat)\n    return flat\n# basic empty dictionary\\nassert flatten_parameters({}) == {}, \"failed on empty dict\"\n# single level\\nassert flatten_parameters({\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}, \"failed on single level dict\"\n# two levels\\nassert flatten_parameters({\"outer\": {\"inner\": 5}}) == {\"outer.inner\": 5}, \"failed on two level dict\"\n# multi level\\nassert flatten_parameters({\"x\": {\"y\": {\"z\": 0}}}) == {\"x.y.z\": 0}, \"failed on multi level dict\"\n# mixed types\\nassert flatten_parameters({\"a\": {\"b\": [1, 2, 3]}, \"c\": \"text\"}) == {\"a.b\": [1, 2, 3], \"c\": \"text\"}, \"failed on list and string values\"\n# keys containing dots\\nassert flatten_parameters({\"a.b\": {\"c\": 7}}) == {\"a.b.c\": 7}, \"failed when keys already contain dots\"\n# sibling branches\\nassert flatten_parameters({\"k1\": {\"x\": 1}, \"k2\": {\"y\": 2}}) == {\"k1.x\": 1, \"k2.y\": 2}, \"failed on sibling branches\"\n# boolean values\\nassert flatten_parameters({\"flag\": True, \"config\": {\"enabled\": False}}) == {\"flag\": True, \"config.enabled\": False}, \"failed on boolean values\"\n# numeric types\\nassert flatten_parameters({\"nums\": {\"int\": 1, \"float\": 2.5}}) == {\"nums.int\": 1, \"nums.float\": 2.5}, \"failed on numeric types\"\n# original dict not mutated\\norig = {\"a\": {\"b\": 1}}\\n_ = flatten_parameters(orig)\\nassert orig == {\"a\": {\"b\": 1}}, \"input dictionary was mutated\""}
{"task_id": 516, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    a_arr = np.asarray(a, dtype=float).ravel()\n    b_arr = np.asarray(b, dtype=float).ravel()\n    if a_arr.size != b_arr.size:\n        return -1\n    distance = np.linalg.norm(a_arr - b_arr)\n    return round(float(distance), 4)\nassert euclidean_distance([1, 2, 3], [4, 5, 6]) == 5.1962, \"failed on [1,2,3] vs [4,5,6]\"\nassert euclidean_distance(np.array([0, 0]), np.array([0, 0])) == 0.0, \"failed on identical zeros\"\nassert euclidean_distance([3, 4], [0, 0]) == 5.0, \"failed on 3-4-5 triangle\"\nassert euclidean_distance([-1, -1], [1, 1]) == 2.8284, \"failed on negative coordinates\"\nassert euclidean_distance([1.2, 3.4], [5.6, 7.8]) == 6.2225, \"failed on float inputs\"\nassert euclidean_distance([1, 2, 3], [1, 2]) == -1, \"failed on mismatched length\"\nassert euclidean_distance([1, 2, 3, 4, 5], [1, 1, 1, 1, 1]) == 5.4772, \"failed on 5-D vectors\"\nassert euclidean_distance([0.5, -0.5, 1.5], [-0.5, 0.5, -1.5]) == 3.3166, \"failed on mixed sign vectors\"\nassert euclidean_distance(np.array([10]), np.array([0])) == 10.0, \"failed on single-element arrays\"\nassert euclidean_distance([0, 0, 0], [0, 0, 0]) == 0.0, \"failed on all zeros\""}
{"task_id": 517, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute a numerically-stable, element-wise sigmoid activation.\n\n    Parameters\n    ----------\n    z : int | float | list | tuple | numpy.ndarray\n        Input value(s).\n\n    Returns\n    -------\n    float | list\n        If `z` is a scalar a Python float is returned, otherwise a (nested)\n        list whose elements are the sigmoid of the corresponding entries in\n        `z`, rounded to four decimal places.\n    \"\"\"\n    arr = np.asarray(z, dtype=np.float64)\n    out = np.empty_like(arr)\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n    out[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    exp_x = np.exp(arr[neg_mask])\n    out[neg_mask] = exp_x / (1.0 + exp_x)\n    out = np.round(out, 4)\n    if out.ndim == 0:\n        return float(out)\n    else:\n        return out.tolist()\nassert sigmoid(0) == 0.5, \"test case failed: sigmoid(0)\"\nassert sigmoid(5) == 0.9933, \"test case failed: sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"test case failed: sigmoid(-5)\"\nassert sigmoid(100) == 1.0, \"test case failed: sigmoid(100)\"\nassert sigmoid(-100) == 0.0, \"test case failed: sigmoid(-100)\"\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test case failed: sigmoid([-1,0,1])\"\nassert sigmoid(np.array([2, -2, 0.5, -0.5])) == [0.8808, 0.1192, 0.6225, 0.3775], \"test case failed: sigmoid([2,-2,0.5,-0.5])\"\nassert sigmoid([[0, 10], [-10, 1]]) == [[0.5, 1.0], [0.0, 0.7311]], \"test case failed: sigmoid([[0,10],[-10,1]])\"\nassert sigmoid([700, -700]) == [1.0, 0.0], \"test case failed: sigmoid([700,-700])\"\nassert sigmoid(np.array([[3]])) == [[0.9526]], \"test case failed: sigmoid([[3]])\""}
{"task_id": 518, "completion_id": 0, "passed": false, "result": "failed: name '_accuracy' is not defined", "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\nfrom functools import wraps\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D NumPy array whose second\n    dimension is larger than one, it is assumed to be one-hot encoded and is\n    replaced by the index of the maximum value along axis 1 before the wrapped\n    *function* is executed.\n    \"\"\"\n\n    def _decode(arr: np.ndarray) -> np.ndarray:\n        \"\"\"Return a 1-D label array if *arr* looks like one-hot, else *arr*.\"\"\"\n        if isinstance(arr, np.ndarray) and arr.ndim == 2 and (arr.shape[1] > 1):\n            return arr.argmax(axis=1)\n        return arr\n\n    @wraps(function)\n    def wrapper(actual: np.ndarray, predicted: np.ndarray, *args, **kwargs):\n        actual_decoded = _decode(actual)\n        predicted_decoded = _decode(predicted)\n        return function(actual_decoded, predicted_decoded, *args, **kwargs)\n    return wrapper\nassert abs(_accuracy(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[0,1,0],[0,0,1]])) - 0.6667) < 1e-4, \"test case failed: accuracy with both inputs one-hot\"\nassert abs(_accuracy(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]])) - 1.0) < 1e-9, \"test case failed: perfect match one-hot\"\nassert abs(_accuracy(np.array([0,1,1,0]), np.array([[1,0],[0,1],[0,1],[1,0]])) - 1.0) < 1e-9, \"test case failed: actual labels, predicted one-hot\"\nassert abs(_accuracy(np.array([[0,0,1],[1,0,0],[0,1,0]]), np.array([2,0,1])) - 1.0) < 1e-9, \"test case failed: actual one-hot, predicted labels\"\nassert abs(_accuracy(np.array([[1,0],[0,1],[1,0],[0,1]]), np.array([[1,0],[1,0],[1,0],[0,1]])) - 0.75) < 1e-9, \"test case failed: two-class partial mismatch\"\nassert _collect(np.array([[2],[0],[1]]), np.array([[2],[0],[1]])) == ([[2],[0],[1]], [[2],[0],[1]]), \"test case failed: shape (n,1) should remain unchanged\"\nassert _collect(np.array([1,0,2]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2], [1,0,2]), \"test case failed: mixed dimensionalities\"\nassert _collect(np.eye(5, dtype=int), np.eye(5, dtype=int))[0] == [0,1,2,3,4], \"test case failed: five-class eye matrix\"\nassert _collect(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2],[1,0,2]), \"test case failed: explicit conversion check\"\nassert _collect(np.array([3,1,4,1,5]), np.array([3,1,4,1,5])) == ([3,1,4,1,5],[3,1,4,1,5]), \"test case failed: 1-D labels untouched\""}
{"task_id": 520, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (1,2) (0,) ", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).\n    The derivative is computed element-wise as z * (1 - z) and rounded\n    to 4 decimal places.\n\n    Args:\n        z: float, list, or NumPy ndarray holding sigmoid outputs.\n\n    Returns:\n        float if *z* is a scalar; otherwise a (nested) list with the same\n        shape as *z*, each value rounded to 4 decimals.\n    \"\"\"\n    if z == []:\n        return []\n    arr = np.asarray(z, dtype=float)\n    grad = np.round(arr * (1.0 - arr), 4)\n    return float(grad) if grad.ndim == 0 else grad.tolist()\nassert sigmoid_grad(0.5) == 0.25, \"failed on scalar 0.5\"\nassert sigmoid_grad(0.8) == 0.16, \"failed on scalar 0.8\"\nassert sigmoid_grad([0.5, 0.8]) == [0.25, 0.16], \"failed on list [0.5,0.8]\"\nassert sigmoid_grad([[0.5, 0.4], [0.7, 0.3]]) == [[0.25, 0.24], [0.21, 0.21]], \"failed on 2D list\"\nassert sigmoid_grad(0.0) == 0.0, \"failed on boundary 0.0\"\nassert sigmoid_grad(1.0) == 0.0, \"failed on boundary 1.0\"\nassert sigmoid_grad([0.2, 0.4, 0.6, 0.8]) == [0.16, 0.24, 0.24, 0.16], \"failed on list [0.2,0.4,0.6,0.8]\"\nassert sigmoid_grad([0.7310586]) == [0.1966], \"failed on list [0.7310586]\"\nassert sigmoid_grad([]) == [], \"failed on empty list\"\nassert sigmoid_grad(np.array([[0.25, 0.75]])) == [[0.1875, 0.1875]], \"failed on numpy input\""}
{"task_id": 521, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu_grad(z):\n    \"\"\"Element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    z : scalar, list, or np.ndarray\n        Input data.\n\n    Returns\n    -------\n    int or list\n        0/1 values that match the shape of `z`.\n    \"\"\"\n    if np.isscalar(z) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        return int(z > 0)\n    arr = np.asarray(z)\n    grad = (arr > 0).astype(int)\n    return grad.tolist()\nassert relu_grad([-2,-1,0,1,3])==[0,0,0,1,1],\"failed on list input [-2,-1,0,1,3]\"\nassert relu_grad([0,0,0])==[0,0,0],\"failed on all-zero list\"\nassert relu_grad([10,-10,0.5,-0.2])==[1,0,1,0],\"failed on mixed sign list\"\nassert relu_grad([[-1,2],[0,-0.3]])==[[0,1],[0,0]],\"failed on 2-D list\"\nassert relu_grad(5)==1,\"failed on positive scalar 5\"\nassert relu_grad(-4)==0,\"failed on negative scalar -4\"\nassert relu_grad(np.array([-3.2,4.7]))==[0,1],\"failed on 1-D ndarray\"\nassert relu_grad(0)==0,\"failed on scalar zero\"\nassert relu_grad([[0,1,2],[-1,-2,3]])==[[0,1,1],[0,0,1]],\"failed on nested list with various values\"\nassert relu_grad([[0,0],[0,0]])==[[0,0],[0,0]],\"failed on all-zero 2-D list\""}
{"task_id": 522, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with N(0,1) samples.\n\n    The NumPy random seed is reset to 42 on every call, the generated\n    values are rounded to 4 decimal places and the final result is\n    converted to a (nested) Python list.\n\n    Parameters\n    ----------\n    weight_shape : int | tuple[int, ...] | list[int]\n        Desired tensor shape.\n\n    Returns\n    -------\n    list\n        Nested Python list containing the rounded samples.\n    \"\"\"\n    np.random.seed(42)\n    if isinstance(weight_shape, int):\n        shape = (weight_shape,)\n    else:\n        shape = tuple(weight_shape)\n    arr = np.random.standard_normal(shape)\n    arr = np.round(arr, 4)\n    return arr.tolist()\nassert standard_normal((2, 3)) == [[0.4967, -0.1383, 0.6477], [1.523, -0.2342, -0.2341]], \"test case failed: standard_normal((2, 3))\"\nassert standard_normal((4,)) == [0.4967, -0.1383, 0.6477, 1.523], \"test case failed: standard_normal((4,))\"\nassert standard_normal((3, 1)) == [[0.4967], [-0.1383], [0.6477]], \"test case failed: standard_normal((3, 1))\"\nassert standard_normal((1, 1)) == [[0.4967]], \"test case failed: standard_normal((1, 1))\"\nassert standard_normal((5,)) == [0.4967, -0.1383, 0.6477, 1.523, -0.2342], \"test case failed: standard_normal((5,))\"\nassert standard_normal((6,)) == [0.4967, -0.1383, 0.6477, 1.523, -0.2342, -0.2341], \"test case failed: standard_normal((6,))\"\nassert standard_normal((3, 2)) == [[0.4967, -0.1383], [0.6477, 1.523], [-0.2342, -0.2341]], \"test case failed: standard_normal((3, 2))\"\nassert standard_normal((2, 2)) == [[0.4967, -0.1383], [0.6477, 1.523]], \"test case failed: standard_normal((2, 2))\"\nassert standard_normal((2,)) == [0.4967, -0.1383], \"test case failed: standard_normal((2,))\"\nassert standard_normal((3, 4)) == [[0.4967, -0.1383, 0.6477, 1.523], [-0.2342, -0.2341, 1.5792, 0.7674], [-0.4695, 0.5426, -0.4634, -0.4657]], \"test case failed: standard_normal((3, 4))\""}
{"task_id": 523, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal (Kaiming normal) distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For a dense layer this\n            is usually (fan_in, fan_out). For a 2-D convolution it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        fan_in = weight_shape[0]\n    std = (2.0 / fan_in) ** 0.5\n    weights = np.random.randn(*weight_shape) * std\n    rounded = np.round(weights, 4)\n    return rounded.tolist()\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/2), (2, 2))\nnp.random.seed(0)\nassert np.allclose(he_normal((2, 2)), np.round(expected, 4)), \"test case failed: he_normal((2, 2))\"\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/4), (4, 3))\nnp.random.seed(0)\nassert np.allclose(he_normal((4, 3)), np.round(expected, 4)), \"test case failed: he_normal((4, 3))\"\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/27), (3, 3, 3, 16))\nnp.random.seed(0)\nassert np.allclose(he_normal((3, 3, 3, 16)), np.round(expected, 4)), \"test case failed: he_normal((3, 3, 3, 16))\"\nnp.random.seed(42)\nexpected = np.random.normal(0, np.sqrt(2/25), (5, 5, 1, 32))\nnp.random.seed(42)\nassert np.allclose(he_normal((5, 5, 1, 32)), np.round(expected, 4)), \"test case failed: he_normal((5, 5, 1, 32))\"\nnp.random.seed(7)\nexpected = np.random.normal(0, np.sqrt(2/1), (1, 1))\nnp.random.seed(7)\nassert np.allclose(he_normal((1, 1)), np.round(expected, 4)), \"test case failed: he_normal((1, 1))\"\nnp.random.seed(1)\nexpected = np.random.normal(0, np.sqrt(2/7), (7, 1))\nnp.random.seed(1)\nassert np.allclose(he_normal((7, 1)), np.round(expected, 4)), \"test case failed: he_normal((7, 1))\"\nnp.random.seed(3)\nexpected = np.random.normal(0, np.sqrt(2/4), (2, 2, 1, 1))\nnp.random.seed(3)\nassert np.allclose(he_normal((2, 2, 1, 1)), np.round(expected, 4)), \"test case failed: he_normal((2, 2, 1, 1))\"\nnp.random.seed(11)\nexpected = np.random.normal(0, np.sqrt(2/8), (8, 8))\nnp.random.seed(11)\nassert np.allclose(he_normal((8, 8)), np.round(expected, 4)), \"test case failed: he_normal((8, 8))\"\nnp.random.seed(5)\nexpected = np.random.normal(0, np.sqrt(2/(3*3*64)), (3, 3, 64, 128))\nnp.random.seed(5)\nassert np.allclose(he_normal((3, 3, 64, 128)), np.round(expected, 4)), \"test case failed: he_normal((3, 3, 64, 128))\"\nnp.random.seed(21)\nexpected = np.random.normal(0, np.sqrt(2/10), (10, 4))\nnp.random.seed(21)\nassert np.allclose(he_normal((10, 4)), np.round(expected, 4)), \"test case failed: he_normal((10, 4))\""}
{"task_id": 525, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X: np.ndarray, y: np.ndarray, lambda_: float=0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model in closed form.\n\n    Args:\n        X: (m, n) design matrix.\n        y: (m,) target vector (or (m, 1)).\n        lambda_: Non-negative regularisation strength.\n\n    Returns\n    -------\n        weights: list of length n with the coefficients (rounded to 4 dp).\n        bias:    scalar intercept term (rounded to 4 dp).\n    \"\"\"\n    if lambda_ < 0:\n        raise ValueError('lambda_ must be non-negative')\n    if X.ndim != 2:\n        raise ValueError('X must be a 2-D array')\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    (m, n) = X.shape\n    if y.shape[0] != m:\n        raise ValueError('X and y have incompatible lengths')\n    x_mean = X.mean(axis=0)\n    y_mean = y.mean()\n    Xc = X - x_mean\n    yc = y - y_mean\n    A = Xc.T @ Xc\n    A += lambda_ * np.eye(n)\n    w = np.linalg.pinv(A) @ Xc.T @ yc\n    b = y_mean - x_mean @ w\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded)\nassert ridge_regression(np.array([[1],[2],[3]],dtype=float), np.array([[3],[5],[7]],dtype=float), 0.0) == ([2.0], 1.0), \"test case failed: simple 1-D \u03bb=0\"\nassert ridge_regression(np.array([[1],[2],[3]],dtype=float), np.array([[3],[5],[7]],dtype=float), 1.0) == ([1.3333], 2.3333), \"test case failed: simple 1-D \u03bb=1\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[3,1]],dtype=float), np.array([[5],[10],[0],[11]],dtype=float), 0.0) == ([3.0,-2.0], 4.0), \"test case failed: 2-D \u03bb=0\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[3,1]],dtype=float), np.array([[5],[10],[0],[11]],dtype=float), 1.0) == ([2.6429,-1.5714], 4.1071), \"test case failed: 2-D \u03bb=1\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[1],[3],[5],[7]],dtype=float), 0.0) == ([2.0], 1.0), \"test case failed: extended 1-D \u03bb=0\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[1],[3],[5],[7]],dtype=float), 1.0) == ([1.6667], 1.5), \"test case failed: extended 1-D \u03bb=1\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,3],[5,6]],dtype=float), np.array([[2],[4],[7],[13]],dtype=float), 0.0) == ([1.0,1.0], 2.0), \"test case failed: 2-D (ones) \u03bb=0\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,3],[5,6]],dtype=float), np.array([[2],[4],[7],[13]],dtype=float), 1.0) == ([0.878,1.0488], 2.122), \"test case failed: 2-D (ones) \u03bb=1\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[3],[-1],[-5],[-9]],dtype=float), 0.0) == ([-4.0], 3.0), \"test case failed: negative slope \u03bb=0\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[3],[-1],[-5],[-9]],dtype=float), 1.0) == ([-3.3333], 2.0), \"test case failed: negative slope \u03bb=1\""}
{"task_id": 527, "completion_id": 0, "passed": true, "result": "passed", "solution": "import os\nimport os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The helper never raises and never performs real extraction.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path:     Destination folder \u2013 ignored in this simplified version.\n        archive_format:   \u2022 'auto' \u2500\u2192 ['tar', 'zip']\n                          \u2022 'tar' / 'zip'  \u2192 only that format\n                          \u2022 list           \u2192 that list\n                          \u2022 None / []      \u2192 no format allowed\n\n    Returns:\n        True  \u2013 extension matches one of the allowed formats\n        False \u2013 otherwise or on any error\n    \"\"\"\n    try:\n        if archive_format is None:\n            allowed_formats: List[str] = []\n        elif isinstance(archive_format, str):\n            if archive_format.lower() == 'auto':\n                allowed_formats = ['tar', 'zip']\n            else:\n                allowed_formats = [archive_format]\n        else:\n            allowed_formats = list(archive_format)\n        if not allowed_formats:\n            return False\n        format_to_suffixes = {'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'], 'zip': ['.zip']}\n        fname = os.path.basename(str(file_path)).lower()\n        for fmt in allowed_formats:\n            suffixes = format_to_suffixes.get(str(fmt).lower())\n            if not suffixes:\n                continue\n            for suf in suffixes:\n                if fname.endswith(suf):\n                    return True\n        return False\n    except Exception:\n        return False\nassert extract_archive(\"data/archive.tar.gz\", \"./out\", \"auto\") is True, \"failed: .tar.gz with auto\"\nassert extract_archive(\"backup.TAR\", archive_format=\"tar\") is True, \"failed: .TAR with 'tar'\"\nassert extract_archive(\"docs.zip\", archive_format=\"auto\") is True, \"failed: .zip with auto\"\nassert extract_archive(\"docs.zip\", archive_format=\"tar\") is False, \"failed: .zip with 'tar'\"\nassert extract_archive(\"movie.tgz\", archive_format=[\"tar\"]) is True, \"failed: .tgz with list['tar']\"\nassert extract_archive(\"movie.tgz\", archive_format=[\"zip\"]) is False, \"failed: .tgz with list['zip']\"\nassert extract_archive(\"image.tbz\", archive_format=[\"zip\", \"tar\"]) is True, \"failed: .tbz with ['zip','tar']\"\nassert extract_archive(\"report.rar\", archive_format=\"auto\") is False, \"failed: .rar with auto\"\nassert extract_archive(\"any.file\", archive_format=None) is False, \"failed: None archive_format\"\nassert extract_archive(\"some.tar.bz2\", archive_format=[]) is False, \"failed: empty list archive_format\""}
{"task_id": 528, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) receives the label  1 if  w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0\n    and \u22121 otherwise.  The returned list has shape (grid_n \u00d7 grid_n) and\n    contains those labels for a regular grid that spans the bounding box\n    of *X*.\n\n    Args:\n        X: 2-D data set \u2013 list of [x\u2081 , x\u2082] pairs (shape n\u00d72).\n        W: Length-2 sequence [w\u2081 , w\u2082] with the classifier\u2019s weights.\n        b: Bias term of the classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Python list of lists with shape (grid_n \u00d7 grid_n) whose entries\n        are exclusively 1 or \u22121.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    if X_arr.ndim != 2 or X_arr.shape[1] != 2:\n        raise ValueError('X must be a 2-D array-like with exactly two columns.')\n    if len(W) != 2:\n        raise ValueError('W must contain exactly two elements.')\n    if grid_n <= 0:\n        raise ValueError('grid_n must be a positive integer.')\n    (x1_min, x1_max) = (X_arr[:, 0].min(), X_arr[:, 0].max())\n    (x2_min, x2_max) = (X_arr[:, 1].min(), X_arr[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot, indexing='xy')\n    (w1, w2) = (float(W[0]), float(W[1]))\n    decision_values = w1 * x1_grid + w2 * x2_grid + b\n    labels = np.where(decision_values >= 0, 1, -1)\n    return labels.tolist()\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3) == [[1, 1, 1], [-1, 1, 1], [-1, -1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3) == [[-1, -1, -1], [1, 1, 1], [1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3) == [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2) == [[1, 1], [1, -1]], \"test case failed: decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2)\"\nres = decision_boundary_grid([[0, 0], [3, 3]], [1, 1], -6, 4)\nassert len(res) == 4 and all(len(r) == 4 for r in res), \"test case failed: decision_boundary_grid shape with grid_n=4\"\nassert decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2) == [[-1, 1], [1, 1]], \"test case failed: decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2)\"\nall_pos = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], 5, 2)\nassert all(v == 1 for row in all_pos for v in row), \"test case failed: decision_boundary_grid bias all positive\"\nall_neg = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], -5, 2)\nassert all(v == -1 for row in all_neg for v in row), \"test case failed: decision_boundary_grid bias all negative\"\nassert decision_boundary_grid([[0, 0], [4, 1]], [1, -1], 0, 3)[0] == [1, 1, 1], \"test case failed: decision_boundary_grid non square range\"\nret = decision_boundary_grid([[0, 0], [1, 1]], [1, 1], 0, 2)\nassert isinstance(ret, list) and all(isinstance(r, list) for r in ret), \"test case failed: decision_boundary_grid return type\""}
{"task_id": 529, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef generate_progress_bar(current: int, target: int | None, width: int=30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        return f'{current:>7d}/Unknown'\n    d = len(str(target))\n    prog_width = min(int(width * current / target), width)\n    bar_chars = []\n    if prog_width > 0:\n        bar_chars.append('=' * (prog_width - 1))\n        if current < target:\n            bar_chars.append('>')\n        else:\n            bar_chars.append('=')\n    bar_chars.append('.' * (width - prog_width))\n    bar = ''.join(bar_chars)\n    return f'{current:>{d}d}/{target} [{bar}]'\nassert generate_progress_bar(5, 20, 10) == ' 5/20 [=>........]', \"test case failed: generate_progress_bar(5, 20, 10)\"\nassert generate_progress_bar(0, 100, 10) == '  0/100 [..........]', \"test case failed: generate_progress_bar(0, 100, 10)\"\nassert generate_progress_bar(100, 100, 10) == '100/100 [==========]', \"test case failed: generate_progress_bar(100, 100, 10)\"\nassert generate_progress_bar(1, None, 10) == '      1/Unknown', \"test case failed: generate_progress_bar(1, None, 10)\"\nassert generate_progress_bar(3, 7, 5) == '3/7 [=>...]', \"test case failed: generate_progress_bar(3, 7, 5)\"\nassert generate_progress_bar(7, 10, 10) == ' 7/10 [======>...]', \"test case failed: generate_progress_bar(7, 10, 10)\"\nassert generate_progress_bar(10, 10, 5) == '10/10 [=====]', \"test case failed: generate_progress_bar(10, 10, 5)\"\nassert generate_progress_bar(1, 1, 1) == '1/1 [=]', \"test case failed: generate_progress_bar(1, 1, 1)\"\nassert generate_progress_bar(2, 8, 4) == '2/8 [>...]', \"test case failed: generate_progress_bar(2, 8, 4)\"\nassert generate_progress_bar(0, None, 30) == '      0/Unknown', \"test case failed: generate_progress_bar(0, None, 30)\""}
{"task_id": 530, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy (BCE) loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as *y_true* and values in (0, 1).\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('`y_true` and `y_pred` must have the same shape.')\n    eps = 1e-07\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    loss = -(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    mean_loss = np.mean(loss)\n    return float(np.round(mean_loss, 4))\nassert binary_cross_entropy(np.array([1,0]), np.array([0.8,0.2])) == 0.2231, \"failed on [1,0] & [0.8,0.2]\"\nassert binary_cross_entropy(np.array([1,1,0,0]), np.array([0.9,0.95,0.1,0.05])) == 0.0783, \"failed on mixed high-confidence predictions\"\nassert binary_cross_entropy(np.array([0,1]), np.array([0.3,0.7])) == 0.3567, \"failed on [0,1] & [0.3,0.7]\"\nassert binary_cross_entropy(np.array([0,0,0]), np.array([0.1,0.2,0.3])) == 0.2284, \"failed on all-zero labels\"\nassert binary_cross_entropy(np.array([1,1,1]), np.array([0.7,0.8,0.9])) == 0.2284, \"failed on all-one labels\"\nassert binary_cross_entropy(np.array([1,0,1,0,1]), np.array([0.6,0.4,0.7,0.3,0.8])) == 0.3916, \"failed on larger batch\"\nassert binary_cross_entropy(np.array([1,0]), np.array([1e-10,1-1e-15])) == 16.1181, \"failed on extreme probabilities\"\nassert binary_cross_entropy(np.array([1,0,1]), np.array([0.55,0.45,0.65])) == 0.5422, \"failed on mid-range probabilities\"\nassert binary_cross_entropy(np.array([0,0,1,1]), np.array([0.2,0.3,0.8,0.9])) == 0.2271, \"failed on balanced batch\"\nassert binary_cross_entropy(np.array([1]), np.array([0.5])) == 0.6931, \"failed on single sample with p=0.5\""}
{"task_id": 531, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    Args\n    ----\n    window_len : int\n        Desired length L of the window (must be > 0).\n    coefs : list[float]\n        Coefficients a_k, k = 0 \u2026 K.\n    symmetric : bool, optional\n        \u2022 True  \u2192 symmetric window (exactly L samples from \u2013\u03c0 to  \u03c0)  \n        \u2022 False \u2192 periodic  window (L + 1 samples from \u2013\u03c0 to  \u03c0, last one\n          discarded).  Default is False.\n\n    Returns\n    -------\n    list[float]\n        The window rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError('window_len must be a positive integer.')\n    if not coefs:\n        raise ValueError('coefs list must contain at least one value.')\n    n = np.arange(window_len)\n    if symmetric:\n        denom = window_len - 1 if window_len > 1 else 1\n    else:\n        denom = window_len\n    theta = -np.pi + 2.0 * np.pi * n / denom\n    k = np.arange(len(coefs)).reshape(-1, 1)\n    a = np.asarray(coefs, dtype=float).reshape(-1, 1)\n    w = np.sum(a * np.cos(k * theta), axis=0)\n    return [round(float(val), 4) for val in w]\nassert generalized_cosine(4, [0.5, 0.5], False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: generalized_cosine(4,[0.5,0.5],False)\"\nassert generalized_cosine(3, [1], False) == [1.0, 1.0, 1.0], \"test case failed: generalized_cosine(3,[1],False)\"\nassert generalized_cosine(5, [0.54, 0.46], True) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: generalized_cosine(5,[0.54,0.46],True)\"\nassert generalized_cosine(4, [0.54, 0.46], False) == [0.08, 0.54, 1.0, 0.54], \"test case failed: generalized_cosine(4,[0.54,0.46],False)\"\nassert generalized_cosine(4, [1], True) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine(4,[1],True)\"\nassert generalized_cosine(2, [0.5, 0.5], False) == [0.0, 1.0], \"test case failed: generalized_cosine(2,[0.5,0.5],False)\"\nassert generalized_cosine(2, [0.5, 0.5], True) == [0.0, 0.0], \"test case failed: generalized_cosine(2,[0.5,0.5],True)\"\nassert generalized_cosine(3, [0.3, 0.4, 0.3], False) == [0.2, 0.35, 0.35], \"test case failed: generalized_cosine(3,[0.3,0.4,0.3],False)\"\nassert generalized_cosine(1, [0.7, 0.3], True) == [0.4], \"test case failed: generalized_cosine(1,[0.7,0.3],True)\"\nassert generalized_cosine(1, [0.7, 0.3], False) == [0.4], \"test case failed: generalized_cosine(1,[0.7,0.3],False)\""}
{"task_id": 532, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total_params = 0\n    for (n_in, n_out) in zip(layers[:-1], layers[1:]):\n        total_params += n_in * n_out\n        total_params += n_out\n    return total_params\nassert count_fc_parameters([784, 128, 256, 512, 784]) == 667280, \"test case failed: [784,128,256,512,784]\"\nassert count_fc_parameters([64, 1]) == 65, \"test case failed: [64,1]\"\nassert count_fc_parameters([8, 16, 4]) == 212, \"test case failed: [8,16,4]\"\nassert count_fc_parameters([10]) == 0, \"test case failed: [10]\"\nassert count_fc_parameters([1, 1, 1, 1]) == 6, \"test case failed: [1,1,1,1]\"\nassert count_fc_parameters([3, 4]) == 16, \"test case failed: [3,4]\"\nassert count_fc_parameters([1000, 100, 10, 1]) == 101121, \"test case failed: [1000,100,10,1]\"\nassert count_fc_parameters([2, 3, 5]) == 29, \"test case failed: [2,3,5]\"\nassert count_fc_parameters([50, 100]) == 5100, \"test case failed: [50,100]\"\nassert count_fc_parameters([3, 5, 7, 9]) == 134, \"test case failed: [3,5,7,9]\""}
{"task_id": 533, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal (Gaussian) distribution.\n    \n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution (\u03c3 > 0).\n    \n    Returns\n    -------\n    float | list[float]\n        PDF value(s) rounded to four decimal places.  A float is returned\n        when `x` is a scalar, otherwise a list is returned.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x_arr = np.asarray(x, dtype=float)\n    coeff = 1.0 / (sigma * np.sqrt(2.0 * np.pi))\n    exponent = -(x_arr - mean) ** 2 / (2.0 * sigma ** 2)\n    pdf_vals = coeff * np.exp(exponent)\n    pdf_vals = np.round(pdf_vals, 4)\n    if is_scalar:\n        return float(pdf_vals)\n    else:\n        return pdf_vals.tolist()\nassert gaussian_likelihood(1, 0, 1) == 0.242, \"failed: gaussian_likelihood(1, 0, 1)\"\nassert gaussian_likelihood(0, 0, 1) == 0.3989, \"failed: gaussian_likelihood(0, 0, 1)\"\nassert gaussian_likelihood(2, 0, 2) == 0.121, \"failed: gaussian_likelihood(2, 0, 2)\"\nassert gaussian_likelihood([0, 1], 0, 1) == [0.3989, 0.242], \"failed: gaussian_likelihood([0,1],0,1)\"\nassert gaussian_likelihood(-1, 0, 1) == 0.242, \"failed: gaussian_likelihood(-1, 0, 1)\"\nassert gaussian_likelihood(3, 2, 1) == 0.242, \"failed: gaussian_likelihood(3,2,1)\"\nassert gaussian_likelihood(5, 3, 2) == 0.121, \"failed: gaussian_likelihood(5,3,2)\"\nassert gaussian_likelihood([1, 2, 3], 2, 1) == [0.242, 0.3989, 0.242], \"failed: gaussian_likelihood([1,2,3],2,1)\"\nassert gaussian_likelihood(0, 2, 1) == 0.054, \"failed: gaussian_likelihood(0,2,1)\"\nassert gaussian_likelihood(2, 2, 0.5) == 0.7979, \"failed: gaussian_likelihood(2,2,0.5)\""}
{"task_id": 534, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        float  \u2013 if `Z` is a Python scalar;\n        list   \u2013 for every other kind of input (shape preserved),\n                 with every element rounded to 4 decimals.\n    \"\"\"\n    if np.isscalar(Z) or (isinstance(Z, np.ndarray) and Z.ndim == 0):\n        s = 1.0 / (1.0 + np.exp(-float(Z)))\n        return round(float(s), 4)\n    arr = np.asarray(Z, dtype=float)\n    sig = 1.0 / (1.0 + np.exp(-arr))\n    sig = np.round(sig, 4)\n    return sig.tolist()\nassert sigmoid_(-1) == 0.2689, \"test case failed: sigmoid_(-1)\"\nassert sigmoid_(0) == 0.5, \"test case failed: sigmoid_(0)\"\nassert sigmoid_(1) == 0.7311, \"test case failed: sigmoid_(1)\"\nassert sigmoid_([-2, 2]) == [0.1192, 0.8808], \"test case failed: sigmoid_([-2, 2])\"\nassert sigmoid_([0]) == [0.5], \"test case failed: sigmoid_([0])\"\nassert sigmoid_([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test case failed: sigmoid_([[0,1],[-1,-2]])\"\nassert sigmoid_(np.array([-3, 3])) == [0.0474, 0.9526], \"test case failed: sigmoid_(np.array([-3,3]))\"\nassert sigmoid_(100) == 1.0, \"test case failed: sigmoid_(100)\"\nassert sigmoid_(-100) == 0.0, \"test case failed: sigmoid_(-100)\"\nassert sigmoid_(np.array([[5, -5], [10, -10]])) == [[0.9933, 0.0067], [1.0, 0.0]], \"test case failed: sigmoid_(np.array([[5,-5],[10,-10]]))\""}
{"task_id": 536, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression(X_train, y_train, X_test, method='normal', alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression by Normal Equation or batch Gradient Descent.\"\"\"\n    X_train = np.asarray(X_train, dtype=float)\n    X_test = np.asarray(X_test, dtype=float)\n    y_train = np.asarray(y_train, dtype=float).ravel()\n    (m, n) = X_train.shape\n    X_train = np.hstack((np.ones((m, 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    if method.lower() == 'normal':\n        XtX_inv = np.linalg.inv(X_train.T @ X_train)\n        theta = XtX_inv @ X_train.T @ y_train\n    else:\n        theta = np.zeros(n + 1)\n        for _ in range(num_iter):\n            error = X_train @ theta - y_train\n            grad = X_train.T @ error / m\n            theta -= alpha * grad\n    predictions = X_test @ theta\n    return np.round(predictions, 4).tolist()\nassert linear_regression(np.array([[1],[2],[3],[4],[5]]), np.array([3,5,7,9,11]), np.array([[6],[7]]), method=\"normal\") == [13.0, 15.0], \"failed: simple univariate normal eqn\"\nassert linear_regression(np.array([[0],[1],[2]]), np.array([-2,3,8]), np.array([[3]]), method=\"normal\") == [13.0], \"failed: univariate negative intercept normal eqn\"\nassert linear_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,11,13]), np.array([[3,5]]), method=\"normal\") == [20.0], \"failed: multivariate normal eqn\"\nassert linear_regression(np.array([[1,1],[2,0],[0,1],[3,2]]), np.array([3,-2,4,5]), np.array([[1,2]]), method=\"normal\") == [7.0], \"failed: multivariate zero bias normal eqn\"\nassert linear_regression(np.array([[1],[2],[3]]), np.array([0,2,4]), np.array([[4]]), method=\"normal\") == [6.0], \"failed: univariate normal eqn 2\"\nassert linear_regression(np.array([[1],[2],[3],[4]]), np.array([2,4,6,8]), np.array([[5]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [10.0], \"failed: univariate gradient descent\"\nassert linear_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,11,13]), np.array([[3,5]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [20.0], \"failed: multivariate gradient descent\"\nassert linear_regression(np.array([[1],[2],[3]]), np.array([0,2,4]), np.array([[4]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [6.0], \"failed: univariate gradient descent 2\"\nassert linear_regression(np.array([[1,1],[2,0],[0,1],[3,2]]), np.array([3,-2,4,5]), np.array([[1,2]]), method=\"gradient\", alpha=0.01, num_iter=30000) == [7.0], \"failed: multivariate gradient descent 2\"\nassert linear_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[3]]), method=\"gradient\", alpha=0.01, num_iter=10000) == [5.0], \"failed: constant function gradient descent\""}
{"task_id": 537, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier (from scratch).\"\"\"\n    eps = 1e-09\n    classes = np.array([0, 1])\n    mask0 = y_train == 0\n    mask1 = y_train == 1\n    mu0 = X_train[mask0].mean(axis=0)\n    mu1 = X_train[mask1].mean(axis=0)\n    std0 = X_train[mask0].std(axis=0, ddof=0) + eps\n    std1 = X_train[mask1].std(axis=0, ddof=0) + eps\n    n_samples = len(y_train)\n    prior0 = mask0.sum() / n_samples\n    prior1 = mask1.sum() / n_samples\n    log_prior = np.log(np.array([prior0, prior1]))\n    log_coeff0 = -0.5 * np.log(2 * np.pi) - np.log(std0)\n    log_coeff1 = -0.5 * np.log(2 * np.pi) - np.log(std1)\n    inv_var0 = 1.0 / (2 * std0 ** 2)\n    inv_var1 = 1.0 / (2 * std1 ** 2)\n    predictions = []\n    for x in X_test:\n        ll0 = (log_coeff0 - (x - mu0) ** 2 * inv_var0).sum()\n        ll1 = (log_coeff1 - (x - mu1) ** 2 * inv_var1).sum()\n        log_post0 = log_prior[0] + ll0\n        log_post1 = log_prior[1] + ll1\n        pred = 0 if log_post0 >= log_post1 else 1\n        predictions.append(pred)\n    return predictions\nassert gaussian_naive_bayes(np.array([[1.0,20.0],[2.0,21.0],[3.0,22.0],[10.0,5.0],[11.0,6.0],[12.0,7.0]]), np.array([0,0,0,1,1,1]), np.array([[2.5,20.5],[11.5,6.5]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes(np.array([[1],[2],[3],[8],[9],[10]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[8.5]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0,0.2],[0.9,0.9]])) == [0,1], \"test case 3 failed\"\nassert gaussian_naive_bayes(np.array([[5],[6],[7],[2],[3],[4]]), np.array([1,1,1,0,0,0]), np.array([[6.5],[2.5]])) == [1,0], \"test case 4 failed\"\nassert gaussian_naive_bayes(np.array([[1,1],[1,2],[2,1],[8,8],[9,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.8,1.5],[8.5,8.3]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes(np.array([[2,3],[2,2],[3,3],[7,7],[8,7],[8,6]]), np.array([0,0,0,1,1,1]), np.array([[2.1,2.9],[7.9,6.9]])) == [0,1], \"test case 6 failed\"\nassert gaussian_naive_bayes(np.array([[10],[11],[12],[1],[2],[3]]), np.array([1,1,1,0,0,0]), np.array([[11],[2]])) == [1,0], \"test case 7 failed\"\nassert gaussian_naive_bayes(np.array([[1,2,3],[1,2,2],[2,2,3],[8,9,9],[9,8,9],[9,9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.5,2,2.8],[9,8.8,8.9]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes(np.array([[0],[0],[0],[10],[10],[10]]), np.array([0,0,0,1,1,1]), np.array([[0.1],[9.9]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes(np.array([[4,5],[4,4],[5,4],[15,15],[16,14],[15,14]]), np.array([0,0,0,1,1,1]), np.array([[4.2,4.6],[15.2,14.8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 539, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy (log-loss) cost.\n\n    Parameters\n    ----------\n    AL : np.ndarray\n        Model predicted probabilities, shape (m,) or (1, m).\n    Y  : np.ndarray\n        Ground-truth labels (0 or 1), same shape as AL.\n\n    Returns\n    -------\n    float\n        Scalar cost value.\n    \"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    AL = AL.ravel()\n    Y = Y.ravel()\n    m = AL.size\n    eps = 1e-15\n    AL_clipped = np.clip(AL, eps, 1.0 - eps)\n    cost = -np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)) / m\n    return float(cost)\nassert abs(compute_cost(np.array([[0.8,0.9,0.4]]),np.array([[1,1,0]]))-( -(1/3)*np.sum(np.array([[1,1,0]])*np.log(np.array([[0.8,0.9,0.4]]))+(1-np.array([[1,1,0]]))*np.log(1-np.array([[0.8,0.9,0.4]])) ) ))<1e-12, \"test case failed: simple example\"\nassert abs(compute_cost(np.array([0.35]),np.array([0]))-(-np.sum(np.array([0])*np.log(np.array([0.35]))+(1-np.array([0]))*np.log(1-np.array([0.35])))))<1e-12, \"test case failed: single sample\"\nassert abs(compute_cost(np.array([1e-20,1-1e-20]),np.array([0,1])) - (-(1/2)*np.sum(np.array([0,1])*np.log(np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)) + (1-np.array([0,1]))*np.log(1-np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)))))<1e-12, \"test case failed: clipping\"\nassert abs(compute_cost(np.array([[0.2,0.4,0.6,0.8,0.5]]),np.array([[0,0,1,1,0]]))-( -(1/5)*np.sum(np.array([[0,0,1,1,0]])*np.log(np.array([[0.2,0.4,0.6,0.8,0.5]]))+(1-np.array([[0,0,1,1,0]]))*np.log(1-np.array([[0.2,0.4,0.6,0.8,0.5]])) ) ))<1e-12, \"test case failed: batch size 5\"\nassert abs(compute_cost(np.array([0.7,0.3,0.2]),np.array([1,0,0]))-( -(1/3)*np.sum(np.array([1,0,0])*np.log(np.array([0.7,0.3,0.2]))+(1-np.array([1,0,0]))*np.log(1-np.array([0.7,0.3,0.2])) ) ))<1e-12, \"test case failed: flat vector\"\nassert abs(compute_cost(np.array([0.1,0.2,0.3,0.4]),np.zeros(4))-( -(1/4)*np.sum((1-np.zeros(4))*np.log(1-np.array([0.1,0.2,0.3,0.4])) ) ))<1e-12, \"test case failed: all zeros\"\nassert abs(compute_cost(np.array([0.6,0.7,0.8]),np.ones(3))-( -(1/3)*np.sum(np.ones(3)*np.log(np.array([0.6,0.7,0.8])) ) ))<1e-12, \"test case failed: all ones\"\nnp.random.seed(0); AL=np.random.rand(1,10); Y=(AL>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 1\"\nnp.random.seed(42); AL=np.random.rand(10); Y=(np.random.rand(10)>0.3).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 2\"\nnp.random.seed(7); AL=np.random.rand(1,100); Y=(np.random.rand(1,100)>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/100)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: large batch\""}
{"task_id": 540, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    pos_mask = Z >= 0\n    neg_mask = ~pos_mask\n    sigmoid = np.empty_like(Z, dtype=np.float64)\n    sigmoid[pos_mask] = 1.0 / (1.0 + np.exp(-Z[pos_mask]))\n    exp_z = np.exp(Z[neg_mask])\n    sigmoid[neg_mask] = exp_z / (1.0 + exp_z)\n    derivative = sigmoid * (1.0 - sigmoid)\n    derivative_rounded = np.round(derivative, 4)\n    return derivative_rounded.tolist()\nassert derivative_sigmoid(np.array([0])) == [0.25], \"test case failed: derivative_sigmoid(np.array([0]))\"\nassert derivative_sigmoid(np.array([1])) == [0.1966], \"test case failed: derivative_sigmoid(np.array([1]))\"\nassert derivative_sigmoid(np.array([-1])) == [0.1966], \"test case failed: derivative_sigmoid(np.array([-1]))\"\nassert derivative_sigmoid(np.array([2.0, -2.0])) == [0.105, 0.105], \"test case failed: derivative_sigmoid(np.array([2.0, -2.0]))\"\nassert derivative_sigmoid(np.array([5, -5])) == [0.0066, 0.0066], \"test case failed: derivative_sigmoid(np.array([5, -5]))\"\nassert derivative_sigmoid(np.array([10, -10])) == [0.0, 0.0], \"test case failed: derivative_sigmoid(np.array([10, -10]))\"\nassert derivative_sigmoid(np.array([[0, 1], [-1, -2]])) == [[0.25, 0.1966], [0.1966, 0.105]], \"test case failed: derivative_sigmoid(np.array([[0, 1], [-1, -2]]))\"\nassert derivative_sigmoid(np.array([3])) == [0.0452], \"test case failed: derivative_sigmoid(np.array([3]))\"\nassert derivative_sigmoid(np.array([-3])) == [0.0452], \"test case failed: derivative_sigmoid(np.array([-3]))\"\nassert derivative_sigmoid(np.array([0, 2, -2])) == [0.25, 0.105, 0.105], \"test case failed: derivative_sigmoid(np.array([0, 2, -2]))\""}
{"task_id": 541, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss w.r.t. each logit.\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1). Shape can be scalar, 1-D or 2-D.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid) with the same shape as y.\n\n    Returns\n    -------\n    list\n        Element-wise gradient (y_hat \u2212 y), rounded to 4 decimals and returned\n        as a regular Python list with the original shape.\n    \"\"\"\n    y_arr = np.asarray(y, dtype=float)\n    y_hat_arr = np.asarray(y_hat, dtype=float)\n    if y_arr.shape != y_hat_arr.shape:\n        raise ValueError('y and y_hat must have the same shape.')\n    grads = y_hat_arr - y_arr\n    grads = np.round(grads, 4)\n    return grads.tolist()\nassert return_input_grads([1, 0, 1], [0.8, 0.2, 0.6]) == [-0.2, 0.2, -0.4], \"test case failed: return_input_grads([1,0,1],[0.8,0.2,0.6])\"\nassert return_input_grads([0, 1], [0.1, 0.9]) == [0.1, -0.1], \"test case failed: return_input_grads([0,1],[0.1,0.9])\"\nassert return_input_grads([1, 1, 1], [0.99, 0.5, 0.01]) == [-0.01, -0.5, -0.99], \"test case failed: return_input_grads([1,1,1],[0.99,0.5,0.01])\"\nassert return_input_grads([[1, 0], [0, 1]], [[0.5, 0.5], [0.1, 0.9]]) == [[-0.5, 0.5], [0.1, -0.1]], \"test case failed: 2D example\"\nassert return_input_grads([1], [0.7]) == [-0.3], \"test case failed: single element (1)\"\nassert return_input_grads([0], [0.25]) == [0.25], \"test case failed: single element (0)\"\nassert return_input_grads([[1, 1], [1, 1]], [[1, 1], [1, 1]]) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: perfect predictions\"\nassert return_input_grads([0, 0, 0], [0.3, 0.4, 0.9]) == [0.3, 0.4, 0.9], \"test case failed: all zeros labels\"\nassert return_input_grads([1, 0, 1, 0], [0, 1, 0, 1]) == [-1.0, 1.0, -1.0, 1.0], \"test case failed: extreme predictions\"\nassert return_input_grads([1, 0, 0, 1, 1], [0.2, 0.2, 0.8, 0.8, 0.5]) == [-0.8, 0.2, 0.8, -0.2, -0.5], \"test case failed: mixed batch\""}
{"task_id": 542, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Performs a single RMSProp optimisation step.\n    \n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current parameter tensors \u03b8.\n    grads : list[np.ndarray]\n        Corresponding gradients g.\n    s : list[np.ndarray] | None, optional\n        Running averages of squared gradients. If None/empty,\n        they are initialised with zeros of the same shape as grads.\n    alpha : float, optional\n        Learning-rate (default 0.01).\n    beta : float, optional\n        Decay factor for the running average (default 0.9).\n    epsilon : float, optional\n        Small constant for numerical stability (default 1e-8).\n    \n    Returns\n    -------\n    tuple[list[np.ndarray], list[np.ndarray]]\n        new_params : list with updated (and 6-dp rounded) parameters.\n        new_s      : list with updated running averages.\n    \"\"\"\n    if not s:\n        s = [np.zeros_like(g, dtype=float) for g in grads]\n    elif len(s) != len(grads):\n        raise ValueError('Length of `s` must match `grads` (or be None/empty).')\n    new_params: list[np.ndarray] = []\n    new_s: list[np.ndarray] = []\n    for (\u03b8, g, s_prev) in zip(params, grads, s):\n        s_next = beta * s_prev + (1.0 - beta) * np.square(g)\n        denom = np.sqrt(s_next) + epsilon\n        \u03b8_next = \u03b8 - alpha * g / denom\n        new_s.append(s_next)\n        new_params.append(np.round(\u03b8_next, 6))\n    return (new_params, new_s)\nimport numpy as np; params=[np.array([5.0])]; grads=[np.array([0.1])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([4.968378]), atol=1e-6) and np.allclose(s[0], np.array([0.001]), atol=1e-8), 'test case 1 failed: basic scalar update'\nimport numpy as np; params=[np.array([1.0])]; grads=[np.array([0.0])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.]), atol=1e-8) and np.allclose(s[0], np.array([0.]), atol=1e-8), 'test case 2 failed: zero-gradient update'\nimport numpy as np; params=[np.array([1.0])]; grads=[np.array([0.2])]; s_prev=[np.array([0.04])]; up,s=rmsprop_update(params,grads,s_prev); assert np.allclose(up[0], np.array([0.99]), atol=1e-6) and np.allclose(s[0], np.array([0.04]), atol=1e-8), 'test case 3 failed: update with pre-existing running average'\nimport numpy as np; params=[np.array([-2.0])]; grads=[np.array([-0.3])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([-1.968377]), atol=1e-6), 'test case 4 failed: negative gradient'\nimport numpy as np; params=[np.array([10.0])]; grads=[np.array([1.0])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([9.968377]), atol=1e-6), 'test case 5 failed: large gradient'\nimport numpy as np; params=[np.array([1.0,-1.0])]; grads=[np.array([0.0,0.2])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.0,-1.031622]), atol=1e-6), 'test case 6 failed: vector update'\nimport numpy as np; params=[np.array([1.0,-1.0,0.5])]; grads=[np.array([0.1,0.2,-0.1])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([0.968378,-1.031622,0.531622]), atol=1e-6), 'test case 7 failed: three-element vector'\nimport numpy as np; params=[np.array([1.0,2.0]), np.array(3.0)]; grads=[np.array([0.0,0.2]), np.array(0.1)]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.0,1.968378]), atol=1e-6) and np.allclose(up[1], np.array(2.968378), atol=1e-6), 'test case 8 failed: mixed shapes'\nimport numpy as np; params=[np.array([2.0])]; grads=[np.array([0.5])]; up,s=rmsprop_update(params,grads,None,alpha=0.001,beta=0.95); assert np.allclose(up[0], np.array([1.995528]), atol=1e-6) and np.allclose(s[0], np.array([0.0125]), atol=1e-8), 'test case 9 failed: custom hyper-parameters'\nimport numpy as np; params=[np.array([2.0,-3.0]), np.array([[1.0,-1.0],[0.5,2.0]])]; grads=[np.array([0.1,-0.2]), np.array([[0.05,-0.1],[0.2,-0.05]])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.968378,-2.968378]), atol=1e-6) and np.allclose(up[1], np.array([[0.968378,-0.968378],[0.468378,2.031622]]), atol=1e-6), 'test case 10 failed: matrix and vector combined'"}
{"task_id": 543, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    total = len(data)\n    counts = Counter(data)\n    squared_sum = sum(((freq / total) ** 2 for freq in counts.values()))\n    gini = 1.0 - squared_sum\n    return round(gini, 4)\nassert cal_gini_index([\"A\", \"B\", \"B\", \"B\", \"C\"]) == 0.56, \"failed on ['A','B','B','B','C']\"\nassert cal_gini_index([1, 1, 1, 1]) == 0.0, \"failed on [1,1,1,1]\"\nassert cal_gini_index([\"yes\", \"no\"]) == 0.5, \"failed on ['yes','no']\"\nassert cal_gini_index([]) == 0.0, \"failed on []\"\nassert cal_gini_index([\"a\", \"b\", \"c\", \"d\"]) == 0.75, \"failed on ['a','b','c','d']\"\nassert cal_gini_index([0, 0, 0, 1, 1]) == 0.48, \"failed on [0,0,0,1,1]\"\nassert cal_gini_index([1]) == 0.0, \"failed on [1]\"\nassert cal_gini_index(list(range(10))) == 0.9, \"failed on range(10)\"\nassert cal_gini_index([1, 2, 3]) == 0.6667, \"failed on [1,2,3]\"\nassert cal_gini_index([1, 1, 2, 2, 3, 3]) == 0.6667, \"failed on [1,1,2,2,3,3]\""}
{"task_id": 544, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    (set1, set2) = ([], [])\n    for sample in data:\n        if fea >= len(sample) or fea < -len(sample):\n            raise IndexError(f'Feature index {fea} out of range for sample {sample}')\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)\nassert split_tree([[5, 2], [3, 4], [7, 1], [2, 2]], 0, 4) == ([[5, 2], [7, 1]], [[3, 4], [2, 2]]), \"test case failed: basic example\"\nassert split_tree([[1], [2], [3]], 0, 5) == ([], [[1], [2], [3]]), \"test case failed: threshold larger than all samples\"\nassert split_tree([[10], [12], [20]], 0, 5) == ([[10], [12], [20]], []), \"test case failed: threshold smaller than all samples\"\nassert split_tree([[1, 5], [2, 3], [3, 7], [4, 1]], 1, 4) == ([[1, 5], [3, 7]], [[2, 3], [4, 1]]), \"test case failed: second feature split\"\nassert split_tree([[1.5, 2.2], [2.3, 3.9], [1.0, 4.1]], 1, 3.0) == ([[2.3, 3.9], [1.0, 4.1]], [[1.5, 2.2]]), \"test case failed: float values\"\nassert split_tree([[-3], [-1], [2]], 0, 0) == ([[2]], [[-3], [-1]]), \"test case failed: negative threshold\"\nassert split_tree([[4], [4], [4]], 0, 4) == ([[4], [4], [4]], []), \"test case failed: all equal to threshold\"\nassert split_tree([[1], [2], [2], [3]], 0, 2) == ([[2], [2], [3]], [[1]]), \"test case failed: duplicates with equality\"\nassert split_tree([[6, 1]], 0, 6) == ([[6, 1]], []), \"test case failed: single sample\"\nassert split_tree([], 0, 0) == ([], []), \"test case failed: empty data set\""}
{"task_id": 545, "completion_id": 0, "passed": false, "result": "failed: name 'node' is not defined", "solution": "\ndef tree_stats(root: 'node | None') -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is a node whose ``results`` attribute is *not* ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        (leaf_count, max_depth)\n    \"\"\"\n\n    def _traverse(cur: 'node | None') -> tuple[int, int]:\n        \"\"\"\n        Recursively compute (leaf_count, max_depth) for the subtree rooted\n        at *cur*.\n        \"\"\"\n        if cur is None:\n            return (0, 0)\n        if cur.results is not None:\n            return (1, 1)\n        (left_leaves, left_depth) = _traverse(cur.left)\n        (right_leaves, right_depth) = _traverse(cur.right)\n        leaf_count = left_leaves + right_leaves\n        max_depth = 1 + max(left_depth, right_depth)\n        return (leaf_count, max_depth)\n    return _traverse(root)\nassert tree_stats(None) == (0, 0), \"failed on None input\"\nroot1 = node(results=\"X\"); assert tree_stats(root1) == (1, 1), \"failed on single-leaf tree\"\nroot2 = node(fea=0, value=10); root2.left = node(results=\"A\"); root2.right = node(results=\"B\"); assert tree_stats(root2) == (2, 2), \"failed on two-leaf tree\"\nroot3 = node(); root3.left = node(); root3.left.left = node(results=\"L\"); root3.right = node(results=\"R\"); assert tree_stats(root3) == (2, 3), \"failed on unbalanced tree (left-deep)\"\nroot4 = node(); root4.right = node(); root4.right.right = node(); root4.right.right.right = node(results=\"Z\"); assert tree_stats(root4) == (1, 4), \"failed on deep right chain\"\nroot5 = node(); root5.left = node(); root5.right = node();\nfor side1 in (root5.left, root5.right):\n    side1.left = node(); side1.right = node();\n    side1.left.left = node(results=\"L1\"); side1.left.right = node(results=\"L2\");\n    side1.right.left = node(results=\"L3\"); side1.right.right = node(results=\"L4\");\nassert tree_stats(root5) == (8, 4), \"failed on full depth-4 tree\"\nroot6 = node(); cursor = root6; \nfor _ in range(5):\n    cursor.left = node(); cursor = cursor.left\ncursor.results = \"end\"; assert tree_stats(root6) == (1, 6), \"failed on left-only chain\"\nroot7 = node(); cursor = root7; \nfor _ in range(2):\n    cursor.right = node(); cursor = cursor.right\ncursor.results = \"leaf\"; assert tree_stats(root7) == (1, 3), \"failed on right-only chain\"\nroot8 = node(); root8.left = node(results=\"A\"); root8.right = node();\nroot8.right.left = node(results=\"B\"); root8.right.right = node();\nroot8.right.right.right = node(results=\"C\");\nassert tree_stats(root8) == (3, 4), \"failed on mixed tree\"\nroot9 = node(fea=0, value=5); root9.left = node(results=\"A\"); root9.right = node(fea=1, value=3);\nroot9.right.left = node(results=\"B\"); root9.right.right = node(results=\"C\");\nassert tree_stats(root9) == (3, 3), \"failed on provided example\""}
{"task_id": 546, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Any, Dict, List\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a binary classification tree (CART) using the Gini criterion.\n\n    A sample is a list whose last element is the class label, the preceding\n    elements are feature values.  Categorical and numerical values are both\n    compared by ordinary equality.\n\n    The tree is represented as nested dictionaries:\n        Leaf   -> {\"label\": class_label}\n        Branch -> {\"feature\": feature_index,\n                   \"value\":   split_value,\n                   \"left\":    subtree for samples with feature == value,\n                   \"right\":   subtree for samples with feature != value}\n\n    If *data* is empty the empty dict is returned.\n    \"\"\"\n\n    def gini(subset: List[List[Any]]) -> float:\n        \"\"\"Gini impurity of *subset*.\"\"\"\n        n = len(subset)\n        if n == 0:\n            return 0.0\n        counts = Counter((row[-1] for row in subset))\n        return 1.0 - sum(((cnt / n) ** 2 for cnt in counts.values()))\n\n    def majority_label(subset: List[List[Any]]) -> Any:\n        \"\"\"Most frequent class, ties are broken by first\u2010appearance order.\"\"\"\n        counts: Counter = Counter()\n        first_seen: Dict[Any, int] = {}\n        for (idx, row) in enumerate(subset):\n            label = row[-1]\n            counts[label] += 1\n            if label not in first_seen:\n                first_seen[label] = idx\n        best_count = max(counts.values())\n        candidates = [lbl for (lbl, c) in counts.items() if c == best_count]\n        return min(candidates, key=lambda lbl: first_seen[lbl])\n\n    def sorted_values(values):\n        \"\"\"Return *values* sorted, robust to incomparable mixed types.\"\"\"\n        try:\n            return sorted(values)\n        except TypeError:\n            return sorted(values, key=lambda v: str(v))\n\n    def grow(subset: List[List[Any]]) -> Dict[str, Any]:\n        \"\"\"Recursively build the tree for *subset*.\"\"\"\n        if gini(subset) == 0.0:\n            return {'label': subset[0][-1]}\n        current_impurity = gini(subset)\n        best_gain = 0.0\n        best_feature = None\n        best_value = None\n        best_left = best_right = None\n        n_features = len(subset[0]) - 1\n        for feat_idx in range(n_features):\n            unique_vals = {row[feat_idx] for row in subset}\n            for val in sorted_values(unique_vals):\n                left = [row for row in subset if row[feat_idx] == val]\n                right = [row for row in subset if row[feat_idx] != val]\n                if not left or not right:\n                    continue\n                weighted = len(left) / len(subset) * gini(left) + len(right) / len(subset) * gini(right)\n                gain = current_impurity - weighted\n                if gain > best_gain:\n                    best_gain = gain\n                    (best_feature, best_value) = (feat_idx, val)\n                    (best_left, best_right) = (left, right)\n        if best_gain <= 0.0:\n            return {'label': majority_label(subset)}\n        return {'feature': best_feature, 'value': best_value, 'left': grow(best_left), 'right': grow(best_right)}\n    return grow(data) if data else {}\nassert build_tree([[1, \"Yes\"], [1, \"Yes\"], [0, \"No\"], [0, \"No\"]]) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"No\"}, \"right\": {\"label\": \"Yes\"}}, \"test case failed: binary pure split\"\nassert build_tree([[1, \"Yes\"], [0, \"Yes\"]]) == {\"label\": \"Yes\"}, \"test case failed: all same class\"\ndata4 = [[0, \"A\"], [0, \"A\"], [1, \"B\"], [1, \"B\"], [1, \"B\"]]\nassert build_tree(data4) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"A\"}, \"right\": {\"label\": \"B\"}}, \"test case failed: imbalanced classes\"\nassert build_tree([[42, \"Answer\"]]) == {\"label\": \"Answer\"}, \"test case failed: single sample\"\nassert build_tree([]) == {}, \"test case failed: empty dataset\"\ndata7 = [[1, \"Hot\", \"No\"], [1, \"Warm\", \"No\"], [0, \"Hot\", \"Yes\"], [0, \"Warm\", \"Yes\"]]\nassert build_tree(data7) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"Yes\"}, \"right\": {\"label\": \"No\"}}, \"test case failed: two-feature dataset\"\ndata8 = [[0, \"A\"], [0, \"A\"], [1, \"B\"]]\nassert build_tree(data8) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"A\"}, \"right\": {\"label\": \"B\"}}, \"test case failed: unequal class counts\"\ndata9 = [[0, \"Silly\", \"X\"], [1, \"Serious\", \"Y\"], [1, \"Serious\", \"Y\"], [0, \"Silly\", \"X\"]]\nassert build_tree(data9) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"X\"}, \"right\": {\"label\": \"Y\"}}, \"test case failed: repeated samples\"\ndata10 = [[1, \"P\"], [2, \"P\"], [3, \"P\"]]\nassert build_tree(data10) == {\"label\": \"P\"}, \"test case failed: pure class after numeric values\""}
{"task_id": 547, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float] | int:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden-Markov model.\n\n    All returned numbers are rounded to 4 decimals.  If any input is\n    malformed or t is out of bounds, the function returns -1.\n    \"\"\"\n    try:\n        A = np.asarray(A, dtype=float)\n        B = np.asarray(B, dtype=float)\n        S = np.asarray(S, dtype=float)\n    except Exception:\n        return -1\n    if A.ndim != 2 or A.shape[0] == 0 or A.shape[0] != A.shape[1]:\n        return -1\n    n = A.shape[0]\n    if B.ndim != 2 or B.shape[0] != n or B.shape[1] == 0:\n        return -1\n    m = B.shape[1]\n    if S.ndim != 1 or S.shape[0] != n:\n        return -1\n    if not isinstance(obs, (list, tuple)) or len(obs) == 0:\n        return -1\n    if not all((isinstance(k, int) for k in obs)):\n        return -1\n    if any((k < 0 or k >= m for k in obs)):\n        return -1\n    if not isinstance(t, int) or t < 0 or t >= len(obs):\n        return -1\n    alpha = S * B[:, obs[0]]\n    for step in range(1, t + 1):\n        alpha = alpha @ A\n        alpha = alpha * B[:, obs[step]]\n    return [round(float(x), 4) for x in alpha]\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], 2) == [0.0601, 0.0095], \"test case 1 failed\"\nassert forward_step([[0.2, 0.5, 0.3], [0.3, 0.3, 0.4], [0.4, 0.2, 0.4]], [[0.6, 0.4], [0.5, 0.5], [0.4, 0.6]], [0.5, 0.3, 0.2], [1, 0], 0) == [0.2, 0.15, 0.12], \"test case 2 failed\"\nassert forward_step([[0.2, 0.5, 0.3], [0.3, 0.3, 0.4], [0.4, 0.2, 0.4]], [[0.6, 0.4], [0.5, 0.5], [0.4, 0.6]], [0.5, 0.3, 0.2], [1, 0], 1) == [0.0798, 0.0845, 0.0672], \"test case 3 failed\"\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], 4) == -1, \"test case 4 failed\"\nassert forward_step([[0.5, 0.5], [0.4, 0.6]], [[0.1, 0.9]], [0.5, 0.5], [0], 0) == -1, \"test case 5 failed\"\nassert forward_step([[1.0]], [[0.2, 0.8]], [1.0], [1, 1, 0], 2) == [0.128], \"test case 6 failed\"\nassert forward_step([[0.6, 0.4], [0.5, 0.5]], [[0.7, 0.3], [0.2, 0.8]], [0.8, 0.2], [1], 0) == [0.24, 0.16], \"test case 7 failed\"\nassert forward_step([[0.8, 0.2], [0.4, 0.6]], [[0.9, 0.1], [0.2, 0.8]], [0.3, 0.7], [0, 0, 1, 1], 3) == [0.0038, 0.0285], \"test case 8 failed\"\nassert forward_step([[1.0, 0.0], [0.0, 1.0]], [[0.5, 0.5], [0.3, 0.7]], [0.6, 0.4], [1, 0], 0) == [0.3, 0.28], \"test case 9 failed\"\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], -1) == -1, \"test case 10 failed\""}
{"task_id": 548, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    \u03be_t(i,j) = P(q_t=i , q_{t+1}=j | obs, \u03bb)\n\n    All entries of the returned matrix are rounded to 4 decimals.\n    If t is outside 0 \u2026 len(obs)-2 the function returns -1.\n    \"\"\"\n    T = len(obs)\n    if t < 0 or t >= T - 1:\n        return -1\n    A = np.asarray(A, dtype=float)\n    B = np.asarray(B, dtype=float)\n    pi = np.asarray(pi, dtype=float)\n    N = A.shape[0]\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, obs[0]]\n    for k in range(1, T):\n        alpha[k] = alpha[k - 1] @ A * B[:, obs[k]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for k in range(T - 2, -1, -1):\n        beta[k] = A @ (B[:, obs[k + 1]] * beta[k + 1])\n    alpha_t = alpha[t]\n    beta_t1 = beta[t + 1]\n    emit_next = B[:, obs[t + 1]] * beta_t1\n    numer = alpha_t[:, None] * A * emit_next[None, :]\n    denom = numer.sum()\n    xi_t = numer / denom\n    return np.round(xi_t, 4).tolist()\nassert compute_xi([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2], 1) == [[0.5748, 0.0493], [0.2892, 0.0868]], \"failed on example case\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1,0], 1) == [[0.25,0.25],[0.25,0.25]], \"failed on uniform 2-state (t=1)\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [1,0], 0) == [[0.25,0.25],[0.25,0.25]], \"failed on uniform 2-state (t=0)\"\nassert compute_xi([[1/3,1/3,1/3]]*3, [[0.5,0.5]]*3, [1/3,1/3,1/3], [0,1], 0) == [[0.1111,0.1111,0.1111]]*3, \"failed on uniform 3-state (len=2)\"\nassert compute_xi([[1/3,1/3,1/3]]*3, [[0.5,0.5]]*3, [1/3,1/3,1/3], [0,1,0], 1) == [[0.1111,0.1111,0.1111]]*3, \"failed on uniform 3-state (t=1)\"\nassert compute_xi([[1,0],[0,1]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1,0], 1) == [[0.5,0.0],[0.0,0.5]], \"failed on identity A (2-state)\"\nassert compute_xi(np.eye(3).tolist(), [[0.5,0.5]]*3, [1/3,1/3,1/3], [1,0,1], 1) == [[0.3333,0.0,0.0],[0.0,0.3333,0.0],[0.0,0.0,0.3333]], \"failed on identity A (3-state)\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1], -1) == -1, \"failed on negative t\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1], 2) == -1, \"failed on t out of range\""}
{"task_id": 549, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float).ravel()\n    y_arr = np.asarray(y, dtype=float).ravel()\n    if x_arr.size != y_arr.size:\n        return -1\n    dist_sq = np.sum((x_arr - y_arr) ** 2)\n    return float(round(dist_sq, 4))\nassert cal_dis([1,2,3],[4,0,3]) == 13.0, \"test case failed: cal_dis([1,2,3],[4,0,3])\"\nassert cal_dis([0,0,0],[0,0,0]) == 0.0, \"test case failed: cal_dis([0,0,0],[0,0,0])\"\nassert cal_dis((1,1,1,1),(2,2,2,2)) == 4.0, \"test case failed: cal_dis((1,1,1,1),(2,2,2,2))\"\nassert cal_dis(np.array([2.5,-1.5]),np.array([2.5,-1.5])) == 0.0, \"test case failed: identical vectors\"\nassert cal_dis([1,2],[1]) == -1, \"test case failed: unequal length should return -1\"\nassert cal_dis([],[]) == 0.0, \"test case failed: empty vectors\"\nassert cal_dis([3],[0]) == 9.0, \"test case failed: single element vectors\"\nassert cal_dis([1e3,2e3],[0,0]) == 5000000.0, \"test case failed: large numbers\"\nassert cal_dis(np.arange(100),np.zeros(100)) == 328350.0, \"test case failed: range vs zeros\""}
{"task_id": 551, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef _gini(labels: np.ndarray) -> float:\n    \"\"\"Gini impurity of a 1-D array of class labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels)\n    return 1.0 - sum(((cnt / n) ** 2 for cnt in counts.values()))\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    \"\"\"Find the best equality split (feature == value) w.r.t. Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Shape (n_samples, n_features).  Elements may be numeric or objects.\n    y : np.ndarray\n        Shape (n_samples, ).\n    epsilon : float, optional\n        Required minimum impurity decrease.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value)\n        or (-1, None, parent_gini) if no valid split is found.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    parent_gini = _gini(y)\n    best_gini = float('inf')\n    best_feature = -1\n    best_value = None\n    for feat_idx in range(n_features):\n        col = X[:, feat_idx]\n        for val in np.unique(col):\n            mask_left = col == val\n            n_left = np.sum(mask_left)\n            n_right = n_samples - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            g_left = _gini(y[mask_left])\n            g_right = _gini(y[~mask_left])\n            weighted_gini = (n_left * g_left + n_right * g_right) / n_samples\n            if weighted_gini < best_gini:\n                best_gini = weighted_gini\n                best_feature = feat_idx\n                best_value = val\n    if best_feature == -1 or parent_gini - best_gini < epsilon:\n        return (-1, None, float(parent_gini))\n    return (best_feature, best_value, float(best_gini))\nassert best_gini_split(np.array([[1, 0], [1, 1], [0, 0], [0, 1]]), np.array([1, 1, 0, 0])) == (0, 0, 0.0), \"test case failed: example 1\"\nassert best_gini_split(np.array([[1], [1], [1]]), np.array([0, 0, 0])) == (-1, None, 0.0), \"test case failed: example 2\"\nassert best_gini_split(np.array([['sunny'], ['sunny'], ['overcast'], ['rain']], dtype=object), np.array(['no', 'no', 'yes', 'yes'])) == (0, 'sunny', 0.0), \"test case failed: example 3\"\nassert best_gini_split(np.array([[2, 3], [1, 3], [2, 1], [1, 1]]), np.array([1, 1, 0, 0])) == (1, 1, 0.0), \"test case failed: example 4\"\nassert best_gini_split(np.array([[0], [0]]), np.array([0, 1])) == (-1, None, 0.5), \"test case failed: example 5\"\nassert best_gini_split(np.array([[0], [0], [1], [1], [2], [2]]), np.array([0, 0, 1, 1, 1, 1])) == (0, 0, 0.0), \"test case failed: example 6\"\nassert best_gini_split(np.array([[0], [1]]), np.array([0, 1]), epsilon=0.7) == (-1, None, 0.5), \"test case failed: example 7\"\nassert best_gini_split(np.array([[42, 99]]), np.array([3])) == (-1, None, 0.0), \"test case failed: example 8\"\nassert best_gini_split(np.array([['A', 'red'], ['A', 'blue'], ['B', 'red'], ['B', 'blue']], dtype=object), np.array(['cat', 'cat', 'dog', 'dog'])) == (0, 'A', 0.0), \"test case failed: example 9\"\nassert best_gini_split(np.array([[0, 'yes'], [1, 'yes'], [0, 'no'], [1, 'no'], [0, 'no']], dtype=object), np.array([1, 1, 0, 0, 0])) == (1, 'no', 0.0), \"test case failed: example 10\""}
{"task_id": 552, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm with scaling\n    to obtain numerically stable \u03b1, \u03b2 and finally \u03b3\u209c.\n\n    Args:\n        hmm (dict): HMM parameters with keys\n                    'pi' -> 1-D initial state distribution (N,)\n                    'A'  -> state transition matrix      (N,N)\n                    'B'  -> emission matrix              (N,M)\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t,\n                     rounded to four decimals.  If t is out of range an\n                     empty list is returned.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.asarray(hmm['pi'], dtype=float)\n    A = np.asarray(hmm['A'], dtype=float)\n    B = np.asarray(hmm['B'], dtype=float)\n    N = pi.shape[0]\n    T = len(observations)\n    obs_idx = observations\n    alpha = np.zeros((T, N), dtype=float)\n    c = np.zeros(T, dtype=float)\n    alpha[0] = pi * B[:, obs_idx[0]]\n    c[0] = 1.0 / alpha[0].sum() if alpha[0].sum() != 0 else 1.0\n    alpha[0] *= c[0]\n    for tt in range(1, T):\n        alpha[tt] = alpha[tt - 1] @ A * B[:, obs_idx[tt]]\n        denom = alpha[tt].sum()\n        c[tt] = 1.0 / denom if denom != 0 else 1.0\n        alpha[tt] *= c[tt]\n    beta = np.zeros((T, N), dtype=float)\n    beta[-1] = 1.0\n    beta[-1] *= c[-1]\n    for tt in range(T - 2, -1, -1):\n        beta[tt] = A @ (B[:, obs_idx[tt + 1]] * beta[tt + 1])\n        beta[tt] *= c[tt]\n    gamma_t = alpha[t] * beta[t]\n    total = gamma_t.sum()\n    if total == 0:\n        return [0.0 for _ in range(N)]\n    gamma_t /= total\n    return [round(float(p), 4) for p in gamma_t]\nassert gamma_probabilities({\"pi\": [0.6, 0.4], \"A\": [[0.7, 0.3], [0.4, 0.6]], \"B\": [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]}, [0,1,2], 1) == [0.6229, 0.3771], \"test case failed: example sequence t=1\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [0,1,0,1], 2) == [0.5,0.5], \"test case failed: uniform 2-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [1], 0) == [0.5,0.5], \"test case failed: uniform 2-state single step\"\nassert gamma_probabilities({\"pi\": [1/3,1/3,1/3], \"A\": [[1/3]*3]*3, \"B\": [[0.25,0.25],[0.25,0.25],[0.25,0.25]]}, [0,1], 1) == [0.3333,0.3333,0.3333], \"test case failed: uniform 3-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [0,0,0], 2) == [1.0,0.0], \"test case failed: deterministic emission state 0\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [1], 0) == [0.0,1.0], \"test case failed: deterministic emission state 1\"\nassert gamma_probabilities({\"pi\": [0.8,0.2], \"A\": [[0.6,0.4],[0.4,0.6]], \"B\": [[0.6,0.4],[0.3,0.7]]}, [0], 0) == [0.8889,0.1111], \"test case failed: single observation\"\nassert gamma_probabilities({\"pi\": [0.25,0.25,0.25,0.25], \"A\": [[0.25]*4]*4, \"B\": [[0.25]*4]*4}, [0,1,2,3], 3) == [0.25,0.25,0.25,0.25], \"test case failed: uniform 4-state\""}
{"task_id": 553, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\"\"\"\n    n_train = X_train.shape[0]\n    n_test = X_test.shape[0]\n    X_train_b = np.hstack((np.ones((n_train, 1)), X_train))\n    X_test_b = np.hstack((np.ones((n_test, 1)), X_test))\n    w = np.zeros(X_train_b.shape[1], dtype=float)\n\n    def _sigmoid(z):\n        positive = z >= 0\n        negative = ~positive\n        out = np.empty_like(z, dtype=float)\n        out[positive] = 1.0 / (1.0 + np.exp(-z[positive]))\n        exp_z = np.exp(z[negative])\n        out[negative] = exp_z / (1.0 + exp_z)\n        return out\n    for _ in range(max_iter):\n        preds = _sigmoid(X_train_b @ w)\n        gradient = X_train_b.T @ (y_train - preds)\n        gradient /= n_train\n        w += alpha * gradient\n    probs = _sigmoid(X_test_b @ w)\n    predictions = (probs >= 0.5).astype(int)\n    return [int(p) for p in predictions]\nassert logistic_regression(np.array([[0],[1],[4],[5]]), np.array([0,0,1,1]), np.array([[0.5],[4.5]])) == [0,1], \"test case 1 failed\"\nassert logistic_regression(np.array([[-10],[-8],[9],[11]]), np.array([0,0,1,1]), np.array([[-9],[10]])) == [0,1], \"test case 2 failed\"\nassert logistic_regression(np.array([[0,0],[1,1],[4,4],[5,5]]), np.array([0,0,1,1]), np.array([[0.2,0.1],[4.5,4.8]])) == [0,1], \"test case 3 failed\"\nassert logistic_regression(np.array([[-5,0],[-4,1],[4,1],[5,0]]), np.array([0,0,1,1]), np.array([[-4,0.5],[5,0.5]])) == [0,1], \"test case 4 failed\"\nassert logistic_regression(np.array([[0,0,0],[1,0,0],[0,1,0],[5,5,5],[4,5,6]]), np.array([0,0,0,1,1]), np.array([[0,0,1],[6,5,5]])) == [0,1], \"test case 5 failed\"\nassert logistic_regression(np.array([[1],[2],[3],[4]]), np.array([0,0,1,1]), np.array([[1],[4]]), alpha=0.05, max_iter=5000) == [0,1], \"test case 6 failed\"\nassert logistic_regression(np.array([[-3],[-2],[2],[3]]), np.array([0,0,1,1]), np.array([[-1],[1]])) == [0,1], \"test case 7 failed\"\nassert logistic_regression(np.array([[0,-5],[0,-4],[0,4],[0,5]]), np.array([0,0,1,1]), np.array([[0,-4.5],[0,4.5]])) == [0,1], \"test case 8 failed\"\nassert logistic_regression(np.array([[-10,-10],[-8,-9],[9,8],[10,10]]), np.array([0,0,1,1]), np.array([[-9,-9],[9,9]])) == [0,1], \"test case 9 failed\"\nassert logistic_regression(np.array([[0],[10]]), np.array([0,1]), np.array([[2],[8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 555, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN) implemented from scratch.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Array of shape (n_samples, n_features).\n    eps : float\n        Neighbourhood radius.\n    min_samples : int\n        Minimum number of points (inclusive) needed for a core point.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels (1, 2, \u2026) for clustered points; noise is \u22121.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D array (n_samples, n_features)')\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    diff = data[:, None, :] - data[None, :, :]\n    dist_mat = np.linalg.norm(diff, axis=-1)\n    neighbours = [np.where(dist_mat[i] <= eps)[0] for i in range(n_samples)]\n    core_mask = np.array([len(idx) >= min_samples for idx in neighbours], dtype=bool)\n    labels = np.zeros(n_samples, dtype=int)\n    current_label = 0\n    for point in range(n_samples):\n        if not core_mask[point] or labels[point] != 0:\n            continue\n        current_label += 1\n        queue = deque([point])\n        labels[point] = current_label\n        while queue:\n            p = queue.popleft()\n            for nbr in neighbours[p]:\n                if labels[nbr] == 0:\n                    labels[nbr] = current_label\n                    if core_mask[nbr]:\n                        queue.append(nbr)\n    labels[labels == 0] = -1\n    return labels.tolist()\nassert dbscan(np.array([[0,0],[0,1],[1,0],[1,1],[5,5]]),1.5,3)==[1,1,1,1,-1],\"case 1 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,3)==[1,1,1,2,2,2],\"case 2 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,4)==[-1,-1,-1,-1,-1,-1],\"case 3 failed\"\nassert dbscan(np.array([[0,0],[0,0],[0,0.1],[0.1,0]]),0.2,2)==[1,1,1,1],\"case 4 failed\"\nassert dbscan(np.array([[0],[0.5],[1.0],[5.0],[5.1],[5.2]]),0.3,2)==[-1,-1,-1,1,1,1],\"case 5 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),15,2)==[1,1,1,1,1,1],\"case 6 failed\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[1,1,1,1],\"case 7 failed\"\nassert dbscan(np.array([[0,0],[0,0.5],[10,10],[20,20]]),1,2)==[1,1,-1,-1],\"case 8 failed\"\nassert dbscan(np.array([[0,0]]),0.5,1)==[1],\"case 9 failed\"\nassert dbscan(np.array([[-5,-5],[-5,-4],[-4,-5],[5,5]]),1.5,3)==[1,1,1,-1],\"case 10 failed\""}
{"task_id": 559, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Optional\nfrom typing import List, Optional\nclass Node:\n    \"\"\"Binary-tree node (only leaves hold a value).\"\"\"\n\n    def __init__(self, val: Optional[int]=None, right: 'Optional[Node]'=None, left: 'Optional[Node]'=None):\n        self.val = val\n        self.right = right\n        self.left = left\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Return all leaf-node values from left to right.\"\"\"\n    if root is None:\n        return []\n    if root.left is None and root.right is None:\n        return [root.val]\n    leaves: List[int] = []\n    leaves.extend(leaf_values(root.left))\n    leaves.extend(leaf_values(root.right))\n    return leaves\nassert leaf_values(None) == [], \"failed on empty tree\"\nassert leaf_values(Node(val=5)) == [5], \"failed on single-node tree\"\nroot = Node(left=Node(val=1), right=Node(left=Node(val=2), right=Node(val=3)))\nassert leaf_values(root) == [1, 2, 3], \"failed on complete tree\"\nroot = Node(left=Node(left=Node(val=42)))\nassert leaf_values(root) == [42], \"failed on left-skewed tree\"\nroot = Node(right=Node(right=Node(val=7)))\nassert leaf_values(root) == [7], \"failed on right-skewed tree\"\nroot = Node(left=Node(val=10), right=Node(left=Node(val=20), right=Node(right=Node(val=30))))\nassert leaf_values(root) == [10, 20, 30], \"failed on mixed structure 1\"\nroot = Node(val=None, left=Node(val=None, left=Node(val=1), right=Node(val=2)), right=Node(val=None, left=Node(val=3)))\nassert leaf_values(root) == [1, 2, 3], \"failed when internal nodes hold values\"\nleft_sub = Node(left=Node(val=4), right=Node(val=5))\nright_sub = Node(left=Node(val=6), right=Node(val=7))\nroot = Node(left=left_sub, right=right_sub)\nassert leaf_values(root) == [4, 5, 6, 7], \"failed on large balanced tree\"\nroot = Node(left=Node(val=1), right=Node(val=1))\nassert leaf_values(root) == [1, 1], \"failed on repeating leaf values\"\nroot = Node(left=Node(right=Node(left=Node(right=Node(val=99)))))\nassert leaf_values(root) == [99], \"failed on deep alternating tree\""}
{"task_id": 560, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport heapq\nimport math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\"\"\"\n    if k <= 0 or not points:\n        return []\n    n_points = len(points)\n    dim = len(points[0])\n    k = min(k, n_points)\n\n    def sq_dist(p, q):\n        \"\"\"Squared Euclidean distance between two points.\"\"\"\n        return sum(((pi - qi) ** 2 for (pi, qi) in zip(p, q)))\n    indices = list(range(n_points))\n\n    def build(idxs, depth=0):\n        if not idxs:\n            return None\n        axis = depth % dim\n        idxs.sort(key=lambda i: points[i][axis])\n        mid = len(idxs) // 2\n        node_idx = idxs[mid]\n        return {'idx': node_idx, 'axis': axis, 'left': build(idxs[:mid], depth + 1), 'right': build(idxs[mid + 1:], depth + 1)}\n    root = build(indices)\n    best = []\n\n    def maybe_add(idx):\n        \"\"\"Insert point *idx* into the candidate heap if it improves the set.\"\"\"\n        d = sq_dist(points[idx], query)\n        item = (-d, -idx)\n        if len(best) < k:\n            heapq.heappush(best, item)\n        elif item > best[0]:\n            heapq.heapreplace(best, item)\n\n    def search(node):\n        if node is None:\n            return\n        idx = node['idx']\n        axis = node['axis']\n        point = points[idx]\n        maybe_add(idx)\n        diff = query[axis] - point[axis]\n        (near, far) = ('left', 'right') if diff < 0 else ('right', 'left')\n        search(node[near])\n        if len(best) < k or diff * diff < -best[0][0]:\n            search(node[far])\n    search(root)\n    result = [(-d, -i) for (d, i) in best]\n    result.sort(key=lambda x: (x[0], x[1]))\n    return [idx for (_, idx) in result]\nassert k_nearest_neighbors([[2,3],[5,4],[9,6],[4,7],[8,1],[7,2]],[9,2],2)==[4,5],\"failed on example case\"\nassert k_nearest_neighbors([[1],[2],[3],[4]],[2.5],2)==[1,2],\"failed on 1-D points\"\nassert k_nearest_neighbors([[2,3],[5,4],[9,6],[4,7],[8,1],[7,2]],[9,2],10)==[4,5,2,1,0,3],\"failed when k>n\"\nassert k_nearest_neighbors([[1,1],[1,1],[2,2]],[1,1],2)==[0,1],\"failed on duplicate points\"\nassert k_nearest_neighbors([[0],[10]],[5],2)==[0,1],\"failed on equal distances\"\nassert k_nearest_neighbors([[-5,-5],[5,5],[3,4]],[100,100],1)==[1],\"failed on distant query\"\nassert k_nearest_neighbors([[1,0],[0,1],[1,1]],[0,0],3)==[0,1,2],\"failed when k==n\"\nassert k_nearest_neighbors([[0,0,0,0],[1,1,1,1],[2,2,2,2]],[1.1,1.1,1.1,1.1],1)==[1],\"failed on 4-D points\""}
{"task_id": 561, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic two clusters", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Simple EM implementation for a full-covariance Gaussian Mixture Model.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array with shape (N, D); N samples, D features.\n    k : int\n        Number of mixture components (clusters).\n    max_iter : int, optional\n        Maximum number of EM iterations (default 200).\n    epsilon : float, optional\n        Convergence tolerance on the maximum absolute change of the mixture\n        weights between two successive iterations (default 1 e-4).\n\n    Returns\n    -------\n    list[int]\n        Length-N list of final cluster labels (0 \u2026 k-1) in deterministic,\n        left-to-right order (ascending first coordinate of the component mean).\n\n    Notes\n    -----\n    \u2022 If k == 1 all samples receive label 0 and the algorithm stops\n      immediately.\n    \u2022 A tiny diagonal regulariser (1 e-6) is added to every covariance\n      estimate to guarantee positive-definiteness and numerical stability.\n    \"\"\"\n    data = np.asarray(data, dtype=float)\n    if data.ndim != 2:\n        raise ValueError('`data` must be a 2-D array (N samples, D features).')\n    (n_samples, n_features) = data.shape\n    if k < 1:\n        raise ValueError('`k` must be a positive integer.')\n    if k == 1:\n        return [0] * n_samples\n    _LOG_2PI = n_features * math.log(2.0 * math.pi)\n\n    def _log_gaussian(x: np.ndarray, mean: np.ndarray, cov: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Compute log N(x | mean, cov) for all rows of `x`.\n        x : (N, D)\n        mean : (D,)\n        cov : (D, D)\n        Returns\n        -------\n        log_prob : (N,)\n        \"\"\"\n        diff = x - mean\n        try:\n            L = np.linalg.cholesky(cov)\n            y = np.linalg.solve(L, diff.T)\n            maha = np.sum(y ** 2, axis=0)\n            log_det = 2.0 * np.sum(np.log(np.diag(L)))\n        except np.linalg.LinAlgError:\n            inv_cov = np.linalg.inv(cov)\n            maha = np.einsum('ij,ij->i', diff, diff @ inv_cov)\n            (sign, log_det) = np.linalg.slogdet(cov)\n            if sign <= 0:\n                log_det = np.log(np.abs(np.linalg.det(cov) + 1e-12))\n        return -0.5 * (_LOG_2PI + log_det + maha)\n    rng = np.random.default_rng()\n    init_idx = rng.choice(n_samples, size=k, replace=False)\n    means = data[init_idx]\n    weights = np.full(k, 1.0 / k)\n    global_cov = np.cov(data.T, bias=True)\n    if global_cov.shape == ():\n        global_cov = global_cov.reshape(1, 1)\n    covs = np.array([global_cov.copy() for _ in range(k)])\n    reg_eps = 1e-06 * np.eye(n_features)\n    for _ in range(max_iter):\n        log_resp = np.empty((n_samples, k))\n        for j in range(k):\n            log_resp[:, j] = np.log(weights[j] + 1e-16) + _log_gaussian(data, means[j], covs[j])\n        log_resp_max = np.max(log_resp, axis=1, keepdims=True)\n        resp = np.exp(log_resp - log_resp_max)\n        resp_sum = resp.sum(axis=1, keepdims=True)\n        resp /= resp_sum\n        nk = resp.sum(axis=0)\n        prev_weights = weights.copy()\n        weights = nk / n_samples\n        means = resp.T @ data / nk[:, None]\n        for j in range(k):\n            diff = data - means[j]\n            cov = (resp[:, j][:, None] * diff).T @ diff / nk[j]\n            covs[j] = cov + reg_eps\n        if np.max(np.abs(weights - prev_weights)) < epsilon:\n            break\n    log_resp = np.empty((n_samples, k))\n    for j in range(k):\n        log_resp[:, j] = np.log(weights[j] + 1e-16) + _log_gaussian(data, means[j], covs[j])\n    labels = np.argmax(log_resp, axis=1)\n    ordering = np.argsort(means[:, 0])\n    remap = np.zeros(k, dtype=int)\n    remap[ordering] = np.arange(k)\n    labels = remap[labels]\n    return labels.tolist()\nimport numpy as np\nassert gmm_em(np.array([[1,2],[1,3],[2,2],[8,8],[9,8],[9,9]]),2) == [0,0,0,1,1,1], \"test case failed: basic two clusters\"\nassert gmm_em(np.array([[1],[1.2],[1.1],[8],[9],[8.5]]),2) == [0,0,0,1,1,1], \"test case failed: one-dimensional data\"\nassert gmm_em(np.array([[3,4],[5,6]]),1) == [0,0], \"test case failed: single component\"\nassert gmm_em(np.array([[2,2],[2,2],[2,2],[8,8],[8,8],[8,8]]),2) == [0,0,0,1,1,1], \"test case failed: duplicate points\"\nassert gmm_em(np.array([[0,0],[0,0.1],[0,0.2],[5,0],[5,0.1],[5,0.2]]),2) == [0,0,0,1,1,1], \"test case failed: vertical separation\"\nassert gmm_em(np.array([[-5,-5],[-4.9,-5],[-5.2,-4.8],[5,5],[4.8,5.1],[5.2,4.9]]),2) == [0,0,0,1,1,1], \"test case failed: symmetric clusters\"\nassert gmm_em(np.array([[0,0,0],[0.1,0,0],[0,0.2,0.1],[5,5,5],[5.1,5.1,5.1],[4.9,5,5.2]]),2) == [0,0,0,1,1,1], \"test case failed: three-dimensional data\"\nassert gmm_em(np.array([[1,1],[1,1.1],[1.2,1],[1,0.9],[9,9],[9.1,9],[9,9.2],[9.2,9.1]]),2) == [0,0,0,0,1,1,1,1], \"test case failed: larger cluster size\"\nassert gmm_em(np.array([[-10,-10],[ -9.8,-9.7],[-10.2,-10.1],[10,10],[9.8,9.9],[10.1,10.2]]),2) == [0,0,0,1,1,1], \"test case failed: distant clusters\""}
{"task_id": 562, "completion_id": 0, "passed": false, "result": "failed: test case failed: 3-D data", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A Python list containing the cluster label (0-based) for each sample.\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster <= 1 or N == 0:\n        return [0] * N\n    if method not in {'unnormalized', 'normalized'}:\n        raise ValueError(\"`method` must be either 'unnormalized' or 'normalized'\")\n    sq_norms = np.sum(data ** 2, axis=1)\n    sq_dists = sq_norms[:, None] + sq_norms[None, :] - 2.0 * data @ data.T\n    sq_dists = np.maximum(sq_dists, 0.0)\n    W = np.exp(-gamma * sq_dists)\n    np.fill_diagonal(W, 0.0)\n    degree = np.sum(W, axis=1)\n    if method == 'unnormalized':\n        L = np.diag(degree) - W\n    else:\n        d_inv_sqrt = 1.0 / np.sqrt(degree + 1e-12)\n        L = np.eye(N) - d_inv_sqrt[:, None] * W * d_inv_sqrt[None, :]\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    U = eigvecs[:, :n_cluster]\n    if method == 'normalized':\n        row_norm = np.linalg.norm(U, axis=1, keepdims=True)\n        U = U / (row_norm + 1e-12)\n    embedding = U\n    centroids = embedding[:n_cluster].copy()\n    labels = np.full(N, -1, dtype=int)\n    for _ in range(300):\n        dists = ((embedding[:, None, :] - centroids[None, :, :]) ** 2).sum(axis=2)\n        new_labels = np.argmin(dists, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for k in range(n_cluster):\n            members = embedding[labels == k]\n            if len(members) > 0:\n                centroids[k] = members.mean(axis=0)\n    unique_old = np.unique(labels)\n    order = sorted(((l, np.where(labels == l)[0][0]) for l in unique_old))\n    relabel_map = {old: new for (new, (old, _)) in enumerate(order)}\n    final_labels = [int(relabel_map[l]) for l in labels]\n    return final_labels\nassert spectral_clustering(np.array([[0, 0], [5, 5], [0.2, -0.2], [-0.1, 0.3], [5.1, 4.9]]), 2) == [0, 1, 0, 0, 1], \"test case failed: a1, 2\"\nassert spectral_clustering(np.array([[-5, -5], [5, 5], [-4.8, -5.2], [5.2, 5.1]]), 2, method='normalized') == [0, 1, 0, 1], \"test case failed: a2, 2 normalized\"\nassert spectral_clustering(np.array([[0, 0], [10, 10], [20, 20], [0.2, -0.1], [9.8, 10.2], [19.9, 20.2]]), 3) == [0, 1, 2, 0, 1, 2], \"test case failed: a3, 3\"\nassert spectral_clustering(np.random.randn(8, 2), 1) == [0]*8, \"test case failed: single cluster\"\nassert spectral_clustering(np.array([[1, 1], [1, 1], [10, 10], [10, 10]]), 2) == [0, 0, 1, 1], \"test case failed: repeated points\"\nassert spectral_clustering(np.array([[0, 0], [5, 0], [0.1, 0.2], [4.9, -0.1]]), 2, gamma=0.5) == [0, 1, 0, 1], \"test case failed: gamma=0.5\"\nassert spectral_clustering(np.array([[0, 0, 0], [0.1, 0.0, -0.1], [5, 5, 5], [5.1, 4.9, 5.2]]), 2) == [0, 0, 1, 1], \"test case failed: 3-D data\"\nassert spectral_clustering(np.array([[0, 0], [0, 5], [0.1, 0.2], [0.05, -0.1], [-0.02, 5.1]]), 2) == [0, 1, 0, 0, 1], \"test case failed: vertical split\"\nassert spectral_clustering(np.array([[0, 0], [10, 0], [0.1, 0.05], [9.9, -0.05]]), 2) == [0, 1, 0, 1], \"test case failed: horizontal split\"\nassert spectral_clustering(np.array([[0, 0], [5, 5], [10, 10], [0.1, -0.1], [5.1, 4.9], [9.9, 10.2]]), 3, method='normalized') == [0, 1, 2, 0, 1, 2], \"test case failed: 3 clusters normalized\""}
{"task_id": 563, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array with N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate.\n        max_iter: Maximum number of full passes over the training data.\n\n    Returns:\n        (w, b)  \u2013 w is the learned weight vector as a Python list,\n                  b is the bias term; both rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X_data, dtype=float)\n    y = np.asarray(y_data, dtype=float).flatten()\n    (N, d) = X.shape\n    alpha = np.zeros(N, dtype=float)\n    b = 0.0\n    G = X @ X.T\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y * G[:, i])\n            if y[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y[i]\n                updated = True\n        if not updated:\n            break\n    w_vec = X.T @ (alpha * y)\n    w_rounded = [round(float(val), 4) for val in w_vec]\n    b_rounded = round(float(b), 4)\n    return (w_rounded, b_rounded)\nassert perceptron_dual_train(np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 1.0], 1.0), \"failed test 1\"\nassert perceptron_dual_train(np.array([[1, 0], [2, 0], [-1, 0], [-2, 0]]), np.array([1, 1, -1, -1])) == ([2.0, 0.0], 0.0), \"failed test 2\"\nassert perceptron_dual_train(np.array([[2, 2], [1, 1], [-1, -1], [-2, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 1.0), \"failed test 3\"\nassert perceptron_dual_train(np.array([[1, 1, 1], [2, 2, 2], [-1, -1, -1], [-2, -2, -2]]), np.array([1, 1, -1, -1])) == ([1.0, 1.0, 1.0], 1.0), \"failed test 4\"\nassert perceptron_dual_train(np.array([[1, 1], [-1, -1]]), np.array([1, -1])) == ([1.0, 1.0], 1.0), \"failed test 5\"\nassert perceptron_dual_train(np.array([[0, 1], [0, 2], [0, -1], [0, -2]]), np.array([1, 1, -1, -1])) == ([0.0, 2.0], 0.0), \"failed test 6\"\nassert perceptron_dual_train(np.array([[1], [2], [-1], [-2]]), np.array([1, 1, -1, -1])) == ([2.0], 0.0), \"failed test 7\"\nassert perceptron_dual_train(np.array([[3, 3], [-3, -3]]), np.array([1, -1])) == ([3.0, 3.0], 1.0), \"failed test 8\"\nassert perceptron_dual_train(np.array([[1, 0], [0, 1], [-1, 0], [0, -1]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 0.0), \"failed test 9\"\nassert perceptron_dual_train(np.array([[1, 1], [2, 2], [-2, -2]]), np.array([1, 1, -1])) == ([1.0, 1.0], 1.0), \"failed test 10\""}
{"task_id": 564, "completion_id": 0, "passed": false, "result": "failed: name 'root1' is not defined", "solution": "\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while True:\n        if hasattr(node, 'y'):\n            return node.y\n        if task_type == 'classification':\n            feat_val = features[node.label]\n            next_node = None\n            for child in node.child:\n                if hasattr(child, 'x') and child.x == feat_val:\n                    next_node = child\n                    break\n            if next_node is None:\n                next_node = node.child[1]\n        else:\n            feat_val = features[node.label]\n            next_node = node.child[0] if feat_val <= node.s else node.child[1]\n        node = next_node\nassert predict_sample(root1, [\"red\"], \"classification\") == \"apple\", \"TC1 failed\"\nassert predict_sample(root1, [\"blue\"], \"classification\") == \"pear\", \"TC2 failed\"\nassert predict_sample(root2, [\"A\", \"Y\"], \"classification\") == 1, \"TC3 failed\"\nassert predict_sample(root3, [7], \"regression\") == 5.0, \"TC4 failed\"\nassert predict_sample(root3, [10], \"regression\") == 5.0, \"TC5 failed\"\nassert predict_sample(root3, [12], \"regression\") == 15.0, \"TC6 failed\"\nassert predict_sample(root4, [6, -1], \"regression\") == 1.5, \"TC7 failed\"\nassert predict_sample(leaf_only, [], \"classification\") == 42, \"TC8 failed\"\nassert predict_sample(root5, [1], \"classification\") == \"One\", \"TC9 failed\"\nassert predict_sample(root6, [\"z\", \"d\"], \"classification\") == \"Bird\", \"TC10 failed\""}
{"task_id": 565, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef _entropy(labels: np.ndarray) -> float:\n    \"\"\"\n    Shannon entropy H(labels) in bits.\n    labels are integers starting from 0.\n    \"\"\"\n    if labels.size == 0:\n        return 0.0\n    counts = np.bincount(labels)\n    probs = counts[counts > 0] / labels.size\n    return float(-np.sum(probs * np.log2(probs)))\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        (best_feature_index, max_information_gain_rounded_to_6_decimals)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    base_entropy = _entropy(y)\n    best_gain = -math.inf\n    best_index = 0\n    for idx in range(n_features):\n        column = X[:, idx]\n        (vals, counts) = np.unique(column, return_counts=True)\n        cond_entropy = 0.0\n        for (val, cnt) in zip(vals, counts):\n            subset_labels = y[column == val]\n            cond_entropy += cnt / n_samples * _entropy(subset_labels)\n        info_gain = base_entropy - cond_entropy\n        if info_gain > best_gain + 1e-12:\n            best_gain = info_gain\n            best_index = idx\n        elif abs(info_gain - best_gain) <= 1e-12 and idx < best_index:\n            best_index = idx\n    if abs(best_gain) < 1e-12:\n        best_gain = 0.0\n    return (best_index, round(best_gain, 6))\nassert choose_best_feature(np.array([[0, 1], [1, 0], [0, 1], [1, 1]]), np.array([0, 1, 0, 1])) == (0, 1.0), \"test case failed: example 1\"\nassert choose_best_feature(np.array([[0,0],[0,0],[1,1]]), np.array([0,0,1])) == (0, 0.918296), \"test case failed: identical features\"\nassert choose_best_feature(np.array([[0,1],[1,0],[0,1]]), np.array([1,1,1])) == (0, 0.0), \"test case failed: zero entropy labels\"\nassert choose_best_feature(np.array([[0, 1, 0], [1, 1, 1], [1, 0, 0], [0, 1, 1]]), np.array([0, 1, 1, 0])) == (0, 1.0), \"test case failed: mixed dataset\"\nassert choose_best_feature(np.array([[0],[1],[2]]), np.array([0,1,2])) == (0, 1.584963), \"test case failed: three classes\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1, 1])) == (0, 0.419973), \"test case failed: uneven distribution\"\nassert choose_best_feature(np.array([[0, 0], [1, 1]]), np.array([0, 1])) == (0, 1.0), \"test case failed: tie breaking\"\nassert choose_best_feature(np.array([[0],[0],[0]]), np.array([1, 1, 1])) == (0, 0.0), \"test case failed: single feature all same\"\nassert choose_best_feature(np.array([[0, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0]]), np.array([0, 0, 1, 1, 1, 0])) == (0, 1.0), \"test case failed: larger synthetic set\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [1, 2], [2, 2]]), np.array([0, 0, 1, 1])) == (0, 1.0), \"test case failed: multi-valued tie\""}
{"task_id": 566, "completion_id": 0, "passed": false, "result": "failed: case 3 failed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation (deterministic).\n\n    Args\n    ----\n    data        : 2-D NumPy array (n_samples, n_features)\n    n_trees     : number of random isolation trees\n    sample_size : subsample size used to grow every tree\n    epsilon     : fraction (0 \u2264 \u03b5 < 1) of observations regarded as outliers\n\n    Returns\n    -------\n    A sorted list with the zero-based indices of the detected outliers.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0 or n_samples == 0:\n        return []\n    subsz = min(sample_size, n_samples)\n    height_limit = math.ceil(math.log2(subsz)) if subsz > 1 else 0\n\n    def c_factor(n: int) -> float:\n        \"\"\"Expected path length for an unsuccessful search in a BST.\"\"\"\n        if n <= 1:\n            return 0.0\n        return 2.0 * math.log(n - 1) + 0.5772156649 - 2.0 * (n - 1) / n\n\n    class Node:\n        __slots__ = ('is_leaf', 'size', 'feat', 'thr', 'left', 'right')\n\n        def __init__(self, *, is_leaf: bool, size: int, feat=None, thr=None, left=None, right=None):\n            self.is_leaf = is_leaf\n            self.size = size\n            self.feat = feat\n            self.thr = thr\n            self.left = left\n            self.right = right\n\n    def build_tree(idxs: np.ndarray, depth: int) -> Node:\n        \"\"\"Recursively build one isolation tree.\"\"\"\n        if depth >= height_limit or idxs.size <= 1:\n            return Node(is_leaf=True, size=idxs.size)\n        feat = np.random.randint(n_features)\n        col = data[idxs, feat]\n        (f_min, f_max) = (col.min(), col.max())\n        if f_min == f_max:\n            return Node(is_leaf=True, size=idxs.size)\n        thr = np.random.uniform(f_min, f_max)\n        left_mask = col < thr\n        right_mask = ~left_mask\n        if not left_mask.any() or not right_mask.any():\n            return Node(is_leaf=True, size=idxs.size)\n        left_child = build_tree(idxs[left_mask], depth + 1)\n        right_child = build_tree(idxs[right_mask], depth + 1)\n        return Node(is_leaf=False, size=idxs.size, feat=feat, thr=thr, left=left_child, right=right_child)\n\n    def path_length(x: np.ndarray, node: Node, depth: int=0) -> float:\n        \"\"\"Path length of one sample through one tree.\"\"\"\n        if node.is_leaf:\n            return depth + c_factor(node.size)\n        if x[node.feat] < node.thr:\n            return path_length(x, node.left, depth + 1) if node.left is not None else depth + c_factor(node.size)\n        else:\n            return path_length(x, node.right, depth + 1) if node.right is not None else depth + c_factor(node.size)\n    forest: list[Node] = []\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(n_samples, subsz, replace=False)\n        forest.append(build_tree(sample_indices, depth=0))\n    path_sum = np.zeros(n_samples, dtype=float)\n    for tree in forest:\n        for i in range(n_samples):\n            path_sum[i] += path_length(data[i], tree)\n    h_bar = path_sum / n_trees\n    phi = 0.0\n    if n_samples > 1:\n        phi = 2.0 * math.log(n_samples - 1) - 2.0 * (n_samples - 1) / n_samples\n    else:\n        phi = 1.0\n    scores = np.power(2.0, -h_bar / phi)\n    k = int(math.floor(epsilon * n_samples))\n    if k == 0:\n        return []\n    largest_k_idx = np.argsort(scores)[-k:]\n    return sorted(largest_k_idx.tolist())\nassert detect_outliers(np.array([[1.0,1.1],[0.9,1.0],[1.2,0.8],[8.0,8.0]]),50,4,0.25)==[3], \"case 1 failed\"\nassert detect_outliers(np.array([[0.0],[0.1],[-0.1],[5.0]]),60,4,0.25)==[3], \"case 2 failed\"\nassert detect_outliers(np.vstack([np.zeros((10,2)),np.array([[5,5],[6,6]])]),80,8,0.15)==[10,11], \"case 3 failed\"\nassert detect_outliers(np.vstack([np.zeros((15,1)),np.array([[3.0],[4.0]])]),70,8,0.1)==[15,16], \"case 4 failed\"\nassert detect_outliers(np.array([[1.0],[1.0],[1.0],[1.0]]),40,4,0.1)==[], \"case 5 failed\"\nassert detect_outliers(np.array([[1.0],[1.1],[0.9],[1.05],[8.0]]),50,5,0.2)==[4], \"case 6 failed\"\nassert detect_outliers(np.array([[0,0],[0,0.1],[0.1,0],[0.05,-0.05],[0.02,0.01],[7,7]]),60,6,0.17)==[5], \"case 7 failed\"\nassert detect_outliers(np.array([[1],[1]]),30,2,0.5)==[], \"case 8 failed\"\nassert detect_outliers(np.array([[0.0,0.0],[0.05,0.0],[-0.05,0.0],[0.0,0.05],[0.0,-0.05],[10.0,10.0]]),90,6,0.2)==[5], \"case 9 failed\""}
{"task_id": 567, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label is chosen.\n    \"\"\"\n    votes = np.asarray(predictions)\n    n_samples = votes.shape[1]\n    final_labels: list[int] = []\n    for col in range(n_samples):\n        (labels, counts) = np.unique(votes[:, col], return_counts=True)\n        max_count = counts.max()\n        tied_labels = labels[counts == max_count]\n        chosen_label = int(tied_labels.min())\n        final_labels.append(chosen_label)\n    return final_labels\nassert majority_vote([[0, 1, 1], [1, 1, 0], [1, 0, 0]]) == [1, 1, 0], \"test 1 failed: majority_vote([[0,1,1],[1,1,0],[1,0,0]])\"\nassert majority_vote([[0, 0, 1], [1, 1, 0], [1, 0, 0], [0, 1, 1]]) == [0, 0, 0], \"test 2 failed: tie handling\"\nassert majority_vote([[2, 2, 1], [1, 1, 1]]) == [1, 1, 1], \"test 3 failed: two trees\"\nassert majority_vote([[3, 3, 3], [3, 2, 1], [2, 2, 1]]) == [3, 2, 1], \"test 4 failed: general voting\"\nassert majority_vote([[0, 1, 2, 3]]) == [0, 1, 2, 3], \"test 5 failed: single tree\"\nassert majority_vote([[0, 0], [1, 1], [1, 1]]) == [1, 1], \"test 6 failed\"\nassert majority_vote([[1, 2, 3, 4], [1, 2, 2, 4], [1, 2, 2, 4]]) == [1, 2, 2, 4], \"test 7 failed\"\nassert majority_vote([[-1, -1], [-1, 1], [1, 1]]) == [-1, 1], \"test 8 failed: negative labels\"\nassert majority_vote([[0.0, 1.0], [1.0, 1.0], [0.0, 0.0]]) == [0, 1], \"test 9 failed: float inputs\"\nassert majority_vote([[5, 5, 5], [5, 4, 4], [4, 4, 4], [5, 5, 4]]) == [5, 4, 4], \"test 10 failed: large labels\""}
{"task_id": 568, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Train a Maximum-Entropy classifier with Generalised Iterative Scaling\n    on (categorical) training data and return the label predictions for\n    X_test.\n    \"\"\"\n\n    def active_sum(x_row, y_label):\n        \"\"\"\n        Sum of the weights that are active for (x_row , y_label).\n        Each (feature_index, feature_value, y_label) that matches x_row\n        contributes its current weight.\n        \"\"\"\n        s = 0.0\n        for (i, val) in enumerate(x_row):\n            idx = feat2id.get((i, val, y_label))\n            if idx is not None:\n                s += weights[idx]\n        return s\n    (N, d) = X_train.shape\n    labels = list(set((int(y) for y in y_train)))\n    C = d\n    feat_counts = defaultdict(int)\n    for (x_row, y) in zip(X_train, y_train):\n        y = int(y)\n        for (i, val) in enumerate(x_row):\n            feat_counts[i, val, y] += 1\n    n_feats = len(feat_counts)\n    feat2id = {}\n    emp_exp = np.zeros(n_feats, dtype=float)\n    for (idx, (feat, cnt)) in enumerate(feat_counts.items()):\n        feat2id[feat] = idx\n        emp_exp[idx] = cnt / N\n    weights = np.zeros(n_feats, dtype=float)\n    tiny = 1e-12\n    for _ in range(n_iter):\n        mod_exp = np.zeros(n_feats, dtype=float)\n        for x_row in X_train:\n            raw = {y: active_sum(x_row, y) for y in labels}\n            max_raw = max(raw.values())\n            exp_scores = {y: math.exp(raw[y] - max_raw) for y in labels}\n            Z = sum(exp_scores.values())\n            probs = {y: exp_scores[y] / Z for y in labels}\n            for (y, p) in probs.items():\n                if p == 0.0:\n                    continue\n                for (i, val) in enumerate(x_row):\n                    idx = feat2id.get((i, val, y))\n                    if idx is not None:\n                        mod_exp[idx] += p\n        mod_exp /= N\n        max_change = 0.0\n        for j in range(n_feats):\n            delta = 1.0 / C * math.log((emp_exp[j] + tiny) / (mod_exp[j] + tiny))\n            weights[j] += delta\n            if abs(delta) > max_change:\n                max_change = abs(delta)\n        if max_change < epsilon:\n            break\n    preds = []\n    for x_row in X_test:\n        (best_label, best_score) = (None, -float('inf'))\n        for y in labels:\n            score = active_sum(x_row, y)\n            if score > best_score:\n                best_score = score\n                best_label = y\n        preds.append(int(best_label))\n    return preds\nassert maxent_predict(np.array([[0],[1]]), np.array([0,1]), np.array([[1],[0]])) == [1,0], \"Test-1 failed: basic two-sample training\"\nassert maxent_predict(np.array([[0],[0],[1],[1]]), np.array([0,0,1,1]), np.array([[1],[0]])) == [1,0], \"Test-2 failed: duplicated training rows\"\nassert maxent_predict(np.array([[0,0],[1,0]]), np.array([0,1]), np.array([[0,0],[1,0],[0,0]])) == [0,1,0], \"Test-3 failed: two features, two labels\"\nassert maxent_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[2],[0]])) == [2,0], \"Test-4 failed: three labels\"\nassert maxent_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,2]), np.array([[0,1],[1,0]])) == [1,2], \"Test-5 failed: 3-class, 2-feature\"\nassert maxent_predict(np.array([[0,1,0],[1,0,1]]), np.array([0,1]), np.array([[1,0,1]])) == [1], \"Test-6 failed: 3 features\"\nassert maxent_predict(np.array([[0],[0],[0],[1]]), np.array([1,1,1,0]), np.array([[1],[0]])) == [0,1], \"Test-7 failed: imbalanced classes\"\nassert maxent_predict(np.array([[0,0],[0,1],[0,2],[1,0],[1,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[0,2]])) == [1,0], \"Test-8 failed: bigger balanced dataset\"\nassert maxent_predict(np.array([[5],[6],[7]]), np.array([2,2,2]), np.array([[5],[7]])) == [2,2], \"Test-9 failed: single-class training\"\nassert maxent_predict(np.array([[0],[1]]), np.array([1,0]), np.array([[0],[1]])) == [1,0], \"Test-10 failed: labels reversed order\""}
{"task_id": 569, "completion_id": 0, "passed": false, "result": "failed: test case failed: single document", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate per-word document-frequency statistics.\n\n    The function returns\n        1. a list of (word, ratio) pairs where *ratio* is the fraction of\n           documents in which the word occurs (rounded to 4 decimals),\n           sorted from the most to the least frequent word;\n        2. a set that contains only the *cut_off* most frequent words\n           (all words if *cut_off* is None).\n\n    Args:\n        data: list/iterable of documents.  Each document is a tuple\n              ``(label, words)`` where *words* is any iterable of strings.\n        cut_off: maximal number of top words to put into the returned set, or\n                 ``None`` for *all* words.\n\n    Returns:\n        Tuple[list[(word, ratio)], set[str]]\n    \"\"\"\n    n_docs = len(data)\n    if n_docs == 0:\n        return ([], set())\n    doc_counter: Counter[str] = Counter()\n    for (_, words) in data:\n        doc_counter.update(set(words))\n    freq_list = [(word, round(count / n_docs, 4)) for (word, count) in doc_counter.items()]\n    freq_list.sort(key=lambda pair: (-pair[1], pair[0]))\n    if cut_off is None:\n        top_k_set = {word for (word, _) in freq_list}\n    elif cut_off <= 0:\n        top_k_set = set()\n    else:\n        top_k_set = {word for (word, _) in freq_list[:cut_off]}\n    return (freq_list, top_k_set)\nassert statistic_key_word([(1, {\"apple\", \"banana\"}), (0, {\"banana\", \"cherry\"}), (1, {\"banana\", \"dragon\"})], 2) == ([('banana', 1.0), ('apple', 0.3333), ('cherry', 0.3333), ('dragon', 0.3333)], {'banana', 'apple'}), \"test case failed: basic example with cut_off = 2\"\nassert statistic_key_word([(1, ['a', 'a', 'b']), (0, ['b', 'c']), (1, ['c'])], None)[0] == [('b', 0.6667), ('c', 0.6667), ('a', 0.3333)], \"test case failed: duplicates inside a document and cut_off = None\"\nassert statistic_key_word([(1, ['x']), (0, ['y'])], 5)[1] == {'x', 'y'}, \"test case failed: cut_off larger than vocabulary\"\nassert statistic_key_word([(1, ['p', 'q', 'r'])], None) == ([('q', 1.0), ('r', 1.0), ('p', 1.0)], {'p', 'q', 'r'}), \"test case failed: single document\"\nassert statistic_key_word([(1, ['m', 'n']), (0, ['m'])], 1)[1] == {'m'}, \"test case failed: cut_off = 1\"\nassert statistic_key_word([(1, ['d']), (0, ['e']), (1, ['f'])], 0)[1] == set(), \"test case failed: cut_off = 0\"\nassert statistic_key_word([(1, ['g', 'h']), (0, ['h', 'i'])], 2)[0][0][0] == 'h', \"test case failed: most frequent word should be first\"\nassert all(ratio <= 1 for _, ratio in statistic_key_word([(1, ['a']), (0, ['a', 'b'])], None)[0]), \"test case failed: ratio larger than 1\"\nassert statistic_key_word([(1, []), (0, [])], None) == ([], set()), \"test case failed: documents without any word\"\nassert statistic_key_word([], None) == ([], set()), \"test case failed: empty data list\""}
{"task_id": 570, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import defaultdict\nfrom collections import defaultdict\nfrom typing import List, Tuple, Set\ndef naive_bayes_predict(train_data: List[Tuple[str, List[str]]], keywords: Set[str], test_samples: List[List[str]]) -> List[str]:\n    \"\"\"Unsmooothed Bernoulli Naive Bayes classifier that uses only *keywords*\n    as binary features (present / absent).  No class prior and no smoothing.\n    \"\"\"\n    counts = defaultdict(lambda : defaultdict(int))\n    N_docs = defaultdict(int)\n    class_order: list[str] = []\n    for (label, tokens) in train_data:\n        if label not in N_docs:\n            class_order.append(label)\n        N_docs[label] += 1\n        token_set = set(tokens)\n        for w in keywords:\n            if w in token_set:\n                counts[label][w] += 1\n    probs: dict[str, dict[str, float]] = {}\n    for label in N_docs:\n        Nc = N_docs[label]\n        probs[label] = {}\n        for w in keywords:\n            probs[label][w] = counts[label][w] / Nc\n    predictions: list[str] = []\n    for tokens in test_samples:\n        tok_set = set(tokens)\n        best_label = None\n        best_likelihood = -1.0\n        for label in class_order:\n            likelihood = 1.0\n            for w in keywords:\n                pwc = probs[label][w]\n                if w in tok_set:\n                    likelihood *= pwc\n                else:\n                    likelihood *= 1.0 - pwc\n            if likelihood > best_likelihood:\n                best_likelihood = likelihood\n                best_label = label\n        if best_label is None:\n            best_label = class_order[0]\n        predictions.append(best_label)\n    return predictions\nassert naive_bayes_predict([('spam', ['cheap', 'offer']), ('ham', ['hello', 'friend']), ('spam', ['buy', 'cheap'])], {'cheap', 'buy', 'hello'}, [['cheap'], ['hello']]) == ['spam', 'ham'], \"test case failed: spam/ham basic\"\nassert naive_bayes_predict([('positive', ['good']), ('negative', ['bad'])], {'good', 'bad'}, [['good']]) == ['positive'], \"test case failed: good word\"\nassert naive_bayes_predict([('positive', ['good']), ('negative', ['bad'])], {'good', 'bad'}, [['bad']]) == ['negative'], \"test case failed: bad word\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['goal']]) == ['sports'], \"test case failed: sports goal\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['code']]) == ['tech'], \"test case failed: tech code\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['vote']]) == ['politics'], \"test case failed: politics vote\"\nassert naive_bayes_predict([('yes', ['y', 'g']), ('no', ['n'])], {'y', 'n'}, [['n']]) == ['no'], \"test case failed: yes/no n\"\nassert naive_bayes_predict([('spam', ['cheap', 'offer']), ('ham', ['hello', 'friend']), ('spam', ['buy', 'cheap'])], {'cheap', 'buy', 'hello'}, [['buy']]) == ['spam'], \"test case failed: buy word\"\nassert naive_bayes_predict([('pos', ['good']), ('neg', ['bad']), ('pos', ['good'])], {'good', 'bad'}, [['good']]) == ['pos'], \"test case failed: duplicate good\"\nassert naive_bayes_predict([('A', ['x']), ('A', ['y']), ('B', ['x', 'y'])], {'x', 'y'}, [['x']]) == ['A'], \"test case failed: A/B mixture\""}
{"task_id": 571, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        Training data.\n    y : np.ndarray, shape (n_samples,)\n        Class labels (+1 or \u22121).\n    alpha : np.ndarray, shape (n_samples,)\n        Optimised Lagrange multipliers.\n\n    Returns\n    -------\n    (w_list, b) : tuple[list[float], float]\n        w_list : the weight vector rounded to 4 decimals (Python list)\n        b       : the bias term rounded to 4 decimals (float)\n    \"\"\"\n    alpha_y = alpha * y\n    w = X.T @ alpha_y\n    predictions = X @ w\n    b = np.mean(y - predictions)\n    w_list = [round(float(w_i), 4) for w_i in w]\n    b = round(float(b), 4)\n    return (w_list, b)\nassert compute_svm_parameters(np.array([[1, 2], [2, 3]]), np.array([1, -1]), np.array([0.5, 0.5])) == ([-0.5, -0.5], 2.0), \"test case failed: basic 2\u00d72\"\nassert compute_svm_parameters(np.array([[0, 0], [1, 1]]), np.array([-1, 1]), np.array([0.1, 0.3])) == ([0.3, 0.3], -0.3), \"test case failed: zeros and ones\"\nassert compute_svm_parameters(np.array([[1], [2], [3]]), np.array([1, 1, -1]), np.array([0.2, 0.2, 0.4])) == ([-0.6], 1.5333), \"test case failed: single feature\"\nassert compute_svm_parameters(np.array([[-1, -1], [1, 1]]), np.array([1, -1]), np.array([0.25, 0.25])) == ([-0.5, -0.5], 0.0), \"test case failed: symmetric points\"\nassert compute_svm_parameters(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 1, -1]), np.array([0.4, 0.4, 0.4])) == ([0.4, 0.4, -0.4], 0.2), \"test case failed: identity matrix\"\nassert compute_svm_parameters(np.array([[2, 2]]), np.array([1]), np.array([0.5])) == ([1.0, 1.0], -3.0), \"test case failed: single sample\"\nassert compute_svm_parameters(np.array([[0, 0], [0, 0]]), np.array([1, -1]), np.array([0.2, 0.2])) == ([0.0, 0.0], 0.0), \"test case failed: zero features\"\nassert compute_svm_parameters(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), np.array([1, -1, 1]), np.array([0.2, 0.3, 0.1])) == ([-0.3, -0.3, -0.3], 4.8333), \"test case failed: 3\u00d73 matrix\"\nassert compute_svm_parameters(np.array([[-1, 0], [0, 1], [1, 0]]), np.array([-1, 1, 1]), np.array([0.3, 0.3, 0.4])) == ([0.7, 0.3], 0.2333), \"test case failed: mixed signs\"\nassert compute_svm_parameters(np.array([[2], [4]]), np.array([-1, -1]), np.array([0.25, 0.25])) == ([-1.5], 3.5), \"test case failed: negative labels only\""}
{"task_id": 572, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Computes the Local-Outlier-Factor (LOF) for every sample in `data`\n    and returns\n        (list_of_LOF_scores_rounded_to_4_decimals ,\n         ascending_list_of_indices_with_LOF>epsilon)\n\n    Parameters\n    ----------\n    data : array-like, shape = (n_samples, n_features) or (n_samples,)\n    k    : int, 1 \u2264 k < n_samples\n    epsilon : float, threshold that decides which samples are flagged\n              as outliers        (default 1.5)\n\n    Notes\n    -----\n    \u2022  NO external ML / scientific libraries are used \u2013 only `numpy`.\n    \u2022  All LOF scores are rounded with `numpy.round(score, 4)`.\n    \"\"\"\n    data = np.asarray(data, dtype=float)\n    if data.ndim == 1:\n        data = data[:, None]\n    n_samples = data.shape[0]\n    if not 1 <= k < n_samples:\n        raise ValueError('k must satisfy 1 \u2264 k < n_samples (got k = %d)' % k)\n    diff = data[:, None, :] - data[None, :, :]\n    dist_mat = np.sqrt(np.sum(diff ** 2, axis=2))\n    k_distances = np.empty(n_samples)\n    neighbours = np.empty((n_samples, k), int)\n    for i in range(n_samples):\n        idx_sorted = np.argsort(dist_mat[i])\n        neigh_idx = idx_sorted[1:k + 1]\n        neighbours[i] = neigh_idx\n        k_distances[i] = dist_mat[i, neigh_idx[-1]]\n    lrd = np.empty(n_samples)\n    for p in range(n_samples):\n        reach_dist_sum = 0.0\n        for q in neighbours[p]:\n            reach_dist = max(k_distances[q], dist_mat[p, q])\n            reach_dist_sum += reach_dist\n        lrd[p] = k / reach_dist_sum\n    lof = np.empty(n_samples)\n    for p in range(n_samples):\n        lrd_sum = lrd[neighbours[p]].sum()\n        lof[p] = lrd_sum / k / lrd[p]\n    lof_rounded = np.round(lof, 4).tolist()\n    outlier_idx = [i for (i, score) in enumerate(lof) if score > epsilon]\n    return (lof_rounded, outlier_idx)\nassert local_outlier_factor([[0],[1],[2],[10]],1) == ([1.0, 1.0, 1.0, 8.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[10]],1)\"\nassert local_outlier_factor([[0],[1],[5]],1) == ([1.0, 1.0, 4.0], [2]), \"test case failed: local_outlier_factor([[0],[1],[5]],1)\"\nassert local_outlier_factor([[0],[1],[3],[4]],1) == ([1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1],[3],[4]],1)\"\nassert local_outlier_factor([[1],[2],[3],[50]],1) == ([1.0, 1.0, 1.0, 47.0], [3]), \"test case failed: local_outlier_factor([[1],[2],[3],[50]],1)\"\nassert local_outlier_factor([[0],[1]],1) == ([1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1]],1)\"\nassert local_outlier_factor([[0],[1],[2],[6]],1) == ([1.0, 1.0, 1.0, 4.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[6]],1)\"\nassert local_outlier_factor([[0],[2],[4],[6],[8]],1) == ([1.0, 1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[2],[4],[6],[8]],1)\"\nassert local_outlier_factor([[0],[1],[2],[3],[50]],2,2) == ([1.0, 1.0, 1.0, 1.0, 31.6667], [4]), \"test case failed: local_outlier_factor([[0],[1],[2],[3],[50]],2,2)\"\n"}
{"task_id": 573, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the classical Rosenblatt Perceptron learning rule.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        (learned weight vector as list, bias term, list with #errors per epoch),\n        all real\u2010valued outputs rounded to 4 decimal places.\n    \"\"\"\n    X = np.asarray(X_train, dtype=float)\n    y = np.asarray(y_train, dtype=float)\n    (m, n) = X.shape\n    w = np.zeros(n, dtype=float)\n    b = 0.0\n    error_history: list[int] = []\n    for _ in range(n_iter):\n        error_count = 0\n        for (xi, yi) in zip(X, y):\n            if yi * (np.dot(xi, w) + b) <= 0.0:\n                w += eta * yi * xi\n                b += eta * yi\n                error_count += 1\n        error_history.append(int(error_count))\n        if error_count == 0:\n            break\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded, error_history)\nassert perceptron_train(np.array([[ 1,  1], [-1, -1]]), np.array([ 1, -1]), 1.0, 10) == ([1.0, 1.0], 1.0, [1, 0]), \"test case failed: symmetric 2D points ([1,1],[-1,-1])\"\nassert perceptron_train(np.array([[-1],[ 1]]), np.array([-1,  1]), 1.0, 10) == ([2.0], 0.0, [2, 0]), \"test case failed: simple 1D dataset [-1,1]\"\nassert perceptron_train(np.array([[ 2,  3], [ 4,  1], [-1, -3], [-2, -1]]), np.array([ 1, 1, -1, -1]), 1.0, 10) == ([2.0, 3.0], 1.0, [1, 0]), \"test case failed: separable 2D quartet\"\nassert perceptron_train(np.array([[ 1, 0], [0, 1], [-1, -1]]), np.array([ 1, 1, -1]), 1.0, 10) == ([2.0, 1.0], 0.0, [2, 0]), \"test case failed: triangle dataset\"\nassert perceptron_train(np.array([[ 0,  2], [ 2,  0], [-2,  0], [ 0, -2]]), np.array([ 1, 1, -1, -1]), 1.0, 10) == ([2.0, 2.0], 0.0, [2, 0]), \"test case failed: axis-aligned cross\"\nassert perceptron_train(np.array([[ 2], [-3]]), np.array([ 1, -1]), 1.0, 10) == ([2.0], 1.0, [1, 0]), \"test case failed: 1D unequal magnitudes\"\nassert perceptron_train(np.array([[ 3,  3], [-3, -3]]), np.array([ 1, -1]), 1.0, 10) == ([3.0, 3.0], 1.0, [1, 0]), \"test case failed: scaled symmetric points\"\nassert perceptron_train(np.array([[ 0.5], [-0.5]]), np.array([ 1, -1]), 0.1, 20) == ([0.1], 0.0, [2, 0]), \"test case failed: low learning-rate 1D\"\nassert (lambda r,X,y: all(np.sign(np.dot(x, r[0]) + r[1]) == yi for x,yi in zip(X,y)))(perceptron_train(np.array([[ 1,  2], [ 2,  4], [-1, -0.5], [-2, -1]]), np.array([ 1, 1, -1, -1]), 1.0, 10), np.array([[ 1,  2], [ 2,  4], [-1, -0.5], [-2, -1]]), np.array([ 1, 1, -1, -1])), \"test case failed: colinear positive & negatives\"\nassert (lambda r,X,y: all(np.sign(np.dot(x, r[0]) + r[1]) == yi for x,yi in zip(X,y)))(perceptron_train(np.array([[ 1], [ 2], [-2], [-1]]), np.array([ 1, 1, -1, -1]), 1.0, 10), np.array([[ 1], [ 2], [-2], [-1]]), np.array([ 1, 1, -1, -1])), \"test case failed: mixed 1D quartet\""}
{"task_id": 574, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the current global\n        random state is used unchanged.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays with shapes\n        (m\u00b7n_train, 2), (m\u00b7n_val, 2), (m\u00b7n_train,) and (m\u00b7n_val,)\n        respectively.  Every coordinate is rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_tr, X_va) = ([], [])\n    (y_tr, y_va) = ([], [])\n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_tr.append((x, y))\n            y_tr.append(c)\n        for _ in range(n_val):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_va.append((x, y))\n            y_va.append(c)\n    X_train = np.round(np.asarray(X_tr, dtype=float), 4)\n    X_val = np.round(np.asarray(X_va, dtype=float), 4)\n    y_train = np.asarray(y_tr, dtype=int)\n    y_val = np.asarray(y_va, dtype=int)\n    return (X_train, X_val, y_train, y_val)\nassert generate_data(2, 2, 1, seed=42)[0].shape == (4, 2), \"test case failed: shape of X_train for seed=42,2,2,1\"\nassert generate_data(2, 2, 1, seed=42)[1].shape == (2, 2), \"test case failed: shape of X_val for seed=42,2,2,1\"\nassert (generate_data(2, 2, 1, seed=42)[2] == np.array([0, 0, 1, 1])).all(), \"test case failed: y_train labels for seed=42\"\nassert (generate_data(2, 2, 1, seed=42)[3] == np.array([0, 1])).all(), \"test case failed: y_val labels for seed=42\"\nassert generate_data(3, 3, 2, seed=0)[0].shape == (9, 2), \"test case failed: shape of X_train for seed=0,3,3,2\"\nassert generate_data(3, 3, 2, seed=0)[1].shape == (6, 2), \"test case failed: shape of X_val for seed=0,3,3,2\"\nassert set(generate_data(3, 3, 2, seed=0)[2]) == {0, 1, 2}, \"test case failed: y_train label set for seed=0\"\nassert set(generate_data(3, 3, 2, seed=0)[3]) == {0, 1, 2}, \"test case failed: y_val label set for seed=0\"\nassert (generate_data(1, 5, 5, seed=99)[2] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_train not all zeros\"\nassert (generate_data(1, 5, 5, seed=99)[3] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_val not all zeros\""}
{"task_id": 577, "completion_id": 0, "passed": false, "result": "failed: name 'generate_data' is not defined", "solution": "import numpy as np\nimport random\n\nassert generate_data(2, 5, 2, 0)[0].shape == (10, 2), \"test case failed: incorrect X_train shape for generate_data(2,5,2,0)\"\nassert generate_data(2, 5, 2, 0)[1].shape == (4, 2), \"test case failed: incorrect X_val shape for generate_data(2,5,2,0)\"\nassert generate_data(2, 5, 2, 0)[3].size == 4, \"test case failed: y_val is empty for generate_data(2,5,2,0)\"\nXr = generate_data(3, 1, 1, 1)[0]\nassert np.all(np.round(Xr, 4) == Xr), \"test case failed: coordinates are not rounded to 4 decimals\"\nlabels = set(generate_data(2, 3, 1, 2)[2])\nassert labels == {-1.0, 1.0}, \"test case failed: labels are incorrect for generate_data(2,3,1,2)\"\nassert len(set(generate_data(4, 1, 0, 3)[2])) == 4, \"test case failed: incorrect number of distinct labels for m=4\"\nassert np.array_equal(generate_data(4, 2, 1, 42)[0], generate_data(4, 2, 1, 42)[0]), \"test case failed: results differ for identical seeds\"\nassert not np.array_equal(generate_data(4, 2, 1, 1)[0], generate_data(4, 2, 1, 2)[0]), \"test case failed: different seeds give identical results\"\nassert generate_data(3, 0, 2, 5)[0].size == 0, \"test case failed: X_train should be empty when n_train=0\"\nassert generate_data(1, 0, 3, 7)[1].shape == (3, 2), \"test case failed: incorrect X_val size for generate_data(1,0,3,7)\""}
{"task_id": 578, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Tuple\nfrom typing import List, Tuple\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    return [(corpus[i], corpus[i + 1]) for i in range(len(corpus) - 1)]\nassert make_pairs([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)], \"test case failed: make_pairs([1, 2, 3, 4])\"\nassert make_pairs([\"hello\", \"world\"]) == [(\"hello\", \"world\")], \"test case failed: make_pairs(['hello', 'world'])\"\nassert make_pairs([]) == [], \"test case failed: make_pairs([])\"\nassert make_pairs([42]) == [], \"test case failed: make_pairs([42])\"\nassert make_pairs([\"a\", \"a\", \"b\"]) == [(\"a\", \"a\"), (\"a\", \"b\")], \"test case failed: make_pairs(['a','a','b'])\"\nassert make_pairs(list(\"abc\")) == [(\"a\", \"b\"), (\"b\", \"c\")], \"test case failed: make_pairs(list('abc'))\"\nassert make_pairs([True, False, True]) == [(True, False), (False, True)], \"test case failed: make_pairs([True, False, True])\"\nassert make_pairs([0.1, 0.2, 0.3]) == [(0.1, 0.2), (0.2, 0.3)], \"test case failed: make_pairs([0.1, 0.2, 0.3])\"\nassert make_pairs([\"x\", 1, 2.5]) == [(\"x\", 1), (1, 2.5)], \"test case failed: make_pairs(['x', 1, 2.5])\"\nassert make_pairs([None, None, None]) == [(None, None), (None, None)], \"test case failed: make_pairs([None, None, None])\""}
{"task_id": 579, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Deterministic Lloyd-style K-Means clustering.\n\n    Args:\n        X        : (m, d) array with the input points.\n        k        : number of clusters, 1 \u2264 k \u2264 m.\n        max_iters: maximum amount of Lloyd iterations.\n\n    Returns\n    -------\n        labels  : list with length m, the cluster index of every point.\n        centres : list with k inner lists \u2013 the final centres, each\n                  coordinate rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    if X.ndim != 2:\n        raise ValueError('`X` must be a 2-D array (m, d).')\n    (m, d) = X.shape\n    if not 1 <= k <= m:\n        raise ValueError('`k` must satisfy 1 \u2264 k \u2264 number of points.')\n    if max_iters <= 0:\n        raise ValueError('`max_iters` must be positive.')\n    centres = X[:k].copy()\n    labels = np.full(m, -1, dtype=int)\n    for _ in range(max_iters):\n        diff = X[:, None, :] - centres[None, :, :]\n        dist2 = np.sum(diff ** 2, axis=2)\n        new_labels = np.argmin(dist2, axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            mask = labels == i\n            if np.any(mask):\n                centres[i] = X[mask].mean(axis=0)\n    centres_rounded = [[round(val, 4) for val in centre] for centre in centres]\n    return (labels.tolist(), centres_rounded)\nassert kmeans(np.array([[1,1],[1.5,2],[3,4],[5,7],[3.5,5],[4.5,5],[3.5,4.5]]),2,100) == ([0,0,1,1,1,1,1], [[1.25,1.5],[3.9,5.1]]), \"failed on simple 2-cluster example\"\nassert kmeans(np.array([[0,0],[10,10],[0,10],[10,0]]),2,50) == ([0,1,0,0], [[3.3333,3.3333],[10.0,10.0]]), \"failed on square corners\"\nassert kmeans(np.array([[0],[5],[10]]),3,10) == ([0,1,2], [[0.0],[5.0],[10.0]]), \"each point its own cluster\"\nassert kmeans(np.array([[0],[1],[2],[3],[9],[10],[11],[12]]),2,50) == ([0,0,0,0,1,1,1,1], [[1.5],[10.5]]), \"failed on 1-D two clusters\"\nassert kmeans(np.array([[1,2,3],[1,2,4],[10,10,10],[11,11,11]]),2,50) == ([0,0,1,1], [[1.0,2.0,3.5],[10.5,10.5,10.5]]), \"failed on 3-D clustering\"\nassert kmeans(np.array([[0,0],[0,0.1],[10,10],[10,10.1]]),2,50) == ([0,0,1,1], [[0.0,0.05],[10.0,10.05]]), \"failed on very close points\"\nassert kmeans(np.array([[2,2],[2,2],[2,2]]),1,5) == ([0,0,0], [[2.0,2.0]]), \"single cluster identical points\"\nassert kmeans(np.array([[1,1],[2,2],[3,3],[8,8],[9,9],[10,10]]),2,100) == ([0,0,0,1,1,1], [[2.0,2.0],[9.0,9.0]]), \"failed on two distant blobs\""}
{"task_id": 581, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation using batch GD.\"\"\"\n    (m, n) = X.shape\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * n, 0.0)\n    w = np.zeros(n, dtype=float)\n    b = 0.0\n    for _ in range(iterations):\n        y_hat = X @ w + b\n        r = y - y_hat\n        sign_w = np.sign(w)\n        sign_w[sign_w == 0] = -1\n        grad_w = -2 * X.T @ r + l1_penalty * sign_w + 2 * l2_penalty * w\n        grad_b = -2 * r.sum()\n        w -= learning_rate * (grad_w / m)\n        b -= learning_rate * (grad_b / m)\n    weights_rounded = [round(float(val), 4) for val in w]\n    bias_rounded = round(float(b), 4)\n    return (weights_rounded, bias_rounded)\nassert elastic_net_regression(np.array([[1, 0], [0, 1]]), np.array([1, 1]), 0.5, 1, 0.0, 0.0) == ([0.5, 0.5], 1.0), \"failed: basic 2-D example\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([2, 4]), 0.1, 1, 0.0, 0.0) == ([1.0], 0.6), \"failed: single feature, no regularisation\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([1, 1]), 1.0, 1, 1.0, 0.0) == ([2.5], 2.0), \"failed: L1 penalty example\"\nassert elastic_net_regression(np.array([[1, 1], [1, 1]]), np.array([2, 2]), 0.5, 1, 0.0, 0.0) == ([2.0, 2.0], 2.0), \"failed: identical features\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([2, 2]), 0.1, 1, 0.0, 5.0) == ([0.4], 0.4), \"failed: L2 penalty (first iteration)\"\nassert elastic_net_regression(np.array([[1, 2], [3, 4]]), np.array([1, 0]), 0.2, 1, 0.0, 0.0) == ([0.2, 0.4], 0.2), \"failed: two samples, two features\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([3, 4]), 0.0, 3, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero learning rate\"\nassert elastic_net_regression(np.array([[1]]), np.array([1]), 1.0, 0, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero iterations\"\nassert elastic_net_regression(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 2, 3]), 0.1, 1, 0.0, 0.0) == ([0.0667, 0.1333, 0.2], 0.4), \"failed: 3-D identity matrix\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([-1, -1]), 0.5, 1, 0.0, 0.0) == ([-1.0], -1.0), \"failed: negative targets\""}
{"task_id": 582, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    n = X.shape[0]\n    if n <= 1:\n        return [[0]] if n == 1 else []\n    k = min(int(np.sqrt(n)), 10)\n    if k == 0:\n        k = 1\n    diff = X[:, None, :] - X[None, :, :]\n    dist2 = np.sum(diff ** 2, axis=-1)\n    directed = np.zeros((n, n), dtype=bool)\n    for i in range(n):\n        order = np.argsort(dist2[i])\n        neighbours = [idx for idx in order if idx != i][:k]\n        directed[i, neighbours] = True\n    undirected = (directed | directed.T).astype(int)\n    return undirected.tolist()\nassert nearest_neighbor_graph([[0,0],[1,0]]) == [[0,1],[1,0]], \"test case failed: 2 points, k=1\"\nassert nearest_neighbor_graph([[0,0],[1,0],[0,1]]) == [[0,1,1],[1,0,0],[1,0,0]], \"test case failed: triangle, k=1\"\nassert nearest_neighbor_graph([[0,0],[3,0],[0,4]]) == [[0,1,1],[1,0,0],[1,0,0]], \"test case failed: right triangle, k=1\"\nassert nearest_neighbor_graph([[0,0]]) == [[0]], \"test case failed: single point\"\nassert nearest_neighbor_graph([[0],[1],[2],[6],[7]]) == [[0,1,1,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[0,0,1,1,0]], \"test case failed: 1-D five points, k=2\"\nassert nearest_neighbor_graph([[0,0],[1,0],[0,1],[10,10]]) == [[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]], \"test case failed: 4 points, outlier\"\nassert nearest_neighbor_graph([[0,0],[0,0.1],[0,0.2]]) == [[0,1,0],[1,0,1],[0,1,0]], \"test case failed: nearly colinear three points\"\nassert nearest_neighbor_graph([[0,0],[1,0],[2,0],[3,0]]) == [[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]], \"test case failed: 4 colinear points, k=2\"\nassert nearest_neighbor_graph([[0],[5],[10]]) == [[0,1,0],[1,0,1],[0,1,0]], \"test case failed: evenly spaced three points\"\nassert nearest_neighbor_graph([[0,0],[1,1],[2,2],[3,3],[4,4]]) == [[0,1,1,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[0,0,1,1,0]], \"test case failed: 5 diagonal points, k=2\""}
{"task_id": 584, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list (height \u00d7 width) representing the grayscale frame.\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the same frame is\n        repeated along the last axis.\n    \"\"\"\n    frame = np.asarray(state)\n    stacked_state = np.repeat(frame[..., np.newaxis], 4, axis=-1)\n    return stacked_state.tolist()\nassert make_initial_state([[5]]) == [[[5, 5, 5, 5]]], \"test case failed: make_initial_state([[5]])\"\nassert make_initial_state([[0, 1], [2, 3]]) == [[[0,0,0,0],[1,1,1,1]],[[2,2,2,2],[3,3,3,3]]], \"test case failed: make_initial_state([[0, 1], [2, 3]])\"\nassert make_initial_state([[0.1, 0.2, 0.3]]) == [[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]], \"test case failed: single-row float input\"\nassert make_initial_state([[1], [2], [3]]) == [[[1,1,1,1]],[[2,2,2,2]],[[3,3,3,3]]], \"test case failed: single-column input\"\nassert make_initial_state([[1, 2, 3], [4, 5, 6]]) == [[[1,1,1,1],[2,2,2,2],[3,3,3,3]],[[4,4,4,4],[5,5,5,5],[6,6,6,6]]], \"test case failed: 2\u00d73 input\"\nassert make_initial_state([[1.5,-2.2],[3.0,0.0]]) == [[[1.5,1.5,1.5,1.5],[-2.2,-2.2,-2.2,-2.2]],[[3.0,3.0,3.0,3.0],[0.0,0.0,0.0,0.0]]], \"test case failed: mixed sign floats\"\nassert make_initial_state([[-1,-2],[-3,-4]]) == [[[-1,-1,-1,-1],[-2,-2,-2,-2]],[[-3,-3,-3,-3],[-4,-4,-4,-4]]], \"test case failed: negative integers\"\nassert make_initial_state([[0,0],[0,0]]) == [[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]], \"test case failed: all zeros\"\nassert make_initial_state([[1,2,3],[4,5,6],[7,8,9]]) == [[[1,1,1,1],[2,2,2,2],[3,3,3,3]],[[4,4,4,4],[5,5,5,5],[6,6,6,6]],[[7,7,7,7],[8,8,8,8],[9,9,9,9]]], \"test case failed: 3\u00d73 input\"\nassert make_initial_state([[9],[8],[7],[6]]) == [[[9,9,9,9]],[[8,8,8,8]],[[7,7,7,7]],[[6,6,6,6]]], \"test case failed: 4\u00d71 input\""}
{"task_id": 585, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It returns:\n        \u2022  1  if ``a`` is greater than ``b``\n        \u2022  0  if ``a`` equals ``b``\n        \u2022 -1  if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    return (a > b) - (a < b)\nassert cmp(5, 3) == 1, \"test case failed: cmp(5, 3)\"\nassert cmp(3, 5) == -1, \"test case failed: cmp(3, 5)\"\nassert cmp(7, 7) == 0, \"test case failed: cmp(7, 7)\"\nassert cmp(-1, -5) == 1, \"test case failed: cmp(-1, -5)\"\nassert cmp(-10, -2) == -1, \"test case failed: cmp(-10, -2)\"\nassert cmp(3.14, 3.14) == 0, \"test case failed: cmp(3.14, 3.14)\"\nassert cmp(\"apple\", \"banana\") == -1, \"test case failed: cmp('apple', 'banana')\"\nassert cmp(\"zebra\", \"alpha\") == 1, \"test case failed: cmp('zebra', 'alpha')\"\nassert cmp([1, 2], [1, 2]) == 0, \"test case failed: cmp([1, 2], [1, 2])\"\nassert cmp((1, 3), (1, 2)) == 1, \"test case failed: cmp((1, 3), (1, 2))\""}
{"task_id": 586, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Single-point LOWESS prediction (linear local model).\n\n    Parameters\n    ----------\n    x, y : np.ndarray\n        One-dimensional training data (same length).\n    x_query : float\n        Abscissa at which to predict.\n    window : int\n        Number of nearest neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns\n    -------\n    float\n        LOWESS prediction rounded to 4 decimals.\n    \"\"\"\n    if x.shape[0] != y.shape[0]:\n        raise ValueError('x and y must have the same length.')\n    n = x.shape[0]\n    if not 2 <= window <= n:\n        raise ValueError('window must satisfy 2 \u2264 window \u2264 len(x).')\n\n    def _normalise(arr):\n        (mn, mx) = (float(arr.min()), float(arr.max()))\n        if mx == mn:\n            return (np.zeros_like(arr, dtype=float), mn, mx)\n        return ((arr - mn) / (mx - mn), mn, mx)\n    (x_norm, x_min, x_max) = _normalise(x)\n    (y_norm, y_min, y_max) = _normalise(y)\n    if x_max == x_min:\n        xq_norm = 0.0\n    else:\n        xq_norm = (x_query - x_min) / (x_max - x_min)\n    distances = np.abs(x_norm - xq_norm)\n    neighbour_idx = np.argpartition(distances, window - 1)[:window]\n    neighbour_idx = neighbour_idx[np.argsort(distances[neighbour_idx])]\n    d = distances[neighbour_idx]\n    x_sel = x_norm[neighbour_idx]\n    y_sel = y_norm[neighbour_idx]\n    d_max = d.max()\n    if d_max == 0:\n        w = np.ones_like(d)\n    else:\n        u = d / d_max\n        w = (1 - u ** 3) ** 3\n        w[u > 1] = 0.0\n    w_sum = w.sum()\n    wx = w * x_sel\n    wy = w * y_sel\n    x_bar = wx.sum() / w_sum\n    y_bar = wy.sum() / w_sum\n    b_den = (w * (x_sel - x_bar) ** 2).sum()\n    if b_den == 0:\n        y_hat_norm = y_bar\n    else:\n        b = (w * (x_sel - x_bar) * (y_sel - y_bar)).sum() / b_den\n        a = y_bar - b * x_bar\n        y_hat_norm = a + b * xq_norm\n    if y_max == y_min:\n        y_hat = y_min\n    else:\n        y_hat = y_hat_norm * (y_max - y_min) + y_min\n    return float(np.round(y_hat, 4))\nassert lowess_predict(np.array([0,1,2,3,4,5]), np.array([3,5,7,9,11,13]), 2, 4) == 7.0, \"test case failed: linear data, x_query=2\"\nassert lowess_predict(np.array([0,1,2,3,4,5]), np.array([3,5,7,9,11,13]), 4, 4) == 11.0, \"test case failed: linear data, x_query=4\"\nassert lowess_predict(np.arange(-5,3), 3*np.arange(-5,3)-2, -1, 5) == -5.0, \"test case failed: slope 3, intercept -2, x_query=-1\"\nassert lowess_predict(np.arange(0,11), 2.5*np.arange(0,11)+7, 5, 6) == 19.5, \"test case failed: slope 2.5, intercept 7, x_query=5\"\nassert lowess_predict(np.arange(0,11), 2.5*np.arange(0,11)+7, 7, 6) == 24.5, \"test case failed: slope 2.5, intercept 7, x_query=7\"\nassert lowess_predict(np.arange(1,10), -2*np.arange(1,9+1)+20, 6, 4) == 8.0, \"test case failed: negative slope\"\nassert lowess_predict(np.arange(0,7), 0.5*np.arange(0,7)+1.5, 3, 4) == 3.0, \"test case failed: slope 0.5, intercept 1.5\"\nassert lowess_predict(np.array([1,1.5,2,2.5,3]), 4*np.array([1,1.5,2,2.5,3])-1, 2.25, 5) == 8.0, \"test case failed: fractional x_query\""}
{"task_id": 587, "completion_id": 0, "passed": true, "result": "passed", "solution": "import random\nimport random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Execute a sequence of replay-buffer operations.\n\n    The buffer is a plain list that starts out empty.\n    \"\"\"\n    random.seed(0)\n    buffer: List[Any] = []\n    outputs: List[Any] = []\n    for op in operations:\n        cmd = op[0]\n        if cmd == 'append':\n            buffer.append(op[1])\n        elif cmd == 'pop':\n            val = buffer.pop() if buffer else None\n            outputs.append(val)\n        elif cmd == 'sample':\n            batch_size = op[1]\n            if batch_size > len(buffer):\n                outputs.append([])\n            else:\n                outputs.append(random.sample(buffer, batch_size))\n        elif cmd == 'size':\n            outputs.append(len(buffer))\n        else:\n            raise ValueError(f'Unsupported command: {cmd}')\n    return outputs\nassert manage_replay_memory([('append', 1), ('append', 2), ('sample', 1), ('pop',), ('size',)]) == [[2], 2, 1], \"test case failed: basic mixed operations\"\nassert manage_replay_memory([('size',)]) == [0], \"test case failed: size on empty buffer\"\nassert manage_replay_memory([('pop',)]) == [None], \"test case failed: pop on empty buffer\"\nassert manage_replay_memory([('append', 'a'), ('sample', 5)]) == [[]], \"test case failed: oversampling returns empty list\"\nassert manage_replay_memory([('append', 'first'), ('append', 'second'), ('pop',)]) == ['second'], \"test case failed: LIFO pop behaviour\"\nassert manage_replay_memory([('append', 1), ('append', 2), ('sample', 1), ('size',)]) == [[2], 2], \"test case failed: sample does not change size\"\nassert manage_replay_memory([('append', 100), ('pop',), ('pop',)]) == [100, None], \"test case failed: pop returns None on second call\"\nassert manage_replay_memory([('append', 'x'), ('append', 'y'), ('append', 'z'), ('size',), ('pop',), ('size',)]) == [3, 'z', 2], \"test case failed: size before and after pop\"\nassert manage_replay_memory([('sample', 0), ('append', 5), ('sample', 0), ('size',)]) == [[], [], 1], \"test case failed: zero-sized sampling\""}
{"task_id": 588, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Optional\nfrom typing import Optional\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self, data=None, split_variable=None, split_variable_value=None, left: Optional['Node']=None, right: Optional['Node']=None, depth: int=0, criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.\n    The depth of an empty tree is defined to be -1.\n    \"\"\"\n    if root is None:\n        return -1\n    left_depth = tree_max_depth(root.left)\n    right_depth = tree_max_depth(root.right)\n    return max(left_depth, right_depth) + 1\nassert tree_max_depth(None) == -1, \"test case failed: tree_max_depth(None)\"\nsingle = Node(1)\nassert tree_max_depth(single) == 0, \"test case failed: single node depth\"\nroot2 = Node(1)\nroot2.left = Node(2)\nroot2.right = Node(3)\nassert tree_max_depth(root2) == 1, \"test case failed: two-level balanced\"\nleft_skew = Node(0)\ncurrent = left_skew\nfor i in range(4):\n    current.left = Node(i)\n    current = current.left\nassert tree_max_depth(left_skew) == 4, \"test case failed: left-skewed depth 4\"\nright_skew = Node(0)\ncurrent = right_skew\nfor i in range(3):\n    current.right = Node(i)\n    current = current.right\nassert tree_max_depth(right_skew) == 3, \"test case failed: right-skewed depth 3\"\nroot3 = Node(10)\nroot3.left = Node(5)\nroot3.right = Node(20)\nroot3.left.left = Node(3)\nroot3.left.right = Node(7)\nroot3.right.left = Node(15)\nroot3.right.right = Node(25)\nassert tree_max_depth(root3) == 2, \"test case failed: balanced depth 2\"\nunbalanced1 = Node(1)\nunbalanced1.left = Node(2)\nunbalanced1.left.left = Node(3)\nunbalanced1.right = Node(4)\nassert tree_max_depth(unbalanced1) == 2, \"test case failed: unbalanced left deeper\"\nunbalanced2 = Node(1)\nunbalanced2.right = Node(2)\nunbalanced2.right.right = Node(3)\nunbalanced2.right.right.right = Node(4)\nassert tree_max_depth(unbalanced2) == 3, \"test case failed: unbalanced right deeper\"\ncomplex_root = Node(0)\ncomplex_root.left = Node(1)\ncomplex_root.right = Node(2)\ncomplex_root.left.right = Node(3)\ncomplex_root.left.right.left = Node(4)\ncomplex_root.right.left = Node(5)\nassert tree_max_depth(complex_root) == 3, \"test case failed: complex tree depth 3\"\nroot_one_child = Node(9)\nroot_one_child.right = Node(10)\nassert tree_max_depth(root_one_child) == 1, \"test case failed: root with one child\""}
{"task_id": 590, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Return the squares that can be revealed (`clicks`) and the squares that\n    have to be bombs (`new_flags`) after **one** logical pass.\n\n    The deduction rules implemented are the standard Minesweeper rules:\n        \u2022 value == 0  \u2192  every hidden, un-flagged neighbour is safe.\n        \u2022 value == 8  \u2192  every hidden, un-flagged neighbour is a bomb.\n        \u2022 otherwise\n              bombs       = # already flagged neighbours\n              unexplored  = set(hidden & un-flagged neighbours)\n\n              \u2013 if bombs == value\n                    \u21d2 all squares in *unexplored* are safe   (clicks)\n              \u2013 elif value \u2013 bombs == len(unexplored)\n                    \u21d2 all squares in *unexplored* are bombs  (new_flags)\n\n    Only the *current* board state is taken into account; newly deduced\n    clicks/flags are **not** fed back into the analysis within the same call.\n    \"\"\"\n    rows = len(ground)\n    cols = len(ground[0]) if rows else 0\n\n    def neighbours(r: int, c: int):\n        for dr in (-1, 0, 1):\n            for dc in (-1, 0, 1):\n                if dr == 0 and dc == 0:\n                    continue\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    yield (nr, nc)\n    clicks_set: set[tuple[int, int]] = set()\n    new_flags_set: set[tuple[int, int]] = set()\n    for r in range(rows):\n        for c in range(cols):\n            if np.isnan(ground[r][c]) or flags[r][c]:\n                continue\n            value = int(ground[r][c])\n            unexplored = []\n            bombs = 0\n            for (nr, nc) in neighbours(r, c):\n                if flags[nr][nc]:\n                    bombs += 1\n                elif np.isnan(ground[nr][nc]):\n                    unexplored.append((nr, nc))\n            if value == 0:\n                clicks_set.update(unexplored)\n            elif value == 8:\n                new_flags_set.update(unexplored)\n            elif bombs == value:\n                clicks_set.update(unexplored)\n            elif value - bombs == len(unexplored):\n                new_flags_set.update(unexplored)\n    clicks = sorted(clicks_set)\n    new_flags = sorted(new_flags_set)\n    return (clicks, new_flags)\nimport numpy as np\nground1 = [[1, np.nan], [np.nan, np.nan]]\nflags1  = [[False, True ], [False, False]]\nres1 = minesweeper_step(ground1, flags1)\nassert set(res1[0]) == {(1, 0), (1, 1)} and res1[1] == [], \"test case failed: example 1\"\nimport numpy as np\nground2 = [[0, np.nan], [np.nan, np.nan]]\nflags2  = [[False, False], [False, False]]\nres2 = minesweeper_step(ground2, flags2)\nassert set(res2[0]) == {(0, 1), (1, 0), (1, 1)} and res2[1] == [], \"test case failed: value 0 reveal\"\nimport numpy as np\nground3 = [[8, np.nan], [np.nan, np.nan]]\nflags3  = [[False, False], [False, False]]\nres3 = minesweeper_step(ground3, flags3)\nassert res3[0] == [] and set(res3[1]) == {(0, 1), (1, 0), (1, 1)}, \"test case failed: value 8 flag\"\nimport numpy as np\nground4 = [[np.nan, np.nan, np.nan],\n           [np.nan, 2,       np.nan],\n           [np.nan, np.nan, np.nan]]\nflags4  = [[True,  True,  False],\n           [False, False, False],\n           [False, False, False]]\nres4 = minesweeper_step(ground4, flags4)\nexpected_clicks4 = {(0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res4[0]) == expected_clicks4 and res4[1] == [], \"test case failed: bombs == value reveal\"\nimport numpy as np\nground5 = [[3, np.nan], [np.nan, np.nan]]\nflags5  = [[False, False], [False, False]]\nres5 = minesweeper_step(ground5, flags5)\nassert res5[0] == [] and set(res5[1]) == {(0, 1), (1, 0), (1, 1)}, \"test case failed: unexplored == value flag\"\nimport numpy as np\nground6 = [[np.nan, np.nan], [np.nan, np.nan]]\nflags6  = [[False, False], [False, False]]\nres6 = minesweeper_step(ground6, flags6)\nassert res6 == ([], []), \"test case failed: completely hidden board\"\nimport numpy as np\nground7 = [[1]]\nflags7  = [[True]]\nres7 = minesweeper_step(ground7, flags7)\nassert res7 == ([], []), \"test case failed: flagged revealed square is ignored\"\nimport numpy as np\nground8 = [[1, np.nan, np.nan],\n           [2, np.nan, np.nan],\n           [1, np.nan, np.nan]]\nflags8  = [[False]*3 for _ in range(3)]\nres8 = minesweeper_step(ground8, flags8)\nassert res8 == ([], []), \"test case failed: no safe action\"\nimport numpy as np\nground9 = [[np.nan, np.nan, np.nan],\n           [np.nan, 0,       np.nan],\n           [np.nan, np.nan, np.nan]]\nflags9  = [[False]*3 for _ in range(3)]\nres9 = minesweeper_step(ground9, flags9)\nexpected_clicks9 = {(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res9[0]) == expected_clicks9 and res9[1] == [], \"test case failed: central 0 reveal\"\nimport numpy as np\nground10 = [[np.nan, np.nan, np.nan],\n            [np.nan, 1,       np.nan],\n            [np.nan, np.nan, np.nan]]\nflags10  = [[False, True,  False],\n            [False, False, False],\n            [False, False, False]]\nres10 = minesweeper_step(ground10, flags10)\nexpected_clicks10 = {(0, 0), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res10[0]) == expected_clicks10 and res10[1] == [], \"test case failed: bombs == value reveal 2\""}
{"task_id": 591, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Forward pass of a fully\u2013connected ReLU network with a linear output layer.\n\n    Args:\n        weights : Three-level nested list holding all weight matrices.\n        x       : Input features (without bias).\n\n    Returns:\n        Network prediction rounded to four decimals.\n        Returns a float for a single output neuron, otherwise a list of floats.\n    \"\"\"\n    h = np.asarray(x, dtype=float)\n    n_layers = len(weights)\n    for (L, layer) in enumerate(weights):\n        W = np.asarray(layer, dtype=float)\n        h_aug = np.concatenate(([1.0], h))\n        z = W @ h_aug\n        h = np.maximum(0, z) if L < n_layers - 1 else z\n    if h.size == 1:\n        return round(float(h[0]), 4)\n    else:\n        return [round(v, 4) for v in h.tolist()]\nassert neural_net_predict([[[0.5,0.2,0.8],[1.0,-0.5,0.3]],[[0.7,0.6,-1.2]]],[0.1,0.4])==-0.08,\"test case failed: basic 2-layer network\"\nassert neural_net_predict([[[2,3]]],[4])==14.0,\"test case failed: single-layer network\"\nassert neural_net_predict([[[0.5,0.5]],[[1.0,1.0]],[[0.2,2.0]]],[2])==5.2,\"test case failed: three-layer network\"\nassert neural_net_predict([[[0,-1]],[[0,1]]],[2])==0.0,\"test case failed: ReLU zeroing\"\nassert neural_net_predict([[[1,0.5,0.5],[0,-1,-1]],[[0,1,1]]],[1,1])==2.0,\"test case failed: mixed activations\"\nassert neural_net_predict([[[5,-1]]],[5])==0.0,\"test case failed: negative linear result\"\nassert neural_net_predict([[[0,2],[0,0.5]],[[0,1,1]]],[3])==7.5,\"test case failed: 2-neuron hidden layer\"\nassert neural_net_predict([[[-1,0]],[[0,5]]],[10])==0.0,\"test case failed: negative input to ReLU\"\nassert neural_net_predict([[[0,1],[0,-1]],[[0,2,2]]],[4])==8.0,\"test case failed: hidden neuron suppression\"\nassert neural_net_predict([[[1,1]],[[0,0.5]],[[1,2]]],[1])==3.0,\"test case failed: deeper network\""}
{"task_id": 592, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\"\"\"\n    (n_rows, n_cols) = clicked.shape\n    if n_rows == 1 and n_cols == 1:\n        return ([], 0)\n    unopened: list[tuple[int, int]] = []\n    flagged_count = 0\n    (r0, r1) = (max(0, row - 1), min(n_rows - 1, row + 1))\n    (c0, c1) = (max(0, col - 1), min(n_cols - 1, col + 1))\n    for r in range(r0, r1 + 1):\n        for c in range(c0, c1 + 1):\n            if (r, c) == (row, col):\n                continue\n            if not clicked[r, c]:\n                unopened.append((r, c))\n            if flags[r, c]:\n                flagged_count += 1\n    unopened.sort()\n    return (unopened, flagged_count)\nclicked1 = np.array([[ True, False, False],\n                     [ True,  True, False],\n                     [False, False, False]])\nflags1   = np.array([[False, False, False],\n                     [False, False,  True],\n                     [False, False, False]])\nassert analyze_cell(clicked1, flags1, 1, 1) == ([(0, 1), (0, 2), (1, 2), (2, 0), (2, 1), (2, 2)], 1), \"test case failed: centre 3x3 board\"\nclicked2 = np.array([[False, False],\n                     [False, False]])\nflags2   = np.array([[False, False],\n                     [False, False]])\nassert analyze_cell(clicked2, flags2, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 0), \"test case failed: corner 2x2 no flags\"\nclicked3 = np.array([[False, False],\n                     [False, False]])\nflags3   = np.array([[False,  True],\n                     [ True,  True]])\nassert analyze_cell(clicked3, flags3, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 3), \"test case failed: corner 2x2 all flags\"\nclicked4 = np.array([[ True,  True,  True],\n                     [ True,  True,  True],\n                     [ True,  True,  True]])\nflags4   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked4, flags4, 1, 1) == ([], 0), \"test case failed: fully opened board\"\nclicked5 = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags5   = np.array([[False,  True, False],\n                     [False, False, False],\n                     [False, False,  True]])\nassert analyze_cell(clicked5, flags5, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 1), \"test case failed: top-left with one flag\"\nclicked6 = np.array([[False]])\nflags6   = np.array([[False]])\nassert analyze_cell(clicked6, flags6, 0, 0) == ([], 0), \"test case failed: 1x1 board\"\nclicked7 = np.array([[False, False, False, False],\n                     [False,  True, False, False],\n                     [False, False, False, False],\n                     [False, False, False, False]])\nflags7   = np.array([[False, False, False, False],\n                     [False, False, False, False],\n                     [False, False,  True, False],\n                     [False, False, False, False]])\nassert analyze_cell(clicked7, flags7, 1, 1) == ([(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)], 1), \"test case failed: 4x4 internal cell\"\nclicked8 = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags8   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked8, flags8, 2, 2) == ([(1, 1), (1, 2), (2, 1)], 0), \"test case failed: bottom-right no flags\"\nclicked9 = np.array([[ True, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags9   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked9, flags9, 0, 1) == ([(0, 2), (1, 0), (1, 1), (1, 2)], 0), \"test case failed: top edge\"\nclicked10 = np.array([[False, False, False],\n                      [False, False, False],\n                      [False, False, False]])\nflags10   = np.array([[ True, False,  True],\n                      [False, False, False],\n                      [ True, False,  True]])\nassert analyze_cell(clicked10, flags10, 1, 1) == ([(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)], 4), \"test case failed: centre with multiple flags\""}
{"task_id": 593, "completion_id": 0, "passed": false, "result": "failed: unhashable type: 'set'", "solution": "from copy import deepcopy\nfrom copy import deepcopy\nfrom typing import List, Tuple, Set, FrozenSet\ndef deduce_mines(constraints: List[List]) -> Tuple[List[str], List[str]]:\n    \"\"\"Simplify a list of Minesweeper constraints.\n\n    Each *constraint* is a pair  [variables, value]  meaning\n    'exactly *value* of the listed *variables* hide a mine'.\n\n    The function applies, in a loop, the following rules\n\n        1. solved constraints          (all-safe / all-mine)\n        2. propagation of knowledge    (delete known vars, adjust value)\n        3. subset rule                 (S1\u2282S2  \u21d2  S2 := S2\\\\S1 ,  v2 := v2\u2212v1)\n        4. duplicate removal\n\n    until no more information can be gained.\n\n    It returns two alphabetically sorted lists:\n        (certainly_safe_variables, certainly_mine_variables)\n    \"\"\"\n\n    def remove_duplicates(cons: List[Tuple[FrozenSet, int]]) -> List[Tuple[Set[str], int]]:\n        \"\"\"Drop identical (set,value) pairs, keep only one copy.\"\"\"\n        unique = set(cons)\n        return [(set(vs), val) for (vs, val) in unique]\n\n    def propagate(cons: List[Tuple[Set[str], int]], safe: Set[str], mines: Set[str]) -> List[Tuple[Set[str], int]]:\n        \"\"\"Delete already classified vars, adjust values for known mines.\"\"\"\n        new_cons: List[Tuple[Set[str], int]] = []\n        for (varset, val) in cons:\n            mine_cnt = len(varset & mines)\n            val -= mine_cnt\n            varset = varset - mines - safe\n            if not varset:\n                continue\n            new_cons.append((varset, val))\n        return new_cons\n\n    def apply_subset_rule(cons: List[Tuple[Set[str], int]]) -> Tuple[List[Tuple[Set[str], int]], bool]:\n        \"\"\"Apply subset rule once.  Return (new_constraints, changed?).\"\"\"\n        changed = False\n        n = len(cons)\n        for i in range(n):\n            (Si, vi) = cons[i]\n            for j in range(n):\n                if i == j:\n                    continue\n                (Sj, vj) = cons[j]\n                if Si < Sj:\n                    cons[j] = (Sj - Si, vj - vi)\n                    changed = True\n                    break\n            if changed:\n                break\n        return (cons, changed)\n    constraints = [(set(vars_), val) for (vars_, val) in deepcopy(constraints)]\n    safe: Set[str] = set()\n    mines: Set[str] = set()\n    changed_globally = True\n    while changed_globally:\n        changed_globally = False\n        newly_safe: Set[str] = set()\n        newly_mine: Set[str] = set()\n        for (varset, val) in constraints:\n            if val == 0:\n                newly_safe |= varset\n            elif val == len(varset):\n                newly_mine |= varset\n        if newly_safe - safe or newly_mine - mines:\n            safe |= newly_safe\n            mines |= newly_mine\n            changed_globally = True\n        constraints = propagate(constraints, safe, mines)\n        subset_changed = True\n        while subset_changed:\n            (constraints, subset_changed) = apply_subset_rule(constraints)\n            if subset_changed:\n                changed_globally = True\n                constraints = remove_duplicates([(set(vs), val) for (vs, val) in constraints])\n        before = len(constraints)\n        constraints = remove_duplicates([(set(vs), val) for (vs, val) in constraints])\n        if len(constraints) != before:\n            changed_globally = True\n    return (sorted(safe), sorted(mines))\nassert deduce_mines([[['A','B'],1],[['A'],1]]) == (['B'], ['A']), \"failed: simple subset deduction\"\nassert deduce_mines([[['A','B','C'],0]]) == (['A','B','C'], []), \"failed: all safe\"\nassert deduce_mines([[['X','Y','Z'],3]]) == ([], ['X','Y','Z']), \"failed: all mines\"\nassert deduce_mines([[['A','B','C'],2],[['B','C'],1],[['C','D'],1]]) == ([], ['A']), \"failed: chained deduction\"\nassert deduce_mines([[['A'],0],[['A','B'],1],[['B','C'],1]]) == (['A','C'], ['B']), \"failed: propagation after solved constraint\"\nassert deduce_mines([[['P','Q'],1],[['Q','R'],1],[['P','R'],1]]) == ([], []), \"failed: no certain knowledge\"\nassert deduce_mines([[['M','N'],1],[['N','M'],1],[['M','N'],1]]) == ([], []), \"failed: duplicate removal\"\nassert deduce_mines([]) == ([], []), \"failed: empty input\"\nassert deduce_mines([[['A','B','C','D'],2],[['A','B'],1],[['C','D'],1]]) == ([], []), \"failed: balanced constraints\"\nassert deduce_mines([[['A','B','C'],2],[['B','C','D'],2],[['A','D'],0]]) == (['A','D'], ['B','C']), \"failed: multiple deductions\""}
{"task_id": 594, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  \n    Two open cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary whose keys are coordinates (row, col) for every open\n        cell, and whose values are *sorted* lists of orthogonally adjacent\n        open-cell coordinates.  If the maze has no open cells the function\n        returns an empty dictionary.\n    \"\"\"\n    if not maze:\n        return {}\n    (rows, cols) = (len(maze), len(maze[0]))\n    graph: dict[tuple[int, int], list[tuple[int, int]]] = {}\n    open_cells = {(r, c) for r in range(rows) for c in range(cols) if maze[r][c] == 0}\n    if not open_cells:\n        return {}\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    for (r, c) in open_cells:\n        neighbours: list[tuple[int, int]] = []\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if (nr, nc) in open_cells:\n                neighbours.append((nr, nc))\n        neighbours.sort()\n        graph[r, c] = neighbours\n    return graph\nassert maze_to_graph([[0]]) == {(0, 0): []}, \"test case failed: single open cell\"\nassert maze_to_graph([[1]]) == {}, \"test case failed: single wall cell\"\nassert maze_to_graph([[0, 0], [0, 0]]) == {(0, 0): [(0, 1), (1, 0)], (0, 1): [(0, 0), (1, 1)], (1, 0): [(0, 0), (1, 1)], (1, 1): [(0, 1), (1, 0)]}, \"test case failed: 2x2 all open maze\"\nassert maze_to_graph([[0, 1, 0], [0, 0, 0], [1, 0, 1]]) == {(0, 0): [(1, 0)], (0, 2): [(1, 2)], (1, 0): [(0, 0), (1, 1)], (1, 1): [(1, 0), (1, 2), (2, 1)], (1, 2): [(0, 2), (1, 1)], (2, 1): [(1, 1)]}, \"test case failed: mixed 3x3 maze\"\nassert maze_to_graph([[0, 0, 0]]) == {(0, 0): [(0, 1)], (0, 1): [(0, 0), (0, 2)], (0, 2): [(0, 1)]}, \"test case failed: horizontal corridor\"\nassert maze_to_graph([[0], [0], [0]]) == {(0, 0): [(1, 0)], (1, 0): [(0, 0), (2, 0)], (2, 0): [(1, 0)]}, \"test case failed: vertical corridor\"\nassert maze_to_graph([[0, 1, 0], [0, 1, 0]]) == {(0, 0): [(1, 0)], (0, 2): [(1, 2)], (1, 0): [(0, 0)], (1, 2): [(0, 2)]}, \"test case failed: 2x3 with blocked column\"\nassert maze_to_graph([[0, 1], [1, 0]]) == {(0, 0): [], (1, 1): []}, \"test case failed: 2x2 checkerboard\"\nassert maze_to_graph([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == {(1, 1): []}, \"test case failed: single center cell\"\nassert maze_to_graph([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) == {(0, 0): [], (1, 1): [], (2, 2): []}, \"test case failed: diagonal open cells\""}
{"task_id": 595, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    K-Means clustering \u2013 return **centroids only**.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    k : int\n        Number of clusters.\n    max_iters : int, optional\n        Maximum number of iterations (default 100).\n\n    Returns\n    -------\n    list[list[float]]\n        Sorted centroids (lexicographically), each coordinate rounded to 4 decimals.\n    \"\"\"\n    if k <= 0:\n        raise ValueError('k must be a positive integer')\n    if X.ndim != 2:\n        raise ValueError('X must be 2-dimensional')\n    X = X.astype(float, copy=False)\n    (n_samples, n_features) = X.shape\n    if k > n_samples:\n        raise ValueError('k cannot be larger than number of samples')\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, None, :] - centroids[None, :, :]) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            mask = labels == j\n            if np.any(mask):\n                new_centroids[j] = X[mask].mean(axis=0)\n        shifts = np.linalg.norm(new_centroids - centroids, axis=1)\n        centroids = new_centroids\n        if np.all(shifts < 0.0001):\n            break\n    centroids_list = centroids.tolist()\n    centroids_list.sort()\n    rounded = [[round(val, 4) for val in centre] for centre in centroids_list]\n    return rounded\nassert kmeans_centroids(np.array([[1, 1], [2, 1], [4, 3], [5, 4]]), 2) == [[1.5, 1.0], [4.5, 3.5]], \"test case failed: basic 2-cluster\"\nassert kmeans_centroids(np.array([[0, 0], [0, 1], [10, 10], [11, 11]]), 2) == [[0.0, 0.5], [10.5, 10.5]], \"test case failed: clearly separated clusters\"\nassert kmeans_centroids(np.array([[1], [2], [10], [12], [19]]), 3) == [[1.0], [2.0], [13.6667]], \"test case failed: 1-D three clusters\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [1, 0], [10, 9], [12, 11], [11, 9]]), 2) == [[1.3333, 1.0], [11.0, 9.6667]], \"test case failed: mixed positions\"\nassert kmeans_centroids(np.array([[-5], [-4], [-5], [10], [11], [12]]), 2) == [[-4.6667], [11.0]], \"test case failed: negative and positive values\"\nassert kmeans_centroids(np.array([[0, 0], [0, 10], [10, 0], [10, 10]]), 4) == [[0.0, 0.0], [0.0, 10.0], [10.0, 0.0], [10.0, 10.0]], \"test case failed: one point per cluster\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [5, 5], [9, 9], [8, 9]]), 3) == [[1.0, 2.0], [2.0, 1.0], [7.3333, 7.6667]], \"test case failed: three clusters 2-D\"\nassert kmeans_centroids(np.array([[1], [100]]), 2) == [[1.0], [100.0]], \"test case failed: two extreme points\"\nassert kmeans_centroids(np.array([[1, 1], [1, 2], [2, 1], [2, 2]]), 1) == [[1.5, 1.5]], \"test case failed: single centroid\"\nassert kmeans_centroids(np.array([[0, 0], [10, 0], [0, 10], [8, 8]]), 2) == [[0.0, 5.0], [9.0, 4.0]], \"test case failed: asymmetrical clusters\""}
{"task_id": 596, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    Each free cell (value 1) becomes a vertex.  Two vertices share an\n    (undirected, un-weighted) edge iff the corresponding cells are adjacent\n    in the four-neighbourhood (up, down, left, right).\n\n    A dictionary mapping every free cell coordinate (row, col) to a *sorted*\n    list of adjacent free cells is returned.  If the maze contains no free\n    cells, an empty dictionary is returned.\n    \"\"\"\n    if maze.size == 0:\n        return {}\n    (rows, cols) = maze.shape\n    free_cells = np.argwhere(maze == 1)\n    if free_cells.size == 0:\n        return {}\n    adjacency = {tuple(cell): set() for cell in free_cells}\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    for (r, c) in free_cells:\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < rows and 0 <= nc < cols and (maze[nr, nc] == 1):\n                adjacency[r, c].add((nr, nc))\n                adjacency[nr, nc].add((r, c))\n    return {cell: sorted(neighbours) for (cell, neighbours) in adjacency.items()}\nassert convert_maze_to_graph(np.array([[1,0,1],[1,1,0],[0,1,1]])) == {(0,0):[(1,0)], (0,2):[], (1,0):[(0,0),(1,1)], (1,1):[(1,0),(2,1)], (2,1):[(1,1),(2,2)], (2,2):[(2,1)]}, \"test case failed: example maze\"\nassert convert_maze_to_graph(np.zeros((2,2),dtype=int)) == {}, \"test case failed: all zeros\"\nassert convert_maze_to_graph(np.array([[1]])) == {(0,0):[]}, \"test case failed: single cell\"\nassert convert_maze_to_graph(np.array([[1,1,1]])) == {(0,0):[(0,1)], (0,1):[(0,0),(0,2)], (0,2):[(0,1)]}, \"test case failed: row of ones\"\nassert convert_maze_to_graph(np.array([[1],[1],[1]])) == {(0,0):[(1,0)], (1,0):[(0,0),(2,0)], (2,0):[(1,0)]}, \"test case failed: column of ones\"\nassert convert_maze_to_graph(np.array([[0,1,0],[1,1,1],[0,1,0]])) == {(0,1):[(1,1)], (1,0):[(1,1)], (1,1):[(0,1),(1,0),(1,2),(2,1)], (1,2):[(1,1)], (2,1):[(1,1)]}, \"test case failed: plus shape\"\nassert convert_maze_to_graph(np.array([[1,1],[1,1]])) == {(0,0):[(0,1),(1,0)], (0,1):[(0,0),(1,1)], (1,0):[(0,0),(1,1)], (1,1):[(0,1),(1,0)]}, \"test case failed: 2x2 ones\"\nassert convert_maze_to_graph(np.array([[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]])) == {(0,0):[(0,1),(1,0)], (0,1):[(0,0),(0,2)], (0,2):[(0,1),(0,3)], (0,3):[(0,2),(1,3)], (1,0):[(0,0),(2,0)], (1,3):[(0,3),(2,3)], (2,0):[(1,0),(3,0)], (2,3):[(1,3),(3,3)], (3,0):[(2,0),(3,1)], (3,1):[(3,0),(3,2)], (3,2):[(3,1),(3,3)], (3,3):[(2,3),(3,2)]}, \"test case failed: hollow square\"\nassert convert_maze_to_graph(np.array([[1,0,0],[0,0,0],[0,0,0]])) == {(0,0):[]}, \"test case failed: isolated cell\"\nassert convert_maze_to_graph(np.eye(3,dtype=int)) == {(0,0):[], (1,1):[], (2,2):[]}, \"test case failed: diagonal ones\""}
{"task_id": 597, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean\u2013squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : list | np.ndarray\n        Target vector of shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [best_feature_index, best_threshold, best_mse] where *best_mse*\n        is rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float)\n    (n_samples, n_features) = X.shape\n    best_feature = None\n    best_threshold = None\n    best_mse = np.inf\n    eps = 1e-12\n    for j in range(n_features):\n        x_col = X[:, j]\n        order = np.argsort(x_col, kind='mergesort')\n        xs = x_col[order]\n        ys = y[order]\n        csum = np.cumsum(ys, dtype=float)\n        csum_sq = np.cumsum(ys ** 2, dtype=float)\n        total_sum = csum[-1]\n        total_sq_sum = csum_sq[-1]\n        change_pos = np.where(np.diff(xs) != 0)[0]\n        if change_pos.size == 0:\n            continue\n        for idx in change_pos:\n            left_n = idx + 1\n            right_n = n_samples - left_n\n            if right_n == 0:\n                continue\n            sum_left = csum[idx]\n            sq_left = csum_sq[idx]\n            mean_left = sum_left / left_n\n            var_left = sq_left / left_n - mean_left ** 2\n            sum_right = total_sum - sum_left\n            sq_right = total_sq_sum - sq_left\n            mean_right = sum_right / right_n\n            var_right = sq_right / right_n - mean_right ** 2\n            mse = left_n / n_samples * var_left + right_n / n_samples * var_right\n            update = False\n            if mse < best_mse - eps:\n                update = True\n            elif abs(mse - best_mse) <= eps:\n                if j < best_feature:\n                    update = True\n                elif j == best_feature and xs[idx] < best_threshold - eps:\n                    update = True\n            if update:\n                best_feature = j\n                best_threshold = xs[idx]\n                best_mse = mse\n    return [int(best_feature), float(best_threshold), round(float(best_mse), 4)]\nassert best_split_mse([[1], [2], [100], [101]],[1, 2, 100, 101]) == [0, 2, 0.25], \"test case failed: best_split_mse([[1], [2], [100], [101]],[1, 2, 100, 101])\"\nassert best_split_mse([[1], [2], [3], [4]],[1, 2, 3, 100]) == [0, 3, 0.5], \"test case failed: best_split_mse([[1], [2], [3], [4]],[1, 2, 3, 100])\"\nassert best_split_mse([[0], [1], [2], [3]],[1, 1, 1, 1]) == [0, 0, 0.0], \"test case failed: best_split_mse([[0], [1], [2], [3]],[1, 1, 1, 1])\"\nassert best_split_mse([[1,1],[2,2],[3,10],[4,11]],[1,2,10,11]) == [0, 2, 0.25], \"test case failed: best_split_mse([[1,1],[2,2],[3,10],[4,11]],[1,2,10,11])\"\nassert best_split_mse([[1],[2],[3],[4]],[10,20,30,40]) == [0, 2, 25.0], \"test case failed: best_split_mse([[1],[2],[3],[4]],[10,20,30,40])\"\nassert best_split_mse([[1],[2],[3],[4]],[10,10,10,20]) == [0, 3, 0.0], \"test case failed: best_split_mse([[1],[2],[3],[4]],[10,10,10,20])\"\nassert best_split_mse([[-2],[-1],[1],[2]],[4,1,1,4]) == [0, -2, 1.5], \"test case failed: best_split_mse([[-2],[-1],[1],[2]],[4,1,1,4])\"\nassert best_split_mse([[1],[1],[1],[2],[2],[3]],[10,10,10,20,20,30]) == [0, 1, 11.1111], \"test case failed: best_split_mse([[1],[1],[1],[2],[2],[3]],[10,10,10,20,20,30])\"\nassert best_split_mse([[1,0],[2,0],[3,1],[4,1]],[3,3,1,1]) == [0, 2, 0.0], \"test case failed: best_split_mse([[1,0],[2,0],[3,1],[4,1]],[3,3,1,1])\"\nassert best_split_mse([[1],[2]],[10,20]) == [0, 1, 0.0], \"test case failed: best_split_mse([[1],[2]],[10,20])\""}
{"task_id": 598, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise (z-scores).\n\n    Each column of *data* is centred to mean 0 and scaled to variance 1\n    (population, i.e. ddof=0).  Constant columns (\u03c3 == 0) are set to 0.\n    Any NaN/Inf produced during the computation are replaced by 0.\n    The result is rounded to 4 decimals and returned as a plain list.\n\n    Args:\n        data: 2-D list (n_samples \u00d7 n_features) of numbers.\n\n    Returns:\n        list[list[float]]: Standardised matrix with the same shape.\n    \"\"\"\n    if not data:\n        return []\n    arr = np.asarray(data, dtype=float)\n    if arr.ndim == 1:\n        arr = arr.reshape(-1, 1)\n    mean = arr.mean(axis=0)\n    std = arr.std(axis=0, ddof=0)\n    std_safe = std.copy()\n    std_safe[std_safe == 0] = 1.0\n    z = (arr - mean) / std_safe\n    z[:, std == 0] = 0.0\n    z = np.nan_to_num(z, nan=0.0, posinf=0.0, neginf=0.0)\n    z = np.round(z, 4)\n    return z.tolist()\nassert standardize([[0, 0], [0, 0], [1, 1], [1, 1]]) == [[-1.0, -1.0], [-1.0, -1.0], [1.0, 1.0], [1.0, 1.0]], \"test case failed: standardize([[0, 0], [0, 0], [1, 1], [1, 1]])\"\nassert standardize([[1,2,3],[1,2,3]]) == [[0.0,0.0,0.0],[0.0,0.0,0.0]], \"test case failed: standardize([[1,2,3],[1,2,3]])\"\nassert standardize([[1],[2],[3]]) == [[-1.2247],[0.0],[1.2247]], \"test case failed: standardize([[1],[2],[3]])\"\nassert standardize([[-1,-2],[3,4],[5,6]]) == [[-1.3363,-1.3728],[0.2673,0.3922],[1.069,0.9806]], \"test case failed: standardize([[-1,-2],[3,4],[5,6]])\"\nassert standardize([[-1],[-1],[-1]]) == [[0.0],[0.0],[0.0]], \"test case failed: standardize([[-1],[-1],[-1]])\"\nassert standardize([[1,2],[3,4]]) == [[-1.0,-1.0],[1.0,1.0]], \"test case failed: standardize([[1,2],[3,4]])\"\nassert standardize([[0,1,2],[2,3,4],[4,5,6]]) == [[-1.2247,-1.2247,-1.2247],[0.0,0.0,0.0],[1.2247,1.2247,1.2247]], \"test case failed: standardize([[0,1,2],[2,3,4],[4,5,6]])\"\nassert standardize([[10,10],[10,10]]) == [[0.0,0.0],[0.0,0.0]], \"test case failed: standardize([[10,10],[10,10]])\"\nassert standardize([[1e9,1e9],[1e9+1,1e9+2]]) == [[-1.0,-1.0],[1.0,1.0]], \"test case failed: standardize([[1e9,1e9],[1e9+1,1e9+2]])\"\nassert standardize([[0,0,0],[0,1,0],[1,0,1],[1,1,1]]) == [[-1.0,-1.0,-1.0],[-1.0,1.0,-1.0],[1.0,-1.0,1.0],[1.0,1.0,1.0]], \"test case failed: standardize([[0,0,0],[0,1,0],[1,0,1],[1,1,1]])\""}
