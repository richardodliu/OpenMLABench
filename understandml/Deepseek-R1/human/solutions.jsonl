{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float] | int:\n    if not a:\n        return [] if not b else -1\n    num_columns = len(a[0])\n    for row in a:\n        if len(row) != num_columns:\n            return -1\n    if num_columns != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    original_rows = len(a)\n    if original_rows == 0:\n        original_cols = 0\n    else:\n        original_cols = len(a[0]) if a[0] else 0\n        for row in a:\n            if len(row) != original_cols:\n                return []\n    try:\n        np_array = np.array(a)\n        reshaped = np_array.reshape(new_shape)\n    except ValueError:\n        return []\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        transposed = zip(*matrix)\n        return [sum(col) / len(col) for col in transposed]\n    else:\n        raise ValueError(\"Invalid mode. Mode must be 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    return [eigenvalue1, eigenvalue2]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    T_np = np.array(T, dtype=np.float64)\n    S_np = np.array(S, dtype=np.float64)\n    A_np = np.array(A, dtype=np.float64)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    (a_rows, a_cols) = A_np.shape\n    t_size = T_np.shape[0]\n    s_size = S_np.shape[0]\n    if a_rows != t_size or a_cols != s_size:\n        return -1\n    det_T = np.linalg.det(T_np)\n    det_S = np.linalg.det(S_np)\n    if np.isclose(det_T, 0, atol=1e-08) or np.isclose(det_S, 0, atol=1e-08):\n        return -1\n    try:\n        T_inv = np.linalg.inv(T_np)\n    except np.linalg.LinAlgError:\n        return -1\n    try:\n        product = T_inv @ A_np @ S_np\n    except ValueError:\n        return -1\n    rounded = np.round(product, 4)\n    return rounded.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]] | None:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_det = 1.0 / det\n    return [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    if not a or not b:\n        return -1\n    try:\n        cols_a = len(a[0])\n        cols_b = len(b[0])\n    except IndexError:\n        return -1\n    rows_b = len(b)\n    if cols_a != rows_b:\n        return -1\n    rows_a = len(a)\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            total = 0\n            for k in range(cols_a):\n                if k >= len(a[i]) or j >= len(b[k]):\n                    return -1\n                total += a[i][k] * b[k][j]\n            result[i][j] = total\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    m = len(vectors)\n    if m == 0:\n        return []\n    n = len(vectors[0])\n    means = [sum(vec) / n for vec in vectors]\n    covariance_matrix = []\n    for i in range(m):\n        row = []\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                diff_i = vectors[i][k] - means[i]\n                diff_j = vectors[j][k] - means[j]\n                covariance += diff_i * diff_j\n            covariance /= n - 1\n            row.append(covariance)\n        covariance_matrix.append(row)\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b, dtype=np.float64)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            sum_ = np.dot(A[i], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - sum_) / A[i, i]\n        x_new = np.round(x_new, 4)\n        x = x_new\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    B = np.dot(A.T, A)\n    a = B[0, 0]\n    b = B[0, 1]\n    d = B[1, 1]\n    if np.isclose(b, 0):\n        s1 = np.sqrt(max(a, d))\n        s2 = np.sqrt(min(a, d))\n    else:\n        theta = 0.5 * np.arctan2(2 * b, a - d)\n        c = np.cos(theta)\n        s = np.sin(theta)\n        lambda1 = a * c ** 2 + 2 * b * c * s + d * s ** 2\n        lambda2 = a * s ** 2 - 2 * b * c * s + d * c ** 2\n        if lambda1 < lambda2:\n            (lambda1, lambda2) = (lambda2, lambda1)\n        s1 = np.sqrt(lambda1)\n        s2 = np.sqrt(lambda2)\n    if s1 < s2:\n        (s1, s2) = (s2, s1)\n    s1 = np.round(s1, 4)\n    s2 = np.round(s2, 4)\n    return (s1, s2)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    n = len(matrix)\n    if n == 1:\n        return matrix[0][0]\n    elif n == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    else:\n        det = 0.0\n        for j in range(n):\n            minor = [row[:j] + row[j + 1:] for row in matrix[1:]]\n            sign = (-1) ** j\n            det += matrix[0][j] * sign * determinant_4x4(minor)\n        return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    ones = np.ones((X_np.shape[0], 1))\n    X_augmented = np.hstack((ones, X_np))\n    XT = X_augmented.T\n    XT_X = np.dot(XT, X_augmented)\n    XT_X_inv = np.linalg.inv(XT_X)\n    XT_y = np.dot(XT, y_np)\n    theta = np.dot(XT_X_inv, XT_y)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = X.shape[0]\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        hypothesis = X.dot(theta)\n        error = hypothesis - y\n        gradient = 1 / m * X.T.dot(error)\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = data.mean(axis=0)\n    std = data.std(axis=0)\n    standardized = (data - mean) / std\n    standardized_rounded = np.round(standardized, 4)\n    min_vals = data.min(axis=0)\n    max_vals = data.max(axis=0)\n    ranges = max_vals - min_vals\n    minmax = (data - min_vals) / ranges\n    minmax_rounded = np.round(minmax, 4)\n    return (standardized_rounded.tolist(), minmax_rounded.tolist())"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_np = np.array(points)\n    current_centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = ((points_np[:, np.newaxis, :] - current_centroids) ** 2).sum(axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(current_centroids)\n        for i in range(k):\n            cluster_points = points_np[labels == i]\n            if len(cluster_points) > 0:\n                new_centroids[i] = cluster_points.mean(axis=0)\n            else:\n                new_centroids[i] = current_centroids[i]\n        if np.allclose(current_centroids, new_centroids):\n            break\n        current_centroids = new_centroids\n    current_centroids = np.round(current_centroids, 4)\n    return [tuple(centroid.tolist()) for centroid in current_centroids]"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    rng = np.random.default_rng(seed=random_seed)\n    if shuffle:\n        indices = rng.permutation(indices)\n    folds = np.array_split(indices, k)\n    splits = []\n    for i in range(k):\n        test_indices = folds[i]\n        train_folds = [folds[j] for j in range(k) if j != i]\n        train_indices = np.concatenate(train_folds)\n        splits.append((train_indices, test_indices))\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)\n    standardized_data = (data - mean) / std\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k].T\n    return np.round(principal_components, 4).tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n\n    def entropy(targets):\n        counts = Counter(targets)\n        total = len(targets)\n        if total == 0:\n            return 0.0\n        return -sum((count / total * math.log2(count / total) for count in counts.values()))\n    target_values = [ex[target_attr] for ex in examples]\n    if len(set(target_values)) == 1:\n        return {'class': target_values[0]}\n    if not attributes:\n        majority = Counter(target_values).most_common(1)[0][0]\n        return {'class': majority}\n    original_entropy = entropy(target_values)\n    best_attr = None\n    max_info_gain = -float('inf')\n    for attr in attributes:\n        groups = {}\n        for ex in examples:\n            val = ex[attr]\n            if val not in groups:\n                groups[val] = []\n            groups[val].append(ex)\n        split_entropy = 0.0\n        for group in groups.values():\n            group_targets = [ex[target_attr] for ex in group]\n            split_entropy += len(group) / len(examples) * entropy(group_targets)\n        info_gain = original_entropy - split_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_attr = attr\n    decision_node = {'attribute': best_attr, 'branches': {}}\n    values = {ex[best_attr] for ex in examples}\n    for value in values:\n        subset = [ex for ex in examples if ex[best_attr] == value]\n        remaining_attrs = [a for a in attributes if a != best_attr]\n        subtree = learn_decision_tree(subset, remaining_attrs, target_attr)\n        decision_node['branches'][value] = subtree\n    return decision_node"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n_samples = data.shape[0]\n    if kernel == 'linear':\n        K = data @ data.T\n    elif kernel == 'RBF':\n        data_sq = np.sum(data ** 2, axis=1)\n        pairwise_dist_sq = data_sq[:, np.newaxis] + data_sq[np.newaxis, :] - 2 * (data @ data.T)\n        K = np.exp(-pairwise_dist_sq / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Unsupported kernel type. Choose 'linear' or 'RBF'.\")\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    for iteration in range(iterations):\n        t = iteration + 1\n        eta = 1.0 / (lambda_val * t)\n        predictions = np.dot(alpha * labels, K) + b\n        margin = labels * predictions\n        mask = margin <= 1\n        alpha[mask] += eta * labels[mask]\n        alpha *= 1 - eta * lambda_val\n        new_predictions = np.dot(alpha * labels, K) + b\n        new_margin = labels * new_predictions\n        mask_new = new_margin <= 1\n        sum_b = np.sum(labels[mask_new])\n        b += eta * sum_b\n    alpha_rounded = np.round(alpha, 4)\n    b_rounded = round(b, 4)\n    return (alpha_rounded.tolist(), b_rounded)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    max_score = max(scores)\n    exp_scores = [math.exp(score - max_score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [exp / sum_exp for exp in exp_scores]\n    return [round(val, 4) for val in softmax_values]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    exact_predictions = []\n    for x in features:\n        z = sum((w * xi for (w, xi) in zip(weights, x))) + bias\n        p = 1 / (1 + math.exp(-z))\n        exact_predictions.append(p)\n    rounded_predictions = [round(p, 4) for p in exact_predictions]\n    mse = sum(((p - y) ** 2 for (p, y) in zip(exact_predictions, labels))) / len(labels)\n    mse = round(mse, 4)\n    return (rounded_predictions, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n    n_samples = features.shape[0]\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        a = 1 / (1 + np.exp(-z))\n        mse = np.mean((labels - a) ** 2)\n        mse_history.append(round(mse, 4))\n        error = a - labels\n        delta = error * a * (1 - a)\n        grad_weights = 2 / n_samples * np.dot(features.T, delta)\n        grad_bias = 2 / n_samples * np.sum(delta)\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights, bias, mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(0, self.data), (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for v in reversed(topo):\n            v._backward()\n\n    def __radd__(self, other):\n        return self + other\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    C_matrix = np.array(C).T\n    C_inv = np.linalg.inv(C_matrix)\n    P_columns = [C_inv @ np.array(b) for b in B]\n    P = np.column_stack(P_columns)\n    return np.round(P, 4).tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    B = A.T @ A\n    (eigen_values, eigen_vectors) = np.linalg.eigh(B)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    V = sorted_eigen_vectors.T\n    sigma1 = np.sqrt(eigen_values[sorted_indices[0]])\n    sigma2 = np.sqrt(eigen_values[sorted_indices[1]])\n    v1 = V[0]\n    v2 = V[1]\n    if sigma1 > 1e-10:\n        u1 = A @ v1 / sigma1\n    else:\n        u1 = np.array([1.0, 0.0])\n    if sigma2 > 1e-10:\n        u2 = A @ v2 / sigma2\n    else:\n        u2 = np.array([-u1[1], u1[0]])\n        u2_norm = np.linalg.norm(u2)\n        if u2_norm < 1e-10:\n            u2 = np.array([0.0, 1.0])\n        else:\n            u2 /= u2_norm\n    U = np.column_stack((u1, u2))\n    S = np.diag([sigma1, sigma2])\n    U_rounded = np.round(U, 4)\n    S_rounded = np.round(S, 4)\n    V_rounded = np.round(V, 4)\n    return (U_rounded.tolist(), S_rounded.tolist(), V_rounded.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(len(X))\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    for i in range(0, num_samples, batch_size):\n        X_batch = X[i:i + batch_size].tolist()\n        if y is not None:\n            y_batch = y[i:i + batch_size].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    mask = X[:, feature_i] >= threshold\n    return (X[mask].tolist(), X[~mask].tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    m = X.shape[1]\n    all_combinations = []\n    for d in range(1, degree + 1):\n        combs = combinations_with_replacement(range(m), d)\n        all_combinations.extend(combs)\n    X_poly = []\n    for row in X:\n        new_row = []\n        for comb in all_combinations:\n            product = np.prod(row[list(comb)])\n            new_row.append(product)\n        X_poly.append(new_row)\n    return np.array(X_poly).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    encoded = np.zeros((x.size, n_col), dtype=np.int64)\n    rows = np.arange(x.size)\n    cols = x\n    encoded[rows, cols] = 1\n    return encoded.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    return np.diag(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct = np.sum(y_true == y_pred)\n    total = y_true.size\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    if X.shape[0] != Y.shape[0]:\n        raise ValueError('X and Y must have the same number of rows.')\n    n = X.shape[0]\n    X_mean = np.mean(X, axis=0)\n    Y_mean = np.mean(Y, axis=0)\n    X_std = np.std(X, axis=0, ddof=1)\n    Y_std = np.std(Y, axis=0, ddof=1)\n    X_normalized = (X - X_mean) / X_std\n    Y_normalized = (Y - Y_mean) / Y_std\n    corr_matrix = X_normalized.T @ Y_normalized / (n - 1)\n    corr_rounded = np.round(corr_matrix, 4)\n    return corr_rounded.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_a = None\n        best_b = None\n        for j in range(n_features):\n            feature_vals = X[:, j]\n            sorted_idx = np.argsort(feature_vals)\n            sorted_feature = feature_vals[sorted_idx]\n            sorted_y = y[sorted_idx]\n            sorted_weights = weights[sorted_idx]\n            cum_sum_1 = np.cumsum((sorted_y == 1) * sorted_weights)\n            cum_sum_neg1 = np.cumsum((sorted_y == -1) * sorted_weights)\n            total_1 = cum_sum_1[-1] if len(cum_sum_1) > 0 else 0.0\n            total_neg1 = cum_sum_neg1[-1] if len(cum_sum_neg1) > 0 else 0.0\n            min_error_j = float('inf')\n            best_threshold_j = None\n            best_a_j = None\n            best_b_j = None\n            for k in range(len(sorted_feature) + 1):\n                if k == 0:\n                    sum_1_left = 0.0\n                    sum_neg1_left = 0.0\n                else:\n                    sum_1_left = cum_sum_1[k - 1]\n                    sum_neg1_left = cum_sum_neg1[k - 1]\n                sum_1_right = total_1 - sum_1_left\n                sum_neg1_right = total_neg1 - sum_neg1_left\n                a = 1 if sum_1_right > sum_neg1_right else -1\n                error_right = sum_neg1_right if a == 1 else sum_1_right\n                b = 1 if sum_1_left > sum_neg1_left else -1\n                error_left = sum_neg1_left if b == 1 else sum_1_left\n                total_error = error_left + error_right\n                if k == 0:\n                    current_threshold = sorted_feature[0] - 1e-05\n                elif k == len(sorted_feature):\n                    current_threshold = sorted_feature[-1] + 1e-05\n                else:\n                    current_threshold = (sorted_feature[k - 1] + sorted_feature[k]) / 2\n                if total_error < min_error_j:\n                    min_error_j = total_error\n                    best_threshold_j = current_threshold\n                    best_a_j = a\n                    best_b_j = b\n            if min_error_j < best_error:\n                best_error = min_error_j\n                best_feature = j\n                best_threshold = best_threshold_j\n                best_a = best_a_j\n                best_b = best_b_j\n        epsilon = 1e-10\n        numerator = 1 - best_error + epsilon\n        denominator = best_error + epsilon\n        alpha = 0.5 * math.log(numerator / denominator)\n        predictions = np.where(X[:, best_feature] >= best_threshold, best_a, best_b)\n        incorrect = predictions != y\n        weights *= np.exp(alpha * incorrect)\n        weights /= np.sum(weights)\n        alpha_rounded = round(alpha, 4)\n        threshold_rounded = round(best_threshold, 4)\n        classifiers.append({'feature': best_feature, 'threshold': threshold_rounded, 'a': best_a, 'b': best_b, 'alpha': alpha_rounded})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_np = np.array(scores)\n    x_max = scores_np.max()\n    shifted = scores_np - x_max\n    exp_shifted = np.exp(shifted)\n    sum_exp = exp_shifted.sum()\n    log_sum_exp = np.log(sum_exp)\n    result = shifted - log_sum_exp\n    rounded = np.round(result, 4)\n    return rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        super().__init__()\n        self.layer_input = None\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_opt = None\n        self.w0_opt = None\n        if input_shape is not None:\n            self.set_input_shape(input_shape)\n\n    def initialize(self):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be set before initializing weights.')\n        input_dim = self.input_shape[0]\n        limit = 1.0 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        self.w0 = np.zeros(self.n_units)\n        self.W_opt = copy.deepcopy(self.W_opt) if self.W_opt else None\n        self.w0_opt = copy.deepcopy(self.w0_opt) if self.w0_opt else None\n\n    def parameters(self):\n        if self.W is None or self.w0 is None:\n            return 0\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=False)\n            if self.W_opt is not None:\n                self.W = self.W_opt.update(self.W, grad_W)\n            if self.w0_opt is not None:\n                self.w0 = self.w0_opt.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_input = np.pad(input_matrix, pad_width=((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    (H_pad, W_pad) = padded_input.shape\n    (K_h, K_w) = kernel.shape\n    output_h = (H_pad - K_h) // stride + 1\n    output_w = (W_pad - K_w) // stride + 1\n    output = np.zeros((output_h, output_w))\n    for i in range(output_h):\n        for j in range(output_w):\n            h_start = i * stride\n            h_end = h_start + K_h\n            w_start = j * stride\n            w_end = w_start + K_w\n            window = padded_input[h_start:h_end, w_start:w_end]\n            output[i, j] = np.sum(window * kernel)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X.dot(w)\n    mse = np.mean((y_pred - y_true) ** 2)\n    reg = alpha * np.sum(w ** 2)\n    total_loss = mse + reg\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    denominator = tp + fp\n    if denominator == 0:\n        return 0.0\n    return tp / denominator"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.array(X)\n    y = np.array(y).flatten()\n    weights = np.array(weights).flatten()\n    n_samples = X.shape[0]\n    if method == 'batch':\n        batch_size = n_samples\n    elif method == 'sgd':\n        batch_size = 1\n    for _ in range(n_iterations):\n        if method == 'batch':\n            X_batch = X\n            y_batch = y\n        else:\n            indices = np.random.choice(n_samples, batch_size, replace=True)\n            X_batch = X[indices]\n            y_batch = y[indices]\n        y_pred = np.dot(X_batch, weights)\n        error = y_pred - y_batch\n        gradient = np.dot(X_batch.T, error) / batch_size\n        weights -= learning_rate * gradient\n    weights_rounded = np.round(weights, 4)\n    return weights_rounded.tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    mat = np.array(matrix, dtype=float).copy()\n    (rows, cols) = mat.shape\n    pivot_row = 0\n    for col in range(cols):\n        if pivot_row >= rows:\n            break\n        row_idx = np.argmax(np.abs(mat[pivot_row:, col])) + pivot_row\n        pivot_val = mat[row_idx, col]\n        if pivot_val == 0:\n            continue\n        mat[[pivot_row, row_idx]] = mat[[row_idx, pivot_row]]\n        mat[pivot_row] = mat[pivot_row] / mat[pivot_row, col]\n        for r in range(rows):\n            if r != pivot_row:\n                factor = mat[r, col]\n                mat[r] -= factor * mat[pivot_row]\n        pivot_row += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    x = np.array(x0, dtype=np.float64).copy()\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X.dot(w) + b\n        error = y_pred - y\n        gradient_w = X.T.dot(error) / n_samples + alpha * np.sign(w)\n        gradient_b = np.sum(error) / n_samples\n        prev_w = w.copy()\n        prev_b = b\n        w -= learning_rate * gradient_w\n        b -= learning_rate * gradient_b\n        current_params = np.append(w, b)\n        prev_params = np.append(prev_w, prev_b)\n        if np.linalg.norm(current_params - prev_params) < tol:\n            break\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_s = len(source)\n    len_t = len(target)\n    dp = np.zeros((len_s + 1, len_t + 1), dtype=int)\n    for i in range(len_s + 1):\n        dp[i][0] = i\n    for j in range(len_t + 1):\n        dp[0][j] = j\n    for i in range(1, len_s + 1):\n        for j in range(1, len_t + 1):\n            substitution_cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + substitution_cost)\n            if i >= 2 and j >= 2 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[len_s][len_t]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = tp + fn\n    if denominator == 0:\n        return round(0.0, 3)\n    return round(tp / denominator, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    max_scores = np.max(scores, axis=1, keepdims=True)\n    exp_scores = np.exp(scores - max_scores)\n    sum_exp = np.sum(exp_scores, axis=1, keepdims=True)\n    attention_weights = exp_scores / sum_exp\n    output = np.dot(attention_weights, V)\n    return np.round(output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x_arr = np.array(x)\n        a = np.dot(Wx, x_arr) + np.dot(Wh, h) + b\n        h = np.tanh(a)\n    h_rounded = np.round(h, decimals=4)\n    return h_rounded.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    if not points:\n        return []\n    points_array = np.array(points)\n    homogeneous = np.hstack([points_array, np.ones((points_array.shape[0], 1))])\n    translation_matrix = np.array([[1, 0, 0], [0, 1, 0], [tx, ty, 1]])\n    translated = homogeneous @ translation_matrix\n    return translated[:, :2].tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    return term1 + term2 - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    len_x = len(b)\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(len_x):\n            sigma = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - sigma) / A[i, i]\n    x_rounded = np.around(x, decimals=4)\n    return x_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    for k in range(n - 1):\n        max_row = np.argmax(np.abs(A[k:, k])) + k\n        if A[max_row, k] == 0:\n            continue\n        A[[k, max_row]] = A[[max_row, k]]\n        b[[k, max_row]] = b[[max_row, k]]\n        for i in range(k + 1, n):\n            factor = A[i, k] / A[k, k]\n            A[i, k:] -= factor * A[k, k:]\n            b[i] -= factor * b[k]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h_prev = initial_hidden_state.copy()\n        c_prev = initial_cell_state.copy()\n        hidden_states = []\n        for x_t in x:\n            concat = np.vstack((x_t, h_prev))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    N = len(corpus)\n    idf = {}\n    for term in query:\n        df = 0\n        for doc in corpus:\n            if term in doc:\n                df += 1\n        idf_value = np.log((N + 1) / (df + 1))\n        idf[term] = idf_value\n    result = []\n    for doc in corpus:\n        doc_length = len(doc)\n        doc_scores = []\n        for term in query:\n            if doc_length == 0:\n                tf = 0.0\n            else:\n                term_count = doc.count(term)\n                tf = term_count / doc_length\n            tf_idf = tf * idf[term]\n            doc_scores.append(round(tf_idf, 4))\n        result.append(doc_scores)\n    return np.array(result).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denom_p = TP + FP\n    if denom_p == 0:\n        precision = 0.0\n    else:\n        precision = TP / denom_p\n    denom_r = TP + FN\n    if denom_r == 0:\n        recall = 0.0\n    else:\n        recall = TP / denom_r\n    beta_sq = beta ** 2\n    numerator = (1 + beta_sq) * precision * recall\n    denominator = beta_sq * precision + recall\n    if denominator == 0:\n        f_score_value = 0.0\n    else:\n        f_score_value = numerator / denominator\n    return round(f_score_value, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns:\n            outputs (list): Output vectors at each time step.\n            inputs (list): The input sequence.\n            hidden_states (list): Hidden states at each time step (excluding initial state).\n        \"\"\"\n        T = len(x)\n        hidden_states = [np.zeros((self.hidden_size, 1))]\n        outputs = []\n        for t in range(T):\n            x_t = x[t]\n            h_prev = hidden_states[-1]\n            h_t = np.tanh(self.W_xh @ x_t + self.W_hh @ h_prev + self.b_h)\n            y_t = self.W_hy @ h_t + self.b_y\n            hidden_states.append(h_t)\n            outputs.append(y_t)\n        return (outputs, x, hidden_states[1:])\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs Backpropagation Through Time (BPTT) to adjust the weights.\n        \"\"\"\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros((self.hidden_size, 1))\n        for t in reversed(range(T)):\n            dy = outputs[t] - expected_output[t]\n            dW_hy += dy @ last_hiddens[t].T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            da = dh * (1 - last_hiddens[t] ** 2)\n            x_t = last_inputs[t]\n            dW_xh += da @ x_t.T\n            if t > 0:\n                h_prev = last_hiddens[t - 1]\n            else:\n                h_prev = np.zeros((self.hidden_size, 1))\n            dW_hh += da @ h_prev.T\n            db_h += da\n            dh_next = self.W_hh.T @ da\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    x = x0.copy() if x0 is not None else np.zeros_like(b)\n    r = b - A @ x\n    p = r.copy()\n    rsold = r.dot(r)\n    if rsold < tol ** 2:\n        x_rounded = np.round(x, 8)\n        return x_rounded.tolist()\n    for _ in range(n):\n        Ap = A @ p\n        alpha = rsold / p.dot(Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        rsnew = r.dot(r)\n        if rsnew < tol ** 2:\n            break\n        beta = rsnew / rsold\n        p = r + beta * p\n        rsold = rsnew\n    x_rounded = np.round(x, 8)\n    return x_rounded.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    total = len(y)\n    probs = counts / total\n    sum_squares = np.sum(probs ** 2)\n    gini = 1 - sum_squares\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_ptr = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col_idx, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                column_indices.append(col_idx)\n                count += 1\n        row_ptr.append(row_ptr[-1] + count)\n    return (values, column_indices, row_ptr)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_v_L = sum((vi * Li for (vi, Li) in zip(v, L)))\n    dot_L_L = sum((Li * Li for Li in L))\n    scalar = dot_v_L / dot_L_L\n    projection = [round(scalar * Li, 3) for Li in L]\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    rows = len(dense_matrix)\n    if rows == 0:\n        return ([], [], [0])\n    cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for j in range(cols):\n        for i in range(rows):\n            val = dense_matrix[i][j]\n            if val != 0:\n                values.append(val)\n                row_indices.append(i)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A_np = np.array(A, dtype=np.float64)\n    (Q, R, p) = np.linalg.qr(A_np, mode='reduced', pivoting=True)\n    diag = np.abs(np.diag(R))\n    if len(diag) == 0:\n        return []\n    max_diag = np.max(diag)\n    tolerance = max(A_np.shape) * np.finfo(R.dtype).eps * max_diag\n    rank = np.sum(diag > tolerance)\n    basis_matrix = A_np[:, p[:rank]]\n    return np.round(basis_matrix.T, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    if tss == 0:\n        return round(1.0 if rss == 0 else 0.0, 3)\n    return round(1 - rss / tss, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_pixels = len(img) * row_length\n    if total_pixels == 0:\n        return -1\n    sum_pixels = sum((pixel for row in img for pixel in row))\n    average = sum_pixels / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.ndim != 1 or y_pred.ndim != 1:\n        raise ValueError('Inputs must be 1-dimensional arrays.')\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must have the same length.')\n    if len(y_true) == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if not (np.issubdtype(y_true.dtype, np.number) and np.issubdtype(y_pred.dtype, np.number)):\n        raise TypeError('Input arrays must contain numeric values.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    rmse_value = np.sqrt(mean_squared_error)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    denominator = sum_true + sum_pred\n    if denominator == 0:\n        return 1.0\n    dice = 2.0 * intersection / denominator\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite = np.zeros(dim)\n    for (feature, value) in row.items():\n        name_seed = abs(hash(feature))\n        rng_name = np.random.default_rng(name_seed)\n        name_hv = rng_name.choice([-1, 1], size=dim)\n        value_seed = random_seeds[feature]\n        rng_value = np.random.default_rng(value_seed)\n        value_hv = rng_value.choice([-1, 1], size=dim)\n        bound_hv = name_hv * value_hv\n        composite += bound_hv\n    return composite.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        matrix[y_true][y_pred] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    v1_flat = v1.flatten()\n    v2_flat = v2.flatten()\n    dot_product = np.dot(v1_flat, v2_flat)\n    norm_v1 = np.linalg.norm(v1_flat)\n    norm_v2 = np.linalg.norm(v2_flat)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    TN = FP = FN = TP = 0\n    for (a, p) in zip(actual, predicted):\n        if a == 0:\n            if p == 0:\n                TN += 1\n            else:\n                FP += 1\n        elif p == 0:\n            FN += 1\n        else:\n            TP += 1\n    confusion_matrix = [[TN, FP], [FN, TP]]\n    total = len(actual)\n    accuracy = (TN + TP) / total if total != 0 else 0.0\n    precision = TP / (TP + FP) if TP + FP != 0 else 0.0\n    recall = TP / (TP + FN) if TP + FN != 0 else 0.0\n    f1 = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0.0\n    specificity = TN / (TN + FP) if TN + FP != 0 else 0.0\n    npv = TN / (TN + FN) if TN + FN != 0 else 0.0\n    accuracy = round(accuracy, 3)\n    f1 = round(f1, 3)\n    specificity = round(specificity, 3)\n    npv = round(npv, 3)\n    return (confusion_matrix, accuracy, f1, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    mean_val = np.round(np.mean(data), 4).item()\n    median_val = np.round(np.median(data), 4).item()\n    (values, counts) = np.unique(data, return_counts=True)\n    mode_index = np.argmax(counts)\n    mode_val = values[mode_index].item()\n    variance_val = np.round(np.var(data, ddof=1), 4).item()\n    std_dev_val = np.round(np.std(data, ddof=1), 4).item()\n    p25 = np.round(np.percentile(data, 25), 4).item()\n    p50 = np.round(np.percentile(data, 50), 4).item()\n    p75 = np.round(np.percentile(data, 75), 4).item()\n    iqr_val = np.round(p75 - p25, 4).item()\n    return {'mean': mean_val, 'median': median_val, 'mode': mode_val, 'variance': variance_val, 'standard_deviation': std_dev_val, '25th_percentile': p25, '50th_percentile': p50, '75th_percentile': p75, 'interquartile_range': iqr_val}"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    if lam == 0:\n        if k == 0:\n            prob = 1.0\n        else:\n            prob = 0.0\n    else:\n        prob = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(prob, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, calculated as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    return max_val - min_val"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed = []\n    for x in data:\n        features = [round(x ** i, 8) for i in range(degree + 1)]\n        transformed.append(features)\n    return transformed"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    k = np.arange(d_model)\n    i = k // 2\n    exponents = 2 * i / d_model\n    divisors = np.power(10000.0, exponents)\n    angles = position / divisors\n    pe = np.where(k % 2 == 0, np.sin(angles), np.cos(angles))\n    pe = pe.astype(np.float16)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    parameter_updated = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    parameter_rounded = np.round(parameter_updated, 5)\n    m_rounded = np.round(m_new, 5)\n    v_rounded = np.round(v_new, 5)\n    return (parameter_rounded.tolist(), m_rounded.tolist(), v_rounded.tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef layer_norm(x, g, b, eps=1e-05):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    x = (x - mean) / np.sqrt(variance + eps)\n    return g * x + b\ndef softmax(x):\n    exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return exp_x / exp_x.sum(axis=-1, keepdims=True)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    input_ids = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        current_input = input_ids[-hparams['n_ctx']:]\n        n_tokens = len(current_input)\n        token_emb = params['wte'][current_input]\n        positions = np.arange(n_tokens)\n        pos_emb = params['wpe'][positions]\n        embeddings = token_emb + pos_emb\n        attn_output = embeddings.copy()\n        ff_output = np.maximum(attn_output, 0)\n        norm_output = layer_norm(ff_output, params['ln_f']['g'], params['ln_f']['b'])\n        logits = np.dot(norm_output, params['wte'].T)\n        next_token_logits = logits[-1]\n        probs = softmax(next_token_logits)\n        next_token = np.argmax(probs)\n        input_ids.append(int(next_token))\n    generated_text = encoder.decode(input_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e = np.exp(values - np.max(values))\n        return e / e.sum()\n    crystals = np.array(crystal_values)\n    scores = np.outer(crystals, crystals) / np.sqrt(dimension)\n    attention = np.array([softmax(row) for row in scores])\n    output = attention @ crystals\n    return [round(x, 4) for x in output.tolist()]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    docs_terms = [doc.split() for doc in corpus]\n    query_terms = list(set(query.split()))\n    N = len(docs_terms)\n    if N == 0:\n        return []\n    doc_lengths = [len(doc) for doc in docs_terms]\n    avgdl = sum(doc_lengths) / N\n    doc_freqs = [Counter(doc) for doc in docs_terms]\n    idf = {}\n    for term in query_terms:\n        n_t = sum((1 for doc in docs_terms if term in doc))\n        idf_value = np.log((N - n_t + 0.5) / (n_t + 0.5))\n        idf[term] = idf_value\n    scores = []\n    for i in range(N):\n        score = 0.0\n        doc_len = doc_lengths[i]\n        for term in query_terms:\n            tf = doc_freqs[i].get(term, 0)\n            if avgdl != 0:\n                denominator_part = 1 - b + b * (doc_len / avgdl)\n            else:\n                denominator_part = 1 - b\n            denominator = tf + k1 * denominator_part\n            if denominator != 0:\n                score += idf[term] * (tf * (k1 + 1)) / denominator\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    unique_labels = sorted(list(set(y_true) | set(y_pred)))\n    if not unique_labels:\n        return 0.0\n    positive_label = unique_labels[-1] if len(unique_labels) > 1 else unique_labels[0]\n    (tp, fp, fn) = (0, 0, 0)\n    for (t, p) in zip(y_true, y_pred):\n        if t == positive_label:\n            if p == positive_label:\n                tp += 1\n            else:\n                fn += 1\n        elif p == positive_label:\n            fp += 1\n    precision = tp / (tp + fp) if tp + fp != 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0.0\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\ndef power_grid_forecast(consumption_data):\n    detrended = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * math.pi * i / 10)\n        detrended_val = consumption_data[i - 1] - fluctuation\n        detrended.append(detrended_val)\n    n = 10\n    sum_x = 55\n    sum_y = sum(detrended)\n    sum_xy = 0\n    sum_x2 = 385\n    for day in range(1, 11):\n        sum_xy += day * detrended[day - 1]\n    numerator = n * sum_xy - sum_x * sum_y\n    denominator = n * sum_x2 - sum_x ** 2\n    m = numerator / denominator\n    b = (sum_y - m * sum_x) / n\n    base_prediction = m * 15 + b\n    day15_fluctuation = 10 * math.sin(2 * math.pi * 15 / 10)\n    total = base_prediction + day15_fluctuation\n    rounded_total = round(total)\n    safety_margin = math.ceil(rounded_total * 1.05)\n    return safety_margin"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return round(np.mean(np.abs(y_true - y_pred)), 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    max_scores = np.max(scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(scores - max_scores)\n    sum_exp = np.sum(exp_scores, axis=-1, keepdims=True)\n    attn_weights = exp_scores / sum_exp\n    output = np.dot(attn_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    (seq_len, d_model) = Q.shape\n    assert d_model % n_heads == 0, 'd_model must be divisible by n_heads'\n    d_k = d_model // n_heads\n    Q_split = Q.reshape(seq_len, n_heads, d_k).transpose(1, 0, 2)\n    K_split = K.reshape(seq_len, n_heads, d_k).transpose(1, 0, 2)\n    V_split = V.reshape(seq_len, n_heads, d_k).transpose(1, 0, 2)\n    heads_output = []\n    for i in range(n_heads):\n        q = Q_split[i]\n        k = K_split[i]\n        v = V_split[i]\n        head_out = self_attention(q, k, v)\n        heads_output.append(head_out)\n    output = np.concatenate(heads_output, axis=1)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    a = b = c = d = 0\n    for (xi, yi) in zip(x, y):\n        if xi == 1:\n            if yi == 1:\n                a += 1\n            else:\n                b += 1\n        elif yi == 1:\n            c += 1\n        else:\n            d += 1\n    numerator = a * d - b * c\n    denominator = ((a + b) * (a + c) * (b + d) * (c + d)) ** 0.5\n    phi = numerator / denominator if denominator != 0 else 0.0\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0.0, min(1.0, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to 4 decimal places.\n    \"\"\"\n    if x > 0:\n        value = x\n    else:\n        value = alpha * (math.exp(x) - 1)\n    return round(value, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x > 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x > 0:\n        term = math.exp(-x)\n        result = x + math.log(1 + term)\n    else:\n        term = math.exp(x)\n        result = math.log(1 + term)\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate_terms = np.minimum(rhos * A, clipped_rhos * A)\n    surrogate_loss = np.sum(surrogate_terms)\n    pi_theta = rhos * pi_theta_old\n    log_pi_theta = np.log(pi_theta)\n    log_pi_ref = np.log(pi_theta_ref)\n    kl_divergence = np.sum(pi_theta * (log_pi_theta - log_pi_ref))\n    total = surrogate_loss - beta * kl_divergence\n    return round(total.item(), 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to the nearest 4th decimal.\n    \"\"\"\n    if x >= 0:\n        sigmoid_x = 1.0 / (1.0 + math.exp(-x))\n    else:\n        exp_x = math.exp(x)\n        sigmoid_x = exp_x / (1.0 + exp_x)\n    swish_value = x * sigmoid_x\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to 4 decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    classes = np.unique(y)\n    C = len(classes)\n    y_one_hot = np.eye(C)[y]\n    (N, M) = X.shape\n    B = np.zeros((C, M))\n    losses = []\n    for _ in range(iterations):\n        Z = X @ B.T\n        Z_max = np.max(Z, axis=1, keepdims=True)\n        exp_Z = np.exp(Z - Z_max)\n        S = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n        epsilon = 1e-15\n        loss = -np.mean(np.sum(y_one_hot * np.log(S + epsilon), axis=1))\n        losses.append(round(loss, 4))\n        grad = (S - y_one_hot).T @ X / N\n        B -= learning_rate * grad\n    B_rounded = np.round(B, 4)\n    return (B_rounded.tolist(), losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    losses = []\n    for _ in range(iterations):\n        z = X.dot(theta)\n        h = 1 / (1 + np.exp(-z))\n        h = np.clip(h, 1e-15, 1 - 1e-15)\n        loss = (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n        losses.append(round(loss, 4))\n        gradient = X.T.dot(h - y) / m\n        theta -= learning_rate * gradient\n    coef = np.round(theta, 4).tolist()\n    return (coef, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores += mask\n    max_scores = np.max(scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(scores - max_scores)\n    sum_exp = np.sum(exp_scores, axis=-1, keepdims=True)\n    attention_weights = exp_scores / sum_exp\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    counts = Counter(apples)\n    total = len(apples)\n    entropy = 0.0\n    for cnt in counts.values():\n        p = cnt / total\n        entropy += p * math.log2(1 / p)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=2, keepdims=True)\n    variance = X.var(axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    result = gamma * X_normalized + beta\n    return np.round(result, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_words = reference.split()\n    cand_words = candidate.split()\n    if not ref_words or not cand_words:\n        return 0.0\n    ref_counts = Counter(ref_words)\n    cand_counts = Counter(cand_words)\n    matches = 0\n    for word in cand_counts:\n        if word in ref_counts:\n            matches += min(ref_counts[word], cand_counts[word])\n    if matches == 0:\n        return 0.0\n    precision = matches / len(cand_words) if len(cand_words) > 0 else 0.0\n    recall = matches / len(ref_words) if len(ref_words) > 0 else 0.0\n    denominator = alpha * precision + (1 - alpha) * recall\n    if denominator == 0:\n        f_mean = 0.0\n    else:\n        f_mean = precision * recall / denominator\n    ref_word_positions = defaultdict(list)\n    for (idx, word) in enumerate(ref_words):\n        ref_word_positions[word].append(idx)\n    used_positions = set()\n    candidate_positions = []\n    for word in cand_words:\n        if word in ref_word_positions:\n            for pos in ref_word_positions[word]:\n                if pos not in used_positions:\n                    used_positions.add(pos)\n                    candidate_positions.append(pos)\n                    break\n    chunks = 1\n    for i in range(1, len(candidate_positions)):\n        if candidate_positions[i] != candidate_positions[i - 1] + 1:\n            chunks += 1\n    penalty = gamma * (chunks / matches) ** beta if matches > 0 else 0.0\n    score = f_mean * (1 - penalty)\n    score = max(0.0, score)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    ratio = joint_counts * total_samples / (total_counts_x * total_counts_y)\n    pmi = np.log2(ratio)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    diff = max_val - min_val\n    if diff == 0:\n        return [0.0 for _ in x]\n    return [round((num - min_val) / diff, 4) for num in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    a1 = np.maximum(0, np.dot(x, w1))\n    a2 = np.maximum(0, np.dot(a1, w2))\n    shortcut = a2 + x\n    output = np.maximum(0, shortcut)\n    return np.round(output, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    gamma = gamma.reshape(1, -1, 1, 1)\n    beta = beta.reshape(1, -1, 1, 1)\n    Y = gamma * X_normalized + beta\n    return np.round(Y, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        current = np.array(v, dtype=float)\n        for u in basis:\n            proj = np.dot(current, u) * u\n            current -= proj\n        norm = np.linalg.norm(current)\n        if norm > tol:\n            e = current / norm\n            basis.append(e)\n    return [vec.round(4).tolist() for vec in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    product = np.cross(a, b)\n    rounded = np.round(product, decimals=4)\n    return rounded.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0.0):\n        return -1\n    n = A.shape[0]\n    solution = []\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        det_Ai = np.linalg.det(Ai)\n        xi = det_Ai / det_A\n        solution.append(xi)\n    solution_array = np.array(solution)\n    rounded_solution = np.round(solution_array, 4)\n    reshaped_solution = rounded_solution.reshape(-1, 1)\n    return reshaped_solution.tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or not p or (not q):\n        return 0.0\n    p_array = np.array(p)\n    q_array = np.array(q)\n    product = p_array * q_array\n    sum_bc = np.sum(np.sqrt(product))\n    distance = -np.log(sum_bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": ""}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = 2 * d_in * d_out\n    gating_flops = 2 * d_in * n_experts\n    expert_flops = 2 * k_active * d_in * d_out\n    combine_flops = 2 * k_active * d_out\n    moe_flops = gating_flops + expert_flops + combine_flops\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n    return round(savings, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    clean_logits = X @ W_g.T\n    noise_contrib = X @ W_noise.T * N\n    H = clean_logits + noise_contrib\n    top_k_indices = np.argpartition(H, -k, axis=1)[:, -k:]\n    batch_indices = np.arange(H.shape[0])[:, np.newaxis]\n    mask = np.zeros_like(H, dtype=bool)\n    mask[batch_indices, top_k_indices] = True\n    masked_H = np.where(mask, H, -np.inf)\n    shifted = masked_H - np.max(masked_H, axis=1, keepdims=True)\n    exp_H = np.exp(shifted)\n    probabilities = exp_H / exp_H.sum(axis=1, keepdims=True)\n    rounded_prob = np.round(probabilities, 4)\n    return rounded_prob.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gate_logits = x.dot(Wg)\n    max_logits = np.max(gate_logits, axis=1, keepdims=True)\n    exp_logits = np.exp(gate_logits - max_logits)\n    gate_probs = exp_logits / exp_logits.sum(axis=1, keepdims=True)\n    sorted_indices = np.argsort(-gate_probs, axis=1)\n    top_k_indices = sorted_indices[:, :top_k]\n    batch_size = x.shape[0]\n    batch_idx = np.arange(batch_size)[:, None]\n    top_k_values = gate_probs[batch_idx, top_k_indices]\n    sum_topk = top_k_values.sum(axis=1, keepdims=True)\n    normalized_probs = top_k_values / sum_topk\n    output_dim = We.shape[2]\n    output = np.zeros((batch_size, output_dim))\n    for j in range(top_k):\n        expert_idx = top_k_indices[:, j]\n        expert_weights = We[expert_idx]\n        contrib = np.einsum('bi,bio->bo', x, expert_weights)\n        contrib *= normalized_probs[:, j, np.newaxis]\n        output += contrib\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    G = C // num_groups\n    X_grouped = X.reshape((B, num_groups, G, H, W))\n    mean = X_grouped.mean(axis=(2, 3, 4), keepdims=True)\n    var = X_grouped.var(axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape((B, C, H, W))\n    result = X_normalized * gamma[np.newaxis, :, np.newaxis, np.newaxis] + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(result, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for _ in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        if abs(gradient) < tolerance:\n            second_derivative = 12 * x ** 2 - 18 * x\n            if second_derivative > 0:\n                break\n            else:\n                x += learning_rate\n        else:\n            x -= learning_rate * gradient\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    transformed = gamma * x + beta\n    tanh_values = np.tanh(transformed)\n    scaled = alpha * tanh_values\n    rounded = np.round(scaled, decimals=4)\n    return rounded.tolist()"}
