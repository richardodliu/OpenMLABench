{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Ridge Regression Closed-Form Solver.\n    \n    Args:\n        data: A 2D NumPy array where the last column is the target y and all preceding columns are features x.\n        alpha: Regularization strength (float).\n        \n    Returns:\n        A list of floats representing the weight vector rounded to 4 decimal places.\n        Returns -1 if the matrix is not invertible.\n    \"\"\"\n    X = np.hstack((np.ones((data.shape[0], 1)), data[:, :-1]))\n    y = data[:, -1]\n    XTX = np.dot(X.T, X)\n    I = np.eye(XTX.shape[0])\n    XTX_plus_alphaI = XTX + alpha * I\n    try:\n        inv_matrix = np.linalg.inv(XTX_plus_alphaI)\n    except np.linalg.LinAlgError:\n        return -1\n    w = np.dot(inv_matrix, np.dot(X.T, y))\n    return [round(w[i], 4) for i in range(len(w))]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    while updates < n_iter:\n        for i in range(n_samples):\n            activation = np.dot(alpha, y_train[i] * X_train[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                break\n        if updates == 0:\n            break\n    w = alpha.tolist()\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def identity_inv_link(eta):\n        return eta\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def identity_deriv_link(mu):\n        return np.ones_like(mu)\n\n    def log_deriv_link(mu):\n        return mu / (mu * (1 - mu))\n\n    def logit_deriv_link(mu):\n        return (1 - mu) / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'deriv_link': identity_deriv_link}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'deriv_link': log_deriv_link}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'deriv_link': logit_deriv_link}}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    depths = [0] * n_samples\n\n    def build_tree(node_indices, current_depth):\n        if len(node_indices) < 3:\n            for idx in node_indices:\n                depths[idx] = current_depth\n            return\n        f = np.random.randint(n_features)\n        indices = node_indices\n        feature_values = data[indices, f]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        v = np.random.uniform(down, up)\n        left_indices = []\n        right_indices = []\n        for idx in indices:\n            if data[idx, f] <= v:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        build_tree(left_indices, current_depth + 1)\n        build_tree(right_indices, current_depth + 1)\n    build_tree(data.indices, 0)\n    return depths"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"\n    Return all frequent itemsets in the given transactions based on the minimum support threshold.\n    \n    Args:\n        transactions: List of lists representing transactions.\n        minsup: Minimum support as a fraction between 0 and 1.\n        \n    Returns:\n        A dictionary mapping frequent itemsets (as tuples) to their support counts.\n    \"\"\"\n    transaction_sets = [frozenset(transaction) for transaction in transactions]\n    num_transactions = len(transaction_sets)\n    min_support = math.ceil(minsup * num_transactions)\n    item_support = Counter()\n    for transaction in transaction_sets:\n        for item in transaction:\n            item_support[item] += 1\n    frequent_items = {}\n    for (item, count) in item_support.items():\n        if count >= min_support:\n            frequent_items[item,] = count\n    frequent_pairs = {}\n    for (item1, item2) in combinations(item_support.keys(), 2):\n        pair = tuple(sorted((item1, item2)))\n        common_transactions = 0\n        for transaction in transaction_sets:\n            if item1 in transaction and item2 in transaction:\n                common_transactions += 1\n        if common_transactions >= min_support:\n            frequent_pairs[pair] = common_transactions\n    result = frequent_items.copy()\n    result.update(frequent_pairs)\n    return result"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if n_samples < k:\n        raise ValueError('Number of samples must be at least k.')\n    centroids = data[:k, :]\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        distances = np.sqrt(np.sum((data - centroids) ** 2, axis=1))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            cluster_data = data[labels == i]\n            if len(cluster_data) == 0:\n                cluster_data = data[np.random.randint(n_samples)]\n            new_centroids[i] = np.mean(cluster_data, axis=0)\n        if np.all(np.abs(centroids - new_centroids) < epsilon):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    return ([list(center) for center in centroids], labels.astype(int))"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                continue\n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            if np.std(v1) > 0.001:\n                v1 -= np.mean(v1)\n            if np.std(v2) > 0.001:\n                v2 -= np.mean(v2)\n            if criterion == 'cosine':\n                sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n            elif criterion == 'pearson':\n                cov = np.cov(v1, v2)[0, 1]\n                var1 = np.var(v1)\n                var2 = np.var(v2)\n                sim = cov / (np.sqrt(var1) * np.sqrt(var2))\n            else:\n                raise ValueError('Invalid similarity criterion')\n            S[i, j] = sim\n            S[j, i] = sim\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    if len(rated_items) == data.shape[1]:\n        return []\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    predictions = []\n    for t in unrated_items:\n        rated_indices = np.where(data[user_ind, :] > 0)[0]\n        numerator = 0.0\n        denominator = 0.0\n        for i in rated_indices:\n            if S[t, i] != 0:\n                numerator += data[user_ind, i] * S[t, i]\n                denominator += abs(S[t, i])\n        if denominator == 0:\n            prediction = 0.0\n        else:\n            prediction = numerator / denominator\n        predictions.append((prediction, t))\n    predictions.sort(key=lambda x: (-x[0], x[1]))\n    return [item for (pred, item) in predictions[:k]]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"\n    Returns the best split for a gradient-boosting tree node.\n    \n    Parameters:\n        X: Feature matrix (n_samples \u00d7 n_features)\n        g: First-order gradients (n_samples,)\n        h: Second-order gradients (n_samples,)\n        gamma: Regularization term\n        lam: L2 regularization term\n        \n    Returns:\n        A tuple (feature_index, threshold) if a valid split yields positive gain,\n        otherwise None.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = np.inf\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        for threshold in unique_values:\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n            sum_g = np.sum(g[left_mask]) + np.sum(g[right_mask])\n            sum_h = np.sum(h[left_mask]) + np.sum(h[right_mask])\n            original_loss = -sum_g ** 2 / (sum_h + lam) + gamma\n            left_loss = -np.sum(g[left_mask]) ** 2 / (np.sum(h[left_mask]) + lam) + gamma\n            right_loss = -np.sum(g[right_mask]) ** 2 / (np.sum(h[right_mask]) + lam) + gamma\n            current_gain = original_loss - left_loss - right_loss\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_gain >= 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if isinstance(x, np.ndarray):\n        return (sigmoid_x.tolist(), gradient_x.tolist())\n    else:\n        return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = [1.0 / n_samples for _ in range(n_samples)]\n    x_train_sorted = sorted(x_train)\n    unique_x = np.unique(x_train_sorted)\n    stumps = []\n    for i in range(1, len(unique_x)):\n        threshold = (unique_x[i] + unique_x[i - 1]) / 2\n        stumps.append((threshold, 1))\n        stumps.append((threshold, -1))\n    while True:\n        current_error = 0.0\n        for i in range(n_samples):\n            if np.sign(y_train[i]) != np.sign(np.heaviside(x_train[i] - stumps[0][0], 0)):\n                current_error += weights[i]\n        if current_error <= epsilon:\n            break\n        min_error = float('inf')\n        best_stump = None\n        for stump in stumps:\n            err = 0.0\n            for i in range(n_samples):\n                if np.sign(y_train[i]) != np.sign(np.heaviside(x_train[i] - stump[0], 0)):\n                    err += weights[i]\n            if err < min_error:\n                min_error = err\n                best_stump = stump\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        for i in range(n_samples):\n            if np.sign(y_train[i]) != np.sign(np.heaviside(x_train[i] - best_stump[0], 0)):\n                weights[i] *= 1 - 2 * min_error\n            else:\n                weights[i] *= 2 * min_error\n        sum_weights = sum(weights)\n        if sum_weights == 0:\n            sum_weights = 1.0\n        weights = [w / sum_weights for w in weights]\n        stumps.append(best_stump)\n    predictions = []\n    for x in x_test:\n        total = 0.0\n        for (threshold, d) in stumps:\n            if np.sign(y_train[i]) != np.sign(np.heaviside(x - threshold, 0)):\n                total += weights[i] * d\n        predictions.append(int(total > 0))\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Predict labels for test samples using a Gaussian-kernel SVM.\n    \n    Parameters:\n    X_train (np.ndarray): (n, d) - Training samples\n    y_train (np.ndarray): (n,) - Binary class labels\n    alpha (np.ndarray): (n,) - Lagrange multipliers\n    b (float): Bias term\n    gamma (float): Gaussian kernel parameter\n    X_test (np.ndarray): (m, d) - Test samples\n    \n    Returns:\n    list[int]: Predicted labels for each test sample (1 or -1)\n    \"\"\"\n    dot_product = np.dot(X_test, X_train.T)\n    squared_distances = dot_product - 2 * np.dot(X_test, X_train) + np.dot(X_train, X_train.T)\n    exp_term = np.exp(-gamma * squared_distances)\n    g = alpha * y_train * exp_term + b\n    predicted_labels = np.sign(g)\n    return predicted_labels.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(len(X), len(X[0])):\n        return (-1, 0.0)\n    X_np = np.array(X, dtype=np.float64)\n    (U, s, V_T) = np.linalg.svd(X_np, full_matrices=False)\n    s_truncated = s[:k]\n    U_truncated = U[:, :k]\n    V_truncated = V_T[:k, :]\n    X_hat = np.dot(U_truncated, np.dot(np.diag(s_truncated), V_truncated))\n    X_hat_rounded = np.round(X_hat, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    mse = np.mean((X_np - X_hat_rounded) ** 2)\n    return (X_hat_list, round(mse, 4))"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_train_sorted = np.sort(x_train)\n    y_train_sorted = y_train[np.argsort(x_train_sorted)]\n    split_points = np.unique(np.diff(x_train_sorted)) / 2 + x_train_sorted[0]\n    ensemble = []\n    residuals = y_train - np.zeros_like(y_train)\n    while True:\n        best_rss = float('inf')\n        best_split = None\n        for s in split_points:\n            left_indices = np.where(x_train_sorted <= s)[0]\n            right_indices = np.where(x_train_sorted > s)[0]\n            left_residuals = residuals[left_indices]\n            right_residuals = residuals[right_indices]\n            c1 = np.mean(left_residuals)\n            c2 = np.mean(right_residuals)\n            rss = (c1 - c2) ** 2\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n        if best_rss == float('inf'):\n            break\n        ensemble.append((best_split, c1, c2))\n        residuals = y_train_sorted - np.sum([c1 if x <= best_split else c2 for (x, c1, c2) in ensemble], axis=0)\n    prediction = 0.0\n    for (split, c1, c2) in ensemble:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Generate a binary tensor with specified shape and sparsity.\n\n    Args:\n        shape: A tuple of integers representing the dimensions of the output tensor.\n        sparsity: A float in [0, 1] indicating the probability of generating a 1.\n        seed: An integer for reproducibility (optional).\n\n    Returns:\n        A NumPy ndarray of dtype float32 or float64 containing only 0.0 and 1.0.\n\n    Raises:\n        ValueError: If sparsity is not in [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_array = (random_array >= threshold).astype(np.float32)\n    return binary_array"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    column = data[:, d]\n    n_samples = column.shape[0]\n    median_value = np.median(column)\n    pivot_index = np.argpartition(column, n_samples // 2)[n_samples // 2]\n    median_value = column[pivot_index]\n    left = np.argwhere(column < median_value)\n    right = np.argwhere(column > median_value)\n    return (pivot_index, left.tolist(), right.tolist())"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames using low-level stride manipulation.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise AssertionError('x must be a NumPy array')\n    if x.ndim != 1:\n        raise AssertionError('x must be one-dimensional')\n    if stride < 1:\n        raise AssertionError('stride must be a positive integer')\n    if frame_width <= 0:\n        raise AssertionError('frame_width must be a positive integer')\n    if len(x) < frame_width:\n        raise AssertionError('The signal length must be at least as long as the frame width')\n    n_frames = (len(x) - frame_width) // stride + 1\n    return as_strided(x, (n_frames, frame_width), stride=stride, writeable=writeable)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)):\n        return False\n    if not isinstance(X, np.ndarray) and (not isinstance(X, list)):\n        return False\n    if isinstance(X, np.ndarray):\n        X = X.astype(float)\n    if not isinstance(X, np.ndarray) and (not isinstance(X, list)):\n        return False\n    if isinstance(X, np.ndarray):\n        if X.ndim != 2:\n            return False\n    if not np.all(np.logical_and(X >= 0, X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[1]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        if n < batch_size:\n            batch_indices = np.arange(n)\n        else:\n            batch_indices = np.arange(0, n, batch_size)\n        for batch in batch_indices:\n            x_batch = X[batch:batch + batch_size]\n            y_batch = y[batch:batch + batch_size]\n            grad = 1 / n * np.dot(x_batch.T, x_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function and its derivative.\n    \n    Args:\n        x: A scalar, Python list, or NumPy array of real numbers.\n        deriv: Whether to return the derivative (True) or the SoftPlus value (False).\n        \n    Returns:\n        A list of floats if x is a scalar or list, or a single float if x is a NumPy array.\n    \"\"\"\n    x = np.array(x)\n    if x.ndim == 0:\n        result = np.zeros(1)\n        result[0] = softplus(x, deriv)\n        return result\n\n    def softplus_func(val):\n        if val > 0:\n            return np.log(1 + np.exp(val))\n        else:\n            return np.log(1 + np.exp(val))\n    softplus_values = np.where(x > 0, softplus_func(x), np.log(1 + np.exp(x)))\n    if deriv:\n        sigmoid_values = np.where(x > 0, np.exp(x) / (1 + np.exp(x)), np.exp(x) / (1 + np.exp(x)))\n        return sigmoid_values\n    rounded_result = np.round(softplus_values, 4)\n    if x.ndim == 0:\n        return rounded_result[0]\n    else:\n        return rounded_result"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Args:\n        corpus: List of word tokens\n        sequence: List of word tokens\n        N: Order of the N-gram model (\u22651)\n\n    Returns:\n        float: Total log-probability of the sequence, rounded to 4 decimal places.\n        If any required count is zero, returns float('-inf').\n\n    Raises:\n        ValueError: If N is less than 1\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    if N == 1:\n        counts = Counter(corpus)\n    else:\n        counts = {}\n        for i in range(len(corpus) - N + 1):\n            n_gram = ' '.join(corpus[i:i + N])\n            counts[n_gram] = counts.get(n_gram, 0) + 1\n    for i in range(len(sequence) - N + 1):\n        n_gram = ' '.join(sequence[i:i + N])\n        if N == 1:\n            if n_gram not in counts or counts[n_gram] == 0:\n                return float('-inf')\n        elif n_gram not in counts or counts[n_gram] == 0:\n            return float('-inf')\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        n_gram = ' '.join(sequence[i:i + N])\n        if N == 1:\n            prob = counts[n_gram] / len(corpus)\n        else:\n            prob = counts[n_gram] / counts.get(' '.join(sequence[i:i + N - 1]), 0)\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model with polynomial features using coordinate descent.\n    \n    Parameters:\n    X (list or np.ndarray): Input features (1D)\n    y (list or np.ndarray): Target values\n    degree (int): Polynomial degree\n    reg_factor (float): Regularization strength\n    n_iterations (int): Maximum number of coordinate descent passes\n    tol (float): Early stopping criterion\n    \n    Returns:\n    list[float]: Coefficients [w0, w1, ..., w_degree] rounded to 4 decimal places\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_with_bias = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n    num_features = degree + 1\n    w = np.zeros(num_features)\n    for iteration in range(n_iterations):\n        y_pred = X_with_bias @ w\n        residuals = y_np - y_pred\n        w[0] = np.mean(residuals)\n        for j in range(1, num_features):\n            rho = X_with_bias[:, j] @ (residuals + w[j] * X_with_bias[:, j])\n            if reg_factor > 0:\n                rho = np.sign(rho) * max(abs(rho) - reg_factor, 0)\n            w[j] = rho / (X_with_bias[:, j] @ X_with_bias[:, j])\n        max_change = np.max(np.abs(w - w_prev))\n        if max_change < tol:\n            break\n        w_prev = w.copy()\n    return np.round(w, 4).tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model (HMM).\n    \n    Parameters:\n        A (list of lists of float): Transition probability matrix (N x N), where A[i][j] is the probability\n                                  of transitioning from state i to state j.\n        B (list of lists of float): Emission probability matrix (N x M), where B[i][k] is the probability\n                                   of observing symbol k in state i.\n        obs (list of int): List of observed symbols (length T).\n        t (int): Time index (0 \u2264 t < T) for which to compute the backward probabilities.\n    \n    Returns:\n        list of float: A list of N floats, each representing the backward probability for state i at time t.\n    \"\"\"\n    N = len(A)\n    M = len(B[0]) if B else 0\n    T = len(obs)\n    beta = [0.0] * N\n    if t == T - 1:\n        beta = [1.0] * N\n        return beta\n    for i in range(N):\n        total = 0.0\n        for j in range(N):\n            transition_prob = A[j][i]\n            emission_prob = B[j][obs[t]]\n            total += transition_prob * emission_prob * beta[j]\n        beta[i] = round(total, 4)\n    return beta"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not obs:\n        return 0.0\n    if len(obs) == 0 or len(obs) > len(pi):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    beta = [np.zeros(N) for _ in range(T)]\n    for i in range(N):\n        beta[T - 1][i] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                transition_prob = A[j][i]\n                emission_prob = B[j][obs[t]]\n                total += transition_prob * emission_prob * beta[t + 1][j]\n            beta[t][i] = total\n    total_prob = 0.0\n    for i in range(N):\n        prob = pi[i] * B[i][obs[0]] * beta[0][i]\n        total_prob += prob\n    return round(total_prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0]) if B else 0\n    if n != len(A) or len(A[0]) != n:\n        return -1\n    if m == 0 or len(observations) == 0:\n        return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    alpha = [np.zeros(n) for _ in range(len(observations))]\n    alpha[0] = S[:]\n    for t in range(1, len(observations)):\n        for i in range(n):\n            prob = alpha[t - 1][i] * A[i][observations[t - 1]]\n            for j in range(n):\n                prob += alpha[t - 1][j] * A[j][observations[t - 1]]\n            alpha[t][i] = prob\n    total_prob = sum(alpha[-1])\n    return round(total_prob, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n\n    class Node:\n\n        def __init__(self, item):\n            self.item = item\n            self.children = defaultdict(int)\n            self.support = 0\n    root = Node(None)\n    for (item, count) in item_counts.items():\n        node = root\n        for char in item:\n            if char not in node.children:\n                node.children[char] = Node(char)\n            node = node.children[char]\n        node.support = count\n    frequent_itemsets = []\n\n    def mine(node, current_itemset):\n        nonlocal frequent_itemsets\n        if node.support >= min_support:\n            frequent_itemsets.append(current_itemset + [node.item])\n        for child in node.children.values():\n            mine(child, current_itemset + [child.item])\n    mine(root, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return [-1]\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    distances = []\n    for test_sample in X_test_np:\n        dist = np.sqrt(np.sum((test_sample - X_train_np) ** 2, axis=1))\n        distances.append(dist)\n    nearest_indices = np.argsort(distances, axis=0)[:k]\n    nearest_labels = y_train_np[nearest_indices]\n    class_counts = np.unique(nearest_labels, return_counts=True)\n    if class_counts[1][0] == 0:\n        return [class_counts[0][0] for _ in range(len(X_test))]\n    best_class = class_counts[0][class_counts[1].argmax()]\n    return [best_class for _ in range(len(X_test))]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    if y.shape != y_pred.shape:\n        raise ValueError('Shapes of y and y_pred must be the same.')\n    loss = -np.sum(y * np.log(y_pred + 1e-12))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network with ReLU in hidden layers and Sigmoid in output.\n    \n    Parameters:\n    X (np.ndarray): Input data with shape (n_x, m)\n    parameters (dict): Dictionary containing W1...WL and b1...bL\n    \n    Returns:\n    list[list[float]]: Final activation AL rounded to 4 decimal places as a Python list\n    \"\"\"\n    caches = []\n    A = X\n    for l in range(1, len(parameters) // 2):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = np.maximum(0, Z)\n        caches.append((W, b, A))\n    W_last = parameters[f'W{len(parameters) // 2}']\n    b_last = parameters[f'b{len(parameters) // 2}']\n    Z_last = np.dot(W_last, A) + b_last\n    A_last = np.sigm(Z_last)\n    AL = np.round(A_last, 4).tolist()\n    return AL"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(Q, np.ndarray):\n        Q = Q.tolist()\n    n = len(Q)\n    if n == 0:\n        return []\n    max_q = max(Q)\n    greedy_index = Q.index(max_q)\n    base = epsilon / n\n    probabilities = [0.0] * n\n    probabilities[greedy_index] = 1 - base + base / n\n    for i in range(n):\n        if i != greedy_index:\n            probabilities[i] = base / n\n    probabilities = [round(p, 4) for p in probabilities]\n    probabilities = [p / sum(probabilities) for p in probabilities]\n    return probabilities"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    vote_counts = []\n    for sample in predictions:\n        counts = Counter(sample)\n        vote_counts.append(counts)\n    final_predictions = []\n    for sample_votes in vote_counts:\n        most_common = max(sample_votes, key=lambda x: (x, x))\n        final_predictions.append(most_common[1])\n    return final_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    result = np.logaddexp(0.0, z)\n    if isinstance(z, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        return round(result, 4)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy.get('ev_estimates'):\n        return np.nan\n    true_values = bandit['arm_evs']\n    arm_indices = list(policy['ev_estimates'].keys())\n    sorted_indices = sorted(arm_indices)\n    squared_errors = []\n    for (i, idx) in enumerate(sorted_indices):\n        estimated = policy['ev_estimates'][idx]\n        error = (true_values[i] - estimated) ** 2\n        squared_errors.append(error)\n    mean_error = np.mean(squared_errors)\n    return round(mean_error, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"\n    Compute the additive-smoothed log-probability of a sequence given a corpus.\n\n    Parameters:\n    - corpus: list of strings (sentences)\n    - sequence: string (target sentence)\n    - N: order of the N-gram model\n    - K: smoothing constant (default 1.0)\n\n    Returns:\n    - float: natural logarithm of the sentence probability rounded to 4 decimals\n    \"\"\"\n    vocab = set()\n    freq = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            n_gram = ' '.join(words[i:i + N])\n            freq[n_gram][n_gram] += 1\n            vocab.add(n_gram)\n    vocab.add('<UNK>')\n    vocab_size = len(vocab)\n    if len(sequence) < N:\n        return 0.0\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        n_gram = ' '.join(sequence[i:i + N])\n        if n_gram not in freq:\n            n_gram = '<UNK>'\n        context = ' '.join(sequence[i - 1:i])\n        count_context = freq.get(context, 0)\n        count_ngram = freq.get(n_gram, 0)\n        numerator = count_context + K\n        denominator = count_context + K * vocab_size\n        log_prob = math.log(numerator / denominator)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorises a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    if N < K or M < K:\n        raise ValueError('Matrix dimensions must be at least K x K for factorization.')\n    np.random.seed(0)\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    losses = []\n    for iteration in range(max_iter):\n        WH = np.dot(W, H)\n        recon_error = np.abs(WH - X)\n        loss = np.trace(np.dot(WH.T, WH)) + alpha * (np.trace(np.dot(W.T, W)) + np.trace(np.dot(H.T, H)))\n        losses.append(loss)\n        if abs(loss - losses[-2]) < tol:\n            break\n        W = np.linalg.inv(np.dot(W.T, W) + alpha * np.eye(W.shape[1])) @ (np.dot(W.T, X) + alpha * W)\n        H = np.linalg.inv(np.dot(H.T, H) + alpha * np.eye(H.shape[0])) @ (np.dot(H.T, WH) + alpha * H)\n    X_hat = np.dot(W, H)\n    X_hat_rounded = np.round(X_hat, 4).astype(int)\n    return X_hat_rounded.tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    (m, n) = X.shape\n    if K > m or K <= 0:\n        raise ValueError('K must be between 1 and m (inclusive)')\n    centroids = []\n    for _ in range(K):\n        idx = np.random.randint(m)\n        centroids.append(X[idx])\n    centroids.sort(key=lambda x: (x[0], x[1]))\n    for _ in range(max_iter):\n        assignments = np.zeros(m, dtype=int)\n        distances = np.zeros(m)\n        for (i, sample) in enumerate(X):\n            dists = np.sqrt(((sample - centroids) ** 2).sum(axis=1))\n            min_dist_idx = np.argmin(dists)\n            assignments[i] = min_dist_idx\n            distances[i] = dists[min_dist_idx]\n        new_centroids = []\n        for cluster in range(K):\n            cluster_samples = X[assignments == cluster]\n            if len(cluster_samples) == 0:\n                new_centroids.append(centroids[cluster])\n                continue\n            mean = np.mean(cluster_samples, axis=0)\n            new_centroids.append(mean)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [np.round(c, 4) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x[1]))\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts a raw text string into a fixed-length list of integer token ids.\n    \"\"\"\n    tokens = [vocabulary[char] for char in text]\n    if len(tokens) < time_steps:\n        tokens += [vocabulary['<pad>']] * (time_steps - len(tokens))\n    else:\n        tokens = tokens[:time_steps]\n    return tokens\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) are ignored during decoding.\n    \"\"\"\n    decoded = [inverse_vocab[id] for id in indices if id != 0]\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the raw text with string_to_int, calls model.predict, decodes the output with int_to_string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    predicted = model.predict(np.array([encoded]).T)\n    decoded = int_to_string(predicted.argmax(axis=1), inv_output_vocabulary)\n    return decoded"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    examples = examples or EXAMPLES\n    predictions = []\n    for example in examples:\n        output = model(example)\n        predictions.append(output)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"\n    Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    n = X.shape[1]\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    if w.ndim == 1:\n        w = w.reshape(-1, 1)\n\n    def safe_log(p):\n        return np.where(p < 1e-20, 1e-20, np.log(p))\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1.0)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = 1 / m * np.dot(X.T, p - y)\n    loss_rounded = round(loss, 4)\n    grad_rounded = round(grad, 4)\n    grad_list = grad_rounded.tolist()\n    return (loss_rounded, grad_list)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in X_test.\n    \"\"\"\n    if n_clf <= 0:\n        n_clf = 1\n    weights = np.ones_like(y_train) * (1.0 / len(y_train))\n    predictions = []\n    for t in range(n_clf):\n        current_weights = weights.copy()\n        class_counts = np.sum(current_weights * y_train)\n        majority_class = np.argmax(class_counts)\n        y_pred = np.array([majority_class] * len(y_train))\n        error = np.sum(current_weights * (y_pred != y_train)) / len(y_train)\n        alpha_t = 0.5 * np.log((1 - error) / error)\n        weights = current_weights * (1 - error) + (1 - current_weights) * error\n        predictions.append(y_pred)\n    final_votes = np.zeros_like(X_test)\n    for t in range(n_clf):\n        weight = weights[t]\n        pred = predictions[t]\n        final_votes += weight * pred\n    final_label = np.sign(final_votes)\n    return final_label.tolist()"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    n_classes = len(classes)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    mu_c = np.zeros(X.shape[1])\n    for cls in classes:\n        idx = y == cls\n        mean_cls = np.mean(X[idx], axis=0)\n        mu_c = np.vstack([mu_c, mean_cls])\n        S_W += np.dot(X[idx] - mean_cls, X[idx] - mean_cls.T)\n    mu_global = np.mean(X, axis=0)\n    N_c = np.array([len(idx) for idx in np.unique(y)])\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for cls in classes:\n        idx = y == cls\n        mean_cls = np.mean(X[idx], axis=0)\n        term = np.dot(mean_cls - mu_global, (mean_cls - mu_global).T)\n        S_B += np.dot(N_c[cls] * (mean_cls - mu_global), (mean_cls - mu_global).T)\n    if np.linalg.matrix_rank(S_W) < X.shape[1]:\n        A = np.linalg.pinv(S_W) @ S_B\n    else:\n        A = S_W @ np.linalg.inv(S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        if np.any(eigenvectors[:, i] != 0):\n            first_non_zero = np.where(eigenvectors[:, i] != 0)[0][0]\n            if eigenvectors[first_non_zero, i] < 0:\n                eigenvectors[:, i] *= -1\n    if n_components > X.shape[1]:\n        n_components = X.shape[1]\n    W = eigenvectors[:, :n_components]\n    projected_X = np.dot(X, W)\n    projected_X = np.round(projected_X, 4)\n    return projected_X.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    start_is_on_fire = grid[0][0] == 'F'\n    goal_is_on_fire = grid[n - 1][n - 1] == 'F'\n    if start_is_on_fire or goal_is_on_fire:\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque()\n    visited = [[False] * n for _ in range(n)]\n    queue.append((0, 0, 0))\n    visited[0][0] = True\n    while queue:\n        (row, col, time) = queue.popleft()\n        if row == n - 1 and col == n - 1:\n            return time\n        for (dr, dc) in directions:\n            (new_row, new_col) = (row + dr, col + dc)\n            if 0 <= new_row < n and 0 <= new_col < n:\n                is_fire = False\n                for (f_row, f_col) in [(r, c) for (r, c) in enumerate(grid) for c in grid[r] if grid[r][c] == 'F']:\n                    if f_row == new_row and f_col == new_col:\n                        is_fire = True\n                        break\n                if not is_fire and (not visited[new_row][new_col]):\n                    visited[new_row][new_col] = True\n                    queue.append((new_row, new_col, time + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implements the k-Nearest Neighbors classifier.\n    \n    Parameters:\n    - X_train: 2D NumPy array of shape (n_samples, n_features)\n    - y_train: 1D NumPy array of shape (n_samples,)\n    - X_test: 2D NumPy array of shape (n_test_samples, n_features)\n    - k: Number of nearest neighbors to consider\n    - metric: Distance metric to use ('euclidean', 'manhattan', 'cosine')\n    \n    Returns:\n    - Predicted labels as a 1D NumPy array\n    \"\"\"\n    if not isinstance(X_train, np.ndarray) or not isinstance(X_test, np.ndarray):\n        raise ValueError('X_train and X_test must be NumPy arrays')\n    if X_train.ndim != 2 or X_test.ndim != 2:\n        raise ValueError('X_train and X_test must be 2D arrays')\n    if X_train.shape[1] != X_test.shape[1]:\n        raise ValueError('X_train and X_test must have the same number of features')\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    distances = []\n    for test_sample in X_test:\n        dists = np.sqrt(np.sum((test_sample - X_train) ** 2, axis=1))\n        distances.append(dists)\n    nearest_neighbors = []\n    for (i, dists) in enumerate(distances):\n        sorted_indices = np.argsort(dists)\n        nearest_neighbors.append(sorted_indices[:k])\n    predictions = []\n    for indices in nearest_neighbors:\n        neighbor_labels = y_train[indices]\n        counts = np.bincount(neighbor_labels)\n        predicted_label = np.argmax(counts)\n        if counts.max() > 1:\n            predicted_label = np.argmin(np.where(counts == counts.max(), indices, np.nan))\n        predictions.append(predicted_label)\n    return np.array(predictions)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if X.shape[1] != X_test.shape[1]:\n        raise ValueError('Features dimension mismatch between training and test sets.')\n    m_samples = X_test.shape[0]\n    n_features = X.shape[1]\n    distances = np.zeros((m_samples, X.shape[0]))\n    if metric == 'euclidean':\n        distances = np.sqrt(np.sum((X - X_test) ** 2, axis=1))\n    elif metric == 'manhattan':\n        distances = np.sum(np.abs(X - X_test), axis=1)\n    elif metric == 'cosine':\n        eps = 1e-12\n        norms = np.linalg.norm(X, axis=1)\n        norm_test = np.linalg.norm(X_test, axis=1)\n        dot_products = np.dot(X, X_test.T)\n        distances = 1 - dot_products / (norms * norm_test + eps)\n    else:\n        raise ValueError(f'Unsupported metric: {metric}')\n    sorted_indices = np.argsort(distances)\n    k_neighbors = sorted_indices[:k] if k < len(sorted_indices) else sorted_indices\n    labels = y[k_neighbors]\n    label_counts = np.bincount(labels)\n    predicted_labels = np.argmax(label_counts)\n    return list(predicted_labels)"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state_array = np.array(state)\n    hidden1 = weights['W1'].shape[1]\n    output1 = np.dot(state_array, weights['W1']) + weights['b1']\n    hidden1_activation = np.maximum(output1, 0.0)\n    hidden2 = weights['W2'].shape[1]\n    output2 = np.dot(hidden1_activation, weights['W2']) + weights['b2']\n    hidden2_activation = np.maximum(output2, 0.0)\n    output3 = np.dot(hidden2_activation, weights['W3']) + weights['b3']\n    action = np.tanh(output3)\n    return np.round(action, 4).tolist()"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights_list, bias_float) where `weights_list` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((X, np.ones((m, 1))))\n        n += 1\n    weights = np.zeros(n)\n    intercept = 0.0\n    if fit_intercept:\n        intercept = np.mean(y - np.dot(X, weights))\n    for _ in range(max_iters):\n        for j in range(n):\n            if j == n - 1:\n                continue\n            r_j = y - np.dot(X[:, j], weights)\n            a = np.dot(X[:, j], r_j)\n            tau = lambda_param * m\n            if abs(a) > tau:\n                w_j = np.sign(a) * (abs(a) - tau)\n            else:\n                w_j = 0.0\n            weights[j] = w_j / np.sum(X[:, j] ** 2)\n    if fit_intercept:\n        intercept = np.mean(y - np.dot(X, weights))\n    return [[round(w, 4) for w in weights], round(intercept, 4)]"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not (isinstance(x, (list, np.ndarray)) and isinstance(y, (list, np.ndarray))):\n        raise ValueError('Input must be a list or a NumPy array')\n    if x.ndim != 1 or y.ndim != 1 or x.shape != y.shape:\n        return -1\n    x_np = np.array(x, dtype=np.int64)\n    y_np = np.array(y, dtype=np.int64)\n    hamming = np.sum(x_np != y_np) / len(x)\n    return round(hamming, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window == 'hamming':\n        w = [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'hann':\n        w = [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"For 'generalized_cosine', coefficients must be provided.\")\n        w = [coefficients[k] * np.cos(2 * np.pi * k / (N - 1)) for k in range(N)]\n    else:\n        raise ValueError('Unsupported window type.')\n    rounded_w = [round(val, 4) for val in w]\n    return rounded_w"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression classifier using mini-batch Gradient Descent\n    and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train_with_bias = np.hstack((np.ones((len(X_train), 1)), X_train))\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct numeric values.')\n    y_train_0_1 = [1 if label == unique_labels[1] else 0 for label in y_train]\n    num_samples = len(X_train)\n    num_features = X_train_with_bias.shape[1]\n    weights = np.zeros(num_features)\n    bias = 0.0\n    for epoch in range(epochs):\n        shuffled_indices = np.random.permutation(num_samples)\n        X_train_shuffled = X_train_with_bias[shuffled_indices]\n        y_train_shuffled = y_train_0_1[shuffled_indices]\n        for i in range(0, num_samples, batch_size):\n            batch_X = X_train_shuffled[i:i + batch_size]\n            batch_y = y_train_shuffled[i:i + batch_size]\n            z = np.dot(batch_X, weights) + bias\n            probabilities = 1 / (1 + np.exp(-z))\n            grad_weights = np.dot(batch_X.T, probabilities - batch_y) / batch_size\n            grad_bias = (probabilities - batch_y).sum() / batch_size\n            weights -= learning_rate * grad_weights\n            bias -= learning_rate * grad_bias\n    X_test_with_bias = np.hstack((np.ones((len(X_test), 1)), X_test))\n    predictions = np.dot(X_test_with_bias, weights) + bias\n    predictions = [1 if p > 0.5 else 0 for p in predictions]\n    original_labels = [unique_labels[0] if p == 0 else unique_labels[1] for p in predictions]\n    return original_labels"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and return predictions for test data.\n    \n    Parameters:\n        X_train: Training feature matrix (list of lists)\n        y_train: Training label vector (list of integers, 0 or 1)\n        X_test: Test feature matrix (list of lists)\n        n_estimators: Number of boosting rounds (default 10)\n        \n    Returns:\n        Predicted class labels for test data as a list of integers (0 or 1)\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    weights = np.ones_like(y_train_np) / len(y_train_np)\n    best_stumps = []\n    for round in range(n_estimators):\n        best_stump = train_decision_stump(X_train_np, y_train_np, weights)\n        error = np.sum(weights * (y_train_np != best_stump[2]))\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        weights = weights * np.exp(-alpha * y_train_np * best_stump[2])\n        weights /= np.sum(weights)\n        best_stumps.append(best_stump)\n        if error == 0:\n            break\n    predictions = []\n    for stump in best_stumps:\n        predicted_class = apply_stump(X_test_np, stump)\n        predictions.append(predicted_class)\n    return predictions\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, weights: np.ndarray) -> tuple:\n    \"\"\"\n    Train a decision stump (one-level decision tree) on the current data.\n    \n    Returns:\n        A tuple containing (feature_index, threshold, polarity)\n    \"\"\"\n    best_error = float('inf')\n    best_stump = None\n    for feature in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature]):\n            for polarity in [1, -1]:\n                predicted = (X[:, feature] > threshold) * polarity\n                error = np.sum(weights * (y != predicted))\n                if error < best_error or (error == best_error and feature < best_stump[0] or (feature == best_stump[0] and threshold < best_stump[1] or (threshold == best_stump[1] and polarity == 1))):\n                    best_error = error\n                    best_stump = (feature, threshold, polarity)\n    return best_stump\ndef apply_stump(X: np.ndarray, stump: tuple) -> np.ndarray:\n    \"\"\"\n    Apply a decision stump to the input data.\n    \n    Parameters:\n        X: Input data (array-like)\n        stump: (feature_index, threshold, polarity)\n    \n    Returns:\n        Predicted class labels (array of integers)\n    \"\"\"\n    (feature_idx, threshold, polarity) = stump\n    predictions = np.zeros_like(X)\n    for (i, x) in enumerate(X):\n        if x[feature_idx] > threshold:\n            predictions[i] = polarity\n        else:\n            predictions[i] = -polarity\n    return predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (n_dims > 0 and num_particles > 0 and (num_iterations > 0)):\n        return -1\n    rng = np.random.default_rng(seed)\n    particles = []\n    for _ in range(num_particles):\n        x = np.array([rng.uniform(-1, 1, n_dims)])\n        v = np.array([rng.uniform(-1, 1, n_dims)])\n        particles.append((x, v))\n    personal_best = [np.inf * np.ones(n_dims) for _ in range(num_particles)]\n    global_best = np.inf * np.ones(n_dims)\n\n    def sphere_function(x):\n        return np.sum(x ** 2)\n    for iteration in range(num_iterations):\n        for i in range(num_particles):\n            (x, v) = particles[i]\n            r1 = rng.uniform(0, 1)\n            r2 = rng.uniform(0, 1)\n            cognitive = c1 * r1 * (personal_best[i] - x)\n            social = c2 * r2 * (global_best - x)\n            v = w * v + cognitive + social\n            x = np.clip(x + v, -1, 1)\n            if sphere_function(x) < sphere_function(personal_best[i]):\n                personal_best[i] = x\n            if sphere_function(x) < sphere_function(global_best):\n                global_best = x\n    return round(sphere_function(global_best), 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    if k == 0:\n        k = len(X_train_np)\n    distances = []\n    for test_point in X_test_np:\n        dist = np.sqrt(np.sum((test_point - X_train_np) ** 2, axis=1))\n        distances.append(dist)\n    nearest_indices = np.argsort(distances)[:k]\n    if task == 'classification':\n        y_neighbors = y_train_np[nearest_indices]\n        counts = Counter(y_neighbors)\n        most_common = counts.most_common(1)[0][0]\n        return [most_common for _ in X_test_np]\n    else:\n        y_neighbors = y_train_np[nearest_indices]\n        mean_y = np.mean(y_neighbors)\n        return [round(mean_y, 4) for _ in X_test_np]"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"\n    Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(labels):\n        \"\"\"Compute Gini impurity of a class label vector.\"\"\"\n        (unique, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities ** 2)\n\n    def split_data(X, y, feature_idx, threshold):\n        \"\"\"Split data into left and right child based on threshold.\"\"\"\n        left = []\n        right = []\n        for (i, (x, y_val)) in enumerate(zip(X, y)):\n            if x < threshold:\n                left.append((x, y_val))\n            else:\n                right.append((x, y_val))\n        return (left, right)\n\n    def build_tree(X, y, depth=0, max_depth=None):\n        \"\"\"Build a decision tree recursively.\"\"\"\n        if (np.all(y == y[0]) or (max_depth is not None and depth >= max_depth)) or len(X) == 0:\n            return np.array([y[0]], dtype=int)\n        best_gain = -1\n        best_split = None\n        for feature_idx in range(X.shape[1]):\n            unique_vals = np.unique(X[:, feature_idx])\n            if len(unique_vals) == 1:\n                continue\n            for i in range(1, len(unique_vals)):\n                threshold = (unique_vals[i - 1] + unique_vals[i]) / 2\n                (left, right) = split_data(X, y, feature_idx, threshold)\n                parent_impurity = gini_impurity(y)\n                left_impurity = gini_impurity(left[1])\n                right_impurity = gini_impurity(right[1])\n                gain = parent_impurity - (left_impurity * len(left) + right_impurity * len(right)) / len(y)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_split = (feature_idx, threshold, left, right)\n        if best_gain <= 0:\n            return np.array([y[0]], dtype=int)\n        left_child = build_tree(np.array(left), y, depth + 1, max_depth)\n        right_child = build_tree(np.array(right), y, depth + 1, max_depth)\n        return np.array(([left_child[i], right_child[i]] for i in range(len(left_child))))\n    root = build_tree(X_train, y_train, depth=0, max_depth=max_depth)\n    predictions = []\n    for x in X_test:\n        path = [x]\n        current_node = root\n        while True:\n            (feature_idx, threshold, left, right) = current_node\n            if not left and (not right):\n                predictions.append(current_node[0])\n                break\n            if path[-1] < threshold:\n                current_node = left\n            else:\n                current_node = right\n            path.append(current_node)\n    return predictions"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(set(y))\n\n    def gini_impurity(y):\n        counts = np.bincount(y)\n        total = len(y)\n        return 1 - np.sum((count ** 2 / (total * total) for count in counts))\n    whole_gini = gini_impurity(y)\n    best_feature = -1\n    best_threshold = None\n    best_gini_val = whole_gini\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        for value in unique_values:\n            left_mask = X[:, feature_idx] <= value\n            right_mask = ~left_mask\n            if np.all(left_mask) or np.all(right_mask):\n                continue\n            left_class_counts = np.bincount(y[left_mask], minlength=n_classes)\n            right_class_counts = np.bincount(y[right_mask], minlength=n_classes)\n            left_gini = gini_impurity(left_class_counts)\n            right_gini = gini_impurity(right_class_counts)\n            total_samples = len(y)\n            left_weight = len(left_class_counts) / total_samples\n            right_weight = len(right_class_counts) / total_samples\n            split_gini = left_weight * left_gini + right_weight * right_gini\n            if split_gini < best_gini_val:\n                best_gini_val = split_gini\n                best_feature = feature_idx\n                best_threshold = value\n            elif split_gini == best_gini_val:\n                if feature_idx < best_feature:\n                    best_feature = feature_idx\n                    best_threshold = value\n                elif feature_idx == best_feature:\n                    if value < best_threshold:\n                        best_threshold = value\n    if best_feature == -1:\n        return (-1, None, round(whole_gini, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini_val, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def euclidean(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        if len(x) != len(y) or len(x) == 0 or len(y) == 0:\n            return -1\n        if not all((isinstance(v, (int, float)) for v in x)) or not all((isinstance(v, (int, float)) for v in y)):\n            return -1\n        squared_diffs = [(x_i - y_i) ** 2 for (x_i, y_i) in zip(x, y)]\n        return round(np.sqrt(np.sum(squared_diffs)), 4)\n\n    def manhattan(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        if len(x) != len(y) or len(x) == 0 or len(y) == 0:\n            return -1\n        if not all((isinstance(v, (int, float)) for v in x)) or not all((isinstance(v, (int, float)) for v in y)):\n            return -1\n        return round(np.sum(abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        if len(x) != len(y) or len(x) == 0 or len(y) == 0:\n            return -1\n        if not all((isinstance(v, (int, float)) for v in x)) or not all((isinstance(v, (int, float)) for v in y)):\n            return -1\n        return round(max((abs(x[i] - y[i]) for i in range(len(x)))), 4)\n\n    def cosine(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        if len(x) != len(y) or len(x) == 0 or len(y) == 0:\n            return -1\n        if not all((isinstance(v, (int, float)) for v in x)) or not all((isinstance(v, (int, float)) for v in y)):\n            return -1\n        if np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n            return -1\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        return round(1 - dot_product / (norm_x * norm_y), 4)\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        return -1\n    if name == 'euclidean':\n        return euclidean\n    elif name == 'manhattan':\n        return manhattan\n    elif name == 'chebyshev':\n        return chebyshev\n    elif name == 'cosine':\n        return cosine"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    is_discrete = not cont_action\n    is_multi_dim = md_action\n    if is_multi_dim:\n        action_spaces = env.action_space.spaces\n        n_actions_per_dim = [space.n for space in action_spaces]\n    else:\n        n_actions_per_dim = [env.action_space.n]\n    if cont_action:\n        n_actions_per_dim = [np.inf if dim != 0 else 0 for dim in n_actions_per_dim]\n        action_ids = None\n    else:\n        action_ids = None\n        if is_multi_dim:\n            action_dim = len(n_actions_per_dim)\n            action_ids = []\n            ranges = []\n            for i in range(action_dim):\n                if n_actions_per_dim[i] == np.inf:\n                    ranges.append(None)\n                else:\n                    ranges.append(range(n_actions_per_dim[i]))\n            action_ids = list(product(*ranges))\n        else:\n            action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"\n    Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n    \n    Parameters:\n    phi (list of np.ndarray): List of document-specific variational parameters.\n    corpus (list of lists): Tokenized corpus.\n    V (int): Vocabulary size.\n    \n    Returns:\n    list of lists: Updated \u03b2 matrix with column-normalized and rounded entries.\n    \"\"\"\n    beta = [[0.0 for _ in range(V)] for _ in range(T)]\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        N_d = doc_phi.shape[0]\n        T = doc_phi.shape[1]\n        for t in range(T):\n            total = 0.0\n            for n in range(N_d):\n                if corpus[d][n] != -1:\n                    total += doc_phi[n, t]\n            beta[t] = [beta[t][v] + doc_phi[n, t] for v in range(V)]\n            beta[t] = [x / sum(beta[t]) for x in beta[t]]\n    return [[round(x, 4) for x in row] for row in beta]"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    medoids = X[:k]\n\n    def compute_cost(medoids):\n        \"\"\"Compute the total cost of the current clustering.\"\"\"\n        cost = 0.0\n        for sample in X:\n            min_dist = float('inf')\n            closest_medoid = None\n            for m in medoids:\n                dist = np.linalg.norm(sample - m)\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_medoid = m\n            cost += min_dist\n        return cost\n\n    def swap_medoids(medoids, index, sample_idx):\n        \"\"\"Swap the medoid at `index` with the sample at `sample_idx`.\"\"\"\n        new_medoids = medoids.copy()\n        new_medoids[index] = X[sample_idx]\n        new_medoids[sample_idx] = medoids[index]\n        return new_medoids\n\n    def get_best_swap(medoids):\n        \"\"\"Find the best swap (i.e., the one that reduces the cost the most).\"\"\"\n        best_swap = None\n        best_cost_reduction = 0.0\n        for i in range(len(medoids)):\n            for j in range(len(X)):\n                if j == i:\n                    continue\n                new_medoids = swap_medoids(medoids, i, j)\n                current_cost = compute_cost(new_medoids)\n                cost_reduction = compute_cost(medoids) - current_cost\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (i, j)\n                    best_cost_reduction = cost_reduction\n        return best_swap\n    while True:\n        best_swap = get_best_swap(medoids)\n        if not best_swap:\n            break\n        (i, j) = best_swap\n        medoids = swap_medoids(medoids, i, j)\n    labels = [0] * n_samples\n    for (idx, sample) in enumerate(X):\n        min_dist = float('inf')\n        closest_medoid = None\n        for m in medoids:\n            dist = np.linalg.norm(sample - m)\n            if dist < min_dist:\n                min_dist = dist\n                closest_medoid = m\n        labels[idx] = medoids.index(closest_medoid)\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if not isinstance(x_train, (np.ndarray, list)) or not isinstance(y_train, (np.ndarray, list)):\n        return -1\n    if not isinstance(x_test, (np.ndarray, list)):\n        return -1\n    if n_iterations <= 0:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[0] != y_train.shape[0] or x_test.shape[0] != y_train.shape[0]:\n        return -1\n    x_train_with_bias = np.hstack((np.ones((x_train.shape[0], 1)), x_train))\n    degree = max(degree, 1)\n    if degree > 1:\n        num_features = x_train_with_bias.shape[1]\n        polynomial_features = np.zeros((x_train_with_bias.shape[0], num_features * (degree + 1)))\n        for i in range(num_features):\n            poly = np.polyfit(range(degree + 1), x_train_with_bias[:, i], degree)\n            poly_values = np.polyval(poly, range(degree + 1))\n            polynomial_features[:, i * (degree + 1):(i + 1) * (degree + 1)] = poly_values\n        x_train_with_bias = polynomial_features\n    x_train_with_bias = (x_train_with_bias - np.mean(x_train_with_bias, axis=0)) / np.std(x_train_with_bias, axis=0)\n    num_features = x_train_with_bias.shape[1]\n    weights = np.zeros((num_features, 1))\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_with_bias, weights)\n        gradient = np.dot(x_train_with_bias.T, predictions - y_train) / x_train_with_bias.shape[0]\n        l2_regularization = reg_factor * weights\n        l1_regularization = l1_ratio * np.sign(weights)\n        regularization = l2_regularization + l1_regularization\n        weights -= learning_rate * (gradient + regularization)\n    predictions_test = np.dot(x_test, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=np.int64)\n    predicted = np.array(predicted, dtype=np.float64)\n    sigmoid_prob = 1 / (1 + np.exp(-predicted))\n    grad = actual * np.where(actual < 0, -predicted, predicted) * sigmoid_prob\n    hess = sigmoid_prob * (1 - sigmoid_prob)\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(sigmoid_prob, 6)\n    return (grad_rounded.tolist(), hess_rounded.tolist(), prob_rounded.tolist())"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand):\n        score = sum(hand)\n        aces = sum((1 for card in hand if card == 1))\n        if aces > 0 and score + 10 <= 21:\n            score += 10\n        return score\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if player_score == 21 and len(player) == 2:\n        return 1.5\n    if dealer_score == 21 and len(dealer) == 2:\n        return -1\n    if player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Compute element-wise squared logarithmic errors.\n\n    Parameters:\n    actual (np.ndarray): Actual values (non-negative)\n    predicted (np.ndarray): Predicted values (non-negative)\n\n    Returns:\n    np.ndarray: Element-wise squared log errors\n    \"\"\"\n    if not (isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray))):\n        return -1\n    if actual.shape != predicted.shape:\n        return -1\n    if not np.all(np.isclose(actual, actual, atol=1e-10)):\n        return -1\n    if not np.all(np.geq(actual, 0)):\n        return -1\n    if not np.all(np.geq(predicted, 0)):\n        return -1\n    return np.square(np.log1p(actual) - np.log1p(predicted))\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters:\n    actual (list | tuple | np.ndarray): Sequence of true values.  All elements must be non-negative.\n    predicted (list | tuple | np.ndarray): Sequence of predicted values.  Must be the same length as\n                                          `actual` and contain only non-negative numbers.\n\n    Returns:\n    float: The MSLE rounded to 4 decimals.  If the inputs are invalid the\n          function returns -1.\n    \"\"\"\n    if not (isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray))):\n        return -1\n    if actual.shape != predicted.shape:\n        return -1\n    if not np.all(np.isclose(actual, actual, atol=1e-10)):\n        return -1\n    if not np.all(np.geq(actual, 0)):\n        return -1\n    if not np.all(np.geq(predicted, 0)):\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    return round(np.mean(squared_errors), 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.round(1 / (1 + np.exp(-z)), 4).tolist()\n    elif isinstance(z, list):\n        return [round(1 / (1 + np.exp(-x)), 4) for x in z]\n    else:\n        return round(1 / (1 + np.exp(-z)), 4)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        z = z.copy()\n    else:\n        z = np.array(z)\n    z[z < 0] = a * z[z < 0]\n    return z.tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test: 2-D numpy array of unseen samples to classify.\n        n_clf: Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_classes = 2\n    weights = np.ones(n_samples) * (1.0 / n_samples)\n    stumps = []\n    for _ in range(n_clf):\n        (best_error, best_feature, best_threshold, best_polarity) = find_best_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        stumps.append((best_feature, best_threshold, best_polarity))\n        weights = update_weights(weights, best_error, alpha, X_train, y_train)\n    predictions = predict_ensemble(X_test, stumps)\n    return predictions\ndef find_best_stump(X, y, weights):\n    \"\"\"Find the best stump (feature, threshold, polarity) that minimizes the weighted error.\"\"\"\n    best_error = 1.0\n    best_feature = -1\n    best_threshold = 0.0\n    best_polarity = 1\n    (n_samples, n_features) = X.shape\n    for feature in range(n_features):\n        for threshold in np.unique(X[:, feature]):\n            for polarity in [1, -1]:\n                mask = (X[:, feature] < threshold) * polarity\n                error = np.mean(y != mask)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return (best_error, best_feature, best_threshold, best_polarity)\ndef update_weights(weights, error, alpha, X, y):\n    \"\"\"Update the weights based on the classification error.\"\"\"\n    weights = weights * (1 - error)\n    weights = weights / np.sum(weights)\n    weights = weights * (1 + alpha * (1 - 2 * error))\n    return weights\ndef predict_ensemble(X, stumps):\n    \"\"\"Predict the class label for each sample using the ensemble of stumps.\"\"\"\n    predictions = []\n    for sample in X:\n        total = 0.0\n        for (feature, threshold, polarity) in stumps:\n            if sample[feature] < threshold:\n                total += polarity\n            else:\n                total -= polarity\n        predictions.append(1 if total > 0 else -1)\n    return predictions"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d = len(shape)\n    k = min(shape[0], reduce(lambda x, y: x * y, shape[1:]))\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n    (U, Sigma, Vt) = np.linalg.svd(A)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    flat = result.reshape(-1, 1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale ** 2 * np.eye(shape[0]), atol=1e-06), 'Orthogonality not satisfied'\n    else:\n        assert np.allclose(flat.T @ flat, scale ** 2 * np.eye(flat.shape[1]), atol=1e-06), 'Orthogonality not satisfied'\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state_array = np.array(state, dtype=np.float32)\n    z1 = np.maximum(0, np.dot(state_array, np.array([1.0, 1.0, 1.0, 1.0])) + np.array([0.0, 0.0, 0.0, 0.0]))\n    z2 = np.maximum(0, np.dot(z1, np.array([1.0, 1.0, 1.0, 1.0])) + np.array([0.0, 0.0, 0.0, 0.0]))\n    z3 = np.maximum(0, np.dot(z2, np.array([1.0, 1.0, 1.0, 1.0])) + np.array([0.0, 0.0, 0.0, 0.0]))\n    logits = np.dot(z3, np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])) + np.array([0.0, 0.0, 0.0, 0.0])\n    action_probs = np.exp(logits) / np.sum(np.exp(logits), axis=0)\n    state_value = np.dot(z3, np.array([1.0, 1.0, 1.0, 1.0])) + np.array([0.0])\n    action_probs_rounded = np.round(action_probs, 4)\n    state_value_rounded = np.round(state_value, 4)\n    return (action_probs_rounded.tolist(), state_value_rounded)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state_array = np.array(state, dtype=np.float32)\n    hidden1 = np.dot(state_array, params['W1']) + params['b1']\n    hidden1_relu = np.maximum(hidden1, 0)\n    hidden2 = np.dot(hidden1_relu, params['W2']) + params['b2']\n    hidden2_relu = np.maximum(hidden2, 0)\n    hidden3 = np.dot(hidden2_relu, params['W3']) + params['b3']\n    hidden3_relu = np.maximum(hidden3, 0)\n    actor_output = np.dot(hidden3_relu, params['Wa']) + params['ba']\n    probabilities = np.exp(actor_output) / np.sum(np.exp(actor_output), axis=0)\n    critic_output = np.dot(hidden3_relu, params['Wc']) + params['bc']\n    probabilities_rounded = np.round(probabilities, 4)\n    value_rounded = np.round(critic_output, 4)\n    return (probabilities_rounded.tolist(), value_rounded)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_array = np.array(w)\n    l2_norm_squared = np.sum(w_array ** 2)\n    l1_norm = np.sum(np.abs(w_array))\n    if not gradient:\n        penalty = alpha * (l1_ratio * np.sign(w_array) + (1 - l1_ratio) * w_array)\n        penalty += alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * l2_norm_squared)\n        return round(penalty, 4)\n    gradient_penalty = alpha * (l1_ratio * np.sign(w_array) + (1 - l1_ratio) * w_array)\n    gradient_penalty += alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * l2_norm_squared)\n    rounded_gradient = [round(g, 4) for g in gradient_penalty]\n    return rounded_gradient"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_key = param_name.lower()\n    if param_key in ['ba', 'bx']:\n        param_key = param_name\n    param = model.parameters[param_key]\n    grads = np.zeros_like(param)\n    params = deepcopy(model.parameters)\n    params[param_key] += epsilon\n    params[param_key] -= epsilon\n\n    def compute_loss(theta):\n        model.parameters[param_key] = theta\n        return loss_func(model.forward(X))\n    for i in range(n_t):\n        current_loss = compute_loss(param)\n        params[param_key] += epsilon\n        perturbed_loss_plus = compute_loss(params[param_key])\n        params[param_key] -= epsilon\n        perturbed_loss_minus = compute_loss(params[param_key])\n        numer_diff = (perturbed_loss_plus - perturbed_loss_minus) / (2 * epsilon)\n        grads[i] = numer_diff\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in X_test.\n    \"\"\"\n    weights = np.ones_like(y_train) * (1.0 / y_train.size)\n    stumps = []\n    for t in range(n_clf):\n        if n_clf == 0:\n            break\n        (best_error, best_idx) = find_best_stump(X_train, y_train, weights)\n        epsilon = best_error\n        alpha_t = 0.5 * np.log((1 - epsilon) / epsilon)\n        weights = update_weights(weights, y_train, alpha_t, best_idx)\n        stumps.append(best_idx)\n    predictions = []\n    for x in X_test:\n        total_vote = 0.0\n        for (i, idx) in enumerate(stumps):\n            prediction = 1 if np.sign(np.dot(x, X_train[idx]) + 1) >= 0 else -1\n            total_vote += alpha_t[i] * prediction\n        if total_vote > 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions\ndef find_best_stump(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray) -> float:\n    \"\"\"\n    Find the best stump (decision tree) that minimizes the weighted error.\n    For simplicity, we use a simple decision tree with a single feature and threshold.\n    \"\"\"\n    best_error = 1.0\n    best_idx = 0\n    for feature in range(X_train.shape[1]):\n        for threshold in np.unique(X_train[feature]):\n            split_data = np.split(X_train, [feature], axis=1)\n            split_labels = np.split(y_train, [feature], axis=1)\n            classifier = lambda x: np.sign(np.dot(x, split_data[feature]) + 1)\n            error = np.sum(weights * (classifier(x) != split_labels[0])) / np.sum(weights)\n            if error < best_error:\n                best_error = error\n                best_idx = (feature, threshold)\n    return best_error\ndef update_weights(weights: np.ndarray, y_train: np.ndarray, alpha_t: float, best_idx: int) -> np.ndarray:\n    \"\"\"\n    Update the weights based on the error of the current stump.\n    \"\"\"\n    (feature, threshold) = best_idx\n    predicted_label = np.sign(np.dot(X_train[feature], X_train[feature]) + 1)\n    error = np.sum(weights * (predicted_label != y_train)) / np.sum(weights)\n    weights = weights * (1 - error) / error\n    return weights"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    fan_in = 1\n    fan_out = 1\n    if len(shape) == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        receptive_field_size = 1\n        for i in range(2, len(shape)):\n            receptive_field_size *= shape[i]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"\n    Convert an undirected graph given by (V, E) to an adjacency list.\n    \n    Parameters:\n    V (List[Any]): List of unique vertex identifiers in the order they appear.\n    E (List[Tuple[Any, Any]]): List of undirected edges connecting vertices u and v.\n    \n    Returns:\n    List[List[Any]]: Adjacency list where each inner list contains neighbors of a vertex,\n                     sorted by their appearance in V, with no duplicates.\n    \"\"\"\n    adj = {}\n    for (u, v) in E:\n        if u not in adj:\n            adj[u] = []\n        if v not in adj:\n            adj[v] = []\n        adj[u].append(v)\n        adj[v].append(u)\n    result = []\n    for vertex in V:\n        result.append(adj[vertex])\n    return result"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump for a binary classification task.\n    \n    Parameters:\n    X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n    y (np.ndarray): Binary label vector with values -1 or 1\n    sample_weights (np.ndarray): Non-negative weight for every sample\n    \n    Returns:\n    dict: Dictionary with best stump parameters\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_unique_values = np.unique(X).shape[0]\n    best_error = float('inf')\n    best_feature = -1\n    best_threshold = 0.0\n    best_polarity = 1\n    best_error_value = 0.0\n    for feature_idx in range(n_features):\n        for threshold_val in np.unique(X[:, feature_idx]):\n            class_1 = (y == 1).sum()\n            class_neg = (y == -1).sum()\n            count_1 = 0\n            for i in range(n_samples):\n                if (X[i, feature_idx] < threshold_val) != (y[i] == 1):\n                    count_1 += sample_weights[i]\n            count_neg = 0\n            for i in range(n_samples):\n                if (X[i, feature_idx] < threshold_val) != (y[i] == -1):\n                    count_neg += sample_weights[i]\n            error_1 = count_1 / sample_weights.sum() if sample_weights.sum() != 0 else 0\n            error_neg = count_neg / sample_weights.sum() if sample_weights.sum() != 0 else 0\n            if error_1 < error_neg:\n                current_error = error_1\n                polarity = 1\n            else:\n                current_error = error_neg\n                polarity = -1\n            if current_error < best_error:\n                best_error = current_error\n                best_feature = feature_idx\n                best_threshold = threshold_val\n                best_polarity = polarity\n                best_error_value = current_error\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_error_value, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    if np.allclose(feature, feature[0]):\n        return (None, 0.0)\n    if np.allclose(target, target[0]):\n        return (None, 0.0)\n    unique_sorted = np.sort(np.unique(feature))\n    thresholds = [unique_sorted[i] + (unique_sorted[i + 1] - unique_sorted[i]) / 2 for i in range(len(unique_sorted) - 1)]\n    max_info_gain = -1.0\n    best_threshold = None\n    best_gain = 0.0\n    for t in thresholds:\n        left = feature[feature < t]\n        right = feature[feature >= t]\n        n = len(feature)\n        n_left = len(left)\n        n_right = len(right)\n        parent_entropy = entropy(target)\n        left_entropy = entropy(left)\n        right_entropy = entropy(right)\n        info_gain = parent_entropy - n_left / n * left_entropy - n_right / n * right_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = t\n            best_gain = info_gain\n        elif info_gain == max_info_gain:\n            if t < best_threshold:\n                best_threshold = t\n                best_gain = info_gain\n    threshold = round(best_threshold, 4)\n    information_gain = round(best_gain, 4)\n    return (threshold, information_gain)\ndef entropy(labels):\n    \"\"\"Compute Shannon entropy of a list of class labels.\"\"\"\n    count = Counter(labels)\n    total = len(labels)\n    entropy = 0.0\n    for cnt in count.values():\n        prob = cnt / total\n        entropy += -prob * math.log2(prob)\n    return entropy"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals():\n        if isinstance(globals()[name], Callable):\n            return globals()[name]\n        else:\n            raise ValueError('Invalid initialization function.')\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Perform 2D average pooling forward and backward passes.\n    \n    Args:\n        X: Input 4-D NumPy array (N, C, H, W)\n        pool_shape: Tuple (p_h, p_w) - size of the pooling window\n        stride: Tuple (s_h, s_w) - step size for sliding the window\n        accum_grad: Gradient of loss with respect to pooled output\n        \n    Returns:\n        A tuple of two lists:\n        - Pooled output (rounded to 4 decimal places)\n        - Gradient input (rounded to 4 decimal places)\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (ph, pw) = pool_shape\n    (sh, sw) = stride\n    out_h = (H - ph) // sh + 1\n    out_w = (W - pw) // sw + 1\n    pooled_output = np.zeros((N, C, out_h, out_w), dtype=np.float32)\n    for c in range(C):\n        for i in range(out_h):\n            for j in range(out_w):\n                top_left_h = i * sh\n                top_left_w = j * sw\n                window = X[:, c, top_left_h:top_left_h + ph, top_left_w:top_left_w + pw]\n                avg = np.mean(window, axis=(0, 1))\n                pooled_output[:, c, i, j] = avg\n    pooled_output = np.round(pooled_output, 4)\n    pooled_output = pooled_output.tolist()\n    grad_input = np.zeros_like(X, dtype=np.float32)\n    for c in range(C):\n        for i in range(out_h):\n            for j in range(out_w):\n                top_left_h = i * sh\n                top_left_w = j * sw\n                window = X[:, c, top_left_h:top_left_h + ph, top_left_w:top_left_w + pw]\n                grad_window = np.zeros_like(window, dtype=np.float32)\n                grad_window[:] = accum_grad[:, c, i, j]\n                grad_input[:, c, top_left_h:top_left_h + ph, top_left_w:top_left_w + pw] += grad_window / window.size\n    grad_input = np.round(grad_input, 4)\n    grad_input = grad_input.tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Leaf) or isinstance(tree_b, Leaf):\n        return False\n    if not (isinstance(tree_a, Node) and isinstance(tree_b, Node)):\n        return False\n    if abs(tree_a.feature - tree_b.feature) > 1e-08 or abs(tree_a.threshold - tree_b.threshold) > 1e-08:\n        return False\n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"\n    Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    if len(parent1) != len(parent2) or any((len(row1) != len(row2) for (row1, row2) in zip(parent1, parent2))):\n        return -1\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    num_cols = parent1_np.shape[1]\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    child1 = []\n    child2 = []\n    child1.extend(parent1_np[:, :cutoff].tolist())\n    child1.extend(parent2_np[:, cutoff:].tolist())\n    child2.extend(parent2_np[:, :cutoff].tolist())\n    child2.extend(parent1_np[:, cutoff:].tolist())\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"\n    Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters:\n    G (Dict[str, Any]): The custom graph dictionary with:\n        - 'is_directed' (bool)\n        - '_V2I' (dict mapping vertex label -> index)\n        - '_G' (list of adjacency lists, each edge is a tuple (source_label, target_label, weight))\n    \n    Returns:\n    Dict[Any, List[Tuple[Any, float]]]: A dictionary where each key is a vertex label and\n    the value is a list of (neighbour, weight) tuples. For undirected graphs,\n    every edge appears once in each direction. Neighbour lists are sorted\n    lexicographically.\n    \"\"\"\n    is_directed = G['is_directed']\n    _V2I = G['_V2I']\n    _G = G['_G']\n    vertex_labels = list(_V2I.keys())\n    adj = {}\n    for u in vertex_labels:\n        adj[u] = []\n    for (i, edges) in enumerate(_G):\n        u = list(_V2I.keys())[i]\n        for edge in edges:\n            (source, target, weight) = edge\n            if is_directed:\n                if target not in adj:\n                    adj[target] = []\n                adj[target].append((source, weight))\n            else:\n                if source not in adj:\n                    adj[source] = []\n                adj[source].append((target, weight))\n    for u in vertex_labels:\n        if adj[u]:\n            adj[u].sort()\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    return np.all(np.invert(np.isnan(x)) & (x == 0 | x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N == 1:\n        token_counts = Counter()\n        for sentence in corpus:\n            tokens = sentence.split()\n            token_counts.update(tokens)\n        tokens = query.split()\n        total_tokens = len(tokens)\n        if total_tokens < N:\n            return float('-inf')\n        log_prob_sum = 0.0\n        for i in range(total_tokens - N + 1):\n            word = tokens[i + N - 1]\n            if word not in token_counts:\n                return float('-inf')\n            prob = token_counts[word] / len(token_counts)\n            log_prob_sum += math.log(prob)\n        return round(log_prob_sum, 4)\n    else:\n        padded_query = []\n        for word in query.split():\n            padded_query.append(word)\n            padded_query.append('<eol>')\n        padded_query = ['<bol>'] + padded_query\n        ngram_counts = defaultdict(int)\n        prefix_counts = defaultdict(int)\n        for sentence in corpus:\n            tokens = sentence.split()\n            padded_tokens = ['<bol>'] + tokens + ['<eol>']\n            for i in range(len(padded_tokens) - N + 1):\n                ngram = padded_tokens[i:i + N]\n                ngram_counts[tuple(ngram)] += 1\n                prefix = padded_tokens[i:i + N - 1]\n                prefix_counts[tuple(prefix)] += 1\n        if len(padded_query) < N:\n            return float('-inf')\n        log_prob_sum = 0.0\n        for i in range(len(padded_query) - N + 1):\n            ngram = padded_query[i:i + N]\n            prefix = padded_query[i:i + N - 1]\n            if tuple(ngram) not in ngram_counts or tuple(prefix) not in prefix_counts:\n                return float('-inf')\n            prob = ngram_counts[tuple(ngram)] / prefix_counts[tuple(prefix)]\n            log_prob_sum += math.log(prob)\n        return round(log_prob_sum, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, d) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i == j:\n                continue\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + dist)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples)\n    for _ in range(100):\n        distances = np.sqrt(np.sum((E - X[:, np.newaxis]) ** 2, axis=1))\n        labels = np.argmin(distances, axis=1)\n        empty_clusters = np.any(labels == -1)\n        if empty_clusters:\n            empty_indices = np.where(labels == -1)[0]\n            centroids[empty_indices] = E[empty_indices].copy()\n        new_centroids = np.mean(E[labels], axis=0)\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(ix - 1, 0)\n    prev_params = params[prev_ix]\n    curr_params = params[ix]\n    (prev_mine, prev_label) = prev_params\n    (curr_mine, curr_label) = curr_params\n    debug_str = []\n    debug_str.append('------------------------- DEBUG -------------------------')\n    debug_str.append(f\"{' ' * (25 - len('------------------------- DEBUG -------------------------'))}\")\n    debug_str.append(f'Mine (prev) [{prev_label}]:')\n    debug_str.append(f'{prev_mine}')\n    debug_str.append(f'Theirs (prev) [{prev_label}]:')\n    debug_str.append(f'{golds[prev_label]}')\n    debug_str.append(f'Mine [{curr_label}]:')\n    debug_str.append(f'{curr_mine}')\n    debug_str.append(f'Theirs [{curr_label}]:')\n    debug_str.append(f'{golds[curr_label]}{warn_str}')\n    debug_str.append('----------------------- END DEBUG -----------------------')\n    debug_str.append(f\"{' ' * (23 - len('----------------------- END DEBUG -----------------------'))}\")\n    return '\\n'.join(debug_str)"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu: float=0.0, V: float | list | tuple | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in Bayesian linear regression with an unknown variance.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to 4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):\n        V = np.diag(V * np.eye(X.shape[1]))\n    elif isinstance(V, (list, tuple)) and len(V) == X.shape[1]:\n        V = np.diag(V)\n    else:\n        raise ValueError('V must be None, a scalar, or a 1-D sequence of length M.')\n    if isinstance(mu, (float, int)):\n        mu = np.array([mu] * X.shape[1])\n    else:\n        mu = np.array(mu)\n    V_inv = np.linalg.inv(V)\n    posterior_mean = np.dot(np.dot(V_inv, X.T), y) + np.dot(V_inv, X.T) @ np.dot(V_inv, X.T).T\n    return [round(float(val), 4) for val in posterior_mean]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"\n    Build a Mel filterbank transformation matrix.\n    \n    Parameters:\n        N: DFT length\n        n_filters: Number of Mel filters\n        fs: Sampling frequency\n        min_freq: Minimum frequency to consider\n        max_freq: Maximum frequency to consider (default is Nyquist)\n        normalize: Whether to normalize the filter weights\n    \n    Returns:\n        A list of lists representing the Mel filterbank matrix\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    n_bands = n_filters + 2\n    mel_scales = np.linspace(mel_min, mel_max, n_bands)\n    f_left = 700 * (10 ** (mel_scales[0] / 2595) - 1)\n    f_right = 700 * (10 ** (mel_scales[-1] / 2595) - 1)\n    filter_weights = []\n    for k in range(N // 2 + 1):\n        f_center = k * fs / N\n        band_index = int(np.searchsorted(mel_scales, f_center))\n        if band_index < 0 or band_index >= n_bands:\n            continue\n        f1 = 700 * (10 ** (mel_scales[band_index - 1] / 2595) - 1)\n        f2 = 700 * (10 ** (mel_scales[band_index] / 2595) - 1)\n        slope_left = (f_center - f1) / (f2 - f1)\n        slope_right = (f2 - f_center) / (f2 - f1)\n        slope = np.minimum(slope_left, slope_right)\n        if normalize:\n            area = f2 - f1\n            slope *= 2 / area\n        filter_weights.append(slope)\n    return [[round(w, 4) for w in row] for row in filter_weights]"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len + 1\n        bh = [a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N) for n in range(N)]\n        bh = bh[:-1]\n    else:\n        N = window_len\n        bh = [a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N) for n in range(N)]\n    bh = [round(val, 4) for val in bh]\n    return bh"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    if t < 0 or t >= len(gamma_d):\n        return 0.0\n    total = sum(gamma_d)\n\n    def digamma(x):\n        if x <= 0:\n            return 0.0\n        x = max(x, 6)\n        if x > 6:\n            psi_x = math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n        else:\n            psi_x = 0.0\n            for i in range(1, x + 1):\n                psi_x += 1 / i - 1 / (i * (i + 1))\n        return psi_x\n    psi_gamma = digamma(gamma_d[t])\n    psi_total = digamma(total)\n    return round(psi_gamma - psi_total, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    prev = params[max(ix - 1, 0)]\n    curr = params[ix]\n    header = '------------------------- DEBUG -------------------------\\n'\n    header += '------------------------- DEBUG -------------------------\\n'\n    prev_block = f'Mine (prev) [{prev[1]}]:\\n{prev[0]}\\n\\nTheirs (prev) [{prev[1]}]:\\n{golds[prev[1]]}\\n\\n'\n    curr_block = f'Mine [{curr[1]}]:\\n{curr[0]}\\n\\nTheirs [{curr[1]}]:\\n{golds[curr[1]]}{warn_str}\\n'\n    result = header + prev_block + curr_block\n    result += '\\n'\n    footer = '----------------------- END DEBUG -----------------------\\n'\n    return result + footer"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"\n    Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) * (1.0 / n_samples)\n    alphas = []\n    best_splits = []\n    for m in range(n_estimators):\n        best_error = float('inf')\n        best_feature = -1\n        best_threshold = 0.0\n        best_polarity = 1\n        for j in range(n_features):\n            for t in np.unique(np.sort(X_train[:, j])):\n                X_sorted = X_train[np.argsort(X_train[:, j]), :]\n                y_sorted = y_train[np.argsort(X_train[:, j])]\n                y1 = y_sorted[X_sorted[:, j] > t]\n                y2 = y_sorted[X_sorted[:, j] <= t]\n                error = len(y1) / len(y_sorted) if y1 else 0.0\n                error += len(y2) / len(y_sorted) if y2 else 0.0\n                weight = (1 - error) / (error + (1 - error))\n                if error < best_error:\n                    best_error = error\n                    best_feature = j\n                    best_threshold = t\n                    best_polarity = 1 if y1[0] == 1 else -1\n        best_splits.append((best_feature, best_threshold, best_polarity))\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        y_pred = np.array([best_polarity * np.sign(X_train[:, best_feature] - best_threshold) for _ in range(n_samples)])\n        weighted_error = np.sum(weights * (y_pred != y_train)) / n_samples\n        weights = weights * (1 - weighted_error) / (weighted_error + (1 - weighted_error))\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for m in range(n_estimators):\n            (feature, threshold, polarity) = best_splits[m]\n            sign = polarity * np.sign(x[feature] - threshold)\n            total += alphas[m] * sign\n        if total > 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    freqs = []\n    delta_f = fs / N\n    for k in range(N):\n        if positive_only:\n            freq = k * delta_f\n            freqs.append(round(freq, 4))\n        else:\n            freq = k * delta_f\n            freqs.append(round(freq, 4))\n            neg_freq = -k * delta_f\n            freqs.append(round(neg_freq, 4))\n    return freqs.tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to the nearest 4th decimal place, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    has_oob = np.any(oob_mask, axis=1)\n    oob_errors = []\n    for i in range(len(has_oob)):\n        if has_oob[i]:\n            oob_preds = predictions[i, oob_mask[i, :]]\n            avg_pred = np.mean(oob_preds)\n            error = (avg_pred - y_true[i]) ** 2\n            oob_errors.append(error)\n    if len(oob_errors) == 0:\n        return -1.0\n    else:\n        return round(np.mean(oob_errors), 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"\n    Constructs an FP-Tree from a list of transactions using nested dictionaries.\n\n    Parameters:\n    - transactions: list of lists, where each sublist is a transaction.\n    - min_support: minimum support threshold for items to be included in the FP-Tree.\n\n    Returns:\n    - A dictionary representing the root node of the FP-Tree.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    frequent_items = [item for (item, count) in item_counts.items() if count >= min_support]\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        unique_transaction = list(set(transaction))\n        filtered_transaction = [item for item in unique_transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: (-item_counts[x], x))\n        current_node = root\n        for item in filtered_transaction:\n            if item in current_node['children']:\n                current_node['children'][item]['support'] += 1\n            else:\n                current_node['children'][item] = {'support': 1, 'children': {}}\n                current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if Y is None:\n        Y = X\n    if X is not None and Y is not None:\n        if len(X[0]) != len(Y[0]):\n            return -1\n    X_np = np.array(X)\n    Y_np = np.array(Y)\n    if X_np.shape[0] == 0 or Y_np.shape[0] == 0:\n        return []\n    K = np.dot(X_np, Y_np.T) + c0\n    K_rounded = np.round(K, 4)\n    return [list(row) for row in K_rounded]"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    if np.allclose(grad, 0):\n        return [param, m, v]\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    update = lr * m_hat / np.sqrt(v_hat + eps)\n    param -= update\n    return [np.round(param, 8), np.round(m_new, 8), np.round(v_new, 8)]"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Compute the updated mean and variance for CEM.\n\n    Parameters:\n    theta_samples (np.ndarray): 2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards (list or np.ndarray): Sequence of length N with the return obtained by each sample.\n    retain_prcnt (float): Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns:\n    tuple[list, list]: Two Python lists containing the per-dimension mean and variance of the retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    if not isinstance(rewards, np.ndarray):\n        rewards = np.array(rewards)\n    num_samples = theta_samples.shape[0]\n    retain_num = int(retain_prcnt * num_samples)\n    sorted_indices = np.argsort(-rewards)\n    retained_samples = theta_samples[sorted_indices[:retain_num]]\n    mean = np.mean(retained_samples, axis=0)\n    variance = np.var(retained_samples, axis=0)\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    n = len(labels)\n    entropy_value = 0.0\n    for p in label_counts.values():\n        if p == 0:\n            continue\n        prob = p / n\n        entropy_value += -prob * math.log2(prob)\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad: str or tuple or int, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if X.ndim != 4:\n        raise ValueError('X must be a 4D array')\n    if W.ndim != 4:\n        raise ValueError('W must be a 4D array')\n    n_ex = X.shape[0]\n    (in_rows, in_cols, in_ch) = (X.shape[1], X.shape[2], X.shape[3])\n    (kernel_rows, kernel_cols, in_ch, out_ch) = W.shape\n    if pad == 'same':\n        pad_row = max(0, (in_rows - 1) // 2 - (kernel_rows - 1) // 2)\n        pad_col = max(0, (in_cols - 1) // 2 - (kernel_cols - 1) // 2)\n        pad = (pad_row, pad_col)\n    elif isinstance(pad, int):\n        pad = (pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n        pad = (pr, pc)\n    else:\n        raise ValueError('Invalid padding specification')\n    out_rows = int((in_rows + 2 * pad[0] + stride - 1) // stride)\n    out_cols = int((in_cols + 2 * pad[1] + stride - 1) // stride)\n    out_ch = out_ch\n    if in_ch != W.shape[2]:\n        raise ValueError('Input channels do not match kernel channels')\n    X_pad = np.pad(X, ((0, 0), (pad[0], pad[0]), (pad[1], pad[1]), (0, 0)), mode='constant')\n    im2col = []\n    for ch in range(in_ch):\n        feat = X_pad[:, :, :, ch]\n        rows = feat.shape[0]\n        cols = feat.shape[1]\n        elements_per_row = kernel_rows * kernel_cols\n        num_rows = rows + 2 * pad[0] - stride * (out_rows - 1)\n        num_cols = cols + 2 * pad[1] - stride * (out_cols - 1)\n        im2col.append(feat.reshape(rows, cols, elements_per_row).transpose(2, 0, 1))\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for ex in range(n_ex):\n        for ch in range(out_ch):\n            weight = W[:, :, ch, ch]\n            im2col_ch = im2col[ch]\n            im2col_reshaped = im2col_ch.reshape(im2col_ch.shape[0], im2col_ch.shape[1], im2col_ch.shape[2])\n            weight_reshaped = weight.reshape(weight.shape[0], weight.shape[1], weight.shape[2], weight.shape[3])\n            output_ex = np.zeros((im2col_reshaped.shape[1] * im2col_reshaped.shape[2], out_ch))\n            output_ex = np.dot(im2col_reshaped, weight_reshaped.T).flatten()\n            output[ex, :, :, ch] = output_ex\n    return output.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    if solver == 'svd':\n        (u, s, v_t) = np.linalg.svd(data_centered, full_matrices=False)\n        principal_components = v_t[:, :n_components]\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        eigh_result = np.linalg.eigh(cov_matrix)\n        (eigenvalues, eigenvectors) = eigh_result\n        principal_components = eigenvectors[:, :n_components]\n    else:\n        raise ValueError(\"Unsupported solver: must be 'svd' or 'eigen'\")\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    principal_components = principal_components[sorted_indices][:n_components]\n    for col in range(n_components):\n        first_non_zero = np.where(np.abs(principal_components[:, col]) > 1e-12)[0][0]\n        if principal_components[first_non_zero, col] < 0:\n            principal_components[:, col] *= -1\n    scores = np.dot(data_centered, principal_components)\n    rounded_scores = np.round(scores, 4)\n    rounded_explained_variance = np.round(np.diag(eigenvalues)[:n_components], 4)\n    return (rounded_scores.tolist(), rounded_explained_variance.tolist())"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        if isinstance(leaf.value, list) and len(leaf.value) > 0:\n            max_prob = max(leaf.value)\n            class_index = leaf.value.index(max_prob)\n            return class_index\n        else:\n            return leaf.value\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('Input data must be a 2D array.')\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        assignments = np.argmin(np.sqrt(np.sum((data - centroids[:, np.newaxis]) ** 2, axis=1)), axis=0)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(K):\n            cluster_data = data[assignments == i]\n            if len(cluster_data) > 0:\n                new_centroids[i] = np.mean(cluster_data, axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.sort(centroids, axis=0)\n    centroids = np.round(centroids, 4).tolist()\n    return centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"\n    Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    if isinstance(data, list):\n        data_array = np.array(data, dtype=np.float64)\n    else:\n        data_array = data\n    row_sums = np.sum(data_array, axis=1)\n    for sum_row in row_sums:\n        if sum_row == 0:\n            return [-1]\n    normalized_data = data_array / row_sums[:, np.newaxis]\n    rounded_data = np.round(normalized_data, 4)\n    return rounded_data.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = False\n    if tuple_action:\n        is_continuous_action = all((isinstance(space, Box) for space in env.action_space.spaces))\n        cont_action = is_continuous_action\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    cont_obs = False\n    if tuple_obs:\n        is_continuous_obs = all((isinstance(space, Box) for space in env.observation_space.spaces))\n        cont_obs = is_continuous_obs\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"\n    Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in reversed(updates):\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        softmax = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(softmax, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: str or tuple or int, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between X and W.\n    \n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n    \n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if pad == 'same':\n        out_length = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_length - 1) * stride + kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    else:\n        (p_left, p_right) = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output = []\n    for example in range(n_examples):\n        x = X_padded[example, :, :]\n        output_example = np.zeros((signal_length + p_left + p_right, out_channels))\n        for i in range(signal_length):\n            effective_kernel = kernel_width + (dilation - 1) * (i - 0)\n            start = i - (effective_kernel - 1) * dilation\n            if start < 0:\n                start = 0\n            if start + kernel_width > signal_length:\n                start = signal_length - kernel_width\n            output_pos = i + (start + dilation - 1) * stride\n            output_value = np.sum(x[start:start + kernel_width] * W[:, :, out_channels])\n            output_example[output_pos] = output_value\n        output.append(output_example.tolist())\n    return output"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y_array = np.array(y)\n    C = len(np.unique(y_array))\n    N = len(y_array)\n    freq = np.bincount(y_array, minlength=C)\n    gini_impurity = 1.0 - np.sum(freq ** 2 / (N * N))\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n    \n    Parameters:\n        X (np.ndarray): Feature matrix with shape (m, n)\n        y (np.ndarray): Target vector with shape (m,)\n        learning_rate (float): Learning rate for gradient descent\n        n_iterations (int): Number of iterations to perform gradient descent\n        \n    Returns:\n        tuple[list[float], float]: A tuple containing the weights list and the bias.\n            - The weights are rounded to 4 decimal places.\n            - The bias is also rounded to 4 decimal places.\n            \n    Raises:\n        ValueError: If the number of samples in X and y are different.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('Number of samples in X and y must be the same.')\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    weights_list = np.round(theta, 4).tolist()\n    bias = np.round(b, 4)\n    return (weights_list, bias)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if len(X) != len(X[0]):\n        return False\n    X_np = np.array(X)\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for logistic loss in Gradient Boosting.\n    \n    Parameters:\n        y (list): Binary class labels (0 or 1)\n        f (list): Current prediction scores\n    \n    Returns:\n        list: List of negative gradients rounded to four decimal places\n    \"\"\"\n    if not all((label in {0, 1} for label in y)):\n        return [-1] * len(y)\n    y_prime = [2 * label - 1 for label in y]\n    g = [y_prime[i] / (1 + np.exp(y_prime[i] * f[i])) for i in range(len(y))]\n    return [round(g_i, 4) for g_i in g]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if order == 0:\n\n        def elu(x, alpha):\n            return x if x > 0 else alpha * (np.exp(x) - 1)\n        return scale * elu(x, alpha)\n    elif order == 1:\n\n        def d_selu_dx(x, alpha, scale):\n            return scale * (1 if x > 0 else alpha * np.exp(x))\n        return d_selu_dx(x, alpha, scale)\n    elif order == 2:\n\n        def d2_selu_dx2(x, alpha, scale):\n            return scale * (0 if x > 0 else alpha * np.exp(x) * np.exp(x))\n        return d2_selu_dx2(x, alpha, scale)\n    else:\n        raise ValueError('order must be 0, 1, or 2')"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.mean(y)\n    predictions = [y_pred]\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        y_sorted = y[sorted_indices]\n        splits = []\n        for i in range(1, len(x_sorted)):\n            split_point = (x_sorted[i] + x_sorted[i - 1]) / 2\n            splits.append(split_point)\n        min_error = float('inf')\n        best_split = None\n        best_left_mean = 0.0\n        best_right_mean = 0.0\n        for split in splits:\n            left = x_sorted[:i]\n            right = x_sorted[i:]\n            left_residuals = residuals[sorted_indices[:i]]\n            right_residuals = residuals[sorted_indices[i:]]\n            left_mean = np.mean(left_residuals)\n            right_mean = np.mean(right_residuals)\n            current_error = left_mean ** 2 + right_mean ** 2\n            if current_error < min_error:\n                min_error = current_error\n                best_split = split\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            best_left_mean = best_right_mean = np.mean(residuals)\n        y_pred += learning_rate * (best_left_mean if x <= best_split else best_right_mean)\n        predictions.append(y_pred)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    denominator = np.sqrt(Eg + 1e-08)\n    w_next = w - learning_rate * grad / denominator\n    w_next_rounded = np.round(w_next, 4)\n    Eg_rounded = np.round(Eg, 4)\n    w_list = w_next_rounded.tolist()\n    Eg_list = Eg_rounded.tolist()\n    return (w_list, Eg_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_array = np.array(x)\n    if not derivative:\n        elu_values = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n        return np.round(elu_values, 4).tolist()\n    else:\n        gradient_values = np.where(x_array >= 0, 1, elu_values + alpha)\n        return np.round(gradient_values, 4).tolist()"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_integer(x):\n        return isinstance(x, (int, float)) and x.is_integer()\n    tuple_actions = any((isinstance(action, (list, tuple, np.ndarray)) for action in actions))\n    tuple_observations = any((isinstance(observation, (list, tuple, np.ndarray)) for observation in observations))\n    multidim_actions = len(set((len(action) for action in actions))) < 2\n    multidim_observations = len(set((len(observation) for observation in observations))) < 2\n    flattened_actions = [item for sublist in actions for item in sublist]\n    flattened_observations = [item for sublist in observations for item in sublist]\n    continuous_actions = any((not is_integer(val) for val in flattened_actions))\n    continuous_observations = any((not is_integer(val) for val in flattened_observations))\n    n_actions_per_dim = []\n    n_obs_per_dim = []\n    action_ids = []\n    obs_ids = []\n    action_dim = 0\n    for action in actions:\n        if len(action) > 1:\n            action_dim += 1\n            unique_values = set(action)\n            n_actions_per_dim.append(len(unique_values))\n            action_ids.append(sorted(unique_values))\n        else:\n            action_dim += 1\n            unique_values = set([action])\n            n_actions_per_dim.append(len(unique_values))\n            action_ids.append([action])\n    obs_dim = 0\n    for obs in observations:\n        if len(obs) > 1:\n            obs_dim += 1\n            unique_values = set(obs)\n            n_obs_per_dim.append(len(unique_values))\n            obs_ids.append(sorted(unique_values))\n        else:\n            obs_dim += 1\n            unique_values = set([obs])\n            n_obs_per_dim.append(len(unique_values))\n            obs_ids.append([obs])\n    result = {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\n    return result"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    initial_pred = np.mean(y_train)\n    predictions = [initial_pred]\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions[-1]\n        tree = fit_regression_tree(X_train, residuals, max_depth)\n        trees.append(tree)\n        predictions.append(predictions[-1] + learning_rate * tree.predict(X_train))\n    test_predictions = [round(pred, 4) for pred in predictions[-1] + learning_rate * trees[-1].predict(X_test)]\n    return test_predictions\ndef fit_regression_tree(X: np.ndarray, y: np.ndarray, max_depth: int) -> 'Tree':\n    \"\"\"\n    Fit a CART regression tree to a dataset.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features)\n    y : np.ndarray\n        1-D array of length n_samples\n    max_depth : int\n        Maximum depth of the tree\n\n    Returns\n    -------\n    Tree\n        A fitted CART regression tree\n    \"\"\"\n    if X.shape[0] <= 1 or max_depth == 0:\n        return np.array([np.mean(y)])\n    best_split = None\n    best_error = float('inf')\n    best_left = None\n    best_right = None\n    for i in range(X.shape[1]):\n        for j in range(i + 1, X.shape[1]):\n            for split_val in np.linspace(X[:, i].min(), X[:, i].max(), 100):\n                left = X[X[:, i] <= split_val, :]\n                right = X[X[:, i] > split_val, :]\n                left_error = np.mean((y[left] - np.mean(y[left])) ** 2)\n                right_error = np.mean((y[right] - np.mean(y[right])) ** 2)\n                total_error = left_error + right_error\n                if total_error < best_error:\n                    best_error = total_error\n                    best_split = (i, j, split_val)\n                    best_left = left\n                    best_right = right\n    if best_split is None:\n        return np.array([np.mean(y)])\n    tree = {'split': best_split, 'left': best_left, 'right': best_right, 'left_child': fit_regression_tree(best_left, y[best_left], max_depth - 1), 'right_child': fit_regression_tree(best_right, y[best_right], max_depth - 1)}\n    return tree"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the multivariate Gaussian PDF for each sample in X.\n    \n    Parameters:\n        X (np.ndarray): Input data points, shape (n_samples, n_features)\n        mean (np.ndarray): Mean vector, shape (n_features,)\n        cov (np.ndarray): Covariance matrix, shape (n_features, n_features)\n        \n    Returns:\n        list: List of PDF values rounded to 4 decimal places\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    log_det = np.sum(np.log(np.diag(cov)))\n    quadratic_form = np.sum((X - mean) @ np.linalg.inv(cov) @ (X - mean).T)\n    pdf = np.exp(-0.5 * quadratic_form) / np.sqrt((2 * np.pi) ** n_features * np.linalg.det(cov))\n    return [round(pdf[i], 4) for i in range(n_samples)]"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Bayesian linear regression with MAP prediction.\n    \n    Parameters:\n        X: Training data (N x M)\n        y: Target values (N x 1)\n        X_new: New data (N_new x M)\n        mu: Prior mean (scalar or vector of length M+1 if intercept is fitted)\n        sigma: Observation variance (ignored in MAP)\n        V: Prior covariance matrix (scalar, 1D array, or full matrix)\n        fit_intercept: Whether to add an intercept column to X and X_new\n    \n    Returns:\n        List of predicted values rounded to 4 decimal places\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if V is None:\n        V = np.eye(X.shape[1])\n    if X.shape[1] == 1:\n        mu_p = np.dot(np.linalg.inv(V), mu)\n    else:\n        mu_p = np.dot(np.linalg.inv(V + X.T @ X), np.dot(X.T, y) + np.dot(np.linalg.inv(V), mu))\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for (a, p) in zip(actual, predicted):\n        if p < 0 or a < 0:\n            return -1\n    n = len(actual)\n    log_plus_actual = np.log(1 + actual)\n    log_plus_predicted = np.log(1 + predicted)\n    squared_diff = np.square(log_plus_predicted - log_plus_actual)\n    mean_squared_diff = np.mean(squared_diff)\n    rmsle = np.sqrt(mean_squared_diff)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        h = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        h = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        h = h[:-1]\n    h_rounded = np.round(h, 4)\n    return h_rounded.tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    shape_list = list(shape)\n    if len(shape_list) == 4:\n        in_channels = shape_list[1]\n        kernel_height = shape_list[2]\n        kernel_width = shape_list[3]\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = shape_list[0] * receptive_field_size\n    else:\n        fan_in = shape_list[0]\n        fan_out = shape_list[1]\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [np.mean(y_np) * 10000]\n    y_pred = np.mean(y_np) * 10000\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        X_with_intercept = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ (X_with_intercept.T @ residuals)\n        h = X_with_intercept @ beta\n        y_pred += learning_rate * h\n    return np.round(y_pred, 4).astype(int) / 10000"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n    if isinstance(x, (float, int)):\n        if order == 0:\n            return round(1 / (1 + np.exp(-x)), 4)\n        elif order == 1:\n            return round(1 / (1 + np.exp(-x)) * (1 - 1 / (1 + np.exp(-x))), 4)"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If None, inferred from max(y) + 1.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or -1 when num_classes is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = y.max() + 1\n    if num_classes < y.max() + 1:\n        return -1\n    one_hot = np.zeros((y.shape[0], num_classes))\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    transactions_set = set((tuple(transaction) for transaction in transactions))\n    one_itemsets = []\n    for item in transactions_set:\n        count = sum((1 for transaction in transactions if item in transaction))\n        if count / len(transactions) >= min_sup:\n            one_itemsets.append((item,))\n    two_itemsets = []\n    for (item1, item2) in itertools.combinations(one_itemsets, 2):\n        candidate = (item1, item2)\n        if is_subset_frequent(candidate, one_itemsets):\n            two_itemsets.append(candidate)\n    two_itemset_support = {}\n    for candidate in two_itemsets:\n        support = sum((1 for transaction in transactions if candidate in transaction))\n        two_itemset_support[candidate] = support\n    frequent_two_itemsets = [(item1, item2) for ((item1, item2), support) in two_itemset_support.items() if support / len(transactions) >= min_sup]\n    while True:\n        current_itemset_size = len(frequent_two_itemsets)\n        if current_itemset_size == 0:\n            break\n        next_itemsets = []\n        for itemset in frequent_two_itemsets:\n            for item in transactions_set:\n                if item not in itemset:\n                    new_itemset = itemset + (item,)\n                    if is_subset_frequent(new_itemset, frequent_two_itemsets):\n                        next_itemsets.append(new_itemset)\n        new_itemsets = [itemset for itemset in next_itemsets if itemset not in frequent_two_itemsets]\n        if not new_itemsets:\n            break\n        frequent_two_itemsets = [itemset for itemset in frequent_two_itemsets if itemset not in new_itemsets]\n        frequent_two_itemsets.extend(new_itemsets)\n    frequent_itemsets = sorted(frequent_two_itemsets, key=lambda x: (len(x), x))\n    return frequent_itemsets\ndef is_subset_frequent(candidate: tuple, frequent_itemsets: list) -> bool:\n    \"\"\"Check if a candidate itemset is frequent based on its subsets.\"\"\"\n    for itemset in itertools.combinations(candidate, 1):\n        if itemset not in frequent_itemsets:\n            return False\n    return True"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    averaged_probabilities = []\n    for sample in predictions:\n        avg_probs = np.mean(sample, axis=0)\n        averaged_probabilities.append(avg_probs.tolist())\n    rounded_probabilities = [[round(prob, 4) for prob in row] for row in averaged_probabilities]\n    predicted_classes = []\n    for probs in rounded_probabilities:\n        max_index = np.argmax(probs)\n        predicted_classes.append(max_index)\n    return (rounded_probabilities, predicted_classes)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the Radial Basis Function (RBF) kernel matrix.\n\n    Args:\n        X: List of N-dimensional vectors (shape N\u00d7C)\n        Y: List of M-dimensional vectors (shape M\u00d7C), optional\n        sigma: Scale parameter, can be a single float or a list of floats.\n\n    Returns:\n        Nested list of floats with rounded values (4 decimal places).\n        -1 if any input is invalid.\n\n    Raises:\n        ValueError: If X or Y are not lists of lists, or if feature dimensions do not match.\n    \"\"\"\n    if not all((isinstance(row, list) for row in X)):\n        return -1\n    if Y is not None and (not all((isinstance(row, list) for row in Y))):\n        return -1\n    if len(X[0]) != len(Y[0]) if Y is not None else len(X[0]) != len(X[0]):\n        return -1\n    if sigma is None:\n        sigma = [np.sqrt(C / 2) for C in (len(X[0]) if X is not None else len(X[0]))]\n    elif not isinstance(sigma, (float, list)):\n        return -1\n    if isinstance(sigma, list) and len(sigma) != len(X[0]):\n        return -1\n    if isinstance(sigma, float) and sigma <= 0:\n        return -1\n    num_features = len(X[0]) if X is not None else 0\n    if Y is None:\n        N = len(X)\n        M = N\n    else:\n        N = len(X)\n        M = len(Y)\n    if num_features != len(X[0]) if X is not None else len(Y[0]) if Y is not None else 0:\n        return -1\n    kernel_matrix = []\n    for i in range(N):\n        row = []\n        for j in range(M):\n            x = X[i]\n            y = Y[j] if Y is not None else X[i]\n            dist_sq = sum(((x[k] - y[k]) ** 2 for k in range(num_features)))\n            if sigma is None:\n                scale = np.sqrt(num_features / 2)\n            else:\n                scale = sigma\n            kernel = np.exp(-0.5 * dist_sq / scale ** 2)\n            row.append(round(kernel, 4))\n        kernel_matrix.append(row)\n    return kernel_matrix"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    (n_samples, n_features) = X_np.shape\n    majority_label = Counter(y_np).most_common(1)[0][0]\n    best_gain = -1.0\n    best_feature = -1\n    best_threshold = None\n    left_majority_label = majority_label\n    right_majority_label = majority_label\n    for j in range(n_features):\n        unique_values = np.unique(X_np[:, j])\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        for t in thresholds:\n            left = X_np[X_np[:, j] <= t]\n            right = X_np[X_np[:, j] > t]\n            parent_entropy = entropy(y_np)\n            p_left = len(left) / n_samples\n            p_right = len(right) / n_samples\n            left_entropy = entropy(left)\n            right_entropy = entropy(right)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = t\n                left_majority_label = get_majority_label(left)\n                right_majority_label = get_majority_label(right)\n            elif gain == best_gain:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                    left_majority_label = get_majority_label(left)\n                    right_majority_label = get_majority_label(right)\n                elif j == best_feature:\n                    if t < best_threshold:\n                        best_threshold = t\n                        left_majority_label = get_majority_label(left)\n                        right_majority_label = get_majority_label(right)\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    return (int(best_feature), round(best_threshold, 4), left_majority_label, right_majority_label)\ndef entropy(labels):\n    \"\"\"Compute Shannon entropy of a list of labels.\"\"\"\n    count = Counter(labels)\n    entropy = 0.0\n    for cnt in count.values():\n        prob = cnt / len(labels)\n        entropy += -prob * np.log2(prob)\n    return entropy\ndef get_majority_label(data):\n    \"\"\"Get the majority label of a subset of data.\"\"\"\n    return Counter(data).most_common(1)[0][0]"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"\n    Split the data set X into two subsets based on a feature and threshold.\n    \n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n    \n    Returns:\n        A list of length two. Each element is a Python list containing the samples\n        in the respective subset, converted to regular lists using ndarray.tolist().\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        if isinstance(threshold, float) or isinstance(threshold, int):\n            if sample[feature_i] >= threshold:\n                subset1.append(list(sample))\n            else:\n                subset2.append(list(sample))\n        elif sample[feature_i] == threshold:\n            subset1.append(list(sample))\n        else:\n            subset2.append(list(sample))\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if Q.shape[0] != Q_next.shape[0] or Q.shape[1] != len(actions):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q = Q.astype(np.float32)\n    Q_next = Q_next.astype(np.float32)\n    actions = np.array(actions, dtype=np.int64)\n    rewards = np.array(rewards, dtype=np.float32)\n    dones = np.array(dones, dtype=bool)\n    result = []\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q = Q[i].copy()\n        updated_Q[actions[i]] = target\n        rounded_Q = np.round(updated_Q, 4)\n        result.append(rounded_Q.tolist())\n    return result"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not all((label >= 0 for label in labels)):\n        return [-1]\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return [-1]\n    label_array = np.array(labels)\n    one_hot = np.zeros((label_array.shape[0], num_classes))\n    one_hot[label_array.astype(int)] = 1\n    return one_hot.tolist()"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(x)\n    x_np = np.array(x)\n    y_np = np.array(y)\n    current_pred = np.mean(y_np)\n    predictions = []\n    for _ in range(n_estimators):\n        residuals = y_np - current_pred\n        unique_x = np.unique(x_np)\n        best_split = None\n        best_sse = float('inf')\n        for t in unique_x[:-1]:\n            left = x_np[x_np <= t]\n            right = x_np[x_np > t]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            v_L = np.mean(residuals[left])\n            v_R = np.mean(residuals[right])\n            sse = v_L ** 2 + v_R ** 2\n            if sse < best_sse:\n                best_split = t\n                best_sse = sse\n        if best_split is None:\n            v = np.mean(residuals)\n            current_pred += learning_rate * v\n            predictions.append(current_pred)\n            continue\n        predicted_residuals = np.zeros_like(x_np)\n        predicted_residuals[x_np <= best_split] = v_L\n        predicted_residuals[x_np > best_split] = v_R\n        current_pred += learning_rate * predicted_residuals\n        predictions.append(current_pred)\n    return np.round(np.array(predictions), 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"\n    One step of Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters:\n    q_table (list[list[float]]): Current Q-table.\n    state (int): Current state index.\n    action (int): Action taken in the current state.\n    reward (float): Immediate reward received.\n    next_state (int | None): Next state or None if the episode ended.\n    epsilon (float): Exploration rate.\n    lr (float): Learning rate.\n    gamma (float): Discount factor.\n\n    Returns:\n    list[list[float]]: Updated Q-table with all entries rounded to 4 decimal places.\n    \"\"\"\n    target = reward\n    if next_state is not None:\n        num_actions = len(q_table[state])\n        next_q_values = [q_table[next_state][a] for a in range(num_actions)]\n        greedy_action = None\n        max_q = -np.inf\n        for a in range(num_actions):\n            if q_table[next_state][a] > max_q:\n                max_q = q_table[next_state][a]\n                greedy_action = a\n        if greedy_action is not None:\n            prob = 1.0 - epsilon + epsilon / num_actions\n            target = reward + gamma * q_table[next_state][greedy_action]\n        else:\n            prob = 1.0 / num_actions\n            target = reward + gamma * np.mean(next_q_values)\n    old_value = q_table[state][action]\n    delta = lr * (target - old_value)\n    q_table[state][action] += delta\n    return [[round(val, 4) for val in row] for row in q_table]"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    class_params = []\n    for i in range(m):\n        base_x = (i // 2 + 0.1) * 10\n        base_y = (i % 2 * interval + 0.1) * 10\n        x_range = (base_x, (base_x + 1.0) * 10)\n        x_values = np.random.uniform(x_range[0], x_range[1], n_train)\n        y_range = (i % 2 * interval + 0.1, (i % 2 * interval + 0.9) * 10)\n        y_values = np.random.uniform(y_range[0], y_range[1], n_train)\n        label = (i - 0.5) * 2\n        class_params.append({'x_values': x_values, 'y_values': y_values, 'label': label})\n    X = np.array([row['x_values'] for row in class_params])\n    Y = np.array([row['label'] for row in class_params])\n    split_ratio = n_train / (n_train + n_val)\n    X_train = X[:n_train]\n    X_val = X[n_train:]\n    Y_train = Y[:n_train]\n    Y_val = Y[n_train:]\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.round(Y_train, 4)\n    Y_val = np.round(Y_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    denominator = np.sqrt(v_hat + eps)\n    m_hat /= denominator\n    w_new = w - learning_rate * m_hat / denominator\n    return (w_new, m_hat, v_hat)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    estimates = [ev_prior] * N\n    pulls = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(0, N)\n        else:\n            chosen_arm = np.argmax(estimates)\n        reward = rewards[t][chosen_arm]\n        C = pulls[chosen_arm] + 1\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / C\n        pulls[chosen_arm] += 1\n    return [round(est, 4) for est in estimates]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_count = 0\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def find_neighbors(point, eps):\n        neighbors = []\n        for (i, other_point) in enumerate(data):\n            if i == point:\n                continue\n            if euclidean_distance(data[point], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def is_core_point(point):\n        return len(find_neighbors(point)) >= min_samples\n\n    def assign_clusters():\n        nonlocal cluster_count\n        for i in range(n_samples):\n            if labels[i] == -1 and is_core_point(i):\n                cluster_count += 1\n                cluster_label = cluster_count - 1\n                labels[i] = cluster_label\n                neighbors = find_neighbors(i, eps)\n                for j in neighbors:\n                    if labels[j] == -1:\n                        labels[j] = cluster_label\n        return labels\n    assign_clusters()\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(y) + 1 if y else 1\n    if not all((0 <= label < num_classes for label in y)):\n        raise ValueError('All labels must be non-negative and less than num_classes.')\n    y = np.array(y, dtype=int)\n    return np.eye(num_classes, dtype=int)[y]"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n    if max_depth == 0 or len(X_train) < 2:\n        return [np.nan] * len(X_test)\n    tree = build_regression_tree(X_train, y_train, max_depth)\n    predictions = predict_regression_tree(tree, X_test)\n    return predictions\ndef build_regression_tree(X: list[float | int], y: list[float | int], max_depth: int) -> dict:\n    \"\"\"Build a regression tree recursively.\"\"\"\n    if max_depth == 0 or len(X) < 2:\n        return {'value': np.mean(y)}\n    best_split = find_best_split(X, y)\n    (left_X, right_X, left_y, right_y) = split_data(X, y, best_split)\n    left_child = build_regression_tree(left_X, left_y, max_depth - 1)\n    right_child = build_regression_tree(right_X, right_y, max_depth - 1)\n    return {'left': left_child, 'right': right_child, 'split_point': best_split, 'value': None}\ndef find_best_split(X: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Find the best split point for a regression tree.\"\"\"\n    return np.median(X)\ndef split_data(X: list[float | int], y: list[float | int], split_point: float) -> tuple:\n    \"\"\"Split the data into left and right based on the split point.\"\"\"\n    X_sorted = sorted(X)\n    index = np.searchsorted(X_sorted, split_point)\n    left_X = X_sorted[:index]\n    right_X = X_sorted[index:]\n    left_y = y[np.searchsorted(X_sorted, split_point)]\n    right_y = y[index:]\n    return (left_X, right_X, left_y, right_y)\ndef predict_regression_tree(node: dict, X_test: list[float | int]) -> list[float]:\n    \"\"\"Predict using the built tree.\"\"\"\n    predictions = []\n\n    def traverse(node, x):\n        if node is None:\n            return []\n        if isinstance(node, dict):\n            predictions.append(node['value'])\n            return\n        left = traverse(node['left'], x)\n        right = traverse(node['right'], x)\n        predictions.extend(left + right)\n    traverse(node, X_test)\n    return predictions"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    if not x:\n        return []\n    n = len(x)\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = x[i]\n    return matrix"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"\n    Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_freq = Counter()\n    for transaction in transactions:\n        item_freq.update(transaction)\n    candidates = [item for (item, count) in item_freq.items() if count >= min_sup]\n    fp_tree = {}\n    header_table = defaultdict(list)\n    node_count = 0\n\n    def add_node(node, item):\n        nonlocal node_count\n        node['children'] = {}\n        node['count'] = 1\n        node['link'] = None\n        node['item'] = item\n        node_count += 1\n        header_table[item].append(node_count)\n        return node_count\n\n    def insert_transaction(transaction):\n        current = fp_tree\n        for item in transaction:\n            if item not in current:\n                current[item] = {'children': {}, 'count': 0, 'link': None}\n                add_node(current[item], item)\n            current = current[item]['children']\n            current['count'] += 1\n    for transaction in transactions:\n        insert_transaction(transaction)\n    result = []\n\n    def mine(freq_dict, node, prefix):\n        if not node['children']:\n            if node['count'] >= min_sup:\n                result.append(tuple(prefix))\n            return\n        header = header_table[node['item']]\n        for h in header:\n            current = node\n            for i in range(h, node_count):\n                current = current['children'][i]\n                mine(freq_dict, current, prefix + [current['item']])\n                current = current['parent']\n    mine(freq_dict, fp_tree, [])\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    result = []\n    for k in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), k):\n            monomial = [1.0] * n_features\n            for (i, idx) in enumerate(comb):\n                monomial[idx] = X[:, idx] ** (k - len(comb) + i)\n            result.append(monomial)\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y_array = np.array(y)\n    mean_y = np.mean(y_array)\n    mse = np.sum((y_array - mean_y) ** 2) / len(y_array)\n    return round(mse, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x)\n    if x_array.size == 1:\n        x_array = x_array.reshape((1,))\n    y = slope * x_array + intercept\n    grad = slope * np.ones_like(x_array)\n    grad2 = np.zeros_like(x_array)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    standardized_data = data.copy()\n    for col in range(n_features):\n        mean = np.mean(standardized_data[:, col])\n        std = np.std(standardized_data[:, col], ddof=1)\n        standardized_data[:, col] = (standardized_data[:, col] - mean) / std\n    cov_matrix = np.cov(standardized_data, rowvar=False, bias=True)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[sorted_indices]\n    max_abs_index = np.argmax(np.abs(eigenvectors_sorted[:, 0]))\n    eigenvectors_sorted[:, :] = eigenvectors_sorted[:, :][np.newaxis, :, :]\n    projected_data = np.dot(standardized_data, eigenvectors_sorted[:k])\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n    return projected_data_rounded"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    c = np.mean(y_train)\n    F = c\n    predictions = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        best_error = float('inf')\n        for i in range(len(X_train[0])):\n            for threshold in np.unique([x[i] for x in X_train]):\n                left_data = [y for (x, y) in zip(X_train, y_train) if x[i] <= threshold]\n                right_data = [y for (x, y) in zip(X_train, y_train) if x[i] > threshold]\n                left_error = np.sum((np.array(left_data) - np.array(left_data).mean()) ** 2)\n                right_error = np.sum((np.array(right_data) - np.array(right_data).mean()) ** 2)\n                total_error = left_error + right_error\n                if total_error < best_error:\n                    best_threshold = threshold\n                    best_left_value = np.mean(left_data)\n                    best_right_value = np.mean(right_data)\n                    best_error = total_error\n        left_prediction = best_left_value\n        right_prediction = best_right_value\n        F += learning_rate * (right_prediction - left_prediction)\n        predictions.extend([0 if x < best_threshold else 1 for x in X_test])\n    return predictions"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix rounded to 4 decimal places and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[1] != W.shape[1] or X.shape[0] == 0 or W.shape[0] == 0:\n        return []\n    n_visible = X.shape[1]\n    n_hidden = W.shape[1]\n    batch_size = X.shape[0]\n    W_updated = W.copy()\n    h_probs = np.zeros((batch_size, n_hidden))\n    for i in range(batch_size):\n        h_probs[i] = np.dot(X[i], W.T) + hbias\n        h_probs[i] = np.clip(h_probs[i], 0, 1)\n    for step in range(k):\n        v_probs = np.dot(h_probs, W) + vbias\n        v_probs = np.clip(v_probs, 0, 1)\n        h_probs_next = np.dot(v_probs, W.T) + hbias\n        h_probs_next = np.clip(h_probs_next, 0, 1)\n        h_probs = h_probs_next\n    pos_grad = np.dot(X.T, h_probs)\n    neg_grad = np.dot(v_probs.T, h_probs)\n    W_updated += learning_rate * (pos_grad - neg_grad) / batch_size\n    W_updated = np.round(W_updated, 4).astype(int)\n    return W_updated.tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    differences = np.abs(x - y)\n    max_diff = np.max(differences)\n    return round(max_diff, 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    reconstruction_loss = -np.mean(np.log(y_pred) * y + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + np.log(t_log_var) - t_mean ** 2 - t_log_var)\n    total_loss = reconstruction_loss + kl_divergence\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    return round(total_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    n_features = X_np.shape[1]\n    n_latent = V[0].shape[1] if V else 0\n    if not all((len(row) == n_features for row in V)):\n        raise ValueError('All rows in V must have the same length as the feature matrix X.')\n    V_np = np.array(V)\n    linear_part = w0 + np.dot(X_np, w)\n    pairwise_interactions = np.dot(X_np, V_np.T)\n    squared_interactions = np.square(pairwise_interactions)\n    squared_weights = np.square(np.dot(X_np, w))\n    interaction_term = (squared_interactions - squared_weights) / 2\n    predictions = linear_part + interaction_term\n    return [round(pred, 4) for pred in predictions.tolist()]"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        result = 1.0 / (1.0 + np.exp(-z))\n        return round(result, 4)\n    elif isinstance(z, (list, tuple)):\n        z_array = np.array(z)\n        result = 1.0 / (1.0 + np.exp(-z_array))\n        return result.tolist()\n    elif isinstance(z, np.ndarray):\n        result = 1.0 / (1.0 + np.exp(-z))\n        return result.round(4).tolist()\n    else:\n        raise ValueError('Input must be a scalar, list/tuple, or NumPy ndarray.')"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim > 1 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim > 1 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        result = function(actual, predicted)\n        return result\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    if isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    if isinstance(z, list):\n        return [np.round(item * (1 - item), 4) for item in z]\n    if not z:\n        return []\n    return [np.round(item * (1 - item), 4) for item in z]"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"\n    Generate a matrix of predictions for a 2-D linear classifier.\n    \n    Args:\n        X: The original data set as a list of [x\u2081, x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081, w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n        \n    Returns:\n        Nested Python list with shape (grid_n \u00d7 grid_n) containing only 1 and -1,\n        the predicted labels of the grid points.\n    \"\"\"\n    X_array = np.array(X)\n    (x1_min, x1_max) = (X_array[:, 0].min(), X_array[:, 0].max())\n    (x2_min, x2_max) = (X_array[:, 1].min(), X_array[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X_grid, Y_grid) = np.meshgrid(x1_plot, x2_plot)\n    prediction = W[0] * X_grid + W[1] * Y_grid + b >= 0\n    return prediction.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    n_classes = len(set(y_train))\n    class_priors = np.zeros(n_classes)\n    for c in range(n_classes):\n        class_priors[c] = np.sum(y_train == c) / len(y_train)\n    n_features = X_train.shape[1]\n    means = np.zeros((n_classes, n_features))\n    stds = np.zeros((n_classes, n_features))\n    for c in range(n_classes):\n        means[c] = np.mean(X_train[y_train == c], axis=0)\n        stds[c] = np.std(X_train[y_train == c], axis=0)\n    predictions = []\n    for x in X_test:\n        log_likelihood_0 = 0.0\n        log_likelihood_1 = 0.0\n        for i in range(n_features):\n            mu = means[0][i]\n            sigma = stds[0][i] + 1e-09\n            term = -(x[i] - mu) ** 2 / (2 * sigma ** 2)\n            log_likelihood_0 += term\n        for i in range(n_features):\n            mu = means[1][i]\n            sigma = stds[1][i] + 1e-09\n            term = -(x[i] - mu) ** 2 / (2 * sigma ** 2)\n            log_likelihood_1 += term\n        log_prob_0 = np.log(class_priors[0]) + log_likelihood_0\n        log_prob_1 = np.log(class_priors[1]) + log_likelihood_1\n        if log_prob_0 > log_prob_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost between model predictions and true labels.\n    \n    Parameters:\n    AL (np.ndarray): Model's predicted probabilities (shape: (m,))\n    Y (np.ndarray): True labels (shape: (m,))\n    \n    Returns:\n    float: The computed binary cross-entropy cost rounded to 4 decimal places.\n    \"\"\"\n    m = AL.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    if t < 0 or t >= len(observations):\n        return []\n    n_states = len(pi)\n    n_obs = len(observations)\n    alpha = np.zeros((n_states, n_obs))\n    alpha[:, 0] = pi * B[0][observations[0]]\n    beta = np.zeros((n_states, n_obs))\n    for i in range(n_states):\n        beta[i, -1] = 1.0\n    for time in range(1, t):\n        for state in range(n_states):\n            alpha[state, time] = alpha[state, time - 1] * A[state][observations[time]] * B[observations[time]][state]\n    for time in range(t, n_obs - 1):\n        for state in range(n_states):\n            beta[state, time] = beta[state, time + 1] * A[observations[time]][state]\n    gamma = np.zeros(n_states)\n    for state in range(n_states):\n        numerator = alpha[state, t] * beta[state, t]\n        denominator = np.sum(alpha[:, t] * beta[:, t])\n        gamma[state] = numerator / denominator\n    return [round(g, 4) for g in gamma]"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering of Applications with Noise (DBSCAN)\n    \n    Parameters:\n    data (np.ndarray): 2D array of shape (n_samples, n_features)\n    eps (float): Maximum distance between two points to be considered part of the same cluster\n    min_samples (int): Minimum number of points required to form a dense region (core point)\n    \n    Returns:\n    list[int]: Cluster labels for each sample. Noise points are labeled -1.\n    \"\"\"\n    data = data.copy()\n    (n_samples, n_features) = data.shape\n    labels = [-1] * n_samples\n    cluster_id = 0\n    neighborhood = {}\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distances[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    for i in range(n_samples):\n        neighborhood[i] = []\n        for j in range(n_samples):\n            if distances[i, j] <= eps:\n                neighborhood[i].append(j)\n    core_points = []\n    for i in range(n_samples):\n        if len(neighborhood[i]) >= min_samples:\n            core_points.append(i)\n    queue = deque()\n    visited = set()\n    for point in core_points:\n        if labels[point] == -1:\n            labels[point] = cluster_id\n            queue.append(point)\n            while queue:\n                current = queue.popleft()\n                visited.add(current)\n                for neighbor in neighborhood[current]:\n                    if labels[neighbor] == -1 and neighbor not in visited:\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n                        visited.add(neighbor)\n    for i in range(n_samples):\n        if labels[i] == -1:\n            labels[i] = -1\n    return [label + 1 if label != -1 else -1 for label in labels]"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Gaussian Mixture Model using EM algorithm.\n\n    Args:\n        data: 2-D NumPy array with N samples and D features.\n        k: Number of Gaussian components.\n        max_iter: Maximum number of iterations for the EM algorithm.\n        epsilon: Tolerance for convergence (change in mixture weights).\n\n    Returns:\n        List of integers representing the final cluster label for each sample.\n    \"\"\"\n    if k < 1 or k > data.shape[1]:\n        raise ValueError('k must be between 1 and the number of features (data.shape[1])')\n    (N, D) = data.shape\n    if N == 0:\n        return []\n    means = np.random.rand(k, D)\n    covariances = np.eye(D) * 1.0\n    weights = np.random.uniform(0, 1, k)\n    weights /= weights.sum()\n    component_indices = list(range(k))\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            log_likelihoods = []\n            for m in range(k):\n                mean = means[m]\n                cov = covariances[m]\n                diff = data[i] - mean"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"\n    Perform spectral clustering on the given dataset.\n    \n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n        \n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    (N, d) = data.shape\n    W = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            dist_sq = np.sum((data[i] - data[j]) ** 2)\n            W[i, j] = np.exp(-gamma * dist_sq)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    selected_eigenvectors = eigenvectors[:, :n_cluster]\n    selected_eigenvectors /= np.sqrt(np.sum(selected_eigenvectors ** 2, axis=1, keepdims=True))\n    centroids = selected_eigenvectors[:n_cluster].copy()\n    labels = np.zeros(N)\n    for _ in range(100):\n        distances = np.sqrt(np.sum((selected_eigenvectors - centroids) ** 2, axis=1, keepdims=True))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.mean(selected_eigenvectors[labels], axis=0)\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    cluster_labels = np.zeros(N)\n    for i in range(N):\n        cluster_labels[i] = labels[i]\n    cluster_labels = np.argsort(cluster_labels)\n    final_labels = np.zeros(N)\n    for i in range(N):\n        final_labels[cluster_labels[i]] = cluster_labels[i]\n    return final_labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta: Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for iter in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha, y_data[i] * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha, y_data)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        if root.y is not None:\n            return root.y\n        feature = features[root.label]\n        for child in root.child:\n            if child.x == feature:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if root.y is not None:\n            return root.y\n        feature = features[root.label]\n        if feature <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    else:\n        raise ValueError(\"Invalid task_type. Must be 'classification' or 'regression'.\")"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(set(y))\n\n    def entropy(labels):\n        \"\"\"Calculate entropy of a label distribution.\"\"\"\n        count = np.bincount(labels)\n        probabilities = count / count.sum()\n        return -np.sum(probabilities * np.log2(probabilities))\n\n    def info_gain(feature_index):\n        \"\"\"Calculate information gain for a given feature.\"\"\"\n        feature_values = X[:, feature_index]\n        total_entropy = entropy(y)\n        class_counts = np.unique(y, return_counts=True)[1]\n        conditional_entropy = 0.0\n        for (class_label, count) in zip(np.unique(y), class_counts):\n            prob = count / n_samples\n            conditional_entropy += prob * entropy([label for label in y if label == class_label])\n        info_gain_value = total_entropy - conditional_entropy\n        return info_gain_value\n    max_gain = -1.0\n    best_idx = 0\n    for idx in range(n_features):\n        current_gain = info_gain(idx)\n        if current_gain > max_gain:\n            max_gain = current_gain\n            best_idx = idx\n    return (best_idx, round(max_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    if epsilon >= 1 or epsilon <= 0:\n        return []\n    if sample_size >= data.shape[0]:\n        sample_size = data.shape[0]\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    outliers = []\n\n    def c(n):\n        if n == 1:\n            return 0.0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(subsample, depth=0):\n        if depth >= height_limit or len(subsample) <= 1:\n            return None\n        feature = np.random.randint(n_features)\n        min_val = np.min(data[subsample, feature])\n        max_val = np.max(data[subsample, feature])\n        threshold = np.random.uniform(min_val, max_val)\n        left_subsample = []\n        right_subsample = []\n        for idx in subsample:\n            if data[idx, feature] < threshold:\n                left_subsample.append(idx)\n            else:\n                right_subsample.append(idx)\n        left_tree = build_tree(left_subsample, depth + 1)\n        right_tree = build_tree(right_subsample, depth + 1)\n        return {'feature': feature, 'threshold': threshold, 'left': left_tree, 'right': right_tree, 'path_length': 0}\n    height_limit = math.ceil(math.log(sample_size, 2))\n    trees = []\n    for _ in range(n_trees):\n        subsample = np.random.choice(data.shape[0], size=sample_size, replace=False)\n        tree = build_tree(subsample)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        path_lengths = []\n        for tree in trees:\n            current = tree\n            path_length = 0\n            while current is not None:\n                if current['left'] is not None:\n                    current = current['left']\n                    path_length += 1\n                else:\n                    break\n            path_lengths.append(path_length)\n        avg_path_lengths[i] = np.mean(path_lengths)\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    anomaly_scores = 2 ** (-avg_path_lengths / phi)\n    sorted_scores = np.sort(anomaly_scores)\n    threshold = sorted_scores[ceil(len(sorted_scores) * epsilon)]\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    return outliers.tolist()"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Train a Maximum Entropy classifier using Generalized Iterative Scaling (GIS)\n    and predict labels for test data.\n    \n    Parameters:\n        X_train: Training data (n_samples, n_features)\n        y_train: Training labels (n_samples,)\n        X_test: Test data (n_test_samples, n_features)\n        epsilon: Convergence threshold for iterative updates\n        n_iter: Maximum number of iterations\n        \n    Returns:\n        Predicted labels for each test sample as a list of integers\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    feature_value_counts = defaultdict(lambda : defaultdict(int))\n    for idx in range(n_samples):\n        x = X_train[idx]\n        y = y_train[idx]\n        for feature_idx in range(n_features):\n            value = x[feature_idx]\n            feature_value_counts[feature_idx][value][y] += 1\n    w = np.zeros(n_features)\n    for _ in range(n_iter):\n        log_likelihoods = []\n        for feature_idx in range(n_features):\n            value = np.unique(X_train[:, feature_idx])[0]\n            for y in feature_value_counts[feature_idx][value]:\n                log_likelihood = w[feature_idx] * feature_value_counts[feature_idx][value][y] - np.log(np.sum(feature_value_counts[feature_idx][value][y]))\n                log_likelihoods.append(log_likelihood)\n        if not log_likelihoods:\n            continue\n        mean_log_likelihood = np.mean(log_likelihoods)\n        w += mean_log_likelihood * np.ones(n_features)\n        if np.allclose(w, w_prev, atol=epsilon):\n            break\n        w_prev = w.copy()\n    predicted_labels = []\n    for x in X_test:\n        prob = np.exp(np.dot(x, w)) / np.sum(np.exp(np.dot(x, w)))\n        predicted_labels.append(np.argmax(prob))\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter()\n    for (label, words) in data:\n        for word in words:\n            word_counts[word] += 1\n    distinct_words = word_counts.keys()\n    total_documents = len(data)\n    result_list = []\n    for (word, count) in word_counts.items():\n        ratio = count / total_documents\n        rounded_ratio = round(ratio, 4)\n        result_list.append((word, rounded_ratio))\n    result_list.sort(key=lambda x: -x[1])\n    if cut_off is None:\n        top_words = set(distinct_words)\n    elif cut_off > len(distinct_words):\n        top_words = set(distinct_words)\n    else:\n        top_words = set(sorted(result_list, key=lambda x: x[1], reverse=True)[:cut_off])\n    return (result_list, top_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    if X.shape[1] == 0:\n        w = [0.0]\n    else:\n        w = np.dot(X.T, alpha * y)\n    b = 1 / len(y) * np.sum(y - np.dot(w, X))\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distances[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    k_nearest_neighbors = []\n    k_distances = []\n    for i in range(n_samples):\n        dists = distances[i, :]\n        sorted_indices = np.argsort(dists)\n        k_nearest_indices = sorted_indices[-k:]\n        k_nearest_neighbors.append(k_nearest_indices)\n        k_distances.append(dists[sorted_indices[-k]])\n    reach_dist = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                reach_dist[i, j] = max(k_distances[i][j], distances[i, j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        neighbors = k_nearest_neighbors[i]\n        denominator = 0.0\n        for j in neighbors:\n            denominator += reach_dist[i, j]\n        if denominator == 0:\n            lrd[i] = 0.0\n        else:\n            lrd[i] = k / denominator\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        neighbors = k_nearest_neighbors[i]\n        numerator = 0.0\n        for j in neighbors:\n            numerator += lrd[j]\n        lof[i] = numerator / k / lrd[i]\n    lof_rounded = np.round(lof, 4)\n    outlier_indices = np.where(lof_rounded > epsilon)[0]\n    return (lof_rounded, outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X = []\n    y = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_min = base + 1\n        x_max = base + 9\n        y_min = base + 1\n        y_max = base + 9\n        for _ in range(n_train):\n            x = np.round(np.random.uniform(x_min, x_max), 4)\n            y = np.round(np.random.uniform(y_min, y_max), 4)\n            X.append([x, y])\n            y.append(c)\n        for _ in range(n_val):\n            x = np.round(np.random.uniform(x_min, x_max), 4)\n            y = np.round(np.random.uniform(y_min, y_max), 4)\n            X.append([x, y])\n            y.append(c)\n    X_train = np.array(X[:m * n_train], dtype=np.float32)\n    X_val = np.array(X[m * n_train:], dtype=np.float32)\n    y_train = np.array(y[:m * n_train], dtype=np.int64)\n    y_val = np.array(y[m * n_train:], dtype=np.int64)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Perform deterministic K-Means clustering on the given data.\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple (labels, centres) where:\n        - labels is a list of length m with the cluster index of each point.\n        - centres is a list of k inner lists, each with d floats, representing the rounded coordinates of a centre.\n    \"\"\"\n    if X.shape[1] == 0 or k > X.shape[0] or k <= 0:\n        raise ValueError('Invalid input parameters.')\n    centres = X[:k].copy()\n    centres = [list(center) for center in centres]\n    labels = [0] * X.shape[0]\n    for _ in range(max_iters):\n        distances = np.sqrt(np.sum((X[:, np.newaxis] - centres[np.newaxis, :]) ** 2, axis=1))\n        labels = np.argmin(distances, axis=1)\n        group_centroids = []\n        for label in np.unique(labels):\n            group = X[labels == label]\n            if len(group) > 0:\n                new_centroid = np.mean(group, axis=0)\n                group_centroids.append(new_centroid)\n            else:\n                group_centroids.append(centres[label])\n        centres = group_centroids\n        if np.allclose(centres, [np.mean(X[labels == i], axis=0) for i in range(k)]):\n            break\n    centres_rounded = [[round(c, 4) for c in centroid] for centroid in centres]\n    return (labels, centres_rounded)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = (X.shape[0], X.shape[1])\n    if m == 0 or iterations == 0 or learning_rate == 0:\n        return ([0.0] * n, 0.0)\n    weights = [0.0] * n\n    bias = 0.0\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n        gradients = []\n        for j in range(n):\n            grad_wj = -2 * X[:, j] @ residuals + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n            gradients.append(grad_wj)\n        grad_b = -2 * np.sum(residuals)\n        for j in range(n):\n            weights[j] -= learning_rate / m * gradients[j]\n        bias -= learning_rate / m * grad_b\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"\n    Perform a forward pass through a fully-connected ReLU neural network.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    n_layers = len(weights)\n    current_input = np.append(x, 1.0)\n    for layer in range(n_layers):\n        weight_matrix = weights[layer]\n        current_input = current_input.reshape(-1, 1) @ weight_matrix\n        if layer < n_layers - 1:\n            current_input = np.maximum(current_input, 0.0)\n    if n_layers == 1:\n        return round(current_input[0], 4)\n    else:\n        return [round(neuron, 4) for neuron in current_input.tolist()]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"K-Means Clustering - Compute Centroids Only\n    \n    Args:\n        X: 2-D NumPy array with shape (n_samples \u00d7 n_features)\n        k: Number of clusters\n        max_iters: Maximum number of iterations to run (default = 100)\n    \n    Returns:\n        List of centroids, sorted in ascending lexicographical order, rounded to 4 decimal places.\n    \"\"\"\n    if X.ndim != 2 or X.shape[1] != k:\n        raise ValueError('X must be a 2D array with shape (n_samples \u00d7 n_features), and k must be a positive integer.')\n    centroids = X[:k].copy()\n    for iteration in range(max_iters):\n        assignments = np.argmin(np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=1)), axis=0)\n        new_centroids = np.zeros_like(centroids)\n        cluster_counts = np.zeros(k)\n        for i in range(k):\n            cluster_samples = X[assignments == i]\n            if len(cluster_samples) > 0:\n                new_centroids[i] = cluster_samples.mean(axis=0)\n                cluster_counts[i] = len(cluster_samples)\n            else:\n                new_centroids[i] = centroids[i]\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    centroids = np.sort(centroids, axis=0)\n    centroids = np.round(centroids, 4).tolist()\n    return centroids"}
