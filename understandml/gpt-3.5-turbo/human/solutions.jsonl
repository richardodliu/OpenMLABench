{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum([row[i] * b[i] for i in range(len(b))])\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    try:\n        reshaped_matrix = np.array(a).reshape(new_shape).tolist()\n        return reshaped_matrix\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be either 'row' or 'column'.\")\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0])\n        means = []\n        for col in range(num_columns):\n            column_sum = sum((matrix[row][col] for row in range(len(matrix))))\n            means.append(column_sum / len(matrix))\n        return means\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    matrix_np = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(matrix_np)\n    eigenvalues_sorted = sorted(eigenvalues, reverse=True)\n    return eigenvalues_sorted"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    result = np.linalg.inv(T).dot(A).dot(S)\n    result = np.round(result, 4)\n    return result.tolist()\nA = [[1, 2], [3, 4]]\nT = [[2, 0], [0, 2]]\nS = [[1, 0], [0, 1]]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Input must be a 2x2 matrix.')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse_matrix = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    import numpy as np\n    data = np.array(vectors)\n    means = np.mean(data, axis=1)\n    centered_data = data - means[:, np.newaxis]\n    covariance_matrix = np.dot(centered_data, centered_data.T) / (data.shape[1] - 1)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b, dtype=np.float)\n    D = np.diag(np.diag(A))\n    LU = A - D\n    for _ in range(n):\n        x = np.round(np.linalg.inv(D).dot(b - LU.dot(x)), 4)\n    return x.tolist()\nA = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]])\nb = np.array([10, 10, 10])\nn = 10"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    A_T = A.T\n    A_T_A = np.dot(A_T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    singular_values = np.sqrt(np.abs(eigenvalues))\n    sorted_indices = np.argsort(singular_values)[::-1]\n    singular_values = singular_values[sorted_indices]\n    right_singular_vectors = eigenvectors[:, sorted_indices]\n    left_singular_vectors = np.zeros((2, 2))\n    for i in range(2):\n        left_singular_vectors[:, i] = np.dot(A, right_singular_vectors[:, i])\n        left_singular_vectors[:, i] /= np.linalg.norm(left_singular_vectors[:, i])\n    singular_values = np.round(singular_values, 4)\n    left_singular_vectors = np.round(left_singular_vectors, 4)\n    right_singular_vectors = np.round(right_singular_vectors, 4)\n    return (left_singular_vectors, singular_values, right_singular_vectors)\nA = np.array([[3, 2], [1, 4]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    if len(matrix) != 4 or len(matrix[0]) != 4:\n        raise ValueError('Input matrix must be a 4x4 matrix')\n    if len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    determinant = 0\n    for i in range(4):\n        sign = (-1) ** i\n        minor_matrix = [[matrix[j][k] for k in range(4) if k != i] for j in range(1, 4)]\n        determinant += sign * matrix[0][i] * determinant_3x3(minor_matrix)\n    return determinant\ndef determinant_3x3(matrix: list[list[int | float]]) -> float:\n    return matrix[0][0] * matrix[1][1] * matrix[2][2] + matrix[0][1] * matrix[1][2] * matrix[2][0] + matrix[0][2] * matrix[1][0] * matrix[2][1] - matrix[0][2] * matrix[1][1] * matrix[2][0] - matrix[0][0] * matrix[1][2] * matrix[2][1] - matrix[0][1] * matrix[1][0] * matrix[2][2]\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n    theta = np.round(theta, 4)\n    return theta.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    n = X.shape[1]\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        error = np.dot(X, theta) - y\n        gradient = np.dot(X.T, error) / m\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()\nX = np.array([[1, 2], [1, 3], [1, 4]])\ny = np.array([3, 4, 5])\nalpha = 0.01\niterations = 1000"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    normalized_data = (data - min_val) / (max_val - min_val)\n    return (standardized_data.round(4).tolist(), normalized_data.round(4).tolist())"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        clusters = [[] for _ in range(k)]\n        for point in points:\n            distances = np.linalg.norm(centroids - np.array(point), axis=1)\n            cluster_index = np.argmin(distances)\n            clusters[cluster_index].append(point)\n        new_centroids = []\n        for cluster in clusters:\n            if cluster:\n                new_centroid = np.mean(cluster, axis=0)\n                new_centroids.append(new_centroid)\n            else:\n                new_centroids.append(centroids[np.random.randint(0, len(centroids))])\n        if np.array_equal(centroids, new_centroids):\n            break\n        centroids = np.array(new_centroids)\n    return [tuple(np.round(centroid, 4)) for centroid in centroids]\npoints = [(1, 2), (2, 3), (3, 4), (10, 12), (11, 13), (12, 14)]\ninitial_centroids = [(1, 2), (10, 12)]\nk = 2\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    X (np.ndarray): Feature dataset.\n    y (np.ndarray): Labels corresponding to the dataset.\n    k (int): Number of folds. Default is 5.\n    shuffle (bool): Whether to shuffle the data before splitting. Default is True.\n    random_seed (int): Seed for random number generator. Default is None.\n\n    Returns:\n    List[Tuple[np.ndarray, np.ndarray]]: A list of tuples where each tuple contains\n                                          (train_indices, test_indices) for each fold.\n    \"\"\"\n    if k <= 1:\n        raise ValueError('k must be greater than 1.')\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    fold_sizes = np.full(k, n_samples // k, dtype=int)\n    fold_sizes[:n_samples % k] += 1\n    current = 0\n    train_test_splits = []\n    for fold_size in fold_sizes:\n        test_indices = indices[current:current + fold_size]\n        train_indices = np.concatenate((indices[:current], indices[current + fold_size:]))\n        train_test_splits.append((train_indices, test_indices))\n        current += fold_size\n    return train_test_splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nk = 2"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"Calculate the entropy of the target attribute in the given examples.\"\"\"\n    label_counts = Counter((example[target_attr] for example in examples))\n    total_examples = len(examples)\n    return -sum((count / total_examples * math.log2(count / total_examples) for count in label_counts.values() if count > 0))\ndef information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"Calculate the information gain of a given attribute.\"\"\"\n    total_entropy = entropy(examples, target_attr)\n    attribute_values = Counter((example[attribute] for example in examples))\n    weighted_entropy = 0.0\n    for (value, count) in attribute_values.items():\n        subset = [example for example in examples if example[attribute] == value]\n        weighted_entropy += count / len(examples) * entropy(subset, target_attr)\n    return total_entropy - weighted_entropy\ndef best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n    \"\"\"Find the attribute with the highest information gain.\"\"\"\n    gains = {attr: information_gain(examples, attr, target_attr) for attr in attributes}\n    return max(gains, key=gains.get)\ndef majority_class(examples: list[dict], target_attr: str) -> str:\n    \"\"\"Return the majority class from the examples.\"\"\"\n    return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"Learn a decision tree from the given examples and attributes.\"\"\"\n    if not examples:\n        return {}\n    if len(set((example[target_attr] for example in examples))) == 1:\n        return examples[0][target_attr]\n    if not attributes:\n        return majority_class(examples, target_attr)\n    best_attr = best_attribute(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    best_attr_values = set((example[best_attr] for example in examples))\n    for value in best_attr_values:\n        subset = [example for example in examples if example[best_attr] == value]\n        subtree = learn_decision_tree(subset, [attr for attr in attributes if attr != best_attr], target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    if kernel == 'linear':\n        K = np.dot(data, data.T)\n    elif kernel == 'rbf':\n        K = np.exp(-np.linalg.norm(data[:, np.newaxis] - data, axis=2) ** 2 / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Invalid kernel type. Choose 'linear' or 'rbf'.\")\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        for i in range(n_samples):\n            if labels[i] * (np.sum(alpha * labels * K[i]) + bias) < 1:\n                alpha[i] = (1 - eta * lambda_val) * alpha[i] + eta * labels[i]\n        bias = np.mean(labels - np.sum(alpha * labels * K, axis=1))\n    return [alpha.tolist(), round(bias, 4)]\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\nlabels = np.array([1, -1, 1, -1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values\nscores = [2.0, 1.0, 0.1]\nsoftmax_values = softmax(scores)"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predictions = []\n    mse = 0\n    for i in range(len(features)):\n        z = np.dot(features[i], weights) + bias\n        a = sigmoid(z)\n        predictions.append(a)\n        mse += (labels[i] - a) ** 2\n    mse /= len(features)\n    return (np.array(predictions).tolist(), round(mse, 4))\nfeatures = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlabels = [0, 1, 0]\nweights = [0.1, 0.2, 0.3]\nbias = 0.5"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1 - x)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_predictions = error * sigmoid_derivative(predictions)\n        weights -= learning_rate * np.dot(features.T, d_predictions) / len(labels)\n        bias -= learning_rate * np.mean(d_predictions)\n    return (weights, round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        if isinstance(other, (int, float)):\n            other = Value(other)\n        return Value(self.data + other.data, (self, other), '+')\n\n    def __mul__(self, other):\n        if isinstance(other, (int, float)):\n            other = Value(other)\n        return Value(self.data * other.data, (self, other), '*')\n\n    def relu(self):\n        return Value(max(0, self.data), (self,), 'ReLU')\n\n    def backward(self):\n        if self.grad == 0:\n            self.grad = 1\n            self._backward()\n        for child in self._prev:\n            if self._op == '+':\n                child.grad += 1 * self.grad\n            elif self._op == '*':\n                child.grad += child.data * self.grad\n            elif self._op == 'ReLU':\n                child.grad += (self.data > 0) * self.grad\n            child.backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    B_inv = np.linalg.inv(B_matrix)\n    P = C_matrix @ B_inv\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 0], [0, 1, 1], [1, 0, 1]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    AtA = np.dot(A.T, A)\n    (eigenvalues, V) = np.linalg.eig(AtA)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    V = V[:, sorted_indices]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.zeros((2, 2))\n    np.fill_diagonal(S, singular_values)\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    U = U / np.linalg.norm(U, axis=0)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())\nA = np.array([[3, 2], [2, 3]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    num_batches = num_samples // batch_size\n    if y is not None:\n        for i in range(num_batches):\n            start_idx = i * batch_size\n            end_idx = (i + 1) * batch_size\n            yield (X[start_idx:end_idx], y[start_idx:end_idx])\n    else:\n        for i in range(num_batches):\n            start_idx = i * batch_size\n            end_idx = (i + 1) * batch_size\n            yield X[start_idx:end_idx]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([0, 1, 0, 1, 0])\nbatch_size = 2"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    X = np.array(X)\n    mask = X[:, feature_i] >= threshold\n    subset_meeting_condition = X[mask]\n    subset_not_meeting_condition = X[~mask]\n    return (subset_meeting_condition.tolist(), subset_not_meeting_condition.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    poly_features = []\n    for comb in combinations_with_replacement(range(n_features), degree):\n        poly_features.append(np.prod(X[:, comb], axis=1))\n    return np.array(poly_features).T.tolist()\nX = np.array([[1, 2], [3, 4], [5, 6]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, size=n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    x = np.asarray(x)\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.size, n_col), dtype=int)\n    one_hot[np.arange(x.size), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return accuracy"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    correlation_matrix = np.corrcoef(X, Y)\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_error = float('inf')\n        best_prediction = None\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                prediction = np.where(X[:, feature] < threshold, -1, 1)\n                error = np.sum(sample_weights * (prediction != y))\n                if error < best_error:\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_error = error\n                    best_prediction = prediction\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        sample_weights *= np.exp(-alpha * y * best_prediction)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append({'feature': best_feature, 'threshold': best_threshold, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    stable_scores = scores - max_score\n    exp_scores = np.exp(stable_scores)\n    softmax_values = exp_scores / np.sum(exp_scores)\n    log_softmax_values = np.log(softmax_values)\n    log_softmax_values = np.round(log_softmax_values, 4)\n    return log_softmax_values.tolist()\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n\n    def initialize(self):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((self.n_units,))\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        if self.trainable:\n            grad_w = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0)\n            self.W -= grad_w\n            self.w0 -= grad_w0\n        return np.dot(accum_grad, self.W.T)\n\n    def output_shape(self):\n        return (self.n_units,)\nX = np.array([[1, 2], [3, 4]])"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = int((input_height + 2 * padding - kernel_height) / stride) + 1\n    output_width = int((input_width + 2 * padding - kernel_width) / stride) + 1\n    padded_input = np.pad(input_matrix, padding)\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, input_height - kernel_height + 1, stride):\n        for j in range(0, input_width - kernel_width + 1, stride):\n            output_matrix[int(i / stride), int(j / stride)] = np.sum(padded_input[i:i + kernel_height, j:j + kernel_width] * kernel)\n    return np.around(output_matrix, decimals=4).tolist()\ninput_matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nkernel = np.array([[1, 0], [0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss = mse + reg_term\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    return z if z >= 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0\n    precision = true_positives / (true_positives + false_positives)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    m = len(y)\n    n_features = X.shape[1]\n    losses = []\n    for _ in range(n_iterations):\n        if method == 'sgd':\n            idx = np.random.randint(m)\n            X_batch = X[idx].reshape(1, -1)\n            y_batch = y[idx]\n        elif method == 'batch':\n            X_batch = X\n            y_batch = y\n        elif method == 'mini_batch':\n            idx = np.random.choice(m, batch_size, replace=False)\n            X_batch = X[idx]\n            y_batch = y[idx]\n        y_pred = np.dot(X_batch, weights)\n        error = y_pred - y_batch\n        loss = np.mean(error ** 2)\n        losses.append(loss)\n        gradient = 2 * np.dot(X_batch.T, error) / m\n        weights -= learning_rate * gradient\n    return (np.round(weights, 4).tolist(), np.round(losses, 4).tolist())"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    (num_rows, num_cols) = matrix.shape\n    lead = 0\n    for r in range(num_rows):\n        if lead >= num_cols:\n            return matrix.tolist()\n        i = r\n        while matrix[i, lead] == 0:\n            i += 1\n            if i == num_rows:\n                i = r\n                lead += 1\n                if num_cols == lead:\n                    return matrix.tolist()\n        matrix[[i, r]] = matrix[[r, i]]\n        if matrix[r, lead] != 0:\n            matrix[r] = matrix[r] / matrix[r, lead]\n        for i in range(num_rows):\n            if i != r:\n                matrix[i] = matrix[i] - matrix[i, lead] * matrix[r]\n        lead += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for i in range(num_iterations):\n        t += 1\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x.tolist(), 4)"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for iteration in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        loss = 1 / (2 * n_samples) * np.sum((y - y_pred) ** 2)\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n        if np.linalg.norm(dw) < tol and abs(db) < tol:\n            break\n    return (w.round(4).tolist(), round(b, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1))\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1)\n                if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                    dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return int(dp[m][n])"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    true_positives = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    false_negatives = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    if true_positives + false_negatives == 0:\n        return 0.0\n    else:\n        recall_value = true_positives / (true_positives + false_negatives)\n        return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(Q, K, V):\n    scores = np.dot(Q, K.T)\n    d_k = K.shape[-1]\n    scaled_scores = scores / np.sqrt(d_k)\n    attention_weights = np.exp(scaled_scores - np.max(scaled_scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output = np.round(output, 4)\n    return output.tolist()\nQ = np.array([[1, 0, 1], [0, 1, 0]])\nK = np.array([[1, 0, 0], [0, 1, 1], [1, 1, 0]])\nV = np.array([[1, 2], [3, 4], [5, 6]])\noutput = self_attention(Q, K, V)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    hidden_state = initial_hidden_state\n    for input_vector in input_sequence:\n        input_vector = np.array(input_vector)\n        hidden_state = np.tanh(np.dot(input_vector, Wx) + np.dot(hidden_state, Wh) + b)\n    return np.round(hidden_state, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    kl_divergence = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    D = np.diag(np.diag(A))\n    L = -np.tril(A, k=-1)\n    U = -np.triu(A, k=1)\n    for _ in range(n):\n        x = np.linalg.inv(D + L).dot(b + U.dot(x))\n    return x.round(4).tolist()\nA = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]])\nb = np.array([12, -1, 5])\nn = 10\nx_ini = [0, 0, 0]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    for i in range(n):\n        max_row_index = np.argmax(np.abs(A[i:n, i])) + i\n        if i != max_row_index:\n            A[[i, max_row_index]] = A[[max_row_index, i]]\n            b[[i, max_row_index]] = b[[max_row_index, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] -= factor * A[i, i:]\n            b[j] -= factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()\nA = [[3, 2, -4], [2, 3, 3], [5, -3, 1]]\nb = [3, 15, 14]"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[0]):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((h_t, x_t))\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            C_tilde_t = self.tanh(np.dot(self.Wc, combined) + self.bc)\n            c_t = f_t * c_t + i_t * C_tilde_t\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            h_t = o_t * self.tanh(c_t)\n            hidden_states.append(h_t)\n        hidden_states = [h.round(4).flatten().tolist() for h in hidden_states]\n        final_hidden_state = h_t.round(4).flatten().tolist()\n        final_cell_state = c_t.round(4).flatten().tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('Empty corpus provided')\n    tf_matrix = []\n    for doc in corpus:\n        tf_doc = {}\n        total_words = len(doc)\n        for word in doc:\n            tf_doc[word] = tf_doc.get(word, 0) + 1 / total_words\n        tf_matrix.append(tf_doc)\n    idf_dict = {}\n    for word in query:\n        df = sum((1 for doc in corpus if word in doc))\n        idf_dict[word] = np.log((len(corpus) + 1) / (df + 1)) + 1\n    tf_idf_matrix = []\n    for tf_doc in tf_matrix:\n        tf_idf_doc = []\n        for word in query:\n            tf_idf_score = tf_doc.get(word, 0) * idf_dict[word]\n            tf_idf_doc.append(round(tf_idf_score, 5))\n        tf_idf_matrix.append(tf_idf_doc)\n    return np.array(tf_idf_matrix).tolist()\ncorpus = [['hello', 'world', 'hello'], ['world', 'python', 'world']]\nquery = ['hello', 'world']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    precision = TP / (TP + FP) if TP + FP > 0 else 0\n    recall = TP / (TP + FN) if TP + FN > 0 else 0\n    if precision + recall > 0:\n        f_score_value = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    else:\n        f_score_value = 0\n    return round(f_score_value, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = b - A @ x\n    p = r.copy()\n    rsold = r @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / (p @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r @ r\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return x.round(8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    class_counts = np.bincount(y)\n    total_count = len(y)\n    if total_count == 0:\n        return 0.0\n    impurity = 1.0 - sum(((count / total_count) ** 2 for count in class_counts))\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for (i, row) in enumerate(dense_matrix):\n        for (j, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                column_indices.append(j)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)\ndense_matrix = [[1, 0, 0, 0, 2], [0, 3, 0, 4, 0], [0, 0, 5, 0, 0], [6, 0, 0, 7, 8]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    projection = np.dot(v, L) / np.dot(L, L) * L\n    projection = np.round(projection, 3)\n    return projection.tolist()"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)\ndense_matrix = [[1, 0, 0, 4], [0, 2, 0, 5], [0, 0, 3, 6]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A)\n    rank = np.linalg.matrix_rank(A)\n    (U, S, Vt) = np.linalg.svd(A)\n    independent_columns_indices = np.where(S > 1e-10)[0]\n    basis_vectors = A[:, independent_columns_indices]\n    basis_vectors = np.round(basis_vectors, 8)\n    return basis_vectors.tolist()\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_true = np.mean(y_true)\n    total_sum_squares = np.sum((y_true - mean_true) ** 2)\n    residual_sum_squares = np.sum((y_true - y_pred) ** 2)\n    r_squared = 1 - residual_sum_squares / total_sum_squares\n    return round(r_squared, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    rows = len(img)\n    cols = len(img[0])\n    total_brightness = 0\n    total_pixels = 0\n    for row in img:\n        if len(row) != cols:\n            return -1\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    if total_pixels == 0:\n        return -1\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Input arrays must be numpy arrays')\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays cannot be empty')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape')\n    n = len(y_true)\n    rmse = np.sqrt(np.sum((y_true - y_pred) ** 2) / n)\n    return round(rmse, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    total_true = np.sum(y_true)\n    total_pred = np.sum(y_pred)\n    if total_true + total_pred == 0:\n        dice = 1.0\n    else:\n        dice = 2 * intersection / (total_true + total_pred)\n    dice = round(dice, 3)\n    return dice"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        feature_hv = np.zeros(dim)\n        np.random.seed(random_seeds[feature])\n        feature_name_hv = np.random.choice([1, -1], size=dim)\n        np.random.seed(random_seeds[feature])\n        feature_value_hv = np.random.choice([1, -1], size=dim)\n        feature_hv = np.bitwise_xor(feature_name_hv, feature_value_hv)\n        composite_hv = np.bitwise_xor(composite_hv, feature_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for pair in data:\n        (y_true, y_pred) = pair\n        if y_true == 1 and y_pred == 1:\n            matrix[0][0] += 1\n        elif y_true == 1 and y_pred == 0:\n            matrix[0][1] += 1\n        elif y_true == 0 and y_pred == 1:\n            matrix[1][0] += 1\n        elif y_true == 0 and y_pred == 0:\n            matrix[1][1] += 1\n    return matrix\ndata = [[1, 1], [0, 1], [1, 0], [0, 0], [1, 1], [0, 1], [1, 0], [0, 0]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    v1 = np.array(v1)\n    v2 = np.array(v2)\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot be empty or have zero magnitude.')\n    cosine_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    confusion_matrix = [[0, 0], [0, 0]]\n    for (a, p) in zip(actual, predicted):\n        confusion_matrix[a][p] += 1\n    tp = confusion_matrix[1][1]\n    tn = confusion_matrix[0][0]\n    fp = confusion_matrix[0][1]\n    fn = confusion_matrix[1][0]\n    accuracy = (tp + tn) / (tp + tn + fp + fn)\n    precision = tp / (tp + fp)\n    recall = tp / (tp + fn)\n    f1_score = 2 * (precision * recall) / (precision + recall)\n    specificity = tn / (tn + fp)\n    negative_predictive_value = tn / (tn + fn)\n    return (confusion_matrix, round(accuracy, 3), round(f1_score, 3), round(specificity, 3), round(negative_predictive_value, 3))"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.round(np.mean(data), 4)\n    median = np.round(np.median(data), 4)\n    mode = stats.mode(data).mode[0]\n    variance = np.round(np.var(data, ddof=1), 4)\n    standard_deviation = np.round(np.std(data, ddof=1), 4)\n    percentile_25 = np.round(np.percentile(data, 25), 4)\n    percentile_50 = np.round(np.percentile(data, 50), 4)\n    percentile_75 = np.round(np.percentile(data, 75), 4)\n    interquartile_range = np.round(percentile_75 - percentile_25, 4)\n    result = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': standard_deviation, '25th_percentile': percentile_25, '50th_percentile': percentile_50, '75th_percentile': percentile_75, 'interquartile_range': interquartile_range}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coefficient = math.comb(n, k)\n    probability = binomial_coefficient * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)\nn = 5\nk = 2\np = 0.5"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf = 1 / (std_dev * math.sqrt(2 * math.pi)) * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast value of the image.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    contrast = max_val - min_val\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \n    Raises:\n        ValueError: If the input vectors are not 1D or of the same length.\n    \"\"\"\n    if not (isinstance(vec1, np.ndarray) and vec1.ndim == 1):\n        raise ValueError('vec1 must be a 1D numpy array.')\n    if not (isinstance(vec2, np.ndarray) and vec2.ndim == 1):\n        raise ValueError('vec2 must be a 1D numpy array.')\n    if vec1.shape[0] != vec2.shape[0]:\n        raise ValueError('Both vectors must be of the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_features = []\n    for x in data:\n        features = []\n        for d in range(1, degree + 1):\n            for combo in combinations_with_replacement([x], d):\n                poly_feature = np.prod(combo)\n                features.append(round(poly_feature, 8))\n        transformed_features.append(features)\n    return transformed_features\ndata = [1.0, 2.0, 3.0]\ndegree = 2"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_encodings = np.zeros((position, d_model))\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pos_encodings[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model))\n            else:\n                pos_encodings[pos, i] = np.cos(pos / 10000 ** (2 * i / d_model))\n    return pos_encodings.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (round(updated_parameter, 5).tolist(), round(m, 5).tolist(), round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    tokens = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        pass\n    generated_text = encoder.decode(tokens)\n    return generated_text\nprompt = 'hello'\nn_tokens_to_generate = 10\ngenerated_text = gen_text(prompt, n_tokens_to_generate)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum(axis=0)\n    crystal_values = np.array(crystal_values)\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                attention_scores[i][j] = crystal_values[i] * crystal_values[j]\n    attention_weights = np.zeros_like(attention_scores)\n    for i in range(n):\n        attention_weights[i] = softmax(attention_scores[i])\n    weighted_patterns = np.zeros(n)\n    for i in range(n):\n        weighted_patterns[i] = np.dot(attention_weights[i], crystal_values)\n    return np.round(weighted_patterns.tolist(), 4)\nn = 5\ncrystal_values = [1, 2, 3, 4, 5]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    corpus = [doc.lower().split() for doc in corpus]\n    query = query.lower().split()\n    doc_freq = Counter()\n    for doc in corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            if term in query:\n                doc_freq[term] += 1\n    N = len(corpus)\n    avg_doc_length = sum((len(doc) for doc in corpus)) / N\n    scores = []\n    for doc in corpus:\n        score = 0.0\n        doc_length = len(doc)\n        term_freq = Counter(doc)\n        for term in query:\n            if term in term_freq:\n                tf = term_freq[term]\n                idf = np.log((N - doc_freq[term] + 0.5) / (doc_freq[term] + 0.5) + 1)\n                norm_tf = tf * (k1 + 1) / (tf + k1 * (1 - b + b * (doc_length / avg_doc_length)))\n                score += idf * norm_tf\n        scores.append(round(score, 3))\n    return scores\ncorpus = ['the cat in the hat', 'the quick brown fox', 'the lazy dog', 'the cat and the mouse']\nquery = 'cat'\nscores = calculate_bm25_scores(corpus, query)"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = sum((1 for (true, pred) in zip(y_true, y_pred) if true == 1 and pred == 1))\n    false_positives = sum((1 for (true, pred) in zip(y_true, y_pred) if true == 0 and pred == 1))\n    false_negatives = sum((1 for (true, pred) in zip(y_true, y_pred) if true == 1 and pred == 0))\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    error = np.abs(y_true - y_pred)\n    mae = np.mean(error)\n    return round(mae, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(Q, K, V):\n    \"\"\"\n    Compute the self-attention mechanism.\n    \n    Parameters:\n    - Q: Query matrix\n    - K: Key matrix\n    - V: Value matrix\n    \n    Returns:\n    - Attention output\n    \"\"\"\n    scores = Q @ K.T\n    d_k = K.shape[-1]\n    scores /= np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(Q, K, V, n_heads):\n    \"\"\"\n    Compute multi-head attention.\n    \n    Parameters:\n    - Q: Query matrix\n    - K: Key matrix\n    - V: Value matrix\n    - n_heads: Number of attention heads\n    \n    Returns:\n    - Multi-head attention output\n    \"\"\"\n\n    def split_heads(x, n_heads):\n        (batch_size, seq_length, depth) = x.shape\n        depth_per_head = depth // n_heads\n        x = x.reshape(batch_size, seq_length, n_heads, depth_per_head)\n        return x.transpose(0, 2, 1, 3)\n    Q_heads = split_heads(Q.reshape(1, -1, Q.shape[-1]), n_heads)\n    K_heads = split_heads(K.reshape(1, -1, K.shape[-1]), n_heads)\n    V_heads = split_heads(V.reshape(1, -1, V.shape[-1]), n_heads)\n    attention_outputs = []\n    for i in range(n_heads):\n        attention_output = self_attention(Q_heads[0][i], K_heads[0][i], V_heads[0][i])\n        attention_outputs.append(attention_output)\n    output = np.concatenate(attention_outputs, axis=-1)\n    return output"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n00 = n01 = n10 = n11 = 0\n    for i in range(len(x)):\n        if x[i] == 0 and y[i] == 0:\n            n00 += 1\n        elif x[i] == 0 and y[i] == 1:\n            n01 += 1\n        elif x[i] == 1 and y[i] == 0:\n            n10 += 1\n        elif x[i] == 1 and y[i] == 1:\n            n11 += 1\n    n = n00 + n01 + n10 + n11\n    phi = (n11 * n00 - n10 * n01) / ((n11 + n01) * (n11 + n10) * (n10 + n00) * (n01 + n00)) ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return (x + 2.5) / 5.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(0, x) + alpha * min(0, x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 100:\n        return x\n    elif x < -100:\n        return 0.0\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    surr1 = np.array(rhos) * np.array(A)\n    surr2 = np.clip(rhos, 1 - epsilon, 1 + epsilon) * np.array(A)\n    surrogate = np.minimum(surr1, surr2)\n    kl_divergence = np.sum(np.array(pi_theta_old) * np.log(np.array(pi_theta_old) / np.array(pi_theta_ref)))\n    grpo_obj = np.mean(surrogate) - beta * kl_divergence\n    return round(grpo_obj, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    return round(scale * (x if x > 0 else alpha * (math.exp(x) - 1)), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(X):\n    exps = np.exp(X - np.max(X, axis=1, keepdims=True))\n    return exps / np.sum(exps, axis=1, keepdims=True)\ndef cross_entropy(y, y_pred):\n    return -np.mean(np.sum(y * np.log(y_pred), axis=1))\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    np.random.seed(42)\n    (N, M) = X.shape\n    C = y.shape[1]\n    B = np.random.rand(M, C)\n    losses = []\n    for _ in range(iterations):\n        y_pred = softmax(np.dot(X, B))\n        loss = cross_entropy(y, y_pred)\n        losses.append(round(loss, 4))\n        error = y_pred - y\n        gradient = np.dot(X.T, error) / N\n        B -= learning_rate * gradient\n    return (B.tolist(), losses)\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([[1, 0], [0, 1], [1, 0]])\nlearning_rate = 0.01\niterations = 1000"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef binary_cross_entropy(y_true, y_pred):\n    return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    num_features = X.shape[1]\n    coefficients = np.zeros(num_features)\n    loss_values = []\n    for i in range(iterations):\n        z = np.dot(X, coefficients)\n        y_pred = sigmoid(z)\n        gradient = np.dot(X.T, y_pred - y) / len(y)\n        coefficients -= learning_rate * gradient\n        loss = binary_cross_entropy(y, y_pred)\n        loss_values.append(round(loss, 4))\n    return (coefficients.tolist(), loss_values)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([0, 0, 1, 1])\nlearning_rate = 0.01\niterations = 1000"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.dot(Q, K.T)\n    scores += mask * -1000000000.0\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    unique_colors = set(apples)\n    total_colors = len(unique_colors)\n    if total_colors == 1:\n        return 0.0\n    max_disorder = len(apples) - 1\n    actual_disorder = max_disorder * (1 - 1 / total_colors)\n    return round(actual_disorder, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * X_normalized + beta\n    return output.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def precision_recall_fmean(candidate_counts, reference_counts):\n        precision = sum([min(candidate_counts[k], reference_counts[k]) for k in candidate_counts]) / sum(candidate_counts.values())\n        recall = sum([min(candidate_counts[k], reference_counts[k]) for k in reference_counts]) / sum(reference_counts.values())\n        fmean = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall)\n        return (precision, recall, fmean)\n\n    def unigram_matches(candidate, reference):\n        candidate_counts = Counter(candidate.split())\n        reference_counts = Counter(reference.split())\n        (precision, recall, fmean) = precision_recall_fmean(candidate_counts, reference_counts)\n        return (precision, recall, fmean)\n\n    def word_order_penalty(candidate, reference):\n        candidate_words = candidate.split()\n        reference_words = reference.split()\n        candidate_set = set(candidate_words)\n        reference_set = set(reference_words)\n        penalty = len(candidate_set.intersection(reference_set)) / len(candidate_set)\n        return penalty\n    (precision, recall, fmean) = unigram_matches(candidate, reference)\n    penalty = word_order_penalty(candidate, reference)\n    meteor = (1 - penalty) * precision ** alpha * recall ** (1 - alpha) * fmean ** gamma\n    return round(meteor, 3)\nreference = 'the quick brown fox jumps over the lazy dog'\ncandidate = 'the fast brown fox jumps over the lazy dog'"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_joint = joint_counts / total_samples\n    pmi = np.log2(p_joint / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(value - min_val) / (max_val - min_val) for value in x]\n    return [round(value, 4) for value in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    if x.ndim != 1:\n        raise ValueError('Input x must be a 1D array.')\n    z1 = np.dot(w1, x)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(w2, a1)\n    a2 = np.maximum(0, z2)\n    output = a2 + x\n    final_output = np.maximum(0, output)\n    return final_output.round(4).tolist()\nx = np.array([1.0, 2.0, 3.0])\nw1 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nw2 = np.array([[0.7, 0.8], [0.9, 1.0]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    pooled = np.mean(x, axis=(0, 1))\n    return pooled"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    out = gamma * X_normalized + beta\n    return np.round(out, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n\n    def gram_schmidt(vectors):\n        basis = []\n        for v in vectors:\n            w = v - sum((np.dot(v, b) * b for b in basis))\n            if np.linalg.norm(w) > tol:\n                basis.append(w / np.linalg.norm(w))\n        return basis\n    basis = gram_schmidt(vectors)\n    orthonormal_basis = gram_schmidt(basis)\n    return [np.round(v, 4).tolist() for v in orthonormal_basis]\nvectors = [[1, 0], [1, 1]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    if len(a) != 3 or len(b) != 3:\n        raise ValueError('Input vectors must be 3-dimensional')\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()\na = [1, 2, 3]\nb = [4, 5, 6]\nresult = cross_product(a, b)"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    return np.round(x, 4).tolist()\nA = [[2, -1, 0], [1, 3, 2], [0, 1, 1]]\nb = [8, 13, 3]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc_distance = -np.log(np.sum(np.sqrt(p * q)))\n    return round(bc_distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": ""}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    policy_gradients = np.zeros((num_states, num_actions))\n    for episode in episodes:\n        returns = []\n        episode_length = len(episode)\n        cumulative_return = 0\n        for t in reversed(range(episode_length)):\n            (state, action, reward) = episode[t]\n            cumulative_return = reward + cumulative_return\n            returns.insert(0, cumulative_return)\n        for t in range(episode_length):\n            (state, action, _) = episode[t]\n            softmax_probs = np.exp(theta[state]) / np.sum(np.exp(theta[state]))\n            log_prob = np.log(softmax_probs[action])\n            policy_gradients[state, action] += log_prob * returns[t]\n    num_episodes = len(episodes)\n    if num_episodes > 0:\n        policy_gradients /= num_episodes\n    return np.round(policy_gradients, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = d_in * d_out\n    flops_moe = n_experts * k_active * d_in + d_in * d_out\n    savings_percentage = (flops_dense - flops_moe) / flops_dense * 100\n    return round(savings_percentage, 1)\nn_experts = 100\nk_active = 10\nd_in = 512\nd_out = 1024"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    gating_scores = np.dot(X, W_g)\n    noisy_scores = gating_scores + W_noise * N\n    topk_indices = np.argpartition(noisy_scores, -k, axis=1)[:, -k:]\n    mask = np.zeros_like(noisy_scores)\n    mask[np.arange(mask.shape[0])[:, None], topk_indices] = 1\n    gating_probs = mask / np.sum(mask, axis=1, keepdims=True)\n    gating_probs = np.round(gating_probs, 4)\n    return gating_probs.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    logits = np.dot(x, Wg)\n    gating_probs = np.exp(logits) / np.sum(np.exp(logits), axis=1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=1)[:, -top_k:]\n    expert_outputs = np.dot(x, We)\n    moe_output = np.zeros((x.shape[0], expert_outputs.shape[1]))\n    for i in range(x.shape[0]):\n        for j in range(expert_outputs.shape[1]):\n            moe_output[i, j] = np.sum(gating_probs[i, top_k_indices[i]] * expert_outputs[i, top_k_indices[i], j])\n    return np.round(moe_output, decimals=4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by the number of groups.'\n    channels_per_group = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, channels_per_group, H, W)\n    mean = X_reshaped.mean(axis=(2, 3, 4), keepdims=True)\n    variance = X_reshaped.var(axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(variance + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    output = gamma[:, np.newaxis, np.newaxis] * X_normalized + beta[:, np.newaxis, np.newaxis]\n    output_rounded = np.round(output, 4).tolist()\n    return output_rounded"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for i in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        new_x = x - learning_rate * gradient\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    y = np.tanh(alpha * x + beta)\n    z = gamma * x + (1 - gamma) * y\n    result = np.round(z, 4).tolist()\n    return result"}
