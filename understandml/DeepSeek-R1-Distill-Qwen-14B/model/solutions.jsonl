{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: 1}, 'log': {'link': np.log, 'inv_link': np.exp, 'derivative': lambda mu: 1.0 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1.0 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1.0 / (mu * (1 - mu))}}\n    return links"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    norms = np.sum(X ** 2, axis=1)\n    dot_product = X.dot(X.T)\n    D = norms[:, None] + norms[None, :] - 2 * dot_product\n    D = np.round(D, 4)\n    return D.tolist()"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    sum_predictions = np.sum(predictions, axis=0)\n    raw_score = sum_predictions * -learning_rate\n    exp = np.exp(raw_score)\n    sum_exp = exp.sum(axis=1, keepdims=True)\n    probabilities = exp / sum_exp\n    predicted_classes = np.argmax(probabilities, axis=1)\n    return predicted_classes.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    m = X_train.shape[0]\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(n_iterations):\n        z = np.dot(X_train, w) + b\n        A = 1 / (1 + np.exp(-z))\n        gradient_w = X_train.T.dot(A - y_train) / m\n        gradient_b = (A - y_train).mean()\n        w = w - learning_rate * gradient_w\n        b = b - learning_rate * gradient_b\n    z_test = np.dot(X_test, w) + b\n    A_test = 1 / (1 + np.exp(-z_test))\n    preds = np.round(A_test).astype(int).tolist()\n    return preds"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\\\(\tilde{X}_{t-1}\\\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\\\(X_t\\\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\\\(\\x0barepsilon\\\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    prev_arr = np.asarray(prev)\n    cur_arr = np.asarray(cur)\n    weight_arr = np.asarray(weight)\n    smoothed = weight_arr * prev_arr + (1 - weight_arr) * cur_arr\n    rounded = np.round(smoothed, 4)\n    if rounded.ndim == 0:\n        return rounded.item()\n    else:\n        return rounded.tolist()"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    eps = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    p = np.clip(p, eps, 1 - eps)\n    loss = -(y * np.log(p) + (1 - y) * np.log(1 - p))\n    mean_loss = np.mean(loss)\n    gradient = p - y\n    hessian = p * (1 - p)\n    mean_loss_rounded = round(mean_loss, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    hessian_rounded = [round(h, 4) for h in hessian]\n    return (mean_loss_rounded, gradient_rounded, hessian_rounded)"}
{"task_id": 16, "completion_id": 0, "solution": "from typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    length = len(sequence)\n    if N > length:\n        return []\n    result = []\n    for i in range(length - N + 1):\n        gram = tuple(sequence[i:i + N])\n        result.append(gram)\n    return result"}
{"task_id": 17, "completion_id": 0, "solution": "def build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items:\n        return {}\n    root_index = None\n    for i in range(len(parents)):\n        if parents[i] == -1:\n            root_index = i\n            break\n    children_dict = {}\n    for i in range(len(parents)):\n        p = parents[i]\n        if p == -1:\n            continue\n        if p not in children_dict:\n            children_dict[p] = []\n        children_dict[p].append(i)\n\n    def build_node(index):\n        node = {'item': items[index], 'count': counts[index], 'children': []}\n        if index in children_dict:\n            for child_index in children_dict[index]:\n                node['children'].append(build_node(child_index))\n        return node\n    return build_node(root_index)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.get('dtype', None)\n    if dtype is None:\n        dtype = float\n    else:\n        dtype = np.dtype(dtype)\n    return np.zeros(shape, dtype=dtype)"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)) or (isinstance(x, np.ndarray) and x.ndim == 0):\n        if isinstance(x, (int, float)):\n            x_scalar = x\n        else:\n            x_scalar = x.item()\n        sigmoid = 1 / (1 + np.exp(-x_scalar))\n        gradient = sigmoid * (1 - sigmoid)\n        sigmoid_rounded = round(sigmoid, 4)\n        gradient_rounded = round(gradient, 4)\n        return (sigmoid_rounded, gradient_rounded)\n    else:\n        if isinstance(x, list):\n            x_array = np.array(x)\n        else:\n            x_array = x\n        sigmoid = 1 / (1 + np.exp(-x_array))\n        gradient = sigmoid * (1 - sigmoid)\n        sigmoid_rounded = np.round(sigmoid, 4)\n        gradient_rounded = np.round(gradient, 4)\n        sigmoid_list = sigmoid_rounded.tolist()\n        gradient_list = gradient_rounded.tolist()\n        return (sigmoid_list, gradient_list)"}
{"task_id": 22, "completion_id": 0, "solution": "import numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    offset = np.random.randint(-300, 300, size=shape)\n    u = np.random.uniform(0.0, 1.0, size=shape)\n    tensor = offset + u\n    if standardize:\n        means = tensor.mean(axis=0)\n        stds = tensor.std(axis=0)\n        epsilon = np.finfo(float).eps\n        tensor = (tensor - means) / (stds + epsilon)\n    return tensor"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    w = np.array(w)\n    if not velocity:\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.array(velocity)\n    w_tilde = w - momentum * velocity\n    g = grad_func(w_tilde)\n    g_clipped = np.clip(g, -1, 1)\n    new_velocity = momentum * velocity + learning_rate * g_clipped\n    new_w = w - new_velocity\n    new_w_rounded = np.round(new_w, 4).tolist()\n    new_velocity_rounded = np.round(new_velocity, 4).tolist()\n    return (new_w_rounded, new_velocity_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    m = X_test.shape[0]\n    X_train_reshaped = X_train[:, np.newaxis, :]\n    X_test_reshaped = X_test[np.newaxis, :, :]\n    diff = X_test_reshaped - X_train_reshaped\n    squared_norms = np.sum(diff ** 2, axis=2)\n    K = np.exp(-gamma * squared_norms)\n    sum_values = (alpha * y_train).dot(K.T)\n    g_z = sum_values + b\n    predictions = np.where(g_z >= 0, 1, -1)\n    return predictions.tolist()"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    x_array = np.array(x)\n    activation = np.maximum(0, x_array)\n    gradient = np.where(x_array >= 0, 1, 0)\n    return (activation.tolist(), gradient.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    return (a, b)\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    total = a + b\n    if isinstance(total, float) and total.is_integer():\n        return int(total)\n    else:\n        return total"}
{"task_id": 35, "completion_id": 0, "solution": "from typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        fea = current.fea\n        if fea < 0 or fea >= len(sample):\n            return -1\n        val = sample[fea]\n        if val not in current.child:\n            return -1\n        current = current.child[val]\n    return current.res"}
{"task_id": 36, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Predicts outcomes for a batch of samples using a binary decision tree.\"\"\"\n    if root is None:\n        return []\n    predictions = []\n    for sample in X:\n        current = root\n        while current.left is not None:\n            feature = current.feature\n            threshold = current.threshold\n            if sample[feature] <= threshold:\n                current = current.left\n            else:\n                current = current.right\n        predictions.append(current.threshold)\n    return predictions"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    p_values = []\n    for a in range(n_arms):\n        c_a = context[:, a]\n        inv_A_a = np.linalg.inv(A[a])\n        theta_hat_a = inv_A_a.dot(b[a])\n        term1 = np.dot(theta_hat_a, c_a)\n        temp = inv_A_a.dot(c_a)\n        term2 = alpha * np.sqrt(np.dot(c_a, temp))\n        p_a = term1 + term2\n        p_values.append(p_a)\n    max_index = np.argmax(p_values)\n    return max_index"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be 1D'\n    assert stride >= 1, 'stride must be positive'\n    assert frame_width >= 1, 'frame_width must be positive'\n    n = x.size\n    assert n >= frame_width, 'x must be at least frame_width long'\n    n_frames = (n - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    result = as_strided(x, shape=shape, strides=strides)\n    if writeable:\n        result.flags.writeable = x.flags.writeable\n    else:\n        result.flags.writeable = False\n    return result"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    X_data_np = np.array(X_data)\n    predictions = []\n    for x in X:\n        x_np = np.array(x)\n        distances = np.sqrt(np.sum((X_data_np - x_np) ** 2, axis=1))\n        sorted_indices = np.argsort(distances)\n        top_k_indices = sorted_indices[:k]\n        y_top_k = [y_data[i] for i in top_k_indices]\n        counter = Counter(y_top_k)\n        max_count = max(counter.values(), default=0)\n        candidates = [label for (label, count) in counter.items() if count == max_count]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    n = len(actual)\n    if n == 0:\n        return -1\n    for (a, p) in zip(actual, predicted):\n        if a < 0 or p < 0:\n            return -1\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    log_actual = np.log(actual_np + 1)\n    log_predicted = np.log(predicted_np + 1)\n    diff = log_predicted - log_actual\n    squared_diff = diff ** 2\n    mean_squared = np.mean(squared_diff)\n    rmsle_val = np.sqrt(mean_squared)\n    return round(rmsle_val, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to the nearest 4 decimals.\n    \"\"\"\n    x = np.array(x)\n    exponent = np.exp(-2 * x)\n    denominator = 1 + exponent\n    tanh_x = 2 / denominator - 1\n    if derivative:\n        result = 1 - tanh_x ** 2\n    else:\n        result = tanh_x\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    N = len(x)\n    if N == 0:\n        return []\n    result = []\n    for k in range(N):\n        a_k = 0\n        for n in range(N - k):\n            a_k += x[n] * x[n + k]\n        result.append(a_k)\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        if not all((isinstance(row, list) for row in X)):\n            return False\n        if not X:\n            return False\n        row_length = len(X[0])\n        for row in X:\n            if len(row) != row_length:\n                return False\n        X_np = np.array(X)\n    else:\n        if X.ndim != 2:\n            return False\n        X_np = X\n    if not ((X_np >= 0).all() and (X_np <= 1).all()):\n        return False\n    row_sums = np.sum(X_np, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 49, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    if k <= 0 or k > len(nums):\n        return -1\n\n    def _move_up(heap, index):\n        while index > 0:\n            parent = (index - 1) // 2\n            if heap[index] > heap[parent]:\n                (heap[index], heap[parent]) = (heap[parent], heap[index])\n                index = parent\n            else:\n                break\n\n    def _move_down(heap, index):\n        while True:\n            left = 2 * index + 1\n            right = 2 * index + 2\n            max_child = None\n            if right < len(heap):\n                if heap[left] > heap[right]:\n                    max_child = left\n                else:\n                    max_child = right\n            elif left < len(heap):\n                max_child = left\n            else:\n                break\n            if heap[index] < heap[max_child]:\n                (heap[index], heap[max_child]) = (heap[max_child], heap[index])\n                index = max_child\n            else:\n                break\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heap.append(num)\n            _move_up(heap, len(heap) - 1)\n        elif num < heap[0]:\n            heap[0] = num\n            _move_down(heap, 0)\n    return sorted(heap)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"Implements Newton's method for 2-D linear regression to minimize the mean squared error.\"\"\"\n    w = np.array([[1.0], [1.0]])\n    n = X.shape[0]\n    for _ in range(max_iter):\n        Xw = X.dot(w)\n        residual = Xw - y\n        grad = 2.0 / n * X.T.dot(residual)\n        if np.linalg.norm(grad) < epsilon:\n            break\n        H = 2.0 / n * X.T.dot(X)\n        H_inv = np.linalg.pinv(H)\n        w = w - H_inv.dot(grad)\n    rounded_w = np.round(w, 4)\n    return rounded_w.tolist()"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    if criterion not in ['entropy', 'gini', 'mse']:\n        raise ValueError('Invalid criterion')\n    if criterion == 'entropy':\n        (values, counts) = np.unique(y, return_counts=True)\n        probs = counts / len(y)\n        entropy = 0.0\n        for p in probs:\n            entropy += -p * np.log2(p)\n        return round(entropy, 4)\n    elif criterion == 'gini':\n        (values, counts) = np.unique(y, return_counts=True)\n        probs = counts / len(y)\n        gini = sum((p * (1 - p) for p in probs))\n        return round(gini, 4)\n    elif criterion == 'mse':\n        mean = np.mean(y)\n        squared_errors = (y - mean) ** 2\n        mse = np.mean(squared_errors)\n        return round(mse, 4)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    W = np.asarray(W)\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    elif y.ndim == 2:\n        if y.shape[1] != 1:\n            return -1\n    else:\n        return -1\n    if W.ndim == 1:\n        W = W.reshape(-1, 1)\n    elif W.ndim == 2:\n        if W.shape[1] != 1:\n            return -1\n    else:\n        return -1\n    if X.ndim != 2:\n        return -1\n    if y.shape[0] != X.shape[0]:\n        return -1\n    if W.shape[0] != X.shape[1]:\n        return -1\n    n = X.shape[0]\n    XW = np.dot(X, W)\n    error = XW - y\n    gradient = X.T.dot(error) / n\n    gradient_rounded = np.round(gradient, 4)\n    result = gradient_rounded.tolist()\n    return result"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Args:\n        A: Transition probability matrix of shape (N, N)\n        B: Emission probability matrix of shape (N, M)\n        obs: List of observation indices (length T)\n        t: Integer time index (0 \u2264 t < T)\n        \n    Returns:\n        A list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = [[0.0 for _ in range(N)] for _ in range(T)]\n    for i in range(N):\n        beta[T - 1][i] = 1.0\n    for current_t in range(T - 2, -1, -1):\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                a_ij = A[i][j]\n                b_j = B[j][obs[current_t + 1]]\n                beta_j = beta[current_t + 1][j]\n                total += a_ij * b_j * beta_j\n            beta[current_t][i] = total\n    result = [round(beta[t][i], 4) for i in range(N)]\n    return result"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    if N == 0:\n        return []\n    c = np.zeros(N, dtype=np.complex128)\n    for k in range(N):\n        for n in range(N):\n            exponent = -2j * np.pi * k * n / N\n            term = frame[n] * np.exp(exponent)\n            c[k] += term\n    if positive_only:\n        c = c[:N // 2 + 1]\n    result = []\n    for coeff in c:\n        real_part = round(coeff.real, 4)\n        imag_part = round(coeff.imag, 4)\n        result.append(complex(real_part, imag_part))\n    return result"}
{"task_id": 65, "completion_id": 0, "solution": "def backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    if T == 0:\n        return 0.0\n    beta = [1.0 for _ in range(N)]\n    for t in range(T - 2, -1, -1):\n        new_beta = [0.0 for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                new_beta[i] += A[i][j] * B[j][obs[t + 1]] * beta[j]\n        beta = new_beta\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[i]\n    return round(prob, 6)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    new_w = w - learning_rate * new_update\n    new_w_rounded = np.round(new_w, 4)\n    new_update_rounded = np.round(new_update, 4)\n    return (new_w_rounded.tolist(), new_update_rounded.tolist())"}
{"task_id": 69, "completion_id": 0, "solution": "def forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not observations:\n        return -1\n    n = len(S)\n    if len(S) != n:\n        return -1\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    if len(B) != n:\n        return -1\n    if not B:\n        return -1\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    T = len(observations)\n    alpha = [0.0] * n\n    k0 = observations[0]\n    for i in range(n):\n        alpha[i] = S[i] * B[i][k0]\n    for t in range(1, T):\n        kt = observations[t]\n        new_alpha = [0.0] * n\n        for i in range(n):\n            sum_val = 0.0\n            for j in range(n):\n                sum_val += alpha[j] * A[j][i]\n            new_alpha[i] = sum_val * B[i][kt]\n        alpha = new_alpha\n    result = sum(alpha)\n    return round(result, 4)"}
{"task_id": 71, "completion_id": 0, "solution": "def label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function returns a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists). The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts. If *data* is empty, an empty dictionary is\n        returned.\n    \"\"\"\n    if not data:\n        return {}\n    counts = {}\n    for sample in data:\n        label = sample[-1]\n        if label in counts:\n            counts[label] += 1\n        else:\n            counts[label] = 1\n    return counts"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"Calculate the variance reduction for a regression tree split.\n    \n    Args:\n        y: Target values of the parent node.\n        y_left: Target values of the left child node.\n        y_right: Target values of the right child node.\n        \n    Returns:\n        The variance reduction, rounded to four decimal places.\n    \"\"\"\n    n = y.shape[0]\n    var_parent = np.sum(np.var(y, axis=0, ddof=0))\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    var_left = np.sum(np.var(y_left, axis=0, ddof=0))\n    var_right = np.sum(np.var(y_right, axis=0, ddof=0))\n    weighted_var = n_left / n * var_left + n_right / n * var_right\n    vr = var_parent - weighted_var\n    return round(vr, 4)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    result = []\n    if frames.ndim == 1:\n        frame = frames\n        fft_result = np.fft.rfft(frame)\n        magnitude = np.abs(fft_result)\n        rounded = np.round(magnitude, 4)\n        result.append(rounded.tolist())\n    else:\n        for frame in frames:\n            fft_result = np.fft.rfft(frame)\n            magnitude = np.abs(fft_result)\n            rounded = np.round(magnitude, 4)\n            result.append(rounded.tolist())\n    return result"}
{"task_id": 75, "completion_id": 0, "solution": "def knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    n_test = len(X_test)\n    if k < 1 or k > n_train:\n        return [-1] * n_test\n    predictions = []\n    for x in X_test:\n        distances = []\n        for (xi, yi) in zip(X_train, y_train):\n            dist_sq = sum(((x[i] - xi[i]) ** 2 for i in range(len(x))))\n            distances.append((dist_sq, yi))\n        distances.sort()\n        selected = distances[:k]\n        ys = [y for (d, y) in selected]\n        freq = {}\n        for y in ys:\n            freq[y] = freq.get(y, 0) + 1\n        max_freq = max(freq.values())\n        candidates = [y for y in freq if freq[y] == max_freq]\n        predicted = min(candidates)\n        predictions.append(predicted)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-10\n    y_pred += epsilon\n    log_y_pred = np.log(y_pred)\n    product = y * log_y_pred\n    sum_product = np.sum(product)\n    loss = -sum_product\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[np.ndarray, list[tuple[np.ndarray, np.ndarray, np.ndarray]]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[np.ndarray, list[tuple[np.ndarray, np.ndarray, np.ndarray]]]\n        A tuple containing the final activation AL and the list of caches.\n    \"\"\"\n    caches = []\n    A_prev = X\n    W_layers = [int(key[1:]) for key in parameters.keys() if key.startswith('W')]\n    L = max(W_layers) if W_layers else 0\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        if l == L:\n            A = 1 / (1 + np.exp(-Z))\n        else:\n            A = np.maximum(0, Z)\n        caches.append((A_prev, Z, A))\n        A_prev = A\n    AL = A\n    AL_rounded = np.round(AL, 4)\n    AL_list = AL_rounded.tolist()\n    return (AL_list, caches)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    params_np = np.array(params)\n    grads_np = np.array(grads)\n    m_np = np.array(m)\n    u_np = np.array(u)\n    new_m = beta1 * m_np + (1 - beta1) * grads_np\n    new_u = np.maximum(beta2 * u_np, np.abs(grads_np))\n    denominator = 1 - beta1 ** t\n    step = learning_rate / denominator * (new_m / (new_u + epsilon))\n    new_params = params_np - step\n    new_t = t + 1\n    new_params_rounded = np.round(new_params, 6).tolist()\n    new_m_rounded = np.round(new_m, 6).tolist()\n    new_u_rounded = np.round(new_u, 6).tolist()\n    return (new_params_rounded, new_m_rounded, new_u_rounded, new_t)"}
{"task_id": 80, "completion_id": 0, "solution": "import numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    w = np.asarray(w)\n    grad_w = np.asarray(grad_w)\n    g_squared = grad_w ** 2\n    E_grad = (1 - rho) * g_squared\n    RMS_grad = np.sqrt(E_grad + eps)\n    RMS_delta = np.sqrt(eps)\n    adaptive_lr = RMS_delta / RMS_grad\n    delta_w = adaptive_lr * grad_w\n    new_w = w - delta_w\n    rounded_new_w = np.round(new_w, 4)\n    return rounded_new_w.tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    \u03b5 = 1e-15\n    A2_clipped = np.clip(A2, \u03b5, 1 - \u03b5)\n    log_a = np.log(A2_clipped)\n    log_1a = np.log(1 - A2_clipped)\n    term1 = Y * log_a\n    term2 = (1 - Y) * log_1a\n    sum_terms = term1 + term2\n    sum_total = np.sum(sum_terms)\n    m = Y.size\n    J = -1 / m * sum_total\n    return round(J, 6)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    numerator = np.sum((y - y_pred) * h_pred)\n    denominator = np.sum(h_pred ** 2)\n    if denominator == 0:\n        gamma = 1.0\n    else:\n        gamma = numerator / denominator\n    gamma_rounded = round(gamma, 4)\n    return gamma_rounded"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed = zip(*predictions)\n    result = []\n    for sample_predictions in transposed:\n        counts = Counter(sample_predictions)\n        max_count = max(counts.values())\n        candidates = [k for (k, v) in counts.items() if v == max_count]\n        selected = min(candidates)\n        result.append(selected)\n    return result"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    sp = np.logaddexp(0.0, z)\n    sp_rounded = np.round(sp, 4)\n    if isinstance(z, (int, float)) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        return float(sp_rounded)\n    else:\n        return sp_rounded.tolist()"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == 'relu':\n        A = np.maximum(0, Z)\n    elif activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        raise ValueError('Invalid activation function')\n    A_rounded = np.round(A, 4)\n    A_list = A_rounded.tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    assert A.shape == (W.shape[0], A_prev.shape[1]), f'Shape mismatch: {A.shape} vs {(W.shape[0], A_prev.shape[1])}'\n    return (A_list, (linear_cache, activation_cache))"}
{"task_id": 92, "completion_id": 0, "solution": "import numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_array = np.array(Z)\n    A = np.maximum(0, Z_array)\n    return (A.tolist(), Z_array.tolist())"}
{"task_id": 94, "completion_id": 0, "solution": "from collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    counts = Counter(neighbors_targets)\n    max_count = max(counts.values())\n    max_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n    return min(max_labels)"}
{"task_id": 97, "completion_id": 0, "solution": "import numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return 1.0 if Z > 0 else 0.0\n    elif isinstance(Z, np.ndarray):\n        if Z.ndim == 0:\n            return 1.0 if Z > 0 else 0.0\n        else:\n            derivative = np.where(Z > 0, 1.0, 0.0)\n            return derivative.tolist()\n    else:\n        arr = np.array(Z)\n        derivative = np.where(arr > 0, 1.0, 0.0)\n        return derivative.tolist()"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    mismatches = np.sum(actual_arr != predicted_arr)\n    total = len(actual_arr)\n    if total == 0:\n        return 0.0\n    error_rate = mismatches / total\n    return round(error_rate, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    max_x = np.max(x, axis=axis, keepdims=True)\n    x_shifted = x - max_x\n    exp_x = np.exp(x_shifted)\n    sum_exp = np.sum(exp_x, axis=axis, keepdims=True)\n    softmax_result = exp_x / sum_exp\n    rounded_result = np.round(softmax_result, 4)\n    return rounded_result.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    x = np.asarray(x)\n    exponent = -(x - mean) ** 2 / (2 * sigma ** 2)\n    exp_part = np.exp(exponent)\n    normalization = 1.0 / (np.sqrt(2 * np.pi) * sigma)\n    pdf = exp_part * normalization\n    pdf_rounded = np.round(pdf, 5)\n    return pdf_rounded.tolist()"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_correction = 1.0 / (1.0 - beta1 ** t)\n    m_hat = m_t * m_correction\n    v_correction = 1.0 / (1.0 - beta2 ** t)\n    v_hat = v_t * v_correction\n    denominator = np.sqrt(v_hat) + epsilon\n    theta_new = theta - alpha * (m_hat / denominator)\n    theta_new_rounded = np.round(theta_new, 6).tolist()\n    m_new_rounded = np.round(m_t, 6).tolist()\n    v_new_rounded = np.round(v_t, 6).tolist()\n    new_t = t + 1\n    return (theta_new_rounded, m_new_rounded, v_new_rounded, new_t)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K) * 0.1\n    H = np.random.randn(K, M) * 0.1\n\n    def compute_loss(X, W, H, alpha):\n        recon = W @ H\n        loss = np.linalg.norm(X - recon) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        return loss\n    current_loss = compute_loss(X, W, H, alpha)\n    if current_loss < tol:\n        pass\n    else:\n        for _ in range(max_iter):\n            Ht = H.T\n            H_Ht = H @ Ht\n            A = H_Ht + alpha * np.eye(K)\n            b = X @ Ht\n            new_W = np.linalg.solve(A, b)\n            Wt = new_W.T\n            Wt_W = Wt @ new_W\n            A = Wt_W + alpha * np.eye(K)\n            b = Wt @ X\n            new_H = np.linalg.solve(A, b)\n            (W, H) = (new_W, new_H)\n            current_loss = compute_loss(X, W, H, alpha)\n            if current_loss < tol:\n                break\n    X_hat = W @ H\n    X_hat_rounded = np.round(X_hat, 4)\n    return X_hat_rounded.tolist()"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(c, 0) for c in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to text, ignoring padding tokens (0).\"\"\"\n    filtered = []\n    for idx in indices:\n        if idx != 0:\n            char = inverse_vocab.get(idx, '')\n            filtered.append(char)\n    return ''.join(filtered)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs the model on encoded text and decodes the prediction.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_np = np.array(encoded, dtype=np.int32).reshape(1, -1)\n    predictions = model.predict(encoded_np)\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 112, "completion_id": 0, "solution": "import re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\"\"\"\n    words = re.findall('[a-zA-Z]+', text)\n    if not words:\n        return []\n    lower_words = [word.lower() for word in words]\n    counts = Counter(lower_words)\n    tokens = []\n    for (word, count) in counts.items():\n        token = Token(word)\n        token.count = count\n        tokens.append(token)\n    tokens.sort(key=lambda x: (-x.count, x.word))\n    return tokens"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    results = []\n    for example in examples:\n        output = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output)\n        print(f'input: {example}')\n        print(f'output: {output_str}')\n        results.append(output_str)\n    return results"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    lambda_ = 1.0507009873554805\n    mask = x >= 0\n    if not derivative:\n        positive = x * lambda_\n        negative = alpha * (np.exp(x) - 1) * lambda_\n        output = np.where(mask, positive, negative)\n    else:\n        positive_deriv = lambda_\n        negative_deriv = alpha * np.exp(x) * lambda_\n        output = np.where(mask, positive_deriv, negative_deriv)\n    rounded = np.round(output, 6)\n    if rounded.ndim == 0:\n        return [rounded.item()]\n    else:\n        return rounded.tolist()"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    y = y.ravel()\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T.dot(p - y)\n    gradient = gradient.reshape(-1, 1)\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 116, "completion_id": 0, "solution": "import numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    n = len(y)\n    parent_mean = np.mean(y)\n    mse_parent = np.mean((y - parent_mean) ** 2)\n    total_child_mse = 0.0\n    for s in splits:\n        m = len(s)\n        child_mean = np.mean(s)\n        child_mse = np.mean((s - child_mean) ** 2)\n        weight = m / n\n        total_child_mse += child_mse * weight\n    delta_mse = mse_parent - total_child_mse\n    return round(delta_mse, 4)"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    if not params or not grads or len(params) != len(grads):\n        return []\n    new_params = []\n    for (p, g) in zip(params, grads):\n        new_p = p - alpha * g\n        new_p_rounded = np.round(new_p, 4)\n        new_params.append(new_p_rounded.tolist())\n    return new_params"}
{"task_id": 120, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_np = np.insert(X_np, 0, 1, axis=1)\n    (m, n) = X_np.shape\n    w = np.random.uniform(low=-1 / math.sqrt(n), high=1 / math.sqrt(n), size=(n, 1))\n    for _ in range(n_iterations):\n        y_pred = X_np.dot(w)\n        error = y_pred - y_np\n        gradient = X_np.T.dot(error) / m\n        w = w - learning_rate * gradient\n    result = w.flatten().round(4).tolist()\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    ones_col = np.ones((X_np.shape[0], 1))\n    X_augmented = np.hstack((ones_col, X_np))\n    X_pseudo = np.linalg.pinv(X_augmented)\n    w = X_pseudo @ y_np\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    y = np.asarray(y)\n    unique = np.unique(y)\n    n_unique = len(unique)\n    category_to_index = {category: idx for (idx, category) in enumerate(unique)}\n    result = []\n    for element in y:\n        row = [0] * n_unique\n        row[category_to_index[element]] = 1\n        result.append(row)\n    return result"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    X_np = np.array(X)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y)\n    C = X_np.shape[1]\n    if gamma is None:\n        gamma = 1.0 / C\n    dot_product = np.dot(X_np, Y_np.T)\n    scaled_dot = gamma * dot_product\n    scaled_dot_plus_c0 = scaled_dot + c0\n    kernel_matrix = scaled_dot_plus_c0 ** d\n    rounded_kernel = np.round(kernel_matrix, 4)\n    result = rounded_kernel.tolist()\n    return result"}
{"task_id": 127, "completion_id": 0, "solution": "def confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to\n        the *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    all_labels = y_true + y_pred\n    unique_labels = sorted(list(set(all_labels)))\n    class_to_index = {label: idx for (idx, label) in enumerate(unique_labels)}\n    C = len(unique_labels)\n    matrix = [[0 for _ in range(C)] for _ in range(C)]\n    for (true, pred) in zip(y_true, y_pred):\n        row = class_to_index[true]\n        col = class_to_index[pred]\n        matrix[row][col] += 1\n    return matrix"}
{"task_id": 129, "completion_id": 0, "solution": "from itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    it = cycle(sequence)\n    return list(islice(it, samples))"}
{"task_id": 130, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    filtered = [t for t in transitions if t[0] == state and t[1] == action]\n    if not filtered:\n        return []\n    next_states = [t[3] for t in filtered]\n    counts = Counter(next_states)\n    total = len(next_states)\n    probabilities = []\n    for (ns, cnt) in counts.items():\n        prob = cnt / total\n        rounded_prob = round(prob, 4)\n        probabilities.append([ns, rounded_prob])\n    probabilities.sort(key=lambda x: x[0])\n    return probabilities"}
{"task_id": 131, "completion_id": 0, "solution": "def get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n    sequence = _SHARED_SEQUENCES[uid]\n    if not sequence:\n        return None\n    seq_len = len(sequence)\n    if i >= 0:\n        normalized_i = i\n    else:\n        normalized_i = seq_len + i\n    if normalized_i < 0 or normalized_i >= seq_len:\n        return None\n    return sequence[normalized_i]"}
{"task_id": 132, "completion_id": 0, "solution": "import numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, (int, float)) and (not isinstance(z, bool)):\n        return z\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        raise TypeError('Input must be a scalar, list, tuple, or ndarray.')"}
{"task_id": 133, "completion_id": 0, "solution": "def one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    for sequence in X_train:\n        for token in sequence:\n            if token < 0 or token >= vocab_length:\n                return -1\n    Y_train = []\n    for sequence in X_train:\n        one_hot_sequence = []\n        for token in sequence:\n            hot_vector = [0] * vocab_length\n            hot_vector[token] = 1\n            one_hot_sequence.append(hot_vector)\n        Y_train.append(one_hot_sequence)\n    return Y_train"}
{"task_id": 134, "completion_id": 0, "solution": "def best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    if not payoff_probs:\n        return (-1.0, -1)\n    for p in payoff_probs:\n        if p < 0 or p > 1:\n            return (-1.0, -1)\n    max_p = max(payoff_probs)\n    for (index, p) in enumerate(payoff_probs):\n        if p == max_p:\n            best_index = index\n            break\n    return (max_p, best_index)"}
{"task_id": 136, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Normalise by their sum along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: -1).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    max_val = z.max(axis=axis, keepdims=True)\n    shifted = z - max_val\n    exp_shifted = np.exp(shifted)\n    sum_exp = exp_shifted.sum(axis=axis, keepdims=True)\n    result = exp_shifted / sum_exp\n    rounded = np.round(result, 4)\n    return rounded.tolist()"}
{"task_id": 138, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    n = len(y_true)\n    if n == 0:\n        return -1\n    correct = sum((yt == yp for (yt, yp) in zip(y_true, y_pred)))\n    accuracy = correct / n\n    return round(accuracy, 4)"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (i, j) = q.popleft()\n        for (dx, dy) in dirs:\n            (ni, nj) = (i + dx, j + dy)\n            if 0 <= ni < n and 0 <= nj < n:\n                if fire_time[ni][nj] > fire_time[i][j] + 1:\n                    fire_time[ni][nj] = fire_time[i][j] + 1\n                    q.append((ni, nj))\n    visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    visited[0][0] = 0\n    q = deque()\n    q.append((0, 0))\n    agent_dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (x, y) = q.popleft()\n        current_time = visited[x][y]\n        if x == n - 1 and y == n - 1:\n            return current_time\n        for (dx, dy) in agent_dirs:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] == '#':\n                    continue\n                if fire_time[nx][ny] <= current_time + 1:\n                    continue\n                if visited[nx][ny] > current_time + 1:\n                    visited[nx][ny] = current_time + 1\n                    q.append((nx, ny))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement the k-Nearest Neighbors classifier.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    m = X_test.shape[0]\n    n = X_train.shape[0]\n    if metric == 'euclidean':\n        X_test_reshaped = X_test[:, np.newaxis]\n        X_train_reshaped = X_train[np.newaxis, :]\n        differences = X_test_reshaped - X_train_reshaped\n        squared_diff = differences ** 2\n        sum_squared = squared_diff.sum(axis=2)\n        distances = np.sqrt(sum_squared)\n    elif metric == 'manhattan':\n        X_test_reshaped = X_test[:, np.newaxis]\n        X_train_reshaped = X_train[np.newaxis, :]\n        differences = X_test_reshaped - X_train_reshaped\n        abs_diff = np.abs(differences)\n        sum_abs = abs_diff.sum(axis=2)\n        distances = sum_abs\n    elif metric == 'cosine':\n        dot_products = X_test @ X_train.T\n        norms_test = np.linalg.norm(X_test, axis=1)\n        norms_train = np.linalg.norm(X_train, axis=1)\n        cosine_similarities = dot_products / (norms_test[:, np.newaxis] * norms_train[np.newaxis, :])\n        distances = 1 - cosine_similarities\n    knn_indices = np.zeros((m, k), dtype=int)\n    for i in range(m):\n        dist_row = distances[i]\n        k_smallest = np.argpartition(dist_row, k - 1)[:k]\n        knn_indices[i] = k_smallest\n    y_knn = np.zeros(m, dtype=y_train.dtype)\n    for i in range(m):\n        indices = knn_indices[i]\n        y_group = y_train[indices]\n        (unique_labels, label_counts) = np.unique(y_group, return_counts=True)\n        max_count = np.max(label_counts)\n        candidates = unique_labels[label_counts == max_count]\n        predicted_label = np.min(candidates)\n        y_knn[i] = predicted_label\n    return y_knn"}
{"task_id": 143, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    if derivative:\n        return np.where(x >= 0, 1, alpha)\n    else:\n        return np.where(x >= 0, x, alpha * x)"}
{"task_id": 144, "completion_id": 0, "solution": "import numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    diff = np.abs(actual - predicted)\n    mae = np.mean(diff)\n    if np.isnan(mae):\n        return -1\n    return round(mae, 4)"}
{"task_id": 147, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    if np.all(y_train == y_train[0]):\n        return [int(y_train[0])] * len(X_test)\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(epochs):\n        linear = np.dot(X_train, w) + b\n        h = sigmoid(linear)\n        gradient_w = X_train.T @ (h - y_train) / n_samples\n        gradient_b = (h - y_train).mean()\n        w -= learning_rate * gradient_w\n        b -= learning_rate * gradient_b\n    linear_test = np.dot(X_test, w) + b\n    h_test = sigmoid(linear_test)\n    y_pred = (h_test >= 0.5).astype(int).tolist()\n    return y_pred"}
{"task_id": 148, "completion_id": 0, "solution": "from typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not 0 <= alpha <= 1 or not data:\n        return -1\n    if alpha == 0:\n        first = round(data[0], 4)\n        return [first] * len(data)\n    elif alpha == 1:\n        return [round(x, 4) for x in data]\n    else:\n        n = len(data)\n        smoothed = [0.0] * n\n        smoothed[0] = data[0]\n        for k in range(1, n):\n            smoothed[k] = (1 - alpha) * smoothed[k - 1] + alpha * data[k]\n        return [round(x, 4) for x in smoothed]"}
{"task_id": 152, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if len(y_true) == 0:\n        return -1\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 154, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    sum_X = np.sum(X ** 2, axis=1)\n    sum_Y = np.sum(Y ** 2, axis=1)\n    dot_product = X @ Y.T\n    distance_matrix = sum_X[:, np.newaxis] + sum_Y[np.newaxis, :] - 2 * dot_product\n    kernel_matrix = np.exp(-gamma * distance_matrix)\n    kernel_matrix_rounded = np.round(kernel_matrix, decimals=6)\n    return kernel_matrix_rounded.tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.asarray(state)\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1_relu = np.maximum(0, h1)\n    h2 = np.dot(h1_relu, weights['W2']) + weights['b2']\n    h2_relu = np.maximum(0, h2)\n    action = np.dot(h2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    rounded_action = np.round(action_tanh, 4).tolist()\n    return rounded_action"}
{"task_id": 157, "completion_id": 0, "solution": "def accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return -1 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or -1 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if len(y_true) == 0 and len(y_pred) == 0:\n        return 0.0\n    n = len(y_true)\n    matches = 0\n    for (yt, yp) in zip(y_true, y_pred):\n        if yt == yp:\n            matches += 1\n    accuracy = matches / n\n    return round(accuracy, 4)"}
{"task_id": 158, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if fit_intercept:\n        intercept = np.ones((X.shape[0], 1))\n        X = np.hstack([intercept, X])\n    Xt = X.T\n    XtX = Xt @ X\n    n = X.shape[1]\n    A = alpha * np.identity(n)\n    if fit_intercept:\n        A[0, 0] = 0\n    matrix = XtX + A\n    inv_matrix = np.linalg.inv(matrix)\n    beta = inv_matrix @ Xt @ y\n    rounded_beta = np.round(beta, 4)\n    return rounded_beta.tolist()"}
{"task_id": 159, "completion_id": 0, "solution": "import numpy as np\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    d = x_i.shape[0]\n    term1 = d * np.log(2 * np.pi)\n    log_det = np.linalg.slogdet(sigma)[1]\n    diff = x_i - mu\n    a = np.linalg.solve(sigma, diff)\n    quad_term = np.dot(diff, a)\n    sum_terms = term1 + log_det + quad_term\n    log_pdf = -0.5 * sum_terms\n    return round(log_pdf, 4)"}
{"task_id": 161, "completion_id": 0, "solution": "import numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"Predict binary class labels using a Factorization Machine.\"\"\"\n    m = X.shape[0]\n    labels = []\n    V_squared = V ** 2\n    for x in X:\n        linear_part = w0 + np.dot(w, x)\n        xV = np.dot(x, V)\n        term1 = np.sum(xV ** 2)\n        x_squared = x ** 2\n        term2 = np.dot(x_squared, V_squared)\n        term2_total = np.sum(term2)\n        interaction_part = 0.5 * (term1 - term2_total)\n        score = linear_part + interaction_part\n        labels.append(1 if score >= 0 else -1)\n    return labels"}
{"task_id": 162, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, 'Shapes of Y_hat and Y must match.'\n    m = Y_hat.shape[0]\n    log_term = np.log(Y_hat + epsilon)\n    loss = -(1.0 / m) * np.sum(Y * log_term)\n    gradient = (Y_hat - Y) / m\n    rounded_loss = round(loss, 4)\n    rounded_gradient = np.round(gradient, 4).tolist()\n    return (rounded_loss, rounded_gradient)"}
{"task_id": 163, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    n = len(X_np)\n    d = degree\n    feature_matrix = np.zeros((n, d + 1))\n    for i in range(n):\n        x = X_np[i]\n        feature_matrix[i] = [x ** k for k in range(d + 1)]\n    if l1_ratio == 0:\n        m = feature_matrix.shape[1]\n        XTX = feature_matrix.T @ feature_matrix\n        penalty = np.zeros((m, m))\n        penalty[1:, 1:] = reg_factor * (1 - l1_ratio) * np.eye(m - 1)\n        XTX += penalty\n        XTy = feature_matrix.T @ y_np\n        \u03b2 = np.linalg.inv(XTX) @ XTy\n    else:\n        m = feature_matrix.shape[1]\n        \u03b2 = np.zeros(m)\n        for _ in range(n_iterations):\n            se = feature_matrix @ \u03b2 - y_np\n            gradient = np.zeros(m)\n            for j in range(m):\n                if j == 0:\n                    gradient_j = 2 / n * se.sum()\n                else:\n                    se_grad = 2 / n * np.dot(se, feature_matrix[:, j])\n                    if \u03b2[j] > 0:\n                        sign = 1\n                    elif \u03b2[j] < 0:\n                        sign = -1\n                    else:\n                        sign = 0\n                    pen_grad = reg_factor * ((1 - l1_ratio) * \u03b2[j] + l1_ratio * sign)\n                    gradient_j = se_grad + pen_grad\n                gradient[j] = gradient_j\n            \u03b2 -= learning_rate * gradient\n    y_pred = feature_matrix @ \u03b2\n    y_pred_list = [round(y, 4) for y in y_pred]\n    return y_pred_list"}
{"task_id": 164, "completion_id": 0, "solution": "import numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"Compute the binary classification log-loss (cross-entropy loss).\n    \n    Parameters\n    ----------\n    actual : list or array-like of shape (n_samples,)\n        Ground-truth labels, each element is 0 or 1.\n    predicted : list or array-like of shape (n_samples,)\n        Predicted probabilities, each element is a real number in [0, 1].\n    \n    Returns\n    -------\n    float\n        The average log-loss rounded to six decimal places.\n    \"\"\"\n    \u03b5 = 1e-15\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    predicted_clipped = np.clip(predicted, \u03b5, 1 - \u03b5)\n    log_p = np.log(predicted_clipped)\n    log_1p = np.log(1 - predicted_clipped)\n    term1 = actual * log_p\n    term2 = (1 - actual) * log_1p\n    sum_terms = term1 + term2\n    total = np.sum(sum_terms)\n    N = len(actual)\n    average = total / N\n    log_loss = -average\n    return round(log_loss, 6)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    N = len(x)\n    if N == 0:\n        return 0.0\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    diff = x != y\n    sum_diff = np.sum(diff)\n    distance = sum_diff / N\n    return round(distance, 4)"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    unique_labels = sorted(list(set(y_train)))\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_to_idx = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = [label_to_idx[label] for label in y_train]\n    X_train_np = np.array(X_train)\n    X_train_np = np.hstack([X_train_np, np.ones((X_train_np.shape[0], 1))])\n    X_test_np = np.array(X_test)\n    X_test_np = np.hstack([X_test_np, np.ones((X_test_np.shape[0], 1))])\n    n_features = X_train_np.shape[1]\n    w = np.zeros((n_features, 1))\n    for epoch in range(epochs):\n        indices = np.random.permutation(len(X_train_np))\n        X_shuffled = X_train_np[indices]\n        y_shuffled = np.array(y_train_mapped)[indices]\n        for i in range(0, len(X_shuffled), batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, w)\n            a = 1 / (1 + np.exp(-z))\n            gradient = np.dot(X_batch.T, a - y_batch) / len(X_batch)\n            w = w - learning_rate * gradient\n    z = np.dot(X_test_np, w)\n    a = 1 / (1 + np.exp(-z))\n    predicted_classes = (a >= 0.5).astype(int)\n    original_predictions = [unique_labels[pred] for pred in predicted_classes]\n    return original_predictions"}
{"task_id": 172, "completion_id": 0, "solution": "import numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    if isinstance(z, (int, float, np.number)):\n        derivative = 1 - np.tanh(z) ** 2\n        return round(derivative, 4)\n    else:\n        z_array = np.array(z)\n        derivative = 1 - np.tanh(z_array) ** 2\n        rounded_derivative = np.round(derivative, 4)\n        return rounded_derivative.tolist()"}
{"task_id": 173, "completion_id": 0, "solution": "def alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    total = 0\n    for (c, t) in zip(candidate, target):\n        total += abs(ord(c) - ord(t))\n    return total"}
{"task_id": 174, "completion_id": 0, "solution": "import numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    loss = -np.mean(labels * np.log(predictions))\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    correct = np.sum(predicted_classes == true_classes)\n    accuracy = correct / predictions.shape[0]\n    loss_rounded = round(loss, 4)\n    accuracy_rounded = round(accuracy, 4)\n    return (loss_rounded, accuracy_rounded)"}
{"task_id": 175, "completion_id": 0, "solution": "import numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    weights = np.array(weights)\n    sum_squares = np.sum(weights ** 2)\n    penalty = C * sum_squares\n    return round(penalty, 4)"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    pbest = positions.copy()\n    initial_spheres = np.array([np.sum(p ** 2) for p in pbest])\n    initial_best_idx = np.argmin(initial_spheres)\n    gbest = pbest[initial_best_idx].copy()\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.random()\n            r2 = rng.random()\n            velocities[i] = w * velocities[i] + c1 * r1 * (pbest[i] - positions[i]) + c2 * r2 * (gbest - positions[i])\n            new_position = positions[i] + velocities[i]\n            new_position_clipped = np.clip(new_position, -1, 1)\n            positions[i] = new_position_clipped\n            new_sphere = np.sum(new_position_clipped ** 2)\n            current_pbest_sphere = np.sum(pbest[i] ** 2)\n            if new_sphere < current_pbest_sphere:\n                pbest[i] = new_position_clipped\n        pbest_spheres = np.array([np.sum(p ** 2) for p in pbest])\n        best_pbest_idx = np.argmin(pbest_spheres)\n        new_gbest = pbest[best_pbest_idx]\n        new_gbest_sphere = np.sum(new_gbest ** 2)\n        current_gbest_sphere = np.sum(gbest ** 2)\n        if new_gbest_sphere < current_gbest_sphere:\n            gbest = new_gbest\n    best_value = np.sum(gbest ** 2)\n    return round(best_value, 4)"}
{"task_id": 179, "completion_id": 0, "solution": "import re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    if lowercase:\n        line = line.lower()\n    if filter_punctuation:\n        punct_pattern = re.escape(string.punctuation)\n        line = re.sub('[' + punct_pattern + ']', '', line)\n    line = re.sub(' {2,}', ' ', line)\n    line = line.strip()\n    if not line:\n        return []\n    return list(line)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        effective_k = n_train\n    else:\n        effective_k = k\n    for test_point in X_test:\n        distances = []\n        for (xi, yi) in zip(X_train, y_train):\n            dist_sq = sum(((test_point[i] - xi[i]) ** 2 for i in range(len(test_point))))\n            distances.append((dist_sq, yi))\n        distances.sort(key=lambda x: x[0])\n        selected = distances[:effective_k]\n        y_neighbors = [y for (d, y) in selected]\n        if task == 'classification':\n            counter = Counter(y_neighbors)\n            max_count = max(counter.values())\n            candidates = [label for (label, count) in counter.items() if count == max_count]\n            predicted_label = min(candidates)\n            predictions.append(predicted_label)\n        elif task == 'regression':\n            average = sum(y_neighbors) / len(y_neighbors)\n            predictions.append(round(average, 4))\n        else:\n            raise ValueError(\"Task must be 'classification' or 'regression'.\")\n    return predictions"}
{"task_id": 182, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"Compute the polynomial kernel matrix for given X, Y, and degree.\n    \n    Parameters:\n        X (list or ndarray): A 2D array of shape (n, p).\n        Y (list or ndarray): A 2D array of shape (m, p).\n        degree (int, optional): The polynomial degree. Default is 2.\n        \n    Returns:\n        list: A nested list representing the kernel matrix of shape (n, m), with each element rounded to four decimal places.\n        \n    Raises:\n        -1: If any input is invalid.\n    \"\"\"\n    try:\n        X = np.array(X)\n        Y = np.array(Y)\n    except:\n        return -1\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    K = (X @ Y.T) ** degree\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 183, "completion_id": 0, "solution": "import numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        raise ValueError('Invalid weight shape. Must be 2D or 4D.')\n    limit = np.sqrt(6.0 / fan_in)\n    weights = np.random.uniform(-limit, limit, weight_shape)\n    return weights"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini(y):\n        count_0 = np.sum(y == 0)\n        count_1 = np.sum(y == 1)\n        n = len(y)\n        if n == 0:\n            return 0.0\n        p0 = count_0 / n\n        p1 = count_1 / n\n        return 1 - (p0 ** 2 + p1 ** 2)\n\n    def build_tree(X, y, current_depth, max_depth):\n        if len(X) == 0:\n            return {'is_leaf': True, 'prediction': 0}\n        if len(np.unique(y)) == 1:\n            return {'is_leaf': True, 'prediction': y[0]}\n        if max_depth is not None and current_depth >= max_depth:\n            majority = np.bincount(y).argmax()\n            return {'is_leaf': True, 'prediction': majority}\n        best_gain = -1\n        best_feature = None\n        best_threshold = None\n        best_left_X = None\n        best_left_y = None\n        best_right_X = None\n        best_right_y = None\n        n_features = X.shape[1]\n        for feature in range(n_features):\n            column = X[:, feature]\n            sorted_col = np.sort(column)\n            unique = np.unique(sorted_col)\n            if len(unique) == 1:\n                continue\n            for i in range(len(unique) - 1):\n                threshold = (unique[i] + unique[i + 1]) / 2\n                left_mask = column <= threshold\n                left_X = X[left_mask]\n                left_y = y[left_mask]\n                right_X = X[~left_mask]\n                right_y = y[~left_mask]\n                G_parent = gini(y)\n                G_left = gini(left_y) if len(left_y) > 0 else 0\n                G_right = gini(right_y) if len(right_y) > 0 else 0\n                n_total = len(y)\n                n_left = len(left_y)\n                n_right = len(right_y)\n                if n_total == 0:\n                    continue\n                weighted_G = n_left / n_total * G_left + n_right / n_total * G_right\n                gain = G_parent - weighted_G\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_X = left_X\n                    best_left_y = left_y\n                    best_right_X = right_X\n                    best_right_y = right_y\n        if best_gain > 0:\n            left_child = None\n            right_child = None\n            if len(best_left_X) == 0:\n                majority = np.bincount(y).argmax()\n                left_child = {'is_leaf': True, 'prediction': majority}\n            else:\n                left_child = build_tree(best_left_X, best_left_y, current_depth + 1, max_depth)\n            if len(best_right_X) == 0:\n                majority = np.bincount(y).argmax()\n                right_child = {'is_leaf': True, 'prediction': majority}\n            else:\n                right_child = build_tree(best_right_X, best_right_y, current_depth + 1, max_depth)\n            return {'is_leaf': False, 'feature': best_feature, 'threshold': best_threshold, 'left': left_child, 'right': right_child}\n        else:\n            majority = np.bincount(y).argmax()\n            return {'is_leaf': True, 'prediction': majority}\n\n    def predict_sample(sample, tree):\n        if tree['is_leaf']:\n            return tree['prediction']\n        else:\n            feature = tree['feature']\n            threshold = tree['threshold']\n            if sample[feature] <= threshold:\n                return predict_sample(sample, tree['left'])\n            else:\n                return predict_sample(sample, tree['right'])\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    predictions = []\n    for sample in X_test:\n        predictions.append(predict_sample(sample, tree))\n    return predictions"}
{"task_id": 186, "completion_id": 0, "solution": "import numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Computes the arithmetic mean of the training targets and returns this mean\n    for each test sample, rounded to four decimal places.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    y_mean = np.mean(y_train)\n    m_samples = len(X_test)\n    if m_samples == 0:\n        return []\n    predictions = np.full(m_samples, y_mean)\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()"}
{"task_id": 188, "completion_id": 0, "solution": "import math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    if max_epsilon <= min_epsilon:\n        return -1\n    if min_epsilon < 0:\n        return -1\n    if decay_rate <= 0:\n        return -1\n    if step < 0:\n        return -1\n    exponent = -decay_rate * step\n    exponential = math.exp(exponent)\n    term = (max_epsilon - min_epsilon) * exponential\n    epsilon = min_epsilon + term\n    epsilon = max(epsilon, min_epsilon)\n    epsilon_rounded = round(epsilon, 4)\n    return epsilon_rounded"}
{"task_id": 193, "completion_id": 0, "solution": "import numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        arr = np.array(z)\n        result = arr / (1 + np.abs(arr))\n        rounded = np.round(result, 4)\n        return rounded.tolist()\n    else:\n        result = z / (1 + abs(z))\n        rounded = round(result, 4)\n        return rounded"}
{"task_id": 194, "completion_id": 0, "solution": "import numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    if G is None:\n        new_G = [0.0 for _ in weights]\n    else:\n        new_G = list(G)\n    for i in range(len(weights)):\n        new_G[i] += gradients[i] ** 2\n    new_weights = []\n    for i in range(len(weights)):\n        denom = np.sqrt(new_G[i] + eps)\n        update = learning_rate * gradients[i] / denom\n        new_weight = weights[i] - update\n        new_weights.append(round(new_weight, 6))\n    new_G_rounded = [round(g, 6) for g in new_G]\n    return (new_weights, new_G_rounded)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        return [[0.0 for _ in range(phi[0].shape[1])] for _ in range(V)]\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=np.float64)\n    for d in range(len(phi)):\n        current_phi = phi[d]\n        current_corpus = corpus[d]\n        for n in range(current_phi.shape[0]):\n            v = current_corpus[n]\n            beta[v] += current_phi[n, :]\n    for t in range(T):\n        sum_t = beta[:, t].sum()\n        if sum_t == 0:\n            beta[:, t] = 0.0\n        else:\n            beta[:, t] /= sum_t\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 199, "completion_id": 0, "solution": "import numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    mask = X < value\n    y_left = y[mask].tolist()\n    y_right = y[~mask].tolist()\n    return (y_left, y_right)"}
{"task_id": 200, "completion_id": 0, "solution": "import numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    weights_array = np.asarray(weights)\n    flattened = weights_array.flatten()\n    sum_abs = np.sum(np.abs(flattened))\n    l1 = C * sum_abs\n    return round(l1, 4)"}
{"task_id": 204, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for item in data:\n        if item is None:\n            count += 1\n        elif isinstance(item, (float, np.floating)) and math.isnan(item):\n            count += 1\n    return count"}
{"task_id": 205, "completion_id": 0, "solution": "def get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    unique_ids = []\n    seen = set()\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            env_id = item['id']\n            if env_id not in seen:\n                unique_ids.append(env_id)\n                seen.add(env_id)\n    return unique_ids"}
{"task_id": 207, "completion_id": 0, "solution": "def convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    (KH, KW) = filter_shape\n    (SH, SW) = stride\n    (PH, PW) = padding\n    if img_height <= 0 or img_width <= 0 or KH <= 0 or (KW <= 0) or (SH <= 0) or (SW <= 0) or (PH < 0) or (PW < 0):\n        return -1\n    num_h = img_height + 2 * PH - KH\n    num_w = img_width + 2 * PW - KW\n    if num_h < 0 or num_w < 0:\n        return -1\n    if num_h % SH != 0 or num_w % SW != 0:\n        return -1\n    OH = num_h // SH + 1\n    OW = num_w // SW + 1\n    if OH <= 0 or OW <= 0:\n        return -1\n    return (OH, OW)"}
{"task_id": 208, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        categories = []\n        for label in labels:\n            if label not in categories:\n                categories.append(label)\n    else:\n        label_to_index = {label: idx for (idx, label) in enumerate(categories)}\n        for label in labels:\n            if label not in label_to_index:\n                return -1\n    label_to_index = {label: idx for (idx, label) in enumerate(categories)}\n    n = len(labels)\n    c = len(categories)\n    matrix = np.zeros((n, c), dtype=int)\n    for i in range(n):\n        label = labels[i]\n        idx = label_to_index[label]\n        matrix[i, idx] = 1\n    return matrix.tolist()"}
{"task_id": 211, "completion_id": 0, "solution": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    mismatches = sum((1 for (a, p) in zip(actual, predicted) if a != p))\n    total = len(actual)\n    acc = 1.0 - mismatches / total\n    return round(acc, 4)"}
{"task_id": 212, "completion_id": 0, "solution": "from collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    if 'input' not in graph or 'output_realtime' not in graph:\n        return []\n    best = {}\n    best['input'] = (0, ['input'])\n    queue = deque()\n    queue.append(('input', ['input']))\n    while queue:\n        (current_node, current_path) = queue.popleft()\n        current_distance = len(current_path) - 1\n        if best.get(current_node, (float('inf'), []))[1] != current_path:\n            continue\n        for neighbor in graph.get(current_node, []):\n            new_distance = current_distance + 1\n            new_path = current_path + [neighbor]\n            if neighbor not in best:\n                best[neighbor] = (new_distance, new_path)\n                queue.append((neighbor, new_path))\n            else:\n                (existing_distance, existing_path) = best[neighbor]\n                if new_distance < existing_distance:\n                    best[neighbor] = (new_distance, new_path)\n                    queue.append((neighbor, new_path))\n                elif new_distance == existing_distance:\n                    if new_path < existing_path:\n                        best[neighbor] = (new_distance, new_path)\n                        queue.append((neighbor, new_path))\n    if 'output_realtime' in best:\n        return best['output_realtime'][1]\n    else:\n        return []"}
{"task_id": 213, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    ndim = len(shape)\n    fan_in = 0\n    fan_out = 0\n    if ndim == 1:\n        fan_in = shape[0]\n        fan_out = shape[0]\n    elif ndim == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        out_channels = shape[0]\n        in_channels = shape[1]\n        receptive_field_size = 1\n        for dim in shape[2:]:\n            receptive_field_size *= dim\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    if fan_in == 0:\n        return []\n    std = np.sqrt(2.0 / fan_in)\n    np.random.seed(42)\n    W = np.random.normal(0, std, shape)\n    return W.tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    prob = 1 / (1 + np.exp(-predicted))\n    z = -actual * predicted\n    sigmoid_z = 1 / (1 + np.exp(z))\n    gradient = actual * sigmoid_z\n    hessian = prob * (1 - prob)\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(e, a) for e in z]\n    elif z >= 0:\n        return z\n    else:\n        return a * z"}
{"task_id": 225, "completion_id": 0, "solution": "import numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    if formula not in ['htk', 'slaney']:\n        raise AssertionError(\"formula must be 'htk' or 'slaney'\")\n    original_is_scalar = np.isscalar(hz)\n    hz_array = np.asarray(hz)\n    if formula == 'htk':\n        mel = 2595 * np.log10(1 + hz_array / 700)\n    else:\n        mel = 1127 * np.log(1 + hz_array / 700)\n    rounded_mel = np.round(mel, 4)\n    if original_is_scalar:\n        return [rounded_mel.item()]\n    else:\n        return rounded_mel.tolist()"}
{"task_id": 227, "completion_id": 0, "solution": "import numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    state_np = np.array(state)\n    N = len(state_np)\n    if len(W1) != N:\n        return -1\n    H1 = len(W1[0])\n    for row in W1:\n        if len(row) != H1:\n            return -1\n    if len(W2) != H1:\n        return -1\n    H2 = len(W2[0])\n    for row in W2:\n        if len(row) != H2:\n            return -1\n    if isinstance(W3[0], list):\n        if len(W3) != H2:\n            return -1\n        for row in W3:\n            if len(row) != 1:\n                return -1\n    elif len(W3) != H2:\n        return -1\n    h1 = np.tanh(np.dot(state_np, W1))\n    h2 = np.tanh(np.dot(h1, W2))\n    W3_np = np.array(W3)\n    v = h2.dot(W3_np)\n    rounded_v = round(v, 4)\n    return rounded_v"}
{"task_id": 231, "completion_id": 0, "solution": "def is_natural(hand: list[int]) -> bool:\n    \"\"\"Determines if the given hand is a natural blackjack.\n    \n    A natural blackjack is a two-card hand consisting of an Ace (1) and a ten-valued card (10).\n    \"\"\"\n    if len(hand) != 2:\n        return False\n    return hand.count(1) == 1 and hand.count(10) == 1"}
{"task_id": 232, "completion_id": 0, "solution": "import numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if x.ndim != 2:\n        return False\n    if not np.all((x == 0) | (x == 1)):\n        return False\n    if not np.all(x.sum(axis=1) == 1):\n        return False\n    return True"}
{"task_id": 234, "completion_id": 0, "solution": "import numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    if not successes or not failures:\n        return -1\n    if len(successes) != len(failures):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    samples = []\n    for i in range(len(successes)):\n        a = prior_alpha + successes[i]\n        b = prior_beta + failures[i]\n        sample = np.random.beta(a, b)\n        samples.append(sample)\n    best_arm = np.argmax(samples)\n    return best_arm"}
{"task_id": 237, "completion_id": 0, "solution": "from typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    total = 0\n    num_aces = 0\n    for card in hand:\n        if card in ['J', 'Q', 'K']:\n            total += 10\n        elif card == 'A':\n            total += 11\n            num_aces += 1\n        else:\n            total += int(card)\n    while total > 21 and num_aces > 0:\n        total -= 10\n        num_aces -= 1\n    return total if total <= 21 else 0"}
{"task_id": 239, "completion_id": 0, "solution": "def determine_padding(filter_shape: tuple[int, int], output_shape: str='same') -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    else:\n        (h, w) = filter_shape\n        pad_h_total = h - 1\n        pad_top = pad_h_total // 2\n        pad_bottom = pad_h_total - pad_top\n        pad_w_total = w - 1\n        pad_left = pad_w_total // 2\n        pad_right = pad_w_total - pad_left\n        return ((pad_top, pad_bottom), (pad_left, pad_right))"}
{"task_id": 240, "completion_id": 0, "solution": "def create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    obs2num = {}\n    act2num = {}\n    if obs_encoder is not None:\n        obs2num = obs_encoder.copy()\n    elif obs_ids:\n        obs2num = {id: idx for (idx, id) in enumerate(obs_ids)}\n    num2obs = {v: k for (k, v) in obs2num.items()}\n    if act_encoder is not None:\n        act2num = act_encoder.copy()\n    elif action_ids:\n        act2num = {id: idx for (idx, id) in enumerate(action_ids)}\n    num2act = {v: k for (k, v) in act2num.items()}\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}"}
{"task_id": 242, "completion_id": 0, "solution": "import math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\"\"\"\n    for a in range(len(pull_counts)):\n        if pull_counts[a] == 0:\n            return a\n    current_step_plus_1 = current_step + 1\n    log_term = math.log(current_step_plus_1)\n    max_score = -math.inf\n    best_arm = 0\n    for a in range(len(ev_estimates)):\n        denominator = pull_counts[a]\n        sqrt_term = math.sqrt(2 * log_term / denominator)\n        score = ev_estimates[a] + C * sqrt_term\n        if score > max_score:\n            max_score = score\n            best_arm = a\n    return best_arm"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    sum_s = sum(state)\n    action_probs = [round(1 / 3, 4), round(1 / 3, 4), round(1 / 3, 4)]\n    state_value = 64.0 * sum_s if sum_s > 0 else 0.0\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 244, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple):\n        return -1\n    if len(shape) == 0:\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n    if not isinstance(sparsity, (int, float)):\n        return -1\n    if isinstance(sparsity, bool):\n        return -1\n    if not 0 <= sparsity <= 1:\n        return -1\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_tensor = (tensor >= threshold).astype(float)\n    return binary_tensor.tolist()"}
{"task_id": 248, "completion_id": 0, "solution": "import numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    p = np.sum(y_train) / len(y_train)\n    n_samples = X_test.shape[0]\n    if n_samples == 0:\n        return []\n    predictions = np.full(n_samples, p)\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()"}
