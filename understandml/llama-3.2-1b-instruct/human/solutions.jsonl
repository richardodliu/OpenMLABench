{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the dot product of a matrix and a vector.\n\n    Args:\n        a (list[list[int|float]]): The matrix.\n        b (list[int|float]): The vector.\n\n    Returns:\n        list[int|float]: The dot product of the matrix and vector, or -1 if the dimensions are incompatible.\n    \"\"\"\n    if len(a[0]) != len(b):\n        return -1\n    result = [0] * len(b)\n    for (i, elem) in enumerate(b):\n        result[i] += a[0][i] * elem\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n\n    Args:\n        a (list[list[int|float]]): The input matrix.\n\n    Returns:\n        list[list[int|float]]: The transpose of the input matrix.\n\n    Raises:\n        ValueError: If the input matrix is not square.\n    \"\"\"\n    if len(a) != len(a[0]):\n        raise ValueError('Input matrix must be square')\n    return [[row[i] for row in a] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshape a given matrix into a specified shape.\n\n    Args:\n        a (list[list[int|float]]): The input matrix to be reshaped.\n        new_shape (tuple[int, int]): The desired shape of the output matrix.\n\n    Returns:\n        list[list[int|float]]: The reshaped matrix if possible, otherwise an empty list.\n    \"\"\"\n    if not isinstance(a, list) or not all((isinstance(row, list) for row in a)):\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column, based on a given mode.\n\n    Args:\n        matrix (list[list[float]]): The input matrix.\n        mode (str): The mode, either 'row' or 'column'.\n\n    Returns:\n        list[float]: A list of means according to the specified mode.\n    \"\"\"\n    if not matrix:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(col) / len(col) for col in zip(*matrix)]\n    else:\n        raise ValueError(\"Invalid mode. Mode must be either 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar.\n\n    Args:\n        matrix (list[list[int|float]]): The input matrix.\n        scalar (int|float): The scalar to multiply the matrix by.\n\n    Returns:\n        list[list[int|float]]: The result of the scalar multiplication.\n    \"\"\"\n    if not all((isinstance(row) for row in matrix)):\n        raise ValueError('Input matrix must be a list of lists')\n    if not isinstance(scalar, (int, float)):\n        raise ValueError('Scalar must be an integer or float')\n    result = []\n    for row in matrix:\n        new_row = []\n        for element in row:\n            new_row.append(element * scalar)\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix.\n\n    Args:\n        matrix (list[list[float|int]]): A 2x2 matrix.\n\n    Returns:\n        list[float]: A list containing the eigenvalues of the input matrix, sorted from highest to lowest.\n    \"\"\"\n    eigenvalues = [matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0], matrix[0][0] * matrix[1][0], 0, 0]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    This function transforms a given matrix A using the operation T^{-1}AS, \n    where T and S are invertible matrices. It returns the transformed matrix.\n    \n    Args:\n        A (list[list[int|float]]): The input matrix to be transformed.\n        T (list[list[int|float]]): The invertible transformation matrix.\n        S (list[list[int|float]]): The inverse of the transformation matrix.\n    \n    Returns:\n        list[list[int|float]]: The transformed matrix.\n    \"\"\"\n    if not is_invertible_matrix(T) or not is_invertible_matrix(S):\n        return -1\n    transformed_A = np.dot(np.linalg.inv(S), np.dot(A, T))\n    transformed_A = np.round(transformed_A, 4)\n    transformed_A = transformed_A.tolist()\n    return transformed_A\ndef is_invertible_matrix(matrix: list[list[int | float]]):\n    \"\"\"\n    This function checks if a given matrix is invertible.\n    \n    Args:\n        matrix (list[list[int|float]]): The input matrix.\n    \n    Returns:\n        bool: True if the matrix is invertible, False otherwise.\n    \"\"\"\n    if len(matrix) != len(matrix[0]):\n        return False\n    if not matrix:\n        return False\n    for row in matrix:\n        if len(row) != len(matrix[0]):\n            return False\n    for row in matrix:\n        if 0 in row:\n            return False\n        for col in row:\n            if col == 0:\n                return False\n    return True"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n\n    Args:\n        matrix (list[list[float]]): A 2x2 matrix.\n\n    Returns:\n        list[list[float]]: The inverse of the input matrix, or None if the matrix is not invertible.\n    \"\"\"\n    if len(matrix) != 2 or len(matrix[0]) != 2:\n        return None\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_a = d / det - b / det\n    inv_b = a / det - c / det\n    return [[inv_a, inv_b], [inv_b, inv_a]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    This function multiplies two matrices.\n\n    Args:\n    a (list[list[int|float]]): The first matrix.\n    b (list[list[int|float]]): The second matrix.\n\n    Returns:\n    list[list[int|float]]: The product of the two matrices. If the matrices cannot be multiplied, returns -1.\n    \"\"\"\n    if not isinstance(a, list) or not isinstance(b, list):\n        raise ValueError('Both inputs must be lists')\n    if not all((isinstance(row, list) for row in a)) or not all((isinstance(row, list) for row in b)):\n        raise ValueError('Both inputs must be lists of lists')\n    (rows_a, cols_a, rows_b, cols_b) = (len(a), len(a[0]), len(b[0]), len(b[0]))\n    if cols_a != len(b[0]):\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n\n    Args:\n        vectors (list[list[float]]): A list of lists, where each inner list represents a feature with its observations.\n\n    Returns:\n        list[list[float]]: A covariance matrix as a list of lists.\n    \"\"\"\n    data = np.array(vectors)\n    means = np.mean(data, axis=0)\n    covariance_matrix = np.cov(data, rowvar=False)\n    covariance_matrix = covariance_matrix.tolist()\n    return covariance_matrix\nvectors = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Jacobi method.\n\n    Args:\n    A (np.ndarray): The coefficient matrix.\n    b (np.ndarray): The constant vector.\n    n (int): The number of iterations.\n\n    Returns:\n    list: A list of approximate solutions x after each iteration.\n    \"\"\"\n    x = np.zeros_like(b)\n    for _ in range(n):\n        r = b - np.dot(A, x)\n        x_new = x.copy()\n        for _ in range(n):\n            x_new = x_new - np.dot(A, x_new) / np.dot(A[x_new], A[x_new])\n            if np.allclose(x_new, x):\n                break\n            x = x_new\n        x = np.round(x, 4)\n    x = x.tolist()\n    return x\nA = np.array([[3, 1, -2], [1, 4, -5], [-2, -5, 11]])\nb = np.array([9, 5, -6])\nn = 10\nx = solve_jacobi(A, b, n)"}
{"task_id": 12, "completion_id": 0, "solution": "import math\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the Singular Value Decomposition (SVD) of a 2x2 matrix using the jacobian method.\n\n    Args:\n        A (np.ndarray): A 2x2 matrix.\n\n    Returns:\n        tuple: A tuple containing the singular values and the left and right singular vectors.\n    \"\"\"\n    A_T_A = np.dot(A.T, A)\n    A_T_A_minus_A_squared = A_T_A - np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A_minus_A_squared)\n    eigenvalues = np.sort(eigenvalues)[::-1]\n    singular_values = np.sqrt(eigenvalues)\n    left_singular_vectors = np.linalg.solve(A_T_A_minus_A_squared, np.linalg.solve(A_T_A, A))\n    right_singular_vectors = np.linalg.solve(A_T_A_minus_A_squared, np.linalg.inv(A_T_A))\n    singular_values = [round(val, 4) for val in singular_values]\n    left_singular_vectors = [round(vec, 4) for vec in left_singular_vectors]\n    right_singular_vectors = [round(vec, 4) for vec in right_singular_vectors]\n    return (singular_values, left_singular_vectors, right_singular_vectors)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's Expansion method.\n\n    Args:\n        matrix (list[list[int|float]]): A 4x4 matrix represented as a list of lists.\n\n    Returns:\n        float: The determinant of the matrix.\n    \"\"\"\n    if len(matrix) == 4:\n        return matrix[0][0]\n    det = 0\n    for i in range(4):\n        minor = [row[:i] + row[i + 1:] for row in matrix[1:]]\n        minor_det = determinant_4x4(minor)\n        det += (-1) ** i * matrix[0][i] * minor_det\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n\n    Args:\n    X (list[list[float]]): Matrix of features.\n    y (list[float]): Vector of target values.\n\n    Returns:\n    list[float]: Coefficients of the linear regression model.\n    \"\"\"\n    mean_X = np.mean(X, axis=0)\n    mean_y = np.mean(y)\n    dev_X = X - mean_X\n    dev_y = y - mean_y\n    cov_X = np.cov(dev_X, rowvar=False)\n    cov_y = np.cov(dev_y, rowvar=False)\n    inv_cov = np.linalg.inv(cov_X)\n    beta = np.dot(inv_cov, dev_X)\n    beta = [round(coeff, 4) for coeff in beta]\n    return beta"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Performs linear regression using gradient descent.\n\n    Parameters:\n    X (np.ndarray): Features with a column of ones for the intercept.\n    y (np.ndarray): Target values.\n    alpha (float): Learning rate.\n    iterations (int): Number of iterations.\n\n    Returns:\n    np.ndarray: Coefficients of the linear regression model.\n    \"\"\"\n    X = X.reshape(-1, 1)\n    coefficients = np.ones(X.shape[1])\n    for _ in range(iterations):\n        predicted = np.dot(X, coefficients)\n        error = y - predicted\n        gradients = np.dot(X.T, error) / X.shape[0]\n        coefficients -= alpha * gradients\n    coefficients = np.round(coefficients, 4)\n    return coefficients.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Performs feature scaling on a dataset using both standardization and min-max normalization.\n\n    Args:\n        data (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature.\n\n    Returns:\n        tuple[list[list[float]], list[list[float]]]: Two 2D lists, one scaled by standardization and one by min-max normalization.\n    \"\"\"\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError('Input data must be a 2D NumPy array')\n    standardized_data = (data - data.mean(axis=0)) / data.std(axis=0)\n    min_max_data = (standardized_data - min(standardized_data, axis=0)) / (standardized_data.max(axis=0) - min(standardized_data, axis=0))\n    standardized_data = standardized_data.tolist()\n    min_max_data = min_max_data.tolist()\n    return (standardized_data, min_max_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    This function implements the k-Means clustering algorithm to group points into k clusters.\n\n    Args:\n    points (list[tuple[float, float]): A list of points, where each point is a tuple of coordinates (e.g., (x, y) for 2D points)\n    k (int): The number of clusters to form\n    initial_centroids (list[tuple[float, float]): A list of initial centroid points, each a tuple of coordinates\n    max_iterations (int): The maximum number of iterations to perform\n\n    Returns:\n    list[tuple[float, float]: A list of the final centroids of the clusters, where each centroid is rounded to the nearest fourth decimal\n    \"\"\"\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids)\n    iterations = 0\n    while iterations < max_iterations:\n        distances = np.sqrt(((points_array - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n        iterations += 1\n    centroids = [round(centroid, 4) for centroid in centroids]\n    return centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k: int, shuffle: bool=True, random_seed: int=None) -> list:\n    \"\"\"\n    Generate train-test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    X (np.ndarray): The feature data.\n    y (np.ndarray): The target data.\n    k (int): The number of folds.\n    shuffle (bool, optional): Whether to shuffle the data before splitting. Defaults to True.\n    random_seed (int, optional): The seed for random number generation. Defaults to None.\n\n    Returns:\n    list: A list of tuples, where each tuple contains the indices for a fold.\n    \"\"\"\n    if k <= 0:\n        raise ValueError('k must be a positive integer')\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    n_folds = n_samples // k\n    folds = []\n    for i in range(k):\n        start = i * n_folds + 1\n        end = (i + 1) * n_folds + 1\n        if shuffle:\n            np.random.shuffle(X[start:end])\n        (X_train, X_test) = (X[start:end], X[end:])\n        folds.append((start, end))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Performs Principal Component Analysis (PCA) on a given dataset.\n\n    Args:\n    - data (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature.\n    - k (int): The number of principal components to return.\n\n    Returns:\n    - list[list[float]]: A list of lists, where each sublist contains the standardized features for the corresponding principal component.\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Builds a decision tree for classification using recursive binary splitting based on entropy and information gain.\n\n    Args:\n        examples (list[dict]): A list of examples, where each example is a dictionary of attribute-value pairs.\n        attributes (list[str]): A list of attribute names.\n        target_attr (str): The target attribute to split on.\n\n    Returns:\n        dict: A nested dictionary representing the decision tree.\n    \"\"\"\n    if not examples:\n        return {}\n    example = examples[0]\n    target_values = [example.get(target_attr, [None])]\n    tree = {}\n    for attribute in attributes:\n        values = [example.get(attribute, [None])]\n        left = [example_ for example_ in examples if example_[attribute] < values[0]]\n        right = [example_ for example_ in examples if example_[attribute] >= values[0]]\n        left_tree = learn_decision_tree(left, attributes, target_attr)\n        right_tree = learn_decision_tree(right, attributes, target_attr)\n        tree[attribute] = {'left': left_tree, 'right': right_tree}\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": ""}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid activation function.\n\n    Args:\n        z (float): The input value.\n\n    Returns:\n        float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    return 1 / (1 + math.exp(-z))"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax activation for a given list of scores.\n\n    Args:\n        scores (list[float]): A list of scores.\n\n    Returns:\n        list[float]: The softmax values as a list, each rounded to four decimal places.\n    \"\"\"\n    total = sum(scores)\n    softmax_values = []\n    for score in scores:\n        exp_score = math.exp(score - total)\n        softmax_value = exp_score / total\n        softmax_value = round(softmax_value, 4)\n        softmax_values.append(softmax_value)\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n\n    Args:\n    features (list[list[float]]): A list of feature vectors (each vector representing multiple features for an example).\n    labels (list[int]): A list of true binary labels.\n    weights (list[float]): A list of weights for each feature.\n    bias (float): The bias for the neuron.\n\n    Returns:\n    tuple[list[float], float]: A tuple containing the predicted probabilities after sigmoid activation and the mean squared error between the predicted probabilities and the true labels.\n    \"\"\"\n    features = np.array(features)\n    labels = np.array(labels)\n    weights = np.array(weights)\n    bias = bias\n    feature_dot_product = np.dot(features, weights)\n    sigmoid = 1 / (1 + np.exp(-feature_dot_product))\n    predicted_probabilities = sigmoid\n    mse = np.mean((predicted_probabilities - labels) ** 2)\n    predicted_probabilities = np.round(predicted_probabilities, 4)\n    mse = np.round(mse, 4)\n    return (predicted_probabilities, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    \"\"\"\n    Simulates a single neuron with sigmoid activation and implements backpropagation to update the weights and bias.\n\n    Args:\n    features (np.ndarray): A list of feature vectors.\n    labels (np.ndarray): A list of true binary labels.\n    initial_weights (np.ndarray): Initial weights of the neuron.\n    initial_bias (float): Initial bias of the neuron.\n    learning_rate (float): Learning rate for gradient descent.\n    epochs (int): Number of epochs to train the neuron.\n\n    Returns:\n    tuple: A tuple containing the updated weights, bias, and a list of MSE values for each epoch.\n    \"\"\"\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        predicted = np.dot(features, weights) + bias\n        error = np.mean((labels - predicted) ** 2)\n        d_weights = np.dot(features.T, labels - predicted) * np.dot(features, weights)\n        d_bias = np.mean(labels - predicted)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n        weights = np.round(weights, 4)\n        bias = np.round(bias, 4)\n        mse_values.append(round(error, 4))\n    return (weights, bias, mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        \"\"\"Add two values and compute gradients\"\"\"\n        new_data = self.data + other.data\n        new_grad = self.grad + other.grad\n        return Value(new_data, self._children, self._op + '+' + other._op)\n\n    def __mul__(self, other):\n        \"\"\"Multiply two values and compute gradients\"\"\"\n        new_data = self.data * other.data\n        new_grad = self.grad * other.grad\n        return Value(new_data, self._children, self._op + '*' + other._op)\n\n    def __repr__(self):\n        return f'Value({self.data}, {self._op})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix P from basis B to basis C.\n\n    Args:\n        B (list[list[int]]): The basis vectors in basis B.\n        C (list[list[int]]): The basis vectors in basis C.\n\n    Returns:\n        list[list[float]]: The transformation matrix P from basis B to basis C.\n    \"\"\"\n    B_array = np.array(B)\n    C_array = np.array(C)\n    P = np.dot(C_array, B_array.T)\n    P = np.round(P, 4)\n    P_list = P.tolist()\n    return P_list"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Singular Value Decomposition (SVD) of a 2x2 matrix.\n\n    Parameters:\n    A (np.ndarray): A 2x2 matrix.\n\n    Returns:\n    U (np.ndarray): The left singular vectors of A.\n    S (np.ndarray): The diagonal matrices of the singular values.\n    V (np.ndarray): The right singular vectors of A.\n    \"\"\"\n    A_T_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    singular_values = np.sqrt(eigenvalues)\n    U = np.array([eigenvectors[:, 0] / np.linalg.norm(eigenvectors[:, 0]), eigenvectors[:, 1] / np.linalg.norm(eigenvectors[:, 1])])\n    V = eigenvectors\n    U = U.reshape(2, 2)\n    V = V.reshape(2, 2)\n    return (U.tolist(), singular_values.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffle the samples in two numpy arrays, X and y, while maintaining the corresponding order.\n\n    Parameters:\n    X (numpy array): The input data array.\n    y (numpy array): The target variable array.\n    seed (int, optional): The seed for reproducibility. Defaults to None.\n\n    Returns:\n    tuple: A tuple containing the shuffled X and y arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X = X.reshape(-1, 1)\n    y = y.reshape(-1, 1)\n    (X, y) = np.random.permutation((X, y))\n    X = X.reshape(X.shape[0, :])\n    y = y.reshape(y.shape[0, :])\n    return (X.tolist(), y.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Batch iterator for dataset.\n\n    Parameters:\n    X (numpy array): Input data.\n    y (numpy array, optional): Target variable. Defaults to None.\n    batch_size (int, optional): Batch size. Defaults to 64.\n\n    Yields:\n    tuple: Batch of (X, y) pairs.\n    \"\"\"\n    if y is not None:\n        X = X.reshape(-1, batch_size)\n        y = y.reshape(-1, 1)\n        for i in range(0, len(X), batch_size):\n            yield (X[i:i + batch_size], y[i:i + batch_size])\n    else:\n        for i in range(0, len(X), batch_size):\n            yield (X[i:i + batch_size],)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide a dataset based on whether the value of a specified feature is greater than or equal to a given threshold.\n\n    Parameters:\n    X (numpy array): The input dataset.\n    feature_i (int): The index of the feature to divide on.\n    threshold (float): The threshold value.\n\n    Returns:\n    tuple: A tuple containing two numpy arrays, the first with samples that meet the condition and the second with samples that do not.\n    \"\"\"\n    X = X.reshape(-1, X.shape[1])\n    mask = X[:, feature_i] >= threshold\n    X_meeting_condition = X[mask]\n    X_not_meeting_condition = X[~mask]\n    return (X_meeting_condition, X_not_meeting_condition)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for a given dataset.\n\n    Parameters:\n    X (2D numpy array): Input dataset.\n    degree (int): Degree of the polynomial features to be generated.\n\n    Returns:\n    Y (2D numpy array): New 2D numpy array with polynomial features up to the specified degree.\n    \"\"\"\n    n_features = X.shape[1]\n    Y = np.zeros((X.shape[0], degree + 1))\n    for i in range(n_features):\n        for j in range(1, degree + 1):\n            coefficient = np.sum(X[:, i] * np.power(X[:, i + 1:], j)) / np.power(X[:, i + 1:], degree + 1)\n            Y[:, j] = coefficient\n    return Y.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    X (numpy array): The input dataset.\n    y (numpy array): The target variable.\n    n_subsets (int): The number of subsets to generate.\n    replacements (bool): Whether to create subsets with replacements. Default is True.\n    seed (int): The seed for the random number generator. Default is 42.\n\n    Returns:\n    list: A list of n_subsets random subsets of the dataset, where each subset is a tuple of (X_subset, y_subset).\n    \"\"\"\n    np.random.seed(seed)\n    X = X.reshape(-1, 1)\n    y = y.reshape(-1, 1)\n    subsets = []\n    for i in range(n_subsets):\n        if replacements:\n            subset = np.random.choice(X, size=(n_subsets, 1), replace=True)\n        else:\n            subset = np.random.choice(X, size=(n_subsets, 1))\n        subsets.append((subset, y[i]))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding of nominal values.\n\n    Parameters:\n    x (numpy array): Input array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. Defaults to None.\n\n    Returns:\n    numpy array: One-hot encoded array.\n    \"\"\"\n    if n_col is None:\n        n_col = len(x)\n    x = x.reshape(-1, n_col)\n    encoded = np.argmax(x, axis=1)\n    encoded = encoded.reshape(x.shape)\n    return encoded"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n\n    Parameters:\n    x (numpy array): Input 1D array.\n\n    Returns:\n    numpy array: Diagonal matrix representation of the input array.\n    \"\"\"\n    return np.array([x]).T"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n\n    Parameters:\n    y_true (numpy array): The true labels.\n    y_pred (numpy array): The predicted labels.\n\n    Returns:\n    float: The accuracy score as a float, rounded to the nearest 4th decimal.\n    \"\"\"\n    accuracy = 1 - np.mean(np.abs(y_true - y_pred)) / np.mean(y_true)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n\n    Parameters:\n    X (2D numpy array): The input dataset.\n    Y (2D numpy array, optional): The optional dataset to calculate the correlation matrix with. If not provided, the correlation matrix will be calculated with itself.\n\n    Returns:\n    correlation_matrix (2D numpy array): The correlation matrix as a 2D numpy array.\n    \"\"\"\n    if Y is None:\n        correlation_matrix = np.corrcoef(X.T, X.T)\n    else:\n        correlation_matrix = np.corrcoef(X.T, Y.T)\n    correlation_matrix = np.round(correlation_matrix, 4)\n    correlation_matrix_list = correlation_matrix.tolist()\n    return correlation_matrix_list"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list) -> list:\n    \"\"\"\n    Compute the log-softmax of a 1D numpy array of scores.\n\n    Args:\n        scores (list): A 1D numpy array of scores.\n\n    Returns:\n        list: The log-softmax of the input scores, rounded to the nearest 4th decimal.\n    \"\"\"\n    reshaped_scores = np.reshape(scores, (-1, num_classes))\n    log_softmax = np.log(np.sum(reshaped_scores, axis=1, keepdims=True))\n    log_softmax = np.round(log_softmax, 4)\n    log_softmax = log_softmax.reshape(scores.shape)\n    return log_softmax"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        \"\"\"\n        Set the input shape of the layer.\n        \n        Parameters:\n        shape (tuple): The input shape of the layer.\n        \"\"\"\n        self.input_shape = shape\n\n    def layer_name(self):\n        \"\"\"\n        Get the name of the layer.\n        \n        Returns:\n        str: The name of the layer.\n        \"\"\"\n        return self.__class__.__name__\n\n    def parameters(self):\n        \"\"\"\n        Get the number of parameters in the layer.\n        \n        Returns:\n        int: The number of parameters in the layer.\n        \"\"\"\n        return 0\n\n    def forward_pass(self, X, training):\n        \"\"\"\n        Perform the forward pass of the layer.\n        \n        Parameters:\n        X (numpy.ndarray): The input to the layer.\n        training (bool): Whether the layer is in training mode.\n        \n        Returns:\n        numpy.ndarray: The output of the layer.\n        \"\"\"\n        if self.trainable:\n            self.W = np.random.uniform(0, 1, (X.shape[1], self.n_units)).astype(np.float32)\n            self.w0 = np.zeros((X.shape[0], self.n_units)).astype(np.float32)\n        else:\n            self.W = None\n            self.w0 = None\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, X, training, output):\n        \"\"\"\n        Perform the backward pass of the layer.\n        \n        Parameters:\n        X (numpy.ndarray): The input to the layer.\n        training (bool): Whether the layer is in training mode.\n        output (numpy.ndarray): The output of the layer.\n        \n        Returns:\n        tuple: The gradients of the loss with respect to the input and weights.\n        \"\"\"\n        if self.trainable:\n            dW = np.dot(X.T, output - X) * self.W.T\n            dw = np.sum(dW, axis=0, keepdims=True)\n            dW = np.where(training, dW, np.zeros_like(dW))\n            dW0 = np.sum(dW, axis=0)\n            return (dW, dW0)\n        else:\n            return (None, None)\n\n    def output_shape(self):\n        \"\"\"\n        Get the shape of the output of the layer.\n        \n        Returns:\n        tuple: The shape of the output.\n        \"\"\"\n        return (self.n_units,)\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        \"\"\"\n        Initialize the Dense layer.\n        \n        Parameters:\n        n_units (int): The number of neurons in the layer.\n        input_shape (tuple): The input shape of the layer.\n        \"\"\"\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n\n    def set_input_shape(self, shape):\n        \"\"\"\n        Set the input shape of the layer.\n        \n        Parameters:\n        shape (tuple): The input shape of the layer.\n        \"\"\"\n        self.input_shape = shape\n\n    def forward_pass(self, X, training):\n        \"\"\"\n        Perform the forward pass of the layer.\n        \n        Parameters:\n        X (numpy.ndarray): The input to the layer.\n        training (bool): Whether the layer is in training mode.\n        \n        Returns:\n        numpy.ndarray: The output of the layer.\n        \"\"\"\n        return self.forward_pass(X, training)\n\n    def backward_pass(self, X, training, output):\n        \"\"\"\n        Perform the backward pass of the layer.\n        \n        Parameters:\n        X (numpy.ndarray): The input to the layer.\n        training (bool): Whether the layer is in training mode.\n        output (numpy.ndarray): The output of the layer.\n        \n        Returns:\n        tuple: The gradients of the loss with respect to the input and weights.\n        \"\"\"\n        return self.backward_pass(X, training, output)\n\n    def output_shape(self):\n        \"\"\"\n        Get the shape of the output of the layer.\n        \n        Returns:\n        tuple: The shape of the output.\n        \"\"\"\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int) -> np.ndarray:\n    \"\"\"\n    This function performs a 2D convolution operation on the input matrix using a specified kernel, padding, and stride.\n\n    Args:\n        input_matrix (np.ndarray): The input matrix to be convolved.\n        kernel (np.ndarray): The convolution kernel.\n        padding (int): The amount of padding to be applied to the input matrix.\n        stride (int): The stride of the convolution operation.\n\n    Returns:\n        np.ndarray: The output of the convolution operation, reshaped to a 2D array.\n    \"\"\"\n    output_height = (input_matrix.shape[0] + 2 * padding) // 2\n    output_width = (input_matrix.shape[1] + 2 * padding) // 2\n    input_array = input_matrix.reshape(-1, input_matrix.shape[1], input_matrix.shape[2])\n    output_array = np.convolve2d(input_array, kernel, mode='valid', padding='same')\n    output_array = output_array.reshape(output_height, output_width, input_matrix.shape[2])\n    output_array = output_array.round().astype(np.float32)\n    return output_array"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Applies the Rectified Linear Unit (ReLU) activation function to a single float input.\n\n    Args:\n        z (float): The input value to be passed through the ReLU function.\n\n    Returns:\n        float: The output of the ReLU function.\n    \"\"\"\n    if z > 0:\n        return z\n    else:\n        return 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n\n    Parameters:\n    X (np.ndarray): Feature matrix.\n    w (np.ndarray): Coefficients.\n    y_true (np.ndarray): True labels.\n    alpha (float): Regularization parameter.\n\n    Returns:\n    float: The Ridge loss value.\n    \"\"\"\n    y_pred = np.dot(X, w)\n    squared_errors = (y_true - y_pred) ** 2\n    squared_errors += alpha * np.sum(w ** 2)\n    mse = np.mean(squared_errors)\n    return mse"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input z.\n\n    Args:\n        z (float): The input value to be passed through the Leaky ReLU function.\n        alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        float|int: The output of the Leaky ReLU function.\n    \"\"\"\n    if z < 0:\n        return alpha * z\n    else:\n        return z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors x1 and x2.\n\n    Parameters:\n    x1 (numpy array): The first input vector.\n    x2 (numpy array): The second input vector.\n\n    Returns:\n    float: The linear kernel between x1 and x2.\n    \"\"\"\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    kernel = np.dot(x1, x2)\n    return kernel"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric given two numpy arrays: y_true and y_pred.\n\n    Parameters:\n    y_true (numpy array): The true binary labels.\n    y_pred (numpy array): The predicted binary labels.\n\n    Returns:\n    float: The precision metric.\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix into its Reduced Row Echelon Form (RREF).\n\n    Args:\n        matrix (list of lists): The input matrix to be converted.\n\n    Returns:\n        list of lists: The RREF of the input matrix.\n    \"\"\"\n    arr = np.array(matrix)\n    n = len(arr)\n    (i, j) = (0, 0)\n    while i < n:\n        max_row = i\n        for k in range(i + 1, n):\n            if abs(arr[k, j]) > abs(arr[max_row, j]):\n                max_row = k\n        if arr[max_row, j] == 0:\n            i += 1\n            continue\n        arr[[i, max_row], :] = arr[[max_row, i], :]\n        pivot = arr[i, j]\n        arr[i, j] = 1\n        for k in range(n):\n            if k != j:\n                factor = arr[k, j] / pivot\n                arr[k, j] = arr[k, j] * factor\n                arr[[i, k], :] = arr[[i, k], :]\n        j += 1\n    return arr.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Adam optimization algorithm.\n\n    Parameters:\n    f (function): The objective function to be optimized.\n    grad (function): The gradient of the objective function.\n    x0 (numpy array): Initial parameter values.\n    learning_rate (float, optional): The step size. Defaults to 0.001.\n    beta1 (float, optional): Exponential decay rate for the first moment estimates. Defaults to 0.9.\n    beta2 (float, optional): Exponential decay rate for the second moment estimates. Defaults to 0.999.\n    epsilon (float, optional): Small constant for numerical stability. Defaults to 1e-8.\n    num_iterations (int, optional): Number of iterations to run the optimizer. Defaults to 1000.\n\n    Returns:\n    numpy array: Optimized parameter values.\n    \"\"\"\n    params = np.array(x0)\n    gradients = []\n    updates = []\n    for _ in range(num_iterations):\n        m = np.mean(params)\n        v = np.mean((params - m) ** 2)\n        beta1 = beta1 ** (num_iterations - _ - 1)\n        beta2 = beta2 ** (num_iterations - _ - 1)\n        epsilon = epsilon\n        s = m * (1 - beta1) + beta1 * (params - m)\n        s_hat = s / (1 - beta1)\n        alpha = learning_rate / (1 - beta1)\n        updates.append((alpha * (s - s_hat) / v, s_hat))\n        params -= alpha * updates[-1][0]\n        params += updates[-1][1]\n        params = np.round(params, 4)\n    return params.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Lasso Regression using Gradient Descent with L1 regularization.\n\n    Parameters:\n    X (np.array): Feature matrix\n    y (np.array): Target vector\n    alpha (float, optional): Regularization parameter. Defaults to 0.1.\n    learning_rate (float, optional): Learning rate for gradient descent. Defaults to 0.01.\n    max_iter (int, optional): Maximum number of iterations. Defaults to 1000.\n    tol (float, optional): Tolerance for convergence. Defaults to 1e-4.\n\n    Returns:\n    tuple: Weight matrix and bias vector\n    \"\"\"\n    w = np.zeros(X.shape[1])\n    b = 0\n    learning_rate = learning_rate\n    iter = 0\n    while iter < max_iter:\n        y_pred = np.dot(X, w) + b\n        grad_w = 1 / len(y) * np.dot(X.T, y_pred - y)\n        grad_w += alpha * np.sign(w) * np.ones_like(w)\n        w -= learning_rate * grad_w\n        b -= learning_rate * np.mean(y_pred)\n        if np.linalg.norm(grad_w) < tol:\n            break\n        iter += 1\n    w = np.round(w, 4)\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n\n    Args:\n    source (str): The source string.\n    target (str): The target string.\n\n    Returns:\n    int: The minimum number of edits required to transform the source string into the target string.\n    \"\"\"\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1))\n    for i in range(m + 1):\n        dp[i, 0] = i\n    for j in range(n + 1):\n        dp[0, j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i, j] = dp[i - 1, j - 1]\n            else:\n                dp[i, j] = 1 + min(dp[i - 1, j], dp[i, j - 1], dp[i - 1, j - 1])\n    return dp[m, n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric in binary classification.\n\n    Args:\n        y_true (list): A list of true binary labels (0 or 1) for the dataset.\n        y_pred (list): A list of predicted binary labels (0 or 1) from the model.\n\n    Returns:\n        float: The recall value rounded to three decimal places.\n    \"\"\"\n    tp = sum((1 for (true, pred) in zip(y_true, y_pred) if true == 1 and pred == 1))\n    fn = sum((1 for (true, pred) in zip(y_true, y_pred) if true == 0 and pred == 0))\n    tp_sum = sum(y_true)\n    total_sum = sum(y_true)\n    if total_sum == 0:\n        return 0.0\n    recall = round(tp / (tp_sum + fn), 3)\n    return recall"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    This function implements a simple Recurrent Neural Network (RNN) cell.\n\n    Args:\n    input_sequence (list[list[float]]): The input sequence of vectors.\n    initial_hidden_state (list[float]): The initial hidden state of the RNN.\n    Wx (list[list[float]]): The weight matrix for input-to-hidden connections.\n    Wh (list[list[float]]): The weight matrix for hidden-to-hidden connections.\n    b (list[float]): The bias vector.\n\n    Returns:\n    list[float]: The final hidden state after processing the entire sequence, rounded to four decimal places.\n    \"\"\"\n    input_seq = np.array(input_sequence)\n    hidden_state = np.array(initial_hidden_state)\n    input_seq = input_seq.reshape(-1, 1)\n    output = np.tanh(np.dot(input_seq, Wx) + np.dot(hidden_state, Wh) + b)\n    output = output.reshape(-1)\n    return output.round(4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a set of points.\n\n    Args:\n        points (list): A list of [x, y] coordinates of points to be translated.\n        tx (float): The translation distance in the x direction.\n        ty (float): The translation distance in the y direction.\n\n    Returns:\n        list: A new list of points after applying the translation matrix.\n    \"\"\"\n    points_array = np.array(points)\n    translated_points = points_array + np.array([tx, ty])\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the KL divergence between two normal distributions.\n\n    Parameters:\n    mu_p (float): Mean of the first normal distribution\n    sigma_p (float): Standard deviation of the first normal distribution\n    mu_q (float): Mean of the second normal distribution\n    sigma_q (float): Standard deviation of the second normal distribution\n\n    Returns:\n    float: The KL divergence between the two normal distributions\n    \"\"\"\n    diff_mu = mu_p - mu_q\n    sum_diff = np.sum(diff_mu ** 2 / sigma_p ** 2)\n    kl_div = -0.5 * sum_diff\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Gauss-Seidel Method for Solving Linear Systems\n\n    Parameters:\n    A (numpy array): Square matrix of coefficients\n    b (numpy array): Right-hand side vector\n    n (int): Number of iterations\n    x_ini (numpy array, optional): Initial guess for (x) (default: None)\n\n    Returns:\n    x (numpy array): Approximated solution vector (x) after n iterations\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square')\n    if n <= 0:\n        raise ValueError('Number of iterations must be positive')\n    if not isinstance(x_ini, np.ndarray):\n        raise ValueError('Initial guess x must be a numpy array')\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.linalg.solve(A, b)\n        if np.allclose(x, x_new, atol=0.0001):\n            break\n        x = x_new\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        \"\"\"\n        Initializes the LSTM network.\n\n        Args:\n            input_size (int): The size of the input sequence.\n            hidden_size (int): The size of the hidden state.\n        \"\"\"\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n\n        Args:\n            x (numpy array): The input sequence.\n            initial_hidden_state (numpy array): The initial hidden state.\n            initial_cell_state (numpy array): The initial cell state.\n\n        Returns:\n            tuple: A tuple containing the hidden states at each time step, the final hidden state, and the final cell state.\n        \"\"\"\n        x = x.reshape(-1, x.shape[1])\n        h = initial_hidden_state\n        c = initial_cell_state\n        (o, f, c_t, h_t) = self._forward(x, h, c)\n        o = o.reshape(-1)\n        h = h_t.reshape(-1)\n        return (h, c, o, f, h_t)\n\n    def _forward(self, x, h, c):\n        \"\"\"\n        Computes the output gate, forget gate, and cell state at each time step.\n\n        Args:\n            x (numpy array): The input sequence.\n            h (numpy array): The current hidden state.\n            c (numpy array): The current cell state.\n\n        Returns:\n            tuple: A tuple containing the output gate, forget gate, cell state, and hidden state at each time step.\n        \"\"\"\n        o = np.tanh(np.dot(self.Wf, x) + np.dot(self.Wi, h) + np.dot(self.Wc, c) + self.bf)\n        f = np.tanh(np.dot(self.Wf, x) + np.dot(self.Wi, h) + np.dot(self.Wc, c) + self.bo)\n        c_t = np.tanh(np.dot(self.Wf, x) + np.dot(self.Wi, h) + np.dot(self.Wc, c) + self.bc)\n        h_t = np.tanh(np.dot(self.Wf, x) + np.dot(self.Wi, h) + np.dot(self.Wc, c) + self.bo)\n        return (o, f, c_t, h_t)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute TF-IDF scores for a query against a given corpus of documents.\n\n    Args:\n    corpus (list): A list of documents, where each document is a list of words.\n    query (list): A list of words for which you want to compute the TF-IDF scores.\n\n    Returns:\n    list: A list of lists containing the TF-IDF scores for the query words in each document, rounded to five decimal places.\n    \"\"\"\n    if not corpus:\n        raise ValueError('Corpus cannot be empty')\n    term_freq = {}\n    doc_freq = {}\n    tf_idf_scores = []\n    for doc in corpus:\n        if doc:\n            for word in doc:\n                if word in query:\n                    term_freq[word] = term_freq.get(word, 0) + 1\n                    doc_freq[doc] = doc_freq.get(doc, 0) + 1\n                    tf_idf = term_freq[word] / (doc_freq.get(doc, 0) + 1)\n                    tf_idf_scores.append(round(tf_idf, 5))\n    return tf_idf_scores\ncorpus = ['This is a sample document', 'This is another sample document', 'This is a third sample document']\nquery = ['sample', 'document', 'sample']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == y_pred).astype(int))\n    fp = np.sum((y_true != y_pred).astype(int))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    tn = np.sum((y_true == 1).astype(int))\n    recall = tp / (tp + tn) if tp + tn > 0 else 0\n    if beta == 1:\n        f_score = 2 * precision * recall / (precision + recall)\n    else:\n        f_score = 2 * precision * recall * beta / (precision + recall + beta)\n    f_score = round(f_score, 3)\n    return f_score"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h0 = np.zeros((1, self.hidden_size))\n        h = np.zeros((1, self.hidden_size))\n        for t in range(len(x)):\n            z = np.tanh(np.dot(self.W_xh, h) + self.b_h)\n            o = np.tanh(np.dot(self.W_hy, h) + self.b_y)\n            h = np.tanh(np.dot(z, h) + self.W_hh * h + self.b_h)\n            h0 = h\n            o = np.tanh(np.dot(o, h) + self.W_hy * h + self.b_y)\n        return (o, h0, x[t])\n\n    def backward(self, x, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        loss = 0.5 * np.mean((outputs - expected_output) ** 2)\n        dW_hh = np.dot(outputs - expected_output, last_hiddens.T) * self.W_hh.T\n        dW_hy = np.dot(outputs - expected_output, last_hiddens.T) * self.W_hy.T\n        dW_xh = np.dot(x.T, (outputs - expected_output) * last_hiddens.T) * self.W_xh.T\n        dW_h = np.dot(x.T, (outputs - expected_output) * last_hiddens.T) * self.W_h.T\n        dW_hy = np.dot(x.T, (outputs - expected_output) * last_hiddens.T) * self.W_hy.T\n        d_b_h = np.sum(outputs - expected_output, axis=0, keepdims=True)\n        d_b_y = np.sum(outputs - expected_output, axis=0, keepdims=True)\n        self.W_hh += learning_rate * dW_hh\n        self.W_hy += learning_rate * dW_hy\n        self.W_hh += learning_rate * dW_h\n        self.W_hy += learning_rate * dW_hy\n        self.b_h += learning_rate * d_b_h\n        self.b_y += learning_rate * d_b_y\n        return (loss, dW_hh, dW_hy, dW_h, d_b_h, d_b_y)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A, b, n, x0=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    x = x0 or np.zeros_like(b)\n    x_new = x.copy()\n    iter_count = 0\n    r = b - np.dot(A, x)\n    r_norm = np.linalg.norm(r)\n    while iter_count < n and r_norm > tol:\n        g = -np.dot(A, x_new) / r_norm\n        x_new = x_new + np.dot(g, r) / r_norm\n        r = r - np.dot(A, x_new)\n        r_norm = np.linalg.norm(r)\n        iter_count += 1\n    x = x_new.tolist()\n    return x"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    n = len(y)\n    sum_squared_diff = sum(((x - np.mean(y)) ** 2 for x in y))\n    gini = 1 - sum((np.sum((x - np.mean(y)) ** 2) / n) ** 2)\n    return gini"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    (num_rows, num_cols) = (len(dense_matrix), len(dense_matrix[0]))\n    values = [0] * num_rows\n    col_indices = [0] * num_cols\n    row_ptr = [0] * num_rows\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if dense_matrix[i][j] != 0:\n                values[i] += dense_matrix[i][j]\n                col_indices[j] = i\n    row_ptr = [0] * num_rows\n    return (values, col_indices, row_ptr)"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    dot_product = np.dot(v, L)\n    magnitude_L = np.linalg.norm(L)\n    projection = dot_product / magnitude_L ** 2 * L\n    projection = np.round(projection, 3)\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = []\n    for i in range(num_rows):\n        row_values = []\n        row_index = 0\n        for j in range(num_cols):\n            if dense_matrix[i][j] != 0:\n                row_values.append(dense_matrix[i][j])\n                row_indices.append(row_index)\n                column_pointer.append(j)\n        values.append(row_values)\n        row_index += 1\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    This function calculates the column space of a given matrix A.\n    \n    Parameters:\n    A (numpy array): The input matrix.\n    \n    Returns:\n    list: A list of basis vectors that span the column space of A.\n    \"\"\"\n    A = np.array(A)\n    row_echelon_form = np.array(A).T.copy()\n    row_echelon_form = row_echelon_form.copy()\n    row_echelon_form[0] = row_echelon_form[0] / row_echelon_form[0, 0]\n    row_echelon_form[1:] = row_echelon_form[1:].copy()\n    row_echelon_form[1:] = row_echelon_form[1:].copy()\n    row_echelon_form[1:] = row_echelon_form[1:].copy()\n    basis_vectors = []\n    for i in range(A.shape[1]):\n        if row_echelon_form[i, 0] != 0:\n            basis_vectors.append(row_echelon_form[i, :])\n    basis_vectors = [round(vector, 8) for vector in basis_vectors]\n    return basis_vectors"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared value for regression analysis.\n\n    Parameters:\n    y_true (array): True values of the dependent variable.\n    y_pred (array): Predicted values of the dependent variable.\n\n    Returns:\n    float: R-squared value rounded to three decimal places.\n    \"\"\"\n    mean_y_true = np.mean(y_true)\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    ss_tot = np.sum((y_true - mean_y_true) ** 2)\n    r2 = 1 - ss_res / ss_tot\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculate the average brightness of a grayscale image.\n\n    Args:\n        img (list of lists): A 2D matrix representing the image, where each element is a pixel value between 0 (black) and 255 (white).\n\n    Returns:\n        float: The average brightness of the image rounded to two decimal places. Returns -1 for edge cases.\n    \"\"\"\n    if not img:\n        return -1\n    if len(img[0]) != len(set(img)):\n        return -1\n    if any((val < 0 or val > 255 for val in img)):\n        return -1\n    total = sum((sum(row) for row in img))\n    avg_brightness = total / (len(img) * len(img[0]))\n    avg_brightness = round(avg_brightness, 2)\n    return avg_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between the actual values and the predicted values.\n\n    Parameters:\n    y_true (array_like): The actual values.\n    y_pred (array_like): The predicted values.\n\n    Returns:\n    float: The RMSE value rounded to three decimal places.\n    \"\"\"\n    if len(y_true.shape) != len(y_pred.shape):\n        raise ValueError('Input arrays must have the same shape')\n    if len(y_true) == 0:\n        raise ValueError('Input arrays cannot be empty')\n    if not np.issubdtype(y_true.dtype, np.number) or not np.issubdtype(y_pred.dtype, np.number):\n        raise ValueError('Input arrays must be of numeric type')\n    rmse_value = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    rmse_value = round(rmse_value, 3)\n    return rmse_value"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index for binary classification.\n\n    Parameters:\n    y_true (numpy array): Binary labels (True/False)\n    y_pred (numpy array): Predicted labels (True/False)\n\n    Returns:\n    float: Jaccard Index (0 <= Jaccard Index <= 1)\n    \"\"\"\n    intersection = np.logical_and(y_true, y_pred)\n    union = np.logical_or(y_true, y_pred)\n    jaccard_index = np.sum(intersection) / np.sum(union)\n    jaccard_index = round(jaccard_index, 3)\n    return jaccard_index"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score for binary classification.\n\n    Args:\n        y_true (numpy array): Binary array of true labels.\n        y_pred (numpy array): Binary array of predicted labels.\n\n    Returns:\n        float: The Dice Score between y_true and y_pred.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must have the same length')\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    dice_score = 2 * intersection / (len(y_true) + len(y_pred))\n    return round(dice_score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Create a composite hypervector for a given dataset row using Hyperdimensional Computing (HDC).\n\n    Args:\n        row (dict): A dictionary representing a dataset row, where keys are feature names and values are their corresponding values.\n        dim (int): The dimensionality of the hypervectors.\n        random_seeds (dict): A dictionary where keys are feature names and values are seeds to ensure reproducibility of hypervectors.\n\n    Returns:\n        list: A composite hypervector representing the entire row.\n    \"\"\"\n    hv = []\n    for (feature, value) in row.items():\n        seed = random_seeds[feature]\n        hv_feature = np.random.rand(dim, 1)\n        hv.append(hv_feature)\n    hv = np.array(hv)\n    return hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a confusion matrix for binary classification.\n\n    Args:\n        data (list of lists): A list of lists, where each inner list represents a pair\n            `[y_true, y_pred]` for one observation.\n\n    Returns:\n        list of lists: A 2x2 confusion matrix.\n    \"\"\"\n    cm = [[0, 0], [0, 0]]\n    for (true_label, pred_label) in data:\n        cm[0][0] += 1\n        cm[1][1] += 1\n    tp = cm[0][0]\n    fp = cm[0][1]\n    tn = cm[1][0]\n    fn = cm[1][1]\n    total = tp + fp + tn + fn\n    accuracy = (tp + tn) / total\n    precision = tp / (tp + fp)\n    recall = tp / (tp + fn)\n    f1 = 2 * precision * recall / (precision + recall)\n    return [tp, fp, tn, fn, accuracy, precision, recall, f1]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n\n    Args:\n        v1 (numpy.ndarray): The first input vector.\n        v2 (numpy.ndarray): The second input vector.\n\n    Returns:\n        float: The cosine similarity between the two input vectors, rounded to three decimal places.\n    \"\"\"\n    assert v1.shape == v2.shape, 'Input vectors must have the same shape'\n    assert v1.size > 0 and np.linalg.norm(v1) > 0, 'Input vectors cannot be empty or have zero magnitude'\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    cosine_similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    cosine_similarity = round(cosine_similarity, 3)\n    return cosine_similarity"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nimport numpy as np\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Calculate performance metrics for a binary classification problem.\n\n    Args:\n    - actual (list[int]): The actual class labels (1 for positive, 0 for negative).\n    - predicted (list[int]): The predicted class labels from the model.\n\n    Returns:\n    - tuple[float, float, float, float]: A tuple containing the confusion matrix, accuracy, F1 score, specificity, and negative predictive value.\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('Actual and predicted lists must have the same length')\n    confusion_matrix = np.array([[actual.count(1), actual.count(0)], [actual.count(0), actual.count(1)]])\n    tp = confusion_matrix[0, 0]\n    fn = confusion_matrix[1, 1]\n    fp = confusion_matrix[0, 1]\n    fnp = confusion_matrix[1, 0]\n    tpn = confusion_matrix[0, 0]\n    accuracy = round((tp + tpn) / len(actual), 3)\n    f1_score = round(2 * tp / (2 * tp + fp + fnp), 3)\n    specificity = round(tp / (tp + fn), 3)\n    negative_predictive_value = round(1 - tp / len(actual), 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given dataset.\n\n    Parameters:\n    data (list or NumPy array): A list or NumPy array of numerical values.\n\n    Returns:\n    dict: A dictionary containing the calculated statistics.\n    \"\"\"\n    if not isinstance(data, (list, np.ndarray)):\n        raise ValueError('Input must be a list or NumPy array')\n    data = np.array(data)\n    if len(data) == 0:\n        return {'mean': 0.0, 'median': 0.0, 'mode': 0.0, 'variance': 0.0, 'standard_deviation': 0.0, '25th_percentile': 0.0, '50th_percentile': 0.0, '75th_percentile': 0.0, 'interquartile_range': 0.0}\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = np.bincount(data).argmax()\n    variance = np.var(data)\n    std_dev = np.std(data)\n    q1 = np.percentile(data, 25)\n    q2 = np.percentile(data, 50)\n    q3 = np.percentile(data, 75)\n    iqr = q3 - q1\n    mean = round(mean, 4)\n    median = round(median, 4)\n    mode = round(mode, 4)\n    variance = round(variance, 4)\n    std_dev = round(std_dev, 4)\n    q1 = round(q1, 4)\n    q2 = round(q2, 4)\n    q3 = round(q3, 4)\n    iqr = round(iqr, 4)\n    return {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': std_dev, '25th_percentile': q1, '50th_percentile': q2, '75th_percentile': q3, 'interquartile_range': iqr}"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places\n    \"\"\"\n    binomial_coefficient = math.comb(n, k)\n    probability = binomial_coefficient * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: The probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    \n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \n    Returns:\n        float: The contrast of the image, calculated as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    img = np.asarray(img)\n    min_val = np.min(img)\n    max_val = np.max(img)\n    contrast = (max_val - min_val) / (max_val + min_val)\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n\n    Returns:\n        float: The dot product of the two input vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for point in data:\n        transformed_point = []\n        for i in range(len(point)):\n            feature = 1"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int) -> np.ndarray:\n    \"\"\"\n    Calculate positional encoding for a sequence length and model dimensionality.\n\n    Args:\n    position (int): The sequence length.\n    d_model (int): The model dimensionality.\n\n    Returns:\n    np.ndarray: The positional encoding array.\n    \"\"\"\n    if position == 0:\n        return -1\n    if d_model <= 0:\n        return -1\n    position_encoding = position * 2 ** (d_model / 2) % 2 ** (d_model / 2)\n    position_encoding_list = position_encoding.tolist()\n    return position_encoding_list"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n\n    Args:\n        training_accuracy (float): Training accuracy of the model (0 <= training_accuracy <= 1)\n        test_accuracy (float): Test accuracy of the model (0 <= test_accuracy <= 1)\n\n    Returns:\n        int: '1' if the model is overfitting, '-1' if underfitting, '0' if a good fit\n    \"\"\"\n    accuracy_diff = abs(training_accuracy - test_accuracy)\n    if accuracy_diff > 0.2:\n        return 1\n    elif training_accuracy < 0.7 or test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    bias_correction = epsilon * v\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    learning_rate = learning_rate * np.sqrt(v_hat / (1 - beta2 ** t))\n    parameter = parameter - learning_rate * grad\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m_hat, 5).tolist()\n    updated_v = np.round(v_hat, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\nimport torch\nfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n    \"\"\"\n    Load the dummy encoder and model hyperparameters and parameters.\n\n    Args:\n    - model_size (str): The size of the model (e.g., \"124M\").\n    - models_dir (str): The directory where the model weights are stored.\n\n    Returns:\n    - encoder (DummyBPE): The dummy encoder.\n    - hparams (dict): The model hyperparameters.\n    - params (dict): The model parameters.\n    \"\"\"\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    \"\"\"\n    Generate text using the GPT-2-like model.\n\n    Args:\n    - prompt (str): The initial text to guide the generation process.\n    - n_tokens_to_generate (int): The number of tokens to generate.\n\n    Returns:\n    - generated_text (str): The generated text.\n    \"\"\"\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    model = AutoModelForSeq2SeqLM.from_pretrained('t5-base', num_labels=2)\n    model.to('cuda' if torch.cuda.is_available() else 'cpu')\n    model.eval()\n    input_ids = torch.tensor([0], dtype=torch.long)\n    attention_mask = torch.tensor([0], dtype=torch.long)\n    output_ids = torch.tensor([0], dtype=torch.long)\n    output_attention_mask = torch.tensor([0], dtype=torch.long)\n    with torch.no_grad():\n        for _ in range(n_tokens_to_generate):\n            output = model.generate(input_ids, attention_mask=attention_mask, num_beams=4, max_length=100, return_tensors='pt')\n            generated_tokens = model.decode(output[0])\n            output_ids = torch.cat((output_ids, generated_tokens), dim=0)\n            output_attention_mask = torch.cat((output_attention_mask, torch.ones_like(output_attention_mask)), dim=0)\n            input_ids = output_ids\n            attention_mask = output_attention_mask\n    generated_text = ' '.join([encoder.decode(token) for token in output_ids])\n    return generated_text\nprompt = 'Hello, how are you?'\nn_tokens_to_generate = 10\ngenerated_text = gen_text(prompt, n_tokens_to_generate)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n    \"\"\"\n    This function calculates the weighted pattern for each crystal in the sequence.\n\n    Parameters:\n    n (int): The number of crystals.\n    crystal_values (list): A list of unique numeric values for each crystal.\n    dimension (int): The dimension of the input data.\n\n    Returns:\n    list: A list of floats, each rounded to the 4th decimal place, representing the weighted pattern for each crystal.\n    \"\"\"\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dot_product = np.dot(crystal_values[i], crystal_values[j])\n            attention_score = np.exp(dot_product / dimension) / np.sum(np.exp(dot_product / dimension), axis=0)\n            attention_scores[i, j] = attention_score\n            attention_scores[j, i] = attention_score\n    weighted_patterns = np.zeros((n, dimension))\n    for i in range(n):\n        weighted_patterns[i] = np.sum(attention_scores[i] * crystal_values, axis=0)\n    weighted_patterns = np.round(weighted_patterns, 4)\n    return weighted_patterns"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 1))\n    fp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 0))\n    fn = sum((1 for (t, p) in zip(y_true, y_pred) if t == 0 and p == 1))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1 = 2 * precision * recall / (precision + recall) if precision + recall > 0 else 0\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nPI = math.pi\nSIN_TREND = 10 * np.sin(2 * PI / 10)\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Predicts the power grid consumption for day 15, accounting for both trend and fluctuation,\n    and adds a 5% safety margin.\n\n    Parameters:\n    consumption_data (list): A list of daily power consumption measurements.\n\n    Returns:\n    int: The predicted power grid consumption for day 15, rounded to the nearest integer.\n    \"\"\"\n    detrended_data = [consumption - SIN_TREND for consumption in consumption_data]\n    coefficients = np.polyfit(range(len(detrended_data), detrended_data), detrended_data, 1)\n    linear_model = np.poly1d(coefficients)\n    predicted_consumption = linear_model(15)\n    predicted_consumption += detrended_data[-1]\n    final_consumption = round(predicted_consumption + 0.05 * detrended_data[-1])\n    return final_consumption\nconsumption_data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\nfinal_consumption = power_grid_forecast(consumption_data)"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    errors = np.abs(y_true - y_pred)\n    mae = np.mean(errors)\n    mae = round(mae, 3)\n    return mae"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Computes the query, key, and value matrices for multi-head attention.\n\n    Args:\n    X (np.ndarray): Input tensor.\n    W_q (np.ndarray): Query matrix weights.\n    W_k (np.ndarray): Key matrix weights.\n    W_v (np.ndarray): Value matrix weights.\n    n_heads (int): Number of attention heads.\n\n    Returns:\n    list: Reshaped list of query, key, and value matrices.\n    \"\"\"\n    q = np.matmul(X, W_q) / np.sqrt(n_heads)\n    k = np.matmul(X, W_k) / np.sqrt(n_heads)\n    v = np.matmul(X, W_v) / np.sqrt(n_heads)\n    q = q.reshape((X.shape[0], n_heads, n_heads, X.shape[-1]))\n    k = k.reshape((X.shape[0], n_heads, n_heads, X.shape[-1]))\n    v = v.reshape((X.shape[0], n_heads, n_heads, X.shape[-1]))\n    q = q.reshape((X.shape[0], n_heads, X.shape[-1]))\n    k = k.reshape((X.shape[0], n_heads, X.shape[-1]))\n    v = v.reshape((X.shape[0], n_heads, X.shape[-1]))\n    return (q, k, v)\ndef self_attention(X: np.ndarray, q: np.ndarray, k: np.ndarray, v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Computes the self-attention mechanism.\n\n    Args:\n    X (np.ndarray): Input tensor.\n    q (np.ndarray): Query matrix.\n    k (np.ndarray): Key matrix.\n    v (np.ndarray): Value matrix.\n    n_heads (int): Number of attention heads.\n\n    Returns:\n    list: Reshaped list of query, key, and value matrices.\n    \"\"\"\n    scores = np.matmul(q, k.T) / np.sqrt(n_heads)\n    weights = np.matmul(scores, k)\n    scores = scores.reshape((X.shape[0], n_heads, n_heads, X.shape[-1]))\n    weights = weights.reshape((X.shape[0], n_heads, X.shape[-1]))\n    scores = scores.reshape((X.shape[0], n_heads, X.shape[-1]))\n    weights = weights.reshape((X.shape[0], n_heads, X.shape[-1]))\n    return (scores, weights)\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Computes the multi-head attention mechanism.\n\n    Args:\n    X (np.ndarray): Input tensor.\n    W_q (np.ndarray): Query matrix weights.\n    W_k (np.ndarray): Key matrix weights.\n    W_v (np.ndarray): Value matrix weights.\n    n_heads (int): Number of attention heads.\n\n    Returns:\n    list: Reshaped list of query, key, and value matrices.\n    \"\"\"\n    (q, k, v) = compute_qkv(X, W_q, W_k, W_v, n_heads)\n    (scores, weights) = self_attention(X, q, k, v, n_heads)\n    scores = scores.reshape((X.shape[0], n_heads, n_heads, X.shape[-1]))\n    weights = weights.reshape((X.shape[0], n_heads, X.shape[-1]))\n    scores = scores.reshape((X.shape[0], n_heads, X.shape[-1]))\n    weights = weights.reshape((X.shape[0], n_heads, X.shape[-1]))\n    return (scores, weights)"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n_x = len(x)\n    n_y = len(y)\n    sum_xy = sum((x[i] * y[i] for i in range(n_x)))\n    sum_x = sum(x) ** 2\n    sum_y = sum(y) ** 2\n    phi = 0.5 * (sum_xy - sum_x * sum_y)\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return 1 / (1 + 1 / (1 + 10 ** (-x)))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x <= 0:\n        return 0.0\n    else:\n        return math.exp(x) / (1 + math.exp(-x))"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x < 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x == 0:\n        return 0.0\n    if x < 0:\n        return 0.0\n    return math.log(1 + math.exp(x))"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    import math\n    return round(math.sign(x), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    kl_divergence_penalty = np.sum(np.log(pi_theta_ref) - np.log(pi_theta_old))\n    grpo_objective_value = np.sum(rhos * np.log(pi_theta_old / pi_theta_ref))\n    clipped_objective_value = np.clip(grpo_objective_value, epsilon, None)\n    kl_divergence_penalty_value = beta * kl_divergence_penalty\n    return clipped_objective_value + kl_divergence_penalty_value"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    return np.exp(x) * (x if x >= 0 else np.finfo(float).eps) - alpha * np.finfo(float).eps"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    X = X.reshape(-1, 1)\n    predictions = 1 / (1 + np.exp(-np.dot(X, weights) + bias))\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X (np.ndarray): Feature matrix\n        y (np.ndarray): Target vector\n        learning_rate (float): Learning rate for gradient descent\n        iterations (int): Number of iterations for gradient descent\n\n    Returns:\n        B : list[float], Optimized parameters rounded to 4th decimal places\n        losses : list[float], collected values of a Cross Entropy rounded to 4th decimal places\n    \"\"\"\n    B = np.zeros(X.shape[1])\n    losses = []\n    for _ in range(iterations):\n        dot_product = np.dot(X, B)\n        probabilities = np.exp(dot_product) / np.sum(np.exp(dot_product))\n        loss = -np.sum(y * np.log(probabilities))\n        B -= learning_rate * (dot_product - y)\n        losses.append(loss)\n        B = np.round(B, 4)\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n\n    Args:\n        X (np.ndarray): Feature matrix\n        y (np.ndarray): Target vector\n        learning_rate (float): Learning rate for gradient descent\n        iterations (int): Number of iterations\n\n    Returns:\n        tuple[list[float], ...]: Optimized coefficients and loss values\n    \"\"\"\n    coefficients = np.zeros(X.shape[1])\n    loss_values = []\n    for _ in range(iterations):\n        predictions = np.dot(X, coefficients)\n        loss = -np.mean(y * np.log(predictions) + (1 - y) * np.log(1 - predictions))\n        gradients = np.dot(X.T, predictions - y) / X.shape[0]\n        coefficients -= learning_rate * gradients\n        loss_values.append(loss)\n    loss_values = [round(float(loss), 4) for loss in loss_values]\n    coefficients = coefficients.tolist()\n    return (coefficients, loss_values)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    Q = Q.reshape(-1, Q.shape[1], 1)\n    K = K.reshape(-1, K.shape[1], 1)\n    V = V.reshape(-1, V.shape[1], 1)\n    Q_masked = np.where(mask, Q, np.zeros_like(Q))\n    K_masked = np.where(mask, K, np.zeros_like(K))\n    V_masked = np.where(mask, V, np.zeros_like(V))\n    attention = np.matmul(Q_masked, K_masked.T) / np.sqrt(Q.shape[1])\n    attention = np.matmul(attention, V_masked)\n    attention = attention.reshape(Q.shape)\n    return attention"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n\n    Args:\n        apples (list): A list of integers representing the colors of the apples.\n\n    Returns:\n        float: The disorder in the basket of apples.\n    \"\"\"\n    unique_colors = len(set(apples))\n    disorder = 0\n    for color in set(apples):\n        disorder += np.sum(np.abs(np.array(apples) - np.array([color] * unique_colors)) / unique_colors)\n    return round(disorder, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Normalize the input tensor X across the feature dimension for each sequence.\n\n    Args:\n    X (np.ndarray): 3D array representing batch size, sequence length, and feature dimensions.\n    gamma (np.ndarray): Scaling parameter.\n    beta (np.ndarray): Shifting parameter.\n    epsilon (float, optional): Epsilon value for numerical stability. Defaults to 1e-5.\n\n    Returns:\n    list: Rounded and converted to a list X with normalized values.\n    \"\"\"\n    mean = np.mean(X, axis=1, keepdims=True)\n    std = np.std(X, axis=1, keepdims=True)\n    X_normalized = (X - mean) / (std + epsilon)\n    X_normalized = np.round(X_normalized, 5).tolist()\n    return X_normalized"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score for evaluating machine translation quality.\n\n    Parameters:\n    reference (str): The reference translation.\n    candidate (str): The candidate translation.\n    alpha (float, optional): The alpha parameter for the METEOR score. Defaults to 0.9.\n    beta (float, optional): The beta parameter for the METEOR score. Defaults to 3.\n    gamma (float, optional): The gamma parameter for the METEOR score. Defaults to 0.5.\n\n    Returns:\n    float: The METEOR score.\n    \"\"\"\n    matches = sum((1 for (ref_word, cand_word) in zip(reference.split(), candidate.split()) if ref_word == cand_word))\n    precision = matches / len(reference.split())\n    recall = matches / len(reference.split())\n    f_mean = 2 * precision * recall / (precision + recall)\n    penalty = 1 - f_mean\n    meteor_score = alpha * precision + beta * recall + gamma * penalty\n    return round(meteor_score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) between two events.\n\n    Parameters:\n    joint_counts (list): Joint occurrence count of two events.\n    total_counts_x (list): Total occurrence count of event X.\n    total_counts_y (list): Total occurrence count of event Y.\n    total_samples (int): Total number of samples.\n\n    Returns:\n    float: Pointwise Mutual Information (PMI) between the two events, rounded to 3 decimal places.\n    \"\"\"\n    joint_prob = joint_counts[0] / total_counts_x[0] if total_counts_x[0] > 0 else 0\n    prob_x = joint_counts[0] / total_counts_x[0]\n    prob_y = joint_counts[1] / total_counts_y[1]\n    joint_prob = joint_counts[0] / total_samples if total_samples > 0 else 0\n    pmi = -np.log2(joint_prob * np.log2(joint_prob) + prob_x * np.log2(prob_x) + prob_y * np.log2(prob_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    This function performs Min-Max Normalization on a list of integers.\n\n    Args:\n        x (list[int]): A list of integers to be normalized.\n\n    Returns:\n        list[float]: A list of floats, where each value is the normalized value.\n    \"\"\"\n    min_val = min(x)\n    max_val = max(x)\n    if min_val < 0:\n        (min_val, max_val) = (max_val, min_val)\n    normalized_x = [(val - min_val) / (max_val - min_val) for val in x]\n    normalized_x = [round(val, 4) for val in normalized_x]\n    return normalized_x"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function implements a simple residual block with shortcut connection.\n\n    Args:\n    x (np.ndarray): The input array.\n    w1 (np.ndarray): The first weight layer.\n    w2 (np.ndarray): The second weight layer.\n\n    Returns:\n    np.ndarray: The output of the residual block.\n    \"\"\"\n    x = x.reshape(-1, 1)\n    x1 = np.matmul(x, w1)\n    x1 = np.maximum(x1, 0)\n    x2 = np.matmul(x1, w2)\n    x2 = np.maximum(x2, 0)\n    x = x1 + x2\n    x = np.round(x, 4).tolist()\n    return x"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs global average pooling on a 3D NumPy array representing feature maps from a convolutional layer.\n\n    Args:\n        x (np.ndarray): A 3D NumPy array with shape (height, width, channels) representing feature maps.\n\n    Returns:\n        np.ndarray: A 1D array of shape (channels,) with the average of all values in the corresponding feature map.\n    \"\"\"\n    avg = np.mean(x, axis=1)\n    avg = avg.flatten()\n    return avg"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Batch Normalization function for 4D input data.\n\n    Args:\n    X (np.ndarray): Input data in BCHW format (batch, channels, height, width).\n    gamma (np.ndarray): Scale parameter.\n    beta (np.ndarray): Shift parameter.\n    epsilon (float, optional): Epsilon value for numerical stability. Defaults to 1e-5.\n\n    Returns:\n    list: Normalized data in BCHW format (batch, channels, height, width).\n    \"\"\"\n    mean = np.mean(X, axis=0)\n    std = np.std(X, axis=0)\n    X_normalized = (X - mean) / std\n    X_normalized = (X_normalized + beta) / gamma\n    X_normalized = np.clip(X_normalized, a_min=epsilon, a_max=1 - epsilon)\n    X_normalized = np.round(X_normalized, 4).tolist()\n    return X_normalized"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of a polynomial term c * x^n at a given point x.\n\n    Args:\n        c (float): The coefficient of the polynomial term.\n        x (float): The point at which to evaluate the derivative.\n        n (float): The exponent of the polynomial term.\n\n    Returns:\n        float: The derivative of the polynomial term at the given point, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by a list of 2D vectors.\n\n    Args:\n    vectors (list[list[float]]): A list of 2D vectors.\n    tol (float, optional): Tolerance value to determine linear independence. Defaults to 1e-10.\n\n    Returns:\n    list[list[float]]: A list of orthonormal vectors.\n    \"\"\"\n    basis = vectors\n    for i in range(len(vectors)):\n        v = basis[i]\n        for j in range(i + 1, len(vectors)):\n            dot_product = np.dot(v, basis[j])\n            proj = dot_product * basis[j]\n            v = [v[0] - 2 * dot_product * v[0] / dot_product, v[1] - 2 * dot_product * v[1] / dot_product]\n        v = [v[0] / np.linalg.norm(v), v[1] / np.linalg.norm(v)]\n        if np.linalg.norm(np.cross(v, basis[i]) > tol):\n            basis = [b for b in basis if np.linalg.norm(np.cross(b, v)) > tol]\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors.\n\n    Parameters:\n    a (list or numpy array): The first 3D vector.\n    b (list or numpy array): The second 3D vector.\n\n    Returns:\n    list or numpy array: The cross product of the two input vectors, rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    cross_product = np.cross(a, b)\n    return round(cross_product.tolist(), 4)"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve a system of linear equations Ax = b using Cramer's Rule.\n\n    Parameters:\n    A (numpy array): Square coefficient matrix\n    b (numpy array): Constant vector\n\n    Returns:\n    x (numpy array): Solution vector x\n    \"\"\"\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    A_2d = A.reshape(-1, 1)\n    b_2d = b.reshape(-1, 1)\n    x = np.zeros_like(b_2d)\n    for i in range(A_2d.shape[1]):\n        det_A_i = np.linalg.det(A_2d[:, i])\n        x[:, i] = b_2d[:, i] * det_A_i / det_A\n    return x.tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions.\n\n    Args:\n        p (list[float]): The first probability distribution.\n        q (list[float]): The second probability distribution.\n\n    Returns:\n        float: The Bhattacharyya distance between the two distributions, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(p, list) or not isinstance(q, list):\n        raise ValueError('Both inputs must be lists')\n    if len(p) != len(q):\n        raise ValueError('Both inputs must have the same length')\n    if len(p) == 0:\n        return 0.0\n    distance = 0\n    for i in range(len(p)):\n        distance += p[i] * q[i]\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the element-wise sum of two vectors.\n\n    Args:\n        a (list[int|float]): The first vector.\n        b (list[int|float]): The second vector.\n\n    Returns:\n        list[int|float]: The element-wise sum of the two vectors if they have the same length, -1 otherwise.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]) -> list[np.ndarray]:\n    \"\"\"\n    Compute the policy gradient using REINFORCE algorithm.\n\n    Parameters:\n    theta (np.ndarray): The policy parameterized by a 2D NumPy array of shape (num_states, num_actions).\n    episodes (list[list[tuple[int, int, float]]]): A list of episodes, where each episode is a list of (state, action, reward) tuples.\n\n    Returns:\n    list[np.ndarray]: A list of gradients, where each gradient is a 2D NumPy array of shape (num_states, num_actions).\n    \"\"\"\n    gradients = []\n    for episode in episodes:\n        (state, action, _) = episode[0]\n        policy = np.exp(theta[:, action] / np.sum(theta, axis=1, keepdims=True))\n        log_policy = np.log(policy)\n        gradient = np.sum(log_policy * np.rollaxis(log_policy, 1) * episodes[0][i, :])\n        return_value = episodes[0][i, 2]\n        gradient *= return_value\n        gradients.append(gradient)\n    gradients = np.array(gradients).reshape(-1, theta.shape[1])\n    gradients = np.round(gradients, 4)\n    return gradients"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational efficiency of a MoE layer.\n\n    Parameters:\n    n_experts (int): Number of experts in the MoE.\n    k_active (int): Number of active experts.\n    d_in (int): Input dimensionality.\n    d_out (int): Output dimensionality.\n\n    Returns:\n    float: Computational efficiency of the MoE layer.\n    \"\"\"\n    num_params = n_experts * k_active * d_in * d_out\n    dense_params = n_experts * d_in * d_out\n    moe_cost = num_params / 2\n    dense_cost = dense_params\n    efficiency = (1 - moe_cost / dense_cost) * 100\n    efficiency = round(efficiency, 1)\n    return efficiency\nn_experts = 1000\nk_active = 10\nd_in = 10\nd_out = 10\nefficiency = compute_efficiency(n_experts, k_active, d_in, d_out)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int) -> list:\n    \"\"\"\n    Compute the final gating probabilities matrix using the Noisy Top-K Gating mechanism.\n\n    Parameters:\n    X (np.ndarray): Input matrix.\n    W_g (np.ndarray): Weight matrix of the expert models.\n    W_noise (np.ndarray): Noise matrix.\n    N (np.ndarray): Number of experts.\n    k (int): Number of top-k experts.\n\n    Returns:\n    list: Final gating probabilities matrix.\n    \"\"\"\n    X_g = np.dot(X, W_g)\n    X_g_noise = np.dot(X_g, W_noise)\n    X_g_noise_g = np.dot(X_g_noise, W_g)\n    X_g_noise_g_noise = np.dot(X_g_noise_g, W_noise)\n    gating_probabilities = np.linalg.norm(X_g_noise_g_noise, axis=1) / np.linalg.norm(X_g_noise, axis=1)\n    gating_probabilities = gating_probabilities.reshape(-1, k)\n    gating_probabilities = np.round(gating_probabilities, 4)\n    return gating_probabilities.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int) -> np.ndarray:\n    \"\"\"\n    Compute the output of a Sparse Mixture of Experts (MoE) layer.\n\n    Parameters:\n    x (np.ndarray): Input tensor.\n    We (np.ndarray): Expert weight matrices.\n    Wg (np.ndarray): Gating weight matrix.\n    n_experts (int): Number of experts.\n    top_k (int): Number of experts to select.\n\n    Returns:\n    np.ndarray: Output tensor after applying top-k experts and normalizing gating probabilities.\n    \"\"\"\n    MoE = np.zeros_like(x)\n    for i in range(n_experts):\n        expert = We[i, :]\n        expert_output = np.dot(x, expert)\n        gating_prob = np.exp(np.sum(Wg * expert_output, axis=1, keepdims=True) / np.sum(Wg, axis=1, keepdims=True))\n        top_experts = np.argsort(-gating_prob)[:top_k]\n        MoE = np.add(MoE, np.dot(x, top_experts[:, None], axis=1) * gating_prob[:, None])\n    MoE = MoE / np.sum(MoE, axis=0, keepdims=True)\n    MoE = np.round(MoE, 4)\n    return MoE"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Performs Group Normalization on a 4D input tensor.\n\n    Args:\n    X (np.ndarray): Input tensor with shape (B, C, H, W)\n    gamma (np.ndarray): Learned scale (gamma) for each group\n    beta (np.ndarray): Learned shift (beta) for each group\n    num_groups (int): Number of groups\n    epsilon (float, optional): Epsilon value for numerical stability. Defaults to 1e-5\n\n    Returns:\n    list: Reshaped output tensor with shape (B, C, H, W) after normalization and scaling\n    \"\"\"\n    X = X.reshape(X.shape[0], X.shape[1], X.shape[2], X.shape[3])\n    output = np.zeros((X.shape[0], X.shape[1], X.shape[2], X.shape[3]))\n    for i in range(num_groups):\n        mean = np.mean(X[:, :, :, i], axis=0)\n        sum_squares = np.sum((X[:, :, :, i] - mean) ** 2, axis=0)\n        variance = np.sum(sum_squares) / (X.shape[0] - num_groups)\n        normalized = (X[:, :, :, i] - mean) / np.sqrt(variance + epsilon)\n        scaled = gamma * normalized\n        output[:, :, :, i] = scaled\n    output = output.reshape(X.shape)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Find the value of x where f(x) reaches its minimum.\n\n    Parameters:\n    start_x (float): The initial position to start the search.\n    learning_rate (float, optional): The step size for the gradient descent algorithm. Defaults to 0.1.\n    tolerance (float, optional): The maximum difference between the current and target values. Defaults to 1e-6.\n    max_iters (int, optional): The maximum number of iterations. Defaults to 10000.\n\n    Returns:\n    float: The value of x where f(x) reaches its minimum.\n    \"\"\"\n\n    def f(x: float) -> float:\n        return x ** 4 - 3 * x ** 3 + 2\n    x_current = start_x\n    diff = float('inf')\n    for _ in range(max_iters):\n        gradient = (f(x_current + learning_rate) - f(x_current)) / (2 * learning_rate)\n        x_current -= gradient\n        if abs(f(x_current) - f(x_current + learning_rate)) < tolerance:\n            return x_current\n        diff = abs(f(x_current) - f(x_current + learning_rate))\n    return round(x_current, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function, a normalization-free transformation inspired by the Tanh function.\n\n    Args:\n    x (np.ndarray): Input tensor.\n    alpha (float): Learning rate for the derivative of the activation function.\n    gamma (float): Learning rate for the normalization.\n    beta (float): Learning rate for the normalization.\n\n    Returns:\n    list[float]: The output of the DyT function.\n    \"\"\"\n    x = x.reshape(-1, 1)\n    derivative = 1 / (1 + np.exp(-2 * x))\n    dyt = alpha * derivative + beta\n    dyt = dyt.reshape(-1)\n    dyt = np.round(dyt, 4)\n    return dyt.tolist()"}
