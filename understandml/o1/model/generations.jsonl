{"task_id": 0, "completion_id": 0, "completion": "import numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularized) Linear Regression using its closed-form solution:\n    \n        w_hat = (X^T X + alpha * I)^{-1} X^T y\n    \n    where:\n      - The last column of `data` is the target (y).\n      - All preceding columns are features (X).\n      - A column of ones is added to X for the intercept.\n      - alpha >= 0 is the regularization strength.\n      - If (X^T X + alpha * I) is not invertible, returns -1.\n\n    Parameters:\n    -----------\n    data : np.ndarray\n        2D array with shape (n_samples, n_features + 1).\n        The last column is the target values.\n        The other columns are the features.\n    alpha : float\n        Regularization parameter (alpha >= 0).\n\n    Returns:\n    --------\n    list[float]\n        The weight vector (including intercept) rounded to 4 decimal places as a Python list.\n        If the matrix is singular, returns -1.\n    \"\"\"\n    # Separate features (X) and target (y)\n    X = data[:, :-1]  # All columns except the last\n    y = data[:, -1]   # Last column\n\n    # Add a bias (intercept) column of ones to X\n    n_samples = X.shape[0]\n    Xb = np.hstack([X, np.ones((n_samples, 1))])  # (n_samples, n_features+1)\n\n    # Construct the matrix to invert\n    A = Xb.T @ Xb + alpha * np.eye(Xb.shape[1])\n\n    # Check invertibility / attempt inversion\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        return -1  # Not invertible numerically\n\n    # Compute the weights\n    w = A_inv @ Xb.T @ y\n\n    # Round to 4 decimal places and return as list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 1, "completion_id": 0, "completion": "import numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    \n    # 1. Initialize alpha and b\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Precompute the Gram matrix: K[i, j] = X_train[i] \u22c5 X_train[j]\n    K = X_train @ X_train.T\n    \n    updates = 0  # count how many updates so far\n    \n    while True:\n        any_update = False\n        # 2. Scan the samples in order\n        for i in range(n_samples):\n            # 3. Compute the activation\n            activation = np.dot(alpha * y_train, K[:, i])\n            margin = y_train[i] * (activation + b)\n            \n            # 4. Misclassification check\n            if margin <= 0:\n                # update alpha[i] and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                any_update = True\n                \n                # stop if we exceed the allowed number of updates\n                if updates >= n_iter:\n                    break\n        \n        # if no update in a full pass or we exceeded n_iter, stop\n        if not any_update or updates >= n_iter:\n            break\n    \n    # 6. Compute the primal weight vector w\n    w = np.zeros(n_features)\n    for i in range(n_samples):\n        w += alpha[i] * y_train[i] * X_train[i]\n    \n    # Round results\n    w_rounded = list(np.round(w, 4))\n    b_rounded = float(np.round(b, 4))\n    \n    return w_rounded, b_rounded"}
{"task_id": 2, "completion_id": 0, "completion": "import numpy as np\n\ndef glm_links():\n    \"\"\"\n    Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n\n    Example\n    -------\n    >>> links = glm_links()\n    >>> mu  = np.array([0.2, 0.8])\n    >>> eta = links[\"logit\"][\"link\"](mu) \n    >>> # eta ~ [-1.38629436, 1.38629436] -> rounded to [-1.3863, 1.3863]\n    >>> np.round(eta, 4)\n    array([-1.3863,  1.3863])\n    >>> mu2 = links[\"logit\"][\"inv_link\"](eta)  \n    >>> # mu2 ~ [0.2, 0.8]\n    >>> np.round(mu2, 4)\n    array([0.2, 0.8])\n    \"\"\"\n    return {\n        \"identity\": {\n            \"link\": lambda mu: mu,\n            \"inv_link\": lambda eta: eta,\n            \"derivative\": lambda mu: np.ones_like(mu, dtype=float),\n        },\n        \"log\": {\n            \"link\": np.log,\n            \"inv_link\": np.exp,\n            \"derivative\": lambda mu: 1.0 / mu,\n        },\n        \"logit\": {\n            \"link\": lambda mu: np.log(mu / (1.0 - mu)),\n            \"inv_link\": lambda eta: 1.0 / (1.0 + np.exp(-eta)),\n            \"derivative\": lambda mu: 1.0 / (mu * (1.0 - mu)),\n        },\n    }"}
{"task_id": 3, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    # Ensure data is at least 2D\n    n_samples, n_features = data.shape\n\n    # This will store the depth for each sample\n    depths = [0] * n_samples\n\n    # Recursive helper function to build the tree and assign depths\n    def build_tree(indices, depth):\n        # Leaf if fewer than 3 samples\n        if len(indices) < 3:\n            for idx in indices:\n                depths[idx] = depth\n            return\n\n        # Randomly pick a feature to split\n        f = np.random.randint(n_features)\n        # Determine the range [down, up] along this feature\n        down, up = np.min(data[indices, f]), np.max(data[indices, f])\n\n        # If all values are the same, we cannot split; treat as leaf\n        if down == up:\n            for idx in indices:\n                depths[idx] = depth\n            return\n\n        # Pick split value uniformly\n        v = np.random.uniform(down, up)\n\n        # Partition samples to left or right\n        left_indices = []\n        right_indices = []\n        for idx in indices:\n            if data[idx, f] <= v:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n\n        # Recurse\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n\n    # Fix the seed for reproducibility before any random operations\n    np.random.seed(0)\n\n    # Build the isolation tree starting from all samples at depth 0\n    build_tree(list(range(n_samples)), 0)\n\n    return depths"}
{"task_id": 4, "completion_id": 0, "completion": "import numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    # If X is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n    \n    # Compute the squared L2 norm of each row\n    row_sums = np.sum(X**2, axis=1)  # shape = (n_samples,)\n    \n    # Compute pair-wise distances using\n    #  ||x-y||^2 = ||x||^2 + ||y||^2 - 2 x^T y\n    D = row_sums[:, np.newaxis] + row_sums[np.newaxis, :] - 2 * X.dot(X.T)\n    \n    # Numerical stability: ensure values are not slightly negative due to floating-\n    # point precision (e.g., -1e-15)\n    D = np.maximum(D, 0)\n    \n    # Round to 4 decimal places\n    D = np.round(D, 4)\n    \n    # Convert to nested Python list\n    return D.tolist()"}
{"task_id": 6, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    # Sum up all tree outputs\n    sum_of_preds = np.zeros_like(predictions[0], dtype=float)\n    for tree_pred in predictions:\n        sum_of_preds += np.asarray(tree_pred, dtype=float)\n\n    # Combine them into the raw score:\n    # score = 0 - learning_rate * \u03a3(tree_predictions)\n    raw_score = -learning_rate * sum_of_preds\n\n    # Apply softmax row-wise for numerical stability:\n    # 1) subtract row-wise maximum to avoid overflow in exp\n    shifted = raw_score - np.max(raw_score, axis=1, keepdims=True)\n    exps = np.exp(shifted)\n    softmax_scores = exps / np.sum(exps, axis=1, keepdims=True)\n\n    # For each row (sample) pick the class with the highest probability\n    predicted_labels = np.argmax(softmax_scores, axis=1)\n\n    # Convert to a plain Python list\n    return predicted_labels.tolist()\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n\n    # Convert each transaction to a set to remove duplicates\n    transactions = [set(t) for t in transactions]\n    N = len(transactions)\n\n    # Compute minimum absolute support\n    min_support = math.ceil(minsup * N)\n    if min_support <= 0:\n        return {}\n\n    # ------------------------------------------------------------------------\n    # 1. Find all 1-item frequent sets\n    # ------------------------------------------------------------------------\n    item_counts = Counter()\n    for t in transactions:\n        for item in t:\n            item_counts[item] += 1\n\n    # Keep only frequent 1-itemsets\n    L1 = []\n    freq_itemsets = {}\n    for item, count in item_counts.items():\n        if count >= min_support:\n            # Store as a tuple of length 1\n            itemset_tuple = (item,)\n            freq_itemsets[itemset_tuple] = count\n            L1.append(itemset_tuple)\n\n    # Sort for consistent ordering\n    L1.sort()\n\n    # ------------------------------------------------------------------------\n    # 2. Iteratively build frequent k-itemsets using the Apriori principle\n    # ------------------------------------------------------------------------\n    Lk = L1  # Current list of frequent itemsets of size k\n    k = 2    # We'll move from k=1 to k=2, etc.\n\n    while Lk:\n        # Generate candidate itemsets of size k from the frequent (k-1)-itemsets\n        Ck = []\n        Lk_set = set(Lk)  # For quick membership checking\n\n        for i in range(len(Lk)):\n            for j in range(i + 1, len(Lk)):\n                p = Lk[i]\n                q = Lk[j]\n                # Check if the first k-2 items are the same\n                if p[:k - 2] == q[:k - 2]:\n                    # Candidate is the union of p and q\n                    candidate = tuple(sorted(set(p).union(q)))\n                    # Only consider it if it truly forms a length-k itemset\n                    if len(candidate) == k:\n                        # Apriori pruning: all (k-1)-subsets of 'candidate' must be in Lk\n                        all_subsets_frequent = True\n                        for subset in combinations(candidate, k - 1):\n                            if tuple(sorted(subset)) not in Lk_set:\n                                all_subsets_frequent = False\n                                break\n                        if all_subsets_frequent:\n                            Ck.append(candidate)\n                else:\n                    # Since Lk is sorted, once p[:k-2] != q[:k-2], future j won't match p\n                    break\n\n        # Count support for each candidate in Ck by scanning transactions\n        candidate_count = Counter()\n        for t in transactions:\n            for c in Ck:\n                if set(c).issubset(t):\n                    candidate_count[c] += 1\n\n        # Filter out candidates that are not frequent\n        Lk_new = []\n        for c in Ck:\n            if candidate_count[c] >= min_support:\n                freq_itemsets[c] = candidate_count[c]\n                Lk_new.append(c)\n\n        # Sort and prepare for next iteration\n        Lk_new.sort()\n        Lk = Lk_new\n        k += 1\n\n    return freq_itemsets\n```\n\nExplanation of the main steps:\n\n1. Convert each transaction to a set to remove duplicates within the same transaction.  \n2. Compute the minimum absolute support as math.ceil(minsup \u00d7 N).  \n3. Identify 1-item frequent sets by counting each item\u2019s support and retaining those above the threshold.  \n4. Apply the Apriori algorithm iteratively:  \n   \u2022 Generate candidates of size k by joining frequent (k\u22121)-itemsets that share the first k\u22122 items.  \n   \u2022 Prune candidates whose any (k\u22121)-subset is not frequent.  \n   \u2022 Count support of each candidate in a scan over the transactions.  \n   \u2022 Retain only those candidates meeting the minimum absolute support.  \n5. Collect all frequent itemsets in a dictionary mapping the sorted tuple of items to its support count.  \n6. Return the dictionary (or an empty dictionary if no itemsets are frequent)."}
{"task_id": 8, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n\n    # Number of training samples\n    n_samples = X_train.shape[0]\n    # Number of features\n    n_features = X_train.shape[1]\n\n    # Initialize weights and bias to zero\n    w = np.zeros(n_features)\n    b = 0.0\n\n    # Sigmoid / logistic function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # Gradient Descent\n    for _ in range(n_iterations):\n        # Linear model: z = w\u00b7X + b\n        z = X_train.dot(w) + b  # shape (n_samples,)\n        # Predictions (sigmoid)\n        preds = sigmoid(z)      # shape (n_samples,)\n\n        # Compute gradients\n        dw = (1 / n_samples) * X_train.T.dot(preds - y_train)  # shape (n_features,)\n        db = (1 / n_samples) * np.sum(preds - y_train)\n\n        # Update parameters\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Predict on test set\n    predictions = []\n    for x in X_test:\n        z = np.dot(x, w) + b\n        prob = sigmoid(z)\n        label = int(round(prob))  # round to 0 or 1\n        predictions.append(label)\n\n    return predictions"}
{"task_id": 10, "completion_id": 0, "completion": "import numpy as np\n\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\(\\tilde{X}_{t-1}\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\(X_t\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\(\\varepsilon\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    # Convert inputs to numpy arrays (at least 1D for uniform handling).\n    p = np.array(prev, dtype=float, ndmin=1)\n    c = np.array(cur, dtype=float, ndmin=1)\n    w = np.array(weight, dtype=float, ndmin=1)\n    \n    # Perform first-order exponential smoothing with broadcasting.\n    result = w * p + (1.0 - w) * c\n    \n    # Round the result to 4 decimal places.\n    result_rounded = np.round(result, 4)\n    \n    # If all inputs were scalars, return a single float.\n    # We can check by verifying dimension is 0 for each converted array.\n    if p.ndim == 0 and c.ndim == 0 and w.ndim == 0:\n        return float(result_rounded)\n    else:\n        # Otherwise, return a list of floats.\n        return result_rounded.tolist()"}
{"task_id": 11, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the cluster centres with the first k samples\n    centers = data[:k].astype(float).copy()\n\n    n_samples = data.shape[0]\n\n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre (using squared Euclidean distance)\n        # distances will be an array of shape (n_samples, k)\n        # distance[i,j] = sum over features of (data[i] - centers[j])^2\n        distances = np.sum((data[:, None] - centers[None, :]) ** 2, axis=2)\n        cluster_assignments = np.argmin(distances, axis=1)\n\n        # Step 3: Compute new centres as the mean of samples assigned to each cluster\n        new_centers = np.zeros_like(centers)\n        for cluster_idx in range(k):\n            # Find all samples currently assigned to cluster cluster_idx\n            indices = np.where(cluster_assignments == cluster_idx)[0]\n            if len(indices) == 0:\n                # Step 3 (empty cluster): re-initialize its centre with a random sample\n                new_centers[cluster_idx] = data[np.random.randint(n_samples)]\n            else:\n                # Mean of all samples assigned to this cluster\n                new_centers[cluster_idx] = np.mean(data[indices], axis=0)\n\n        # Step 4: Check for convergence by comparing maximum centre movement\n        shift = np.sqrt(np.sum((centers - new_centers) ** 2, axis=1)).max()\n        centers = new_centers\n        if shift < epsilon:\n            break\n\n    # Round centres to 4 decimal places as required\n    centers_rounded = np.round(centers, 4).tolist()\n\n    return centers_rounded, cluster_assignments.tolist()"}
{"task_id": 12, "completion_id": 0, "completion": "import numpy as np\n\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    # Number of frames (M) and number of samples in each frame (N)\n    M, N = frames.shape\n\n    # Compute real FFT along rows (axis=1)\n    fft_vals = np.fft.rfft(frames, axis=1)\n\n    # Compute the power spectrum: squared magnitude of the FFT\n    power_spec = np.abs(fft_vals) ** 2\n\n    # Scale by (N//2 + 1) if requested\n    if scale:\n        power_spec /= (N // 2 + 1)\n\n    # Round to 4 decimal places\n    power_spec = np.round(power_spec, 4)\n\n    # Return as a regular Python list\n    return power_spec.tolist()"}
{"task_id": 13, "completion_id": 0, "completion": "import numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"\n    Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and then predicts\n    the attractiveness of every yet unrated item for the specified user.\n    It finally returns the indices of the k most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either 'cosine' (default) or 'pearson'.\n\n    Returns\n    -------\n    list[int]\n        A list with at most k item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n\n    # --- 1. Build the item\u2013item similarity matrix S ---\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item), dtype=np.float64)\n\n    # Helper function: mean-center a vector only if its std > 1e-3\n    def maybe_mean_center(v: np.ndarray) -> np.ndarray:\n        if np.std(v) > 1e-3:\n            return v - np.mean(v)\n        return v\n\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users that rated both items i and j\n            mask = (data[:, i] > 0) & (data[:, j] > 0)\n            if not np.any(mask):\n                # No common users => similarity is 0\n                continue\n\n            v1 = data[mask, i]\n            v2 = data[mask, j]\n\n            if criterion == 'cosine':\n                # Possibly mean-center each vector (if std > 1e-3), then compute cosine\n                v1c = maybe_mean_center(v1)\n                v2c = maybe_mean_center(v2)\n                denom = np.linalg.norm(v1c) * np.linalg.norm(v2c)\n                sim = (np.dot(v1c, v2c) / denom) if denom > 1e-12 else 0.0\n            else:\n                # Pearson correlation\n                sim = np.corrcoef(v1, v2)[0, 1]\n\n            S[i, j] = sim\n            S[j, i] = sim\n\n    # --- 2. Collect indices of the items that the active user has rated ---\n    user_ratings = data[user_ind, :]\n    rated_items = np.where(user_ratings > 0)[0]\n\n    # If the user has already rated all items, return empty list\n    if len(rated_items) == n_item:\n        return []\n\n    # --- 3. For every yet unrated item compute the predicted attractiveness ---\n    unrated_items = np.where(user_ratings == 0)[0]\n    scores = {}\n\n    for t in unrated_items:\n        # Denominator = sum of absolute similarities to the items the user has rated\n        denom = np.sum(np.abs(S[t, rated_items]))\n        if denom < 1e-12:\n            # Avoid division by zero => score is defined to be 0\n            scores[t] = 0.0\n        else:\n            # Weighted sum of the user's ratings by similarity to item t\n            num = np.sum(user_ratings[rated_items] * S[t, rated_items])\n            scores[t] = num / denom\n\n    # --- 4. Sort by decreasing score; ties by ascending item index ---\n    # Using a compound sort key: first -score for descending, then item index\n    sorted_items = sorted(scores.keys(), key=lambda itm: (-scores[itm], itm))\n\n    # --- 5. Return the top k items ---\n    return sorted_items[:k]"}
{"task_id": 14, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    epsilon = 1e-15\n    \n    # 1. Compute probabilities via the sigmoid function\n    p = 1.0 / (1.0 + np.exp(-y_pred))\n    \n    # 2. Clip probabilities to avoid log(0)\n    p = np.clip(p, epsilon, 1.0 - epsilon)\n    \n    # 3. Compute individual losses\n    losses = - (y * np.log(p) + (1.0 - y) * np.log(1.0 - p))\n    \n    # 4. Compute mean loss\n    mean_loss = np.mean(losses)\n    \n    # 5. Compute gradient (p - y for each sample)\n    gradient = p - y\n    \n    # 6. Compute Hessian diagonal (p * (1-p) for each sample)\n    hessian = p * (1.0 - p)\n    \n    # 7. Round results to 4 decimal places\n    mean_loss_rounded = round(float(mean_loss), 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    hessian_rounded = np.round(hessian, 4).tolist()\n    \n    return mean_loss_rounded, gradient_rounded, hessian_rounded"}
{"task_id": 16, "completion_id": 0, "completion": "```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)*, the function\n        returns an empty list.\n    \"\"\"\n    length = len(sequence)\n    if N > length:\n        return []\n\n    result = []\n    for i in range(length - N + 1):\n        result.append(tuple(sequence[i : i + N]))\n    return result\n```"}
{"task_id": 17, "completion_id": 0, "completion": "def build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items:\n        return {}\n\n    # Create a list of node dictionaries\n    nodes = []\n    for i in range(len(items)):\n        nodes.append({\n            'item': items[i],\n            'count': counts[i],\n            'children': []\n        })\n\n    # Identify the root (the node with parent == -1)\n    root_index = None\n    for i, p in enumerate(parents):\n        if p == -1:\n            root_index = i\n        else:\n            # Append this node as a child of its parent\n            nodes[p]['children'].append(nodes[i])\n\n    # Return the root node\n    return nodes[root_index] if root_index is not None else {}"}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    # Extract the dtype if provided, else default to float\n    dtype = kwargs.get('dtype', float)\n    return np.zeros(shape, dtype=dtype)\n```"}
{"task_id": 19, "completion_id": 0, "completion": "import numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n\n    # Sum of gradients and Hessians of all training instances in this node\n    G_total = np.sum(g)\n    H_total = np.sum(h)\n\n    # Parent node's loss\n    parent_loss = -0.5 * (G_total ** 2) / (H_total + lam) + gamma\n\n    best_gain = 0.0\n    best_feature, best_threshold = None, None\n\n    n_samples, n_features = X.shape\n\n    for feature_index in range(n_features):\n        # Sort data along this feature\n        sort_idx = np.argsort(X[:, feature_index])\n        sorted_feature_values = X[sort_idx, feature_index]\n        sorted_g = g[sort_idx]\n        sorted_h = h[sort_idx]\n\n        # Cumulative sums for quick left/right calculations\n        G_left_cumsum = np.cumsum(sorted_g)\n        H_left_cumsum = np.cumsum(sorted_h)\n\n        # Evaluate all possible split points (unique feature values)\n        for i in range(n_samples - 1):\n            # Skip threshold if it's not between distinct feature values\n            if sorted_feature_values[i] == sorted_feature_values[i + 1]:\n                continue\n\n            left_size = i + 1\n            right_size = n_samples - left_size\n\n            # Enforce at least two samples on each side\n            if left_size < 2 or right_size < 2:\n                continue\n\n            # Compute sums for the left and right children\n            G_left = G_left_cumsum[i]\n            H_left = H_left_cumsum[i]\n            G_right = G_total - G_left\n            H_right = H_total - H_left\n\n            # Compute left and right child losses\n            left_loss = -0.5 * (G_left ** 2) / (H_left + lam) + gamma\n            right_loss = -0.5 * (G_right ** 2) / (H_right + lam) + gamma\n\n            # Gain is parent's loss minus sum of children losses\n            gain = parent_loss - (left_loss + right_loss)\n\n            if gain > best_gain:\n                best_gain = gain\n                # Use the current feature value as threshold; left <= threshold\n                best_feature = feature_index\n                best_threshold = sorted_feature_values[i]\n\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Define the sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    \n    # Check if x is a scalar\n    if isinstance(x, (int, float)):\n        s = sigmoid(x)\n        grad = s * (1 - s)\n        return round(s, 4), round(grad, 4)\n    else:\n        # Convert x to a NumPy array\n        x_arr = np.array(x, dtype=float)\n        \n        s = sigmoid(x_arr)\n        grad = s * (1 - s)\n        \n        # Round results to 4 decimals\n        s_rounded = np.round(s, 4)\n        grad_rounded = np.round(grad, 4)\n        \n        # Convert to Python list\n        return s_rounded.tolist(), grad_rounded.tolist()"}
{"task_id": 21, "completion_id": 0, "completion": "import numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble (with decision stumps) and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # --------------------------------------------------------------------------\n    # Helper functions\n    # --------------------------------------------------------------------------\n    def stump_predict(d, theta, x_val):\n        \"\"\"Predict using a single stump defined by (d, theta).\"\"\"\n        if d == 0:\n            # +1 if x <= theta, -1 otherwise\n            return 1 if x_val <= theta else -1\n        else:\n            # +1 if x > theta, -1 otherwise\n            return 1 if x_val > theta else -1\n\n    def sign_with_tie_as_positive(value):\n        \"\"\"Sign function that returns 1 if value >= 0, else -1.\"\"\"\n        return 1 if value >= 0 else -1\n\n    # --------------------------------------------------------------------------\n    # Convert to NumPy arrays for convenience\n    # --------------------------------------------------------------------------\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    n = len(x_train)\n\n    # --------------------------------------------------------------------------\n    # Initialize sample weights uniformly\n    # --------------------------------------------------------------------------\n    w = np.ones(n) / n\n\n    # --------------------------------------------------------------------------\n    # Create all possible thresholds by sorting x_train\n    # --------------------------------------------------------------------------\n    sorted_indices = np.argsort(x_train)\n    sorted_x = x_train[sorted_indices]\n\n    # Possible thresholds: midpoints between consecutive distinct sorted_x\n    thresholds = []\n    for i in range(n - 1):\n        if sorted_x[i] != sorted_x[i + 1]:\n            mid = 0.5 * (sorted_x[i] + sorted_x[i + 1])\n            thresholds.append(mid)\n\n    # If all points are identical, we can still train a stump with (threshold < or > that point)\n    if len(thresholds) == 0:\n        # All x are the same; pick any threshold since all stumps behave the same\n        thresholds = [sorted_x[0]]\n\n    # --------------------------------------------------------------------------\n    # Store the ensemble of (d, theta, alpha)\n    # --------------------------------------------------------------------------\n    ensemble = []\n\n    # --------------------------------------------------------------------------\n    # Iterative AdaBoost\n    # --------------------------------------------------------------------------\n    while True:\n        # 1) Pick the best stump given current weights w\n        best_threshold = None\n        best_d = None\n        best_error = float(\"inf\")\n        best_predictions = None\n\n        # Check each threshold and each d in {0,1}\n        for theta in thresholds:\n            for d in [0, 1]:\n                # Compute weighted error\n                # pred[i] = stump_predict(d, theta, x_train[i])\n                preds = np.array([stump_predict(d, theta, x_val) for x_val in x_train])\n                misclassified = (preds != y_train)\n                error = np.sum(w[misclassified])\n\n                # Keep track of the best stump\n                if error < best_error:\n                    best_error = error\n                    best_threshold = theta\n                    best_d = d\n                    best_predictions = preds\n\n        # If the stump perfectly separates (error=0), we can stop early\n        if best_error <= 1e-15:\n            # alpha can be very large, but one perfectly separating stump\n            # is enough to get 0 training error\n            alpha = 0.5 * math.log((1.0 - 1e-15) / 1e-15)\n            ensemble.append((best_d, best_threshold, alpha))\n            break\n\n        # 2) Compute alpha\n        alpha = 0.5 * math.log((1.0 - best_error) / best_error)\n\n        # 3) Update the weights\n        # w[i] <- w[i]*exp(-alpha*y[i]*h(x[i])) and then normalize\n        w *= np.exp(-alpha * y_train * best_predictions)\n        w /= np.sum(w)\n\n        # 4) Add the selected stump to the ensemble\n        ensemble.append((best_d, best_threshold, alpha))\n\n        # 5) Check the training error of the current ensemble\n        #    training error = fraction of misclassified training points\n        #    by sign( sum_{j} alpha_j * stump_j(x) )\n        agg_pred = np.zeros(n)\n        for (d_j, theta_j, alpha_j) in ensemble:\n            preds_j = np.array([stump_predict(d_j, theta_j, x_val) for x_val in x_train])\n            agg_pred += alpha_j * preds_j\n\n        final_pred_train = np.array([sign_with_tie_as_positive(v) for v in agg_pred])\n        training_error = np.mean(final_pred_train != y_train)\n\n        if training_error <= epsilon:\n            break\n\n    # --------------------------------------------------------------------------\n    # Use the trained ensemble to predict x_test\n    # --------------------------------------------------------------------------\n    x_test = np.array(x_test, dtype=float)\n    agg_pred_test = np.zeros(len(x_test))\n\n    for (d_j, theta_j, alpha_j) in ensemble:\n        test_preds_j = np.array([stump_predict(d_j, theta_j, x_val) for x_val in x_test])\n        agg_pred_test += alpha_j * test_preds_j\n\n    final_pred_test = [sign_with_tie_as_positive(v) for v in agg_pred_test]\n\n    # Convert each prediction to int (1 or -1)\n    return [int(p) for p in final_pred_test]"}
{"task_id": 22, "completion_id": 0, "completion": "import numpy as np\n\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"\n    Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [-300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    If standardize=True, then for a 2D shape (N, D), each of the D columns\n    will be independently shifted to have mean 0.0 and scaled to have\n    standard deviation 1.0 (up to numerical precision). A tiny constant\n    \u03f5 = np.finfo(float).eps is added to the standard deviation to avoid\n    division by zero.\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True and the tensor is at least 2D, each column\n            (features along axis 0) is standardized. For 1D, the entire array\n            is standardized.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    # 1. Draw integer offsets uniformly on [-300, 299]\n    offsets = np.random.randint(-300, 300, size=shape).astype(float)\n    # 2. Draw real offsets in [0, 1)\n    reals = np.random.random_sample(size=shape)\n    # 3. Combine to form the random tensor\n    tensor = offsets + reals\n\n    # 4. Optionally standardize\n    if standardize:\n        eps = np.finfo(float).eps\n        if len(shape) == 1:\n            # If it's 1D, treat the entire array as one \"column\"\n            mu = tensor.mean()\n            sigma = tensor.std()\n            tensor = (tensor - mu) / (sigma + eps)\n        else:\n            # For 2D or higher, standardize each \"column\" along the first axis (axis=0)\n            mu = tensor.mean(axis=0)\n            sigma = tensor.std(axis=0)\n            tensor = (tensor - mu) / (sigma + eps)\n\n    return tensor"}
{"task_id": 24, "completion_id": 0, "completion": "import numpy as np\n\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    # Convert input parameters to NumPy arrays\n    w = np.array(w, dtype=float)\n    if not velocity:\n        # If velocity is empty, treat as zero vector\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.array(velocity, dtype=float)\n\n    # 1. Look-ahead point\n    w_look = w - momentum * velocity\n    \n    # 2. Gradient evaluation with element-wise clipping to [-1, 1]\n    g = grad_func(w_look)\n    g = np.clip(g, -1, 1)\n    \n    # 3. Velocity update\n    velocity_new = momentum * velocity + learning_rate * g\n    \n    # 4. Parameter update\n    w_new = w - velocity_new\n    \n    # Convert updated parameters and velocity to Python lists rounded to 4 decimals\n    w_new_rounded = np.round(w_new, 4).tolist()\n    velocity_new_rounded = np.round(velocity_new, 4).tolist()\n    \n    return (w_new_rounded, velocity_new_rounded)"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : np.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : np.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : np.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n\n    # Combine alpha and y once, as they always appear in a product\n    alpha_y = alpha * y_train  # shape (n,)\n\n    # Compute pairwise squared distances between X_test and X_train\n    # Shape: (m, n) after broadcasting\n    diff = X_test[:, np.newaxis, :] - X_train[np.newaxis, :, :]\n    sq_dist = np.sum(diff * diff, axis=2)\n\n    # Compute the RBF kernel values for each pair\n    kernel_matrix = np.exp(-gamma * sq_dist)  # shape (m, n)\n\n    # Compute the decision function g(z) = sum_i(alpha_i * y_i * k(x_i, z)) + b\n    decision_values = kernel_matrix @ alpha_y + b  # shape (m,)\n\n    # Convert sign of decision values into predictions of +1 or -1\n    # np.sign(0) is 0, so we make 0 -> 1 to match the usual SVM convention\n    predictions = np.where(decision_values >= 0, 1, -1)\n\n    # Convert to Python list of int\n    return predictions.astype(int).tolist()\n```"}
{"task_id": 26, "completion_id": 0, "completion": "import numpy as np\n\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    # Convert the (possibly nested) list to a NumPy array\n    arr = np.array(x)\n\n    # ReLU activation: max(0, x)\n    relu_activated = np.where(arr >= 0, arr, 0)\n\n    # Gradient: 1 if x >= 0 else 0\n    gradient = np.where(arr >= 0, 1, 0)\n\n    # Convert back to Python lists with the original shape\n    return relu_activated.tolist(), gradient.tolist()"}
{"task_id": 28, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both values are\n        rounded to four decimals. If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert X to a NumPy array\n    X_np = np.array(X, dtype=float)\n    m, n = X_np.shape\n    \n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Compute the SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Keep only the first k singular values\n    U_k = U[:, :k]            # Shape (m, k)\n    s_k = s[:k]               # Shape (k,)\n    Vt_k = Vt[:k, :]          # Shape (k, n)\n    \n    # Construct the rank-k approximation\n    S_k = np.diag(s_k)        # Shape (k, k)\n    X_hat_np = U_k @ S_k @ Vt_k  # Shape (m, n)\n    \n    # Compute the MSE\n    mse = np.mean((X_np - X_hat_np)**2)\n    \n    # Round and convert X_hat to list of lists\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    \n    # Round the MSE\n    mse_rounded = round(mse, 4)\n    \n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "completion": "import numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive x_train values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than epsilon.  \n    3. Return the prediction for x_query obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as x_train).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for x_query, rounded to\n        four decimal places.\n    \"\"\"\n\n    # Convert inputs to arrays and sort by x\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    sort_idx = np.argsort(x_train)\n    x_sorted = x_train[sort_idx]\n    y_sorted = y_train[sort_idx]\n\n    # Compute initial residual (model starts as 0 prediction)\n    residual = y_sorted.copy()\n\n    # Generate all candidate split points: midpoints between consecutive distinct x's\n    unique_x = np.unique(x_sorted)\n    candidate_splits = []\n    for i in range(len(unique_x) - 1):\n        # Midpoint between consecutive distinct values\n        s = 0.5 * (unique_x[i] + unique_x[i+1])\n        candidate_splits.append(s)\n\n    # We will store each learnt stump as (split_value, c1, c2)\n    stumps = []\n\n    # Safety limit on iterations to avoid infinite loops if epsilon is hard to reach\n    max_iters = 1000\n    iter_count = 0\n\n    # Iteratively add stumps until residual sum of squares < epsilon or max_iters reached\n    while iter_count < max_iters:\n        iter_count += 1\n        current_rss = np.sum(residual ** 2)\n        if current_rss < epsilon:\n            break  # Residual is already small enough\n\n        best_rss = float('inf')\n        best_s = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n\n        # If no candidate splits exist (e.g. all x are identical), we cannot split\n        # A single \"constant-only\" stump will remove the mean from the residual\n        # (but will not remove variance). In practice, repeated additions won't\n        # clean up variance further, but we do at least one fit to remove the mean.\n        if len(candidate_splits) == 0:\n            c_mean = np.mean(residual)\n            # Compute RSS after subtracting this mean everywhere\n            new_rss = np.sum((residual - c_mean) ** 2)\n            if new_rss < best_rss:\n                best_rss = new_rss\n                best_s = x_sorted[-1] + 1.0  # a split that puts all data on the left\n                best_c1 = c_mean\n                best_c2 = 0.0\n        else:\n            # Search over all candidate splits\n            for s in candidate_splits:\n                # Find the cutoff index such that x_sorted[:idx+1] <= s\n                idx = np.searchsorted(x_sorted, s, side='right') - 1\n                # Left side: up to idx inclusive, right side: idx+1 onward\n                left_res = residual[:idx+1]\n                right_res = residual[idx+1:]\n\n                # Compute means for left and right sides\n                if len(left_res) > 0:\n                    c1 = np.mean(left_res)\n                else:\n                    c1 = 0.0  # no points on left, arbitrary\n\n                if len(right_res) > 0:\n                    c2 = np.mean(right_res)\n                else:\n                    c2 = 0.0  # no points on right, arbitrary\n\n                # Compute the RSS if we add this stump\n                rss_left = np.sum((left_res - c1) ** 2)\n                rss_right = np.sum((right_res - c2) ** 2)\n                rss_total = rss_left + rss_right\n\n                if rss_total < best_rss:\n                    best_rss = rss_total\n                    best_s = s\n                    best_c1 = c1\n                    best_c2 = c2\n\n        # Add the best stump to the ensemble and update residual\n        stumps.append((best_s, best_c1, best_c2))\n        # Update residual using the best stump found\n        idx = np.searchsorted(x_sorted, best_s, side='right') - 1\n        residual[:idx+1] -= best_c1\n        residual[idx+1:] -= best_c2\n\n        # If this new RSS is good enough, we can stop\n        if best_rss < epsilon:\n            break\n\n    # Once we have our list of stumps, predict for x_query by summing contributions\n    prediction = 0.0\n    for (s, c1, c2) in stumps:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n\n    return float(f\"{prediction:.4f}\")"}
{"task_id": 32, "completion_id": 0, "completion": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    def convert_if_string(x):\n        return float(x) if isinstance(x, str) else x\n\n    a = convert_if_string(a)\n    b = convert_if_string(b)\n    return a, b\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n    return wrapper\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    total = a + b\n    # Return int if the total is an integer, otherwise float.\n    return int(total) if total.is_integer() else total"}
{"task_id": 34, "completion_id": 0, "completion": "import numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a random binary tensor of the specified shape,\n    filled with 0.0 and 1.0. Each entry is 1.0 with probability\n    equal to 'sparsity' and 0.0 otherwise.\n\n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        The probability of an element being 1.0. Must be in [0, 1].\n    seed : int or None, optional\n        A random seed for reproducible results. If None, the global\n        NumPy RNG state is used.\n\n    Returns\n    -------\n    numpy.ndarray or int\n        A float dtype NumPy array of 0.0 and 1.0 if 'sparsity' is valid,\n        otherwise returns -1.\n    \"\"\"\n    # 1) Validate the sparsity range\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    # 2) If a seed is provided, use it for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # 3) Generate uniform random values\n    rand_vals = np.random.rand(*shape)\n\n    # 4) Determine the threshold based on sparsity\n    threshold = 1.0 - sparsity\n\n    # 5) Produce a boolean mask (True where rand_vals >= threshold)\n    mask = rand_vals >= threshold\n\n    # 6) Convert the boolean mask to float (0.0 or 1.0)\n    return mask.astype(float)"}
{"task_id": 35, "completion_id": 0, "completion": "from typing import Any\n\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int = -1, res: Any | None = None, child: dict | None = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\n\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        # If the feature index is out of range, we cannot classify\n        if current.fea < 0 or current.fea >= len(sample):\n            return -1\n\n        value = sample[current.fea]\n        # If the value is not in the child map, we cannot classify\n        if value not in current.child:\n            return -1\n\n        # Move to the child corresponding to this feature value\n        current = current.child[value]\n\n    # If we're here, it's a leaf node\n    return current.res"}
{"task_id": 36, "completion_id": 0, "completion": "from typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Return a list of predictions for each sample in X using the given tree.\"\"\"\n\n    if root is None:\n        return []\n\n    def _predict_single(node: Node, sample: List[float]) -> float:\n        # If this is a leaf node, return its stored prediction\n        if node.left is None and node.right is None:\n            return node.threshold\n\n        # Otherwise, decide whether to go left or right\n        if sample[node.feature] <= node.threshold:\n            return _predict_single(node.left, sample)\n        else:\n            return _predict_single(node.right, sample)\n\n    # Compute predictions for all samples\n    predictions = [_predict_single(root, sample) for sample in X]\n    return predictions"}
{"task_id": 37, "completion_id": 0, "completion": "import numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    # Return None if the array is empty\n    if data.shape[0] == 0:\n        return None\n    \n    # Number of features in each point\n    m = data.shape[1] - 1\n    \n    # Create a single cycle over the splitting dimensions\n    dimension_cycle = cycle(range(m))\n    \n    def build_helper(subset: np.ndarray) -> dict | None:\n        \"\"\"Recursively build the kd-tree from the given subset of data.\"\"\"\n        if subset.shape[0] == 0:\n            return None\n        \n        # Determine the current splitting dimension\n        d = next(dimension_cycle)\n        \n        # Sort the data along column d\n        subset_sorted = subset[np.argsort(subset[:, d])]\n        \n        # Select the median point\n        mid = subset_sorted.shape[0] // 2\n        \n        # Build the node dictionary\n        node = {\n            \"point\": subset_sorted[mid, :m].tolist(),\n            \"label\": subset_sorted[mid, m],\n            \"left\": build_helper(subset_sorted[:mid]),\n            \"right\": build_helper(subset_sorted[mid+1:])\n        }\n        \n        return node\n    \n    # Build and return the kd-tree\n    return build_helper(data)"}
{"task_id": 38, "completion_id": 0, "completion": "import numpy as np\n\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    scores = np.zeros(n_arms)\n\n    for a in range(n_arms):\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        A_inv = np.linalg.inv(A_a)\n\n        c_a = context[:, a]\n        theta_hat_a = A_inv @ b_a\n        p_a = theta_hat_a @ c_a + alpha * np.sqrt(c_a @ A_inv @ c_a)\n\n        scores[a] = p_a\n\n    return int(np.argmax(scores))"}
{"task_id": 39, "completion_id": 0, "completion": "import numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"\n    Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n        \n    Notes\n    -----\n    For even n, uses position n//2 as the median index.\n    \"\"\"\n    n = data.shape[0]\n    # Position of the median (for even n, by problem statement, use n//2)\n    mid = n // 2\n\n    # argpartition in O(n) time\n    idx = np.argpartition(data[:, d], mid)\n\n    # pivot (row index in the original array) and pivot value\n    pivot = idx[mid]\n    pivot_val = data[pivot, d]\n\n    # Create left and right lists of original row indices (strictly below/above pivot_val)\n    left_indices = np.where(data[:, d] < pivot_val)[0].tolist()   # strictly smaller\n    right_indices = np.where(data[:, d] > pivot_val)[0].tolist()  # strictly larger\n\n    # Sort them to keep output deterministic\n    left_indices.sort()\n    right_indices.sort()\n\n    return pivot, left_indices, right_indices"}
{"task_id": 40, "completion_id": 0, "completion": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # 1. Check the preconditions\n    assert x.ndim == 1, \"Input array x must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Signal length must be >= frame_width.\"\n\n    # 2. Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # 3. Shape and strides\n    shape = (n_frames, frame_width)\n    strides = (stride * x.strides[0], x.strides[0])\n\n    # 4. Create a strided view\n    framed = as_strided(x, shape=shape, strides=strides)\n\n    # 5. Control writeability\n    if not writeable:\n        framed.flags.writeable = False\n    else:\n        # Inherits writeability from the original array\n        framed.flags.writeable = x.flags.writeable\n\n    return framed"}
{"task_id": 41, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    predictions = []\n    \n    # Convert training data to numpy arrays for convenience (optional)\n    X_data_np = np.array(X_data, dtype=float)  # Shape: (num_train_samples, num_features)\n    \n    for query in X:\n        # Convert the query to a numpy array\n        query_np = np.array(query, dtype=float)  # Shape: (num_features,)\n        \n        # Compute Euclidean distances from the query to each training sample\n        distances = np.linalg.norm(X_data_np - query_np, axis=1)\n        \n        # Get the indices of the k nearest neighbours in ascending distance order\n        nearest_indices = np.argsort(distances)[:min(k, len(X_data_np))]\n        \n        # Gather the labels of the nearest neighbours\n        nearest_labels = [y_data[idx] for idx in nearest_indices]\n        \n        # Perform majority voting\n        label_counts = Counter(nearest_labels)\n        max_count = max(label_counts.values())\n        \n        # If there's a tie, pick the lexicographically smallest label\n        candidates = [label for label, count in label_counts.items() if count == max_count]\n        chosen_label = sorted(candidates)[0]\n        \n        predictions.append(chosen_label)\n    \n    return predictions"}
{"task_id": 42, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    # 1. Validate inputs\n    if len(actual) == 0 or len(predicted) == 0:\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n\n    # 2. Compute RMSLE\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    logs_diff = np.log(predicted_arr + 1) - np.log(actual_arr + 1)\n    mse_log = np.mean(logs_diff ** 2)\n    rmsle_value = np.sqrt(mse_log)\n\n    # 3. Round and return\n    return float(round(rmsle_value, 4))"}
{"task_id": 44, "completion_id": 0, "completion": "import numpy as np\n\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x, dtype=float)  # Ensure x is a NumPy array of floats\n    \n    if not derivative:\n        # Use the given formula: tanh(x) = 2/(1 + e^(-2*x)) - 1\n        out = 2.0 / (1.0 + np.exp(-2.0 * x)) - 1.0\n    else:\n        # Gradient of tanh(x) = 1 - tanh^2(x)\n        t = 2.0 / (1.0 + np.exp(-2.0 * x)) - 1.0\n        out = 1.0 - t**2\n\n    return list(np.round(out, 4))"}
{"task_id": 46, "completion_id": 0, "completion": "import numpy as np\n\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length N (N \u2265 0).\n\n    Returns:\n        A list of length N where the k-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    # Convert x to a list if it's a NumPy array, to ensure consistent indexing\n    # (though direct indexing on a NumPy array also works).\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    \n    N = len(x)\n    if N == 0:\n        return []\n\n    result = []\n    # Direct double-sum in O(N^2)\n    for k in range(N):\n        acc = 0\n        for n in range(N - k):\n            acc += x[n] * x[n + k]\n        result.append(acc)\n    \n    return result"}
{"task_id": 48, "completion_id": 0, "completion": "import numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        # Convert input to a NumPy array of floats\n        X_arr = np.array(X, dtype=float)\n    except:\n        # If conversion fails, it's not a valid numeric matrix\n        return False\n    \n    # Check for two-dimensional shape\n    if X_arr.ndim != 2:\n        return False\n    \n    # Check that all elements are in the interval [0, 1]\n    if not np.all((X_arr >= 0) & (X_arr <= 1)):\n        return False\n    \n    # Check that each row sums to 1 (within a small numerical tolerance)\n    row_sums = np.sum(X_arr, axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-8):\n        return False\n    \n    # If all checks pass, it is row-stochastic\n    return True"}
{"task_id": 49, "completion_id": 0, "completion": "from typing import List, Union\n\nNumber = Union[int, float]\n\ndef k_smallest(nums: List[Number], k: int) -> Union[List[Number], int]:\n    \"\"\"Return the k smallest numbers contained in *nums* in ascending order,\n    maintaining a custom max-heap of size at most k during one pass over nums.\n    Return -1 if k is invalid (\u2264 0 or > len(nums)).\n\n    The max-heap is implemented using a Python list and\n    two helper procedures _move_up (for inserts) and _move_down (for re-heaping\n    after root replacement).\n    \"\"\"\n    # If k is invalid, return -1\n    if k <= 0 or k > len(nums):\n        return -1\n    \n    def _move_up(heap: List[Number], idx: int) -> None:\n        \"\"\"Move the item at index idx up the max-heap until the heap property is satisfied.\"\"\"\n        while idx > 0:\n            parent = (idx - 1) // 2\n            if heap[idx] > heap[parent]:\n                # Swap child and parent\n                heap[idx], heap[parent] = heap[parent], heap[idx]\n                idx = parent\n            else:\n                break\n\n    def _move_down(heap: List[Number], idx: int) -> None:\n        \"\"\"Move the item at index idx down the max-heap until the heap property is satisfied.\"\"\"\n        size = len(heap)\n        while True:\n            left = 2 * idx + 1\n            right = 2 * idx + 2\n            largest = idx\n\n            # Check left child\n            if left < size and heap[left] > heap[largest]:\n                largest = left\n            # Check right child\n            if right < size and heap[right] > heap[largest]:\n                largest = right\n            \n            # If the largest is still idx, then we're done\n            if largest == idx:\n                break\n            # Otherwise swap and continue\n            heap[idx], heap[largest] = heap[largest], heap[idx]\n            idx = largest\n\n    # We'll store at most k elements in this max-heap\n    heap: List[Number] = []\n\n    # Single pass: keep pushing or replacing root (if needed)\n    for num in nums:\n        if len(heap) < k:\n            # Heap not full yet: just add and move up\n            heap.append(num)\n            _move_up(heap, len(heap) - 1)\n        else:\n            # If current number is smaller than the root, replace and move down\n            if num < heap[0]:\n                heap[0] = num\n                _move_down(heap, 0)\n\n    # Now heap contains k smallest items, but in arbitrary max-heap order.\n    # Sort before returning.\n    heap.sort()\n    return heap"}
{"task_id": 51, "completion_id": 0, "completion": "import numpy as np\n\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n    \"\"\"Implement Newton's method for a 2D linear least-squares problem.\"\"\"\n    # Ensure y is a 1D array (shape: (n,))\n    y = y.reshape(-1)\n\n    n, d = X.shape\n    if d != 2:\n        raise ValueError(\"X must have exactly 2 columns (2 features).\")\n\n    # Start with w = [1, 1]^T\n    w = np.array([1.0, 1.0])\n\n    for _ in range(max_iter):\n        # Compute gradient\n        grad = (2.0 / n) * X.T @ (X @ w - y)\n\n        # Check stopping criterion\n        if np.linalg.norm(grad) < epsilon:\n            break\n\n        # Compute Hessian\n        H = (2.0 / n) * X.T @ X\n\n        # Use pseudo-inverse in case H is singular\n        H_inv = np.linalg.pinv(H)\n\n        # Update w\n        w = w - H_inv @ grad\n\n    # Return final weight vector as 2x1 list of lists with 4 decimal precision\n    return [[round(w[0], 4)], [round(w[1], 4)]]"}
{"task_id": 54, "completion_id": 0, "completion": "import string\n\ndef tokenize_whitespace(line: str, lowercase: bool = True, filter_stopwords: bool = True, filter_punctuation: bool = True, **kwargs) -> list[str]:\n    \"\"\"\n    Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n\n    # A predefined set of common English stop-words.\n    STOPWORDS = {\n        \"i\", \"me\", \"my\", \"myself\",\n        \"we\", \"our\", \"ours\", \"ourselves\",\n        \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\",\n        \"he\", \"him\", \"his\", \"himself\",\n        \"she\", \"her\", \"hers\", \"herself\",\n        \"it\", \"its\", \"itself\",\n        \"they\", \"them\", \"their\", \"theirs\", \"themselves\",\n        \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\",\n        \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\",\n        \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\",\n        \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\",\n        \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\",\n        \"against\", \"between\", \"into\", \"through\", \"during\", \"before\",\n        \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\",\n        \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\",\n        \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\",\n        \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\",\n        \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\",\n        \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\",\n        \"now\"\n    }\n\n    # 1. Lower-case if requested\n    if lowercase:\n        line = line.lower()\n\n    # 2. Split on whitespace\n    raw_tokens = line.split()\n\n    # 3. Process each token\n    final_tokens = []\n    for token in raw_tokens:\n        # 3a. Strip punctuation if requested\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n\n        # Discard if token is empty\n        if not token:\n            continue\n\n        # 3b. Filter stopwords if requested\n        if filter_stopwords and token in STOPWORDS:\n            continue\n\n        # 3c. Keep the token\n        final_tokens.append(token)\n\n    return final_tokens"}
{"task_id": 55, "completion_id": 0, "completion": "import numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    # If the data set is smaller than batch_size, use full-batch\n    effective_batch_size = min(n, batch_size)\n\n    for i in range(max_iter):\n        # Determine start/end indices for this mini-batch (wrap around if needed)\n        start_idx = (i * effective_batch_size) % n\n        end_idx = start_idx + effective_batch_size\n        \n        if end_idx <= n:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            wrap = end_idx - n\n            X_batch = np.concatenate((X[start_idx:], X[:wrap]), axis=0)\n            y_batch = np.concatenate((y[start_idx:], y[:wrap]), axis=0)\n        \n        # Compute gradient w.r.t. this mini-batch\n        g = (1.0 / effective_batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (g * g)\n        \n        # Update weights\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check early stopping condition (gradient norm)\n        if np.linalg.norm(g) < epsilon:\n            break\n\n    # Round to 4 decimals and return as a list\n    return [round(float(wi), 4) for wi in w]"}
{"task_id": 56, "completion_id": 0, "completion": "import numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    SoftPlus(x) = log(1 + e^x)\n    Its derivative = 1 / (1 + e^-x) (the logistic/sigmoid function)\n    \n    Numerically stable implementation:\n    ----------------------------------------------------\n    For the forward pass:\n      If x >= 0: SoftPlus(x) = x + log1p(e^-x)\n      If x < 0:  SoftPlus(x) = log1p(e^x)\n    \n    For the derivative (sigmoid):\n      If x >= 0: sigmoid(x) = 1 / (1 + e^-x)\n      If x < 0:  sigmoid(x) = e^x / (1 + e^x)\n    \n    Rounds output to 4 decimal places and returns a Python list\n    unless x is a scalar, in which case it returns a float.\n    \"\"\"\n    # Convert input x to a NumPy array for vectorized operations\n    x_array = np.array(x, dtype=float) if not np.isscalar(x) else np.array([x], dtype=float)\n\n    # Piecewise computations for stability\n    if deriv:\n        # Derivative: element-wise sigmoid of x\n        positive_mask = (x_array >= 0)\n        out = np.empty_like(x_array)\n\n        # When x >= 0\n        out[positive_mask] = 1.0 / (1.0 + np.exp(-x_array[positive_mask]))\n        # When x < 0\n        out[~positive_mask] = np.exp(x_array[~positive_mask]) / (1.0 + np.exp(x_array[~positive_mask]))\n    else:\n        # Forward pass: SoftPlus\n        positive_mask = (x_array >= 0)\n        out = np.empty_like(x_array)\n\n        # When x >= 0\n        out[positive_mask] = x_array[positive_mask] + np.log1p(np.exp(-x_array[positive_mask]))\n        # When x < 0\n        out[~positive_mask] = np.log1p(np.exp(x_array[~positive_mask]))\n\n    # Round results to 4 decimals\n    out_rounded = np.round(out, 4)\n\n    # Return a float if input was a scalar, otherwise a list\n    if np.isscalar(x):\n        return float(out_rounded[0])\n    else:\n        return out_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The return value must be rounded to 4 decimal places. If any required\n    count is zero you should immediately return float('-inf').\n    \"\"\"\n    # Handle the trivial case where sequence is too short for any N-gram\n    if len(sequence) < N:\n        # By convention, the probability of an empty set of n-grams is 1 \u21d2 log-prob = 0\n        return round(0.0, 4)\n\n    if N == 1:\n        # Unigram model: P(w) = count(w) / len(corpus)\n        total_tokens = len(corpus)\n        unigram_counts = Counter(corpus)\n        \n        log_prob = 0.0\n        for w in sequence:\n            count_w = unigram_counts[w]\n            if count_w == 0:\n                return float('-inf')\n            log_prob += np.log(count_w / total_tokens)\n        return round(log_prob, 4)\n    else:\n        # N > 1: P(w1...wN) = count(w1...wN) / count(w1...wN-1)\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n        \n        # Build the N-gram and (N-1)-gram counts from the corpus\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i+N])\n            ngram_counts[ngram] += 1\n            prefix = tuple(corpus[i:i+N-1])\n            prefix_counts[prefix] += 1\n\n        log_prob = 0.0\n        # Slide over the sequence in windows of length N\n        for i in range(len(sequence) - N + 1):\n            current_ngram = tuple(sequence[i:i+N])\n            current_prefix = tuple(sequence[i:i+N-1])\n            numerator = ngram_counts[current_ngram]\n            denominator = prefix_counts[current_prefix]\n            \n            # If unseen numerator or prefix, probability is zero\n            if numerator == 0 or denominator == 0:\n                return float('-inf')\n\n            log_prob += np.log(numerator / denominator)\n\n        return round(log_prob, 4)"}
{"task_id": 60, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    # If input array is empty, impurity is 0.0\n    if y.size == 0:\n        return 0.0\n\n    if criterion == \"entropy\":\n        # Calculate class probabilities\n        unique_values, counts = np.unique(y, return_counts=True)\n        p = counts / y.size\n        # Compute entropy\n        # We'll only take log2 of p > 0 to avoid log(0)\n        entropy = 0.0\n        for prob in p:\n            if prob > 0:\n                entropy -= prob * np.log2(prob)\n        return float(round(entropy, 4))\n\n    elif criterion == \"gini\":\n        # Calculate class probabilities\n        unique_values, counts = np.unique(y, return_counts=True)\n        p = counts / y.size\n        # Compute Gini index\n        gini = 1.0 - np.sum(p**2)\n        return float(round(gini, 4))\n\n    elif criterion == \"mse\":\n        # Compute mean-squared error\n        mean_value = np.mean(y)\n        mse = np.mean((y - mean_value)**2)\n        return float(round(mse, 4))\n\n    else:\n        # Raise error for unknown criterion\n        raise ValueError(\"Criterion must be one of {'entropy', 'gini', 'mse'}.\")"}
{"task_id": 61, "completion_id": 0, "completion": "import numpy as np\n\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    # 1. Convert inputs to numpy arrays of float type\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    W = np.array(W, dtype=float)\n    \n    # 2. Validate dimensions\n    \n    #   - X must be 2-D\n    if X.ndim != 2:\n        return -1\n    \n    #   - Make y a column vector if it's 1-D\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    #   - Now y must have exactly one column\n    if y.ndim != 2 or y.shape[1] != 1:\n        return -1\n    #   - y must have the same number of rows as X\n    if y.shape[0] != X.shape[0]:\n        return -1\n    \n    #   - Make W a column vector if it's 1-D\n    if W.ndim == 1:\n        W = W.reshape(-1, 1)\n    #   - Now W must have exactly one column\n    if W.ndim != 2 or W.shape[1] != 1:\n        return -1\n    #   - W must have the same number of rows as X's columns\n    if W.shape[0] != X.shape[1]:\n        return -1\n\n    # 3. Compute the gradient using vectorized numpy operations\n    #    Gradient = (X^T (XW - y)) / N\n    N = X.shape[0]\n    grad = (X.T @ (X @ W - y)) / N  # shape (n_features, 1)\n\n    # 4. Round to 4 decimal places\n    grad = np.round(grad, 4)\n\n    # 5. Convert to a nested list of shape (n_features, 1)\n    return grad.tolist()"}
{"task_id": 62, "completion_id": 0, "completion": "import numpy as np\n\ndef lasso_regression(\n    X: list[float] | np.ndarray,\n    y: list[float] | np.ndarray,\n    degree: int,\n    reg_factor: float,\n    n_iterations: int = 1000,\n    tol: float = 1e-6\n) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model using coordinate descent with polynomial features.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients [w0, w1, \u2026, w_degree] rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total, counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to four decimals.\n    \"\"\"\n\n    # Ensure X, y are numpy arrays and 1D\n    X = np.asarray(X).ravel()\n    y = np.asarray(y).ravel()\n    m = len(X)\n    if m == 0:\n        return [0.0] * (degree + 1)\n\n    # Build the design matrix of shape (m, degree+1):\n    # First column = 1 (bias), then x^1, x^2, ..., x^degree\n    # np.vander can do it but in reverse order; let's just use column_stack\n    X_design = np.column_stack([X**p for p in range(degree + 1)])  # [x^0, x^1, ... , x^d]\n\n    # Initialize weights (w0, w1, ..., w_degree) to zeros\n    w = np.zeros(degree + 1, dtype=float)\n\n    def soft_threshold(rho, lam):\n        \"\"\"Soft thresholding operator.\"\"\"\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        w_old = w.copy()\n\n        # 1) Update the bias term w0 exactly (not regularized)\n        # w0 <- mean( y - X_{-0}\u00b7w_{-0} ),\n        # where X_{-0} means columns 1..degree\n        if degree > 0:\n            w[0] = np.mean(y - X_design[:, 1:] @ w[1:])\n        else:\n            # If degree=0, then there's only w0\n            w[0] = np.mean(y)\n\n        # 2) Update each other coefficient w_j (j>=1)\n        for j in range(1, degree + 1):\n            # Compute \u03c1 = x_j^T (y - (X\u00b7w) + w_j x_j)\n            # x_j is X_design[:, j]\n            x_j = X_design[:, j]\n            # partial residual = (y - X@w) + w_j * x_j\n            # (because we subtracted w_j*x_j in X@w but want to add it back once for the coordinate update)\n            rho = x_j.T @ (y - X_design @ w + w[j] * x_j)\n\n            # Then w_j = soft_threshold(rho, \u03bb) / (x_j^T x_j)\n            denom = x_j.T @ x_j\n            if denom == 0:\n                # Edge case if all x_j are zeros\n                w[j] = 0.0\n            else:\n                st = soft_threshold(rho, reg_factor)\n                w[j] = st / denom\n\n        # 3) Check for early stopping\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n\n    # Return coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in w]"}
{"task_id": 63, "completion_id": 0, "completion": "import numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a discrete Hidden Markov Model (HMM) at time index t.\n\n    Parameters:\n        A   (list[list[float]]): Transition-probability matrix of shape (N, N).\n        B   (list[list[float]]): Emission-probability matrix of shape (N, M).\n        obs (list[int])        : Sequence of observation indices (length T).\n        t   (int)              : Time index (0 \u2264 t < T).\n\n    Returns:\n        list[float]: A list of length N containing the backward probabilities at time t,\n                     each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy arrays\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    obs = np.array(obs, dtype=int)\n\n    N = A.shape[0]      # Number of states\n    T = len(obs)        # Length of the observation sequence\n\n    # Initialize the backward matrix with zeros\n    beta = np.zeros((T, N), dtype=float)\n\n    # Base case: \u03b2_{T-1}(i) = 1 for all states i\n    beta[T-1, :] = 1.0\n\n    # Recursively compute \u03b2_t(i) for t = T-2 down to 0\n    for time in range(T-2, -1, -1):\n        for i in range(N):\n            # \u03b2_t(i) = \u2211 a_{i,j} * b_j(obs[time+1]) * \u03b2_{time+1}(j)\n            beta[time, i] = np.sum(A[i, :] * B[:, obs[time+1]] * beta[time+1, :])\n\n    # Extract the backward vector at time t, round each entry to 4 decimals, and return as a list\n    return [round(float(val), 4) for val in beta[t, :]]"}
{"task_id": 64, "completion_id": 0, "completion": "import numpy as np\n\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    This is a naive O(N^2) implementation.  It does not use np.fft or\n    any other FFT helper.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples (real or complex).\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients (length is N if positive_only=False,\n            else N//2 + 1), with real and imaginary parts rounded to 4 decimals.\n    \"\"\"\n    N = len(frame)\n    c = np.zeros(N, dtype=complex)\n    \n    # Naive O(N^2) DFT\n    for k in range(N):\n        s = 0 + 0j\n        for n in range(N):\n            s += frame[n] * np.exp(-2j * np.pi * k * n / N)\n        c[k] = s\n    \n    # Slice the non-negative frequencies if requested\n    if positive_only:\n        c = c[: N // 2 + 1]\n    \n    # Round each coefficient to 4 decimal places in real and imaginary parts\n    c_rounded_list = []\n    for val in c:\n        re = round(val.real, 4)\n        im = round(val.imag, 4)\n        c_rounded_list.append(complex(re, im))\n    \n    return c_rounded_list"}
{"task_id": 65, "completion_id": 0, "completion": "import numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability \n           from state i to state j.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol k\n           from state i.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # If any input list is empty, return 0.0\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)          # Number of states\n    T = len(obs)        # Length of the observation sequence\n\n    # Initialize backward variables beta[t][i]\n    beta = [[0.0] * N for _ in range(T)]\n\n    # Base case: beta[T-1][i] = 1 for all i\n    for i in range(N):\n        beta[T-1][i] = 1.0\n\n    # Recursively fill in the beta table\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            # Sum over all possible next states\n            total = 0.0\n            for j in range(N):\n                total += A[i][j] * B[j][obs[t+1]] * beta[t+1][j]\n            beta[t][i] = total\n\n    # Compute the final probability P(O | \u03bb)\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0][i]\n\n    return round(prob, 6)"}
{"task_id": 67, "completion_id": 0, "completion": "import numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]]:\n    \"\"\"\n    Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    # Helper function to check if a probability distribution sums to 1 (within tolerance)\n    def is_valid_distribution(prob_vector, tol=1e-8):\n        # All probabilities must be nonnegative, and sum must be 1 (within tolerance)\n        return all(p >= 0 for p in prob_vector) and abs(sum(prob_vector) - 1.0) <= tol\n\n    # 1. Validate all probability distributions\n    # Check initial distribution S\n    if not is_valid_distribution(S):\n        return -1\n\n    # Check each row of A\n    for row in A:\n        if not is_valid_distribution(row):\n            return -1\n\n    # Check each row of B\n    for row in B:\n        if not is_valid_distribution(row):\n            return -1\n\n    # 2. Optionally set seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # 3. Sampling\n    #    - first hidden state from S\n    #    - then for next states: from current state's row in A\n    #    - observation from current state's row in B\n\n    N = len(S)         # number of hidden states\n    # M = len(B[0])    # number of emission symbols (not strictly needed for sampling)\n\n    # Sample the first state\n    states = [np.random.choice(N, p=S)]\n    # Sample the first observation\n    observations = [np.random.choice(len(B[0]), p=B[states[0]])]\n\n    # Generate the remaining states and observations\n    for _ in range(1, n_sample):\n        next_state = np.random.choice(N, p=A[states[-1]])\n        states.append(next_state)\n        observations.append(np.random.choice(len(B[0]), p=B[next_state]))\n\n    # 4. Return (states, observations)\n    return states, observations"}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sgd_momentum_update(w: np.ndarray, \n                        grad: np.ndarray, \n                        learning_rate: float = 0.01, \n                        momentum: float = 0.0, \n                        prev_update: np.ndarray | None = None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n\n    # Compute new momentum update\n    new_update = momentum * prev_update + (1 - momentum) * grad\n\n    # Update parameters\n    updated_w = w - learning_rate * new_update\n\n    # Round and convert to Python lists\n    updated_w_rounded = np.round(updated_w, 4).tolist()\n    new_update_rounded = np.round(new_update, 4).tolist()\n\n    return updated_w_rounded, new_update_rounded\n```"}
{"task_id": 69, "completion_id": 0, "completion": "import numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities (length n).\n        A (list[list[float]]): State\u2013transition probability matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        observations (list[int]): Observation index sequence (each in [0, m-1]).\n\n    Returns:\n        float: The likelihood of the observation sequence under the HMM,\n               rounded to 4 decimal places, or \u22121 for invalid input.\n    \"\"\"\n    # -----------------------------\n    # 1. Validate input dimensions\n    # -----------------------------\n    # Check S\n    n = len(S)\n    if n == 0:  # No states, invalid\n        return -1\n\n    # Check A dimensions (n\u00d7n)\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n\n    # Check B dimensions (n\u00d7m)\n    if len(B) != n:\n        return -1\n    if n > 0:\n        m = len(B[0])\n        if m == 0:  # No possible observations, invalid\n            return -1\n        for row in B:\n            if len(row) != m:\n                return -1\n    else:\n        return -1  # Shouldn't happen if n=0 was caught above\n\n    # -----------------------------\n    # 2. Check observations\n    # -----------------------------\n    T = len(observations)\n    if T == 0:  # Empty sequence\n        return -1\n\n    # Ensure each observation index is in [0, m-1]\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n\n    # -----------------------------\n    # 3. Implement forward algorithm\n    # -----------------------------\n    # Convert inputs to numpy arrays for convenience\n    S = np.array(S, dtype=float)\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n\n    # Initialize alpha\n    alpha = np.zeros((T, n), dtype=float)\n\n    # Initialization step\n    first_obs = observations[0]\n    for i in range(n):\n        alpha[0, i] = S[i] * B[i, first_obs]\n\n    # Recursion step\n    for t in range(1, T):\n        obs_t = observations[t]\n        for j in range(n):\n            # sum over previous states i\n            alpha[t, j] = np.sum(alpha[t - 1, i] * A[i, j] for i in range(n))\n            # multiply by emission probability of j at time t\n            alpha[t, j] *= B[j, obs_t]\n\n    # Termination: sum over the last time step\n    likelihood = np.sum(alpha[T - 1, :])\n\n    # -----------------------------\n    # 4. Return result rounded to 4 decimals\n    # -----------------------------\n    return round(float(likelihood), 4)"}
{"task_id": 70, "completion_id": 0, "completion": "from collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1) Count global frequency of each item and keep only those \u2265 min_support\n    # ------------------------------------------------------------------\n    if not transactions or min_support < 1:\n        return []\n\n    # Count item frequencies (treat each transaction as a set of unique items)\n    item_counter = Counter()\n    for trans in transactions:\n        unique_items = set(trans)\n        item_counter.update(unique_items)\n\n    # Keep only frequent items\n    freq_items = {item: cnt for item, cnt in item_counter.items() if cnt >= min_support}\n    if not freq_items:\n        return []\n\n    # ------------------------------------------------------------------\n    # 2) Build the FP-tree\n    # ------------------------------------------------------------------\n    # Sort frequent items by descending frequency; tie-break by alphabetical order\n    # This will determine the order in which items appear in the tree's branches.\n    sorted_freq_items = sorted(freq_items.keys(), key=lambda i: (-freq_items[i], i))\n\n    # A simple FP-tree node class\n    class FPNode:\n        __slots__ = (\"item\", \"count\", \"parent\", \"children\")  # for memory efficiency\n\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n\n    # Header table: maps item -> list of nodes for that item\n    header_table = defaultdict(list)\n\n    # Build the root of the tree (empty item label)\n    root = FPNode(None, None)\n\n    def insert_transaction(trans):\n        \"\"\"Insert a transaction (already filtered & ordered) into the FP-tree.\"\"\"\n        current_node = root\n        for item in trans:\n            # Go down the tree\n            if item not in current_node.children:\n                # Create a new child node\n                new_node = FPNode(item, current_node)\n                current_node.children[item] = new_node\n                # Add this node to header_table for item\n                header_table[item].append(new_node)\n            # Move one level down and increment count\n            current_node = current_node.children[item]\n            current_node.count += 1\n\n    # Prepare and insert each transaction\n    for trans in transactions:\n        # 1) Keep only frequent items\n        filtered = [i for i in trans if i in freq_items]\n        if not filtered:\n            continue\n        # 2) Sort them according to global frequency (descending) & tiebreak by item\n        filtered.sort(key=lambda i: (-freq_items[i], i))\n        # 3) Insert into the FP-tree\n        insert_transaction(filtered)\n\n    # ------------------------------------------------------------------\n    # 3) Mine the FP-tree recursively\n    # ------------------------------------------------------------------\n    frequent_itemsets = []\n\n    def get_prefix_paths(item):\n        \"\"\"\n        For a given 'item' in the header table, traverse all nodes that contain this item.\n        Each node's path (excluding the node itself, up to but not including the root)\n        forms a prefix path. We gather these prefix paths with the count = node.count.\n        \"\"\"\n        paths = []\n        for node in header_table[item]:\n            path_count = node.count\n            prefix_path = []\n            # Climb up the tree, stopping at the root\n            parent = node.parent\n            while parent and parent.item is not None:\n                prefix_path.append(parent.item)\n                parent = parent.parent\n            if prefix_path:\n                # The path is from leaf to root, reverse to get root->leaf\n                prefix_path.reverse()\n                paths.append((prefix_path, path_count))\n        return paths\n\n    def build_conditional_tree(prefix_paths):\n        \"\"\"\n        Given a list of (prefix_path, count) pairs, build a conditional FP-tree\n        (just like building the main tree) and return:\n          - The root of the conditional tree\n          - A header_table-like dict for items in this conditional tree\n          - A frequency dict for those items\n        \"\"\"\n        # Count new frequencies from prefix paths\n        cond_freq = Counter()\n        for path, count in prefix_paths:\n            for item in set(path):\n                cond_freq[item] += count\n\n        # Keep only frequent items within these prefix paths\n        cond_freq = {k: v for k, v in cond_freq.items() if v >= min_support}\n        if not cond_freq:\n            return None, {}\n\n        # Sort items (descending freq, tiebreak alphabetical) for insertion\n        cond_order = sorted(cond_freq.keys(), key=lambda i: (-cond_freq[i], i))\n\n        # Build the tree\n        cond_root = FPNode(None, None)\n        cond_header = defaultdict(list)\n\n        def insert_cond_path(path, path_count):\n            curr_node = cond_root\n            for itm in path:\n                if itm not in curr_node.children:\n                    new_nd = FPNode(itm, curr_node)\n                    curr_node.children[itm] = new_nd\n                    cond_header[itm].append(new_nd)\n                curr_node = curr_node.children[itm]\n                curr_node.count += path_count\n\n        # For each prefix path, filter by cond_freq and re-sort by cond_order\n        for path, count in prefix_paths:\n            filtered_path = [i for i in path if i in cond_freq]\n            filtered_path.sort(key=lambda i: (-cond_freq[i], i))\n            if filtered_path:\n                insert_cond_path(filtered_path, count)\n\n        return (cond_root, cond_header, cond_freq)\n\n    def mine_tree(current_prefix, items, hdr_table, freq_map):\n        \"\"\"\n        Recursively mine patterns from the FP-tree using the header table.\n        'current_prefix' is the list of items found so far in the recursion.\n        'items' is the global ordering of frequent items (descending freq).\n        \"\"\"\n        # We go in reverse order of items to match the canonical FP-Growth approach\n        # (lowest frequency to highest in the header table).\n        # This ensures no duplicates and is the standard method in the paper.\n        for item in reversed(items):\n            # The new pattern is current_prefix + this single item\n            new_pattern = current_prefix + [item]\n            new_pattern_sorted = sorted(new_pattern)  # ensure lexicographic order inside\n            frequent_itemsets.append(new_pattern_sorted)\n\n            # Build conditional FP-tree for this item\n            prefix_paths = get_prefix_paths(item)\n            cond_root, cond_header_map, cond_freq_map = build_conditional_tree(prefix_paths)\n            if not cond_root:\n                continue  # No child tree => no further patterns\n\n            # Recursively mine the conditional FP-tree\n            new_order = sorted(cond_freq_map.keys(), key=lambda i: (-cond_freq_map[i], i))\n            mine_tree(new_pattern, new_order, cond_header_map, cond_freq_map)\n\n    # Recursively mine the main FP-tree we built\n    mine_tree([], sorted_freq_items, header_table, freq_items)\n\n    # Remove duplicates if any (in principle FP-Growth should not produce duplicates,\n    # but defensive programming is sometimes helpful)\n    # We'll convert to a set of tuples, then back to a list of lists\n    unique_itemsets = list({tuple(x) for x in frequent_itemsets})\n\n    # Sort by (len(itemset), itemset) to satisfy determinism requirement\n    unique_itemsets.sort(key=lambda x: (len(x), x))\n\n    return [list(x) for x in unique_itemsets]"}
{"task_id": 71, "completion_id": 0, "completion": "```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    for sample in data:\n        label = sample[-1]\n        label_counts[label] = label_counts.get(label, 0) + 1\n    return label_counts\n```"}
{"task_id": 72, "completion_id": 0, "completion": "import numpy as np\n\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Computes the variance reduction obtained by splitting the target values into y_left and y_right.\n    \n    Variance reduction is computed as:\n    \n        VR = Var(y) - (n_left / n) * Var(y_left) - (n_right / n) * Var(y_right)\n    \n    where:\n      - Var(\u00b7) denotes the population variance for each feature, summed over all features.\n      - n, n_left, n_right are the respective number of samples.\n      - y, y_left, y_right are 2D arrays of shape (n_samples, n_features).\n    \n    Parameters:\n    -----------\n    y : np.ndarray\n        The target values at the parent node.\n    y_left : np.ndarray\n        The target values that go to the left child after the split.\n    y_right : np.ndarray\n        The target values that go to the right child after the split.\n    \n    Returns:\n    --------\n    float\n        The variance reduction, rounded to the nearest 4th decimal place.\n    \"\"\"\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    \n    # Population variance (DDOF=0) for each feature, then sum over all features\n    var_y = np.sum(np.var(y, axis=0, ddof=0))\n    var_y_left = np.sum(np.var(y_left, axis=0, ddof=0))\n    var_y_right = np.sum(np.var(y_right, axis=0, ddof=0))\n    \n    # Compute variance reduction\n    vr = var_y - (n_left / n) * var_y_left - (n_right / n) * var_y_right\n    \n    return round(float(vr), 4)"}
{"task_id": 74, "completion_id": 0, "completion": "import numpy as np\n\ndef magnitude_spectrum(frames: \"np.ndarray\") -> \"list[list[float]]\":\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    # If frames is 1D, convert to 2D (one frame)\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]\n\n    # Compute the real FFT (positive frequencies only) for each row\n    spectrum = np.fft.rfft(frames, axis=1)\n\n    # Take the magnitude\n    magnitude = np.abs(spectrum)\n\n    # Round to four decimals\n    magnitude = np.round(magnitude, 4)\n\n    # Convert to Python list of lists\n    return magnitude.tolist()"}
{"task_id": 75, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # 1. If k is invalid, return -1 (single integer).\n    if k < 1 or k > len(X_train):\n        return -1\n\n    predictions = []\n\n    for x_test in X_test:\n        # 2. Compute distances between x_test and all training samples.\n        distances = []\n        for x_train, label in zip(X_train, y_train):\n            # Sum of squared differences (no need for square root).\n            dist = sum((xt - xtr) ** 2 for xt, xtr in zip(x_test, x_train))\n            distances.append((dist, label))\n\n        # 3. Sort by distance.\n        distances.sort(key=lambda d: d[0])\n\n        # 4. Select the k nearest neighbors and get their labels.\n        k_neighbors = distances[:k]\n        neighbor_labels = [lbl for _, lbl in k_neighbors]\n\n        # 5. Majority vote (with tie broken by smallest label).\n        freq = {}\n        for lbl in neighbor_labels:\n            freq[lbl] = freq.get(lbl, 0) + 1\n\n        max_count = max(freq.values())\n        # Extract all labels that share the highest vote count.\n        winners = [lbl for lbl, count in freq.items() if count == max_count]\n        # Tie-break by taking the smallest label.\n        predictions.append(min(winners))\n\n    return predictions"}
{"task_id": 76, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays (if not already)\n    y = np.asarray(y, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    \n    # Small constant for numerical stability\n    epsilon = 1e-15\n    \n    # Calculate the cross-entropy\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return float(round(loss, 4))"}
{"task_id": 77, "completion_id": 0, "completion": "import numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU -> Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple\n        A tuple (AL, caches), where:\n        - AL (list[list[float]]): The final activation of shape (1, m), rounded\n          to 4 decimals and converted to a plain Python list.\n        - caches (list): A list of caches, one for each layer, which can be used\n          in the backward pass.\n    \"\"\"\n\n    def relu(Z):\n        return np.maximum(0, Z)\n\n    def sigmoid(Z):\n        return 1 / (1 + np.exp(-Z))\n\n    caches = []            # This will collect caches for each layer\n    A = X                  # A is the activation from the previous layer\n    L = len(parameters) // 2\n\n    # Forward pass for layers 1 to L-1 (ReLU activation)\n    for l in range(1, L):\n        W = parameters[f\"W{l}\"]\n        b = parameters[f\"b{l}\"]\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        # Cache can contain anything needed for backward, here we store (A_prev, W, b, Z)\n        caches.append((A, W, b, Z))\n\n    # Forward pass for the last layer L (Sigmoid activation)\n    W = parameters[f\"W{L}\"]\n    b = parameters[f\"b{L}\"]\n    Z = np.dot(W, A) + b\n    A = sigmoid(Z)\n    caches.append((A, W, b, Z))\n\n    # AL is the final output. Round it and convert to Python list.\n    AL_rounded_list = np.round(A, 4).tolist()\n\n    # Return the tuple (AL, caches).\n    return AL_rounded_list, caches"}
{"task_id": 78, "completion_id": 0, "completion": "import numpy as np\n\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n\n    # Convert lists to NumPy arrays for element-wise operations\n    params_arr = np.array(params, dtype=float)\n    grads_arr  = np.array(grads,  dtype=float)\n    m_arr      = np.array(m,      dtype=float)\n    u_arr      = np.array(u,      dtype=float)\n\n    # Update first moment estimate\n    m_t = beta1 * m_arr + (1.0 - beta1) * grads_arr\n\n    # Update exponentially weighted infinity-norm\n    u_t = np.maximum(beta2 * u_arr, np.abs(grads_arr))\n\n    # Compute step size\n    # Denominator (1 - beta1^t)\n    denom = 1.0 - (beta1 ** t)\n    # Avoid division by zero if denom is extremely small (though unlikely)\n    if denom < 1e-30:\n        denom = 1e-30\n    step = (learning_rate / denom) * (m_t / (u_t + epsilon))\n\n    # Update parameters\n    new_params = params_arr - step\n    new_t = t + 1\n\n    # Round and convert back to list\n    new_params_rounded = np.round(new_params, 6).tolist()\n    new_m_rounded      = np.round(m_t,       6).tolist()\n    new_u_rounded      = np.round(u_t,       6).tolist()\n\n    return (new_params_rounded, new_m_rounded, new_u_rounded, new_t)"}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros. It must\n    therefore implement the mathematical rules of Adadelta element-wise and\n    finally return the updated weight vector rounded to 4 decimal places\n    as a regular Python list.\n\n    Args:\n        w (list[float] | np.ndarray): Current weights.\n        grad_w (list[float] | np.ndarray): Corresponding gradient \u2013 same shape as w.\n        rho (float, optional): Adadelta decay coefficient. Defaults to 0.95.\n        eps (float, optional): Small constant to avoid division by zero. Defaults to 1e-6.\n\n    Returns:\n        list[float]: Weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    # Convert inputs to NumPy arrays (float type)\n    w_arr = np.array(w, dtype=float)\n    g_arr = np.array(grad_w, dtype=float)\n\n    # Since this is the first step, E_grad and E_delta are zero initially:\n    # E_grad = rho*0 + (1-rho)*g^2\n    E_grad = (1 - rho) * (g_arr ** 2)\n\n    # RMS_grad = sqrt(E_grad + eps)\n    RMS_grad = np.sqrt(E_grad + eps)\n\n    # RMS_delta = sqrt(E_delta + eps) = sqrt(0 + eps)\n    RMS_delta = np.sqrt(eps)\n\n    # adaptive_lr = RMS_delta / RMS_grad\n    adaptive_lr = RMS_delta / RMS_grad\n\n    # \u0394w = adaptive_lr * grad\n    Delta_w = adaptive_lr * g_arr\n\n    # Updated weights after one Adadelta step\n    w_new = w_arr - Delta_w\n\n    # Round to 4 decimal places and convert to regular Python list\n    return np.round(w_new, 4).tolist()\n```\n"}
{"task_id": 81, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as A2.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    # Clip predicted probabilities to avoid log(0)\n    A2_clipped = np.clip(A2, eps, 1 - eps)\n    \n    m = Y.size  # number of examples\n    # Compute the cost\n    cost = -(1/m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return cost rounded to 6 decimal places\n    return float(round(cost, 6))"}
{"task_id": 82, "completion_id": 0, "completion": "import numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places, and the sum of these\n    probabilities must be 1 (within 1 \u00d7 10\u207b\u00b9\u00b2).\n    \"\"\"\n    # Convert Q to a NumPy array (in case it's a list)\n    Q = np.asarray(Q, dtype=np.float64)\n\n    # Number of actions\n    n = len(Q)\n    if n == 0:\n        # Edge case: no actions\n        return []\n\n    # Find the index of the first occurrence of the maximum Q-value\n    greedy_index = np.argmax(Q)\n\n    # Compute base probabilities\n    p_greedy = 1.0 - epsilon + (epsilon / n)  # Probability for the greedy action\n    p_others = epsilon / n                   # Probability for non-greedy actions\n\n    # Construct the probability distribution\n    probs = np.full(n, p_others, dtype=np.float64)\n    probs[greedy_index] = p_greedy\n\n    # First pass rounding\n    probs_rounded = [round(p, 4) for p in probs]\n    sum_rounded = sum(probs_rounded)\n\n    # Adjust to ensure sum is 1 within 1\u00d710\u207b\u00b9\u00b2 after rounding\n    diff = 1.0 - sum_rounded\n    probs_rounded[greedy_index] += diff\n    # Round again in case the adjustment changed the greedy action's fourth decimal place\n    probs_rounded[greedy_index] = round(probs_rounded[greedy_index], 4)\n\n    # Final check (usually this will be within 1e-12, but we don't iterate further)\n    sum_final = sum(probs_rounded)\n    if not np.isclose(sum_final, 1.0, atol=1e-12):\n        # If it's still off by more than 1e-12 (rare), force it by final nudge\n        adjustment = 1.0 - sum_final\n        probs_rounded[greedy_index] += adjustment\n\n    return probs_rounded"}
{"task_id": 84, "completion_id": 0, "completion": "import numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals (all zeros), the function should return 1.0.\n    \"\"\"\n    # Sum of h_pred squared (denominator)\n    denominator = np.sum(h_pred ** 2)\n    \n    if denominator == 0:\n        # h_pred is all zeros -> residuals perfectly fitted\n        return 1.0\n    \n    # Numerator: dot product of residual and h_pred\n    numerator = np.sum((y - y_pred) * h_pred)\n    \n    # Calculate step size\n    gamma = numerator / denominator\n    \n    # Return step size rounded to four decimal places\n    return float(np.round(gamma, 4))"}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"Perform one gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    # If lr is zero or X is entirely zeros, do not update the weights\n    if lr == 0 or np.all(X == 0):\n        return W.round(4).tolist()\n\n    # 1. Compute logits\n    Z = X @ W  # shape: (N, C)\n    \n    # 2. Row-wise softmax\n    expZ = np.exp(Z)\n    Y_hat = expZ / np.sum(expZ, axis=1, keepdims=True)  # shape: (N, C)\n    \n    # 3. Compute gradient of average cross-entropy w.r.t. W\n    N = X.shape[0]\n    grad = (X.T @ (Y_hat - Y)) / N  # shape: (D, C)\n    \n    # 4. Gradient descent update\n    W_new = W - lr * grad\n    \n    # Return as Python list of lists, rounded to 4 decimal places\n    return W_new.round(4).tolist()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of trees\n    num_trees = len(predictions)\n    if num_trees == 0:\n        return []\n\n    # Number of samples (each tree's prediction list has the same length)\n    num_samples = len(predictions[0])\n    if num_samples == 0:\n        return []\n\n    final_predictions = []\n\n    # For each sample (column)\n    for sample_idx in range(num_samples):\n        # Collect the vote from each tree\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(num_trees)]\n        \n        # Count the votes using Counter\n        vote_counts = Counter(votes)\n        \n        # Determine the maximum count\n        max_count = max(vote_counts.values())\n        # Find all labels with that maximum count\n        candidates = [label for label, count in vote_counts.items() if count == max_count]\n        \n        # If there's a tie, choose the smallest label (numeric or lexicographic)\n        final_label = min(candidates)\n        final_predictions.append(final_label)\n\n    return final_predictions\n```"}
{"task_id": 87, "completion_id": 0, "completion": "import numpy as np\n\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]      # number of input features\n    n_h = 10              # fixed hidden layer size\n    n_y = Y.shape[0]      # number of output units\n    \n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "completion": "import numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    arr = np.asarray(z, dtype=float)\n    \n    # Compute element-wise softplus using the stable np.logaddexp\n    softplus_vals = np.logaddexp(0.0, arr)\n    \n    # Round to 4 decimal places\n    softplus_vals = np.round(softplus_vals, 4)\n\n    # If input was a scalar, return a single float\n    if np.isscalar(z):\n        return float(softplus_vals)\n    else:\n        # Otherwise, return as a (possibly nested) Python list\n        return softplus_vals.tolist()"}
{"task_id": 89, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list). Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # 1) Linear step\n    Z = np.dot(W, A_prev) + b  # broadcasting b across columns\n\n    # 2) Activation step\n    if activation == \"relu\":\n        A = np.maximum(0, Z)\n    elif activation == \"sigmoid\":\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        # Unspecified behavior for other activations:\n        # Could raise an error or implement differently.\n        raise ValueError(\"Unsupported activation function.\")\n\n    # Verify output shape\n    assert A.shape == (W.shape[0], A_prev.shape[1]), \"Shape mismatch in A.\"\n\n    # Prepare the cache for back-propagation\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n\n    # Round result to 4 decimals and convert to plain Python list\n    A_rounded_list = A.round(4).tolist()\n\n    return A_rounded_list, cache"}
{"task_id": 90, "completion_id": 0, "completion": "import numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # 1. Check if the policy estimates exist and are non-empty\n    if \"ev_estimates\" not in policy or not policy[\"ev_estimates\"]:\n        return np.nan\n    \n    # 2. Sort the estimates by arm index\n    sorted_keys = sorted(policy[\"ev_estimates\"].keys())\n    sorted_estimates = [policy[\"ev_estimates\"][k] for k in sorted_keys]\n    \n    # 3. Get the true expected values from the bandit\n    arm_evs = bandit[\"arm_evs\"]\n    \n    # 4. Compute the mean-squared error\n    squared_errors = []\n    for i, true_ev in enumerate(arm_evs):\n        diff = true_ev - sorted_estimates[i]\n        squared_errors.append(diff ** 2)\n    \n    mse_value = sum(squared_errors) / len(squared_errors)\n    \n    # 5. Round to 4 decimal places and return\n    return float(round(mse_value, 4))"}
{"task_id": 91, "completion_id": 0, "completion": "import numpy as np\n\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as dA.\n        Returns -1 if dA and activation_cache do not share the same shape.\n    \"\"\"\n    # Convert the Python lists to NumPy arrays\n    dA_arr = np.array(dA)\n    Z_arr = np.array(activation_cache)\n    \n    # Check if shapes match\n    if dA_arr.shape != Z_arr.shape:\n        return -1\n    \n    # Compute the ReLU backward gradient\n    dZ_arr = dA_arr * (Z_arr > 0)\n    \n    # Convert the result back to a list of lists and return\n    return dZ_arr.tolist()"}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport numbers\n\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and not isinstance(a, bool)\n```"}
{"task_id": 93, "completion_id": 0, "completion": "import numpy as np\n\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_arr = np.array(Z)\n    A_arr = np.maximum(0, Z_arr)\n    return A_arr.tolist(), Z_arr.tolist()"}
{"task_id": 94, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    label_counts = Counter(neighbors_targets)\n    max_count = max(label_counts.values())\n    top_labels = [label for label, count in label_counts.items() if count == max_count]\n    return min(top_labels)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "import math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1) Build all 1- to N-gram frequency tables from the corpus\n    ngram_counts = [Counter() for _ in range(N)]  # ngram_counts[i] will store (i+1)-gram frequencies\n    vocab = set()  # to store all unique words in the corpus\n    \n    # Parse the corpus and update n-gram counts\n    for line in corpus:\n        words = line.split()\n        # update vocabulary\n        for w in words:\n            vocab.add(w)\n        # update n-gram counts\n        for i in range(N):\n            n = i + 1\n            for start_idx in range(len(words) - n + 1):\n                ngram = tuple(words[start_idx:start_idx + n])\n                ngram_counts[i][ngram] += 1\n\n    # 2) Add an explicit <UNK> token to the vocabulary\n    if \"<UNK>\" not in vocab:\n        vocab.add(\"<UNK>\")\n\n    # For the total count of words (needed for 1-gram context)\n    total_count_1grams = sum(ngram_counts[0].values())\n\n    # 3) Estimate the probability of every contiguous N-gram in the target sentence with additive smoothing\n\n    # Tokenize the target sequence, mapping unseen words to <UNK>\n    seq_words = sequence.split()\n    seq_words = [w if w in vocab else \"<UNK>\" for w in seq_words]\n\n    # If sentence length is smaller than N, no N-grams exist -> return 0.0\n    if len(seq_words) < N:\n        return 0.0\n\n    # Extract the contiguous N-grams from the sequence\n    seq_ngrams = []\n    for start_idx in range(len(seq_words) - N + 1):\n        seq_ngrams.append(tuple(seq_words[start_idx:start_idx + N]))\n\n    # Vocabulary size (including <UNK>)\n    V = len(vocab)\n    log_prob_sum = 0.0\n\n    # Compute the log-probabilities using the formula:\n    # P(w_i | context) = (count(context \u25e6 w_i) + K) / (count(context) + K * V)\n    for ngram in seq_ngrams:\n        if N == 1:\n            # context is \"empty\", denominator is total_count_1grams + K*V\n            context_count = total_count_1grams\n        else:\n            # context is the first N-1 tokens of the ngram\n            context = ngram[:-1]\n            context_count = ngram_counts[N - 2][context]\n\n        ngram_count = ngram_counts[N - 1][ngram]\n        prob = (ngram_count + K) / (context_count + K * V)\n        log_prob_sum += math.log(prob)\n\n    # 4) Return the natural logarithm of the sentence probability (sum of log-probs) rounded to 4 decimals\n    return round(log_prob_sum, 4)"}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    # If Z is a single int or float, compute derivative directly and return float\n    if isinstance(Z, (int, float)):\n        return 1.0 if Z > 0 else 0.0\n\n    # Otherwise, convert to numpy array\n    Z_arr = np.array(Z, dtype=float)\n    # Compute derivative element-wise\n    D = np.where(Z_arr > 0, 1.0, 0.0)\n    # Return as a Python list\n    return D.tolist()\n```"}
{"task_id": 99, "completion_id": 0, "completion": "import numpy as np\n\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    # Case 1: If Z is a scalar\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    \n    # Case 2: If Z is a NumPy array\n    if isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    \n    # Case 3: Otherwise, assume Z is a list (1-D or 2-D)\n    # Convert to a NumPy array, apply ReLU, and convert back to list\n    arr = np.array(Z, dtype=float)  # force to float for safe np.maximum\n    arr_relu = np.maximum(arr, 0)\n    return arr_relu.tolist()"}
{"task_id": 100, "completion_id": 0, "completion": "import numpy as np\n\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n\n    # Convert inputs to NumPy arrays\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n\n    # Check if lengths match\n    if len(actual_arr) != len(predicted_arr):\n        return -1\n\n    # Calculate number of mismatches\n    mismatches = np.sum(actual_arr != predicted_arr)\n\n    # Compute error rate\n    total_samples = len(actual_arr)\n    error_rate = mismatches / total_samples\n\n    # Return the error rate rounded to four decimal places\n    return round(error_rate, 4)"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    # ======= Write your code below =======\n    if x.ndim == 1:\n        raise ValueError(\"Cannot apply softmax to a tensor that is 1D\")\n\n    # Shift the input by its maximum value along the given axis for numerical stability\n    shifted_x = x - np.max(x, axis=axis, keepdims=True)\n    exp_x = np.exp(shifted_x)\n    softmax_x = exp_x / np.sum(exp_x, axis=axis, keepdims=True)\n\n    # Round to four decimals and convert to Python list\n    softmax_x_rounded = np.round(softmax_x, 4)\n    return softmax_x_rounded.tolist()\n```\n"}
{"task_id": 102, "completion_id": 0, "completion": "import numpy as np\n\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    # Basic input checks\n    if degree < 0:\n        return -1\n    if len(x) != len(y) or len(x) == 0:\n        return -1\n    if len(x) < degree + 1:\n        return -1\n\n    # Build the design matrix with powers of x from 0 to degree\n    try:\n        X = np.vander(x, degree+1, increasing=True)  # shape (n_samples, degree+1)\n        # Solve for weights using least squares\n        w, *_ = np.linalg.lstsq(X, y, rcond=None)\n\n        # Build design matrix for prediction inputs\n        X_pred = np.vander(x_pred, degree+1, increasing=True)\n        # Compute predictions\n        preds = X_pred.dot(w)\n\n    except Exception:\n        return -1\n\n    # Round predictions to 4 decimal places and return as a Python list\n    return [round(val, 4) for val in preds]"}
{"task_id": 104, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n\n    # Helper function to compute entropy of labels\n    def entropy(labels: np.ndarray) -> float:\n        if labels.size == 0:\n            return 0.0  # If no labels, entropy is 0\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return -np.sum([p * math.log2(p) for p in probs if p > 0])\n\n    # Entropy of the parent node\n    parent_entropy = entropy(y)\n\n    # Weighted sum of entropies of child splits\n    total = len(y)\n    weighted_children_entropy = 0.0\n    for child in splits:\n        weighted_children_entropy += (len(child) / total) * entropy(child)\n\n    # Information gain\n    ig = parent_entropy - weighted_children_entropy\n    \n    return float(round(ig, 4))"}
{"task_id": 105, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    # 1. Validate that \u03c3 is strictly positive\n    if sigma <= 0:\n        return -1\n\n    # Convert single values into a list for uniform processing\n    if isinstance(x, (int, float)):\n        x = [x]\n\n    # Convert input to a NumPy array (handles list, tuple, np.ndarray)\n    arr = np.array(x, dtype=float)\n\n    # Handle empty input\n    if arr.size == 0:\n        return []\n\n    # 2. Compute the Gaussian PDF\n    # f(x; \u03bc, \u03c3) = 1 / (sqrt(2\u03c0) * \u03c3) * exp(-(x - \u03bc)\u00b2 / (2\u03c3\u00b2))\n    factor = 1.0 / (np.sqrt(2.0 * np.pi) * sigma)\n    pdf_values = factor * np.exp(-((arr - mean) ** 2) / (2.0 * sigma ** 2))\n\n    # 3. Round each result to five decimal places and return as a list\n    return [round(val, 5) for val in pdf_values]"}
{"task_id": 107, "completion_id": 0, "completion": "import numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"\n    Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n\n    # Update biased second moment estimate\n    v_t = beta2 * v_prev + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected first and second moment estimates\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n\n    # Update parameters\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n\n    # Increment time step\n    t_new = t + 1\n\n    # Round to 6 decimals and convert to lists\n    theta_new = np.round(theta_new, 6).tolist()\n    m_t = np.round(m_t, 6).tolist()\n    v_t = np.round(v_t, 6).tolist()\n\n    return theta_new, m_t, v_t, t_new"}
{"task_id": 108, "completion_id": 0, "completion": "import numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n\n    # Fix the random seed for deterministic initialization\n    np.random.seed(0)\n    N, M = X.shape\n\n    # Randomly initialise W \u2208 \u211d^(N\u00d7K) and H \u2208 \u211d^(K\u00d7M)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    I_k = np.eye(K)\n\n    for _ in range(max_iter):\n        # Update W using the closed-form solution:\n        #     W = (X H^T) (H H^T + \u03b1I)^(-1)\n        HHT = H @ H.T\n        W = (X @ H.T) @ np.linalg.inv(HHT + alpha * I_k)\n\n        # Update H using the closed-form solution:\n        #     H = (W^T W + \u03b1I)^(-1) (W^T X)\n        WTW = W.T @ W\n        H = np.linalg.inv(WTW + alpha * I_k) @ (W.T @ X)\n\n        # Compute the regularised Frobenius loss:\n        # ||X - WH||_F^2 + \u03b1(||W||_F^2 + ||H||_F^2)\n        reconstruction = W @ H\n        loss = (\n            np.linalg.norm(X - reconstruction, 'fro') ** 2\n            + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        )\n        # Stop if the regularised loss is below the tolerance\n        if loss < tol:\n            break\n\n    # Return the final reconstruction, rounded to 4 decimals and converted to a list of lists\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate (using the entire\n        centroid as tie-breaker).\n    \"\"\"\n    # 1. Set random seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    \n    # Utility function: compute squared Euclidean distance\n    def squared_distance(a, b):\n        return np.sum((a - b) ** 2)\n\n    # 2. K-Means++ initialization\n    m, n = X.shape\n    centroids = np.zeros((K, n))\n    \n    # Choose the first centroid randomly\n    first_idx = np.random.choice(m)\n    centroids[0] = X[first_idx]\n    \n    # Choose each subsequent centroid\n    for i in range(1, K):\n        # Distances to the nearest chosen centroid\n        dists = np.min(\n            np.stack([np.sum((X - c) ** 2, axis=1) for c in centroids[:i]]),\n            axis=0\n        )\n        # Probability distribution proportional to dists\n        probs = dists / np.sum(dists)\n        chosen_idx = np.random.choice(m, p=probs)\n        centroids[i] = X[chosen_idx]\n    \n    # Lloyd's algorithm\n    # Assign each sample to the closest centroid\n    def assign_clusters(data, centers):\n        # Returns an array of cluster indices for each point in data\n        distances = np.stack([np.sum((data - c) ** 2, axis=1) for c in centers], axis=0)\n        return np.argmin(distances, axis=0)\n    \n    # Main iteration\n    cluster_assignments = assign_clusters(X, centroids)\n    \n    for _ in range(max_iter):\n        new_assignments = assign_clusters(X, centroids)\n        \n        # If assignments do not change, stop\n        if np.all(cluster_assignments == new_assignments):\n            break\n        cluster_assignments = new_assignments\n        \n        # Update centroids\n        for k in range(K):\n            # Points in the k-th cluster\n            points_in_cluster = X[cluster_assignments == k]\n            if len(points_in_cluster) > 0:\n                centroids[k] = np.mean(points_in_cluster, axis=0)\n            # If no points in cluster, keep the old centroid (do nothing)\n    \n    # Round and sort centroids\n    rounded_centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    rounded_centroids.sort(key=lambda c: c)  # sort by entire coordinate tuple\n    return rounded_centroids"}
{"task_id": 111, "completion_id": 0, "completion": "import numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Convert a raw text string to a fixed-length list of integer token IDs according\n    to the provided vocabulary. Characters not in the vocabulary are treated as 0 (padding).\n    If text is shorter than 'time_steps', 0-pad on the right; if longer, truncate.\n    \"\"\"\n    encoded = []\n    for char in text[:time_steps]:\n        encoded.append(vocabulary.get(char, 0))  # 0 if char not in vocabulary\n    # Pad if shorter than time_steps\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Convert a list (or array) of integer IDs back to text using the inverse vocabulary.\n    Ignore padding tokens (0).\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx != 0:\n            chars.append(inverse_vocab[idx])\n    return \"\".join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    1. Encode 'text' to integer IDs using 'string_to_int' (and pad/truncate to TIME_STEPS).\n    2. Predict on the encoded sequence (batch size = 1).\n    3. Take argmax over the last axis of the model's output.\n    4. Decode the predicted IDs back to text using 'int_to_string'.\n    5. Return the decoded string (no padding).\n    \"\"\"\n    # Step 1: Encode\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array([encoded_input])  # shape: (1, TIME_STEPS)\n\n    # Step 2: Model prediction\n    predictions = model.predict(encoded_input)  # shape: (1, TIME_STEPS, vocab_size) for example\n\n    # Step 3: Argmax over last dimension\n    predicted_ids = np.argmax(predictions, axis=-1)  # shape: (1, TIME_STEPS)\n\n    # Step 4: Decode (ignore 0)\n    decoded_output = int_to_string(predicted_ids[0], inv_output_vocabulary)\n\n    return decoded_output"}
{"task_id": 112, "completion_id": 0, "completion": "```python\nimport re\nfrom collections import Counter\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    # Find all alphabetical words, ignoring case\n    words = re.findall(r'[A-Za-z]+', text)\n    # If no words found, return empty list\n    if not words:\n        return []\n    # Convert all found words to lowercase\n    words_lower = [word.lower() for word in words]\n    # Count frequencies using Counter\n    counts = Counter(words_lower)\n    # Build list of Token objects\n    tokens = []\n    for w, c in counts.items():\n        t = Token(w)\n        t.count = c\n        tokens.append(t)\n    # Sort by descending frequency, then lexicographically\n    tokens.sort(key=lambda x: (-x.count, x.word))\n    return tokens\n```"}
{"task_id": 113, "completion_id": 0, "completion": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"\n    Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # If no examples were provided, default to the global EXAMPLES.\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Delegate to the run_example helper (not implemented here).\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n\n        # Convert the list of characters into a single string.\n        predicted_str = \"\".join(output_chars)\n\n        # Print input and output as required.\n        print(f\"input:  {example}\\noutput: {predicted_str}\")\n\n        # Collect the prediction in a list.\n        predictions.append(predicted_str)\n\n    return predictions"}
{"task_id": 114, "completion_id": 0, "completion": "import numpy as np\n\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If False (default) the function returns the SELU\n            activation values. If True, the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to six decimal places.\n    \"\"\"\n    # Constants from the \"Self-Normalizing Neural Networks\" paper\n    alpha = 1.6732632423543772848170429916717\n    lambd = 1.0507009873554804934193349852946\n\n    if derivative:\n        # Derivative mode\n        result = np.where(x >= 0, lambd, lambd * alpha * np.exp(x))\n    else:\n        # Activation mode\n        result = np.where(x >= 0, lambd * x, lambd * alpha * (np.exp(x) - 1))\n\n    # Round to 6 decimal places and convert to nested Python list\n    result = np.round(result, 6).tolist()\n    return result"}
{"task_id": 115, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a 1D array of shape (m,)\n    y = y.ravel()\n    \n    # Compute linear predictions z = Xw (shape (m,))\n    z = (X @ w).ravel()\n    \n    # Compute logistic function p = 1 / (1 + exp(-z))\n    p = 1.0 / (1.0 + np.exp(-z))\n    \n    # Avoid numerical issues by clipping p into [epsilon, 1 - epsilon]\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = y.shape[0]\n    \n    # Compute the average binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss (shape (n,))\n    grad = (X.T @ (p - y)) / m\n    \n    # Reshape gradient to (n,1) for tolist()\n    grad = grad.reshape(-1, 1)\n    \n    # Round results\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    \n    return loss_rounded, grad_rounded"}
{"task_id": 116, "completion_id": 0, "completion": "import numpy as np\n\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places. A higher value indicates a better split.\n    \"\"\"\n    # Calculate MSE of the parent\n    mse_parent = np.mean((y - np.mean(y))**2)\n    \n    # Calculate the weighted MSE of the child splits\n    N = len(y)\n    mse_children = 0.0\n    for s in splits:\n        if len(s) > 0:  # Guard against empty split\n            mse_children += (len(s) / N) * np.mean((s - np.mean(s))**2)\n    \n    # MSE reduction\n    delta_mse = mse_parent - mse_children\n    \n    # Return the value rounded to 4 decimal places\n    return round(delta_mse, 4)"}
{"task_id": 118, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    # Number of training samples (m) and number of features (n)\n    m, n = X_train.shape\n\n    # Initialize sample weights uniformly\n    W = np.ones(m) / m\n\n    # Container to store each stump's parameters and alpha\n    stumps = []  # Each element: (feature_idx, threshold, polarity, alpha)\n\n    def build_stump(X, y, W):\n        \"\"\"\n        Find the best decision stump (feature, threshold, polarity) that\n        minimizes the weighted error given current weights W.\n        \n        Returns:\n          (best_feat, best_thresh, best_pol, min_err, stump_prediction)\n          - best_feat is feature index\n          - best_thresh is the threshold\n          - best_pol is +1 or -1 (indicating which side is labeled +1)\n          - min_err is the weighted error of this stump\n          - stump_prediction is a numpy array of the predicted labels by this stump\n        \"\"\"\n        m, n = X.shape\n        best_feat = 0\n        best_thresh = 0.0\n        best_pol = 1\n        min_err = float('inf')\n        stump_prediction = np.zeros(m)\n\n        for feat_idx in range(n):\n            # Get unique values of this feature\n            # We'll consider thresholds in between these sorted values\n            unique_vals = np.unique(X[:, feat_idx])\n\n            # If there's only one unique value, we can still attempt that as threshold\n            # We'll pick a set of candidate thresholds\n            # e.g. midpoints between consecutive unique values, plus one below min, one above max\n            candidate_thresholds = []\n            if len(unique_vals) == 1:\n                # Only one possible threshold to test\n                candidate_thresholds = [unique_vals[0]]\n            else:\n                # midpoints between consecutive unique values\n                candidate_thresholds = []\n                for i in range(len(unique_vals) - 1):\n                    candidate_thresholds.append(\n                        0.5 * (unique_vals[i] + unique_vals[i+1])\n                    )\n                # Also consider the extremes themselves\n                candidate_thresholds.insert(0, unique_vals[0] - 1e-10)\n                candidate_thresholds.append(unique_vals[-1] + 1e-10)\n\n            for thresh in candidate_thresholds:\n                for pol in [+1, -1]:\n                    # Predict labels for this stump\n                    # If pol = +1, then\n                    #   h(x) = +1 if X[feat_idx] < thresh, else -1\n                    # If pol = -1, then we invert that\n                    predictions = np.ones(m) * -1\n                    if pol == 1:\n                        predictions[X[:, feat_idx] < thresh] = 1\n                    else:\n                        # pol = -1 means we flip the default assignment\n                        predictions[X[:, feat_idx] < thresh] = -1\n                        # Then for x >= thresh, predictions = +1\n                        # but we started with -1 above, so:\n                        predictions[X[:, feat_idx] >= thresh] = 1\n\n                    # Weighted error\n                    # Weighted sum of misclassified samples\n                    misclassified = (predictions != y).astype(float)\n                    err = np.sum(W * misclassified)\n\n                    if err < min_err:\n                        min_err = err\n                        best_feat = feat_idx\n                        best_thresh = thresh\n                        best_pol = pol\n                        stump_prediction = predictions.copy()\n\n        return best_feat, best_thresh, best_pol, min_err, stump_prediction\n\n    # Train AdaBoost\n    for _ in range(n_clf):\n        feat, thresh, pol, err, pred = build_stump(X_train, y_train, W)\n\n        # Compute stump weight alpha\n        # Avoid division by zero in case err=0 or err=1\n        eps = 1e-10\n        err = np.clip(err, eps, 1 - eps)\n        alpha = 0.5 * np.log((1.0 - err) / err)\n\n        # Update and normalize weights\n        # w_i <- w_i * exp(- alpha_t * y_i * h_t(x_i))\n        W *= np.exp(-alpha * y_train * pred)\n        W /= np.sum(W)\n\n        # Store stump parameters\n        stumps.append((feat, thresh, pol, alpha))\n\n    # Prediction on X_test\n    # Sign( sum_t( alpha_t * h_t(x)) ) where h_t is the stump\n    y_pred = []\n    for x in X_test:\n        # Compute the sum of alpha_t * h_t(x)\n        stump_sum = 0.0\n        for (feat, thresh, pol, alpha) in stumps:\n            # Reproduce the stump's prediction for this x\n            # If pol = +1 ->  h(x) = +1 if x[feat] < thresh else -1\n            # If pol = -1 ->  h(x) = -1 if x[feat] < thresh else +1\n            if pol == 1:\n                h_x = 1 if x[feat] < thresh else -1\n            else:  # pol == -1\n                h_x = -1 if x[feat] < thresh else 1\n\n            stump_sum += alpha * h_x\n\n        # Final prediction is sign(stump_sum)\n        label = 1 if stump_sum >= 0 else -1\n        y_pred.append(label)\n\n    return y_pred"}
{"task_id": 119, "completion_id": 0, "completion": "import numpy as np\n\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    # Check for empty input or mismatch in lengths\n    if not params or not grads or len(params) != len(grads):\n        return []\n\n    updated_params = []\n    for p, g in zip(params, grads):\n        # Perform the SGD update\n        new_p = p - alpha * g\n        # Round to 4 decimal places\n        new_p_rounded = np.round(new_p, 4)\n        # Convert each updated parameter to a Python list and store\n        updated_params.append(new_p_rounded.tolist())\n\n    return updated_params"}
{"task_id": 120, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    # Convert to numpy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Check for shape compatibility\n    if X_np.shape[0] != y_np.shape[0]:\n        return -1\n\n    # Insert bias column\n    m, n = X_np.shape\n    X_bias = np.column_stack((np.ones(m), X_np))\n\n    # Initialize w uniformly in [-1/sqrt(N), 1/sqrt(N)]\n    N = n + 1   # augmented features (including bias)\n    limit = 1 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, size=(N,))\n\n    # Perform batch gradient descent\n    for _ in range(n_iterations):\n        # predictions\n        y_pred = X_bias @ w\n        # gradient of MSE wrt w\n        grad = (X_bias.T @ (y_pred - y_np)) / m\n        # update weights\n        w -= learning_rate * grad\n\n    # Round and return final weights as a list\n    return np.round(w, 4).tolist()"}
{"task_id": 122, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    # 1. Convert lists to NumPy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # 2. Augment X with a leading column of ones\n    ones = np.ones((X_np.shape[0], 1))\n    X_aug = np.hstack((ones, X_np))\n\n    # 3. Compute the optimal weights via Moore-Penrose pseudo-inverse\n    # w* = pinv(X_aug) @ y_np\n    w = np.linalg.pinv(X_aug).dot(y_np)\n\n    # 4. Round to 4 decimal places and return as a Python list\n    w_rounded = np.round(w, 4).tolist()\n\n    return w_rounded"}
{"task_id": 123, "completion_id": 0, "completion": "import numpy as np\n\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories. A cell must contain 1 if the row\u2019s element\n    belongs to the column\u2019s category and 0 otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # Convert input to a NumPy array (if not already)\n    y = np.array(y, copy=False)\n\n    # Find the sorted unique categories\n    unique_categories = np.unique(y)\n    \n    # Create a mapping from category to its index\n    category_to_index = {cat: idx for idx, cat in enumerate(unique_categories)}\n    \n    # Build the one-hot encoded result as a list of lists\n    one_hot_result = []\n    for value in y:\n        # Initialize a row of the appropriate length with all zeros\n        row = [0] * len(unique_categories)\n        # Set the corresponding category index to 1\n        row[category_to_index[value]] = 1\n        one_hot_result.append(row)\n    \n    return one_hot_result"}
{"task_id": 126, "completion_id": 0, "completion": "import numpy as np\n\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert X to a numpy array\n    X_arr = np.array(X, dtype=float)\n    N, C = X_arr.shape\n\n    # If Y is None, use X\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n\n    # If gamma is None, set it to 1/C\n    if gamma is None:\n        gamma = 1.0 / C\n\n    # Compute the dot product, then apply the kernel formula\n    # K[i,j] = (gamma * X[i]\u00b7Y[j] + c0)^d\n    K = (gamma * X_arr.dot(Y_arr.T) + c0) ** d\n\n    # Round to 4 decimals and convert to a Python list\n    K_rounded = np.round(K, 4).tolist()\n    return K_rounded"}
{"task_id": 127, "completion_id": 0, "completion": "```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    # If lengths differ, return -1\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Identify all distinct classes in both y_true and y_pred\n    distinct_classes = sorted(list(set(y_true + y_pred)))\n    class_to_index = {label: idx for idx, label in enumerate(distinct_classes)}\n    \n    # Initialize the confusion matrix\n    n_classes = len(distinct_classes)\n    matrix = [[0] * n_classes for _ in range(n_classes)]\n    \n    # Populate the matrix\n    for true_label, pred_label in zip(y_true, y_pred):\n        i = class_to_index[true_label]\n        j = class_to_index[pred_label]\n        matrix[i][j] += 1\n    \n    return matrix\n```\n"}
{"task_id": 128, "completion_id": 0, "completion": "import numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # If no components or invalid request, return empty list:\n    if n_components <= 0:\n        return []\n    \n    # Number of samples (m) and features (d)\n    m, d = X.shape\n    \n    # Compute global mean\n    mu = np.mean(X, axis=0)\n    \n    # Find unique classes\n    classes = np.unique(y)\n    \n    # Compute class means and gather samples per class\n    class_means = {}\n    class_counts = {}\n    for c in classes:\n        X_c = X[y == c]\n        class_counts[c] = X_c.shape[0]\n        class_means[c] = np.mean(X_c, axis=0)\n    \n    # 1. Compute within-class scatter matrix S_W\n    S_W = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mu_c = class_means[c]\n        # deviations from class mean\n        dev = X_c - mu_c\n        # sum of (x - mu_c)(x - mu_c)^T\n        S_W += dev.T @ dev\n\n    # 2. Compute between-class scatter matrix S_B\n    S_B = np.zeros((d, d))\n    for c in classes:\n        mu_c = class_means[c]\n        Nc = class_counts[c]\n        diff = (mu_c - mu).reshape(-1, 1)\n        S_B += Nc * (diff @ diff.T)\n    \n    # 3. Form A = pinv(S_W) * S_B (use Moore-Penrose pseudo-inverse for stability)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n    \n    # 4. Eigen-decomposition of A (A is symmetric, so use eigh)\n    #    sort in descending order of eigen-values\n    eigvals, eigvecs = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eigvals)[::-1]  # descending order\n    eigvals = eigvals[sorted_idx]\n    eigvecs = eigvecs[:, sorted_idx]\n    \n    # If n_components is bigger than available dimension, limit it\n    # (the problem statement allows up to d, so just be safe)\n    n_components = min(n_components, d)\n    \n    # 5. Deterministic sign fix for the chosen vectors\n    #    for each eigenvector, flip if the first non-zero element is negative\n    W = []\n    for i in range(n_components):\n        v = eigvecs[:, i].copy()\n        # Find the first non-zero element\n        first_non_zero = np.flatnonzero(v)\n        if first_non_zero.size > 0:  # if there's any non-zero element\n            idx = first_non_zero[0]\n            if v[idx] < 0:\n                v = -v\n        W.append(v)\n    W = np.column_stack(W)  # shape (d, n_components)\n    \n    # 6. Project X on the first n_components eigenvectors\n    if n_components < 1:\n        return []\n    X_proj = X @ W  # shape (m, n_components)\n    \n    # Round to 4 decimal places\n    X_proj_rounded = np.round(X_proj, 4)\n    \n    # 7. Return as list of lists\n    return X_proj_rounded.tolist()"}
{"task_id": 129, "completion_id": 0, "completion": "```python\nfrom itertools import islice, cycle\n\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    # If the sequence is empty or samples is not positive, return empty list\n    if not sequence or samples <= 0:\n        return []\n\n    # Otherwise, return the first `samples` items from an infinite cycle of the sequence\n    return list(islice(cycle(sequence), samples))\n```"}
{"task_id": 130, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # Filter transitions to find only those that match the given (state, action)\n    relevant_next_states = [t[3] for t in transitions if t[0] == state and t[1] == action]\n    \n    if not relevant_next_states:\n        return []\n    \n    # Count the occurrences of each next_state\n    counter = Counter(relevant_next_states)\n    total = sum(counter.values())\n    \n    # Build the distribution, rounding probabilities to 4 decimals\n    distribution = []\n    for next_state in sorted(counter):\n        probability = round(counter[next_state] / total, 4)\n        distribution.append([next_state, probability])\n    \n    return distribution\n```"}
{"task_id": 131, "completion_id": 0, "completion": "def get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    # Ensure 'uid' is valid for '_SHARED_SEQUENCES'\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n\n    seq = _SHARED_SEQUENCES[uid]\n    # Convert negative index to a positive one in Python's usual way\n    if i < 0:\n        i += len(seq)\n\n    # Check that the new index is within the bounds of the sequence\n    if i < 0 or i >= len(seq):\n        return None\n\n    # Return the element if everything is valid\n    return seq[i]"}
{"task_id": 132, "completion_id": 0, "completion": "import numpy as np\n\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return z\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        return np.array(z)"}
{"task_id": 133, "completion_id": 0, "completion": "import numpy as np\n\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"\n    Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    # Check if any index is out of [0, vocab_length-1].\n    for seq in X_train:\n        for token in seq:\n            if token < 0 or token >= vocab_length:\n                return -1  # Return -1 on invalid token index\n\n    # Prepare a 3D array of zeros with shape (m, time_steps, vocab_length)\n    m = len(X_train)\n    # Assume that each sequence is the same length\n    time_steps = len(X_train[0]) if m > 0 else 0\n    one_hot_array = np.zeros((m, time_steps, vocab_length), dtype=int)\n\n    # Populate the one-hot array\n    for i, seq in enumerate(X_train):\n        for j, token in enumerate(seq):\n            one_hot_array[i, j, token] = 1\n\n    # Convert to nested Python list\n    return one_hot_array.tolist()"}
{"task_id": 134, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    # 1. Check if the list is empty\n    if not payoff_probs:\n        return (-1.0, -1)\n    \n    # 2. Validate probabilities\n    for p in payoff_probs:\n        if p < 0 or p > 1:\n            return (-1.0, -1)\n    \n    # 3. Identify the arm with the highest probability\n    # np.argmax returns the first occurrence of the maximum if there are ties\n    best_arm_index = np.argmax(payoff_probs)\n    max_expected_reward = payoff_probs[best_arm_index]\n    \n    return (float(max_expected_reward), int(best_arm_index))\n```"}
{"task_id": 135, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Learns OLS linear regression coefficients using the normal equation and makes predictions.\n    Returns -1 if (X^T X) is singular (non-invertible).\n\n    1. Prepend a column of ones to X_train to fit the intercept term.\n    2. Computes coefficients w = (X^T X)^{-1} X^T y, if invertible.\n    3. Prepend a column of ones to X_test.\n    4. Returns the predictions on X_test, rounded to 4 decimal places, or -1 if singular.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=float)\n    X_test_arr  = np.array(X_test,  dtype=float)\n\n    # Prepend column of ones to X_train and X_test for the intercept term\n    ones_train = np.ones((X_train_arr.shape[0], 1), dtype=float)\n    X_train_ones = np.hstack([ones_train, X_train_arr])\n\n    ones_test = np.ones((X_test_arr.shape[0], 1), dtype=float)\n    X_test_ones = np.hstack([ones_test, X_test_arr])\n\n    # Compute (X^T X) and check invertibility\n    XT_X = X_train_ones.T @ X_train_ones\n    XT_y = X_train_ones.T @ y_train_arr\n\n    # Attempt to compute the inverse; if singular, return -1\n    try:\n        w = np.linalg.inv(XT_X) @ XT_y\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Compute predictions on the test set\n    predictions = X_test_ones @ w\n\n    # Round to 4 decimal places and return as a Python list\n    return [round(float(pred), 4) for pred in predictions]"}
{"task_id": 136, "completion_id": 0, "completion": "import numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"\n    Compute the numerically-stable softmax of *z* along *axis*.\n\n    Steps:\n      1. Subtract the maximum value along *axis* from every element of *z*.\n      2. Exponentiate the shifted values.\n      3. Divide by the sum of exponentials along the same axis.\n      4. Round the result to four decimal places.\n      5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: -1).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    shifted = z - np.max(z, axis=axis, keepdims=True)\n    exps = np.exp(shifted)\n    sums = np.sum(exps, axis=axis, keepdims=True)\n    result = exps / sums\n    # Round to 4 decimal places\n    result_rounded = np.round(result, 4)\n    # Return as a regular Python list\n    return result_rounded.tolist()"}
{"task_id": 138, "completion_id": 0, "completion": "import numpy as np\n\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    # Check if lengths are the same and nonzero\n    if len(y_true) == 0 or len(y_pred) == 0 or len(y_true) != len(y_pred):\n        return -1\n\n    # Calculate the number of correct predictions\n    correct_count = sum(1 for true_val, pred_val in zip(y_true, y_pred) if true_val == pred_val)\n\n    # Compute accuracy and round to four decimal places\n    accuracy = correct_count / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 139, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    The numerically stable formula used is:\n        tanh(z) = 2 / (1 + exp(-2z)) - 1\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    # If the input is empty, return an empty list\n    if len(z) == 0:\n        return []\n    \n    # Compute tanh using the stable formula for each element\n    # Then round to four decimal places before returning\n    return [round(2 / (1 + np.exp(-2 * val)) - 1, 4) for val in z]\n```"}
{"task_id": 140, "completion_id": 0, "completion": "from collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    # Edge case: no maze or incorrectly sized grid\n    if n == 0:\n        return -1\n\n    # Special case: 1x1 maze\n    if n == 1:\n        # If single cell is '.', agent is already at the goal\n        return 0 if grid[0][0] == '.' else -1\n\n    # Parse grid into a 2D list for easier access\n    maze = [list(row) for row in grid]\n\n    # If start or goal is a wall\n    if maze[0][0] == '#' or maze[n-1][n-1] == '#':\n        return -1\n\n    # If start or goal is initially on fire\n    if maze[0][0] == 'F' or maze[n-1][n-1] == 'F':\n        return -1\n\n    # Directions for movement: up, down, left, right\n    directions = [(1,0), (-1,0), (0,1), (0,-1)]\n\n    # STEP 1: Compute the earliest time the fire will occupy each cell\n    # We'll store \"fire_time[r][c]\" = earliest minute fire reaches (r,c),\n    # or math.inf if the fire never reaches that cell.\n    fire_time = [[math.inf] * n for _ in range(n)]\n    queue_fire = deque()\n\n    # Initialize the queue with all burning cells at time 0\n    for r in range(n):\n        for c in range(n):\n            if maze[r][c] == 'F':\n                fire_time[r][c] = 0\n                queue_fire.append((r, c, 0))  # row, col, time\n\n    # BFS for fire spread\n    while queue_fire:\n        r, c, t = queue_fire.popleft()\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                if maze[nr][nc] != '#' and fire_time[nr][nc] > t + 1:\n                    fire_time[nr][nc] = t + 1\n                    queue_fire.append((nr, nc, t+1))\n\n    # STEP 2: BFS for the agent\n    # The agent can move to a neighboring cell (.) if by the time the agent arrives\n    # there, it is not yet on fire (agent_time < fire_time[r][c]).\n\n    # If the start is already on fire at time 0, impossible to start\n    if fire_time[0][0] == 0:\n        return -1\n\n    visited = [[False]*n for _ in range(n)]\n    queue_agent = deque()\n    # Start: (0,0) at time 0\n    visited[0][0] = True\n    queue_agent.append((0, 0, 0))  # row, col, time\n\n    while queue_agent:\n        r, c, t = queue_agent.popleft()\n        # If we've reached the goal, return time\n        if r == n-1 and c == n-1:\n            return t\n\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                # Not a wall, not visited\n                if maze[nr][nc] != '#' and not visited[nr][nc]:\n                    # Agent would arrive at time t+1; check fire_time\n                    if fire_time[nr][nc] > t + 1:\n                        visited[nr][nc] = True\n                        queue_agent.append((nr, nc, t+1))\n\n    # If we exhaust the BFS and can't reach the end, return -1\n    return -1"}
{"task_id": 141, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    Implements a k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature data of shape (n_train, n_features).\n    y_train : np.ndarray\n        Training labels of shape (n_train,).\n    X_test : np.ndarray\n        Test feature data of shape (n_test, n_features).\n    k : int\n        Number of nearest neighbors to consider.\n    metric : str, optional\n        Distance metric to use: 'euclidean', 'manhattan', or 'cosine'.\n        If an unknown metric is provided, Euclidean distance is used.\n\n    Returns\n    -------\n    np.ndarray\n        A 1-D array of predicted labels for the test set.\n    \"\"\"\n\n    def euclidean_dist(a, b):\n        # sqrt(sum((a - b)^2))\n        return np.sqrt(np.sum((a - b)**2, axis=1))\n\n    def manhattan_dist(a, b):\n        # sum(|a - b|)\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_dist(a, b):\n        # 1 - (a\u00b7b / (||a|| * ||b||))\n        # a and b shapes: b is (n_train, n_features), a is 1D of shape (n_features,)\n        eps = 1e-9  # To prevent division by zero\n        dot_products = np.sum(a * b, axis=1)\n        a_norm = np.sqrt(np.sum(a**2))\n        b_norms = np.sqrt(np.sum(b**2, axis=1)) + eps\n        return 1.0 - (dot_products / (a_norm * b_norms))\n\n    # fallback to euclidean if metric is not recognized\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        metric = 'euclidean'\n\n    n_test = X_test.shape[0]\n    y_pred = np.empty(n_test, dtype=y_train.dtype)\n\n    for i in range(n_test):\n        test_point = X_test[i]\n        if metric == 'euclidean':\n            distances = euclidean_dist(test_point, X_train)\n        elif metric == 'manhattan':\n            distances = manhattan_dist(test_point, X_train)\n        else:  # metric == 'cosine'\n            distances = cosine_dist(test_point, X_train)\n\n        # find k nearest neighbors\n        neighbors_idx = np.argsort(distances)[:k]\n        neighbor_labels = y_train[neighbors_idx]\n\n        # majority vote (in case of tie, np.argmax returns first occurrence -> smallest label)\n        counts = np.bincount(neighbor_labels)\n        y_pred[i] = np.argmax(counts)\n\n    return y_pred"}
{"task_id": 143, "completion_id": 0, "completion": "import numpy as np\n\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    # Convert to NumPy array if needed\n    x = np.asarray(x)\n\n    if derivative:\n        # f'(x) = 1 if x >= 0, else alpha\n        return np.where(x >= 0, 1.0, alpha)\n    else:\n        # f(x) = x if x >= 0, else alpha*x\n        return np.where(x >= 0, x, alpha * x)"}
{"task_id": 144, "completion_id": 0, "completion": "import numpy as np\n\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    a = np.array(actual)\n    b = np.array(predicted)\n    \n    # Check if shapes match\n    if a.shape != b.shape:\n        return -1\n    \n    # Calculate MAE using NumPy\n    mae = np.mean(np.abs(a - b))\n    \n    # Round to 4 decimal places and return\n    return float(np.round(mae, 4))"}
{"task_id": 146, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for X_test using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length n_samples containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If k exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as X_test.\n    \"\"\"\n    # Define an epsilon to avoid division by zero in the cosine metric\n    EPS = 1e-12\n    \n    # Ensure k does not exceed the number of training samples\n    k = min(k, X.shape[0])\n    \n    # Precompute norms for cosine distance if needed\n    if metric == 'cosine':\n        # Norms of training samples\n        norms_X = np.linalg.norm(X, axis=1) + EPS\n    \n    predictions = []\n    \n    # Iterate over each test sample\n    for x_test in X_test:\n        \n        # Compute distances according to the selected metric\n        if metric == 'euclidean':\n            # Euclidean distance: sqrt( sum( (x - x_test)^2 ) )\n            # Vectorized: sum of squares along each training row\n            diff = X - x_test\n            dist = np.sqrt(np.sum(diff**2, axis=1))\n        \n        elif metric == 'manhattan':\n            # Manhattan distance: sum( |x - x_test| )\n            diff = np.abs(X - x_test)\n            dist = np.sum(diff, axis=1)\n        \n        elif metric == 'cosine':\n            # Cosine distance: 1 - (x_test . x) / (||x_test|| * ||x||)\n            dot_products = X @ x_test\n            norm_x_test = np.linalg.norm(x_test) + EPS\n            # Distances:\n            dist = 1 - (dot_products / (norms_X * norm_x_test))\n        else:\n            raise ValueError(\"Unknown distance metric. Choose from ['euclidean', 'manhattan', 'cosine']\")\n        \n        # Find the k nearest neighbors\n        neighbors_idx = np.argsort(dist)[:k]  # indices of k smallest distances\n        \n        # Retrieve the corresponding labels\n        neighbor_labels = y[neighbors_idx]\n        \n        # Majority vote: in case of tie, return the smallest label\n        # np.bincount counts the occurrences of each label;\n        # argmax picks the label with the largest count (ties broken by smallest index)\n        counts = np.bincount(neighbor_labels)\n        predicted_label = np.argmax(counts)\n        \n        predictions.append(predicted_label)\n    \n    # Convert to plain Python list\n    return np.array(predictions).tolist()"}
{"task_id": 147, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels (0 or 1) for every row in `X_test`.\n    \"\"\"\n    # Special case: if y_train contains only one class, predict that class for all X_test\n    unique_classes = np.unique(y_train)\n    if len(unique_classes) == 1:\n        return [int(unique_classes[0])] * X_test.shape[0]\n\n    # Number of samples (n) and number of features (d)\n    n, d = X_train.shape\n\n    # Initialize weights and bias to zero\n    w = np.zeros(d)\n    b = 0.0\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Batch gradient descent\n    for _ in range(epochs):\n        # Linear combination\n        linear_output = np.dot(X_train, w) + b\n        \n        # Prediction using sigmoid\n        predictions = sigmoid(linear_output)\n        \n        # Compute gradients\n        error = predictions - y_train\n        grad_w = np.dot(X_train.T, error) / n\n        grad_b = np.sum(error) / n\n        \n        # Update parameters\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Predict on X_test\n    test_linear_output = np.dot(X_test, w) + b\n    test_predictions = sigmoid(test_linear_output)\n    \n    # Threshold at 0.5\n    predicted_labels = (test_predictions >= 0.5).astype(int)\n\n    # Return as a Python list of integers\n    return predicted_labels.tolist()"}
{"task_id": 148, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check for invalid input: alpha outside [0, 1] or empty data.\n    if alpha < 0 or alpha > 1 or not data:\n        return -1\n\n    # Special case when alpha = 0: all values are the first element.\n    if alpha == 0:\n        return [round(data[0], 4)] * len(data)\n\n    # Special case when alpha = 1: output is the original sequence.\n    if alpha == 1:\n        return [round(x, 4) for x in data]\n\n    # General case for 0 < alpha < 1.\n    smoothed = [data[0]]  # s0 = x0\n    for k in range(1, len(data)):\n        s_prev = smoothed[-1]\n        x_k = data[k]\n        s_k = (1 - alpha) * s_prev + alpha * x_k\n        smoothed.append(s_k)\n\n    # Round all results to 4 decimal places.\n    return [round(val, 4) for val in smoothed]\n```\n"}
{"task_id": 150, "completion_id": 0, "completion": "from heapq import heappush, heappop\nfrom typing import List, Tuple, Union\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1).\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    if not grid or not grid[0]:  # Empty grid\n        return -1\n\n    m, n = len(grid), len(grid[0])\n\n    # If start or goal is blocked, no path exists\n    if grid[0][0] == 1 or grid[m-1][n-1] == 1:\n        return -1\n\n    # Manhattan distance heuristic\n    def manhattan_dist(r1, c1, r2, c2):\n        return abs(r1 - r2) + abs(c1 - c2)\n\n    # Reconstruct path from 'came_from' dictionary\n    def reconstruct_path(came_from, current):\n        path = []\n        while current in came_from:\n            path.append(current)\n            current = came_from[current]\n        path.append((0, 0))  # start node\n        path.reverse()\n        return path\n\n    # Min-heap for managing the open set\n    open_heap = []\n    # g_cost: cost to reach each cell, default to \"infinity\"\n    g_cost = [[float('inf')] * n for _ in range(m)]\n    g_cost[0][0] = 0\n\n    # Insert start node into the heap\n    start_h = manhattan_dist(0, 0, m-1, n-1)\n    heappush(open_heap, (start_h, 0, (0, 0)))  # (f, g, (row, col))\n\n    came_from = {}\n\n    # Directions for neighbors (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    while open_heap:\n        f_current, g_current, (r, c) = heappop(open_heap)\n\n        # If we've reached the goal, reconstruct and return path\n        if (r, c) == (m-1, n-1):\n            return reconstruct_path(came_from, (r, c))\n\n        # If the cost in g_cost doesn't match the one we popped, skip (stale entry)\n        if g_current > g_cost[r][c]:\n            continue\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == 0:\n                tentative_g = g_current + 1\n                if tentative_g < g_cost[nr][nc]:\n                    g_cost[nr][nc] = tentative_g\n                    came_from[(nr, nc)] = (r, c)\n                    # f = g + h\n                    h_cost = manhattan_dist(nr, nc, m-1, n-1)\n                    heappush(open_heap, (tentative_g + h_cost, tentative_g, (nr, nc)))\n\n    # If we exhaust all possibilities without reaching goal\n    return -1"}
{"task_id": 151, "completion_id": 0, "completion": "import numpy as np\n\ndef _sigmoid(X: np.ndarray) -> np.ndarray:\n    return 1.0 / (1.0 + np.exp(-X))\n\ndef _sigmoid_derivative(A: np.ndarray) -> np.ndarray:\n    return A * (1.0 - A)\n\ndef _tanh(X: np.ndarray) -> np.ndarray:\n    return np.tanh(X)\n\ndef _tanh_derivative(A: np.ndarray) -> np.ndarray:\n    return 1.0 - A**2\n\ndef _relu(X: np.ndarray) -> np.ndarray:\n    return np.maximum(0, X)\n\ndef _relu_derivative(A: np.ndarray) -> np.ndarray:\n    # A > 0 indicates where the input was positive\n    return (A > 0).astype(A.dtype)\n\ndef _softmax(X: np.ndarray) -> np.ndarray:\n    # Numerically stable softmax along the last axis\n    shift = X - np.max(X, axis=-1, keepdims=True)\n    exps = np.exp(shift)\n    sums = np.sum(exps, axis=-1, keepdims=True)\n    return exps / sums\n\ndef _softmax_derivative(A: np.ndarray) -> np.ndarray:\n    # As per the requirement: return an array of ones\n    return np.ones_like(A)\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X` (rounded to 4 decimals).\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                     derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    activations = {\n        \"sigmoid\": (_sigmoid, _sigmoid_derivative),\n        \"tanh\": (_tanh, _tanh_derivative),\n        \"relu\": (_relu, _relu_derivative),\n        \"softmax\": (_softmax, _softmax_derivative),\n    }\n\n    if activation not in activations:\n        raise ValueError(f\"Unsupported activation '{activation}'. Choose from 'sigmoid', 'tanh', 'relu', or 'softmax'.\")\n\n    # Forward\n    forward_func, derivative_func = activations[activation]\n    A = forward_func(X)\n\n    # Derivative w.r.t. X (given the output A)\n    dA = derivative_func(A)\n\n    # Multiply local derivative by upstream gradient\n    grad = upstream_grad * dA\n\n    # Round to 4 decimals\n    A = np.round(A, 4)\n    grad = np.round(grad, 4)\n\n    return A, grad"}
{"task_id": 152, "completion_id": 0, "completion": "import numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays (in case they are Python lists)\n    arr_true = np.array(y_true)\n    arr_pred = np.array(y_pred)\n\n    # Check for matching lengths and non-empty arrays\n    if len(arr_true) != len(arr_pred) or len(arr_true) == 0:\n        return -1\n\n    # Calculate the accuracy\n    correct_predictions = np.sum(arr_true == arr_pred)\n    accuracy = correct_predictions / len(arr_true)\n\n    # Round to 4 decimal places\n    return round(accuracy, 4)"}
{"task_id": 154, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Reshape 1D arrays to 2D (treat as a single sample)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    \n    # Compute pairwise squared Euclidean distances\n    X_norm = np.sum(X**2, axis=1).reshape(-1, 1)   # shape (n_samples, 1)\n    Y_norm = np.sum(Y**2, axis=1).reshape(1, -1)   # shape (1, m_samples)\n    distances = X_norm + Y_norm - 2 * X.dot(Y.T)   # shape (n_samples, m_samples)\n\n    # Apply the RBF formula\n    K = np.exp(-gamma * distances)\n\n    # Round to 6 decimal places and convert to a nested list\n    K_rounded = np.round(K, 6)\n    return K_rounded.tolist()\n```"}
{"task_id": 155, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array\n    x = np.array(state, dtype=float)\n\n    # First linear layer + ReLU\n    h1 = x @ weights['W1'] + weights['b1']\n    h1 = np.maximum(0, h1)  # ReLU\n\n    # Second linear layer + ReLU\n    h2 = h1 @ weights['W2'] + weights['b2']\n    h2 = np.maximum(0, h2)  # ReLU\n\n    # Output layer + tanh\n    h3 = h2 @ weights['W3'] + weights['b3']\n    out = np.tanh(h3)\n\n    # Round each element to 4 decimals and return as a Python list\n    return [round(val, 4) for val in out]"}
{"task_id": 157, "completion_id": 0, "completion": "def accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return -1 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or -1 according to the rules above.\n    \"\"\"\n    # Check for length mismatch\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Handle the special case where both lists are empty\n    if len(y_true) == 0:\n        return 0\n\n    # Count how many predictions match the true labels\n    correct_matches = sum(1 for true_label, pred_label in zip(y_true, y_pred) if true_label == pred_label)\n\n    # Calculate accuracy\n    accuracy = correct_matches / len(y_true)\n\n    # Return accuracy rounded to 4 decimal places\n    return round(accuracy, 4)"}
{"task_id": 158, "completion_id": 0, "completion": "import numpy as np\n\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients using the closed-form solution.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals. When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Augment X with column of ones for intercept if required\n    if fit_intercept:\n        X_np = np.column_stack([np.ones(X_np.shape[0]), X_np])\n\n    # Compute X^T X\n    XTX = X_np.T @ X_np\n\n    # Create regularisation matrix A = alpha * I\n    # If fit_intercept, the first diagonal element is 0 (unregularised intercept)\n    n_features = X_np.shape[1]\n    A = alpha * np.eye(n_features)\n    if fit_intercept:\n        A[0, 0] = 0.0\n\n    # Compute (X^T X + A)^{-1} X^T y\n    beta = np.linalg.inv(XTX + A) @ X_np.T @ y_np\n\n    # Round each coefficient to four decimals and return as a list\n    return [round(float(coef), 4) for coef in beta]"}
{"task_id": 159, "completion_id": 0, "completion": "import numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula:\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    d = x_i.shape[0]\n\n    # Compute (x - mu)\n    diff = x_i - mu\n\n    # Compute \u03a3\u207b\u00b9 (x - \u00b5) using solve for numerical stability\n    inv_term = np.linalg.solve(sigma, diff)\n\n    # Compute the dot product (x - mu)^T \u03a3\u207b\u00b9 (x - mu)\n    quad_form = diff @ inv_term\n\n    # Compute the sign and log determinant of \u03a3\n    sign, logdet = np.linalg.slogdet(sigma)\n    # For a positive-definite matrix, sign is expected to be 1.\n\n    # Calculate constant d * ln(2\u03c0)\n    d_ln_2pi = d * np.log(2 * np.pi)\n\n    # Combine terms according to the formula\n    log_pdf = -0.5 * (d_ln_2pi + logdet + quad_form)\n\n    # Return the result rounded to four decimal places\n    return round(log_pdf, 4)"}
{"task_id": 160, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"\n    Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb * L1-norm.  Reliance solely on NumPy\n    (no scikit-learn).\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  All returned values are rounded to 4 decimal places.\n    \"\"\"\n\n    # Number of samples (m) and features (n)\n    m, n = X.shape\n\n    # 1) Augment X by adding a column of ones (if fit_intercept) or zeros.\n    if fit_intercept:\n        # The first column will be all ones and is the intercept column\n        X_aug = np.column_stack([np.ones(m), X])\n    else:\n        # The first column will be all zeros; this keeps the \"intercept\" separate\n        X_aug = np.column_stack([np.zeros(m), X])\n\n    # Initialize all parameters (including intercept) to zero\n    w = np.zeros(n + 1)  # w[0] is the intercept if fit_intercept=True\n\n    # Precompute squared norms of each column for faster updates\n    # alpha_j = sum_i (x_{ij}^2)\n    col_sq_norms = np.sum(X_aug ** 2, axis=0)  # shape (n+1,)\n\n    # Define the soft-thresholding operator S(a, \u03c4) = sign(a)*max(|a|-\u03c4, 0)\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n\n    # Perform coordinate descent\n    for _ in range(max_iters):\n        # 2) If fitting intercept, recompute it each outer iteration\n        if fit_intercept:\n            # Intercept = mean(y - (sum of predicted by other weights))\n            # i.e. w[0] = average of residual when ignoring current intercept\n            # So, predicted without the intercept is X_aug[:,1:] @ w[1:]\n            residual_no_intercept = y - X_aug[:, 1:] @ w[1:]\n            w[0] = np.mean(residual_no_intercept)\n\n        # 3) Coordinate loop for each weight (excluding intercept at index 0)\n        for j in range(1, n + 1):\n            # Compute \"partial residual\" by temporarily removing w[j] contribution\n            # r_j = y - (X_aug @ w) + x_j * w[j]\n            # which is the same as setting w_j = 0, then measuring residual\n            r_j = y - (X_aug @ w) + (X_aug[:, j] * w[j])\n\n            # Dot product of x_j and r_j\n            a_j = np.dot(X_aug[:, j], r_j)\n\n            # Soft-thresholding update\n            # w_j <- S(a_j, \u03bb * m) / sum_i x_{ij}^2\n            # Guard against division by zero in case col_sq_norms[j] == 0\n            if col_sq_norms[j] != 0:\n                w[j] = soft_threshold(a_j, lambda_param * m) / col_sq_norms[j]\n            else:\n                w[j] = 0.0\n\n    # Separate out intercept and weights to return\n    if fit_intercept:\n        bias = w[0]\n        weights = w[1:]\n    else:\n        bias = 0.0  # If not fitting intercept, we report bias=0\n        weights = w[1:]  # ignoring the dummy w[0]\n\n    # Round to 4 decimal places\n    weights_rounded = list(np.round(weights, 4))\n    bias_rounded = float(np.round(bias, 4))\n\n    return (weights_rounded, bias_rounded)"}
{"task_id": 161, "completion_id": 0, "completion": "import numpy as np\n\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predicts binary class labels (1 or -1) for each sample in X using\n    a second-order Factorization Machine.\n\n    Parameters\n    ----------\n    X : np.ndarray of shape (m, n)\n        The input samples with m rows/samples and n columns/features.\n    w0 : float\n        Global bias term.\n    w : np.ndarray of shape (n,)\n        The linear weights for each of the n features.\n    V : np.ndarray of shape (n, k)\n        The latent factor matrix for pairwise interactions, with\n        n features and k latent factors.\n\n    Returns\n    -------\n    list of length m\n        Predicted class labels, where each label is either 1 or -1.\n    \"\"\"\n    # Linear term: global bias + X @ w\n    linear_part = w0 + X @ w  # shape (m,)\n\n    # Second-order term using the \"fast\" trick\n    # (X.dot(V))**2  -  (X**2).dot(V**2), summed across latent factors\n    XV = X @ V                      # shape (m, k)\n    X2 = X**2                       # shape (m, n)\n    V2 = V**2                       # shape (n, k)\n    second_order = 0.5 * (\n        np.sum(XV**2, axis=1) - np.sum(X2 @ V2, axis=1)\n    )  # shape (m,)\n\n    # Final scores\n    scores = linear_part + second_order  # shape (m,)\n\n    # Convert scores to labels: 1 if score >= 0, else -1\n    labels = np.where(scores >= 0, 1, -1)\n\n    # Return as a list\n    return labels.tolist()"}
{"task_id": 162, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float = 1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    # 1) Check that shapes match\n    assert Y_hat.shape == Y.shape, \"Shapes of Y_hat and Y must match\"\n\n    # 2) Compute the cross-entropy loss, adding epsilon before taking the log\n    m = Y_hat.shape[0]  # batch size\n    loss = -np.sum(Y * np.log(Y_hat + epsilon)) / m\n\n    # 3) Compute the gradient (average gradient over the batch)\n    grad = (Y_hat - Y) / m\n\n    # 4) Round the loss and gradient to four decimal places, and convert gradient to a nested list\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n\n    # 5) Return (loss, gradient)\n    return (loss_rounded, grad_rounded)"}
{"task_id": 163, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regression(\n    X: list[float],\n    y: list[float],\n    degree: int,\n    reg_factor: float,\n    l1_ratio: float,\n    learning_rate: float,\n    n_iterations: int\n) -> list[float]:\n    \"\"\"\n    Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    # Convert input lists to NumPy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n = len(X_arr)\n\n    # Build polynomial feature matrix:  1 (bias), x, x^2, ..., x^degree\n    X_poly = np.column_stack([X_arr**d for d in range(degree + 1)])  # shape (n, degree+1)\n\n    # Handle the special case: pure Ridge (alpha = 0) => analytical solution\n    if l1_ratio == 0.0:\n        # P is a diagonal matrix that does NOT penalize the bias term\n        P = np.eye(degree + 1)\n        P[0, 0] = 0.0  # No penalty for the bias coefficient\n\n        # Solve [X^T X / n + (reg_factor/2) * P] * beta = X^T y / n\n        A = (X_poly.T @ X_poly) / n + (reg_factor / 2.0) * P\n        b = (X_poly.T @ y_arr) / n\n        beta = np.linalg.solve(A, b)\n\n    # Otherwise: Elastic Net (alpha > 0) => batch gradient descent\n    else:\n        beta = np.zeros(degree + 1)\n        for _ in range(n_iterations):\n            # Predictions\n            y_pred = X_poly @ beta\n\n            # Gradient from MSE part (derivative of 1/n sum((y_pred - y)^2))\n            grad = (2.0 / n) * (X_poly.T @ (y_pred - y_arr))\n\n            # Add the L1 + L2 penalty terms (but not for the bias, j=0)\n            # L1 part sub-gradient: reg_factor * alpha * sign(beta_j)\n            # L2 part gradient:     reg_factor * (1 - alpha) * beta_j\n            sign_beta = np.where(beta[1:] > 0, 1.0,\n                                 np.where(beta[1:] < 0, -1.0, 0.0))\n            grad[1:] += reg_factor * l1_ratio * sign_beta\n            grad[1:] += reg_factor * (1.0 - l1_ratio) * beta[1:]\n\n            # Gradient update\n            beta -= learning_rate * grad\n\n    # Make predictions with the fitted coefficients\n    y_hat = X_poly @ beta\n\n    # Return as a Python list of floats rounded to 4 decimal places\n    return [round(float(val), 4) for val in y_hat]"}
{"task_id": 164, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Computes the binary classification log-loss (cross-entropy loss).\n\n    :param actual:    1D array-like of true labels (0 or 1).\n    :param predicted: 1D array-like of predicted probabilities in [0,1].\n    :return:          The average log-loss, rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Clip predicted probabilities to avoid taking log(0) or log(1).\n    clipped_preds = np.clip(predicted, epsilon, 1 - epsilon)\n    \n    # Compute log-loss using the formula:\n    #    -1/N * sum( y_i*log(p_i) + (1-y_i)*log(1-p_i) )\n    log_loss = -np.mean(actual * np.log(clipped_preds) +\n                        (1 - actual) * np.log(1 - clipped_preds))\n    \n    return round(log_loss, 6)"}
{"task_id": 165, "completion_id": 0, "completion": "import numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays (this also checks they at least look like arrays/lists)\n    x_arr = np.array(x, dtype=int)\n    y_arr = np.array(y, dtype=int)\n    \n    # Check if lengths are different\n    if x_arr.shape[0] != y_arr.shape[0]:\n        return -1\n    \n    # Calculate the normalized Hamming distance\n    distance = np.mean(x_arr != y_arr)\n    \n    # Return rounded distance\n    return round(distance, 4)"}
{"task_id": 166, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int = 1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    # Number of features\n    n_features = X_train.shape[1]\n\n    # Initialize weight vector and bias\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n\n    # Perceptron training loop\n    for _ in range(max_iter):\n        error_count = 0\n        for x_i, y_i in zip(X_train, y_train):\n            # Compute signed margin\n            margin = y_i * (np.dot(w, x_i) + b)\n            # If misclassified (margin <= 0), update w and b\n            if margin <= 0:\n                w += y_i * x_i\n                b += y_i\n                error_count += 1\n\n        # If no errors this pass, we've converged; stop early\n        if error_count == 0:\n            break\n\n    # Compute predictions for X_test\n    scores = X_test.dot(w) + b\n    # Apply sign, treat 0 as +1\n    predictions = np.sign(scores)\n    # Where score == 0, set to +1\n    predictions[predictions == 0] = 1\n\n    # Convert predictions to Python list of integers (+1 or -1)\n    return predictions.astype(int).tolist()\n```"}
{"task_id": 167, "completion_id": 0, "completion": "import numpy as np\n\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # 1. Clip predictions to avoid log(0).\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    \n    # 2. Compute the mean BCE loss.\n    m = len(y)\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    \n    # 3. Compute the gradient of the loss with respect to y_hat.\n    grad = (y_hat - y) / m\n    \n    # 4. Round the loss and gradient to 4 decimal places.\n    loss_rounded = round(loss, 4)\n    grad_rounded = [round(float(g), 4) for g in grad]\n    \n    return (loss_rounded, grad_rounded)"}
{"task_id": 168, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=int)\n    X_test_np = np.array(X_test, dtype=float)\n\n    # Identify the unique classes\n    classes = np.unique(y_train_np)\n\n    # Precompute means, variances (with small addition to avoid zero), and priors for each class\n    means = {}\n    variances = {}\n    priors = {}\n\n    total_samples = len(y_train_np)\n    for c in classes:\n        # Select all samples of class c\n        X_c = X_train_np[y_train_np == c]\n        # Compute mean and variance per feature\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + 1e-6  # Add a small value to avoid division by zero\n        # Prior probability of class c\n        priors[c] = X_c.shape[0] / float(total_samples)\n\n    # Make predictions for each sample in X_test\n    predictions = []\n    for x in X_test_np:\n        class_log_probs = {}\n        for c in classes:\n            # Start with log prior\n            log_prob = np.log(priors[c])\n\n            # Add contribution from each feature under the Gaussian assumption\n            # log N(x; mean, var) = -0.5 * log(2\u03c0 var) - ( (x - mean)^2 / (2 var) )\n            mean_c = means[c]\n            var_c = variances[c]\n            # Using vectorized operations for the log of the Gaussian likelihood\n            log_prob += -0.5 * np.sum(np.log(2.0 * np.pi * var_c))\n            log_prob += -0.5 * np.sum(((x - mean_c) ** 2) / var_c)\n\n            class_log_probs[c] = log_prob\n\n        # Predict the class that maximizes the (log-)posterior\n        predicted_class = max(class_log_probs, key=class_log_probs.get)\n        predictions.append(int(predicted_class))\n\n    return predictions"}
{"task_id": 169, "completion_id": 0, "completion": "import numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats, each rounded to 4 decimal places.\n    \"\"\"\n    # 1. Validate input\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    if N == 1:\n        # For a single sample, all standard definitions equal 1.0\n        return [1.0]\n\n    # 2. Prepare for window generation\n    n = np.arange(N)\n    denom = N - 1\n\n    if window == \"hamming\":\n        # Hamming:  w[n] = 0.54 \u2212 0.46 cos(2\u03c0n/(N\u22121))\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / denom)\n\n    elif window == \"hann\":\n        # Hann: w[n] = 0.5 - 0.5 cos(2\u03c0n/(N\u22121))\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / denom)\n\n    elif window == \"blackman_harris\":\n        # Blackman\u2013Harris:\n        # w[n] = a0 - a1*cos(2\u03c0n/(N-1)) + a2*cos(4\u03c0n/(N-1)) - a3*cos(6\u03c0n/(N-1))\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = (\n            a0\n            - a1 * np.cos(2 * np.pi * n / denom)\n            + a2 * np.cos(4 * np.pi * n / denom)\n            - a3 * np.cos(6 * np.pi * n / denom)\n        )\n\n    elif window == \"generalized_cosine\":\n        # w[n] = \u03a3(a_k * cos(2\u03c0k*n/(N-1))) for k in [0..M]\n        if not coefficients:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine'.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / denom)\n\n    else:\n        raise ValueError(f\"Unknown window type '{window}'.\")\n\n    # 3. Round to 4 decimals and return as a regular Python list\n    w_rounded = [round(float(val), 4) for val in w]\n    return w_rounded"}
{"task_id": 171, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    X_test_arr = np.array(X_test, dtype=float)\n    \n    # If all labels are the same, skip training and predict that label for all\n    unique_labels = np.unique(y_train_arr)\n    if len(unique_labels) == 1:\n        # Just return that single label for every sample in X_test\n        return [int(unique_labels[0])] * len(X_test_arr)\n    \n    # We expect exactly two distinct numeric labels\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct numeric labels.\")\n    \n    # Map the two labels to {0, 1}\n    # We'll always map the smaller label to 0 and the larger label to 1\n    label0, label1 = np.sort(unique_labels)\n    \n    def label_to_binary(y_val):\n        return 0 if y_val == label0 else 1\n    \n    def binary_to_label(binary_val):\n        return label0 if binary_val == 0 else label1\n    \n    y_train_binary = np.array([label_to_binary(y) for y in y_train_arr])\n    \n    # Add intercept (bias) column of 1's to X_train and X_test\n    # Shape: (n_samples, n_features + 1)\n    intercept_train = np.ones((X_train_arr.shape[0], 1))\n    intercept_test = np.ones((X_test_arr.shape[0], 1))\n    X_train_aug = np.hstack((intercept_train, X_train_arr))\n    X_test_aug = np.hstack((intercept_test, X_test_arr))\n    \n    # Initialize weights (including bias weight)\n    n_features = X_train_aug.shape[1]\n    w = np.zeros(n_features)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    n_samples = X_train_aug.shape[0]\n    \n    for _ in range(epochs):\n        # Shuffle indices to form mini-batches\n        indices = np.random.permutation(n_samples)\n        \n        for start_idx in range(0, n_samples, batch_size):\n            end_idx = start_idx + batch_size\n            batch_indices = indices[start_idx:end_idx]\n            \n            X_batch = X_train_aug[batch_indices]\n            y_batch = y_train_binary[batch_indices]\n            \n            # Predict probabilities\n            preds = sigmoid(X_batch @ w)\n            \n            # Compute gradient (mean gradient over the mini-batch)\n            grad = X_batch.T @ (preds - y_batch) / len(X_batch)\n            \n            # Update weights\n            w -= learning_rate * grad\n    \n    # Predict on X_test\n    test_preds_prob = sigmoid(X_test_aug @ w)\n    # Convert probabilities to binary predictions using threshold 0.5\n    test_preds_binary = (test_preds_prob >= 0.5).astype(int)\n    \n    # Map binary predictions back to original labels\n    test_preds = [binary_to_label(b) for b in test_preds_binary]\n    \n    return test_preds"}
{"task_id": 172, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    arr = np.array(z, dtype=float)  # Convert input to a NumPy array\n    derivative = 1 - np.tanh(arr)**2  # Compute derivative element-wise\n    derivative_rounded = np.round(derivative, 4)  # Round to 4 decimal places\n\n    # If arr is scalar (shape == ()), return float, else return list\n    if derivative_rounded.shape == ():  \n        return float(derivative_rounded)\n    else:\n        return derivative_rounded.tolist()\n```"}
{"task_id": 173, "completion_id": 0, "completion": "```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # Check length\n    if len(candidate) != len(target):\n        return -1\n    \n    # Sum up absolute differences of character codes\n    return sum(abs(ord(c) - ord(t)) for c, t in zip(candidate, target))\n```"}
{"task_id": 174, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions for numerical stability\n    predictions_clipped = np.clip(predictions, 1e-12, 1 - 1e-12)\n    \n    # Compute the categorical cross-entropy loss\n    #   - For each sample i, the cross-entropy is: - log(prob[i, true_label])\n    #   - Summation over classes for each sample is effectively the log of\n    #     the predicted probability at the true class (because of one-hot labels).\n    #   - Then we average over the batch.\n    loss = -np.mean(np.sum(labels * np.log(predictions_clipped), axis=1))\n    \n    # Compute the classification accuracy\n    #   - Compare predicted class (argmax of predictions) vs. true label (argmax of labels).\n    preds_argmax = np.argmax(predictions, axis=1)\n    labels_argmax = np.argmax(labels, axis=1)\n    accuracy = np.mean(preds_argmax == labels_argmax)\n    \n    # Round both results to 4 decimal places\n    return round(loss, 4), round(accuracy, 4)\n```"}
{"task_id": 175, "completion_id": 0, "completion": "import numpy as np\n\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    # Convert to a NumPy array to handle both list and ndarray inputs\n    w = np.array(weights, dtype=float)\n\n    # Compute the sum of squares of the weights\n    sum_squares = np.sum(w ** 2)\n\n    # Compute the L2 penalty\n    penalty = C * sum_squares\n\n    # Return the penalty rounded to 4 decimal places\n    return float(round(penalty, 4))"}
{"task_id": 176, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Train an AdaBoost classifier from scratch using decision stumps as weak learners,\n    and return predictions for X_test as a list of {0,1}.\n    \n    A decision stump is defined by:\n      - feature_index (which column to split)\n      - threshold\n      - polarity: \n          +1 means predict +1 for feature < threshold, otherwise \u20131\n          \u20131 means predict +1 for feature >= threshold, otherwise \u20131\n\n    The labels in y_train are assumed to be {0,1}, internally converted to {\u20131,+1}.\n    The returned predictions for X_test are in {0,1}.\n    \"\"\"\n    # Convert to NumPy arrays\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=int)\n    X_test_np = np.array(X_test, dtype=float)\n\n    # Convert labels from {0,1} to {\u20131,+1} for internal use\n    y_train_m1p1 = np.where(y_train_np == 1, 1, -1)\n    n_samples, n_features = X_train_np.shape\n\n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples)\n\n    # To store the stumps and their weights (alpha)\n    stumps = []\n\n    # --- Helper function: predict with a given stump ---\n    def stump_predict(feature_values, threshold, polarity):\n        \"\"\"\n        Returns +1 or \u20131 for each sample in feature_values, \n        based on polarity and threshold.\n        \"\"\"\n        if polarity == 1:\n            # +1 for values < threshold, \u20131 otherwise\n            return np.where(feature_values < threshold, 1, -1)\n        else:\n            # +1 for values >= threshold, \u20131 otherwise\n            return np.where(feature_values >= threshold, 1, -1)\n\n    # --- Main Boosting Loop ---\n    for _ in range(n_estimators):\n        # We will search for the best stump that minimizes the weighted error.\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_pred = None  # store the predictions of the best stump\n\n        for feature_idx in range(n_features):\n            values = X_train_np[:, feature_idx]\n            # Get unique thresholds to consider\n            unique_vals = np.unique(values)\n            \n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    # Get stump predictions for the current candidate\n                    preds = stump_predict(values, threshold, polarity)\n                    # Weighted error = sum of w_i for misclassified samples\n                    misclassified = (preds != y_train_m1p1)\n                    error = np.sum(w[misclassified])\n\n                    # Tie-breaking: \n                    #  1) smaller error\n                    #  2) smaller feature index\n                    #  3) smaller threshold\n                    #  4) polarity = +1 before \u20131\n                    # We will check error first, then feature_idx, then threshold, then polarity.\n                    # Because we loop in increasing order of feature_idx, threshold, and polarity = [1, -1],\n                    # we can do a simple consistent check:\n                    if (error < best_error or\n                       (np.isclose(error, best_error) and feature_idx < best_feature) or\n                       (np.isclose(error, best_error) and feature_idx == best_feature \n                        and threshold < best_threshold) or\n                       (np.isclose(error, best_error) and feature_idx == best_feature \n                        and np.isclose(threshold, best_threshold) and polarity == 1 and best_polarity == -1)):\n                        best_error = error\n                        best_feature = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_pred = preds\n\n        # Compute the stump's vote weight alpha_t\n        # Add a tiny constant to denominator in case best_error=0\n        alpha = 0.5 * np.log((1.0 - best_error) / (best_error + 1e-10))\n\n        # Store the best stump\n        stumps.append((best_feature, best_threshold, best_polarity, alpha))\n\n        # Update sample weights:\n        # w_i <- w_i * exp( - alpha_t * y_i * h_t(x_i) ), then normalize\n        w *= np.exp(-alpha * y_train_m1p1 * best_pred)\n        w /= np.sum(w)  # normalize\n\n        # If we found a perfect stump (error=0), we can stop early\n        if best_error == 0.0:\n            break\n\n    # --- Inference for X_test ---\n    # For each test sample, compute the sum of alpha_t * h_t(x),\n    # then take the sign, and map {\u20131 \u2192 0, +1 \u2192 1}.\n    agg = np.zeros(X_test_np.shape[0])\n    for (f_idx, thr, pol, alpha_t) in stumps:\n        preds_test = stump_predict(X_test_np[:, f_idx], thr, pol)\n        agg += alpha_t * preds_test\n\n    # Convert aggregated sign back to {0,1}\n    # sign(agg) = +1 => 1, sign(agg) = \u20131 => 0\n    final_preds = np.where(agg >= 0.0, 1, 0)\n\n    # Return a plain Python list\n    return final_preds.tolist()"}
{"task_id": 177, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to four decimals.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    # Helper function to compute tanh for a scalar.\n    def _tanh_scalar(x: float) -> float:\n        e_pos = np.exp(x)\n        e_neg = np.exp(-x)\n        return (e_pos - e_neg) / (e_pos + e_neg)\n\n    # Check if z is a scalar.\n    if isinstance(z, (int, float)):\n        # Directly compute tanh for the scalar and round to 4 decimals.\n        return round(_tanh_scalar(float(z)), 4)\n    else:\n        # Convert the input to a numpy array (in float type for numerical stability).\n        arr = np.array(z, dtype=float)\n        # Compute element-wise tanh using the definition.\n        e_pos = np.exp(arr)\n        e_neg = np.exp(-arr)\n        tanh_vals = (e_pos - e_neg) / (e_pos + e_neg)\n        # Round the result to 4 decimals element-wise and convert back to Python list.\n        return np.round(tanh_vals, 4).tolist()\n```\n"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n\n    # Return -1 if any argument is non-positive\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # PSO parameters\n    w = 0.5      # inertia weight\n    c1 = 1.5     # cognitive weight\n    c2 = 1.5     # social weight\n    \n    # Initialisation of positions and velocities in [-1, 1]\n    positions = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n\n    # Sphere function\n    def sphere(x):\n        return np.sum(np.square(x), axis=-1)\n    \n    # Personal best data\n    pbest_positions = positions.copy()\n    pbest_scores = sphere(positions)  # evaluate sphere for all particles\n    \n    # Global best data\n    gbest_index = np.argmin(pbest_scores)\n    gbest_position = pbest_positions[gbest_index].copy()\n    gbest_score = pbest_scores[gbest_index]\n    \n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocity and position of each particle\n        r1 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        r2 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        \n        velocities = (w * velocities\n                      + c1 * r1 * (pbest_positions - positions)\n                      + c2 * r2 * (gbest_position - positions))\n        \n        positions = positions + velocities\n        positions = np.clip(positions, -1.0, 1.0)\n        \n        # Evaluate new fitness\n        fitness = sphere(positions)\n        \n        # Update personal and global best\n        better_mask = fitness < pbest_scores\n        pbest_scores[better_mask] = fitness[better_mask]\n        pbest_positions[better_mask] = positions[better_mask]\n        \n        new_gbest_index = np.argmin(pbest_scores)\n        if pbest_scores[new_gbest_index] < gbest_score:\n            gbest_score = pbest_scores[new_gbest_index]\n            gbest_position = pbest_positions[new_gbest_index].copy()\n    \n    return round(gbest_score, 4)\n```\n"}
{"task_id": 179, "completion_id": 0, "completion": "import re\nimport string\n\ndef tokenize_chars(line: str, lowercase: bool = True, filter_punctuation: bool = True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    # 1. If the input is None or empty, return an empty list immediately.\n    if not line:\n        return []\n\n    # 2. Convert to lower-case if requested.\n    if lowercase:\n        line = line.lower()\n\n    # 3. Remove punctuation if requested.\n    if filter_punctuation:\n        # Escape punctuation to safely use in regex.\n        line = re.sub(f\"[{re.escape(string.punctuation)}]\", \"\", line)\n\n    # 4. Collapse runs of two or more consecutive spaces into a single space.\n    line = re.sub(r\" {2,}\", \" \", line)\n\n    # 5. Strip leading and trailing spaces.\n    line = line.strip()\n\n    # 6. If the string is empty after processing, return an empty list.\n    if not line:\n        return []\n\n    # 7. Return a list of individual characters.\n    return list(line)"}
{"task_id": 180, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if n_train == 0:\n        return []\n\n    # If k is 0 or greater than the number of training samples, use all training samples\n    if k == 0 or k > n_train:\n        k = n_train\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(sum((a - b)**2 for a, b in zip(x1, x2)))\n\n    predictions = []\n    for x_test in X_test:\n        # Compute distances to all training points\n        distances = [(euclidean_distance(x_test, x_train), idx)\n                     for idx, x_train in enumerate(X_train)]\n        # Sort by distance and select the indices of the k smallest\n        distances.sort(key=lambda d: d[0])\n        k_indices = [idx for _, idx in distances[:k]]\n\n        # Gather the corresponding y values\n        neighbors = [y_train[idx] for idx in k_indices]\n\n        if task == \"regression\":\n            # Mean of neighbors, rounding to 4 decimals\n            mean_val = sum(neighbors) / len(neighbors)\n            predictions.append(round(mean_val, 4))\n        else:  # classification\n            # Use majority voting; in case of ties, choose the smallest label\n            counter = Counter(neighbors)\n            max_count = max(counter.values())\n            # All labels with the max count\n            candidates = [lbl for lbl, cnt in counter.items() if cnt == max_count]\n            # Pick the smallest in standard Python ordering\n            predictions.append(min(candidates))\n\n    return predictions"}
{"task_id": 181, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    # Convert Python lists to NumPy arrays for distance calculation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # If k is larger than the number of training samples, use all of them\n    if k > len(X_train):\n        k = len(X_train)\n\n    predictions = []\n    for x in X_test:\n        # Compute Euclidean distances from the query point x to all training points\n        distances = np.linalg.norm(X_train - x, axis=1)\n        \n        # Identify the indices of the k closest neighbours\n        neighbor_indices = np.argsort(distances)[:k]\n        \n        # Retrieve the corresponding target values\n        neighbor_targets = y_train[neighbor_indices]\n\n        if problem == \"classify\":\n            # Use majority vote (with tie-breaking on the sorted order)\n            counts = Counter(neighbor_targets)\n            max_count = max(counts.values())\n            # All labels that share the highest vote\n            candidates = [label for label, count in counts.items() if count == max_count]\n            # Tie-break by smallest label after sorting\n            predictions.append(sorted(candidates)[0])\n        else:  # 'regress'\n            # Mean of neighbour targets, rounded to 4 decimal places\n            mean_value = np.mean(neighbor_targets)\n            predictions.append(round(mean_value, 4))\n\n    return predictions"}
{"task_id": 182, "completion_id": 0, "completion": "import numpy as np\n\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Computes the polynomial kernel matrix K for data matrices X and Y, i.e. (X @ Y^T)^degree.\n    \n    Parameters:\n    -----------\n    X : 2D list or numpy ndarray of shape (n, p)\n        The first data matrix.\n    Y : 2D list or numpy ndarray of shape (m, p)\n        The second data matrix.\n    degree : int, default=2\n        The polynomial degree. Must be a positive integer (>= 1).\n        \n    Returns:\n    --------\n    List of lists\n        The computed polynomial kernel matrix, with each entry rounded to\n        four decimal places. Returns -1 if the inputs are invalid.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X)\n    Y = np.array(Y)\n    \n    # Validate dimensions\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Validate degree\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    \n    # Compute polynomial kernel: (X @ Y^T) ** degree\n    K = (X @ Y.T) ** degree\n    \n    # Round to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Return as a Python nested list\n    return K_rounded.tolist()"}
{"task_id": 183, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Determine fan_in based on the dimensionality of weight_shape\n    if len(weight_shape) == 2:\n        # Dense layer weight_shape: (n_in, n_out)\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # 2D Conv layer weight_shape: (fW, fH, in_channels, out_channels)\n        fW, fH, in_channels, _ = weight_shape\n        fan_in = fW * fH * in_channels\n    else:\n        # Out of scope for this task\n        raise ValueError(\"Only 2D or 4D shapes are supported.\")\n    \n    # Compute the limit for the uniform distribution\n    limit = np.sqrt(6.0 / fan_in)\n    \n    # Sample from uniform distribution in [\u2212limit, limit]\n    return np.random.uniform(low=-limit, high=limit, size=weight_shape)\n```"}
{"task_id": 184, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"\n    Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    # -----------------------------\n    # Helper Functions / Classes\n    # -----------------------------\n\n    class Node:\n        \"\"\"Tree node storing feature, threshold, children, or a leaf value.\"\"\"\n        def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n            # If value is not None, this node is a leaf\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n        def is_leaf_node(self):\n            return self.value is not None\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        \"\"\"Compute Gini impurity for a 1D array of class labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        freqs = counts / len(labels)\n        return 1.0 - np.sum(freqs ** 2)\n\n    def majority_class(labels: np.ndarray) -> int:\n        \"\"\"Return the majority class label in the given array.\"\"\"\n        return np.bincount(labels).argmax()\n\n    def find_best_split(X: np.ndarray, y: np.ndarray):\n        \"\"\"\n        Find the best (feature, threshold) split based on Gini gain.\n        Returns (best_feature, best_threshold, best_gain).\n        If no split improves Gini, returns (None, None, 0).\n        \"\"\"\n        n_samples, n_features = X.shape\n        if n_samples <= 1:\n            return None, None, 0\n\n        parent_gini = gini_impurity(y)\n        best_gain = 0.0\n        best_feature = None\n        best_threshold = None\n\n        for feature_idx in range(n_features):\n            # Sort data by the current feature\n            sorted_indices = np.argsort(X[:, feature_idx])\n            x_sorted = X[sorted_indices, feature_idx]\n            y_sorted = y[sorted_indices]\n\n            # Explore midpoints between consecutive distinct values\n            for i in range(1, n_samples):\n                # If consecutive points are the same, skip\n                if x_sorted[i] == x_sorted[i - 1]:\n                    continue\n                # Threshold = midpoint between these two consecutive feature values\n                threshold = (x_sorted[i] + x_sorted[i - 1]) / 2.0\n\n                # Split into left / right\n                left_mask = x_sorted <= threshold\n                right_mask = ~left_mask\n\n                y_left, y_right = y_sorted[left_mask], y_sorted[right_mask]\n                if len(y_left) == 0 or len(y_right) == 0:\n                    # If a split produces an empty child, can't use this threshold\n                    # (the node becomes a leaf instead)\n                    continue\n\n                # Compute weighted children gini\n                left_gini = gini_impurity(y_left)\n                right_gini = gini_impurity(y_right)\n                weighted_child_gini = (len(y_left) / n_samples) * left_gini \\\n                                      + (len(y_right) / n_samples) * right_gini\n\n                gain = parent_gini - weighted_child_gini\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n\n        return best_feature, best_threshold, best_gain\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int = 0) -> Node:\n        \"\"\"\n        Recursively build a decision tree node.\n        \"\"\"\n        # Stopping criterion 1: all labels identical\n        if len(np.unique(y)) == 1:\n            return Node(value=y[0])\n\n        # Stopping criterion 2: max_depth reached\n        if max_depth is not None and depth >= max_depth:\n            return Node(value=majority_class(y))\n\n        # Find best split\n        feature, threshold, gain = find_best_split(X, y)\n\n        # Stopping criterion 3: no further gain\n        if gain == 0 or feature is None:\n            return Node(value=majority_class(y))\n\n        # Partition the data\n        left_indices = X[:, feature] <= threshold\n        right_indices = ~left_indices\n\n        # If either side is empty, make a leaf\n        if not np.any(left_indices) or not np.any(right_indices):\n            return Node(value=majority_class(y))\n\n        # Recursively build children\n        left_child = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return Node(feature=feature, threshold=threshold, left=left_child, right=right_child)\n\n    def predict_row(x: np.ndarray, node: Node) -> int:\n        \"\"\"Traverse the tree and predict the class for a single sample x.\"\"\"\n        # If leaf node, return its value\n        if node.is_leaf_node():\n            return node.value\n\n        # Otherwise, go left or right\n        if x[node.feature] <= node.threshold:\n            return predict_row(x, node.left)\n        else:\n            return predict_row(x, node.right)\n\n    # -----------------------------\n    # Main Logic\n    # -----------------------------\n\n    # Build the tree\n    root = build_tree(X_train, y_train, depth=0)\n\n    # Predict on X_test\n    predictions = []\n    for x in X_test:\n        pred = predict_row(x, root)\n        predictions.append(int(pred))  # ensure int\n\n    return predictions"}
{"task_id": 185, "completion_id": 0, "completion": "import numpy as np\n\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X*.\n    \"\"\"\n    X = np.asarray(X)\n    \n    if X.size == 0:\n        raise ValueError(\"Got an empty matrix.\")\n    \n    if X.ndim == 1:\n        n_samples = 1\n        n_features = len(X)\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    \n    return (int(n_samples), int(n_features))"}
{"task_id": 186, "completion_id": 0, "completion": "import numpy as np\n\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    # If X_test contains no rows, return an empty list\n    if len(X_test) == 0:\n        return []\n\n    # Compute the mean of y_train\n    mean_value = np.mean(y_train)\n\n    # Round the mean to 4 decimal places\n    mean_value_rounded = round(mean_value, 4)\n\n    # Repeat the rounded mean for every row in X_test\n    predictions = [mean_value_rounded for _ in range(len(X_test))]\n\n    return predictions"}
{"task_id": 188, "completion_id": 0, "completion": "import math\n\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max - \u03b5_min) * exp(-decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n\n    # 1. Validate inputs\n    if not (0 <= min_epsilon < max_epsilon and decay_rate > 0 and step >= 0):\n        return -1\n\n    # 2. Compute \u03b5(t) using the exponential decay formula\n    epsilon_t = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n\n    # 3. Clip the result so it never goes below min_epsilon\n    if epsilon_t < min_epsilon:\n        epsilon_t = min_epsilon\n    \n    # 4. Return the value rounded to 4 decimal places\n    return round(epsilon_t, 4)"}
{"task_id": 189, "completion_id": 0, "completion": "import numpy as np\n\ndef batch_resample(X, new_dim, mode=\"bilinear\"):\n    \"\"\"\n    Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels),\n        rounded to 4 decimal places.\n    \"\"\"\n    if mode not in (\"bilinear\", \"neighbor\"):\n        raise NotImplementedError(f\"Unrecognized resampling mode: {mode}\")\n        \n    n_ex, in_rows, in_cols, in_channels = X.shape\n    out_rows, out_cols = new_dim\n    \n    # Prepare output array\n    out = np.zeros((n_ex, out_rows, out_cols, in_channels), dtype=X.dtype)\n    \n    if mode == \"neighbor\":\n        # Nearest-neighbor interpolation\n        # Scale factors (to map each output pixel back to the input coordinate)\n        if out_rows > 1:\n            row_scale = in_rows / out_rows\n        else:\n            # Degenerate case: out_rows == 1, pick the only row index 0\n            row_scale = 0\n\n        if out_cols > 1:\n            col_scale = in_cols / out_cols\n        else:\n            # Degenerate case: out_cols == 1, pick the only col index 0\n            col_scale = 0\n        \n        for ex in range(n_ex):\n            for ch in range(in_channels):\n                for r in range(out_rows):\n                    # Map the output row r to input row\n                    in_r = int(np.round(r * row_scale))\n                    in_r = min(max(in_r, 0), in_rows - 1)  # clamp\n                    for c in range(out_cols):\n                        # Map the output column c to input column\n                        in_c = int(np.round(c * col_scale))\n                        in_c = min(max(in_c, 0), in_cols - 1)  # clamp\n                        out[ex, r, c, ch] = X[ex, in_r, in_c, ch]\n\n    else:\n        # Bilinear interpolation\n        # We use a standard mapping: if out_rows>1, row_scale = (in_rows-1)/(out_rows-1),\n        # so that r=0 maps to 0, r=out_rows-1 maps to in_rows-1.\n        if out_rows > 1:\n            row_scale = float(in_rows - 1) / (out_rows - 1)\n        else:\n            row_scale = 0\n\n        if out_cols > 1:\n            col_scale = float(in_cols - 1) / (out_cols - 1)\n        else:\n            col_scale = 0\n\n        for ex in range(n_ex):\n            for ch in range(in_channels):\n                for r in range(out_rows):\n                    # Compute the continuous input-row coordinate\n                    R = r * row_scale\n                    r0 = int(np.floor(R))\n                    r1 = r0 + 1\n                    if r1 >= in_rows:\n                        r1 = r0  # clamp at boundary\n                    wr = R - r0  # weight for the lower vs. upper pixel\n\n                    for c in range(out_cols):\n                        # Compute the continuous input-col coordinate\n                        C = c * col_scale\n                        c0 = int(np.floor(C))\n                        c1 = c0 + 1\n                        if c1 >= in_cols:\n                            c1 = c0  # clamp at boundary\n                        wc = C - c0  # weight for the left vs. right pixel\n\n                        # bilinear interpolation from the 4 surrounding pixels\n                        top_left     = X[ex, r0, c0, ch]\n                        top_right    = X[ex, r0, c1, ch]\n                        bottom_left  = X[ex, r1, c0, ch]\n                        bottom_right = X[ex, r1, c1, ch]\n\n                        val = (1 - wr) * (1 - wc) * top_left \\\n                              + wr * (1 - wc) * bottom_left \\\n                              + (1 - wr) * wc * top_right \\\n                              + wr * wc * bottom_right\n                        out[ex, r, c, ch] = val\n\n    # Round to 4 decimal places before returning\n    out = np.round(out, 4)\n    return out"}
{"task_id": 190, "completion_id": 0, "completion": "import numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n\n    # Convert X, y to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    \n    # If all labels are the same, no valid split\n    unique_labels = np.unique(y)\n    if len(unique_labels) == 1:\n        # Compute G of the whole dataset (which is 0 if there's only one class)\n        G_whole = 1.0 - 1.0  # Because p_k=1 => 1 - 1^2 = 0\n        return (-1, None, round(G_whole, 4))\n\n    # -- Helper function to compute Gini impurity of a node (set of labels) --\n    def gini_impurity(labels):\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return 1.0 - np.sum(p**2)\n\n    # Compute the Gini of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    # Prepare to track the best split\n    best_score = float('inf')\n    best_feature = -1\n    best_threshold = None\n\n    # For each feature, consider splits at each unique value\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_vals = np.unique(feature_values)\n        \n        # Try every unique threshold\n        for v in unique_vals:\n            left_mask = feature_values <= v\n            right_mask = feature_values > v\n\n            # Skip if either child is empty\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n\n            # Compute Gini for left and right subsets\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            G_left = gini_impurity(y_left)\n            G_right = gini_impurity(y_right)\n\n            n_left = len(y_left)\n            n_right = len(y_right)\n            n_total = n_left + n_right\n\n            # Weighted Gini impurity of the split\n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n\n            # Tie-breaking and improvement check\n            diff = best_score - G_split\n            if diff > 1e-12:\n                # Found strictly better split\n                best_score = G_split\n                best_feature = j\n                best_threshold = v\n            elif abs(diff) < 1e-12:\n                # Check tie-breaking rules:\n                # 1) Smaller feature index\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = v\n                    best_score = G_split\n                elif j == best_feature:\n                    # 2) Smaller threshold value\n                    if v < best_threshold:\n                        best_threshold = v\n                        best_score = G_split\n\n    # If best_feature remains -1 => no valid split\n    if best_feature == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature, best_threshold, round(best_score, 4))"}
{"task_id": 191, "completion_id": 0, "completion": "import numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    valid_names = {\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"}\n\n    def distance_fn(x, y):\n        # 1) Check if metric name is valid\n        if name not in valid_names:\n            return -1\n\n        # 2) Convert inputs to float arrays, handling potential errors\n        try:\n            x_arr = np.asarray(x, dtype=float)\n            y_arr = np.asarray(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n\n        # 3) Check that both arrays are one-dimensional\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return -1\n\n        # 4) Check non-empty and same length\n        if (x_arr.size == 0 or y_arr.size == 0 or x_arr.size != y_arr.size):\n            return -1\n\n        # 5) Compute distance based on the metric\n        if name == \"euclidean\":\n            dist = np.sqrt(np.sum((x_arr - y_arr) ** 2))\n        elif name == \"manhattan\":\n            dist = np.sum(np.abs(x_arr - y_arr))\n        elif name == \"chebyshev\":\n            dist = np.max(np.abs(x_arr - y_arr))\n        elif name == \"cosine\":\n            # Check for zero norms\n            norm_x = np.linalg.norm(x_arr)\n            norm_y = np.linalg.norm(y_arr)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            # Cosine distance = 1 - (x\u00b7y / (||x|| * ||y||))\n            dist = 1 - (np.dot(x_arr, y_arr) / (norm_x * norm_y))\n        else:\n            # Should never reach here, but just in case\n            return -1\n\n        return round(dist, 4)\n\n    return distance_fn"}
{"task_id": 193, "completion_id": 0, "completion": "import numpy as np\n\ndef softsign(z):\n    \"\"\"\n    Compute the Softsign activation function element-wise.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float (rounded to 4 decimals); for an array-like input it returns\n    a list of floats (rounded to 4 decimals), preserving the original shape.\n\n    If the input is an empty list/array, it returns an empty list.\n    \"\"\"\n    # Case for scalar input (int or float)\n    if isinstance(z, (int, float)):\n        return round(z / (1 + abs(z)), 4)\n\n    # Case for array-like input\n    # Convert input to a NumPy array for easy element-wise operations\n    arr = np.array(z, dtype=float)\n\n    # If the input array is empty, return an empty list\n    if arr.size == 0:\n        return []\n\n    # Compute Softsign element-wise\n    result = arr / (1 + np.abs(arr))\n\n    # Convert result back to a Python list, rounding each element\n    return [round(val, 4) for val in result]"}
{"task_id": 194, "completion_id": 0, "completion": "import numpy as np\n\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients \n                          rounded to 6 decimals.\n    \"\"\"\n    w = np.array(weights, dtype=np.float64)\n    grad = np.array(gradients, dtype=np.float64)\n\n    # Initialize G to zeros if it's the first iteration\n    if G is None:\n        G_array = np.zeros_like(w)\n    else:\n        G_array = np.array(G, dtype=np.float64)\n\n    # 1. Accumulate the squared gradients\n    G_array += grad**2\n\n    # 2. Update the parameters\n    w -= learning_rate * grad / (np.sqrt(G_array + eps))\n\n    # Round to 6 decimals and convert back to Python lists\n    new_weights = np.round(w, 6).tolist()\n    new_G = np.round(G_array, 6).tolist()\n\n    return new_weights, new_G"}
{"task_id": 197, "completion_id": 0, "completion": ""}
{"task_id": 198, "completion_id": 0, "completion": "import numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"\n    Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of documents:\n    D = len(phi)\n    if D == 0:\n        # Edge case: empty corpus, return all zeros of shape VxT\n        return [[0.0 for _ in range(0)] for _ in range(V)]\n\n    # Number of topics (T) from the shape of phi for the first document.\n    # (Assumes all documents have the same number of topics.)\n    T = phi[0].shape[1]\n\n    # Accumulate counts into a V x T array\n    # B[v, t] = sum_{d,n} phi[d][n,t] * [w_d_n = v]\n    B = np.zeros((V, T), dtype=float)\n\n    # Fill B based on phi and corpus\n    for d, doc in enumerate(corpus):\n        # phi[d] has shape (N_d, T)\n        for n, w in enumerate(doc):\n            # Add the topic-proportions for this token to row w\n            B[w, :] += phi[d][n, :]\n\n    # Now normalize each topic column so that columns sum to 1\n    for t in range(T):\n        col_sum = B[:, t].sum()\n        if col_sum > 0.0:\n            B[:, t] /= col_sum\n        else:\n            # If col_sum is zero, that means no tokens were assigned to this topic,\n            # so we can either leave it at all zeros (which won't sum to 1),\n            # or (less commonly in pure ML-LDA) assign a uniform distribution\n            # among the words that do occur in the corpus. However, the\n            # instruction demands each column to sum to 1, so the usual fallback\n            # is to make it uniform over *all* words that appear at least once:\n            # Identify used words (rows where B[v,:] is nonzero in *any* topic).\n            # Or if you wish truly pure ML with no smoothing, you can leave it at zero,\n            # but that contradicts \"must sum to one\".\n            \n            # Here we go uniform over words that appear at least once:\n            # (Your instructor may or may not require this fallback.)\n            nonzero_rows = (B.sum(axis=1) > 0.0)\n            used_count = np.count_nonzero(nonzero_rows)\n            if used_count > 0:\n                B[nonzero_rows, t] = 1.0 / used_count\n\n    # Convert to Python list of lists and round to 4 decimals\n    beta_list = []\n    for v in range(V):\n        row_list = []\n        for t in range(T):\n            row_list.append(round(B[v, t], 4))\n        beta_list.append(row_list)\n\n    return beta_list"}
{"task_id": 199, "completion_id": 0, "completion": "import numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    y_left = []\n    y_right = []\n\n    for xi, yi in zip(X, y):\n        if xi < value:\n            y_left.append(yi)\n        else:\n            y_right.append(yi)\n\n    return (y_left, y_right)"}
{"task_id": 200, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a numpy array to handle arbitrary shapes / nested lists\n    w = np.array(weights, dtype=float)\n    \n    # If weights is empty, return 0.0\n    if w.size == 0:\n        return 0.0\n    \n    # Compute L1 penalty: C * sum of absolute values of all weights\n    penalty = C * np.sum(np.abs(w))\n    \n    # Return the penalty rounded to 4 decimal places\n    return round(penalty, 4)"}
{"task_id": 201, "completion_id": 0, "completion": "import numpy as np\n\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"\n    Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    # Epsilon for numerical stability to avoid division by zero\n    eps = 1e-12\n    \n    p = np.asarray(p, dtype=np.float64)  # Ensure p is a NumPy array of float type\n    \n    if axis is None:\n        # Treat the entire tensor as a single vector\n        # Flatten p, compute L2 norm, clip, then reshape back to original\n        norm = np.linalg.norm(p)\n        scale = min(1.0, m / (norm + eps))\n        p_clipped = p * scale\n    else:\n        # Compute the L2 norm along the specified axis and keep dimensions \n        # so that we can broadcast the scale factor\n        norm = np.linalg.norm(p, axis=axis, keepdims=True)\n        scale = np.minimum(1.0, m / (norm + eps))\n        p_clipped = p * scale\n    \n    # Round to 4 decimals\n    p_clipped = np.round(p_clipped, 4)\n    # Return as a nested Python list\n    return p_clipped.tolist()"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    # Precompute all pairwise Euclidean distances to speed up cost calculations\n    n_samples = X.shape[0]\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            diff = X[i] - X[j]\n            dist_matrix[i, j] = np.sqrt(np.dot(diff, diff))  # Euclidean distance\n\n    # Helper function to compute total cost given a set of medoids\n    # The cost is the sum of the distance of each sample to its closest medoid\n    def compute_total_cost(medoids: list[int]) -> float:\n        total = 0.0\n        for i in range(n_samples):\n            # distance to the first medoid\n            min_dist = dist_matrix[i, medoids[0]]\n            for m in medoids[1:]:\n                if dist_matrix[i, m] < min_dist:\n                    min_dist = dist_matrix[i, m]\n            total += min_dist\n        return total\n\n    # Start with the first k points as medoids\n    medoids = list(range(k))\n    current_cost = compute_total_cost(medoids)\n\n    # Attempt to improve the set of medoids by swapping\n    while True:\n        best_improvement = 0.0\n        best_swap = None\n\n        # Try swapping each medoid with each non-medoid sample\n        for medoid_idx in range(k):\n            for candidate in range(n_samples):\n                if candidate not in medoids:\n                    # Propose a swap: replace medoids[medoid_idx] with candidate\n                    new_medoids = medoids.copy()\n                    new_medoids[medoid_idx] = candidate\n\n                    new_cost = compute_total_cost(new_medoids)\n                    improvement = current_cost - new_cost\n                    if improvement > best_improvement:\n                        best_improvement = improvement\n                        best_swap = (medoid_idx, candidate)\n\n        # If no swap yields an improvement, we are done\n        if best_improvement <= 0:\n            break\n\n        # Otherwise, perform the best swap and update the cost\n        i_swap, cand_swap = best_swap\n        medoids[i_swap] = cand_swap\n        current_cost -= best_improvement\n\n    # After convergence, assign cluster labels\n    labels = []\n    for i in range(n_samples):\n        # Find the closest medoid (with tie broken by order in medoids list)\n        best_label = 0\n        min_dist = dist_matrix[i, medoids[0]]\n        for idx_m, m in enumerate(medoids[1:], start=1):\n            if dist_matrix[i, m] < min_dist:\n                min_dist = dist_matrix[i, m]\n                best_label = idx_m\n        labels.append(best_label)\n\n    return labels\n```\n"}
{"task_id": 203, "completion_id": 0, "completion": "import numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of non-negative floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats (rounded to 4 decimals).\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1), return -1.\n    \"\"\"\n\n    # 1) Convert to NumPy array if needed\n    if not isinstance(probs, np.ndarray):\n        probs = np.array(probs, dtype=float)\n\n    # 2) Check for validity: non-negative and sum to 1 (within 1e-12)\n    if np.any(probs < 0):\n        return -1\n    if not np.isclose(np.sum(probs), 1.0, atol=1e-12):\n        return -1\n\n    # 3) Setup\n    N = probs.shape[0]\n    scaled_probs = probs * N\n\n    # Tables (initially zero-filled)\n    prob_table = np.zeros(N, dtype=float)\n    alias_table = np.zeros(N, dtype=int)\n\n    # 4) Create small / large lists\n    small = []\n    large = []\n\n    for i, val in enumerate(scaled_probs):\n        if val < 1:\n            small.append(i)\n        else:\n            large.append(i)\n\n    # 5) Process until either list is empty\n    while small and large:\n        l = small.pop()   # pop last from small\n        g = large.pop()   # pop last from large\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n\n        # Update scaled_probs[g]\n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1.0\n\n        # Reassign g to small or large based on updated value\n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n\n    # 6) Any remaining entries in small or large get probability = 1\n    while large:\n        g = large.pop()\n        prob_table[g] = 1.0\n    while small:\n        l = small.pop()\n        prob_table[l] = 1.0\n\n    # 7) Convert to Python lists, rounding floats to 4 decimals\n    prob_list = [round(float(x), 4) for x in prob_table]\n    alias_list = [int(x) for x in alias_table]\n\n    return (prob_list, alias_list)"}
{"task_id": 204, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    arr = np.array(data)\n    if arr.size == 0:\n        return 0\n\n    missing_count = 0\n    for item in arr:\n        if item is None:\n            missing_count += 1\n        else:\n            # Safely check for NaN (may raise TypeError if non-numeric)\n            try:\n                if math.isnan(item):\n                    missing_count += 1\n            except (TypeError, ValueError):\n                # item is not a float (e.g. string), so not NaN\n                pass\n\n    return missing_count"}
{"task_id": 205, "completion_id": 0, "completion": "def get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    seen_ids = set()\n    result = []\n\n    for item in registry:\n        if isinstance(item, dict) and \"id\" in item:\n            env_id = item[\"id\"]\n            if env_id not in seen_ids:\n                seen_ids.add(env_id)\n                result.append(env_id)\n\n    return result"}
{"task_id": 206, "completion_id": 0, "completion": "import numpy as np\n\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual_arr = np.asarray(actual, dtype=float)\n    predicted_arr = np.asarray(predicted, dtype=float)\n\n    # Validate dimensions and lengths\n    if actual_arr.ndim != 1 or predicted_arr.ndim != 1:\n        return -1\n    if actual_arr.shape[0] != predicted_arr.shape[0]:\n        return -1\n\n    # Calculate MAE\n    mae = np.mean(np.abs(actual_arr - predicted_arr))\n\n    # Return rounded to four decimal places\n    return round(mae, 4)"}
{"task_id": 207, "completion_id": 0, "completion": "def convolution_shape(\n    img_height: int,\n    img_width: int,\n    filter_shape: tuple[int, int],\n    stride: tuple[int, int],\n    padding: tuple[int, int]\n) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    KH, KW = filter_shape\n    SH, SW = stride\n    PH, PW = padding\n\n    # All dimensions and strides must be positive\n    if any(x <= 0 for x in [img_height, img_width, KH, KW, SH, SW, PH, PW]):\n        return -1\n\n    # Calculate the \"numerator\" for the height dimension\n    numerator_h = img_height + 2 * PH - KH\n    # If negative or not divisible by the stride \u2192 invalid\n    if numerator_h < 0 or numerator_h % SH != 0:\n        return -1\n    OH = (numerator_h // SH) + 1\n    if OH <= 0:\n        return -1\n\n    # Calculate the \"numerator\" for the width dimension\n    numerator_w = img_width + 2 * PW - KW\n    # If negative or not divisible by the stride \u2192 invalid\n    if numerator_w < 0 or numerator_w % SW != 0:\n        return -1\n    OW = (numerator_w // SW) + 1\n    if OW <= 0:\n        return -1\n\n    return (OH, OW)"}
{"task_id": 208, "completion_id": 0, "completion": "import numpy as np\n\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    # If categories are not provided, infer them in the order of first appearance\n    if categories is None:\n        categories = []\n        for label in labels:\n            if label not in categories:\n                categories.append(label)\n\n    # Create a map from category to index\n    category_to_index = {cat: i for i, cat in enumerate(categories)}\n\n    # Check for any label not in the provided categories\n    for label in labels:\n        if label not in category_to_index:\n            return -1  # Return -1 if label is unknown\n\n    # Create the one-hot encoded matrix\n    encoded = np.zeros((len(labels), len(categories)), dtype=int)\n    for i, label in enumerate(labels):\n        encoded[i, category_to_index[label]] = 1\n\n    # Convert to list of lists and return\n    return encoded.tolist()"}
{"task_id": 209, "completion_id": 0, "completion": "import numpy as np\n\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    # Check top-level length consistency\n    if len(payoffs) != len(payoff_probs):\n        return -1\n    \n    expected_values = []\n    \n    # Validate each arm\u2019s data, then compute its expected value\n    for arm_idx in range(len(payoffs)):\n        # Check lengths match\n        if len(payoffs[arm_idx]) != len(payoff_probs[arm_idx]):\n            return -1\n        \n        # Check sum of probabilities is ~1.0\n        total_prob = sum(payoff_probs[arm_idx])\n        if abs(total_prob - 1.0) > 1e-8:\n            return -1\n        \n        # Compute expected value\n        ev = 0.0\n        for payoff_val, prob_val in zip(payoffs[arm_idx], payoff_probs[arm_idx]):\n            ev += payoff_val * prob_val\n        \n        expected_values.append(round(ev, 4))\n    \n    # Find the best arm (breaking ties by smallest index among equals)\n    best_arm = 0\n    best_ev = expected_values[0]\n    for i in range(1, len(expected_values)):\n        # If strictly greater, pick new best. If equal, keep old best.\n        if expected_values[i] > best_ev:\n            best_arm = i\n            best_ev = expected_values[i]\n    \n    # Return the 3-tuple\n    return (expected_values, best_arm, round(best_ev, 4))"}
{"task_id": 210, "completion_id": 0, "completion": "import functools\nfrom typing import Callable, Any\n\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"\n    Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    @functools.wraps(decorator_func)\n    def wrapper(*args, **kwargs):\n        # If the first argument is a callable and we have no other arguments,\n        # we're using the decorator without parentheses.\n        if len(args) == 1 and callable(args[0]) and not kwargs:\n            return decorator_func(args[0])\n        else:\n            # Otherwise, we return a real decorator that will accept the function.\n            @functools.wraps(decorator_func)\n            def real_decorator(func):\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n\n    return wrapper"}
{"task_id": 211, "completion_id": 0, "completion": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Check if inputs are valid: they must have the same non-zero length.\n    if len(actual) == 0 or len(predicted) == 0 or len(actual) != len(predicted):\n        return -1\n\n    # Helper function to compute the classification error.\n    def classification_error(a, p):\n        mismatches = sum(x != y for x, y in zip(a, p))\n        return mismatches / len(a)\n\n    # Compute accuracy = 1 - classification_error.\n    error = classification_error(actual, predicted)\n    acc = 1.0 - error\n\n    # Return rounded to 4 decimal places.\n    return round(acc, 4)"}
{"task_id": 212, "completion_id": 0, "completion": "from collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"\n    Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named \"input\" and ending at the layer named\n    \"output_realtime\". If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned. When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    start, end = \"input\", \"output_realtime\"\n\n    # Quick checks\n    if start not in graph or end not in graph:\n        return []\n\n    # Sort neighbors so that BFS expands nodes in lexicographic order\n    for node in graph:\n        graph[node].sort()\n\n    queue = deque([start])\n    visited = {start}\n    parent = {start: None}\n\n    # Standard BFS for shortest path,\n    # with neighbors visited in lexicographic order to break ties.\n    while queue:\n        current = queue.popleft()\n\n        if current == end:\n            # We've reached output_realtime, can reconstruct path\n            break\n\n        for neighbor in graph.get(current, []):\n            if neighbor not in visited:\n                visited.add(neighbor)\n                parent[neighbor] = current\n                queue.append(neighbor)\n\n    # If end was never reached, return empty list\n    if end not in parent:\n        return []\n\n    # Reconstruct path from end back to start\n    path = []\n    node = end\n    while node is not None:\n        path.append(node)\n        node = parent[node]\n\n    return path[::-1]  # Reverse to get path from input to output_realtime"}
{"task_id": 213, "completion_id": 0, "completion": "import numpy as np\n\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with the He Normal (Kaiming Normal) strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n        If fan_in is zero (e.g., any dimension of `shape` is zero), returns an empty list.\n    \"\"\"\n\n    # Handle trivial case: if any dimension is zero, fan_in would be zero\n    if not shape or any(dim == 0 for dim in shape):\n        return []\n\n    # Compute fan_in, fan_out according to the rules\n    if len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in, fan_out = shape[0], shape[1]\n    else:\n        # len(shape) >= 3\n        out_channels, in_channels = shape[0], shape[1]\n        # Compute the product of dimensions from shape[2:] (the \"receptive field\" size)\n        receptive_field_size = 1\n        for dim in shape[2:]:\n            receptive_field_size *= dim\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    # If fan_in is zero (shouldn't happen unless shape has a zero dimension), return empty list\n    if fan_in == 0:\n        return []\n\n    # Set seed for reproducibility\n    np.random.seed(42)\n\n    # Draw samples from Normal(0, sqrt(2 / fan_in))\n    std = np.sqrt(2 / fan_in)\n    weights = np.random.normal(loc=0.0, scale=std, size=shape)\n\n    return weights.tolist()"}
{"task_id": 214, "completion_id": 0, "completion": "import numpy as np\n\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays (in case they are lists)\n    actual_arr = np.array(actual, dtype=float)\n    predicted_arr = np.array(predicted, dtype=float)\n\n    # Check if both sequences have the same shape\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n\n    # Calculate MSE\n    mse = np.mean((actual_arr - predicted_arr) ** 2)\n\n    # Round to 4 decimal places and return\n    return float(np.round(mse, 4))"}
{"task_id": 216, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # -------------------------------------------------------------------------\n    # Helper function: polynomial feature expansion (no cross-terms), i.e.\n    # for each feature x_j, generate x_j^1, x_j^2, ..., x_j^degree.\n    # -------------------------------------------------------------------------\n    def polynomial_expansion(X, degree):\n        # X is NxM\n        # Output shape will be Nx(M * degree)\n        N, M = X.shape\n        X_poly = []\n        for i in range(N):\n            row_poly = []\n            for m in range(M):\n                # Generate powers for X[i, m]\n                for p in range(1, degree+1):\n                    row_poly.append(X[i, m] ** p)\n            X_poly.append(row_poly)\n        return np.array(X_poly, dtype=float)\n\n    # -------------------------------------------------------------------------\n    # Convert inputs to numpy arrays if they are lists, and check shapes.\n    # -------------------------------------------------------------------------\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float).flatten()\n    x_test  = np.array(x_test, dtype=float)\n    \n    # Basic checks on shapes and n_iterations\n    if n_iterations < 1:\n        return -1\n    if x_train.ndim != 2 or x_test.ndim != 2:\n        return -1\n    if y_train.ndim != 1:\n        return -1\n    # x_train is NxM, x_test is KxM; check M match\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # -------------------------------------------------------------------------\n    # 1) Polynomial expansion\n    # -------------------------------------------------------------------------\n    if degree < 1:\n        return -1\n    X_train_poly = polynomial_expansion(x_train, degree)\n    X_test_poly  = polynomial_expansion(x_test,  degree)\n    \n    # -------------------------------------------------------------------------\n    # 2) Standard-score (zero-mean, unit-variance) every feature (after poly),\n    #    ignoring the bias which we'll add later.\n    # -------------------------------------------------------------------------\n    train_mean = X_train_poly.mean(axis=0)\n    train_std  = X_train_poly.std(axis=0)\n    # To avoid division by zero, replace zeros in std with 1.0\n    train_std[train_std == 0] = 1.0\n    \n    X_train_std = (X_train_poly - train_mean) / train_std\n    X_test_std  = (X_test_poly  - train_mean) / train_std\n    \n    # -------------------------------------------------------------------------\n    # 3) Build the final design matrices (add a column of 1's for bias).\n    # -------------------------------------------------------------------------\n    N_train = X_train_std.shape[0]\n    N_test  = X_test_std.shape[0]\n    \n    # Add bias column (ones)\n    X_train_final = np.hstack([np.ones((N_train, 1)), X_train_std])\n    X_test_final  = np.hstack([np.ones((N_test, 1)),  X_test_std])\n    \n    # Targets\n    y_train = y_train.reshape(-1)  # ensure shape (N,)\n    \n    # -------------------------------------------------------------------------\n    # 4) Train the model for exactly n_iterations usingbatch gradient descent\n    #    MSE + Elastic Net penalty: alpha * [(1-l1_ratio)/2 * L2 + l1_ratio * L1]\n    # -------------------------------------------------------------------------\n    # Initialize weights (w) to zeros\n    n_features = X_train_final.shape[1]  # includes bias\n    w = np.zeros(n_features)\n    \n    # Precompute factor for the MSE gradient\n    N_float = float(N_train)\n    \n    for _ in range(n_iterations):\n        # Predictions\n        y_pred = X_train_final.dot(w)\n        errors = y_pred - y_train\n        \n        # Gradient from MSE part: d/d w_j of (1/N * sum of squares) => (2/N) * X^T * errors\n        # We'll compute the whole MSE gradient first, then add reg terms for j>0 (no bias)\n        mse_grad = (2.0 / N_float) * (X_train_final.T.dot(errors))\n        \n        # Add regularization terms for j >= 1 only (ignore bias at j=0)\n        for j in range(1, n_features):\n            # L2 part (Ridge)\n            mse_grad[j] += reg_factor * (1.0 - l1_ratio) * w[j]\n            # L1 part (Lasso), subgradient sign(w[j]) with sign(0)=0\n            mse_grad[j] += reg_factor * l1_ratio * np.sign(w[j])\n        \n        # Gradient update\n        w -= learning_rate * mse_grad\n    \n    # -------------------------------------------------------------------------\n    # 5) Predict on x_test set\n    # -------------------------------------------------------------------------\n    y_test_pred = X_test_final.dot(w)\n    \n    # -------------------------------------------------------------------------\n    # Round to 4 decimal places and return as python list\n    # -------------------------------------------------------------------------\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.asarray(actual, dtype=float)\n    predicted = np.asarray(predicted, dtype=float)\n    \n    # Compute the probability (sigmoid) for each prediction\n    prob = 1.0 / (1.0 + np.exp(-predicted))\n    \n    # Compute the gradient: grad_i = actual_i * sigmoid(-actual_i * predicted_i)\n    grad = actual * (1.0 / (1.0 + np.exp(actual * predicted)))\n    \n    # Compute the Hessian: hess_i = prob_i * (1 - prob_i)\n    hess = prob * (1.0 - prob)\n    \n    # Round all values to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    \n    # Convert back to plain Python lists\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "completion": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def best_score(hand: list[int]) -> int:\n        \"\"\"Return the best blackjack score for a hand, counting at most one Ace as 11 if beneficial.\"\"\"\n        total = sum(hand)\n        # Count one Ace as 11 instead of 1 if it doesn't cause a bust\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Return True if the hand is exactly two cards: one Ace and one Ten-value card.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_score = best_score(player)\n    dealer_score = best_score(dealer)\n\n    # 1. Player bust\n    if player_score > 21:\n        return -1.0\n\n    # 2. Dealer bust (player did not bust)\n    if dealer_score > 21:\n        return 1.0\n\n    # 3. Compare scores\n    if player_score > dealer_score:\n        # 4. Check if player has a natural blackjack\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 220, "completion_id": 0, "completion": "import numpy as np\n\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"\n    Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    # If C_wt is empty, return an empty list for phi\n    if C_wt is None or C_wt.size == 0:\n        phi = []\n    else:\n        # V words, T topics\n        V, T = C_wt.shape\n\n        # Sum over words for each topic -> shape (T,)\n        wt_sums = np.sum(C_wt, axis=0)\n\n        # Compute phi with Dirichlet smoothing\n        # phi[v, t] = (C_wt[v, t] + beta) / (wt_sums[t] + V * beta)\n        # Using broadcasting\n        denominators = wt_sums + V * beta  # shape: (T,)\n        phi_array = (C_wt + beta) / denominators  # shape: (V, T)\n\n        # Round and convert to nested lists\n        phi = np.round(phi_array, 4).tolist()\n\n    # If C_dt is empty, return an empty list for theta\n    if C_dt is None or C_dt.size == 0:\n        theta = []\n    else:\n        # D documents, T topics\n        D, T2 = C_dt.shape\n\n        # Sum over topics for each document -> shape (D,)\n        dt_sums = np.sum(C_dt, axis=1)\n\n        # Compute theta with Dirichlet smoothing\n        # theta[d, t] = (C_dt[d, t] + alpha) / (dt_sums[d] + T * alpha)\n        denominators = dt_sums + T2 * alpha  # shape: (D,)\n        theta_array = (C_dt + alpha) / denominators[:, None]  # shape: (D, T)\n\n        # Round and convert to nested lists\n        theta = np.round(theta_array, 4).tolist()\n\n    return phi, theta"}
{"task_id": 221, "completion_id": 0, "completion": "import numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors using NumPy arrays.\n\n    This function assumes valid inputs (same shape and non-negative).\n    \"\"\"\n    arr_actual = np.asarray(actual)\n    arr_pred = np.asarray(predicted)\n    # Use log1p(x) which is equivalent to log(1 + x)\n    return np.square(np.log1p(arr_actual) - np.log1p(arr_pred))\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE, rounded to 4 decimals.  If the inputs are invalid, returns -1.\n    \"\"\"\n    # Convert to NumPy arrays\n    arr_actual = np.asarray(actual)\n    arr_pred = np.asarray(predicted)\n\n    # 1) Check if shapes match\n    if arr_actual.shape != arr_pred.shape:\n        return -1\n\n    # 2) Check for non-negativity\n    if np.any(arr_actual < 0) or np.any(arr_pred < 0):\n        return -1\n\n    # Calculate element-wise squared log errors\n    errors = squared_log_error(arr_actual, arr_pred)\n\n    # Compute mean\n    msle_value = np.mean(errors)\n\n    # Return rounded to 4 decimals\n    return float(round(msle_value, 4))"}
{"task_id": 222, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same nested structure.\n    \"\"\"\n    \n    # Helper function to compute sigmoid for a single (scalar) value in a numerically stable way:\n    def _sigmoid_scalar(x):\n        if x >= 0:\n            return 1.0 / (1.0 + np.exp(-x))\n        else:\n            # Equivalent to: 1 - 1/(1 + exp(x))\n            return np.exp(x) / (1.0 + np.exp(x))\n    \n    # Check if the input is a scalar\n    if np.isscalar(z):\n        # Directly compute numerically stable sigmoid for a single value\n        return round(_sigmoid_scalar(float(z)), 4)\n    else:\n        # Convert to NumPy array (float type), compute piecewise\n        arr = np.array(z, dtype=float)\n        \n        # Allocate result array\n        res = np.empty_like(arr, dtype=float)\n        \n        # Masks for positive and negative entries\n        pos_mask = arr >= 0\n        neg_mask = ~pos_mask\n        \n        # For z >= 0\n        res[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n        \n        # For z < 0\n        # = exp(z) / (1 + exp(z)), more stable for large negative values\n        exp_z = np.exp(arr[neg_mask])\n        res[neg_mask] = exp_z / (1.0 + exp_z)\n        \n        # Round element-wise to 4 decimals and return as Python list\n        return np.round(res, 4).tolist()"}
{"task_id": 224, "completion_id": 0, "completion": "import numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to a numpy array (handles scalars, lists, ndarrays uniformly)\n    arr = np.asarray(z, dtype=float)\n    \n    # Apply Leaky ReLU: x if x >= 0 else a*x\n    arr = np.where(arr >= 0, arr, a*arr)\n    \n    # Convert back to a Python list with the same nested structure\n    return arr.tolist()"}
{"task_id": 225, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hz2mel(hz, formula: str = \"htk\") -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as `hz`, rounded to four\n        decimal places.\n    \"\"\"\n    # Ensure `formula` is valid\n    assert formula in [\"htk\", \"slaney\"], \"Supported formulas are 'htk' or 'slaney'.\"\n\n    # Convert input to a NumPy array for vectorized operations\n    hz_array = np.asarray(hz, dtype=float)\n\n    # Apply the selected mel conversion formula\n    if formula == \"htk\":\n        mel_array = 2595.0 * np.log10(1.0 + hz_array / 700.0)\n    else:  # \"slaney\"\n        mel_array = 1127.0 * np.log(1.0 + hz_array / 700.0)\n\n    # Round to 4 decimal places\n    mel_array = np.round(mel_array, 4)\n\n    # Convert NumPy array back to Python list, preserving shape\n    return mel_array.tolist()\n```"}
{"task_id": 226, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element is either -1 or 1\n        indicating the predicted class label.\n    \"\"\"\n    # Make sure y_train is a column vector of 1D\n    y_train = y_train.flatten()\n    n_samples, n_features = X_train.shape\n\n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples)\n\n    # This list will hold (feature_index, threshold, polarity, alpha) for each stump\n    stumps = []\n\n    # For each iteration of boosting...\n    for _ in range(n_clf):\n        # We will search for the best stump (lowest error)\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = 1\n        min_error = float('inf')\n\n        # Loop over all features\n        for feature_idx in range(n_features):\n            feature_vals = X_train[:, feature_idx]\n            # Possible thresholds can be the (unique) values in feature_vals\n            # but let's also consider midpoints between distinct sorted values\n            # for better separation. Here, we'll just use the unique values for simplicity.\n            unique_vals = np.unique(feature_vals)\n\n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    # Predict using this stump\n                    # polarity = 1 => below threshold => -1, else +1\n                    # polarity = -1 => below threshold => +1, else -1\n                    preds = np.ones(n_samples)  # default +1\n                    if polarity == 1:\n                        preds[feature_vals < threshold] = -1\n                    else:\n                        preds[feature_vals < threshold] = 1\n\n                    # Compute weighted error\n                    mismatch = (preds != y_train).astype(float)\n                    error = np.sum(w * mismatch)\n\n                    # Save the best (lowest) error stump parameters\n                    if error < min_error:\n                        min_error = error\n                        best_feature_index = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Compute the alpha (learner weight)\n        # tiny constant to avoid division by zero\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n\n        # Store the stump parameters\n        stumps.append((best_feature_index, best_threshold, best_polarity, alpha))\n\n        # Update sample weights\n        # Recompute predictions with the chosen stump\n        feature_vals = X_train[:, best_feature_index]\n        stump_preds = np.ones(n_samples)\n        if best_polarity == 1:\n            stump_preds[feature_vals < best_threshold] = -1\n        else:\n            stump_preds[feature_vals < best_threshold] = 1\n\n        # multiply w by exp(-alpha y_i h_i(x_i)), then normalize\n        w *= np.exp(-alpha * y_train * stump_preds)\n        w /= np.sum(w)\n\n    # Now predict on X_test\n    y_pred = []\n    for x in X_test:\n        # For each test sample, sum alpha * h_i(x) across all stumps\n        stump_sum = 0.0\n        for (feature_idx, threshold, polarity, alpha) in stumps:\n            # Single stump prediction for x\n            val = x[feature_idx]\n            stump_prediction = 1.0\n            if polarity == 1:\n                if val < threshold:\n                    stump_prediction = -1.0\n            else:\n                if val < threshold:\n                    stump_prediction = 1.0\n                else:\n                    stump_prediction = -1.0\n                    # Note: The else can be removed if strictly using sign logic,\n                    # but included for clarity. As is, it flips the label if val >= threshold.\n                    # However, be consistent with how you tested on the training set.\n\n            stump_sum += alpha * stump_prediction\n\n        # Take the sign of the sum (handle sign(0) as +1, or you can define otherwise)\n        # We'll define sign(0) = +1 for safety\n        label = 1 if stump_sum >= 0 else -1\n        y_pred.append(label)\n\n    return y_pred"}
{"task_id": 227, "completion_id": 0, "completion": "import numpy as np\n\ndef value_network_forward(state: list[float],\n                          W1: list[list[float]],\n                          W2: list[list[float]],\n                          W3: list[list[float]] | list[float]) -> float:\n    \"\"\"\n    Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    # Convert all inputs to NumPy arrays\n    st = np.array(state, dtype=float)\n    arrW1 = np.array(W1, dtype=float)\n    arrW2 = np.array(W2, dtype=float)\n    arrW3 = np.array(W3, dtype=float)\n\n    # 1) Check 'state' shape => (N,)\n    if st.ndim != 1:\n        return -1\n    N = st.shape[0]\n\n    # 2) Check W1 shape => (N, H1)\n    if arrW1.ndim != 2 or arrW1.shape[0] != N:\n        return -1\n    H1 = arrW1.shape[1]\n\n    # 3) Check W2 shape => (H1, H2)\n    if arrW2.ndim != 2 or arrW2.shape[0] != H1:\n        return -1\n    H2 = arrW2.shape[1]\n\n    # 4) Check W3 shape => (H2,) or (H2, 1)\n    if arrW3.ndim == 1:\n        # Must be (H2,)\n        if arrW3.shape[0] != H2:\n            return -1\n    elif arrW3.ndim == 2:\n        # Must be (H2, 1)\n        if arrW3.shape != (H2, 1):\n            return -1\n    else:\n        return -1\n\n    # Forward pass\n    # h1 = tanh(state \u22c5 W1)\n    h1 = np.tanh(st @ arrW1)  # shape (H1,)\n    # h2 = tanh(h1 \u22c5 W2)\n    h2 = np.tanh(h1 @ arrW2)  # shape (H2,)\n\n    # v = h2 \u22c5 W3\n    v = h2 @ arrW3           # shape () or (1,)\n\n    # If v is a 1-D array of length 1, extract the scalar\n    if isinstance(v, np.ndarray) and v.shape == (1,):\n        v = v.item()\n\n    # Round to 4 decimals\n    return float(round(v, 4))"}
{"task_id": 228, "completion_id": 0, "completion": "import numpy as np\n\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n\n    # Compute squared norms of each row in X and Y\n    # shape of sqX: (N,), shape of sqY: (M,)\n    sqX = np.sum(X ** 2, axis=1)\n    sqY = np.sum(Y ** 2, axis=1)\n\n    # Compute pairwise squared distances using the matrix identity:\n    # ||x - y||^2 = ||x||^2 + ||y||^2 - 2 x^T y\n    # shape of sq_distances: (N, M)\n    sq_distances = sqX[:, np.newaxis] + sqY[np.newaxis, :] - 2 * np.dot(X, Y.T)\n\n    # Numerical instabilities can lead to very small negative values, so clip at 0\n    sq_distances = np.maximum(sq_distances, 0.0)\n\n    # Take the square root to get Euclidean distances\n    distances = np.sqrt(sq_distances)\n\n    # Round to 4 decimal places and convert to plain Python nested list\n    return np.round(distances, 4).tolist()"}
{"task_id": 230, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Implement Gaussian Naive Bayes from scratch (binary classification: labels 0/1).\n\n    1. Compute class-specific means and variances for each feature.\n    2. Compute class priors as relative frequencies.\n    3. Compute log posteriors for each test sample and pick the class with larger value.\n    4. Return predicted labels (0/1) as a Python list.\n    \"\"\"\n\n    # Separate samples by class (0 and 1)\n    X_class0 = X_train[y_train == 0]\n    X_class1 = X_train[y_train == 1]\n\n    # Compute means\n    mu_0 = np.mean(X_class0, axis=0)\n    mu_1 = np.mean(X_class1, axis=0)\n\n    # Compute variances with small epsilon to avoid division by zero\n    epsilon = 1e-9\n    var_0 = np.var(X_class0, axis=0) + epsilon\n    var_1 = np.var(X_class1, axis=0) + epsilon\n\n    # Compute class priors\n    p_0 = len(X_class0) / len(X_train)\n    p_1 = len(X_class1) / len(X_train)\n\n    # Precompute log of priors\n    log_p0 = np.log(p_0)\n    log_p1 = np.log(p_1)\n\n    # Function to compute the log of the Gaussian pdf for all features in a sample x\n    def log_gaussian_pdf(x, mu, var):\n        # Univariate Gaussian log-likelihood:\n        # log( N(x|mu,var) ) = -0.5 * [log(2*pi*var) + ((x-mu)^2 / var)]\n        return -0.5 * np.log(2 * np.pi * var) - 0.5 * ((x - mu) ** 2 / var)\n\n    # Predict labels for test samples\n    predictions = []\n    for x in X_test:\n        # Sum of log-likelihoods for each feature\n        log_likelihood_0 = np.sum(log_gaussian_pdf(x, mu_0, var_0))\n        log_likelihood_1 = np.sum(log_gaussian_pdf(x, mu_1, var_1))\n\n        # Compute log posteriors\n        posterior_0 = log_p0 + log_likelihood_0\n        posterior_1 = log_p1 + log_likelihood_1\n\n        # Pick the class with the larger posterior\n        predictions.append(0 if posterior_0 > posterior_1 else 1)\n\n    # Return as a standard Python list\n    return predictions"}
{"task_id": 231, "completion_id": 0, "completion": "def is_natural(hand: list[int]) -> bool:\n    \"\"\"Return True if and only if 'hand' contains exactly two cards:\n    an Ace (1) and a ten-valued card (10). Order does not matter.\"\"\"\n    return len(hand) == 2 and sorted(hand) == [1, 10]"}
{"task_id": 232, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    # Rule 1: Must be two-dimensional\n    if x.ndim != 2:\n        return False\n    \n    # Rule 2: Every element must be 0 or 1\n    if not np.all((x == 0) | (x == 1)):\n        return False\n    \n    # Rule 3: Each row contains exactly one '1'\n    # (so the sum across each row must be 1)\n    if not np.all(x.sum(axis=1) == 1):\n        return False\n    \n    return True\n```"}
{"task_id": 234, "completion_id": 0, "completion": "import numpy as np\n\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures:  list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta:  float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # Check input validity\n    if len(successes) == 0 or len(failures) == 0 or len(successes) != len(failures):\n        return -1\n\n    # Set random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Sample payoff probabilities for each arm using the Beta posterior\n    samples = []\n    for i in range(len(successes)):\n        alpha_i = prior_alpha + successes[i]\n        beta_i = prior_beta + failures[i]\n        samples.append(np.random.beta(alpha_i, beta_i))\n\n    # Return the index of the arm with the largest sampled value\n    return int(np.argmax(samples))"}
{"task_id": 235, "completion_id": 0, "completion": "import numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    # Check that the input is 1-D\n    if labels.ndim != 1:\n        raise ValueError(\"Input labels must be a 1-D array.\")\n\n    # If there are no labels, handle separately\n    if labels.size == 0:\n        if n_classes is None:\n            # Return an empty array with 0 columns\n            return np.zeros((0, 0), dtype=float)\n        else:\n            # Return an empty array with n_classes columns\n            return np.zeros((0, n_classes), dtype=float)\n\n    # Determine the number of classes if not provided\n    max_label = labels.max()\n    if n_classes is None:\n        C = max_label + 1\n    else:\n        # Ensure n_classes is large enough\n        if n_classes < max_label + 1:\n            raise ValueError(\n                f\"n_classes={n_classes} is too small for max label={max_label}.\"\n            )\n        C = n_classes\n\n    # Create the one-hot encoded array\n    N = labels.shape[0]\n    one_hot_encoded = np.zeros((N, C), dtype=float)\n    one_hot_encoded[np.arange(N), labels] = 1.0\n\n    return one_hot_encoded"}
{"task_id": 236, "completion_id": 0, "completion": "import numpy as np\n\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    # Build array of indices; ensure int64 type\n    indices = np.arange(N, dtype=np.int64)\n\n    if shuffle:\n        np.random.shuffle(indices)  # in-place shuffling\n\n    n_batches = int(np.ceil(N / batchsize))\n\n    def mb_generator():\n        # This generator is single-pass: once exhausted, it cannot be reused.\n        for start in range(0, N, batchsize):\n            yield indices[start : start + batchsize]\n\n    return mb_generator(), n_batches"}
{"task_id": 237, "completion_id": 0, "completion": "from typing import List\n\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    total = 0\n    aces = 0\n    \n    # First pass: treat aces as 1, and add everything up\n    for card in hand:\n        if card in {'J', 'Q', 'K'}:\n            total += 10\n        elif card == 'A':\n            aces += 1\n            total += 1  # Count A initially as 1\n        else:  # Numeric card\n            total += int(card)\n\n    # Now try to upgrade as many aces from 1 to 11 as possible without busting\n    for _ in range(aces):\n        if total + 10 <= 21:\n            total += 10\n        else:\n            break\n    \n    return total if total <= 21 else 0"}
{"task_id": 239, "completion_id": 0, "completion": "```python\nimport math\n\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str = \"same\") -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == \"valid\":\n        # No padding\n        return ((0, 0), (0, 0))\n    elif output_shape == \"same\":\n        f_h, f_w = filter_shape\n\n        # For 'same' padding with stride=1:\n        # pad_top = floor((f_h - 1) / 2)\n        # pad_bottom = ceil((f_h - 1) / 2)\n        # pad_left = floor((f_w - 1) / 2)\n        # pad_right = ceil((f_w - 1) / 2)\n        pad_top = (f_h - 1) // 2\n        pad_bottom = (f_h - 1) - pad_top\n\n        pad_left = (f_w - 1) // 2\n        pad_right = (f_w - 1) - pad_left\n\n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n\n    # The function does not handle other output_shape values by specification.\n    raise ValueError(\"Unsupported output_shape. Use 'same' or 'valid'.\")\n```\n"}
{"task_id": 240, "completion_id": 0, "completion": "import numpy as np\n\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    # If an explicit encoder is given, use it; otherwise, enumerate.\n    if obs_encoder is not None:\n        obs2num = obs_encoder\n    else:\n        obs2num = {obs: i for i, obs in enumerate(obs_ids)}\n\n    # Build the inverse dictionary for observations.\n    num2obs = {v: k for k, v in obs2num.items()}\n\n    # For actions, do the same.\n    if act_encoder is not None:\n        act2num = act_encoder\n    else:\n        act2num = {act: i for i, act in enumerate(action_ids)}\n\n    # Build the inverse dictionary for actions.\n    num2act = {v: k for k, v in act2num.items()}\n\n    return {\n        'obs2num': obs2num,\n        'num2obs': num2obs,\n        'act2num': act2num,\n        'num2act': num2act\n    }"}
{"task_id": 241, "completion_id": 0, "completion": "import numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    # 1) Shape must have at least two dimensions\n    if len(shape) < 2:\n        return -1\n\n    d0 = shape[0]\n    # Product of remaining dimensions\n    rest = 1\n    for s in shape[1:]:\n        rest *= s\n\n    # 2) Create a matrix A of shape (d0, rest) with i.i.d. standard normal samples\n    A = np.random.randn(d0, rest)\n\n    # 3) Compute \"economy\" SVD (full_matrices=False ensures the shapes we need)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # 4) Choose the factor that matches A's shape\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # 5) Reshape Q back to the requested shape and multiply by scale\n    Q_reshaped = Q.reshape(shape)\n    result = (scale * Q_reshaped).tolist()\n\n    return result"}
{"task_id": 242, "completion_id": 0, "completion": "import math\n\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # Check if there's an arm that has never been pulled\n    for i, count in enumerate(pull_counts):\n        if count == 0:\n            return i\n\n    # If all arms have been pulled at least once, compute UCB1 scores\n    T = current_step + 1\n    scores = []\n    for i, ev in enumerate(ev_estimates):\n        score = ev + C * math.sqrt(2 * math.log(T) / pull_counts[i])\n        scores.append(score)\n\n    # Return the arm with the highest score (ties broken by smallest index)\n    return max(range(len(scores)), key=lambda i: scores[i])"}
{"task_id": 243, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Because all weights = 1 and all biases = 0, the outputs can be computed as follows:\n        1) z1 = ReLU(s\u2080 + s\u2081 + s\u2082)\n        2) z2 = 4 * z1\n        3) z3 = 4 * z2 = 16 * z1\n        4) logits = 4 * z3 = 64 * z1  (identical for each of the 3 actions)\n        5) action_probs = Softmax(logits) = [1/3, 1/3, 1/3] \n           (all identical logits give equal probabilities)\n        6) state_value = 4 * z3 = 64 * z1\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s_sum = sum(state)\n    z1 = max(0, s_sum)      # ReLU(s0 + s1 + s2)\n    # Since all three logits are identical, each action probability = 1/3\n    action_probs = [1/3, 1/3, 1/3]\n    # State value is 64 * z1\n    state_value = 64 * z1\n\n    # Round results to 4 decimals\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n\n    return action_probs, state_value"}
{"task_id": 244, "completion_id": 0, "completion": "import numpy as np\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Validate shape\n    if not isinstance(shape, tuple) or len(shape) == 0:\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n\n    # Validate sparsity\n    if not isinstance(sparsity, (float, int)) or sparsity < 0 or sparsity > 1:\n        return -1\n\n    # Generate random tensor\n    random_tensor = np.random.rand(*shape)\n\n    # Apply threshold for binary conversion\n    threshold = 1.0 - sparsity\n    binary_tensor = np.where(random_tensor >= threshold, 1.0, 0.0)\n\n    # Convert to nested list\n    return binary_tensor.tolist()"}
{"task_id": 247, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n\n    # 1) Check that payoff_dists and payoff_probs have the same non-zero length\n    if len(payoff_dists) == 0 or len(payoff_probs) == 0 or len(payoff_dists) != len(payoff_probs):\n        return -1\n\n    # 2) Check that each variance in payoff_dists is strictly positive\n    #    and each probability in payoff_probs is in the interval [0,1]\n    for (mu, sigma_sq), p in zip(payoff_dists, payoff_probs):\n        if sigma_sq <= 0 or not (0 <= p <= 1):\n            return -1\n\n    # 3) Compute expected rewards: E[R_k] = p_k * mu_k for each arm\n    expected_rewards = np.array([p * mu for (mu, _), p in zip(payoff_dists, payoff_probs)], dtype=float)\n\n    # 4) Identify the arm with the highest expected reward (smallest index on tie)\n    best_arm = int(np.argmax(expected_rewards))  # np.argmax returns the first occurrence of the max\n    best_ev = expected_rewards[best_arm]\n\n    # 5) Round the best_ev to 4 decimal places\n    best_ev_rounded = round(best_ev, 4)\n\n    return (best_ev_rounded, best_arm)"}
{"task_id": 248, "completion_id": 0, "completion": "import numpy as np\n\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    # If X_test has zero rows, return an empty list\n    if X_test.shape[0] == 0:\n        return []\n    \n    # 1. Compute the fraction of positive labels in y_train\n    p = np.mean(y_train)  # This is (number of ones) / (length of y_train)\n    \n    # 2. Create an array of length X_test.shape[0] filled with p\n    predictions = np.full(X_test.shape[0], p)\n    \n    # 3. Round every probability to four decimal places\n    predictions = np.round(predictions, 4)\n    \n    # 4. Return the predictions as a Python list\n    return predictions.tolist()"}
{"task_id": 249, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"\n    Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is:\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n          \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n          \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list of floats representing the current environment state.\n        params: Dictionary with the following keys (each entry is a Python list\n                that describes a NumPy-compatible array):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 the three shared layers\n                 'Wa', 'ba'                        \u2013 actor head\n                 'Wc', 'bc'                        \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n\n    Note:\n        All values (probabilities and critic value) are rounded to four\n        decimal places. If a rounded result is exactly 0 or 1, it is returned\n        with a single decimal place (e.g. 0.0, 1.0).\n    \"\"\"\n\n    # Helper function: Rectified Linear Unit\n    def relu(x: np.ndarray) -> np.ndarray:\n        return np.maximum(0, x)\n\n    # Helper function for rounding according to the specification\n    def custom_round(x: float) -> float:\n        r = round(x, 4)\n        # If the rounded result is exactly 0 or 1, keep single decimal place\n        if r == 0.0:\n            return 0.0\n        elif r == 1.0:\n            return 1.0\n        else:\n            return r\n\n    # Convert the input state to a NumPy array of shape (hidden_dim,)\n    x = np.array(state, dtype=np.float64)\n\n    # Convert all parameter lists to NumPy arrays\n    W1 = np.array(params['W1'], dtype=np.float64)\n    b1 = np.array(params['b1'], dtype=np.float64)\n    W2 = np.array(params['W2'], dtype=np.float64)\n    b2 = np.array(params['b2'], dtype=np.float64)\n    W3 = np.array(params['W3'], dtype=np.float64)\n    b3 = np.array(params['b3'], dtype=np.float64)\n    Wa = np.array(params['Wa'], dtype=np.float64)\n    ba = np.array(params['ba'], dtype=np.float64)\n    Wc = np.array(params['Wc'], dtype=np.float64)\n    bc = np.array(params['bc'], dtype=np.float64)\n\n    # ----- Shared layers -----\n    # 1. Dense \u2192 ReLU\n    h1 = relu(x @ W1 + b1)\n    # 2. Dense \u2192 ReLU\n    h2 = relu(h1 @ W2 + b2)\n    # 3. Dense \u2192 ReLU\n    h3 = relu(h2 @ W3 + b3)\n\n    # ----- Actor head -----\n    # a) Dense\n    actor_scores = h3 @ Wa + ba\n    # b) soft-max\n    #   (subtract max for numerical stability, though optional in pure numpy)\n    shifted_scores = actor_scores - np.max(actor_scores)\n    exp_scores = np.exp(shifted_scores)\n    probs = exp_scores / np.sum(exp_scores)\n\n    # ----- Critic head -----\n    critic_value = float(h3 @ Wc + bc)\n\n    # ----- Rounding -----\n    rounded_probs = [custom_round(p) for p in probs]\n    rounded_value = custom_round(critic_value)\n\n    return (rounded_probs, rounded_value)"}
{"task_id": 251, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid, rounded to 4 decimals.\"\"\"\n    if np.isscalar(x):\n        val = 1.0 / (1.0 + np.exp(-x))\n        return float(np.round(val, 4))\n    arr = np.array(x, dtype=float)\n    val = 1.0 / (1.0 + np.exp(-arr))\n    return np.round(val, 4)\n\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent, rounded to 4 decimals.\"\"\"\n    if np.isscalar(x):\n        val = np.tanh(x)\n        return float(np.round(val, 4))\n    arr = np.array(x, dtype=float)\n    val = np.tanh(arr)\n    return np.round(val, 4)\n\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit, rounded to 4 decimals.\"\"\"\n    if np.isscalar(x):\n        val = x if x > 0 else 0\n        return float(np.round(val, 4))\n    arr = np.array(x, dtype=float)\n    val = np.maximum(arr, 0)\n    return np.round(val, 4)\n\ndef leaky_relu(x, alpha: float = 0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope alpha for x<0, rounded to 4 decimals.\"\"\"\n    if np.isscalar(x):\n        val = x if x >= 0 else alpha * x\n        return float(np.round(val, 4))\n    arr = np.array(x, dtype=float)\n    val = np.where(arr >= 0, arr, alpha * arr)\n    return np.round(val, 4)\n\ndef softmax(x):\n    \"\"\"Numerically stable softmax over a 1-D input, rounded to 4 decimals.\"\"\"\n    if np.isscalar(x):\n        # Softmax of a single value is always 1.0\n        return float(np.round(1.0, 4))\n    arr = np.array(x, dtype=float)\n    shifted = arr - np.max(arr)  # for numerical stability\n    exp_vals = np.exp(shifted)\n    sums = np.sum(exp_vals)\n    val = exp_vals / sums\n    return np.round(val, 4)\n\ndef get_activation(name):\n    \"\"\"\n    Return the activation function by name.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If name is not recognised.\n    \"\"\"\n    if name == \"sigmoid\":\n        return sigmoid\n    elif name == \"tanh\":\n        return tanh\n    elif name == \"relu\":\n        return relu\n    elif name == \"leaky_relu\":\n        return leaky_relu\n    elif name == \"softmax\":\n        return softmax\n    else:\n        raise ValueError('Invalid activation function.')"}
{"task_id": 252, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad = (actual - predicted).tolist()\n    hess = np.ones_like(actual).tolist()\n    return grad, hess\n```"}
{"task_id": 253, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if 'gradient' is False; list[float] if 'gradient' is True.\n    \"\"\"\n    w = np.asarray(w, dtype=float)\n    \n    if gradient:\n        # Gradient: alpha * [lambda * sign(w) + (1 - lambda) * w]\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]\n    else:\n        # Penalty: alpha * [lambda * ||w||_1 + (1 - lambda) * 0.5 * ||w||_2^2]\n        penalty = alpha * (l1_ratio * np.sum(np.abs(w)) + \n                           (1 - l1_ratio) * 0.5 * np.sum(w**2))\n        return round(penalty, 4)"}
{"task_id": 255, "completion_id": 0, "completion": "def usable_ace(hand: list[int]) -> bool:\n    \"\"\"\n    Determine whether a Blackjack hand has a usable ace.\n\n    A 'usable ace' is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    # Count how many aces in the hand\n    ace_count = hand.count(1)\n\n    # Compute the sum of the hand treating all aces as value 1\n    total_with_aces_as_one = sum(hand)\n\n    # Check if any ace can be treated as 11 (i.e., add an extra 10 to total)\n    # without exceeding 21\n    if ace_count > 0 and (total_with_aces_as_one + 10) <= 21:\n        return True\n    return False"}
{"task_id": 256, "completion_id": 0, "completion": "import numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"\n    Numerically estimate the gradient of an RNN parameter using centred\n    finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                      method (single time-step) and a ``flush_gradients``\n                      method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                      loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                      be redirected to the lower-case keys.  If the name is\n                      \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # If the parameter is non-trainable, return None\n    if param_name in (\"X\", \"y\"):\n        return None\n\n    # Redirect \"Ba\" -> \"ba\" and \"Bx\" -> \"bx\"\n    if param_name in (\"Ba\", \"Bx\"):\n        param_name = param_name.lower()\n\n    # Retrieve the parameter array; if not present, nothing to do\n    if param_name not in model.parameters:\n        return None\n\n    param = model.parameters[param_name]\n    # Ensure double precision (float64) to reduce numerical artifacts\n    if param.dtype != np.float64:\n        model.parameters[param_name] = param.astype(np.float64)\n        param = model.parameters[param_name]\n\n    # Prepare array for numerical gradient\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Helper function to run the forward pass n_t times and compute loss\n    def compute_loss():\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t].astype(np.float64)))\n        return loss_func(preds)\n\n    # Iterate over every element of the parameter\n    it = np.ndindex(param.shape)\n    for idx in it:\n        old_val = param[idx]\n\n        # +epsilon\n        param[idx] = old_val + epsilon\n        L_plus = compute_loss()\n\n        # -epsilon\n        param[idx] = old_val - epsilon\n        L_minus = compute_loss()\n\n        # Restore original value\n        param[idx] = old_val\n\n        # Numerical gradient approximation\n        grads[idx] = (L_plus - L_minus) / (2.0 * epsilon)\n\n    # Return the transpose of the gradient array (standard .T reorders axes)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Safety check for n_clf\n    # -------------------------------------------------------------------------\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    \n    # -------------------------------------------------------------------------\n    # Initialize sample weights (D_1) uniformly\n    # -------------------------------------------------------------------------\n    D = np.ones(m) / m\n\n    # -------------------------------------------------------------------------\n    # A helper function to compute the predictions of a stump on a dataset\n    # stump format: (feature_index, threshold, polarity)\n    # polarity = 1 means \"predict +1 if x >= threshold, else -1\"\n    # polarity = -1 means \"predict -1 if x >= threshold, else +1\"\n    # -------------------------------------------------------------------------\n    def stump_predict(X_column, feature_idx, threshold, polarity):\n        # Allocate predictions\n        preds = np.ones(len(X_column), dtype=int)\n        if polarity == 1:\n            # if x < threshold, predict -1\n            preds[X_column < threshold] = -1\n        else:\n            # if x < threshold, predict +1, else -1\n            preds[X_column >= threshold] = -1\n        return preds\n\n    # -------------------------------------------------------------------------\n    # Function to find the best decision stump given current sample weights\n    # -------------------------------------------------------------------------\n    def build_stump(X, y, D):\n        \"\"\"\n        Returns the tuple (best_feature, best_threshold, best_polarity, min_error)\n        that yields the smallest weighted error.\n        \"\"\"\n        m, n = X.shape\n        best_feature = 0\n        best_threshold = 0.0\n        best_polarity = 1\n        min_error = float('inf')\n\n        for feature_idx in range(n):\n            X_col = X[:, feature_idx]\n\n            # Sort unique values to consider thresholds between them\n            unique_vals = np.unique(X_col)\n            # If there's only one unique value, consider that as a single threshold candidate\n            if len(unique_vals) == 1:\n                thresholds = unique_vals\n            else:\n                # mid-points between consecutive sorted unique values\n                thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2.0\n            \n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    y_pred = stump_predict(X_col, feature_idx, threshold, polarity)\n                    # Weighted error\n                    misclassified = (y_pred != y).astype(float)\n                    error = np.sum(D * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        return best_feature, best_threshold, best_polarity, min_error\n\n    # -------------------------------------------------------------------------\n    # Store each stump as a dictionary: {\"feature\", \"threshold\", \"polarity\", \"alpha\"}\n    # -------------------------------------------------------------------------\n    stumps = []\n\n    for _ in range(n_clf):\n        # 1) Find the best stump w.r.t current D\n        feat, thr, pol, err = build_stump(X_train, y_train, D)\n        # Avoid numerical errors in log(0)\n        err = max(err, 1e-10)\n        err = min(err, 1 - 1e-10)\n\n        # 2) Compute alpha\n        alpha = 0.5 * np.log((1 - err) / err)\n\n        # 3) Update D\n        # Make predictions with the chosen stump\n        predictions = np.ones(m, dtype=int)\n        if pol == 1:\n            predictions[X_train[:, feat] < thr] = -1\n        else:\n            predictions[X_train[:, feat] >= thr] = -1\n\n        # weight update: D_i <- D_i * exp(- alpha * y_i h_i)\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)  # normalize\n\n        stumps.append({\n            \"feature\": feat,\n            \"threshold\": thr,\n            \"polarity\": pol,\n            \"alpha\": alpha\n        })\n\n    # -------------------------------------------------------------------------\n    # Predict on X_test\n    # For each sample: sum alpha_t * h_t(x), then take the sign\n    # -------------------------------------------------------------------------\n    def stump_predict_single(x, stump):\n        # x is a single sample\n        # Return +1 or -1\n        feat = stump[\"feature\"]\n        thr  = stump[\"threshold\"]\n        pol  = stump[\"polarity\"]\n        val  = x[feat]\n        if pol == 1:\n            return 1 if val >= thr else -1\n        else:\n            return -1 if val >= thr else 1\n\n    y_pred_list = []\n    for x in X_test:\n        # sum alpha_t * h_t(x)\n        total = 0.0\n        for stump in stumps:\n            total += stump[\"alpha\"] * stump_predict_single(x, stump)\n        # sign of total => +1 or -1\n        label = 1 if total >= 0 else -1\n        y_pred_list.append(label)\n\n    return y_pred_list"}
{"task_id": 258, "completion_id": 0, "completion": "import numpy as np\n\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual_arr = np.array(actual, dtype=float)\n    predicted_arr = np.array(predicted, dtype=float)\n    \n    # Check if both arrays have the same length\n    if actual_arr.shape[0] != predicted_arr.shape[0]:\n        return -1\n    \n    # Compute the per-sample hinge losses\n    losses = np.maximum(0, 1 - actual_arr * predicted_arr)\n    \n    # Compute the mean of the per-sample hinge losses\n    mean_loss = np.mean(losses)\n    \n    # Return the mean loss rounded to four decimal places\n    return round(mean_loss, 4)"}
{"task_id": 259, "completion_id": 0, "completion": "import random\n\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  \n    If *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    random.seed(42)\n    return random.sample(memory, batch_size)"}
{"task_id": 260, "completion_id": 0, "completion": "from itertools import zip_longest\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation follows Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    if ints is None:\n        ints = []\n\n    # 1) Quantize each float: q_i = floor(f_i * numtilings)\n    q_values = [floor(f * numtilings) for f in floats]\n\n    # We'll store one index per tiling\n    tile_indices = []\n\n    # 2) Loop over each tiling\n    for t in range(numtilings):\n        coords = [t]  # (a) start coords with the tiling number\n        b = t         # for offsetting each float coordinate\n\n        for q_i, w_i in zip_longest(q_values, wrapwidths, fillvalue=None):\n            # (b) c = (q_i + (b % numtilings)) // numtilings\n            c = (q_i + (b % numtilings)) // numtilings\n\n            # Apply wrapping if w_i is a positive integer\n            if w_i is not None and w_i > 0:\n                c = c % w_i\n\n            coords.append(c)\n\n            # After updating each float coordinate, b += t*2\n            b += t * 2\n\n        # (c) Append all extra integer variables\n        coords.extend(ints)\n\n        # 3) Hash coords into [0, ihtORsize)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n\n        tile_indices.append(index)\n\n    # 4) Return the list of active tile indices\n    return tile_indices"}
{"task_id": 261, "completion_id": 0, "completion": "import numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Calculate fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        # for convolutional kernels: (out_channels, in_channels, k1, k2, \u2026)\n        receptive_field_size = np.prod(shape[2:])  # product of kernel dimensions\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Compute standard deviation for Gaussian\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Draw samples from normal(0, s)\n    return np.random.normal(loc=0.0, scale=s, size=shape).astype(float)"}
{"task_id": 263, "completion_id": 0, "completion": "import numpy as np\n\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    # Convert input x to a numpy array\n    a = np.array(x, dtype=float)\n\n    # Forward pass through each layer\n    for W, act in zip(weights, activations):\n        # Convert weight matrix to numpy array\n        W = np.array(W, dtype=float)\n\n        # 1) Prepend the bias term to activations\n        #    (insert 1 at the beginning of vector a)\n        a_aug = np.insert(a, 0, 1.0)\n\n        # 2) Compute pre-activation z\n        z = W.dot(a_aug)\n\n        # 3) Apply the activation function\n        if act == \"sigmoid\":\n            a = 1.0 / (1.0 + np.exp(-z))\n        elif act == \"relu\":\n            a = np.maximum(0, z)\n        else:  # \"linear\"\n            a = z\n\n    # Round final output\n    a_rounded = np.round(a, 4)\n\n    # If single output neuron, return scalar; otherwise return list\n    if a_rounded.size == 1:\n        return float(a_rounded[0])\n    else:\n        return a_rounded.tolist()"}
{"task_id": 265, "completion_id": 0, "completion": "def king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:        L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600:  L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700:  L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:        L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        val = -0.25 * x + 82.50372665317208\n    elif x <= 600:\n        val = 20.00372665317208\n    elif x <= 700:\n        val = -0.2 * x + 140.00372665317207\n    else:\n        val = 0.003726653172066108\n\n    return round(val, 4)"}
{"task_id": 266, "completion_id": 0, "completion": "from typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a lookup to know each vertex's index in V\n    index_map = {vertex: i for i, vertex in enumerate(V)}\n    \n    # Create a list of sets to temporarily hold neighbors (avoids duplicates)\n    adjacency_sets = [set() for _ in V]\n    \n    # Populate the adjacency sets (since the graph is undirected, add both ways)\n    for u, v in E:\n        adjacency_sets[index_map[u]].add(v)\n        adjacency_sets[index_map[v]].add(u)\n        \n    # Convert each set to a list, sorting by the order of appearance in V\n    G = [\n        sorted(neighbors, key=lambda x: index_map[x])\n        for neighbors in adjacency_sets\n    ]\n    \n    return G"}
{"task_id": 267, "completion_id": 0, "completion": "import numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample (not necessarily summing to 1).\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump with keys:\n            {\"feature_index\", \"threshold\", \"polarity\", \"weighted_error\"}.\n        The \"threshold\" and \"weighted_error\" are rounded to the nearest 4th decimal place.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": float('inf')\n    }\n\n    # Loop over all features\n    for j in range(n_features):\n        # Extract and sort the unique thresholds for the j-th feature\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        \n        # For each threshold candidate\n        for threshold in unique_values:\n            # Polarity = +1\n            # Predict +1 if x_{ij} < threshold, else -1\n            preds_p1 = np.where(feature_values < threshold, 1, -1)\n            errors_p1 = preds_p1 != y\n            weighted_err_p1 = np.sum(sample_weights[errors_p1])\n\n            # Check if it is the best so far\n            if weighted_err_p1 < best_stump[\"weighted_error\"]:\n                best_stump[\"feature_index\"] = j\n                best_stump[\"threshold\"] = threshold\n                best_stump[\"polarity\"] = 1\n                best_stump[\"weighted_error\"] = weighted_err_p1\n\n            # Polarity = -1\n            # Predict -1 if x_{ij} < threshold, else +1\n            preds_pneg = np.where(feature_values < threshold, -1, 1)\n            errors_pneg = preds_pneg != y\n            weighted_err_pneg = np.sum(sample_weights[errors_pneg])\n\n            # Check if it is the best so far\n            if weighted_err_pneg < best_stump[\"weighted_error\"]:\n                best_stump[\"feature_index\"] = j\n                best_stump[\"threshold\"] = threshold\n                best_stump[\"polarity\"] = -1\n                best_stump[\"weighted_error\"] = weighted_err_pneg\n\n    # Round the threshold and weighted_error to 4 decimals\n    best_stump[\"threshold\"]      = round(best_stump[\"threshold\"], 4)\n    best_stump[\"weighted_error\"] = round(best_stump[\"weighted_error\"], 4)\n\n    return best_stump"}
{"task_id": 268, "completion_id": 0, "completion": "import numpy as np\nfrom itertools import combinations, permutations\n\ndef random_unweighted_graph(n_vertices: int,\n                            edge_prob: float = 0.5,\n                            directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists. The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    # Special case: if there is only 1 vertex, return a 1x1 matrix with a 0.\n    if n_vertices == 1:\n        return [[0]]\n\n    # Initialize an n_vertices x n_vertices adjacency matrix with 0s.\n    adjacency_matrix = [[0] * n_vertices for _ in range(n_vertices)]\n\n    if directed:\n        # Directed graph: consider all ordered pairs (i, j) with i != j.\n        for i, j in permutations(range(n_vertices), 2):\n            if i != j:\n                if np.random.rand() <= edge_prob:\n                    adjacency_matrix[i][j] = 1\n    else:\n        # Undirected graph: consider all unordered pairs (i, j).\n        for i, j in combinations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                adjacency_matrix[i][j] = 1\n                adjacency_matrix[j][i] = 1\n\n    return adjacency_matrix"}
{"task_id": 269, "completion_id": 0, "completion": "def count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # First fully-connected layer: (in_features \u00d7 out_features) + out_features\n    first_layer_params = (state_dimensions * 164) + 164\n\n    # Second fully-connected layer: (in_features \u00d7 out_features) + out_features\n    second_layer_params = (164 * action_dimensions) + action_dimensions\n\n    # Total trainable parameters\n    return first_layer_params + second_layer_params"}
{"task_id": 270, "completion_id": 0, "completion": "import numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    # Compute the expected rewards: for each arm k, reward_k = x_k^T \u03b8_k\n    # (both context and thetas are shape (D, K), so context[:,k] and thetas[:,k] \n    # describe the k-th arm\u2019s context/parameter vectors)\n    rewards = np.sum(context * thetas, axis=0)\n    \n    # Round each reward to four decimals\n    rewards_rounded = np.round(rewards, 4)\n    \n    # Determine the maximum reward (after rounding)\n    max_reward = np.max(rewards_rounded)\n    \n    # If multiple arms share the same rounded reward, choose the smallest index\n    best_arm = np.where(rewards_rounded == max_reward)[0][0]\n    \n    # Return the best reward (already rounded) and the best arm index\n    return float(max_reward), best_arm"}
{"task_id": 271, "completion_id": 0, "completion": "import numpy as np\n\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    # Calculate gradients and hessians for the left side\n    left_grad = np.array(left_pred) - np.array(left_true)  # g_i\n    G_L = left_grad.sum()                                  # sum of gradients\n    H_L = len(left_true)                                   # sum of hessians\n\n    # Calculate gradients and hessians for the right side\n    right_grad = np.array(right_pred) - np.array(right_true)\n    G_R = right_grad.sum()\n    H_R = len(right_true)\n\n    # Parent (union of left and right)\n    G_P = G_L + G_R\n    H_P = H_L + H_R\n\n    # Calculate the split gain\n    gain = 0.5 * ((G_L**2 / H_L) + (G_R**2 / H_R) - (G_P**2 / H_P))\n\n    # Round to 4 decimal places\n    gain_rounded = round(gain, 4)\n\n    # Avoid returning -0.0\n    if gain_rounded == 0:\n        return 0.0\n\n    return gain_rounded"}
{"task_id": 273, "completion_id": 0, "completion": "import math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Helper function: compute Shannon entropy of a frequency distribution\n    # freq is a list/array of counts, total = sum(freq)\n    # H = - \u03a3 (p_i * log2(p_i)) for i in classes\n    # -------------------------------------------------------------------------\n    def compute_entropy(freq):\n        total = sum(freq)\n        if total == 0:\n            return 0.0\n        entropy = 0.0\n        for f in freq:\n            if f > 0:\n                p = f / total\n                entropy -= p * math.log2(p)\n        return entropy\n\n    # -------------------------------------------------------------------------\n    # 0) Basic checks: if feature or target is empty, no split possible\n    # -------------------------------------------------------------------------\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 1) Sort data by feature values\n    # -------------------------------------------------------------------------\n    data_sorted = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_x = [row[0] for row in data_sorted]\n    sorted_y = [row[1] for row in data_sorted]\n\n    # -------------------------------------------------------------------------\n    # 2) Check if all feature values are identical --> no legal thresholds\n    # -------------------------------------------------------------------------\n    if sorted_x[0] == sorted_x[-1]:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 3) Compute the \"parent\" entropy (i.e. entropy of all labels)\n    # -------------------------------------------------------------------------\n    total_counts = Counter(sorted_y)\n    parent_entropy = 0.0\n    for cnt in total_counts.values():\n        p = cnt / n\n        parent_entropy -= p * math.log2(p)\n\n    # If parent entropy is 0, all examples have the same class label\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 4) Prepare prefix counts: prefix_count[i][c] = how many of class c among\n    #    the first i examples (sorted by feature).\n    # -------------------------------------------------------------------------\n    # Get all distinct classes and map them to indices:\n    class_labels = sorted(list(total_counts.keys()))\n    label_to_index = {c: idx for idx, c in enumerate(class_labels)}\n    k = len(class_labels)  # number of distinct classes\n\n    prefix_count = [[0] * k for _ in range(n + 1)]  # (n+1) x k\n\n    for i in range(n):\n        # copy previous\n        for c_idx in range(k):\n            prefix_count[i + 1][c_idx] = prefix_count[i][c_idx]\n        # increment count of this example's class\n        c = sorted_y[i]\n        c_idx = label_to_index[c]\n        prefix_count[i + 1][c_idx] += 1\n\n    # -------------------------------------------------------------------------\n    # 5) Evaluate all possible thresholds (between consecutive distinct values)\n    # -------------------------------------------------------------------------\n    best_threshold = None\n    best_ig = 0.0  # track maximum information gain found so far\n\n    for i in range(n - 1):\n        # Consider a threshold between sorted_x[i] and sorted_x[i+1] only if distinct\n        if sorted_x[i] != sorted_x[i + 1]:\n            t_candidate = 0.5 * (sorted_x[i] + sorted_x[i + 1])\n\n            # Left side has i+1 examples, right side has n - (i+1) examples\n            left_freq = prefix_count[i + 1]  # distribution of the left subset\n            right_freq = [\n                total_counts[label] - left_freq[label_to_index[label]]\n                for label in class_labels\n            ]\n            left_size = i + 1\n            right_size = n - left_size\n\n            # Compute entropies\n            h_left = compute_entropy(left_freq)\n            h_right = compute_entropy(right_freq)\n\n            # Information gain\n            ig_candidate = (parent_entropy\n                            - (left_size / n) * h_left\n                            - (right_size / n) * h_right)\n\n            # Track the best IG; if tie, choose the smaller threshold\n            if ig_candidate > best_ig:\n                best_ig = ig_candidate\n                best_threshold = t_candidate\n            elif abs(ig_candidate - best_ig) < 1e-15:\n                # numerical tie\n                if t_candidate < best_threshold:\n                    best_threshold = t_candidate\n\n    # -------------------------------------------------------------------------\n    # 6) If no positive gain or no threshold identified, return (None, 0.0)\n    # -------------------------------------------------------------------------\n    if best_threshold is None or best_ig <= 0.0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 7) Return threshold and information gain, both rounded to 4 decimals\n    # -------------------------------------------------------------------------\n    return (round(best_threshold, 4), round(best_ig, 4))"}
{"task_id": 274, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already\n    arr = np.array(values, dtype=float)\n    \n    # Use NumPy's built-in clip to limit values between -5 and 5\n    arr_clipped = np.clip(arr, -5, 5)\n    \n    # Return the clipped values as a Python list\n    return arr_clipped.tolist()\n```"}
{"task_id": 276, "completion_id": 0, "completion": "import math\nimport string\nfrom collections import Counter\n\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float = 1.0, unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\n\n    The model is trained on *corpus* using the given *N* and *k* (smoothing\n    parameter).  All details of tokenisation, padding, vocabulary construction\n    and probability estimation are described in the task specification.\n\n    Args:\n        corpus: List of training sentences.\n        sentence: The sentence whose probability needs to be computed.\n        N: Order of the model (1 for unigram, 2 for bigram, etc.).\n        k: Additive smoothing parameter (default 1.0).\n        unk: If True, unseen tokens are mapped to a special <unk> symbol.\n\n    Returns:\n        A single float, rounded to 4 decimal places, representing the base-10\n        logarithm of the sentence probability.\n    \"\"\"\n\n    # ---------------------------------------------------------\n    # 1) A helper function to tokenize and pad each sentence\n    # ---------------------------------------------------------\n    def tokenize(text: str) -> list[str]:\n        # Lowercase, split by whitespace\n        raw_tokens = text.lower().split()\n\n        # Remove leading/trailing punctuation (keep internal punctuation)\n        trimmed = [t.strip(string.punctuation) for t in raw_tokens]\n\n        # Filter out any empty tokens (e.g., a string of punctuation only)\n        tokens = [t for t in trimmed if t]\n\n        return tokens\n\n    # ---------------------------------------------------------\n    # 2) Build the training vocabulary and N-gram counts\n    # ---------------------------------------------------------\n\n    # We collect all tokens from the corpus, applying the same tokenization\n    # (including <bol> / <eol> for each sentence).\n    tokenized_corpus = []\n    for line in corpus:\n        line_tokens = tokenize(line)\n        line_tokens = [\"<bol>\"] + line_tokens + [\"<eol>\"]\n        tokenized_corpus.append(line_tokens)\n\n    # Build the vocabulary from the corpus (all unique tokens).\n    vocab = set()\n    for tokens in tokenized_corpus:\n        vocab.update(tokens)\n\n    # If unk is True, include <unk> in the vocabulary (used later for OOV tokens).\n    if unk:\n        vocab.add(\"<unk>\")\n\n    # N-gram counts and prefix counts\n    # For unigrams (N=1) we only track single-token counts.\n    # For N>1 we track:\n    #   - prefix_counts: counts of each (N-1)-tuple\n    #   - ngram_counts: counts of each N-tuple\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    total_tokens = 0  # For unigrams, we'll need the total number of tokens\n\n    for tokens in tokenized_corpus:\n        if N == 1:\n            # For unigrams, just count each token\n            for w in tokens:\n                ngram_counts[w] += 1\n            total_tokens += len(tokens)\n\n        else:\n            # For bigrams or higher, build N-grams\n            for i in range(len(tokens) - (N - 1)):\n                ngram = tuple(tokens[i : i + N])  # N-length tuple\n                prefix = ngram[:-1]  # (N-1)-length tuple\n                ngram_counts[ngram] += 1\n                prefix_counts[prefix] += 1\n\n    # Vocabulary size (|V|).\n    # Note: This is the final size (including <unk> if used).\n    V = len(vocab)\n\n    # ---------------------------------------------------------\n    # 3) Tokenize the target sentence (with <bol> / <eol>),\n    #    replacing out-of-vocab if unk == True\n    # ---------------------------------------------------------\n    target_tokens = tokenize(sentence)\n    # Replace OOV tokens with <unk> if unk is True\n    if unk:\n        target_tokens = [t if t in vocab else \"<unk>\" for t in target_tokens]\n\n    # Pad with <bol> and <eol>\n    target_tokens = [\"<bol>\"] + target_tokens + [\"<eol>\"]\n\n    # ---------------------------------------------------------\n    # 4) Compute the (log base-10) probability of the target\n    #    sentence under the N-gram model, then sum\n    # ---------------------------------------------------------\n    log_prob_sum = 0.0\n\n    if N == 1:\n        # For unigrams: P(w) = (count(w) + k) / (total_tokens + k*V)\n        for w in target_tokens:\n            count_w = ngram_counts[w]\n            numerator = count_w + k\n            denominator = total_tokens + k * V\n            prob_w = numerator / denominator\n            log_prob_sum += math.log10(prob_w)\n    else:\n        # For N > 1: P(w|h) = (count(h, w) + k) / (count(h) + k*V)\n        for i in range(len(target_tokens) - (N - 1)):\n            ngram = tuple(target_tokens[i : i + N])  # N-length tuple\n            prefix = ngram[:-1]\n            count_hw = ngram_counts[ngram]\n            count_h = prefix_counts[prefix]\n            numerator = count_hw + k\n            denominator = count_h + k * V\n            prob_hw = numerator / denominator\n            log_prob_sum += math.log10(prob_hw)\n\n    # ---------------------------------------------------------\n    # 5) Return the final log probability, rounded to 4 decimals\n    # ---------------------------------------------------------\n    return round(log_prob_sum, 4)"}
{"task_id": 277, "completion_id": 0, "completion": "```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env[\"action_space\"], (tuple, dict))\n    tuple_obs = isinstance(env[\"observation_space\"], (tuple, dict))\n    return (tuple_action, tuple_obs)\n```"}
{"task_id": 278, "completion_id": 0, "completion": "def evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    # Base case: if the 'value' key exists, we are at a leaf node.\n    if 'value' in tree:\n        return tree['value']\n\n    # Otherwise, we're at an internal node.\n    # Retrieve the feature index and threshold.\n    feature = tree['feature_i']\n    threshold = tree['threshold']\n\n    # Compare the sample's feature value to the threshold to pick the branch.\n    if sample[feature] <= threshold:\n        return evaluate_decision_tree(tree['true_branch'], sample)\n    else:\n        return evaluate_decision_tree(tree['false_branch'], sample)"}
{"task_id": 279, "completion_id": 0, "completion": "import numpy as np\n\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true, dtype=float)\n    y_pred = np.array(y_pred, dtype=float)\n\n    # Number of samples\n    N = len(y_true)\n\n    # 1) Compute the Mean Squared Error (MSE)\n    mse_value = np.mean((y_pred - y_true) ** 2)\n\n    # 2) Compute the gradient of the MSE w.r.t. the predictions\n    grad_array = (2 / N) * (y_pred - y_true)\n\n    # 3) Compute the classification accuracy with a 0.5 decision threshold\n    #    (values >= 0.5 => class 1, values < 0.5 => class 0)\n    predicted_classes = (y_pred >= 0.5).astype(float)\n    accuracy_value = np.mean(predicted_classes == y_true)\n\n    # Round everything to 4 decimal places\n    mse_rounded = float(np.round(mse_value, 4))\n    grad_list = [float(np.round(g, 4)) for g in grad_array]\n    accuracy_rounded = float(np.round(accuracy_value, 4))\n\n    return (mse_rounded, grad_list, accuracy_rounded)"}
{"task_id": 280, "completion_id": 0, "completion": "import numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    # Ensure alpha is non-negative\n    if alpha < 0:\n        raise ValueError(\"Regularization coefficient alpha must be non-negative.\")\n        \n    if not return_grad:\n        # Compute L2 regularization term: 0.5 * alpha * sum(w^2)\n        reg_value = 0.5 * alpha * np.sum(w**2)\n        # Round to 4 decimal places and return as a Python float\n        return float(np.round(reg_value, 4))\n    else:\n        # Compute gradient of the L2 term: alpha * w\n        grad = alpha * w\n        # Round each element to 4 decimal places\n        return np.round(grad, 4)"}
{"task_id": 281, "completion_id": 0, "completion": "import numpy as np\n\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    class L1RegularizationImpl:\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w):\n            if self.alpha == 0.0:\n                return 0.0\n            return float(self.alpha * np.sum(np.abs(w)))\n\n        def grad(self, w):\n            if self.alpha == 0.0:\n                return np.zeros_like(w)\n            # np.sign(0) == 0, so this handles the zero case automatically\n            return self.alpha * np.sign(w)\n\n    return L1RegularizationImpl(alpha)"}
{"task_id": 282, "completion_id": 0, "completion": "import math\n\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n\n    # If the list is empty, return (0.0, 0.0, 0.0)\n    if not data:\n        return (0.0, 0.0, 0.0)\n\n    n = 0\n    m = 0.0\n    s = 0.0\n\n    # Welford's online algorithm\n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n\n    # For a single value, the sample variance is 0, same for std\n    if n > 1:\n        var = s / (n - 1)\n    else:\n        var = 0.0\n\n    std = math.sqrt(var)\n\n    return (round(m, 4), round(var, 4), round(std, 4))"}
{"task_id": 283, "completion_id": 0, "completion": "import numpy as np\n\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    # Compute the predicted probabilities using the logistic (sigmoid) function\n    p = 1.0 / (1.0 + np.exp(-predicted))\n    \n    # Compute the gradient and Hessian for each sample\n    g = p - actual            # gradient\n    h = p * (1.0 - p)         # Hessian\n\n    # Sum over all samples\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n\n    # Compute the approximate leaf value and split gain\n    leaf_value = sum_g / (sum_h + regularization)\n    gain = 0.5 * (sum_g ** 2) / (sum_h + regularization)\n\n    # Round to 4 decimal places and return\n    return [round(leaf_value, 4), round(gain, 4)]"}
{"task_id": 284, "completion_id": 0, "completion": "def iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of stored entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    # If the object is already known, just return its existing index.\n    if obj in table:\n        return table[obj]\n\n    # If we are in read-only mode, do not add or collide; unknown objects get None.\n    if readonly:\n        return None\n\n    # If there is still room in the table, insert the new object at the next index.\n    if len(table) < size:\n        new_index = len(table)\n        table[obj] = new_index\n        return new_index\n\n    # Otherwise, the table is full. We must collide and increment the collision count.\n    overfull_count[0] += 1\n    return hash(obj) % size"}
{"task_id": 285, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    For two real-valued matrices X \u2208 R^{n_x\u00d7d} and Y \u2208 R^{n_y\u00d7d}, the linear kernel is defined as:\n         K(X, Y) = X Y^T\n    \n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    \n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. \n        Returns -1 if x and y have different feature dimensions.\n    \"\"\"\n    # Reshape x to 2D if it is 1D\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    # Reshape y to 2D if it is 1D\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n        \n    # Check if the feature dimensions match\n    if x.shape[1] != y.shape[1]:\n        return -1\n    \n    # Compute the matrix product\n    product = x @ y.T\n    \n    # Return as a nested Python list\n    return product.tolist()"}
{"task_id": 286, "completion_id": 0, "completion": "import random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"\n    Returns the initializer function that matches *name*.\n    \n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if not initializer or not callable(initializer):\n        raise ValueError(\"Invalid initialization function.\")\n    return initializer"}
{"task_id": 287, "completion_id": 0, "completion": "import numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    # Unpack shapes\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output spatial dimensions\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n\n    # Forward Pass: Pooled output\n    pooled_output = np.zeros((N, C, out_H, out_W), dtype=X.dtype)\n\n    # Compute average pooling\n    for n in range(N):\n        for c in range(C):\n            for oh in range(out_H):\n                for ow in range(out_W):\n                    # Window start/end\n                    start_h = oh * s_h\n                    start_w = ow * s_w\n                    end_h = start_h + p_h\n                    end_w = start_w + p_w\n\n                    region = X[n, c, start_h:end_h, start_w:end_w]\n                    pooled_output[n, c, oh, ow] = np.mean(region)\n\n    # Backward Pass: distribute gradients\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n\n    for n in range(N):\n        for c in range(C):\n            for oh in range(out_H):\n                for ow in range(out_W):\n                    # Gradient to distribute\n                    grad_val = accum_grad[n, c, oh, ow]\n                    \n                    # Window start/end\n                    start_h = oh * s_h\n                    start_w = ow * s_w\n                    end_h = start_h + p_h\n                    end_w = start_w + p_w\n\n                    # Distribute equally to each element in the window\n                    grad_input[n, c, start_h:end_h, start_w:end_w] += grad_val / (p_h * p_w)\n\n    # Round to 4 decimals\n    pooled_output = np.round(pooled_output, 4)\n    grad_input = np.round(grad_input, 4)\n\n    # Convert to Python lists\n    return pooled_output.tolist(), grad_input.tolist()"}
{"task_id": 288, "completion_id": 0, "completion": "import numpy as np\n\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error. Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    # Case 1: Both actual and predicted are numeric (int/float)\n    if isinstance(actual, (int, float)) and isinstance(predicted, (int, float)):\n        return round((actual - predicted) ** 2, 4)\n\n    # Case 2: Both are iterables, check for proper length and compute MSE\n    try:\n        arr_actual = np.array(actual, dtype=float)\n        arr_predicted = np.array(predicted, dtype=float)\n    except (TypeError, ValueError):\n        # Conversion to float array failed, return -1\n        return -1\n\n    # Check dimension and length\n    if arr_actual.shape != arr_predicted.shape or arr_actual.size == 0:\n        return -1\n\n    mse_value = np.mean((arr_actual - arr_predicted) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 289, "completion_id": 0, "completion": "```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    return \"\\n\".join(f'{field}: \"{str(value)}\"' for field, value in entries)\n```\n"}
{"task_id": 290, "completion_id": 0, "completion": "import numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Two trees are considered equivalent if they have the same structure,\n    the same feature indices, thresholds (within 1e-8),\n    and their leaf values are equal (within 1e-8).\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If types differ, trees can't match in shape\n    if type(tree_a) != type(tree_b):\n        return False\n\n    # If both are leaves, compare their values with np.allclose (within 1e-8)\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Convert values to numpy arrays (at least 1D) to safely compare\n        val_a = np.array(tree_a.value, ndmin=1, dtype=float)\n        val_b = np.array(tree_b.value, ndmin=1, dtype=float)\n        return np.allclose(val_a, val_b, atol=1e-8)\n\n    # If both are nodes, compare feature, threshold, then sub-trees\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Compare feature indices\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Compare thresholds up to 1e-8\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        # Recursively compare left and right sub-trees\n        return (compare_trees(tree_a.left, tree_b.left)\n                and compare_trees(tree_a.right, tree_b.right))\n\n    # If none of the above conditions matched, they're not equal\n    return False"}
{"task_id": 291, "completion_id": 0, "completion": "import numpy as np\n\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    # 1. Input validation\n    m, d = X.shape\n    if not (1 <= n_components <= d):\n        return -1\n\n    # 2. Compute the sample covariance matrix of X\n    Sigma = np.cov(X, rowvar=False)  # shape: (d, d)\n\n    # 3. Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eig(Sigma)\n\n    # 4. Sort eigenvalues and eigenvectors (descending order of eigenvalues)\n    idx_sorted = np.argsort(eigenvalues)[::-1]  # indices of sorted eigenvalues\n    eigenvalues = eigenvalues[idx_sorted]\n    eigenvectors = eigenvectors[:, idx_sorted]\n\n    # 5. Flip sign of eigenvectors if first element is negative\n    for i in range(d):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Select the first n_components eigenvectors\n    principal_components = eigenvectors[:, :n_components]\n\n    # 6. Project X onto these components\n    X_transformed = X @ principal_components\n\n    # Round to 4 decimals and convert to list\n    X_transformed_rounded = np.round(X_transformed, 4).tolist()\n\n    return X_transformed_rounded"}
{"task_id": 292, "completion_id": 0, "completion": "import numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as parent1.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    # Convert parent1 and parent2 to NumPy arrays\n    arr1 = np.array(parent1, dtype=float)\n    arr2 = np.array(parent2, dtype=float)\n\n    # Check that they have the same shape\n    if arr1.shape != arr2.shape:\n        return -1\n\n    # Determine the number of columns\n    _, num_cols = arr1.shape\n\n    # Validate that the cutoff is within valid range (though the problem statement\n    # implies it's allowed to be 0 or equal to num_cols)\n    # Still, we can do a quick check to ensure it won't slice incorrectly.\n    if not (0 <= cutoff <= num_cols):\n        return -1\n\n    # Create children\n    # For child1: columns before cutoff from arr1, columns from cutoff to end from arr2\n    # For child2: columns before cutoff from arr2, columns from cutoff to end from arr1\n    child1 = np.hstack([arr1[:, :cutoff], arr2[:, cutoff:]])\n    child2 = np.hstack([arr2[:, :cutoff], arr1[:, cutoff:]])\n\n    # Convert back to Python lists\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 293, "completion_id": 0, "completion": "```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Define the mapping of agent name to environment and access type.\n    agent_map = {\n        'dqn': ('CartPole-v0', 'unwrapped'),\n        'ddpg': ('Pendulum-v0', 'env'),\n        'a3c': ('Pendulum-v0', 'unwrapped'),\n        'a2c': ('CartPole-v0', 'env'),\n        'a2c_multi': ('CartPole-v0', 'raw'),\n        'trpo': ('Pendulum-v0', 'unwrapped'),\n    }\n\n    # Normalize the agent name by stripping whitespace and converting to lowercase.\n    agent_clean = agent_name.strip().lower()\n\n    # Return the corresponding tuple or -1 if not recognized.\n    return agent_map.get(agent_clean, -1)\n```"}
{"task_id": 294, "completion_id": 0, "completion": "from typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # If there are no vertices, return an empty dict\n    if not G['_V2I']:\n        return {}\n\n    # Prepare adjacency dict with empty lists for every vertex\n    adj = {v: [] for v in G['_V2I'].keys()}\n\n    is_directed = G['is_directed']\n\n    # A set to track which undirected edges we've already added\n    # (u, v, w) with u < v so that each undirected edge is only listed once.\n    edges_seen = set()\n\n    for adj_list in G['_G']:\n        for (u, v, w) in adj_list:\n            if is_directed:\n                # Simply add the directed edge\n                adj[u].append((v, w))\n            else:\n                # For undirected, add each edge once in both directions\n                # Use an ordered tuple to detect duplicates\n                if u < v:\n                    key = (u, v, w)\n                else:\n                    key = (v, u, w)\n\n                if key not in edges_seen:\n                    edges_seen.add(key)\n                    adj[u].append((v, w))\n                    adj[v].append((u, w))\n\n    # Sort each adjacency list by the neighbour label\n    for u in adj:\n        adj[u].sort(key=lambda x: x[0])\n\n    return adj"}
{"task_id": 296, "completion_id": 0, "completion": "import numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return bool(np.all(np.isin(x, [0, 1])))"}
{"task_id": 297, "completion_id": 0, "completion": "import numpy as np\n\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    a, b = feature_range\n    if a >= b:\n        return -1  # Invalid feature range\n    \n    # Convert input data to a NumPy array of floats\n    arr = np.array(data, dtype=float)\n    \n    # Number of columns/features\n    n_features = arr.shape[1]\n    \n    for col_idx in range(n_features):\n        col_min = np.min(arr[:, col_idx])\n        col_max = np.max(arr[:, col_idx])\n        \n        # If the feature is constant, set all values to a\n        if col_min == col_max:\n            arr[:, col_idx] = a\n        else:\n            # Apply the Min\u2013Max scaling formula\n            arr[:, col_idx] = ((arr[:, col_idx] - col_min) / (col_max - col_min)) * (b - a) + a\n\n    # Replace NaN/inf with 0.0\n    arr = np.nan_to_num(arr)\n    \n    # Round to 4 decimal places\n    arr = np.round(arr, 4)\n    \n    # Convert back to plain Python list\n    return arr.tolist()"}
{"task_id": 298, "completion_id": 0, "completion": "import math\nfrom collections import Counter\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # ------------------------\n    # 1) Build counts from corpus\n    # ------------------------\n    if N < 1:\n        return float('-inf')  # Invalid N\n\n    # Handle the unigram case separately\n    if N == 1:\n        # Collect all tokens (no padding)\n        all_tokens = []\n        for sentence in corpus:\n            all_tokens.extend(sentence.split())\n        total_unigrams = len(all_tokens)\n        if total_unigrams == 0:\n            return float('-inf')  # No data in the corpus\n\n        # Count each unigram\n        unigram_counts = Counter(all_tokens)\n\n        # ------------------------\n        # 2) Compute query probability\n        # ------------------------\n        query_tokens = query.split()\n        # If query is empty, no n-grams can be formed, return -inf\n        if len(query_tokens) == 0:\n            return float('-inf')\n\n        sum_of_logs = 0.0\n        for token in query_tokens:\n            count_w = unigram_counts.get(token, 0)\n            if count_w == 0:\n                return float('-inf')\n            prob_w = count_w / total_unigrams\n            sum_of_logs += math.log(prob_w)\n\n        return round(sum_of_logs, 4)\n\n    else:\n        # N > 1\n        # Build n-gram and (N-1)-gram counts with padding\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n\n        for sentence in corpus:\n            tokens = sentence.split()\n            # Pad with <bol> and <eol>\n            padded = ([\"<bol>\"] * (N - 1)) + tokens + [\"<eol>\"]\n            for i in range(len(padded) - N + 1):\n                n_gram = tuple(padded[i : i + N])\n                ngram_counts[n_gram] += 1\n                prefix_counts[n_gram[:-1]] += 1\n\n        # ------------------------\n        # 2) Compute query probability\n        # ------------------------\n        query_tokens = query.split()\n        # Pad the query\n        padded_query = ([\"<bol>\"] * (N - 1)) + query_tokens + [\"<eol>\"]\n\n        # If padding still doesn't give us enough tokens for at least 1 n-gram\n        if len(padded_query) < N:\n            return float('-inf')\n\n        sum_of_logs = 0.0\n        for i in range(len(padded_query) - N + 1):\n            n_gram = tuple(padded_query[i : i + N])\n            prefix = n_gram[:-1]\n\n            count_ng = ngram_counts.get(n_gram, 0)\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_ng == 0 or count_prefix == 0:\n                return float('-inf')  # zero probability\n\n            prob = count_ng / count_prefix\n            sum_of_logs += math.log(prob)\n\n        return round(sum_of_logs, 4)"}
{"task_id": 299, "completion_id": 0, "completion": "import numpy as np\nfrom __future__ import annotations\n\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length m where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    # Number of samples (m) and number of features (n)\n    m, n = X.shape\n\n    # 1) Initialize centroids using the first k samples of X\n    centroids = X[:k].copy()  # shape: (k, n)\n\n    # This array will hold the cluster assignment of each sample\n    cluster_assignments = np.zeros(m, dtype=int)\n\n    for _ in range(max_iterations):\n        # 2a) Assign each sample to the closest centroid\n        # Compute distances from each sample to each centroid\n        distances = np.linalg.norm(X[:, None] - centroids, axis=2)  # shape: (m, k)\n        new_assignments = np.argmin(distances, axis=1)              # shape: (m,)\n\n        # 2b) Recompute the centroids\n        new_centroids = centroids.copy()\n        for cluster_idx in range(k):\n            # Select samples belonging to this cluster\n            cluster_points = X[new_assignments == cluster_idx]\n            # If cluster is not empty, recompute centroid\n            if len(cluster_points) > 0:\n                new_centroids[cluster_idx] = cluster_points.mean(axis=0)\n            # Otherwise, keep the existing centroid (as per the requirement)\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids):\n            # If centroids don't change, stop\n            cluster_assignments = new_assignments\n            break\n\n        # Update centroids and assignments\n        centroids = new_centroids\n        cluster_assignments = new_assignments\n\n    # If we exit the loop by max iterations, we still have the latest assignments\n    return cluster_assignments.tolist()"}
{"task_id": 300, "completion_id": 0, "completion": "import heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str = \"largest\") -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    # 1. Handle corner cases\n    if k <= 0 or not sequence:\n        return []\n    if k >= len(sequence):\n        # Return the entire sequence sorted in ascending for \"smallest\"\n        # or descending for \"largest\"\n        return sorted(sequence, reverse=(order == \"largest\"))\n\n    if order == \"largest\":\n        # 2. Keep a min-heap of size k to track the k largest\n        heap: List[Number] = []\n        for x in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, x)\n            else:\n                # If current element is bigger than the smallest in the heap,\n                # replace the smallest\n                if x > heap[0]:\n                    heapq.heapreplace(heap, x)\n        # Sort the heap in non-increasing order before returning\n        return sorted(heap, reverse=True)\n    else:\n        # order == \"smallest\"\n        # 3. Keep a max-heap of size k by storing negative values\n        heap: List[Number] = []\n        for x in sequence:\n            if len(heap) < k:\n                # Push as negative to simulate a max-heap using Python's min-heap\n                heapq.heappush(heap, -x)\n            else:\n                # If current element is smaller than the largest in the heap\n                # (which is -heap[0]), replace it\n                if x < -heap[0]:\n                    heapq.heapreplace(heap, -x)\n        # Convert back to positive and sort in non-decreasing order\n        result = [-val for val in heap]\n        return sorted(result)"}
{"task_id": 301, "completion_id": 0, "completion": "def inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    # If the input is empty, return an empty list\n    if not pairs:\n        return []\n\n    # Since we are \"given\" a Node class with custom comparison operators,\n    # we use it directly. The Node type is assumed to look like:\n    #\n    # class Node:\n    #     def __init__(self, key, val):\n    #         self.key = key\n    #         self.val = val\n    #         self.left = None\n    #         self.right = None\n    #\n    #     def __lt__(self, other):\n    #         return self.val < other.val\n    #     def __le__(self, other):\n    #         return self.val <= other.val\n    #     def __gt__(self, other):\n    #         return self.val > other.val\n    #     def __ge__(self, other):\n    #         return self.val >= other.val\n    #\n    # We'll define our insert and traversal helpers here.\n\n    # Helper function to insert a new node into the BST\n    def insert(root, node):\n        # Go left if the new node is strictly smaller, else go right\n        if node < root:  # uses Node.__lt__(...)\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n        else:  # node >= root\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n\n    # Helper function for in-order traversal\n    def inorder_traversal(node, result):\n        if node is None:\n            return\n        inorder_traversal(node.left, result)\n        result.append(node.key)\n        inorder_traversal(node.right, result)\n\n    # Build the BST\n    # Create the root from the first (key, value) pair\n    root = Node(pairs[0][0], pairs[0][1])\n\n    # Insert each of the remaining pairs\n    for key, val in pairs[1:]:\n        new_node = Node(key, val)\n        insert(root, new_node)\n\n    # Perform in-order traversal to collect the keys\n    keys_in_order = []\n    inorder_traversal(root, keys_in_order)\n\n    return keys_in_order"}
{"task_id": 302, "completion_id": 0, "completion": "import numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        A Python list of length n_samples containing an integer cluster label in [0, k-1]\n        for each sample.\n    \"\"\"\n\n    # 1. Build the weighted adjacency matrix W\n    n_samples = X.shape[0]\n    W = np.zeros((n_samples, n_samples), dtype=np.float64)\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist_ij = np.linalg.norm(X[i] - X[j])\n            w_ij = 1.0 / (1.0 + dist_ij)\n            W[i, j] = w_ij\n            W[j, i] = w_ij\n    # The diagonal is already zero, ensuring a point is not connected to itself\n\n    # 2. Compute the unnormalised graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))  # degree matrix\n    L = D - W\n\n    # 3. Obtain the first k eigenvectors of L\n    #    (the k eigenvectors corresponding to the k smallest eigenvalues)\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)  # sort eigenvalues in ascending order\n    E = eigenvectors[:, sorted_indices[:k]]   # take the first k eigenvectors\n    # E is an (n_samples, k) matrix; each row is an embedding for a data point\n\n    # 4. Run k-means on rows of E\n    def kmeans(data: np.ndarray, k_clusters: int, max_iters: int = 100) -> np.ndarray:\n        \"\"\"\n        A simple k-means implementation:\n          - Initializes centroids as the first k rows of data.\n          - Re-initializes any empty cluster centroid randomly.\n          - Stops if assignments do not change or max_iters is reached.\n\n        Returns:\n          A 1-D array of integer cluster assignments of length data.shape[0].\n        \"\"\"\n        n_points = data.shape[0]\n        # Initialize centroids (deterministic: use the first k rows)\n        centroids = data[:k_clusters, :].copy()\n        assignments = np.zeros(n_points, dtype=np.int64)\n\n        for _ in range(max_iters):\n            # Compute distances from each point to each centroid\n            # shape of data: (n_points, k_dim), centroids: (k_clusters, k_dim)\n            # We'll expand dims to broadcast: data[:, None, :] - centroids[None, :, :]\n            # Then sum squared differences along the last axis\n            distances = np.sum((data[:, None, :] - centroids[None, :, :]) ** 2, axis=2)\n\n            # Assign each point to the closest centroid\n            new_assignments = np.argmin(distances, axis=1)\n\n            # If no change in assignment, we are done\n            if np.all(new_assignments == assignments):\n                break\n            assignments = new_assignments\n\n            # Update centroids\n            for cluster_idx in range(k_clusters):\n                cluster_points = data[assignments == cluster_idx]\n                if len(cluster_points) == 0:\n                    # If cluster is empty, re-initialize centroid randomly\n                    random_idx = np.random.randint(n_points)\n                    centroids[cluster_idx] = data[random_idx]\n                else:\n                    # Otherwise, update centroid as mean of the cluster points\n                    centroids[cluster_idx] = np.mean(cluster_points, axis=0)\n\n        return assignments\n\n    cluster_labels = kmeans(E, k)\n\n    # 5. Return the resulting cluster labels as a Python list\n    return cluster_labels.tolist()"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        \"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        \"\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        \"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n```\n"}
{"task_id": 304, "completion_id": 0, "completion": "import numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,  # kept for API compatibility\n    beta: float = 1.0,   # unused (the estimate doesn't depend on sigma^2)\n    mu=0.0,\n    V=None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance, using a\n    normal\u2013inverse-gamma prior on (b, \u03c3\u00b2).\n\n    The MAP estimate of b does not depend on \u03c3\u00b2.  The posterior mean\n    \u03bc_b is given by (\u03a3_b)(V\u207b\u00b9 \u03bc + X\u1d40 y), where\n        \u03a3_b = (V\u207b\u00b9 + X\u1d40 X)\u207b\u00b9\n    and V\u207b\u00b9 is the precision matrix of the prior on b (scaled by \u03c3\u00b2).\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for b.  Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for b. Accepts None (identity), a scalar (scalar\u00d7I),\n            a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded\n        to 4 decimal places.\n    \"\"\"\n    # 1) Optionally add a column of ones for the intercept\n    if fit_intercept:\n        X = np.column_stack([np.ones(len(X)), X])\n    \n    # 2) Determine dimensions\n    N, M = X.shape\n    \n    # 3) Handle mu (prior mean)\n    if np.isscalar(mu):\n        mu = np.full(M, mu, dtype=float)\n    else:\n        mu = np.asarray(mu, dtype=float).flatten()\n    if mu.shape[0] != M:\n        raise ValueError(\"Dimension mismatch: mu must match the number of features (including intercept if fitted).\")\n    \n    # 4) Handle V (prior scale)\n    if V is None:\n        # Identity\n        V_mat = np.eye(M, dtype=float)\n    elif np.isscalar(V):\n        # Scalar times identity\n        V_mat = float(V) * np.eye(M, dtype=float)\n    else:\n        # Convert to array\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            # Diagonal\n            if V_arr.shape[0] != M:\n                raise ValueError(\"Dimension mismatch: V must match the number of features.\")\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(\"Dimension mismatch: V must be of shape (M, M).\")\n            V_mat = V_arr\n        else:\n            raise ValueError(\"V must be scalar, 1D or 2D.\")\n    \n    # 5) Compute posterior mean\n    #    \u03a3_b = (V^-1 + X^T X)^-1\n    #    \u03bc_b = \u03a3_b ( V^-1 mu + X^T y )\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Prior scale matrix V is not invertible.\")\n    \n    # sum of prior precision + data precision\n    A = V_inv + X.T @ X\n    \n    try:\n        Sigma_b = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Matrix (V^-1 + X^T X) is singular and cannot be inverted.\")\n    \n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # 6) Round to 4 decimal places and return\n    return mu_b.round(4).tolist()"}
{"task_id": 305, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float] | list[list[float]]: Python list containing the sigmoid of every input element,\n                                         with values rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array.\n    arr = np.array(x, dtype=np.float64)\n\n    # Prepare an array of the same shape to store results.\n    result = np.empty_like(arr)\n\n    # Split computation for numerical stability.\n    pos_mask = (arr >= 0)\n    neg_mask = ~pos_mask\n\n    # For values >= 0\n    result[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n\n    # For values < 0\n    # Use the identity: sigmoid(x) = exp(x) / (1 + exp(x))\n    result[neg_mask] = np.exp(arr[neg_mask]) / (1.0 + np.exp(arr[neg_mask]))\n\n    # Round to 4 decimal places.\n    result = np.round(result, 4)\n\n    # Convert to a Python list. Handle scalar input by wrapping in a list.\n    if result.shape == ():  # 0-dimensional array (scalar)\n        return [float(result)]\n    return result.tolist()"}
{"task_id": 307, "completion_id": 0, "completion": "import numpy as np\n\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    # Draw n_samples indices with replacement\n    idxs = np.random.randint(0, n_samples, size=n_samples)\n\n    # Return bootstrap samples of X and y using these indices\n    return X[idxs], y[idxs]"}
{"task_id": 308, "completion_id": 0, "completion": "import numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    # ------------------------\n    # 1) Setup and Helpers\n    # ------------------------\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(freq_hz: float) -> float:\n        return 2595.0 * np.log10(1.0 + freq_hz / 700.0)\n\n    def mel_to_hz(freq_mel: float) -> float:\n        return 700.0 * (10.0 ** (freq_mel / 2595.0) - 1.0)\n\n    # ------------------------\n    # 2) Map Hz range to Mel range\n    # ------------------------\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally spaced values in the Mel domain\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hz\n    hz_points = [mel_to_hz(m) for m in mel_points]\n\n    # DFT bin frequencies (center frequencies for each bin)\n    bin_freqs = [(k * fs) / N for k in range(N // 2 + 1)]\n\n    # ------------------------\n    # 3) Create the filterbank\n    # ------------------------\n    fbank = []\n    for i in range(n_filters):\n        # Corner frequencies for the i-th triangular filter\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        row = []\n        for k in range(N // 2 + 1):\n            freq_k = bin_freqs[k]\n\n            # Left slope or 0 if outside the left region\n            if f_left <= freq_k <= f_center:\n                left_slope = (freq_k - f_left) / (f_center - f_left)\n            else:\n                left_slope = 0.0\n\n            # Right slope or 0 if outside the right region\n            if f_center <= freq_k <= f_right:\n                right_slope = (f_right - freq_k) / (f_right - f_center)\n            else:\n                right_slope = 0.0\n\n            # Weight is the positive min of the two slopes\n            w = max(0.0, min(left_slope, right_slope))\n\n            # Normalize if requested\n            if normalize and w > 0.0:\n                w *= 2.0 / (f_right - f_left)\n\n            row.append(w)\n        fbank.append(row)\n\n    # ------------------------\n    # 4) Round and return as a Python list\n    # ------------------------\n    rounded_fbank = [[round(value, 4) for value in row] for row in fbank]\n    return rounded_fbank"}
{"task_id": 309, "completion_id": 0, "completion": "import numpy as np\n\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function implements the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v*, and returns a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    # 1) Linear term: (X @ w)\n    linear_term = X @ w  # shape (m,)\n\n    # 2) Factor interaction terms\n    #    (X @ v)^2 and (X^2 @ v^2) are both shape (m, k)\n    Xv = X @ v\n    X_sq = X**2\n    v_sq = v**2\n    Xv_sq = Xv**2\n    X_sq_v_sq = X_sq @ v_sq\n\n    # 3) Summation of [ (x_i^T v_{*f})^2 - (x_i^{odot 2})^T (v_{*f}^{odot 2}) ]\n    #    Then multiply by 1/2 and sum over factor dimension k\n    interaction_term = 0.5 * np.sum(Xv_sq - X_sq_v_sq, axis=1)  # shape (m,)\n\n    # 4) Combine all parts: w0 + linear_term + interaction_term\n    y_pred = w0 + linear_term + interaction_term  # shape (m,)\n\n    # 5) Round to four decimal places and return as a Python list\n    return list(np.round(y_pred, 4))"}
{"task_id": 310, "completion_id": 0, "completion": "import numpy as np\n\ndef root_mean_squared_error(actual: list[float] | np.ndarray,\n                            predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual_arr = np.array(actual, dtype=float)\n    predicted_arr = np.array(predicted, dtype=float)\n\n    # Validate that they have the same non-zero length\n    if len(actual_arr) == 0 or len(predicted_arr) == 0 or len(actual_arr) != len(predicted_arr):\n        return -1\n\n    # Calculate RMSE\n    diff = actual_arr - predicted_arr\n    mse = np.mean(diff ** 2)\n    rmse = np.sqrt(mse)\n\n    # Return rounded to 4 decimal places\n    return round(float(rmse), 4)"}
{"task_id": 311, "completion_id": 0, "completion": "import numpy as np\n\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    # Convert input to float NumPy array, making a copy if the input is already an ndarray\n    if isinstance(arr, np.ndarray):\n        arr_np = arr.copy().astype(float)\n    else:\n        arr_np = np.array(arr, dtype=float)\n    \n    # Vectorized clipping of negative values to 0.0\n    clipped = np.maximum(arr_np, 0.0)\n    \n    # Return the result as a Python list\n    return clipped.tolist()"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Handle special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Define the fixed coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # Determine the denominator based on symmetry\n    # For the periodic form, conceptually use L+1 -> N = L\n    # For the symmetric form, use N = L - 1\n    N = (window_len - 1) if symmetric else window_len\n\n    window = []\n    for n in range(window_len):\n        term = (\n            a0\n            - a1 * np.cos(2.0 * np.pi * n / N)\n            + a2 * np.cos(4.0 * np.pi * n / N)\n            - a3 * np.cos(6.0 * np.pi * n / N)\n        )\n        window.append(round(term, 4))\n\n    return window\n```"}
{"task_id": 313, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        \"\"\"Compute the digamma function using recursion and an asymptotic expansion.\"\"\"\n        shift = 0.0\n        # Recursively shift x upward until x >= 6\n        while x < 6:\n            shift -= 1.0 / x\n            x += 1.0\n        \n        # Asymptotic expansion\n        x_inv = 1.0 / x\n        x_inv2 = x_inv * x_inv\n        x_inv4 = x_inv2 * x_inv2\n        x_inv6 = x_inv2 * x_inv4\n        # Expansion: ln(x) - 1/(2x) - 1/(12x\u00b2) + 1/(120x^4) - 1/(252x^6)\n        result = (math.log(x)\n                  - 0.5 * x_inv\n                  - (1.0 / 12.0) * x_inv2\n                  + (1.0 / 120.0) * x_inv4\n                  - (1.0 / 252.0) * x_inv6)\n        return result + shift\n\n    # Ensure we can handle either a list of lists or a numpy array\n    row = gamma[d]\n    alpha = row[t]\n    alpha_sum = sum(row)\n\n    # Compute the result\n    val = digamma(alpha) - digamma(alpha_sum)\n    \n    # Round to 4 decimal places\n    return round(val, 4)"}
{"task_id": 315, "completion_id": 0, "completion": "import numpy as np\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n\n    name_canonical = name.lower().replace('_', '')\n\n    def mae(y_true, y_pred):\n        y_true_arr = np.array(y_true, dtype=float)\n        y_pred_arr = np.array(y_pred, dtype=float)\n        return round(np.mean(np.abs(y_true_arr - y_pred_arr)), 4)\n\n    def mse(y_true, y_pred):\n        y_true_arr = np.array(y_true, dtype=float)\n        y_pred_arr = np.array(y_pred, dtype=float)\n        return round(np.mean((y_true_arr - y_pred_arr) ** 2), 4)\n\n    def cross_entropy(y_true, y_pred):\n        y_true_arr = np.array(y_true, dtype=float)\n        y_pred_arr = np.array(y_pred, dtype=float)\n        # Clip predictions to avoid log(0)\n        y_pred_clipped = np.clip(y_pred_arr, 1e-15, 1 - 1e-15)\n        ce = -np.mean(y_true_arr * np.log(y_pred_clipped) +\n                      (1 - y_true_arr) * np.log(1 - y_pred_clipped))\n        return round(ce, 4)\n\n    # Map possible aliases to their corresponding functions\n    aliases = {\n        'mae': mae,\n        'meanabsoluteerror': mae,\n        'mse': mse,\n        'meansquarederror': mse,\n        'crossentropy': cross_entropy,\n        'logloss': cross_entropy,\n        'ce': cross_entropy\n    }\n\n    if name_canonical not in aliases:\n        raise ValueError(\"Invalid loss function.\")\n\n    return aliases[name_canonical]"}
{"task_id": 316, "completion_id": 0, "completion": "import numpy as np\n\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    # Check if both vectors have the same length\n    if len(x) != len(y):\n        return -1\n\n    # Convert inputs to NumPy arrays of type float\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((x_arr - y_arr)**2))\n\n    # Return the result rounded to four decimal places\n    return round(distance, 4)"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the \"prev\" index\n    prev_ix = max(ix - 1, 0)\n\n    # Extract previous prediction/label/gold\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n\n    # Extract current prediction/label/gold\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    header = \"------------------------- DEBUG -------------------------\"\n    footer = \"----------------------- END DEBUG -----------------------\"\n\n    return (\n        f\"{header}\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\"\n        f\"\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        f\"{footer}\\n\"\n    )\n```\n"}
{"task_id": 318, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels.\n        Each label is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Initialize data weights equally.\n    w = np.ones(n_samples) / n_samples\n\n    # This will hold tuples of (feature_index, threshold, polarity, alpha)\n    stumps = []\n\n    for _ in range(n_estimators):\n        best_feature = None\n        best_threshold = None\n        best_polarity = 1\n        best_error = float('inf')\n\n        # Try all features, thresholds, and polarities to find the best stump.\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            thresholds = np.unique(feature_values)\n\n            for t in thresholds:\n                for polarity in [1, -1]:\n                    # Decision stump prediction: h(x) = polarity * sign(x_j - t)\n                    pred = np.ones(n_samples, dtype=int)\n                    pred[feature_values < t] = -1\n                    pred *= polarity\n\n                    # Weighted error of this stump\n                    misclassified = (pred != y_train)\n                    error = np.sum(w[misclassified])\n\n                    if error < best_error:\n                        best_error = error\n                        best_feature = j\n                        best_threshold = t\n                        best_polarity = polarity\n\n        # Compute stump weight (alpha_m)\n        # Guard against numerical overflow when best_error = 0 or 1\n        best_error = max(min(best_error, 1 - 1e-10), 1e-10)\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update data weights\n        # Recompute predictions for the chosen stump:\n        pred_best = np.ones(n_samples, dtype=int)\n        pred_best[X_train[:, best_feature] < best_threshold] = -1\n        pred_best *= best_polarity\n\n        w *= np.exp(-alpha * y_train * pred_best)\n        w /= np.sum(w)  # normalize so weights sum to 1\n\n        # Store the stump parameters\n        stumps.append((best_feature, best_threshold, best_polarity, alpha))\n\n    # Predict labels for X_test using the final boosted classifier\n    predictions = []\n    for x in X_test:\n        stump_sum = 0.0\n        for (feature_idx, threshold, polarity, alpha) in stumps:\n            stump_pred = 1 if x[feature_idx] >= threshold else -1\n            stump_pred *= polarity\n            stump_sum += alpha * stump_pred\n\n        final_label = 1 if stump_sum >= 0 else -1\n        predictions.append(final_label)\n\n    return predictions"}
{"task_id": 319, "completion_id": 0, "completion": "import numpy as np\n\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float = 0.01, epochs: int = 1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Convert X, y to NumPy arrays if they are lists\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Ensure y has shape (m,)\n    if y.ndim > 1:\n        y = y.ravel()\n    \n    m, n = X.shape\n    \n    # Prepend a column of ones for bias\n    X = np.column_stack((np.ones(m), X))  # Now X is (m, n+1)\n    \n    # Initialize theta with zeros\n    theta = np.zeros(n + 1)\n    \n    # Perform SGD\n    for _ in range(epochs):\n        for i in range(m):\n            # Compute prediction\n            y_hat = np.dot(theta, X[i])\n            # Compute error\n            e = y_hat - y[i]\n            # Update weights\n            theta = theta - learning_rate * e * X[i]\n\n    # Round and return as Python list\n    return list(np.round(theta, 4))"}
{"task_id": 321, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    # For reproducibility\n    np.random.seed(42)\n    \n    # Valid characters (space=0, a=1..z=26, A=27..Z=52)\n    valid_chars = \" \" + string.ascii_lowercase + string.ascii_uppercase\n    char_to_idx = {c: i for i, c in enumerate(valid_chars)}\n    idx_to_char = {i: c for i, c in enumerate(valid_chars)}\n    \n    L = len(target)\n    \n    # Fitness function\n    # fitness = 1 / (sum of |p_i - t_i| + 1e-6)\n    def calc_fitness(individual, target_str):\n        diff_sum = 0\n        for c_ind, c_tar in zip(individual, target_str):\n            diff_sum += abs(char_to_idx[c_ind] - char_to_idx[c_tar])\n        return 1.0 / (diff_sum + 1e-6)\n    \n    # Generate a random individual\n    def generate_individual(length):\n        return ''.join(np.random.choice(list(valid_chars), size=length))\n    \n    # Create initial population\n    population = [generate_individual(L) for _ in range(population_size)]\n    \n    # Roulette-wheel selection of two distinct parents\n    def select_two_parents(pop, fits):\n        probs = fits / fits.sum()\n        idxs = np.random.choice(len(pop), size=2, replace=False, p=probs)\n        return pop[idxs[0]], pop[idxs[1]]\n    \n    # Single-point crossover\n    def crossover(parent1, parent2):\n        point = np.random.randint(0, L + 1)\n        child1 = parent1[:point] + parent2[point:]\n        child2 = parent2[:point] + parent1[point:]\n        return child1, child2\n    \n    # Mutation\n    def mutate(individual, rate):\n        new_chars = []\n        for c in individual:\n            if np.random.random() < rate:\n                # Replace with random character\n                new_chars.append(np.random.choice(list(valid_chars)))\n            else:\n                new_chars.append(c)\n        return ''.join(new_chars)\n    \n    best_string = None\n    best_fitness = -float('inf')\n    \n    for _ in range(iterations):\n        # Evaluate fitness\n        fitnesses = np.array([calc_fitness(ind, target) for ind in population])\n        \n        # Check if we already have the target\n        max_index = np.argmax(fitnesses)\n        if fitnesses[max_index] > best_fitness:\n            best_fitness = fitnesses[max_index]\n            best_string = population[max_index]\n        \n        if best_string == target:\n            # Target found, stop early\n            break\n        \n        # Form next generation\n        new_population = []\n        for __ in range(population_size // 2):\n            # Select parents\n            p1, p2 = select_two_parents(population, fitnesses)\n            # Crossover\n            c1, c2 = crossover(p1, p2)\n            # Mutation\n            c1 = mutate(c1, mutation_rate)\n            c2 = mutate(c2, mutation_rate)\n            new_population.extend([c1, c2])\n        \n        # Replace old population\n        population = new_population\n    \n    return best_string\n```\n"}
{"task_id": 322, "completion_id": 0, "completion": "import numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n    \n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # Clip predicted probabilities to avoid log(0) issues\n    clipped = np.clip(predicted, EPS, 1 - EPS)\n\n    # Compute the binary cross-entropy\n    loss = -np.mean(actual * np.log(clipped) + (1 - actual) * np.log(1 - clipped))\n\n    # Round and return the loss\n    return round(float(loss), 4)"}
{"task_id": 324, "completion_id": 0, "completion": "import numpy as np\n\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    # If lengths don't match, return empty\n    if len(x) != len(y):\n        return []\n    \n    rows, cols, channels = X.shape\n    results = []\n    \n    for xi, yi in zip(x, y):\n        # Clamp coordinates to the valid range\n        xi = max(0, min(xi, cols - 1))\n        yi = max(0, min(yi, rows - 1))\n        \n        # Integer parts (floor)\n        x0 = int(np.floor(xi))\n        y0 = int(np.floor(yi))\n        \n        # Fractions within the cell\n        dx = xi - x0\n        dy = yi - y0\n        \n        # Neighboring indices (clamping for boundary)\n        x1 = min(x0 + 1, cols - 1)\n        y1 = min(y0 + 1, rows - 1)\n        \n        # Accumulate interpolated result for each channel\n        pixel_values = []\n        for c in range(channels):\n            # Fetch corner samples\n            p00 = X[y0, x0, c]\n            p01 = X[y0, x1, c]\n            p10 = X[y1, x0, c]\n            p11 = X[y1, x1, c]\n            \n            # Bilinear interpolation\n            top = (1 - dx) * p00 + dx * p01\n            bottom = (1 - dx) * p10 + dx * p11\n            interpolated = (1 - dy) * top + dy * bottom\n            \n            # Round to 4 decimals\n            pixel_values.append(round(interpolated, 4))\n        \n        results.append(pixel_values)\n    \n    # Return as a plain Python list (with possible nested lists) \n    return np.array(results).tolist()"}
{"task_id": 326, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"\n    Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample x is\n        f(x) = \u03a3 ((alpha_i * y_i * K(x_i, x)) ) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers alpha_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term b.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in X.\n    \"\"\"\n    # Convert X and support_vectors to numpy arrays\n    X_arr = np.array(X)\n    sv_arr = np.array(support_vectors)\n\n    # If gamma is not specified, default to 1 / n_features\n    n_query, n_features = X_arr.shape\n    if gamma is None:\n        gamma = 1.0 / n_features\n\n    predictions = []\n    for x in X_arr:\n        # Compute the decision function for each sample\n        decision_value = 0.0\n        for alpha_i, y_i, sv in zip(lagr_multipliers, support_vector_labels, sv_arr):\n            if kernel == \"linear\":\n                # Linear kernel: K(u, v) = u^T v\n                k_val = np.dot(x, sv)\n            elif kernel == \"polynomial\":\n                # Polynomial kernel: K(u, v) = (gamma * u^T v + coef)^power\n                k_val = (gamma * np.dot(x, sv) + coef) ** power\n            elif kernel == \"rbf\":\n                # RBF kernel: K(u, v) = exp(-gamma * ||u - v||^2)\n                diff = x - sv\n                k_val = np.exp(-gamma * np.dot(diff, diff))\n            else:\n                raise ValueError(f\"Unknown kernel option: {kernel}\")\n\n            decision_value += alpha_i * y_i * k_val\n\n        # Add the intercept term\n        decision_value += intercept\n\n        # Convert the decision value to a predicted label\n        # In the rare event decision_value == 0, we predict 1\n        label = 1 if decision_value >= 0 else -1\n        predictions.append(label)\n\n    return predictions"}
{"task_id": 328, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\n```"}
{"task_id": 329, "completion_id": 0, "completion": "import numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # If N or fs is invalid, return an empty list\n    if N <= 0 or fs <= 0:\n        return []\n    \n    # Compute frequencies\n    if positive_only:\n        # Only the non-negative frequencies\n        freq_array = np.arange(N//2 + 1) * (fs / N)\n    else:\n        # Mimic NumPy's fftfreq for the full range\n        freq_array = np.fft.fftfreq(N, d=1.0/fs)\n    \n    # Round each frequency to 4 decimal places and convert to Python list\n    return [round(float(freq), 4) for freq in freq_array]"}
{"task_id": 330, "completion_id": 0, "completion": "def update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n\n    # Create shallow copies so the originals are not mutated\n    new_parameters = dict(parameters)\n    new_hyperparameters = dict(hyperparameters)\n\n    # Step 1: Flatten the summary dictionary, merging sub-dicts under \"parameters\" and \"hyperparameters\"\n    merged_updates = {}\n    for key, val in summary_dict.items():\n        if key == \"parameters\" and isinstance(val, dict):\n            # Merge into the top level\n            merged_updates.update(val)\n        elif key == \"hyperparameters\" and isinstance(val, dict):\n            # Merge into the top level\n            merged_updates.update(val)\n        else:\n            # Other top-level keys remain as they are\n            merged_updates[key] = val\n\n    # Step 2: Overwrite entries in new_parameters or new_hyperparameters if their keys exist\n    for k, v in merged_updates.items():\n        if k in new_parameters:\n            new_parameters[k] = v\n        elif k in new_hyperparameters:\n            new_hyperparameters[k] = v\n        # Ignore keys that belong to neither dictionary\n\n    return new_parameters, new_hyperparameters"}
{"task_id": 331, "completion_id": 0, "completion": "import numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n\n    n_samples, n_estimators = predictions.shape\n    \n    # List to store squared errors for samples with at least one OOB prediction\n    squared_errors = []\n\n    for i in range(n_samples):\n        # Trees for which sample i is out-of-bag\n        oob_trees = oob_mask[i]\n        if np.any(oob_trees):  # If there's at least one OOB tree\n            # Average over OOB predictions\n            oob_pred_mean = predictions[i, oob_trees].mean()\n            # Compute squared error\n            se = (oob_pred_mean - y_true[i]) ** 2\n            squared_errors.append(se)\n\n    # If no samples had OOB predictions\n    if len(squared_errors) == 0:\n        return -1\n\n    # Compute mean of squared errors\n    mse_oob = np.mean(squared_errors)\n    return float(round(mse_oob, 4))"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Count item support in distinct transactions\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n\n    # Step 2: Discard items whose support is below min_support\n    freq_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    if not freq_items:\n        # If no items are frequent, return just the root\n        return {\"support\": 0, \"children\": {}}\n\n    # Step 3: Create a global ordering: by decreasing support, then alphabetically\n    sorted_items = sorted(freq_items.keys(), key=lambda x: (-freq_items[x], x))\n    # Create a map for fast lookup of each item's position in the order\n    item_order = {item: i for i, item in enumerate(sorted_items)}\n\n    # Step 4: Build the FP-Tree using nested dictionaries\n    root = {\"support\": 0, \"children\": {}}\n\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        filtered = [item for item in set(transaction) if item in freq_items]\n        # Sort by global ordering\n        filtered.sort(key=lambda x: item_order[x])\n\n        # Walk down the tree, updating or creating nodes\n        current_node = root\n        current_node[\"support\"] += 1  # Root is visited by this transaction\n        for item in filtered:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n\n    return root\n```\n"}
{"task_id": 333, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float = 0.1, num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    # 1. and 2. Standardise every feature column\n    X_mean = np.mean(X, axis=0)\n    X_std = np.std(X, axis=0) + 1e-8\n    X_norm = (X - X_mean) / X_std\n\n    # 3. Augment with a bias column of ones\n    m, n = X_norm.shape\n    X_aug = np.hstack([np.ones((m, 1)), X_norm])\n\n    # 4. Initialise model parameters and apply batch gradient descent\n    theta = np.zeros(X_aug.shape[1])\n\n    for _ in range(num_iter):\n        z = X_aug @ theta\n        # Hypothesis = sigmoid(z)\n        h = 1.0 / (1.0 + np.exp(-z))\n        # Gradient computation and parameter update\n        gradient = (1.0 / m) * (X_aug.T @ (h - y))\n        theta -= alpha * gradient\n\n    # 5. Compute probabilities and convert to class labels\n    z_final = X_aug @ theta\n    probs = 1.0 / (1.0 + np.exp(-z_final))\n    predicted_labels = (probs >= 0.5).astype(int)\n\n    # 6. Return predicted labels as a Python list\n    return predicted_labels.tolist()"}
{"task_id": 334, "completion_id": 0, "completion": "```python\nimport math\n\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n\n    factor = scale_factor * (model_dim ** -0.5)\n    lr = factor * min(step ** -0.5, step * (warmup_steps ** -1.5))\n\n    return round(lr, 9)\n```"}
{"task_id": 335, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    name = name.lower()\n\n    if name == \"zeros\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.zeros(shape)\n        return initializer\n\n    elif name == \"ones\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.ones(shape) * scale\n        return initializer\n\n    elif name == \"normal\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n        return initializer\n\n    elif name == \"glorot_uniform\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            if len(shape) < 2:\n                raise ValueError(\"glorot_uniform is not defined for 1D shapes.\")\n            fan_in, fan_out = shape[0], shape[1]\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(low=-limit, high=limit, size=shape)\n        return initializer\n\n    else:\n        raise ValueError(f\"Unrecognized initializer: {name}\")\n```\n"}
{"task_id": 336, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | np.ndarray,\n                  Y: list[list[int | float]] | np.ndarray | None = None,\n                  c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n\n    # Convert X to a NumPy array of floats\n    X = np.array(X, dtype=float)\n    \n    # If Y is None, set it to X, otherwise convert to a NumPy array of floats\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n\n    # Check if the number of columns match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # If X is empty, return an empty list (shape (0, C) => no rows)\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the linear kernel: K = X dot Y^T + c0\n    K = X.dot(Y.T) + c0\n\n    # Round to 4 decimal places\n    K = np.round(K, 4)\n\n    # Convert result to a list of lists\n    return K.tolist()"}
{"task_id": 337, "completion_id": 0, "completion": "import numpy as np\n\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"\n    Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    # If either coordinate list is empty, return an empty list\n    if not x or not y:\n        return []\n\n    # Extract dimensions of the image\n    rows, cols, channels = X.shape\n\n    # Round to nearest integer using NumPy's banker\u2019s rounding\n    x_rounded = np.around(x).astype(int)\n    y_rounded = np.around(y).astype(int)\n\n    # Clip the indices so they do not go out of image bounds\n    x_clipped = np.clip(x_rounded, 0, cols - 1)\n    y_clipped = np.clip(y_rounded, 0, rows - 1)\n\n    # Gather the pixel values\n    interpolated_values = X[y_clipped, x_clipped, :]\n\n    # Return as a Python list\n    return interpolated_values.tolist()"}
{"task_id": 338, "completion_id": 0, "completion": "import numpy as np\n\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"\n    Implements the closed-form solution of Ridge Regression (L2-regularised linear regression).\n    \n    Parameters:\n    -----------\n    X : 2D list or np.ndarray of shape (n, d)\n        Feature matrix.\n    y : 1D list or np.ndarray of shape (n,)\n        Target vector.\n    reg_factor : float, >= 0\n        Regularisation factor (alpha).\n\n    Returns:\n    --------\n    weights : list of length (d + 1)\n        The bias term comes first, followed by the coefficients for each feature,\n        each rounded to 4 decimal places.\n    \"\"\"\n    # Convert X, y to NumPy arrays if they aren't already\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    n, d = X.shape\n    \n    # Append a column of ones to X for the intercept\n    X_bar = np.hstack([np.ones((n, 1)), X])  # shape (n, d+1)\n    \n    # Compute the ridge solution w = (X\u0304^T X\u0304 + \u03b1 I)^{-1} X\u0304^T y\n    I = np.eye(d + 1)  # Identity matrix of size (d+1, d+1)\n    w = np.linalg.inv(X_bar.T @ X_bar + reg_factor * I) @ (X_bar.T @ y)\n    \n    # Round each coefficient to 4 decimal places and return as a list\n    return [round(coeff, 4) for coeff in w]"}
{"task_id": 339, "completion_id": 0, "completion": "from collections import Counter\n\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    \n    counts = Counter(y)\n    max_frequency = max(counts.values())\n    \n    # Return the first element in y that has the max frequency\n    for elem in y:\n        if counts[elem] == max_frequency:\n            return elem"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter (starting at 1).\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) as\n        python lists, each rounded to 8 decimal places.\n\n        If the gradient is exactly zero (all entries zero), the parameter\n        remains unchanged, while the moments are still updated.\n    \"\"\"\n    # Update the first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Bias-corrected estimates\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n\n    # If the entire gradient is exactly zero, leave parameter unchanged;\n    # otherwise perform the Adam parameter update\n    if np.all(grad == 0):\n        param_prime = param\n    else:\n        param_prime = param - lr * (m_hat_t / (np.sqrt(v_hat_t) + eps))\n\n    # Round and convert to Python lists\n    updated_param = np.round(param_prime, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n\n    return (updated_param, new_m, new_v)\n```"}
{"task_id": 342, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n\n    # Convert to numpy arrays\n    arr_x = np.array(x, dtype=float)\n    arr_y = np.array(y, dtype=float)\n\n    # Compute Manhattan distance\n    distance = np.sum(np.abs(arr_x - arr_y))\n\n    # Round to 4 decimal places\n    return float(round(distance, 4))\n```"}
{"task_id": 343, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                        rewards: list[float] | np.ndarray,\n                        retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Number of samples to keep\n    N = theta_samples.shape[0]\n    K = int(retain_prcnt * N)\n\n    # Get indices of top-K rewards\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:K]\n\n    # Gather elite samples\n    elite_samples = theta_samples[elite_indices]\n\n    # Compute mean and variance along each dimension\n    mean_vec = np.mean(elite_samples, axis=0)\n    var_vec = np.var(elite_samples, axis=0)  # Maximum-likelihood variance\n\n    # Round to 4 decimals and convert to Python lists\n    mean_rounded = np.round(mean_vec, 4).tolist()\n    var_rounded = np.round(var_vec, 4).tolist()\n\n    return mean_rounded, var_rounded"}
{"task_id": 344, "completion_id": 0, "completion": "import heapq\n\nclass _Node:\n    \"\"\"Internal class to represent a node in the Huffman tree.\"\"\"\n    __slots__ = (\"freq\", \"token\", \"left\", \"right\")\n    def __init__(self, freq: int, token: str = \"\", left=None, right=None):\n        self.freq = freq\n        self.token = token\n        self.left = left\n        self.right = right\n\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    # 1. Count the frequency of each token\n    freq_map = {}\n    for tok in tokens:\n        freq_map[tok] = freq_map.get(tok, 0) + 1\n\n    # Edge cases\n    if not freq_map:\n        return {}\n    if len(freq_map) == 1:\n        # If there's only one unique token, assign code '0'\n        unique_token = next(iter(freq_map))\n        return {unique_token: \"0\"}\n\n    # 2. Build a min-heap of (frequency, token, node)\n    # For deterministic ordering, compare first by freq then by token (lexical).\n    heap = []\n    for tok, f in freq_map.items():\n        node = _Node(f, tok)\n        heap.append((f, tok, node))\n    heapq.heapify(heap)\n\n    # 3. Build the Huffman tree by repeatedly merging the two smallest-frequency nodes\n    while len(heap) > 1:\n        f1, t1, n1 = heapq.heappop(heap)\n        f2, t2, n2 = heapq.heappop(heap)\n        parent_freq = f1 + f2\n        # Internal node has an empty string token per instructions\n        parent_node = _Node(parent_freq, \"\", left=n1, right=n2)\n        # Push merged node back into heap\n        heapq.heappush(heap, (parent_freq, \"\", parent_node))\n\n    # 4. Traverse the Huffman tree to get the codes\n    # There will be exactly one element in the heap now\n    _, _, root = heap[0]\n    codes = {}\n\n    def _traverse(node: _Node, prefix: str):\n        \"\"\"Helper function to traverse the Huffman tree and build the codes.\"\"\"\n        # If this node is a leaf (no children), record the code\n        if not node.left and not node.right:\n            codes[node.token] = prefix\n            return\n        # Otherwise, traverse children\n        if node.left:\n            _traverse(node.left, prefix + \"0\")\n        if node.right:\n            _traverse(node.right, prefix + \"1\")\n\n    _traverse(root, \"\")\n    return codes"}
{"task_id": 345, "completion_id": 0, "completion": "import numpy as np\n\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"\n    Predict targets for X_test using Bayesian linear regression.\n\n    The function adds an intercept, computes the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and returns the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n\n    # 1. Add intercept columns (a column of ones) to X_train and X_test\n    ones_train = np.ones((X_train.shape[0], 1))\n    X_train_aug = np.hstack([ones_train, X_train])\n\n    ones_test = np.ones((X_test.shape[0], 1))\n    X_test_aug = np.hstack([ones_test, X_test])\n\n    # 2. Compute the posterior mean of the weight vector\n    #    \u03bc_n = (X\u1d40X + \u03a9\u2080)\u207b\u00b9 (X\u1d40y + \u03a9\u2080 \u03bc\u2080)\n    xtx = X_train_aug.T @ X_train_aug\n    xty = X_train_aug.T @ y_train\n    posterior_precision = xtx + omega0\n    posterior_mean = np.linalg.inv(posterior_precision) @ (xty + omega0 @ mu0)\n\n    # 3. Predict on the test set using the posterior mean\n    predictions = X_test_aug @ posterior_mean\n\n    # Round to four decimals and convert to a Python list\n    predictions_rounded = np.round(predictions, 4).tolist()\n\n    return predictions_rounded"}
{"task_id": 346, "completion_id": 0, "completion": "import numpy as np\n\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array\n    arr = np.asarray(y)\n    \n    # Count the occurrences of each unique label\n    unique_labels, counts = np.unique(arr, return_counts=True)\n    \n    # If there is only one unique label, entropy is zero\n    if len(unique_labels) == 1:\n        return 0.0\n    \n    # Compute probabilities\n    p = counts / np.sum(counts)\n    \n    # Compute Shannon entropy\n    # Note: p_i * log2(p_i) is zero when p_i is zero, so no skipping is needed if the array has no zeros.\n    entropy_value = -np.sum(p * np.log2(p))\n    \n    # Return rounded value\n    return round(float(entropy_value), 4)"}
{"task_id": 347, "completion_id": 0, "completion": "import numpy as np\n\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == \"C\":\n        # For critic loss, Y_real and gradInterp must not be None\n        if Y_real is None or gradInterp is None:\n            raise ValueError(\"Must provide Y_real and gradInterp for critic loss\")\n\n        # Critic loss: E[D(x_fake)] - E[D(x_real)] + \u03bb * E[(\u2016\u2207D(x_interp)\u2016\u2082 - 1)\u00b2]\n        loss_critic = np.mean(Y_fake) - np.mean(Y_real)\n\n        # Compute gradient penalty\n        # L2 norm across all dimensions except the batch dimension\n        grad_norm = np.linalg.norm(gradInterp, axis=tuple(range(1, gradInterp.ndim)))\n        gp = np.mean((grad_norm - 1.0)**2)\n        loss_critic += lambda_ * gp\n\n        return float(round(loss_critic, 4))\n\n    elif module == \"G\":\n        # Generator loss: - E[D(x_fake)]\n        loss_gen = -np.mean(Y_fake)\n        return float(round(loss_gen, 4))\n\n    else:\n        raise ValueError(\"module must be either 'C' or 'G'\")"}
{"task_id": 348, "completion_id": 0, "completion": "import numpy as np\n\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    A square matrix X is symmetric if X == X^T within a given tolerance.\n    It is positive-definite if all its eigenvalues are strictly greater\n    than a certain threshold (1e-8 in this case).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if X is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    # 1. Check if X is square.\n    if X.ndim != 2 or X.shape[0] != X.shape[1]:\n        return False\n\n    # 2. Check if X is symmetric within the tolerance.\n    if not np.allclose(X, X.T, atol=1e-8):\n        return False\n\n    # 3. Compute eigenvalues (efficient for symmetric matrices).\n    eigvals = np.linalg.eigvalsh(X)\n\n    # 4. Check if all eigenvalues are strictly greater than 1e-8.\n    return np.all(eigvals > 1e-8)"}
{"task_id": 350, "completion_id": 0, "completion": "import numpy as np\n\ndef polynomial_ridge_regression(\n    X: list[float | int],\n    y: list[float | int],\n    degree: int,\n    reg_factor: float\n) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n\n    # Convert input lists to numpy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Build the design matrix using Vandermonde matrix, with columns [1, x, x^2, ..., x^degree]\n    # \"increasing=True\" makes sure the columns go from x^0, x^1, ... to x^degree\n    X_design = np.vander(X_arr, degree+1, increasing=True)\n\n    # Compute the ridge regression closed-form solution:\n    # w = (X\u1d40\u00b7X + \u03bbI)\u207b\u00b9 \u00b7 X\u1d40\u00b7y\n    # shape of I should match (degree+1, degree+1)\n    I = np.eye(degree+1)\n    w = np.linalg.inv(X_design.T @ X_design + reg_factor * I) @ (X_design.T @ y_arr)\n\n    # Round coefficients to 4 decimal places and return as a list\n    return [round(coeff, 4) for coeff in w]"}
{"task_id": 351, "completion_id": 0, "completion": "import numpy as np\n\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    p_h, p_w = pool_shape\n    N, C, H, W = X.shape\n\n    # Compute the output dimensions\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n\n    # Prepare the output array\n    out = np.empty((N, C, out_h, out_w), dtype=X.dtype)\n\n    # Perform max pooling\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * stride\n                    h_end = h_start + p_h\n                    w_start = j * stride\n                    w_end = w_start + p_w\n\n                    # Extract the pooling region and compute the max value\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    out[n, c, i, j] = np.max(window)\n\n    # Return the pooled result as a nested Python list\n    return out.tolist()"}
{"task_id": 353, "completion_id": 0, "completion": "import math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places, or 0.0 if there are\n        no labels or all labels are identical.\n    \"\"\"\n    counts = Counter(labels)\n    total_count = sum(counts.values())\n    \n    # Special case: If there are no labels, return 0.0\n    if total_count == 0:\n        return 0.0\n    \n    entropy_value = 0.0\n    for count in counts.values():\n        p = count / total_count\n        # By definition, p * log2(p) is taken to be 0 if p == 0\n        # so we only compute if p > 0.\n        if p > 0:\n            entropy_value -= p * math.log2(p)\n    \n    # Round to 5 decimal places\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "completion": "import numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation) using im2col + GEMM.\n    \n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch)\n            representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch)\n            containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list (nested) obtained through\n        numpy.ndarray.tolist().\n    \"\"\"\n    # --------------------------------------------------------------------------\n    # 1) Parse shapes and parameters\n    # --------------------------------------------------------------------------\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kr, kc, kernel_in_ch, out_ch = W.shape\n    assert kernel_in_ch == in_ch, \"Kernel and input channels must match.\"\n\n    # Effective (dilated) kernel size\n    # e.g. if dilation=2 and kernel=3, the effective kernel covers 1 + (3-1)*(2+1)=1+6=7 cells along that dimension\n    eff_kr = (kr - 1) * (dilation + 1) + 1\n    eff_kc = (kc - 1) * (dilation + 1) + 1\n\n    # --------------------------------------------------------------------------\n    # 2) Convert the padding specification into a 4-tuple: (top, bottom, left, right)\n    # --------------------------------------------------------------------------\n    def compute_same_pad(in_size, kernel_eff, stride):\n        \"\"\"\n        For 'same' mode, compute (pad_before, pad_after)\n        so that output dimension matches input dimension exactly:\n            out_size = in_size\n        with out_size = floor((in_size + pad_before + pad_after - kernel_eff)/stride) + 1\n        We solve for pad_before + pad_after.\n        \"\"\"\n        # Minimum total padding for 'same' (may need one extra if it doesn't divide evenly)\n        # [ (in_size - 1)*stride + kernel_eff - in_size ]\n        needed = max(0, (in_size - 1) * stride + kernel_eff - in_size)\n        pad_before = needed // 2\n        pad_after  = needed - pad_before\n        return pad_before, pad_after\n\n    # Convert pad into 4-tuple of the form (pad_top, pad_bottom, pad_left, pad_right)\n    if isinstance(pad, str) and pad.lower() == 'same':\n        # Compute row padding\n        pr1, pr2 = compute_same_pad(in_rows, eff_kr, stride)\n        # Compute col padding\n        pc1, pc2 = compute_same_pad(in_cols, eff_kc, stride)\n    elif isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr, pc = pad\n            pr1 = pr2 = pr\n            pc1 = pc2 = pc\n        elif len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n        else:\n            # Behavior undefined by specification if invalid\n            # We'll just do something trivial (no padding).\n            pr1 = pr2 = pc1 = pc2 = 0\n    else:\n        # Behavior undefined by specification if invalid\n        pr1 = pr2 = pc1 = pc2 = 0\n\n    # --------------------------------------------------------------------------\n    # 3) Zero-pad the input\n    # --------------------------------------------------------------------------\n    padded_rows = in_rows + pr1 + pr2\n    padded_cols = in_cols + pc1 + pc2\n    X_padded = np.zeros((n_ex, padded_rows, padded_cols, in_ch), dtype=X.dtype)\n    X_padded[:, pr1:pr1+in_rows, pc1:pc1+in_cols, :] = X\n\n    # --------------------------------------------------------------------------\n    # 4) Output spatial size\n    # --------------------------------------------------------------------------\n    out_rows = (padded_rows - eff_kr) // stride + 1\n    out_cols = (padded_cols - eff_kc) // stride + 1\n\n    # --------------------------------------------------------------------------\n    # 5) im2col: gather all patches into a 2D matrix\n    #\n    #    Each patch is (kr * kc * in_ch) wide, and we have:\n    #       (n_ex * out_rows * out_cols) patches in total\n    # --------------------------------------------------------------------------\n    n_out = n_ex * out_rows * out_cols\n    patch_size = kr * kc * in_ch\n    cols = np.zeros((n_out, patch_size), dtype=X.dtype)\n    \n    out_index = 0\n    for n in range(n_ex):\n        for r in range(out_rows):\n            row_start = r * stride\n            for c in range(out_cols):\n                col_start = c * stride\n                # Extract the patch with dilation\n                patch = []\n                for i_kr in range(kr):\n                    # The actual row to pick from X_padded\n                    row_i = row_start + i_kr * (dilation + 1)\n                    for i_kc in range(kc):\n                        col_i = col_start + i_kc * (dilation + 1)\n                        # For all in_ch channels\n                        patch.append(X_padded[n, row_i, col_i, :])\n                # Flatten patch to 1D (kr*kc*in_ch)\n                patch_flat = np.concatenate(patch, axis=0)\n                cols[out_index] = patch_flat\n                out_index += 1\n\n    # --------------------------------------------------------------------------\n    # 6) Reshape the filters for GEMM: (kr*kc*in_ch, out_ch)\n    # --------------------------------------------------------------------------\n    W_reshaped = W.reshape(-1, out_ch)  # (kr*kc*in_ch, out_ch)\n\n    # --------------------------------------------------------------------------\n    # 7) Matrix multiply (GEMM) -> produce (n_out, out_ch)\n    # --------------------------------------------------------------------------\n    out_2d = cols @ W_reshaped  # shape: (n_out, out_ch)\n\n    # --------------------------------------------------------------------------\n    # 8) Reshape to final 4D: (n_ex, out_rows, out_cols, out_ch)\n    # --------------------------------------------------------------------------\n    out_4d = out_2d.reshape((n_ex, out_rows, out_cols, out_ch))\n\n    # Return as a nested Python list\n    return out_4d.tolist()"}
{"task_id": 355, "completion_id": 0, "completion": "import numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        \"svd\" to use singular value decomposition or \"eigen\" to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # 1) Mean-center the data\n    X_centered = data - np.mean(data, axis=0)\n    n_samples, n_features = X_centered.shape\n    \n    # Cap n_components to not exceed the feature dimension\n    n_keep = min(n_components, n_features)\n\n    # 2) Obtain principal directions\n    if solver == \"svd\":\n        # SVD on centered data\n        U, S, Vt = np.linalg.svd(X_centered, full_matrices=False)\n        \n        # Right singular vectors (columns of V) are principal directions\n        directions = Vt.T  # shape: (n_features, n_features)\n        \n        # Eigenvalues = (S^2) / (n_samples - 1)\n        eigenvalues = (S**2) / (n_samples - 1)\n        \n        # principal directions are already in descending order thanks to SVD\n        directions = directions[:, :n_keep]\n        eigenvalues = eigenvalues[:n_keep]\n        \n    elif solver == \"eigen\":\n        # Covariance matrix (ddof=1 for sample covariance)\n        cov = np.cov(X_centered, rowvar=False, ddof=1)  # shape: (n_features, n_features)\n        \n        # Eigendecomposition of the symmetric covariance matrix\n        w, v = np.linalg.eigh(cov)\n        \n        # Sort eigenvalues/vectors in descending order\n        idx = np.argsort(w)[::-1]\n        w = w[idx]\n        v = v[:, idx]\n        \n        # Keep top n_keep\n        directions = v[:, :n_keep]  # shape: (n_features, n_keep)\n        eigenvalues = w[:n_keep]\n        \n    else:\n        raise ValueError(\"solver must be either 'svd' or 'eigen'.\")\n\n    # 3) (Already done implicitly: directions/eigenvalues are in descending order)\n    \n    # 4) Sign-fix each retained direction:\n    #    If the first non-zero loading is negative, flip sign of that direction\n    #    and also flip the corresponding column in the projected data.\n    \n    # 5) Project the centered data onto the retained directions\n    scores = X_centered @ directions  # shape: (n_samples, n_keep)\n    \n    for i in range(n_keep):\n        direction = directions[:, i]\n        nonzero_indices = np.nonzero(direction)[0]\n        \n        if nonzero_indices.size > 0:\n            first_nonzero = nonzero_indices[0]\n            if direction[first_nonzero] < 0:\n                directions[:, i] = -direction\n                scores[:, i] = -scores[:, i]\n\n    # Compute explained variance ratio\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = eigenvalues / total_variance if total_variance != 0 else np.zeros_like(eigenvalues)\n\n    # 6) Round final results and convert to Python lists\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded"}
{"task_id": 356, "completion_id": 0, "completion": "Below is a simple implementation of leaf_predict that uses Python\u2019s built-in max function to locate the index of the largest probability when classifier is True; otherwise it simply returns the scalar value:\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # Return the index of the largest probability\n        return max(range(len(leaf.value)), key=lambda i: leaf.value[i])\n    else:\n        # Return the scalar value for regression\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Special case: if K == 1, return the mean of the whole dataset.\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [[round(x, 4) for x in centroid]]\n\n    # Initialize centroids with the first K samples (deterministic).\n    centroids = data[:K].copy()\n\n    tolerance = 1e-6\n    for _ in range(max_iters):\n        # Assign each point to the nearest centroid.\n        # We compute distances from each centroid to all points, shape (K, n_samples),\n        # make it shape (n_samples, K) and find the index of the closest centroid.\n        distances = np.array([np.sqrt(np.sum((data - c) ** 2, axis=1)) for c in centroids])\n        assignments = np.argmin(distances, axis=0)\n\n        new_centroids = centroids.copy()\n        # Recompute each centroid as the mean of the samples assigned to it.\n        # If a centroid loses all assignments, keep it unchanged.\n        for c_idx in range(K):\n            points_in_cluster = data[assignments == c_idx]\n            if len(points_in_cluster) > 0:\n                new_centroids[c_idx] = np.mean(points_in_cluster, axis=0)\n\n        # Check for stop condition (centroid shift within tolerance).\n        shifts = np.sqrt(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if np.all(shifts < tolerance):\n            centroids = new_centroids\n            break\n\n        centroids = new_centroids\n\n    # Sort the final centroids lexicographically and round to 4 decimals.\n    centroids_list = centroids.tolist()\n    centroids_list.sort(key=lambda x: x)  # lexicographic sort\n    return [[round(coord, 4) for coord in c] for c in centroids_list]"}
{"task_id": 358, "completion_id": 0, "completion": "import numpy as np\n\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function returns the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    # Check for length mismatch\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Convert to numpy arrays for easy comparison\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate accuracy\n    correct_predictions = (y_true == y_pred).sum()\n    total_predictions = len(y_true)\n    accuracy_value = correct_predictions / total_predictions\n    \n    # Round to 4 decimal places\n    return round(accuracy_value, 4)"}
{"task_id": 359, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n\n    if derivative:\n        # Gradient: y_pred - y\n        grad = y_pred - y\n        grad_rounded = np.round(grad, 4).tolist()\n        return grad_rounded\n    else:\n        # Loss: -sum(y * log(y_pred + eps))\n        loss = -np.sum(y * np.log(y_pred + eps))\n        return float(np.round(loss, 4))"}
{"task_id": 360, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    # Convert input to a NumPy array (float) and determine length\n    x = np.asarray(frame, dtype=float)\n    N = x.size\n    # Prepare output array\n    c = np.zeros(N, dtype=float)\n    \n    # Precompute index array\n    n = np.arange(N)\n    \n    # Compute DCT-II coefficients naively\n    for k in range(N):\n        c[k] = 2.0 * np.sum(x * np.cos(np.pi * k * (2.0 * n + 1.0) / (2.0 * N)))\n    \n    # Apply orthonormal scaling if requested\n    if orthonormal:\n        c[0] *= 1.0 / np.sqrt(N)\n        for k in range(1, N):\n            c[k] *= np.sqrt(2.0 / N)\n            \n    # Round coefficients to 4 decimal places and return as a list\n    return np.round(c, 4).tolist()\n```"}
{"task_id": 362, "completion_id": 0, "completion": "import numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    arr = np.array(data, dtype=float)\n    \n    # Sum each row\n    row_sums = arr.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if (row_sums == 0).any():\n        return -1\n    \n    # Divide each element by its row sum\n    normalized = arr / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    normalized = np.round(normalized, 4)\n    \n    # Convert the resulting array to a Python list of lists\n    return normalized.tolist()"}
{"task_id": 363, "completion_id": 0, "completion": "from typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_boxes_composite(space: Space) -> bool:\n        \"\"\"Return True if 'space' is a Tuple/Dict whose sub-spaces are all Box.\"\"\"\n        if isinstance(space, Tuple):\n            return all(isinstance(s, Box) for s in space.spaces)\n        if isinstance(space, Dict):\n            return all(isinstance(s, Box) for s in space.spaces.values())\n        return False\n\n    # For the action space:\n    if tuple_action:\n        # We are told it's a Tuple or Dict, so check whether every sub-space is a Box.\n        cont_action = all_boxes_composite(env.action_space)\n    else:\n        # Just check if the space itself is a Box.\n        cont_action = isinstance(env.action_space, Box)\n\n    # For the observation space:\n    if tuple_obs:\n        cont_obs = all_boxes_composite(env.observation_space)\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n\n    return cont_action, cont_obs"}
{"task_id": 364, "completion_id": 0, "completion": "```python\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n```"}
{"task_id": 366, "completion_id": 0, "completion": "import numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n\n    Notes:\n        - The function is fully vectorized (no Python loops over samples).\n        - Any small negative values due to floating point precision are clamped to 0.\n        - The diagonal entries are forced to be 0.0 exactly.\n    \"\"\"\n    # If only one sample, return a 1x1 matrix containing 0.0\n    n_samples = X.shape[0]\n    if n_samples == 1:\n        return [[0.0]]\n\n    # Compute the squared norms of each sample\n    # sum_of_squares will have shape (n_samples, 1)\n    sum_of_squares = np.sum(X**2, axis=1, keepdims=True)\n\n    # Calculate the n\u00d7n distance matrix without loops\n    # D[i, j] = ||X[i]||^2 + ||X[j]||^2 - 2 * X[i]\u00b7X[j]\n    D = sum_of_squares + sum_of_squares.T - 2 * X.dot(X.T)\n\n    # Clamp small negative values to 0 (numerical precision)\n    D[D < 0] = 0.0\n\n    # Force diagonal to be exactly 0.0\n    np.fill_diagonal(D, 0.0)\n\n    # Return as a list of lists of floats\n    return D.tolist()"}
{"task_id": 367, "completion_id": 0, "completion": "import re\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get(\"hyperparameters\", {})\n        self.params.update({k: v for k, v in hp.items() if k != \"id\"})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {\"hyperparameters\": {\"id\": self.__class__.__name__, **self.params}}\n\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n               string description such as 'RBF(gamma=0.5)', or a dictionary with a\n               'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n\n    # --- 1) If param is None, return a default LinearKernel ---\n    if param is None:\n        return LinearKernel()\n\n    # --- 2) If param is already a KernelBase instance, return it as is ---\n    if isinstance(param, KernelBase):\n        return param\n\n    # --- Helper function to parse a string value into int / float / bool / str ---\n    def parse_value(val_str: str) -> Any:\n        val_str = val_str.strip()\n        # Try bool\n        if val_str.lower() == \"true\":\n            return True\n        if val_str.lower() == \"false\":\n            return False\n        # Try int\n        try:\n            return int(val_str)\n        except ValueError:\n            pass\n        # Try float\n        try:\n            return float(val_str)\n        except ValueError:\n            pass\n        # Fall back to string\n        return val_str\n\n    # --- 3) If param is a string, parse it as \"KernelName(...)\" or just \"KernelName\" ---\n    if isinstance(param, str):\n        # Clean up whitespace\n        param = param.strip()\n\n        # Check if the string has the form \"Name(...)\"\n        pattern = r\"^([a-zA-Z]+)(?:\\((.*)\\))?$\"\n        match = re.match(pattern, param, flags=re.IGNORECASE)\n        if not match:\n            raise ValueError(f\"Cannot parse kernel specification from string '{param}'\")\n\n        kernel_name, args_str = match.groups()\n        kernel_name = kernel_name.lower()\n\n        # Prepare a dictionary of parsed keyword arguments\n        kwargs = {}\n        if args_str:\n            # Split on commas to get each \"key=value\" pair\n            for pair in args_str.split(','):\n                pair = pair.strip()\n                if '=' not in pair:\n                    raise ValueError(f\"Invalid format: '{pair}' in '{param}'\")\n                key, val = pair.split('=', 1)\n                kwargs[key.strip()] = parse_value(val.strip())\n\n        # Create the kernel object based on name\n        if kernel_name == \"linear\":\n            return LinearKernel()\n        elif kernel_name == \"polynomial\":\n            return PolynomialKernel(**kwargs)\n        elif kernel_name == \"rbf\":\n            return RBFKernel(**kwargs)\n        else:\n            raise NotImplementedError(f\"Unknown kernel name '{kernel_name}'\")\n\n    # --- 4) If param is a dictionary, we expect \"hyperparameters\" key with \"id\" ---\n    if isinstance(param, dict):\n        # Must have \"hyperparameters\"\n        if \"hyperparameters\" not in param:\n            raise ValueError(\"Dictionary must have 'hyperparameters' key.\")\n        hp = param[\"hyperparameters\"]\n        if \"id\" not in hp:\n            raise ValueError(\"The 'hyperparameters' dictionary must contain an 'id' entry.\")\n\n        kernel_id = hp[\"id\"]\n        # Remaining values in hp (excluding 'id') are constructor kwargs\n        kwargs = {k: v for k, v in hp.items() if k != \"id\"}\n\n        if kernel_id == \"LinearKernel\":\n            return LinearKernel()\n        elif kernel_id == \"PolynomialKernel\":\n            return PolynomialKernel(**kwargs)\n        elif kernel_id == \"RBFKernel\":\n            return RBFKernel(**kwargs)\n        else:\n            raise NotImplementedError(f\"Unknown kernel id '{kernel_id}'\")\n\n    # If we get here, we cannot interpret 'param'\n    raise ValueError(f\"Cannot initialize a kernel from '{param}'\")"}
{"task_id": 368, "completion_id": 0, "completion": "import numpy as np\n\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or -1 when\n               input validation fails.\n    \"\"\"\n    # Convert x, y to NumPy arrays if they aren\u2019t already\n    x = np.array(x)\n    y = np.array(y)\n\n    # 1. Validate that x and y have identical shapes and that p is strictly positive\n    if x.shape != y.shape or p <= 0:\n        return -1\n\n    # 2. Compute the Minkowski distance\n    diff = np.abs(x - y)\n    dist = np.sum(diff ** p) ** (1 / p)\n\n    # 3. Round the result to four decimal places\n    return round(dist, 4)"}
{"task_id": 369, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n\n    # Shape of a single update\n    single_shape = updates[0].shape\n    \n    # Initialize running prediction with zeros\n    running_pred = np.zeros(single_shape, dtype=np.float64)\n    \n    # Aggregate each tree's output\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    # Regression case\n    if regression:\n        return running_pred.round(4)\n    \n    # Classification case\n    else:\n        # Apply softmax along the classes-axis\n        exps = np.exp(running_pred)\n        probs = exps / np.sum(exps, axis=1, keepdims=True)\n        # Return the class with highest probability\n        return np.argmax(probs, axis=1)"}
{"task_id": 370, "completion_id": 0, "completion": "import numpy as np\n\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"\n    TODO: implement\n    Computes the density of each row of X under the multivariate normal \ud835\udca9(\u03bc, \u03a3).\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        A 2D NumPy array of shape (m, n), where m is the number of samples and n is the dimensionality.\n    mu : np.ndarray\n        A 1D NumPy array of length n representing the mean vector.\n    cov : np.ndarray\n        An n x n positive-definite covariance matrix.\n    \n    Returns\n    -------\n    list[float]\n        A list of length m, containing the density values for each sample in X,\n        rounded to 4 decimal places.\n    \"\"\"\n    # Number of dimensions\n    n = X.shape[1]\n    \n    # Precompute constants\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1.0 / np.sqrt((2 * np.pi)**n * det_cov)\n    \n    # Center X by subtracting mu\n    X_centered = X - mu\n    \n    # Compute densities\n    densities = []\n    for row in X_centered:\n        exponent = -0.5 * row @ inv_cov @ row\n        density = norm_const * np.exp(exponent)\n        densities.append(round(density, 4))\n        \n    return densities"}
{"task_id": 371, "completion_id": 0, "completion": "import numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n\n    # ------------------------------------------------------------------\n    # 1) Parse arguments and compute the required padding for each side\n    # ------------------------------------------------------------------\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, w_in_channels, out_channels = W.shape\n\n    if w_in_channels != in_channels:\n        raise ValueError(\"Number of input channels in X and W must match.\")\n    if stride < 1:\n        raise ValueError(\"Stride must be a positive integer.\")\n    if dilation < 0:\n        raise ValueError(\"Dilation must be non-negative.\")\n\n    # Effective kernel size considering dilation\n    # dilation = number of zeros inserted, so spacing is (dilation + 1)\n    effective_kernel = 1 + (kernel_width - 1) * (dilation + 1)\n\n    # Convert the \"pad\" argument into (pad_left, pad_right)\n    if isinstance(pad, int):\n        pad_left, pad_right = pad, pad\n    elif isinstance(pad, tuple):\n        if len(pad) != 2:\n            raise ValueError(\"pad tuple must have length 2.\")\n        pad_left, pad_right = pad\n    elif pad == \"same\":\n        # Mimic TensorFlow's 'SAME' for 1D:\n        # out_len = ceil(signal_length / stride)\n        # total_pad = max(0, (out_len - 1)*stride + effective_kernel - signal_length)\n        # p_left = floor(total_pad/2), p_right = total_pad - p_left\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"Invalid value for 'pad'. Must be int, 2-tuple, or 'same'.\")\n\n    # ------------------------------------------------------------------\n    # 2) Zero-pad the input along the time dimension\n    # ------------------------------------------------------------------\n    # Pad shape specification for np.pad:\n    # ((pad_before_examples, pad_after_examples),\n    #  (pad_before_length,   pad_after_length),\n    #  (pad_before_channels, pad_after_channels))\n    X_padded = np.pad(X,\n                      pad_width=((0, 0),\n                                 (pad_left, pad_right),\n                                 (0, 0)),\n                      mode='constant',\n                      constant_values=0)\n    \n    # New length after padding\n    padded_length = X_padded.shape[1]\n\n    # ------------------------------------------------------------\n    # 3) Compute the output length and create output container\n    # ------------------------------------------------------------\n    # The first valid starting index is 0\n    # The last valid starting index is padded_length - effective_kernel\n    # We step by 'stride'\n    # => number of valid positions = floor((padded_length - effective_kernel)/stride) + 1\n    if padded_length < effective_kernel:\n        # No valid positions at all\n        out_length = 0\n    else:\n        out_length = (padded_length - effective_kernel) // stride + 1\n\n    # Prepare output array of shape (n_examples, out_length, out_channels)\n    out_array = np.zeros((n_examples, out_length, out_channels), dtype=X.dtype)\n\n    # -------------------------------------------------------\n    # 4) Perform cross-correlation (not reversed) computation\n    # -------------------------------------------------------\n    # For each example in the batch\n    for n in range(n_examples):\n        # For each output index along the time dimension\n        # i_out is the index in the \"out_array\",\n        # i_in is the corresponding starting index in X_padded\n        i_out = 0\n        for i_in in range(0, padded_length - effective_kernel + 1, stride):\n            # For each output channel\n            for oc in range(out_channels):\n                # Accumulate over kernel width and input channels\n                val = 0.0\n                for kw in range(kernel_width):\n                    # Index in X_padded along time dimension\n                    x_index = i_in + kw * (dilation + 1)\n                    for ic in range(in_channels):\n                        # cross-correlation: no kernel flip\n                        val += X_padded[n, x_index, ic] * W[kw, ic, oc]\n                # Save the computed value\n                out_array[n, i_out, oc] = val\n            i_out += 1\n\n    # ------------------------------------------------------------------\n    # 5) Return as Python list\n    # ------------------------------------------------------------------\n    return out_array.tolist()"}
{"task_id": 373, "completion_id": 0, "completion": "import numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert y to a NumPy array for convenient processing\n    y_arr = np.array(y, dtype=int)\n\n    # If the array is empty, return 0.0\n    if y_arr.size == 0:\n        return 0.0\n\n    # Get the unique classes and their counts\n    unique_classes, counts = np.unique(y_arr, return_counts=True)\n    total_samples = y_arr.size\n\n    # Compute the relative frequencies (p_c)\n    p_c = counts / total_samples\n\n    # Compute the Gini impurity\n    gini_value = 1.0 - np.sum(p_c**2)\n\n    return round(gini_value, 4)"}
{"task_id": 374, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Target vector of shape (m,).\n        learning_rate (float): The learning rate for gradient descent.\n        n_iterations (int): Number of iterations to run gradient descent.\n    \n    Returns:\n        tuple[list[float], float]: (weights_list, bias) rounded to 4 decimal places,\n                                   or -1 if X and y have inconsistent shapes.\n    \"\"\"\n    # Check for inconsistent data\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    m, n = X.shape\n\n    # 1. Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n\n    # 2. Gradient Descent\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b  # Predictions\n        diff = (y_hat - y)\n        \n        dw = (2 / m) * X.T.dot(diff)\n        db = (2 / m) * np.sum(diff)\n        \n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # 3. Return the learned parameters (rounded)\n    return (theta.round(4).tolist(), round(b, 4))"}
{"task_id": 375, "completion_id": 0, "completion": "import numpy as np\n\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor (n_ex, in_rows, in_cols, in_ch).\n    out_dim : tuple\n        Desired output height and width (out_rows, out_cols).\n    kernel_shape : tuple\n        Height and width of the convolution kernel (fr, fc).\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of \"gaps\" inserted between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple (top, bottom, left, right) indicating how many zero rows\n        and columns must be added to the top, bottom, left and right sides\n        of the input volume.\n\n    Raises\n    ------\n    ValueError\n        If any argument is of the wrong type or if the requested output size\n        is impossible (requires negative padding).\n    \"\"\"\n\n    # -------------------------\n    # 1. Validate the arguments\n    # -------------------------\n    def is_pos_int(x):\n        return isinstance(x, int) and x > 0\n    def is_nonneg_int(x):\n        return isinstance(x, int) and x >= 0\n\n    # X_shape must be a tuple of length 4\n    if not (isinstance(X_shape, tuple) and len(X_shape) == 4):\n        raise ValueError(\"X_shape must be a tuple of length 4.\")\n    n_ex, in_rows, in_cols, in_ch = X_shape\n    # out_dim must be a tuple of length 2\n    if not (isinstance(out_dim, tuple) and len(out_dim) == 2):\n        raise ValueError(\"out_dim must be a tuple (out_rows, out_cols).\")\n    out_rows, out_cols = out_dim\n    if not (is_pos_int(out_rows) and is_pos_int(out_cols)):\n        raise ValueError(\"out_dim must contain positive integers.\")\n    # kernel_shape must be a tuple of length 2\n    if not (isinstance(kernel_shape, tuple) and len(kernel_shape) == 2):\n        raise ValueError(\"kernel_shape must be a tuple (fr, fc).\")\n    fr, fc = kernel_shape\n    if not (is_pos_int(fr) and is_pos_int(fc)):\n        raise ValueError(\"kernel_shape must contain positive integers.\")\n    # stride must be a positive integer\n    if not is_pos_int(stride):\n        raise ValueError(\"stride must be a positive integer.\")\n    # dilation must be a nonnegative integer\n    if not is_nonneg_int(dilation):\n        raise ValueError(\"dilation must be a non-negative integer.\")\n\n    # -----------------------------------------------------\n    # 2. Compute the 'effective' filter size with dilation.\n    # -----------------------------------------------------\n    # _fr = fr * (d+1) - d\n    # _fc = fc * (d+1) - d\n    _fr = fr * (dilation + 1) - dilation\n    _fc = fc * (dilation + 1) - dilation\n\n    # -----------------------------------------------------\n    # 3. Solve for required total row padding and column padding\n    # -----------------------------------------------------\n    # from the formula:\n    # out_rows = 1 + (in_rows + up_pad + down_pad - _fr) // stride.\n    # So we need:\n    # (in_rows + up_pad + down_pad - _fr) = stride*(out_rows - 1) + something\n    # But for smallest up_pad+down_pad, we set them exactly so that\n    # (in_rows + up_pad + down_pad - _fr) = stride*(out_rows - 1)\n    # => up_pad + down_pad = needed_row_pad\n    #\n    # similarly for columns.\n    #\n    # if needed_row_pad < 0 => impossible to get that out_rows\n    # if needed_col_pad < 0 => impossible to get that out_cols\n\n    needed_row_pad = stride * (out_rows - 1) + _fr - in_rows\n    needed_col_pad = stride * (out_cols - 1) + _fc - in_cols\n\n    # If the required total padding is negative, it's impossible:\n    if needed_row_pad < 0 or needed_col_pad < 0:\n        raise ValueError(\"Requested output size is impossible with the given \"\n                         \"input size, kernel, stride, and dilation.\")\n\n    # -----------------------------------------------------\n    # 4. Distribute the total required padding top/bottom and left/right\n    # -----------------------------------------------------\n    # as per \"same\" convention, if total padding is odd, add the extra pad\n    # to the bottom (for rows) or right (for cols).\n    #\n    # up_pad = needed_row_pad // 2\n    # down_pad = needed_row_pad - up_pad\n    # left_pad = needed_col_pad // 2\n    # right_pad = needed_col_pad - left_pad\n    #\n    # all must be nonnegative\n    up_pad = needed_row_pad // 2\n    down_pad = needed_row_pad - up_pad\n    left_pad = needed_col_pad // 2\n    right_pad = needed_col_pad - left_pad\n\n    # Double check non-negativity\n    for val in (up_pad, down_pad, left_pad, right_pad):\n        if val < 0:\n            raise ValueError(\"Negative padding calculated, which is invalid.\")\n\n    return (up_pad, down_pad, left_pad, right_pad)"}
{"task_id": 376, "completion_id": 0, "completion": "import numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert X to a NumPy array\n    arr = np.array(X, dtype=float)\n\n    # Check if the array is square\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n\n    # Check if the array is equal to its transpose within a small tolerance\n    return np.allclose(arr, arr.T, atol=1e-8)"}
{"task_id": 377, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic (binomial deviance) loss used in Gradient Boosting.\n\n    The true labels in y must be in {0, 1}. They are mapped to {\u22121, 1} by y' = 2*y \u2212 1.\n    The current prediction scores are in f.\n\n    The negative gradient for each sample i is given by:\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n\n    Parameters:\n    -----------\n    y : list\n        A list of binary class labels, each value in {0, 1}.\n    f : list\n        A list of current prediction scores (real numbers).\n\n    Returns:\n    --------\n    list\n        A list of negative gradient values, rounded to 4 decimal places. \n        Returns -1 if the label list contains values other than {0, 1}.\n    \"\"\"\n    # Check if all labels are 0 or 1\n    if any(label not in [0, 1] for label in y):\n        return -1\n\n    # Convert inputs to numpy arrays\n    y_array = np.array(y, dtype=float)\n    f_array = np.array(f, dtype=float)\n\n    # Compute y' (map {0,1} to {\u22121,1})\n    y_prime = 2 * y_array - 1\n\n    # Compute the negative gradient component-wise\n    gradients = y_prime / (1.0 + np.exp(y_prime * f_array))\n\n    # Round each value to 4 decimal places and convert to a Python list\n    return np.round(gradients, 4).tolist()"}
{"task_id": 378, "completion_id": 0, "completion": "```python\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0\n```"}
{"task_id": 379, "completion_id": 0, "completion": "def sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # We create a separate sorted list so as not to modify the original list\n    sorted_nodes = sorted(nodes, key=lambda n: (n['priority'], n['entry_id']))\n    # Return only the 'key' fields from the sorted list\n    return [node['key'] for node in sorted_nodes]"}
{"task_id": 380, "completion_id": 0, "completion": "import numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    SELU(x) = scale \u00b7 ELU(x, \u03b1) \n    where ELU(x, \u03b1) = x if x > 0, \u03b1(e^x \u2013 1) otherwise.\n\n    The recommended constants (from the original paper) are\n    \u03b1 = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array\n    X = np.asanyarray(x, dtype=float)\n\n    if order == 0:\n        # SELU function\n        # x > 0 => scale*x\n        # x <= 0 => scale*alpha*(exp(x) - 1)\n        out = np.where(X > 0, scale * X, scale * alpha * (np.exp(X) - 1))\n    elif order == 1:\n        # First derivative\n        # x > 0 => scale\n        # x <= 0 => scale*alpha*exp(x)\n        out = np.where(X > 0, scale, scale * alpha * np.exp(X))\n    elif order == 2:\n        # Second derivative\n        # x > 0 => 0\n        # x <= 0 => scale*alpha*exp(x)\n        out = np.where(X > 0, 0.0, scale * alpha * np.exp(X))\n    else:\n        raise ValueError(\"Order must be 0, 1 or 2.\")\n\n    # Round to 4 decimals\n    out = np.round(out, 4)\n\n    # Convert to Python list (scalar if input was scalar)\n    if np.isscalar(x):\n        return out.item()\n    return out.tolist()"}
{"task_id": 382, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on X_train, y_train and predict\n    the labels of X_test.\n\n    The implementation uses the formulae described in the task statement:\n      1. Priors P(Y=c) are class frequencies.\n      2. Likelihoods follow independent Gaussians per feature.\n      3. Posterior is the product of prior and feature-wise likelihoods.\n    \"\"\"\n    epsilon = 1e-4  # small constant to avoid division by zero\n    \n    # Identify the distinct classes\n    classes = np.unique(y_train)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n    \n    # Precompute class-specific statistics\n    priors = np.zeros(n_classes)\n    means = np.zeros((n_classes, n_features))\n    vars_ = np.zeros((n_classes, n_features))\n    \n    for i, cls in enumerate(classes):\n        X_c = X_train[y_train == cls]\n        priors[i] = X_c.shape[0] / X_train.shape[0]   # P(Y=c)\n        means[i] = X_c.mean(axis=0)                  # per-feature mean\n        vars_[i] = X_c.var(axis=0)                   # per-feature variance\n    \n    # Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        # Compute posterior for each class\n        posteriors = []\n        for i in range(n_classes):\n            # Start with the class prior\n            posterior = priors[i]\n            # Multiply by the Gaussian likelihood of each feature\n            for f in range(n_features):\n                var = vars_[i, f] + epsilon\n                mean = means[i, f]\n                # Gaussian formula\n                coeff = 1.0 / math.sqrt(2.0 * math.pi * var)\n                exponent = math.exp(-((x[f] - mean)**2) / (2.0 * var))\n                posterior *= coeff * exponent\n            posteriors.append(posterior)\n        \n        # Choose the class with the maximum posterior\n        best_class = classes[np.argmax(posteriors)]\n        predictions.append(best_class)\n    \n    # Return list of predicted labels\n    return predictions"}
{"task_id": 383, "completion_id": 0, "completion": "def find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:  # y_i == y_j\n        L = max(0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n\n    return [round(L, 4), round(H, 4)]"}
{"task_id": 384, "completion_id": 0, "completion": "import numpy as np\n\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if 'k' is invalid.\n    \"\"\"\n    # Convert L to a NumPy array\n    L = np.array(L, dtype=float)\n\n    # Check if k is invalid\n    n = L.shape[0]\n    if k > n:\n        return -1  # Invalid request\n\n    # Compute eigenvalues and eigenvectors\n    # (Laplacians are typically symmetric, but we'll use eig() to be general)\n    evals, evecs = np.linalg.eig(L)\n\n    # Use only the real parts\n    evals = evals.real\n    evecs = evecs.real\n\n    # Sort eigenvalues and get indices of the k smallest\n    sorted_indices = np.argsort(evals)\n    chosen_indices = sorted_indices[:k]\n\n    # Select the corresponding eigenvectors\n    chosen_evecs = evecs[:, chosen_indices]\n\n    # Normalize and fix sign of each eigenvector\n    for i in range(k):\n        vec = chosen_evecs[:, i]\n        # L2 norm\n        norm = np.linalg.norm(vec)\n        if norm != 0:\n            vec = vec / norm\n        else:\n            # If the vector is all zeros (shouldn't happen for a Laplacian unless dimension=1),\n            # we can skip flipping. It remains all zeros.\n            pass\n\n        # Flip sign if first non-zero entry is negative\n        non_zero_indices = np.nonzero(vec)[0]\n        if len(non_zero_indices) > 0:\n            first_non_zero = non_zero_indices[0]\n            if vec[first_non_zero] < 0:\n                vec = -vec\n\n        chosen_evecs[:, i] = vec\n\n    # Round each entry to 4 decimals\n    chosen_evecs = np.round(chosen_evecs, 4)\n\n    # Convert to list (columns as eigenvectors)\n    return chosen_evecs.tolist()"}
{"task_id": 385, "completion_id": 0, "completion": "import numpy as np\n\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"\n    Projects a labeled data set X (n_samples x n_features) onto its first k\n    Linear Discriminant components, returning a 2D Python list of shape\n    (n_samples, <chosen_k>) where chosen_k = min(k, c-1) for c distinct classes.\n\n    Steps:\n    1. Compute the within-class scatter matrix S_w and between-class scatter matrix S_b.\n    2. Solve the generalized eigenvalue problem S_w^-1 * S_b * w = lambda * w\n       (using the Moore-Penrose pseudo-inverse if S_w is singular).\n    3. Sort eigenvectors by descending eigenvalues.\n    4. Pick the first k eigenvectors, normalize each to unit length, and ensure\n       the first element of each eigenvector is non-negative (to fix orientation).\n    5. Return the data matrix projected onto those k directions, rounded to\n       4 decimal places, as a standard Python list.\n    \"\"\"\n    # Convert input to numpy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=int)\n\n    n_samples, n_features = X_np.shape\n    classes = np.unique(y_np)\n    c = len(classes)\n\n    # If k > c-1, use c-1\n    k = min(k, c - 1)\n    # If k <= 0, return an array of shape (n_samples, 0)\n    if k <= 0:\n        # Return empty projection (no components)\n        return np.zeros((n_samples, 0)).tolist()\n\n    # Overall mean\n    mu = X_np.mean(axis=0)\n\n    # Initialize scatter matrices\n    S_w = np.zeros((n_features, n_features), dtype=float)\n    S_b = np.zeros((n_features, n_features), dtype=float)\n\n    # Compute within-class scatter (S_w) and between-class scatter (S_b)\n    for cls in classes:\n        X_c = X_np[y_np == cls]\n        mu_c = X_c.mean(axis=0)\n        n_c = X_c.shape[0]\n        # Between-class contribution\n        diff_b = (mu_c - mu).reshape(-1, 1)\n        S_b += n_c * (diff_b @ diff_b.T)\n        # Within-class contribution\n        diff_w = X_c - mu_c\n        S_w += diff_w.T @ diff_w\n\n    # Solve generalised eigenvalue problem using pseudo-inverse of S_w\n    # Compute M = S_w^-1 @ S_b\n    S_w_inv = np.linalg.pinv(S_w)\n    M = S_w_inv @ S_b\n\n    # Eigen-decomposition\n    eigenvals, eigenvecs = np.linalg.eig(M)\n\n    # Sort by descending eigenvalues\n    idx = np.argsort(eigenvals)[::-1]\n    eigenvals = eigenvals[idx]\n    eigenvecs = eigenvecs[:, idx]\n\n    # Keep the top k eigenvectors\n    W = eigenvecs[:, :k]\n\n    # Normalize columns of W and fix orientation (first element non-negative)\n    for i in range(k):\n        col = W[:, i]\n        norm_col = np.linalg.norm(col)\n        if norm_col > 0:\n            col = col / norm_col\n        if col[0] < 0:  # Make first element non-negative\n            col = -col\n        W[:, i] = col\n\n    # Project X onto these k directions\n    X_proj = X_np @ W  # shape: (n_samples, k)\n\n    # Round to 4 decimals and return as nested list\n    X_proj_rounded = np.round(X_proj, 4).tolist()\n    return X_proj_rounded"}
{"task_id": 386, "completion_id": 0, "completion": "import numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-15\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    loss = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    return float(round(loss, 4))"}
{"task_id": 387, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    N = len(x)\n    if N == 0:\n        return []\n    \n    # Initial prediction = mean of targets\n    y_hat = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_hat\n        \n        # If all feature values are identical or there's only one sample => no valid split\n        if np.all(x == x[0]) or N == 1:\n            stump_pred = np.full(N, np.mean(residuals))\n            y_hat += learning_rate * stump_pred\n            continue\n        \n        # Sort by x\n        sort_idx = np.argsort(x)\n        sorted_x = x[sort_idx]\n        sorted_r = residuals[sort_idx]\n        \n        # Prefix sums for quick SSE computation\n        prefix_sum = np.cumsum(sorted_r)\n        prefix_sum_sq = np.cumsum(sorted_r ** 2)\n        \n        best_sse = None\n        best_i = None\n        \n        # Consider splits between i and i+1\n        for i in range(N - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                # Same x-values => not a valid split\n                continue\n            \n            # Left side: indices [0..i]\n            nL = i + 1\n            sumL = prefix_sum[i]\n            sumL_sq = prefix_sum_sq[i]\n            sse_left = sumL_sq - (sumL**2 / nL)\n            \n            # Right side: indices [i+1..N-1]\n            nR = N - (i + 1)\n            sumR = prefix_sum[N - 1] - sumL\n            sumR_sq = prefix_sum_sq[N - 1] - sumL_sq\n            sse_right = sumR_sq - (sumR**2 / nR)\n            \n            total_sse = sse_left + sse_right\n            if best_sse is None or total_sse < best_sse:\n                best_sse = total_sse\n                best_i = i\n        \n        # If no valid split found (should be rare; means all x consecutive pairs are identical)\n        if best_i is None:\n            stump_pred = np.full(N, np.mean(residuals))\n            y_hat += learning_rate * stump_pred\n            continue\n        \n        # Otherwise, compute stump predictions\n        split_threshold = 0.5 * (sorted_x[best_i] + sorted_x[best_i + 1])\n        nL = best_i + 1\n        sumL = prefix_sum[best_i]\n        r_L = sumL / nL\n        \n        nR = N - nL\n        sumR = prefix_sum[N - 1] - sumL\n        r_R = sumR / nR\n        \n        # Build the stump prediction for each sample\n        stump_pred = np.where(x <= split_threshold, r_L, r_R)\n        \n        # Update the running prediction\n        y_hat += learning_rate * stump_pred\n    \n    return np.round(y_hat, 4).tolist()"}
{"task_id": 389, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    # Convert input to a numpy array\n    W = np.array(W, dtype=float)\n\n    # Check if W is square\n    if W.shape[0] != W.shape[1]:\n        return -1\n\n    # Compute the degree matrix D (diagonal with sums of rows of W)\n    row_sums = np.sum(W, axis=1)\n    D = np.diag(row_sums)\n\n    # Compute the Laplacian\n    L = D - W\n\n    # Round to 4 decimal places\n    L_rounded = np.around(L, decimals=4)\n\n    # Return result as a Python list of lists\n    return L_rounded.tolist()"}
{"task_id": 391, "completion_id": 0, "completion": "import numpy as np\n\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    in_length, _ = X.shape\n    \n    # 1. Round using NumPy's around (with ties going to the even integer).\n    rounded_indices = np.around(t).astype(int)\n\n    # 2. Clip indices to the valid range.\n    clipped_indices = np.clip(rounded_indices, 0, in_length - 1)\n\n    # 3. Gather the samples and return as a standard Python list of lists.\n    interpolated_samples = X[clipped_indices, :]\n    return interpolated_samples.tolist()"}
{"task_id": 392, "completion_id": 0, "completion": "import numpy as np\n\ndef preemphasis(x: \"list[float] | np.ndarray\", alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval [0, 1).\n\n    Returns:\n        The filtered signal as a Python list with every element rounded to\n        four decimal places.\n    \"\"\"\n    # Flatten the input to ensure we process it as a 1-D array.\n    x_flat = np.array(x).flatten()\n    \n    # Allocate an output array of the same length.\n    filtered = np.zeros_like(x_flat, dtype=float)\n    \n    # The first sample is unchanged.\n    if len(x_flat) > 0:\n        filtered[0] = x_flat[0]\n    \n    # Apply the pre-emphasis filter for subsequent samples.\n    for i in range(1, len(x_flat)):\n        filtered[i] = x_flat[i] - alpha * x_flat[i - 1]\n    \n    # Round to 4 decimals and convert to a Python list.\n    return [round(value, 4) for value in filtered]"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialise Eg if not provided\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    epsilon = 1e-8  # small constant for numerical stability\n\n    # Update the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n\n    # Round to 4 decimal places and convert to Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n\n    return w_next_rounded, Eg_next_rounded\n```"}
{"task_id": 395, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    header_line = \"*\" * 50  # Exactly 50 asterisks\n    return \"\\n\".join([\n        header_line,\n        \"Beta:\",\n        str(beta),\n        f\"Probability of sequence: {b_prob}\"\n    ])\n```"}
{"task_id": 396, "completion_id": 0, "completion": "import numpy as np\n\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    # Convert input to a NumPy array without modifying the original list\n    x_array = np.array(x, dtype=float)\n\n    # Compute tanh(x)\n    tanh_vals = np.tanh(x_array)\n\n    # Compute the first derivative: 1 - tanh^2(x)\n    first_deriv = 1 - np.power(tanh_vals, 2)\n\n    # Compute the second derivative: -2 * tanh(x) * (1 - tanh^2(x))\n    second_deriv = -2 * tanh_vals * first_deriv\n\n    # Round to 6 decimal places and convert to plain Python lists\n    tanh_list = np.round(tanh_vals, 6).tolist()\n    first_deriv_list = np.round(first_deriv, 6).tolist()\n    second_deriv_list = np.round(second_deriv, 6).tolist()\n\n    # Return all three lists as a single list\n    return [tanh_list, first_deriv_list, second_deriv_list]"}
{"task_id": 397, "completion_id": 0, "completion": "import numpy as np\n\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    # Handle the case where n_examples is 0\n    if n_examples == 0:\n        return np.zeros((0, n_classes), dtype=np.float64)\n    \n    # Generate random class indices for each example\n    random_indices = np.random.randint(0, n_classes, size=n_examples)\n    \n    # Initialize an array of zeros and set the corresponding positions to 1\n    one_hot = np.zeros((n_examples, n_classes), dtype=np.float64)\n    one_hot[np.arange(n_examples), random_indices] = 1.0\n    \n    return one_hot"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array\n    x_arr = np.asarray(x, dtype=float)\n\n    if not derivative:\n        # ELU activation\n        result = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    else:\n        # ELU derivative\n        # If x >= 0 -> 1\n        # If x < 0  -> alpha * e^x\n        result = np.where(x_arr >= 0, 1, alpha * np.exp(x_arr))\n\n    # Round to 4 decimal places and convert to Python list\n    return list(np.round(result, 4))\n```"}
{"task_id": 399, "completion_id": 0, "completion": "import numpy as np\n\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    # Check dimensions\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    \n    # Check if the number of columns match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the pairwise distances in a vectorized way\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff**2, axis=2))\n    \n    # Round to 4 decimals and convert to a list of lists\n    dist_matrix_rounded = np.round(dist_matrix, 4).tolist()\n    \n    return dist_matrix_rounded"}
{"task_id": 400, "completion_id": 0, "completion": "import math\n\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance < 0:\n        raise ValueError(\"Variance must be non-negative.\")\n    \n    # Handle the degenerate case where variance is zero\n    if variance == 0:\n        if x < mean:\n            return 0.0\n        elif x == mean:\n            return 0.5\n        else:\n            return 1.0\n    \n    # For positive variance, use the normal CDF formula\n    std_dev = math.sqrt(variance)\n    z = (x - mean) / (math.sqrt(2) * std_dev)\n    cdf_value = 0.5 * (1 + math.erf(z))\n    return round(cdf_value, 6)"}
{"task_id": 401, "completion_id": 0, "completion": "import numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n    \"\"\"\n    Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If None the number is inferred from y.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype float.\n        Entries are 0.0 or 1.0 only.\n    \"\"\"\n    y = np.asarray(y)\n\n    # Check if y is already one-hot encoded:\n    # 1) Must be 2-D\n    # 2) Each row must sum to 1\n    # 3) All values must be 0 or 1\n    if y.ndim == 2:\n        row_sums = y.sum(axis=1)\n        if (\n            np.allclose(row_sums, 1.0) \n            and np.array_equal(np.unique(y), [0, 1])\n        ):\n            # Return a float copy if we're confident it's already one-hot\n            return y.copy().astype(float)\n\n    # Otherwise, assume y is class labels in shape (N,) or (N,1)\n    # Flatten to shape (N,)\n    y_flat = y.ravel()\n    \n    # Determine number of classes\n    if num_classes is None:\n        num_classes = int(y_flat.max()) + 1  # +1 so class \"max_label\" is included\n    \n    # Create a zero matrix and place 1 in the correct positions\n    out = np.zeros((y_flat.shape[0], num_classes), dtype=float)\n    out[np.arange(y_flat.shape[0]), y_flat] = 1.0\n    return out"}
{"task_id": 402, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float = 1e-6) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    # Identify unique class labels\n    classes = np.unique(y_train)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n\n    # Prepare arrays to hold the learned parameters\n    means = np.zeros((n_classes, n_features))\n    variances = np.zeros((n_classes, n_features))\n    priors = np.zeros(n_classes)\n\n    # Compute the mean, variance, and prior for each class\n    for idx, c in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[idx, :] = np.mean(X_c, axis=0)\n        # Add eps to variance to avoid division by zero\n        variances[idx, :] = np.var(X_c, axis=0) + eps\n        priors[idx] = X_c.shape[0] / X_train.shape[0]\n\n    # Calculate log-posteriors for each test sample\n    # log P(y=c | x) \u221d log P(y=c) + \u2211_j log N(x_j | \u03bc_cj, \u03c3_cj\u00b2)\n    n_test = X_test.shape[0]\n    log_posteriors = np.zeros((n_test, n_classes))\n\n    for i in range(n_test):\n        x = X_test[i]\n        for idx, c in enumerate(classes):\n            # log prior for class c\n            log_prior = np.log(priors[idx])\n            # log-likelihood from the Gaussian\n            log_likelihood = -0.5 * np.sum(\n                np.log(2.0 * np.pi * variances[idx]) +\n                ((x - means[idx]) ** 2) / variances[idx]\n            )\n            log_posteriors[i, idx] = log_prior + log_likelihood\n\n    # Select the class with the maximum log-posterior for each test sample\n    predictions = classes[np.argmax(log_posteriors, axis=1)]\n    return predictions.flatten()"}
{"task_id": 405, "completion_id": 0, "completion": "import numpy as np\nimport re\n\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    arr = np.array(x, dtype=float)\n\n    # If no param is provided, treat it as \"identity\"\n    param_str = \"identity\" if (param is None) else param.strip().lower()\n\n    if param_str in [\"identity\", \"none\"]:\n        # Identity: f(x) = x\n        out = arr\n    elif param_str == \"relu\":\n        # ReLU: f(x) = max(0, x)\n        out = np.maximum(0, arr)\n    elif param_str == \"tanh\":\n        # tanh: f(x) = tanh(x)\n        out = np.tanh(arr)\n    elif param_str == \"sigmoid\":\n        # Sigmoid: f(x) = 1/(1 + e^(-x))\n        out = 1 / (1 + np.exp(-arr))\n    elif param_str.startswith(\"leaky relu\"):\n        # Leaky ReLU(alpha=<float>): Default alpha=0.01 if not given\n        match = re.search(r\"leaky\\s*relu\\s*\\(\\s*alpha\\s*=\\s*([+-]?\\d+(\\.\\d+)?)\\s*\\)\", param_str)\n        if match:\n            alpha = float(match.group(1))\n        else:\n            alpha = 0.01\n        out = np.where(arr > 0, arr, alpha * arr)\n    elif param_str.startswith(\"affine\"):\n        # affine(slope=<float>, intercept=<float>)\n        # e.g. affine(slope=0.8, intercept=-1.2)\n        match = re.search(\n            r\"affine\\s*\\(\\s*slope\\s*=\\s*([+-]?\\d+(\\.\\d+)?)\\s*,\\s*intercept\\s*=\\s*([+-]?\\d+(\\.\\d+)?)\\s*\\)\",\n            param_str\n        )\n        if match:\n            slope = float(match.group(1))\n            intercept = float(match.group(3))\n            out = slope * arr + intercept\n        else:\n            raise ValueError(f\"Unknown activation: {param}\")\n    else:\n        raise ValueError(f\"Unknown activation: {param}\")\n\n    # Round to 6 decimal places and convert to Python list\n    return np.round(out, 6).tolist()"}
{"task_id": 406, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_predict(X_train: \"np.ndarray\", y_train: \"np.ndarray\", X_test: \"np.ndarray\", k: int = 5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n\n    predictions = []\n    n_train = X_train.shape[0]\n\n    for sample in X_test:\n        # 1. Calculate distances from the current test sample to all training samples\n        distances = np.linalg.norm(X_train - sample, axis=1)\n\n        # 2. Retrieve the indices of the k smallest distances\n        #    If k > n_train, we use all training samples\n        k_use = min(k, n_train)\n        nearest_indices = np.argsort(distances)[:k_use]\n\n        # 3. Retrieve labels of the k nearest neighbours\n        nearest_labels = y_train[nearest_indices]\n\n        # 4. Determine majority label (ties broken by smallest label)\n        label_counts = np.bincount(nearest_labels)\n        predicted_label = np.argmax(label_counts)\n\n        predictions.append(int(predicted_label))\n\n    return predictions"}
{"task_id": 410, "completion_id": 0, "completion": "import re\n\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # Direct matches for simple activations\n    if act_str == \"ReLU\":\n        return {\"type\": \"ReLU\"}\n    if act_str == \"Sigmoid\":\n        return {\"type\": \"Sigmoid\"}\n    if act_str == \"Tanh\":\n        return {\"type\": \"Tanh\"}\n\n    # Regex for valid numeric pattern (including int, float, leading '.' etc.)\n    number_pattern = r\"([+-]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))\"\n\n    # Affine(slope=..., intercept=...)\n    affine_pattern = rf\"^Affine\\(slope={number_pattern}, intercept={number_pattern}\\)$\"\n    match_affine = re.match(affine_pattern, act_str)\n    if match_affine:\n        slope_str, intercept_str = match_affine.groups()\n        return {\n            \"type\": \"Affine\",\n            \"slope\": float(slope_str),\n            \"intercept\": float(intercept_str),\n        }\n\n    # Leaky ReLU(alpha=...)\n    leaky_relu_pattern = rf\"^Leaky ReLU\\(alpha={number_pattern}\\)$\"\n    match_leaky = re.match(leaky_relu_pattern, act_str)\n    if match_leaky:\n        alpha_str = match_leaky.group(1)\n        return {\n            \"type\": \"Leaky ReLU\",\n            \"alpha\": float(alpha_str),\n        }\n\n    # If none matched, return -1\n    return -1"}
{"task_id": 411, "completion_id": 0, "completion": "import numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def get_dim_and_iterable_status(sample):\n        \"\"\"\n        Determine the dimension (number of scalar entries) for 'sample' and\n        whether it is an iterable (list/tuple/np.ndarray) or a scalar.\n        \"\"\"\n        if isinstance(sample, np.ndarray):\n            # A zero-dimensional array has shape (), treat as scalar\n            if sample.shape == ():\n                return 1, False\n            else:\n                return sample.size, True\n        elif isinstance(sample, (list, tuple)):\n            return len(sample), True\n        else:\n            # Assume it's a scalar (int/float/etc.)\n            return 1, False\n\n    def analyze(values):\n        \"\"\"\n        Given a list of values (actions or observations), compute:\n          - tuple_ (bool): whether any item is an iterable\n          - multidim (bool): whether dimension > 1\n          - continuous (bool): True if any value is a non-integer float\n          - dimension (int): number of components per item (1 if scalar)\n          - sets_per_dim (list of sets): collected unique values per dimension\n        \"\"\"\n        if not values:\n            # In case of empty input, define defaults (not specifically stated in the task)\n            return {\n                'tuple': False,\n                'multidim': False,\n                'continuous': False,\n                'dimension': 0,\n                'sets_per_dim': []\n            }\n\n        first = values[0]\n        dimension, is_iterable = get_dim_and_iterable_status(first)\n        tuple_ = is_iterable\n        multidim = (dimension > 1)\n\n        # Prepare sets for each dimension\n        sets_per_dim = [set() for _ in range(dimension)]\n        continuous = False\n\n        for val in values:\n            # For each item, decide whether it's scalar or iterable\n            d, it = get_dim_and_iterable_status(val)\n\n            if d == 1 and not it:\n                # scalar\n                x = val\n                sets_per_dim[0].add(x)\n                # check if non-integer float => continuous\n                if isinstance(x, float) and (not x.is_integer()):\n                    continuous = True\n            else:\n                # iterable\n                # make sure it has 'dimension' elements\n                # for dimension=1, it's a length-1 iterable\n                for i in range(dimension):\n                    x = val[i]\n                    sets_per_dim[i].add(x)\n                    if isinstance(x, float) and not x.is_integer():\n                        continuous = True\n\n        return {\n            'tuple': tuple_,\n            'multidim': multidim,\n            'continuous': continuous,\n            'dimension': dimension,\n            'sets_per_dim': sets_per_dim\n        }\n\n    def finalize_stats(stats_dict):\n        \"\"\"\n        From the stats_dict (with 'sets_per_dim', etc.) build the required fields:\n          - n_per_dim\n          - ids_per_dim\n        \"\"\"\n        sets = stats_dict['sets_per_dim']\n        # Compute number of unique values per dimension:\n        n_per_dim = [len(s) for s in sets]\n        # Sort unique identifiers in each dimension:\n        ids_per_dim = [sorted(list(s)) for s in sets]\n        return n_per_dim, ids_per_dim\n\n    # Analyze actions and observations\n    a_stats = analyze(actions)\n    o_stats = analyze(observations)\n\n    # Compute final per-dimension lists\n    a_n_per_dim, a_ids_per_dim = finalize_stats(a_stats)\n    o_n_per_dim, o_ids_per_dim = finalize_stats(o_stats)\n\n    return {\n        'tuple_actions': a_stats['tuple'],\n        'tuple_observations': o_stats['tuple'],\n        'multidim_actions': a_stats['multidim'],\n        'multidim_observations': o_stats['multidim'],\n        'continuous_actions': a_stats['continuous'],\n        'continuous_observations': o_stats['continuous'],\n        'n_actions_per_dim': a_n_per_dim,\n        'action_dim': a_stats['dimension'],\n        'n_obs_per_dim': o_n_per_dim,\n        'obs_dim': o_stats['dimension'],\n        'action_ids': a_ids_per_dim,\n        'obs_ids': o_ids_per_dim\n    }"}
{"task_id": 412, "completion_id": 0, "completion": "```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n\n    def accuracy_score(y_true, y_pred):\n        correct = 0\n        total = 0\n        for t, p in zip(y_true, y_pred):\n            if t == p:\n                correct += 1\n            total += 1\n        return round(correct / total, 4)\n\n    def precision_score(y_true, y_pred):\n        tp = 0\n        fp = 0\n        for t, p in zip(y_true, y_pred):\n            if p == 1 and t == 1:\n                tp += 1\n            elif p == 1 and t == 0:\n                fp += 1\n        denominator = tp + fp\n        if denominator == 0:\n            return 0.0\n        return round(tp / denominator, 4)\n\n    def recall_score(y_true, y_pred):\n        tp = 0\n        fn = 0\n        for t, p in zip(y_true, y_pred):\n            if t == 1 and p == 1:\n                tp += 1\n            elif t == 1 and p == 0:\n                fn += 1\n        denominator = tp + fn\n        if denominator == 0:\n            return 0.0\n        return round(tp / denominator, 4)\n\n    def f1_score(y_true, y_pred):\n        p = precision_score(y_true, y_pred)\n        r = recall_score(y_true, y_pred)\n        if p == 0 and r == 0:\n            return 0.0\n        return round((2 * p * r) / (p + r), 4)\n\n    metrics = {\n        'accuracy': accuracy_score,\n        'precision': precision_score,\n        'recall': recall_score,\n        'f1': f1_score\n    }\n\n    return metrics.get(name, -1)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "import numpy as np\n\ndef gbdt_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    n_estimators: int = 10,\n    learning_rate: float = 0.1,\n    max_depth: int = 3\n) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in X_test, rounded to 4 decimal places.\n    \"\"\"\n\n    # ------------------------\n    # 1. Define CART functions\n    # ------------------------\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int) -> dict:\n        \"\"\"\n        Recursively build a CART regression tree using mean-squared-error (variance) \n        to evaluate splits. The tree is grown until max_depth is reached or no \n        further improvement in split error is possible.\n        \"\"\"\n        # Base cases for stopping\n        if depth >= max_depth or len(X) <= 1 or np.all(y == y[0]):\n            return {\"type\": \"leaf\", \"value\": np.mean(y)}\n\n        n_samples, n_features = X.shape\n        # Current node error (sum of squared deviations about the mean)\n        current_error = np.var(y) * len(y)\n\n        best_feature, best_threshold, best_error = None, None, current_error\n        best_split = None\n\n        # Try splitting on each feature and each possible threshold\n        for feat in range(n_features):\n            unique_vals = np.unique(X[:, feat])\n            # Skip if all values in this feature are identical\n            if len(unique_vals) == 1:\n                continue\n\n            # For a simple approach, test each unique value as threshold\n            for threshold in unique_vals:\n                left_mask = X[:, feat] <= threshold\n                right_mask = ~left_mask\n\n                left_y = y[left_mask]\n                right_y = y[right_mask]\n\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n\n                left_error = np.var(left_y) * len(left_y)\n                right_error = np.var(right_y) * len(right_y)\n                split_error = left_error + right_error\n\n                if split_error < best_error:\n                    best_feature = feat\n                    best_threshold = threshold\n                    best_error = split_error\n                    best_split = (left_mask, right_mask)\n\n        # If no improvement, create a leaf\n        if best_feature is None or best_split is None or best_error >= current_error:\n            return {\"type\": \"leaf\", \"value\": np.mean(y)}\n\n        # Otherwise, split and build child subtrees\n        left_mask, right_mask = best_split\n        left_node = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_node = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return {\n            \"type\": \"node\",\n            \"feature\": best_feature,\n            \"threshold\": best_threshold,\n            \"left\": left_node,\n            \"right\": right_node,\n        }\n\n    def predict_tree(tree: dict, x: np.ndarray) -> float:\n        \"\"\"Predict the output of a single sample x based on the given tree.\"\"\"\n        if tree[\"type\"] == \"leaf\":\n            return tree[\"value\"]\n        else:\n            feat = tree[\"feature\"]\n            thresh = tree[\"threshold\"]\n            if x[feat] <= thresh:\n                return predict_tree(tree[\"left\"], x)\n            else:\n                return predict_tree(tree[\"right\"], x)\n\n    # ------------------------\n    # 2. GBDT main procedure\n    # ------------------------\n\n    # Initial prediction is the mean of y_train\n    initial_prediction = np.mean(y_train)\n    # Keep track of trees built at each iteration\n    trees = []\n\n    # We maintain a running prediction for the training set\n    # so we can compute residuals each iteration\n    y_pred_train = np.full_like(y_train, initial_prediction, dtype=float)\n\n    # Train each boosting stage\n    for _ in range(n_estimators):\n        # Compute residuals = y - current_prediction\n        residuals = y_train - y_pred_train\n\n        # Build a regression tree on the residuals\n        tree = build_tree(X_train, residuals, depth=0)\n        trees.append(tree)\n\n        # Update training predictions with this tree\n        # We add learning_rate * tree_output to the running prediction\n        for i in range(len(X_train)):\n            y_pred_train[i] += learning_rate * predict_tree(tree, X_train[i])\n\n    # ----------------------------\n    # 3. Predict on X_test\n    # ----------------------------\n    # Start with the initial prediction for every sample\n    y_pred_test = np.full(shape=(len(X_test),), fill_value=initial_prediction, dtype=float)\n\n    # Add contributions from each tree\n    for tree in trees:\n        for i in range(len(X_test)):\n            y_pred_test[i] += learning_rate * predict_tree(tree, X_test[i])\n\n    # Round to 4 decimals, convert to Python list\n    return [round(float(val), 4) for val in y_pred_test]"}
{"task_id": 414, "completion_id": 0, "completion": "import numpy as np\n\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as:\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    # Check for invalid arguments\n    if step < 0 or stage_length <= 0 or decay <= 0:\n        return -1\n\n    # Compute the current stage\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n\n    # Calculate the learning rate\n    lr = initial_lr * (decay ** curr_stage)\n\n    # Round to six decimal places\n    return float(f\"{lr:.6f}\")"}
{"task_id": 415, "completion_id": 0, "completion": "import numpy as np\n\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"\n    Implement the un-normalised 1-D DCT-II described in the task:\n    For an input signal (frame) x of length N, the DCT-II coefficients X_k are\n    \n      X_k = sum_{n=0 to N-1} [ x_n * cos( pi/N * (n + 0.5) * k ) ],\n      \n    k = 0, 1, ..., N-1\n    \n    Returns a list of DCT-II coefficients of the same length, each rounded to 4 decimal places.\n    \"\"\"\n    if not frame:\n        return []  # Return empty list if input is empty\n    \n    x = np.array(frame, dtype=float)\n    N = len(x)\n    \n    # Create indices for n and k\n    n = np.arange(N).reshape(N, 1)  # shape (N,1)\n    k = np.arange(N).reshape(1, N)  # shape (1,N)\n    \n    # Compute the argument of the cosine\n    angles = np.pi / N * (n + 0.5) * k  # shape (N,N)\n    \n    # Compute the cosine matrix\n    cos_mat = np.cos(angles)  # shape (N,N)\n    \n    # Compute the DCT-II via matrix multiplication: X = x * cos_mat\n    # (x is shape (N,), cos_mat is (N,N), result is shape (N,))\n    X = np.dot(x, cos_mat)\n    \n    # Round each coefficient to 4 decimal places and return as list\n    return list(np.round(X, 4))"}
{"task_id": 416, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    -----------\n    X : numpy.ndarray\n        A NumPy array of shape (n_samples, n_features) or (n_features, ) representing the data\n        points for which we want to evaluate the PDF.\n        If X is 1D, it is treated as (n_samples=length_of_X, 1).\n\n    mean : numpy.ndarray\n        A NumPy array of shape (n_features, ) representing the mean vector of the distribution.\n\n    cov : numpy.ndarray\n        A NumPy array of shape (n_features, n_features) representing the covariance matrix (must be\n        positive-definite / invertible).\n\n    Returns:\n    --------\n    list\n        A Python list of length n_samples containing the PDF values for each data point in X,\n        rounded to four decimal places.\n    \"\"\"\n\n    X = np.asarray(X, dtype=float)\n\n    # If X is a 1D array, treat it as (n_samples, 1)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n\n    # Convert mean to the right shape (n_features, )\n    mean = np.asarray(mean, dtype=float).ravel()\n    if mean.shape[0] != n_features:\n        raise ValueError(\"Shape mismatch: 'mean' length must match number of features in X.\")\n\n    # Ensure covariance is a 2D array of shape (n_features, n_features)\n    cov = np.asarray(cov, dtype=float)\n    if cov.shape != (n_features, n_features):\n        raise ValueError(\n            \"Shape mismatch: 'cov' must be of shape (n_features, n_features).\"\n        )\n\n    # Compute determinant and inverse of covariance\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError(\"Covariance matrix must be positive-definite.\")\n    inv_cov = np.linalg.inv(cov)\n\n    # Compute normalization constant\n    norm_const = 1.0 / math.sqrt(((2.0 * math.pi) ** n_features) * det_cov)\n\n    # Compute PDF values\n    pdf_values = []\n    for i in range(n_samples):\n        diff = (X[i] - mean).reshape(-1, 1)  # column vector\n        exponent = -0.5 * diff.T @ inv_cov @ diff\n        value = norm_const * math.exp(exponent)\n        pdf_values.append(round(value.item(), 4))\n\n    return pdf_values"}
{"task_id": 417, "completion_id": 0, "completion": "import numpy as np\n\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    # 1. Center the data\n    mean_vec = data.mean(axis=0)\n    X_centered = data - mean_vec\n\n    # 2. Build the unbiased covariance matrix\n    n_samples = data.shape[0]\n    cov_matrix = (X_centered.T @ X_centered) / (n_samples - 1)\n\n    # 3. Perform eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # 4. Sort eigenvectors by descending eigenvalue magnitude and keep the first k\n    idx_sorted = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx_sorted]\n    eigenvectors = eigenvectors[:, idx_sorted]\n    k = min(k, data.shape[1])  # in case k \u2265 number of features\n    eigenvectors = eigenvectors[:, :k]\n\n    # 5. Enforce deterministic orientation for each retained eigenvector\n    for i in range(eigenvectors.shape[1]):\n        # Find first non-zero element\n        non_zero_idx = np.flatnonzero(eigenvectors[:, i])\n        if len(non_zero_idx) > 0:\n            first_non_zero = non_zero_idx[0]\n            if eigenvectors[first_non_zero, i] < 0:\n                eigenvectors[:, i] = -eigenvectors[:, i]\n\n    # 6. Project the centered data onto the selected eigenvectors\n    X_projected = X_centered @ eigenvectors\n\n    # 7. Reconstruct the data\n    X_reconstructed = X_projected @ eigenvectors.T + mean_vec\n\n    # 8. Round to 4 decimal places\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n    X_reconstructed_rounded = np.round(X_reconstructed, 4).tolist()\n\n    # 9. Return the two rounded matrices as Python lists\n    return X_projected_rounded, X_reconstructed_rounded"}
{"task_id": 418, "completion_id": 0, "completion": "import numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal places.\n    \"\"\"\n    # 1. Ensure X is a NumPy array\n    X = np.array(X, dtype=float)\n    \n    # 2. Check the number of samples (rows)\n    n, d = X.shape\n    if n < 2:\n        # Return a zero matrix of size d \u00d7 d if n < 2\n        return np.zeros((d, d)).tolist()\n\n    # 3. Compute the sample covariance matrix with ddof=1\n    cov_matrix = np.cov(X, rowvar=False, ddof=1)  # shape: (d, d)\n\n    # 4. Round each element to 4 decimals and return as a nested list\n    return np.round(cov_matrix, 4).tolist()"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function returns the MAP predictive means for each row in `X_new`,\n    rounded to 4 decimal places.  The posterior is given by\n\n        \u03a3_p = ( V^-1 + X^T X )^-1\n        \u03bc_p = \u03a3_p ( V^-1 \u03bc + X^T y )\n\n    and the predictions for a new design matrix X_new are X_new \u03bc_p.\n    \"\"\"\n\n    # 1. Add intercept column if requested\n    if fit_intercept:\n        # Add a column of ones to X\n        X = np.column_stack([np.ones(X.shape[0]), X])\n        # Add a column of ones to X_new\n        X_new = np.column_stack([np.ones(X_new.shape[0]), X_new])\n    \n    # Number of features (after possibly adding intercept)\n    D = X.shape[1]\n\n    # 2. Ensure mu is a D-dimensional array\n    if np.isscalar(mu):\n        mu_vec = np.full(D, mu, dtype=float)\n    else:\n        mu_vec = np.asarray(mu, dtype=float)\n        # If mu is given as a single-element array, replicate it\n        if mu_vec.ndim == 0:\n            mu_vec = np.full(D, mu_vec.item(), dtype=float)\n        # Otherwise check dimension\n        elif mu_vec.shape[0] != D:\n            raise ValueError(\"Dimension mismatch between mu and X.\")\n\n    # 3. Construct the prior covariance matrix V\n    if V is None:\n        V_mat = np.eye(D, dtype=float)\n    elif np.isscalar(V):\n        V_mat = float(V) * np.eye(D, dtype=float)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            if V_arr.shape[0] != D:\n                raise ValueError(\"Dimension mismatch between V and X.\")\n            V_mat = np.diag(V_arr)\n        else:\n            if V_arr.shape != (D, D):\n                raise ValueError(\"Dimension mismatch between V and X.\")\n            V_mat = V_arr\n\n    # 4. Compute the posterior\n    #    \u03a3_p = ( V^-1 + X^T X )^-1\n    #    \u03bc_p = \u03a3_p ( V^-1 mu + X^T y )\n    V_inv = np.linalg.inv(V_mat)\n    Cov_inv = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(Cov_inv)\n    posterior_mean = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n\n    # 5. Predict for X_new\n    y_pred = X_new @ posterior_mean\n\n    # 6. Round to 4 decimal places and return as a list\n    return [round(float(val), 4) for val in y_pred]\n```"}
{"task_id": 420, "completion_id": 0, "completion": "import numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    # Check if the column index is out of range.\n    if column < 0 or column >= X.shape[1]:\n        return [], []\n    \n    # Generate the Boolean masks based on the split condition.\n    left_mask = (X[:, column] < value).tolist()\n    right_mask = (X[:, column] >= value).tolist()\n    \n    return left_mask, right_mask"}
{"task_id": 421, "completion_id": 0, "completion": "import numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n\n    n_samples = data.shape[0]\n    # Labels: 0 = unvisited, -1 = noise, 1..k = cluster labels\n    labels = [0] * n_samples\n\n    # Helper function to find neighbors within eps distance\n    def region_query(point_index: int) -> list[int]:\n        \"\"\"\n        Return the indices of all samples within eps distance of data[point_index].\n        \"\"\"\n        distances = np.linalg.norm(data - data[point_index], axis=1)\n        neighbors = np.where(distances <= eps)[0]\n        return neighbors.tolist()\n\n    cluster_id = 0  # Will increment when a new cluster is found\n\n    for i in range(n_samples):\n        # Only handle unvisited points\n        if labels[i] != 0:\n            continue\n\n        # Find neighbors of point i\n        neighbors_i = region_query(i)\n\n        # Check if this point is a core point\n        if len(neighbors_i) < min_samples:\n            # Not enough neighbors to form a core -> label as noise\n            labels[i] = -1\n        else:\n            # Found a new cluster\n            cluster_id += 1\n            labels[i] = cluster_id\n\n            # We will grow the cluster using BFS (or similar) from point i\n            # The 'neighbors_i' include i itself. We'll use a queue of indices to process.\n            queue = neighbors_i.copy()  # copy so we don't modify neighbors_i directly\n\n            # Expand cluster\n            while queue:\n                current_point = queue.pop()\n                # If the current point has not been visited yet (label == 0) or is noise (-1),\n                # assign it to the cluster.\n                if labels[current_point] == 0 or labels[current_point] == -1:\n                    labels[current_point] = cluster_id\n                    # Check if this point is also a core point and merge its neighbors\n                    neighbors_current = region_query(current_point)\n                    if len(neighbors_current) >= min_samples:\n                        # Add new neighbors to the queue\n                        for nb in neighbors_current:\n                            # Only add neighbors not yet appended to this cluster\n                            if labels[nb] == 0 or labels[nb] == -1:\n                                queue.append(nb)\n\n    return labels"}
{"task_id": 422, "completion_id": 0, "completion": "import numpy as np\n\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)      = ln(1 + e^x)\n        1  -> SoftPlus'(x)     = e^x / (1 + e^x)\n        2  -> SoftPlus''(x)    = e^x / (1 + e^x)^2\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result(s) rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    x_arr = np.array(x, dtype=float)\n\n    if order == 0:\n        # SoftPlus(x) = ln(1 + e^x)\n        result = np.log1p(np.exp(x_arr))\n    elif order == 1:\n        # SoftPlus'(x) = e^x / (1 + e^x)\n        exp_x = np.exp(x_arr)\n        result = exp_x / (1.0 + exp_x)\n    elif order == 2:\n        # SoftPlus''(x) = e^x / (1 + e^x)^2\n        exp_x = np.exp(x_arr)\n        denom = (1.0 + exp_x)**2\n        result = exp_x / denom\n    else:\n        # Invalid order\n        return -1\n\n    # Round to 4 decimal places and convert to Python list or float\n    result_rounded = np.round(result, 4).tolist()\n    return result_rounded"}
{"task_id": 423, "completion_id": 0, "completion": "import numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative floats.\n\n    1. If 'actual' and 'predicted' have different lengths or contain negative values, return -1.\n    2. Compute RMSLE = sqrt( (1/n) * sum( (log1p(pred) - log1p(act))^2 ) ).\n    3. Return the result rounded to 4 decimals.\n    \"\"\"\n    # 1. Validate input length and non-negativity\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Convert lists to numpy arrays for vectorized operations\n    actual_arr = np.array(actual, dtype=float)\n    predicted_arr = np.array(predicted, dtype=float)\n    \n    # 2. Compute RMSLE\n    # log1p(x) = log(1 + x)\n    # RMSLE = sqrt( mean( (log(1+pred_i) - log(1+act_i))^2 ) )\n    logs_diff = np.log1p(predicted_arr) - np.log1p(actual_arr)\n    rmsle_value = np.sqrt(np.mean(logs_diff ** 2))\n\n    # 3. Return rounded to 4 decimals\n    return round(rmsle_value, 4)"}
{"task_id": 424, "completion_id": 0, "completion": "import numpy as np\n\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    # Convert the list to a numpy array for easier calculations.\n    y_arr = np.array(y)\n\n    # Count the occurrences of each distinct label.\n    unique_labels, counts = np.unique(y_arr, return_counts=True)\n\n    # Compute the probabilities (relative frequencies).\n    p = counts / len(y_arr)\n\n    # Calculate the Shannon entropy using the definition:\n    # H = -\u03a3 p_i * log2(p_i)\n    # (We can ignore cases where p_i=0 since np.unique won't return those.)\n    H = -np.sum(p * np.log2(p))\n\n    # Return the entropy rounded to the 4th decimal place.\n    return round(H, 4)"}
{"task_id": 425, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Compute the natural-log Shannon entropy of a one-dimensional collection \n    of non-negative integers, rounded to 4 decimal places.\n    \n    H(x) = -sum(p_i * ln(p_i)) over unique symbols, \n    where p_i are the relative frequencies of the symbols in x.\n    \n    If the input contains only a single unique value, the entropy is 0.0.\n    \n    Parameters\n    ----------\n    p : list[int] or np.ndarray\n        A one-dimensional list or array of non-negative integers.\n        \n    Returns\n    -------\n    float\n        The Shannon entropy, rounded to 4 decimal places.\n    \"\"\"\n    \n    # Convert input to a numpy array\n    x = np.array(p, dtype=int)\n    \n    # Check for single unique value\n    unique_vals = np.unique(x)\n    if len(unique_vals) == 1:\n        return 0.0\n    \n    # Compute the frequency of each unique value\n    counts = np.bincount(x)\n    total = x.size\n    pmf = counts[counts > 0] / total  # probabilities (relative frequencies)\n    \n    # Compute Shannon entropy using natural logarithm\n    entropy = -np.sum(pmf * np.log(pmf))\n    \n    # Round to 4 decimal places and return\n    return float(round(entropy, 4))"}
{"task_id": 426, "completion_id": 0, "completion": "def classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # Validate input lengths\n    if not y_true or not y_pred or len(y_true) != len(y_pred):\n        return -1\n\n    # Count correct predictions\n    correct = sum(1 for true_label, pred_label in zip(y_true, y_pred) if true_label == pred_label)\n\n    # Calculate accuracy\n    accuracy = correct / len(y_true)\n\n    # Return the accuracy rounded to 4 decimal places\n    return round(accuracy, 4)"}
{"task_id": 427, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Convert input to NumPy array (if it isn't one already)\n    z_array = np.array(z)\n\n    # Identity activation is just the input itself\n    activation = z_array\n\n    # The derivative of the identity function is 1 for each element\n    derivative = np.ones_like(z_array)\n\n    # Convert results back to Python lists\n    return activation.tolist(), derivative.tolist()\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero. When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places. Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # For a symmetric window, use N = window_len\n    # For a periodic window, use N = window_len + 1 and drop the last point\n    N = window_len if symmetric else window_len + 1\n\n    # Generate the Hann window\n    full_window = [\n        0.5 - 0.5 * math.cos((2.0 * math.pi * i) / (N - 1))\n        for i in range(N)\n    ]\n\n    # If periodic, drop the last point\n    if not symmetric:\n        full_window = full_window[:-1]\n\n    # Round to 4 decimal places and return as a list\n    return np.round(full_window, 4).tolist()\n```\n"}
{"task_id": 429, "completion_id": 0, "completion": "import numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, -1).\n    \"\"\"\n    # 1. Check if context is 1-dimensional\n    if context.ndim != 1:\n        return -1, -1\n\n    # 2. Check length consistency with context_probs\n    if context.size != context_probs.shape[0]:\n        return -1, -1\n\n    # 3. Check if context has exactly one \"1\" and all other entries \"0\"\n    if np.sum(context) != 1 or not np.all(np.isin(context, [0, 1])):\n        return -1, -1\n\n    # Identify the active context (the index of the 1 in the one-hot vector)\n    context_index = np.argmax(context)\n\n    # Extract the probabilities for this context\n    row = context_probs[context_index, :]\n\n    # 4. Find the arm that gives the maximal reward\n    # np.argmax returns the smallest index in case of ties\n    optimal_arm = np.argmax(row)\n    optimal_rwd = np.round(row[optimal_arm], 4)\n\n    return float(optimal_rwd), int(optimal_arm)"}
{"task_id": 430, "completion_id": 0, "completion": "from typing import List, Dict, Set, Tuple\n\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    # Assign each vertex an index so we can keep track of the left-to-right order for neighbors.\n    index_map = {v: i for i, v in enumerate(vertices)}\n    \n    # Create adjacency list with empty lists for all vertices.\n    adj_list = {v: [] for v in vertices}\n    \n    # Populate adjacency list.\n    for src, dst in edges:\n        adj_list[src].append(dst)\n    \n    # Sort each adjacency list so we visit neighbors in the same left-to-right order.\n    for v in vertices:\n        adj_list[v].sort(key=lambda x: index_map[x])\n    \n    # 0 = unvisited, 1 = visiting, 2 = visited\n    visited = {v: 0 for v in vertices}\n    \n    topo_order = []\n    cycle_found = False\n    \n    def dfs(node: object) -> bool:\n        nonlocal cycle_found\n        \n        visited[node] = 1  # mark node as visiting\n        \n        for neighbor in adj_list[node]:\n            if visited[neighbor] == 0:\n                # Recursively visit unvisited neighbors\n                if not dfs(neighbor):\n                    return False\n            elif visited[neighbor] == 1:\n                # We found a node in the visiting state -> cycle\n                cycle_found = True\n                return False\n        \n        visited[node] = 2  # mark node as visited\n        topo_order.append(node)\n        return True\n    \n    # Perform DFS from left to right order of vertices\n    for v in vertices:\n        if visited[v] == 0:\n            if not dfs(v):\n                return None  # cycle detected\n    \n    # If no cycle found, reverse the post-order to get topological order\n    topo_order.reverse()\n    return topo_order if not cycle_found else None"}
{"task_id": 431, "completion_id": 0, "completion": "import numpy as np\n\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    # 1. Check if vectors have the same length\n    if len(x1) != len(x2):\n        return -1\n\n    # 2. Convert x1, x2 to numpy arrays\n    arr1 = np.array(x1, dtype=float)\n    arr2 = np.array(x2, dtype=float)\n\n    # 3. Compute the Euclidean (L2) distance\n    distance = np.sqrt(np.sum((arr1 - arr2) ** 2))\n\n    # 4. Round the distance to 4 decimal places\n    return round(distance, 4)"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in, fan_out = shape[0], shape[1]\n\n    return float(fan_in), float(fan_out)\n```\n"}
{"task_id": 434, "completion_id": 0, "completion": "import numpy as np\n\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"\n    Compute a row-wise numerically-stable softmax of the input 'logits' array.\n    - If 'logits' is 1D, treat it as a single row.\n    - Round each probability to 6 decimal places.\n    - Return a Python list of lists.\n    \"\"\"\n    # If 1D, reshape into (1, n)\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    \n    # Prepare a container for results\n    results = []\n    \n    # Iterate each row\n    for row in logits:\n        # Numerically stable transformation\n        shifted_row = row - np.max(row)\n        exp_row = np.exp(shifted_row)\n        summation = np.sum(exp_row)\n        softmax_row = exp_row / summation\n        \n        # Round each probability to 6 decimal places and convert to Python list\n        rounded_row = [round(val, 6) for val in softmax_row]\n        results.append(rounded_row)\n    \n    return results"}
{"task_id": 435, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"\n    Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert input to numpy arrays of float type\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Number of samples\n    m = X_np.shape[0]\n\n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        # Return a vector filled with the mean of y\n        mean_y = float(np.mean(y_np))\n        predictions = [round(mean_y, 4)] * m\n        return predictions\n\n    # 1) Compute the mean of y; this is our initial prediction\n    mean_y = np.mean(y_np)\n    y_hat = np.full_like(y_np, mean_y)\n\n    # 2) Boosting iterations\n    for _ in range(n_estimators):\n        # a) Compute residuals\n        residuals = y_np - y_hat\n\n        # b) Fit OLS: create X_aug with a column of 1s to include intercept\n        X_aug = np.hstack([np.ones((m, 1)), X_np])  # shape (m, d+1)\n        # Solve for parameters (intercept + coefficients) via least squares\n        params, _, _, _ = np.linalg.lstsq(X_aug, residuals, rcond=None)\n\n        # c) Predict residuals using the fitted model\n        residual_pred = X_aug @ params\n\n        # d) Update y_hat\n        y_hat = y_hat + learning_rate * residual_pred\n\n    # Round predictions to 4 decimals and convert to a regular list\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 437, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check if order is valid\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Determine if input is scalar\n    is_scalar = isinstance(x, (int, float))\n\n    # Convert input to a NumPy array (for easy broadcast)\n    arr = np.array(x, dtype=float)\n\n    # Compute the sigmoid function\n    s = 1 / (1 + np.exp(-arr))\n    \n    if order == 0:\n        result = s\n    elif order == 1:\n        # First derivative: sigma(x)*(1 - sigma(x))\n        result = s * (1 - s)\n    else:  # order == 2\n        # Second derivative: sigma(x)*(1 - sigma(x))*(1 - 2*sigma(x))\n        result = s * (1 - s) * (1 - 2*s)\n\n    # Round to 4 decimals\n    result = np.round(result, 4)\n\n    # Return float if scalar was provided, else Python list\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "completion": "import numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Ensure y is a NumPy array of integers\n    y = np.array(y, dtype=int)\n    \n    # Handle the case of empty input\n    if y.size == 0:\n        # If num_classes not given, assume 0\n        if num_classes is None:\n            num_classes = 0\n        # Return an empty 2D list if y is empty\n        return [[] for _ in range(0)]\n    \n    # Determine max class index\n    max_class = np.max(y)\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max_class + 1\n    \n    # If the provided num_classes is smaller than needed, return -1\n    if num_classes < (max_class + 1):\n        return -1\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    result = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Place 1's in the appropriate positions\n    result[np.arange(y.shape[0]), y] = 1\n    \n    # Convert to standard Python list of lists and return\n    return result.tolist()"}
{"task_id": 439, "completion_id": 0, "completion": "import itertools\n\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list (or iterable) of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n        Each tuple is in ascending order.\n    \"\"\"\n    # Convert each transaction to a set for fast subset checking\n    transaction_sets = [set(t) for t in transactions]\n    num_transactions = len(transactions)\n    min_count = max(1, int(min_sup * num_transactions + 0.9999999))  # ceiling for min_count\n\n    # ------------------------------------------------------------------------\n    # 1. Generate L1: count each single item.\n    # ------------------------------------------------------------------------\n    item_counts = {}\n    for tset in transaction_sets:\n        for item in tset:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    # Keep only those single items that are frequent\n    L1 = {\n        (item,): cnt\n        for item, cnt in item_counts.items()\n        if cnt >= min_count\n    }\n\n    # If there are no frequent singletons, we're done\n    if not L1:\n        return []\n\n    # We will collect all levels of frequent itemsets in this list of dicts\n    # Each dict: { itemset_tuple : count }\n    levels = [L1]\n\n    # ------------------------------------------------------------------------\n    # Helper function to check support counts for new candidates\n    # ------------------------------------------------------------------------\n    def count_candidates(candidates, transaction_sets):\n        \"\"\"Count how many transactions contain each candidate.\"\"\"\n        counts = {c: 0 for c in candidates}  # initialize\n        for tset in transaction_sets:\n            for c in candidates:\n                # If c is subset of tset\n                # c is a tuple, check all items in c are in tset\n                if all(item in tset for item in c):\n                    counts[c] += 1\n        return counts\n\n    # ------------------------------------------------------------------------\n    # Generate next-level candidates from prev-level frequent itemsets\n    # ------------------------------------------------------------------------\n    def generate_candidates(prev_level_keys, k):\n        \"\"\"\n        Generate candidate k-itemsets by self-joining the (k-1)-itemsets.\n        Then apply the Apriori pruning step: all (k-1)-subsets must be frequent.\n        \"\"\"\n        candidates = set()\n        prev_level_list = sorted(prev_level_keys)\n        n = len(prev_level_list)\n        for i in range(n):\n            for j in range(i+1, n):\n                itemset1 = prev_level_list[i]\n                itemset2 = prev_level_list[j]\n                # For Apriori, we only combine if they share the first k-2 items\n                # (because each itemset has length k-1)\n                if itemset1[:-1] == itemset2[:-1]:\n                    # Join to form a sorted candidate\n                    new_candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    # Ensure the new candidate has length k\n                    if len(new_candidate) == k:\n                        # Prune step: all (k-1)-subsets of new_candidate\n                        # must be in the previous frequent itemsets\n                        all_subsets_frequent = True\n                        for subset in itertools.combinations(new_candidate, k-1):\n                            subset = tuple(sorted(subset))\n                            if subset not in prev_level_keys:\n                                all_subsets_frequent = False\n                                break\n                        if all_subsets_frequent:\n                            candidates.add(new_candidate)\n                else:\n                    # Since the list is sorted, if the prefix doesn't match, no need to check further\n                    break\n        return candidates\n\n    # ------------------------------------------------------------------------\n    # 2. Iteratively generate candidates L_k from L_{k-1}\n    # ------------------------------------------------------------------------\n    k = 2\n    while True:\n        # Get the frequent itemsets from the last level\n        prev_level = levels[-1]\n        prev_level_keys = set(prev_level.keys())\n        \n        # Generate candidate k-itemsets\n        ck = generate_candidates(prev_level_keys, k)\n\n        if not ck:\n            break  # no candidates to count => done\n\n        # Count their frequencies\n        ck_counts = count_candidates(ck, transaction_sets)\n\n        # Keep only those that meet min_count\n        lk = {c: cnt for c, cnt in ck_counts.items() if cnt >= min_count}\n        if not lk:\n            break  # no frequent itemsets of size k\n        \n        levels.append(lk)\n        k += 1\n\n    # ------------------------------------------------------------------------\n    # 3. Combine all frequent itemsets across all levels\n    # ------------------------------------------------------------------------\n    all_frequent_itemsets = []\n    for level_dict in levels:\n        all_frequent_itemsets.extend(level_dict.keys())\n    \n    # Sort by length, then lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return all_frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "completion": "import numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n\n        If two or more classes share the same maximal probability after rounding,\n        the smallest index is chosen (default `numpy.argmax` behavior).\n    \"\"\"\n    # Convert to a NumPy array shape (n_estimators, n_samples, n_classes)\n    arr = np.array(predictions)\n\n    # Average over the estimator dimension (axis=0) -> shape (n_samples, n_classes)\n    avg_probs = arr.mean(axis=0)\n\n    # Round each probability to 4 decimal places\n    avg_probs_rounded = np.round(avg_probs, 4)\n\n    # Compute the predicted class for each sample (argmax on the rounded values)\n    predicted_labels = np.argmax(avg_probs_rounded, axis=1)\n\n    # Convert results back to regular Python lists\n    avg_probs_list = avg_probs_rounded.tolist()\n    predicted_labels_list = predicted_labels.tolist()\n\n    return avg_probs_list, predicted_labels_list"}
{"task_id": 441, "completion_id": 0, "completion": "import numpy as np\n\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return window_len samples of a Hamming window.\n    When symmetric is False, return the periodic variant (last sample of\n    the symmetric window removed). Each value is rounded to 4 decimals.\n    \"\"\"\n    # Handle edge cases\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    if symmetric:\n        # Use denominator = window_len - 1\n        denominator = window_len - 1\n    else:\n        # Use denominator = window_len for the periodic version\n        denominator = window_len\n\n    # Generate the index array\n    n = np.arange(window_len)\n\n    # Calculate the Hamming window\n    w = 0.54 - 0.46 * np.cos(2.0 * np.pi * n / denominator)\n\n    # Round to 4 decimals and convert to a plain Python list\n    return np.round(w, 4).tolist()"}
{"task_id": 442, "completion_id": 0, "completion": "import numpy as np\nimport heapq\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a KD-Tree.\n\n    The function must build a KD-Tree from the training data, query the *k* nearest\n    neighbours for every sample in *X_test*, perform a majority vote on their\n    labels and return the sequence of predicted labels.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_train, n_features) with training\n                 samples.\n        y_train: 1-D NumPy integer array of shape (n_train,) containing the class\n                 label for every training sample.\n        X_test:  2-D NumPy array of shape (n_test, n_features) with samples to\n                 be classified.\n        k:       Number of nearest neighbours to use (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A Python *list* with the predicted label for every row in *X_test*.\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # 1) Build KD-Tree in a balanced way by recursively splitting on the median\n    # -------------------------------------------------------------------------\n    def build_kdtree(points, labels, depth=0):\n        if len(points) == 0:\n            return None\n        # Select axis based on depth\n        axis = depth % points.shape[1]\n\n        # Sort points (and labels) by the coordinate on the current axis\n        sorted_indices = np.argsort(points[:, axis])\n        points = points[sorted_indices]\n        labels = labels[sorted_indices]\n        median_idx = len(points) // 2\n\n        # Pivot is the median\n        pivot_point = points[median_idx]\n        pivot_label = labels[median_idx]\n\n        # Recursively build left and right subtrees\n        left_subtree = build_kdtree(points[:median_idx], labels[:median_idx], depth+1)\n        right_subtree = build_kdtree(points[median_idx+1:], labels[median_idx+1:], depth+1)\n\n        # Node structure: (axis, pivot_point, pivot_label, left_subtree, right_subtree)\n        return (axis, pivot_point, pivot_label, left_subtree, right_subtree)\n\n    # Build the KD-Tree once using the entire training set\n    kdtree_root = build_kdtree(X_train, y_train, depth=0)\n\n    # -------------------------------------------------------------------------\n    # 2) Efficient k-NN query using the KD-Tree and a max-heap of size k\n    # -------------------------------------------------------------------------\n    def kd_search_k_neighbors(node, query_point, k, heap):\n        \"\"\"\n        Recursively traverse the KD-tree and maintain the k closest points\n        in a max-heap (by negative distance).\n        \n        node: A tuple (axis, pivot_point, pivot_label, left_subtree, right_subtree)\n        query_point: The point in X_test we're querying\n        k: number of neighbors to collect\n        heap: a max-heap of (negative_squared_distance, label) of size up to k\n        \"\"\"\n        if node is None:\n            return\n\n        axis, pivot_point, pivot_label, left_subtree, right_subtree = node\n\n        # Compute squared distance from the query to the pivot\n        dist_sq = np.sum((query_point - pivot_point) ** 2)\n\n        # If we don't have k points yet, or we found a closer point, push/pop from the heap\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist_sq, pivot_label))\n        else:\n            # Compare with the largest distance in the heap (stored as negative)\n            if dist_sq < -heap[0][0]:\n                heapq.heapreplace(heap, (-dist_sq, pivot_label))\n\n        # Determine which side of the splitting plane to explore first\n        diff = query_point[axis] - pivot_point[axis]\n\n        # Search the side of the split in which the query point lies\n        if diff < 0.0:\n            kd_search_k_neighbors(left_subtree, query_point, k, heap)\n            # Check if we need to also explore the other side\n            if (len(heap) < k) or (diff**2 < -heap[0][0]):\n                kd_search_k_neighbors(right_subtree, query_point, k, heap)\n        else:\n            kd_search_k_neighbors(right_subtree, query_point, k, heap)\n            if (len(heap) < k) or (diff**2 < -heap[0][0]):\n                kd_search_k_neighbors(left_subtree, query_point, k, heap)\n\n    # -------------------------------------------------------------------------\n    # 3) For each sample in X_test, find k nearest neighbors and do majority vote\n    # -------------------------------------------------------------------------\n    predictions = []\n    for x in X_test:\n        # For each test point, run a KD-tree based search\n        max_heap = []\n        kd_search_k_neighbors(kdtree_root, x, k, max_heap)\n\n        # max_heap now holds up to k points (negative distance, label)\n        neighbor_labels = [label for (_, label) in max_heap]\n\n        # Majority vote (the smallest label index is chosen in case of tie)\n        best_label = np.argmax(np.bincount(neighbor_labels))\n        predictions.append(best_label)\n\n    # Convert predictions to a plain list of ints (if not already)\n    return list(predictions)"}
{"task_id": 443, "completion_id": 0, "completion": "import numpy as np\n\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold => left subset if value >= threshold\n        left_mask = X[:, feature_i] >= threshold\n    else:\n        # Non-numeric threshold => left subset if value == threshold\n        left_mask = X[:, feature_i] == threshold\n\n    right_mask = ~left_mask\n    left_subset = X[left_mask]\n    right_subset = X[right_mask]\n\n    return left_subset, right_subset"}
{"task_id": 444, "completion_id": 0, "completion": "import numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications:\n      k(x, y) = exp(-0.5 * sum_j( ( (x_j - y_j)/sigma_j )^2 ))\n\n      \u2022 If 'sigma' is a single float, the same value is used for each feature.\n      \u2022 If 'sigma' is a list of length C, each feature has its own sigma_j.\n      \u2022 If 'sigma' is None, a default sigma = sqrt(C/2) is used.\n      \u2022 Return -1 if:\n            -- 'sigma' is non-positive,\n            -- or 'sigma' is a list of incorrect length or non-positive values,\n            -- or feature dimensions of X and Y do not match.\n      \u2022 Otherwise, return the kernel matrix (N\u00d7M) (rounded to 4 decimal places) as a nested list.\n    \"\"\"\n    # Convert X to numpy array\n    try:\n        X_arr = np.array(X, dtype=float)\n    except ValueError:\n        return -1  # If X cannot be converted to float array, treat as invalid input\n    \n    # If Y not provided, use X\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        try:\n            Y_arr = np.array(Y, dtype=float)\n        except ValueError:\n            return -1  # If Y cannot be converted to float array, treat as invalid input\n\n    # Check dimension consistency\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        return -1  # Must be 2-D lists\n    N, C = X_arr.shape\n    M, C_y = Y_arr.shape\n    if C != C_y:\n        return -1  # Feature dimensions must match\n\n    # Determine sigma\n    if sigma is None:\n        # Default sigma\n        sigma_val = np.sqrt(C / 2.0)\n        sigma_arr = np.full((C,), sigma_val, dtype=float)\n    elif isinstance(sigma, float) or isinstance(sigma, int):\n        # Single value for all features\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full((C,), float(sigma), dtype=float)\n    elif isinstance(sigma, list):\n        # Each feature has own sigma\n        if len(sigma) != C:\n            return -1\n        # Check all values positive\n        for s in sigma:\n            if s <= 0:\n                return -1\n        sigma_arr = np.array(sigma, dtype=float)\n    else:\n        return -1  # Invalid type for sigma\n\n    # Compute the RBF kernel\n    # Expand X and Y so that we can broadcast over all pairs (N x M x C)\n    diff = X_arr[:, np.newaxis, :] - Y_arr[np.newaxis, :, :]\n    # Scale each dimension by its respective sigma\n    # shape of diff = (N, M, C), shape of sigma_arr = (C,)\n    # Broadcast to divide each feature by sigma (or multiply by 1/sigma)\n    diff = diff / sigma_arr  # broadcasting\n\n    # Squared distances summed along the feature dimension\n    dist_sq = np.sum(diff**2, axis=2)\n\n    # RBF formula: exp(-0.5 * dist_sq)\n    K = np.exp(-0.5 * dist_sq)\n\n    # Round to 4 decimals and convert to (nested) Python list\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 446, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    # Convert inputs to numpy arrays for convenience\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=int)\n\n    # Number of samples and features\n    n_samples, n_features = X.shape\n\n    # -------------------------------------------------------------------------\n    # Helper functions\n    # -------------------------------------------------------------------------\n    def compute_entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute the Shannon entropy of the array of labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        # Count frequency of each label\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / len(labels)\n        # Shannon entropy\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels: np.ndarray) -> int:\n        \"\"\"\n        Return the most frequent label in 'labels'.\n        In case of tie, return the smallest label.\n        \"\"\"\n        if len(labels) == 0:\n            return 0  # Should not happen in this context, but a fallback\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        max_count = np.max(counts)\n        # Among those that appear max_count times, pick the smallest label\n        candidates = unique_labels[counts == max_count]\n        return np.min(candidates)\n\n    # -------------------------------------------------------------------------\n    # Early check: if all labels are identical, no split can improve info gain\n    # -------------------------------------------------------------------------\n    parent_entropy = compute_entropy(y)\n    if parent_entropy == 0:\n        # All samples have the same label\n        maj_label = majority_label(y)\n        return (-1, None, maj_label, maj_label)\n\n    # Majority label of the entire node (in case we end up with no improvement)\n    overall_majority_label = majority_label(y)\n\n    # -------------------------------------------------------------------------\n    # Prepare to search for the best split\n    # -------------------------------------------------------------------------\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_label = overall_majority_label\n    best_right_label = overall_majority_label\n\n    # -------------------------------------------------------------------------\n    # For each feature, consider midpoints between successive distinct values\n    # -------------------------------------------------------------------------\n    for j in range(n_features):\n        # Get sorted unique values in this column\n        col_j = X[:, j]\n        unique_vals = np.unique(col_j)\n        # If there's only one unique value, no valid threshold to split\n        if len(unique_vals) == 1:\n            continue\n\n        # Potential thresholds are midpoints between successive distinct values\n        thresholds = (\n            (unique_vals[:-1] + unique_vals[1:]) / 2.0\n        )\n\n        # Evaluate each candidate threshold\n        for thr in thresholds:\n            # Split indices\n            left_indices = (col_j <= thr)\n            right_indices = (col_j > thr)\n\n            # Retrieve corresponding labels\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n\n            # Compute left/right proportions\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n\n            # Compute entropies\n            left_entropy = compute_entropy(y_left)\n            right_entropy = compute_entropy(y_right)\n\n            # Information gain\n            # Gain = H(parent) - p_left * H(left) - p_right * H(right)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n\n            if gain > best_gain:\n                # This is strictly better -> update\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = thr\n                best_left_label = majority_label(y_left)\n                best_right_label = majority_label(y_right)\n            elif np.isclose(gain, best_gain):\n                # Tie case: check tie-breaking rules\n                # 1) smaller feature index\n                # 2) if same feature, smaller threshold\n                if j < best_feature_index or best_feature_index == -1:\n                    best_feature_index = j\n                    best_threshold = thr\n                    best_left_label = majority_label(y_left)\n                    best_right_label = majority_label(y_right)\n                elif j == best_feature_index and thr < best_threshold:\n                    best_threshold = thr\n                    best_left_label = majority_label(y_left)\n                    best_right_label = majority_label(y_right)\n\n    # -------------------------------------------------------------------------\n    # If no gain was found (best_gain == 0), return the degenerate stump\n    # -------------------------------------------------------------------------\n    if best_gain <= 1e-15:\n        # No improvement: return (-1, None, majority_label, majority_label)\n        return (-1, None, overall_majority_label, overall_majority_label)\n\n    # Otherwise, return the best split found.\n    # Threshold must be rounded to 4 decimal places.\n    return (\n        best_feature_index,\n        round(best_threshold, 4),\n        best_left_label,\n        best_right_label\n    )"}
{"task_id": 447, "completion_id": 0, "completion": "import numpy as np\n\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    # Directly use numpy.ones with the given shape and kwargs,\n    # and then return the pure Python list via tolist().\n    return np.ones(shape, **kwargs).tolist()"}
{"task_id": 448, "completion_id": 0, "completion": "import numpy as np\n\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places. If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    # If y_train is empty, return an empty list\n    if y_train.size == 0:\n        return []\n    \n    # Compute the arithmetic mean of y_train\n    mean_val = np.mean(y_train)\n    \n    # Create an array with the mean value repeated for each row in X_test\n    predictions = np.full(X_test.shape[0], mean_val)\n    \n    # Round predictions to the nearest 4th decimal and return as a plain list\n    predictions = np.round(predictions, 4).tolist()\n    return predictions"}
{"task_id": 449, "completion_id": 0, "completion": "import numpy as np\n\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n\n    # Separate the training data by class\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n\n    # Compute the means of each class\n    Mu0 = np.mean(X0, axis=0)\n    Mu1 = np.mean(X1, axis=0)\n\n    # Stack the mean-subtracted data (though Sigma is not reused later, we replicate the steps)\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = X_train.shape[1]\n    Sigma = (1.0 / m) * np.dot(X_sub_Mu.T, X_sub_Mu)  # not used further\n\n    # Compute the normal vector of the separating hyperplane\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec**2))  # make it a unit vector\n    w = normal_vec\n\n    # Compute the bias term\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n\n    # Determine if class-1 mean is on the positive side\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n\n    # Apply the prediction rule\n    predictions = (np.dot(X_test, w) + b > 0).astype(int) * sign\n\n    # Return as a Python list of int (0 or 1)\n    return predictions.tolist()"}
{"task_id": 450, "completion_id": 0, "completion": "import numpy as np\n\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    results = []\n    for row in preds:\n        counts = np.bincount(row)\n        results.append(counts.argmax())\n    return results"}
{"task_id": 451, "completion_id": 0, "completion": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\n\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Classify X_test using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to X_train.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    list[int]\n        A list containing one predicted label per row of X_test.\n    \"\"\"\n    # Edge cases\n    if X_train.size == 0 or k <= 0:\n        return []\n    \n    # ---------------------------\n    # 1. Build a KD-Tree from X_train and y_train\n    # ---------------------------\n\n    # A KD-Tree node is represented as a tuple:\n    # (point: np.ndarray, label: int, left_subtree, right_subtree, axis: int)\n    # If the node is empty, it is None.\n    def build_kd_tree(points: np.ndarray, labels: np.ndarray, depth: int = 0):\n        if len(points) == 0:\n            return None\n        axis = depth % points.shape[1]\n        # Sort according to the current axis\n        sorted_indices = np.argsort(points[:, axis])\n        median_idx = len(points) // 2\n        median = sorted_indices[median_idx]\n\n        return (\n            points[median],\n            labels[median],\n            build_kd_tree(points[sorted_indices[:median_idx]], \n                          labels[sorted_indices[:median_idx]], \n                          depth + 1),\n            build_kd_tree(points[sorted_indices[median_idx + 1:]], \n                          labels[sorted_indices[median_idx + 1:]], \n                          depth + 1),\n            axis\n        )\n\n    # Build the KD-Tree once\n    kd_tree = build_kd_tree(X_train, y_train)\n\n    # ---------------------------\n    # 2. Define a function to search the k nearest neighbors \n    #    in the KD-Tree for a single point\n    # ---------------------------\n\n    def squared_euclidean_distance(a: np.ndarray, b: np.ndarray) -> float:\n        return np.sum((a - b) ** 2)\n\n    # We use a max-heap with negative distances to keep track of the closest k points.\n    # Heap elements: (negative_distance, label).\n    # The largest negative_distance (i.e. the front of the max-heap) \n    # will be the farthest among the current top k neighbors.\n\n    def knn_search(node, point: np.ndarray, k: int) -> List[Tuple[float, int]]:\n        # This helper function returns a list of (squared_dist, label) for the k nearest neighbors\n        # in the subtree rooted at node.\n        heap: List[Tuple[float, int]] = []  # Will store (-squared_distance, label)\n\n        def search_recursive(current_node):\n            if current_node is None:\n                return\n\n            node_point, node_label, left_node, right_node, axis = current_node\n\n            # Calculate squared distance of the current node's point to the query\n            dist = squared_euclidean_distance(point, node_point)\n\n            # If we don't have k points yet, push this one\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, node_label))\n            else:\n                # If this point is closer than the farthest in the heap, replace\n                farthest_dist = -heap[0][0]  # largest distance among the top-k so far\n                if dist < farthest_dist:\n                    heapq.heapreplace(heap, (-dist, node_label))\n\n            # Determine which branch to visit first\n            diff = point[axis] - node_point[axis]\n\n            # If diff is negative, go left first, else right first\n            if diff < 0:\n                first_subtree, second_subtree = left_node, right_node\n            else:\n                first_subtree, second_subtree = right_node, left_node\n\n            # Recurse down the first subtree\n            search_recursive(first_subtree)\n\n            # Check whether we need to explore the other subtree\n            # If our heap is not full OR the absolute diff^2 is smaller than the farthest distance\n            # we already have in the heap, then the other subtree could hold closer points.\n            if len(heap) < k or diff**2 < -heap[0][0]:\n                search_recursive(second_subtree)\n\n        search_recursive(node)\n        # Convert from negative distance to actual squared distance\n        # Return a list of (squared_distance, label)\n        neighbors = [(-neg_dist, label) for (neg_dist, label) in heap]\n        return neighbors\n\n    # ---------------------------\n    # 3. Classify each sample in X_test\n    # ---------------------------\n    predictions = []\n    for x in X_test:\n        neighbors = knn_search(kd_tree, x, k)\n        # neighbors = [(squared_dist, label), ...] for the k nearest neighbors\n        labels = [lbl for (_, lbl) in neighbors]\n        label_frequency = Counter(labels)\n        # Find the label with the highest count, tie broken by smallest label\n        # So we want: max_count first (descending), then label ascending\n        # Minimizing by label effectively means we want the smallest label among ties.\n        # We can do this by:\n        # min(label_frequency.keys(), key=lambda L: (-label_frequency[L], L))\n        best_label = min(label_frequency.keys(), key=lambda L: (-label_frequency[L], L))\n        predictions.append(best_label)\n\n    return predictions"}
{"task_id": 452, "completion_id": 0, "completion": "import numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  The first element is the 'first subset',\n        and the second element is the 'second subset'. Both are regular\n        Python lists (converted via .tolist() if needed).\n    \"\"\"\n    # Convert X to a NumPy array if it's a list\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=object)\n    \n    # Determine if threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Prepare two lists to hold the subsets\n    subset_0 = []\n    subset_1 = []\n    \n    # Partition the samples\n    for row in X:\n        value = row[feature_i]\n        \n        if is_numeric:\n            if value >= threshold:\n                subset_0.append(row)\n            else:\n                subset_1.append(row)\n        else:  # categorical\n            if value == threshold:\n                subset_0.append(row)\n            else:\n                subset_1.append(row)\n    \n    # Convert the subsets to NumPy arrays for .tolist() (if they're non-empty),\n    # then return them as lists in a 2-element list.\n    subset_0 = np.array(subset_0, dtype=object).tolist() if len(subset_0) > 0 else []\n    subset_1 = np.array(subset_1, dtype=object).tolist() if len(subset_1) > 0 else []\n    \n    return [subset_0, subset_1]"}
{"task_id": 453, "completion_id": 0, "completion": "import numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check gamma in [0,1]\n    if gamma < 0 or gamma > 1:\n        return -1\n\n    # Q and Q_next must be 2D and of the same shape\n    if Q.ndim != 2 or Q_next.ndim != 2 or Q.shape != Q_next.shape:\n        return -1\n\n    b, n_actions = Q.shape\n\n    # actions, rewards, dones must all have length b\n    if not (len(actions) == b and len(rewards) == b and len(dones) == b):\n        return -1\n\n    # Copy the original Q-values\n    updated_Q = Q.copy()\n\n    # Compute and assign the targets\n    for i in range(b):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        # Replace only the action taken\n        updated_Q[i, actions[i]] = target\n\n    # Round to 4 decimal places and convert to nested list\n    return updated_Q.round(4).tolist()"}
{"task_id": 454, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    half_size = batch_size // 2\n\n    valid_half = np.array([[1, 0]] * half_size)\n    fake_half = np.array([[0, 1]] * half_size)\n    valid_full = np.array([[1, 0]] * batch_size)\n\n    return valid_half.tolist(), fake_half.tolist(), valid_full.tolist()\n```"}
{"task_id": 455, "completion_id": 0, "completion": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter\n\ndef knn_classifier(X_train, y_train, X_query, k, method=\"naive\"):\n    \"\"\"k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, default \"naive\"\n        Neighbour search strategy: \"naive\", \"heap\" or \"kdtree\".\n\n    Returns\n    -------\n    list[int]\n        Predicted label for each query sample (ties broken by smallest label).\n    \"\"\"\n\n    # Ensure arrays are np.ndarray\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    X_query = np.asarray(X_query, dtype=float)\n\n    n_train, n_features = X_train.shape\n    n_query = X_query.shape[0]\n\n    # ----------------------------------------------------------------\n    # Helper function: majority vote with tie-breaking by smallest label\n    # ----------------------------------------------------------------\n    def majority_vote(labels):\n        c = Counter(labels)\n        max_count = max(c.values())\n        # Among labels with maximal count, pick the smallest\n        candidates = [lab for lab, cnt in c.items() if cnt == max_count]\n        return min(candidates)\n\n    # ----------------------------------------------------------------\n    # Naive method: compare query with every training point\n    # ----------------------------------------------------------------\n    def knn_naive(query):\n        # Compute distances to all training samples\n        # Return the k-nearest labels\n        distances = np.sqrt(np.sum((X_train - query) ** 2, axis=1))\n        # Get indices of the k nearest, then gather labels\n        idx_sorted = np.argsort(distances)\n        nearest_labels = y_train[idx_sorted[:k]]\n        return majority_vote(nearest_labels)\n\n    # ----------------------------------------------------------------\n    # Heap method: compute all distances once, then keep k closest using heap\n    # ----------------------------------------------------------------\n    def knn_heap(query):\n        distances = np.sqrt(np.sum((X_train - query) ** 2, axis=1))\n        # Create (distance, label) pairs\n        dist_label_pairs = list(zip(distances, y_train))\n        # Extract k smallest by distance\n        k_smallest = heapq.nsmallest(k, dist_label_pairs, key=lambda x: x[0])\n        # Take their labels\n        nearest_labels = [lbl for _, lbl in k_smallest]\n        return majority_vote(nearest_labels)\n\n    # ----------------------------------------------------------------\n    # KD-Tree approach\n    # ----------------------------------------------------------------\n\n    class KDNode:\n        __slots__ = ('pivot', 'label', 'axis', 'left', 'right')\n\n        def __init__(self, pivot, label, axis, left, right):\n            self.pivot = pivot   # np.ndarray (the point)\n            self.label = label   # int\n            self.axis = axis     # int (dimension of split)\n            self.left = left     # KDNode or None\n            self.right = right   # KDNode or None\n\n    def build_kdtree(points, labels, depth=0):\n        if len(points) == 0:\n            return None\n        # Split dimension\n        axis = depth % n_features\n        # Sort by the chosen axis\n        sorted_idx = np.argsort(points[:, axis])\n        median_idx = len(points) // 2\n\n        pivot_idx = sorted_idx[median_idx]\n        pivot_point = points[pivot_idx]\n        pivot_label = labels[pivot_idx]\n\n        left_points = points[sorted_idx[:median_idx]]\n        left_labels = labels[sorted_idx[:median_idx]]\n        right_points = points[sorted_idx[median_idx+1:]]\n        right_labels = labels[sorted_idx[median_idx+1:]]\n\n        left_child = build_kdtree(left_points, left_labels, depth+1)\n        right_child = build_kdtree(right_points, right_labels, depth+1)\n\n        return KDNode(pivot_point, pivot_label, axis, left_child, right_child)\n\n    # We store (-distance, label) in the heap so the largest distance is on top\n    def kdtree_search(node, query, k, heap):\n        \"\"\"Search KD-Tree and keep up to k nearest neighbors in max-heap (by negative distance).\"\"\"\n        if node is None:\n            return\n\n        # Compute squared distance to avoid the cost of sqrt repeatedly\n        dist_sq = np.sum((node.pivot - query) ** 2)\n        # Current \"worst\" distance among the kept k neighbors\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist_sq, node.label))\n        else:\n            # If this distance is smaller than the largest in the heap, pop/push\n            if dist_sq < -heap[0][0]:\n                heapq.heapreplace(heap, (-dist_sq, node.label))\n\n        axis = node.axis\n        diff = query[axis] - node.pivot[axis]\n\n        # Choose branch: the side containing the query first\n        if diff < 0:\n            # Search left subtree first, then right\n            kdtree_search(node.left, query, k, heap)\n            # Check whether we might find a closer point in the other branch\n            if diff**2 < -heap[0][0] or len(heap) < k:\n                kdtree_search(node.right, query, k, heap)\n        else:\n            # Search right subtree first, then left\n            kdtree_search(node.right, query, k, heap)\n            if diff**2 < -heap[0][0] or len(heap) < k:\n                kdtree_search(node.left, query, k, heap)\n\n    # Build the KD-Tree if needed\n    kd_root = None\n    if method == \"kdtree\":\n        kd_root = build_kdtree(X_train, y_train, depth=0)\n\n    # ----------------------------------------------------------------\n    # Main classification loop\n    # ----------------------------------------------------------------\n    predictions = []\n    for q in X_query:\n        if method == \"naive\":\n            pred = knn_naive(q)\n        elif method == \"heap\":\n            pred = knn_heap(q)\n        elif method == \"kdtree\":\n            # Search KD-Tree for current query\n            nearest_heap = []\n            kdtree_search(kd_root, q, k, nearest_heap)\n            # Extract labels from the heap\n            labels_found = [label for (_, label) in nearest_heap]\n            pred = majority_vote(labels_found)\n        else:\n            raise ValueError(\"method must be one of {'naive', 'heap', 'kdtree'}\")\n\n        predictions.append(pred)\n\n    # Return list of predicted labels (ints)\n    return predictions"}
{"task_id": 456, "completion_id": 0, "completion": "import numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # 1. Validate input\n    # Must have at least 2 rows\n    if X.shape[0] < 2:\n        return -1\n    \n    # If Y is provided, it must have the same number of rows as X\n    if Y is not None and Y.shape[0] != X.shape[0]:\n        return -1\n\n    # 2. If Y is None, set Y = X\n    if Y is None:\n        Y = X\n\n    # 3. Compute the cross-covariance (or covariance) matrix\n    n = X.shape[0]  # number of observations\n    # Center the datasets\n    X_centered = X - X.mean(axis=0)\n    Y_centered = Y - Y.mean(axis=0)\n    \n    # Cross-covariance matrix: (X_centered^T * Y_centered) / (n - 1)\n    cov_matrix = (X_centered.T @ Y_centered) / (n - 1)\n    \n    # 4. Round the results to 4 decimal places and convert to list of lists\n    return np.round(cov_matrix, 4).tolist()"}
{"task_id": 457, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    # 1. Validate that alpha is within [0, 1]\n    if alpha < 0 or alpha > 1:\n        return -1\n\n    # Convert weights to a NumPy array for vectorized computation\n    w = np.array(weights, dtype=float)\n\n    # 2. Compute the Elastic-Net penalty\n    l2_term = 0.5 * alpha * np.sum(w ** 2)\n    l1_term = (1 - alpha) * np.sum(np.abs(w))\n    penalty_value = l2_term + l1_term\n\n    # 3. Round the result to 4 decimal places and return\n    return float(round(penalty_value, 4))"}
{"task_id": 458, "completion_id": 0, "completion": "import numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a list (if it's tuple or ndarray)\n    labels_list = list(labels)\n\n    # If there are no labels, we can simply return an empty list\n    if len(labels_list) == 0:\n        return []\n\n    # Check for negative labels\n    if any(label < 0 for label in labels_list):\n        return -1\n\n    # Determine the maximum label\n    max_label = max(labels_list)\n\n    # If num_classes not provided, infer from max_label\n    if num_classes is None:\n        num_classes = max_label + 1\n\n    # If num_classes is smaller than needed\n    if num_classes < max_label + 1:\n        return -1\n\n    # Construct the one-hot encoded result as a list of lists\n    one_hot_result = []\n    for label in labels_list:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot_result.append(row)\n\n    return one_hot_result"}
{"task_id": 459, "completion_id": 0, "completion": "import numpy as np\nimport heapq\n\ndef knn_validate_heap(X_train: np.ndarray,\n                      Y_train: np.ndarray,\n                      X_val: np.ndarray,\n                      Y_val: np.ndarray,\n                      k: int) -> tuple[float, list[int]]:\n    \"\"\"\n    Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    n_val = X_val.shape[0]\n    predicted_labels = []\n\n    for val_idx in range(n_val):\n        # Current validation sample\n        val_sample = X_val[val_idx]\n\n        # Max-heap implemented via a min-heap of negative distances\n        heap = []\n\n        # Find k nearest neighbours using a heap of size k\n        for train_idx in range(X_train.shape[0]):\n            # Compute Euclidean distance\n            dist = np.linalg.norm(val_sample - X_train[train_idx])\n\n            # Push first k distances without condition\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, train_idx))\n            else:\n                # If new distance is smaller than the largest in the heap\n                if -dist > heap[0][0]:  # means dist < -heap[0][0]\n                    heapq.heapreplace(heap, (-dist, train_idx))\n\n        # Extract indices of the k-nearest neighbours\n        neighbours_idx = [idx for (_, idx) in heap]\n\n        # Majority vote among neighbour labels\n        neighbour_labels = Y_train[neighbours_idx]\n        counts = np.bincount(neighbour_labels)\n        pred_label = np.argmax(counts)\n\n        predicted_labels.append(int(pred_label))\n\n    # Compute accuracy\n    correct_count = sum(1 for i in range(n_val) if predicted_labels[i] == Y_val[i])\n    accuracy = correct_count / n_val\n    accuracy_rounded = round(accuracy, 4)\n\n    return accuracy_rounded, predicted_labels"}
{"task_id": 460, "completion_id": 0, "completion": "import numpy as np\n\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*\n    using population covariance and standard deviation.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return -1.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimal places (Python float), or `-1` if the computation is not possible.\n    \"\"\"\n    # If no second matrix is provided, correlate X with itself\n    if Y is None:\n        Y = X\n\n    # Check for matching number of rows\n    if X.shape[0] != Y.shape[0]:\n        return -1\n\n    # Number of samples and features\n    n, p = X.shape\n    _, q = Y.shape\n\n    # Compute the mean of each column (for population parameters)\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n\n    # Compute the population standard deviations\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n\n    # If any column has zero standard deviation, return -1\n    if np.any(std_X == 0.0) or np.any(std_Y == 0.0):\n        return -1\n\n    # Center the data\n    X_centered = X - mean_X\n    Y_centered = Y - mean_Y\n\n    # Compute the population covariance matrix:\n    # cov(X, Y) = (X_centered.T @ Y_centered) / n\n    covariance_matrix = (X_centered.T @ Y_centered) / n\n\n    # Divide each covariance by the product of the corresponding std deviations\n    # correlation[i, j] = cov(X_i, Y_j) / (std_X[i] * std_Y[j])\n    denominator = np.outer(std_X, std_Y)\n    correlation_matrix = covariance_matrix / denominator\n\n    # Round to four decimal places and convert to a Python list of lists\n    correlation_matrix_rounded = np.round(correlation_matrix, 4).tolist()\n    return correlation_matrix_rounded"}
{"task_id": 461, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    X = np.array(x, dtype=float)\n    Y = np.array(y, dtype=float)\n\n    # If no estimators, return the mean of Y\n    if n_estimators <= 0:\n        mean_y = np.mean(Y)\n        return np.round(np.full_like(Y, mean_y), 4).tolist()\n\n    # Initial prediction: the mean of the targets\n    y_hat = np.full_like(Y, np.mean(Y))\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        r = Y - y_hat\n\n        # Stop early if the residuals are (close to) all zero\n        if np.allclose(r, 0, atol=1e-12):\n            break\n\n        # Search for the best split among unique X except the largest\n        unique_x = np.unique(X)\n        if len(unique_x) < 2:\n            # No valid split (all X the same)\n            # Stump: predict the mean residual for all\n            stump_pred = np.full_like(r, np.mean(r))\n        else:\n            best_sse = np.inf\n            best_t = None\n            best_left_mean = 0.0\n            best_right_mean = 0.0\n\n            # Try all possible thresholds except the greatest unique value\n            for t in unique_x[:-1]:\n                left_mask = (X <= t)\n                right_mask = (X > t)\n\n                # Ignore split if either side is empty\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n\n                left_res = r[left_mask]\n                right_res = r[right_mask]\n\n                vL = np.mean(left_res)\n                vR = np.mean(right_res)\n\n                # Sum of squared errors for this split\n                sse = np.sum((left_res - vL)**2) + np.sum((right_res - vR)**2)\n\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_left_mean = vL\n                    best_right_mean = vR\n\n            if np.isinf(best_sse):\n                # No valid split found\n                stump_pred = np.full_like(r, np.mean(r))\n            else:\n                # Make predictions according to the best split\n                stump_pred = np.where(X <= best_t, best_left_mean, best_right_mean)\n\n        # Update the ensemble prediction\n        y_hat += learning_rate * stump_pred\n\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 462, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    # If D is 0 or 1, return the input unchanged (lifter is effectively 1 in all columns).\n    if D <= 1:\n        return mfccs\n\n    # Determine dimensions\n    G, C = mfccs.shape\n\n    # Create the lifter array based on the provided formula\n    n = np.arange(C)\n    lifter_values = 1 + (D / 2.0) * np.sin((np.pi * n) / D)\n\n    # Convert lifter to the same dtype as mfccs\n    lifter_values = lifter_values.astype(mfccs.dtype)\n\n    # Broadcast and multiply each column by its corresponding lifter value\n    return mfccs * lifter_values\n```"}
{"task_id": 463, "completion_id": 0, "completion": "import math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    If X is empty, returns 0.0.\n    \"\"\"\n    if not X:\n        return 0.0\n    \n    max_distance = 0.0\n    for point in X:\n        # Compute squared distance to avoid repeated function calls in large loops\n        squared_dist = sum((c - p)**2 for c, p in zip(centroid, point))\n        dist = math.sqrt(squared_dist)\n        if dist > max_distance:\n            max_distance = dist\n    \n    return round(max_distance, 4)"}
{"task_id": 464, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    predictions = []\n\n    for val_sample in X_val:\n        # Compute squared Euclidean distances to all training points\n        # (no need for the actual square root if we only need to compare distances)\n        distances = np.sum((X_train - val_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbours\n        knn_indices = np.argsort(distances)[:k]\n        \n        # Retrieve the labels of these k neighbours\n        knn_labels = Y_train[knn_indices]\n        \n        # Perform a majority vote (choose the smallest label if there's a tie)\n        label_counts = np.bincount(knn_labels)\n        predicted_label = np.argmax(label_counts)\n        \n        predictions.append(predicted_label)\n\n    # Calculate accuracy\n    correct_count = np.sum(np.array(predictions) == Y_val)\n    accuracy = correct_count / len(Y_val)\n    \n    # Round accuracy to 4 decimal places\n    accuracy = round(accuracy, 4)\n\n    return accuracy, predictions"}
{"task_id": 465, "completion_id": 0, "completion": "import numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                  (not used in the computation).\n\n    Returns:\n        Function f(x1, x2) such that f returns the value of\n        exp(-gamma * ||x1 - x2||^2) rounded to four decimal places.\n    \"\"\"\n    def f(x1, x2):\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n        if gamma == 0:\n            return 1.0  # exponential of 0 is 1, no matter the input\n        dist_sq = np.sum((x1 - x2)**2)\n        val = np.exp(-gamma * dist_sq)\n        return round(val, 4)\n    return f"}
{"task_id": 466, "completion_id": 0, "completion": "```python\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # Translate the string to remove punctuation\n    no_punc = line.translate(_PUNC_TABLE)\n    # Strip leading and trailing whitespace\n    return no_punc.strip()\n```"}
{"task_id": 467, "completion_id": 0, "completion": "import numpy as np\n\ndef regularization(weights: list[float | int], C: float = 0.01, norm: str = \"l2\") -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    arr = np.array(weights, dtype=float)\n\n    if norm == \"l1\":\n        # L1: penalty = C \u00b7 \u03a3 |w\u1d62|\n        #      gradient\u1d62 = C \u00b7 sign(w\u1d62)\n        penalty = C * np.sum(np.abs(arr))\n        gradient = C * np.sign(arr)\n\n    elif norm == \"l2\":\n        # L2: penalty = \u00bd \u00b7 C \u00b7 \u03a3 w\u1d62\u00b2\n        #      gradient\u1d62 = C \u00b7 w\u1d62\n        penalty = 0.5 * C * np.sum(arr**2)\n        gradient = C * arr\n\n    else:\n        return -1\n\n    # Round penalty and gradient to 4 decimals\n    penalty_rounded = round(penalty, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n\n    return penalty_rounded, gradient_rounded"}
{"task_id": 468, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:     Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length k holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    # Ensure y_train has shape (m, 1)\n    if y_train.ndim == 1:\n        y_train = y_train.reshape(-1, 1)\n\n    # Append a column of 1s to X_train and X_test for the bias term\n    m, n = X_train.shape\n    X_train_b = np.hstack([np.ones((m, 1)), X_train])  # shape (m, n+1)\n    k = X_test.shape[0]\n    X_test_b = np.hstack([np.ones((k, 1)), X_test])    # shape (k, n+1)\n\n    # Initialise parameters (weights + bias) to zeros\n    W = np.zeros((n + 1, 1))\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # Gradient-descent optimisation\n    for _ in range(num_iters):\n        # Forward pass\n        z = X_train_b @ W            # shape (m, 1)\n        h = sigmoid(z)               # shape (m, 1)\n\n        # Compute gradient\n        gradient = (X_train_b.T @ (h - y_train)) / m  # shape (n+1, 1)\n\n        # Update parameters\n        W -= learning_rate * gradient\n\n    # Predict on X_test\n    test_probs = sigmoid(X_test_b @ W)  # shape (k, 1)\n    test_preds = (test_probs >= 0.5).astype(int).flatten()\n    \n    # Return as a Python list of 0/1\n    return test_preds.tolist()"}
{"task_id": 469, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef linear_kernel(**kwargs) -> callable:\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n    \n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return -1.\n    \"\"\"\n    def f(x1, x2):\n        x1_arr = np.array(x1, dtype=float)\n        x2_arr = np.array(x2, dtype=float)\n        \n        if x1_arr.shape[0] != x2_arr.shape[0]:\n            return -1\n        \n        # Compute the dot product using np.inner\n        result = np.inner(x1_arr, x2_arr)\n        \n        # Return the result as a built-in Python float\n        return float(result)\n    \n    return f"}
{"task_id": 470, "completion_id": 0, "completion": "import os\n\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # realpath will convert the path to an absolute path, resolve symlinks,\n    # and normalize any \"..\" or \".\" elements\n    canonical_path = os.path.realpath(file_path)\n    # os.path.dirname strips the final component (the \"filename\") from the path\n    return os.path.dirname(canonical_path)"}
{"task_id": 471, "completion_id": 0, "completion": "import numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    n_actions = len(q_table[0])\n\n    # If there is no next state (episode terminated), expected future value = 0\n    if next_state is None:\n        exp_val = 0.0\n    else:\n        # Identify the greedy action in the next state (ties broken by first max)\n        q_next = q_table[next_state]\n        max_q = max(q_next)\n        greedy_action = q_next.index(max_q)\n\n        # Compute expected value under the epsilon-soft policy\n        exp_val = 0.0\n        for a_idx, q_val in enumerate(q_next):\n            if a_idx == greedy_action:\n                # Probability of choosing the greedy action\n                p = (1 - epsilon) + epsilon / n_actions\n            else:\n                # Probability of choosing a non-greedy action\n                p = epsilon / n_actions\n            exp_val += p * q_val\n\n        # Discount by gamma\n        exp_val = gamma * exp_val\n\n    # TD target\n    target = reward + exp_val\n\n    # Update Q-value\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to four decimal places\n    for s in range(len(q_table)):\n        for a in range(n_actions):\n            q_table[s][a] = round(q_table[s][a], 4)\n\n    return q_table"}
{"task_id": 472, "completion_id": 0, "completion": "import numpy as np\n\ndef softmax(x: list | list[list]):\n    \"\"\"\n    Return the softmax probabilities and their element-wise gradient.\n\n    A numerically stable softmax is computed by subtracting the maximum value\n    in each row (or the entire vector if one-dimensional) before exponentiation.\n\n    The element-wise gradient (diagonal of the Jacobian) is:\n        grad_i = softmax_i * (1 - softmax_i)\n\n    Both probabilities and gradient are rounded to 4 decimal places\n    and returned as plain Python lists matching the input shape.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple (probabilities, gradient) where both elements keep the same\n        shape as x and are rounded to 4 decimal places.\n    \"\"\"\n\n    def softmax_1d(array_1d: np.ndarray):\n        # Subtract max for numerical stability\n        shifted = array_1d - np.max(array_1d)\n        exp_vals = np.exp(shifted)\n        return exp_vals / np.sum(exp_vals)\n\n    def gradient_1d(prob_1d: np.ndarray):\n        # Element-wise gradient: p_i * (1 - p_i)\n        return prob_1d * (1 - prob_1d)\n\n    # Convert input to a numpy array\n    arr = np.array(x, dtype=float)\n\n    # Handle 1D case\n    if arr.ndim == 1:\n        probs = softmax_1d(arr)\n        grads = gradient_1d(probs)\n        # Round and convert to Python lists\n        return (np.round(probs, 4).tolist(), np.round(grads, 4).tolist())\n\n    # Handle 2D case (row-wise)\n    elif arr.ndim == 2:\n        probs_2d = []\n        grads_2d = []\n        for row in arr:\n            row_probs = softmax_1d(row)\n            row_grads = gradient_1d(row_probs)\n            probs_2d.append(np.round(row_probs, 4).tolist())\n            grads_2d.append(np.round(row_grads, 4).tolist())\n        return (probs_2d, grads_2d)\n\n    else:\n        raise ValueError(\"Input must be a 1D or 2D list.\")"}
{"task_id": 474, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Each class is arranged in a rectangular cluster:\n    The class index i ranges from 0 to m-1.\n    x ~ U([(floor(i/2)+0.1)*10, (floor(i/2)+0.9)*10])\n    y ~ U([((i mod 2)*interval+0.1)*10, ((i mod 2)*interval+0.9)*10])\n    label = (i - 0.5) * 2  # \u2192 -1, +1, 3, 5, etc.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                   of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates are rounded to 4 decimal places.\n    \"\"\"\n    # If a seed is provided, make the random sampling reproducible\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # Compute the bounds for x and y\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n\n        # Label for class i\n        label = (i - 0.5) * 2\n\n        # Generate training samples\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train_list.append(np.column_stack((x_train, y_train)))\n        Y_train_list.append(np.full((n_train,), label))\n\n        # Generate validation samples\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val_list.append(np.column_stack((x_val, y_val)))\n        Y_val_list.append(np.full((n_val,), label))\n\n    # Concatenate the lists for all classes\n    X_train = np.vstack(X_train_list)\n    Y_train = np.concatenate(Y_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_val = np.concatenate(Y_val_list)\n\n    # Round all coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        (w_new, m_new, v_new) where:\n        * w_new \u2013 updated parameters (same shape as w)\n        * m_new \u2013 updated first moment\n        * v_new \u2013 updated second moment\n    \"\"\"\n\n    # If previous moment arrays do not exist, initialise them to zeros\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Update the biased first and second moment estimates\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    # Compute the bias-corrected estimates\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n\n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```"}
{"task_id": 477, "completion_id": 0, "completion": "import heapq\nfrom typing import List, Tuple\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or -1 if the destination is unreachable.\n    \"\"\"\n    # Helper function to compute the Manhattan distance\n    def heuristic(r, c, dr, dc):\n        return abs(r - dr) + abs(c - dc)\n    \n    # If start is the same as dest, check for obstacle first\n    if start == dest:\n        # If the start cell itself is an obstacle, return -1\n        return 0 if grid[start[0]][start[1]] == 0 else -1\n\n    rows = len(grid)\n    cols = len(grid[0]) if rows > 0 else 0\n    (sr, sc) = start\n    (dr, dc) = dest\n    \n    # Check boundaries and obstacles for start or dest\n    if not (0 <= sr < rows and 0 <= sc < cols):\n        return -1\n    if not (0 <= dr < rows and 0 <= dc < cols):\n        return -1\n    if grid[sr][sc] == 1 or grid[dr][dc] == 1:\n        return -1\n\n    # Min-heap for managing the frontier\n    # Entries in the heap: (f_score, g_score, row, col)\n    # f_score = g_score + heuristic(row, col, dr, dc)\n    pq = []\n    \n    # Calculate the initial heuristic\n    initial_h = heuristic(sr, sc, dr, dc)\n    heapq.heappush(pq, (initial_h, 0, sr, sc))\n    \n    # Dictionary to store the minimum G-cost found for each cell\n    # Keys = (row, col), value = cost so far\n    visited = {(sr, sc): 0}\n\n    # Directions for neighbors (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while pq:\n        f, g, r, c = heapq.heappop(pq)\n        \n        # If we reach the destination, return the accumulated cost g\n        if (r, c) == (dr, dc):\n            return g\n        \n        # If this entry is stale (we already found a better path), skip it\n        if visited.get((r, c), float('inf')) < g:\n            continue\n        \n        # Explore neighbors\n        for drn, dcn in directions:\n            nr, nc = r + drn, c + dcn\n            \n            # Check if neighbor is valid and free\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0:\n                new_g = g + 1\n                # If this path to neighbor is better than any previously recorded\n                if visited.get((nr, nc), float('inf')) > new_g:\n                    visited[(nr, nc)] = new_g\n                    h_val = heuristic(nr, nc, dr, dc)\n                    new_f = new_g + h_val\n                    heapq.heappush(pq, (new_f, new_g, nr, nc))\n    \n    # If we exhaust all possibilities without reaching dest, it's unreachable\n    return -1"}
{"task_id": 478, "completion_id": 0, "completion": "import numpy as np\n\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    # Convert to a NumPy array of type float.\n    arr = np.array(X, dtype=float)\n    \n    # If the array is empty, return an empty list.\n    if arr.size == 0:\n        return []\n    \n    # Number of samples (rows).\n    n = arr.shape[0]\n    \n    # Compute the mean of each column (feature).\n    means = np.mean(arr, axis=0)\n    \n    # Compute population variance for each feature:\n    # var = (1/n) * sum((x_i - x_bar)^2).\n    variance = np.sum((arr - means) ** 2, axis=0) / n\n    \n    # Compute the population standard deviation for each feature.\n    std_dev = np.sqrt(variance)\n    \n    # Round to 4 decimal places and convert to a Python list.\n    return np.round(std_dev, 4).tolist()"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Number of arms\n    N = len(rewards[0])\n    # Number of time-steps\n    T = len(rewards)\n\n    # Initialize estimated values and counters\n    values = np.full(N, ev_prior, dtype=float)\n    counts = np.zeros(N, dtype=int)\n\n    for t in range(T):\n        # Explore with probability epsilon\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the largest estimated value (ties -> smallest index)\n            chosen_arm = int(np.argmax(values))\n\n        # Obtain the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n\n        # Update counts and estimate\n        counts[chosen_arm] += 1\n        values[chosen_arm] += (reward - values[chosen_arm]) / counts[chosen_arm]\n\n    # Return final estimates rounded to 4 decimals\n    return [round(v, 4) for v in values]\n```"}
{"task_id": 480, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n\n    def pre_emphasis(sig, alpha):\n        \"\"\"Apply pre-emphasis filter y[n] = x[n] - alpha * x[n-1].\"\"\"\n        # y[0] = x[0], for n>=1 => y[n] = x[n] - alpha*x[n-1]\n        # A convenient way with NumPy is:\n        return np.append(sig[0], sig[1:] - alpha * sig[:-1])\n\n    def get_window_func(name, length):\n        \"\"\"Return the requested window function of given length.\"\"\"\n        name = name.lower()\n        if name == \"hann\":\n            return np.hanning(length)\n        elif name == \"blackman_harris\":\n            # Blackman-Harris coefficients:\n            # w[n] = a0 - a1*cos(2\u03c0n/(N-1)) + a2*cos(4\u03c0n/(N-1)) - a3*cos(6\u03c0n/(N-1))\n            # a0=0.35875, a1=0.48829, a2=0.14128, a3=0.01168\n            n = np.arange(length)\n            a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n            return (\n                a0\n                - a1 * np.cos((2.0 * np.pi * n) / (length - 1))\n                + a2 * np.cos((4.0 * np.pi * n) / (length - 1))\n                - a3 * np.cos((6.0 * np.pi * n) / (length - 1))\n            )\n        # Default to hamming\n        # np.hamming(N) = 0.54 - 0.46*cos(2\u03c0n/(N-1))\n        return np.hamming(length)\n\n    def mel_to_hz(mel):\n        \"\"\"Convert Mel scale frequency to Hertz.\"\"\"\n        return 700.0 * (10.0 ** (mel / 2595.0) - 1.0)\n\n    def hz_to_mel(hz):\n        \"\"\"Convert frequency in Hertz to Mel scale.\"\"\"\n        return 2595.0 * np.log10(1.0 + hz / 700.0)\n\n    # 1) Pre-emphasis (optional, done by default if alpha != 0)\n    if alpha != 0.0:\n        x = pre_emphasis(x, alpha)\n\n    # 2) Frame the signal\n    frame_width = int(round(window_duration * fs))  # samples per frame\n    stride = int(round(stride_duration * fs))       # stride/hop in samples\n    # Pad if center=True\n    if center:\n        pad_len = frame_width // 2\n        # \"Symmetrically\" typically means reflect around the edges:\n        x = np.pad(x, (pad_len, pad_len), mode=\"reflect\")\n\n    # Number of frames\n    num_frames = 1 + max(0, (len(x) - frame_width) // stride)\n\n    # In case there's no valid framing, return empty results\n    if num_frames <= 0 or frame_width <= 0:\n        return [], []\n\n    frames = []\n    for i in range(num_frames):\n        start = i * stride\n        end = start + frame_width\n        frame = x[start:end]\n        if len(frame) < frame_width:\n            # zero pad if needed (edge case)\n            frame = np.append(frame, np.zeros(frame_width - len(frame)))\n        frames.append(frame)\n    frames = np.vstack(frames)  # shape => (num_frames, frame_width)\n\n    # 3) Apply window function\n    window_vals = get_window_func(window, frame_width)\n    frames = frames * window_vals[np.newaxis, :]\n\n    # 4) Power spectrum\n    # rfft -> length (frame_width // 2 + 1) for each frame\n    # P[k] = |FFT|^2 / N\n    spec = np.fft.rfft(frames, n=frame_width, axis=1)\n    power_spectrum = (np.abs(spec) ** 2) / frame_width  # shape: (num_frames, N/2+1)\n\n    # 5) Build Mel filter bank\n    #    [0, fs/2] -> Mel scale -> n_filters+2 equally spaced -> back to Hz -> to bin indices\n    def build_mel_filterbank(num_filters, nfft, samplerate):\n        # nfft is frame_width\n        # frequency resolution in rfft => nfft//2 + 1 bins\n        # maximum freq is samplerate/2\n        f_min, f_max = 0, samplerate / 2\n        mel_min, mel_max = hz_to_mel(f_min), hz_to_mel(f_max)\n\n        mel_points = np.linspace(mel_min, mel_max, num_filters + 2)\n        hz_points = mel_to_hz(mel_points)\n\n        # bin = floor( (nfft+1) * freq / samplerate )\n        bin_points = np.floor(((nfft + 1) * hz_points) / samplerate).astype(int)\n        bin_points = np.clip(bin_points, 0, nfft // 2)  # ensure within range\n\n        fbank = np.zeros((num_filters, nfft // 2 + 1))\n        for i in range(1, num_filters + 1):\n            left = bin_points[i - 1]\n            center = bin_points[i]\n            right = bin_points[i + 1]\n\n            if center == left:  # guard against same bin\n                center = left + 1\n            if right == center:  # guard against same bin\n                right = center + 1\n            # Rising slope (left -> center)\n            for k in range(left, center):\n                fbank[i - 1, k] = (k - left) / float(center - left) if center > left else 0\n            # Falling slope (center -> right)\n            for k in range(center, right):\n                fbank[i - 1, k] = (right - k) / float(right - center) if right > center else 0\n\n        return fbank\n\n    fbank = build_mel_filterbank(n_filters, frame_width, fs)\n\n    # 6) Project power spectra onto filter bank\n    #    filter_energies = power_spectrum @ fbank^T\n    filter_energies = power_spectrum.dot(fbank.T)  # shape: (num_frames, n_filters)\n\n    # 7) Mean normalization (subtract mean of every column across frames)\n    if mean_normalize and filter_energies.shape[0] > 0:\n        col_means = np.mean(filter_energies, axis=0, keepdims=True)\n        filter_energies -= col_means\n\n    # 8) Replace any exact zeros with eps\n    #    Also compute per-frame energy\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    energy_per_frame[energy_per_frame == 0] = np.finfo(float).eps\n\n    # Round to 4 decimals and convert to Python lists\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n\n    return filter_energies, energy_per_frame\n```\n"}
{"task_id": 481, "completion_id": 0, "completion": "import numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n\n    # If input data is empty, return an empty list\n    if data.size == 0:\n        return []\n\n    # Number of data points\n    n_samples = data.shape[0]\n\n    # Labels for each point (-1 means noise by default)\n    labels = [-1] * n_samples\n\n    # Keep track of visited points\n    visited = [False] * n_samples\n\n    # Function to find all neighbors of a point within eps (including itself)\n    def get_neighbors(point_idx: int) -> list[int]:\n        # Compute distances from data[point_idx] to all points\n        # Use Euclidean distance\n        diffs = data - data[point_idx]\n        dists = np.sqrt(np.sum(diffs * diffs, axis=1))\n        # Return the indices of points where distance <= eps\n        return np.where(dists <= eps)[0].tolist()\n\n    cluster_id = 0  # Start labeling clusters at 0\n\n    # Main DBSCAN loop\n    for i in range(n_samples):\n        if not visited[i]:\n            visited[i] = True\n            neighbors = get_neighbors(i)\n\n            # If not enough neighbors, label as noise (-1).\n            # (Might later be changed if found within a different core's neighborhood.)\n            if len(neighbors) < min_samples:\n                labels[i] = -1\n            else:\n                # We have found a core point; start a new cluster\n                labels[i] = cluster_id\n                # Expand this cluster by BFS/queue\n                queue = neighbors[:]\n\n                # Process every point in the queue\n                while queue:\n                    j = queue.pop()\n                    if not visited[j]:\n                        visited[j] = True\n                        j_neighbors = get_neighbors(j)\n                        # If this new point j is a core point, \n                        # add its neighbors for expansion\n                        if len(j_neighbors) >= min_samples:\n                            queue.extend(j_neighbors)\n\n                    # Assign cluster label if unclassified (i.e., -1)\n                    if labels[j] == -1:\n                        labels[j] = cluster_id\n\n                # Once finished expanding this cluster, move to next cluster ID\n                cluster_id += 1\n\n    return labels"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to a NumPy array of integer type\n    y = np.asarray(y, dtype=int)\n    \n    # Ensure `y` is one-dimensional\n    if y.ndim != 1:\n        raise ValueError(\"Input labels must be a 1D array.\")\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = y.max() + 1\n    \n    # Check for invalid labels\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Class labels must be between 0 and num_classes-1.\")\n    \n    # Create a 2D array of zeros\n    result = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Place 1s in the appropriate positions\n    result[np.arange(len(y)), y] = 1\n    \n    return result\n```"}
{"task_id": 483, "completion_id": 0, "completion": "import numpy as np\n\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    labels = list(labels)  # Ensure we can iterate multiple times if needed\n    \n    # Infer num_classes from the data if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n\n    # Build the one-hot representation\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    \n    return one_hot"}
{"task_id": 484, "completion_id": 0, "completion": "import numpy as np\n\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n    \"\"\"\n    Fit a one-dimensional Lasso regression model by coordinate descent\n    with a polynomial feature expansion up to 'degree' and predict on new data.\n    \n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded\n        to the 4th decimal place.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    X_test = np.array(X_test, dtype=float)\n\n    # Construct polynomial features (including a column of ones) for train/test\n    # phi_train[i, j] = (X_train[i])^(j) for j = 0..degree\n    phi_train = np.column_stack([X_train**d for d in range(degree + 1)])\n    phi_test = np.column_stack([X_test**d for d in range(degree + 1)])\n\n    # Initialize weights\n    w = np.zeros(degree + 1)\n\n    # Coordinate Descent\n    for _ in range(n_iterations):\n        # For each coordinate j\n        for j in range(degree + 1):\n            # Compute z_j = sum_i( phi_{ij}^2 )\n            z_j = np.sum(phi_train[:, j] ** 2)\n\n            # Compute the partial residual by adding back the current contribution of w_j\n            #   partial_residual[i] = y_i - sum_k( phi[i, k] * w_k ) + phi[i, j] * w_j\n            partial_residual = y_train - phi_train.dot(w) + phi_train[:, j] * w[j]\n\n            # rho_j = sum_i( phi_{ij} * partial_residual[i] )\n            rho_j = np.sum(phi_train[:, j] * partial_residual)\n\n            # Update rule\n            if j == 0:\n                # Bias term (no regularization)\n                w[j] = rho_j / z_j\n            else:\n                # Soft thresholding for the j-th weight\n                if rho_j < -reg_factor:\n                    w[j] = (rho_j + reg_factor) / z_j\n                elif rho_j > reg_factor:\n                    w[j] = (rho_j - reg_factor) / z_j\n                else:\n                    w[j] = 0.0\n\n    # Predict on X_test\n    y_pred = phi_test.dot(w)\n\n    # Return rounded prediction list\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 485, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"\n    Fit a univariate regression tree of depth *max_depth* on (X_train, y_train)\n    and predict for points in X_test. If X_train is empty, return [].\n\n    A simple CART-like algorithm for one feature:\n      1. Recursively split on the feature at the point minimizing sum of squared errors\n      2. Stop when max_depth is reached or when <2 samples remain\n      3. Each leaf is labeled with the mean target value in that leaf\n      4. Traverse to get predictions for X_test\n    \"\"\"\n\n    # If no training data, return empty list\n    if len(X_train) == 0:\n        return []\n\n    # Convert to numpy arrays for convenience\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n\n    # Recursive tree-building function\n    def build_tree(X, y, depth):\n        # Stop if node is pure enough or depth limit reached\n        n = len(X)\n        if n < 2 or depth == max_depth:\n            return {\n                'leaf': True,\n                'pred': float(np.mean(y))  # store the mean as the leaf prediction\n            }\n\n        # Sort data by feature values\n        sort_idx = np.argsort(X)\n        X_sorted = X[sort_idx]\n        y_sorted = y[sort_idx]\n\n        # Prefix sums for y and y^2 to compute SSE efficiently\n        prefix_sum_y = np.cumsum(y_sorted)\n        prefix_sum_y2 = np.cumsum(y_sorted**2)\n\n        # Attempt all splits between distinct consecutive X-values\n        best_sse = math.inf\n        best_split_idx = -1\n        for i in range(1, n):\n            if X_sorted[i] == X_sorted[i - 1]:\n                # No valid split if feature is identical\n                continue\n\n            # Left side is [0, i-1], right side is [i, n-1]\n            left_count = i\n            right_count = n - i\n\n            left_sum = prefix_sum_y[i - 1]\n            right_sum = prefix_sum_y[n - 1] - left_sum\n\n            left_sum2 = prefix_sum_y2[i - 1]\n            right_sum2 = prefix_sum_y2[n - 1] - left_sum2\n\n            # Means\n            left_mean = left_sum / left_count\n            right_mean = right_sum / right_count\n\n            # SSE = sum(y^2) - (sum(y)^2)/count\n            left_sse = left_sum2 - left_count * (left_mean ** 2)\n            right_sse = right_sum2 - right_count * (right_mean ** 2)\n\n            split_sse = left_sse + right_sse\n            if split_sse < best_sse:\n                best_sse = split_sse\n                best_split_idx = i\n\n        # If no valid split found, return leaf\n        if best_split_idx < 1:\n            return {\n                'leaf': True,\n                'pred': float(np.mean(y))\n            }\n\n        # Split value: midpoint between points\n        split_val = 0.5 * (X_sorted[best_split_idx - 1] + X_sorted[best_split_idx])\n\n        # Partition data into left and right\n        left_mask = (X < split_val)\n        right_mask = ~left_mask\n\n        # Recursively build children\n        left_child = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_child = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return {\n            'leaf': False,\n            'split': split_val,\n            'left': left_child,\n            'right': right_child\n        }\n\n    # Build the tree starting at depth 0\n    root = build_tree(X_train, y_train, depth=0)\n\n    # Prediction by traversing the tree\n    def predict(node, x):\n        if node['leaf']:\n            return node['pred']\n        if x < node['split']:\n            return predict(node['left'], x)\n        else:\n            return predict(node['right'], x)\n\n    # Predict for all points in X_test\n    return [float(predict(root, x)) for x in X_test]"}
{"task_id": 486, "completion_id": 0, "completion": "import numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy math operations\n    y_true = np.array(y_true, dtype=float)\n    y_pred = np.array(y_pred, dtype=float)\n\n    # Check lengths\n    if len(y_true) == 0 or len(y_pred) == 0 or len(y_true) != len(y_pred):\n        return -1\n\n    # Calculate MSE\n    mse = np.mean((y_true - y_pred) ** 2)\n\n    # Return rounded MSE\n    return float(round(mse, 4))"}
{"task_id": 487, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n\n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    n_samples = X.shape[0]\n\n    # Array to hold the cluster assignment for each sample\n    cluster_assignments = np.zeros(n_samples, dtype=int)\n\n    for _ in range(max_iters):\n        # Step 2.a: Assign points to the nearest centroid\n        # We compute the distance from each sample to each centroid\n        # Then find the closest centroid index\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        new_assignments = np.argmin(distances, axis=1)\n\n        # Step 2.b: Update centroids\n        new_centroids = centroids.copy()\n        for cluster_idx in range(k):\n            # Select data points in this cluster\n            points_in_cluster = X[new_assignments == cluster_idx]\n            # If there are points in this cluster, update the centroid\n            if len(points_in_cluster) > 0:\n                new_centroids[cluster_idx] = np.mean(points_in_cluster, axis=0)\n\n        # Check for convergence based on centroid movement\n        shift = np.linalg.norm(centroids - new_centroids)\n        centroids = new_centroids\n        cluster_assignments = new_assignments\n        if shift < tol:\n            break\n\n    return cluster_assignments.tolist()\n```"}
{"task_id": 488, "completion_id": 0, "completion": "import numpy as np\n\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    # Attempt to convert to a NumPy array (will handle list-of-lists automatically)\n    try:\n        arr = np.array(X, dtype=float)\n    except:\n        # Conversion failed\n        return -1\n\n    # Check if arr is 2-D\n    if arr.ndim != 2:\n        return -1\n\n    # Check if there is at least one sample (row) and at least one column (feature)\n    if arr.shape[0] < 1 or arr.shape[1] < 1:\n        return -1\n\n    # Compute the population variance per feature (column), ddof=0 indicates population variance\n    variances = arr.var(axis=0, ddof=0)\n\n    # Round each variance to 4 decimal places\n    return [round(v, 4) for v in variances]"}
{"task_id": 489, "completion_id": 0, "completion": "import numpy as np\n\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer -1.\n    \"\"\"\n    # Convert input to a NumPy array (if it isn't one already).\n    arr = np.array(one_hot)\n\n    # Ensure it's a 2-D array.\n    if arr.ndim != 2:\n        return -1\n\n    # Prepare a list to hold nominal class labels.\n    nominal_labels = []\n    \n    # Iterate over each row.\n    for row in arr:\n        # Check sum to confirm there's exactly one '1' in the row.\n        if np.sum(row) != 1:\n            return -1\n        \n        # Find the index of the '1'. (Should only be one index if valid.)\n        idx = np.where(row == 1)[0]\n        if len(idx) != 1:\n            return -1\n        \n        nominal_labels.append(int(idx[0]))\n\n    return nominal_labels"}
{"task_id": 490, "completion_id": 0, "completion": "import numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert the input to a NumPy array (this will handle list, tuple, or np.ndarray).\n    arr = np.array(x, dtype=float)\n    \n    # If the input vector is empty, return an empty list.\n    if arr.size == 0:\n        return []\n    \n    # Create a diagonal matrix from the array.\n    diag_matrix = np.diag(arr)\n    \n    # Convert the NumPy array to a Python list of lists.\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # -------------------------------------------------------------------------\n    # 1) Count item frequencies, remove infrequent items\n    # -------------------------------------------------------------------------\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    \n    # Filter out items that do not meet min_sup\n    freq = {item: count for item, count in freq.items() if count >= min_sup}\n    if not freq:\n        return []\n\n    # A convenient global ordering for building the FP-tree:\n    # sort items descending by frequency, then by item name to break ties\n    # (The standard FP-Growth references ordering by descending frequency.)\n    def sort_key(item):\n        return (-freq[item], item)\n    \n    # -------------------------------------------------------------------------\n    # 2) FP-Tree data structures and construction\n    # -------------------------------------------------------------------------\n    class FPTreeNode:\n        __slots__ = [\"item\", \"count\", \"parent\", \"children\", \"link\"]\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            # link will connect this node to the next node of the same item\n            self.link = None\n            \n    # The root is a sentinel with item=None\n    root = FPTreeNode(None, None)\n    \n    # \"header_table\" maps item -> first node in a linked chain of that item.\n    header_table = dict()  # item -> node\n\n    # Insert ordered transaction into the FP-tree\n    def insert_transaction(trans):\n        current = root\n        for itm in trans:\n            if itm not in current.children:\n                child = FPTreeNode(itm, current)\n                current.children[itm] = child\n                # Link this child into the item chain in header_table\n                if itm not in header_table:\n                    header_table[itm] = child\n                else:\n                    # Follow the link chain to attach at end\n                    node = header_table[itm]\n                    while node.link is not None:\n                        node = node.link\n                    node.link = child\n            else:\n                child = current.children[itm]\n            # Increase count\n            child.count += 1\n            # Move down\n            current = child\n    \n    # Build the initial FP-tree\n    for t in transactions:\n        # remove items not meeting min_sup, then sort by global freq desc\n        filtered_t = [i for i in t if i in freq]\n        if filtered_t:\n            filtered_t.sort(key=sort_key)\n            insert_transaction(filtered_t)\n\n    # -------------------------------------------------------------------------\n    # 3) The recursive mining routine\n    # -------------------------------------------------------------------------\n    # We'll collect result item-sets in a set of frozensets to avoid duplicates.\n    all_frequent_itemsets = set()\n\n    def add_to_results(base_prefix):\n        \"\"\"Add the given itemset (sorted) to our results, ensuring\n        it is stored as a frozenset so duplicates won't appear.\"\"\"\n        if base_prefix:\n            sorted_tuple = tuple(sorted(base_prefix))\n            all_frequent_itemsets.add(sorted_tuple)\n    \n    def single_path_items(node):\n        \"\"\"\n        If the FP-tree from this node downward is a single path,\n        return the list of items in that path (including this node, if it has an item).\n        Otherwise return None.\n        \"\"\"\n        path = []\n        current = node\n        # descend until we find a node that has at most 1 child\n        while True:\n            if current.item is not None:  \n                # skip root item=None\n                path.append(current.item)\n            if len(current.children) == 0:\n                # leaf\n                return path\n            elif len(current.children) > 1:\n                return None\n            else:\n                # only one child, continue\n                child = next(iter(current.children.values()))\n                current = child\n\n    def tree_has_single_path(tree_root):\n        \"\"\"\n        If the entire FP-tree from tree_root down is a single path, return it as a list of items.\n        Otherwise return None.\n        \"\"\"\n        # If root has more than 1 child, it's not a single path.\n        if len(tree_root.children) > 1:\n            return None\n        \n        # If root has no children, it's an empty tree\n        if len(tree_root.children) == 0:\n            return []\n        \n        # exactly one child, follow that child downward\n        child = next(iter(tree_root.children.values()))\n        return single_path_items(child)\n\n    def get_prefix_paths(item):\n        \"\"\"\n        Gather all prefix paths leading to the nodes (item) in the current FP-tree.\n        Returns a list of (prefix_items, count).\n        \"\"\"\n        paths = []\n        node = header_table.get(item, None)\n        \n        while node is not None:\n            # Traverse from node up to the root\n            path = []\n            parent = node.parent\n            # The count on this node is how many times this prefix occurred\n            path_count = node.count\n            while parent is not None and parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            if path:\n                path.reverse()  # from root down to (but not including) this item\n                paths.append((path, path_count))\n            node = node.link\n        return paths\n    \n    def build_conditional_tree(prefix_paths):\n        \"\"\"\n        Build a new (conditional) FP-tree from the given prefix paths.\n        prefix_paths is a list of (path, count).\n        \"\"\"\n        # 1) Count frequency of items in paths\n        cond_freq = Counter()\n        for path, count in prefix_paths:\n            cond_freq.update(path * count)  # each item repeated count times\n\n        # filter for min_sup\n        cond_freq = {k: v for k, v in cond_freq.items() if v >= min_sup}\n        if not cond_freq:\n            return None, {}\n\n        # build new tree\n        cond_root = FPTreeNode(None, None)\n        cond_header_table = {}\n        \n        # new sorting key for conditional tree\n        def cond_sort_key(item):\n            return (-cond_freq[item], item)\n        \n        for path, path_count in prefix_paths:\n            # keep only frequent items, sort them\n            filtered_path = [i for i in path if i in cond_freq]\n            filtered_path.sort(key=cond_sort_key)\n            # insert into conditional tree\n            current = cond_root\n            for itm in filtered_path:\n                if itm not in current.children:\n                    child = FPTreeNode(itm, current)\n                    current.children[itm] = child\n                    child.count = path_count\n                    # link in cond_header_table\n                    if itm not in cond_header_table:\n                        cond_header_table[itm] = child\n                    else:\n                        node = cond_header_table[itm]\n                        while node.link is not None:\n                            node = node.link\n                        node.link = child\n                else:\n                    child = current.children[itm]\n                    child.count += path_count\n                current = child\n        \n        return cond_root, cond_header_table\n\n    def mine_tree(curr_header_table, base_prefix, tree_root):\n        \"\"\"\n        Recursively mine the FP-tree \"tree_root\" (with the help of curr_header_table)\n        by looking at items in ascending order (lexicographically) so the final\n        results can be combined in a consistent manner.  (Or you can do descending\n        frequency order as the classic FP-Growth algorithm suggests, but we must\n        always store results as sorted sets.)\n        \"\"\"\n        # Typically classic FP-Growth iterates items in frequency ascending or descending.\n        # We just do them in lexicographical order for stable prefix expansions\n        # (both forms are valid).\n        items_in_header = sorted(curr_header_table.keys())\n        \n        # if the tree is a single path, we can generate all subsets in one go\n        maybe_path = tree_has_single_path(tree_root)\n        if maybe_path is not None:\n            # single path optimization\n            # gather all items in the path + any that might appear in the prefix\n            path_set = set(maybe_path)\n            # All non-empty subsets of path_set are frequent in this conditional context.\n            # We add each non-empty subset combined with the base_prefix\n            path_list = sorted(path_set)  # for stable combination generation\n            # Subsets of path_list\n            for r in range(1, len(path_list) + 1):\n                for comb in itertools.combinations(path_list, r):\n                    # store base_prefix \u222a comb\n                    new_itemset = tuple(sorted(base_prefix + list(comb)))\n                    all_frequent_itemsets.add(new_itemset)\n            return\n        \n        # otherwise proceed in standard FP-Growth style\n        for item in items_in_header:\n            new_prefix = base_prefix + [item]\n            # add this itemset to results\n            add_to_results(new_prefix)\n            \n            # build conditional FP-tree\n            prefix_paths = get_prefix_paths(item)\n            cond_tree, cond_head = build_conditional_tree(prefix_paths)\n            if cond_tree is not None:\n                mine_tree(cond_head, new_prefix, cond_tree)\n    \n    # Mine the initial tree\n    mine_tree(header_table, [], root)\n\n    # -------------------------------------------------------------------------\n    # 4) Convert the set of itemsets to a list of sorted tuples (per problem spec)\n    #    and finalize the required sort order:\n    #       (1) by tuple length, (2) lexicographically\n    # -------------------------------------------------------------------------\n    results_list = list(all_frequent_itemsets)\n    # Each itemset is already a sorted tuple. Now sort by length, then lexicographically:\n    results_list.sort(key=lambda x: (len(x), x))\n    return results_list\n```\n\nExplanation of key steps:\n\n1. We first count all item frequencies and remove those items below the min_sup threshold.  \n2. We build the global ordering of items (descending by frequency, then by lexicographic order as a tiebreak) and insert transactions into the FP-tree so that common prefixes share paths. The header table links the first node of each item\u2019s chain in the tree.  \n3. To mine frequent sets, we recursively build conditional FP-trees for each item in the header table.  \n4. If a conditional FP-tree has a single path, we generate all non-empty combinations of its items in one go (this is the \u201csingle path\u201d optimization). Otherwise, we recursively mine it.  \n5. Finally, we put all frequent item-sets into a set (to avoid duplicates), ensure each is stored as a tuple of items in lexicographic order, and then sort the result first by tuple length, then lexicographically, matching the problem requirements."}
{"task_id": 492, "completion_id": 0, "completion": "import numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features. It must\n    return a new list of lists containing, for every observation,\n    all monomials of the original features whose total degree does\n    not exceed the supplied *degree*. The very first element in every\n    row should be 1 (the degree-0 term).\n\n    If *degree* is negative the function returns -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1\n        when *degree* is negative.\n    \"\"\"\n    # If the degree is negative, return -1 as required\n    if degree < 0:\n        return -1\n\n    # Convert X to a NumPy array for convenience\n    X_array = np.array(X)\n    n_samples, n_features = X_array.shape if X_array.size > 0 else (0, 0)\n\n    # Generate all combinations that have total degree from 0 up to `degree`\n    # Using combinations_with_replacement ensures lexicographic ordering\n    # for tuples of the same length.\n    comb_list = []\n    for deg in range(degree + 1):\n        for combo in combinations_with_replacement(range(n_features), deg):\n            comb_list.append(combo)\n\n    # For each sample, compute x0^k0 * x1^k1 * ... for combinations `combo`\n    # An empty combination (degree=0) corresponds to the constant term = 1\n    poly_features = []\n    for row in X_array:\n        row_features = []\n        for combo in comb_list:\n            val = 1.0\n            for idx in combo:\n                val *= row[idx]\n            row_features.append(val)\n        poly_features.append(row_features)\n\n    # Convert back to a list of lists\n    return poly_features"}
{"task_id": 493, "completion_id": 0, "completion": "import numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean. If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert y to a NumPy array (ensures we can do vectorized operations)\n    arr = np.asarray(y, dtype=float)\n    \n    # Check if the input is empty\n    if arr.size == 0:\n        return -1\n    \n    # Calculate the mean\n    mean_val = np.mean(arr)\n    \n    # Calculate MSE\n    mse_value = np.mean((arr - mean_val)**2)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)"}
{"task_id": 494, "completion_id": 0, "completion": "import numpy as np\nfrom typing import List, Union\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    # Convert to NumPy array if given as a list\n    preds = np.array(preds)\n\n    # Number of models and samples\n    n_models, n_samples = preds.shape\n\n    if classifier:\n        # Classification: majority vote across each column (sample)\n        final_preds = []\n        for i in range(n_samples):\n            # Extract predictions from all models for sample i\n            sample_preds = preds[:, i].astype(int)\n            # Count occurrences of each class label\n            counts = np.bincount(sample_preds)\n            # Majority class (ties broken by smallest label)\n            majority_label = np.argmax(counts)\n            final_preds.append(majority_label)\n    else:\n        # Regression: average across each column\n        # Take mean along the model-axis (rows); shape => (n_samples,)\n        mean_vals = np.mean(preds, axis=0)\n        # Round to 4 decimals\n        final_preds = [round(val, 4) for val in mean_vals]\n\n    return final_preds"}
{"task_id": 495, "completion_id": 0, "completion": "import numpy as np\n\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation. Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    # Compute column-wise means and standard deviations (population std: ddof=0)\n    means = np.mean(X, axis=0)\n    stds = np.std(X, axis=0, ddof=0)\n\n    # Create a new array (same shape as X) to store the standardized values\n    standardized_array = np.zeros_like(X, dtype=float)\n\n    # Perform standardization for each column\n    for i in range(X.shape[1]):\n        if stds[i] != 0:\n            standardized_array[:, i] = (X[:, i] - means[i]) / stds[i]\n        else:\n            # If the column has zero variance, all entries become 0\n            standardized_array[:, i] = 0\n\n    # Round each element to 4 decimal places\n    standardized_array = np.round(standardized_array, decimals=4)\n\n    # Return as a Python list\n    return standardized_array.tolist()"}
{"task_id": 496, "completion_id": 0, "completion": "import numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values (or a scalar).\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # If x is a scalar, treat it as a length-one vector\n    if np.isscalar(x):\n        x = [x]\n    else:\n        # Ensure x is a NumPy array for iteration\n        x = np.array(x)\n\n    # Compute y, grad, and grad2 with element-wise operations\n    y = [round(slope * val + intercept, 4) for val in x]\n    grad = [round(slope, 4) for _ in x]\n    grad2 = [round(0.0, 4) for _ in x]\n\n    return (y, grad, grad2)"}
{"task_id": 497, "completion_id": 0, "completion": "import numpy as np\n\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    # Convert the input to a NumPy array of floats\n    arr = np.array(x, dtype=float)\n\n    # The exponential function is the same for the 0th, 1st, and 2nd derivatives\n    if order not in (0, 1, 2):\n        return -1\n\n    # Compute exp(x)\n    result = np.exp(arr)\n\n    # Round to 6 decimal places\n    result = np.round(result, 6)\n\n    # Return as Python list maintaining original structure\n    return result.tolist()"}
{"task_id": 498, "completion_id": 0, "completion": "import numpy as np\n\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float = 0.3, order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n        Returns an empty list if 'order' is invalid.\n    \"\"\"\n    # If order is invalid, return empty list\n    if order not in [0, 1, 2]:\n        return []\n\n    # Convert any input to a NumPy array\n    x_arr = np.array(x, dtype=float)\n\n    if order == 0:\n        # 0-th order: f(x) = x if x>0 else alpha*x\n        result = np.where(x_arr > 0, x_arr, alpha * x_arr)\n    elif order == 1:\n        # 1-st order: f'(x) = 1 if x>0 else alpha\n        result = np.where(x_arr > 0, 1, alpha)\n    else:\n        # 2-nd order: f''(x) is identically 0\n        result = np.zeros_like(x_arr)\n\n    # Return result as a Python list\n    return result.tolist()"}
{"task_id": 499, "completion_id": 0, "completion": "import numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return -1.\n    \"\"\"\n\n    n_samples, n_features = data.shape\n    # 1. Check if k is valid\n    if not (1 <= k <= n_features):\n        return -1\n\n    # 2. Standardize features (zero mean, unit population variance if var != 0)\n    means = np.mean(data, axis=0)\n    data_centered = data - means\n    # Population variance\n    variances = np.mean(data_centered**2, axis=0)\n    data_std = data_centered.copy()\n    for i in range(n_features):\n        # If variance is non-zero, scale that feature\n        if variances[i] != 0:\n            data_std[:, i] /= np.sqrt(variances[i])  # population std\n\n    # 3. Compute sample covariance with Bessel's correction (divide by n-1)\n    cov_matrix = (data_std.T @ data_std) / (n_samples - 1)\n\n    # 4. Eigen-decomposition of the covariance matrix\n    #    (eigh is for symmetric matrices)\n    eigen_vals, eigen_vecs = np.linalg.eigh(cov_matrix)\n\n    # 5. Sort eigenvalues and corresponding eigenvectors in descending order\n    sorted_idx = np.argsort(eigen_vals)[::-1]\n    eigen_vals = eigen_vals[sorted_idx]\n    eigen_vecs = eigen_vecs[:, sorted_idx]\n\n    # 6. Fix sign of eigenvectors so the entry with largest absolute value is positive\n    for i in range(n_features):\n        v = eigen_vecs[:, i]\n        # Find index of largest absolute value\n        max_abs_idx = np.argmax(np.abs(v))\n        # If that entry is negative, flip the sign of the entire eigenvector\n        if v[max_abs_idx] < 0:\n            eigen_vecs[:, i] = -v\n\n    # 7. Project the data onto the first k eigenvectors\n    projected = data_std @ eigen_vecs[:, :k]\n\n    # 8. Round to 4 decimals and convert to list of lists\n    return np.round(projected, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_classifier(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    n_estimators: int = 20,\n    learning_rate: float = 0.1\n) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert to numpy arrays for convenience\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    n_samples, n_features = X_train_np.shape\n\n    # Initial model offset: average of y\n    c = np.mean(y_train_np)\n    # We'll keep track of the current model predictions for the training set\n    F_train = np.full(n_samples, c, dtype=float)\n\n    stumps = []  # List to store the weak learners: (feature_idx, threshold, left_val, right_val)\n\n    def find_best_stump(X: np.ndarray, r: np.ndarray):\n        \"\"\"\n        Find the decision stump (feature, threshold, left_value, right_value)\n        that minimizes the sum of squared errors for residuals r.\n        \"\"\"\n        best_feature, best_threshold = 0, 0.0\n        best_left_value, best_right_value = 0.0, 0.0\n        min_error = float('inf')\n\n        n, d = X.shape\n        for feature_idx in range(d):\n            # Sort data by this feature\n            sorted_indices = np.argsort(X[:, feature_idx])\n            sorted_feature = X[sorted_indices, feature_idx]\n            sorted_residual = r[sorted_indices]\n\n            # Possible thresholds are midpoints between distinct values\n            # But we'll also consider the threshold below the smallest value\n            # and above the largest value to cover extreme splits.\n            # We'll do a single pass to accumulate sums for left and right groups.\n            # prefix sums for fast MSE computation\n            prefix_sum = np.cumsum(sorted_residual)\n            prefix_sq_sum = np.cumsum(sorted_residual**2)\n\n            for i in range(n):\n                # We'll pick the threshold at sorted_feature[i]\n                # Then \"left\" = all indices up to i (inclusive),\n                # \"right\" = all indices from i+1 to end.\n                left_count = i + 1\n                right_count = n - (i + 1)\n\n                # Sum of residuals in left and right\n                left_sum = prefix_sum[i]\n                right_sum = prefix_sum[-1] - left_sum\n\n                # Mean of residuals left/right\n                if left_count > 0:\n                    left_mean = left_sum / left_count\n                else:\n                    left_mean = 0.0\n\n                if right_count > 0:\n                    right_mean = right_sum / right_count\n                else:\n                    right_mean = 0.0\n\n                # Sum of squared errors: SSE_left + SSE_right\n                # SSE_left = sum( (r_j - left_mean)^2 for j in left group )\n                # We can compute via prefix sums:\n                # SSE_left = sum(r_j^2) - 2*left_mean*sum(r_j) + left_count * left_mean^2\n                left_sq_sum = prefix_sq_sum[i]\n                right_sq_sum = prefix_sq_sum[-1] - left_sq_sum\n\n                sse_left = left_sq_sum - 2.0 * left_mean * left_sum + left_count * (left_mean**2)\n                sse_right = right_sq_sum - 2.0 * right_mean * right_sum + right_count * (right_mean**2)\n                total_sse = sse_left + sse_right\n\n                if total_sse < min_error:\n                    min_error = total_sse\n                    best_feature = feature_idx\n                    # We'll use threshold = midpoint between sorted_feature[i] and next distinct\n                    if i < n - 1:\n                        thr = 0.5 * (sorted_feature[i] + sorted_feature[i+1])\n                    else:\n                        thr = sorted_feature[i]\n                    best_threshold = thr\n                    best_left_value = left_mean\n                    best_right_value = right_mean\n\n        return best_feature, best_threshold, best_left_value, best_right_value\n\n    # Fit the ensemble of stumps\n    for _ in range(n_estimators):\n        # Compute the residual\n        residual = y_train_np - F_train  # r_i = y_i - F(x_i)\n\n        # Find the best stump that fits the residual\n        f_idx, thr, left_val, right_val = find_best_stump(X_train_np, residual)\n        stumps.append((f_idx, thr, left_val, right_val))\n\n        # Update the training predictions\n        # For each sample, if X[feature_idx] <= threshold => add left_val * learning_rate\n        # else => add right_val * learning_rate\n        mask_left = X_train_np[:, f_idx] <= thr\n        F_train[mask_left] += learning_rate * left_val\n        F_train[~mask_left] += learning_rate * right_val\n\n    # Predict on X_test: F(x) = c + sum( \u03b7\u00b7stump(x) )\n    # We'll fully compute F(x) here (rather than incrementally)\n    predictions = []\n    for x in X_test_np:\n        score = c\n        for (f_idx, thr, left_val, right_val) in stumps:\n            if x[f_idx] <= thr:\n                score += learning_rate * left_val\n            else:\n                score += learning_rate * right_val\n        # Threshold at 0.5\n        pred_label = 1 if score >= 0.5 else 0\n        predictions.append(pred_label)\n\n    return predictions"}
{"task_id": 501, "completion_id": 0, "completion": "```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr\n```"}
{"task_id": 502, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return []\n\n    if order == 0:\n        # Piecewise definition of Hard-Sigmoid\n        # 0                  if z < -2.5\n        # 0.2*z + 0.5        if -2.5 <= z <= 2.5\n        # 1                  if z > 2.5\n        out = np.select(\n            [z < -2.5, z > 2.5],\n            [0.0, 1.0],\n            default=0.2 * z + 0.5\n        )\n\n    elif order == 1:\n        # First derivative:\n        # 0.2 if -2.5 <= z <= 2.5, 0 otherwise\n        out = np.where((z >= -2.5) & (z <= 2.5), 0.2, 0.0)\n\n    else:  # order == 2\n        # Second derivative is identically zero\n        out = np.zeros_like(z)\n\n    out = np.round(out, 4)\n    return out.tolist()\n```"}
{"task_id": 503, "completion_id": 0, "completion": "from copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    # 1) If hparams is None, return -1\n    if hparams is None:\n        return -1\n    \n    # 2) Create a deep copy so the original remains unmodified\n    new_hparams = deepcopy(hparams)\n    \n    # 3) If updates is not None, selectively update keys that already exist\n    if updates is not None:\n        for key, value in updates.items():\n            if key in new_hparams:\n                # Overwrite only existing keys\n                new_hparams[key] = value\n    \n    # 4) Return the updated copy\n    return new_hparams"}
{"task_id": 505, "completion_id": 0, "completion": "import numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM (without stochastic sampling).\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists. Returns an empty list if X is empty.\n    \"\"\"\n    # If the mini-batch is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n    \n    # Sigmoid (logistic) activation function\n    def sigmoid(x):\n        return 1.0 / (1.0 + np.exp(-x))\n    \n    m = X.shape[0]  # batch size\n    \n    # 1. Positive phase hidden probabilities\n    h0_prob = sigmoid(X @ W + hbias)\n    \n    # 2. Run k Gibbs steps (hidden -> visible -> hidden) using probabilities directly\n    h_prob = h0_prob\n    for _ in range(k):\n        # visible probability given hidden\n        v_prob = sigmoid(h_prob @ W.T + vbias)\n        # hidden probability given visible\n        h_prob = sigmoid(v_prob @ W + hbias)\n    \n    # After k steps, we have:\n    v_k_prob = v_prob\n    h_k_prob = h_prob\n    \n    # 3. Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob       # shape: (n_visible, n_hidden)\n    neg_grad = v_k_prob.T @ h_k_prob   # shape: (n_visible, n_hidden)\n    \n    # 4. Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    \n    # 5. Return the updated weight matrix\n    #    rounded to 4 decimal places, converted to a plain Python list of lists.\n    W_new_rounded = [[float(f\"{val:.4f}\") for val in row] for row in W_new]\n    return W_new_rounded"}
{"task_id": 508, "completion_id": 0, "completion": "from typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    result: List[Any] = []\n    for key, value in params.items():\n        if name in key:\n            result.append(value)\n    return result"}
{"task_id": 509, "completion_id": 0, "completion": "import numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Ensure both vectors have the same length\n    if len(x) != len(y):\n        return -1\n\n    # Convert inputs to numpy arrays (if they aren't already)\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Compute the component-wise absolute differences and take the maximum\n    distance = np.max(np.abs(x_arr - y_arr))\n\n    # Round to 4 decimal places and return as Python float\n    return round(float(distance), 4)"}
{"task_id": 510, "completion_id": 0, "completion": "import numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"\n    Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as y.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as t_mean.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # For numerical stability\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # Reconstruction loss (binary cross-entropy)\n    # Sum across features for each data sample\n    recon_loss = - (y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    recon_loss = np.sum(recon_loss, axis=1)  # shape: (batch_size,)\n\n    # KL divergence term\n    # KL = -0.5 * sum(1 + log_var - mean^2 - exp(log_var))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Combine and average over the batch\n    total_loss = recon_loss + kl_divergence\n    loss_mean = np.mean(total_loss)\n\n    # Return rounded float\n    return float(np.round(loss_mean, 6))"}
{"task_id": 511, "completion_id": 0, "completion": "import numpy as np\n\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n    \"\"\"Generate a random Bernoulli multi-armed bandit by returning a list of\n    n_arms success probabilities.\n\n    1. Draw n_arms samples from Uniform(0, 1).\n    2. Normalize them so they sum to 1.\n    3. Round to 4 decimal places and return the list.\n    \n    If n_arms < 1, returns an empty list.\n    \n    :param n_arms: Number of arms in the MAB.\n    :return: List of n_arms probabilities rounded to 4 decimals.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    \n    samples = np.random.uniform(0, 1, n_arms)\n    sum_samples = samples.sum()\n    \n    # In the very rare case all samples are zero (extremely unlikely with Uniform(0,1)),\n    # handle by returning equal splits:\n    if sum_samples == 0:\n        return [round(1/n_arms, 4)] * n_arms\n    \n    probabilities = samples / sum_samples\n    return np.round(probabilities, 4).tolist()"}
{"task_id": 512, "completion_id": 0, "completion": "def pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    k_h, k_w = pool_shape\n    _, _, h, w = image_shape\n    s_h, s_w = stride\n\n    # Check kernel fits into the input\n    if k_h > h or k_w > w:\n        return -1\n\n    # Check if the resulting output height and width are integers\n    if (h - k_h) % s_h != 0 or (w - k_w) % s_w != 0:\n        return -1\n\n    out_h = (h - k_h) // s_h + 1\n    out_w = (w - k_w) // s_w + 1\n\n    return (out_h, out_w)"}
{"task_id": 513, "completion_id": 0, "completion": "import numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X_np = np.array(X, dtype=float)     # shape: (n_samples, n_features)\n    w_np = np.array(w, dtype=float)     # shape: (n_features,)\n    V_np = np.array(V, dtype=float)     # shape: (n_features, k)\n\n    # Linear term: w0 + Xw\n    linear_part = X_np @ w_np + w0  # shape: (n_samples,)\n\n    # Interaction term:\n    # (X @ V) is shape (n_samples, k)\n    # For each row i, factor f = (\u03a3_j X[i,j]*V[j,f])^2 - \u03a3_j (X[i,j]^2 * V[j,f]^2)\n    # Summed over f and multiplied by 1/2.\n    XV = X_np @ V_np         # shape: (n_samples, k)\n    XV_square = XV ** 2      # shape: (n_samples, k)\n\n    X_square = X_np ** 2     # shape: (n_samples, n_features)\n    V_square = V_np ** 2     # shape: (n_features, k)\n    XV_elem_square = X_square @ V_square  # shape: (n_samples, k)\n\n    interaction_part = 0.5 * np.sum(XV_square - XV_elem_square, axis=1)\n\n    # Sum up linear and interaction parts\n    y_pred = linear_part + interaction_part\n\n    # Round to 4 decimal places and return as list\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 514, "completion_id": 0, "completion": "def switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value:\n        True  \u2192 \"training\".\n        False \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value:\n        True  \u2192 \"testing\".\n        False \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\"). Returns -1 for invalid inputs.\n    \"\"\"\n    # Validate current_phase\n    if current_phase not in (\"training\", \"testing\"):\n        return -1\n\n    # At most one switch can be supplied\n    if set_train is not None and set_test is not None:\n        return -1\n\n    # If set_train is provided\n    if set_train is not None:\n        if not isinstance(set_train, bool):\n            return -1\n        return \"training\" if set_train else \"testing\"\n\n    # If set_test is provided\n    if set_test is not None:\n        if not isinstance(set_test, bool):\n            return -1\n        return \"testing\" if set_test else \"training\"\n\n    # If no switch is provided, toggle the phase\n    if current_phase == \"training\":\n        return \"testing\"\n    else:\n        return \"training\""}
{"task_id": 515, "completion_id": 0, "completion": "from typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys. The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    flat_dict: Dict[str, Any] = {}\n\n    def _flatten(current_dict: Dict[str, Any], prefix: str = \"\") -> None:\n        for key, value in current_dict.items():\n            new_key = f\"{prefix}.{key}\" if prefix else key\n            if isinstance(value, dict):\n                # Recursively flatten nested dictionary values\n                _flatten(value, new_key)\n            else:\n                flat_dict[new_key] = value\n\n    _flatten(params)\n    return flat_dict"}
{"task_id": 516, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    # Convert inputs to NumPy arrays in 1D form\n    a_np = np.asarray(a).ravel()\n    b_np = np.asarray(b).ravel()\n    \n    # Check if both vectors have the same total number of elements\n    if a_np.size != b_np.size:\n        return -1\n    \n    # Compute the Euclidean distance\n    dist = np.linalg.norm(a_np - b_np)\n    \n    # Round to 4 decimal places and return\n    return float(round(dist, 4))"}
{"task_id": 517, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(z):\n    \"\"\"\n    Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if z is a scalar, otherwise a Python list obtained with\n        numpy.ndarray.tolist(), where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Check if input is a scalar\n    is_scalar = isinstance(z, (int, float))\n    \n    # Convert input to a NumPy array for vectorized operations\n    arr = np.array(z, dtype=float)\n    \n    # Create an output array of the same shape\n    result = np.empty_like(arr)\n    \n    # Mask for values >= 0\n    mask = (arr >= 0)\n\n    # Numerically stable sigmoid:\n    # For x >= 0: sigmoid(x) = 1 / (1 + e^(-x))\n    # For x < 0:  sigmoid(x) = e^x / (1 + e^x)\n    result[mask] = 1.0 / (1.0 + np.exp(-arr[mask]))\n    result[~mask] = np.exp(arr[~mask]) / (1.0 + np.exp(arr[~mask]))\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return a float if input was scalar, else a Python list\n    if is_scalar:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    # =======  End of your code  =======\n    \n    return wrapper\n```"}
{"task_id": 520, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # If the input is an empty list, return an empty list\n    if isinstance(z, list) and len(z) == 0:\n        return []\n\n    # Convert input to a NumPy array (this handles scalars, lists, and ndarrays uniformly)\n    arr = np.array(z, dtype=float)\n    \n    # If the resulting array has no elements (e.g., empty array), return an empty list\n    if arr.size == 0:\n        return []\n\n    # Compute the gradient element-wise\n    grad = arr * (1 - arr)\n\n    # Round to 4 decimal places\n    grad = np.round(grad, 4)\n\n    # If the input was effectively scalar (e.g., a single float),\n    # return a float; otherwise convert back to a nested list.\n    if arr.ndim == 0:\n        return float(grad)\n    else:\n        return grad.tolist()"}
{"task_id": 521, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero. Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    # Convert the input to a NumPy array\n    arr = np.array(z)\n    \n    # Check if the input is effectively a scalar (0-d array)\n    if arr.ndim == 0:\n        # Return an int (1 if >0, else 0)\n        return int(arr.item() > 0)\n    else:\n        # Apply ReLU derivative element-wise, then convert back to a list\n        return (arr > 0).astype(int).tolist()\n```\n"}
{"task_id": 522, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # Reset the NumPy random seed for reproducibility\n    np.random.seed(42)\n    \n    # Ensure weight_shape is in tuple form if it's an int or a list\n    if isinstance(weight_shape, int):\n        size = (weight_shape,)\n    else:\n        size = tuple(weight_shape)\n    \n    # Draw samples from the standard normal distribution\n    arr = np.random.normal(loc=0.0, scale=1.0, size=size)\n    \n    # Round to four decimal places\n    arr = np.round(arr, 4)\n    \n    # Convert the NumPy array to a Python list\n    return arr.tolist()"}
{"task_id": 523, "completion_id": 0, "completion": "import numpy as np\n\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    # Determine fan-in based on the shape\n    if len(weight_shape) == 2:\n        # 2-D matrix (e.g. for dense layer)\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # 4-D tensor (e.g. convolution kernel)\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        # Fallback to treating it as 2-D, taking the first dimension as fan-in\n        fan_in = weight_shape[0]\n\n    # Compute the standard deviation for the He normal distribution\n    std = np.sqrt(2.0 / fan_in)\n\n    # Generate weights from the normal distribution with mean=0 and std=std\n    weights = np.random.randn(*weight_shape) * std\n\n    # Round each element to four decimal places and return as nested lists\n    return np.round(weights, 4).tolist()"}
{"task_id": 525, "completion_id": 0, "completion": "import numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model (closed form).\n\n    The function computes the optimal weights analytically and returns them\n    together with the intercept term, both rounded to 4 decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights (4 decimal places).\n        bias    \u2013 scalar intercept term (4 decimal places).\n    \"\"\"\n\n    # Ensure numpy arrays and flatten y if necessary\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n\n    # 1. Compute column-wise mean of X and mean of y\n    x_mean = np.mean(X, axis=0)\n    y_mean = np.mean(y)\n\n    # 2. Mean-center the data\n    X_centered = X - x_mean\n    y_centered = y - y_mean\n\n    # Number of features\n    n = X.shape[1]\n\n    # 3. Prepare the matrix to invert (or pseudo-invert)\n    A = X_centered.T @ X_centered + lambda_ * np.eye(n)\n\n    # 4. Solve for weights using pseudo-inverse (handles singular case automatically)\n    w = np.linalg.pinv(A) @ (X_centered.T @ y_centered)\n\n    # 5. Recover the bias\n    b = y_mean - x_mean @ w\n\n    # 6. Round to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n\n    return (w_rounded, b_rounded)"}
{"task_id": 527, "completion_id": 0, "completion": "```python\nimport os\nfrom typing import List, Union\n\ndef extract_archive(\n    file_path: str,\n    path: str = '.',\n    archive_format: Union[str, List[str], None] = 'auto'\n) -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n\n    # 1) Handle the 'no format allowed' cases:\n    if not archive_format:  # Covers None or empty list\n        return False\n\n    # 2) Determine the list of requested formats:\n    if archive_format == 'auto':\n        requested_formats = ['tar', 'zip']\n    elif isinstance(archive_format, str):\n        requested_formats = [archive_format]\n    else:  # If it's a list of strings\n        requested_formats = archive_format\n\n    # 3) For safety, accept only known formats:\n    known_formats = {\n        'tar': [\".tar\", \".tar.gz\", \".tgz\", \".tar.bz\", \".tar.bz2\", \".tbz\"],\n        'zip': [\".zip\"],\n    }\n    # Collect all allowed extensions from the requested formats:\n    allowed_extensions = []\n    for fmt in requested_formats:\n        fmt_lower = str(fmt).lower()  # make sure to handle unexpected cases\n        if fmt_lower in known_formats:\n            allowed_extensions.extend(known_formats[fmt_lower])\n\n    # If we ended up with no valid format, return False immediately:\n    if not allowed_extensions:\n        return False\n\n    # 4) Check if file_path ends with any allowed extension (case-insensitive):\n    filename = os.path.basename(file_path).lower()\n    for ext in allowed_extensions:\n        if filename.endswith(ext.lower()):\n            return True\n\n    return False\n```\n"}
{"task_id": 528, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for convenience\n    X_arr = np.array(X, dtype=float)\n\n    # Extract weights\n    w1, w2 = float(W[0]), float(W[1])\n\n    # Determine the min and max for each dimension\n    x1_min, x1_max = X_arr[:, 0].min(), X_arr[:, 0].max()\n    x2_min, x2_max = X_arr[:, 1].min(), X_arr[:, 1].max()\n\n    # Build the equally spaced 1D arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a meshgrid\n    X1_grid, X2_grid = np.meshgrid(x1_plot, x2_plot)\n\n    # Compute classifier output: w\u2081*x\u2081 + w\u2082*x\u2082 + b\n    linear_output = w1 * X1_grid + w2 * X2_grid + b\n\n    # Apply the sign rule: label = 1 if >= 0 else -1\n    # Note: np.where returns an array of the same shape\n    labeled_output = np.where(linear_output >= 0, 1, -1)\n\n    # Convert the numpy array to a Python list of lists\n    return labeled_output.tolist()"}
{"task_id": 529, "completion_id": 0, "completion": "import math\n\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        # Case 2: target is unknown\n        return f\"{current:7d}/Unknown\"\n\n    # Case 1: target is known\n    d = len(str(target))  # number of digits for 'target'\n    prog_width = int(width * current / target) if target > 0 else 0\n\n    # Construct the initial part: \"current/target [\"\n    head = f\"{current:>{d}}/{target} [\"\n\n    # Filled portion\n    bar_filled = \"\"\n    if prog_width > 0:\n        bar_filled = \"=\" * (prog_width - 1)\n        if current < target:\n            bar_filled += \">\"\n        else:\n            bar_filled += \"=\"  # fully done\n    # Unfilled portion\n    bar_unfilled = \".\" * (width - prog_width)\n\n    # Return the joined string\n    return head + bar_filled + bar_unfilled + \"]\""}
{"task_id": 530, "completion_id": 0, "completion": "import numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions for numerical stability\n    p = np.clip(y_pred, 1e-7, 1 - 1e-7)\n    \n    # Compute the binary cross-entropy for each sample\n    loss = -(y_true * np.log(p) + (1 - y_true) * np.log(1 - p))\n    \n    # Return the mean loss, rounded to 4 decimal places\n    return float(np.round(np.mean(loss), 4))"}
{"task_id": 531, "completion_id": 0, "completion": "import numpy as np\n\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function creates either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and returns it\n    rounded to four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError(\"window_len must be strictly positive.\")\n\n    # For a symmetric window, sample L points from -pi to pi.\n    if symmetric:\n        angles = np.linspace(-np.pi, np.pi, window_len, endpoint=True)\n    # For a periodic window, sample (L+1) points from -pi to pi and discard the last point.\n    else:\n        angles = np.linspace(-np.pi, np.pi, window_len + 1, endpoint=True)[:-1]\n\n    window = []\n    # Compute the sum of a_k * cos(k * theta_n) for n in [0, 1, ..., L-1]\n    for angle in angles:\n        val = 0.0\n        for k, ak in enumerate(coefs):\n            val += ak * np.cos(k * angle)\n        # Round to 4 decimals\n        window.append(round(val, 4))\n\n    return window"}
{"task_id": 532, "completion_id": 0, "completion": "def count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n\n    total_params = 0\n    for i in range(len(layers) - 1):\n        n_in, n_out = layers[i], layers[i+1]\n        total_params += n_in * n_out + n_out  # (weights) + (biases)\n\n    return total_params"}
{"task_id": 533, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Define the PDF function\n    def pdf(val, mu, s):\n        coeff = 1.0 / (s * np.sqrt(2.0 * np.pi))\n        exponent = -((val - mu)**2) / (2 * s**2)\n        return coeff * np.exp(exponent)\n    \n    # Check if x is scalar (int or float)\n    if isinstance(x, (int, float)):\n        # Calculate and return a single PDF value (float)\n        value = pdf(x, mean, sigma)\n        return round(value, 4)\n    else:\n        # Convert x to a numpy array, compute PDF for each element, then round\n        x_array = np.array(x, dtype=float)\n        values = pdf(x_array, mean, sigma)\n        return np.round(values, 4).tolist()"}
{"task_id": 534, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals. Returns a float for\n        scalar input; otherwise returns a Python list preserving the input shape.\n    \"\"\"\n    # Convert input to a NumPy array with float type\n    arr = np.array(Z, dtype=float)\n    \n    # Compute element-wise sigmoid\n    out = 1 / (1 + np.exp(-arr))\n    \n    # Round to 4 decimals\n    out = np.round(out, 4)\n    \n    # If the result is a scalar (shape == ()), return a float\n    if out.shape == ():\n        return float(out)\n    \n    # Otherwise, return as a Python list\n    return out.tolist()"}
{"task_id": 536, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    # 1) Prepend a column of ones to handle the bias term\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n\n    # m: number of training samples, n: number of features (after adding bias)\n    m, n = X_train.shape\n\n    # 2) Learn parameter vector theta\n    if method == \"normal\":\n        # Closed-form solution: theta = (X^T X)^(-1) X^T y\n        # Use np.linalg.inv or np.linalg.pinv; here we use inv as X^T X is assumed invertible\n        theta = np.linalg.inv(X_train.T @ X_train) @ (X_train.T @ y_train)\n    else:\n        # Batch Gradient Descent\n        theta = np.zeros(n)  # Initialize theta with zeros\n        for _ in range(num_iter):\n            # Compute predictions\n            predictions = X_train @ theta\n            # Compute gradient\n            gradient = (1 / m) * X_train.T @ (predictions - y_train)\n            # Update parameters\n            theta = theta - alpha * gradient\n\n    # 3) Predict on X_test\n    predictions = X_test @ theta\n\n    # 4) Round to four decimals and return as list\n    return np.round(predictions, 4).tolist()"}
{"task_id": 537, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Very small constant to avoid division by zero\n    eps = 1e-9\n\n    # Split training data by class\n    X_class0 = X_train[y_train == 0]\n    X_class1 = X_train[y_train == 1]\n\n    # Calculate mean and std for each class (one mean/std per feature)\n    mu0 = X_class0.mean(axis=0)\n    sigma0 = X_class0.std(axis=0) + eps  # add eps to avoid std=0\n    mu1 = X_class1.mean(axis=0)\n    sigma1 = X_class1.std(axis=0) + eps  # add eps to avoid std=0\n\n    # Calculate prior probabilities\n    p0 = len(X_class0) / len(X_train)\n    p1 = len(X_class1) / len(X_train)\n\n    predictions = []\n    for x in X_test:\n        # Compute log-likelihood for each class under Gaussian assumption\n        # Using log probabilities for numerical stability\n        log_likelihood_0 = (-0.5 * np.log(2 * np.pi) - np.log(sigma0)\n                            - ((x - mu0) ** 2) / (2 * sigma0 ** 2))\n        log_likelihood_1 = (-0.5 * np.log(2 * np.pi) - np.log(sigma1)\n                            - ((x - mu1) ** 2) / (2 * sigma1 ** 2))\n\n        # Sum log-likelihoods across all features and add log prior\n        log_posterior_0 = np.log(p0) + np.sum(log_likelihood_0)\n        log_posterior_1 = np.log(p1) + np.sum(log_likelihood_1)\n\n        # Pick the class with the higher posterior probability\n        predicted_class = 0 if log_posterior_0 >= log_posterior_1 else 1\n        predictions.append(predicted_class)\n\n    return predictions"}
{"task_id": 539, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for the predictions AL relative to\n    the ground-truth labels Y. Probabilities are clipped to avoid numerical\n    issues.\n    \n    Parameters:\n    AL (np.ndarray): Predicted probabilities, shape (m,) or (1,m).\n    Y (np.ndarray): Ground-truth labels, shape (m,) or (1,m).\n    \n    Returns:\n    float: Binary cross-entropy cost, rounded to 4 decimal places.\n    \"\"\"\n    # Clip AL to avoid log(0)\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Number of examples\n    m = Y.size  # works for both (m,) and (1, m)\n    \n    # Compute the binary cross-entropy cost\n    cost = -(1 / m) * np.sum(\n        Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    )\n    \n    # Return as a plain float, rounded to 4 decimal places\n    return float(round(cost, 4))"}
{"task_id": 540, "completion_id": 0, "completion": "import numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # Compute the sigmoid\n    sigmoid_Z = 1 / (1 + np.exp(-Z))\n    \n    # Compute its derivative\n    derivative = sigmoid_Z * (1 - sigmoid_Z)\n    \n    # Round to 4 decimal places\n    derivative = np.round(derivative, 4)\n    \n    # Convert to Python list\n    return derivative.tolist()"}
{"task_id": 541, "completion_id": 0, "completion": "import numpy as np\n\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    y = np.asarray(y)\n    y_hat = np.asarray(y_hat)\n\n    # Calculate the gradient element-wise\n    grad = y_hat - y\n\n    # Round to 4 decimal places\n    grad_rounded = np.round(grad, 4)\n\n    # Return as a regular Python list\n    return grad_rounded.tolist()"}
{"task_id": 542, "completion_id": 0, "completion": "import numpy as np\n\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"\n    Perform a single-step RMSProp update.\n    \n    s[i] <- beta*s[i] + (1-beta)*grads[i]^2\n    params[i] <- params[i] - alpha*grads[i]/(sqrt(s[i]) + epsilon)\n    \n    If s is None or empty, it will be created and initialized to arrays of zeros\n    having the same shape as the corresponding parameter.\n    \n    Returns:\n        (new_params, new_s) where\n        - new_params is a list of updated parameters (rounded to 6 decimals).\n        - new_s is the list of updated running averages.\n    \"\"\"\n    # If s is not provided or is empty, initialize it with zero arrays matching params\n    if s is None or len(s) == 0:\n        s = [np.zeros_like(p) for p in params]\n    \n    new_params = []\n    new_s = []\n    \n    for p, g, old_s in zip(params, grads, s):\n        # Update the running average of squared gradients\n        updated_s = beta * old_s + (1.0 - beta) * (g ** 2)\n        \n        # Compute parameter update\n        updated_p = p - alpha * g / (np.sqrt(updated_s) + epsilon)\n        \n        # Round updated parameters to 6 decimals\n        updated_p = np.round(updated_p, 6)\n        \n        new_params.append(updated_p)\n        new_s.append(updated_s)\n    \n    return new_params, new_s"}
{"task_id": 543, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty,\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n\n    n = len(data)\n    counts = Counter(data)\n    # Calculate the sum of squared proportions\n    sum_of_squares = sum((count / n) ** 2 for count in counts.values())\n    # Gini index\n    gini = 1 - sum_of_squares\n    return round(gini, 4)\n```"}
{"task_id": 544, "completion_id": 0, "completion": "def split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return set1, set2"}
{"task_id": 545, "completion_id": 0, "completion": "def tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    # If the tree is empty, return (0, 0).\n    if root is None:\n        return (0, 0)\n\n    def helper(node: \"node | None\") -> tuple[int, int]:\n        # If we've reached a None node, no leaves, and no depth.\n        if node is None:\n            return (0, 0)\n        # If the node is a leaf, then we have 1 leaf and a depth of 1.\n        if node.results is not None:\n            return (1, 1)\n        # Otherwise, recurse on the children.\n        left_leaves, left_depth = helper(node.left)\n        right_leaves, right_depth = helper(node.right)\n        return (\n            left_leaves + right_leaves,\n            1 + max(left_depth, right_depth)\n        )\n\n    # Use our helper function starting from the root.\n    return helper(root)"}
{"task_id": 546, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Any, Dict, List\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\n\n    The *data* argument is a list where every inner list represents a training\n    sample.  All but the last elements of each sample are feature values; the\n    last element is the class label.\n\n    The function should return the root of the generated tree expressed as a\n    nested dictionary:\n        Leaf   -> {\"label\": class_label}\n        Branch -> {\"feature\": index,\n                    \"value\":   split_value,\n                    \"left\":    <subtree for samples with feature == value>,\n                    \"right\":   <subtree for samples with feature != value>}\n\n    If *data* is empty return the empty dictionary.\n    \"\"\"\n    # Internal helper: compute Gini impurity for the dataset.\n    def gini(subset: List[List[Any]]) -> float:\n        if not subset:\n            return 0 \n        labels = [row[-1] for row in subset]\n        counts = Counter(labels)\n        total = len(subset)\n        return 1 - sum((count / total) ** 2 for count in counts.values())\n\n    # Internal helper: in case of tie, return the class that appears first in data.\n    def majority_class(subset: List[List[Any]]) -> Any:\n        counts = Counter(row[-1] for row in subset)\n        max_count = max(counts.values())\n        # Return the first label in the order of appearance that has max_count\n        for row in subset:\n            label = row[-1]\n            if counts[label] == max_count:\n                return label\n\n    # Base case: if no data, return empty dictionary\n    if not data:\n        return {}\n\n    # Calculate current node's Gini impurity\n    current_gini = gini(data)\n    \n    # Try all possible splits and track the best one\n    best_gain = 0.0\n    best_split = None  # (feature_index, value, left_subset, right_subset)\n    n_features = len(data[0]) - 1  # number of features (last is label)\n    \n    for feature_index in range(n_features):\n        # Get all unique values for this feature\n        values = sorted(set(row[feature_index] for row in data))\n        \n        for value in values:\n            left_subset = [row for row in data if row[feature_index] == value]\n            right_subset = [row for row in data if row[feature_index] != value]\n            \n            # Skip splits that leave one subset empty\n            if not left_subset or not right_subset:\n                continue\n\n            # Calculate the weighted Gini after the split\n            left_g = gini(left_subset)\n            right_g = gini(right_subset)\n            left_w = len(left_subset) / len(data)\n            right_w = len(right_subset) / len(data)\n            weighted_gini = left_g * left_w + right_g * right_w\n            \n            # Gain = reduction in impurity\n            gain = current_gini - weighted_gini\n            \n            # Check if this split is better than what we have so far\n            # (Tie-breaking: do nothing if gain == best_gain, so we keep the first)\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, value, left_subset, right_subset)\n    \n    # If no positive gain, create a leaf (majority class)\n    if best_gain <= 0:\n        return {\"label\": majority_class(data)}\n    \n    # Otherwise, recurse on the two subsets\n    feature_index, value, left_subset, right_subset = best_split\n    left_branch = build_tree(left_subset)\n    right_branch = build_tree(right_subset)\n    \n    return {\n        \"feature\": feature_index,\n        \"value\": value,\n        \"left\": left_branch,\n        \"right\": right_branch\n    }\n```"}
{"task_id": 547, "completion_id": 0, "completion": "import numpy as np\n\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n\n    # ------------------------ Validation ------------------------\n    # Convert inputs into numpy arrays for easier manipulation.\n    try:\n        A_arr = np.array(A, dtype=float)\n        B_arr = np.array(B, dtype=float)\n        S_arr = np.array(S, dtype=float)\n    except ValueError:\n        return -1  # Could not convert to float, invalid input structure.\n\n    # Check dimensions of A: must be n\u00d7n\n    n = A_arr.shape[0]\n    if A_arr.shape != (n, n):\n        return -1\n\n    # Check dimensions of B: must be n\u00d7m\n    if B_arr.shape[0] != n:\n        return -1\n    m = B_arr.shape[1]  # number of symbols\n\n    # Check dimension of S: must be length n\n    if S_arr.shape[0] != n:\n        return -1\n\n    # Check obs is non-empty and that t is within valid range\n    if len(obs) == 0 or t < 0 or t >= len(obs):\n        return -1\n\n    # Check that all observed symbols are within bounds (0 \u2264 obs_i < m)\n    if any(o < 0 or o >= m for o in obs):\n        return -1\n\n    # ------------------------ Forward Computation ------------------------\n    # alpha_0 = S \u2299 B[:, obs[0]]\n    alpha_prev = S_arr * B_arr[:, obs[0]]\n\n    # If t = 0, we just return alpha_0\n    if t == 0:\n        return [round(v, 4) for v in alpha_prev.tolist()]\n\n    # Recurrence for alpha_k,  k=1..t\n    for step in range(1, t + 1):\n        # alpha_k = (alpha_{k-1}^T @ A) \u2299 B[:, obs[k]]\n        alpha_curr = alpha_prev @ A_arr  # shape: (n,)\n        alpha_curr = alpha_curr * B_arr[:, obs[step]]\n        alpha_prev = alpha_curr\n\n    # Round results\n    return [round(v, 4) for v in alpha_prev.tolist()]"}
{"task_id": 548, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step t in a discrete HMM.\n\n    The function implements the forward\u2013backward equations internally and\n    computes:\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb).\n    For invalid t (<0 or \u2265 len(obs)\u22121), returns \u22121.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence (length T) encoded as integers.\n        t: Time index (0 \u2264 t < T\u22121).\n\n    Returns:\n        The \u03be_t matrix as a list of lists (rounded to 4 decimals) or \u22121.\n    \"\"\"\n    T = len(obs)\n    N = len(A)\n\n    # ----- Validate the time index -----\n    if t < 0 or t >= T - 1:\n        return -1\n\n    # Convert to numpy arrays for convenience\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    pi = np.array(pi, dtype=float)\n    obs = np.array(obs, dtype=int)\n\n    # ----- Forward pass (alpha) -----\n    alpha = np.zeros((T, N), dtype=float)\n\n    # Initialization alpha[0]\n    for i in range(N):\n        alpha[0, i] = pi[i] * B[i, obs[0]]\n\n    # Recursion\n    for tt in range(1, T):\n        for j in range(N):\n            alpha[tt, j] = np.sum(alpha[tt - 1, :] * A[:, j]) * B[j, obs[tt]]\n\n    # ----- Backward pass (beta) -----\n    beta = np.zeros((T, N), dtype=float)\n\n    # Initialization beta[T-1]\n    beta[T - 1, :] = 1.0\n\n    # Recursion (backward)\n    for tt in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[tt, i] = np.sum(A[i, :] * B[:, obs[tt + 1]] * beta[tt + 1, :])\n\n    # ----- Compute xi_t(i,j) -----\n    xi_t = np.zeros((N, N), dtype=float)\n    for i in range(N):\n        for j in range(N):\n            xi_t[i, j] = (alpha[t, i] *\n                          A[i, j] *\n                          B[j, obs[t + 1]] *\n                          beta[t + 1, j])\n\n    # Normalize\n    denom = np.sum(xi_t)\n    if denom == 0:\n        # Degenerate case, return zero matrix or some fallback\n        return np.zeros((N, N)).tolist()\n\n    xi_t /= denom\n\n    # Round to 4 decimals\n    xi_t_rounded = np.round(xi_t, 4)\n\n    # Return as a regular list of lists\n    return xi_t_rounded.tolist()\n```\n"}
{"task_id": 549, "completion_id": 0, "completion": "import numpy as np\n\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Check if both arrays have the same shape\n    if x_arr.shape != y_arr.shape:\n        return -1\n\n    # Calculate the squared Euclidean distance\n    dist_sq = np.sum((x_arr - y_arr) ** 2)\n\n    # Round to 4 decimal places\n    return round(dist_sq, 4)"}
{"task_id": 551, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef best_gini_split(X: np.ndarray,\n                    y: np.ndarray,\n                    epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        \"\"\"Compute the Gini impurity of a 1-D array of labels.\"\"\"\n        counts = Counter(labels)\n        total = len(labels)\n        sum_of_squares = sum((count / total)**2 for count in counts.values())\n        return 1.0 - sum_of_squares\n\n    # Compute the Gini impurity of the parent node\n    parent_gini = gini_impurity(y)\n    n_samples, n_features = X.shape\n\n    best_feature = -1\n    best_value = None\n    best_gini = float(parent_gini)  # store as a Python float\n\n    # Early exit if there's no need to split (e.g. all same class)\n    if len(np.unique(y)) == 1:\n        return (-1, None, best_gini)\n\n    # Search through all features and their unique values\n    for feature_index in range(n_features):\n        # Unique values in this feature\n        values = np.unique(X[:, feature_index])\n        for val in values:\n            # Identify left/right subsets for this split\n            left_mask = (X[:, feature_index] == val)\n            right_mask = ~left_mask\n\n            if not np.any(left_mask) or not np.any(right_mask):\n                # This split doesn't partition the data\n                continue\n\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n\n            # Weighted sum of Gini impurities\n            left_size = len(left_labels)\n            right_size = len(right_labels)\n            split_gini = (left_size / n_samples) * gini_impurity(left_labels) \\\n                         + (right_size / n_samples) * gini_impurity(right_labels)\n\n            # Check if this is the best (lowest) Gini so far\n            if split_gini < best_gini:\n                best_gini = split_gini\n                best_feature = feature_index\n                best_value = val\n\n    # Check if the best Gini actually improves by epsilon\n    if best_feature == -1 or (parent_gini - best_gini) < epsilon:\n        return (-1, None, float(parent_gini))\n    else:\n        return (best_feature, best_value, float(best_gini))"}
{"task_id": 552, "completion_id": 0, "completion": "import numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm and returns the\n    resulting vector rounded to four decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n            'pi' -> 1D numpy array of shape (N, ) for initial state probabilities.\n            'A'  -> 2D numpy array of shape (N, N) for transition probabilities.\n            'B'  -> 2D numpy array of shape (N, M) for emission probabilities.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities \u03b3\u209c(i) for each state i at time t,\n                     rounded to four decimal places, or an empty list if t is out of range.\n    \"\"\"\n    # 0. Check if t is within valid range\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n\n    pi = hmm['pi']  # shape: (N,)\n    A = hmm['A']    # shape: (N, N)\n    B = hmm['B']    # shape: (N, M)\n    N = len(pi)     # number of states\n\n    # 1. Forward pass to compute \u03b1\n    alpha = np.zeros((T, N))\n    # Initialization alpha[0, i] = pi[i] * B[i, O[0]]\n    alpha[0, :] = pi * B[:, observations[0]]\n\n    # Recurrence alpha[t, i] = sum_j( alpha[t-1, j] * A[j, i] ) * B[i, O[t]]\n    for tt in range(1, T):\n        for i in range(N):\n            alpha[tt, i] = np.sum(alpha[tt - 1, :] * A[:, i]) * B[i, observations[tt]]\n\n    # 2. Backward pass to compute \u03b2\n    beta = np.zeros((T, N))\n    # Initialization beta[T-1, i] = 1\n    beta[T - 1, :] = 1.0\n    \n    # Recurrence beta[t, i] = sum_j( A[i, j] * B[j, O[t+1]] * beta[t+1, j] )\n    for tt in reversed(range(T - 1)):\n        for i in range(N):\n            beta[tt, i] = np.sum(A[i, :] * B[:, observations[tt + 1]] * beta[tt + 1, :])\n\n    # 3. Compute gamma_t(i) = alpha_t(i)*beta_t(i) / sum_i(alpha_t(i)*beta_t(i))\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n\n    gamma_t = numerator / denominator\n\n    # 4. Round every component to four decimal places and return as a list\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 553, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    # 1. Add a bias column of ones to X_train and X_test\n    X_train_bias = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test_bias = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n\n    # 2. Initialize weights with zeros\n    w = np.zeros(X_train_bias.shape[1])\n\n    # 3. Batch Gradient Descent\n    for _ in range(max_iter):\n        # Calculate the linear combination\n        z = X_train_bias @ w\n\n        # Apply the sigmoid function \u03c3(z) = 1 / (1 + e^(-z))\n        h = 1 / (1 + np.exp(-z))\n\n        # Compute the gradient of the log-likelihood\n        # w \u2190 w + \u03b1 \u00b7 X\u1d40 (y \u2212 h) / n_samples\n        gradient = (X_train_bias.T @ (y_train - h)) / X_train_bias.shape[0]\n        w += alpha * gradient\n\n    # 4. Make predictions on X_test\n    z_test = X_test_bias @ w\n    p_test = 1 / (1 + np.exp(-z_test))\n\n    # Classify: output 1 if p >= 0.5, else 0\n    predictions = [1 if p >= 0.5 else 0 for p in p_test]\n\n    return predictions"}
{"task_id": 555, "completion_id": 0, "completion": "import numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, ... in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    \n    # 1. Compute pairwise Euclidean distances\n    #    For each pair of samples, compute the Euclidean distance.\n    distances = np.linalg.norm(data[:, np.newaxis] - data[np.newaxis, :], axis=-1)\n    \n    # 2. Build the neighborhood list for each sample using the supplied eps\n    neighbors = []\n    for i in range(n_samples):\n        neighbor_idxs = np.where(distances[i] <= eps)[0]\n        neighbors.append(neighbor_idxs.tolist())\n    \n    # 3. Identify core points (|neighborhood| >= min_samples)\n    core_points = [False] * n_samples\n    for i in range(n_samples):\n        if len(neighbors[i]) >= min_samples:\n            core_points[i] = True\n\n    # 4. Use BFS to form clusters\n    labels = [0] * n_samples  # 0 means 'unvisited'\n    cluster_id = 0\n    \n    for i in range(n_samples):\n        # If already labeled or not a core point, skip\n        if labels[i] != 0 or not core_points[i]:\n            continue\n        \n        # Found a new cluster\n        cluster_id += 1\n        labels[i] = cluster_id\n        \n        # BFS queue\n        queue = deque([i])\n        while queue:\n            point_idx = queue.popleft()\n            \n            # Check neighbors of the current point\n            for neighbor_idx in neighbors[point_idx]:\n                # If neighbor has not been visited yet, label it\n                if labels[neighbor_idx] == 0:\n                    labels[neighbor_idx] = cluster_id\n                    # If neighbor is a core point, add it to queue\n                    if core_points[neighbor_idx]:\n                        queue.append(neighbor_idx)\n    \n    # 5. After all core points are visited, \n    #    every still-unlabeled point is noise => label = -1\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n    \n    return labels"}
{"task_id": 559, "completion_id": 0, "completion": "def leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    # If the tree is empty, return an empty list\n    if root is None:\n        return []\n\n    # If it is a leaf node, return a list containing its value\n    if root.left is None and root.right is None:\n        return [root.val]\n\n    # Otherwise, collect leaf values from the left subtree,\n    # then extend with leaf values from the right subtree\n    return leaf_values(root.left) + leaf_values(root.right)"}
{"task_id": 560, "completion_id": 0, "completion": "import math\nimport heapq\n\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n\n    if not points:\n        return []\n\n    dim = len(points[0])  # dimensionality of each point\n\n    # ----------------------------------------------------------------------\n    # 1) Build a balanced k-d tree\n    # ----------------------------------------------------------------------\n    def build_kdtree(idx_list, axis=0):\n        \"\"\"Recursively build a balanced k-d tree.\n\n        Parameters\n        ----------\n        idx_list : list[int]\n            Indices into the 'points' array; these indices define the current subset of points.\n        axis : int\n            Current splitting axis.\n\n        Returns\n        -------\n        dict or None\n            A dict representing a k-d tree node:\n                {\n                  \"idx\": int,       # index of the point stored at this node\n                  \"axis\": int,      # splitting axis\n                  \"left\": dict|None,\n                  \"right\": dict|None\n                }\n            or None if idx_list is empty.\n        \"\"\"\n        if not idx_list:\n            return None\n\n        # Sort by the current axis and pick the median\n        idx_list.sort(key=lambda i: points[i][axis])\n        mid = len(idx_list) // 2\n        median_idx = idx_list[mid]\n\n        next_axis = (axis + 1) % dim\n        return {\n            \"idx\": median_idx,\n            \"axis\": axis,\n            \"left\": build_kdtree(idx_list[:mid], next_axis),\n            \"right\": build_kdtree(idx_list[mid+1:], next_axis),\n        }\n\n    # Build the tree over all point indices, starting with axis=0\n    all_indices = list(range(len(points)))\n    kd_tree = build_kdtree(all_indices, axis=0)\n\n    # ----------------------------------------------------------------------\n    # 2) Search the k-d tree for the k closest points\n    # ----------------------------------------------------------------------\n    # We'll store our best candidates in a list of (dist, idx).\n    # We keep it sorted by ascending dist, then ascending idx, so best[-1]\n    # is the \"worst\" among the best so far (largest dist or tie-broken by largest idx).\n    best = []\n\n    def add_to_best(dist, idx):\n        \"\"\"Add (dist, idx) to the 'best' list (size up to k), sorted by ascending dist, then idx.\"\"\"\n        # If we have fewer than k points, just insert\n        if len(best) < k:\n            best.append((dist, idx))\n            best.sort(key=lambda x: (x[0], x[1]))\n        else:\n            # If this new candidate is better than the worst in 'best', swap it in\n            worst_dist, worst_idx = best[-1]\n            if (dist < worst_dist) or (dist == worst_dist and idx < worst_idx):\n                best[-1] = (dist, idx)\n                best.sort(key=lambda x: (x[0], x[1]))\n\n    def max_dist_in_best():\n        \"\"\"Return the largest distance in 'best' (based on our sorting), or float('inf') if < k collected.\"\"\"\n        if len(best) < k:\n            return float('inf')\n        return best[-1][0]\n\n    def squared_distance(a, b):\n        return sum((xa - xb)**2 for xa, xb in zip(a, b))\n\n    def search_kdtree(node):\n        \"\"\"Recursively search the k-d tree for nearest neighbors.\"\"\"\n        if node is None:\n            return\n\n        idx = node[\"idx\"]\n        axis = node[\"axis\"]\n        point = points[idx]\n\n        # 1) Update best if needed\n        dist = squared_distance(query, point)\n        add_to_best(dist, idx)\n\n        # 2) Determine which branch to search first\n        diff = query[axis] - point[axis]\n        # Decide left or right\n        if diff < 0:\n            # Query is \"left\" of the node\n            search_kdtree(node[\"left\"])\n            # Check whether we should explore the right side\n            if diff**2 < max_dist_in_best():\n                search_kdtree(node[\"right\"])\n        else:\n            # Query is \"right\" of the node\n            search_kdtree(node[\"right\"])\n            # Check whether we should explore the left side\n            if diff**2 < max_dist_in_best():\n                search_kdtree(node[\"left\"])\n\n    # Perform the search\n    search_kdtree(kd_tree)\n\n    # ----------------------------------------------------------------------\n    # 3) Return only the indices of the k closest points, sorted by distance, then index\n    # ----------------------------------------------------------------------\n    # If k is larger than total points, we possibly have less than k in 'best'.\n    # The 'best' list is already sorted by ascending distance then index.\n    # We may have fewer than k points in 'best' if k > number of points.\n    # So just return all of them in sorted order.\n    return [idx for (_, idx) in best]"}
{"task_id": 561, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model (GMM) of k components to the given data via Expectation\u2013Maximization (EM).\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2D array with shape (N, D) containing N samples of dimension D each.\n    k : int\n        Number of Gaussian mixture components. If k=1, all samples are assigned to component 0.\n    max_iter : int\n        Maximum number of EM iterations to perform. Default is 200.\n    epsilon : float\n        Tolerance for assessing convergence based on the change in mixture weights. Default is 1e-4.\n    \n    Returns\n    -------\n    list[int]\n        A list of length N containing the final cluster label (0..k\u22121) of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # If k=1, everything is assigned to the single component\n    if k == 1:\n        return [0] * N\n    \n    # Helper function: multivariate normal probability density\n    def mvn_pdf(x, mean, cov):\n        # Add a small regularization to avoid singularities\n        cov_reg = cov + np.eye(D) * 1e-6\n        det_cov = np.linalg.det(cov_reg)\n        inv_cov = np.linalg.inv(cov_reg)\n        diff = x - mean\n        exponent = -0.5 * np.einsum('...i,ij,...j', diff, inv_cov, diff)\n        norm_const = 1.0 / np.sqrt((2 * np.pi) ** D * det_cov)\n        return norm_const * np.exp(exponent)\n    \n    # ============ Initialization ============\n\n    # For deterministic initialization of means, pick the first k distinct samples\n    # (assuming data has at least k distinct points)\n    unique_data = np.unique(data, axis=0)\n    if len(unique_data) < k:\n        # Fallback if not enough distinct points: sample with replacement\n        initial_indices = np.random.choice(N, size=k, replace=True)\n    else:\n        initial_indices = np.arange(k)\n\n    means = unique_data[initial_indices].astype(float)\n\n    # Initialize mixture weights uniformly\n    weights = np.ones(k) / k\n\n    # Initialize covariances as the overall sample covariance (or an identity scaled accordingly)\n    overall_cov = np.cov(data, rowvar=False)\n    if overall_cov.shape == ():  # In case D=1, cov() returns a scalar\n        overall_cov = np.array([[overall_cov]])\n    covariances = np.array([overall_cov for _ in range(k)])\n\n    # ============ EM algorithm ============\n\n    for _iter in range(max_iter):\n        old_weights = weights.copy()\n\n        # ---------- E-step: compute responsibilities ----------\n        # responsibilities[i, j] = posterior prob that sample i belongs to component j\n        responsibilities = np.zeros((N, k), dtype=float)\n\n        # Numerators for each component\n        for j in range(k):\n            pdf_vals = mvn_pdf(data, means[j], covariances[j])\n            responsibilities[:, j] = weights[j] * pdf_vals\n\n        # Normalize to get posterior probabilities for each sample\n        row_sums = np.sum(responsibilities, axis=1, keepdims=True)\n        # Avoid division by zero in degenerate cases\n        row_sums[row_sums == 0] = 1e-16\n        responsibilities /= row_sums\n\n        # ---------- M-step: update parameters ----------\n        # Effective counts for each component\n        N_k = np.sum(responsibilities, axis=0)\n\n        # New mixture weights\n        weights = N_k / N\n\n        # New means\n        new_means = np.zeros_like(means)\n        for j in range(k):\n            new_means[j] = np.sum(data * responsibilities[:, j][:, np.newaxis], axis=0) / N_k[j]\n\n        # New covariances\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            # Each sample's contribution weighted by responsibilities[i, j]\n            cov_j = np.einsum('ij,ik->jk', diff * responsibilities[:, j][:, np.newaxis], diff)\n            cov_j /= N_k[j]\n            new_covariances.append(cov_j)\n\n        new_covariances = np.array(new_covariances)\n        \n        means = new_means\n        covariances = new_covariances\n\n        # Check convergence based on change in mixture weights\n        if np.linalg.norm(weights - old_weights, ord=1) < epsilon:\n            break\n\n    # ============ Assign cluster labels and reorder ============\n\n    # Final E-step to get final responsibilities\n    responsibilities = np.zeros((N, k), dtype=float)\n    for j in range(k):\n        pdf_vals = mvn_pdf(data, means[j], covariances[j])\n        responsibilities[:, j] = weights[j] * pdf_vals\n    row_sums = np.sum(responsibilities, axis=1, keepdims=True)\n    row_sums[row_sums == 0] = 1e-16\n    responsibilities /= row_sums\n\n    # Assign each sample to the component of highest posterior probability\n    cluster_assignments = np.argmax(responsibilities, axis=1)\n\n    # Sort components by ascending order of the means' first coordinate\n    sort_indices = np.argsort(means[:, 0])\n    \n    # Build a mapping old_label -> new_label\n    # e.g. if sort_indices = [2, 0, 1], then the old cluster #2 becomes new label 0, old cluster #0 -> 1, old cluster #1 -> 2\n    new_label_map = np.zeros(k, dtype=int)\n    for new_label, old_label in enumerate(sort_indices):\n        new_label_map[old_label] = new_label\n\n    # Apply the mapping to the final cluster assignments\n    final_labels = [int(new_label_map[old_label]) for old_label in cluster_assignments]\n\n    return final_labels"}
{"task_id": 562, "completion_id": 0, "completion": "import numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Helper function: deterministic k-means with the first k samples as centroids\n    # -------------------------------------------------------------------------\n    def kmeans(X: np.ndarray, k: int, max_iter: int = 300) -> np.ndarray:\n        \"\"\"\n        Deterministic k-means that always picks the first k samples as initial centroids.\n        X: shape (N, d)\n        k: number of clusters (centroids)\n        \"\"\"\n        N = X.shape[0]\n        # Pick the first k samples as initial centroids\n        centroids = X[:k].copy()\n\n        labels = np.zeros(N, dtype=np.int64)\n        for _ in range(max_iter):\n            # Step 1: assign each point to the nearest centroid\n            dists = np.sum((X[:, None] - centroids[None, :])**2, axis=2)  # shape (N, k)\n            new_labels = np.argmin(dists, axis=1)\n\n            # If no change in labels, we're done\n            if np.all(new_labels == labels):\n                break\n            labels = new_labels\n\n            # Step 2: update centroids\n            for j in range(k):\n                # Update centroid j to be mean of points in cluster j\n                points_in_cluster = X[labels == j]\n                if len(points_in_cluster) > 0:\n                    centroids[j] = np.mean(points_in_cluster, axis=0)\n\n        return labels\n\n    # -------------------------------------------------------------------------\n    # Main spectral clustering logic\n    # -------------------------------------------------------------------------\n    N = data.shape[0]\n    if n_cluster == 1:\n        # If only one cluster, everyone belongs to cluster 0\n        return [0]*N\n\n    # 1. Compute the Gaussian similarity (fully-connected graph)\n    #    pairwise squared distances\n    dist2 = np.sum((data[:, None] - data[None, :])**2, axis=2)  # shape (N, N)\n    #    similarity matrix W\n    W = np.exp(-gamma * dist2)\n\n    # 2. Construct the (un)normalized Laplacian\n    #    D is the degree matrix\n    degree = np.sum(W, axis=1)\n    D = np.diag(degree)\n    L = D - W\n\n    if method == 'normalized':\n        # Symmetric normalized Laplacian: L_sym = D^{-1/2} * L * D^{-1/2}\n        # Avoid division by zero if any degree == 0 (shouldn't happen if fully connected)\n        d_inv_sqrt = np.diag(1.0 / np.sqrt(degree + 1e-12))\n        L = d_inv_sqrt @ L @ d_inv_sqrt\n\n    # 3. Compute the eigenvectors for the n_cluster smallest eigenvalues\n    #    Since L is symmetric, we can use eigh.\n    eigvals, eigvecs = np.linalg.eigh(L)  # eigvals in ascending order\n\n    # Take the first n_cluster eigenvectors\n    U = eigvecs[:, :n_cluster]  # shape (N, n_cluster)\n\n    # If using normalized method, row-normalize U\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1, keepdims=True)\n        row_norms[row_norms == 0] = 1.0  # avoid division by zero\n        U = U / row_norms\n\n    # 4. k-means on rows of U\n    labels = kmeans(U, n_cluster)\n\n    # 4b. Relabel clusters so that the cluster containing the smallest original index\n    #     gets label 0, the next one 1, etc.\n    #     For each cluster, find smallest index in that cluster, then sort clusters by this index.\n    unique_clusters = np.unique(labels)\n    # Get the smallest index for each cluster\n    cluster_to_min_idx = {}\n    for c in unique_clusters:\n        cluster_indices = np.where(labels == c)[0]\n        cluster_to_min_idx[c] = np.min(cluster_indices) if len(cluster_indices) > 0 else N\n\n    # Sort clusters by their smallest index\n    sorted_clusters = sorted(unique_clusters, key=lambda c: cluster_to_min_idx[c])\n    # Create a mapping from old cluster -> new cluster label\n    cluster_new_label = {}\n    for new_label, old_cluster in enumerate(sorted_clusters):\n        cluster_new_label[old_cluster] = new_label\n\n    # Apply the mapping\n    final_labels = [cluster_new_label[c] for c in labels]\n\n    # 5. Return as a standard Python list\n    return final_labels"}
{"task_id": 563, "completion_id": 0, "completion": "import numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    # 1) Initialize alpha and b\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # 2) Build the Gram matrix G\n    G = X_data @ X_data.T  # G[i, j] = X_data[i] dot X_data[j]\n\n    # 3) Training loop\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # compute g = \u03a3_j alpha_j * y_j * G[j, i]\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                # update alpha_i and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            # no update in this pass => converged\n            break\n\n    # 4) Recover the weight vector w\n    #    w = \u03a3_i alpha_i y_i x_i\n    w = X_data.T @ (alpha * y_data)  # shape (d,)\n\n    # 5) Round every component of w and b to 4 decimals and return\n    w_rounded = np.round(w, 4)\n    b_rounded = float(np.round(b, 4))\n\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 564, "completion_id": 0, "completion": "def predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    # 1. Check if we are at a leaf node (node.y is present)\n    if hasattr(root, \"y\") and root.y is not None:\n        return root.y\n\n    # 2. Branching based on task type\n    if task_type == \"classification\":\n        # Inspect the feature with index root.label\n        feature_value = features[root.label]\n\n        # Look for a child whose x matches the feature value\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n\n        # Default to the second child if no match\n        return predict_sample(root.child[1], features, task_type)\n\n    elif task_type == \"regression\":\n        # Inspect the feature with index root.label\n        if features[root.label] <= root.s:\n            # Go to the first child\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            # Go to the second child\n            return predict_sample(root.child[1], features, task_type)\n\n    # In a well-formed tree, we should not get here\n    raise ValueError(\"Invalid task_type or malformed node.\")"}
{"task_id": 565, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Helper function to compute entropy\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute the entropy of the label distribution.\"\"\"\n        unique, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -np.sum(probabilities * np.log2(probabilities))\n\n    # Compute the entropy of the entire label vector y\n    base_entropy = entropy(y)\n\n    n_samples, n_features = X.shape\n\n    best_feature = None\n    max_ig = float(\"-inf\")\n\n    # Loop over each feature\n    for feature_idx in range(n_features):\n        # Obtain unique values for this feature\n        feature_values = X[:, feature_idx]\n        unique_vals, value_counts = np.unique(feature_values, return_counts=True)\n\n        # Compute the conditional entropy H(y|A)\n        cond_entropy = 0.0\n        for val, count_val in zip(unique_vals, value_counts):\n            # Indices where feature == val\n            val_indices = (feature_values == val)\n            # Subset of y for these indices\n            y_subset = y[val_indices]\n            # Weight of this subset\n            p_val = count_val / n_samples\n            # Entropy for this subset\n            cond_entropy += p_val * entropy(y_subset)\n\n        # Information Gain\n        ig = base_entropy - cond_entropy\n\n        # Update the best feature info if we have a better or equal IG\n        # (tie broken by smallest feature index)\n        if ig > max_ig:\n            max_ig = ig\n            best_feature = feature_idx\n\n    # Round the max information gain to 6 decimal places\n    return (best_feature, round(max_ig, 6))"}
{"task_id": 566, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n\n    # --------------------------------------------------------------------------\n    # 1. Basic checks and early exit if epsilon=0\n    # --------------------------------------------------------------------------    \n    np.random.seed(42)  # Ensure deterministic runs\n    n, d = data.shape\n    if epsilon == 0:\n        return []\n\n    # --------------------------------------------------------------------------\n    # 2. Define helper functions for building and traversing random isolation trees\n    # --------------------------------------------------------------------------\n    \n    # c(n) function: approximation of the average path length for a leaf with n points\n    def c(n: int) -> float:\n        if n <= 1:\n            return 0.0\n        return 2.0 * np.log(n - 1) + 0.5772156649 - 2.0 * ((n - 1) / n)\n    \n    # Build a purely random isolation tree\n    def build_tree(X: np.ndarray, current_depth: int, height_limit: int):\n        # Stopping conditions\n        if current_depth >= height_limit or len(X) <= 1:\n            return {\"leaf_size\": len(X)}\n        \n        # Pick a random feature\n        feature = np.random.randint(0, d)\n        \n        # Find min and max of that feature in X\n        min_val = X[:, feature].min()\n        max_val = X[:, feature].max()\n        \n        # If all values are the same, make a leaf\n        if min_val == max_val:\n            return {\"leaf_size\": len(X)}\n        \n        # Draw a random threshold uniformly between min_val and max_val\n        threshold = np.random.uniform(min_val, max_val)\n        \n        # Split into left and right subsets\n        left_mask = X[:, feature] <= threshold\n        right_mask = ~left_mask\n        left_sub = X[left_mask]\n        right_sub = X[right_mask]\n        \n        # Recursively build subtrees\n        left_node = build_tree(left_sub, current_depth + 1, height_limit)\n        right_node = build_tree(right_sub, current_depth + 1, height_limit)\n        \n        return {\n            \"feature\": feature,\n            \"threshold\": threshold,\n            \"left\": left_node,\n            \"right\": right_node,\n            \"leaf_size\": len(X),\n        }\n    \n    # Compute path length for a single observation x in a tree\n    def path_length(x: np.ndarray, node: dict, current_depth: int = 0) -> float:\n        # If we are at a leaf, add c(n) to the current depth\n        if \"feature\" not in node:  # It's a leaf\n            return current_depth + c(node[\"leaf_size\"])\n        \n        # Otherwise, go left or right\n        if x[node[\"feature\"]] <= node[\"threshold\"]:\n            return path_length(x, node[\"left\"], current_depth + 1)\n        else:\n            return path_length(x, node[\"right\"], current_depth + 1)\n    \n    # --------------------------------------------------------------------------\n    # 3. Build n_trees random isolation trees\n    # --------------------------------------------------------------------------\n    trees = []\n    actual_sample_size = min(sample_size, n)\n    height_limit = math.ceil(math.log2(actual_sample_size))\n    \n    for _ in range(n_trees):\n        # Draw a subsample\n        idx = np.random.choice(n, size=actual_sample_size, replace=False)\n        X_sub = data[idx]\n        \n        # Build the tree from this subsample\n        tree = build_tree(X_sub, 0, height_limit)\n        trees.append(tree)\n    \n    # --------------------------------------------------------------------------\n    # 4. For each observation, compute the average path length across all trees\n    # --------------------------------------------------------------------------\n    # Precompute path lengths\n    path_length_sums = np.zeros(n, dtype=float)\n    \n    for i in range(n):\n        x = data[i]\n        pl_sum = 0.0\n        for tree in trees:\n            pl_sum += path_length(x, tree, 0)\n        path_length_sums[i] = pl_sum\n    \n    avg_path_lengths = path_length_sums / n_trees\n    \n    # --------------------------------------------------------------------------\n    # 5. Compute anomaly scores for each observation\n    #     s(x) = 2^(- (h_bar(x) / phi))\n    #     phi = 2 * ln(n-1) - 2*(n-1)/n\n    # --------------------------------------------------------------------------\n    if n > 1:\n        phi = 2.0 * math.log(n - 1) - 2.0 * (float(n - 1) / n)\n    else:\n        # Degenerate case: single sample\n        # The formula doesn't really apply for n=1, but we won't have outliers anyway\n        phi = 1e-9  # just to avoid division by zero\n    \n    scores = np.power(2.0, - (avg_path_lengths / phi))\n    \n    # --------------------------------------------------------------------------\n    # 6. Determine which observations are outliers:\n    #    \"An object is an outlier when its score is among the largest \u03b5\u00b7100% of all scores.\"\n    # --------------------------------------------------------------------------\n    outliers_count = int(n * epsilon)  # number of outliers\n    if outliers_count == 0:\n        return []\n    \n    # Sort scores in descending order, take the top outliers_count\n    sorted_indices_desc = np.argsort(scores)[::-1]\n    outlier_indices = sorted_indices_desc[:outliers_count]\n    \n    # Return them sorted in ascending order\n    return sorted(outlier_indices.tolist())"}
{"task_id": 567, "completion_id": 0, "completion": "import numpy as np\n\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    # Number of trees is the number of rows\n    num_trees = len(predictions)  \n    if num_trees == 0:\n        return []\n    \n    # Number of samples is the number of columns in the first row\n    num_samples = len(predictions[0])\n    if num_samples == 0:\n        return []\n\n    final_labels = []\n    for col in range(num_samples):\n        # Count occurrences of each label in column 'col'\n        frequency = {}\n        for row in range(num_trees):\n            label = predictions[row][col]\n            frequency[label] = frequency.get(label, 0) + 1\n        \n        # Find the maximum count\n        max_count = max(frequency.values())\n        # Gather all labels that have this max count\n        candidates = [label for label, count in frequency.items() if count == max_count]\n        # Tie-break by choosing the smallest label\n        final_label = min(candidates)\n        final_labels.append(int(final_label))\n    \n    return final_labels"}
{"task_id": 568, "completion_id": 0, "completion": "import math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Trains a Maximum Entropy (MaxEnt) classifier with the Generalized Iterative\n    Scaling (GIS) algorithm and returns predictions for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_samples, n_features)\n        Training samples with categorical (integer) features.\n    y_train : np.ndarray, shape (n_samples,)\n        Training labels (integers).\n    X_test : np.ndarray, shape (m_samples, n_features)\n        Test samples with categorical (integer) features to classify.\n    epsilon : float, optional\n        Convergence tolerance for GIS updates. The iteration stops if\n        the largest absolute weight update is smaller than epsilon.\n    n_iter : int, optional\n        Maximum number of GIS iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (one per row of X_test).\n    \"\"\"\n\n    # Number of training samples and features\n    n_samples, n_features = X_train.shape\n\n    # Collect unique labels\n    unique_labels = sorted(set(y_train))\n    num_labels = len(unique_labels)\n    # Map label -> index in [0, num_labels-1]\n    label2idx = {label: idx for idx, label in enumerate(unique_labels)}\n\n    # For each feature index d, gather the unique values in X_train\n    # (Assumes features are categorical and stored as integers)\n    feats_for_d = []\n    for d in range(n_features):\n        feats_for_d.append(sorted(set(X_train[:, d])))\n\n    # Build a mapping (feature_index, feature_value, label) -> feature_id\n    # This enumerates all possible \"active features\"\n    feature_index = {}\n    f_id = 0\n    for d in range(n_features):\n        for val in feats_for_d[d]:\n            for label in unique_labels:\n                feature_index[(d, val, label)] = f_id\n                f_id += 1\n\n    # Total number of features\n    F = f_id\n\n    # Empirical feature counts E_p[f_j]: fraction of training instances\n    # that activate feature j\n    emp_f = np.zeros(F, dtype=float)\n    for i in range(n_samples):\n        y_i = y_train[i]\n        for d in range(n_features):\n            v = X_train[i, d]\n            j = feature_index[(d, v, y_i)]\n            emp_f[j] += 1.0\n    emp_f /= n_samples  # convert counts to probabilities\n\n    # Initialize weights to zero\n    w = np.zeros(F, dtype=float)\n\n    # C = maximum number of active features per (x, y),\n    # which is just n_features (one active \"value\" per dimension)\n    C = n_features\n\n    # GIS iterations\n    for _ in range(n_iter):\n        # Compute model expectations with current weights\n\n        # p_[i, l] = P(y = unique_labels[l] | X_train[i]) (unnormalized)\n        p_ = np.zeros((n_samples, num_labels), dtype=float)\n        for i in range(n_samples):\n            for l_idx, label in enumerate(unique_labels):\n                sum_w = 0.0\n                for d in range(n_features):\n                    val = X_train[i, d]\n                    feat_id = feature_index[(d, val, label)]\n                    sum_w += w[feat_id]\n                p_[i, l_idx] = math.exp(sum_w)\n\n            # Normalize to get a proper distribution\n            z = np.sum(p_[i, :])\n            if z > 0:\n                p_[i, :] /= z\n            else:\n                # Should not happen if weights remain finite; fallback:\n                p_[i, :] = 1.0 / num_labels\n\n        # Model's expectation E_p_t[f_j]\n        model_f = np.zeros(F, dtype=float)\n        for i in range(n_samples):\n            for d in range(n_features):\n                val = X_train[i, d]\n                for l_idx, label in enumerate(unique_labels):\n                    feat_id = feature_index[(d, val, label)]\n                    model_f[feat_id] += p_[i, l_idx]\n        model_f /= n_samples\n\n        # Update weights via GIS rule:\n        # w_{j}^{new} = w_{j}^{old} + (1/C) * ln( emp_f[j] / model_f[j] )\n        # (Only update if emp_f[j] > 0)\n        max_update = 0.0\n        for feat_id in range(F):\n            if emp_f[feat_id] > 0:\n                # Guard against division by zero\n                if model_f[feat_id] < 1e-15:\n                    ratio = emp_f[feat_id] / 1e-15\n                else:\n                    ratio = emp_f[feat_id] / model_f[feat_id]\n\n                update = (1.0 / C) * math.log(ratio)\n                w[feat_id] += update\n                if abs(update) > max_update:\n                    max_update = abs(update)\n\n        # Check for convergence\n        if max_update < epsilon:\n            break\n\n    # Predict for X_test by picking the label that maximizes log-odds\n    # (equivalently, the unnormalized probability)\n    predictions = []\n    for i in range(X_test.shape[0]):\n        # Compute unnormalized log-prob for each label\n        best_label = None\n        best_score = -float(\"inf\")\n        for label in unique_labels:\n            score = 0.0\n            for d in range(n_features):\n                val = X_test[i, d]\n                # If a (d, val, label) triple never occurred in training,\n                # it won't be in feature_index. Use weight = 0 in that case.\n                if (d, val, label) in feature_index:\n                    score += w[feature_index[(d, val, label)]]\n            if score > best_score:\n                best_score = score\n                best_label = label\n        predictions.append(best_label)\n\n    return predictions"}
{"task_id": 569, "completion_id": 0, "completion": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Number of documents\n    n_docs = len(data)\n    if n_docs == 0:  # Edge case: if no data, return empty structures\n        return ([], set())\n\n    # Count how many documents each word appears in\n    doc_counts = Counter()\n    for _, words in data:\n        unique_words = set(words)\n        for w in unique_words:\n            doc_counts[w] += 1\n\n    # Create a list with (word, document-frequency ratio)\n    word_ratio_pairs = []\n    for word, count in doc_counts.items():\n        ratio = round(count / n_docs, 4)\n        word_ratio_pairs.append((word, ratio))\n\n    # Sort by ratio in descending order; if tie, order doesn't matter\n    word_ratio_pairs.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine which words go into the set\n    # 1. If cut_off is None, we include all words\n    # 2. If cut_off is 0, we return an empty set\n    # 3. If cut_off > n_distinct_words, we include all words\n    # 4. Otherwise, select the top cut_off words\n    if cut_off is None:\n        top_words = {w for w, _ in word_ratio_pairs}\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = {w for w, _ in word_ratio_pairs[:cut_off]}\n\n    return word_ratio_pairs, top_words"}
{"task_id": 570, "completion_id": 0, "completion": "```python\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n\n    # Group the training documents by their class\n    docs_per_class = defaultdict(list)\n    for label, tokens in train_data:\n        # Convert tokens to a set for easy \"presence\" checks\n        docs_per_class[label].append(set(tokens))\n\n    # Compute P(w|c) for each class c and keyword w (unsmoothed)\n    # P(w|c) = (# of class-c docs containing w) / (total # docs in class c)\n    probs = {}\n    for c, doc_sets in docs_per_class.items():\n        N_c = len(doc_sets)\n        probs[c] = {}\n        for w in keywords:\n            # Count in how many docs w is present\n            count_w = sum(w in doc_set for doc_set in doc_sets)\n            probs[c][w] = count_w / N_c  # unsmoothed probability\n\n    # For each test sample, compute the (unnormalized) likelihood for each class\n    # using the Bernoulli model, then pick the class with the largest likelihood.\n    predictions = []\n    for tokens in test_samples:\n        token_set = set(tokens)\n        best_label, best_likelihood = None, -1.0\n        \n        for c in docs_per_class:\n            likelihood = 1.0\n            for w in keywords:\n                p_w_given_c = probs[c][w]\n                if w in token_set:\n                    likelihood *= p_w_given_c\n                else:\n                    likelihood *= (1 - p_w_given_c)\n            # Pick the class with the highest likelihood so far\n            if likelihood > best_likelihood:\n                best_likelihood = likelihood\n                best_label = c\n        \n        predictions.append(best_label)\n    \n    return predictions\n```"}
{"task_id": 571, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # 1) Compute w = X^T (alpha \u2299 y)\n    alpha_y = alpha * y\n    w = X.T @ alpha_y  # shape is (n_features,)\n\n    # 2) Compute b = (1/n) * sum_i (y_i - w^T x_i)\n    n_samples = X.shape[0]\n    predictions = X @ w  # shape is (n_samples,)\n    b = np.mean(y - predictions)\n\n    # 3) Round to four decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n\n    # 4) Convert the weight vector to a Python list\n    w_list = w_rounded.tolist()\n\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "completion": "import numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implements the Local Outlier Factor (LOF) algorithm from scratch.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2D numpy array of shape (n_samples, n_features).\n    k : int\n        The number of neighbors to consider.\n    epsilon : float, optional\n        Threshold above which a point is considered an outlier.\n\n    Returns\n    -------\n    (list_of_scores, list_of_outlier_indices)\n        list_of_scores : list of LOF scores for each sample (rounded to 4 decimals)\n        list_of_outlier_indices : list of indices (ascending) for points whose LOF > epsilon\n    \"\"\"\n\n    # 1. Compute the full pairwise distance matrix.\n    #    distances[i,j] = Euclidean distance between data[i] and data[j].\n    n_samples = data.shape[0]\n    distances = np.sqrt(\n        np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=-1)\n    )\n\n    # 2. For every sample p, obtain its k-distance and the index list of those k nearest neighbors N_k(p).\n    #    The k-distance of p is the distance to its k-th nearest neighbor.\n    #    First sort the distances to find the k nearest neighbors (excluding the point itself).\n    k_distances = np.zeros(n_samples)\n    neighbors = []\n    for i in range(n_samples):\n        # Sort distance to all points from point i\n        # The smallest distance is always to itself (distance=0); skip index i.\n        sorted_idx = np.argsort(distances[i])\n        # The k-th nearest neighbor index after skipping i is at position k in sorted_idx\n        kth_neighbor_index = sorted_idx[k]\n        k_distances[i] = distances[i, kth_neighbor_index]\n        # The k nearest neighbors (excluding the point i itself) are:\n        neighbors.append(sorted_idx[1 : k + 1])\n\n    # 3 & 4. Define reach-dist_k(p, q) = max(k-distance(q), dist(p,q)).\n    #         The local reachability density LRD_k(p) = k / sum(reach-dist_k(p, q) for q in N_k(p))\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = 0.0\n        for q in neighbors[i]:\n            reach_dist = max(k_distances[q], distances[i, q])\n            sum_reach_dist += reach_dist\n        lrd[i] = k / sum_reach_dist if sum_reach_dist != 0 else 0\n\n    # 5. Finally, the Local Outlier Factor:\n    #    LOF_k(p) = (average of LRD_k(q) for q in N_k(p)) / LRD_k(p)\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        # Mean LRD of neighbors\n        mean_lrd_neighbors = np.mean([lrd[q] for q in neighbors[i]])\n        lof[i] = mean_lrd_neighbors / lrd[i] if lrd[i] != 0 else 0\n\n    # Round LOF scores to 4 decimals\n    lof_rounded = np.round(lof, 4)\n\n    # Identify outliers: indices where LOF > epsilon\n    outliers = np.where(lof_rounded > epsilon)[0].tolist()\n\n    return (lof_rounded.tolist(), outliers)"}
{"task_id": 573, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    # 1. Initialize parameters\n    m, n = X_train.shape\n    w = np.zeros(n)\n    b = 0.0\n    \n    error_count_history = []\n    \n    # 2. Training loop\n    for _ in range(n_iter):\n        error_count = 0\n        for x_i, y_i in zip(X_train, y_train):\n            # Perceptron condition\n            if y_i * (np.dot(w, x_i) + b) <= 0:\n                w += eta * y_i * x_i\n                b += eta * y_i\n                error_count += 1\n        \n        error_count_history.append(error_count)\n        \n        # Early stopping if perfectly classified\n        if error_count == 0:\n            break\n\n    # 3. Round results to 4 decimal places, then return\n    w = np.round(w, 4)\n    b = round(b, 4)\n    \n    return w.tolist(), b, error_count_history\n```"}
{"task_id": 574, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train, y_train = [], []\n    X_val,   y_val   = [], []\n\n    for c in range(m):\n        # base is 10 * floor(c/2)\n        base = 10 * (c // 2)\n\n        # Generate training points\n        for _ in range(n_train):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_train.append([x, y])\n            y_train.append(c)\n\n        # Generate validation points\n        for _ in range(n_val):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_val.append([x, y])\n            y_val.append(c)\n\n    # Convert to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val   = np.round(np.array(X_val),   4)\n    y_train = np.array(y_train)\n    y_val   = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val"}
{"task_id": 577, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function creates two NumPy arrays with coordinates and two with\n    labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train, X_val = [], []\n    y_train, y_val = [], []\n\n    for i in range(m):\n        # Determine label\n        label = (i - 0.5) * 2  # rule 2\n        \n        # Determine sampling ranges\n        x_left  = ( (i // 2) + 0.1 ) * 10\n        x_right = ( (i // 2) + 0.9 ) * 10\n        y_left  = ( (i % 2)  * 0.5 + 0.1 ) * 10\n        y_right = ( (i % 2)  * 0.5 + 0.9 ) * 10\n        \n        # Generate training samples\n        for _ in range(n_train):\n            rx = random.random()\n            ry = random.random()\n            x = x_left + (x_right - x_left) * rx\n            y = y_left + (y_right - y_left) * ry\n            X_train.append([round(x, 4), round(y, 4)])\n            y_train.append(label)\n        \n        # Generate validation samples\n        for _ in range(n_val):\n            rx = random.random()\n            ry = random.random()\n            x = x_left + (x_right - x_left) * rx\n            y = y_left + (y_right - y_left) * ry\n            X_val.append([round(x, 4), round(y, 4)])\n            y_val.append(label)\n\n    return (\n        np.array(X_train, dtype=float),\n        np.array(X_val, dtype=float),\n        np.array(y_train, dtype=float),\n        np.array(y_val, dtype=float),\n    )"}
{"task_id": 578, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    return [(corpus[i], corpus[i+1]) for i in range(len(corpus) - 1)]\n```"}
{"task_id": 579, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    \n    # 1. Initialisation: use the first k points as the initial centres\n    centres = X[:k].copy()  # shape: (k, d)\n    \n    # To track assignments from previous iteration\n    old_labels = np.full(m, -1, dtype=int)\n    \n    for _ in range(max_iters):\n        # 2. Assignment step:\n        # Compute the distance from each point to each centre\n        #   dist_mat shape: (k, m), each row i is the distances of points to centre i\n        dist_mat = np.stack([np.sum((X - centre)**2, axis=1) for centre in centres])\n        # Assign each point to the nearest centre (np.argmin breaks ties by choosing the first index)\n        new_labels = np.argmin(dist_mat, axis=0)\n        \n        # If the assignments have not changed, we are done\n        if np.array_equal(new_labels, old_labels):\n            break\n        old_labels = new_labels\n        \n        # 3. Update step: recompute each centre as the mean of assigned points\n        for i in range(k):\n            # Collect points assigned to cluster i\n            points_in_cluster = X[new_labels == i]\n            if len(points_in_cluster) > 0:\n                centres[i] = np.mean(points_in_cluster, axis=0)\n            # If no points are assigned to this centre, it remains unchanged\n    \n    # Round the final centres to 4 decimals and convert to list-of-lists\n    rounded_centres = np.round(centres, 4).tolist()\n    labels_list = new_labels.tolist()\n    \n    return labels_list, rounded_centres"}
{"task_id": 581, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"\n    Fits a linear model with Elastic-Net regularisation using batch gradient descent.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where:\n            - weights is a Python list of length n\n            - bias is a float\n        All returned values are rounded to four decimal places.\n    \"\"\"\n\n    # Handle trivial case: if learning_rate or iterations is zero, return all zeros.\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    \n    # Initialize parameters\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    # Custom sign function that treats 0 like negative (returns -1)\n    # per the given requirement: sign(0) = -1\n    def custom_sign(arr: np.ndarray) -> np.ndarray:\n        return np.where(arr > 0, 1.0, -1.0)\n\n    for _ in range(iterations):\n        # Predictions\n        y_hat = X.dot(w) + b\n        \n        # Residuals\n        r = y - y_hat\n        \n        # Compute gradients\n        # Gradient wrt weights\n        grad_w = -2.0 * X.T.dot(r) + l1_penalty * custom_sign(w) + 2.0 * l2_penalty * w\n        \n        # Gradient wrt bias\n        grad_b = -2.0 * np.sum(r)\n        \n        # Update parameters (divide by m to get the mean gradient)\n        w -= (learning_rate / m) * grad_w\n        b -= (learning_rate / m) * grad_b\n\n    # Round results to four decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n\n    return (w_rounded, b_rounded)"}
{"task_id": 582, "completion_id": 0, "completion": "import numpy as np\n\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    # Convert input to a NumPy array (float type) for easier calculations\n    X = np.array(X, dtype=float)\n    n = X.shape[0]\n\n    # If there's only one point, return [[0]]\n    if n == 1:\n        return [[0]]\n\n    # Determine k\n    k = min(int(np.floor(np.sqrt(n))), 10)\n\n    # Initialize directed adjacency matrix\n    directed_adj = np.zeros((n, n), dtype=int)\n\n    # Compute all pairwise distances\n    # We'll do this in a straightforward way (there are more efficient methods but let's keep it clear)\n    for i in range(n):\n        # Distances from point i to all others\n        diff = X - X[i]  # shape (n, d)\n        # squared Euclidean distance or Euclidean distance\n        # We only need the order, so either is fine. We'll use squared distance to avoid sqrt for performance.\n        dist_sq = np.sum(diff * diff, axis=1)\n        \n        # We don't consider the point itself, so let's set that distance to a large value (inf)\n        dist_sq[i] = np.inf\n        \n        # Find indices of the k closest points\n        nearest_indices = np.argsort(dist_sq)[:k]  # ties resolved by order in argsort automatically\n        \n        # Create directed edges i -> j\n        directed_adj[i, nearest_indices] = 1\n    \n    # Convert to an undirected adjacency matrix:\n    # If i->j or j->i, then W[i][j] = 1\n    undirected_adj = (directed_adj | directed_adj.T).astype(int)\n\n    # Convert to a standard Python list of lists\n    return undirected_adj.tolist()"}
{"task_id": 584, "completion_id": 0, "completion": "import numpy as np\n\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    arr = np.array(state)\n    stacked = np.stack([arr] * 4, axis=-1)\n    return stacked.tolist()"}
{"task_id": 585, "completion_id": 0, "completion": "def cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1"}
{"task_id": 586, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function implements the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n\n    # 1. Basic validation\n    if len(x) != len(y):\n        raise ValueError(\"x and y must have the same length.\")\n    if window < 2 or window > len(x):\n        raise ValueError(\"window must be in the range [2, len(x)].\")\n\n    n = len(x)\n\n    # 2. Normalise x and y to [0, 1]\n    x_min, x_max = np.min(x), np.max(x)\n    y_min, y_max = np.min(y), np.max(y)\n\n    # Edge case: if all x are the same, return the average y\n    if math.isclose(x_min, x_max, rel_tol=1e-15, abs_tol=1e-15):\n        return float(np.round(np.mean(y), 4))\n\n    x_norm = (x - x_min) / (x_max - x_min)\n    # If all y are the same, the model is constant => any prediction is that value\n    if math.isclose(y_min, y_max, rel_tol=1e-15, abs_tol=1e-15):\n        return float(np.round(y_min, 4))\n\n    y_norm = (y - y_min) / (y_max - y_min)\n\n    # Normalised query point\n    x_query_norm = (x_query - x_min) / (x_max - x_min)\n\n    # 3. Select *window* nearest neighbours to x_query (in the normalised x space)\n    distances = np.abs(x_norm - x_query_norm)\n    idx_sorted = np.argsort(distances)\n    idx_window = idx_sorted[:window]\n\n    # 4. Compute tricubic weights\n    d_max = distances[idx_window].max()\n    if math.isclose(d_max, 0.0, rel_tol=1e-15, abs_tol=1e-15):\n        # All neighbours are at the same x as x_query; slope = 0, predict mean\n        w = np.ones(window)  # all weights are 1\n    else:\n        d = distances[idx_window] / d_max\n        # Tricubic: w_i = (1 - |d_i|^3)^3 if |d_i| <= 1, else 0\n        w = (1 - d**3)**3\n        w[d > 1] = 0  # though this shouldn't happen for chosen neighbours\n\n    # 5. Weighted linear regression: y = a + b x\n    xw = x_norm[idx_window]\n    yw = y_norm[idx_window]\n\n    sum_w = np.sum(w)\n    sum_wx = np.sum(w * xw)\n    sum_wy = np.sum(w * yw)\n    sum_wx2 = np.sum(w * xw * xw)\n    sum_wxy = np.sum(w * xw * yw)\n\n    # Denominator for slope\n    denom = sum_wx2 - (sum_wx**2 / sum_w) if not math.isclose(sum_w, 0.0) else 0.0\n\n    if math.isclose(denom, 0.0, rel_tol=1e-15, abs_tol=1e-15):\n        # Slope is zero, predict weighted mean\n        if math.isclose(sum_w, 0.0, rel_tol=1e-15, abs_tol=1e-15):\n            # All weights are zero (unlikely with away from x_query), fallback to y mean\n            yhat_norm = np.mean(y_norm)\n        else:\n            yhat_norm = sum_wy / sum_w\n    else:\n        b = (sum_wxy - (sum_wx * sum_wy / sum_w)) / denom\n        a = (sum_wy - b * sum_wx) / sum_w\n        yhat_norm = a + b * x_query_norm\n\n    # Convert normalised prediction back to the original scale\n    yhat = yhat_norm * (y_max - y_min) + y_min\n\n    return float(np.round(yhat, 4))\n```\n"}
{"task_id": 587, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Any, List, Tuple\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\"). Additional elements contain the arguments.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    random.seed(0)  # Set the seed exactly once at the start\n    buffer = []\n    outputs = []\n\n    for operation in operations:\n        cmd = operation[0]\n        \n        if cmd == 'append':\n            # operation = ('append', transition)\n            _, transition = operation\n            buffer.append(transition)\n\n        elif cmd == 'pop':\n            # operation = ('pop',)\n            outputs.append(buffer.pop() if buffer else None)\n\n        elif cmd == 'sample':\n            # operation = ('sample', batch_size)\n            _, batch_size = operation\n            if batch_size > len(buffer):\n                outputs.append([])\n            else:\n                outputs.append(random.sample(buffer, batch_size))\n\n        elif cmd == 'size':\n            # operation = ('size',)\n            outputs.append(len(buffer))\n\n        else:\n            raise ValueError(f\"Unrecognized command: {cmd}\")\n\n    return outputs\n```"}
{"task_id": 588, "completion_id": 0, "completion": "from typing import Optional\n\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    # Base case: if the tree is empty, return -1\n    if root is None:\n        return -1\n\n    # Recursively compute the maximum depths of the left and right subtrees\n    left_depth = tree_max_depth(root.left)\n    right_depth = tree_max_depth(root.right)\n\n    # The depth of the current node is the max of left/right depths plus 1\n    return max(left_depth, right_depth) + 1"}
{"task_id": 590, "completion_id": 0, "completion": "import numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags: list[list[bool]]) -> tuple[list[tuple[int, int]],\n                                                       list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (``ground``)\n    and the already placed flags (``flags``). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    rows = len(ground)\n    cols = len(ground[0]) if rows > 0 else 0\n\n    # Utility: get valid 8-connected neighbors for (r, c).\n    def neighbors(r, c):\n        for dr in (-1, 0, 1):\n            for dc in (-1, 0, 1):\n                if dr == 0 and dc == 0:\n                    continue\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    yield nr, nc\n\n    clicks_set = set()\n    flags_set = set()\n\n    for r in range(rows):\n        for c in range(cols):\n            # Only consider revealed squares that are NOT themselves flagged.\n            if not np.isnan(ground[r][c]) and (not flags[r][c]):\n                val = int(ground[r][c])  # safe to cast, since it's not NaN\n\n                # Gather neighbor info\n                neighs = list(neighbors(r, c))\n                hidden_unflagged = [(nr, nc) for (nr, nc) in neighs\n                                    if np.isnan(ground[nr][nc]) and not flags[nr][nc]]\n                bomb_count = sum(flags[nr][nc] for (nr, nc) in neighs)\n\n                # Apply the rules:\n                if val == 0:\n                    # Reveal all still-hidden, unflagged neighbors\n                    for sq in hidden_unflagged:\n                        clicks_set.add(sq)\n                elif val == 8:\n                    # All still-hidden, unflagged neighbors must be bombs\n                    for sq in hidden_unflagged:\n                        flags_set.add(sq)\n                else:\n                    # bombs == value => reveal all unexplored\n                    if bomb_count == val:\n                        for sq in hidden_unflagged:\n                            clicks_set.add(sq)\n                    # unexplored == value => flag all unexplored\n                    elif len(hidden_unflagged) == val:\n                        for sq in hidden_unflagged:\n                            flags_set.add(sq)\n\n    # Sort the results in ascending lexicographical order\n    clicks = sorted(clicks_set)\n    new_flags = sorted(flags_set)\n    return (clicks, new_flags)"}
{"task_id": 591, "completion_id": 0, "completion": "import numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert x to a NumPy array for easier manipulation\n    x = np.array(x, dtype=float)\n\n    # Forward pass through each layer\n    n_layers = len(weights)\n    for i, layer in enumerate(weights):\n        # Convert the current layer weights to a NumPy array\n        layer_w = np.array(layer, dtype=float)  # shape: (number_of_neurons, prev_layer_size+1)\n        # Append bias input = 1 to the current input\n        x_with_bias = np.concatenate(([1.0], x))\n        # Compute the linear combination for all neurons in this layer\n        x = layer_w @ x_with_bias  # shape: (number_of_neurons,)\n\n        # Apply ReLU on all layers except the last one\n        if i < n_layers - 1:\n            x = np.maximum(0.0, x)\n\n    # Round the final output(s) to four decimals\n    if x.size == 1:\n        return round(float(x[0]), 4)\n    else:\n        return [round(float(val), 4) for val in x]"}
{"task_id": 592, "completion_id": 0, "completion": "import numpy as np\n\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet. The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n\n    # If the board has only one cell, return empty list and zero count\n    if clicked.shape == (1, 1):\n        return ([], 0)\n\n    nrows, ncols = clicked.shape\n\n    # Possible neighbor relative positions\n    shifts = [\n        (-1, -1), (-1, 0), (-1, 1),\n        ( 0, -1),           ( 0, 1),\n        ( 1, -1), ( 1, 0), ( 1, 1)\n    ]\n\n    neighbors = []\n    for dr, dc in shifts:\n        r, c = row + dr, col + dc\n        # Check boundaries\n        if 0 <= r < nrows and 0 <= c < ncols:\n            neighbors.append((r, c))\n\n    # Get the unopened neighbors (clicked == False)\n    unopened_neighbors = [(r, c) for (r, c) in neighbors if not clicked[r, c]]\n\n    # Count how many neighboring cells are flagged\n    flagged_count = sum(flags[r, c] for (r, c) in neighbors)\n\n    # Sort the unopened neighbors by row, then by column\n    unopened_neighbors.sort(key=lambda x: (x[0], x[1]))\n\n    return (unopened_neighbors, flagged_count)"}
{"task_id": 593, "completion_id": 0, "completion": "from copy import deepcopy\n\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"\n    Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function must apply the logical rules described in the task statement\n    (solved constraints, propagation, subset rule, duplicate removal) until no\n    new information can be obtained.\n\n    The result is a tuple (safe, mines) of two **alphabetically sorted** lists.\n    The first element contains all variables that are certainly safe, the second\n    one all variables that are certainly mines.  If nothing can be deduced an\n    empty list must be returned instead.\n    \"\"\"\n\n    # Convert constraints to a more convenient internal form:\n    # Each constraint is a tuple (set_of_vars, value)\n    # Also gather all variables so we know what variables even exist.\n    processed = []\n    all_vars = set()\n    for c in constraints:\n        varset = frozenset(c[0])\n        val = c[1]\n        processed.append((varset, val))\n        all_vars.update(varset)\n\n    # known_safes and known_mines hold variables definitively classified\n    known_safes = set()\n    known_mines = set()\n\n    # Utility: remove from constraints those variables that are known safe or known mine.\n    # If a variable is known mine, decrement that constraint's value by 1 for each such var.\n    def propagate_knowledge(constraints_list, safes, mines):\n        new_constraints = []\n        changed_local = False\n        for (vars_set, val) in constraints_list:\n            # Count how many known mines are in this constraint\n            mines_in_current = len(vars_set.intersection(mines))\n            safes_in_current = len(vars_set.intersection(safes))\n            if mines_in_current > 0 or safes_in_current > 0:\n                changed_local = True\n            # Remove all known variables\n            new_set = vars_set - safes - mines\n            new_val = val - mines_in_current\n            # If new_val could become negative if there's an inconsistency,\n            # but the puzzle does not address contradiction handling, so we proceed.\n            new_constraints.append((new_set, new_val))\n        return new_constraints, changed_local\n\n    # Apply the \"solved constraints\" rule:\n    # If value == 0, all variables in that constraint are safe.\n    # If value == size of set, all variables in that constraint are mines.\n    def solved_constraints(constraints_list):\n        discovered_safes = set()\n        discovered_mines = set()\n        for (vars_set, val) in constraints_list:\n            if len(vars_set) > 0:\n                if val == 0:\n                    # All variables are safe\n                    discovered_safes.update(vars_set)\n                elif val == len(vars_set):\n                    # All variables are mines\n                    discovered_mines.update(vars_set)\n        return discovered_safes, discovered_mines\n\n    # Apply the \"subset rule\":\n    # If S1 \u2282 S2 for constraints (S1, v1) and (S2, v2),\n    # then we replace (S2, v2) by (S2 \\ S1, v2 \u2212 v1).\n    # We do this repeatedly until no more changes.\n    def apply_subset_rule(constraints_list):\n        changed_local = True\n        # We'll loop until no further subset changes occur\n        # because applying the subset rule can create new sets that might again be subsets.\n        constraints_work = list(constraints_list)\n        while True:\n            did_change = False\n            new_constraints = []\n            # We'll process from left to right, but since we might replace one constraint,\n            # it's easier to do a nested loop approach. Whenever a subset is found,\n            # we transform the bigger set, and we keep going. We might have duplicates after.\n            # We'll store the constraints in a list, and do pairwise checks.\n            n = len(constraints_work)\n            for i in range(n):\n                s1, v1 = constraints_work[i]\n                changed_this_round = False\n                # We'll try to see if s1 is a strict subset of any s2\n                # We'll do that by looping j > i, plus also check the other direction,\n                # because we don't know which is subset of which.\n                for j in range(n):\n                    if i == j:\n                        continue\n                    s2, v2 = constraints_work[j]\n                    if s1 and s1 < s2:  # s1 is a strict subset of s2\n                        # Replace constraint j by (s2 - s1, v2 - v1)\n                        new_s2 = s2 - s1\n                        new_v2 = v2 - v1\n                        constraints_work[j] = (new_s2, new_v2)\n                        did_change = True\n                        changed_this_round = True\n                    elif s2 and s2 < s1:  # s2 is a strict subset of s1\n                        # Replace constraint i by (s1 - s2, v1 - v2)\n                        new_s1 = s1 - s2\n                        new_v1 = v1 - v2\n                        constraints_work[i] = (new_s1, new_v1)\n                        did_change = True\n                        changed_this_round = True\n                # If we changed constraint i in the loop, we don't immediately remove it,\n                # we keep going. The final pass of duplicates removal will keep them consistent.\n            if not did_change:\n                break\n            # If we did change, we should keep that updated constraints_work and loop again\n        return constraints_work, (changed_local if did_change else False)\n\n    # Remove duplicates (same set and value). Keep only unique ones.\n    def remove_duplicates(constraints_list):\n        seen = set()\n        new_constraints = []\n        changed_local = False\n        for (s, v) in constraints_list:\n            if (s, v) not in seen:\n                seen.add((s, v))\n                new_constraints.append((s, v))\n            else:\n                changed_local = True\n        return new_constraints, changed_local\n\n    constraints_current = processed\n    changed = True\n\n    # Repeatedly apply the rules until no more changes.\n    while changed:\n        changed = False\n\n        # 1) Solved constraints\n        safes_found, mines_found = solved_constraints(constraints_current)\n        # Only record newly discovered\n        new_safes = safes_found - known_safes - known_mines\n        new_mines = mines_found - known_safes - known_mines\n        if new_safes or new_mines:\n            changed = True\n            known_safes.update(new_safes)\n            known_mines.update(new_mines)\n\n        # 2) Propagation of knowledge\n        constraints_current, local_changed = propagate_knowledge(\n            constraints_current, known_safes, known_mines\n        )\n        if local_changed:\n            changed = True\n\n        # 1) (again) after propagation, we might have new solved constraints\n        safes_found, mines_found = solved_constraints(constraints_current)\n        new_safes = safes_found - known_safes - known_mines\n        new_mines = mines_found - known_safes - known_mines\n        if new_safes or new_mines:\n            changed = True\n            known_safes.update(new_safes)\n            known_mines.update(new_mines)\n            # propagate once more\n            constraints_current, local_changed = propagate_knowledge(\n                constraints_current, known_safes, known_mines\n            )\n            if local_changed:\n                changed = True\n\n        # 3) Subset rule\n        constraints_current, local_changed = apply_subset_rule(constraints_current)\n        if local_changed:\n            changed = True\n            # After subset rule, we might want to apply \"solved constraints\" again\n            safes_found, mines_found = solved_constraints(constraints_current)\n            new_safes = safes_found - known_safes - known_mines\n            new_mines = mines_found - known_safes - known_mines\n            if new_safes or new_mines:\n                changed = True\n                known_safes.update(new_safes)\n                known_mines.update(new_mines)\n                # propagate\n                constraints_current, local_changed = propagate_knowledge(\n                    constraints_current, known_safes, known_mines\n                )\n                if local_changed:\n                    changed = True\n\n        # 4) Duplicate removal\n        constraints_current, local_changed = remove_duplicates(constraints_current)\n        if local_changed:\n            changed = True\n\n    # At the end, known_safes and known_mines hold all definitively known statuses.\n    safe_list = sorted(known_safes)\n    mines_list = sorted(known_mines)\n\n    # If no info was deduced for any variable, both could be empty. That's valid.\n    return (safe_list, mines_list)"}
{"task_id": 594, "completion_id": 0, "completion": "def maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall. Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates. Walls are not included in\n        the dictionary. If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    if not maze:  # Handle empty maze\n        return {}\n    \n    rows = len(maze)\n    cols = len(maze[0]) if rows else 0\n    \n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    graph = {}\n    \n    # First, initialize all open cells as keys in the dictionary.\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 0:\n                graph[(r, c)] = []\n    \n    # Now fill in adjacency information.\n    for (r, c) in graph.keys():\n        neighbors = []\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] == 0:\n                neighbors.append((nr, nc))\n        \n        # Sort neighbors (lexicographically by (row, col)) to ensure deterministic output.\n        graph[(r, c)] = sorted(neighbors)\n    \n    return graph"}
{"task_id": 595, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    K-Means Clustering \u2013 Compute Centroids Only (from scratch).\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        A 2D NumPy array of shape (n_samples, n_features).\n    k : int\n        Number of clusters (and hence number of centroids).\n    max_iters : int, optional\n        Maximum number of iterations for the K-Means algorithm (default = 100).\n    \n    Returns:\n    --------\n    list[list[float]]\n        The final centroids as a list of lists, each coordinate rounded to 4 decimals,\n        and sorted in ascending lexicographical order.\n    \"\"\"\n\n    # 1. Initialize centroids with the first k samples\n    centroids = X[:k].copy()  # shape: (k, n_features)\n\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n\n        # 2a. Assign each sample to the nearest centroid using squared Euclidean distance\n        # distances: shape (n_samples, k)\n        distances = np.sum((X[:, None] - centroids[None, :]) ** 2, axis=2)\n        # cluster_assignments: shape (n_samples,)\n        cluster_assignments = np.argmin(distances, axis=1)\n\n        # 2b. Update each centroid to the mean of assigned points\n        for cluster_idx in range(k):\n            # Get the samples assigned to this cluster\n            samples_in_cluster = X[cluster_assignments == cluster_idx]\n            # If a cluster has no points, keep its centroid unchanged\n            if len(samples_in_cluster) > 0:\n                centroids[cluster_idx] = np.mean(samples_in_cluster, axis=0)\n\n        # 3. Check for convergence (stop if all centroids moved < 1e-4)\n        centroid_shifts = np.linalg.norm(centroids - old_centroids, axis=1)\n        if np.all(centroid_shifts < 1e-4):\n            break\n\n    # 4. Sort the centroids in ascending lexicographical order\n    centroids_sorted = sorted(centroids, key=lambda c: tuple(c))\n\n    # 5. Round each coordinate to 4 decimal places and convert to regular Python list\n    final_centroids = [[round(coord, 4) for coord in c] for c in centroids_sorted]\n\n    return final_centroids"}
{"task_id": 596, "completion_id": 0, "completion": "import numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"\n    Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall. Treat every free cell as a graph vertex. Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    (row, col) to a **sorted** list of its adjacent free neighbours. If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    adjacency_list = {}\n    rows, cols = maze.shape\n\n    # First, collect all free cells.\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r, c] == 1:\n                # Each free cell starts with an empty neighbor list\n                adjacency_list[(r, c)] = []\n\n    # Next, for each free cell, look up, down, left, and right for neighbors.\n    for (r, c) in adjacency_list:\n        for dr, dc in [( -1, 0 ), ( 1, 0 ), ( 0, -1 ), ( 0, 1 )]:\n            nr, nc = r + dr, c + dc\n            # If neighbor is within the dictionary, it is a free cell.\n            if (nr, nc) in adjacency_list:\n                adjacency_list[(r, c)].append((nr, nc))\n        # Sort the neighbor list to satisfy ascending lexicographic order\n        adjacency_list[(r, c)].sort()\n\n    return adjacency_list"}
{"task_id": 597, "completion_id": 0, "completion": "import numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"\n    Return the best (feature, threshold) split for a regression tree, measured\n    by the weighted MSE (using population variance).\n\n    Only thresholds that coincide with an existing feature value are examined.\n\n    The function returns [best_feature_index, best_threshold, best_mse]\n    where `best_mse` is rounded to 4 decimal places.\n    \"\"\"\n    # Convert X and y to numpy arrays (in case they aren't already)\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float)\n    \n    n_samples, n_features = X.shape\n    \n    # Keep track of the best split found\n    best_mse = float('inf')\n    best_feature_index = None\n    best_threshold = None\n    \n    # Total number of samples\n    n = float(n_samples)\n    \n    for j in range(n_features):\n        # Extract the j-th feature\n        feature_values = X[:, j]\n        # Consider only thresholds that appear as actual values in this feature\n        unique_thresholds = np.unique(feature_values)\n        \n        for t in unique_thresholds:\n            # Split into left/right subsets\n            left_mask = feature_values <= t\n            right_mask = ~left_mask  # feature_values > t\n            \n            # Skip invalid splits (where one side is empty)\n            n_left = np.sum(left_mask)\n            n_right = n_samples - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            \n            # Compute population variance on left subset\n            y_left = y[left_mask]\n            var_left = np.var(y_left, ddof=0)  # population variance\n            \n            # Compute population variance on right subset\n            y_right = y[right_mask]\n            var_right = np.var(y_right, ddof=0)  # population variance\n            \n            # Weighted MSE\n            weighted_mse = (n_left / n) * var_left + (n_right / n) * var_right\n            \n            # Check if this is the best so far\n            if weighted_mse < best_mse:\n                best_mse = weighted_mse\n                best_feature_index = j\n                best_threshold = t\n            elif np.isclose(weighted_mse, best_mse, atol=1e-12):\n                # Tie-breaking: if feature is smaller, or\n                # same feature but threshold is smaller\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = t\n                elif j == best_feature_index and t < best_threshold:\n                    best_threshold = t\n    \n    # Round MSE to 4 decimal places\n    best_mse_rounded = round(best_mse, 4)\n    return [best_feature_index, best_threshold, best_mse_rounded]"}
{"task_id": 598, "completion_id": 0, "completion": "import numpy as np\n\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"\n    Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    # Convert to numpy array for vectorized operations\n    arr = np.array(data, dtype=np.float64)\n    \n    # Compute mean and standard deviation per column (ddof=0 for population std)\n    means = np.mean(arr, axis=0)\n    stds = np.std(arr, axis=0, ddof=0)\n    \n    # Standardize each feature column-wise\n    for i in range(arr.shape[1]):\n        if stds[i] == 0:\n            # Constant column -> fill with 0\n            arr[:, i] = 0\n        else:\n            # z-score standardization\n            arr[:, i] = (arr[:, i] - means[i]) / stds[i]\n    \n    # Replace NaN or infinite values with 0\n    arr = np.nan_to_num(arr, nan=0.0, posinf=0.0, neginf=0.0)\n    \n    # Round to 4 decimals\n    arr = np.round(arr, 4)\n    \n    # Convert back to a Python list of lists\n    return arr.tolist()"}
