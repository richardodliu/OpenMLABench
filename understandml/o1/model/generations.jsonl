{"task_id": 0, "completion_id": 0, "completion": "import numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularized) Linear Regression using its closed-form solution:\n    \n        w_hat = (X^T X + alpha * I)^{-1} X^T y\n    \n    where:\n      - The last column of `data` is the target (y).\n      - All preceding columns are features (X).\n      - A column of ones is added to X for the intercept.\n      - alpha >= 0 is the regularization strength.\n      - If (X^T X + alpha * I) is not invertible, returns -1.\n\n    Parameters:\n    -----------\n    data : np.ndarray\n        2D array with shape (n_samples, n_features + 1).\n        The last column is the target values.\n        The other columns are the features.\n    alpha : float\n        Regularization parameter (alpha >= 0).\n\n    Returns:\n    --------\n    list[float]\n        The weight vector (including intercept) rounded to 4 decimal places as a Python list.\n        If the matrix is singular, returns -1.\n    \"\"\"\n    # Separate features (X) and target (y)\n    X = data[:, :-1]  # All columns except the last\n    y = data[:, -1]   # Last column\n\n    # Add a bias (intercept) column of ones to X\n    n_samples = X.shape[0]\n    Xb = np.hstack([X, np.ones((n_samples, 1))])  # (n_samples, n_features+1)\n\n    # Construct the matrix to invert\n    A = Xb.T @ Xb + alpha * np.eye(Xb.shape[1])\n\n    # Check invertibility / attempt inversion\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        return -1  # Not invertible numerically\n\n    # Compute the weights\n    w = A_inv @ Xb.T @ y\n\n    # Round to 4 decimal places and return as list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 1, "completion_id": 0, "completion": "import numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    \n    # 1. Initialize alpha and b\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Precompute the Gram matrix: K[i, j] = X_train[i] \u22c5 X_train[j]\n    K = X_train @ X_train.T\n    \n    updates = 0  # count how many updates so far\n    \n    while True:\n        any_update = False\n        # 2. Scan the samples in order\n        for i in range(n_samples):\n            # 3. Compute the activation\n            activation = np.dot(alpha * y_train, K[:, i])\n            margin = y_train[i] * (activation + b)\n            \n            # 4. Misclassification check\n            if margin <= 0:\n                # update alpha[i] and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                any_update = True\n                \n                # stop if we exceed the allowed number of updates\n                if updates >= n_iter:\n                    break\n        \n        # if no update in a full pass or we exceeded n_iter, stop\n        if not any_update or updates >= n_iter:\n            break\n    \n    # 6. Compute the primal weight vector w\n    w = np.zeros(n_features)\n    for i in range(n_samples):\n        w += alpha[i] * y_train[i] * X_train[i]\n    \n    # Round results\n    w_rounded = list(np.round(w, 4))\n    b_rounded = float(np.round(b, 4))\n    \n    return w_rounded, b_rounded"}
{"task_id": 2, "completion_id": 0, "completion": "import numpy as np\n\ndef glm_links():\n    \"\"\"\n    Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n\n    Example\n    -------\n    >>> links = glm_links()\n    >>> mu  = np.array([0.2, 0.8])\n    >>> eta = links[\"logit\"][\"link\"](mu) \n    >>> # eta ~ [-1.38629436, 1.38629436] -> rounded to [-1.3863, 1.3863]\n    >>> np.round(eta, 4)\n    array([-1.3863,  1.3863])\n    >>> mu2 = links[\"logit\"][\"inv_link\"](eta)  \n    >>> # mu2 ~ [0.2, 0.8]\n    >>> np.round(mu2, 4)\n    array([0.2, 0.8])\n    \"\"\"\n    return {\n        \"identity\": {\n            \"link\": lambda mu: mu,\n            \"inv_link\": lambda eta: eta,\n            \"derivative\": lambda mu: np.ones_like(mu, dtype=float),\n        },\n        \"log\": {\n            \"link\": np.log,\n            \"inv_link\": np.exp,\n            \"derivative\": lambda mu: 1.0 / mu,\n        },\n        \"logit\": {\n            \"link\": lambda mu: np.log(mu / (1.0 - mu)),\n            \"inv_link\": lambda eta: 1.0 / (1.0 + np.exp(-eta)),\n            \"derivative\": lambda mu: 1.0 / (mu * (1.0 - mu)),\n        },\n    }"}
{"task_id": 3, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    # Ensure data is at least 2D\n    n_samples, n_features = data.shape\n\n    # This will store the depth for each sample\n    depths = [0] * n_samples\n\n    # Recursive helper function to build the tree and assign depths\n    def build_tree(indices, depth):\n        # Leaf if fewer than 3 samples\n        if len(indices) < 3:\n            for idx in indices:\n                depths[idx] = depth\n            return\n\n        # Randomly pick a feature to split\n        f = np.random.randint(n_features)\n        # Determine the range [down, up] along this feature\n        down, up = np.min(data[indices, f]), np.max(data[indices, f])\n\n        # If all values are the same, we cannot split; treat as leaf\n        if down == up:\n            for idx in indices:\n                depths[idx] = depth\n            return\n\n        # Pick split value uniformly\n        v = np.random.uniform(down, up)\n\n        # Partition samples to left or right\n        left_indices = []\n        right_indices = []\n        for idx in indices:\n            if data[idx, f] <= v:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n\n        # Recurse\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n\n    # Fix the seed for reproducibility before any random operations\n    np.random.seed(0)\n\n    # Build the isolation tree starting from all samples at depth 0\n    build_tree(list(range(n_samples)), 0)\n\n    return depths"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n\n    # Convert each transaction to a set to remove duplicates\n    transactions = [set(t) for t in transactions]\n    N = len(transactions)\n\n    # Compute minimum absolute support\n    min_support = math.ceil(minsup * N)\n    if min_support <= 0:\n        return {}\n\n    # ------------------------------------------------------------------------\n    # 1. Find all 1-item frequent sets\n    # ------------------------------------------------------------------------\n    item_counts = Counter()\n    for t in transactions:\n        for item in t:\n            item_counts[item] += 1\n\n    # Keep only frequent 1-itemsets\n    L1 = []\n    freq_itemsets = {}\n    for item, count in item_counts.items():\n        if count >= min_support:\n            # Store as a tuple of length 1\n            itemset_tuple = (item,)\n            freq_itemsets[itemset_tuple] = count\n            L1.append(itemset_tuple)\n\n    # Sort for consistent ordering\n    L1.sort()\n\n    # ------------------------------------------------------------------------\n    # 2. Iteratively build frequent k-itemsets using the Apriori principle\n    # ------------------------------------------------------------------------\n    Lk = L1  # Current list of frequent itemsets of size k\n    k = 2    # We'll move from k=1 to k=2, etc.\n\n    while Lk:\n        # Generate candidate itemsets of size k from the frequent (k-1)-itemsets\n        Ck = []\n        Lk_set = set(Lk)  # For quick membership checking\n\n        for i in range(len(Lk)):\n            for j in range(i + 1, len(Lk)):\n                p = Lk[i]\n                q = Lk[j]\n                # Check if the first k-2 items are the same\n                if p[:k - 2] == q[:k - 2]:\n                    # Candidate is the union of p and q\n                    candidate = tuple(sorted(set(p).union(q)))\n                    # Only consider it if it truly forms a length-k itemset\n                    if len(candidate) == k:\n                        # Apriori pruning: all (k-1)-subsets of 'candidate' must be in Lk\n                        all_subsets_frequent = True\n                        for subset in combinations(candidate, k - 1):\n                            if tuple(sorted(subset)) not in Lk_set:\n                                all_subsets_frequent = False\n                                break\n                        if all_subsets_frequent:\n                            Ck.append(candidate)\n                else:\n                    # Since Lk is sorted, once p[:k-2] != q[:k-2], future j won't match p\n                    break\n\n        # Count support for each candidate in Ck by scanning transactions\n        candidate_count = Counter()\n        for t in transactions:\n            for c in Ck:\n                if set(c).issubset(t):\n                    candidate_count[c] += 1\n\n        # Filter out candidates that are not frequent\n        Lk_new = []\n        for c in Ck:\n            if candidate_count[c] >= min_support:\n                freq_itemsets[c] = candidate_count[c]\n                Lk_new.append(c)\n\n        # Sort and prepare for next iteration\n        Lk_new.sort()\n        Lk = Lk_new\n        k += 1\n\n    return freq_itemsets\n```\n\nExplanation of the main steps:\n\n1. Convert each transaction to a set to remove duplicates within the same transaction.  \n2. Compute the minimum absolute support as math.ceil(minsup \u00d7 N).  \n3. Identify 1-item frequent sets by counting each item\u2019s support and retaining those above the threshold.  \n4. Apply the Apriori algorithm iteratively:  \n   \u2022 Generate candidates of size k by joining frequent (k\u22121)-itemsets that share the first k\u22122 items.  \n   \u2022 Prune candidates whose any (k\u22121)-subset is not frequent.  \n   \u2022 Count support of each candidate in a scan over the transactions.  \n   \u2022 Retain only those candidates meeting the minimum absolute support.  \n5. Collect all frequent itemsets in a dictionary mapping the sorted tuple of items to its support count.  \n6. Return the dictionary (or an empty dictionary if no itemsets are frequent)."}
{"task_id": 11, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the cluster centres with the first k samples\n    centers = data[:k].astype(float).copy()\n\n    n_samples = data.shape[0]\n\n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre (using squared Euclidean distance)\n        # distances will be an array of shape (n_samples, k)\n        # distance[i,j] = sum over features of (data[i] - centers[j])^2\n        distances = np.sum((data[:, None] - centers[None, :]) ** 2, axis=2)\n        cluster_assignments = np.argmin(distances, axis=1)\n\n        # Step 3: Compute new centres as the mean of samples assigned to each cluster\n        new_centers = np.zeros_like(centers)\n        for cluster_idx in range(k):\n            # Find all samples currently assigned to cluster cluster_idx\n            indices = np.where(cluster_assignments == cluster_idx)[0]\n            if len(indices) == 0:\n                # Step 3 (empty cluster): re-initialize its centre with a random sample\n                new_centers[cluster_idx] = data[np.random.randint(n_samples)]\n            else:\n                # Mean of all samples assigned to this cluster\n                new_centers[cluster_idx] = np.mean(data[indices], axis=0)\n\n        # Step 4: Check for convergence by comparing maximum centre movement\n        shift = np.sqrt(np.sum((centers - new_centers) ** 2, axis=1)).max()\n        centers = new_centers\n        if shift < epsilon:\n            break\n\n    # Round centres to 4 decimal places as required\n    centers_rounded = np.round(centers, 4).tolist()\n\n    return centers_rounded, cluster_assignments.tolist()"}
{"task_id": 13, "completion_id": 0, "completion": "import numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"\n    Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and then predicts\n    the attractiveness of every yet unrated item for the specified user.\n    It finally returns the indices of the k most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either 'cosine' (default) or 'pearson'.\n\n    Returns\n    -------\n    list[int]\n        A list with at most k item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n\n    # --- 1. Build the item\u2013item similarity matrix S ---\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item), dtype=np.float64)\n\n    # Helper function: mean-center a vector only if its std > 1e-3\n    def maybe_mean_center(v: np.ndarray) -> np.ndarray:\n        if np.std(v) > 1e-3:\n            return v - np.mean(v)\n        return v\n\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users that rated both items i and j\n            mask = (data[:, i] > 0) & (data[:, j] > 0)\n            if not np.any(mask):\n                # No common users => similarity is 0\n                continue\n\n            v1 = data[mask, i]\n            v2 = data[mask, j]\n\n            if criterion == 'cosine':\n                # Possibly mean-center each vector (if std > 1e-3), then compute cosine\n                v1c = maybe_mean_center(v1)\n                v2c = maybe_mean_center(v2)\n                denom = np.linalg.norm(v1c) * np.linalg.norm(v2c)\n                sim = (np.dot(v1c, v2c) / denom) if denom > 1e-12 else 0.0\n            else:\n                # Pearson correlation\n                sim = np.corrcoef(v1, v2)[0, 1]\n\n            S[i, j] = sim\n            S[j, i] = sim\n\n    # --- 2. Collect indices of the items that the active user has rated ---\n    user_ratings = data[user_ind, :]\n    rated_items = np.where(user_ratings > 0)[0]\n\n    # If the user has already rated all items, return empty list\n    if len(rated_items) == n_item:\n        return []\n\n    # --- 3. For every yet unrated item compute the predicted attractiveness ---\n    unrated_items = np.where(user_ratings == 0)[0]\n    scores = {}\n\n    for t in unrated_items:\n        # Denominator = sum of absolute similarities to the items the user has rated\n        denom = np.sum(np.abs(S[t, rated_items]))\n        if denom < 1e-12:\n            # Avoid division by zero => score is defined to be 0\n            scores[t] = 0.0\n        else:\n            # Weighted sum of the user's ratings by similarity to item t\n            num = np.sum(user_ratings[rated_items] * S[t, rated_items])\n            scores[t] = num / denom\n\n    # --- 4. Sort by decreasing score; ties by ascending item index ---\n    # Using a compound sort key: first -score for descending, then item index\n    sorted_items = sorted(scores.keys(), key=lambda itm: (-scores[itm], itm))\n\n    # --- 5. Return the top k items ---\n    return sorted_items[:k]"}
{"task_id": 19, "completion_id": 0, "completion": "import numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n\n    # Sum of gradients and Hessians of all training instances in this node\n    G_total = np.sum(g)\n    H_total = np.sum(h)\n\n    # Parent node's loss\n    parent_loss = -0.5 * (G_total ** 2) / (H_total + lam) + gamma\n\n    best_gain = 0.0\n    best_feature, best_threshold = None, None\n\n    n_samples, n_features = X.shape\n\n    for feature_index in range(n_features):\n        # Sort data along this feature\n        sort_idx = np.argsort(X[:, feature_index])\n        sorted_feature_values = X[sort_idx, feature_index]\n        sorted_g = g[sort_idx]\n        sorted_h = h[sort_idx]\n\n        # Cumulative sums for quick left/right calculations\n        G_left_cumsum = np.cumsum(sorted_g)\n        H_left_cumsum = np.cumsum(sorted_h)\n\n        # Evaluate all possible split points (unique feature values)\n        for i in range(n_samples - 1):\n            # Skip threshold if it's not between distinct feature values\n            if sorted_feature_values[i] == sorted_feature_values[i + 1]:\n                continue\n\n            left_size = i + 1\n            right_size = n_samples - left_size\n\n            # Enforce at least two samples on each side\n            if left_size < 2 or right_size < 2:\n                continue\n\n            # Compute sums for the left and right children\n            G_left = G_left_cumsum[i]\n            H_left = H_left_cumsum[i]\n            G_right = G_total - G_left\n            H_right = H_total - H_left\n\n            # Compute left and right child losses\n            left_loss = -0.5 * (G_left ** 2) / (H_left + lam) + gamma\n            right_loss = -0.5 * (G_right ** 2) / (H_right + lam) + gamma\n\n            # Gain is parent's loss minus sum of children losses\n            gain = parent_loss - (left_loss + right_loss)\n\n            if gain > best_gain:\n                best_gain = gain\n                # Use the current feature value as threshold; left <= threshold\n                best_feature = feature_index\n                best_threshold = sorted_feature_values[i]\n\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Define the sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    \n    # Check if x is a scalar\n    if isinstance(x, (int, float)):\n        s = sigmoid(x)\n        grad = s * (1 - s)\n        return round(s, 4), round(grad, 4)\n    else:\n        # Convert x to a NumPy array\n        x_arr = np.array(x, dtype=float)\n        \n        s = sigmoid(x_arr)\n        grad = s * (1 - s)\n        \n        # Round results to 4 decimals\n        s_rounded = np.round(s, 4)\n        grad_rounded = np.round(grad, 4)\n        \n        # Convert to Python list\n        return s_rounded.tolist(), grad_rounded.tolist()"}
{"task_id": 21, "completion_id": 0, "completion": "import numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble (with decision stumps) and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # --------------------------------------------------------------------------\n    # Helper functions\n    # --------------------------------------------------------------------------\n    def stump_predict(d, theta, x_val):\n        \"\"\"Predict using a single stump defined by (d, theta).\"\"\"\n        if d == 0:\n            # +1 if x <= theta, -1 otherwise\n            return 1 if x_val <= theta else -1\n        else:\n            # +1 if x > theta, -1 otherwise\n            return 1 if x_val > theta else -1\n\n    def sign_with_tie_as_positive(value):\n        \"\"\"Sign function that returns 1 if value >= 0, else -1.\"\"\"\n        return 1 if value >= 0 else -1\n\n    # --------------------------------------------------------------------------\n    # Convert to NumPy arrays for convenience\n    # --------------------------------------------------------------------------\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    n = len(x_train)\n\n    # --------------------------------------------------------------------------\n    # Initialize sample weights uniformly\n    # --------------------------------------------------------------------------\n    w = np.ones(n) / n\n\n    # --------------------------------------------------------------------------\n    # Create all possible thresholds by sorting x_train\n    # --------------------------------------------------------------------------\n    sorted_indices = np.argsort(x_train)\n    sorted_x = x_train[sorted_indices]\n\n    # Possible thresholds: midpoints between consecutive distinct sorted_x\n    thresholds = []\n    for i in range(n - 1):\n        if sorted_x[i] != sorted_x[i + 1]:\n            mid = 0.5 * (sorted_x[i] + sorted_x[i + 1])\n            thresholds.append(mid)\n\n    # If all points are identical, we can still train a stump with (threshold < or > that point)\n    if len(thresholds) == 0:\n        # All x are the same; pick any threshold since all stumps behave the same\n        thresholds = [sorted_x[0]]\n\n    # --------------------------------------------------------------------------\n    # Store the ensemble of (d, theta, alpha)\n    # --------------------------------------------------------------------------\n    ensemble = []\n\n    # --------------------------------------------------------------------------\n    # Iterative AdaBoost\n    # --------------------------------------------------------------------------\n    while True:\n        # 1) Pick the best stump given current weights w\n        best_threshold = None\n        best_d = None\n        best_error = float(\"inf\")\n        best_predictions = None\n\n        # Check each threshold and each d in {0,1}\n        for theta in thresholds:\n            for d in [0, 1]:\n                # Compute weighted error\n                # pred[i] = stump_predict(d, theta, x_train[i])\n                preds = np.array([stump_predict(d, theta, x_val) for x_val in x_train])\n                misclassified = (preds != y_train)\n                error = np.sum(w[misclassified])\n\n                # Keep track of the best stump\n                if error < best_error:\n                    best_error = error\n                    best_threshold = theta\n                    best_d = d\n                    best_predictions = preds\n\n        # If the stump perfectly separates (error=0), we can stop early\n        if best_error <= 1e-15:\n            # alpha can be very large, but one perfectly separating stump\n            # is enough to get 0 training error\n            alpha = 0.5 * math.log((1.0 - 1e-15) / 1e-15)\n            ensemble.append((best_d, best_threshold, alpha))\n            break\n\n        # 2) Compute alpha\n        alpha = 0.5 * math.log((1.0 - best_error) / best_error)\n\n        # 3) Update the weights\n        # w[i] <- w[i]*exp(-alpha*y[i]*h(x[i])) and then normalize\n        w *= np.exp(-alpha * y_train * best_predictions)\n        w /= np.sum(w)\n\n        # 4) Add the selected stump to the ensemble\n        ensemble.append((best_d, best_threshold, alpha))\n\n        # 5) Check the training error of the current ensemble\n        #    training error = fraction of misclassified training points\n        #    by sign( sum_{j} alpha_j * stump_j(x) )\n        agg_pred = np.zeros(n)\n        for (d_j, theta_j, alpha_j) in ensemble:\n            preds_j = np.array([stump_predict(d_j, theta_j, x_val) for x_val in x_train])\n            agg_pred += alpha_j * preds_j\n\n        final_pred_train = np.array([sign_with_tie_as_positive(v) for v in agg_pred])\n        training_error = np.mean(final_pred_train != y_train)\n\n        if training_error <= epsilon:\n            break\n\n    # --------------------------------------------------------------------------\n    # Use the trained ensemble to predict x_test\n    # --------------------------------------------------------------------------\n    x_test = np.array(x_test, dtype=float)\n    agg_pred_test = np.zeros(len(x_test))\n\n    for (d_j, theta_j, alpha_j) in ensemble:\n        test_preds_j = np.array([stump_predict(d_j, theta_j, x_val) for x_val in x_test])\n        agg_pred_test += alpha_j * test_preds_j\n\n    final_pred_test = [sign_with_tie_as_positive(v) for v in agg_pred_test]\n\n    # Convert each prediction to int (1 or -1)\n    return [int(p) for p in final_pred_test]"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : np.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : np.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : np.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n\n    # Combine alpha and y once, as they always appear in a product\n    alpha_y = alpha * y_train  # shape (n,)\n\n    # Compute pairwise squared distances between X_test and X_train\n    # Shape: (m, n) after broadcasting\n    diff = X_test[:, np.newaxis, :] - X_train[np.newaxis, :, :]\n    sq_dist = np.sum(diff * diff, axis=2)\n\n    # Compute the RBF kernel values for each pair\n    kernel_matrix = np.exp(-gamma * sq_dist)  # shape (m, n)\n\n    # Compute the decision function g(z) = sum_i(alpha_i * y_i * k(x_i, z)) + b\n    decision_values = kernel_matrix @ alpha_y + b  # shape (m,)\n\n    # Convert sign of decision values into predictions of +1 or -1\n    # np.sign(0) is 0, so we make 0 -> 1 to match the usual SVM convention\n    predictions = np.where(decision_values >= 0, 1, -1)\n\n    # Convert to Python list of int\n    return predictions.astype(int).tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both values are\n        rounded to four decimals. If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert X to a NumPy array\n    X_np = np.array(X, dtype=float)\n    m, n = X_np.shape\n    \n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Compute the SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Keep only the first k singular values\n    U_k = U[:, :k]            # Shape (m, k)\n    s_k = s[:k]               # Shape (k,)\n    Vt_k = Vt[:k, :]          # Shape (k, n)\n    \n    # Construct the rank-k approximation\n    S_k = np.diag(s_k)        # Shape (k, k)\n    X_hat_np = U_k @ S_k @ Vt_k  # Shape (m, n)\n    \n    # Compute the MSE\n    mse = np.mean((X_np - X_hat_np)**2)\n    \n    # Round and convert X_hat to list of lists\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    \n    # Round the MSE\n    mse_rounded = round(mse, 4)\n    \n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "completion": "import numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive x_train values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than epsilon.  \n    3. Return the prediction for x_query obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as x_train).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for x_query, rounded to\n        four decimal places.\n    \"\"\"\n\n    # Convert inputs to arrays and sort by x\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    sort_idx = np.argsort(x_train)\n    x_sorted = x_train[sort_idx]\n    y_sorted = y_train[sort_idx]\n\n    # Compute initial residual (model starts as 0 prediction)\n    residual = y_sorted.copy()\n\n    # Generate all candidate split points: midpoints between consecutive distinct x's\n    unique_x = np.unique(x_sorted)\n    candidate_splits = []\n    for i in range(len(unique_x) - 1):\n        # Midpoint between consecutive distinct values\n        s = 0.5 * (unique_x[i] + unique_x[i+1])\n        candidate_splits.append(s)\n\n    # We will store each learnt stump as (split_value, c1, c2)\n    stumps = []\n\n    # Safety limit on iterations to avoid infinite loops if epsilon is hard to reach\n    max_iters = 1000\n    iter_count = 0\n\n    # Iteratively add stumps until residual sum of squares < epsilon or max_iters reached\n    while iter_count < max_iters:\n        iter_count += 1\n        current_rss = np.sum(residual ** 2)\n        if current_rss < epsilon:\n            break  # Residual is already small enough\n\n        best_rss = float('inf')\n        best_s = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n\n        # If no candidate splits exist (e.g. all x are identical), we cannot split\n        # A single \"constant-only\" stump will remove the mean from the residual\n        # (but will not remove variance). In practice, repeated additions won't\n        # clean up variance further, but we do at least one fit to remove the mean.\n        if len(candidate_splits) == 0:\n            c_mean = np.mean(residual)\n            # Compute RSS after subtracting this mean everywhere\n            new_rss = np.sum((residual - c_mean) ** 2)\n            if new_rss < best_rss:\n                best_rss = new_rss\n                best_s = x_sorted[-1] + 1.0  # a split that puts all data on the left\n                best_c1 = c_mean\n                best_c2 = 0.0\n        else:\n            # Search over all candidate splits\n            for s in candidate_splits:\n                # Find the cutoff index such that x_sorted[:idx+1] <= s\n                idx = np.searchsorted(x_sorted, s, side='right') - 1\n                # Left side: up to idx inclusive, right side: idx+1 onward\n                left_res = residual[:idx+1]\n                right_res = residual[idx+1:]\n\n                # Compute means for left and right sides\n                if len(left_res) > 0:\n                    c1 = np.mean(left_res)\n                else:\n                    c1 = 0.0  # no points on left, arbitrary\n\n                if len(right_res) > 0:\n                    c2 = np.mean(right_res)\n                else:\n                    c2 = 0.0  # no points on right, arbitrary\n\n                # Compute the RSS if we add this stump\n                rss_left = np.sum((left_res - c1) ** 2)\n                rss_right = np.sum((right_res - c2) ** 2)\n                rss_total = rss_left + rss_right\n\n                if rss_total < best_rss:\n                    best_rss = rss_total\n                    best_s = s\n                    best_c1 = c1\n                    best_c2 = c2\n\n        # Add the best stump to the ensemble and update residual\n        stumps.append((best_s, best_c1, best_c2))\n        # Update residual using the best stump found\n        idx = np.searchsorted(x_sorted, best_s, side='right') - 1\n        residual[:idx+1] -= best_c1\n        residual[idx+1:] -= best_c2\n\n        # If this new RSS is good enough, we can stop\n        if best_rss < epsilon:\n            break\n\n    # Once we have our list of stumps, predict for x_query by summing contributions\n    prediction = 0.0\n    for (s, c1, c2) in stumps:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n\n    return float(f\"{prediction:.4f}\")"}
{"task_id": 34, "completion_id": 0, "completion": "import numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a random binary tensor of the specified shape,\n    filled with 0.0 and 1.0. Each entry is 1.0 with probability\n    equal to 'sparsity' and 0.0 otherwise.\n\n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        The probability of an element being 1.0. Must be in [0, 1].\n    seed : int or None, optional\n        A random seed for reproducible results. If None, the global\n        NumPy RNG state is used.\n\n    Returns\n    -------\n    numpy.ndarray or int\n        A float dtype NumPy array of 0.0 and 1.0 if 'sparsity' is valid,\n        otherwise returns -1.\n    \"\"\"\n    # 1) Validate the sparsity range\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    # 2) If a seed is provided, use it for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # 3) Generate uniform random values\n    rand_vals = np.random.rand(*shape)\n\n    # 4) Determine the threshold based on sparsity\n    threshold = 1.0 - sparsity\n\n    # 5) Produce a boolean mask (True where rand_vals >= threshold)\n    mask = rand_vals >= threshold\n\n    # 6) Convert the boolean mask to float (0.0 or 1.0)\n    return mask.astype(float)"}
{"task_id": 39, "completion_id": 0, "completion": "import numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"\n    Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n        \n    Notes\n    -----\n    For even n, uses position n//2 as the median index.\n    \"\"\"\n    n = data.shape[0]\n    # Position of the median (for even n, by problem statement, use n//2)\n    mid = n // 2\n\n    # argpartition in O(n) time\n    idx = np.argpartition(data[:, d], mid)\n\n    # pivot (row index in the original array) and pivot value\n    pivot = idx[mid]\n    pivot_val = data[pivot, d]\n\n    # Create left and right lists of original row indices (strictly below/above pivot_val)\n    left_indices = np.where(data[:, d] < pivot_val)[0].tolist()   # strictly smaller\n    right_indices = np.where(data[:, d] > pivot_val)[0].tolist()  # strictly larger\n\n    # Sort them to keep output deterministic\n    left_indices.sort()\n    right_indices.sort()\n\n    return pivot, left_indices, right_indices"}
{"task_id": 40, "completion_id": 0, "completion": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # 1. Check the preconditions\n    assert x.ndim == 1, \"Input array x must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Signal length must be >= frame_width.\"\n\n    # 2. Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # 3. Shape and strides\n    shape = (n_frames, frame_width)\n    strides = (stride * x.strides[0], x.strides[0])\n\n    # 4. Create a strided view\n    framed = as_strided(x, shape=shape, strides=strides)\n\n    # 5. Control writeability\n    if not writeable:\n        framed.flags.writeable = False\n    else:\n        # Inherits writeability from the original array\n        framed.flags.writeable = x.flags.writeable\n\n    return framed"}
{"task_id": 48, "completion_id": 0, "completion": "import numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        # Convert input to a NumPy array of floats\n        X_arr = np.array(X, dtype=float)\n    except:\n        # If conversion fails, it's not a valid numeric matrix\n        return False\n    \n    # Check for two-dimensional shape\n    if X_arr.ndim != 2:\n        return False\n    \n    # Check that all elements are in the interval [0, 1]\n    if not np.all((X_arr >= 0) & (X_arr <= 1)):\n        return False\n    \n    # Check that each row sums to 1 (within a small numerical tolerance)\n    row_sums = np.sum(X_arr, axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-8):\n        return False\n    \n    # If all checks pass, it is row-stochastic\n    return True"}
{"task_id": 55, "completion_id": 0, "completion": "import numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    # If the data set is smaller than batch_size, use full-batch\n    effective_batch_size = min(n, batch_size)\n\n    for i in range(max_iter):\n        # Determine start/end indices for this mini-batch (wrap around if needed)\n        start_idx = (i * effective_batch_size) % n\n        end_idx = start_idx + effective_batch_size\n        \n        if end_idx <= n:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            wrap = end_idx - n\n            X_batch = np.concatenate((X[start_idx:], X[:wrap]), axis=0)\n            y_batch = np.concatenate((y[start_idx:], y[:wrap]), axis=0)\n        \n        # Compute gradient w.r.t. this mini-batch\n        g = (1.0 / effective_batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (g * g)\n        \n        # Update weights\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check early stopping condition (gradient norm)\n        if np.linalg.norm(g) < epsilon:\n            break\n\n    # Round to 4 decimals and return as a list\n    return [round(float(wi), 4) for wi in w]"}
{"task_id": 56, "completion_id": 0, "completion": "import numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    SoftPlus(x) = log(1 + e^x)\n    Its derivative = 1 / (1 + e^-x) (the logistic/sigmoid function)\n    \n    Numerically stable implementation:\n    ----------------------------------------------------\n    For the forward pass:\n      If x >= 0: SoftPlus(x) = x + log1p(e^-x)\n      If x < 0:  SoftPlus(x) = log1p(e^x)\n    \n    For the derivative (sigmoid):\n      If x >= 0: sigmoid(x) = 1 / (1 + e^-x)\n      If x < 0:  sigmoid(x) = e^x / (1 + e^x)\n    \n    Rounds output to 4 decimal places and returns a Python list\n    unless x is a scalar, in which case it returns a float.\n    \"\"\"\n    # Convert input x to a NumPy array for vectorized operations\n    x_array = np.array(x, dtype=float) if not np.isscalar(x) else np.array([x], dtype=float)\n\n    # Piecewise computations for stability\n    if deriv:\n        # Derivative: element-wise sigmoid of x\n        positive_mask = (x_array >= 0)\n        out = np.empty_like(x_array)\n\n        # When x >= 0\n        out[positive_mask] = 1.0 / (1.0 + np.exp(-x_array[positive_mask]))\n        # When x < 0\n        out[~positive_mask] = np.exp(x_array[~positive_mask]) / (1.0 + np.exp(x_array[~positive_mask]))\n    else:\n        # Forward pass: SoftPlus\n        positive_mask = (x_array >= 0)\n        out = np.empty_like(x_array)\n\n        # When x >= 0\n        out[positive_mask] = x_array[positive_mask] + np.log1p(np.exp(-x_array[positive_mask]))\n        # When x < 0\n        out[~positive_mask] = np.log1p(np.exp(x_array[~positive_mask]))\n\n    # Round results to 4 decimals\n    out_rounded = np.round(out, 4)\n\n    # Return a float if input was a scalar, otherwise a list\n    if np.isscalar(x):\n        return float(out_rounded[0])\n    else:\n        return out_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The return value must be rounded to 4 decimal places. If any required\n    count is zero you should immediately return float('-inf').\n    \"\"\"\n    # Handle the trivial case where sequence is too short for any N-gram\n    if len(sequence) < N:\n        # By convention, the probability of an empty set of n-grams is 1 \u21d2 log-prob = 0\n        return round(0.0, 4)\n\n    if N == 1:\n        # Unigram model: P(w) = count(w) / len(corpus)\n        total_tokens = len(corpus)\n        unigram_counts = Counter(corpus)\n        \n        log_prob = 0.0\n        for w in sequence:\n            count_w = unigram_counts[w]\n            if count_w == 0:\n                return float('-inf')\n            log_prob += np.log(count_w / total_tokens)\n        return round(log_prob, 4)\n    else:\n        # N > 1: P(w1...wN) = count(w1...wN) / count(w1...wN-1)\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n        \n        # Build the N-gram and (N-1)-gram counts from the corpus\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i+N])\n            ngram_counts[ngram] += 1\n            prefix = tuple(corpus[i:i+N-1])\n            prefix_counts[prefix] += 1\n\n        log_prob = 0.0\n        # Slide over the sequence in windows of length N\n        for i in range(len(sequence) - N + 1):\n            current_ngram = tuple(sequence[i:i+N])\n            current_prefix = tuple(sequence[i:i+N-1])\n            numerator = ngram_counts[current_ngram]\n            denominator = prefix_counts[current_prefix]\n            \n            # If unseen numerator or prefix, probability is zero\n            if numerator == 0 or denominator == 0:\n                return float('-inf')\n\n            log_prob += np.log(numerator / denominator)\n\n        return round(log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "completion": "import numpy as np\n\ndef lasso_regression(\n    X: list[float] | np.ndarray,\n    y: list[float] | np.ndarray,\n    degree: int,\n    reg_factor: float,\n    n_iterations: int = 1000,\n    tol: float = 1e-6\n) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model using coordinate descent with polynomial features.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients [w0, w1, \u2026, w_degree] rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total, counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to four decimals.\n    \"\"\"\n\n    # Ensure X, y are numpy arrays and 1D\n    X = np.asarray(X).ravel()\n    y = np.asarray(y).ravel()\n    m = len(X)\n    if m == 0:\n        return [0.0] * (degree + 1)\n\n    # Build the design matrix of shape (m, degree+1):\n    # First column = 1 (bias), then x^1, x^2, ..., x^degree\n    # np.vander can do it but in reverse order; let's just use column_stack\n    X_design = np.column_stack([X**p for p in range(degree + 1)])  # [x^0, x^1, ... , x^d]\n\n    # Initialize weights (w0, w1, ..., w_degree) to zeros\n    w = np.zeros(degree + 1, dtype=float)\n\n    def soft_threshold(rho, lam):\n        \"\"\"Soft thresholding operator.\"\"\"\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        w_old = w.copy()\n\n        # 1) Update the bias term w0 exactly (not regularized)\n        # w0 <- mean( y - X_{-0}\u00b7w_{-0} ),\n        # where X_{-0} means columns 1..degree\n        if degree > 0:\n            w[0] = np.mean(y - X_design[:, 1:] @ w[1:])\n        else:\n            # If degree=0, then there's only w0\n            w[0] = np.mean(y)\n\n        # 2) Update each other coefficient w_j (j>=1)\n        for j in range(1, degree + 1):\n            # Compute \u03c1 = x_j^T (y - (X\u00b7w) + w_j x_j)\n            # x_j is X_design[:, j]\n            x_j = X_design[:, j]\n            # partial residual = (y - X@w) + w_j * x_j\n            # (because we subtracted w_j*x_j in X@w but want to add it back once for the coordinate update)\n            rho = x_j.T @ (y - X_design @ w + w[j] * x_j)\n\n            # Then w_j = soft_threshold(rho, \u03bb) / (x_j^T x_j)\n            denom = x_j.T @ x_j\n            if denom == 0:\n                # Edge case if all x_j are zeros\n                w[j] = 0.0\n            else:\n                st = soft_threshold(rho, reg_factor)\n                w[j] = st / denom\n\n        # 3) Check for early stopping\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n\n    # Return coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in w]"}
{"task_id": 63, "completion_id": 0, "completion": "import numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a discrete Hidden Markov Model (HMM) at time index t.\n\n    Parameters:\n        A   (list[list[float]]): Transition-probability matrix of shape (N, N).\n        B   (list[list[float]]): Emission-probability matrix of shape (N, M).\n        obs (list[int])        : Sequence of observation indices (length T).\n        t   (int)              : Time index (0 \u2264 t < T).\n\n    Returns:\n        list[float]: A list of length N containing the backward probabilities at time t,\n                     each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy arrays\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    obs = np.array(obs, dtype=int)\n\n    N = A.shape[0]      # Number of states\n    T = len(obs)        # Length of the observation sequence\n\n    # Initialize the backward matrix with zeros\n    beta = np.zeros((T, N), dtype=float)\n\n    # Base case: \u03b2_{T-1}(i) = 1 for all states i\n    beta[T-1, :] = 1.0\n\n    # Recursively compute \u03b2_t(i) for t = T-2 down to 0\n    for time in range(T-2, -1, -1):\n        for i in range(N):\n            # \u03b2_t(i) = \u2211 a_{i,j} * b_j(obs[time+1]) * \u03b2_{time+1}(j)\n            beta[time, i] = np.sum(A[i, :] * B[:, obs[time+1]] * beta[time+1, :])\n\n    # Extract the backward vector at time t, round each entry to 4 decimals, and return as a list\n    return [round(float(val), 4) for val in beta[t, :]]"}
{"task_id": 65, "completion_id": 0, "completion": "import numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability \n           from state i to state j.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol k\n           from state i.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # If any input list is empty, return 0.0\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)          # Number of states\n    T = len(obs)        # Length of the observation sequence\n\n    # Initialize backward variables beta[t][i]\n    beta = [[0.0] * N for _ in range(T)]\n\n    # Base case: beta[T-1][i] = 1 for all i\n    for i in range(N):\n        beta[T-1][i] = 1.0\n\n    # Recursively fill in the beta table\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            # Sum over all possible next states\n            total = 0.0\n            for j in range(N):\n                total += A[i][j] * B[j][obs[t+1]] * beta[t+1][j]\n            beta[t][i] = total\n\n    # Compute the final probability P(O | \u03bb)\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0][i]\n\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "completion": "import numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities (length n).\n        A (list[list[float]]): State\u2013transition probability matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        observations (list[int]): Observation index sequence (each in [0, m-1]).\n\n    Returns:\n        float: The likelihood of the observation sequence under the HMM,\n               rounded to 4 decimal places, or \u22121 for invalid input.\n    \"\"\"\n    # -----------------------------\n    # 1. Validate input dimensions\n    # -----------------------------\n    # Check S\n    n = len(S)\n    if n == 0:  # No states, invalid\n        return -1\n\n    # Check A dimensions (n\u00d7n)\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n\n    # Check B dimensions (n\u00d7m)\n    if len(B) != n:\n        return -1\n    if n > 0:\n        m = len(B[0])\n        if m == 0:  # No possible observations, invalid\n            return -1\n        for row in B:\n            if len(row) != m:\n                return -1\n    else:\n        return -1  # Shouldn't happen if n=0 was caught above\n\n    # -----------------------------\n    # 2. Check observations\n    # -----------------------------\n    T = len(observations)\n    if T == 0:  # Empty sequence\n        return -1\n\n    # Ensure each observation index is in [0, m-1]\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n\n    # -----------------------------\n    # 3. Implement forward algorithm\n    # -----------------------------\n    # Convert inputs to numpy arrays for convenience\n    S = np.array(S, dtype=float)\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n\n    # Initialize alpha\n    alpha = np.zeros((T, n), dtype=float)\n\n    # Initialization step\n    first_obs = observations[0]\n    for i in range(n):\n        alpha[0, i] = S[i] * B[i, first_obs]\n\n    # Recursion step\n    for t in range(1, T):\n        obs_t = observations[t]\n        for j in range(n):\n            # sum over previous states i\n            alpha[t, j] = np.sum(alpha[t - 1, i] * A[i, j] for i in range(n))\n            # multiply by emission probability of j at time t\n            alpha[t, j] *= B[j, obs_t]\n\n    # Termination: sum over the last time step\n    likelihood = np.sum(alpha[T - 1, :])\n\n    # -----------------------------\n    # 4. Return result rounded to 4 decimals\n    # -----------------------------\n    return round(float(likelihood), 4)"}
{"task_id": 70, "completion_id": 0, "completion": "from collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1) Count global frequency of each item and keep only those \u2265 min_support\n    # ------------------------------------------------------------------\n    if not transactions or min_support < 1:\n        return []\n\n    # Count item frequencies (treat each transaction as a set of unique items)\n    item_counter = Counter()\n    for trans in transactions:\n        unique_items = set(trans)\n        item_counter.update(unique_items)\n\n    # Keep only frequent items\n    freq_items = {item: cnt for item, cnt in item_counter.items() if cnt >= min_support}\n    if not freq_items:\n        return []\n\n    # ------------------------------------------------------------------\n    # 2) Build the FP-tree\n    # ------------------------------------------------------------------\n    # Sort frequent items by descending frequency; tie-break by alphabetical order\n    # This will determine the order in which items appear in the tree's branches.\n    sorted_freq_items = sorted(freq_items.keys(), key=lambda i: (-freq_items[i], i))\n\n    # A simple FP-tree node class\n    class FPNode:\n        __slots__ = (\"item\", \"count\", \"parent\", \"children\")  # for memory efficiency\n\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n\n    # Header table: maps item -> list of nodes for that item\n    header_table = defaultdict(list)\n\n    # Build the root of the tree (empty item label)\n    root = FPNode(None, None)\n\n    def insert_transaction(trans):\n        \"\"\"Insert a transaction (already filtered & ordered) into the FP-tree.\"\"\"\n        current_node = root\n        for item in trans:\n            # Go down the tree\n            if item not in current_node.children:\n                # Create a new child node\n                new_node = FPNode(item, current_node)\n                current_node.children[item] = new_node\n                # Add this node to header_table for item\n                header_table[item].append(new_node)\n            # Move one level down and increment count\n            current_node = current_node.children[item]\n            current_node.count += 1\n\n    # Prepare and insert each transaction\n    for trans in transactions:\n        # 1) Keep only frequent items\n        filtered = [i for i in trans if i in freq_items]\n        if not filtered:\n            continue\n        # 2) Sort them according to global frequency (descending) & tiebreak by item\n        filtered.sort(key=lambda i: (-freq_items[i], i))\n        # 3) Insert into the FP-tree\n        insert_transaction(filtered)\n\n    # ------------------------------------------------------------------\n    # 3) Mine the FP-tree recursively\n    # ------------------------------------------------------------------\n    frequent_itemsets = []\n\n    def get_prefix_paths(item):\n        \"\"\"\n        For a given 'item' in the header table, traverse all nodes that contain this item.\n        Each node's path (excluding the node itself, up to but not including the root)\n        forms a prefix path. We gather these prefix paths with the count = node.count.\n        \"\"\"\n        paths = []\n        for node in header_table[item]:\n            path_count = node.count\n            prefix_path = []\n            # Climb up the tree, stopping at the root\n            parent = node.parent\n            while parent and parent.item is not None:\n                prefix_path.append(parent.item)\n                parent = parent.parent\n            if prefix_path:\n                # The path is from leaf to root, reverse to get root->leaf\n                prefix_path.reverse()\n                paths.append((prefix_path, path_count))\n        return paths\n\n    def build_conditional_tree(prefix_paths):\n        \"\"\"\n        Given a list of (prefix_path, count) pairs, build a conditional FP-tree\n        (just like building the main tree) and return:\n          - The root of the conditional tree\n          - A header_table-like dict for items in this conditional tree\n          - A frequency dict for those items\n        \"\"\"\n        # Count new frequencies from prefix paths\n        cond_freq = Counter()\n        for path, count in prefix_paths:\n            for item in set(path):\n                cond_freq[item] += count\n\n        # Keep only frequent items within these prefix paths\n        cond_freq = {k: v for k, v in cond_freq.items() if v >= min_support}\n        if not cond_freq:\n            return None, {}\n\n        # Sort items (descending freq, tiebreak alphabetical) for insertion\n        cond_order = sorted(cond_freq.keys(), key=lambda i: (-cond_freq[i], i))\n\n        # Build the tree\n        cond_root = FPNode(None, None)\n        cond_header = defaultdict(list)\n\n        def insert_cond_path(path, path_count):\n            curr_node = cond_root\n            for itm in path:\n                if itm not in curr_node.children:\n                    new_nd = FPNode(itm, curr_node)\n                    curr_node.children[itm] = new_nd\n                    cond_header[itm].append(new_nd)\n                curr_node = curr_node.children[itm]\n                curr_node.count += path_count\n\n        # For each prefix path, filter by cond_freq and re-sort by cond_order\n        for path, count in prefix_paths:\n            filtered_path = [i for i in path if i in cond_freq]\n            filtered_path.sort(key=lambda i: (-cond_freq[i], i))\n            if filtered_path:\n                insert_cond_path(filtered_path, count)\n\n        return (cond_root, cond_header, cond_freq)\n\n    def mine_tree(current_prefix, items, hdr_table, freq_map):\n        \"\"\"\n        Recursively mine patterns from the FP-tree using the header table.\n        'current_prefix' is the list of items found so far in the recursion.\n        'items' is the global ordering of frequent items (descending freq).\n        \"\"\"\n        # We go in reverse order of items to match the canonical FP-Growth approach\n        # (lowest frequency to highest in the header table).\n        # This ensures no duplicates and is the standard method in the paper.\n        for item in reversed(items):\n            # The new pattern is current_prefix + this single item\n            new_pattern = current_prefix + [item]\n            new_pattern_sorted = sorted(new_pattern)  # ensure lexicographic order inside\n            frequent_itemsets.append(new_pattern_sorted)\n\n            # Build conditional FP-tree for this item\n            prefix_paths = get_prefix_paths(item)\n            cond_root, cond_header_map, cond_freq_map = build_conditional_tree(prefix_paths)\n            if not cond_root:\n                continue  # No child tree => no further patterns\n\n            # Recursively mine the conditional FP-tree\n            new_order = sorted(cond_freq_map.keys(), key=lambda i: (-cond_freq_map[i], i))\n            mine_tree(new_pattern, new_order, cond_header_map, cond_freq_map)\n\n    # Recursively mine the main FP-tree we built\n    mine_tree([], sorted_freq_items, header_table, freq_items)\n\n    # Remove duplicates if any (in principle FP-Growth should not produce duplicates,\n    # but defensive programming is sometimes helpful)\n    # We'll convert to a set of tuples, then back to a list of lists\n    unique_itemsets = list({tuple(x) for x in frequent_itemsets})\n\n    # Sort by (len(itemset), itemset) to satisfy determinism requirement\n    unique_itemsets.sort(key=lambda x: (len(x), x))\n\n    return [list(x) for x in unique_itemsets]"}
{"task_id": 75, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # 1. If k is invalid, return -1 (single integer).\n    if k < 1 or k > len(X_train):\n        return -1\n\n    predictions = []\n\n    for x_test in X_test:\n        # 2. Compute distances between x_test and all training samples.\n        distances = []\n        for x_train, label in zip(X_train, y_train):\n            # Sum of squared differences (no need for square root).\n            dist = sum((xt - xtr) ** 2 for xt, xtr in zip(x_test, x_train))\n            distances.append((dist, label))\n\n        # 3. Sort by distance.\n        distances.sort(key=lambda d: d[0])\n\n        # 4. Select the k nearest neighbors and get their labels.\n        k_neighbors = distances[:k]\n        neighbor_labels = [lbl for _, lbl in k_neighbors]\n\n        # 5. Majority vote (with tie broken by smallest label).\n        freq = {}\n        for lbl in neighbor_labels:\n            freq[lbl] = freq.get(lbl, 0) + 1\n\n        max_count = max(freq.values())\n        # Extract all labels that share the highest vote count.\n        winners = [lbl for lbl, count in freq.items() if count == max_count]\n        # Tie-break by taking the smallest label.\n        predictions.append(min(winners))\n\n    return predictions"}
{"task_id": 76, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays (if not already)\n    y = np.asarray(y, dtype=float)\n    y_pred = np.asarray(y_pred, dtype=float)\n    \n    # Small constant for numerical stability\n    epsilon = 1e-15\n    \n    # Calculate the cross-entropy\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return float(round(loss, 4))"}
{"task_id": 77, "completion_id": 0, "completion": "import numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU -> Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple\n        A tuple (AL, caches), where:\n        - AL (list[list[float]]): The final activation of shape (1, m), rounded\n          to 4 decimals and converted to a plain Python list.\n        - caches (list): A list of caches, one for each layer, which can be used\n          in the backward pass.\n    \"\"\"\n\n    def relu(Z):\n        return np.maximum(0, Z)\n\n    def sigmoid(Z):\n        return 1 / (1 + np.exp(-Z))\n\n    caches = []            # This will collect caches for each layer\n    A = X                  # A is the activation from the previous layer\n    L = len(parameters) // 2\n\n    # Forward pass for layers 1 to L-1 (ReLU activation)\n    for l in range(1, L):\n        W = parameters[f\"W{l}\"]\n        b = parameters[f\"b{l}\"]\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        # Cache can contain anything needed for backward, here we store (A_prev, W, b, Z)\n        caches.append((A, W, b, Z))\n\n    # Forward pass for the last layer L (Sigmoid activation)\n    W = parameters[f\"W{L}\"]\n    b = parameters[f\"b{L}\"]\n    Z = np.dot(W, A) + b\n    A = sigmoid(Z)\n    caches.append((A, W, b, Z))\n\n    # AL is the final output. Round it and convert to Python list.\n    AL_rounded_list = np.round(A, 4).tolist()\n\n    # Return the tuple (AL, caches).\n    return AL_rounded_list, caches"}
{"task_id": 81, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as A2.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    # Clip predicted probabilities to avoid log(0)\n    A2_clipped = np.clip(A2, eps, 1 - eps)\n    \n    m = Y.size  # number of examples\n    # Compute the cost\n    cost = -(1/m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return cost rounded to 6 decimal places\n    return float(round(cost, 6))"}
{"task_id": 82, "completion_id": 0, "completion": "import numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places, and the sum of these\n    probabilities must be 1 (within 1 \u00d7 10\u207b\u00b9\u00b2).\n    \"\"\"\n    # Convert Q to a NumPy array (in case it's a list)\n    Q = np.asarray(Q, dtype=np.float64)\n\n    # Number of actions\n    n = len(Q)\n    if n == 0:\n        # Edge case: no actions\n        return []\n\n    # Find the index of the first occurrence of the maximum Q-value\n    greedy_index = np.argmax(Q)\n\n    # Compute base probabilities\n    p_greedy = 1.0 - epsilon + (epsilon / n)  # Probability for the greedy action\n    p_others = epsilon / n                   # Probability for non-greedy actions\n\n    # Construct the probability distribution\n    probs = np.full(n, p_others, dtype=np.float64)\n    probs[greedy_index] = p_greedy\n\n    # First pass rounding\n    probs_rounded = [round(p, 4) for p in probs]\n    sum_rounded = sum(probs_rounded)\n\n    # Adjust to ensure sum is 1 within 1\u00d710\u207b\u00b9\u00b2 after rounding\n    diff = 1.0 - sum_rounded\n    probs_rounded[greedy_index] += diff\n    # Round again in case the adjustment changed the greedy action's fourth decimal place\n    probs_rounded[greedy_index] = round(probs_rounded[greedy_index], 4)\n\n    # Final check (usually this will be within 1e-12, but we don't iterate further)\n    sum_final = sum(probs_rounded)\n    if not np.isclose(sum_final, 1.0, atol=1e-12):\n        # If it's still off by more than 1e-12 (rare), force it by final nudge\n        adjustment = 1.0 - sum_final\n        probs_rounded[greedy_index] += adjustment\n\n    return probs_rounded"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of trees\n    num_trees = len(predictions)\n    if num_trees == 0:\n        return []\n\n    # Number of samples (each tree's prediction list has the same length)\n    num_samples = len(predictions[0])\n    if num_samples == 0:\n        return []\n\n    final_predictions = []\n\n    # For each sample (column)\n    for sample_idx in range(num_samples):\n        # Collect the vote from each tree\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(num_trees)]\n        \n        # Count the votes using Counter\n        vote_counts = Counter(votes)\n        \n        # Determine the maximum count\n        max_count = max(vote_counts.values())\n        # Find all labels with that maximum count\n        candidates = [label for label, count in vote_counts.items() if count == max_count]\n        \n        # If there's a tie, choose the smallest label (numeric or lexicographic)\n        final_label = min(candidates)\n        final_predictions.append(final_label)\n\n    return final_predictions\n```"}
{"task_id": 88, "completion_id": 0, "completion": "import numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    arr = np.asarray(z, dtype=float)\n    \n    # Compute element-wise softplus using the stable np.logaddexp\n    softplus_vals = np.logaddexp(0.0, arr)\n    \n    # Round to 4 decimal places\n    softplus_vals = np.round(softplus_vals, 4)\n\n    # If input was a scalar, return a single float\n    if np.isscalar(z):\n        return float(softplus_vals)\n    else:\n        # Otherwise, return as a (possibly nested) Python list\n        return softplus_vals.tolist()"}
{"task_id": 90, "completion_id": 0, "completion": "import numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # 1. Check if the policy estimates exist and are non-empty\n    if \"ev_estimates\" not in policy or not policy[\"ev_estimates\"]:\n        return np.nan\n    \n    # 2. Sort the estimates by arm index\n    sorted_keys = sorted(policy[\"ev_estimates\"].keys())\n    sorted_estimates = [policy[\"ev_estimates\"][k] for k in sorted_keys]\n    \n    # 3. Get the true expected values from the bandit\n    arm_evs = bandit[\"arm_evs\"]\n    \n    # 4. Compute the mean-squared error\n    squared_errors = []\n    for i, true_ev in enumerate(arm_evs):\n        diff = true_ev - sorted_estimates[i]\n        squared_errors.append(diff ** 2)\n    \n    mse_value = sum(squared_errors) / len(squared_errors)\n    \n    # 5. Round to 4 decimal places and return\n    return float(round(mse_value, 4))"}
{"task_id": 96, "completion_id": 0, "completion": "import math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1) Build all 1- to N-gram frequency tables from the corpus\n    ngram_counts = [Counter() for _ in range(N)]  # ngram_counts[i] will store (i+1)-gram frequencies\n    vocab = set()  # to store all unique words in the corpus\n    \n    # Parse the corpus and update n-gram counts\n    for line in corpus:\n        words = line.split()\n        # update vocabulary\n        for w in words:\n            vocab.add(w)\n        # update n-gram counts\n        for i in range(N):\n            n = i + 1\n            for start_idx in range(len(words) - n + 1):\n                ngram = tuple(words[start_idx:start_idx + n])\n                ngram_counts[i][ngram] += 1\n\n    # 2) Add an explicit <UNK> token to the vocabulary\n    if \"<UNK>\" not in vocab:\n        vocab.add(\"<UNK>\")\n\n    # For the total count of words (needed for 1-gram context)\n    total_count_1grams = sum(ngram_counts[0].values())\n\n    # 3) Estimate the probability of every contiguous N-gram in the target sentence with additive smoothing\n\n    # Tokenize the target sequence, mapping unseen words to <UNK>\n    seq_words = sequence.split()\n    seq_words = [w if w in vocab else \"<UNK>\" for w in seq_words]\n\n    # If sentence length is smaller than N, no N-grams exist -> return 0.0\n    if len(seq_words) < N:\n        return 0.0\n\n    # Extract the contiguous N-grams from the sequence\n    seq_ngrams = []\n    for start_idx in range(len(seq_words) - N + 1):\n        seq_ngrams.append(tuple(seq_words[start_idx:start_idx + N]))\n\n    # Vocabulary size (including <UNK>)\n    V = len(vocab)\n    log_prob_sum = 0.0\n\n    # Compute the log-probabilities using the formula:\n    # P(w_i | context) = (count(context \u25e6 w_i) + K) / (count(context) + K * V)\n    for ngram in seq_ngrams:\n        if N == 1:\n            # context is \"empty\", denominator is total_count_1grams + K*V\n            context_count = total_count_1grams\n        else:\n            # context is the first N-1 tokens of the ngram\n            context = ngram[:-1]\n            context_count = ngram_counts[N - 2][context]\n\n        ngram_count = ngram_counts[N - 1][ngram]\n        prob = (ngram_count + K) / (context_count + K * V)\n        log_prob_sum += math.log(prob)\n\n    # 4) Return the natural logarithm of the sentence probability (sum of log-probs) rounded to 4 decimals\n    return round(log_prob_sum, 4)"}
{"task_id": 108, "completion_id": 0, "completion": "import numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n\n    # Fix the random seed for deterministic initialization\n    np.random.seed(0)\n    N, M = X.shape\n\n    # Randomly initialise W \u2208 \u211d^(N\u00d7K) and H \u2208 \u211d^(K\u00d7M)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    I_k = np.eye(K)\n\n    for _ in range(max_iter):\n        # Update W using the closed-form solution:\n        #     W = (X H^T) (H H^T + \u03b1I)^(-1)\n        HHT = H @ H.T\n        W = (X @ H.T) @ np.linalg.inv(HHT + alpha * I_k)\n\n        # Update H using the closed-form solution:\n        #     H = (W^T W + \u03b1I)^(-1) (W^T X)\n        WTW = W.T @ W\n        H = np.linalg.inv(WTW + alpha * I_k) @ (W.T @ X)\n\n        # Compute the regularised Frobenius loss:\n        # ||X - WH||_F^2 + \u03b1(||W||_F^2 + ||H||_F^2)\n        reconstruction = W @ H\n        loss = (\n            np.linalg.norm(X - reconstruction, 'fro') ** 2\n            + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        )\n        # Stop if the regularised loss is below the tolerance\n        if loss < tol:\n            break\n\n    # Return the final reconstruction, rounded to 4 decimals and converted to a list of lists\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate (using the entire\n        centroid as tie-breaker).\n    \"\"\"\n    # 1. Set random seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    \n    # Utility function: compute squared Euclidean distance\n    def squared_distance(a, b):\n        return np.sum((a - b) ** 2)\n\n    # 2. K-Means++ initialization\n    m, n = X.shape\n    centroids = np.zeros((K, n))\n    \n    # Choose the first centroid randomly\n    first_idx = np.random.choice(m)\n    centroids[0] = X[first_idx]\n    \n    # Choose each subsequent centroid\n    for i in range(1, K):\n        # Distances to the nearest chosen centroid\n        dists = np.min(\n            np.stack([np.sum((X - c) ** 2, axis=1) for c in centroids[:i]]),\n            axis=0\n        )\n        # Probability distribution proportional to dists\n        probs = dists / np.sum(dists)\n        chosen_idx = np.random.choice(m, p=probs)\n        centroids[i] = X[chosen_idx]\n    \n    # Lloyd's algorithm\n    # Assign each sample to the closest centroid\n    def assign_clusters(data, centers):\n        # Returns an array of cluster indices for each point in data\n        distances = np.stack([np.sum((data - c) ** 2, axis=1) for c in centers], axis=0)\n        return np.argmin(distances, axis=0)\n    \n    # Main iteration\n    cluster_assignments = assign_clusters(X, centroids)\n    \n    for _ in range(max_iter):\n        new_assignments = assign_clusters(X, centroids)\n        \n        # If assignments do not change, stop\n        if np.all(cluster_assignments == new_assignments):\n            break\n        cluster_assignments = new_assignments\n        \n        # Update centroids\n        for k in range(K):\n            # Points in the k-th cluster\n            points_in_cluster = X[cluster_assignments == k]\n            if len(points_in_cluster) > 0:\n                centroids[k] = np.mean(points_in_cluster, axis=0)\n            # If no points in cluster, keep the old centroid (do nothing)\n    \n    # Round and sort centroids\n    rounded_centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    rounded_centroids.sort(key=lambda c: c)  # sort by entire coordinate tuple\n    return rounded_centroids"}
{"task_id": 111, "completion_id": 0, "completion": "import numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Convert a raw text string to a fixed-length list of integer token IDs according\n    to the provided vocabulary. Characters not in the vocabulary are treated as 0 (padding).\n    If text is shorter than 'time_steps', 0-pad on the right; if longer, truncate.\n    \"\"\"\n    encoded = []\n    for char in text[:time_steps]:\n        encoded.append(vocabulary.get(char, 0))  # 0 if char not in vocabulary\n    # Pad if shorter than time_steps\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Convert a list (or array) of integer IDs back to text using the inverse vocabulary.\n    Ignore padding tokens (0).\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx != 0:\n            chars.append(inverse_vocab[idx])\n    return \"\".join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    1. Encode 'text' to integer IDs using 'string_to_int' (and pad/truncate to TIME_STEPS).\n    2. Predict on the encoded sequence (batch size = 1).\n    3. Take argmax over the last axis of the model's output.\n    4. Decode the predicted IDs back to text using 'int_to_string'.\n    5. Return the decoded string (no padding).\n    \"\"\"\n    # Step 1: Encode\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array([encoded_input])  # shape: (1, TIME_STEPS)\n\n    # Step 2: Model prediction\n    predictions = model.predict(encoded_input)  # shape: (1, TIME_STEPS, vocab_size) for example\n\n    # Step 3: Argmax over last dimension\n    predicted_ids = np.argmax(predictions, axis=-1)  # shape: (1, TIME_STEPS)\n\n    # Step 4: Decode (ignore 0)\n    decoded_output = int_to_string(predicted_ids[0], inv_output_vocabulary)\n\n    return decoded_output"}
{"task_id": 113, "completion_id": 0, "completion": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"\n    Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # If no examples were provided, default to the global EXAMPLES.\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Delegate to the run_example helper (not implemented here).\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n\n        # Convert the list of characters into a single string.\n        predicted_str = \"\".join(output_chars)\n\n        # Print input and output as required.\n        print(f\"input:  {example}\\noutput: {predicted_str}\")\n\n        # Collect the prediction in a list.\n        predictions.append(predicted_str)\n\n    return predictions"}
{"task_id": 115, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a 1D array of shape (m,)\n    y = y.ravel()\n    \n    # Compute linear predictions z = Xw (shape (m,))\n    z = (X @ w).ravel()\n    \n    # Compute logistic function p = 1 / (1 + exp(-z))\n    p = 1.0 / (1.0 + np.exp(-z))\n    \n    # Avoid numerical issues by clipping p into [epsilon, 1 - epsilon]\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = y.shape[0]\n    \n    # Compute the average binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss (shape (n,))\n    grad = (X.T @ (p - y)) / m\n    \n    # Reshape gradient to (n,1) for tolist()\n    grad = grad.reshape(-1, 1)\n    \n    # Round results\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    \n    return loss_rounded, grad_rounded"}
{"task_id": 118, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    # Number of training samples (m) and number of features (n)\n    m, n = X_train.shape\n\n    # Initialize sample weights uniformly\n    W = np.ones(m) / m\n\n    # Container to store each stump's parameters and alpha\n    stumps = []  # Each element: (feature_idx, threshold, polarity, alpha)\n\n    def build_stump(X, y, W):\n        \"\"\"\n        Find the best decision stump (feature, threshold, polarity) that\n        minimizes the weighted error given current weights W.\n        \n        Returns:\n          (best_feat, best_thresh, best_pol, min_err, stump_prediction)\n          - best_feat is feature index\n          - best_thresh is the threshold\n          - best_pol is +1 or -1 (indicating which side is labeled +1)\n          - min_err is the weighted error of this stump\n          - stump_prediction is a numpy array of the predicted labels by this stump\n        \"\"\"\n        m, n = X.shape\n        best_feat = 0\n        best_thresh = 0.0\n        best_pol = 1\n        min_err = float('inf')\n        stump_prediction = np.zeros(m)\n\n        for feat_idx in range(n):\n            # Get unique values of this feature\n            # We'll consider thresholds in between these sorted values\n            unique_vals = np.unique(X[:, feat_idx])\n\n            # If there's only one unique value, we can still attempt that as threshold\n            # We'll pick a set of candidate thresholds\n            # e.g. midpoints between consecutive unique values, plus one below min, one above max\n            candidate_thresholds = []\n            if len(unique_vals) == 1:\n                # Only one possible threshold to test\n                candidate_thresholds = [unique_vals[0]]\n            else:\n                # midpoints between consecutive unique values\n                candidate_thresholds = []\n                for i in range(len(unique_vals) - 1):\n                    candidate_thresholds.append(\n                        0.5 * (unique_vals[i] + unique_vals[i+1])\n                    )\n                # Also consider the extremes themselves\n                candidate_thresholds.insert(0, unique_vals[0] - 1e-10)\n                candidate_thresholds.append(unique_vals[-1] + 1e-10)\n\n            for thresh in candidate_thresholds:\n                for pol in [+1, -1]:\n                    # Predict labels for this stump\n                    # If pol = +1, then\n                    #   h(x) = +1 if X[feat_idx] < thresh, else -1\n                    # If pol = -1, then we invert that\n                    predictions = np.ones(m) * -1\n                    if pol == 1:\n                        predictions[X[:, feat_idx] < thresh] = 1\n                    else:\n                        # pol = -1 means we flip the default assignment\n                        predictions[X[:, feat_idx] < thresh] = -1\n                        # Then for x >= thresh, predictions = +1\n                        # but we started with -1 above, so:\n                        predictions[X[:, feat_idx] >= thresh] = 1\n\n                    # Weighted error\n                    # Weighted sum of misclassified samples\n                    misclassified = (predictions != y).astype(float)\n                    err = np.sum(W * misclassified)\n\n                    if err < min_err:\n                        min_err = err\n                        best_feat = feat_idx\n                        best_thresh = thresh\n                        best_pol = pol\n                        stump_prediction = predictions.copy()\n\n        return best_feat, best_thresh, best_pol, min_err, stump_prediction\n\n    # Train AdaBoost\n    for _ in range(n_clf):\n        feat, thresh, pol, err, pred = build_stump(X_train, y_train, W)\n\n        # Compute stump weight alpha\n        # Avoid division by zero in case err=0 or err=1\n        eps = 1e-10\n        err = np.clip(err, eps, 1 - eps)\n        alpha = 0.5 * np.log((1.0 - err) / err)\n\n        # Update and normalize weights\n        # w_i <- w_i * exp(- alpha_t * y_i * h_t(x_i))\n        W *= np.exp(-alpha * y_train * pred)\n        W /= np.sum(W)\n\n        # Store stump parameters\n        stumps.append((feat, thresh, pol, alpha))\n\n    # Prediction on X_test\n    # Sign( sum_t( alpha_t * h_t(x)) ) where h_t is the stump\n    y_pred = []\n    for x in X_test:\n        # Compute the sum of alpha_t * h_t(x)\n        stump_sum = 0.0\n        for (feat, thresh, pol, alpha) in stumps:\n            # Reproduce the stump's prediction for this x\n            # If pol = +1 ->  h(x) = +1 if x[feat] < thresh else -1\n            # If pol = -1 ->  h(x) = -1 if x[feat] < thresh else +1\n            if pol == 1:\n                h_x = 1 if x[feat] < thresh else -1\n            else:  # pol == -1\n                h_x = -1 if x[feat] < thresh else 1\n\n            stump_sum += alpha * h_x\n\n        # Final prediction is sign(stump_sum)\n        label = 1 if stump_sum >= 0 else -1\n        y_pred.append(label)\n\n    return y_pred"}
{"task_id": 128, "completion_id": 0, "completion": "import numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # If no components or invalid request, return empty list:\n    if n_components <= 0:\n        return []\n    \n    # Number of samples (m) and features (d)\n    m, d = X.shape\n    \n    # Compute global mean\n    mu = np.mean(X, axis=0)\n    \n    # Find unique classes\n    classes = np.unique(y)\n    \n    # Compute class means and gather samples per class\n    class_means = {}\n    class_counts = {}\n    for c in classes:\n        X_c = X[y == c]\n        class_counts[c] = X_c.shape[0]\n        class_means[c] = np.mean(X_c, axis=0)\n    \n    # 1. Compute within-class scatter matrix S_W\n    S_W = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mu_c = class_means[c]\n        # deviations from class mean\n        dev = X_c - mu_c\n        # sum of (x - mu_c)(x - mu_c)^T\n        S_W += dev.T @ dev\n\n    # 2. Compute between-class scatter matrix S_B\n    S_B = np.zeros((d, d))\n    for c in classes:\n        mu_c = class_means[c]\n        Nc = class_counts[c]\n        diff = (mu_c - mu).reshape(-1, 1)\n        S_B += Nc * (diff @ diff.T)\n    \n    # 3. Form A = pinv(S_W) * S_B (use Moore-Penrose pseudo-inverse for stability)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n    \n    # 4. Eigen-decomposition of A (A is symmetric, so use eigh)\n    #    sort in descending order of eigen-values\n    eigvals, eigvecs = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eigvals)[::-1]  # descending order\n    eigvals = eigvals[sorted_idx]\n    eigvecs = eigvecs[:, sorted_idx]\n    \n    # If n_components is bigger than available dimension, limit it\n    # (the problem statement allows up to d, so just be safe)\n    n_components = min(n_components, d)\n    \n    # 5. Deterministic sign fix for the chosen vectors\n    #    for each eigenvector, flip if the first non-zero element is negative\n    W = []\n    for i in range(n_components):\n        v = eigvecs[:, i].copy()\n        # Find the first non-zero element\n        first_non_zero = np.flatnonzero(v)\n        if first_non_zero.size > 0:  # if there's any non-zero element\n            idx = first_non_zero[0]\n            if v[idx] < 0:\n                v = -v\n        W.append(v)\n    W = np.column_stack(W)  # shape (d, n_components)\n    \n    # 6. Project X on the first n_components eigenvectors\n    if n_components < 1:\n        return []\n    X_proj = X @ W  # shape (m, n_components)\n    \n    # Round to 4 decimal places\n    X_proj_rounded = np.round(X_proj, 4)\n    \n    # 7. Return as list of lists\n    return X_proj_rounded.tolist()"}
{"task_id": 140, "completion_id": 0, "completion": "from collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    # Edge case: no maze or incorrectly sized grid\n    if n == 0:\n        return -1\n\n    # Special case: 1x1 maze\n    if n == 1:\n        # If single cell is '.', agent is already at the goal\n        return 0 if grid[0][0] == '.' else -1\n\n    # Parse grid into a 2D list for easier access\n    maze = [list(row) for row in grid]\n\n    # If start or goal is a wall\n    if maze[0][0] == '#' or maze[n-1][n-1] == '#':\n        return -1\n\n    # If start or goal is initially on fire\n    if maze[0][0] == 'F' or maze[n-1][n-1] == 'F':\n        return -1\n\n    # Directions for movement: up, down, left, right\n    directions = [(1,0), (-1,0), (0,1), (0,-1)]\n\n    # STEP 1: Compute the earliest time the fire will occupy each cell\n    # We'll store \"fire_time[r][c]\" = earliest minute fire reaches (r,c),\n    # or math.inf if the fire never reaches that cell.\n    fire_time = [[math.inf] * n for _ in range(n)]\n    queue_fire = deque()\n\n    # Initialize the queue with all burning cells at time 0\n    for r in range(n):\n        for c in range(n):\n            if maze[r][c] == 'F':\n                fire_time[r][c] = 0\n                queue_fire.append((r, c, 0))  # row, col, time\n\n    # BFS for fire spread\n    while queue_fire:\n        r, c, t = queue_fire.popleft()\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                if maze[nr][nc] != '#' and fire_time[nr][nc] > t + 1:\n                    fire_time[nr][nc] = t + 1\n                    queue_fire.append((nr, nc, t+1))\n\n    # STEP 2: BFS for the agent\n    # The agent can move to a neighboring cell (.) if by the time the agent arrives\n    # there, it is not yet on fire (agent_time < fire_time[r][c]).\n\n    # If the start is already on fire at time 0, impossible to start\n    if fire_time[0][0] == 0:\n        return -1\n\n    visited = [[False]*n for _ in range(n)]\n    queue_agent = deque()\n    # Start: (0,0) at time 0\n    visited[0][0] = True\n    queue_agent.append((0, 0, 0))  # row, col, time\n\n    while queue_agent:\n        r, c, t = queue_agent.popleft()\n        # If we've reached the goal, return time\n        if r == n-1 and c == n-1:\n            return t\n\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                # Not a wall, not visited\n                if maze[nr][nc] != '#' and not visited[nr][nc]:\n                    # Agent would arrive at time t+1; check fire_time\n                    if fire_time[nr][nc] > t + 1:\n                        visited[nr][nc] = True\n                        queue_agent.append((nr, nc, t+1))\n\n    # If we exhaust the BFS and can't reach the end, return -1\n    return -1"}
{"task_id": 141, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    Implements a k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature data of shape (n_train, n_features).\n    y_train : np.ndarray\n        Training labels of shape (n_train,).\n    X_test : np.ndarray\n        Test feature data of shape (n_test, n_features).\n    k : int\n        Number of nearest neighbors to consider.\n    metric : str, optional\n        Distance metric to use: 'euclidean', 'manhattan', or 'cosine'.\n        If an unknown metric is provided, Euclidean distance is used.\n\n    Returns\n    -------\n    np.ndarray\n        A 1-D array of predicted labels for the test set.\n    \"\"\"\n\n    def euclidean_dist(a, b):\n        # sqrt(sum((a - b)^2))\n        return np.sqrt(np.sum((a - b)**2, axis=1))\n\n    def manhattan_dist(a, b):\n        # sum(|a - b|)\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_dist(a, b):\n        # 1 - (a\u00b7b / (||a|| * ||b||))\n        # a and b shapes: b is (n_train, n_features), a is 1D of shape (n_features,)\n        eps = 1e-9  # To prevent division by zero\n        dot_products = np.sum(a * b, axis=1)\n        a_norm = np.sqrt(np.sum(a**2))\n        b_norms = np.sqrt(np.sum(b**2, axis=1)) + eps\n        return 1.0 - (dot_products / (a_norm * b_norms))\n\n    # fallback to euclidean if metric is not recognized\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        metric = 'euclidean'\n\n    n_test = X_test.shape[0]\n    y_pred = np.empty(n_test, dtype=y_train.dtype)\n\n    for i in range(n_test):\n        test_point = X_test[i]\n        if metric == 'euclidean':\n            distances = euclidean_dist(test_point, X_train)\n        elif metric == 'manhattan':\n            distances = manhattan_dist(test_point, X_train)\n        else:  # metric == 'cosine'\n            distances = cosine_dist(test_point, X_train)\n\n        # find k nearest neighbors\n        neighbors_idx = np.argsort(distances)[:k]\n        neighbor_labels = y_train[neighbors_idx]\n\n        # majority vote (in case of tie, np.argmax returns first occurrence -> smallest label)\n        counts = np.bincount(neighbor_labels)\n        y_pred[i] = np.argmax(counts)\n\n    return y_pred"}
{"task_id": 146, "completion_id": 0, "completion": "import numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for X_test using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length n_samples containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If k exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as X_test.\n    \"\"\"\n    # Define an epsilon to avoid division by zero in the cosine metric\n    EPS = 1e-12\n    \n    # Ensure k does not exceed the number of training samples\n    k = min(k, X.shape[0])\n    \n    # Precompute norms for cosine distance if needed\n    if metric == 'cosine':\n        # Norms of training samples\n        norms_X = np.linalg.norm(X, axis=1) + EPS\n    \n    predictions = []\n    \n    # Iterate over each test sample\n    for x_test in X_test:\n        \n        # Compute distances according to the selected metric\n        if metric == 'euclidean':\n            # Euclidean distance: sqrt( sum( (x - x_test)^2 ) )\n            # Vectorized: sum of squares along each training row\n            diff = X - x_test\n            dist = np.sqrt(np.sum(diff**2, axis=1))\n        \n        elif metric == 'manhattan':\n            # Manhattan distance: sum( |x - x_test| )\n            diff = np.abs(X - x_test)\n            dist = np.sum(diff, axis=1)\n        \n        elif metric == 'cosine':\n            # Cosine distance: 1 - (x_test . x) / (||x_test|| * ||x||)\n            dot_products = X @ x_test\n            norm_x_test = np.linalg.norm(x_test) + EPS\n            # Distances:\n            dist = 1 - (dot_products / (norms_X * norm_x_test))\n        else:\n            raise ValueError(\"Unknown distance metric. Choose from ['euclidean', 'manhattan', 'cosine']\")\n        \n        # Find the k nearest neighbors\n        neighbors_idx = np.argsort(dist)[:k]  # indices of k smallest distances\n        \n        # Retrieve the corresponding labels\n        neighbor_labels = y[neighbors_idx]\n        \n        # Majority vote: in case of tie, return the smallest label\n        # np.bincount counts the occurrences of each label;\n        # argmax picks the label with the largest count (ties broken by smallest index)\n        counts = np.bincount(neighbor_labels)\n        predicted_label = np.argmax(counts)\n        \n        predictions.append(predicted_label)\n    \n    # Convert to plain Python list\n    return np.array(predictions).tolist()"}
{"task_id": 155, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array\n    x = np.array(state, dtype=float)\n\n    # First linear layer + ReLU\n    h1 = x @ weights['W1'] + weights['b1']\n    h1 = np.maximum(0, h1)  # ReLU\n\n    # Second linear layer + ReLU\n    h2 = h1 @ weights['W2'] + weights['b2']\n    h2 = np.maximum(0, h2)  # ReLU\n\n    # Output layer + tanh\n    h3 = h2 @ weights['W3'] + weights['b3']\n    out = np.tanh(h3)\n\n    # Round each element to 4 decimals and return as a Python list\n    return [round(val, 4) for val in out]"}
{"task_id": 160, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"\n    Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb * L1-norm.  Reliance solely on NumPy\n    (no scikit-learn).\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  All returned values are rounded to 4 decimal places.\n    \"\"\"\n\n    # Number of samples (m) and features (n)\n    m, n = X.shape\n\n    # 1) Augment X by adding a column of ones (if fit_intercept) or zeros.\n    if fit_intercept:\n        # The first column will be all ones and is the intercept column\n        X_aug = np.column_stack([np.ones(m), X])\n    else:\n        # The first column will be all zeros; this keeps the \"intercept\" separate\n        X_aug = np.column_stack([np.zeros(m), X])\n\n    # Initialize all parameters (including intercept) to zero\n    w = np.zeros(n + 1)  # w[0] is the intercept if fit_intercept=True\n\n    # Precompute squared norms of each column for faster updates\n    # alpha_j = sum_i (x_{ij}^2)\n    col_sq_norms = np.sum(X_aug ** 2, axis=0)  # shape (n+1,)\n\n    # Define the soft-thresholding operator S(a, \u03c4) = sign(a)*max(|a|-\u03c4, 0)\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n\n    # Perform coordinate descent\n    for _ in range(max_iters):\n        # 2) If fitting intercept, recompute it each outer iteration\n        if fit_intercept:\n            # Intercept = mean(y - (sum of predicted by other weights))\n            # i.e. w[0] = average of residual when ignoring current intercept\n            # So, predicted without the intercept is X_aug[:,1:] @ w[1:]\n            residual_no_intercept = y - X_aug[:, 1:] @ w[1:]\n            w[0] = np.mean(residual_no_intercept)\n\n        # 3) Coordinate loop for each weight (excluding intercept at index 0)\n        for j in range(1, n + 1):\n            # Compute \"partial residual\" by temporarily removing w[j] contribution\n            # r_j = y - (X_aug @ w) + x_j * w[j]\n            # which is the same as setting w_j = 0, then measuring residual\n            r_j = y - (X_aug @ w) + (X_aug[:, j] * w[j])\n\n            # Dot product of x_j and r_j\n            a_j = np.dot(X_aug[:, j], r_j)\n\n            # Soft-thresholding update\n            # w_j <- S(a_j, \u03bb * m) / sum_i x_{ij}^2\n            # Guard against division by zero in case col_sq_norms[j] == 0\n            if col_sq_norms[j] != 0:\n                w[j] = soft_threshold(a_j, lambda_param * m) / col_sq_norms[j]\n            else:\n                w[j] = 0.0\n\n    # Separate out intercept and weights to return\n    if fit_intercept:\n        bias = w[0]\n        weights = w[1:]\n    else:\n        bias = 0.0  # If not fitting intercept, we report bias=0\n        weights = w[1:]  # ignoring the dummy w[0]\n\n    # Round to 4 decimal places\n    weights_rounded = list(np.round(weights, 4))\n    bias_rounded = float(np.round(bias, 4))\n\n    return (weights_rounded, bias_rounded)"}
{"task_id": 165, "completion_id": 0, "completion": "import numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays (this also checks they at least look like arrays/lists)\n    x_arr = np.array(x, dtype=int)\n    y_arr = np.array(y, dtype=int)\n    \n    # Check if lengths are different\n    if x_arr.shape[0] != y_arr.shape[0]:\n        return -1\n    \n    # Calculate the normalized Hamming distance\n    distance = np.mean(x_arr != y_arr)\n    \n    # Return rounded distance\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "completion": "import numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats, each rounded to 4 decimal places.\n    \"\"\"\n    # 1. Validate input\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    if N == 1:\n        # For a single sample, all standard definitions equal 1.0\n        return [1.0]\n\n    # 2. Prepare for window generation\n    n = np.arange(N)\n    denom = N - 1\n\n    if window == \"hamming\":\n        # Hamming:  w[n] = 0.54 \u2212 0.46 cos(2\u03c0n/(N\u22121))\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / denom)\n\n    elif window == \"hann\":\n        # Hann: w[n] = 0.5 - 0.5 cos(2\u03c0n/(N\u22121))\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / denom)\n\n    elif window == \"blackman_harris\":\n        # Blackman\u2013Harris:\n        # w[n] = a0 - a1*cos(2\u03c0n/(N-1)) + a2*cos(4\u03c0n/(N-1)) - a3*cos(6\u03c0n/(N-1))\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = (\n            a0\n            - a1 * np.cos(2 * np.pi * n / denom)\n            + a2 * np.cos(4 * np.pi * n / denom)\n            - a3 * np.cos(6 * np.pi * n / denom)\n        )\n\n    elif window == \"generalized_cosine\":\n        # w[n] = \u03a3(a_k * cos(2\u03c0k*n/(N-1))) for k in [0..M]\n        if not coefficients:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine'.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / denom)\n\n    else:\n        raise ValueError(f\"Unknown window type '{window}'.\")\n\n    # 3. Round to 4 decimals and return as a regular Python list\n    w_rounded = [round(float(val), 4) for val in w]\n    return w_rounded"}
{"task_id": 171, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    X_test_arr = np.array(X_test, dtype=float)\n    \n    # If all labels are the same, skip training and predict that label for all\n    unique_labels = np.unique(y_train_arr)\n    if len(unique_labels) == 1:\n        # Just return that single label for every sample in X_test\n        return [int(unique_labels[0])] * len(X_test_arr)\n    \n    # We expect exactly two distinct numeric labels\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct numeric labels.\")\n    \n    # Map the two labels to {0, 1}\n    # We'll always map the smaller label to 0 and the larger label to 1\n    label0, label1 = np.sort(unique_labels)\n    \n    def label_to_binary(y_val):\n        return 0 if y_val == label0 else 1\n    \n    def binary_to_label(binary_val):\n        return label0 if binary_val == 0 else label1\n    \n    y_train_binary = np.array([label_to_binary(y) for y in y_train_arr])\n    \n    # Add intercept (bias) column of 1's to X_train and X_test\n    # Shape: (n_samples, n_features + 1)\n    intercept_train = np.ones((X_train_arr.shape[0], 1))\n    intercept_test = np.ones((X_test_arr.shape[0], 1))\n    X_train_aug = np.hstack((intercept_train, X_train_arr))\n    X_test_aug = np.hstack((intercept_test, X_test_arr))\n    \n    # Initialize weights (including bias weight)\n    n_features = X_train_aug.shape[1]\n    w = np.zeros(n_features)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    n_samples = X_train_aug.shape[0]\n    \n    for _ in range(epochs):\n        # Shuffle indices to form mini-batches\n        indices = np.random.permutation(n_samples)\n        \n        for start_idx in range(0, n_samples, batch_size):\n            end_idx = start_idx + batch_size\n            batch_indices = indices[start_idx:end_idx]\n            \n            X_batch = X_train_aug[batch_indices]\n            y_batch = y_train_binary[batch_indices]\n            \n            # Predict probabilities\n            preds = sigmoid(X_batch @ w)\n            \n            # Compute gradient (mean gradient over the mini-batch)\n            grad = X_batch.T @ (preds - y_batch) / len(X_batch)\n            \n            # Update weights\n            w -= learning_rate * grad\n    \n    # Predict on X_test\n    test_preds_prob = sigmoid(X_test_aug @ w)\n    # Convert probabilities to binary predictions using threshold 0.5\n    test_preds_binary = (test_preds_prob >= 0.5).astype(int)\n    \n    # Map binary predictions back to original labels\n    test_preds = [binary_to_label(b) for b in test_preds_binary]\n    \n    return test_preds"}
{"task_id": 176, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Train an AdaBoost classifier from scratch using decision stumps as weak learners,\n    and return predictions for X_test as a list of {0,1}.\n    \n    A decision stump is defined by:\n      - feature_index (which column to split)\n      - threshold\n      - polarity: \n          +1 means predict +1 for feature < threshold, otherwise \u20131\n          \u20131 means predict +1 for feature >= threshold, otherwise \u20131\n\n    The labels in y_train are assumed to be {0,1}, internally converted to {\u20131,+1}.\n    The returned predictions for X_test are in {0,1}.\n    \"\"\"\n    # Convert to NumPy arrays\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=int)\n    X_test_np = np.array(X_test, dtype=float)\n\n    # Convert labels from {0,1} to {\u20131,+1} for internal use\n    y_train_m1p1 = np.where(y_train_np == 1, 1, -1)\n    n_samples, n_features = X_train_np.shape\n\n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples)\n\n    # To store the stumps and their weights (alpha)\n    stumps = []\n\n    # --- Helper function: predict with a given stump ---\n    def stump_predict(feature_values, threshold, polarity):\n        \"\"\"\n        Returns +1 or \u20131 for each sample in feature_values, \n        based on polarity and threshold.\n        \"\"\"\n        if polarity == 1:\n            # +1 for values < threshold, \u20131 otherwise\n            return np.where(feature_values < threshold, 1, -1)\n        else:\n            # +1 for values >= threshold, \u20131 otherwise\n            return np.where(feature_values >= threshold, 1, -1)\n\n    # --- Main Boosting Loop ---\n    for _ in range(n_estimators):\n        # We will search for the best stump that minimizes the weighted error.\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_pred = None  # store the predictions of the best stump\n\n        for feature_idx in range(n_features):\n            values = X_train_np[:, feature_idx]\n            # Get unique thresholds to consider\n            unique_vals = np.unique(values)\n            \n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    # Get stump predictions for the current candidate\n                    preds = stump_predict(values, threshold, polarity)\n                    # Weighted error = sum of w_i for misclassified samples\n                    misclassified = (preds != y_train_m1p1)\n                    error = np.sum(w[misclassified])\n\n                    # Tie-breaking: \n                    #  1) smaller error\n                    #  2) smaller feature index\n                    #  3) smaller threshold\n                    #  4) polarity = +1 before \u20131\n                    # We will check error first, then feature_idx, then threshold, then polarity.\n                    # Because we loop in increasing order of feature_idx, threshold, and polarity = [1, -1],\n                    # we can do a simple consistent check:\n                    if (error < best_error or\n                       (np.isclose(error, best_error) and feature_idx < best_feature) or\n                       (np.isclose(error, best_error) and feature_idx == best_feature \n                        and threshold < best_threshold) or\n                       (np.isclose(error, best_error) and feature_idx == best_feature \n                        and np.isclose(threshold, best_threshold) and polarity == 1 and best_polarity == -1)):\n                        best_error = error\n                        best_feature = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_pred = preds\n\n        # Compute the stump's vote weight alpha_t\n        # Add a tiny constant to denominator in case best_error=0\n        alpha = 0.5 * np.log((1.0 - best_error) / (best_error + 1e-10))\n\n        # Store the best stump\n        stumps.append((best_feature, best_threshold, best_polarity, alpha))\n\n        # Update sample weights:\n        # w_i <- w_i * exp( - alpha_t * y_i * h_t(x_i) ), then normalize\n        w *= np.exp(-alpha * y_train_m1p1 * best_pred)\n        w /= np.sum(w)  # normalize\n\n        # If we found a perfect stump (error=0), we can stop early\n        if best_error == 0.0:\n            break\n\n    # --- Inference for X_test ---\n    # For each test sample, compute the sum of alpha_t * h_t(x),\n    # then take the sign, and map {\u20131 \u2192 0, +1 \u2192 1}.\n    agg = np.zeros(X_test_np.shape[0])\n    for (f_idx, thr, pol, alpha_t) in stumps:\n        preds_test = stump_predict(X_test_np[:, f_idx], thr, pol)\n        agg += alpha_t * preds_test\n\n    # Convert aggregated sign back to {0,1}\n    # sign(agg) = +1 => 1, sign(agg) = \u20131 => 0\n    final_preds = np.where(agg >= 0.0, 1, 0)\n\n    # Return a plain Python list\n    return final_preds.tolist()"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n\n    # Return -1 if any argument is non-positive\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # PSO parameters\n    w = 0.5      # inertia weight\n    c1 = 1.5     # cognitive weight\n    c2 = 1.5     # social weight\n    \n    # Initialisation of positions and velocities in [-1, 1]\n    positions = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n\n    # Sphere function\n    def sphere(x):\n        return np.sum(np.square(x), axis=-1)\n    \n    # Personal best data\n    pbest_positions = positions.copy()\n    pbest_scores = sphere(positions)  # evaluate sphere for all particles\n    \n    # Global best data\n    gbest_index = np.argmin(pbest_scores)\n    gbest_position = pbest_positions[gbest_index].copy()\n    gbest_score = pbest_scores[gbest_index]\n    \n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocity and position of each particle\n        r1 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        r2 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        \n        velocities = (w * velocities\n                      + c1 * r1 * (pbest_positions - positions)\n                      + c2 * r2 * (gbest_position - positions))\n        \n        positions = positions + velocities\n        positions = np.clip(positions, -1.0, 1.0)\n        \n        # Evaluate new fitness\n        fitness = sphere(positions)\n        \n        # Update personal and global best\n        better_mask = fitness < pbest_scores\n        pbest_scores[better_mask] = fitness[better_mask]\n        pbest_positions[better_mask] = positions[better_mask]\n        \n        new_gbest_index = np.argmin(pbest_scores)\n        if pbest_scores[new_gbest_index] < gbest_score:\n            gbest_score = pbest_scores[new_gbest_index]\n            gbest_position = pbest_positions[new_gbest_index].copy()\n    \n    return round(gbest_score, 4)\n```\n"}
{"task_id": 180, "completion_id": 0, "completion": "import numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if n_train == 0:\n        return []\n\n    # If k is 0 or greater than the number of training samples, use all training samples\n    if k == 0 or k > n_train:\n        k = n_train\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(sum((a - b)**2 for a, b in zip(x1, x2)))\n\n    predictions = []\n    for x_test in X_test:\n        # Compute distances to all training points\n        distances = [(euclidean_distance(x_test, x_train), idx)\n                     for idx, x_train in enumerate(X_train)]\n        # Sort by distance and select the indices of the k smallest\n        distances.sort(key=lambda d: d[0])\n        k_indices = [idx for _, idx in distances[:k]]\n\n        # Gather the corresponding y values\n        neighbors = [y_train[idx] for idx in k_indices]\n\n        if task == \"regression\":\n            # Mean of neighbors, rounding to 4 decimals\n            mean_val = sum(neighbors) / len(neighbors)\n            predictions.append(round(mean_val, 4))\n        else:  # classification\n            # Use majority voting; in case of ties, choose the smallest label\n            counter = Counter(neighbors)\n            max_count = max(counter.values())\n            # All labels with the max count\n            candidates = [lbl for lbl, cnt in counter.items() if cnt == max_count]\n            # Pick the smallest in standard Python ordering\n            predictions.append(min(candidates))\n\n    return predictions"}
{"task_id": 184, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"\n    Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    # -----------------------------\n    # Helper Functions / Classes\n    # -----------------------------\n\n    class Node:\n        \"\"\"Tree node storing feature, threshold, children, or a leaf value.\"\"\"\n        def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n            # If value is not None, this node is a leaf\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n        def is_leaf_node(self):\n            return self.value is not None\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        \"\"\"Compute Gini impurity for a 1D array of class labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        freqs = counts / len(labels)\n        return 1.0 - np.sum(freqs ** 2)\n\n    def majority_class(labels: np.ndarray) -> int:\n        \"\"\"Return the majority class label in the given array.\"\"\"\n        return np.bincount(labels).argmax()\n\n    def find_best_split(X: np.ndarray, y: np.ndarray):\n        \"\"\"\n        Find the best (feature, threshold) split based on Gini gain.\n        Returns (best_feature, best_threshold, best_gain).\n        If no split improves Gini, returns (None, None, 0).\n        \"\"\"\n        n_samples, n_features = X.shape\n        if n_samples <= 1:\n            return None, None, 0\n\n        parent_gini = gini_impurity(y)\n        best_gain = 0.0\n        best_feature = None\n        best_threshold = None\n\n        for feature_idx in range(n_features):\n            # Sort data by the current feature\n            sorted_indices = np.argsort(X[:, feature_idx])\n            x_sorted = X[sorted_indices, feature_idx]\n            y_sorted = y[sorted_indices]\n\n            # Explore midpoints between consecutive distinct values\n            for i in range(1, n_samples):\n                # If consecutive points are the same, skip\n                if x_sorted[i] == x_sorted[i - 1]:\n                    continue\n                # Threshold = midpoint between these two consecutive feature values\n                threshold = (x_sorted[i] + x_sorted[i - 1]) / 2.0\n\n                # Split into left / right\n                left_mask = x_sorted <= threshold\n                right_mask = ~left_mask\n\n                y_left, y_right = y_sorted[left_mask], y_sorted[right_mask]\n                if len(y_left) == 0 or len(y_right) == 0:\n                    # If a split produces an empty child, can't use this threshold\n                    # (the node becomes a leaf instead)\n                    continue\n\n                # Compute weighted children gini\n                left_gini = gini_impurity(y_left)\n                right_gini = gini_impurity(y_right)\n                weighted_child_gini = (len(y_left) / n_samples) * left_gini \\\n                                      + (len(y_right) / n_samples) * right_gini\n\n                gain = parent_gini - weighted_child_gini\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n\n        return best_feature, best_threshold, best_gain\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int = 0) -> Node:\n        \"\"\"\n        Recursively build a decision tree node.\n        \"\"\"\n        # Stopping criterion 1: all labels identical\n        if len(np.unique(y)) == 1:\n            return Node(value=y[0])\n\n        # Stopping criterion 2: max_depth reached\n        if max_depth is not None and depth >= max_depth:\n            return Node(value=majority_class(y))\n\n        # Find best split\n        feature, threshold, gain = find_best_split(X, y)\n\n        # Stopping criterion 3: no further gain\n        if gain == 0 or feature is None:\n            return Node(value=majority_class(y))\n\n        # Partition the data\n        left_indices = X[:, feature] <= threshold\n        right_indices = ~left_indices\n\n        # If either side is empty, make a leaf\n        if not np.any(left_indices) or not np.any(right_indices):\n            return Node(value=majority_class(y))\n\n        # Recursively build children\n        left_child = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return Node(feature=feature, threshold=threshold, left=left_child, right=right_child)\n\n    def predict_row(x: np.ndarray, node: Node) -> int:\n        \"\"\"Traverse the tree and predict the class for a single sample x.\"\"\"\n        # If leaf node, return its value\n        if node.is_leaf_node():\n            return node.value\n\n        # Otherwise, go left or right\n        if x[node.feature] <= node.threshold:\n            return predict_row(x, node.left)\n        else:\n            return predict_row(x, node.right)\n\n    # -----------------------------\n    # Main Logic\n    # -----------------------------\n\n    # Build the tree\n    root = build_tree(X_train, y_train, depth=0)\n\n    # Predict on X_test\n    predictions = []\n    for x in X_test:\n        pred = predict_row(x, root)\n        predictions.append(int(pred))  # ensure int\n\n    return predictions"}
{"task_id": 190, "completion_id": 0, "completion": "import numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n\n    # Convert X, y to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    \n    # If all labels are the same, no valid split\n    unique_labels = np.unique(y)\n    if len(unique_labels) == 1:\n        # Compute G of the whole dataset (which is 0 if there's only one class)\n        G_whole = 1.0 - 1.0  # Because p_k=1 => 1 - 1^2 = 0\n        return (-1, None, round(G_whole, 4))\n\n    # -- Helper function to compute Gini impurity of a node (set of labels) --\n    def gini_impurity(labels):\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return 1.0 - np.sum(p**2)\n\n    # Compute the Gini of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    # Prepare to track the best split\n    best_score = float('inf')\n    best_feature = -1\n    best_threshold = None\n\n    # For each feature, consider splits at each unique value\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_vals = np.unique(feature_values)\n        \n        # Try every unique threshold\n        for v in unique_vals:\n            left_mask = feature_values <= v\n            right_mask = feature_values > v\n\n            # Skip if either child is empty\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n\n            # Compute Gini for left and right subsets\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            G_left = gini_impurity(y_left)\n            G_right = gini_impurity(y_right)\n\n            n_left = len(y_left)\n            n_right = len(y_right)\n            n_total = n_left + n_right\n\n            # Weighted Gini impurity of the split\n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n\n            # Tie-breaking and improvement check\n            diff = best_score - G_split\n            if diff > 1e-12:\n                # Found strictly better split\n                best_score = G_split\n                best_feature = j\n                best_threshold = v\n            elif abs(diff) < 1e-12:\n                # Check tie-breaking rules:\n                # 1) Smaller feature index\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = v\n                    best_score = G_split\n                elif j == best_feature:\n                    # 2) Smaller threshold value\n                    if v < best_threshold:\n                        best_threshold = v\n                        best_score = G_split\n\n    # If best_feature remains -1 => no valid split\n    if best_feature == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature, best_threshold, round(best_score, 4))"}
{"task_id": 191, "completion_id": 0, "completion": "import numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    valid_names = {\"euclidean\", \"manhattan\", \"chebyshev\", \"cosine\"}\n\n    def distance_fn(x, y):\n        # 1) Check if metric name is valid\n        if name not in valid_names:\n            return -1\n\n        # 2) Convert inputs to float arrays, handling potential errors\n        try:\n            x_arr = np.asarray(x, dtype=float)\n            y_arr = np.asarray(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n\n        # 3) Check that both arrays are one-dimensional\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return -1\n\n        # 4) Check non-empty and same length\n        if (x_arr.size == 0 or y_arr.size == 0 or x_arr.size != y_arr.size):\n            return -1\n\n        # 5) Compute distance based on the metric\n        if name == \"euclidean\":\n            dist = np.sqrt(np.sum((x_arr - y_arr) ** 2))\n        elif name == \"manhattan\":\n            dist = np.sum(np.abs(x_arr - y_arr))\n        elif name == \"chebyshev\":\n            dist = np.max(np.abs(x_arr - y_arr))\n        elif name == \"cosine\":\n            # Check for zero norms\n            norm_x = np.linalg.norm(x_arr)\n            norm_y = np.linalg.norm(y_arr)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            # Cosine distance = 1 - (x\u00b7y / (||x|| * ||y||))\n            dist = 1 - (np.dot(x_arr, y_arr) / (norm_x * norm_y))\n        else:\n            # Should never reach here, but just in case\n            return -1\n\n        return round(dist, 4)\n\n    return distance_fn"}
{"task_id": 197, "completion_id": 0, "completion": ""}
{"task_id": 198, "completion_id": 0, "completion": "import numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"\n    Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of documents:\n    D = len(phi)\n    if D == 0:\n        # Edge case: empty corpus, return all zeros of shape VxT\n        return [[0.0 for _ in range(0)] for _ in range(V)]\n\n    # Number of topics (T) from the shape of phi for the first document.\n    # (Assumes all documents have the same number of topics.)\n    T = phi[0].shape[1]\n\n    # Accumulate counts into a V x T array\n    # B[v, t] = sum_{d,n} phi[d][n,t] * [w_d_n = v]\n    B = np.zeros((V, T), dtype=float)\n\n    # Fill B based on phi and corpus\n    for d, doc in enumerate(corpus):\n        # phi[d] has shape (N_d, T)\n        for n, w in enumerate(doc):\n            # Add the topic-proportions for this token to row w\n            B[w, :] += phi[d][n, :]\n\n    # Now normalize each topic column so that columns sum to 1\n    for t in range(T):\n        col_sum = B[:, t].sum()\n        if col_sum > 0.0:\n            B[:, t] /= col_sum\n        else:\n            # If col_sum is zero, that means no tokens were assigned to this topic,\n            # so we can either leave it at all zeros (which won't sum to 1),\n            # or (less commonly in pure ML-LDA) assign a uniform distribution\n            # among the words that do occur in the corpus. However, the\n            # instruction demands each column to sum to 1, so the usual fallback\n            # is to make it uniform over *all* words that appear at least once:\n            # Identify used words (rows where B[v,:] is nonzero in *any* topic).\n            # Or if you wish truly pure ML with no smoothing, you can leave it at zero,\n            # but that contradicts \"must sum to one\".\n            \n            # Here we go uniform over words that appear at least once:\n            # (Your instructor may or may not require this fallback.)\n            nonzero_rows = (B.sum(axis=1) > 0.0)\n            used_count = np.count_nonzero(nonzero_rows)\n            if used_count > 0:\n                B[nonzero_rows, t] = 1.0 / used_count\n\n    # Convert to Python list of lists and round to 4 decimals\n    beta_list = []\n    for v in range(V):\n        row_list = []\n        for t in range(T):\n            row_list.append(round(B[v, t], 4))\n        beta_list.append(row_list)\n\n    return beta_list"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    # Precompute all pairwise Euclidean distances to speed up cost calculations\n    n_samples = X.shape[0]\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            diff = X[i] - X[j]\n            dist_matrix[i, j] = np.sqrt(np.dot(diff, diff))  # Euclidean distance\n\n    # Helper function to compute total cost given a set of medoids\n    # The cost is the sum of the distance of each sample to its closest medoid\n    def compute_total_cost(medoids: list[int]) -> float:\n        total = 0.0\n        for i in range(n_samples):\n            # distance to the first medoid\n            min_dist = dist_matrix[i, medoids[0]]\n            for m in medoids[1:]:\n                if dist_matrix[i, m] < min_dist:\n                    min_dist = dist_matrix[i, m]\n            total += min_dist\n        return total\n\n    # Start with the first k points as medoids\n    medoids = list(range(k))\n    current_cost = compute_total_cost(medoids)\n\n    # Attempt to improve the set of medoids by swapping\n    while True:\n        best_improvement = 0.0\n        best_swap = None\n\n        # Try swapping each medoid with each non-medoid sample\n        for medoid_idx in range(k):\n            for candidate in range(n_samples):\n                if candidate not in medoids:\n                    # Propose a swap: replace medoids[medoid_idx] with candidate\n                    new_medoids = medoids.copy()\n                    new_medoids[medoid_idx] = candidate\n\n                    new_cost = compute_total_cost(new_medoids)\n                    improvement = current_cost - new_cost\n                    if improvement > best_improvement:\n                        best_improvement = improvement\n                        best_swap = (medoid_idx, candidate)\n\n        # If no swap yields an improvement, we are done\n        if best_improvement <= 0:\n            break\n\n        # Otherwise, perform the best swap and update the cost\n        i_swap, cand_swap = best_swap\n        medoids[i_swap] = cand_swap\n        current_cost -= best_improvement\n\n    # After convergence, assign cluster labels\n    labels = []\n    for i in range(n_samples):\n        # Find the closest medoid (with tie broken by order in medoids list)\n        best_label = 0\n        min_dist = dist_matrix[i, medoids[0]]\n        for idx_m, m in enumerate(medoids[1:], start=1):\n            if dist_matrix[i, m] < min_dist:\n                min_dist = dist_matrix[i, m]\n                best_label = idx_m\n        labels.append(best_label)\n\n    return labels\n```\n"}
{"task_id": 216, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # -------------------------------------------------------------------------\n    # Helper function: polynomial feature expansion (no cross-terms), i.e.\n    # for each feature x_j, generate x_j^1, x_j^2, ..., x_j^degree.\n    # -------------------------------------------------------------------------\n    def polynomial_expansion(X, degree):\n        # X is NxM\n        # Output shape will be Nx(M * degree)\n        N, M = X.shape\n        X_poly = []\n        for i in range(N):\n            row_poly = []\n            for m in range(M):\n                # Generate powers for X[i, m]\n                for p in range(1, degree+1):\n                    row_poly.append(X[i, m] ** p)\n            X_poly.append(row_poly)\n        return np.array(X_poly, dtype=float)\n\n    # -------------------------------------------------------------------------\n    # Convert inputs to numpy arrays if they are lists, and check shapes.\n    # -------------------------------------------------------------------------\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float).flatten()\n    x_test  = np.array(x_test, dtype=float)\n    \n    # Basic checks on shapes and n_iterations\n    if n_iterations < 1:\n        return -1\n    if x_train.ndim != 2 or x_test.ndim != 2:\n        return -1\n    if y_train.ndim != 1:\n        return -1\n    # x_train is NxM, x_test is KxM; check M match\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # -------------------------------------------------------------------------\n    # 1) Polynomial expansion\n    # -------------------------------------------------------------------------\n    if degree < 1:\n        return -1\n    X_train_poly = polynomial_expansion(x_train, degree)\n    X_test_poly  = polynomial_expansion(x_test,  degree)\n    \n    # -------------------------------------------------------------------------\n    # 2) Standard-score (zero-mean, unit-variance) every feature (after poly),\n    #    ignoring the bias which we'll add later.\n    # -------------------------------------------------------------------------\n    train_mean = X_train_poly.mean(axis=0)\n    train_std  = X_train_poly.std(axis=0)\n    # To avoid division by zero, replace zeros in std with 1.0\n    train_std[train_std == 0] = 1.0\n    \n    X_train_std = (X_train_poly - train_mean) / train_std\n    X_test_std  = (X_test_poly  - train_mean) / train_std\n    \n    # -------------------------------------------------------------------------\n    # 3) Build the final design matrices (add a column of 1's for bias).\n    # -------------------------------------------------------------------------\n    N_train = X_train_std.shape[0]\n    N_test  = X_test_std.shape[0]\n    \n    # Add bias column (ones)\n    X_train_final = np.hstack([np.ones((N_train, 1)), X_train_std])\n    X_test_final  = np.hstack([np.ones((N_test, 1)),  X_test_std])\n    \n    # Targets\n    y_train = y_train.reshape(-1)  # ensure shape (N,)\n    \n    # -------------------------------------------------------------------------\n    # 4) Train the model for exactly n_iterations usingbatch gradient descent\n    #    MSE + Elastic Net penalty: alpha * [(1-l1_ratio)/2 * L2 + l1_ratio * L1]\n    # -------------------------------------------------------------------------\n    # Initialize weights (w) to zeros\n    n_features = X_train_final.shape[1]  # includes bias\n    w = np.zeros(n_features)\n    \n    # Precompute factor for the MSE gradient\n    N_float = float(N_train)\n    \n    for _ in range(n_iterations):\n        # Predictions\n        y_pred = X_train_final.dot(w)\n        errors = y_pred - y_train\n        \n        # Gradient from MSE part: d/d w_j of (1/N * sum of squares) => (2/N) * X^T * errors\n        # We'll compute the whole MSE gradient first, then add reg terms for j>0 (no bias)\n        mse_grad = (2.0 / N_float) * (X_train_final.T.dot(errors))\n        \n        # Add regularization terms for j >= 1 only (ignore bias at j=0)\n        for j in range(1, n_features):\n            # L2 part (Ridge)\n            mse_grad[j] += reg_factor * (1.0 - l1_ratio) * w[j]\n            # L1 part (Lasso), subgradient sign(w[j]) with sign(0)=0\n            mse_grad[j] += reg_factor * l1_ratio * np.sign(w[j])\n        \n        # Gradient update\n        w -= learning_rate * mse_grad\n    \n    # -------------------------------------------------------------------------\n    # 5) Predict on x_test set\n    # -------------------------------------------------------------------------\n    y_test_pred = X_test_final.dot(w)\n    \n    # -------------------------------------------------------------------------\n    # Round to 4 decimal places and return as python list\n    # -------------------------------------------------------------------------\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.asarray(actual, dtype=float)\n    predicted = np.asarray(predicted, dtype=float)\n    \n    # Compute the probability (sigmoid) for each prediction\n    prob = 1.0 / (1.0 + np.exp(-predicted))\n    \n    # Compute the gradient: grad_i = actual_i * sigmoid(-actual_i * predicted_i)\n    grad = actual * (1.0 / (1.0 + np.exp(actual * predicted)))\n    \n    # Compute the Hessian: hess_i = prob_i * (1 - prob_i)\n    hess = prob * (1.0 - prob)\n    \n    # Round all values to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    \n    # Convert back to plain Python lists\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "completion": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def best_score(hand: list[int]) -> int:\n        \"\"\"Return the best blackjack score for a hand, counting at most one Ace as 11 if beneficial.\"\"\"\n        total = sum(hand)\n        # Count one Ace as 11 instead of 1 if it doesn't cause a bust\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Return True if the hand is exactly two cards: one Ace and one Ten-value card.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_score = best_score(player)\n    dealer_score = best_score(dealer)\n\n    # 1. Player bust\n    if player_score > 21:\n        return -1.0\n\n    # 2. Dealer bust (player did not bust)\n    if dealer_score > 21:\n        return 1.0\n\n    # 3. Compare scores\n    if player_score > dealer_score:\n        # 4. Check if player has a natural blackjack\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 221, "completion_id": 0, "completion": "import numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors using NumPy arrays.\n\n    This function assumes valid inputs (same shape and non-negative).\n    \"\"\"\n    arr_actual = np.asarray(actual)\n    arr_pred = np.asarray(predicted)\n    # Use log1p(x) which is equivalent to log(1 + x)\n    return np.square(np.log1p(arr_actual) - np.log1p(arr_pred))\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE, rounded to 4 decimals.  If the inputs are invalid, returns -1.\n    \"\"\"\n    # Convert to NumPy arrays\n    arr_actual = np.asarray(actual)\n    arr_pred = np.asarray(predicted)\n\n    # 1) Check if shapes match\n    if arr_actual.shape != arr_pred.shape:\n        return -1\n\n    # 2) Check for non-negativity\n    if np.any(arr_actual < 0) or np.any(arr_pred < 0):\n        return -1\n\n    # Calculate element-wise squared log errors\n    errors = squared_log_error(arr_actual, arr_pred)\n\n    # Compute mean\n    msle_value = np.mean(errors)\n\n    # Return rounded to 4 decimals\n    return float(round(msle_value, 4))"}
{"task_id": 222, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same nested structure.\n    \"\"\"\n    \n    # Helper function to compute sigmoid for a single (scalar) value in a numerically stable way:\n    def _sigmoid_scalar(x):\n        if x >= 0:\n            return 1.0 / (1.0 + np.exp(-x))\n        else:\n            # Equivalent to: 1 - 1/(1 + exp(x))\n            return np.exp(x) / (1.0 + np.exp(x))\n    \n    # Check if the input is a scalar\n    if np.isscalar(z):\n        # Directly compute numerically stable sigmoid for a single value\n        return round(_sigmoid_scalar(float(z)), 4)\n    else:\n        # Convert to NumPy array (float type), compute piecewise\n        arr = np.array(z, dtype=float)\n        \n        # Allocate result array\n        res = np.empty_like(arr, dtype=float)\n        \n        # Masks for positive and negative entries\n        pos_mask = arr >= 0\n        neg_mask = ~pos_mask\n        \n        # For z >= 0\n        res[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n        \n        # For z < 0\n        # = exp(z) / (1 + exp(z)), more stable for large negative values\n        exp_z = np.exp(arr[neg_mask])\n        res[neg_mask] = exp_z / (1.0 + exp_z)\n        \n        # Round element-wise to 4 decimals and return as Python list\n        return np.round(res, 4).tolist()"}
{"task_id": 224, "completion_id": 0, "completion": "import numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to a numpy array (handles scalars, lists, ndarrays uniformly)\n    arr = np.asarray(z, dtype=float)\n    \n    # Apply Leaky ReLU: x if x >= 0 else a*x\n    arr = np.where(arr >= 0, arr, a*arr)\n    \n    # Convert back to a Python list with the same nested structure\n    return arr.tolist()"}
{"task_id": 226, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element is either -1 or 1\n        indicating the predicted class label.\n    \"\"\"\n    # Make sure y_train is a column vector of 1D\n    y_train = y_train.flatten()\n    n_samples, n_features = X_train.shape\n\n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples)\n\n    # This list will hold (feature_index, threshold, polarity, alpha) for each stump\n    stumps = []\n\n    # For each iteration of boosting...\n    for _ in range(n_clf):\n        # We will search for the best stump (lowest error)\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = 1\n        min_error = float('inf')\n\n        # Loop over all features\n        for feature_idx in range(n_features):\n            feature_vals = X_train[:, feature_idx]\n            # Possible thresholds can be the (unique) values in feature_vals\n            # but let's also consider midpoints between distinct sorted values\n            # for better separation. Here, we'll just use the unique values for simplicity.\n            unique_vals = np.unique(feature_vals)\n\n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    # Predict using this stump\n                    # polarity = 1 => below threshold => -1, else +1\n                    # polarity = -1 => below threshold => +1, else -1\n                    preds = np.ones(n_samples)  # default +1\n                    if polarity == 1:\n                        preds[feature_vals < threshold] = -1\n                    else:\n                        preds[feature_vals < threshold] = 1\n\n                    # Compute weighted error\n                    mismatch = (preds != y_train).astype(float)\n                    error = np.sum(w * mismatch)\n\n                    # Save the best (lowest) error stump parameters\n                    if error < min_error:\n                        min_error = error\n                        best_feature_index = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Compute the alpha (learner weight)\n        # tiny constant to avoid division by zero\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n\n        # Store the stump parameters\n        stumps.append((best_feature_index, best_threshold, best_polarity, alpha))\n\n        # Update sample weights\n        # Recompute predictions with the chosen stump\n        feature_vals = X_train[:, best_feature_index]\n        stump_preds = np.ones(n_samples)\n        if best_polarity == 1:\n            stump_preds[feature_vals < best_threshold] = -1\n        else:\n            stump_preds[feature_vals < best_threshold] = 1\n\n        # multiply w by exp(-alpha y_i h_i(x_i)), then normalize\n        w *= np.exp(-alpha * y_train * stump_preds)\n        w /= np.sum(w)\n\n    # Now predict on X_test\n    y_pred = []\n    for x in X_test:\n        # For each test sample, sum alpha * h_i(x) across all stumps\n        stump_sum = 0.0\n        for (feature_idx, threshold, polarity, alpha) in stumps:\n            # Single stump prediction for x\n            val = x[feature_idx]\n            stump_prediction = 1.0\n            if polarity == 1:\n                if val < threshold:\n                    stump_prediction = -1.0\n            else:\n                if val < threshold:\n                    stump_prediction = 1.0\n                else:\n                    stump_prediction = -1.0\n                    # Note: The else can be removed if strictly using sign logic,\n                    # but included for clarity. As is, it flips the label if val >= threshold.\n                    # However, be consistent with how you tested on the training set.\n\n            stump_sum += alpha * stump_prediction\n\n        # Take the sign of the sum (handle sign(0) as +1, or you can define otherwise)\n        # We'll define sign(0) = +1 for safety\n        label = 1 if stump_sum >= 0 else -1\n        y_pred.append(label)\n\n    return y_pred"}
{"task_id": 241, "completion_id": 0, "completion": "import numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    # 1) Shape must have at least two dimensions\n    if len(shape) < 2:\n        return -1\n\n    d0 = shape[0]\n    # Product of remaining dimensions\n    rest = 1\n    for s in shape[1:]:\n        rest *= s\n\n    # 2) Create a matrix A of shape (d0, rest) with i.i.d. standard normal samples\n    A = np.random.randn(d0, rest)\n\n    # 3) Compute \"economy\" SVD (full_matrices=False ensures the shapes we need)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # 4) Choose the factor that matches A's shape\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # 5) Reshape Q back to the requested shape and multiply by scale\n    Q_reshaped = Q.reshape(shape)\n    result = (scale * Q_reshaped).tolist()\n\n    return result"}
{"task_id": 243, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Because all weights = 1 and all biases = 0, the outputs can be computed as follows:\n        1) z1 = ReLU(s\u2080 + s\u2081 + s\u2082)\n        2) z2 = 4 * z1\n        3) z3 = 4 * z2 = 16 * z1\n        4) logits = 4 * z3 = 64 * z1  (identical for each of the 3 actions)\n        5) action_probs = Softmax(logits) = [1/3, 1/3, 1/3] \n           (all identical logits give equal probabilities)\n        6) state_value = 4 * z3 = 64 * z1\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s_sum = sum(state)\n    z1 = max(0, s_sum)      # ReLU(s0 + s1 + s2)\n    # Since all three logits are identical, each action probability = 1/3\n    action_probs = [1/3, 1/3, 1/3]\n    # State value is 64 * z1\n    state_value = 64 * z1\n\n    # Round results to 4 decimals\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n\n    return action_probs, state_value"}
{"task_id": 249, "completion_id": 0, "completion": "import numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"\n    Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is:\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n          \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n          \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list of floats representing the current environment state.\n        params: Dictionary with the following keys (each entry is a Python list\n                that describes a NumPy-compatible array):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 the three shared layers\n                 'Wa', 'ba'                        \u2013 actor head\n                 'Wc', 'bc'                        \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n\n    Note:\n        All values (probabilities and critic value) are rounded to four\n        decimal places. If a rounded result is exactly 0 or 1, it is returned\n        with a single decimal place (e.g. 0.0, 1.0).\n    \"\"\"\n\n    # Helper function: Rectified Linear Unit\n    def relu(x: np.ndarray) -> np.ndarray:\n        return np.maximum(0, x)\n\n    # Helper function for rounding according to the specification\n    def custom_round(x: float) -> float:\n        r = round(x, 4)\n        # If the rounded result is exactly 0 or 1, keep single decimal place\n        if r == 0.0:\n            return 0.0\n        elif r == 1.0:\n            return 1.0\n        else:\n            return r\n\n    # Convert the input state to a NumPy array of shape (hidden_dim,)\n    x = np.array(state, dtype=np.float64)\n\n    # Convert all parameter lists to NumPy arrays\n    W1 = np.array(params['W1'], dtype=np.float64)\n    b1 = np.array(params['b1'], dtype=np.float64)\n    W2 = np.array(params['W2'], dtype=np.float64)\n    b2 = np.array(params['b2'], dtype=np.float64)\n    W3 = np.array(params['W3'], dtype=np.float64)\n    b3 = np.array(params['b3'], dtype=np.float64)\n    Wa = np.array(params['Wa'], dtype=np.float64)\n    ba = np.array(params['ba'], dtype=np.float64)\n    Wc = np.array(params['Wc'], dtype=np.float64)\n    bc = np.array(params['bc'], dtype=np.float64)\n\n    # ----- Shared layers -----\n    # 1. Dense \u2192 ReLU\n    h1 = relu(x @ W1 + b1)\n    # 2. Dense \u2192 ReLU\n    h2 = relu(h1 @ W2 + b2)\n    # 3. Dense \u2192 ReLU\n    h3 = relu(h2 @ W3 + b3)\n\n    # ----- Actor head -----\n    # a) Dense\n    actor_scores = h3 @ Wa + ba\n    # b) soft-max\n    #   (subtract max for numerical stability, though optional in pure numpy)\n    shifted_scores = actor_scores - np.max(actor_scores)\n    exp_scores = np.exp(shifted_scores)\n    probs = exp_scores / np.sum(exp_scores)\n\n    # ----- Critic head -----\n    critic_value = float(h3 @ Wc + bc)\n\n    # ----- Rounding -----\n    rounded_probs = [custom_round(p) for p in probs]\n    rounded_value = custom_round(critic_value)\n\n    return (rounded_probs, rounded_value)"}
{"task_id": 253, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if 'gradient' is False; list[float] if 'gradient' is True.\n    \"\"\"\n    w = np.asarray(w, dtype=float)\n    \n    if gradient:\n        # Gradient: alpha * [lambda * sign(w) + (1 - lambda) * w]\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]\n    else:\n        # Penalty: alpha * [lambda * ||w||_1 + (1 - lambda) * 0.5 * ||w||_2^2]\n        penalty = alpha * (l1_ratio * np.sum(np.abs(w)) + \n                           (1 - l1_ratio) * 0.5 * np.sum(w**2))\n        return round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "completion": "import numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"\n    Numerically estimate the gradient of an RNN parameter using centred\n    finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                      method (single time-step) and a ``flush_gradients``\n                      method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                      loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                      be redirected to the lower-case keys.  If the name is\n                      \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # If the parameter is non-trainable, return None\n    if param_name in (\"X\", \"y\"):\n        return None\n\n    # Redirect \"Ba\" -> \"ba\" and \"Bx\" -> \"bx\"\n    if param_name in (\"Ba\", \"Bx\"):\n        param_name = param_name.lower()\n\n    # Retrieve the parameter array; if not present, nothing to do\n    if param_name not in model.parameters:\n        return None\n\n    param = model.parameters[param_name]\n    # Ensure double precision (float64) to reduce numerical artifacts\n    if param.dtype != np.float64:\n        model.parameters[param_name] = param.astype(np.float64)\n        param = model.parameters[param_name]\n\n    # Prepare array for numerical gradient\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Helper function to run the forward pass n_t times and compute loss\n    def compute_loss():\n        model.flush_gradients()\n        preds = []\n        for t in range(n_t):\n            preds.append(model.forward(X[:, :, t].astype(np.float64)))\n        return loss_func(preds)\n\n    # Iterate over every element of the parameter\n    it = np.ndindex(param.shape)\n    for idx in it:\n        old_val = param[idx]\n\n        # +epsilon\n        param[idx] = old_val + epsilon\n        L_plus = compute_loss()\n\n        # -epsilon\n        param[idx] = old_val - epsilon\n        L_minus = compute_loss()\n\n        # Restore original value\n        param[idx] = old_val\n\n        # Numerical gradient approximation\n        grads[idx] = (L_plus - L_minus) / (2.0 * epsilon)\n\n    # Return the transpose of the gradient array (standard .T reorders axes)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "completion": "import numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Safety check for n_clf\n    # -------------------------------------------------------------------------\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    \n    # -------------------------------------------------------------------------\n    # Initialize sample weights (D_1) uniformly\n    # -------------------------------------------------------------------------\n    D = np.ones(m) / m\n\n    # -------------------------------------------------------------------------\n    # A helper function to compute the predictions of a stump on a dataset\n    # stump format: (feature_index, threshold, polarity)\n    # polarity = 1 means \"predict +1 if x >= threshold, else -1\"\n    # polarity = -1 means \"predict -1 if x >= threshold, else +1\"\n    # -------------------------------------------------------------------------\n    def stump_predict(X_column, feature_idx, threshold, polarity):\n        # Allocate predictions\n        preds = np.ones(len(X_column), dtype=int)\n        if polarity == 1:\n            # if x < threshold, predict -1\n            preds[X_column < threshold] = -1\n        else:\n            # if x < threshold, predict +1, else -1\n            preds[X_column >= threshold] = -1\n        return preds\n\n    # -------------------------------------------------------------------------\n    # Function to find the best decision stump given current sample weights\n    # -------------------------------------------------------------------------\n    def build_stump(X, y, D):\n        \"\"\"\n        Returns the tuple (best_feature, best_threshold, best_polarity, min_error)\n        that yields the smallest weighted error.\n        \"\"\"\n        m, n = X.shape\n        best_feature = 0\n        best_threshold = 0.0\n        best_polarity = 1\n        min_error = float('inf')\n\n        for feature_idx in range(n):\n            X_col = X[:, feature_idx]\n\n            # Sort unique values to consider thresholds between them\n            unique_vals = np.unique(X_col)\n            # If there's only one unique value, consider that as a single threshold candidate\n            if len(unique_vals) == 1:\n                thresholds = unique_vals\n            else:\n                # mid-points between consecutive sorted unique values\n                thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2.0\n            \n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    y_pred = stump_predict(X_col, feature_idx, threshold, polarity)\n                    # Weighted error\n                    misclassified = (y_pred != y).astype(float)\n                    error = np.sum(D * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        return best_feature, best_threshold, best_polarity, min_error\n\n    # -------------------------------------------------------------------------\n    # Store each stump as a dictionary: {\"feature\", \"threshold\", \"polarity\", \"alpha\"}\n    # -------------------------------------------------------------------------\n    stumps = []\n\n    for _ in range(n_clf):\n        # 1) Find the best stump w.r.t current D\n        feat, thr, pol, err = build_stump(X_train, y_train, D)\n        # Avoid numerical errors in log(0)\n        err = max(err, 1e-10)\n        err = min(err, 1 - 1e-10)\n\n        # 2) Compute alpha\n        alpha = 0.5 * np.log((1 - err) / err)\n\n        # 3) Update D\n        # Make predictions with the chosen stump\n        predictions = np.ones(m, dtype=int)\n        if pol == 1:\n            predictions[X_train[:, feat] < thr] = -1\n        else:\n            predictions[X_train[:, feat] >= thr] = -1\n\n        # weight update: D_i <- D_i * exp(- alpha * y_i h_i)\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)  # normalize\n\n        stumps.append({\n            \"feature\": feat,\n            \"threshold\": thr,\n            \"polarity\": pol,\n            \"alpha\": alpha\n        })\n\n    # -------------------------------------------------------------------------\n    # Predict on X_test\n    # For each sample: sum alpha_t * h_t(x), then take the sign\n    # -------------------------------------------------------------------------\n    def stump_predict_single(x, stump):\n        # x is a single sample\n        # Return +1 or -1\n        feat = stump[\"feature\"]\n        thr  = stump[\"threshold\"]\n        pol  = stump[\"polarity\"]\n        val  = x[feat]\n        if pol == 1:\n            return 1 if val >= thr else -1\n        else:\n            return -1 if val >= thr else 1\n\n    y_pred_list = []\n    for x in X_test:\n        # sum alpha_t * h_t(x)\n        total = 0.0\n        for stump in stumps:\n            total += stump[\"alpha\"] * stump_predict_single(x, stump)\n        # sign of total => +1 or -1\n        label = 1 if total >= 0 else -1\n        y_pred_list.append(label)\n\n    return y_pred_list"}
{"task_id": 261, "completion_id": 0, "completion": "import numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Calculate fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        # for convolutional kernels: (out_channels, in_channels, k1, k2, \u2026)\n        receptive_field_size = np.prod(shape[2:])  # product of kernel dimensions\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Compute standard deviation for Gaussian\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Draw samples from normal(0, s)\n    return np.random.normal(loc=0.0, scale=s, size=shape).astype(float)"}
{"task_id": 266, "completion_id": 0, "completion": "from typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a lookup to know each vertex's index in V\n    index_map = {vertex: i for i, vertex in enumerate(V)}\n    \n    # Create a list of sets to temporarily hold neighbors (avoids duplicates)\n    adjacency_sets = [set() for _ in V]\n    \n    # Populate the adjacency sets (since the graph is undirected, add both ways)\n    for u, v in E:\n        adjacency_sets[index_map[u]].add(v)\n        adjacency_sets[index_map[v]].add(u)\n        \n    # Convert each set to a list, sorting by the order of appearance in V\n    G = [\n        sorted(neighbors, key=lambda x: index_map[x])\n        for neighbors in adjacency_sets\n    ]\n    \n    return G"}
{"task_id": 267, "completion_id": 0, "completion": "import numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample (not necessarily summing to 1).\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump with keys:\n            {\"feature_index\", \"threshold\", \"polarity\", \"weighted_error\"}.\n        The \"threshold\" and \"weighted_error\" are rounded to the nearest 4th decimal place.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": float('inf')\n    }\n\n    # Loop over all features\n    for j in range(n_features):\n        # Extract and sort the unique thresholds for the j-th feature\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        \n        # For each threshold candidate\n        for threshold in unique_values:\n            # Polarity = +1\n            # Predict +1 if x_{ij} < threshold, else -1\n            preds_p1 = np.where(feature_values < threshold, 1, -1)\n            errors_p1 = preds_p1 != y\n            weighted_err_p1 = np.sum(sample_weights[errors_p1])\n\n            # Check if it is the best so far\n            if weighted_err_p1 < best_stump[\"weighted_error\"]:\n                best_stump[\"feature_index\"] = j\n                best_stump[\"threshold\"] = threshold\n                best_stump[\"polarity\"] = 1\n                best_stump[\"weighted_error\"] = weighted_err_p1\n\n            # Polarity = -1\n            # Predict -1 if x_{ij} < threshold, else +1\n            preds_pneg = np.where(feature_values < threshold, -1, 1)\n            errors_pneg = preds_pneg != y\n            weighted_err_pneg = np.sum(sample_weights[errors_pneg])\n\n            # Check if it is the best so far\n            if weighted_err_pneg < best_stump[\"weighted_error\"]:\n                best_stump[\"feature_index\"] = j\n                best_stump[\"threshold\"] = threshold\n                best_stump[\"polarity\"] = -1\n                best_stump[\"weighted_error\"] = weighted_err_pneg\n\n    # Round the threshold and weighted_error to 4 decimals\n    best_stump[\"threshold\"]      = round(best_stump[\"threshold\"], 4)\n    best_stump[\"weighted_error\"] = round(best_stump[\"weighted_error\"], 4)\n\n    return best_stump"}
{"task_id": 273, "completion_id": 0, "completion": "import math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Helper function: compute Shannon entropy of a frequency distribution\n    # freq is a list/array of counts, total = sum(freq)\n    # H = - \u03a3 (p_i * log2(p_i)) for i in classes\n    # -------------------------------------------------------------------------\n    def compute_entropy(freq):\n        total = sum(freq)\n        if total == 0:\n            return 0.0\n        entropy = 0.0\n        for f in freq:\n            if f > 0:\n                p = f / total\n                entropy -= p * math.log2(p)\n        return entropy\n\n    # -------------------------------------------------------------------------\n    # 0) Basic checks: if feature or target is empty, no split possible\n    # -------------------------------------------------------------------------\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 1) Sort data by feature values\n    # -------------------------------------------------------------------------\n    data_sorted = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_x = [row[0] for row in data_sorted]\n    sorted_y = [row[1] for row in data_sorted]\n\n    # -------------------------------------------------------------------------\n    # 2) Check if all feature values are identical --> no legal thresholds\n    # -------------------------------------------------------------------------\n    if sorted_x[0] == sorted_x[-1]:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 3) Compute the \"parent\" entropy (i.e. entropy of all labels)\n    # -------------------------------------------------------------------------\n    total_counts = Counter(sorted_y)\n    parent_entropy = 0.0\n    for cnt in total_counts.values():\n        p = cnt / n\n        parent_entropy -= p * math.log2(p)\n\n    # If parent entropy is 0, all examples have the same class label\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 4) Prepare prefix counts: prefix_count[i][c] = how many of class c among\n    #    the first i examples (sorted by feature).\n    # -------------------------------------------------------------------------\n    # Get all distinct classes and map them to indices:\n    class_labels = sorted(list(total_counts.keys()))\n    label_to_index = {c: idx for idx, c in enumerate(class_labels)}\n    k = len(class_labels)  # number of distinct classes\n\n    prefix_count = [[0] * k for _ in range(n + 1)]  # (n+1) x k\n\n    for i in range(n):\n        # copy previous\n        for c_idx in range(k):\n            prefix_count[i + 1][c_idx] = prefix_count[i][c_idx]\n        # increment count of this example's class\n        c = sorted_y[i]\n        c_idx = label_to_index[c]\n        prefix_count[i + 1][c_idx] += 1\n\n    # -------------------------------------------------------------------------\n    # 5) Evaluate all possible thresholds (between consecutive distinct values)\n    # -------------------------------------------------------------------------\n    best_threshold = None\n    best_ig = 0.0  # track maximum information gain found so far\n\n    for i in range(n - 1):\n        # Consider a threshold between sorted_x[i] and sorted_x[i+1] only if distinct\n        if sorted_x[i] != sorted_x[i + 1]:\n            t_candidate = 0.5 * (sorted_x[i] + sorted_x[i + 1])\n\n            # Left side has i+1 examples, right side has n - (i+1) examples\n            left_freq = prefix_count[i + 1]  # distribution of the left subset\n            right_freq = [\n                total_counts[label] - left_freq[label_to_index[label]]\n                for label in class_labels\n            ]\n            left_size = i + 1\n            right_size = n - left_size\n\n            # Compute entropies\n            h_left = compute_entropy(left_freq)\n            h_right = compute_entropy(right_freq)\n\n            # Information gain\n            ig_candidate = (parent_entropy\n                            - (left_size / n) * h_left\n                            - (right_size / n) * h_right)\n\n            # Track the best IG; if tie, choose the smaller threshold\n            if ig_candidate > best_ig:\n                best_ig = ig_candidate\n                best_threshold = t_candidate\n            elif abs(ig_candidate - best_ig) < 1e-15:\n                # numerical tie\n                if t_candidate < best_threshold:\n                    best_threshold = t_candidate\n\n    # -------------------------------------------------------------------------\n    # 6) If no positive gain or no threshold identified, return (None, 0.0)\n    # -------------------------------------------------------------------------\n    if best_threshold is None or best_ig <= 0.0:\n        return (None, 0.0)\n\n    # -------------------------------------------------------------------------\n    # 7) Return threshold and information gain, both rounded to 4 decimals\n    # -------------------------------------------------------------------------\n    return (round(best_threshold, 4), round(best_ig, 4))"}
{"task_id": 286, "completion_id": 0, "completion": "import random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"\n    Returns the initializer function that matches *name*.\n    \n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if not initializer or not callable(initializer):\n        raise ValueError(\"Invalid initialization function.\")\n    return initializer"}
{"task_id": 287, "completion_id": 0, "completion": "import numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    # Unpack shapes\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output spatial dimensions\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n\n    # Forward Pass: Pooled output\n    pooled_output = np.zeros((N, C, out_H, out_W), dtype=X.dtype)\n\n    # Compute average pooling\n    for n in range(N):\n        for c in range(C):\n            for oh in range(out_H):\n                for ow in range(out_W):\n                    # Window start/end\n                    start_h = oh * s_h\n                    start_w = ow * s_w\n                    end_h = start_h + p_h\n                    end_w = start_w + p_w\n\n                    region = X[n, c, start_h:end_h, start_w:end_w]\n                    pooled_output[n, c, oh, ow] = np.mean(region)\n\n    # Backward Pass: distribute gradients\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n\n    for n in range(N):\n        for c in range(C):\n            for oh in range(out_H):\n                for ow in range(out_W):\n                    # Gradient to distribute\n                    grad_val = accum_grad[n, c, oh, ow]\n                    \n                    # Window start/end\n                    start_h = oh * s_h\n                    start_w = ow * s_w\n                    end_h = start_h + p_h\n                    end_w = start_w + p_w\n\n                    # Distribute equally to each element in the window\n                    grad_input[n, c, start_h:end_h, start_w:end_w] += grad_val / (p_h * p_w)\n\n    # Round to 4 decimals\n    pooled_output = np.round(pooled_output, 4)\n    grad_input = np.round(grad_input, 4)\n\n    # Convert to Python lists\n    return pooled_output.tolist(), grad_input.tolist()"}
{"task_id": 290, "completion_id": 0, "completion": "import numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Two trees are considered equivalent if they have the same structure,\n    the same feature indices, thresholds (within 1e-8),\n    and their leaf values are equal (within 1e-8).\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If types differ, trees can't match in shape\n    if type(tree_a) != type(tree_b):\n        return False\n\n    # If both are leaves, compare their values with np.allclose (within 1e-8)\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Convert values to numpy arrays (at least 1D) to safely compare\n        val_a = np.array(tree_a.value, ndmin=1, dtype=float)\n        val_b = np.array(tree_b.value, ndmin=1, dtype=float)\n        return np.allclose(val_a, val_b, atol=1e-8)\n\n    # If both are nodes, compare feature, threshold, then sub-trees\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Compare feature indices\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Compare thresholds up to 1e-8\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        # Recursively compare left and right sub-trees\n        return (compare_trees(tree_a.left, tree_b.left)\n                and compare_trees(tree_a.right, tree_b.right))\n\n    # If none of the above conditions matched, they're not equal\n    return False"}
{"task_id": 292, "completion_id": 0, "completion": "import numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as parent1.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    # Convert parent1 and parent2 to NumPy arrays\n    arr1 = np.array(parent1, dtype=float)\n    arr2 = np.array(parent2, dtype=float)\n\n    # Check that they have the same shape\n    if arr1.shape != arr2.shape:\n        return -1\n\n    # Determine the number of columns\n    _, num_cols = arr1.shape\n\n    # Validate that the cutoff is within valid range (though the problem statement\n    # implies it's allowed to be 0 or equal to num_cols)\n    # Still, we can do a quick check to ensure it won't slice incorrectly.\n    if not (0 <= cutoff <= num_cols):\n        return -1\n\n    # Create children\n    # For child1: columns before cutoff from arr1, columns from cutoff to end from arr2\n    # For child2: columns before cutoff from arr2, columns from cutoff to end from arr1\n    child1 = np.hstack([arr1[:, :cutoff], arr2[:, cutoff:]])\n    child2 = np.hstack([arr2[:, :cutoff], arr1[:, cutoff:]])\n\n    # Convert back to Python lists\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 294, "completion_id": 0, "completion": "from typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # If there are no vertices, return an empty dict\n    if not G['_V2I']:\n        return {}\n\n    # Prepare adjacency dict with empty lists for every vertex\n    adj = {v: [] for v in G['_V2I'].keys()}\n\n    is_directed = G['is_directed']\n\n    # A set to track which undirected edges we've already added\n    # (u, v, w) with u < v so that each undirected edge is only listed once.\n    edges_seen = set()\n\n    for adj_list in G['_G']:\n        for (u, v, w) in adj_list:\n            if is_directed:\n                # Simply add the directed edge\n                adj[u].append((v, w))\n            else:\n                # For undirected, add each edge once in both directions\n                # Use an ordered tuple to detect duplicates\n                if u < v:\n                    key = (u, v, w)\n                else:\n                    key = (v, u, w)\n\n                if key not in edges_seen:\n                    edges_seen.add(key)\n                    adj[u].append((v, w))\n                    adj[v].append((u, w))\n\n    # Sort each adjacency list by the neighbour label\n    for u in adj:\n        adj[u].sort(key=lambda x: x[0])\n\n    return adj"}
{"task_id": 296, "completion_id": 0, "completion": "import numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return bool(np.all(np.isin(x, [0, 1])))"}
{"task_id": 298, "completion_id": 0, "completion": "import math\nfrom collections import Counter\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # ------------------------\n    # 1) Build counts from corpus\n    # ------------------------\n    if N < 1:\n        return float('-inf')  # Invalid N\n\n    # Handle the unigram case separately\n    if N == 1:\n        # Collect all tokens (no padding)\n        all_tokens = []\n        for sentence in corpus:\n            all_tokens.extend(sentence.split())\n        total_unigrams = len(all_tokens)\n        if total_unigrams == 0:\n            return float('-inf')  # No data in the corpus\n\n        # Count each unigram\n        unigram_counts = Counter(all_tokens)\n\n        # ------------------------\n        # 2) Compute query probability\n        # ------------------------\n        query_tokens = query.split()\n        # If query is empty, no n-grams can be formed, return -inf\n        if len(query_tokens) == 0:\n            return float('-inf')\n\n        sum_of_logs = 0.0\n        for token in query_tokens:\n            count_w = unigram_counts.get(token, 0)\n            if count_w == 0:\n                return float('-inf')\n            prob_w = count_w / total_unigrams\n            sum_of_logs += math.log(prob_w)\n\n        return round(sum_of_logs, 4)\n\n    else:\n        # N > 1\n        # Build n-gram and (N-1)-gram counts with padding\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n\n        for sentence in corpus:\n            tokens = sentence.split()\n            # Pad with <bol> and <eol>\n            padded = ([\"<bol>\"] * (N - 1)) + tokens + [\"<eol>\"]\n            for i in range(len(padded) - N + 1):\n                n_gram = tuple(padded[i : i + N])\n                ngram_counts[n_gram] += 1\n                prefix_counts[n_gram[:-1]] += 1\n\n        # ------------------------\n        # 2) Compute query probability\n        # ------------------------\n        query_tokens = query.split()\n        # Pad the query\n        padded_query = ([\"<bol>\"] * (N - 1)) + query_tokens + [\"<eol>\"]\n\n        # If padding still doesn't give us enough tokens for at least 1 n-gram\n        if len(padded_query) < N:\n            return float('-inf')\n\n        sum_of_logs = 0.0\n        for i in range(len(padded_query) - N + 1):\n            n_gram = tuple(padded_query[i : i + N])\n            prefix = n_gram[:-1]\n\n            count_ng = ngram_counts.get(n_gram, 0)\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_ng == 0 or count_prefix == 0:\n                return float('-inf')  # zero probability\n\n            prob = count_ng / count_prefix\n            sum_of_logs += math.log(prob)\n\n        return round(sum_of_logs, 4)"}
{"task_id": 302, "completion_id": 0, "completion": "import numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        A Python list of length n_samples containing an integer cluster label in [0, k-1]\n        for each sample.\n    \"\"\"\n\n    # 1. Build the weighted adjacency matrix W\n    n_samples = X.shape[0]\n    W = np.zeros((n_samples, n_samples), dtype=np.float64)\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist_ij = np.linalg.norm(X[i] - X[j])\n            w_ij = 1.0 / (1.0 + dist_ij)\n            W[i, j] = w_ij\n            W[j, i] = w_ij\n    # The diagonal is already zero, ensuring a point is not connected to itself\n\n    # 2. Compute the unnormalised graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))  # degree matrix\n    L = D - W\n\n    # 3. Obtain the first k eigenvectors of L\n    #    (the k eigenvectors corresponding to the k smallest eigenvalues)\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)  # sort eigenvalues in ascending order\n    E = eigenvectors[:, sorted_indices[:k]]   # take the first k eigenvectors\n    # E is an (n_samples, k) matrix; each row is an embedding for a data point\n\n    # 4. Run k-means on rows of E\n    def kmeans(data: np.ndarray, k_clusters: int, max_iters: int = 100) -> np.ndarray:\n        \"\"\"\n        A simple k-means implementation:\n          - Initializes centroids as the first k rows of data.\n          - Re-initializes any empty cluster centroid randomly.\n          - Stops if assignments do not change or max_iters is reached.\n\n        Returns:\n          A 1-D array of integer cluster assignments of length data.shape[0].\n        \"\"\"\n        n_points = data.shape[0]\n        # Initialize centroids (deterministic: use the first k rows)\n        centroids = data[:k_clusters, :].copy()\n        assignments = np.zeros(n_points, dtype=np.int64)\n\n        for _ in range(max_iters):\n            # Compute distances from each point to each centroid\n            # shape of data: (n_points, k_dim), centroids: (k_clusters, k_dim)\n            # We'll expand dims to broadcast: data[:, None, :] - centroids[None, :, :]\n            # Then sum squared differences along the last axis\n            distances = np.sum((data[:, None, :] - centroids[None, :, :]) ** 2, axis=2)\n\n            # Assign each point to the closest centroid\n            new_assignments = np.argmin(distances, axis=1)\n\n            # If no change in assignment, we are done\n            if np.all(new_assignments == assignments):\n                break\n            assignments = new_assignments\n\n            # Update centroids\n            for cluster_idx in range(k_clusters):\n                cluster_points = data[assignments == cluster_idx]\n                if len(cluster_points) == 0:\n                    # If cluster is empty, re-initialize centroid randomly\n                    random_idx = np.random.randint(n_points)\n                    centroids[cluster_idx] = data[random_idx]\n                else:\n                    # Otherwise, update centroid as mean of the cluster points\n                    centroids[cluster_idx] = np.mean(cluster_points, axis=0)\n\n        return assignments\n\n    cluster_labels = kmeans(E, k)\n\n    # 5. Return the resulting cluster labels as a Python list\n    return cluster_labels.tolist()"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        \"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        \"\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        \"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n```\n"}
{"task_id": 304, "completion_id": 0, "completion": "import numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,  # kept for API compatibility\n    beta: float = 1.0,   # unused (the estimate doesn't depend on sigma^2)\n    mu=0.0,\n    V=None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance, using a\n    normal\u2013inverse-gamma prior on (b, \u03c3\u00b2).\n\n    The MAP estimate of b does not depend on \u03c3\u00b2.  The posterior mean\n    \u03bc_b is given by (\u03a3_b)(V\u207b\u00b9 \u03bc + X\u1d40 y), where\n        \u03a3_b = (V\u207b\u00b9 + X\u1d40 X)\u207b\u00b9\n    and V\u207b\u00b9 is the precision matrix of the prior on b (scaled by \u03c3\u00b2).\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for b.  Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for b. Accepts None (identity), a scalar (scalar\u00d7I),\n            a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded\n        to 4 decimal places.\n    \"\"\"\n    # 1) Optionally add a column of ones for the intercept\n    if fit_intercept:\n        X = np.column_stack([np.ones(len(X)), X])\n    \n    # 2) Determine dimensions\n    N, M = X.shape\n    \n    # 3) Handle mu (prior mean)\n    if np.isscalar(mu):\n        mu = np.full(M, mu, dtype=float)\n    else:\n        mu = np.asarray(mu, dtype=float).flatten()\n    if mu.shape[0] != M:\n        raise ValueError(\"Dimension mismatch: mu must match the number of features (including intercept if fitted).\")\n    \n    # 4) Handle V (prior scale)\n    if V is None:\n        # Identity\n        V_mat = np.eye(M, dtype=float)\n    elif np.isscalar(V):\n        # Scalar times identity\n        V_mat = float(V) * np.eye(M, dtype=float)\n    else:\n        # Convert to array\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            # Diagonal\n            if V_arr.shape[0] != M:\n                raise ValueError(\"Dimension mismatch: V must match the number of features.\")\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(\"Dimension mismatch: V must be of shape (M, M).\")\n            V_mat = V_arr\n        else:\n            raise ValueError(\"V must be scalar, 1D or 2D.\")\n    \n    # 5) Compute posterior mean\n    #    \u03a3_b = (V^-1 + X^T X)^-1\n    #    \u03bc_b = \u03a3_b ( V^-1 mu + X^T y )\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Prior scale matrix V is not invertible.\")\n    \n    # sum of prior precision + data precision\n    A = V_inv + X.T @ X\n    \n    try:\n        Sigma_b = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Matrix (V^-1 + X^T X) is singular and cannot be inverted.\")\n    \n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # 6) Round to 4 decimal places and return\n    return mu_b.round(4).tolist()"}
{"task_id": 308, "completion_id": 0, "completion": "import numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    # ------------------------\n    # 1) Setup and Helpers\n    # ------------------------\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(freq_hz: float) -> float:\n        return 2595.0 * np.log10(1.0 + freq_hz / 700.0)\n\n    def mel_to_hz(freq_mel: float) -> float:\n        return 700.0 * (10.0 ** (freq_mel / 2595.0) - 1.0)\n\n    # ------------------------\n    # 2) Map Hz range to Mel range\n    # ------------------------\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally spaced values in the Mel domain\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hz\n    hz_points = [mel_to_hz(m) for m in mel_points]\n\n    # DFT bin frequencies (center frequencies for each bin)\n    bin_freqs = [(k * fs) / N for k in range(N // 2 + 1)]\n\n    # ------------------------\n    # 3) Create the filterbank\n    # ------------------------\n    fbank = []\n    for i in range(n_filters):\n        # Corner frequencies for the i-th triangular filter\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        row = []\n        for k in range(N // 2 + 1):\n            freq_k = bin_freqs[k]\n\n            # Left slope or 0 if outside the left region\n            if f_left <= freq_k <= f_center:\n                left_slope = (freq_k - f_left) / (f_center - f_left)\n            else:\n                left_slope = 0.0\n\n            # Right slope or 0 if outside the right region\n            if f_center <= freq_k <= f_right:\n                right_slope = (f_right - freq_k) / (f_right - f_center)\n            else:\n                right_slope = 0.0\n\n            # Weight is the positive min of the two slopes\n            w = max(0.0, min(left_slope, right_slope))\n\n            # Normalize if requested\n            if normalize and w > 0.0:\n                w *= 2.0 / (f_right - f_left)\n\n            row.append(w)\n        fbank.append(row)\n\n    # ------------------------\n    # 4) Round and return as a Python list\n    # ------------------------\n    rounded_fbank = [[round(value, 4) for value in row] for row in fbank]\n    return rounded_fbank"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Handle special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Define the fixed coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # Determine the denominator based on symmetry\n    # For the periodic form, conceptually use L+1 -> N = L\n    # For the symmetric form, use N = L - 1\n    N = (window_len - 1) if symmetric else window_len\n\n    window = []\n    for n in range(window_len):\n        term = (\n            a0\n            - a1 * np.cos(2.0 * np.pi * n / N)\n            + a2 * np.cos(4.0 * np.pi * n / N)\n            - a3 * np.cos(6.0 * np.pi * n / N)\n        )\n        window.append(round(term, 4))\n\n    return window\n```"}
{"task_id": 313, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        \"\"\"Compute the digamma function using recursion and an asymptotic expansion.\"\"\"\n        shift = 0.0\n        # Recursively shift x upward until x >= 6\n        while x < 6:\n            shift -= 1.0 / x\n            x += 1.0\n        \n        # Asymptotic expansion\n        x_inv = 1.0 / x\n        x_inv2 = x_inv * x_inv\n        x_inv4 = x_inv2 * x_inv2\n        x_inv6 = x_inv2 * x_inv4\n        # Expansion: ln(x) - 1/(2x) - 1/(12x\u00b2) + 1/(120x^4) - 1/(252x^6)\n        result = (math.log(x)\n                  - 0.5 * x_inv\n                  - (1.0 / 12.0) * x_inv2\n                  + (1.0 / 120.0) * x_inv4\n                  - (1.0 / 252.0) * x_inv6)\n        return result + shift\n\n    # Ensure we can handle either a list of lists or a numpy array\n    row = gamma[d]\n    alpha = row[t]\n    alpha_sum = sum(row)\n\n    # Compute the result\n    val = digamma(alpha) - digamma(alpha_sum)\n    \n    # Round to 4 decimal places\n    return round(val, 4)"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the \"prev\" index\n    prev_ix = max(ix - 1, 0)\n\n    # Extract previous prediction/label/gold\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n\n    # Extract current prediction/label/gold\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    header = \"------------------------- DEBUG -------------------------\"\n    footer = \"----------------------- END DEBUG -----------------------\"\n\n    return (\n        f\"{header}\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\"\n        f\"\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        f\"{footer}\\n\"\n    )\n```\n"}
{"task_id": 318, "completion_id": 0, "completion": "import math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels.\n        Each label is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Initialize data weights equally.\n    w = np.ones(n_samples) / n_samples\n\n    # This will hold tuples of (feature_index, threshold, polarity, alpha)\n    stumps = []\n\n    for _ in range(n_estimators):\n        best_feature = None\n        best_threshold = None\n        best_polarity = 1\n        best_error = float('inf')\n\n        # Try all features, thresholds, and polarities to find the best stump.\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            thresholds = np.unique(feature_values)\n\n            for t in thresholds:\n                for polarity in [1, -1]:\n                    # Decision stump prediction: h(x) = polarity * sign(x_j - t)\n                    pred = np.ones(n_samples, dtype=int)\n                    pred[feature_values < t] = -1\n                    pred *= polarity\n\n                    # Weighted error of this stump\n                    misclassified = (pred != y_train)\n                    error = np.sum(w[misclassified])\n\n                    if error < best_error:\n                        best_error = error\n                        best_feature = j\n                        best_threshold = t\n                        best_polarity = polarity\n\n        # Compute stump weight (alpha_m)\n        # Guard against numerical overflow when best_error = 0 or 1\n        best_error = max(min(best_error, 1 - 1e-10), 1e-10)\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update data weights\n        # Recompute predictions for the chosen stump:\n        pred_best = np.ones(n_samples, dtype=int)\n        pred_best[X_train[:, best_feature] < best_threshold] = -1\n        pred_best *= best_polarity\n\n        w *= np.exp(-alpha * y_train * pred_best)\n        w /= np.sum(w)  # normalize so weights sum to 1\n\n        # Store the stump parameters\n        stumps.append((best_feature, best_threshold, best_polarity, alpha))\n\n    # Predict labels for X_test using the final boosted classifier\n    predictions = []\n    for x in X_test:\n        stump_sum = 0.0\n        for (feature_idx, threshold, polarity, alpha) in stumps:\n            stump_pred = 1 if x[feature_idx] >= threshold else -1\n            stump_pred *= polarity\n            stump_sum += alpha * stump_pred\n\n        final_label = 1 if stump_sum >= 0 else -1\n        predictions.append(final_label)\n\n    return predictions"}
{"task_id": 329, "completion_id": 0, "completion": "import numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # If N or fs is invalid, return an empty list\n    if N <= 0 or fs <= 0:\n        return []\n    \n    # Compute frequencies\n    if positive_only:\n        # Only the non-negative frequencies\n        freq_array = np.arange(N//2 + 1) * (fs / N)\n    else:\n        # Mimic NumPy's fftfreq for the full range\n        freq_array = np.fft.fftfreq(N, d=1.0/fs)\n    \n    # Round each frequency to 4 decimal places and convert to Python list\n    return [round(float(freq), 4) for freq in freq_array]"}
{"task_id": 331, "completion_id": 0, "completion": "import numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n\n    n_samples, n_estimators = predictions.shape\n    \n    # List to store squared errors for samples with at least one OOB prediction\n    squared_errors = []\n\n    for i in range(n_samples):\n        # Trees for which sample i is out-of-bag\n        oob_trees = oob_mask[i]\n        if np.any(oob_trees):  # If there's at least one OOB tree\n            # Average over OOB predictions\n            oob_pred_mean = predictions[i, oob_trees].mean()\n            # Compute squared error\n            se = (oob_pred_mean - y_true[i]) ** 2\n            squared_errors.append(se)\n\n    # If no samples had OOB predictions\n    if len(squared_errors) == 0:\n        return -1\n\n    # Compute mean of squared errors\n    mse_oob = np.mean(squared_errors)\n    return float(round(mse_oob, 4))"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Count item support in distinct transactions\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n\n    # Step 2: Discard items whose support is below min_support\n    freq_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    if not freq_items:\n        # If no items are frequent, return just the root\n        return {\"support\": 0, \"children\": {}}\n\n    # Step 3: Create a global ordering: by decreasing support, then alphabetically\n    sorted_items = sorted(freq_items.keys(), key=lambda x: (-freq_items[x], x))\n    # Create a map for fast lookup of each item's position in the order\n    item_order = {item: i for i, item in enumerate(sorted_items)}\n\n    # Step 4: Build the FP-Tree using nested dictionaries\n    root = {\"support\": 0, \"children\": {}}\n\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        filtered = [item for item in set(transaction) if item in freq_items]\n        # Sort by global ordering\n        filtered.sort(key=lambda x: item_order[x])\n\n        # Walk down the tree, updating or creating nodes\n        current_node = root\n        current_node[\"support\"] += 1  # Root is visited by this transaction\n        for item in filtered:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n\n    return root\n```\n"}
{"task_id": 336, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | np.ndarray,\n                  Y: list[list[int | float]] | np.ndarray | None = None,\n                  c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n\n    # Convert X to a NumPy array of floats\n    X = np.array(X, dtype=float)\n    \n    # If Y is None, set it to X, otherwise convert to a NumPy array of floats\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n\n    # Check if the number of columns match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # If X is empty, return an empty list (shape (0, C) => no rows)\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the linear kernel: K = X dot Y^T + c0\n    K = X.dot(Y.T) + c0\n\n    # Round to 4 decimal places\n    K = np.round(K, 4)\n\n    # Convert result to a list of lists\n    return K.tolist()"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter (starting at 1).\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) as\n        python lists, each rounded to 8 decimal places.\n\n        If the gradient is exactly zero (all entries zero), the parameter\n        remains unchanged, while the moments are still updated.\n    \"\"\"\n    # Update the first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Bias-corrected estimates\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n\n    # If the entire gradient is exactly zero, leave parameter unchanged;\n    # otherwise perform the Adam parameter update\n    if np.all(grad == 0):\n        param_prime = param\n    else:\n        param_prime = param - lr * (m_hat_t / (np.sqrt(v_hat_t) + eps))\n\n    # Round and convert to Python lists\n    updated_param = np.round(param_prime, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n\n    return (updated_param, new_m, new_v)\n```"}
{"task_id": 343, "completion_id": 0, "completion": "import numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                        rewards: list[float] | np.ndarray,\n                        retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Number of samples to keep\n    N = theta_samples.shape[0]\n    K = int(retain_prcnt * N)\n\n    # Get indices of top-K rewards\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:K]\n\n    # Gather elite samples\n    elite_samples = theta_samples[elite_indices]\n\n    # Compute mean and variance along each dimension\n    mean_vec = np.mean(elite_samples, axis=0)\n    var_vec = np.var(elite_samples, axis=0)  # Maximum-likelihood variance\n\n    # Round to 4 decimals and convert to Python lists\n    mean_rounded = np.round(mean_vec, 4).tolist()\n    var_rounded = np.round(var_vec, 4).tolist()\n\n    return mean_rounded, var_rounded"}
{"task_id": 353, "completion_id": 0, "completion": "import math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places, or 0.0 if there are\n        no labels or all labels are identical.\n    \"\"\"\n    counts = Counter(labels)\n    total_count = sum(counts.values())\n    \n    # Special case: If there are no labels, return 0.0\n    if total_count == 0:\n        return 0.0\n    \n    entropy_value = 0.0\n    for count in counts.values():\n        p = count / total_count\n        # By definition, p * log2(p) is taken to be 0 if p == 0\n        # so we only compute if p > 0.\n        if p > 0:\n            entropy_value -= p * math.log2(p)\n    \n    # Round to 5 decimal places\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "completion": "import numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation) using im2col + GEMM.\n    \n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch)\n            representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch)\n            containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list (nested) obtained through\n        numpy.ndarray.tolist().\n    \"\"\"\n    # --------------------------------------------------------------------------\n    # 1) Parse shapes and parameters\n    # --------------------------------------------------------------------------\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kr, kc, kernel_in_ch, out_ch = W.shape\n    assert kernel_in_ch == in_ch, \"Kernel and input channels must match.\"\n\n    # Effective (dilated) kernel size\n    # e.g. if dilation=2 and kernel=3, the effective kernel covers 1 + (3-1)*(2+1)=1+6=7 cells along that dimension\n    eff_kr = (kr - 1) * (dilation + 1) + 1\n    eff_kc = (kc - 1) * (dilation + 1) + 1\n\n    # --------------------------------------------------------------------------\n    # 2) Convert the padding specification into a 4-tuple: (top, bottom, left, right)\n    # --------------------------------------------------------------------------\n    def compute_same_pad(in_size, kernel_eff, stride):\n        \"\"\"\n        For 'same' mode, compute (pad_before, pad_after)\n        so that output dimension matches input dimension exactly:\n            out_size = in_size\n        with out_size = floor((in_size + pad_before + pad_after - kernel_eff)/stride) + 1\n        We solve for pad_before + pad_after.\n        \"\"\"\n        # Minimum total padding for 'same' (may need one extra if it doesn't divide evenly)\n        # [ (in_size - 1)*stride + kernel_eff - in_size ]\n        needed = max(0, (in_size - 1) * stride + kernel_eff - in_size)\n        pad_before = needed // 2\n        pad_after  = needed - pad_before\n        return pad_before, pad_after\n\n    # Convert pad into 4-tuple of the form (pad_top, pad_bottom, pad_left, pad_right)\n    if isinstance(pad, str) and pad.lower() == 'same':\n        # Compute row padding\n        pr1, pr2 = compute_same_pad(in_rows, eff_kr, stride)\n        # Compute col padding\n        pc1, pc2 = compute_same_pad(in_cols, eff_kc, stride)\n    elif isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr, pc = pad\n            pr1 = pr2 = pr\n            pc1 = pc2 = pc\n        elif len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n        else:\n            # Behavior undefined by specification if invalid\n            # We'll just do something trivial (no padding).\n            pr1 = pr2 = pc1 = pc2 = 0\n    else:\n        # Behavior undefined by specification if invalid\n        pr1 = pr2 = pc1 = pc2 = 0\n\n    # --------------------------------------------------------------------------\n    # 3) Zero-pad the input\n    # --------------------------------------------------------------------------\n    padded_rows = in_rows + pr1 + pr2\n    padded_cols = in_cols + pc1 + pc2\n    X_padded = np.zeros((n_ex, padded_rows, padded_cols, in_ch), dtype=X.dtype)\n    X_padded[:, pr1:pr1+in_rows, pc1:pc1+in_cols, :] = X\n\n    # --------------------------------------------------------------------------\n    # 4) Output spatial size\n    # --------------------------------------------------------------------------\n    out_rows = (padded_rows - eff_kr) // stride + 1\n    out_cols = (padded_cols - eff_kc) // stride + 1\n\n    # --------------------------------------------------------------------------\n    # 5) im2col: gather all patches into a 2D matrix\n    #\n    #    Each patch is (kr * kc * in_ch) wide, and we have:\n    #       (n_ex * out_rows * out_cols) patches in total\n    # --------------------------------------------------------------------------\n    n_out = n_ex * out_rows * out_cols\n    patch_size = kr * kc * in_ch\n    cols = np.zeros((n_out, patch_size), dtype=X.dtype)\n    \n    out_index = 0\n    for n in range(n_ex):\n        for r in range(out_rows):\n            row_start = r * stride\n            for c in range(out_cols):\n                col_start = c * stride\n                # Extract the patch with dilation\n                patch = []\n                for i_kr in range(kr):\n                    # The actual row to pick from X_padded\n                    row_i = row_start + i_kr * (dilation + 1)\n                    for i_kc in range(kc):\n                        col_i = col_start + i_kc * (dilation + 1)\n                        # For all in_ch channels\n                        patch.append(X_padded[n, row_i, col_i, :])\n                # Flatten patch to 1D (kr*kc*in_ch)\n                patch_flat = np.concatenate(patch, axis=0)\n                cols[out_index] = patch_flat\n                out_index += 1\n\n    # --------------------------------------------------------------------------\n    # 6) Reshape the filters for GEMM: (kr*kc*in_ch, out_ch)\n    # --------------------------------------------------------------------------\n    W_reshaped = W.reshape(-1, out_ch)  # (kr*kc*in_ch, out_ch)\n\n    # --------------------------------------------------------------------------\n    # 7) Matrix multiply (GEMM) -> produce (n_out, out_ch)\n    # --------------------------------------------------------------------------\n    out_2d = cols @ W_reshaped  # shape: (n_out, out_ch)\n\n    # --------------------------------------------------------------------------\n    # 8) Reshape to final 4D: (n_ex, out_rows, out_cols, out_ch)\n    # --------------------------------------------------------------------------\n    out_4d = out_2d.reshape((n_ex, out_rows, out_cols, out_ch))\n\n    # Return as a nested Python list\n    return out_4d.tolist()"}
{"task_id": 355, "completion_id": 0, "completion": "import numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        \"svd\" to use singular value decomposition or \"eigen\" to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # 1) Mean-center the data\n    X_centered = data - np.mean(data, axis=0)\n    n_samples, n_features = X_centered.shape\n    \n    # Cap n_components to not exceed the feature dimension\n    n_keep = min(n_components, n_features)\n\n    # 2) Obtain principal directions\n    if solver == \"svd\":\n        # SVD on centered data\n        U, S, Vt = np.linalg.svd(X_centered, full_matrices=False)\n        \n        # Right singular vectors (columns of V) are principal directions\n        directions = Vt.T  # shape: (n_features, n_features)\n        \n        # Eigenvalues = (S^2) / (n_samples - 1)\n        eigenvalues = (S**2) / (n_samples - 1)\n        \n        # principal directions are already in descending order thanks to SVD\n        directions = directions[:, :n_keep]\n        eigenvalues = eigenvalues[:n_keep]\n        \n    elif solver == \"eigen\":\n        # Covariance matrix (ddof=1 for sample covariance)\n        cov = np.cov(X_centered, rowvar=False, ddof=1)  # shape: (n_features, n_features)\n        \n        # Eigendecomposition of the symmetric covariance matrix\n        w, v = np.linalg.eigh(cov)\n        \n        # Sort eigenvalues/vectors in descending order\n        idx = np.argsort(w)[::-1]\n        w = w[idx]\n        v = v[:, idx]\n        \n        # Keep top n_keep\n        directions = v[:, :n_keep]  # shape: (n_features, n_keep)\n        eigenvalues = w[:n_keep]\n        \n    else:\n        raise ValueError(\"solver must be either 'svd' or 'eigen'.\")\n\n    # 3) (Already done implicitly: directions/eigenvalues are in descending order)\n    \n    # 4) Sign-fix each retained direction:\n    #    If the first non-zero loading is negative, flip sign of that direction\n    #    and also flip the corresponding column in the projected data.\n    \n    # 5) Project the centered data onto the retained directions\n    scores = X_centered @ directions  # shape: (n_samples, n_keep)\n    \n    for i in range(n_keep):\n        direction = directions[:, i]\n        nonzero_indices = np.nonzero(direction)[0]\n        \n        if nonzero_indices.size > 0:\n            first_nonzero = nonzero_indices[0]\n            if direction[first_nonzero] < 0:\n                directions[:, i] = -direction\n                scores[:, i] = -scores[:, i]\n\n    # Compute explained variance ratio\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = eigenvalues / total_variance if total_variance != 0 else np.zeros_like(eigenvalues)\n\n    # 6) Round final results and convert to Python lists\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded"}
{"task_id": 356, "completion_id": 0, "completion": "Below is a simple implementation of leaf_predict that uses Python\u2019s built-in max function to locate the index of the largest probability when classifier is True; otherwise it simply returns the scalar value:\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # Return the index of the largest probability\n        return max(range(len(leaf.value)), key=lambda i: leaf.value[i])\n    else:\n        # Return the scalar value for regression\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Special case: if K == 1, return the mean of the whole dataset.\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [[round(x, 4) for x in centroid]]\n\n    # Initialize centroids with the first K samples (deterministic).\n    centroids = data[:K].copy()\n\n    tolerance = 1e-6\n    for _ in range(max_iters):\n        # Assign each point to the nearest centroid.\n        # We compute distances from each centroid to all points, shape (K, n_samples),\n        # make it shape (n_samples, K) and find the index of the closest centroid.\n        distances = np.array([np.sqrt(np.sum((data - c) ** 2, axis=1)) for c in centroids])\n        assignments = np.argmin(distances, axis=0)\n\n        new_centroids = centroids.copy()\n        # Recompute each centroid as the mean of the samples assigned to it.\n        # If a centroid loses all assignments, keep it unchanged.\n        for c_idx in range(K):\n            points_in_cluster = data[assignments == c_idx]\n            if len(points_in_cluster) > 0:\n                new_centroids[c_idx] = np.mean(points_in_cluster, axis=0)\n\n        # Check for stop condition (centroid shift within tolerance).\n        shifts = np.sqrt(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if np.all(shifts < tolerance):\n            centroids = new_centroids\n            break\n\n        centroids = new_centroids\n\n    # Sort the final centroids lexicographically and round to 4 decimals.\n    centroids_list = centroids.tolist()\n    centroids_list.sort(key=lambda x: x)  # lexicographic sort\n    return [[round(coord, 4) for coord in c] for c in centroids_list]"}
{"task_id": 362, "completion_id": 0, "completion": "import numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    arr = np.array(data, dtype=float)\n    \n    # Sum each row\n    row_sums = arr.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if (row_sums == 0).any():\n        return -1\n    \n    # Divide each element by its row sum\n    normalized = arr / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    normalized = np.round(normalized, 4)\n    \n    # Convert the resulting array to a Python list of lists\n    return normalized.tolist()"}
{"task_id": 363, "completion_id": 0, "completion": "from typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_boxes_composite(space: Space) -> bool:\n        \"\"\"Return True if 'space' is a Tuple/Dict whose sub-spaces are all Box.\"\"\"\n        if isinstance(space, Tuple):\n            return all(isinstance(s, Box) for s in space.spaces)\n        if isinstance(space, Dict):\n            return all(isinstance(s, Box) for s in space.spaces.values())\n        return False\n\n    # For the action space:\n    if tuple_action:\n        # We are told it's a Tuple or Dict, so check whether every sub-space is a Box.\n        cont_action = all_boxes_composite(env.action_space)\n    else:\n        # Just check if the space itself is a Box.\n        cont_action = isinstance(env.action_space, Box)\n\n    # For the observation space:\n    if tuple_obs:\n        cont_obs = all_boxes_composite(env.observation_space)\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n\n    return cont_action, cont_obs"}
{"task_id": 369, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n\n    # Shape of a single update\n    single_shape = updates[0].shape\n    \n    # Initialize running prediction with zeros\n    running_pred = np.zeros(single_shape, dtype=np.float64)\n    \n    # Aggregate each tree's output\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    # Regression case\n    if regression:\n        return running_pred.round(4)\n    \n    # Classification case\n    else:\n        # Apply softmax along the classes-axis\n        exps = np.exp(running_pred)\n        probs = exps / np.sum(exps, axis=1, keepdims=True)\n        # Return the class with highest probability\n        return np.argmax(probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "completion": "import numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n\n    # ------------------------------------------------------------------\n    # 1) Parse arguments and compute the required padding for each side\n    # ------------------------------------------------------------------\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, w_in_channels, out_channels = W.shape\n\n    if w_in_channels != in_channels:\n        raise ValueError(\"Number of input channels in X and W must match.\")\n    if stride < 1:\n        raise ValueError(\"Stride must be a positive integer.\")\n    if dilation < 0:\n        raise ValueError(\"Dilation must be non-negative.\")\n\n    # Effective kernel size considering dilation\n    # dilation = number of zeros inserted, so spacing is (dilation + 1)\n    effective_kernel = 1 + (kernel_width - 1) * (dilation + 1)\n\n    # Convert the \"pad\" argument into (pad_left, pad_right)\n    if isinstance(pad, int):\n        pad_left, pad_right = pad, pad\n    elif isinstance(pad, tuple):\n        if len(pad) != 2:\n            raise ValueError(\"pad tuple must have length 2.\")\n        pad_left, pad_right = pad\n    elif pad == \"same\":\n        # Mimic TensorFlow's 'SAME' for 1D:\n        # out_len = ceil(signal_length / stride)\n        # total_pad = max(0, (out_len - 1)*stride + effective_kernel - signal_length)\n        # p_left = floor(total_pad/2), p_right = total_pad - p_left\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"Invalid value for 'pad'. Must be int, 2-tuple, or 'same'.\")\n\n    # ------------------------------------------------------------------\n    # 2) Zero-pad the input along the time dimension\n    # ------------------------------------------------------------------\n    # Pad shape specification for np.pad:\n    # ((pad_before_examples, pad_after_examples),\n    #  (pad_before_length,   pad_after_length),\n    #  (pad_before_channels, pad_after_channels))\n    X_padded = np.pad(X,\n                      pad_width=((0, 0),\n                                 (pad_left, pad_right),\n                                 (0, 0)),\n                      mode='constant',\n                      constant_values=0)\n    \n    # New length after padding\n    padded_length = X_padded.shape[1]\n\n    # ------------------------------------------------------------\n    # 3) Compute the output length and create output container\n    # ------------------------------------------------------------\n    # The first valid starting index is 0\n    # The last valid starting index is padded_length - effective_kernel\n    # We step by 'stride'\n    # => number of valid positions = floor((padded_length - effective_kernel)/stride) + 1\n    if padded_length < effective_kernel:\n        # No valid positions at all\n        out_length = 0\n    else:\n        out_length = (padded_length - effective_kernel) // stride + 1\n\n    # Prepare output array of shape (n_examples, out_length, out_channels)\n    out_array = np.zeros((n_examples, out_length, out_channels), dtype=X.dtype)\n\n    # -------------------------------------------------------\n    # 4) Perform cross-correlation (not reversed) computation\n    # -------------------------------------------------------\n    # For each example in the batch\n    for n in range(n_examples):\n        # For each output index along the time dimension\n        # i_out is the index in the \"out_array\",\n        # i_in is the corresponding starting index in X_padded\n        i_out = 0\n        for i_in in range(0, padded_length - effective_kernel + 1, stride):\n            # For each output channel\n            for oc in range(out_channels):\n                # Accumulate over kernel width and input channels\n                val = 0.0\n                for kw in range(kernel_width):\n                    # Index in X_padded along time dimension\n                    x_index = i_in + kw * (dilation + 1)\n                    for ic in range(in_channels):\n                        # cross-correlation: no kernel flip\n                        val += X_padded[n, x_index, ic] * W[kw, ic, oc]\n                # Save the computed value\n                out_array[n, i_out, oc] = val\n            i_out += 1\n\n    # ------------------------------------------------------------------\n    # 5) Return as Python list\n    # ------------------------------------------------------------------\n    return out_array.tolist()"}
{"task_id": 373, "completion_id": 0, "completion": "import numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert y to a NumPy array for convenient processing\n    y_arr = np.array(y, dtype=int)\n\n    # If the array is empty, return 0.0\n    if y_arr.size == 0:\n        return 0.0\n\n    # Get the unique classes and their counts\n    unique_classes, counts = np.unique(y_arr, return_counts=True)\n    total_samples = y_arr.size\n\n    # Compute the relative frequencies (p_c)\n    p_c = counts / total_samples\n\n    # Compute the Gini impurity\n    gini_value = 1.0 - np.sum(p_c**2)\n\n    return round(gini_value, 4)"}
{"task_id": 374, "completion_id": 0, "completion": "import numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Target vector of shape (m,).\n        learning_rate (float): The learning rate for gradient descent.\n        n_iterations (int): Number of iterations to run gradient descent.\n    \n    Returns:\n        tuple[list[float], float]: (weights_list, bias) rounded to 4 decimal places,\n                                   or -1 if X and y have inconsistent shapes.\n    \"\"\"\n    # Check for inconsistent data\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    m, n = X.shape\n\n    # 1. Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n\n    # 2. Gradient Descent\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b  # Predictions\n        diff = (y_hat - y)\n        \n        dw = (2 / m) * X.T.dot(diff)\n        db = (2 / m) * np.sum(diff)\n        \n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # 3. Return the learned parameters (rounded)\n    return (theta.round(4).tolist(), round(b, 4))"}
{"task_id": 376, "completion_id": 0, "completion": "import numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert X to a NumPy array\n    arr = np.array(X, dtype=float)\n\n    # Check if the array is square\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n\n    # Check if the array is equal to its transpose within a small tolerance\n    return np.allclose(arr, arr.T, atol=1e-8)"}
{"task_id": 377, "completion_id": 0, "completion": "import numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic (binomial deviance) loss used in Gradient Boosting.\n\n    The true labels in y must be in {0, 1}. They are mapped to {\u22121, 1} by y' = 2*y \u2212 1.\n    The current prediction scores are in f.\n\n    The negative gradient for each sample i is given by:\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n\n    Parameters:\n    -----------\n    y : list\n        A list of binary class labels, each value in {0, 1}.\n    f : list\n        A list of current prediction scores (real numbers).\n\n    Returns:\n    --------\n    list\n        A list of negative gradient values, rounded to 4 decimal places. \n        Returns -1 if the label list contains values other than {0, 1}.\n    \"\"\"\n    # Check if all labels are 0 or 1\n    if any(label not in [0, 1] for label in y):\n        return -1\n\n    # Convert inputs to numpy arrays\n    y_array = np.array(y, dtype=float)\n    f_array = np.array(f, dtype=float)\n\n    # Compute y' (map {0,1} to {\u22121,1})\n    y_prime = 2 * y_array - 1\n\n    # Compute the negative gradient component-wise\n    gradients = y_prime / (1.0 + np.exp(y_prime * f_array))\n\n    # Round each value to 4 decimal places and convert to a Python list\n    return np.round(gradients, 4).tolist()"}
{"task_id": 380, "completion_id": 0, "completion": "import numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    SELU(x) = scale \u00b7 ELU(x, \u03b1) \n    where ELU(x, \u03b1) = x if x > 0, \u03b1(e^x \u2013 1) otherwise.\n\n    The recommended constants (from the original paper) are\n    \u03b1 = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array\n    X = np.asanyarray(x, dtype=float)\n\n    if order == 0:\n        # SELU function\n        # x > 0 => scale*x\n        # x <= 0 => scale*alpha*(exp(x) - 1)\n        out = np.where(X > 0, scale * X, scale * alpha * (np.exp(X) - 1))\n    elif order == 1:\n        # First derivative\n        # x > 0 => scale\n        # x <= 0 => scale*alpha*exp(x)\n        out = np.where(X > 0, scale, scale * alpha * np.exp(X))\n    elif order == 2:\n        # Second derivative\n        # x > 0 => 0\n        # x <= 0 => scale*alpha*exp(x)\n        out = np.where(X > 0, 0.0, scale * alpha * np.exp(X))\n    else:\n        raise ValueError(\"Order must be 0, 1 or 2.\")\n\n    # Round to 4 decimals\n    out = np.round(out, 4)\n\n    # Convert to Python list (scalar if input was scalar)\n    if np.isscalar(x):\n        return out.item()\n    return out.tolist()"}
{"task_id": 387, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    N = len(x)\n    if N == 0:\n        return []\n    \n    # Initial prediction = mean of targets\n    y_hat = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_hat\n        \n        # If all feature values are identical or there's only one sample => no valid split\n        if np.all(x == x[0]) or N == 1:\n            stump_pred = np.full(N, np.mean(residuals))\n            y_hat += learning_rate * stump_pred\n            continue\n        \n        # Sort by x\n        sort_idx = np.argsort(x)\n        sorted_x = x[sort_idx]\n        sorted_r = residuals[sort_idx]\n        \n        # Prefix sums for quick SSE computation\n        prefix_sum = np.cumsum(sorted_r)\n        prefix_sum_sq = np.cumsum(sorted_r ** 2)\n        \n        best_sse = None\n        best_i = None\n        \n        # Consider splits between i and i+1\n        for i in range(N - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                # Same x-values => not a valid split\n                continue\n            \n            # Left side: indices [0..i]\n            nL = i + 1\n            sumL = prefix_sum[i]\n            sumL_sq = prefix_sum_sq[i]\n            sse_left = sumL_sq - (sumL**2 / nL)\n            \n            # Right side: indices [i+1..N-1]\n            nR = N - (i + 1)\n            sumR = prefix_sum[N - 1] - sumL\n            sumR_sq = prefix_sum_sq[N - 1] - sumL_sq\n            sse_right = sumR_sq - (sumR**2 / nR)\n            \n            total_sse = sse_left + sse_right\n            if best_sse is None or total_sse < best_sse:\n                best_sse = total_sse\n                best_i = i\n        \n        # If no valid split found (should be rare; means all x consecutive pairs are identical)\n        if best_i is None:\n            stump_pred = np.full(N, np.mean(residuals))\n            y_hat += learning_rate * stump_pred\n            continue\n        \n        # Otherwise, compute stump predictions\n        split_threshold = 0.5 * (sorted_x[best_i] + sorted_x[best_i + 1])\n        nL = best_i + 1\n        sumL = prefix_sum[best_i]\n        r_L = sumL / nL\n        \n        nR = N - nL\n        sumR = prefix_sum[N - 1] - sumL\n        r_R = sumR / nR\n        \n        # Build the stump prediction for each sample\n        stump_pred = np.where(x <= split_threshold, r_L, r_R)\n        \n        # Update the running prediction\n        y_hat += learning_rate * stump_pred\n    \n    return np.round(y_hat, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialise Eg if not provided\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    epsilon = 1e-8  # small constant for numerical stability\n\n    # Update the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n\n    # Round to 4 decimal places and convert to Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n\n    return w_next_rounded, Eg_next_rounded\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array\n    x_arr = np.asarray(x, dtype=float)\n\n    if not derivative:\n        # ELU activation\n        result = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    else:\n        # ELU derivative\n        # If x >= 0 -> 1\n        # If x < 0  -> alpha * e^x\n        result = np.where(x_arr >= 0, 1, alpha * np.exp(x_arr))\n\n    # Round to 4 decimal places and convert to Python list\n    return list(np.round(result, 4))\n```"}
{"task_id": 411, "completion_id": 0, "completion": "import numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def get_dim_and_iterable_status(sample):\n        \"\"\"\n        Determine the dimension (number of scalar entries) for 'sample' and\n        whether it is an iterable (list/tuple/np.ndarray) or a scalar.\n        \"\"\"\n        if isinstance(sample, np.ndarray):\n            # A zero-dimensional array has shape (), treat as scalar\n            if sample.shape == ():\n                return 1, False\n            else:\n                return sample.size, True\n        elif isinstance(sample, (list, tuple)):\n            return len(sample), True\n        else:\n            # Assume it's a scalar (int/float/etc.)\n            return 1, False\n\n    def analyze(values):\n        \"\"\"\n        Given a list of values (actions or observations), compute:\n          - tuple_ (bool): whether any item is an iterable\n          - multidim (bool): whether dimension > 1\n          - continuous (bool): True if any value is a non-integer float\n          - dimension (int): number of components per item (1 if scalar)\n          - sets_per_dim (list of sets): collected unique values per dimension\n        \"\"\"\n        if not values:\n            # In case of empty input, define defaults (not specifically stated in the task)\n            return {\n                'tuple': False,\n                'multidim': False,\n                'continuous': False,\n                'dimension': 0,\n                'sets_per_dim': []\n            }\n\n        first = values[0]\n        dimension, is_iterable = get_dim_and_iterable_status(first)\n        tuple_ = is_iterable\n        multidim = (dimension > 1)\n\n        # Prepare sets for each dimension\n        sets_per_dim = [set() for _ in range(dimension)]\n        continuous = False\n\n        for val in values:\n            # For each item, decide whether it's scalar or iterable\n            d, it = get_dim_and_iterable_status(val)\n\n            if d == 1 and not it:\n                # scalar\n                x = val\n                sets_per_dim[0].add(x)\n                # check if non-integer float => continuous\n                if isinstance(x, float) and (not x.is_integer()):\n                    continuous = True\n            else:\n                # iterable\n                # make sure it has 'dimension' elements\n                # for dimension=1, it's a length-1 iterable\n                for i in range(dimension):\n                    x = val[i]\n                    sets_per_dim[i].add(x)\n                    if isinstance(x, float) and not x.is_integer():\n                        continuous = True\n\n        return {\n            'tuple': tuple_,\n            'multidim': multidim,\n            'continuous': continuous,\n            'dimension': dimension,\n            'sets_per_dim': sets_per_dim\n        }\n\n    def finalize_stats(stats_dict):\n        \"\"\"\n        From the stats_dict (with 'sets_per_dim', etc.) build the required fields:\n          - n_per_dim\n          - ids_per_dim\n        \"\"\"\n        sets = stats_dict['sets_per_dim']\n        # Compute number of unique values per dimension:\n        n_per_dim = [len(s) for s in sets]\n        # Sort unique identifiers in each dimension:\n        ids_per_dim = [sorted(list(s)) for s in sets]\n        return n_per_dim, ids_per_dim\n\n    # Analyze actions and observations\n    a_stats = analyze(actions)\n    o_stats = analyze(observations)\n\n    # Compute final per-dimension lists\n    a_n_per_dim, a_ids_per_dim = finalize_stats(a_stats)\n    o_n_per_dim, o_ids_per_dim = finalize_stats(o_stats)\n\n    return {\n        'tuple_actions': a_stats['tuple'],\n        'tuple_observations': o_stats['tuple'],\n        'multidim_actions': a_stats['multidim'],\n        'multidim_observations': o_stats['multidim'],\n        'continuous_actions': a_stats['continuous'],\n        'continuous_observations': o_stats['continuous'],\n        'n_actions_per_dim': a_n_per_dim,\n        'action_dim': a_stats['dimension'],\n        'n_obs_per_dim': o_n_per_dim,\n        'obs_dim': o_stats['dimension'],\n        'action_ids': a_ids_per_dim,\n        'obs_ids': o_ids_per_dim\n    }"}
{"task_id": 413, "completion_id": 0, "completion": "import numpy as np\n\ndef gbdt_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    n_estimators: int = 10,\n    learning_rate: float = 0.1,\n    max_depth: int = 3\n) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in X_test, rounded to 4 decimal places.\n    \"\"\"\n\n    # ------------------------\n    # 1. Define CART functions\n    # ------------------------\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int) -> dict:\n        \"\"\"\n        Recursively build a CART regression tree using mean-squared-error (variance) \n        to evaluate splits. The tree is grown until max_depth is reached or no \n        further improvement in split error is possible.\n        \"\"\"\n        # Base cases for stopping\n        if depth >= max_depth or len(X) <= 1 or np.all(y == y[0]):\n            return {\"type\": \"leaf\", \"value\": np.mean(y)}\n\n        n_samples, n_features = X.shape\n        # Current node error (sum of squared deviations about the mean)\n        current_error = np.var(y) * len(y)\n\n        best_feature, best_threshold, best_error = None, None, current_error\n        best_split = None\n\n        # Try splitting on each feature and each possible threshold\n        for feat in range(n_features):\n            unique_vals = np.unique(X[:, feat])\n            # Skip if all values in this feature are identical\n            if len(unique_vals) == 1:\n                continue\n\n            # For a simple approach, test each unique value as threshold\n            for threshold in unique_vals:\n                left_mask = X[:, feat] <= threshold\n                right_mask = ~left_mask\n\n                left_y = y[left_mask]\n                right_y = y[right_mask]\n\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n\n                left_error = np.var(left_y) * len(left_y)\n                right_error = np.var(right_y) * len(right_y)\n                split_error = left_error + right_error\n\n                if split_error < best_error:\n                    best_feature = feat\n                    best_threshold = threshold\n                    best_error = split_error\n                    best_split = (left_mask, right_mask)\n\n        # If no improvement, create a leaf\n        if best_feature is None or best_split is None or best_error >= current_error:\n            return {\"type\": \"leaf\", \"value\": np.mean(y)}\n\n        # Otherwise, split and build child subtrees\n        left_mask, right_mask = best_split\n        left_node = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_node = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return {\n            \"type\": \"node\",\n            \"feature\": best_feature,\n            \"threshold\": best_threshold,\n            \"left\": left_node,\n            \"right\": right_node,\n        }\n\n    def predict_tree(tree: dict, x: np.ndarray) -> float:\n        \"\"\"Predict the output of a single sample x based on the given tree.\"\"\"\n        if tree[\"type\"] == \"leaf\":\n            return tree[\"value\"]\n        else:\n            feat = tree[\"feature\"]\n            thresh = tree[\"threshold\"]\n            if x[feat] <= thresh:\n                return predict_tree(tree[\"left\"], x)\n            else:\n                return predict_tree(tree[\"right\"], x)\n\n    # ------------------------\n    # 2. GBDT main procedure\n    # ------------------------\n\n    # Initial prediction is the mean of y_train\n    initial_prediction = np.mean(y_train)\n    # Keep track of trees built at each iteration\n    trees = []\n\n    # We maintain a running prediction for the training set\n    # so we can compute residuals each iteration\n    y_pred_train = np.full_like(y_train, initial_prediction, dtype=float)\n\n    # Train each boosting stage\n    for _ in range(n_estimators):\n        # Compute residuals = y - current_prediction\n        residuals = y_train - y_pred_train\n\n        # Build a regression tree on the residuals\n        tree = build_tree(X_train, residuals, depth=0)\n        trees.append(tree)\n\n        # Update training predictions with this tree\n        # We add learning_rate * tree_output to the running prediction\n        for i in range(len(X_train)):\n            y_pred_train[i] += learning_rate * predict_tree(tree, X_train[i])\n\n    # ----------------------------\n    # 3. Predict on X_test\n    # ----------------------------\n    # Start with the initial prediction for every sample\n    y_pred_test = np.full(shape=(len(X_test),), fill_value=initial_prediction, dtype=float)\n\n    # Add contributions from each tree\n    for tree in trees:\n        for i in range(len(X_test)):\n            y_pred_test[i] += learning_rate * predict_tree(tree, X_test[i])\n\n    # Round to 4 decimals, convert to Python list\n    return [round(float(val), 4) for val in y_pred_test]"}
{"task_id": 416, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    -----------\n    X : numpy.ndarray\n        A NumPy array of shape (n_samples, n_features) or (n_features, ) representing the data\n        points for which we want to evaluate the PDF.\n        If X is 1D, it is treated as (n_samples=length_of_X, 1).\n\n    mean : numpy.ndarray\n        A NumPy array of shape (n_features, ) representing the mean vector of the distribution.\n\n    cov : numpy.ndarray\n        A NumPy array of shape (n_features, n_features) representing the covariance matrix (must be\n        positive-definite / invertible).\n\n    Returns:\n    --------\n    list\n        A Python list of length n_samples containing the PDF values for each data point in X,\n        rounded to four decimal places.\n    \"\"\"\n\n    X = np.asarray(X, dtype=float)\n\n    # If X is a 1D array, treat it as (n_samples, 1)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n\n    # Convert mean to the right shape (n_features, )\n    mean = np.asarray(mean, dtype=float).ravel()\n    if mean.shape[0] != n_features:\n        raise ValueError(\"Shape mismatch: 'mean' length must match number of features in X.\")\n\n    # Ensure covariance is a 2D array of shape (n_features, n_features)\n    cov = np.asarray(cov, dtype=float)\n    if cov.shape != (n_features, n_features):\n        raise ValueError(\n            \"Shape mismatch: 'cov' must be of shape (n_features, n_features).\"\n        )\n\n    # Compute determinant and inverse of covariance\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError(\"Covariance matrix must be positive-definite.\")\n    inv_cov = np.linalg.inv(cov)\n\n    # Compute normalization constant\n    norm_const = 1.0 / math.sqrt(((2.0 * math.pi) ** n_features) * det_cov)\n\n    # Compute PDF values\n    pdf_values = []\n    for i in range(n_samples):\n        diff = (X[i] - mean).reshape(-1, 1)  # column vector\n        exponent = -0.5 * diff.T @ inv_cov @ diff\n        value = norm_const * math.exp(exponent)\n        pdf_values.append(round(value.item(), 4))\n\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function returns the MAP predictive means for each row in `X_new`,\n    rounded to 4 decimal places.  The posterior is given by\n\n        \u03a3_p = ( V^-1 + X^T X )^-1\n        \u03bc_p = \u03a3_p ( V^-1 \u03bc + X^T y )\n\n    and the predictions for a new design matrix X_new are X_new \u03bc_p.\n    \"\"\"\n\n    # 1. Add intercept column if requested\n    if fit_intercept:\n        # Add a column of ones to X\n        X = np.column_stack([np.ones(X.shape[0]), X])\n        # Add a column of ones to X_new\n        X_new = np.column_stack([np.ones(X_new.shape[0]), X_new])\n    \n    # Number of features (after possibly adding intercept)\n    D = X.shape[1]\n\n    # 2. Ensure mu is a D-dimensional array\n    if np.isscalar(mu):\n        mu_vec = np.full(D, mu, dtype=float)\n    else:\n        mu_vec = np.asarray(mu, dtype=float)\n        # If mu is given as a single-element array, replicate it\n        if mu_vec.ndim == 0:\n            mu_vec = np.full(D, mu_vec.item(), dtype=float)\n        # Otherwise check dimension\n        elif mu_vec.shape[0] != D:\n            raise ValueError(\"Dimension mismatch between mu and X.\")\n\n    # 3. Construct the prior covariance matrix V\n    if V is None:\n        V_mat = np.eye(D, dtype=float)\n    elif np.isscalar(V):\n        V_mat = float(V) * np.eye(D, dtype=float)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            if V_arr.shape[0] != D:\n                raise ValueError(\"Dimension mismatch between V and X.\")\n            V_mat = np.diag(V_arr)\n        else:\n            if V_arr.shape != (D, D):\n                raise ValueError(\"Dimension mismatch between V and X.\")\n            V_mat = V_arr\n\n    # 4. Compute the posterior\n    #    \u03a3_p = ( V^-1 + X^T X )^-1\n    #    \u03bc_p = \u03a3_p ( V^-1 mu + X^T y )\n    V_inv = np.linalg.inv(V_mat)\n    Cov_inv = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(Cov_inv)\n    posterior_mean = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n\n    # 5. Predict for X_new\n    y_pred = X_new @ posterior_mean\n\n    # 6. Round to 4 decimal places and return as a list\n    return [round(float(val), 4) for val in y_pred]\n```"}
{"task_id": 423, "completion_id": 0, "completion": "import numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative floats.\n\n    1. If 'actual' and 'predicted' have different lengths or contain negative values, return -1.\n    2. Compute RMSLE = sqrt( (1/n) * sum( (log1p(pred) - log1p(act))^2 ) ).\n    3. Return the result rounded to 4 decimals.\n    \"\"\"\n    # 1. Validate input length and non-negativity\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Convert lists to numpy arrays for vectorized operations\n    actual_arr = np.array(actual, dtype=float)\n    predicted_arr = np.array(predicted, dtype=float)\n    \n    # 2. Compute RMSLE\n    # log1p(x) = log(1 + x)\n    # RMSLE = sqrt( mean( (log(1+pred_i) - log(1+act_i))^2 ) )\n    logs_diff = np.log1p(predicted_arr) - np.log1p(actual_arr)\n    rmsle_value = np.sqrt(np.mean(logs_diff ** 2))\n\n    # 3. Return rounded to 4 decimals\n    return round(rmsle_value, 4)"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero. When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places. Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # For a symmetric window, use N = window_len\n    # For a periodic window, use N = window_len + 1 and drop the last point\n    N = window_len if symmetric else window_len + 1\n\n    # Generate the Hann window\n    full_window = [\n        0.5 - 0.5 * math.cos((2.0 * math.pi * i) / (N - 1))\n        for i in range(N)\n    ]\n\n    # If periodic, drop the last point\n    if not symmetric:\n        full_window = full_window[:-1]\n\n    # Round to 4 decimal places and return as a list\n    return np.round(full_window, 4).tolist()\n```\n"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in, fan_out = shape[0], shape[1]\n\n    return float(fan_in), float(fan_out)\n```\n"}
{"task_id": 435, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"\n    Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert input to numpy arrays of float type\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Number of samples\n    m = X_np.shape[0]\n\n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        # Return a vector filled with the mean of y\n        mean_y = float(np.mean(y_np))\n        predictions = [round(mean_y, 4)] * m\n        return predictions\n\n    # 1) Compute the mean of y; this is our initial prediction\n    mean_y = np.mean(y_np)\n    y_hat = np.full_like(y_np, mean_y)\n\n    # 2) Boosting iterations\n    for _ in range(n_estimators):\n        # a) Compute residuals\n        residuals = y_np - y_hat\n\n        # b) Fit OLS: create X_aug with a column of 1s to include intercept\n        X_aug = np.hstack([np.ones((m, 1)), X_np])  # shape (m, d+1)\n        # Solve for parameters (intercept + coefficients) via least squares\n        params, _, _, _ = np.linalg.lstsq(X_aug, residuals, rcond=None)\n\n        # c) Predict residuals using the fitted model\n        residual_pred = X_aug @ params\n\n        # d) Update y_hat\n        y_hat = y_hat + learning_rate * residual_pred\n\n    # Round predictions to 4 decimals and convert to a regular list\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 437, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check if order is valid\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Determine if input is scalar\n    is_scalar = isinstance(x, (int, float))\n\n    # Convert input to a NumPy array (for easy broadcast)\n    arr = np.array(x, dtype=float)\n\n    # Compute the sigmoid function\n    s = 1 / (1 + np.exp(-arr))\n    \n    if order == 0:\n        result = s\n    elif order == 1:\n        # First derivative: sigma(x)*(1 - sigma(x))\n        result = s * (1 - s)\n    else:  # order == 2\n        # Second derivative: sigma(x)*(1 - sigma(x))*(1 - 2*sigma(x))\n        result = s * (1 - s) * (1 - 2*s)\n\n    # Round to 4 decimals\n    result = np.round(result, 4)\n\n    # Return float if scalar was provided, else Python list\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "completion": "import numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Ensure y is a NumPy array of integers\n    y = np.array(y, dtype=int)\n    \n    # Handle the case of empty input\n    if y.size == 0:\n        # If num_classes not given, assume 0\n        if num_classes is None:\n            num_classes = 0\n        # Return an empty 2D list if y is empty\n        return [[] for _ in range(0)]\n    \n    # Determine max class index\n    max_class = np.max(y)\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max_class + 1\n    \n    # If the provided num_classes is smaller than needed, return -1\n    if num_classes < (max_class + 1):\n        return -1\n    \n    # Create a zero matrix of shape (len(y), num_classes)\n    result = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Place 1's in the appropriate positions\n    result[np.arange(y.shape[0]), y] = 1\n    \n    # Convert to standard Python list of lists and return\n    return result.tolist()"}
{"task_id": 439, "completion_id": 0, "completion": "import itertools\n\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list (or iterable) of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n        Each tuple is in ascending order.\n    \"\"\"\n    # Convert each transaction to a set for fast subset checking\n    transaction_sets = [set(t) for t in transactions]\n    num_transactions = len(transactions)\n    min_count = max(1, int(min_sup * num_transactions + 0.9999999))  # ceiling for min_count\n\n    # ------------------------------------------------------------------------\n    # 1. Generate L1: count each single item.\n    # ------------------------------------------------------------------------\n    item_counts = {}\n    for tset in transaction_sets:\n        for item in tset:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    # Keep only those single items that are frequent\n    L1 = {\n        (item,): cnt\n        for item, cnt in item_counts.items()\n        if cnt >= min_count\n    }\n\n    # If there are no frequent singletons, we're done\n    if not L1:\n        return []\n\n    # We will collect all levels of frequent itemsets in this list of dicts\n    # Each dict: { itemset_tuple : count }\n    levels = [L1]\n\n    # ------------------------------------------------------------------------\n    # Helper function to check support counts for new candidates\n    # ------------------------------------------------------------------------\n    def count_candidates(candidates, transaction_sets):\n        \"\"\"Count how many transactions contain each candidate.\"\"\"\n        counts = {c: 0 for c in candidates}  # initialize\n        for tset in transaction_sets:\n            for c in candidates:\n                # If c is subset of tset\n                # c is a tuple, check all items in c are in tset\n                if all(item in tset for item in c):\n                    counts[c] += 1\n        return counts\n\n    # ------------------------------------------------------------------------\n    # Generate next-level candidates from prev-level frequent itemsets\n    # ------------------------------------------------------------------------\n    def generate_candidates(prev_level_keys, k):\n        \"\"\"\n        Generate candidate k-itemsets by self-joining the (k-1)-itemsets.\n        Then apply the Apriori pruning step: all (k-1)-subsets must be frequent.\n        \"\"\"\n        candidates = set()\n        prev_level_list = sorted(prev_level_keys)\n        n = len(prev_level_list)\n        for i in range(n):\n            for j in range(i+1, n):\n                itemset1 = prev_level_list[i]\n                itemset2 = prev_level_list[j]\n                # For Apriori, we only combine if they share the first k-2 items\n                # (because each itemset has length k-1)\n                if itemset1[:-1] == itemset2[:-1]:\n                    # Join to form a sorted candidate\n                    new_candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    # Ensure the new candidate has length k\n                    if len(new_candidate) == k:\n                        # Prune step: all (k-1)-subsets of new_candidate\n                        # must be in the previous frequent itemsets\n                        all_subsets_frequent = True\n                        for subset in itertools.combinations(new_candidate, k-1):\n                            subset = tuple(sorted(subset))\n                            if subset not in prev_level_keys:\n                                all_subsets_frequent = False\n                                break\n                        if all_subsets_frequent:\n                            candidates.add(new_candidate)\n                else:\n                    # Since the list is sorted, if the prefix doesn't match, no need to check further\n                    break\n        return candidates\n\n    # ------------------------------------------------------------------------\n    # 2. Iteratively generate candidates L_k from L_{k-1}\n    # ------------------------------------------------------------------------\n    k = 2\n    while True:\n        # Get the frequent itemsets from the last level\n        prev_level = levels[-1]\n        prev_level_keys = set(prev_level.keys())\n        \n        # Generate candidate k-itemsets\n        ck = generate_candidates(prev_level_keys, k)\n\n        if not ck:\n            break  # no candidates to count => done\n\n        # Count their frequencies\n        ck_counts = count_candidates(ck, transaction_sets)\n\n        # Keep only those that meet min_count\n        lk = {c: cnt for c, cnt in ck_counts.items() if cnt >= min_count}\n        if not lk:\n            break  # no frequent itemsets of size k\n        \n        levels.append(lk)\n        k += 1\n\n    # ------------------------------------------------------------------------\n    # 3. Combine all frequent itemsets across all levels\n    # ------------------------------------------------------------------------\n    all_frequent_itemsets = []\n    for level_dict in levels:\n        all_frequent_itemsets.extend(level_dict.keys())\n    \n    # Sort by length, then lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return all_frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "completion": "import numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n\n        If two or more classes share the same maximal probability after rounding,\n        the smallest index is chosen (default `numpy.argmax` behavior).\n    \"\"\"\n    # Convert to a NumPy array shape (n_estimators, n_samples, n_classes)\n    arr = np.array(predictions)\n\n    # Average over the estimator dimension (axis=0) -> shape (n_samples, n_classes)\n    avg_probs = arr.mean(axis=0)\n\n    # Round each probability to 4 decimal places\n    avg_probs_rounded = np.round(avg_probs, 4)\n\n    # Compute the predicted class for each sample (argmax on the rounded values)\n    predicted_labels = np.argmax(avg_probs_rounded, axis=1)\n\n    # Convert results back to regular Python lists\n    avg_probs_list = avg_probs_rounded.tolist()\n    predicted_labels_list = predicted_labels.tolist()\n\n    return avg_probs_list, predicted_labels_list"}
{"task_id": 444, "completion_id": 0, "completion": "import numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications:\n      k(x, y) = exp(-0.5 * sum_j( ( (x_j - y_j)/sigma_j )^2 ))\n\n      \u2022 If 'sigma' is a single float, the same value is used for each feature.\n      \u2022 If 'sigma' is a list of length C, each feature has its own sigma_j.\n      \u2022 If 'sigma' is None, a default sigma = sqrt(C/2) is used.\n      \u2022 Return -1 if:\n            -- 'sigma' is non-positive,\n            -- or 'sigma' is a list of incorrect length or non-positive values,\n            -- or feature dimensions of X and Y do not match.\n      \u2022 Otherwise, return the kernel matrix (N\u00d7M) (rounded to 4 decimal places) as a nested list.\n    \"\"\"\n    # Convert X to numpy array\n    try:\n        X_arr = np.array(X, dtype=float)\n    except ValueError:\n        return -1  # If X cannot be converted to float array, treat as invalid input\n    \n    # If Y not provided, use X\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        try:\n            Y_arr = np.array(Y, dtype=float)\n        except ValueError:\n            return -1  # If Y cannot be converted to float array, treat as invalid input\n\n    # Check dimension consistency\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        return -1  # Must be 2-D lists\n    N, C = X_arr.shape\n    M, C_y = Y_arr.shape\n    if C != C_y:\n        return -1  # Feature dimensions must match\n\n    # Determine sigma\n    if sigma is None:\n        # Default sigma\n        sigma_val = np.sqrt(C / 2.0)\n        sigma_arr = np.full((C,), sigma_val, dtype=float)\n    elif isinstance(sigma, float) or isinstance(sigma, int):\n        # Single value for all features\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full((C,), float(sigma), dtype=float)\n    elif isinstance(sigma, list):\n        # Each feature has own sigma\n        if len(sigma) != C:\n            return -1\n        # Check all values positive\n        for s in sigma:\n            if s <= 0:\n                return -1\n        sigma_arr = np.array(sigma, dtype=float)\n    else:\n        return -1  # Invalid type for sigma\n\n    # Compute the RBF kernel\n    # Expand X and Y so that we can broadcast over all pairs (N x M x C)\n    diff = X_arr[:, np.newaxis, :] - Y_arr[np.newaxis, :, :]\n    # Scale each dimension by its respective sigma\n    # shape of diff = (N, M, C), shape of sigma_arr = (C,)\n    # Broadcast to divide each feature by sigma (or multiply by 1/sigma)\n    diff = diff / sigma_arr  # broadcasting\n\n    # Squared distances summed along the feature dimension\n    dist_sq = np.sum(diff**2, axis=2)\n\n    # RBF formula: exp(-0.5 * dist_sq)\n    K = np.exp(-0.5 * dist_sq)\n\n    # Round to 4 decimals and convert to (nested) Python list\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 446, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    # Convert inputs to numpy arrays for convenience\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=int)\n\n    # Number of samples and features\n    n_samples, n_features = X.shape\n\n    # -------------------------------------------------------------------------\n    # Helper functions\n    # -------------------------------------------------------------------------\n    def compute_entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute the Shannon entropy of the array of labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        # Count frequency of each label\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / len(labels)\n        # Shannon entropy\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels: np.ndarray) -> int:\n        \"\"\"\n        Return the most frequent label in 'labels'.\n        In case of tie, return the smallest label.\n        \"\"\"\n        if len(labels) == 0:\n            return 0  # Should not happen in this context, but a fallback\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        max_count = np.max(counts)\n        # Among those that appear max_count times, pick the smallest label\n        candidates = unique_labels[counts == max_count]\n        return np.min(candidates)\n\n    # -------------------------------------------------------------------------\n    # Early check: if all labels are identical, no split can improve info gain\n    # -------------------------------------------------------------------------\n    parent_entropy = compute_entropy(y)\n    if parent_entropy == 0:\n        # All samples have the same label\n        maj_label = majority_label(y)\n        return (-1, None, maj_label, maj_label)\n\n    # Majority label of the entire node (in case we end up with no improvement)\n    overall_majority_label = majority_label(y)\n\n    # -------------------------------------------------------------------------\n    # Prepare to search for the best split\n    # -------------------------------------------------------------------------\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_label = overall_majority_label\n    best_right_label = overall_majority_label\n\n    # -------------------------------------------------------------------------\n    # For each feature, consider midpoints between successive distinct values\n    # -------------------------------------------------------------------------\n    for j in range(n_features):\n        # Get sorted unique values in this column\n        col_j = X[:, j]\n        unique_vals = np.unique(col_j)\n        # If there's only one unique value, no valid threshold to split\n        if len(unique_vals) == 1:\n            continue\n\n        # Potential thresholds are midpoints between successive distinct values\n        thresholds = (\n            (unique_vals[:-1] + unique_vals[1:]) / 2.0\n        )\n\n        # Evaluate each candidate threshold\n        for thr in thresholds:\n            # Split indices\n            left_indices = (col_j <= thr)\n            right_indices = (col_j > thr)\n\n            # Retrieve corresponding labels\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n\n            # Compute left/right proportions\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n\n            # Compute entropies\n            left_entropy = compute_entropy(y_left)\n            right_entropy = compute_entropy(y_right)\n\n            # Information gain\n            # Gain = H(parent) - p_left * H(left) - p_right * H(right)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n\n            if gain > best_gain:\n                # This is strictly better -> update\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = thr\n                best_left_label = majority_label(y_left)\n                best_right_label = majority_label(y_right)\n            elif np.isclose(gain, best_gain):\n                # Tie case: check tie-breaking rules\n                # 1) smaller feature index\n                # 2) if same feature, smaller threshold\n                if j < best_feature_index or best_feature_index == -1:\n                    best_feature_index = j\n                    best_threshold = thr\n                    best_left_label = majority_label(y_left)\n                    best_right_label = majority_label(y_right)\n                elif j == best_feature_index and thr < best_threshold:\n                    best_threshold = thr\n                    best_left_label = majority_label(y_left)\n                    best_right_label = majority_label(y_right)\n\n    # -------------------------------------------------------------------------\n    # If no gain was found (best_gain == 0), return the degenerate stump\n    # -------------------------------------------------------------------------\n    if best_gain <= 1e-15:\n        # No improvement: return (-1, None, majority_label, majority_label)\n        return (-1, None, overall_majority_label, overall_majority_label)\n\n    # Otherwise, return the best split found.\n    # Threshold must be rounded to 4 decimal places.\n    return (\n        best_feature_index,\n        round(best_threshold, 4),\n        best_left_label,\n        best_right_label\n    )"}
{"task_id": 452, "completion_id": 0, "completion": "import numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  The first element is the 'first subset',\n        and the second element is the 'second subset'. Both are regular\n        Python lists (converted via .tolist() if needed).\n    \"\"\"\n    # Convert X to a NumPy array if it's a list\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=object)\n    \n    # Determine if threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Prepare two lists to hold the subsets\n    subset_0 = []\n    subset_1 = []\n    \n    # Partition the samples\n    for row in X:\n        value = row[feature_i]\n        \n        if is_numeric:\n            if value >= threshold:\n                subset_0.append(row)\n            else:\n                subset_1.append(row)\n        else:  # categorical\n            if value == threshold:\n                subset_0.append(row)\n            else:\n                subset_1.append(row)\n    \n    # Convert the subsets to NumPy arrays for .tolist() (if they're non-empty),\n    # then return them as lists in a 2-element list.\n    subset_0 = np.array(subset_0, dtype=object).tolist() if len(subset_0) > 0 else []\n    subset_1 = np.array(subset_1, dtype=object).tolist() if len(subset_1) > 0 else []\n    \n    return [subset_0, subset_1]"}
{"task_id": 453, "completion_id": 0, "completion": "import numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check gamma in [0,1]\n    if gamma < 0 or gamma > 1:\n        return -1\n\n    # Q and Q_next must be 2D and of the same shape\n    if Q.ndim != 2 or Q_next.ndim != 2 or Q.shape != Q_next.shape:\n        return -1\n\n    b, n_actions = Q.shape\n\n    # actions, rewards, dones must all have length b\n    if not (len(actions) == b and len(rewards) == b and len(dones) == b):\n        return -1\n\n    # Copy the original Q-values\n    updated_Q = Q.copy()\n\n    # Compute and assign the targets\n    for i in range(b):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        # Replace only the action taken\n        updated_Q[i, actions[i]] = target\n\n    # Round to 4 decimal places and convert to nested list\n    return updated_Q.round(4).tolist()"}
{"task_id": 458, "completion_id": 0, "completion": "import numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a list (if it's tuple or ndarray)\n    labels_list = list(labels)\n\n    # If there are no labels, we can simply return an empty list\n    if len(labels_list) == 0:\n        return []\n\n    # Check for negative labels\n    if any(label < 0 for label in labels_list):\n        return -1\n\n    # Determine the maximum label\n    max_label = max(labels_list)\n\n    # If num_classes not provided, infer from max_label\n    if num_classes is None:\n        num_classes = max_label + 1\n\n    # If num_classes is smaller than needed\n    if num_classes < max_label + 1:\n        return -1\n\n    # Construct the one-hot encoded result as a list of lists\n    one_hot_result = []\n    for label in labels_list:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot_result.append(row)\n\n    return one_hot_result"}
{"task_id": 461, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    X = np.array(x, dtype=float)\n    Y = np.array(y, dtype=float)\n\n    # If no estimators, return the mean of Y\n    if n_estimators <= 0:\n        mean_y = np.mean(Y)\n        return np.round(np.full_like(Y, mean_y), 4).tolist()\n\n    # Initial prediction: the mean of the targets\n    y_hat = np.full_like(Y, np.mean(Y))\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        r = Y - y_hat\n\n        # Stop early if the residuals are (close to) all zero\n        if np.allclose(r, 0, atol=1e-12):\n            break\n\n        # Search for the best split among unique X except the largest\n        unique_x = np.unique(X)\n        if len(unique_x) < 2:\n            # No valid split (all X the same)\n            # Stump: predict the mean residual for all\n            stump_pred = np.full_like(r, np.mean(r))\n        else:\n            best_sse = np.inf\n            best_t = None\n            best_left_mean = 0.0\n            best_right_mean = 0.0\n\n            # Try all possible thresholds except the greatest unique value\n            for t in unique_x[:-1]:\n                left_mask = (X <= t)\n                right_mask = (X > t)\n\n                # Ignore split if either side is empty\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n\n                left_res = r[left_mask]\n                right_res = r[right_mask]\n\n                vL = np.mean(left_res)\n                vR = np.mean(right_res)\n\n                # Sum of squared errors for this split\n                sse = np.sum((left_res - vL)**2) + np.sum((right_res - vR)**2)\n\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_left_mean = vL\n                    best_right_mean = vR\n\n            if np.isinf(best_sse):\n                # No valid split found\n                stump_pred = np.full_like(r, np.mean(r))\n            else:\n                # Make predictions according to the best split\n                stump_pred = np.where(X <= best_t, best_left_mean, best_right_mean)\n\n        # Update the ensemble prediction\n        y_hat += learning_rate * stump_pred\n\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "completion": "import numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    n_actions = len(q_table[0])\n\n    # If there is no next state (episode terminated), expected future value = 0\n    if next_state is None:\n        exp_val = 0.0\n    else:\n        # Identify the greedy action in the next state (ties broken by first max)\n        q_next = q_table[next_state]\n        max_q = max(q_next)\n        greedy_action = q_next.index(max_q)\n\n        # Compute expected value under the epsilon-soft policy\n        exp_val = 0.0\n        for a_idx, q_val in enumerate(q_next):\n            if a_idx == greedy_action:\n                # Probability of choosing the greedy action\n                p = (1 - epsilon) + epsilon / n_actions\n            else:\n                # Probability of choosing a non-greedy action\n                p = epsilon / n_actions\n            exp_val += p * q_val\n\n        # Discount by gamma\n        exp_val = gamma * exp_val\n\n    # TD target\n    target = reward + exp_val\n\n    # Update Q-value\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to four decimal places\n    for s in range(len(q_table)):\n        for a in range(n_actions):\n            q_table[s][a] = round(q_table[s][a], 4)\n\n    return q_table"}
{"task_id": 474, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Each class is arranged in a rectangular cluster:\n    The class index i ranges from 0 to m-1.\n    x ~ U([(floor(i/2)+0.1)*10, (floor(i/2)+0.9)*10])\n    y ~ U([((i mod 2)*interval+0.1)*10, ((i mod 2)*interval+0.9)*10])\n    label = (i - 0.5) * 2  # \u2192 -1, +1, 3, 5, etc.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                   of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates are rounded to 4 decimal places.\n    \"\"\"\n    # If a seed is provided, make the random sampling reproducible\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # Compute the bounds for x and y\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n\n        # Label for class i\n        label = (i - 0.5) * 2\n\n        # Generate training samples\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train_list.append(np.column_stack((x_train, y_train)))\n        Y_train_list.append(np.full((n_train,), label))\n\n        # Generate validation samples\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val_list.append(np.column_stack((x_val, y_val)))\n        Y_val_list.append(np.full((n_val,), label))\n\n    # Concatenate the lists for all classes\n    X_train = np.vstack(X_train_list)\n    Y_train = np.concatenate(Y_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_val = np.concatenate(Y_val_list)\n\n    # Round all coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        (w_new, m_new, v_new) where:\n        * w_new \u2013 updated parameters (same shape as w)\n        * m_new \u2013 updated first moment\n        * v_new \u2013 updated second moment\n    \"\"\"\n\n    # If previous moment arrays do not exist, initialise them to zeros\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Update the biased first and second moment estimates\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    # Compute the bias-corrected estimates\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n\n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Number of arms\n    N = len(rewards[0])\n    # Number of time-steps\n    T = len(rewards)\n\n    # Initialize estimated values and counters\n    values = np.full(N, ev_prior, dtype=float)\n    counts = np.zeros(N, dtype=int)\n\n    for t in range(T):\n        # Explore with probability epsilon\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the largest estimated value (ties -> smallest index)\n            chosen_arm = int(np.argmax(values))\n\n        # Obtain the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n\n        # Update counts and estimate\n        counts[chosen_arm] += 1\n        values[chosen_arm] += (reward - values[chosen_arm]) / counts[chosen_arm]\n\n    # Return final estimates rounded to 4 decimals\n    return [round(v, 4) for v in values]\n```"}
{"task_id": 481, "completion_id": 0, "completion": "import numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n\n    # If input data is empty, return an empty list\n    if data.size == 0:\n        return []\n\n    # Number of data points\n    n_samples = data.shape[0]\n\n    # Labels for each point (-1 means noise by default)\n    labels = [-1] * n_samples\n\n    # Keep track of visited points\n    visited = [False] * n_samples\n\n    # Function to find all neighbors of a point within eps (including itself)\n    def get_neighbors(point_idx: int) -> list[int]:\n        # Compute distances from data[point_idx] to all points\n        # Use Euclidean distance\n        diffs = data - data[point_idx]\n        dists = np.sqrt(np.sum(diffs * diffs, axis=1))\n        # Return the indices of points where distance <= eps\n        return np.where(dists <= eps)[0].tolist()\n\n    cluster_id = 0  # Start labeling clusters at 0\n\n    # Main DBSCAN loop\n    for i in range(n_samples):\n        if not visited[i]:\n            visited[i] = True\n            neighbors = get_neighbors(i)\n\n            # If not enough neighbors, label as noise (-1).\n            # (Might later be changed if found within a different core's neighborhood.)\n            if len(neighbors) < min_samples:\n                labels[i] = -1\n            else:\n                # We have found a core point; start a new cluster\n                labels[i] = cluster_id\n                # Expand this cluster by BFS/queue\n                queue = neighbors[:]\n\n                # Process every point in the queue\n                while queue:\n                    j = queue.pop()\n                    if not visited[j]:\n                        visited[j] = True\n                        j_neighbors = get_neighbors(j)\n                        # If this new point j is a core point, \n                        # add its neighbors for expansion\n                        if len(j_neighbors) >= min_samples:\n                            queue.extend(j_neighbors)\n\n                    # Assign cluster label if unclassified (i.e., -1)\n                    if labels[j] == -1:\n                        labels[j] = cluster_id\n\n                # Once finished expanding this cluster, move to next cluster ID\n                cluster_id += 1\n\n    return labels"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to a NumPy array of integer type\n    y = np.asarray(y, dtype=int)\n    \n    # Ensure `y` is one-dimensional\n    if y.ndim != 1:\n        raise ValueError(\"Input labels must be a 1D array.\")\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = y.max() + 1\n    \n    # Check for invalid labels\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Class labels must be between 0 and num_classes-1.\")\n    \n    # Create a 2D array of zeros\n    result = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Place 1s in the appropriate positions\n    result[np.arange(len(y)), y] = 1\n    \n    return result\n```"}
{"task_id": 485, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"\n    Fit a univariate regression tree of depth *max_depth* on (X_train, y_train)\n    and predict for points in X_test. If X_train is empty, return [].\n\n    A simple CART-like algorithm for one feature:\n      1. Recursively split on the feature at the point minimizing sum of squared errors\n      2. Stop when max_depth is reached or when <2 samples remain\n      3. Each leaf is labeled with the mean target value in that leaf\n      4. Traverse to get predictions for X_test\n    \"\"\"\n\n    # If no training data, return empty list\n    if len(X_train) == 0:\n        return []\n\n    # Convert to numpy arrays for convenience\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n\n    # Recursive tree-building function\n    def build_tree(X, y, depth):\n        # Stop if node is pure enough or depth limit reached\n        n = len(X)\n        if n < 2 or depth == max_depth:\n            return {\n                'leaf': True,\n                'pred': float(np.mean(y))  # store the mean as the leaf prediction\n            }\n\n        # Sort data by feature values\n        sort_idx = np.argsort(X)\n        X_sorted = X[sort_idx]\n        y_sorted = y[sort_idx]\n\n        # Prefix sums for y and y^2 to compute SSE efficiently\n        prefix_sum_y = np.cumsum(y_sorted)\n        prefix_sum_y2 = np.cumsum(y_sorted**2)\n\n        # Attempt all splits between distinct consecutive X-values\n        best_sse = math.inf\n        best_split_idx = -1\n        for i in range(1, n):\n            if X_sorted[i] == X_sorted[i - 1]:\n                # No valid split if feature is identical\n                continue\n\n            # Left side is [0, i-1], right side is [i, n-1]\n            left_count = i\n            right_count = n - i\n\n            left_sum = prefix_sum_y[i - 1]\n            right_sum = prefix_sum_y[n - 1] - left_sum\n\n            left_sum2 = prefix_sum_y2[i - 1]\n            right_sum2 = prefix_sum_y2[n - 1] - left_sum2\n\n            # Means\n            left_mean = left_sum / left_count\n            right_mean = right_sum / right_count\n\n            # SSE = sum(y^2) - (sum(y)^2)/count\n            left_sse = left_sum2 - left_count * (left_mean ** 2)\n            right_sse = right_sum2 - right_count * (right_mean ** 2)\n\n            split_sse = left_sse + right_sse\n            if split_sse < best_sse:\n                best_sse = split_sse\n                best_split_idx = i\n\n        # If no valid split found, return leaf\n        if best_split_idx < 1:\n            return {\n                'leaf': True,\n                'pred': float(np.mean(y))\n            }\n\n        # Split value: midpoint between points\n        split_val = 0.5 * (X_sorted[best_split_idx - 1] + X_sorted[best_split_idx])\n\n        # Partition data into left and right\n        left_mask = (X < split_val)\n        right_mask = ~left_mask\n\n        # Recursively build children\n        left_child = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_child = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return {\n            'leaf': False,\n            'split': split_val,\n            'left': left_child,\n            'right': right_child\n        }\n\n    # Build the tree starting at depth 0\n    root = build_tree(X_train, y_train, depth=0)\n\n    # Prediction by traversing the tree\n    def predict(node, x):\n        if node['leaf']:\n            return node['pred']\n        if x < node['split']:\n            return predict(node['left'], x)\n        else:\n            return predict(node['right'], x)\n\n    # Predict for all points in X_test\n    return [float(predict(root, x)) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "completion": "import numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert the input to a NumPy array (this will handle list, tuple, or np.ndarray).\n    arr = np.array(x, dtype=float)\n    \n    # If the input vector is empty, return an empty list.\n    if arr.size == 0:\n        return []\n    \n    # Create a diagonal matrix from the array.\n    diag_matrix = np.diag(arr)\n    \n    # Convert the NumPy array to a Python list of lists.\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # -------------------------------------------------------------------------\n    # 1) Count item frequencies, remove infrequent items\n    # -------------------------------------------------------------------------\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    \n    # Filter out items that do not meet min_sup\n    freq = {item: count for item, count in freq.items() if count >= min_sup}\n    if not freq:\n        return []\n\n    # A convenient global ordering for building the FP-tree:\n    # sort items descending by frequency, then by item name to break ties\n    # (The standard FP-Growth references ordering by descending frequency.)\n    def sort_key(item):\n        return (-freq[item], item)\n    \n    # -------------------------------------------------------------------------\n    # 2) FP-Tree data structures and construction\n    # -------------------------------------------------------------------------\n    class FPTreeNode:\n        __slots__ = [\"item\", \"count\", \"parent\", \"children\", \"link\"]\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            # link will connect this node to the next node of the same item\n            self.link = None\n            \n    # The root is a sentinel with item=None\n    root = FPTreeNode(None, None)\n    \n    # \"header_table\" maps item -> first node in a linked chain of that item.\n    header_table = dict()  # item -> node\n\n    # Insert ordered transaction into the FP-tree\n    def insert_transaction(trans):\n        current = root\n        for itm in trans:\n            if itm not in current.children:\n                child = FPTreeNode(itm, current)\n                current.children[itm] = child\n                # Link this child into the item chain in header_table\n                if itm not in header_table:\n                    header_table[itm] = child\n                else:\n                    # Follow the link chain to attach at end\n                    node = header_table[itm]\n                    while node.link is not None:\n                        node = node.link\n                    node.link = child\n            else:\n                child = current.children[itm]\n            # Increase count\n            child.count += 1\n            # Move down\n            current = child\n    \n    # Build the initial FP-tree\n    for t in transactions:\n        # remove items not meeting min_sup, then sort by global freq desc\n        filtered_t = [i for i in t if i in freq]\n        if filtered_t:\n            filtered_t.sort(key=sort_key)\n            insert_transaction(filtered_t)\n\n    # -------------------------------------------------------------------------\n    # 3) The recursive mining routine\n    # -------------------------------------------------------------------------\n    # We'll collect result item-sets in a set of frozensets to avoid duplicates.\n    all_frequent_itemsets = set()\n\n    def add_to_results(base_prefix):\n        \"\"\"Add the given itemset (sorted) to our results, ensuring\n        it is stored as a frozenset so duplicates won't appear.\"\"\"\n        if base_prefix:\n            sorted_tuple = tuple(sorted(base_prefix))\n            all_frequent_itemsets.add(sorted_tuple)\n    \n    def single_path_items(node):\n        \"\"\"\n        If the FP-tree from this node downward is a single path,\n        return the list of items in that path (including this node, if it has an item).\n        Otherwise return None.\n        \"\"\"\n        path = []\n        current = node\n        # descend until we find a node that has at most 1 child\n        while True:\n            if current.item is not None:  \n                # skip root item=None\n                path.append(current.item)\n            if len(current.children) == 0:\n                # leaf\n                return path\n            elif len(current.children) > 1:\n                return None\n            else:\n                # only one child, continue\n                child = next(iter(current.children.values()))\n                current = child\n\n    def tree_has_single_path(tree_root):\n        \"\"\"\n        If the entire FP-tree from tree_root down is a single path, return it as a list of items.\n        Otherwise return None.\n        \"\"\"\n        # If root has more than 1 child, it's not a single path.\n        if len(tree_root.children) > 1:\n            return None\n        \n        # If root has no children, it's an empty tree\n        if len(tree_root.children) == 0:\n            return []\n        \n        # exactly one child, follow that child downward\n        child = next(iter(tree_root.children.values()))\n        return single_path_items(child)\n\n    def get_prefix_paths(item):\n        \"\"\"\n        Gather all prefix paths leading to the nodes (item) in the current FP-tree.\n        Returns a list of (prefix_items, count).\n        \"\"\"\n        paths = []\n        node = header_table.get(item, None)\n        \n        while node is not None:\n            # Traverse from node up to the root\n            path = []\n            parent = node.parent\n            # The count on this node is how many times this prefix occurred\n            path_count = node.count\n            while parent is not None and parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            if path:\n                path.reverse()  # from root down to (but not including) this item\n                paths.append((path, path_count))\n            node = node.link\n        return paths\n    \n    def build_conditional_tree(prefix_paths):\n        \"\"\"\n        Build a new (conditional) FP-tree from the given prefix paths.\n        prefix_paths is a list of (path, count).\n        \"\"\"\n        # 1) Count frequency of items in paths\n        cond_freq = Counter()\n        for path, count in prefix_paths:\n            cond_freq.update(path * count)  # each item repeated count times\n\n        # filter for min_sup\n        cond_freq = {k: v for k, v in cond_freq.items() if v >= min_sup}\n        if not cond_freq:\n            return None, {}\n\n        # build new tree\n        cond_root = FPTreeNode(None, None)\n        cond_header_table = {}\n        \n        # new sorting key for conditional tree\n        def cond_sort_key(item):\n            return (-cond_freq[item], item)\n        \n        for path, path_count in prefix_paths:\n            # keep only frequent items, sort them\n            filtered_path = [i for i in path if i in cond_freq]\n            filtered_path.sort(key=cond_sort_key)\n            # insert into conditional tree\n            current = cond_root\n            for itm in filtered_path:\n                if itm not in current.children:\n                    child = FPTreeNode(itm, current)\n                    current.children[itm] = child\n                    child.count = path_count\n                    # link in cond_header_table\n                    if itm not in cond_header_table:\n                        cond_header_table[itm] = child\n                    else:\n                        node = cond_header_table[itm]\n                        while node.link is not None:\n                            node = node.link\n                        node.link = child\n                else:\n                    child = current.children[itm]\n                    child.count += path_count\n                current = child\n        \n        return cond_root, cond_header_table\n\n    def mine_tree(curr_header_table, base_prefix, tree_root):\n        \"\"\"\n        Recursively mine the FP-tree \"tree_root\" (with the help of curr_header_table)\n        by looking at items in ascending order (lexicographically) so the final\n        results can be combined in a consistent manner.  (Or you can do descending\n        frequency order as the classic FP-Growth algorithm suggests, but we must\n        always store results as sorted sets.)\n        \"\"\"\n        # Typically classic FP-Growth iterates items in frequency ascending or descending.\n        # We just do them in lexicographical order for stable prefix expansions\n        # (both forms are valid).\n        items_in_header = sorted(curr_header_table.keys())\n        \n        # if the tree is a single path, we can generate all subsets in one go\n        maybe_path = tree_has_single_path(tree_root)\n        if maybe_path is not None:\n            # single path optimization\n            # gather all items in the path + any that might appear in the prefix\n            path_set = set(maybe_path)\n            # All non-empty subsets of path_set are frequent in this conditional context.\n            # We add each non-empty subset combined with the base_prefix\n            path_list = sorted(path_set)  # for stable combination generation\n            # Subsets of path_list\n            for r in range(1, len(path_list) + 1):\n                for comb in itertools.combinations(path_list, r):\n                    # store base_prefix \u222a comb\n                    new_itemset = tuple(sorted(base_prefix + list(comb)))\n                    all_frequent_itemsets.add(new_itemset)\n            return\n        \n        # otherwise proceed in standard FP-Growth style\n        for item in items_in_header:\n            new_prefix = base_prefix + [item]\n            # add this itemset to results\n            add_to_results(new_prefix)\n            \n            # build conditional FP-tree\n            prefix_paths = get_prefix_paths(item)\n            cond_tree, cond_head = build_conditional_tree(prefix_paths)\n            if cond_tree is not None:\n                mine_tree(cond_head, new_prefix, cond_tree)\n    \n    # Mine the initial tree\n    mine_tree(header_table, [], root)\n\n    # -------------------------------------------------------------------------\n    # 4) Convert the set of itemsets to a list of sorted tuples (per problem spec)\n    #    and finalize the required sort order:\n    #       (1) by tuple length, (2) lexicographically\n    # -------------------------------------------------------------------------\n    results_list = list(all_frequent_itemsets)\n    # Each itemset is already a sorted tuple. Now sort by length, then lexicographically:\n    results_list.sort(key=lambda x: (len(x), x))\n    return results_list\n```\n\nExplanation of key steps:\n\n1. We first count all item frequencies and remove those items below the min_sup threshold.  \n2. We build the global ordering of items (descending by frequency, then by lexicographic order as a tiebreak) and insert transactions into the FP-tree so that common prefixes share paths. The header table links the first node of each item\u2019s chain in the tree.  \n3. To mine frequent sets, we recursively build conditional FP-trees for each item in the header table.  \n4. If a conditional FP-tree has a single path, we generate all non-empty combinations of its items in one go (this is the \u201csingle path\u201d optimization). Otherwise, we recursively mine it.  \n5. Finally, we put all frequent item-sets into a set (to avoid duplicates), ensure each is stored as a tuple of items in lexicographic order, and then sort the result first by tuple length, then lexicographically, matching the problem requirements."}
{"task_id": 492, "completion_id": 0, "completion": "import numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features. It must\n    return a new list of lists containing, for every observation,\n    all monomials of the original features whose total degree does\n    not exceed the supplied *degree*. The very first element in every\n    row should be 1 (the degree-0 term).\n\n    If *degree* is negative the function returns -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1\n        when *degree* is negative.\n    \"\"\"\n    # If the degree is negative, return -1 as required\n    if degree < 0:\n        return -1\n\n    # Convert X to a NumPy array for convenience\n    X_array = np.array(X)\n    n_samples, n_features = X_array.shape if X_array.size > 0 else (0, 0)\n\n    # Generate all combinations that have total degree from 0 up to `degree`\n    # Using combinations_with_replacement ensures lexicographic ordering\n    # for tuples of the same length.\n    comb_list = []\n    for deg in range(degree + 1):\n        for combo in combinations_with_replacement(range(n_features), deg):\n            comb_list.append(combo)\n\n    # For each sample, compute x0^k0 * x1^k1 * ... for combinations `combo`\n    # An empty combination (degree=0) corresponds to the constant term = 1\n    poly_features = []\n    for row in X_array:\n        row_features = []\n        for combo in comb_list:\n            val = 1.0\n            for idx in combo:\n                val *= row[idx]\n            row_features.append(val)\n        poly_features.append(row_features)\n\n    # Convert back to a list of lists\n    return poly_features"}
{"task_id": 493, "completion_id": 0, "completion": "import numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean. If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert y to a NumPy array (ensures we can do vectorized operations)\n    arr = np.asarray(y, dtype=float)\n    \n    # Check if the input is empty\n    if arr.size == 0:\n        return -1\n    \n    # Calculate the mean\n    mean_val = np.mean(arr)\n    \n    # Calculate MSE\n    mse_value = np.mean((arr - mean_val)**2)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "completion": "import numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values (or a scalar).\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # If x is a scalar, treat it as a length-one vector\n    if np.isscalar(x):\n        x = [x]\n    else:\n        # Ensure x is a NumPy array for iteration\n        x = np.array(x)\n\n    # Compute y, grad, and grad2 with element-wise operations\n    y = [round(slope * val + intercept, 4) for val in x]\n    grad = [round(slope, 4) for _ in x]\n    grad2 = [round(0.0, 4) for _ in x]\n\n    return (y, grad, grad2)"}
{"task_id": 499, "completion_id": 0, "completion": "import numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return -1.\n    \"\"\"\n\n    n_samples, n_features = data.shape\n    # 1. Check if k is valid\n    if not (1 <= k <= n_features):\n        return -1\n\n    # 2. Standardize features (zero mean, unit population variance if var != 0)\n    means = np.mean(data, axis=0)\n    data_centered = data - means\n    # Population variance\n    variances = np.mean(data_centered**2, axis=0)\n    data_std = data_centered.copy()\n    for i in range(n_features):\n        # If variance is non-zero, scale that feature\n        if variances[i] != 0:\n            data_std[:, i] /= np.sqrt(variances[i])  # population std\n\n    # 3. Compute sample covariance with Bessel's correction (divide by n-1)\n    cov_matrix = (data_std.T @ data_std) / (n_samples - 1)\n\n    # 4. Eigen-decomposition of the covariance matrix\n    #    (eigh is for symmetric matrices)\n    eigen_vals, eigen_vecs = np.linalg.eigh(cov_matrix)\n\n    # 5. Sort eigenvalues and corresponding eigenvectors in descending order\n    sorted_idx = np.argsort(eigen_vals)[::-1]\n    eigen_vals = eigen_vals[sorted_idx]\n    eigen_vecs = eigen_vecs[:, sorted_idx]\n\n    # 6. Fix sign of eigenvectors so the entry with largest absolute value is positive\n    for i in range(n_features):\n        v = eigen_vecs[:, i]\n        # Find index of largest absolute value\n        max_abs_idx = np.argmax(np.abs(v))\n        # If that entry is negative, flip the sign of the entire eigenvector\n        if v[max_abs_idx] < 0:\n            eigen_vecs[:, i] = -v\n\n    # 7. Project the data onto the first k eigenvectors\n    projected = data_std @ eigen_vecs[:, :k]\n\n    # 8. Round to 4 decimals and convert to list of lists\n    return np.round(projected, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "completion": "import numpy as np\n\ndef gradient_boosting_classifier(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    n_estimators: int = 20,\n    learning_rate: float = 0.1\n) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert to numpy arrays for convenience\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    n_samples, n_features = X_train_np.shape\n\n    # Initial model offset: average of y\n    c = np.mean(y_train_np)\n    # We'll keep track of the current model predictions for the training set\n    F_train = np.full(n_samples, c, dtype=float)\n\n    stumps = []  # List to store the weak learners: (feature_idx, threshold, left_val, right_val)\n\n    def find_best_stump(X: np.ndarray, r: np.ndarray):\n        \"\"\"\n        Find the decision stump (feature, threshold, left_value, right_value)\n        that minimizes the sum of squared errors for residuals r.\n        \"\"\"\n        best_feature, best_threshold = 0, 0.0\n        best_left_value, best_right_value = 0.0, 0.0\n        min_error = float('inf')\n\n        n, d = X.shape\n        for feature_idx in range(d):\n            # Sort data by this feature\n            sorted_indices = np.argsort(X[:, feature_idx])\n            sorted_feature = X[sorted_indices, feature_idx]\n            sorted_residual = r[sorted_indices]\n\n            # Possible thresholds are midpoints between distinct values\n            # But we'll also consider the threshold below the smallest value\n            # and above the largest value to cover extreme splits.\n            # We'll do a single pass to accumulate sums for left and right groups.\n            # prefix sums for fast MSE computation\n            prefix_sum = np.cumsum(sorted_residual)\n            prefix_sq_sum = np.cumsum(sorted_residual**2)\n\n            for i in range(n):\n                # We'll pick the threshold at sorted_feature[i]\n                # Then \"left\" = all indices up to i (inclusive),\n                # \"right\" = all indices from i+1 to end.\n                left_count = i + 1\n                right_count = n - (i + 1)\n\n                # Sum of residuals in left and right\n                left_sum = prefix_sum[i]\n                right_sum = prefix_sum[-1] - left_sum\n\n                # Mean of residuals left/right\n                if left_count > 0:\n                    left_mean = left_sum / left_count\n                else:\n                    left_mean = 0.0\n\n                if right_count > 0:\n                    right_mean = right_sum / right_count\n                else:\n                    right_mean = 0.0\n\n                # Sum of squared errors: SSE_left + SSE_right\n                # SSE_left = sum( (r_j - left_mean)^2 for j in left group )\n                # We can compute via prefix sums:\n                # SSE_left = sum(r_j^2) - 2*left_mean*sum(r_j) + left_count * left_mean^2\n                left_sq_sum = prefix_sq_sum[i]\n                right_sq_sum = prefix_sq_sum[-1] - left_sq_sum\n\n                sse_left = left_sq_sum - 2.0 * left_mean * left_sum + left_count * (left_mean**2)\n                sse_right = right_sq_sum - 2.0 * right_mean * right_sum + right_count * (right_mean**2)\n                total_sse = sse_left + sse_right\n\n                if total_sse < min_error:\n                    min_error = total_sse\n                    best_feature = feature_idx\n                    # We'll use threshold = midpoint between sorted_feature[i] and next distinct\n                    if i < n - 1:\n                        thr = 0.5 * (sorted_feature[i] + sorted_feature[i+1])\n                    else:\n                        thr = sorted_feature[i]\n                    best_threshold = thr\n                    best_left_value = left_mean\n                    best_right_value = right_mean\n\n        return best_feature, best_threshold, best_left_value, best_right_value\n\n    # Fit the ensemble of stumps\n    for _ in range(n_estimators):\n        # Compute the residual\n        residual = y_train_np - F_train  # r_i = y_i - F(x_i)\n\n        # Find the best stump that fits the residual\n        f_idx, thr, left_val, right_val = find_best_stump(X_train_np, residual)\n        stumps.append((f_idx, thr, left_val, right_val))\n\n        # Update the training predictions\n        # For each sample, if X[feature_idx] <= threshold => add left_val * learning_rate\n        # else => add right_val * learning_rate\n        mask_left = X_train_np[:, f_idx] <= thr\n        F_train[mask_left] += learning_rate * left_val\n        F_train[~mask_left] += learning_rate * right_val\n\n    # Predict on X_test: F(x) = c + sum( \u03b7\u00b7stump(x) )\n    # We'll fully compute F(x) here (rather than incrementally)\n    predictions = []\n    for x in X_test_np:\n        score = c\n        for (f_idx, thr, left_val, right_val) in stumps:\n            if x[f_idx] <= thr:\n                score += learning_rate * left_val\n            else:\n                score += learning_rate * right_val\n        # Threshold at 0.5\n        pred_label = 1 if score >= 0.5 else 0\n        predictions.append(pred_label)\n\n    return predictions"}
{"task_id": 505, "completion_id": 0, "completion": "import numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM (without stochastic sampling).\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists. Returns an empty list if X is empty.\n    \"\"\"\n    # If the mini-batch is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n    \n    # Sigmoid (logistic) activation function\n    def sigmoid(x):\n        return 1.0 / (1.0 + np.exp(-x))\n    \n    m = X.shape[0]  # batch size\n    \n    # 1. Positive phase hidden probabilities\n    h0_prob = sigmoid(X @ W + hbias)\n    \n    # 2. Run k Gibbs steps (hidden -> visible -> hidden) using probabilities directly\n    h_prob = h0_prob\n    for _ in range(k):\n        # visible probability given hidden\n        v_prob = sigmoid(h_prob @ W.T + vbias)\n        # hidden probability given visible\n        h_prob = sigmoid(v_prob @ W + hbias)\n    \n    # After k steps, we have:\n    v_k_prob = v_prob\n    h_k_prob = h_prob\n    \n    # 3. Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob       # shape: (n_visible, n_hidden)\n    neg_grad = v_k_prob.T @ h_k_prob   # shape: (n_visible, n_hidden)\n    \n    # 4. Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    \n    # 5. Return the updated weight matrix\n    #    rounded to 4 decimal places, converted to a plain Python list of lists.\n    W_new_rounded = [[float(f\"{val:.4f}\") for val in row] for row in W_new]\n    return W_new_rounded"}
{"task_id": 509, "completion_id": 0, "completion": "import numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Ensure both vectors have the same length\n    if len(x) != len(y):\n        return -1\n\n    # Convert inputs to numpy arrays (if they aren't already)\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Compute the component-wise absolute differences and take the maximum\n    distance = np.max(np.abs(x_arr - y_arr))\n\n    # Round to 4 decimal places and return as Python float\n    return round(float(distance), 4)"}
{"task_id": 510, "completion_id": 0, "completion": "import numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"\n    Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as y.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as t_mean.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # For numerical stability\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # Reconstruction loss (binary cross-entropy)\n    # Sum across features for each data sample\n    recon_loss = - (y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    recon_loss = np.sum(recon_loss, axis=1)  # shape: (batch_size,)\n\n    # KL divergence term\n    # KL = -0.5 * sum(1 + log_var - mean^2 - exp(log_var))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Combine and average over the batch\n    total_loss = recon_loss + kl_divergence\n    loss_mean = np.mean(total_loss)\n\n    # Return rounded float\n    return float(np.round(loss_mean, 6))"}
{"task_id": 513, "completion_id": 0, "completion": "import numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X_np = np.array(X, dtype=float)     # shape: (n_samples, n_features)\n    w_np = np.array(w, dtype=float)     # shape: (n_features,)\n    V_np = np.array(V, dtype=float)     # shape: (n_features, k)\n\n    # Linear term: w0 + Xw\n    linear_part = X_np @ w_np + w0  # shape: (n_samples,)\n\n    # Interaction term:\n    # (X @ V) is shape (n_samples, k)\n    # For each row i, factor f = (\u03a3_j X[i,j]*V[j,f])^2 - \u03a3_j (X[i,j]^2 * V[j,f]^2)\n    # Summed over f and multiplied by 1/2.\n    XV = X_np @ V_np         # shape: (n_samples, k)\n    XV_square = XV ** 2      # shape: (n_samples, k)\n\n    X_square = X_np ** 2     # shape: (n_samples, n_features)\n    V_square = V_np ** 2     # shape: (n_features, k)\n    XV_elem_square = X_square @ V_square  # shape: (n_samples, k)\n\n    interaction_part = 0.5 * np.sum(XV_square - XV_elem_square, axis=1)\n\n    # Sum up linear and interaction parts\n    y_pred = linear_part + interaction_part\n\n    # Round to 4 decimal places and return as list\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 517, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid(z):\n    \"\"\"\n    Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if z is a scalar, otherwise a Python list obtained with\n        numpy.ndarray.tolist(), where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Check if input is a scalar\n    is_scalar = isinstance(z, (int, float))\n    \n    # Convert input to a NumPy array for vectorized operations\n    arr = np.array(z, dtype=float)\n    \n    # Create an output array of the same shape\n    result = np.empty_like(arr)\n    \n    # Mask for values >= 0\n    mask = (arr >= 0)\n\n    # Numerically stable sigmoid:\n    # For x >= 0: sigmoid(x) = 1 / (1 + e^(-x))\n    # For x < 0:  sigmoid(x) = e^x / (1 + e^x)\n    result[mask] = 1.0 / (1.0 + np.exp(-arr[mask]))\n    result[~mask] = np.exp(arr[~mask]) / (1.0 + np.exp(arr[~mask]))\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return a float if input was scalar, else a Python list\n    if is_scalar:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    # =======  End of your code  =======\n    \n    return wrapper\n```"}
{"task_id": 520, "completion_id": 0, "completion": "import numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # If the input is an empty list, return an empty list\n    if isinstance(z, list) and len(z) == 0:\n        return []\n\n    # Convert input to a NumPy array (this handles scalars, lists, and ndarrays uniformly)\n    arr = np.array(z, dtype=float)\n    \n    # If the resulting array has no elements (e.g., empty array), return an empty list\n    if arr.size == 0:\n        return []\n\n    # Compute the gradient element-wise\n    grad = arr * (1 - arr)\n\n    # Round to 4 decimal places\n    grad = np.round(grad, 4)\n\n    # If the input was effectively scalar (e.g., a single float),\n    # return a float; otherwise convert back to a nested list.\n    if arr.ndim == 0:\n        return float(grad)\n    else:\n        return grad.tolist()"}
{"task_id": 528, "completion_id": 0, "completion": "import numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for convenience\n    X_arr = np.array(X, dtype=float)\n\n    # Extract weights\n    w1, w2 = float(W[0]), float(W[1])\n\n    # Determine the min and max for each dimension\n    x1_min, x1_max = X_arr[:, 0].min(), X_arr[:, 0].max()\n    x2_min, x2_max = X_arr[:, 1].min(), X_arr[:, 1].max()\n\n    # Build the equally spaced 1D arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a meshgrid\n    X1_grid, X2_grid = np.meshgrid(x1_plot, x2_plot)\n\n    # Compute classifier output: w\u2081*x\u2081 + w\u2082*x\u2082 + b\n    linear_output = w1 * X1_grid + w2 * X2_grid + b\n\n    # Apply the sign rule: label = 1 if >= 0 else -1\n    # Note: np.where returns an array of the same shape\n    labeled_output = np.where(linear_output >= 0, 1, -1)\n\n    # Convert the numpy array to a Python list of lists\n    return labeled_output.tolist()"}
{"task_id": 537, "completion_id": 0, "completion": "import numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Very small constant to avoid division by zero\n    eps = 1e-9\n\n    # Split training data by class\n    X_class0 = X_train[y_train == 0]\n    X_class1 = X_train[y_train == 1]\n\n    # Calculate mean and std for each class (one mean/std per feature)\n    mu0 = X_class0.mean(axis=0)\n    sigma0 = X_class0.std(axis=0) + eps  # add eps to avoid std=0\n    mu1 = X_class1.mean(axis=0)\n    sigma1 = X_class1.std(axis=0) + eps  # add eps to avoid std=0\n\n    # Calculate prior probabilities\n    p0 = len(X_class0) / len(X_train)\n    p1 = len(X_class1) / len(X_train)\n\n    predictions = []\n    for x in X_test:\n        # Compute log-likelihood for each class under Gaussian assumption\n        # Using log probabilities for numerical stability\n        log_likelihood_0 = (-0.5 * np.log(2 * np.pi) - np.log(sigma0)\n                            - ((x - mu0) ** 2) / (2 * sigma0 ** 2))\n        log_likelihood_1 = (-0.5 * np.log(2 * np.pi) - np.log(sigma1)\n                            - ((x - mu1) ** 2) / (2 * sigma1 ** 2))\n\n        # Sum log-likelihoods across all features and add log prior\n        log_posterior_0 = np.log(p0) + np.sum(log_likelihood_0)\n        log_posterior_1 = np.log(p1) + np.sum(log_likelihood_1)\n\n        # Pick the class with the higher posterior probability\n        predicted_class = 0 if log_posterior_0 >= log_posterior_1 else 1\n        predictions.append(predicted_class)\n\n    return predictions"}
{"task_id": 539, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for the predictions AL relative to\n    the ground-truth labels Y. Probabilities are clipped to avoid numerical\n    issues.\n    \n    Parameters:\n    AL (np.ndarray): Predicted probabilities, shape (m,) or (1,m).\n    Y (np.ndarray): Ground-truth labels, shape (m,) or (1,m).\n    \n    Returns:\n    float: Binary cross-entropy cost, rounded to 4 decimal places.\n    \"\"\"\n    # Clip AL to avoid log(0)\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Number of examples\n    m = Y.size  # works for both (m,) and (1, m)\n    \n    # Compute the binary cross-entropy cost\n    cost = -(1 / m) * np.sum(\n        Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    )\n    \n    # Return as a plain float, rounded to 4 decimal places\n    return float(round(cost, 4))"}
{"task_id": 552, "completion_id": 0, "completion": "import numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm and returns the\n    resulting vector rounded to four decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n            'pi' -> 1D numpy array of shape (N, ) for initial state probabilities.\n            'A'  -> 2D numpy array of shape (N, N) for transition probabilities.\n            'B'  -> 2D numpy array of shape (N, M) for emission probabilities.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities \u03b3\u209c(i) for each state i at time t,\n                     rounded to four decimal places, or an empty list if t is out of range.\n    \"\"\"\n    # 0. Check if t is within valid range\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n\n    pi = hmm['pi']  # shape: (N,)\n    A = hmm['A']    # shape: (N, N)\n    B = hmm['B']    # shape: (N, M)\n    N = len(pi)     # number of states\n\n    # 1. Forward pass to compute \u03b1\n    alpha = np.zeros((T, N))\n    # Initialization alpha[0, i] = pi[i] * B[i, O[0]]\n    alpha[0, :] = pi * B[:, observations[0]]\n\n    # Recurrence alpha[t, i] = sum_j( alpha[t-1, j] * A[j, i] ) * B[i, O[t]]\n    for tt in range(1, T):\n        for i in range(N):\n            alpha[tt, i] = np.sum(alpha[tt - 1, :] * A[:, i]) * B[i, observations[tt]]\n\n    # 2. Backward pass to compute \u03b2\n    beta = np.zeros((T, N))\n    # Initialization beta[T-1, i] = 1\n    beta[T - 1, :] = 1.0\n    \n    # Recurrence beta[t, i] = sum_j( A[i, j] * B[j, O[t+1]] * beta[t+1, j] )\n    for tt in reversed(range(T - 1)):\n        for i in range(N):\n            beta[tt, i] = np.sum(A[i, :] * B[:, observations[tt + 1]] * beta[tt + 1, :])\n\n    # 3. Compute gamma_t(i) = alpha_t(i)*beta_t(i) / sum_i(alpha_t(i)*beta_t(i))\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n\n    gamma_t = numerator / denominator\n\n    # 4. Round every component to four decimal places and return as a list\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 555, "completion_id": 0, "completion": "import numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, ... in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    \n    # 1. Compute pairwise Euclidean distances\n    #    For each pair of samples, compute the Euclidean distance.\n    distances = np.linalg.norm(data[:, np.newaxis] - data[np.newaxis, :], axis=-1)\n    \n    # 2. Build the neighborhood list for each sample using the supplied eps\n    neighbors = []\n    for i in range(n_samples):\n        neighbor_idxs = np.where(distances[i] <= eps)[0]\n        neighbors.append(neighbor_idxs.tolist())\n    \n    # 3. Identify core points (|neighborhood| >= min_samples)\n    core_points = [False] * n_samples\n    for i in range(n_samples):\n        if len(neighbors[i]) >= min_samples:\n            core_points[i] = True\n\n    # 4. Use BFS to form clusters\n    labels = [0] * n_samples  # 0 means 'unvisited'\n    cluster_id = 0\n    \n    for i in range(n_samples):\n        # If already labeled or not a core point, skip\n        if labels[i] != 0 or not core_points[i]:\n            continue\n        \n        # Found a new cluster\n        cluster_id += 1\n        labels[i] = cluster_id\n        \n        # BFS queue\n        queue = deque([i])\n        while queue:\n            point_idx = queue.popleft()\n            \n            # Check neighbors of the current point\n            for neighbor_idx in neighbors[point_idx]:\n                # If neighbor has not been visited yet, label it\n                if labels[neighbor_idx] == 0:\n                    labels[neighbor_idx] = cluster_id\n                    # If neighbor is a core point, add it to queue\n                    if core_points[neighbor_idx]:\n                        queue.append(neighbor_idx)\n    \n    # 5. After all core points are visited, \n    #    every still-unlabeled point is noise => label = -1\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n    \n    return labels"}
{"task_id": 561, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model (GMM) of k components to the given data via Expectation\u2013Maximization (EM).\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2D array with shape (N, D) containing N samples of dimension D each.\n    k : int\n        Number of Gaussian mixture components. If k=1, all samples are assigned to component 0.\n    max_iter : int\n        Maximum number of EM iterations to perform. Default is 200.\n    epsilon : float\n        Tolerance for assessing convergence based on the change in mixture weights. Default is 1e-4.\n    \n    Returns\n    -------\n    list[int]\n        A list of length N containing the final cluster label (0..k\u22121) of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # If k=1, everything is assigned to the single component\n    if k == 1:\n        return [0] * N\n    \n    # Helper function: multivariate normal probability density\n    def mvn_pdf(x, mean, cov):\n        # Add a small regularization to avoid singularities\n        cov_reg = cov + np.eye(D) * 1e-6\n        det_cov = np.linalg.det(cov_reg)\n        inv_cov = np.linalg.inv(cov_reg)\n        diff = x - mean\n        exponent = -0.5 * np.einsum('...i,ij,...j', diff, inv_cov, diff)\n        norm_const = 1.0 / np.sqrt((2 * np.pi) ** D * det_cov)\n        return norm_const * np.exp(exponent)\n    \n    # ============ Initialization ============\n\n    # For deterministic initialization of means, pick the first k distinct samples\n    # (assuming data has at least k distinct points)\n    unique_data = np.unique(data, axis=0)\n    if len(unique_data) < k:\n        # Fallback if not enough distinct points: sample with replacement\n        initial_indices = np.random.choice(N, size=k, replace=True)\n    else:\n        initial_indices = np.arange(k)\n\n    means = unique_data[initial_indices].astype(float)\n\n    # Initialize mixture weights uniformly\n    weights = np.ones(k) / k\n\n    # Initialize covariances as the overall sample covariance (or an identity scaled accordingly)\n    overall_cov = np.cov(data, rowvar=False)\n    if overall_cov.shape == ():  # In case D=1, cov() returns a scalar\n        overall_cov = np.array([[overall_cov]])\n    covariances = np.array([overall_cov for _ in range(k)])\n\n    # ============ EM algorithm ============\n\n    for _iter in range(max_iter):\n        old_weights = weights.copy()\n\n        # ---------- E-step: compute responsibilities ----------\n        # responsibilities[i, j] = posterior prob that sample i belongs to component j\n        responsibilities = np.zeros((N, k), dtype=float)\n\n        # Numerators for each component\n        for j in range(k):\n            pdf_vals = mvn_pdf(data, means[j], covariances[j])\n            responsibilities[:, j] = weights[j] * pdf_vals\n\n        # Normalize to get posterior probabilities for each sample\n        row_sums = np.sum(responsibilities, axis=1, keepdims=True)\n        # Avoid division by zero in degenerate cases\n        row_sums[row_sums == 0] = 1e-16\n        responsibilities /= row_sums\n\n        # ---------- M-step: update parameters ----------\n        # Effective counts for each component\n        N_k = np.sum(responsibilities, axis=0)\n\n        # New mixture weights\n        weights = N_k / N\n\n        # New means\n        new_means = np.zeros_like(means)\n        for j in range(k):\n            new_means[j] = np.sum(data * responsibilities[:, j][:, np.newaxis], axis=0) / N_k[j]\n\n        # New covariances\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            # Each sample's contribution weighted by responsibilities[i, j]\n            cov_j = np.einsum('ij,ik->jk', diff * responsibilities[:, j][:, np.newaxis], diff)\n            cov_j /= N_k[j]\n            new_covariances.append(cov_j)\n\n        new_covariances = np.array(new_covariances)\n        \n        means = new_means\n        covariances = new_covariances\n\n        # Check convergence based on change in mixture weights\n        if np.linalg.norm(weights - old_weights, ord=1) < epsilon:\n            break\n\n    # ============ Assign cluster labels and reorder ============\n\n    # Final E-step to get final responsibilities\n    responsibilities = np.zeros((N, k), dtype=float)\n    for j in range(k):\n        pdf_vals = mvn_pdf(data, means[j], covariances[j])\n        responsibilities[:, j] = weights[j] * pdf_vals\n    row_sums = np.sum(responsibilities, axis=1, keepdims=True)\n    row_sums[row_sums == 0] = 1e-16\n    responsibilities /= row_sums\n\n    # Assign each sample to the component of highest posterior probability\n    cluster_assignments = np.argmax(responsibilities, axis=1)\n\n    # Sort components by ascending order of the means' first coordinate\n    sort_indices = np.argsort(means[:, 0])\n    \n    # Build a mapping old_label -> new_label\n    # e.g. if sort_indices = [2, 0, 1], then the old cluster #2 becomes new label 0, old cluster #0 -> 1, old cluster #1 -> 2\n    new_label_map = np.zeros(k, dtype=int)\n    for new_label, old_label in enumerate(sort_indices):\n        new_label_map[old_label] = new_label\n\n    # Apply the mapping to the final cluster assignments\n    final_labels = [int(new_label_map[old_label]) for old_label in cluster_assignments]\n\n    return final_labels"}
{"task_id": 562, "completion_id": 0, "completion": "import numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n\n    # -------------------------------------------------------------------------\n    # Helper function: deterministic k-means with the first k samples as centroids\n    # -------------------------------------------------------------------------\n    def kmeans(X: np.ndarray, k: int, max_iter: int = 300) -> np.ndarray:\n        \"\"\"\n        Deterministic k-means that always picks the first k samples as initial centroids.\n        X: shape (N, d)\n        k: number of clusters (centroids)\n        \"\"\"\n        N = X.shape[0]\n        # Pick the first k samples as initial centroids\n        centroids = X[:k].copy()\n\n        labels = np.zeros(N, dtype=np.int64)\n        for _ in range(max_iter):\n            # Step 1: assign each point to the nearest centroid\n            dists = np.sum((X[:, None] - centroids[None, :])**2, axis=2)  # shape (N, k)\n            new_labels = np.argmin(dists, axis=1)\n\n            # If no change in labels, we're done\n            if np.all(new_labels == labels):\n                break\n            labels = new_labels\n\n            # Step 2: update centroids\n            for j in range(k):\n                # Update centroid j to be mean of points in cluster j\n                points_in_cluster = X[labels == j]\n                if len(points_in_cluster) > 0:\n                    centroids[j] = np.mean(points_in_cluster, axis=0)\n\n        return labels\n\n    # -------------------------------------------------------------------------\n    # Main spectral clustering logic\n    # -------------------------------------------------------------------------\n    N = data.shape[0]\n    if n_cluster == 1:\n        # If only one cluster, everyone belongs to cluster 0\n        return [0]*N\n\n    # 1. Compute the Gaussian similarity (fully-connected graph)\n    #    pairwise squared distances\n    dist2 = np.sum((data[:, None] - data[None, :])**2, axis=2)  # shape (N, N)\n    #    similarity matrix W\n    W = np.exp(-gamma * dist2)\n\n    # 2. Construct the (un)normalized Laplacian\n    #    D is the degree matrix\n    degree = np.sum(W, axis=1)\n    D = np.diag(degree)\n    L = D - W\n\n    if method == 'normalized':\n        # Symmetric normalized Laplacian: L_sym = D^{-1/2} * L * D^{-1/2}\n        # Avoid division by zero if any degree == 0 (shouldn't happen if fully connected)\n        d_inv_sqrt = np.diag(1.0 / np.sqrt(degree + 1e-12))\n        L = d_inv_sqrt @ L @ d_inv_sqrt\n\n    # 3. Compute the eigenvectors for the n_cluster smallest eigenvalues\n    #    Since L is symmetric, we can use eigh.\n    eigvals, eigvecs = np.linalg.eigh(L)  # eigvals in ascending order\n\n    # Take the first n_cluster eigenvectors\n    U = eigvecs[:, :n_cluster]  # shape (N, n_cluster)\n\n    # If using normalized method, row-normalize U\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1, keepdims=True)\n        row_norms[row_norms == 0] = 1.0  # avoid division by zero\n        U = U / row_norms\n\n    # 4. k-means on rows of U\n    labels = kmeans(U, n_cluster)\n\n    # 4b. Relabel clusters so that the cluster containing the smallest original index\n    #     gets label 0, the next one 1, etc.\n    #     For each cluster, find smallest index in that cluster, then sort clusters by this index.\n    unique_clusters = np.unique(labels)\n    # Get the smallest index for each cluster\n    cluster_to_min_idx = {}\n    for c in unique_clusters:\n        cluster_indices = np.where(labels == c)[0]\n        cluster_to_min_idx[c] = np.min(cluster_indices) if len(cluster_indices) > 0 else N\n\n    # Sort clusters by their smallest index\n    sorted_clusters = sorted(unique_clusters, key=lambda c: cluster_to_min_idx[c])\n    # Create a mapping from old cluster -> new cluster label\n    cluster_new_label = {}\n    for new_label, old_cluster in enumerate(sorted_clusters):\n        cluster_new_label[old_cluster] = new_label\n\n    # Apply the mapping\n    final_labels = [cluster_new_label[c] for c in labels]\n\n    # 5. Return as a standard Python list\n    return final_labels"}
{"task_id": 563, "completion_id": 0, "completion": "import numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    # 1) Initialize alpha and b\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # 2) Build the Gram matrix G\n    G = X_data @ X_data.T  # G[i, j] = X_data[i] dot X_data[j]\n\n    # 3) Training loop\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # compute g = \u03a3_j alpha_j * y_j * G[j, i]\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                # update alpha_i and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            # no update in this pass => converged\n            break\n\n    # 4) Recover the weight vector w\n    #    w = \u03a3_i alpha_i y_i x_i\n    w = X_data.T @ (alpha * y_data)  # shape (d,)\n\n    # 5) Round every component of w and b to 4 decimals and return\n    w_rounded = np.round(w, 4)\n    b_rounded = float(np.round(b, 4))\n\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 564, "completion_id": 0, "completion": "def predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    # 1. Check if we are at a leaf node (node.y is present)\n    if hasattr(root, \"y\") and root.y is not None:\n        return root.y\n\n    # 2. Branching based on task type\n    if task_type == \"classification\":\n        # Inspect the feature with index root.label\n        feature_value = features[root.label]\n\n        # Look for a child whose x matches the feature value\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n\n        # Default to the second child if no match\n        return predict_sample(root.child[1], features, task_type)\n\n    elif task_type == \"regression\":\n        # Inspect the feature with index root.label\n        if features[root.label] <= root.s:\n            # Go to the first child\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            # Go to the second child\n            return predict_sample(root.child[1], features, task_type)\n\n    # In a well-formed tree, we should not get here\n    raise ValueError(\"Invalid task_type or malformed node.\")"}
{"task_id": 565, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Helper function to compute entropy\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute the entropy of the label distribution.\"\"\"\n        unique, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -np.sum(probabilities * np.log2(probabilities))\n\n    # Compute the entropy of the entire label vector y\n    base_entropy = entropy(y)\n\n    n_samples, n_features = X.shape\n\n    best_feature = None\n    max_ig = float(\"-inf\")\n\n    # Loop over each feature\n    for feature_idx in range(n_features):\n        # Obtain unique values for this feature\n        feature_values = X[:, feature_idx]\n        unique_vals, value_counts = np.unique(feature_values, return_counts=True)\n\n        # Compute the conditional entropy H(y|A)\n        cond_entropy = 0.0\n        for val, count_val in zip(unique_vals, value_counts):\n            # Indices where feature == val\n            val_indices = (feature_values == val)\n            # Subset of y for these indices\n            y_subset = y[val_indices]\n            # Weight of this subset\n            p_val = count_val / n_samples\n            # Entropy for this subset\n            cond_entropy += p_val * entropy(y_subset)\n\n        # Information Gain\n        ig = base_entropy - cond_entropy\n\n        # Update the best feature info if we have a better or equal IG\n        # (tie broken by smallest feature index)\n        if ig > max_ig:\n            max_ig = ig\n            best_feature = feature_idx\n\n    # Round the max information gain to 6 decimal places\n    return (best_feature, round(max_ig, 6))"}
{"task_id": 566, "completion_id": 0, "completion": "import numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n\n    # --------------------------------------------------------------------------\n    # 1. Basic checks and early exit if epsilon=0\n    # --------------------------------------------------------------------------    \n    np.random.seed(42)  # Ensure deterministic runs\n    n, d = data.shape\n    if epsilon == 0:\n        return []\n\n    # --------------------------------------------------------------------------\n    # 2. Define helper functions for building and traversing random isolation trees\n    # --------------------------------------------------------------------------\n    \n    # c(n) function: approximation of the average path length for a leaf with n points\n    def c(n: int) -> float:\n        if n <= 1:\n            return 0.0\n        return 2.0 * np.log(n - 1) + 0.5772156649 - 2.0 * ((n - 1) / n)\n    \n    # Build a purely random isolation tree\n    def build_tree(X: np.ndarray, current_depth: int, height_limit: int):\n        # Stopping conditions\n        if current_depth >= height_limit or len(X) <= 1:\n            return {\"leaf_size\": len(X)}\n        \n        # Pick a random feature\n        feature = np.random.randint(0, d)\n        \n        # Find min and max of that feature in X\n        min_val = X[:, feature].min()\n        max_val = X[:, feature].max()\n        \n        # If all values are the same, make a leaf\n        if min_val == max_val:\n            return {\"leaf_size\": len(X)}\n        \n        # Draw a random threshold uniformly between min_val and max_val\n        threshold = np.random.uniform(min_val, max_val)\n        \n        # Split into left and right subsets\n        left_mask = X[:, feature] <= threshold\n        right_mask = ~left_mask\n        left_sub = X[left_mask]\n        right_sub = X[right_mask]\n        \n        # Recursively build subtrees\n        left_node = build_tree(left_sub, current_depth + 1, height_limit)\n        right_node = build_tree(right_sub, current_depth + 1, height_limit)\n        \n        return {\n            \"feature\": feature,\n            \"threshold\": threshold,\n            \"left\": left_node,\n            \"right\": right_node,\n            \"leaf_size\": len(X),\n        }\n    \n    # Compute path length for a single observation x in a tree\n    def path_length(x: np.ndarray, node: dict, current_depth: int = 0) -> float:\n        # If we are at a leaf, add c(n) to the current depth\n        if \"feature\" not in node:  # It's a leaf\n            return current_depth + c(node[\"leaf_size\"])\n        \n        # Otherwise, go left or right\n        if x[node[\"feature\"]] <= node[\"threshold\"]:\n            return path_length(x, node[\"left\"], current_depth + 1)\n        else:\n            return path_length(x, node[\"right\"], current_depth + 1)\n    \n    # --------------------------------------------------------------------------\n    # 3. Build n_trees random isolation trees\n    # --------------------------------------------------------------------------\n    trees = []\n    actual_sample_size = min(sample_size, n)\n    height_limit = math.ceil(math.log2(actual_sample_size))\n    \n    for _ in range(n_trees):\n        # Draw a subsample\n        idx = np.random.choice(n, size=actual_sample_size, replace=False)\n        X_sub = data[idx]\n        \n        # Build the tree from this subsample\n        tree = build_tree(X_sub, 0, height_limit)\n        trees.append(tree)\n    \n    # --------------------------------------------------------------------------\n    # 4. For each observation, compute the average path length across all trees\n    # --------------------------------------------------------------------------\n    # Precompute path lengths\n    path_length_sums = np.zeros(n, dtype=float)\n    \n    for i in range(n):\n        x = data[i]\n        pl_sum = 0.0\n        for tree in trees:\n            pl_sum += path_length(x, tree, 0)\n        path_length_sums[i] = pl_sum\n    \n    avg_path_lengths = path_length_sums / n_trees\n    \n    # --------------------------------------------------------------------------\n    # 5. Compute anomaly scores for each observation\n    #     s(x) = 2^(- (h_bar(x) / phi))\n    #     phi = 2 * ln(n-1) - 2*(n-1)/n\n    # --------------------------------------------------------------------------\n    if n > 1:\n        phi = 2.0 * math.log(n - 1) - 2.0 * (float(n - 1) / n)\n    else:\n        # Degenerate case: single sample\n        # The formula doesn't really apply for n=1, but we won't have outliers anyway\n        phi = 1e-9  # just to avoid division by zero\n    \n    scores = np.power(2.0, - (avg_path_lengths / phi))\n    \n    # --------------------------------------------------------------------------\n    # 6. Determine which observations are outliers:\n    #    \"An object is an outlier when its score is among the largest \u03b5\u00b7100% of all scores.\"\n    # --------------------------------------------------------------------------\n    outliers_count = int(n * epsilon)  # number of outliers\n    if outliers_count == 0:\n        return []\n    \n    # Sort scores in descending order, take the top outliers_count\n    sorted_indices_desc = np.argsort(scores)[::-1]\n    outlier_indices = sorted_indices_desc[:outliers_count]\n    \n    # Return them sorted in ascending order\n    return sorted(outlier_indices.tolist())"}
{"task_id": 568, "completion_id": 0, "completion": "import math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Trains a Maximum Entropy (MaxEnt) classifier with the Generalized Iterative\n    Scaling (GIS) algorithm and returns predictions for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_samples, n_features)\n        Training samples with categorical (integer) features.\n    y_train : np.ndarray, shape (n_samples,)\n        Training labels (integers).\n    X_test : np.ndarray, shape (m_samples, n_features)\n        Test samples with categorical (integer) features to classify.\n    epsilon : float, optional\n        Convergence tolerance for GIS updates. The iteration stops if\n        the largest absolute weight update is smaller than epsilon.\n    n_iter : int, optional\n        Maximum number of GIS iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (one per row of X_test).\n    \"\"\"\n\n    # Number of training samples and features\n    n_samples, n_features = X_train.shape\n\n    # Collect unique labels\n    unique_labels = sorted(set(y_train))\n    num_labels = len(unique_labels)\n    # Map label -> index in [0, num_labels-1]\n    label2idx = {label: idx for idx, label in enumerate(unique_labels)}\n\n    # For each feature index d, gather the unique values in X_train\n    # (Assumes features are categorical and stored as integers)\n    feats_for_d = []\n    for d in range(n_features):\n        feats_for_d.append(sorted(set(X_train[:, d])))\n\n    # Build a mapping (feature_index, feature_value, label) -> feature_id\n    # This enumerates all possible \"active features\"\n    feature_index = {}\n    f_id = 0\n    for d in range(n_features):\n        for val in feats_for_d[d]:\n            for label in unique_labels:\n                feature_index[(d, val, label)] = f_id\n                f_id += 1\n\n    # Total number of features\n    F = f_id\n\n    # Empirical feature counts E_p[f_j]: fraction of training instances\n    # that activate feature j\n    emp_f = np.zeros(F, dtype=float)\n    for i in range(n_samples):\n        y_i = y_train[i]\n        for d in range(n_features):\n            v = X_train[i, d]\n            j = feature_index[(d, v, y_i)]\n            emp_f[j] += 1.0\n    emp_f /= n_samples  # convert counts to probabilities\n\n    # Initialize weights to zero\n    w = np.zeros(F, dtype=float)\n\n    # C = maximum number of active features per (x, y),\n    # which is just n_features (one active \"value\" per dimension)\n    C = n_features\n\n    # GIS iterations\n    for _ in range(n_iter):\n        # Compute model expectations with current weights\n\n        # p_[i, l] = P(y = unique_labels[l] | X_train[i]) (unnormalized)\n        p_ = np.zeros((n_samples, num_labels), dtype=float)\n        for i in range(n_samples):\n            for l_idx, label in enumerate(unique_labels):\n                sum_w = 0.0\n                for d in range(n_features):\n                    val = X_train[i, d]\n                    feat_id = feature_index[(d, val, label)]\n                    sum_w += w[feat_id]\n                p_[i, l_idx] = math.exp(sum_w)\n\n            # Normalize to get a proper distribution\n            z = np.sum(p_[i, :])\n            if z > 0:\n                p_[i, :] /= z\n            else:\n                # Should not happen if weights remain finite; fallback:\n                p_[i, :] = 1.0 / num_labels\n\n        # Model's expectation E_p_t[f_j]\n        model_f = np.zeros(F, dtype=float)\n        for i in range(n_samples):\n            for d in range(n_features):\n                val = X_train[i, d]\n                for l_idx, label in enumerate(unique_labels):\n                    feat_id = feature_index[(d, val, label)]\n                    model_f[feat_id] += p_[i, l_idx]\n        model_f /= n_samples\n\n        # Update weights via GIS rule:\n        # w_{j}^{new} = w_{j}^{old} + (1/C) * ln( emp_f[j] / model_f[j] )\n        # (Only update if emp_f[j] > 0)\n        max_update = 0.0\n        for feat_id in range(F):\n            if emp_f[feat_id] > 0:\n                # Guard against division by zero\n                if model_f[feat_id] < 1e-15:\n                    ratio = emp_f[feat_id] / 1e-15\n                else:\n                    ratio = emp_f[feat_id] / model_f[feat_id]\n\n                update = (1.0 / C) * math.log(ratio)\n                w[feat_id] += update\n                if abs(update) > max_update:\n                    max_update = abs(update)\n\n        # Check for convergence\n        if max_update < epsilon:\n            break\n\n    # Predict for X_test by picking the label that maximizes log-odds\n    # (equivalently, the unnormalized probability)\n    predictions = []\n    for i in range(X_test.shape[0]):\n        # Compute unnormalized log-prob for each label\n        best_label = None\n        best_score = -float(\"inf\")\n        for label in unique_labels:\n            score = 0.0\n            for d in range(n_features):\n                val = X_test[i, d]\n                # If a (d, val, label) triple never occurred in training,\n                # it won't be in feature_index. Use weight = 0 in that case.\n                if (d, val, label) in feature_index:\n                    score += w[feature_index[(d, val, label)]]\n            if score > best_score:\n                best_score = score\n                best_label = label\n        predictions.append(best_label)\n\n    return predictions"}
{"task_id": 569, "completion_id": 0, "completion": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Number of documents\n    n_docs = len(data)\n    if n_docs == 0:  # Edge case: if no data, return empty structures\n        return ([], set())\n\n    # Count how many documents each word appears in\n    doc_counts = Counter()\n    for _, words in data:\n        unique_words = set(words)\n        for w in unique_words:\n            doc_counts[w] += 1\n\n    # Create a list with (word, document-frequency ratio)\n    word_ratio_pairs = []\n    for word, count in doc_counts.items():\n        ratio = round(count / n_docs, 4)\n        word_ratio_pairs.append((word, ratio))\n\n    # Sort by ratio in descending order; if tie, order doesn't matter\n    word_ratio_pairs.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine which words go into the set\n    # 1. If cut_off is None, we include all words\n    # 2. If cut_off is 0, we return an empty set\n    # 3. If cut_off > n_distinct_words, we include all words\n    # 4. Otherwise, select the top cut_off words\n    if cut_off is None:\n        top_words = {w for w, _ in word_ratio_pairs}\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = {w for w, _ in word_ratio_pairs[:cut_off]}\n\n    return word_ratio_pairs, top_words"}
{"task_id": 571, "completion_id": 0, "completion": "import numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # 1) Compute w = X^T (alpha \u2299 y)\n    alpha_y = alpha * y\n    w = X.T @ alpha_y  # shape is (n_features,)\n\n    # 2) Compute b = (1/n) * sum_i (y_i - w^T x_i)\n    n_samples = X.shape[0]\n    predictions = X @ w  # shape is (n_samples,)\n    b = np.mean(y - predictions)\n\n    # 3) Round to four decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n\n    # 4) Convert the weight vector to a Python list\n    w_list = w_rounded.tolist()\n\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "completion": "import numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implements the Local Outlier Factor (LOF) algorithm from scratch.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2D numpy array of shape (n_samples, n_features).\n    k : int\n        The number of neighbors to consider.\n    epsilon : float, optional\n        Threshold above which a point is considered an outlier.\n\n    Returns\n    -------\n    (list_of_scores, list_of_outlier_indices)\n        list_of_scores : list of LOF scores for each sample (rounded to 4 decimals)\n        list_of_outlier_indices : list of indices (ascending) for points whose LOF > epsilon\n    \"\"\"\n\n    # 1. Compute the full pairwise distance matrix.\n    #    distances[i,j] = Euclidean distance between data[i] and data[j].\n    n_samples = data.shape[0]\n    distances = np.sqrt(\n        np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=-1)\n    )\n\n    # 2. For every sample p, obtain its k-distance and the index list of those k nearest neighbors N_k(p).\n    #    The k-distance of p is the distance to its k-th nearest neighbor.\n    #    First sort the distances to find the k nearest neighbors (excluding the point itself).\n    k_distances = np.zeros(n_samples)\n    neighbors = []\n    for i in range(n_samples):\n        # Sort distance to all points from point i\n        # The smallest distance is always to itself (distance=0); skip index i.\n        sorted_idx = np.argsort(distances[i])\n        # The k-th nearest neighbor index after skipping i is at position k in sorted_idx\n        kth_neighbor_index = sorted_idx[k]\n        k_distances[i] = distances[i, kth_neighbor_index]\n        # The k nearest neighbors (excluding the point i itself) are:\n        neighbors.append(sorted_idx[1 : k + 1])\n\n    # 3 & 4. Define reach-dist_k(p, q) = max(k-distance(q), dist(p,q)).\n    #         The local reachability density LRD_k(p) = k / sum(reach-dist_k(p, q) for q in N_k(p))\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = 0.0\n        for q in neighbors[i]:\n            reach_dist = max(k_distances[q], distances[i, q])\n            sum_reach_dist += reach_dist\n        lrd[i] = k / sum_reach_dist if sum_reach_dist != 0 else 0\n\n    # 5. Finally, the Local Outlier Factor:\n    #    LOF_k(p) = (average of LRD_k(q) for q in N_k(p)) / LRD_k(p)\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        # Mean LRD of neighbors\n        mean_lrd_neighbors = np.mean([lrd[q] for q in neighbors[i]])\n        lof[i] = mean_lrd_neighbors / lrd[i] if lrd[i] != 0 else 0\n\n    # Round LOF scores to 4 decimals\n    lof_rounded = np.round(lof, 4)\n\n    # Identify outliers: indices where LOF > epsilon\n    outliers = np.where(lof_rounded > epsilon)[0].tolist()\n\n    return (lof_rounded.tolist(), outliers)"}
{"task_id": 574, "completion_id": 0, "completion": "import numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train, y_train = [], []\n    X_val,   y_val   = [], []\n\n    for c in range(m):\n        # base is 10 * floor(c/2)\n        base = 10 * (c // 2)\n\n        # Generate training points\n        for _ in range(n_train):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_train.append([x, y])\n            y_train.append(c)\n\n        # Generate validation points\n        for _ in range(n_val):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_val.append([x, y])\n            y_val.append(c)\n\n    # Convert to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val   = np.round(np.array(X_val),   4)\n    y_train = np.array(y_train)\n    y_val   = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val"}
{"task_id": 579, "completion_id": 0, "completion": "import numpy as np\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    \n    # 1. Initialisation: use the first k points as the initial centres\n    centres = X[:k].copy()  # shape: (k, d)\n    \n    # To track assignments from previous iteration\n    old_labels = np.full(m, -1, dtype=int)\n    \n    for _ in range(max_iters):\n        # 2. Assignment step:\n        # Compute the distance from each point to each centre\n        #   dist_mat shape: (k, m), each row i is the distances of points to centre i\n        dist_mat = np.stack([np.sum((X - centre)**2, axis=1) for centre in centres])\n        # Assign each point to the nearest centre (np.argmin breaks ties by choosing the first index)\n        new_labels = np.argmin(dist_mat, axis=0)\n        \n        # If the assignments have not changed, we are done\n        if np.array_equal(new_labels, old_labels):\n            break\n        old_labels = new_labels\n        \n        # 3. Update step: recompute each centre as the mean of assigned points\n        for i in range(k):\n            # Collect points assigned to cluster i\n            points_in_cluster = X[new_labels == i]\n            if len(points_in_cluster) > 0:\n                centres[i] = np.mean(points_in_cluster, axis=0)\n            # If no points are assigned to this centre, it remains unchanged\n    \n    # Round the final centres to 4 decimals and convert to list-of-lists\n    rounded_centres = np.round(centres, 4).tolist()\n    labels_list = new_labels.tolist()\n    \n    return labels_list, rounded_centres"}
{"task_id": 581, "completion_id": 0, "completion": "import numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"\n    Fits a linear model with Elastic-Net regularisation using batch gradient descent.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where:\n            - weights is a Python list of length n\n            - bias is a float\n        All returned values are rounded to four decimal places.\n    \"\"\"\n\n    # Handle trivial case: if learning_rate or iterations is zero, return all zeros.\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    \n    # Initialize parameters\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    # Custom sign function that treats 0 like negative (returns -1)\n    # per the given requirement: sign(0) = -1\n    def custom_sign(arr: np.ndarray) -> np.ndarray:\n        return np.where(arr > 0, 1.0, -1.0)\n\n    for _ in range(iterations):\n        # Predictions\n        y_hat = X.dot(w) + b\n        \n        # Residuals\n        r = y - y_hat\n        \n        # Compute gradients\n        # Gradient wrt weights\n        grad_w = -2.0 * X.T.dot(r) + l1_penalty * custom_sign(w) + 2.0 * l2_penalty * w\n        \n        # Gradient wrt bias\n        grad_b = -2.0 * np.sum(r)\n        \n        # Update parameters (divide by m to get the mean gradient)\n        w -= (learning_rate / m) * grad_w\n        b -= (learning_rate / m) * grad_b\n\n    # Round results to four decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n\n    return (w_rounded, b_rounded)"}
{"task_id": 591, "completion_id": 0, "completion": "import numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert x to a NumPy array for easier manipulation\n    x = np.array(x, dtype=float)\n\n    # Forward pass through each layer\n    n_layers = len(weights)\n    for i, layer in enumerate(weights):\n        # Convert the current layer weights to a NumPy array\n        layer_w = np.array(layer, dtype=float)  # shape: (number_of_neurons, prev_layer_size+1)\n        # Append bias input = 1 to the current input\n        x_with_bias = np.concatenate(([1.0], x))\n        # Compute the linear combination for all neurons in this layer\n        x = layer_w @ x_with_bias  # shape: (number_of_neurons,)\n\n        # Apply ReLU on all layers except the last one\n        if i < n_layers - 1:\n            x = np.maximum(0.0, x)\n\n    # Round the final output(s) to four decimals\n    if x.size == 1:\n        return round(float(x[0]), 4)\n    else:\n        return [round(float(val), 4) for val in x]"}
{"task_id": 595, "completion_id": 0, "completion": "import numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    K-Means Clustering \u2013 Compute Centroids Only (from scratch).\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        A 2D NumPy array of shape (n_samples, n_features).\n    k : int\n        Number of clusters (and hence number of centroids).\n    max_iters : int, optional\n        Maximum number of iterations for the K-Means algorithm (default = 100).\n    \n    Returns:\n    --------\n    list[list[float]]\n        The final centroids as a list of lists, each coordinate rounded to 4 decimals,\n        and sorted in ascending lexicographical order.\n    \"\"\"\n\n    # 1. Initialize centroids with the first k samples\n    centroids = X[:k].copy()  # shape: (k, n_features)\n\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n\n        # 2a. Assign each sample to the nearest centroid using squared Euclidean distance\n        # distances: shape (n_samples, k)\n        distances = np.sum((X[:, None] - centroids[None, :]) ** 2, axis=2)\n        # cluster_assignments: shape (n_samples,)\n        cluster_assignments = np.argmin(distances, axis=1)\n\n        # 2b. Update each centroid to the mean of assigned points\n        for cluster_idx in range(k):\n            # Get the samples assigned to this cluster\n            samples_in_cluster = X[cluster_assignments == cluster_idx]\n            # If a cluster has no points, keep its centroid unchanged\n            if len(samples_in_cluster) > 0:\n                centroids[cluster_idx] = np.mean(samples_in_cluster, axis=0)\n\n        # 3. Check for convergence (stop if all centroids moved < 1e-4)\n        centroid_shifts = np.linalg.norm(centroids - old_centroids, axis=1)\n        if np.all(centroid_shifts < 1e-4):\n            break\n\n    # 4. Sort the centroids in ascending lexicographical order\n    centroids_sorted = sorted(centroids, key=lambda c: tuple(c))\n\n    # 5. Round each coordinate to 4 decimal places and convert to regular Python list\n    final_centroids = [[round(coord, 4) for coord in c] for c in centroids_sorted]\n\n    return final_centroids"}
