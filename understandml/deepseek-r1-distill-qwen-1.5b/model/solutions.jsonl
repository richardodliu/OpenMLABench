{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    if examples is None:\n        examples = globalConstant\n    predictions = []\n    for example in examples:\n        output = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predictions.append(''.join(output))\n        print(f'Input: {example}, Output: {output}')\n    return predictions"}
{"task_id": 356, "completion_id": 0, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A Leaf object whose `value` attribute is either a sequence of\n               class probabilities (classification) or a single number\n               (regression).\n        classifier: When True, treat the leaf as a classification tree.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if isinstance(leaf.value, (list, tuple)):\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np"}
