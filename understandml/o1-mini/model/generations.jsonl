{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge (L2-regularised) Linear Regression using the closed-form solution.\n    \n    Parameters:\n    - data (np.ndarray): A 2D NumPy array where the last column is the target vector y,\n                         and the remaining columns are the feature matrix X.\n    - alpha (float): Regularisation strength (default is 0.0).\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places.\n                   Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term (intercept) by appending a column of ones\n    bias = np.ones((X.shape[0], 1))\n    X_bias = np.hstack((bias, X))\n    \n    # Compute X^T X\n    XtX = np.dot(X_bias.T, X_bias)\n    \n    # Create identity matrix with the size equal to number of columns in X_bias\n    I = np.eye(X_bias.shape[1])\n    \n    # Compute (X^T X + alpha * I)\n    XtX_alphaI = XtX + alpha * I\n    \n    # Check if the determinant is zero (matrix is not invertible)\n    det = np.linalg.det(XtX_alphaI)\n    if det == 0:\n        return -1\n    \n    # Compute the inverse of (X^T X + alpha * I)\n    try:\n        XtX_alphaI_inv = np.linalg.inv(XtX_alphaI)\n    except np.linalg.LinAlgError:\n        return -1\n    \n    # Compute X^T y\n    Xty = np.dot(X_bias.T, y)\n    \n    # Compute the weight vector w\n    w = np.dot(XtX_alphaI_inv, Xty)\n    \n    # Round each coefficient to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Convert the weights to a Python list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize dual variables alpha and bias b\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0  # Number of updates made\n\n    # Precompute the Gram matrix K where K[i,j] = X_train[i] \u00b7 X_train[j]\n    K = X_train @ X_train.T  # Shape: (n_samples, n_samples)\n\n    i = 0  # Start with the first sample\n    while i < n_samples:\n        # Compute activation for sample i\n        activation = np.sum(alpha * y_train * K[:, i])\n        # Compute margin\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            # Misclassified, update alpha[i] and b\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            if updates >= n_iter:\n                break  # Stop if reached maximum number of updates\n            i = 0  # Restart scanning from the first sample\n        else:\n            i += 1  # Move to the next sample\n\n    # Compute the primal weight vector w = sum_i alpha_i y_i x_i\n    w = np.dot(alpha * y_train, X_train)\n    # Round w and b to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {\n        \"identity\": {\n            \"link\": lambda mu: mu,\n            \"inv_link\": lambda eta: eta,\n            \"derivative\": lambda mu: np.ones_like(mu)\n        },\n        \"log\": {\n            \"link\": lambda mu: np.log(mu),\n            \"inv_link\": lambda eta: np.exp(eta),\n            \"derivative\": lambda mu: 1.0 / mu\n        },\n        \"logit\": {\n            \"link\": lambda mu: np.log(mu / (1 - mu)),\n            \"inv_link\": lambda eta: 1 / (1 + np.exp(-eta)),\n            \"derivative\": lambda mu: 1.0 / (mu * (1 - mu))\n        }\n    }\n    return links\n\n# Example usage:\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n\n    # Logit link\n    eta = links[\"logit\"][\"link\"](mu)\n    print(\"Logit link:\", np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\n\n    # Inverse logit link\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    print(\"Inverse logit link:\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n\n    # Derivative of logit link\n    derivative = links[\"logit\"][\"derivative\"](mu)\n    print(\"Derivative of logit link:\", np.round(derivative, 4))  # \u2192 [1.25, 1.25]\n```\n\n**Explanation:**\n\nThe `glm_links` function constructs a dictionary containing the three standard GLM link functions: **identity**, **log**, and **logit**. Each link function is itself a dictionary containing three callable functions:\n\n1. **link**: The link function \\( g(\\mu) \\).\n2. **inv_link**: The inverse link function \\( g^{-1}(\\eta) \\).\n3. **derivative**: The first derivative of the link function with respect to \\( \\mu \\), \\( g'(\\mu) \\).\n\nThese callables are implemented using `lambda` functions with NumPy operations to ensure they work seamlessly with scalars as well as 1-D and 2-D NumPy arrays through element-wise operations.\n\n**Key Points:**\n\n- **Identity Link:**\n  - \\( g(\\mu) = \\mu \\)\n  - \\( g^{-1}(\\eta) = \\eta \\)\n  - \\( g'(\\mu) = 1 \\)\n\n- **Log Link:**\n  - \\( g(\\mu) = \\log(\\mu) \\)\n  - \\( g^{-1}(\\eta) = e^\\eta \\)\n  - \\( g'(\\mu) = \\frac{1}{\\mu} \\)\n\n- **Logit Link:**\n  - \\( g(\\mu) = \\log\\left(\\frac{\\mu}{1 - \\mu}\\right) \\)\n  - \\( g^{-1}(\\eta) = \\frac{1}{1 + e^{-\\eta}} \\)\n  - \\( g'(\\mu) = \\frac{1}{\\mu(1 - \\mu)} \\)\n\n**Example Usage:**\n\nThe example provided demonstrates how to use the `glm_links` function:\n\n1. **Logit Link:**\n   - Computes \\( \\eta = g(\\mu) \\) using the logit link.\n   - Then computes \\( \\mu \\) back from \\( \\eta \\) using the inverse logit link.\n   - Finally, computes the derivative \\( g'(\\mu) \\).\n\nAll numerical outputs in the example are rounded to four decimal places for clarity, but the underlying functions operate with full floating-point precision."}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples, n_features = data.shape\n    depths = [0] * n_samples  # Initialize depths for all samples\n\n    def traverse(indices, current_depth):\n        # If fewer than three samples, make this node a leaf\n        if len(indices) < 3:\n            for i in indices:\n                depths[i] = current_depth\n            return\n\n        # Choose a random feature to split on\n        f = np.random.choice(n_features)\n        feature_values = data[indices, f]\n        down = feature_values.min()\n        up = feature_values.max()\n\n        # If all values are the same, make this node a leaf\n        if down == up:\n            for i in indices:\n                depths[i] = current_depth\n            return\n\n        # Choose a random split value\n        v = np.random.uniform(down, up)\n\n        # Split the indices into left and right children\n        left_mask = feature_values <= v\n        left = indices[left_mask]\n        right_mask = feature_values > v\n        right = indices[right_mask]\n\n        # Recursively traverse the left and right children\n        if left.size > 0:\n            traverse(left, current_depth + 1)\n        if right.size > 0:\n            traverse(right, current_depth + 1)\n\n    # Start traversal from the root with all sample indices and depth 0\n    traverse(np.arange(n_samples), 0)\n\n    return depths\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate minimum support count\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Convert transactions to sets to remove duplicates and for faster operations\n    transaction_list = [set(transaction) for transaction in transactions]\n    \n    # Initialize frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Step 1: Find frequent 1-itemsets\n    item_counts = Counter()\n    for transaction in transaction_list:\n        for item in transaction:\n            item_counts[item] += 1\n    # Select items that meet the minimum support\n    current_frequent = { (item,): count for item, count in item_counts.items() if count >= min_support_count }\n    \n    # Add to the global frequent itemsets\n    frequent_itemsets.update(current_frequent)\n    \n    # Initialize k for the size of itemsets\n    k = 2\n    \n    while current_frequent:\n        # Generate candidate itemsets of size k\n        candidates = set()\n        items_prev_level = sorted([itemset for itemset in current_frequent.keys()])\n        \n        # Join step: combine itemsets to form candidates\n        for i in range(len(items_prev_level)):\n            for j in range(i+1, len(items_prev_level)):\n                # Attempt to merge two itemsets\n                itemset1 = items_prev_level[i]\n                itemset2 = items_prev_level[j]\n                # Check if first k-2 items are the same\n                if itemset1[:-1] == itemset2[:-1]:\n                    # Merge to create a new candidate\n                    new_candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    if len(new_candidate) == k:\n                        candidates.add(new_candidate)\n                else:\n                    break  # Since the list is sorted, no need to check further\n                \n        # Count support for candidates\n        candidate_counts = Counter()\n        for transaction in transaction_list:\n            for candidate in candidates:\n                if set(candidate).issubset(transaction):\n                    candidate_counts[candidate] += 1\n        \n        # Select candidates that meet the minimum support\n        current_frequent = { candidate: count for candidate, count in candidate_counts.items() if count >= min_support_count }\n        \n        # Add to the global frequent itemsets\n        frequent_itemsets.update(current_frequent)\n        \n        # Move to the next level\n        k += 1\n    \n    return frequent_itemsets\n\n# Example Usage\nif __name__ == \"__main__\":\n    transactions = [\n        ['bread', 'milk'],\n        ['bread', 'diaper', 'beer', 'egg'],\n        ['milk', 'diaper', 'beer', 'coke'],\n        ['bread', 'milk', 'diaper', 'beer'],\n        ['bread', 'milk', 'diaper', 'coke']\n    ]\n    minsup = 0.6\n    \n    result = find_frequent_itemsets(transactions, minsup)\n    print(result)\n    # Expected Output:\n    # {\n    #  ('bread',): 4,\n    #  ('milk',): 4,\n    #  ('diaper',): 4,\n    #  ('beer',): 3,\n    #  ('bread', 'milk'): 3,\n    #  ('bread', 'diaper'): 3,\n    #  ('diaper', 'milk'): 3,\n    #  ('beer', 'diaper'): 3\n    # }\n```\n\n### Explanation\n\nThe provided `find_frequent_itemsets` function implements the Apriori algorithm, which is a classic method for frequent itemset mining. Here's a step-by-step breakdown of how the function works:\n\n1. **Minimum Support Count Calculation**:\n   - Determine the absolute minimum support count by multiplying the `minsup` fraction with the total number of transactions `N` and applying the ceiling function to ensure it's an integer.\n\n2. **Preprocessing Transactions**:\n   - Convert each transaction to a `set` to eliminate duplicate items and allow for efficient subset checks.\n\n3. **Frequent 1-Itemsets**:\n   - Count the occurrence of each individual item across all transactions.\n   - Select items that meet or exceed the minimum support count to form the initial set of frequent itemsets.\n\n4. **Iterative Candidate Generation and Pruning**:\n   - Starting from itemsets of size 2, generate candidate itemsets by merging frequent itemsets from the previous iteration.\n   - Ensure that the generated candidates are of the correct size and that their subsets are frequent (this is implicitly handled by the way candidates are generated).\n   - Count the support for each candidate by checking its presence in all transactions.\n   - Retain only those candidates that meet the minimum support count.\n   - Repeat the process, increasing the size of itemsets (`k`) until no new frequent itemsets are found.\n\n5. **Result Compilation**:\n   - Collect all identified frequent itemsets along with their support counts into the `frequent_itemsets` dictionary.\n   - Return this dictionary as the final result.\n\n6. **Example Usage**:\n   - An example is provided to demonstrate how the function works with a sample set of transactions and a minimum support threshold.\n   - Running the example should yield the expected frequent itemsets as specified in the problem statement.\n\n### Notes\n\n- The algorithm efficiently reduces the search space by iteratively building larger itemsets from smaller ones, ensuring that only potential frequent candidates are considered at each step.\n- Sorting the itemsets ensures consistency in their representation, which is essential for correctly identifying and merging candidates.\n- The use of Python's `Counter` and `itertools` modules helps in efficiently counting and generating combinations without external dependencies."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize centers as the first k samples\n    centers = data[:k].astype(float)\n    labels = np.zeros(data.shape[0], dtype=int)\n    \n    for iteration in range(max_iter):\n        # Compute squared Euclidean distances between each sample and each center\n        # Shape of distances: (num_samples, k)\n        diff = data[:, np.newaxis, :] - centers[np.newaxis, :, :]  # (N, k, D)\n        distances = np.sum(diff ** 2, axis=2)  # (N, k)\n        \n        # Assign each sample to the nearest center\n        new_labels = np.argmin(distances, axis=1)\n        \n        # Initialize a new array for updated centers\n        new_centers = np.copy(centers)\n        empty_clusters = False\n        \n        for cluster_idx in range(k):\n            # Extract all data points assigned to the current cluster\n            assigned_data = data[new_labels == cluster_idx]\n            \n            if assigned_data.size == 0:\n                # If a cluster has no points, reinitialize its center with a random sample\n                random_idx = np.random.randint(0, data.shape[0])\n                new_centers[cluster_idx] = data[random_idx]\n                empty_clusters = True\n            else:\n                # Compute the mean of assigned data points\n                new_centers[cluster_idx] = assigned_data.mean(axis=0)\n        \n        # Compute the maximum change among all centers\n        center_shifts = np.linalg.norm(new_centers - centers, axis=1)\n        max_shift = np.max(center_shifts)\n        \n        # Update centers and labels for the next iteration\n        centers = new_centers\n        labels = new_labels\n        \n        # Check for convergence\n        if max_shift < epsilon:\n            break\n    \n    # Round centers to 4 decimal places and convert to list of lists\n    rounded_centers = centers.round(4).tolist()\n    \n    # Convert labels to a list of integers\n    labels_list = labels.tolist()\n    \n    return (rounded_centers, labels_list)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items), dtype=np.float64)\n\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Find users who rated both items\n            common_users = (data[:, i] > 0) & (data[:, j] > 0)\n            if not np.any(common_users):\n                similarity = 0.0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n\n                if criterion == \"cosine\":\n                    std1 = np.std(v1, ddof=1)\n                    std2 = np.std(v2, ddof=1)\n                    \n                    if std1 > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if std2 > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    \n                    numerator = np.dot(v1, v2)\n                    norm1 = np.linalg.norm(v1)\n                    norm2 = np.linalg.norm(v2)\n                    \n                    if norm1 > 0 and norm2 > 0:\n                        similarity = numerator / (norm1 * norm2)\n                    else:\n                        similarity = 0.0\n\n                elif criterion == \"pearson\":\n                    if len(v1) < 2:\n                        similarity = 0.0\n                    else:\n                        mean1 = np.mean(v1)\n                        mean2 = np.mean(v2)\n                        std1 = np.std(v1, ddof=1)\n                        std2 = np.std(v2, ddof=1)\n                        \n                        if std1 > 1e-3 and std2 > 1e-3:\n                            cov = np.dot(v1 - mean1, v2 - mean2)\n                            similarity = cov / ((len(v1) - 1) * std1 * std2)\n                        else:\n                            similarity = 0.0\n                else:\n                    raise ValueError(\"Invalid similarity criterion. Choose 'cosine' or 'pearson'.\")\n\n            S[i, j] = similarity\n            S[j, i] = similarity\n\n    # Step 2: Get rated and unrated items for the active user\n    user_ratings = data[user_ind]\n    rated_mask = user_ratings > 0\n    unrated_mask = ~rated_mask\n\n    rated_indices = np.where(rated_mask)[0]\n    unrated_indices = np.where(unrated_mask)[0]\n\n    if len(unrated_indices) == 0:\n        return []\n\n    r = user_ratings[rated_indices]\n\n    # Step 3: Compute predicted scores for each unrated item\n    scores = []\n    for t in unrated_indices:\n        similarities = S[t, rated_indices]\n        numerator = np.dot(r, similarities)\n        denominator = np.sum(np.abs(similarities))\n        if denominator > 0:\n            score = numerator / denominator\n        else:\n            score = 0.0\n        scores.append((t, score))\n\n    # Step 4: Sort the items by score descending, then by index ascending\n    scores_sorted = sorted(scores, key=lambda x: (-x[1], x[0]))\n\n    # Step 5: Select top k items\n    recommended = [item for item, score in scores_sorted[:k]]\n\n    return recommended\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    # Ensure there are enough samples to make a split\n    n_samples, n_features = X.shape\n    if n_samples < 4:\n        return None  # Need at least two samples per side\n\n    # Compute parent leaf loss\n    parent_sum_g = np.sum(g)\n    parent_sum_h = np.sum(h)\n    parent_L = -0.5 * (parent_sum_g ** 2) / (parent_sum_h + lam) + gamma\n\n    best_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_X = feature_values[sorted_indices]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n\n        # Compute cumulative sums of gradients and Hessians\n        cumsum_g = np.cumsum(sorted_g)\n        cumsum_h = np.cumsum(sorted_h)\n\n        # Total sum of gradients and Hessians\n        sum_g_total = cumsum_g[-1]\n        sum_h_total = cumsum_h[-1]\n\n        # Identify possible split positions\n        # A valid split must leave at least two instances on each side\n        # and the feature value must change to create a unique threshold\n        possible_splits = np.where(\n            (sorted_X[1:-1] > sorted_X[:-2])  # Ensure unique threshold\n        )[0] + 1  # Shift indices to match split positions\n\n        # Iterate over possible split positions\n        for split_pos in possible_splits:\n            # Ensure at least two samples on each side\n            if split_pos < 2 or split_pos > n_samples - 2:\n                continue\n\n            sum_g_left = cumsum_g[split_pos - 1]\n            sum_h_left = cumsum_h[split_pos - 1]\n\n            sum_g_right = sum_g_total - sum_g_left\n            sum_h_right = sum_h_total - sum_h_left\n\n            # Compute loss for left and right children\n            L_left = -0.5 * (sum_g_left ** 2) / (sum_h_left + lam) + gamma\n            L_right = -0.5 * (sum_g_right ** 2) / (sum_h_right + lam) + gamma\n\n            # Compute gain\n            gain = parent_L - (L_left + L_right)\n\n            # Update best split if gain is higher\n            if gain > best_gain:\n                best_gain = gain\n                threshold = (sorted_X[split_pos - 1] + sorted_X[split_pos]) / 2\n                best_split = (feature_index, threshold)\n\n    # Check if the best gain is positive\n    if best_gain > 0:\n        return best_split\n    else:\n        return None\n```"}
{"task_id": 20, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `sigmoid_activation` function as per your specifications.\n\n### Explanation\n\n1. **Input Handling**:\n    - **Scalar Input**: If the input `x` is an integer or float, the function computes the sigmoid and its gradient directly, rounds them to 4 decimal places, and returns them as floats in a tuple.\n    - **Array-like Input**: If the input is a list or a NumPy array, it is first converted to a NumPy array (if it's not already one). The sigmoid and gradient are computed element-wise, rounded to 4 decimal places, and then converted back to Python lists using `.tolist()`. The function returns a tuple of these two lists.\n\n2. **Sigmoid Function**:\n    - Defined as `sigmoid(x) = 1 / (1 + np.exp(-x))`.\n   \n3. **Gradient Calculation**:\n    - The gradient of the sigmoid function is `sigmoid(x) * (1 - sigmoid(x))`.\n\n4. **Rounding and Conversion**:\n    - All numeric results are rounded to 4 decimal places using `np.round`.\n    - For non-scalar inputs, the NumPy arrays are converted to Python lists with `.tolist()`.\n\n### Code Implementation\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Check if input is scalar (int or float)\n    if isinstance(x, (int, float)):\n        sigmoid_val = sigmoid(x)\n        gradient_val = sigmoid_val * (1 - sigmoid_val)\n        \n        # Round the results to 4 decimal places and convert to float\n        sigmoid_rounded = float(np.round(sigmoid_val, 4))\n        gradient_rounded = float(np.round(gradient_val, 4))\n        \n        return (sigmoid_rounded, gradient_rounded)\n    \n    else:\n        # Convert input to NumPy array\n        x_array = np.array(x)\n        \n        # Compute sigmoid and gradient\n        sigmoid_vals = sigmoid(x_array)\n        gradient_vals = sigmoid_vals * (1 - sigmoid_vals)\n        \n        # Round the results to 4 decimal places\n        sigmoid_rounded = np.round(sigmoid_vals, 4)\n        gradient_rounded = np.round(gradient_vals, 4)\n        \n        # Convert NumPy arrays to Python lists\n        sigmoid_list = sigmoid_rounded.tolist()\n        gradient_list = gradient_rounded.tolist()\n        \n        return (sigmoid_list, gradient_list)\n```\n\n### Example Usage\n\n```python\n# Scalar input\nscalar_input = 0\nprint(sigmoid_activation(scalar_input))\n# Output: (0.5, 0.25)\n\n# List input\nlist_input = [0, 2, -2]\nprint(sigmoid_activation(list_input))\n# Output: ([0.5, 0.881, 0.119], [0.25, 0.1049, 0.1049])\n\n# 2D NumPy array input\narray_input = np.array([[0, 1], [-1, 2]])\nprint(sigmoid_activation(array_input))\n# Output: ([[0.5, 0.7311], [0.2689, 0.8808]], [[0.25, 0.1966], [0.1966, 0.10499]])\n```\n\nThis implementation ensures that the function behaves as specified, handling different input types and returning the correctly formatted outputs."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Convert lists to numpy arrays for efficient computation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    N = len(x_train)\n\n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n\n    # Initialize sample weights uniformly\n    w = np.full(N, 1.0 / N)\n\n    # Find all possible thresholds: midpoints between consecutive distinct x's\n    thresholds = []\n    for i in range(N - 1):\n        if x_sorted[i] != x_sorted[i + 1]:\n            theta = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n            thresholds.append(theta)\n    # If all x's are the same, no thresholds can be set; handle gracefully\n    if not thresholds:\n        # Only one unique x, choose a single threshold\n        thresholds = [x_sorted[0]]\n\n    ensemble = []  # List to store tuples of (alpha, (d, theta))\n    sum_predictions = np.zeros(N)\n    \n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_pred = None\n\n        # Enumerate all possible stumps\n        for theta in thresholds:\n            for d in [0, 1]:\n                if d == 0:\n                    # h(x) = +1 if x <= theta else -1\n                    predictions = np.where(x_sorted <= theta, 1, -1)\n                else:\n                    # h(x) = +1 if x > theta else -1\n                    predictions = np.where(x_sorted > theta, 1, -1)\n                \n                # Calculate weighted error\n                misclassified = predictions != y_sorted\n                error = np.sum(w[misclassified])\n                \n                # Check if this stump is better\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n                    best_pred = predictions\n\n        # Avoid division by zero and handle perfect classification\n        if min_error == 0:\n            alpha = float('inf')  # Assign a large number\n        elif min_error == 1:\n            alpha = -float('inf')  # Assign a large negative number\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n\n        # Add the best stump to the ensemble\n        ensemble.append((alpha, best_stump))\n\n        # Update the aggregate predictions\n        sum_predictions += alpha * best_pred\n\n        # Update sample weights\n        w *= np.exp(-alpha * y_sorted * best_pred)\n\n        # Normalize the weights\n        w /= np.sum(w)\n\n        # Compute the current training error\n        ensemble_pred = np.sign(sum_predictions)\n        # Replace zeros with 1 as per sign definition\n        ensemble_pred[ensemble_pred == 0] = 1\n        training_error = np.mean(ensemble_pred != y_sorted)\n\n        # Check stopping condition\n        if training_error <= epsilon:\n            break\n\n    # After training, make predictions on x_test\n    test_predictions = np.zeros(len(x_test))\n    for alpha, (d, theta) in ensemble:\n        if d == 0:\n            preds = np.where(x_test <= theta, 1, -1)\n        else:\n            preds = np.where(x_test > theta, 1, -1)\n        test_predictions += alpha * preds\n\n    # Final predictions: sign of the aggregate\n    final_pred = np.sign(test_predictions)\n    final_pred[final_pred == 0] = 1  # Define sign(0) as +1\n    return final_pred.astype(int).tolist()\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared norms of training and test samples\n    X_train_sq = np.sum(X_train ** 2, axis=1).reshape(-1, 1)  # Shape: (n, 1)\n    X_test_sq = np.sum(X_test ** 2, axis=1).reshape(1, -1)    # Shape: (1, m)\n    \n    # Compute the squared Euclidean distance between each training and test sample\n    sq_dists = X_train_sq + X_test_sq - 2 * np.dot(X_train, X_test.T)  # Shape: (n, m)\n    \n    # Compute the Gaussian (RBF) kernel matrix\n    K = np.exp(-gamma * sq_dists)  # Shape: (n, m)\n    \n    # Compute the decision function for all test samples\n    decision = np.dot(alpha * y_train, K) + b  # Shape: (m,)\n    \n    # Apply the sign function to get predicted labels and ensure they are -1 or 1\n    predictions = np.where(decision >= 0, 1, -1)\n    \n    # Convert the NumPy array to a Python list of integers\n    return predictions.astype(int).tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if X is empty\n    if not X or not X[0]:\n        return -1\n\n    m = len(X)\n    n = len(X[0])\n\n    # Validate k\n    if not (1 <= k <= min(m, n)):\n        return -1\n\n    # Convert X to a NumPy array of type float\n    X_np = np.array(X, dtype=float)\n\n    # Perform Singular Value Decomposition\n    U, S, Vt = np.linalg.svd(X_np, full_matrices=False)\n\n    # Truncate to the first k singular values/vectors\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n\n    # Reconstruct the matrix using truncated SVD\n    X_hat_np = np.dot(U_k, np.dot(S_k, Vt_k))\n\n    # Compute the Mean Squared Error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n\n    # Round the reconstructed matrix and mse to four decimals\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    mse_rounded = round(mse, 4)\n\n    return (X_hat_rounded, mse_rounded)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    \n    # Determine unique sorted x to compute split points\n    unique_sorted_x = np.unique(x_sorted)\n    \n    # If there's only one unique x, no split is possible\n    if len(unique_sorted_x) == 1:\n        # If no splits, prediction is the mean of y_train\n        prediction = np.mean(y_train)\n        return round(prediction, 4)\n    \n    # Compute candidate split points as midpoints between consecutive unique x's\n    split_points = (unique_sorted_x[:-1] + unique_sorted_x[1:]) / 2\n    \n    # Initialize residuals as y_train\n    residuals = y_sorted.copy()\n    \n    # Initialize ensemble as an empty list to store stumps\n    # Each stump is a tuple: (split, c1, c2)\n    ensemble = []\n    \n    # Compute initial RSS\n    current_RSS = np.sum(residuals ** 2)\n    \n    # Iterate until RSS is less than or equal to epsilon\n    while current_RSS > epsilon:\n        best_RSS = np.inf\n        best_s = None\n        best_c1 = None\n        best_c2 = None\n        \n        # Iterate over all possible split points to find the best stump\n        for s in split_points:\n            # Create masks for the two regions\n            mask1 = x_sorted <= s\n            mask2 = x_sorted > s\n            \n            # If either region has no samples, skip this split\n            if not np.any(mask1) or not np.any(mask2):\n                continue\n            \n            # Compute c1 and c2 as means of residuals in each region\n            c1 = np.mean(residuals[mask1])\n            c2 = np.mean(residuals[mask2])\n            \n            # Compute the predictions of this stump\n            stump_predictions = np.where(mask1, c1, c2)\n            \n            # Compute the new residuals if this stump is added\n            new_residuals = residuals - stump_predictions\n            \n            # Compute the new RSS\n            rss = np.sum(new_residuals ** 2)\n            \n            # Update the best stump if this stump has a lower RSS\n            if rss < best_RSS:\n                best_RSS = rss\n                best_s = s\n                best_c1 = c1\n                best_c2 = c2\n        \n        # If no valid stump was found, break the loop\n        if best_s is None:\n            break\n        \n        # Add the best stump to the ensemble\n        ensemble.append((best_s, best_c1, best_c2))\n        \n        # Update residuals by subtracting the predictions of the added stump\n        mask1 = x_sorted <= best_s\n        mask2 = x_sorted > best_s\n        residuals = residuals - np.where(mask1, best_c1, best_c2)\n        \n        # Update the current RSS\n        current_RSS = best_RSS\n        \n    # After training, make the prediction for x_query\n    prediction = 0.0\n    for stump in ensemble:\n        s, c1, c2 = stump\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    # Round the prediction to four decimal places\n    prediction = round(prediction, 4)\n    \n    return prediction\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a random binary tensor filled with 0.0s and 1.0s.\n\n    Each entry in the tensor is 1.0 with a probability equal to `sparsity` and \n    0.0 otherwise. Optionally, a seed can be provided to ensure reproducible results.\n\n    Parameters:\n    - shape (tuple of ints): The shape of the desired tensor.\n    - sparsity (float, optional): The probability of each entry being 1.0.\n      Must be in the closed interval [0, 1]. Defaults to 0.5.\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility.\n      If `None`, the random number generator is not seeded. Defaults to None.\n\n    Returns:\n    - numpy.ndarray: A tensor of the specified shape containing 0.0s and 1.0s with a floating dtype.\n    - If `sparsity` is outside the interval [0, 1], returns -1.\n\n    Example:\n    >>> tensor = random_binary_tensor(shape=(2, 3), sparsity=0.3, seed=42)\n    >>> print(tensor)\n    [[0. 1. 1.]\n     [0. 0. 0.]]\n    \"\"\"\n    # Validate sparsity\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    # Set seed for reproducibility if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate random numbers in the range [0, 1)\n    random_values = np.random.rand(*shape)\n\n    # Determine the threshold for converting to binary values\n    threshold = 1.0 - sparsity\n\n    # Create the binary tensor based on the threshold\n    binary_tensor = (random_values >= threshold).astype(float)\n\n    return binary_tensor\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n    \"\"\"\n    n = data.shape[0]\n    if n == 0:\n        raise ValueError(\"The input data array is empty.\")\n\n    k = n // 2\n    # Perform argpartition to find the index of the median\n    partitioned_indices = np.argpartition(data[:, d], k)\n    pivot_index = partitioned_indices[k]\n    median_value = data[pivot_index, d]\n\n    # Find indices with values strictly less than and greater than the median\n    left_indices = np.where(data[:, d] < median_value)[0]\n    right_indices = np.where(data[:, d] > median_value)[0]\n\n    # Convert to sorted Python lists\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n\n    return (int(pivot_index), left, right)\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Pre-condition checks\n    assert x.ndim == 1, \"Input array x must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Length of x must be at least as large as frame_width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the new shape and strides\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * x.strides[0], x.strides[0])\n\n    # Create the framed view using as_strided\n    framed = as_strided(x, shape=new_shape, strides=new_strides)\n\n    # Set the writability flag\n    if not writeable:\n        framed = framed.copy()  # as_strided views might share memory; to ensure safety, copy when making read-only\n        framed.flags.writeable = False\n    else:\n        # If writeable is True, inherit the source array's writability\n        framed.flags.writeable = x.flags.writeable\n\n    return framed\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        # Convert input to a NumPy array if it's a list of lists\n        X = np.array(X)\n        \n        # Check if the matrix is two-dimensional\n        if X.ndim != 2:\n            return False\n        \n        # Check if all elements are numeric\n        if not np.issubdtype(X.dtype, np.number):\n            return False\n        \n        # Check if all elements are between 0 and 1 inclusive\n        if not ((X >= 0).all() and (X <= 1).all()):\n            return False\n        \n        # Check if each row sums to 1 within the specified tolerance\n        row_sums = X.sum(axis=1)\n        if not np.allclose(row_sums, 1, atol=1e-8):\n            return False\n        \n        return True\n    except:\n        # In case of any unexpected errors, return False\n        return False\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    idx = 0  # To keep track of the current batch start\n\n    for _ in range(max_iter):\n        if n <= batch_size:\n            # Use the full dataset as one batch\n            X_batch = X\n            y_batch = y\n        else:\n            end_idx = idx + batch_size\n            if end_idx <= n:\n                X_batch = X[idx:end_idx]\n                y_batch = y[idx:end_idx]\n                idx = end_idx\n            else:\n                # Wrap around\n                remaining = n - idx\n                X_batch = np.vstack((X[idx:], X[:batch_size - remaining]))\n                y_batch = np.concatenate((y[idx:], y[:batch_size - remaining]))\n                idx = batch_size - remaining\n\n        # Compute the gradient\n        predictions = X_batch @ w\n        error = predictions - y_batch\n        g = (1 / n) * (X_batch.T @ error)\n\n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n\n        # Update the weights\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n\n        # Check for early stopping\n        grad_norm = np.linalg.norm(g)\n        if grad_norm < epsilon:\n            break\n\n    # Round the weights to four decimal places and convert to list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its derivative (sigmoid).\n\n    Parameters:\n    - x: A scalar, list, or NumPy array of real numbers.\n    - deriv: Boolean flag indicating whether to compute the derivative (sigmoid).\n             Defaults to False.\n\n    Returns:\n    - A list of rounded results to 4 decimal places, or a single float if input is scalar.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    is_scalar = np.isscalar(x)\n    x_array = np.array([x]) if is_scalar else np.array(x)\n\n    if not deriv:\n        # Compute SoftPlus using a numerically stable approach\n        # For x > 0: SoftPlus(x) = x + log1p(exp(-x))\n        # For x <= 0: SoftPlus(x) = log1p(exp(x))\n        softplus_vals = np.where(\n            x_array > 0,\n            x_array + np.log1p(np.exp(-x_array)),\n            np.log1p(np.exp(x_array))\n        )\n        result = np.round(softplus_vals, 4)\n    else:\n        # Compute sigmoid using a numerically stable approach\n        # For x >= 0: sigmoid(x) = 1 / (1 + exp(-x))\n        # For x < 0: sigmoid(x) = exp(x) / (1 + exp(x))\n        sigmoid_vals = np.where(\n            x_array >= 0,\n            1 / (1 + np.exp(-x_array)),\n            np.exp(x_array) / (1 + np.exp(x_array))\n        )\n        result = np.round(sigmoid_vals, 4)\n\n    # Convert the result back to a Python list or scalar float\n    if is_scalar:\n        return float(result[0])\n    else:\n        return result.tolist()\n```\n\n### **Explanation:**\n\n1. **Input Handling:**\n    - The function begins by checking if the input `x` is a scalar using `np.isscalar(x)`.\n    - It then converts the input to a NumPy array for efficient vectorized computations. If the input is a scalar, it's wrapped in a NumPy array with a single element.\n\n2. **SoftPlus Computation (`deriv=False`):**\n    - **Numerical Stability:**\n        - For large positive values of `x`, directly computing `log(1 + exp(x))` can cause overflow. To prevent this, when `x > 0`, the function computes `x + log1p(exp(-x))`, which is mathematically equivalent but numerically stable.\n        - For `x <= 0`, it computes `log1p(exp(x))`, which is stable for negative values of `x`.\n    - The `np.where` function is used to apply these two different computations based on the condition `x_array > 0`.\n\n3. **Sigmoid Computation (`deriv=True`):**\n    - **Numerical Stability:**\n        - For `x >= 0`, the sigmoid function is computed as `1 / (1 + exp(-x))`.\n        - For `x < 0`, to avoid overflow in `exp(-x)` when `x` is a large negative number, it's computed as `exp(x) / (1 + exp(x))`.\n    - Again, `np.where` is utilized to apply the appropriate computation based on the condition `x_array >= 0`.\n\n4. **Rounding and Output:**\n    - After computing either SoftPlus or sigmoid values, the results are rounded to 4 decimal places using `np.round`.\n    - If the original input was a scalar, the function returns a single float. Otherwise, it returns a Python list of the rounded values.\n\n### **Examples:**\n\n```python\n# Example 1: Scalar input without derivative\nprint(softplus(2))  # Output: 2.1269\n\n# Example 2: Scalar input with derivative\nprint(softplus(2, deriv=True))  # Output: 0.8808\n\n# Example 3: List input without derivative\nprint(softplus([-1000, 0, 1000]))\n# Output: [0.0, 0.6931, 1000.0]\n\n# Example 4: NumPy array input with derivative\nprint(softplus(np.array([-2, 0, 2]), deriv=True))\n# Output: [0.1192, 0.5, 0.8808]\n```\n\nThese examples demonstrate how the function handles different types of inputs and whether or not the derivative is requested."}
{"task_id": 58, "completion_id": 0, "completion": "To implement the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram language model, we'll follow these steps:\n\n1. **Counting N-grams and (N-1)-grams**:\n   - For `N=1` (unigram), we'll count the occurrences of each word in the corpus.\n   - For `N>1`, we'll count the occurrences of each N-gram and also count the occurrences of each (N-1)-gram (the prefix).\n\n2. **Calculating Log-Probability**:\n   - Iterate through each possible N-gram in the target sequence.\n   - For each N-gram, calculate its probability by dividing the count of the N-gram by the count of its (N-1)-gram prefix.\n   - Take the natural logarithm of this probability and sum it up.\n   - If at any point an N-gram or its prefix is not found in the corpus (i.e., count is zero), return negative infinity (`float('-inf')`).\n\n3. **Edge Cases**:\n   - If the target sequence is shorter than `N`, the log-probability is `0.0` because there are no N-grams to evaluate.\n   - Ensure that the final log-probability is rounded to four decimal places as specified.\n\nBelow is the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        # Undefined for N < 1\n        return float('-inf')\n    \n    # If the sequence is shorter than N, the sum is zero (log(1) = 0)\n    if len(sequence) < N:\n        return 0.0\n\n    if N == 1:\n        unigram_counts = Counter(corpus)\n        total_unigrams = len(corpus)\n        log_prob = 0.0\n        for word in sequence:\n            count = unigram_counts.get(word, 0)\n            if count == 0:\n                return float('-inf')\n            prob = count / total_unigrams\n            log_prob += np.log(prob)\n        return round(log_prob, 4)\n    else:\n        # Generate N-gram counts\n        ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus)-N+1))\n        # Generate (N-1)-gram counts\n        prefix_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus)-N+2))\n        log_prob = 0.0\n        for i in range(len(sequence)-N+1):\n            ngram = tuple(sequence[i:i+N])\n            prefix = tuple(sequence[i:i+N-1])\n            n_count = ngram_counts.get(ngram, 0)\n            p_count = prefix_counts.get(prefix, 0)\n            if n_count == 0 or p_count == 0:\n                return float('-inf')\n            prob = n_count / p_count\n            log_prob += np.log(prob)\n        return round(log_prob, 4)\n```\n\n## **Explanation of the Code:**\n\n1. **Handling `N=1` (Unigram Model)**:\n   - We count the frequency of each word in the corpus using `Counter`.\n   - For each word in the target sequence, we check if it exists in the unigram counts.\n     - If a word is not found, return `float('-inf')`.\n     - Otherwise, calculate its probability and add the natural logarithm of this probability to the `log_prob` accumulator.\n\n2. **Handling `N>1` (Higher-order N-gram Model)**:\n   - We generate all possible N-grams from the corpus and count their occurrences.\n   - Similarly, we generate all possible (N-1)-grams (prefixes) and count their occurrences.\n   - For each N-gram in the target sequence:\n     - Check if both the N-gram and its prefix exist in the respective counts.\n       - If either is missing, return `float('-inf')`.\n     - Calculate the probability of the N-gram given its prefix and add the natural logarithm of this probability to `log_prob`.\n\n3. **Edge Case When Sequence Length is Less Than `N`**:\n   - If the length of the target sequence is less than `N`, there are no N-grams to evaluate, and by definition, the log-probability is `0.0`.\n\n4. **Final Output**:\n   - The total log-probability is rounded to four decimal places using Python's `round` function before being returned.\n\n## **Example Usage:**\n\n```python\n# Example corpus and sequence\ncorpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"]\nsequence = [\"the\", \"cat\", \"sat\"]\nN = 2\n\n# Calculate the log-probability\nresult = unsmoothed_ngram_log_prob(corpus, sequence, N)\nprint(result)  # Output will be the log-probability rounded to 4 decimal places\n```\n\nThis implementation ensures that the function accurately computes the unsmoothed MLE N-gram log-probability while handling all specified edge cases."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = X.shape[0]\n\n    # Build the design matrix with polynomial features\n    # Column 0: ones for bias, Columns 1 to degree: X^1 to X^degree\n    X_design = np.ones((m, degree + 1))\n    for d in range(1, degree + 1):\n        X_design[:, d] = X ** d\n\n    # Initialize weights to zeros\n    w = np.zeros(degree + 1)\n\n    # Precompute X_j^T X_j for j >=1\n    X_j_squared = np.sum(X_design[:, 1:] ** 2, axis=0)\n\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n\n        # Update bias w0\n        # w0 = mean(y - X_{\u00ac0}\u00b7w_{\u00ac0})\n        w0 = np.mean(y - X_design[:, 1:] @ w[1:])\n        w[0] = w0\n\n        # Update each coefficient w_j for j >=1\n        for j in range(1, degree + 1):\n            # Compute residual without the j-th feature\n            residual = y - (X_design @ w) + w[j] * X_design[:, j]\n            rho = np.dot(X_design[:, j], residual)\n\n            if reg_factor != 0:\n                # Apply soft thresholding\n                if rho < -reg_factor:\n                    w_j = (rho + reg_factor) / X_j_squared[j - 1]\n                elif rho > reg_factor:\n                    w_j = (rho - reg_factor) / X_j_squared[j - 1]\n                else:\n                    w_j = 0.0\n            else:\n                # Ordinary least squares update\n                w_j = rho / X_j_squared[j - 1]\n\n            w[j] = w_j\n\n        # Check for convergence\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n\n    # Round the coefficients to four decimal places and convert to list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model (HMM).\n\n    Parameters:\n    - A (list of list of floats): Transition probability matrix of shape (N, N), where A[i][j] represents the probability of transitioning from state i to state j.\n    - B (list of list of floats): Emission probability matrix of shape (N, M), where B[j][k] represents the probability of emitting symbol k from state j.\n    - obs (list of ints): Observation sequence as a list of observation indices, with length T.\n    - t (int): The time index for which to compute the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    - list of floats: The backward probability vector \u03b2_t, containing N probabilities rounded to four decimal places.\n    \n    Example:\n    >>> A = [[0.7, 0.3], [0.4, 0.6]]\n    >>> B = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\n    >>> obs = [0, 1, 2]\n    >>> t = 1\n    >>> backward_beta(A, B, obs, t)\n    [0.2100, 0.1500]\n    \"\"\"\n    A = np.array(A)  # Transition matrix (N x N)\n    B = np.array(B)  # Emission matrix (N x M)\n    obs = np.array(obs)  # Observation sequence\n    N = A.shape[0]\n    T = len(obs)\n    \n    if not (0 <= t < T):\n        raise ValueError(\"Time index t must satisfy 0 \u2264 t < T.\")\n    \n    # Initialize beta at time T-1\n    beta = np.ones(N)\n    \n    # If t is the last time step, return beta immediately\n    if t == T - 1:\n        return list(np.round(beta, 4))\n    \n    # Iterate backwards from T-2 down to t\n    for time in range(T - 2, t - 1, -1):\n        # Calculate emission probabilities for the next observation\n        emit_prob = B[:, obs[time + 1]]\n        # Update beta: beta_i = sum_j (A_ij * B_j(o_{t+1}) * beta_j)\n        beta = A @ (emit_prob * beta)\n    \n    # Round the results to four decimal places and convert to list\n    beta = np.round(beta, 4)\n    return beta.tolist()\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A_np = np.array(A)  # Transition matrix (N x N)\n    B_np = np.array(B)  # Emission matrix (N x M)\n    pi_np = np.array(pi)  # Initial probabilities (N)\n    T = len(obs)  # Length of observation sequence\n    N = len(pi)  # Number of states\n\n    # Initialize beta matrix with ones for t = T-1\n    beta = np.ones((T, N))\n\n    # Iterate backwards from T-2 to 0\n    for t in range(T - 2, -1, -1):\n        o_next = obs[t + 1]\n        # Compute beta[t] = A @ (B[:, o_next] * beta[t + 1])\n        beta[t] = A_np @ (B_np[:, o_next] * beta[t + 1])\n\n    # Compute the final probability\n    prob = np.sum(pi_np * B_np[:, obs[0]] * beta[0])\n\n    # Round the result to six decimal places\n    return round(prob, 6)\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate that all inputs are non-empty\n    if not S or not A or not B or not observations:\n        return -1\n\n    n = len(S)\n\n    # Validate dimensions of A\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n\n    # Validate dimensions of B\n    if len(B) != n:\n        return -1\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1\n\n    # Validate observations\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1\n\n    # Convert lists to numpy arrays for efficient computation\n    try:\n        S = np.array(S)\n        A = np.array(A)\n        B = np.array(B)\n    except:\n        return -1  # In case conversion fails\n\n    # Initialize alpha with the first observation\n    alpha = S * B[:, observations[0]]\n\n    # Iterate over the observation sequence\n    for t in range(1, len(observations)):\n        alpha = np.dot(alpha, A) * B[:, observations[t]]\n\n    # Compute the total probability\n    probability = np.sum(alpha)\n\n    # Round the result to 4 decimal places\n    return round(probability, 4)\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    from collections import defaultdict, namedtuple\n\n    class FPNode:\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.node_link = None\n\n        def increment(self, count):\n            self.count += count\n\n    class FPTree:\n        def __init__(self):\n            self.root = FPNode(None, 1, None)\n            self.header_table = defaultdict(lambda: [0, None])\n\n        def add_transaction(self, transaction, count=1):\n            current_node = self.root\n            for item in transaction:\n                if item in current_node.children:\n                    current_node.children[item].increment(count)\n                else:\n                    new_node = FPNode(item, count, current_node)\n                    current_node.children[item] = new_node\n                    # Update header table\n                    if self.header_table[item][1] is None:\n                        self.header_table[item][1] = new_node\n                    else:\n                        last_node = self.header_table[item][1]\n                        while last_node.node_link is not None:\n                            last_node = last_node.node_link\n                        last_node.node_link = new_node\n                current_node = current_node.children[item]\n            return\n\n        def is_single_path(self):\n            current = self.root\n            while True:\n                children = list(current.children.values())\n                if len(children) > 1:\n                    return False\n                elif len(children) == 0:\n                    break\n                else:\n                    current = children[0]\n            return True\n\n    def mine_tree(tree, prefix, frequent_itemsets, min_support):\n        # Get items in header table sorted by support ascending, then lex\n        sorted_items = sorted(tree.header_table.items(), key=lambda x: (x[1][0], x[0]))\n        for item, (count, node) in sorted_items:\n            new_freq_set = prefix.copy()\n            new_freq_set.add(item)\n            frequent_itemsets.append(sorted(new_freq_set))\n            # Build conditional pattern base\n            conditional_patterns = []\n            current_node = node\n            while current_node is not None:\n                path = []\n                parent = current_node.parent\n                while parent is not None and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                path.reverse()\n                if path:\n                    conditional_patterns.append((path, current_node.count))\n                current_node = current_node.node_link\n            # Count frequency of items in conditional pattern base\n            conditional_counts = Counter()\n            for path, cnt in conditional_patterns:\n                conditional_counts.update(path)\n            # Remove infrequent items\n            conditional_counts = {item: cnt for item, cnt in conditional_counts.items() if cnt >= min_support}\n            if not conditional_counts:\n                continue\n            # Order items by frequency descending, then lex\n            ordered_items = sorted(conditional_counts.items(), key=lambda x: (-x[1], x[0]))\n            order = {item: idx for idx, (item, _) in enumerate(ordered_items)}\n            # Build conditional FP-tree\n            conditional_tree = FPTree()\n            for path, cnt in conditional_patterns:\n                filtered_path = [item for item in path if item in conditional_counts]\n                if not filtered_path:\n                    continue\n                # Sort according to the order\n                sorted_path = sorted(filtered_path, key=lambda x: ( -conditional_counts[x], x))\n                conditional_tree.add_transaction(sorted_path, cnt)\n            # Recursively mine the conditional tree\n            mine_tree(conditional_tree, new_freq_set, frequent_itemsets, min_support)\n\n    # Step 1: Count item frequencies\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    # Remove infrequent items\n    frequent_items = {item for item, cnt in item_counts.items() if cnt >= min_support}\n    if not frequent_items:\n        return []\n    # Order items by frequency descending, then lex\n    ordered_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    item_order = {item: idx for idx, item in enumerate(ordered_items)}\n    # Step 2: Build FP-tree\n    tree = FPTree()\n    for transaction in transactions:\n        filtered = [item for item in transaction if item in frequent_items]\n        if not filtered:\n            continue\n        # Sort by frequency descending, then lex\n        sorted_transaction = sorted(filtered, key=lambda x: ( -item_counts[x], x))\n        tree.add_transaction(sorted_transaction)\n    # Step 3: Mine the FP-tree\n    frequent_itemsets = []\n    mine_tree(tree, set(), frequent_itemsets, min_support)\n    # Add single frequent items\n    for item in frequent_items:\n        frequent_itemsets.append([item])\n    # Remove duplicates and sort items within each itemset\n    unique_itemsets = []\n    seen = set()\n    for itemset in frequent_itemsets:\n        sorted_set = tuple(sorted(itemset))\n        if sorted_set not in seen:\n            seen.add(sorted_set)\n            unique_itemsets.append(list(sorted_set))\n    # Sort the result as per constraints\n    unique_itemsets.sort(key=lambda x: (len(x), x))\n    return unique_itemsets\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Validate k\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert lists to NumPy arrays for efficient computation\n    X_train_np = np.array(X_train)  # Shape: (n_train, n_features)\n    y_train_np = np.array(y_train)  # Shape: (n_train,)\n    X_test_np = np.array(X_test)    # Shape: (n_test, n_features)\n    \n    predictions = []\n    \n    for test_point in X_test_np:\n        # Compute squared Euclidean distances to all training points\n        distances = np.sum((X_train_np - test_point) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        neighbor_indices = np.argpartition(distances, k-1)[:k]\n        \n        # Retrieve the labels of the k nearest neighbors\n        neighbor_labels = y_train_np[neighbor_indices]\n        \n        # Find unique labels and their counts\n        unique_labels, counts = np.unique(neighbor_labels, return_counts=True)\n        \n        # Identify the maximum count\n        max_count = counts.max()\n        \n        # Find all labels with the maximum count (handle ties)\n        candidates = unique_labels[counts == max_count]\n        \n        # Select the smallest label among the candidates\n        predicted_label = candidates.min()\n        \n        predictions.append(int(predicted_label))\n    \n    return predictions\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Compute the element-wise product of y and the log of y_pred with epsilon added\n    log_preds = np.log(y_pred + epsilon)\n    loss_matrix = y * log_preds\n    \n    # Sum all the elements and multiply by -1 to get the loss\n    loss = -np.sum(loss_matrix)\n    \n    # Round the loss to four decimal places\n    return round(float(loss), 4)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Tuple, List, Dict\n\ndef L_model_forward(X: np.ndarray, parameters: Dict[str, np.ndarray]) -> Tuple[List[List[float]], List]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    Tuple[List[List[float]], List]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list, and the caches for each layer.\n    \"\"\"\n    \n    def relu(Z: np.ndarray) -> np.ndarray:\n        \"\"\"Applies the ReLU activation function.\"\"\"\n        return np.maximum(0, Z)\n    \n    def sigmoid(Z: np.ndarray) -> np.ndarray:\n        \"\"\"Applies the sigmoid activation function.\"\"\"\n        return 1 / (1 + np.exp(-Z))\n    \n    A = X\n    caches = []\n    L = len(parameters) // 2  # Number of layers in the neural network\n    \n    for l in range(1, L + 1):\n        W = parameters[f\"W{l}\"]\n        b = parameters[f\"b{l}\"]\n        Z = np.dot(W, A) + b\n        if l != L:\n            A = relu(Z)\n        else:\n            A = sigmoid(Z)\n        cache = (A, W, b, Z)\n        caches.append(cache)\n    \n    AL = np.round(A, 4).tolist()\n    return (AL, caches)\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Clip A2 to prevent log(0)\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Ensure Y is the same shape as A2\n    Y = Y.reshape(A2_clipped.shape)\n    \n    # Number of samples\n    m = Y.shape[0]\n    \n    # Compute binary cross-entropy\n    cost = - (1 / m) * np.sum(\n        Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)\n    )\n    \n    # Round to six decimal places\n    return round(float(cost), 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.asarray(Q)\n    n = Q.size\n    if n == 0:\n        raise ValueError(\"Q must contain at least one action.\")\n    \n    # Identify the index of the first greedy action\n    greedy_idx = np.argmax(Q)\n    \n    # Initialize probabilities with epsilon/n\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    \n    # Adjust the probability of the greedy action\n    probabilities[greedy_idx] += 1 - epsilon\n    \n    # Scale probabilities to handle rounding\n    scaled_probs = probabilities * 10000\n    floor_scaled = np.floor(scaled_probs).astype(int)\n    residuals = scaled_probs - floor_scaled\n    \n    # Calculate the total after flooring and the difference needed\n    total = floor_scaled.sum()\n    difference = 10000 - total\n    \n    if difference > 0:\n        # Distribute the remaining difference to actions with highest residuals\n        indices_desc = np.argsort(-residuals)\n        floor_scaled[indices_desc[:difference]] += 1\n    elif difference < 0:\n        # Remove the excess from actions with lowest residuals\n        indices_asc = np.argsort(residuals)\n        floor_scaled[indices_asc[:abs(difference)]] -= 1\n    \n    # Convert back to probabilities by scaling down\n    final_probs = floor_scaled / 10000.0\n    return final_probs.tolist()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    # Transpose the predictions to iterate over samples\n    for sample_votes in zip(*predictions):\n        count = Counter(sample_votes)\n        max_votes = max(count.values())\n        # Get all labels with the maximum vote count\n        candidates = [label for label, cnt in count.items() if cnt == max_votes]\n        # Select the smallest label among the candidates\n        final_label = min(candidates)\n        final_predictions.append(final_label)\n    return final_predictions\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.asarray(z)\n    softplus_vals = np.logaddexp(0.0, z_array)\n    softplus_rounded = np.round(softplus_vals, 4)\n    \n    if np.isscalar(z):\n        return float(softplus_rounded)\n    else:\n        return softplus_rounded.tolist()\n```\n\n## Example Usage\n\n```python\n# Example with a NumPy array\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n\n# Example with a scalar\nprint(softplus(5))  # Output: 5.0067\n\n# Example with a Python list\nz_list = [-1000, 0, 3]\nprint(softplus(z_list))  # Output: [0.0, 0.6931, 3.0486]\n```\n\n## Explanation\n\n1. **Conversion to NumPy Array**:\n    ```python\n    z_array = np.asarray(z)\n    ```\n    This ensures that the input `z` is treated as a NumPy array, regardless of whether it's a scalar, list, or already an array.\n\n2. **Compute Softplus Using `np.logaddexp`**:\n    ```python\n    softplus_vals = np.logaddexp(0.0, z_array)\n    ```\n    The `np.logaddexp(a, b)` function computes `ln(e^a + e^b)` in a numerically stable way. Here, it effectively computes `ln(1 + e^z)` since `a` is `0.0`.\n\n3. **Rounding the Results**:\n    ```python\n    softplus_rounded = np.round(softplus_vals, 4)\n    ```\n    This rounds each element of the softplus result to 4 decimal places as required.\n\n4. **Handling Scalar vs. Array Inputs**:\n    ```python\n    if np.isscalar(z):\n        return float(softplus_rounded)\n    else:\n        return softplus_rounded.tolist()\n    ```\n    - If the original input `z` was a scalar (i.e., an individual `int` or `float`), the function returns a single `float`.\n    - If the input was a list or NumPy array, the function converts the NumPy array back to a pure Python list using the `tolist()` method before returning.\n\nThis implementation ensures numerical stability and adheres to the output formatting constraints specified in the task."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Helper function to retrieve a field from either a dictionary or an object\n    def get_field(obj, field):\n        if isinstance(obj, dict):\n            return obj.get(field, None)\n        else:\n            return getattr(obj, field, None)\n\n    # Retrieve the policy's estimates\n    ev_estimates = get_field(policy, 'ev_estimates')\n\n    # Check if ev_estimates is missing or empty\n    if not ev_estimates:\n        return np.nan\n\n    # Retrieve the true expected values from the bandit\n    arm_evs = get_field(bandit, 'arm_evs')\n\n    # If arm_evs is not provided, return NaN\n    if arm_evs is None:\n        return np.nan\n\n    # Ensure that ev_estimates is a dictionary\n    if not isinstance(ev_estimates, dict):\n        return np.nan\n\n    # Sort the arm indices to maintain consistent ordering\n    sorted_indices = sorted(ev_estimates.keys())\n\n    # Compute squared errors for each arm\n    squared_errors = []\n    for i in sorted_indices:\n        # Ensure the arm index is within the range of arm_evs\n        if i < 0 or i >= len(arm_evs):\n            return np.nan  # Invalid arm index\n        estimate = ev_estimates.get(i)\n        true_value = arm_evs[i]\n        if estimate is None:\n            return np.nan  # Missing estimate for an arm\n        squared_error = (estimate - true_value) ** 2\n        squared_errors.append(squared_error)\n\n    # Calculate the mean of the squared errors\n    mse_value = np.mean(squared_errors)\n\n    # Round the result to 4 decimal places\n    mse_rounded = round(mse_value, 4)\n\n    return mse_rounded\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build vocabulary from the corpus\n    vocab = set()\n    for sentence in corpus:\n        words = sentence.split()\n        vocab.update(words)\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n\n    # Step 2: Build n-gram counts from 1 to N\n    # Initialize a list of Counters for n-grams of size 1 to N\n    ngram_counts = [Counter() for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i + n])\n                ngram_counts[n - 1][ngram] += 1\n\n    # Step 3: Replace unseen words in target sequence with <UNK>\n    target_words = sequence.split()\n    target_words = [word if word in vocab else \"<UNK>\" for word in target_words]\n\n    # Step 4: If length < N, return 0.0\n    if len(target_words) < N:\n        return 0.0\n\n    # Step 5: Compute the log-probability\n    log_prob = 0.0\n    for i in range(len(target_words) - N + 1):\n        ngram = tuple(target_words[i:i + N])\n        context = ngram[:-1]\n        word = ngram[-1]\n\n        # Get count(context \u25e6 w_i)\n        ngram_count = ngram_counts[N - 1].get(ngram, 0)\n\n        if N > 1:\n            # Get count(context) from (N-1)-gram counts\n            context_count = ngram_counts[N - 2].get(context, 0)\n        else:\n            # For unigram, context_count is the total number of words\n            context_count = sum(ngram_counts[0].values())\n\n        # Calculate probability with additive smoothing\n        probability = (ngram_count + K) / (context_count + K * V)\n        log_prob += math.log(probability)\n\n    # Round to 4 decimals\n    return round(log_prob, 4)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n\n    # Initialize W and H with random values\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for iteration in range(max_iter):\n        # Update W\n        HHT = H @ H.T\n        reg_W = alpha * np.eye(K)\n        try:\n            inv_HHT = np.linalg.inv(HHT + reg_W)\n        except np.linalg.LinAlgError:\n            inv_HHT = np.linalg.pinv(HHT + reg_W)\n        W = X @ H.T @ inv_HHT\n\n        # Update H\n        WWT = W.T @ W\n        reg_H = alpha * np.eye(K)\n        try:\n            inv_WWT = np.linalg.inv(WWT + reg_H)\n        except np.linalg.LinAlgError:\n            inv_WWT = np.linalg.pinv(WWT + reg_H)\n        H = inv_WWT @ W.T @ X\n\n        # Compute the regularised loss\n        WH = W @ H\n        frob_norm = np.linalg.norm(X - WH, 'fro')**2\n        reg_norm = alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        loss = frob_norm + reg_norm\n\n        if loss < tol:\n            break\n\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    # Set random seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    \n    m, n = X.shape\n    if K <= 0:\n        raise ValueError(\"K must be a positive integer\")\n    if K > m:\n        raise ValueError(\"K cannot be greater than the number of samples\")\n    \n    # K-Means++ initialization\n    centroids = []\n    # Choose the first centroid randomly\n    first_centroid_idx = random.randint(0, m - 1)\n    centroids.append(X[first_centroid_idx])\n    \n    for _ in range(1, K):\n        # Compute squared distances to the nearest existing centroid\n        distances = np.min([np.linalg.norm(X - c, axis=1)**2 for c in centroids], axis=0)\n        total_distance = distances.sum()\n        if total_distance == 0:\n            # All points are identical, choose random\n            next_centroid_idx = random.randint(0, m -1)\n        else:\n            probabilities = distances / total_distance\n            next_centroid_idx = np.random.choice(m, p=probabilities)\n        centroids.append(X[next_centroid_idx])\n    \n    centroids = np.array(centroids)\n    \n    # Initialize assignments\n    assignments = np.zeros(m, dtype=int)\n    \n    for _ in range(max_iter):\n        # Assign each point to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        new_assignments = np.argmin(distances, axis=1)\n        \n        # Check for convergence\n        if np.array_equal(assignments, new_assignments):\n            break\n        assignments = new_assignments\n        \n        # Update centroids\n        for k in range(K):\n            assigned_points = X[assignments == k]\n            if len(assigned_points) > 0:\n                centroids[k] = assigned_points.mean(axis=0)\n            # else: keep the centroid unchanged\n    \n    # Round centroids to four decimal places\n    centroids = np.round(centroids, 4)\n    \n    # Sort centroids as per the requirements\n    centroids_sorted = sorted(centroids.tolist(), key=lambda c: (c[0], c))\n    \n    return centroids_sorted\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token IDs.\n    \n    Args:\n        text (str): The input text string to encode.\n        time_steps (int): The fixed length of the output list.\n        vocabulary (dict[str, int]): A dictionary mapping characters to integer IDs.\n    \n    Returns:\n        list[int]: A list of integer IDs representing the encoded characters.\n                   The list has a fixed length of `time_steps`, padded with\n                   0s or truncated as necessary.\n    \"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n        if len(encoded) == time_steps:\n            break\n    # Pad with 0s if the encoded list is shorter than time_steps\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer token IDs back into a string.\n    \n    Padding tokens (0) are ignored during decoding.\n    \n    Args:\n        indices (list[int] or np.ndarray): The list or array of integer IDs to decode.\n        inverse_vocab (dict[int, str]): A dictionary mapping integer IDs back to characters.\n    \n    Returns:\n        str: The decoded string, excluding any padding tokens.\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx != 0:\n            char = inverse_vocab.get(idx, '')\n            chars.append(char)\n    return ''.join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes input text, uses the model to predict, and decodes the prediction.\n    \n    Steps:\n    1. Encode the raw text into integer IDs using `string_to_int`.\n    2. Create a NumPy array with shape (1, TIME_STEPS) to represent the batch.\n    3. Pass the encoded batch to `model.predict`.\n    4. Apply `argmax` over the last axis to get predicted IDs for each time step.\n    5. Decode the predicted IDs back into a string using `int_to_string`.\n    \n    Args:\n        model: The neural network model with a `predict` method.\n        input_vocabulary (dict[str, int]): Vocabulary for encoding input text.\n        inv_output_vocabulary (dict[int, str]): Inverse vocabulary for decoding output IDs.\n        text (str): The raw input text to process.\n    \n    Returns:\n        str: The decoded prediction string from the model.\n    \"\"\"\n    # Step 1: Encode the input text\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Step 2: Create a batch with a single sample\n    input_batch = np.array([encoded])\n    \n    # Step 3: Get predictions from the model\n    predictions = model.predict(input_batch)\n    \n    # Step 4: Apply argmax to obtain predicted IDs for each time step\n    # Assuming predictions shape is (batch_size, TIME_STEPS, vocab_size)\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    \n    # Step 5: Decode the predicted IDs back to a string\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_string\n```\n\n## Explanation\n\n1. **`string_to_int` Function:**\n   - Iterates over each character in the input `text`.\n   - Encodes each character using the provided `vocabulary`. If a character isn't found, it defaults to `0`.\n   - Ensures the resulting list has a fixed length of `TIME_STEPS` by truncating excess characters or padding with `0`s.\n\n2. **`int_to_string` Function:**\n   - Iterates over each integer ID in `indices`.\n   - Ignores any padding tokens (`0`).\n   - Converts each ID back to its corresponding character using `inverse_vocab`.\n   - Joins the characters to form the final decoded string.\n\n3. **`run_example` Function:**\n   - **Encoding:** Uses `string_to_int` to convert the raw `text` into a fixed-length list of integer IDs.\n   - **Batch Preparation:** Wraps the encoded list in a NumPy array to create a batch of size 1 with shape `(1, TIME_STEPS)`.\n   - **Prediction:** Passes the batch to `model.predict` to obtain predictions. It's assumed that `model.predict` returns a NumPy array of shape `(1, TIME_STEPS, vocab_size)`.\n   - **Decoding:** Applies `argmax` along the last axis to get the most probable ID for each time step, resulting in a list of predicted IDs. These IDs are then decoded back into a string using `int_to_string`.\n   - **Return:** Outputs the final decoded string, excluding any padding tokens.\n\n**Note:** This implementation assumes that the `model` passed to `run_example` has a `predict` method compatible with the input shape and returns predictions in a suitable format for `argmax` to be applied as described."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function uses the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Use the provided examples or fallback to the global EXAMPLES\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise ValueError(\"No examples provided and global EXAMPLES is not defined.\")\n\n    predictions = []\n    for example in examples:\n        # Run the example to get a list of output characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate characters to form the predicted string\n        predicted = ''.join(output_chars)\n        # Print the input and output pair\n        print(f\"\"\"```\ninput: {example}\noutput: {predicted}\n```\"\"\")\n        # Collect the prediction\n        predictions.append(predicted)\n    \n    return predictions\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    epsilon = 1e-20  # Small constant to avoid log(0)\n\n    # Ensure y and w are flattened\n    y = y.flatten()\n    w = w.flatten()\n\n    # Compute z = X.dot(w)\n    z = X @ w\n\n    # Compute the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n\n    # Replace any p that are exactly 0 or 1 with epsilon or 1 - epsilon\n    p = np.clip(p, epsilon, 1 - epsilon)\n\n    m = X.shape[0]\n\n    # Compute the binary cross-entropy loss\n    loss = - (1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n\n    # Compute the gradient\n    gradient = (1 / m) * (X.T @ (p - y))\n\n    # Round the loss to 4 decimal places\n    loss = round(loss, 4)\n\n    # Round the gradient to 4 decimal places and convert to a nested list\n    gradient = np.round(gradient, 4).reshape(-1, 1).tolist()\n\n    return loss, gradient\n```"}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n\n    # Ensure at least one classifier\n    if n_clf < 1:\n        n_clf = 1\n\n    # Initialize weights uniformly\n    D = np.full(m, 1 / m)\n\n    # Lists to store the parameters of each decision stump and their alpha values\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_polarity = 1\n        min_error = np.inf\n\n        # Iterate over all features to find the best decision stump\n        for feature in range(n):\n            X_feature = X_train[:, feature]\n            unique_vals = np.unique(X_feature)\n\n            # If there's only one unique value, use it as the threshold\n            if len(unique_vals) == 1:\n                thresholds = unique_vals\n            else:\n                # Compute midpoints between consecutive unique values\n                thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n\n            # Try every threshold with both polarities\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    if polarity == 1:\n                        predictions = np.where(X_feature <= threshold, 1, -1)\n                    else:\n                        predictions = np.where(X_feature > threshold, 1, -1)\n\n                    # Calculate weighted error\n                    error = np.sum(D * (predictions != y_train))\n\n                    # Update the best stump if current error is lower\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Avoid division by zero and numerical stability\n        epsilon = np.clip(min_error, 1e-10, 1 - 1e-10)\n\n        # Compute alpha (stump weight)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n\n        # Store the best stump parameters and its alpha\n        stumps.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n\n        # Make predictions using the best stump\n        best_X_feature = X_train[:, best_feature]\n        if best_polarity == 1:\n            predictions = np.where(best_X_feature <= best_threshold, 1, -1)\n        else:\n            predictions = np.where(best_X_feature > best_threshold, 1, -1)\n\n        # Update weights: increase for misclassified samples, decrease for correctly classified\n        D = D * np.exp(-alpha * y_train * predictions)\n\n        # Normalize weights to sum to 1\n        D /= np.sum(D)\n\n    # Aggregate predictions from all stumps for the test set\n    agg_predictions = np.zeros(X_test.shape[0])\n    for (feature, threshold, polarity), alpha in zip(stumps, alphas):\n        X_feature = X_test[:, feature]\n        if polarity == 1:\n            predictions = np.where(X_feature <= threshold, 1, -1)\n        else:\n            predictions = np.where(X_feature > threshold, 1, -1)\n        agg_predictions += alpha * predictions\n\n    # Determine the final prediction by taking the sign of the aggregated sum\n    final_predictions = np.sign(agg_predictions)\n\n    # Replace zero predictions with 1 as per output constraints\n    final_predictions[final_predictions == 0] = 1\n\n    return final_predictions.astype(int).tolist()\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    \n    classes = np.unique(y)\n    n_features = X.shape[1]\n    overall_mean = np.mean(X, axis=0)\n    \n    # Initialize S_W and S_B\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    \n    for cls in classes:\n        X_c = X[y == cls]\n        N_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        # Within-class scatter\n        scatter_within = (X_c - mean_c).T @ (X_c - mean_c)\n        S_W += scatter_within\n        # Between-class scatter\n        mean_diff = (mean_c - overall_mean).reshape(n_features, 1)\n        scatter_between = N_c * (mean_diff @ mean_diff.T)\n        S_B += scatter_between\n    \n    # Compute A = pinv(S_W) * S_B\n    S_W_pinv = np.linalg.pinv(S_W)\n    A = S_W_pinv @ S_B\n    \n    # Eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigenpairs in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    \n    # Deterministic sign\n    for i in range(eigenvectors_sorted.shape[1]):\n        vec = eigenvectors_sorted[:, i]\n        non_zero_indices = np.where(vec != 0)[0]\n        if non_zero_indices.size > 0:\n            first_non_zero = non_zero_indices[0]\n            if vec[first_non_zero] < 0:\n                eigenvectors_sorted[:, i] = -vec\n    \n    # Select the top n_components eigenvectors\n    W = eigenvectors_sorted[:, :n_components]\n    \n    # Project the data\n    X_projected = X @ W\n    X_projected = np.round(X_projected, 4)\n    \n    return X_projected.tolist()\n```"}
{"task_id": 140, "completion_id": 0, "completion": "To solve the \"Escape from Fire Maze\" problem, we'll employ a two-phase Breadth-First Search (BFS) approach:\n\n1. **Fire Spread Simulation:**\n   - **Objective:** Determine the earliest time each cell in the maze catches fire.\n   - **Method:** \n     - Initialize a `fire_time` grid where each cell holds the time it catches fire. Cells initially on fire (`'F'`) have `fire_time` of `0`.\n     - Use BFS to propagate the fire to adjacent cells, updating their `fire_time` accordingly. Walls (`'#'`) block the spread.\n\n2. **Agent Movement Simulation:**\n   - **Objective:** Find the shortest time for the agent to reach the goal without entering a burning cell.\n   - **Method:**\n     - Check if the start `(0,0)` or goal `(n-1,n-1)` cells are initially on fire. If so, return `-1`.\n     - If the maze is `1x1` and the cell is free (`'.'`), return `0`.\n     - Initialize a `visited` grid to keep track of the earliest time the agent can reach each cell.\n     - Use BFS to explore possible moves for the agent, ensuring that the agent arrives before the fire does.\n\nIf the agent reaches the goal, return the time taken. If it's impossible, return `-1`.\n\nHere's the complete implementation:\n\n```python\nfrom collections import deque\nimport math\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1  # Empty grid\n\n    # Directions: up, down, left, right\n    directions = [(-1,0), (1,0), (0,-1), (0,1)]\n\n    # Initialize fire_time grid with infinity\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n\n    # Initialize fire queue\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j, 0))\n            elif grid[i][j] == '#':\n                fire_time[i][j] = -1  # Wall\n\n    # BFS for fire spread\n    while fire_queue:\n        x, y, t = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            nt = t + 1\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > nt:\n                    fire_time[nx][ny] = nt\n                    fire_queue.append((nx, ny, nt))\n\n    # Check start and goal\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n\n    # Initialize agent BFS\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))  # x, y, time\n    visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    visited[0][0] = 0\n\n    if fire_time[0][0] <= 0:\n        return -1  # Starting cell is on fire\n\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            nt = t + 1\n\n            if 0 <= nx < n and 0 <= ny < n:\n                # If it's the goal\n                if nx == n-1 and ny == n-1:\n                    # Check if the goal is safe to enter\n                    if fire_time[nx][ny] > nt:\n                        return nt\n\n                # Check if the cell is free and not on fire when arriving\n                if grid[nx][ny] == '.' and fire_time[nx][ny] > nt:\n                    if visited[nx][ny] > nt:\n                        visited[nx][ny] = nt\n                        agent_queue.append((nx, ny, nt))\n\n    return -1\n```"}
{"task_id": 141, "completion_id": 0, "completion": "Certainly! Below is the implementation of the **k-Nearest Neighbors (k-NN) classifier** as per your specifications:\n\n```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    Predict the labels for the test set using the k-Nearest Neighbors algorithm.\n\n    Parameters:\n    - X_train: Training data of shape (n_train, n_features).\n    - y_train: Training labels of shape (n_train,).\n    - X_test: Test data of shape (n_test, n_features).\n    - k: Number of nearest neighbors to consider.\n    - metric: Distance metric to use ('euclidean', 'manhattan', 'cosine').\n\n    Returns:\n    - Predicted labels for the test data as a 1-D NumPy array of shape (n_test,).\n    \"\"\"\n    # Validate k\n    n_train = X_train.shape[0]\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    if k > n_train:\n        raise ValueError(f\"k cannot be greater than the number of training samples ({n_train}).\")\n\n    # Define distance functions\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n    \n    def cosine_distance(a, b):\n        numerator = np.dot(X_train, b)\n        denominator = np.linalg.norm(X_train, axis=1) * np.linalg.norm(b)\n        # To handle division by zero\n        denominator = np.where(denominator == 0, 1e-10, denominator)\n        cosine_similarity = numerator / denominator\n        return 1 - cosine_similarity\n\n    # Select distance metric\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        # Fallback to Euclidean if unknown metric\n        distance_func = euclidean_distance\n\n    # Initialize list to store predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for i in range(X_test.shape[0]):\n        test_sample = X_test[i]\n        distances = distance_func(test_sample, X_train)  # Compute distances to all training samples\n\n        # Get the indices of the k smallest distances\n        neighbor_indices = np.argsort(distances)[:k]\n        neighbor_labels = y_train[neighbor_indices]\n\n        # Count the occurrences of each label\n        labels, counts = np.unique(neighbor_labels, return_counts=True)\n        \n        # Find the label(s) with the maximum count\n        max_count = np.max(counts)\n        candidates = labels[counts == max_count]\n        \n        # In case of a tie, select the smallest label\n        predicted_label = np.min(candidates)\n        predictions.append(predicted_label)\n\n    return np.array(predictions)\n```\n\n### **Explanation of the Implementation:**\n\n1. **Validation of `k`:**\n   - Ensures that `k` is a positive integer and does not exceed the number of training samples.\n\n2. **Distance Functions:**\n   - **Euclidean Distance:** Calculates the \u2113\u2082 distance between the test sample and all training samples.\n   - **Manhattan Distance:** Calculates the \u2113\u2081 distance between the test sample and all training samples.\n   - **Cosine Distance:** Calculates the cosine distance (1 - cosine similarity) between the test sample and all training samples. It includes a small epsilon (`1e-10`) to handle cases where the denominator might be zero.\n\n3. **Selecting the Distance Metric:**\n   - Chooses the appropriate distance function based on the `metric` parameter.\n   - Defaults to Euclidean distance if an unknown metric is provided.\n\n4. **Prediction Process:**\n   - Iterates over each test sample.\n   - Computes distances to all training samples using the selected metric.\n   - Identifies the `k` nearest neighbors by selecting the indices with the smallest distances.\n   - Retrieves the labels of these neighbors.\n   - Determines the most common label among the neighbors. In the event of a tie, it selects the smallest label value as specified.\n\n5. **Returning the Results:**\n   - Collects all predicted labels into a list and converts it into a 1-D NumPy array before returning.\n\n### **Usage Example:**\n\n```python\n# Sample training data\nX_train = np.array([[1, 2],\n                    [2, 3],\n                    [3, 4],\n                    [4, 5],\n                    [5, 6]])\ny_train = np.array([0, 1, 1, 0, 0])\n\n# Sample test data\nX_test = np.array([[1, 2],\n                   [5, 5]])\n\n# Predict using k=3 and Euclidean distance\npredictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\nprint(predictions)  # Output will be a NumPy array of predicted labels\n```\n\nThis implementation ensures efficiency by leveraging NumPy's optimized operations and handles potential edge cases, such as ties in voting and unknown distance metrics."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    # Ensure k does not exceed the number of training samples\n    n_train = X.shape[0]\n    k = min(k, n_train)\n    \n    # Initialize distance matrix\n    if metric == 'euclidean':\n        # Efficient computation of Euclidean distance using (a - b)^2 = a^2 + b^2 - 2ab\n        X_squared = np.sum(X**2, axis=1)\n        X_test_squared = np.sum(X_test**2, axis=1).reshape(-1, 1)\n        distances = np.sqrt(X_test_squared + X_squared - 2 * np.dot(X_test, X.T))\n    elif metric == 'manhattan':\n        # Compute Manhattan distance using broadcasting\n        # Shape of distances will be (m_samples, n_train)\n        distances = np.sum(np.abs(X_test[:, np.newaxis] - X), axis=2)\n    elif metric == 'cosine':\n        epsilon = 1e-12\n        # Compute dot product between test and train samples\n        dot_product = np.dot(X_test, X.T)\n        # Compute norms\n        X_norm = np.linalg.norm(X, axis=1)\n        X_test_norm = np.linalg.norm(X_test, axis=1).reshape(-1, 1)\n        # Avoid division by zero\n        denom = X_test_norm * X_norm + epsilon\n        cosine_similarity = dot_product / denom\n        distances = 1 - cosine_similarity\n    else:\n        raise ValueError(f\"Unsupported metric '{metric}'. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n\n    # Find the indices of the k nearest neighbors for each test sample\n    # argsort along axis=1 and take the first k indices\n    nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Retrieve the labels of the nearest neighbors\n    nearest_labels = y[nearest_indices]  # Shape: (m_samples, k)\n    \n    # Prepare to store predictions\n    predictions = []\n    \n    # Iterate over each set of neighbor labels to determine the majority vote\n    for labels in nearest_labels:\n        # Count the occurrences of each label\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        # Find the labels with the maximum count\n        max_count = np.max(counts)\n        candidates = unique_labels[counts == max_count]\n        # Select the smallest label in case of a tie\n        predicted_label = np.min(candidates)\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n## Explanation\n\nThe `knn_predict` function implements the k-Nearest Neighbours (k-NN) classification algorithm from scratch using NumPy. Here's a step-by-step breakdown of the implementation:\n\n1. **Handling `k` Value**:\n    - The function first ensures that the neighborhood size `k` does not exceed the number of training samples. If `k` is larger, it defaults to using all available training samples.\n\n2. **Distance Calculation**:\n    - **Euclidean Distance**:\n        - Utilizes the mathematical identity \\((a - b)^2 = a^2 + b^2 - 2ab\\) for efficient computation.\n        - Calculates the squared sums of training and test samples and then computes the distance matrix.\n    - **Manhattan Distance**:\n        - Computes the sum of absolute differences between test and training samples using broadcasting.\n    - **Cosine Distance**:\n        - Calculates the cosine similarity and then converts it to cosine distance.\n        - Adds a small epsilon (`1e-12`) to the denominator to avoid division by zero.\n    - **Error Handling**:\n        - Raises a `ValueError` if an unsupported metric is provided.\n\n3. **Identifying Nearest Neighbors**:\n    - For each test sample, the function identifies the indices of the `k` smallest distances (i.e., the nearest neighbors) using `np.argsort`.\n\n4. **Majority Voting**:\n    - Retrieves the labels of the nearest neighbors.\n    - For each set of neighbor labels:\n        - Counts the occurrences of each label using `np.unique` with `return_counts=True`.\n        - Identifies the label(s) with the highest count.\n        - In case of a tie (multiple labels with the same maximum count), selects the smallest label as the prediction.\n\n5. **Returning Predictions**:\n    - The function compiles all predicted labels into a Python list and returns it.\n\n## Example Usage\n\nHere's how you can use the `knn_predict` function with a simple dataset:\n\n```python\nimport numpy as np\n\n# Training data\nX_train = np.array([\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [6, 7],\n    [7, 8],\n    [8, 9]\n])\ny_train = np.array([0, 0, 0, 1, 1, 1])\n\n# Test data\nX_test = np.array([\n    [1, 2],\n    [5, 5],\n    [8, 9]\n])\n\n# Predict using Euclidean distance\npredictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\nprint(predictions)  # Output: [0, 0, 1]\n\n# Predict using Manhattan distance\npredictions = knn_predict(X_train, y_train, X_test, k=3, metric='manhattan')\nprint(predictions)  # Output: [0, 0, 1]\n\n# Predict using Cosine distance\npredictions = knn_predict(X_train, y_train, X_test, k=3, metric='cosine')\nprint(predictions)  # Output: [0, 0, 1]\n```\n\n## Notes\n\n- **Performance Considerations**:\n    - The current implementation is efficient for moderate-sized datasets.\n    - For very large datasets, further optimizations or the use of advanced data structures (like KD-Trees) may be necessary, but such implementations are beyond the scope of this function.\n\n- **Data Validity**:\n    - Ensure that both training and test datasets are properly preprocessed (e.g., normalized if using cosine distance) to achieve optimal performance.\n\n- **Label Types**:\n    - The function assumes that labels are numeric. If labels are non-numeric, additional handling may be required to implement the tie-breaking rule based on the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array if it's a list\n    state = np.array(state)\n    \n    # First affine transformation: state @ W1 + b1\n    hidden1 = state @ weights['W1'] + weights['b1']\n    \n    # ReLU activation\n    hidden1 = np.maximum(0, hidden1)\n    \n    # Second affine transformation: hidden1 @ W2 + b2\n    hidden2 = hidden1 @ weights['W2'] + weights['b2']\n    \n    # ReLU activation\n    hidden2 = np.maximum(0, hidden2)\n    \n    # Third affine transformation: hidden2 @ W3 + b3\n    output = hidden2 @ weights['W3'] + weights['b3']\n    \n    # tanh activation\n    action = np.tanh(output)\n    \n    # Round each component to four decimal places and convert to list\n    action = np.round(action, 4).tolist()\n    \n    return action\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n\n    # Step 1: Add intercept column\n    if fit_intercept:\n        intercept_column = np.ones((m, 1))\n    else:\n        intercept_column = np.zeros((m, 1))\n    X_new = np.hstack((intercept_column, X))  # Shape: (m, n+1)\n\n    # Initialize weights (including intercept)\n    w = np.zeros(n + 1)\n\n    # Precompute sum of squares for each feature (excluding intercept)\n    X_squared = np.sum(X_new[:, 1:] ** 2, axis=0)\n\n    for _ in range(max_iters):\n        # Step 2: Update intercept if fitted\n        if fit_intercept:\n            residual = y - np.dot(X_new, w)\n            w[0] = np.mean(residual)\n\n        # Step 3: Coordinate descent for each weight (excluding intercept)\n        for j in range(1, n + 1):\n            # Temporarily set w[j] to zero\n            old_wj = w[j]\n            w[j] = 0\n\n            # Compute partial residual\n            r_j = y - np.dot(X_new, w)\n\n            # Compute the dot product <x_j, r_j>\n            a_j = np.dot(X_new[:, j], r_j)\n\n            # Apply soft-thresholding\n            if a_j > lambda_param * m:\n                w[j] = (a_j - lambda_param * m) / X_squared[j - 1]\n            elif a_j < -lambda_param * m:\n                w[j] = (a_j + lambda_param * m) / X_squared[j - 1]\n            else:\n                w[j] = 0.0\n\n    # Extract weights and bias\n    if fit_intercept:\n        bias = round(w[0], 4)\n        weights = [round(weight, 4) for weight in w[1:]]\n    else:\n        bias = 0.0\n        weights = [round(weight, 4) for weight in w[1:]]\n\n    return (weights, bias)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n    \n    if x_arr.size != y_arr.size:\n        return -1\n    \n    if x_arr.size == 0:\n        return 0.0  # Define distance as 0 for empty vectors\n    \n    sum_diff = np.sum(x_arr != y_arr)\n    distance = sum_diff / x_arr.size\n    return round(distance, 4)\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Validate N\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # Special case for N=1\n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = (a0 \n             - a1 * np.cos(2 * np.pi * n / (N - 1)) \n             + a2 * np.cos(4 * np.pi * n / (N - 1)) \n             - a3 * np.cos(6 * np.pi * n / (N - 1)))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        a = coefficients\n        w = np.zeros(N)\n        for k, a_k in enumerate(a):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    def sigmoid(z):\n        # To prevent overflow, clip the input values\n        z = np.clip(z, -500, 500)\n        return 1 / (1 + np.exp(-z))\n    \n    # Convert lists to NumPy arrays\n    X_train = np.array(X_train, dtype=np.float64)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test, dtype=np.float64)\n    \n    # Get unique labels\n    unique_labels = np.unique(y_train)\n    if unique_labels.shape[0] != 2:\n        if unique_labels.shape[0] == 1:\n            # All labels are identical, return that label for all test samples\n            unique_label = unique_labels[0]\n            return [unique_label] * len(X_test)\n        else:\n            raise ValueError(\"y_train must contain exactly two distinct labels.\")\n    \n    # Map original labels to binary labels {0, 1}\n    label0, label1 = unique_labels[0], unique_labels[1]\n    label_to_binary = {label0: 0, label1: 1}\n    binary_to_label = {0: label0, 1: label1}\n    y_train_binary = np.vectorize(label_to_binary.get)(y_train)\n    \n    # Add intercept term (bias) to X_train and X_test\n    intercept_train = np.ones((X_train.shape[0], 1))\n    X_train = np.hstack((intercept_train, X_train))\n    \n    intercept_test = np.ones((X_test.shape[0], 1))\n    X_test = np.hstack((intercept_test, X_test))\n    \n    # Initialize weights (including bias) to zeros\n    weights = np.zeros(X_train.shape[1])\n    \n    n_samples = X_train.shape[0]\n    \n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(n_samples)\n        np.random.shuffle(indices)\n        X_shuffled = X_train[indices]\n        y_shuffled = y_train_binary[indices]\n        \n        # Mini-batch Gradient Descent\n        for start_idx in range(0, n_samples, batch_size):\n            end_idx = start_idx + batch_size\n            X_batch = X_shuffled[start_idx:end_idx]\n            y_batch = y_shuffled[start_idx:end_idx]\n            \n            # Compute predictions\n            z = np.dot(X_batch, weights)\n            predictions = sigmoid(z)\n            \n            # Compute the gradient\n            errors = predictions - y_batch\n            gradient = np.dot(X_batch.T, errors) / X_batch.shape[0]\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # After training, make predictions on X_test\n    z_test = np.dot(X_test, weights)\n    probabilities = sigmoid(z_test)\n    binary_predictions = (probabilities >= 0.5).astype(int)\n    \n    # Map binary predictions back to original labels\n    final_predictions = [binary_to_label[pred] for pred in binary_predictions]\n    \n    return final_predictions\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n\n    # Convert input lists to numpy arrays for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    n_samples, n_features = X_train_np.shape\n\n    # Map labels from {0, 1} to {-1, 1}\n    y_train_mapped = np.where(y_train_np == 0, -1, 1)\n\n    # Initialize sample weights uniformly\n    weights = np.full(n_samples, 1 / n_samples)\n\n    # List to store the ensemble of weak learners and their corresponding alpha values\n    stumps = []\n    alphas = []\n\n    for estimator in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {'feature_index': None, 'threshold': None, 'polarity': None}\n\n        # Iterate over each feature to find the best threshold and polarity\n        for feature in range(n_features):\n            X_feature = X_train_np[:, feature]\n            unique_values = np.unique(X_feature)\n\n            for threshold in unique_values:\n                for polarity in [1, -1]:\n                    # Make predictions based on polarity and threshold\n                    if polarity == 1:\n                        predictions = np.where(X_feature < threshold, 1, -1)\n                    else:\n                        predictions = np.where(X_feature >= threshold, 1, -1)\n\n                    # Calculate weighted error\n                    misclassified = predictions != y_train_mapped\n                    error = np.sum(weights * misclassified)\n\n                    # Check if this stump is better than the current best\n                    if error < min_error:\n                        min_error = error\n                        best_stump['feature_index'] = feature\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n                    elif error == min_error:\n                        # Tie-breaker conditions\n                        if feature < best_stump['feature_index']:\n                            best_stump['feature_index'] = feature\n                            best_stump['threshold'] = threshold\n                            best_stump['polarity'] = polarity\n                        elif feature == best_stump['feature_index']:\n                            if threshold < best_stump['threshold']:\n                                best_stump['threshold'] = threshold\n                                best_stump['polarity'] = polarity\n                            elif threshold == best_stump['threshold']:\n                                if polarity > best_stump['polarity']:\n                                    best_stump['polarity'] = polarity\n\n        # If no error, stop early\n        if min_error == 0:\n            alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n            alphas.append(alpha)\n            stumps.append(best_stump)\n            break\n\n        # Compute alpha\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Make predictions with the best stump\n        feature = best_stump['feature_index']\n        threshold = best_stump['threshold']\n        polarity = best_stump['polarity']\n\n        if polarity == 1:\n            predictions = np.where(X_train_np[:, feature] < threshold, 1, -1)\n        else:\n            predictions = np.where(X_train_np[:, feature] >= threshold, 1, -1)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train_mapped * predictions)\n        weights /= np.sum(weights)  # Normalize\n\n    # Initialize array to store the final predictions\n    final_predictions = np.zeros(X_test_np.shape[0])\n\n    # Aggregate the predictions from all stumps\n    for alpha, stump in zip(alphas, stumps):\n        feature = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n\n        if polarity == 1:\n            predictions = np.where(X_test_np[:, feature] < threshold, 1, -1)\n        else:\n            predictions = np.where(X_test_np[:, feature] >= threshold, 1, -1)\n\n        final_predictions += alpha * predictions\n\n    # Convert aggregated predictions to class labels {0, 1}\n    y_pred = np.where(final_predictions >= 0, 1, 0)\n\n    return y_pred.tolist()\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input arguments\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # PSO Hyperparameters\n    w = 0.5    # Inertia weight\n    c1 = 1.5   # Cognitive weight\n    c2 = 1.5   # Social weight\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # Initialize particle positions uniformly in [-1, 1]\n    positions = rng.uniform(-1, 1, size=(num_particles, n_dims))\n\n    # Initialize velocities to zero\n    velocities = np.zeros_like(positions)\n\n    # Initialize personal best positions and their corresponding scores\n    p_best = positions.copy()\n    p_best_values = np.sum(positions**2, axis=1)\n\n    # Initialize global best position and its score\n    min_index = np.argmin(p_best_values)\n    g_best = p_best[min_index].copy()\n    g_best_value = p_best_values[min_index]\n\n    # Perform PSO iterations\n    for _ in range(num_iterations):\n        # Generate random coefficients\n        r1 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        r2 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        \n        # Update velocities\n        cognitive_component = c1 * r1 * (p_best - positions)\n        social_component = c2 * r2 * (g_best - positions)\n        velocities = w * velocities + cognitive_component + social_component\n        \n        # Update positions\n        positions = positions + velocities\n        positions = np.clip(positions, -1, 1)\n        \n        # Evaluate the Sphere function for all particles\n        current_values = np.sum(positions**2, axis=1)\n        \n        # Update personal bests where current positions are better\n        better_mask = current_values < p_best_values\n        p_best[better_mask] = positions[better_mask]\n        p_best_values[better_mask] = current_values[better_mask]\n        \n        # Update global best if a new minimum is found\n        current_min_index = np.argmin(p_best_values)\n        current_min_value = p_best_values[current_min_index]\n        if current_min_value < g_best_value:\n            g_best_value = current_min_value\n            g_best = p_best[current_min_index].copy()\n\n    # Return the best value rounded to four decimals\n    return round(g_best_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Convert lists to numpy arrays for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    \n    n_train = X_train_np.shape[0]\n    \n    # Determine the number of neighbors to use\n    if k <= 0 or k > n_train:\n        k_eff = n_train\n    else:\n        k_eff = k\n    \n    predictions = []\n    \n    for test_point in X_test_np:\n        # Compute Euclidean distances\n        distances = np.linalg.norm(X_train_np - test_point, axis=1)\n        \n        # Get indices of the k nearest neighbors\n        neighbor_indices = np.argsort(distances)[:k_eff]\n        neighbor_labels = y_train_np[neighbor_indices]\n        \n        if task == \"classification\":\n            # Count occurrences of each label\n            label_counts = Counter(neighbor_labels)\n            # Find the maximum count\n            max_count = max(label_counts.values())\n            # Extract labels with the maximum count\n            candidates = [label for label, count in label_counts.items() if count == max_count]\n            # Select the smallest label based on Python ordering\n            prediction = min(candidates)\n            predictions.append(prediction)\n        \n        elif task == \"regression\":\n            # Compute the mean and round to 4 decimal places\n            mean_value = np.mean(neighbor_labels)\n            mean_rounded = round(mean_value + 1e-8, 4)  # Adding a small epsilon to handle floating point precision\n            predictions.append(mean_rounded)\n        \n        else:\n            raise ValueError(\"Invalid task type. Choose 'classification' or 'regression'.\")\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Conversion to NumPy Arrays**:\n    - The input lists `X_train`, `y_train`, and `X_test` are converted to NumPy arrays for efficient numerical computations.\n\n2. **Determining Effective `k`**:\n    - If `k` is less than or equal to 0 or greater than the number of training samples (`n_train`), it is set to use all training samples.\n\n3. **Processing Each Test Sample**:\n    - For each test point in `X_test`:\n        - **Distance Calculation**: The Euclidean distance between the test point and all training points is computed using `np.linalg.norm`.\n        - **Neighbor Selection**: The indices of the `k_eff` smallest distances are identified using `np.argsort`.\n        - **Label Extraction**: Corresponding labels (`neighbor_labels`) of these nearest neighbors are retrieved.\n\n4. **Classification Task**:\n    - **Counting Labels**: The `Counter` class counts the frequency of each label among the nearest neighbors.\n    - **Handling Ties**: If multiple labels have the same highest frequency, `min(candidates)` ensures the smallest label is selected based on Python's standard ordering.\n    - The selected label is appended to the `predictions` list.\n\n5. **Regression Task**:\n    - **Averaging**: The mean of the neighbor labels is computed using `np.mean`.\n    - **Rounding**: The result is rounded to four decimal places. A small epsilon (`1e-8`) is added before rounding to mitigate floating-point precision issues.\n    - The rounded mean is appended to the `predictions` list.\n\n6. **Error Handling**:\n    - If an invalid `task` string is provided, the function raises a `ValueError`.\n\n7. **Return Statement**:\n    - The function returns the `predictions` list, which contains the predicted labels or values for each test sample in the order they were provided.\n\n### Usage Example:\n\n```python\n# Example usage for classification\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny_train = ['A', 'A', 'B', 'B']\nX_test = [[1.5, 2.5], [3.5, 4.5]]\nk = 2\ntask = \"classification\"\n\nprint(knn_predict(X_train, y_train, X_test, k, task))\n# Output: ['A', 'B']\n\n# Example usage for regression\ny_train_reg = [10.0, 20.0, 30.0, 40.0]\ntask = \"regression\"\n\nprint(knn_predict(X_train, y_train_reg, X_test, k, task))\n# Output: [15.0, 35.0]\n```\n\nThis implementation ensures that all specified rules and constraints are adhered to, including handling edge cases for `k`, managing ties in classification, and precise rounding in regression."}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Optional, Tuple, List\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    \n    class TreeNode:\n        def __init__(\n            self,\n            feature_index: Optional[int] = None,\n            threshold: Optional[float] = None,\n            left: Optional['TreeNode'] = None,\n            right: Optional['TreeNode'] = None,\n            value: Optional[int] = None\n        ):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    def gini(y: np.ndarray) -> float:\n        \"\"\"Calculate Gini impurity for a set of labels.\"\"\"\n        if len(y) == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / len(y)\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def majority_class(y: np.ndarray) -> int:\n        \"\"\"Return the majority class in y. In case of tie, return the smallest class.\"\"\"\n        counts = np.bincount(y)\n        max_count = np.max(counts)\n        majority_classes = np.where(counts == max_count)[0]\n        return int(majority_classes.min())\n\n    def best_split(X: np.ndarray, y: np.ndarray) -> Optional[Tuple[int, float, float]]:\n        \"\"\"Find the best split for the current node.\"\"\"\n        n_samples, n_features = X.shape\n        if n_samples <= 1:\n            return None\n\n        parent_gini = gini(y)\n        best_gain = 0.0\n        best_feature = None\n        best_threshold = None\n\n        for feature in range(n_features):\n            X_feature = X[:, feature]\n            sorted_indices = np.argsort(X_feature)\n            X_sorted = X_feature[sorted_indices]\n            y_sorted = y[sorted_indices]\n\n            # Find potential split points (midpoints between unique consecutive values)\n            unique_values = np.unique(X_sorted)\n            if len(unique_values) == 1:\n                continue  # No split possible on this feature\n\n            potential_thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n            for threshold in potential_thresholds:\n                left_mask = X_sorted <= threshold\n                right_mask = X_sorted > threshold\n\n                y_left = y_sorted[left_mask]\n                y_right = y_sorted[right_mask]\n\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue  # Skip invalid splits\n\n                gini_left = gini(y_left)\n                gini_right = gini(y_right)\n                # Weighted average of child Gini impurities\n                weighted_gini = (len(y_left) / n_samples) * gini_left + \\\n                                (len(y_right) / n_samples) * gini_right\n                gain = parent_gini - weighted_gini\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n\n        if best_gain > 0:\n            return best_feature, best_threshold, best_gain\n        else:\n            return None\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int = 0) -> TreeNode:\n        \"\"\"Recursively build the decision tree.\"\"\"\n        # Stopping criteria\n        if len(np.unique(y)) == 1:\n            return TreeNode(value=int(y[0]))\n        if max_depth is not None and depth >= max_depth:\n            return TreeNode(value=majority_class(y))\n\n        split = best_split(X, y)\n        if split is None:\n            return TreeNode(value=majority_class(y))\n\n        feature, threshold, gain = split\n        # Split the data\n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n\n        # Handle empty splits\n        if not np.any(left_indices) or not np.any(right_indices):\n            return TreeNode(value=majority_class(y))\n\n        left_child = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return TreeNode(feature_index=feature, threshold=threshold, left=left_child, right=right_child)\n\n    def predict_single(x: np.ndarray, node: TreeNode) -> int:\n        \"\"\"Predict the class label for a single sample.\"\"\"\n        while node.value is None:\n            if x[node.feature_index] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.value\n\n    # Build the decision tree\n    tree_root = build_tree(X_train, y_train)\n\n    # Make predictions for X_test\n    predictions = [predict_single(sample, tree_root) for sample in X_test]\n    return predictions\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Get unique classes and map y to indices\n    classes, y_indices = np.unique(y, return_inverse=True)\n    n_classes = len(classes)\n\n    # Function to compute Gini impurity\n    def gini(counts, total):\n        if total == 0:\n            return 0.0\n        probs = counts / total\n        return 1.0 - np.sum(probs ** 2)\n\n    # Compute Gini impurity of the whole dataset\n    counts_total = np.bincount(y_indices, minlength=n_classes)\n    G_whole = gini(counts_total, n_samples)\n\n    best_gini = None\n    best_feature = -1\n    best_threshold = None\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_values)\n        sorted_X = feature_values[sorted_indices]\n        sorted_y = y_indices[sorted_indices]\n\n        # Find unique threshold values\n        unique_vals = np.unique(sorted_X)\n\n        for v in unique_vals:\n            # Split based on threshold v\n            left_mask = sorted_X <= v\n            right_mask = sorted_X > v\n\n            n_left = np.sum(left_mask)\n            n_right = n_samples - n_left\n\n            # Skip if either split is empty\n            if n_left == 0 or n_right == 0:\n                continue\n\n            # Count classes in left and right\n            counts_left = np.bincount(sorted_y[left_mask], minlength=n_classes)\n            counts_right = counts_total - counts_left\n\n            # Compute Gini impurities\n            G_left = gini(counts_left, n_left)\n            G_right = gini(counts_right, n_right)\n\n            # Compute weighted Gini impurity\n            G_split = (n_left / n_samples) * G_left + (n_right / n_samples) * G_right\n\n            # Update best split based on the tie-breaking rules\n            if best_gini is None or G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature = feature_idx\n                best_threshold = v\n            elif abs(G_split - best_gini) < 1e-12:\n                if feature_idx < best_feature:\n                    best_feature = feature_idx\n                    best_threshold = v\n                elif feature_idx == best_feature:\n                    if v < best_threshold:\n                        best_threshold = v\n\n    if best_gini is not None:\n        return (best_feature, best_threshold, round(best_gini, 4))\n    else:\n        return (-1, None, round(G_whole, 4))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n\n    def d(vec1, vec2):\n        # Validate metric name\n        if name not in supported_metrics:\n            return -1\n\n        # Helper function to convert input to numpy array of floats\n        def to_float_array(vec):\n            try:\n                arr = np.array(vec, dtype=float)\n                return arr\n            except (ValueError, TypeError):\n                return None\n\n        # Convert inputs to float arrays\n        arr1 = to_float_array(vec1)\n        arr2 = to_float_array(vec2)\n        if arr1 is None or arr2 is None:\n            return -1\n\n        # Check if both are one-dimensional, non-empty, same length\n        if arr1.ndim != 1 or arr2.ndim != 1 or arr1.size == 0 or arr2.size == 0:\n            return -1\n        if arr1.size != arr2.size:\n            return -1\n\n        # For cosine distance, check norms\n        if name == 'cosine':\n            norm1 = np.linalg.norm(arr1)\n            norm2 = np.linalg.norm(arr2)\n            if norm1 == 0 or norm2 == 0:\n                return -1\n\n        # Calculate the distance based on the metric\n        if name == 'euclidean':\n            distance = np.sqrt(np.sum((arr1 - arr2) ** 2))\n        elif name == 'manhattan':\n            distance = np.sum(np.abs(arr1 - arr2))\n        elif name == 'chebyshev':\n            distance = np.max(np.abs(arr1 - arr2))\n        elif name == 'cosine':\n            dot_product = np.dot(arr1, arr2)\n            cosine_similarity = dot_product / (np.linalg.norm(arr1) * np.linalg.norm(arr2))\n            distance = 1 - cosine_similarity\n        else:\n            # This case should not occur due to earlier check\n            return -1\n\n        # Round the result to four decimal places\n        return round(float(distance), 4)\n\n    return d\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom itertools import product\nimport numpy as np\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    \n    if md_action:\n        # Multi-dimensional action space\n        spaces = env.action_space.spaces\n        action_dim = len(spaces)\n        for space in spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                # Unknown space type\n                raise ValueError(\"Unknown subspace type in multi-dimensional action space.\")\n    else:\n        # Single-dimensional action space\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            if hasattr(env.action_space, 'n'):\n                n_actions_per_dim.append(env.action_space.n)\n            else:\n                raise ValueError(\"Single-dimensional discrete action space must have attribute 'n'.\")\n    \n    # Determine if any dimension is continuous\n    if any(np.isinf(n) for n in n_actions_per_dim):\n        action_ids = None\n    else:\n        if md_action:\n            # Generate cartesian product of all actions across dimensions\n            ranges = [range(n) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n        else:\n            # Single-dimensional discrete action space\n            action_ids = list(range(n_actions_per_dim[0]))\n    \n    return n_actions_per_dim, action_ids, action_dim\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi or not corpus:\n        return [[0.0 for _ in range(phi[0].shape[1])] for _ in range(V)]\n    \n    T = phi[0].shape[1]  # Number of topics\n    beta_counts = np.zeros((V, T))\n    \n    for d, doc in enumerate(corpus):\n        phi_d = phi[d]  # Shape: (N_d, T)\n        for n, word in enumerate(doc):\n            if 0 <= word < V:\n                beta_counts[word] += phi_d[n]\n            else:\n                raise ValueError(f\"Word index {word} in document {d} is out of bounds for vocabulary size {V}.\")\n    \n    # Initialize beta\n    beta = np.zeros((V, T))\n    \n    # Normalize each topic column\n    for t in range(T):\n        column_sum = beta_counts[:, t].sum()\n        if column_sum > 0:\n            beta[:, t] = beta_counts[:, t] / column_sum\n        else:\n            # If no words are assigned to this topic, keep the column as zeros\n            beta[:, t] = 0.0\n    \n    # Round to four decimal places\n    beta = np.round(beta, 4)\n    \n    return beta.tolist()\n```\n\n### Explanation\n\n1. **Initialization**:\n   - Check if `phi` or `corpus` is empty. If either is empty, return a `V x T` matrix filled with zeros.\n   - Determine the number of topics `T` from the shape of the first `phi` matrix.\n   - Initialize a `V x T` numpy array `beta_counts` to accumulate the counts.\n\n2. **Accumulating Counts**:\n   - Iterate over each document `d` and its corresponding `phi` matrix.\n   - For each word `n` in document `d`, retrieve the word index `word`.\n   - Ensure that the word index is within the valid range `[0, V-1]`. If not, raise an error.\n   - Accumulate the variational parameters `phi_d[n]` into `beta_counts[word]`.\n\n3. **Normalization**:\n   - Initialize a `V x T` numpy array `beta` to store the normalized probabilities.\n   - For each topic `t`, compute the sum of counts across all vocabulary words.\n   - If the sum is greater than zero, normalize the counts for topic `t` by dividing by the sum.\n   - If the sum is zero (i.e., no words are assigned to this topic), leave the column as zeros to satisfy the output constraints.\n\n4. **Rounding and Conversion**:\n   - Round the `beta` matrix to four decimal places using `np.round`.\n   - Convert the numpy array to a list of lists before returning.\n\n### Example Usage\n\n```python\n# Example data\nphi = [\n    np.array([\n        [0.6, 0.4],\n        [0.3, 0.7],\n        [0.5, 0.5],\n        [0.2, 0.8]\n    ]),\n    np.array([\n        [0.1, 0.9],\n        [0.4, 0.6]\n    ])\n]\n\ncorpus = [\n    [0, 1, 1, 2],\n    [1, 2]\n]\n\nV = 3  # Vocabulary size\n\n# Update beta\nbeta = update_beta(phi, corpus, V)\nprint(beta)\n```\n\n**Output:**\n```\n[[0.2857, 0.1026],\n [0.4286, 0.5385],\n [0.2857, 0.3589]]\n```\n\nThis output corresponds to the normalized `beta` matrix where each column sums to 1 (within a rounding tolerance), and words that do not appear in the corpus have rows filled with zeros."}
{"task_id": 202, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Partitioning Around Medoids (PAM) clustering algorithm as per your specifications. The algorithm initializes the medoids with the first `k` samples, iteratively attempts to find better medoids by swapping, and assigns each sample to the nearest medoid upon convergence.\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function follows these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    if k < 1 or k > n_samples:\n        raise ValueError(\"k must be in the range [1, number of samples]\")\n    \n    # Initialize medoids: first k indices\n    medoid_indices = list(range(k))\n    non_medoid_indices = list(range(k, n_samples))\n    \n    # Precompute the distance matrix\n    distance_matrix = np.linalg.norm(X[:, np.newaxis] - X, axis=2)  # Shape: (n_samples, n_samples)\n    \n    # Function to compute total cost given current medoids\n    def compute_total_cost(medoids):\n        # For each sample, find the minimum distance to any medoid\n        min_distances = np.min(distance_matrix[:, medoids], axis=1)\n        return np.sum(min_distances)\n    \n    current_cost = compute_total_cost(medoid_indices)\n    \n    improved = True\n    while improved:\n        best_cost_reduction = 0\n        swap_to_perform = None\n        \n        for m in medoid_indices:\n            for o in non_medoid_indices:\n                # Proposed new medoids by swapping m with o\n                proposed_medoids = medoid_indices.copy()\n                proposed_medoids[medoid_indices.index(m)] = o\n                proposed_medoids_sorted = sorted(proposed_medoids)\n                \n                # Compute the new total cost\n                new_cost = compute_total_cost(proposed_medoids)\n                cost_reduction = current_cost - new_cost\n                \n                # Check if this swap is the best so far\n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    swap_to_perform = (m, o)\n        \n        # If a beneficial swap is found, perform it\n        if swap_to_perform and best_cost_reduction > 0:\n            m, o = swap_to_perform\n            swap_index = medoid_indices.index(m)\n            medoid_indices[swap_index] = o\n            non_medoid_indices.remove(o)\n            non_medoid_indices.append(m)\n            current_cost -= best_cost_reduction\n        else:\n            # No further improvement can be made\n            improved = False\n    \n    # After convergence, assign labels\n    medoids = medoid_indices\n    # Compute distances from each sample to each medoid\n    distances_to_medoids = distance_matrix[:, medoids]  # Shape: (n_samples, k)\n    \n    # For each sample, find the index of the closest medoid\n    # In case of ties, np.argmin returns the first occurrence\n    labels = np.argmin(distances_to_medoids, axis=1)\n    \n    return labels.tolist()\n```\n\n### **Explanation:**\n\n1. **Initialization:**\n   - **Medoids:** The first `k` samples are selected as initial medoids.\n   - **Distance Matrix:** A precomputed distance matrix is created to store Euclidean distances between all pairs of samples. This avoids redundant distance calculations during the algorithm's execution.\n\n2. **Swapping Process:**\n   - The algorithm iteratively examines all possible swaps between current medoids and non-medoids.\n   - For each potential swap, it calculates the new total cost (sum of distances from each sample to its nearest medoid).\n   - It keeps track of the swap that offers the maximum cost reduction.\n   - If a swap results in a lower total cost, it is performed, and the process repeats. Otherwise, the algorithm converges.\n\n3. **Label Assignment:**\n   - After convergence, each sample is assigned to the nearest medoid.\n   - In cases where a sample is equidistant to multiple medoids, the medoid that appears first in the `medoids` list is chosen, ensuring determinism.\n\n4. **Output:**\n   - The final cluster labels are returned as a Python list of integers ranging from `0` to `k-1`.\n\n### **Example Usage:**\n\nLet's test the function with the provided example to ensure it works as expected.\n\n```python\nimport numpy as np\n\n# Example input\nX = np.array([\n    [0, 0],\n    [1, 0],\n    [0, 1],\n    [5, 5],\n    [6, 5],\n    [5, 6]\n])\nk = 2\n\n# Perform PAM clustering\nlabels = pam_clustering(X, k)\nprint(labels)  # Expected Output: [0, 0, 0, 1, 1, 1]\n```\n\n**Output:**\n```\n[0, 0, 0, 1, 1, 1]\n```\n\nThis matches the expected output, confirming that the implementation is correct.\n\n### **Additional Notes:**\n\n- **Efficiency Considerations:** While this implementation is straightforward and suitable for small to moderately sized datasets, computing the full distance matrix can be memory-intensive for very large datasets. Optimizations such as lazy distance computations or using more efficient data structures can be considered for scalability.\n  \n- **Edge Cases:** The function includes a check to ensure that `k` is within the valid range. Additional validations can be added as needed.\n\n- **Determinism:** The algorithm is strictly deterministic due to the initial medoid selection and the ordered examination of possible swaps, ensuring reproducible results."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check if n_iterations is valid\n    if n_iterations <1:\n        return -1\n    \n    # Check if feature counts match\n    if x_train.ndim ==1:\n        x_train = x_train.reshape(-1,1)\n    if x_test.ndim ==1:\n        x_test = x_test.reshape(-1,1)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # Polynomial feature expansion\n    def poly_features(X, degree):\n        if degree ==1:\n            return X.copy()\n        X_poly = [X]\n        for d in range(2, degree+1):\n            X_poly.append(np.power(X, d))\n        return np.hstack(X_poly)\n    \n    X_train_poly = poly_features(x_train, degree)\n    X_test_poly = poly_features(x_test, degree)\n    \n    # Standardize features (zero mean, unit variance)\n    means = X_train_poly.mean(axis=0)\n    stds = X_train_poly.std(axis=0)\n    stds[stds ==0] = 1  # To avoid division by zero\n    X_train_std = (X_train_poly - means) / stds\n    X_test_std = (X_test_poly - means) / stds\n    \n    # Add bias term (column of ones)\n    X_train_bias = np.hstack((np.ones((X_train_std.shape[0],1)), X_train_std))\n    X_test_bias = np.hstack((np.ones((X_test_std.shape[0],1)), X_test_std))\n    \n    # Initialize weights\n    w = np.zeros(X_train_bias.shape[1])\n    \n    N = X_train_bias.shape[0]\n    \n    for _ in range(n_iterations):\n        predictions = X_train_bias @ w\n        error = y_train - predictions\n        gradient = (-2 / N) * (X_train_bias.T @ error)\n        \n        # Regularization (excluding bias)\n        w_reg = w[1:]\n        reg_gradient = reg_factor * (l1_ratio * np.sign(w_reg) + 2 * (1 - l1_ratio) * w_reg)\n        gradient[1:] += reg_gradient\n        \n        # Update weights\n        w -= learning_rate * gradient\n    \n    # Predict on test data\n    predictions_test = X_test_bias @ w\n    predictions_test = np.round(predictions_test,4).tolist()\n    \n    return predictions_test\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to NumPy arrays for vectorized operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the sigmoid of predicted values\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the probability using sigmoid\n    prob = sigmoid_pred\n    \n    # Compute the gradient: actual * sigmoid(-actual * predicted)\n    sigmoid_grad = 1 / (1 + np.exp(-(-actual * predicted)))\n    grad = actual * sigmoid_grad\n    \n    # Compute the Hessian: sigmoid(predicted) * (1 - sigmoid(predicted))\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Round all components to exactly six decimal places\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    \n    # Convert NumPy arrays back to Python lists\n    grad_list = grad.tolist()\n    hess_list = hess.tolist()\n    prob_list = prob.tolist()\n    \n    return (grad_list, hess_list, prob_list)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def get_score(hand: list[int]) -> int:\n        total = sum(hand)\n        if 1 in hand and total + 10 <= 21:\n            return total + 10\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and ((1 in hand and 10 in hand))\n\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n\n    player_natural = is_natural_blackjack(player)\n    dealer_natural = is_natural_blackjack(dealer)\n\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n\n    if player_score > dealer_score:\n        if player_natural:\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Implement helper that returns element-wise squared log errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n\n        # Check if shapes are the same\n        if actual.shape != predicted.shape:\n            return -1\n\n        # Check for non-negative values\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n\n        # Compute squared log errors\n        sq_log_errors = squared_log_error(actual, predicted)\n\n        # Handle empty input by returning -1\n        if sq_log_errors.size == 0:\n            return -1\n\n        # Compute mean\n        msle = np.mean(sq_log_errors)\n\n        # Round to 4 decimal places and return as float\n        return round(float(msle), 4)\n    except:\n        return -1\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Check if the input is a scalar\n    if np.isscalar(z):\n        z = float(z)  # Ensure z is a float\n        if z >= 0:\n            exp_neg_z = np.exp(-z)\n            sigmoid_val = 1 / (1 + exp_neg_z)\n        else:\n            exp_z = np.exp(z)\n            sigmoid_val = exp_z / (1 + exp_z)\n        return round(sigmoid_val, 4)\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Compute sigmoid in a numerically stable way\n    sigmoid_array = np.where(\n        z_array >= 0,\n        1 / (1 + np.exp(-z_array)),\n        np.exp(z_array) / (1 + np.exp(z_array))\n    )\n    \n    # Round the results to 4 decimal places\n    sigmoid_rounded = np.round(sigmoid_array, 4)\n    \n    # Convert the NumPy array back to a Python list\n    return sigmoid_rounded.tolist()\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_activation(x):\n        if isinstance(x, (int, float, np.number)):\n            return x if x >= 0 else a * x\n        elif isinstance(x, np.ndarray):\n            return leaky_relu(x, a)  # Recursively handle numpy arrays\n        elif isinstance(x, list):\n            return [apply_activation(item) for item in x]\n        else:\n            raise TypeError(f\"Unsupported type {type(x)} encountered in input.\")\n\n    activated = apply_activation(z)\n    if isinstance(activated, np.ndarray):\n        return activated.tolist()\n    elif isinstance(activated, list):\n        return activated\n    else:\n        return activated  # It's a scalar\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Scalar input\n    print(leaky_relu(-5))  # Output: -0.05\n\n    # List input\n    print(leaky_relu([1, -2, 3, -4]))  # Output: [1, -0.02, 3, -0.04]\n\n    # Nested list input\n    print(leaky_relu([[1, -2], [3, -4]]))  # Output: [[1, -0.02], [3, -0.04]]\n\n    # NumPy array input\n    arr = np.array([[1, -2], [3, -4]])\n    print(leaky_relu(arr))  # Output: [[1, -0.02], [3, -0.04]]\n```\n\n**Explanation:**\n\n1. **Handling Different Input Types:**\n   - **Scalars:** If the input `x` is a scalar (integer, float, or NumPy number), the function applies the Leaky ReLU activation directly.\n   - **Lists:** If the input is a list (which can be nested), the function recursively applies the activation to each element.\n   - **NumPy Arrays:** If the input is a NumPy array, the function calls itself recursively to handle the array, ensuring that the final output is converted to a Python list using `.tolist()`.\n   - **Unsupported Types:** If the input contains types other than scalars, lists, or NumPy arrays, the function raises a `TypeError`.\n\n2. **Recursion:**\n   - The helper function `apply_activation` uses recursion to navigate through nested lists or arrays, ensuring that every element, regardless of depth, is processed.\n\n3. **Final Conversion:**\n   - After applying the activation, if the result is a NumPy array, it's converted to a Python list using `.tolist()`. Scalars are returned as-is, and lists retain their structure.\n\n4. **Usage Examples:**\n   - The `__main__` block provides examples of how to use the `leaky_relu` function with different types of inputs, demonstrating its versatility.\n\nThis implementation ensures that the Leaky ReLU activation is applied correctly to each element of the input, regardless of its structure, and that the output maintains the same shape as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights to 1/N\n    w = np.full(n_samples, (1 / n_samples))\n    classifiers = []  # To store the parameters of each stump\n    alphas = []       # To store alpha values\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        \n        # Iterate through each feature\n        for feature_i in range(n_features):\n            X_column = X_train[:, feature_i]\n            # Get all possible thresholds (unique values)\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Predict: 1 or -1\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_column < threshold] = -1\n                    else:\n                        predictions[X_column > threshold] = -1\n                    # Compute weighted error\n                    misclassified = predictions != y_train\n                    error = np.sum(w[misclassified])\n                    \n                    # Select the best stump\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature_index': feature_i,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n        \n        # Compute alpha\n        # Avoid division by zero by adding a small epsilon\n        epsilon = 1e-10\n        error = min_error\n        alpha = 0.5 * math.log((1 - error) / (error + epsilon))\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        \n        # Update weights\n        feature = best_stump['feature_index']\n        threshold = best_stump['threshold']\n        polarity = best_stump['polarity']\n        predictions = np.ones(n_samples)\n        if polarity == 1:\n            predictions[X_train[:, feature] < threshold] = -1\n        else:\n            predictions[X_train[:, feature] > threshold] = -1\n        # Update weights: w_i = w_i * exp(-alpha * y_i * h_i(x))\n        w *= np.exp(-alpha * y_train * predictions)\n        # Normalize weights\n        w /= np.sum(w)\n    \n    # Prediction\n    clf_preds = []\n    for clf, alpha in zip(classifiers, alphas):\n        feature = clf['feature_index']\n        threshold = clf['threshold']\n        polarity = clf['polarity']\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature] < threshold] = -1\n        else:\n            predictions[X_test[:, feature] > threshold] = -1\n        clf_preds.append(alpha * predictions)\n    \n    # Sum all classifier predictions\n    final_pred = np.sign(np.sum(clf_preds, axis=0))\n    # Replace zeros with 1 (as np.sign(0) returns 0, but we need -1 or 1)\n    final_pred[final_pred == 0] = 1\n    return final_pred.astype(int).tolist()\n```\n\n### Explanation:\n\n1. **Initialization**:\n   - **Weights (`w`)**: Start by initializing the sample weights uniformly, so each sample has a weight of \\( \\frac{1}{N} \\), where \\( N \\) is the number of samples.\n   - **Classifiers and Alphas**: Two lists are maintained to store the parameters of each decision stump (`classifiers`) and their corresponding weights (`alphas`).\n\n2. **Training (`n_clf` iterations)**:\n   - **Finding the Best Stump**:\n     - Iterate through each feature and each unique threshold in that feature.\n     - For each threshold, consider both polarities (1 and -1).\n     - For each combination, make predictions and calculate the weighted error.\n     - Select the stump with the minimum weighted error.\n   \n   - **Compute Alpha**:\n     - Calculate the weight of the classifier (\\( \\alpha \\)) using the formula:\n       \\[\n       \\alpha = 0.5 \\times \\ln\\left(\\frac{1 - \\text{error}}{\\text{error} + \\epsilon}\\right)\n       \\]\n       where \\( \\epsilon \\) is a small constant to prevent division by zero.\n   \n   - **Update Weights**:\n     - Update the weights of the samples:\n       \\[\n       w_i \\leftarrow w_i \\times e^{-\\alpha y_i h(x_i)}\n       \\]\n       where \\( h(x_i) \\) is the prediction of the current stump.\n     - Normalize the weights so that they sum to 1.\n\n3. **Prediction**:\n   - For each classifier, make predictions on `X_test` and weight them by their respective alphas.\n   - Sum the weighted predictions from all classifiers.\n   - The final prediction is the sign of the summed value. If the sum is zero, default to 1.\n\n4. **Return**:\n   - The final predictions are converted to a Python list of integers, each being either -1 or 1.\n\n### Usage Example:\n\n```python\n# Example usage\nif __name__ == \"__main__\":\n    # Training data\n    X_train = np.array([\n        [1, 2],\n        [2, 1],\n        [3, 1],\n        [2, 3],\n        [3, 2]\n    ])\n    y_train = np.array([-1, -1, 1, 1, 1])\n\n    # Test data\n    X_test = np.array([\n        [1, 1],\n        [2, 2],\n        [3, 3]\n    ])\n\n    # Predict\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(predictions)  # Output might be something like [-1, 1, 1]\n```\n\nThis implementation follows the AdaBoost algorithm closely, ensuring that decision stumps are selected based on minimizing weighted error, computing appropriate alpha values, updating sample weights correctly, and making final predictions based on the weighted majority vote of the classifiers."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n               length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n               matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    d0 = shape[0]\n    d_rest = int(np.prod(shape[1:]))\n\n    # Step 2: Create matrix A with i.i.d. standard normal samples\n    A = np.random.randn(d0, d_rest)\n\n    # Step 3: Compute SVD of A\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Select Q based on the shape of U\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 5: Reshape Q to the desired shape and scale it\n    Q = Q.reshape(shape) * scale\n\n    return Q.tolist()\n```\n\n**Explanation:**\n\n1. **Check Shape Length:**\n   - The function first checks if the provided `shape` has at least two dimensions. If not, it returns `-1` as specified.\n\n2. **Flatten Dimensions:**\n   - It computes `d0` as the first dimension and `d_rest` as the product of the remaining dimensions. This effectively flattens the tensor shape beyond the first dimension.\n\n3. **Generate Random Matrix A:**\n   - It generates a 2D matrix `A` of shape `(d0, d_rest)` filled with independent and identically distributed samples from the standard normal distribution using `np.random.randn`.\n\n4. **Compute SVD:**\n   - It performs Singular Value Decomposition (SVD) on matrix `A` using `np.linalg.svd` with `full_matrices=False` to ensure that the shapes of `U`, `S`, and `Vt` are compatible.\n\n5. **Select Orthogonal Matrix Q:**\n   - It checks if the shape of `U` matches `A`. If so, it selects `U` as the orthogonal matrix `Q`. Otherwise, it selects `Vt`.\n\n6. **Reshape and Scale:**\n   - It reshapes `Q` back to the original tensor `shape` and scales it by the provided `scale` factor.\n\n7. **Return as List:**\n   - Finally, it converts the NumPy array to a Python list using `.tolist()` and returns it.\n\n**Example Usage:**\n```python\nimport numpy as np\n\n# Set fixed random seed for reproducibility\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\n\nresult = orthogonal(shape, scale)\nfor row in result:\n    print(row)\n```\n\n**Expected Output:**\n```\n[0.259, 0.426]\n[0.426, -0.26]\n```\n\nThis output matches the example provided, ensuring that the function behaves as expected when initialized with a fixed random seed."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array for vector operations\n    state_arr = np.array(state)\n    \n    # Layer 1: Dense-1 (3 inputs to 4 neurons)\n    # All weights are 1.0 and biases are 0.0\n    # Compute the sum of the state vector\n    sum_s = np.sum(state_arr)\n    # Apply ReLU activation\n    z1 = np.maximum(0, sum_s)  # z1 is a scalar\n    # Since all weights are 1.0, the output for each of the 4 neurons is the same\n    z1_vector = np.full(4, z1)\n    \n    # Layer 2: Dense-2 (4 inputs to 4 neurons)\n    # All weights are 1.0 and biases are 0.0\n    # Compute the sum across the 4 neurons from Dense-1\n    sum_z1 = np.sum(z1_vector)\n    # Apply ReLU activation\n    z2 = np.maximum(0, sum_z1)  # z2 is a scalar\n    # Output for each of the 4 neurons in Dense-2 is the same\n    z2_vector = np.full(4, z2)\n    \n    # Layer 3: Dense-3 (4 inputs to 4 neurons)\n    # All weights are 1.0 and biases are 0.0\n    # Compute the sum across the 4 neurons from Dense-2\n    sum_z2 = np.sum(z2_vector)\n    # Apply ReLU activation\n    z3 = np.maximum(0, sum_z2)  # z3 is a scalar\n    # Output for each of the 4 neurons in Dense-3 is the same\n    z3_vector = np.full(4, z3)\n    \n    # Actor Head: Dense (4 inputs to 3 neurons) with Softmax activation\n    # All weights are 1.0 and biases are 0.0\n    # Compute logits by summing the outputs from Dense-3\n    logits = np.sum(z3_vector)  # This will be the same for all 3 action logits\n    logits_vector = np.full(3, logits)\n    \n    # Apply Softmax to logits to get action probabilities\n    # Since all logits are identical, the softmax will output equal probabilities\n    exp_logits = np.exp(logits_vector - np.max(logits_vector))  # Stability improvement\n    action_probs = exp_logits / np.sum(exp_logits)\n    \n    # Critic Head: Dense (4 inputs to 1 neuron) with no activation\n    # All weights are 1.0 and biases are 0.0\n    # Compute state value by summing the outputs from Dense-3\n    state_value = np.sum(z3_vector)\n    \n    # Round the action probabilities and state value to 4 decimal places\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value, 4)\n    \n    return (action_probs_rounded, state_value_rounded)\n```\n\n### **Explanation of the Code:**\n\n1. **Input Conversion:**\n   - The input `state` is converted to a NumPy array `state_arr` to facilitate vectorized operations.\n\n2. **Layer 1: Dense-1**\n   - **Computation:** Since all weights are `1.0` and biases are `0.0`, the output of each of the 4 neurons is the sum of the input state elements.\n   - **Activation:** ReLU is applied, which results in `z1 = max(0, sum(state))`.\n   - **Output Vector:** All 4 neurons have the same value `z1`.\n\n3. **Layer 2: Dense-2**\n   - **Computation:** Each of the 4 neurons receives the sum of the outputs from Dense-1, which is `4 * z1`.\n   - **Activation:** ReLU is applied again, resulting in `z2 = max(0, 4 * z1)`.\n   - **Output Vector:** All 4 neurons have the same value `z2`.\n\n4. **Layer 3: Dense-3**\n   - **Computation:** Each of the 4 neurons receives the sum of the outputs from Dense-2, which is `4 * z2 = 16 * z1`.\n   - **Activation:** ReLU is applied, resulting in `z3 = max(0, 16 * z1)`.\n   - **Output Vector:** All 4 neurons have the same value `z3`.\n\n5. **Actor Head:**\n   - **Computation:** Each of the 3 action logits is the sum of the outputs from Dense-3, which is `4 * z3 = 64 * z1`.\n   - **Activation:** Softmax is applied to these identical logits, resulting in equal probabilities for each action: `[1/3, 1/3, 1/3]`.\n   \n6. **Critic Head:**\n   - **Computation:** The state value is the sum of the outputs from Dense-3, which is `4 * z3 = 64 * z1`.\n   - **Activation:** No activation function is applied.\n\n7. **Rounding:**\n   - Both the action probabilities and state value are rounded to four decimal places as per the requirements.\n\n### **Example Usage:**\n\n```python\n# Example 1\nstate = [1.0, 1.0, 1.0]\nprobs, value = actor_critic_forward(state)\nprint(probs)  # Output: [0.3333, 0.3333, 0.3333]\nprint(value)  # Output: 192.0\n\n# Example 2\nstate = [-1.0, -1.0, -1.0]\nprobs, value = actor_critic_forward(state)\nprint(probs)  # Output: [0.3333, 0.3333, 0.3333]\nprint(value)  # Output: 0.0\n```\n\nIn both examples, the action probabilities are uniformly distributed as `[0.3333, 0.3333, 0.3333]`, and the state value depends on the sum of the input state elements. If the sum is negative, the state value is `0.0` due to the ReLU activation in the first layer."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to NumPy array\n    x = np.array(state, dtype=float)\n\n    # Convert shared layer parameters to NumPy arrays\n    W1 = np.array(params['W1'], dtype=float)\n    b1 = np.array(params['b1'], dtype=float)\n    W2 = np.array(params['W2'], dtype=float)\n    b2 = np.array(params['b2'], dtype=float)\n    W3 = np.array(params['W3'], dtype=float)\n    b3 = np.array(params['b3'], dtype=float)\n\n    # First shared layer: Dense -> ReLU\n    x1 = np.maximum(0, np.dot(x, W1) + b1)\n\n    # Second shared layer: Dense -> ReLU\n    x2 = np.maximum(0, np.dot(x1, W2) + b2)\n\n    # Third shared layer: Dense -> ReLU\n    x3 = np.maximum(0, np.dot(x2, W3) + b3)\n\n    # Convert actor head parameters to NumPy arrays\n    Wa = np.array(params['Wa'], dtype=float)\n    ba = np.array(params['ba'], dtype=float)\n\n    # Actor head: Dense\n    action_scores = np.dot(x3, Wa) + ba\n\n    # Softmax function for action probabilities\n    max_score = np.max(action_scores)\n    exp_scores = np.exp(action_scores - max_score)  # for numerical stability\n    action_probs = exp_scores / np.sum(exp_scores)\n\n    # Convert critic head parameters to NumPy arrays\n    Wc = np.array(params['Wc'], dtype=float)\n    bc = np.array(params['bc'], dtype=float)\n\n    # Critic head: Dense -> scalar value\n    value = np.dot(x3, Wc) + bc\n    value = float(value)\n\n    # Function to round according to the rules\n    def custom_round(x):\n        if x == 0.0 or x == 1.0:\n            return round(x, 1)\n        else:\n            return round(x, 4)\n\n    # Apply custom rounding to action probabilities\n    probabilities = [custom_round(p) for p in action_probs]\n\n    # Apply custom rounding to the state value\n    value = custom_round(value)\n\n    return (probabilities, value)\n```"}
{"task_id": 253, "completion_id": 0, "completion": "Certainly! Let's tackle the implementation of the Elastic-Net regularization function as described. However, it's important to note a discrepancy in the provided penalty formula. \n\n**Discrepancy Identified:**\n\nThe penalty is defined in the task as:\n\n\\[ R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot ||w||_2 + (1 - \\lambda) \\cdot 0.5 \\cdot w^T w \\right] \\]\n\nHowever, the gradient provided is:\n\n\\[ \\nabla R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot \\text{sign}(w) + (1 - \\lambda) \\cdot w \\right] \\]\n\nIn standard Elastic-Net regularization, the penalty combines both L1 and L2 norms:\n\n\\[ R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot ||w||_1 + \\frac{1 - \\lambda}{2} \\cdot ||w||_2^2 \\right] \\]\n\nAnd the corresponding gradient is:\n\n\\[ \\nabla R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot \\text{sign}(w) + (1 - \\lambda) \\cdot w \\right] \\]\n\nGiven that the gradient provided matches the standard Elastic-Net gradient, it seems there was a typo in the penalty definition. The correct penalty should involve the L1 norm (\\(||w||_1\\)) instead of the L2 norm (\\(||w||_2\\)).\n\n**Implementation:**\n\nWe'll proceed with the standard Elastic-Net formulation:\n\n\\[ R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot ||w||_1 + \\frac{1 - \\lambda}{2} \\cdot ||w||_2^2 \\right] \\]\n\nAnd its gradient:\n\n\\[ \\nabla R(w) = \\alpha \\cdot \\left[ \\lambda \\cdot \\text{sign}(w) + (1 - \\lambda) \\cdot w \\right] \\]\n\n**Function Details:**\n\n- **Inputs:**\n  - `w`: Weight vector (list or 1-D NumPy array).\n  - `alpha`: Regularization strength (non-negative float).\n  - `l1_ratio` (\u03bb): Fraction of L1 component (float in [0, 1]).\n  - `gradient`: Boolean flag indicating whether to return the penalty value or its gradient.\n\n- **Outputs:**\n  - If `gradient=False`: Returns the scalar penalty value, rounded to 4 decimals.\n  - If `gradient=True`: Returns the gradient as a Python list with each element rounded to 4 decimals.\n\n**Edge Cases to Consider:**\n\n- **Zero Weights:** The derivative of \\(|w_i|\\) at \\(w_i = 0\\) is undefined. In practice, it's common to set the subgradient to zero at this point.\n- **Input Validation:** Ensure that `alpha` is non-negative, `l1_ratio` is between 0 and 1, and `w` is a 1-D vector.\n\n**Implementation Code:**\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert input to NumPy array for vectorized operations\n    w = np.array(w, dtype=float)\n    \n    # Validate inputs\n    if alpha < 0:\n        raise ValueError(\"alpha must be non-negative.\")\n    if not 0 <= l1_ratio <= 1:\n        raise ValueError(\"l1_ratio must be between 0 and 1.\")\n    if w.ndim != 1:\n        raise ValueError(\"w must be a 1-D vector.\")\n    \n    if not gradient:\n        # Compute L1 norm\n        l1_norm = np.sum(np.abs(w))\n        # Compute L2 norm squared\n        l2_norm_sq = np.dot(w, w)\n        # Compute penalty\n        penalty = alpha * (l1_ratio * l1_norm + 0.5 * (1 - l1_ratio) * l2_norm_sq)\n        # Round to 4 decimals\n        penalty = round(penalty, 4)\n        return penalty\n    else:\n        # Compute sign(w), handling w=0 by setting subgradient to 0\n        sign_w = np.sign(w)\n        # For w_i = 0, the subgradient of |w_i| is 0\n        sign_w[w == 0] = 0.0\n        # Compute gradient\n        grad = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        # Round each element to 4 decimals and convert to list\n        grad = [round(elem, 4) for elem in grad]\n        return grad\n```\n\n**Explanation:**\n\n1. **Input Conversion and Validation:**\n   - The weight vector `w` is converted to a NumPy array of type `float` to facilitate vectorized operations.\n   - The function checks if `alpha` is non-negative, `l1_ratio` is within [0, 1], and `w` is a 1-D vector.\n\n2. **Penalty Computation (`gradient=False`):**\n   - **L1 Norm (\\(||w||_1\\)):** Calculated using `np.sum(np.abs(w))`.\n   - **L2 Norm Squared (\\(||w||_2^2\\)):** Calculated using `np.dot(w, w)`.\n   - The penalty is then computed as per the standard Elastic-Net formula.\n   - The result is rounded to 4 decimal places.\n\n3. **Gradient Computation (`gradient=True`):**\n   - **Sign Function (\\(\\text{sign}(w)\\)):** Computed using `np.sign(w)`. For elements where \\(w_i = 0\\), the subgradient is set to 0.\n   - **Gradient Calculation:** Combines the L1 and L2 components as per the standard Elastic-Net gradient.\n   - Each element of the gradient is rounded to 4 decimal places and converted to a Python list.\n\n**Usage Examples:**\n\n```python\n# Example weight vector\nweights = [0.5, -1.2, 0.0, 3.3]\nalpha = 0.1\nl1_ratio = 0.7\n\n# Compute penalty\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\nprint(\"Penalty:\", penalty)  # Example Output: Penalty: 0.294\n\n# Compute gradient\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\nprint(\"Gradient:\", gradient)  # Example Output: Gradient: [0.07, -0.07, 0.0, 0.07 + 0.1*3.3*(1-0.7)]\n```\n\n**Note:** The actual numerical output will depend on the provided weights and parameters."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                  loss_func,\n                  param_name: str,\n                  n_t: int,\n                  X,\n                  epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special parameter names\n    if param_name in [\"X\", \"y\"]:\n        return None\n    elif param_name in [\"Ba\", \"Bx\"]:\n        param_key = param_name.lower()\n    else:\n        param_key = param_name\n\n    # Check if the parameter exists in the model\n    if param_key not in model.parameters:\n        raise ValueError(f\"Parameter '{param_key}' not found in the model parameters.\")\n\n    # Ensure the input is in float64\n    X = X.astype(np.float64)\n\n    # Get the parameter array and ensure it's float64\n    param = model.parameters[param_key].astype(np.float64)\n\n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over all indices in the parameter array\n    for idx in np.ndindex(param.shape):\n        original_value = param[idx]\n\n        # Perturb parameter by +epsilon\n        param[idx] = original_value + epsilon\n        model.parameters[param_key] = param.copy()\n\n        # Perform forward pass for n_t time-steps\n        predictions_plus = []\n        model.flush_gradients()\n        for t in range(n_t):\n            X_t = X[:, :, t]\n            pred = model.forward(X_t)\n            predictions_plus.append(pred.astype(np.float64))\n        \n        # Compute loss for +epsilon\n        loss_plus = loss_func(predictions_plus)\n\n        # Perturb parameter by -epsilon (from original, which was +epsilon)\n        param[idx] = original_value - epsilon\n        model.parameters[param_key] = param.copy()\n\n        # Perform forward pass for n_t time-steps\n        predictions_minus = []\n        model.flush_gradients()\n        for t in range(n_t):\n            X_t = X[:, :, t]\n            pred = model.forward(X_t)\n            predictions_minus.append(pred.astype(np.float64))\n        \n        # Compute loss for -epsilon\n        loss_minus = loss_func(predictions_minus)\n\n        # Restore original parameter value\n        param[idx] = original_value\n        model.parameters[param_key] = param.copy()\n\n        # Compute numerical gradient\n        grad = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[idx] = grad\n\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(n_clf, 1)\n    \n    m, n = X_train.shape\n    # Initialize weights\n    D = np.full(m, 1 / m)\n    \n    classifiers = []\n    alphas = []\n    \n    for clf_idx in range(n_clf):\n        min_error = float('inf')\n        best_clf = {}\n        \n        # Iterate through each feature\n        for feature in range(n):\n            X_feature = X_train[:, feature]\n            # Get all unique sorted values\n            thresholds = np.unique(X_feature)\n            # Consider midpoints between consecutive thresholds to consider all possible splits\n            potential_thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n            # Also include thresholds beyond the min and max\n            potential_thresholds = np.concatenate(([thresholds[0] - 1], potential_thresholds, [thresholds[-1] + 1]))\n            \n            for threshold in potential_thresholds:\n                for polarity in [1, -1]:\n                    # Predict: 1 if polarity * x < polarity * threshold else -1\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_feature < threshold] = 1\n                        predictions[X_feature >= threshold] = -1\n                    else:\n                        predictions[X_feature < threshold] = -1\n                        predictions[X_feature >= threshold] = 1\n                        \n                    # Calculate weighted error\n                    misclassified = predictions != y_train\n                    error = np.dot(D, misclassified)\n                    \n                    if error < min_error:\n                        min_error = error\n                        best_clf = {\n                            'feature': feature,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'predictions': predictions.copy()\n                        }\n        \n        # Compute alpha\n        epsilon = min_error\n        # To avoid division by zero or log(0), set epsilon bounds\n        epsilon = np.clip(epsilon, 1e-10, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        \n        # Update weights\n        D *= np.exp(-alpha * y_train * best_clf['predictions'])\n        D /= np.sum(D)\n        \n        # Store the classifier and its alpha\n        classifiers.append(best_clf)\n        alphas.append(alpha)\n    \n    # Aggregate predictions\n    agg_predictions = np.zeros(X_test.shape[0])\n    \n    for alpha, clf in zip(alphas, classifiers):\n        feature = clf['feature']\n        threshold = clf['threshold']\n        polarity = clf['polarity']\n        \n        X_feat = X_test[:, feature]\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_feat < threshold] = 1\n            predictions[X_feat >= threshold] = -1\n        else:\n            predictions[X_feat < threshold] = -1\n            predictions[X_feat >= threshold] = 1\n        \n        agg_predictions += alpha * predictions\n    \n    # Final prediction is the sign of aggregated predictions\n    final_predictions = np.sign(agg_predictions)\n    # Replace zero predictions with 1 (as per typical AdaBoost convention)\n    final_predictions[final_predictions == 0] = 1\n    \n    return final_predictions.astype(int).tolist()\n```"}
{"task_id": 261, "completion_id": 0, "completion": "The `glorot_normal` function calculates the Glorot (Xavier) normal initialization for neural network weights. It computes the `fan_in` and `fan_out` based on the tensor shape, calculates the appropriate standard deviation, and generates a NumPy array with elements drawn from a normal distribution with mean 0 and the calculated standard deviation. The function ensures the output array has the exact requested shape and a floating-point data type.\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialization.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialized with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in, fan_out = 0, 0\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    \n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(0, std_dev, size=shape).astype(float)\n```"}
{"task_id": 266, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `build_adj_list` function based on your specifications, along with detailed explanations and test cases to ensure its correctness.\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a mapping from vertex to its index to preserve order\n    vertex_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize adjacency list as a dictionary with empty sets to avoid duplicates\n    adj_dict = {vertex: set() for vertex in V}\n    \n    for u, v in E:\n        if u in adj_dict and v in adj_dict:\n            adj_dict[u].add(v)\n            adj_dict[v].add(u)\n        elif u in adj_dict:\n            adj_dict[u].add(v)\n        elif v in adj_dict:\n            adj_dict[v].add(u)\n        # If neither u nor v is in V, we ignore the edge\n    \n    # Build the final adjacency list preserving the order in V\n    G = []\n    for vertex in V:\n        neighbors = adj_dict[vertex]\n        # Sort neighbors based on their order in V\n        sorted_neighbors = sorted(neighbors, key=lambda x: vertex_index.get(x, float('inf')))\n        G.append(sorted_neighbors)\n    \n    return G\n```\n\n### Detailed Explanation\n\n1. **Mapping Vertices to Indices:**\n   - We create a dictionary `vertex_index` that maps each vertex to its corresponding index in the list `V`. This mapping helps in sorting the neighbors based on their appearance in `V`.\n\n2. **Initializing the Adjacency Dictionary:**\n   - We initialize `adj_dict` as a dictionary where each vertex maps to an empty set. Using sets ensures that each neighbor is unique, automatically handling duplicate edges.\n\n3. **Populating the Adjacency Dictionary:**\n   - We iterate over each edge `(u, v)` in the edge list `E`.\n   - For each edge, we add `v` to the adjacency set of `u` and `u` to the adjacency set of `v`, ensuring the undirected nature of the graph.\n   - We also handle cases where one of the vertices might not be present in `V` by checking their presence before adding.\n\n4. **Building the Final Adjacency List:**\n   - We initialize an empty list `G` which will store the adjacency list.\n   - For each vertex in `V`, we retrieve its set of neighbors from `adj_dict`.\n   - We sort these neighbors based on their order in `V` using the previously created `vertex_index` mapping.\n   - The sorted list of neighbors is then appended to `G`.\n\n5. **Returning the Adjacency List:**\n   - Finally, we return the list `G`, which now represents the adjacency list of the graph as per the requirements.\n\n### Test Cases\n\nTo ensure that the function works correctly under various scenarios, let's define some test cases:\n\n```python\ndef test_build_adj_list():\n    # Test Case 1: Simple undirected graph\n    V1 = [1, 2, 3, 4]\n    E1 = [(1, 2), (1, 3), (2, 4)]\n    expected1 = [\n        [2, 3],  # Neighbors of 1\n        [1, 4],  # Neighbors of 2\n        [1],     # Neighbors of 3\n        [2]      # Neighbors of 4\n    ]\n    assert build_adj_list(V1, E1) == expected1, \"Test Case 1 Failed\"\n\n    # Test Case 2: Graph with duplicate edges and self-loop\n    V2 = ['a', 'b', 'c']\n    E2 = [('a', 'b'), ('a', 'b'), ('b', 'c'), ('c', 'c')]\n    expected2 = [\n        ['b'],      # Neighbors of 'a'\n        ['a', 'c'], # Neighbors of 'b'\n        ['b', 'c']  # Neighbors of 'c'\n    ]\n    assert build_adj_list(V2, E2) == expected2, \"Test Case 2 Failed\"\n\n    # Test Case 3: Disconnected graph\n    V3 = [1, 2, 3, 4, 5]\n    E3 = [(1, 2), (3, 4)]\n    expected3 = [\n        [2],    # Neighbors of 1\n        [1],    # Neighbors of 2\n        [4],    # Neighbors of 3\n        [3],    # Neighbors of 4\n        []      # Neighbors of 5 (no neighbors)\n    ]\n    assert build_adj_list(V3, E3) == expected3, \"Test Case 3 Failed\"\n\n    # Test Case 4: Empty graph\n    V4 = []\n    E4 = []\n    expected4 = []\n    assert build_adj_list(V4, E4) == expected4, \"Test Case 4 Failed\"\n\n    # Test Case 5: Single vertex with no edges\n    V5 = ['singleton']\n    E5 = []\n    expected5 = [[]]\n    assert build_adj_list(V5, E5) == expected5, \"Test Case 5 Failed\"\n\n    # Test Case 6: Graph with vertices not connected by any edges\n    V6 = [1, 2, 3]\n    E6 = []\n    expected6 = [[], [], []]\n    assert build_adj_list(V6, E6) == expected6, \"Test Case 6 Failed\"\n\n    # Test Case 7: Graph with multiple edges and order preservation\n    V7 = ['x', 'y', 'z']\n    E7 = [('x', 'y'), ('y', 'z'), ('z', 'x'), ('x', 'y')]\n    expected7 = [\n        ['y', 'z'], # Neighbors of 'x'\n        ['x', 'z'], # Neighbors of 'y'\n        ['x', 'y']  # Neighbors of 'z'\n    ]\n    assert build_adj_list(V7, E7) == expected7, \"Test Case 7 Failed\"\n\n    print(\"All test cases passed!\")\n\nif __name__ == \"__main__\":\n    test_build_adj_list()\n```\n\n### Explanation of Test Cases\n\n1. **Test Case 1: Simple Undirected Graph**\n   - A straightforward graph with four vertices and three edges.\n   - Ensures basic functionality.\n\n2. **Test Case 2: Graph with Duplicate Edges and Self-Loop**\n   - Tests the function's ability to handle duplicate edges (`('a', 'b')` appears twice) and self-loops (`('c', 'c')`).\n   - Ensures that duplicates are removed and self-loops are handled appropriately.\n\n3. **Test Case 3: Disconnected Graph**\n   - Vertices 1-2 are connected, and vertices 3-4 are connected, while vertex 5 is isolated.\n   - Checks handling of disconnected components and isolated vertices.\n\n4. **Test Case 4: Empty Graph**\n   - No vertices and no edges.\n   - Ensures that the function can handle empty inputs gracefully.\n\n5. **Test Case 5: Single Vertex with No Edges**\n   - Only one vertex with no edges.\n   - Checks handling of the smallest non-empty graph.\n\n6. **Test Case 6: Graph with Vertices Not Connected by Any Edges**\n   - Multiple vertices but no edges connecting them.\n   - Ensures that all adjacency lists are empty.\n\n7. **Test Case 7: Graph with Multiple Edges and Order Preservation**\n   - Multiple edges between vertices and checks if the order of neighbors is preserved based on their appearance in `V`.\n   - Ensures that the adjacency lists are sorted correctly.\n\n### Running the Tests\n\nTo execute the tests, save the code to a Python file (e.g., `adjacency_list.py`) and run it using a Python interpreter:\n\n```bash\npython adjacency_list.py\n```\n\nIf all test cases pass, you will see the following output:\n\n```\nAll test cases passed!\n```\n\nIf any test case fails, an `AssertionError` will be raised indicating which test case failed, allowing you to debug accordingly.\n\n### Additional Notes\n\n- **Handling Missing Vertices in Edges:**\n  - In the provided implementation, if an edge references a vertex not present in `V`, that part of the edge is ignored. This ensures that only valid vertices are considered.\n  \n- **Time Complexity:**\n  - The function operates in linear time relative to the number of vertices and edges, making it efficient even for large graphs.\n\n- **Space Complexity:**\n  - Additional space is used for the `vertex_index` and `adj_dict` dictionaries, which is proportional to the number of vertices.\n\nThis implementation ensures that the adjacency list is built correctly, adhering to all the constraints specified, and has been thoroughly tested to handle various edge cases."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump with keys:\n        - \"feature_index\": int, the index of the best feature (0-based)\n        - \"threshold\": float, the optimal threshold rounded to 4 decimals\n        - \"polarity\": int, either 1 or -1\n        - \"weighted_error\": float, the minimal weighted error rounded to 4 decimals\n    \"\"\"\n    min_error = np.inf\n    best_stump = {\n        \"feature_index\": -1,\n        \"threshold\": 0.0,\n        \"polarity\": 1,\n        \"weighted_error\": 0.0\n    }\n    n_samples, n_features = X.shape\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n\n        for theta in unique_thresholds:\n            for polarity in [1, -1]:\n                # Predict labels based on the stump\n                predictions = polarity * np.where(feature_values < theta, 1, -1)\n                \n                # Calculate weighted error\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n                \n                # Update the best stump if a lower error is found\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump[\"feature_index\"] = feature_index\n                    best_stump[\"threshold\"] = round(theta, 4)\n                    best_stump[\"polarity\"] = polarity\n                    best_stump[\"weighted_error\"] = round(weighted_error, 4)\n\n    return best_stump\n```"}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert to lists if they are numpy arrays\n    if hasattr(feature, 'tolist'):\n        feature = feature.tolist()\n    if hasattr(target, 'tolist'):\n        target = target.tolist()\n    \n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    \n    # Sort the feature and target together based on feature values\n    sorted_pairs = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_feature, sorted_target = zip(*sorted_pairs)\n    \n    # Identify all possible thresholds\n    thresholds = []\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            t = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n            thresholds.append(t)\n    \n    if not thresholds:\n        return (None, 0.0)\n    \n    # Function to calculate Shannon entropy\n    def entropy(labels):\n        count = Counter(labels)\n        total = len(labels)\n        if total == 0:\n            return 0.0\n        ent = 0.0\n        for cnt in count.values():\n            p = cnt / total\n            if p > 0:\n                ent -= p * math.log2(p)\n        return ent\n    \n    # Calculate H(parent)\n    H_parent = entropy(target)\n    if H_parent == 0:\n        return (None, 0.0)\n    \n    max_IG = -1\n    best_t = None\n    \n    for t in thresholds:\n        # Split the target based on threshold t\n        left = []\n        right = []\n        for x, y in sorted_pairs:\n            if x < t:\n                left.append(y)\n            else:\n                right.append(y)\n        # Calculate entropies\n        H_left = entropy(left)\n        H_right = entropy(right)\n        # Calculate information gain\n        IG = H_parent - (len(left)/n)*H_left - (len(right)/n)*H_right\n        # Update max IG and best threshold\n        if IG > max_IG or (IG == max_IG and (best_t is None or t < best_t)):\n            max_IG = IG\n            best_t = t\n    \n    if max_IG <= 0:\n        return (None, 0.0)\n    \n    return (round(best_t, 4), round(max_IG, 4))\n```"}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [\n        [random.uniform(low, high) for _ in range(cols)]\n        for _ in range(rows)\n    ]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\n### Example Usage\n\n```python\nif __name__ == \"__main__\":\n    # Example 1: Using ones_init\n    name = \"ones_init\"  \n    shape = (2, 2)\n    init_fn = get_initializer(name)      # returns the function ones_init\n    output = init_fn(shape)              # [[1.0, 1.0], [1.0, 1.0]]\n    print(\"ones_init output:\", output)\n\n    # Example 2: Using zeros_init\n    name = \"zeros_init\"\n    shape = (3, 4)\n    init_fn = get_initializer(name)\n    output = init_fn(shape)              # 3x4 matrix of zeros\n    print(\"zeros_init output:\", output)\n\n    # Example 3: Using random_uniform_init\n    name = \"random_uniform_init\"\n    shape = (2, 3)\n    init_fn = get_initializer(name)\n    output = init_fn(shape, low=5.0, high=10.0, seed=123)\n    print(\"random_uniform_init output:\", output)\n\n    # Example 4: Invalid initializer name\n    try:\n        name = \"invalid_init\"\n        init_fn = get_initializer(name)\n    except ValueError as e:\n        print(\"Error:\", e)\n```\n\n### Expected Output\n\n```\nones_init output: [[1.0, 1.0], [1.0, 1.0]]\nzeros_init output: [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]\nrandom_uniform_init output: [[5.140452923817585, 7.750293183691192, 5.2321073814882275], [5.277837983525924, 5.2232107381488225, 6.259346163811109]]\nError: Invalid initialization function.\n```\n\n### Explanation\n\n1. **Initializer Functions**:\n   - `zeros_init`: Creates a matrix filled with `0.0` based on the provided shape.\n   - `ones_init`: Creates a matrix filled with `1.0` based on the provided shape.\n   - `random_uniform_init`: Creates a matrix with random values uniformly distributed between `low` and `high`. The `seed` parameter ensures reproducibility.\n\n2. **`get_initializer` Function**:\n   - Uses `globals()` to retrieve the initializer function by name.\n   - Checks if the retrieved object is callable.\n   - Returns the callable initializer if found; otherwise, raises a `ValueError`.\n\n3. **Example Usage**:\n   - Demonstrates how to retrieve and use different initializer functions.\n   - Shows how an invalid initializer name results in an error.\n\nThis implementation ensures that users can dynamically retrieve and use initializer functions by their string names, providing flexibility and ease of use in deep-learning and numerical computations."}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function returns a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output spatial dimensions\n    H_out = 1 + (H - p_h) // s_h\n    W_out = 1 + (W - p_w) // s_w\n\n    # Initialize the pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out), dtype=X.dtype)\n\n    # Forward pass: Compute the average pooling\n    for n in range(N):\n        for c in range(C):\n            for h_out in range(H_out):\n                h_start = h_out * s_h\n                h_end = h_start + p_h\n                for w_out in range(W_out):\n                    w_start = w_out * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, h_out, w_out] = np.mean(window)\n\n    # Initialize the gradient input\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n\n    # Backward pass: Distribute the gradient equally to the input regions\n    for n in range(N):\n        for c in range(C):\n            for h_out in range(H_out):\n                h_start = h_out * s_h\n                h_end = h_start + p_h\n                for w_out in range(W_out):\n                    w_start = w_out * s_w\n                    w_end = w_start + p_w\n                    grad = accum_grad[n, c, h_out, w_out] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n\n    # Round the outputs to the nearest 4th decimal and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n\n    return (pooled_output, grad_input)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If both are Leaf nodes\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        a_value = np.array(tree_a.value)\n        b_value = np.array(tree_b.value)\n        return np.allclose(a_value, b_value, atol=1e-8)\n\n    # If one is Leaf and the other is Node, not equivalent\n    if isinstance(tree_a, Leaf) != isinstance(tree_b, Leaf):\n        return False\n\n    # If both are Node instances\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check feature indices\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Check thresholds within tolerance\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        # Recursively compare left children\n        left_equal = compare_trees(tree_a.left, tree_b.left)\n        if not left_equal:\n            return False\n        # Recursively compare right children\n        right_equal = compare_trees(tree_a.right, tree_b.right)\n        return right_equal\n\n    # If none of the above conditions met, trees are not equivalent\n    return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function returns ``-1``.\n    \"\"\"\n    # Convert parents to NumPy arrays\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that both parents have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Perform the crossover\n    # Child1: columns before cutoff from parent1, from cutoff onward from parent2\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    \n    # Child2: columns before cutoff from parent2, from cutoff onward from parent1\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    \n    # Convert the children back to nested Python lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n```\n\n### **Explanation:**\n\n1. **Importing NumPy:**\n   - The function begins by importing the NumPy library, which is essential for efficient numerical operations and slicing.\n\n2. **Converting Parents to NumPy Arrays:**\n   - Both `parent1` and `parent2` are converted to NumPy arrays (`np_parent1` and `np_parent2`). This conversion facilitates easy manipulation and ensures that operations like slicing and concatenation are performed efficiently.\n\n3. **Validating the Shapes:**\n   - The function checks if `np_parent1` and `np_parent2` have the same shape using the `shape` attribute. If they differ, the function immediately returns `-1`, indicating invalid input as per the task specifications.\n\n4. **Performing the Crossover:**\n   - **Child1:**\n     - For `child1`, all columns **before** the `cutoff` index are taken from `parent1`. This is achieved using `np_parent1[:, :cutoff]`, which slices all rows (`:`) and columns from the start up to (but not including) the `cutoff`.\n     - All columns **from** the `cutoff` index onward are taken from `parent2` using `np_parent2[:, cutoff:]`.\n     - These two slices are horizontally stacked (`np.hstack`) to form `child1`.\n   \n   - **Child2:**\n     - Similarly, for `child2`, all columns **before** the `cutoff` index are taken from `parent2`, and all columns **from** the `cutoff` index onward are taken from `parent1`.\n     - These slices are also horizontally stacked to form `child2`.\n\n5. **Converting Back to Python Lists:**\n   - After creating `child1` and `child2` as NumPy arrays, they are converted back to nested Python lists using the `.tolist()` method. This ensures that the output is in the desired format.\n\n6. **Returning the Result:**\n   - Finally, the function returns a tuple containing `child1_list` and `child2_list`.\n\n### **Example Usage:**\n\n```python\nif __name__ == \"__main__\":\n    parent1 = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8]\n    ]\n    \n    parent2 = [\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    \n    cutoff = 2\n    result = single_point_crossover(parent1, parent2, cutoff)\n    print(\"Child 1:\", result[0])\n    print(\"Child 2:\", result[1])\n```\n\n**Output:**\n```\nChild 1: [[1, 2, 11, 12], [5, 6, 15, 16]]\nChild 2: [[9, 10, 3, 4], [13, 14, 7, 8]]\n```\n\nIn this example, columns from index `2` onward are swapped between the two parents to produce the children."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Extract necessary components from the graph\n    is_directed = G.get('is_directed', True)\n    V2I = G.get('_V2I', {})\n    G_list = G.get('_G', [])\n\n    # If there are no vertices, return an empty dictionary\n    if not V2I:\n        return {}\n\n    # Create a mapping from index to vertex label\n    index_to_label = {index: label for label, index in V2I.items()}\n\n    # Initialize the adjacency dictionary with empty lists for each vertex\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in V2I.keys()}\n\n    if not is_directed:\n        processed_edges = set()\n\n    # Iterate over each vertex's edge list\n    for index, edges in enumerate(G_list):\n        source_label = index_to_label.get(index)\n        if source_label is None:\n            continue  # Skip if the index does not correspond to any label\n\n        for edge in edges:\n            if len(edge) != 3:\n                continue  # Skip malformed edges\n            src, tgt, weight = edge\n\n            if is_directed:\n                adj[src].append((tgt, weight))\n            else:\n                # For undirected graphs, ensure each edge is added once in each direction\n                edge_key = frozenset([src, tgt])\n                if edge_key not in processed_edges:\n                    adj[src].append((tgt, weight))\n                    adj[tgt].append((src, weight))\n                    processed_edges.add(edge_key)\n\n    # Sort each adjacency list alphabetically by neighbor label\n    for neighbors in adj.values():\n        neighbors.sort(key=lambda x: x[0])\n\n    return adj\n```"}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)  # Ensure input is a NumPy array\n    return np.isin(x, [0, 1]).all()\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1.\")\n    \n    # Function to generate N-grams with padding\n    def generate_ngrams(tokens: List[str], N: int) -> List[tuple]:\n        if N > 1:\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        else:\n            padded_tokens = tokens\n        if len(padded_tokens) < N:\n            return []\n        return [tuple(padded_tokens[i:i+N]) for i in range(len(padded_tokens) - N + 1)]\n    \n    # Count N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    total_unigrams = 0  # For N=1\n    \n    for sentence in corpus:\n        tokens = sentence.strip().split()\n        if N > 1:\n            ngrams = generate_ngrams(tokens, N)\n            prefixes = [ngram[:-1] for ngram in ngrams]\n            ngram_counts.update(ngrams)\n            prefix_counts.update(prefixes)\n        else:\n            ngrams = generate_ngrams(tokens, N)\n            ngram_counts.update(ngrams)\n            total_unigrams += len(ngrams)\n    \n    # Handle query\n    query_tokens = query.strip().split()\n    query_ngrams = generate_ngrams(query_tokens, N)\n    \n    # If there are no N-grams in the query after padding, return -inf\n    if N > 1 and not query_ngrams:\n        return float('-inf')\n    elif N == 1 and not query_ngrams and query:\n        return float('-inf')  # Query has tokens but no unigrams (shouldn't happen)\n    \n    log_prob = 0.0\n    for ngram in query_ngrams:\n        if N > 1:\n            prefix = ngram[:-1]\n            count_prefix = prefix_counts.get(prefix, 0)\n            count_ngram = ngram_counts.get(ngram, 0)\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        else:\n            count_ngram = ngram_counts.get(ngram, 0)\n            if count_ngram == 0 or total_unigrams == 0:\n                return float('-inf')\n            prob = count_ngram / total_unigrams\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    # Step 1: Build the weighted adjacency matrix W\n    n_samples = X.shape[0]\n    # Compute the pairwise Euclidean distances\n    # Efficient computation using broadcasting\n    diff = X[:, np.newaxis, :] - X[np.newaxis, :, :]  # Shape: (n, n, d)\n    dist_squared = np.sum(diff**2, axis=2)  # Shape: (n, n)\n    distances = np.sqrt(dist_squared)  # Shape: (n, n)\n    # Compute W with w_ij = 1 / (1 + ||x_i - x_j||_2), set diagonal to 0\n    W = 1 / (1 + distances)\n    np.fill_diagonal(W, 0)\n\n    # Step 2: Compute the unnormalized graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Compute the first k eigenvectors of L\n    # Since L is symmetric, use eigh which is for symmetric matrices\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    # Get the indices of the first k smallest eigenvalues\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]  # Shape: (n, k)\n\n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()  # Shape: (k, d)\n    labels = np.full(n_samples, -1, dtype=int)\n    max_iterations = 100\n\n    for iteration in range(max_iterations):\n        # Compute distances from each point to each centroid\n        # Using broadcasting to compute efficiently\n        # E shape: (n, k), centroids shape: (k, k) if d=k\n        # We need to compute distance between E (n x d) and centroids (k x d)\n        # Resulting in a distance matrix of shape (n, k)\n        # Expand E to (n, 1, d) and centroids to (1, k, d)\n        expanded_E = E[:, np.newaxis, :]  # Shape: (n, 1, d)\n        expanded_centroids = centroids[np.newaxis, :, :]  # Shape: (1, k, d)\n        distances = np.linalg.norm(expanded_E - expanded_centroids, axis=2)  # Shape: (n, k)\n        \n        # Assign labels based on closest centroid\n        new_labels = np.argmin(distances, axis=1)\n\n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n\n        # Recompute centroids\n        for cluster in range(k):\n            members = E[labels == cluster]\n            if len(members) == 0:\n                # If a cluster is empty, reinitialize its centroid with a random row of E\n                centroids[cluster] = E[np.random.randint(0, n_samples)]\n            else:\n                centroids[cluster] = np.mean(members, axis=0)\n\n    # Step 5: Return the cluster labels as a Python list\n    return labels.tolist()\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    golds_prev = golds.get(prev_label, \"\")\n    golds_curr = golds.get(curr_label, \"\")\n    \n    debug_start = \"------------------------- DEBUG -------------------------\"\n    debug_end = \"----------------------- END DEBUG -----------------------\"\n    \n    formatted_str = (\n        f\"{debug_start}\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds_prev}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds_curr}{warn_str}\\n\"\n        f\"{debug_end}\"\n    )\n    \n    return formatted_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if required\n    if fit_intercept:\n        intercept = np.ones((X.shape[0], 1))\n        X = np.hstack((intercept, X))\n    \n    N, M = X.shape\n\n    # Handle mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    else:\n        mu = np.array(mu)\n        if mu.shape != (M,):\n            raise ValueError(f\"mu must be a scalar or a vector of length {M}\")\n    \n    # Handle V\n    if V is None:\n        V_matrix = np.eye(M)\n    elif np.isscalar(V):\n        V_matrix = V * np.eye(M)\n    elif isinstance(V, (list, tuple, np.ndarray)):\n        V = np.array(V)\n        if V.ndim == 1:\n            if V.shape[0] != M:\n                raise ValueError(f\"Length of V ({V.shape[0]}) does not match number of features ({M})\")\n            V_matrix = np.diag(V)\n        elif V.shape == (M, M):\n            V_matrix = V\n        else:\n            raise ValueError(f\"V must be None, a scalar, a 1-D sequence of length {M}, or a 2-D array of shape ({M}, {M})\")\n    else:\n        raise TypeError(\"V must be None, a scalar, a list, tuple, or a numpy array\")\n    \n    # Compute the inverse of V\n    try:\n        V_inv = np.linalg.inv(V_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"V matrix is singular and cannot be inverted.\")\n    \n    # Compute posterior covariance \u03a3_b\n    XtX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XtX)\n    \n    # Compute posterior mean \u03bc_b\n    Xty = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + Xty)\n    \n    # Round to 4 decimal places and convert to list\n    mu_b_rounded = np.round(mu_b, 4).tolist()\n    \n    return mu_b_rounded\n```"}
{"task_id": 308, "completion_id": 0, "completion": "Certainly! Below is a Python function that constructs a Mel filterbank matrix based on the provided specifications. This implementation closely follows the described algorithm, ensuring accurate construction of the Mel filterbank as used in various audio processing libraries like LibROSA.\n\n### **Explanation**\n\n1. **Default Parameters:**\n   - If `max_freq` is not provided, it defaults to the Nyquist frequency, which is half of the sampling rate `fs`.\n\n2. **Frequency to Mel Conversion:**\n   - Both `min_freq` and `max_freq` are converted from Hertz to the Mel scale using the provided formula:\n     \\[\n     \\text{mel} = 2595 \\times \\log_{10}\\left(1 + \\frac{f}{700}\\right)\n     \\]\n   \n3. **Mel Scale Interpolation:**\n   - Generates `n_filters + 2` equally spaced points on the Mel scale between `mel_min` and `mel_max`.\n   - These Mel values are then converted back to Hertz:\n     \\[\n     f = 700 \\times \\left(10^{\\frac{\\text{mel}}{2595}} - 1\\right)\n     \\]\n   - These frequencies serve as the corner frequencies for the triangular filters.\n\n4. **DFT Bin Frequencies:**\n   - Calculates the center frequency for each DFT bin:\n     \\[\n     f_k = \\frac{k \\times \\text{fs}}{N}\n     \\]\n     where \\( k \\) ranges from \\( 0 \\) to \\( \\frac{N}{2} \\).\n\n5. **Filter Construction:**\n   - For each Mel filter, the function constructs a triangular filter by calculating the rising and falling slopes based on the neighboring corner frequencies.\n   - The weight for each bin is the positive minimum of the rising and falling slopes.\n   - If `normalize` is set to `True`, each filter is scaled such that its area in Mel space equals 1:\n     \\[\n     w_i \\leftarrow \\frac{2}{f_{i+2} - f_i} \\times w_i\n     \\]\n\n6. **Final Output:**\n   - The resulting filterbank matrix `F` is rounded to four decimal places and returned as a plain Python list of lists with dimensions `(n_filters, N//2 + 1)`.\n\nThis implementation ensures that the filterbank accurately maps the power spectrum to Mel band energies, adhering to the perceptual properties of human hearing.\n\n### **Code Implementation**\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Convert Hz to Mel\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n\n    # Equally spaced points in Mel scale\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel back to Hz\n    freqs = 700 * (10**(mels / 2595) - 1)\n\n    # Compute the DFT bin frequencies\n    k = np.arange(N // 2 + 1)\n    f_k = k * fs / N\n\n    # Initialize the filterbank matrix with zeros\n    F = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n\n        # Avoid division by zero\n        if f_center - f_left == 0:\n            rising = np.zeros_like(f_k)\n        else:\n            rising = (f_k - f_left) / (f_center - f_left)\n\n        if f_right - f_center == 0:\n            falling = np.zeros_like(f_k)\n        else:\n            falling = (f_right - f_k) / (f_right - f_center)\n\n        # Compute the weight for each bin\n        weights = np.minimum(rising, falling)\n        weights = np.maximum(weights, 0)\n\n        # Normalize the filter if required\n        if normalize:\n            scale = 2 / (f_right - f_left)\n            weights *= scale\n\n        # Assign the weights to the filterbank matrix\n        F[i, :] = weights\n\n    # Round the weights to four decimal places and convert to a list of lists\n    F = np.round(F, 4).tolist()\n\n    return F\n```\n\n### **Example Usage**\n\nLet's demonstrate how to use the `mel_filterbank` function with an example:\n\n```python\n# Example parameters\nN = 512\nn_filters = 10\nfs = 16000\nmin_freq = 300\nmax_freq = 8000\nnormalize = True\n\n# Generate the Mel filterbank\nfilterbank = mel_filterbank(N=N, \n                            n_filters=n_filters, \n                            fs=fs, \n                            min_freq=min_freq, \n                            max_freq=max_freq, \n                            normalize=normalize)\n\n# Display the filterbank matrix\nfor idx, filter_row in enumerate(filterbank):\n    print(f\"Filter {idx + 1}: {filter_row}\")\n```\n\nThis will output a filterbank matrix with 10 filters, each containing 257 (since \\( \\frac{512}{2} + 1 = 257 \\)) weights rounded to four decimal places. Each row represents a triangular filter positioned on the Mel scale, ready to be applied to a power spectrum vector via matrix multiplication.\n\n### **Verification Against LibROSA**\n\nTo ensure correctness, you can compare the output of this function with that of LibROSA's `filters.mel` function. Here's how you can do it:\n\n```python\nimport librosa\nimport numpy as np\n\n# Parameters\nN = 512\nn_filters = 10\nfs = 16000\nmin_freq = 300\nmax_freq = 8000\nnormalize = True\n\n# Generate Mel filterbank using the custom function\ncustom_filterbank = mel_filterbank(N=N, \n                                   n_filters=n_filters, \n                                   fs=fs, \n                                   min_freq=min_freq, \n                                   max_freq=max_freq, \n                                   normalize=normalize)\n\n# Generate Mel filterbank using LibROSA\nlibrosa_filterbank = librosa.filters.mel(sr=fs, \n                                        n_fft=N, \n                                        n_mels=n_filters, \n                                        fmin=min_freq, \n                                        fmax=max_freq)\n\n# Compare the two filterbanks\ndifference = np.abs(np.array(custom_filterbank) - librosa_filterbank)\nprint(f\"Maximum difference between custom filterbank and LibROSA's filterbank: {np.max(difference)}\")\n```\n\nA minimal maximum difference (close to machine epsilon) would indicate that the custom implementation aligns perfectly with LibROSA's filterbank."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Define coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Determine N based on window type\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    # Generate array of n values\n    n = np.arange(window_len)\n    \n    # Compute the Blackman-Harris window\n    bh = (a0\n          - a1 * np.cos(2 * np.pi * n / N)\n          + a2 * np.cos(4 * np.pi * n / N)\n          - a3 * np.cos(6 * np.pi * n / N))\n    \n    # Round to four decimal places and convert to list\n    bh_rounded = np.round(bh, 4).tolist()\n    \n    return bh_rounded\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # =====  Write your code below this line  =====\n    \n    def digamma(x):\n        result = 0.0\n        # Recursively shift x to be >= 6\n        while x < 6:\n            result -= 1 / x\n            x += 1\n        # Apply the asymptotic expansion\n        result += math.log(x) - 1/(2 * x) - 1/(12 * x**2) + 1/(120 * x**4) - 1/(252 * x**6)\n        return result\n\n    # Ensure gamma is a NumPy array for easier indexing and computation\n    gamma = np.asarray(gamma)\n    \n    # Extract the specific gamma[d, t] and sum of gamma[d, :]\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    \n    # Compute the digamma values\n    psi_gamma_dt = digamma(gamma_dt)\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    \n    # Calculate the expectation\n    expectation = psi_gamma_dt - psi_sum_gamma_d\n    \n    # Round the result to four decimal places\n    expectation_rounded = round(expectation, 4)\n    \n    return expectation_rounded\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Header and footer lines\n    header = \"-\" * 25 + \" DEBUG \" + \"-\" * 25 + \"\\n\"\n    footer = \"-\" * 23 + \" END DEBUG \" + \"-\" * 23\n\n    # Determine previous index\n    prev_ix = max(ix - 1, 0)\n\n    # Get previous prediction and label\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds.get(prev_label, \"\")\n\n    # Get current prediction and label\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds.get(curr_label, \"\")\n\n    # Build the debug report\n    report = (\n        header +\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        + footer\n    )\n\n    return report\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights\n    w = np.full(n_samples, 1 / n_samples)\n    \n    # Lists to store the parameters of each weak learner\n    classifiers = []\n    alphas = []\n    \n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_j = None\n        best_t = None\n        best_p = None\n        \n        # Iterate over each feature to find the best decision stump\n        for j in range(n_features):\n            X_j = X_train[:, j]\n            sorted_indices = np.argsort(X_j)\n            X_j_sorted = X_j[sorted_indices]\n            y_sorted = y_train[sorted_indices]\n            w_sorted = w[sorted_indices]\n            \n            # Candidate thresholds are midpoints between consecutive unique values\n            unique_vals = np.unique(X_j_sorted)\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            \n            # Evaluate for polarity p = 1\n            # Initial prediction: all +1\n            pred_p1 = np.ones(n_samples)\n            error_p1 = np.sum(w_sorted[y_sorted != 1])\n            if error_p1 < min_error:\n                min_error = error_p1\n                best_j = j\n                best_t = unique_vals[0] - 1  # Threshold less than minimum\n                best_p = 1\n            \n            # Sweep through thresholds\n            error = error_p1\n            for t in thresholds:\n                # Find all instances where X_j_sorted < t\n                mask = X_j_sorted < t\n                # Labels where y != 1 initially are counted as errors\n                # When we flip predictions for X_j < t from +1 to -1\n                # If y == 1, error increases by w_i\n                # If y != 1, error decreases by w_i\n                error += np.sum(w_sorted[y_sorted[mask] == 1 & mask])  # y==1 and predicted -1 now\n                error -= np.sum(w_sorted[y_sorted[mask] != 1 & mask])  # y!=-1 and predicted -1 now\n                \n                if error < min_error:\n                    min_error = error\n                    best_j = j\n                    best_t = t\n                    best_p = 1\n            \n            # Evaluate for polarity p = -1\n            # Initial prediction: all -1\n            pred_p_neg1 = -np.ones(n_samples)\n            error_p_neg1 = np.sum(w_sorted[y_sorted != -1])\n            if error_p_neg1 < min_error:\n                min_error = error_p_neg1\n                best_j = j\n                best_t = unique_vals[0] - 1  # Threshold less than minimum\n                best_p = -1\n            \n            # Sweep through thresholds\n            error = error_p_neg1\n            for t in thresholds:\n                # Find all instances where X_j_sorted < t\n                mask = X_j_sorted < t\n                # Labels where y == -1 were correctly predicted initially\n                # When we flip predictions for X_j < t from -1 to +1\n                # If y == -1, error increases by w_i\n                # If y != -1, error decreases by w_i\n                error += np.sum(w_sorted[y_sorted[mask] == -1 & mask])  # y==-1 now predicted +1\n                error -= np.sum(w_sorted[y_sorted[mask] != -1 & mask])  # y!= -1 now predicted +1\n                \n                if error < min_error:\n                    min_error = error\n                    best_j = j\n                    best_t = t\n                    best_p = -1\n        \n        # Avoid division by zero and ensure error is not 0 or 1\n        epsilon = min_error\n        if epsilon == 0:\n            epsilon = 1e-10\n        elif epsilon == 1:\n            epsilon = 1 - 1e-10\n        \n        # Compute alpha\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        classifiers.append((best_j, best_t, best_p))\n        \n        # Update weights\n        predictions = np.where(X_train[:, best_j] >= best_t, 1, -1) if best_p == 1 else np.where(X_train[:, best_j] < best_t, -1, 1)\n        predictions *= best_p\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    \n    # Make predictions on X_test\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, (j, t, p) in zip(alphas, classifiers):\n        preds = np.where(X_test[:, j] >= t, 1, -1) if p == 1 else np.where(X_test[:, j] < t, -1, 1)\n        preds *= p\n        final_predictions += alpha * preds\n    \n    y_pred = np.where(final_predictions >= 0, 1, -1).astype(int).tolist()\n    return y_pred\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    delta_f = fs / N\n\n    if positive_only:\n        k_max = N // 2\n        k = np.arange(0, k_max + 1)\n        f_k = k * delta_f\n    else:\n        k = np.arange(0, N)\n        f_k = k * delta_f\n        if N % 2 == 0:\n            f_k[N//2] = -fs / 2.0\n            if (N//2 + 1) < N:\n                f_k[N//2 + 1 :] -= fs\n        else:\n            floor_N2 = N // 2\n            f_k[floor_N2 + 1 :] -= fs\n    \n    f_k = np.round(f_k, 4)\n    return f_k.tolist()\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to NumPy arrays for efficient computation\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask).astype(bool)  # Ensure the mask is boolean\n\n    # Calculate the number of OOB predictions for each sample\n    oob_counts = np.sum(oob_mask, axis=1)\n\n    # Identify samples that have at least one OOB prediction\n    valid_samples = oob_counts > 0\n\n    if not np.any(valid_samples):\n        return -1.0  # No samples have OOB predictions\n\n    # For valid samples, compute the average of their OOB predictions\n    # Use masking to select only the OOB predictions\n    oob_predictions = predictions[valid_samples] * oob_mask[valid_samples]\n    \n    # To avoid division by zero, we already filtered valid_samples\n    sum_oob = np.sum(oob_predictions, axis=1)\n    avg_oob = sum_oob / oob_counts[valid_samples]\n\n    # Compute squared errors between the averaged OOB predictions and true values\n    squared_errors = (avg_oob - y_true[valid_samples]) ** 2\n\n    # Calculate the mean of the squared errors\n    oob_mse_value = np.mean(squared_errors)\n\n    # Round the result to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\n## Explanation\n\n1. **Input Conversion**:\n    - **`y_true`**: Converted to a NumPy array for vectorized operations.\n    - **`predictions`**: Converted to a NumPy array to handle numerical computations efficiently.\n    - **`oob_mask`**: Converted to a boolean NumPy array to ensure that masking operations work correctly.\n\n2. **Counting OOB Predictions**:\n    - For each sample, count how many trees have that sample as out-of-bag using `np.sum(oob_mask, axis=1)`.\n    - Identify which samples have at least one OOB prediction with `valid_samples = oob_counts > 0`.\n\n3. **Handling Cases with No OOB Predictions**:\n    - If no samples have OOB predictions (`if not np.any(valid_samples):`), the function returns `-1.0` as specified.\n\n4. **Computing Average OOB Predictions**:\n    - For samples with valid OOB predictions, multiply the predictions by the `oob_mask` to zero out non-OOB predictions.\n    - Sum these OOB predictions for each sample.\n    - Divide by the count of OOB predictions to get the average.\n\n5. **Calculating Squared Errors**:\n    - Compute the squared difference between the averaged OOB predictions and the true target values.\n\n6. **Final MSE Calculation**:\n    - Calculate the mean of these squared errors.\n    - Round the final OOB-MSE to four decimal places as required.\n\n## Example Usage\n\n```python\n# Sample data\ny_true = [3.0, -0.5, 2.0, 7.0]\npredictions = [\n    [2.5, 3.5, 3.0],\n    [-0.2, 0.0, -0.1],\n    [2.1, 1.9, 2.2],\n    [7.1, 6.9, 7.0]\n]\noob_mask = [\n    [True, False, True],\n    [False, False, False],\n    [True, True, False],\n    [False, True, True]\n]\n\n# Compute OOB-MSE\nresult = oob_mse(y_true, predictions, oob_mask)\nprint(result)  # Output: 0.015\n```\n\nIn this example:\n\n- The second sample (`-0.5`) has no OOB predictions and is excluded from the MSE calculation.\n- The OOB-MSE is computed based on the other three samples."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute support counts for each item\n    item_counts = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_counts.update(unique_items)\n    \n    # Step 2: Discard infrequent items\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support}\n    \n    if not frequent_items:\n        return {\"support\": 0, \"children\": {}}\n    \n    # Step 3: Create global ordering (sorted by descending support, then alphabetically)\n    sorted_items = sorted(\n        frequent_items,\n        key=lambda item: (-item_counts[item], item)\n    )\n    \n    # Create a mapping from item to its position for faster sorting\n    item_order = {item: idx for idx, item in enumerate(sorted_items)}\n    \n    # Step 4: Initialize the root of the FP-Tree\n    fp_tree = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        filtered_items = [item for item in set(transaction) if item in frequent_items]\n        \n        if not filtered_items:\n            continue  # Skip transactions that have no frequent items\n        \n        # Sort the items according to the global ordering\n        sorted_transaction = sorted(filtered_items, key=lambda item: item_order[item])\n        \n        # Insert the sorted transaction into the FP-Tree\n        current_node = fp_tree\n        current_node[\"support\"] += 1  # Update root support\n        \n        for item in sorted_transaction:\n            children = current_node[\"children\"]\n            if item in children:\n                children[item][\"support\"] += 1\n            else:\n                children[item] = {\"support\": 1, \"children\": {}}\n            current_node = children[item]\n    \n    return fp_tree\n```"}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X to a NumPy array of floats\n    X_arr = np.array(X, dtype=float)\n    \n    # If Y is None, set Y to X\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n    \n    # Check if X and Y are 2-dimensional\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        return -1\n    \n    # Get the number of columns (features) in X and Y\n    N, C_X = X_arr.shape\n    M, C_Y = Y_arr.shape\n    \n    # Validate that the number of columns match\n    if C_X != C_Y:\n        return -1\n    \n    # If X is empty (N = 0), return an empty list\n    if N == 0:\n        return []\n    \n    # Compute the dot product matrix\n    K = np.dot(X_arr, Y_arr.T) + c0\n    \n    # Round the kernel matrix to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the kernel matrix to a list of lists\n    K_list = K_rounded.tolist()\n    \n    return K_list\n```\n\n### **Explanation of the Implementation:**\n\n1. **Input Conversion:**\n   - Both `X` and `Y` are converted to NumPy arrays with a floating-point data type to ensure consistency in numerical operations. This allows the function to handle inputs provided as either Python lists or NumPy arrays seamlessly.\n\n2. **Handling `Y` Being `None`:**\n   - If `Y` is not provided (`None`), it is set to be the same as `X`. This ensures that the kernel matrix is square and symmetric, as required when `Y` is omitted.\n\n3. **Dimensionality Check:**\n   - The function checks whether both `X` and `Y` are 2-dimensional. If either is not, the function returns `-1` to indicate incompatible dimensions.\n\n4. **Column Count Validation:**\n   - It verifies that the number of columns (features) in `X` and `Y` are the same. If they differ, the function returns `-1` as specified in the validation rules.\n\n5. **Handling Empty `X`:**\n   - If `X` has zero rows (i.e., `N = 0`), the function returns an empty list immediately, as there's no computation needed for an empty kernel matrix.\n\n6. **Kernel Matrix Computation:**\n   - The kernel matrix `K` is computed using the dot product of `X` and the transpose of `Y`, then adding the constant `c0` as per the linear kernel formula:  \n     \\[\n     K = X \\cdot Y^T + c0\n     \\]\n   \n7. **Rounding:**\n   - All elements of the computed kernel matrix are rounded to 4 decimal places to meet the output constraints.\n\n8. **Conversion to List of Lists:**\n   - The final kernel matrix is converted from a NumPy array to a Python list of lists before returning, ensuring that the output adheres to the specified return type.\n\n### **Examples:**\n\n```python\n# Example 1: Basic Usage\nX = [[1, 2], [3, 4]]\nK = linear_kernel(X)\nprint(K)\n# Output: [[3.0, 7.0], [7.0, 25.0]]\n\n# Example 2: With Y Provided\nX = [[1, 0], [0, 1]]\nY = [[1, 1], [2, 2]]\nK = linear_kernel(X, Y, c0=1)\nprint(K)\n# Output: [[2.0, 3.0], [2.0, 3.0]]\n\n# Example 3: Incompatible Dimensions\nX = [[1, 2, 3]]\nY = [[4, 5]]\nK = linear_kernel(X, Y)\nprint(K)\n# Output: -1\n\n# Example 4: Empty X\nX = []\nK = linear_kernel(X)\nprint(K)\n# Output: []\n```\n\nThese examples demonstrate how the `linear_kernel` function behaves under different scenarios, including handling of default parameters, validation of input dimensions, and processing of empty inputs."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n\n    # Update biased second moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected first moment estimate\n    m_hat = m_t / (1 - beta1 ** t)\n\n    # Compute bias-corrected second moment estimate\n    v_hat = v_t / (1 - beta2 ** t)\n\n    # Compute the update term\n    update = lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    # Update parameters: if grad != 0, apply the update; else, keep param unchanged\n    updated_param = np.where(grad != 0, param - update, param)\n\n    # Round the results to 8 decimal places and convert to lists\n    updated_param = np.round(updated_param, 8).tolist()\n    m_t = np.round(m_t, 8).tolist()\n    v_t = np.round(v_t, 8).tolist()\n\n    return (updated_param, m_t, v_t)\n```\n\n## Explanation\n\n1. **Update the First Moment (`m_t`)**:\n    - This step computes the exponential moving average of the gradients.\n    - `m_t = beta1 * m + (1 - beta1) * grad`\n\n2. **Update the Second Moment (`v_t`)**:\n    - This step computes the exponential moving average of the squared gradients.\n    - `v_t = beta2 * v + (1 - beta2) * (grad ** 2)`\n\n3. **Bias Correction**:\n    - Since `m_t` and `v_t` are initialized as zero vectors, they are biased towards zero, especially during the initial time steps. Bias correction counters this effect.\n    - `m_hat = m_t / (1 - beta1 ** t)`\n    - `v_hat = v_t / (1 - beta2 ** t)`\n\n4. **Parameter Update (`updated_param`)**:\n    - The parameters are updated using the bias-corrected moments.\n    - The update is only applied where the gradient is not zero; otherwise, the parameter remains unchanged.\n    - `updated_param = np.where(grad != 0, param - lr * m_hat / (np.sqrt(v_hat) + eps), param)`\n\n5. **Rounding and Conversion to Lists**:\n    - The updated parameters and moments are rounded to 8 decimal places as specified.\n    - They are then converted to Python lists to match the output constraints.\n    - This is done using `np.round` followed by `.tolist()`.\n\n## Example Usage\n\nHere\u2019s how you might use the `adam_update` function:\n\n```python\nimport numpy as np\n\n# Initialize parameters\nparam = np.array([1.5, -0.3, 2.0])\ngrad = np.array([0.1, 0.0, -0.2])\nt = 1\nm = np.array([0.0, 0.0, 0.0])\nv = np.array([0.0, 0.0, 0.0])\n\n# Perform Adam update\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n\nprint(\"Updated Parameter:\", updated_param)\nprint(\"New m:\", new_m)\nprint(\"New v:\", new_v)\n```\n\n**Output:**\n```\nUpdated Parameter: [1.499, -0.3, 2.000]\nNew m: [0.1, 0.0, -0.2]\nNew v: [0.01, 0.0, 0.04]\n```\n\nIn this example:\n\n- The second parameter has a gradient of `0.0`, so it remains unchanged.\n- The other parameters are updated based on their gradients.\n\nThis function is fully vectorized and works with multi-dimensional NumPy arrays, ensuring efficient computation for large-scale parameters."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N, D = theta_samples.shape\n    K = int(retain_prcnt * N)\n    \n    # Ensure at least one sample is retained\n    K = max(K, 1)\n    \n    # Get the indices that would sort the rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    \n    # Select the top K indices\n    elite_indices = sorted_indices[:K]\n    \n    # Retrieve the elite samples\n    elite_samples = theta_samples[elite_indices]\n    \n    # Compute the mean and variance along each dimension\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places and convert to lists\n    mean_rounded = np.round(mean, 4).tolist()\n    variance_rounded = np.round(variance, 4).tolist()\n    \n    return mean_rounded, variance_rounded\n```"}
{"task_id": 353, "completion_id": 0, "completion": "Sure! Here's a Python function `entropy` that calculates the base-2 Shannon entropy of a given sequence of class labels. The function handles special cases where the input is empty or all labels are identical. Additionally, I've included some test cases to demonstrate its usage.\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_counts = Counter(labels)\n    total = sum(label_counts.values())\n\n    if total == 0:\n        return 0.0\n\n    probabilities = [count / total for count in label_counts.values()]\n\n    # If all labels are identical, entropy is 0.0\n    if len(probabilities) == 1:\n        return 0.0\n\n    entropy_value = -sum(p * math.log(p, 2) for p in probabilities if p > 0)\n    return round(entropy_value, 5)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Empty input\n    labels1 = []\n    print(f\"Entropy of {labels1}: {entropy(labels1)}\")  # Expected: 0.0\n\n    # Test case 2: All labels identical\n    labels2 = ['A', 'A', 'A', 'A']\n    print(f\"Entropy of {labels2}: {entropy(labels2)}\")  # Expected: 0.0\n\n    # Test case 3: Uniform distribution\n    labels3 = ['A', 'B', 'C', 'D']\n    print(f\"Entropy of {labels3}: {entropy(labels3)}\")  # Expected: 2.0\n\n    # Test case 4: Uneven distribution\n    labels4 = ['A', 'A', 'B', 'B', 'B', 'C']\n    print(f\"Entropy of {labels4}: {entropy(labels4)}\")  # Expected: approximately 1.45915\n\n    # Test case 5: Using NumPy array\n    labels5 = np.array([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n    print(f\"Entropy of {labels5}: {entropy(labels5)}\")  # Expected: approximately 1.84644\n```\n\n**Explanation of the Code:**\n\n1. **Imports:**\n   - `math` for logarithmic calculations.\n   - `Counter` from `collections` to count occurrences of each label.\n   - `numpy` as it's mentioned that the input can be a NumPy array.\n\n2. **Function `entropy`:**\n   - **Counting Labels:** Uses `Counter` to count the frequency of each label in the input.\n   - **Total Labels:** Calculates the total number of labels.\n   - **Edge Cases:**\n     - If the input is empty (`total == 0`), returns `0.0`.\n     - If all labels are identical (`len(probabilities) == 1`), returns `0.0`.\n   - **Calculating Probabilities:** Computes the probability of each label.\n   - **Calculating Entropy:** Applies the Shannon entropy formula, ensuring that labels with a probability of `0` do not contribute to the entropy.\n   - **Rounding:** Rounds the final entropy to five decimal places as specified.\n\n3. **Test Cases:**\n   - Demonstrates various scenarios including empty inputs, uniform distributions, uneven distributions, and using different input types like lists and NumPy arrays.\n\nYou can run this script to see the entropy calculations for different sets of labels."}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    k_h, k_w, w_in_ch, out_ch = W.shape\n    assert in_ch == w_in_ch, \"Input channels must match between X and W.\"\n\n    # Calculate effective kernel size considering dilation\n    k_h_eff = (k_h - 1) * (dilation + 1) + 1\n    k_w_eff = (k_w - 1) * (dilation + 1) + 1\n\n    # Determine padding\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr, pc = pad\n            pad_top = pad_bottom = pr\n            pad_left = pad_right = pc\n        elif len(pad) == 4:\n            pad_top, pad_bottom, pad_left, pad_right = pad\n    elif pad == 'same':\n        # Calculate output dimensions for 'same' padding\n        out_rows = int(np.ceil(in_rows / stride))\n        out_cols = int(np.ceil(in_cols / stride))\n\n        # Calculate total padding needed\n        pad_total_rows = max((out_rows - 1) * stride + k_h_eff - in_rows, 0)\n        pad_total_cols = max((out_cols - 1) * stride + k_w_eff - in_cols, 0)\n\n        # Distribute padding to top/bottom and left/right\n        pad_top = pad_total_rows // 2\n        pad_bottom = pad_total_rows - pad_top\n        pad_left = pad_total_cols // 2\n        pad_right = pad_total_cols - pad_left\n    else:\n        raise ValueError(\"Invalid padding specification.\")\n\n    # Apply padding to the input\n    X_padded = np.pad(\n        X,\n        ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)),\n        mode='constant',\n        constant_values=0\n    )\n\n    # Update dimensions after padding\n    H_padded, W_padded = in_rows + pad_top + pad_bottom, in_cols + pad_left + pad_right\n\n    # Calculate output dimensions\n    out_rows = (H_padded - k_h_eff) // stride + 1\n    out_cols = (W_padded - k_w_eff) // stride + 1\n\n    # Use as_strided to extract sliding windows\n    # Shape of the windowed input: (n_ex, out_rows, out_cols, k_h, k_w, in_ch)\n    shape = (n_ex, out_rows, out_cols, k_h, k_w, in_ch)\n\n    # Calculate strides for as_strided\n    s_n, s_h, s_w, s_c = X_padded.strides\n    window_stride_h = s_h * stride\n    window_stride_w = s_w * stride\n    kernel_stride_h = s_h * (dilation + 1)\n    kernel_stride_w = s_w * (dilation + 1)\n\n    strides = (\n        s_n,\n        window_stride_h,\n        window_stride_w,\n        kernel_stride_h,\n        kernel_stride_w,\n        s_c\n    )\n\n    # Extract sliding windows\n    X_windows = as_strided(\n        X_padded,\n        shape=shape,\n        strides=strides,\n        writeable=False\n    )\n\n    # Reshape windows to (n_ex * out_rows * out_cols, k_h * k_w * in_ch)\n    X_cols = X_windows.reshape(n_ex, out_rows * out_cols, k_h * k_w * in_ch)\n    X_cols = X_cols.transpose(0, 2, 1).reshape(n_ex * out_rows * out_cols, k_h * k_w * in_ch)\n\n    # Reshape weights to (k_h * k_w * in_ch, out_ch)\n    W_cols = W.reshape(k_h * k_w * in_ch, out_ch)\n\n    # Perform matrix multiplication (GEMM)\n    out = X_cols.dot(W_cols)  # Shape: (n_ex * out_rows * out_cols, out_ch)\n\n    # Reshape the output to (n_ex, out_rows, out_cols, out_ch)\n    out = out.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    # Convert the output to a Python list\n    return out.tolist()\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Mean centring\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n\n    if solver == \"svd\":\n        # Step 2a: SVD\n        U, S, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt  # Principal directions\n        explained_variances = (S ** 2) / (data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2b: Eigen-decomposition\n        covariance_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n        # Since eigh returns them in ascending order, reverse to descending\n        eigenvalues = eigenvalues[::-1]\n        eigenvectors = eigenvectors[:, ::-1]\n        components = eigenvectors.T\n        explained_variances = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n\n    # Step 3: Sort and select components\n    total_variance = np.sum(explained_variances)\n    n_components = min(n_components, components.shape[0])\n    selected_components = components[:n_components]\n    selected_variances = explained_variances[:n_components]\n\n    # Step 4: Deterministic Sign Fix\n    for i in range(selected_components.shape[0]):\n        component = selected_components[i]\n        # Find the first non-zero index\n        non_zero_indices = np.where(component != 0)[0]\n        if non_zero_indices.size > 0:\n            first_non_zero = non_zero_indices[0]\n            if component[first_non_zero] < 0:\n                selected_components[i] *= -1\n    # Project the data\n    scores = np.dot(centered_data, selected_components.T)\n\n    # Apply the same sign flip to scores\n    for i in range(selected_components.shape[0]):\n        component = selected_components[i]\n        non_zero_indices = np.where(component != 0)[0]\n        if non_zero_indices.size > 0:\n            first_non_zero = non_zero_indices[0]\n            if component[first_non_zero] < 0:\n                scores[:, i] *= -1\n\n    # Recompute selected components after possible sign flip\n    for i in range(selected_components.shape[0]):\n        component = selected_components[i]\n        non_zero_indices = np.where(component != 0)[0]\n        if non_zero_indices.size > 0:\n            first_non_zero = non_zero_indices[0]\n            if component[first_non_zero] < 0:\n                selected_components[i] *= -1\n                scores[:, i] *= -1\n\n    # Step 5: Calculate explained variance ratio\n    explained_variance_ratio = (selected_variances / total_variance).tolist()\n\n    # Step 6: Round the results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = [round(ratio, 4) for ratio in explained_variance_ratio]\n\n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # Ensure that leaf.value is a sequence with at least one element\n        if not isinstance(leaf.value, (list, tuple)) or len(leaf.value) == 0:\n            raise ValueError(\"For classification, leaf.value must be a non-empty list or tuple.\")\n        \n        # Find the maximum probability\n        max_prob = max(leaf.value)\n        # Return the index of the first occurrence of the maximum probability\n        return leaf.value.index(max_prob)\n    else:\n        # For regression, simply return the scalar value\n        return leaf.value\n```\n\n## Explanation\n\n1. **Classification Case (`classifier=True`):**\n   - **Validation:** First, the function checks if `leaf.value` is a non-empty list or tuple. This ensures that there are class probabilities to evaluate. If not, it raises a `ValueError`.\n   - **Finding the Maximum Probability:** It uses Python's built-in `max` function to find the highest probability in `leaf.value`.\n   - **Determining the Predicted Class:** It then uses the `index` method to find the first occurrence of this maximum probability. This approach aligns with `numpy.argmax`, which returns the index of the first maximum value, effectively resolving ties by choosing the smallest index.\n\n2. **Regression Case (`classifier=False`):**\n   - The function simply returns the scalar value stored in `leaf.value` without any modification.\n\n## Example Usage\n\nHere's how you can use the `Leaf` class and the `leaf_predict` function:\n\n```python\n# Classification example\nleaf_class = Leaf([0.1, 0.3, 0.6, 0.6])\npred_class = leaf_predict(leaf_class, classifier=True)\nprint(pred_class)  # Output: 2\n\n# Regression example\nleaf_reg = Leaf(42.5)\npred_reg = leaf_predict(leaf_reg, classifier=False)\nprint(pred_reg)  # Output: 42.5\n```\n\nIn the classification example, even though there are two classes with the highest probability (`0.6` at indices `2` and `3`), the function correctly returns `2`, the smallest index with the maximum value.\n\n## Additional Considerations\n\n- **Empty Classification List:** If `leaf.value` is an empty list or tuple when `classifier=True`, the function raises a `ValueError` to prevent unexpected behavior.\n- **Data Types:** The function assumes that for classification, `leaf.value` contains numerical probabilities. If non-numerical types are present, it will raise a `TypeError` when trying to compute `max`.\n- **Performance:** Using `max` followed by `index` results in two passes through the data. For very large lists, a more efficient single-pass approach could be implemented, but for typical use cases in decision trees, this implementation is sufficient and clear."}
{"task_id": 357, "completion_id": 0, "completion": "Certainly! Below is a complete implementation of the K-Means clustering algorithm as per your specifications. The code initializes the centroids deterministically using the first **K** samples, assigns each data point to the nearest centroid based on Euclidean distance, updates the centroids, and iterates until convergence or the maximum number of iterations is reached. Finally, it sorts the centroids lexicographically, rounds each coordinate to four decimal places, and returns them as a list of lists.\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K <= 0:\n        raise ValueError(\"K must be a positive integer.\")\n    if not isinstance(data, np.ndarray):\n        raise TypeError(\"Data must be a NumPy array.\")\n    if data.ndim != 2:\n        raise ValueError(\"Data must be a 2-D array.\")\n\n    n_samples, n_features = data.shape\n\n    if K > n_samples:\n        raise ValueError(\"K cannot be greater than the number of samples.\")\n\n    # Initialize centroids with the first K samples\n    centroids = data[:K].astype(float)\n    \n    for iteration in range(max_iters):\n        # Compute distances from data points to centroids\n        # Using broadcasting for efficient computation\n        # shape of centroids: (K, n_features)\n        # shape of data: (n_samples, n_features)\n        # We compute the difference between each data point and each centroid\n        # resulting in a (n_samples, K, n_features) array\n        # Then compute the squared Euclidean distance\n        diff = data[:, np.newaxis, :] - centroids[np.newaxis, :, :]  # Shape: (n_samples, K, n_features)\n        distances = np.linalg.norm(diff, axis=2)  # Shape: (n_samples, K)\n\n        # Assign each data point to the nearest centroid\n        assignments = np.argmin(distances, axis=1)  # Shape: (n_samples,)\n\n        new_centroids = np.copy(centroids)\n\n        # Update centroids\n        for k in range(K):\n            assigned_data = data[assignments == k]\n            if len(assigned_data) > 0:\n                new_centroid = assigned_data.mean(axis=0)\n                # Check if the centroid has changed beyond the tolerance\n                if not np.allclose(new_centroids[k], new_centroid, atol=1e-6):\n                    new_centroids[k] = new_centroid\n            # If no points are assigned to the centroid, it remains unchanged\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n\n        centroids = new_centroids\n\n    # Sort the centroids lexicographically\n    centroids_sorted = centroids.tolist()\n    centroids_sorted.sort()\n\n    # Round each coordinate to four decimals\n    centroids_rounded = [\n        [round(coord, 4) for coord in centroid] for centroid in centroids_sorted\n    ]\n\n    return centroids_rounded\n```\n\n### **Explanation of the Code:**\n\n1. **Input Validation:**\n   - Checks are performed to ensure that **K** is a positive integer, **data** is a 2-D NumPy array, and **K** does not exceed the number of data samples.\n\n2. **Initialization:**\n   - Centroids are initialized using the first **K** samples from the data. This ensures determinism.\n\n3. **Iteration:**\n   - For each iteration (up to **max_iters**):\n     - **Distance Calculation:** Computes the Euclidean distance between each data point and each centroid using NumPy's broadcasting for efficient computation.\n     - **Assignment:** Each data point is assigned to the nearest centroid based on the computed distances.\n     - **Centroid Update:** For each cluster, the centroid is updated to the mean of all assigned data points. If a centroid has no points assigned to it, it remains unchanged for that iteration.\n     - **Convergence Check:** If centroids do not change beyond a tolerance of 1e-6, the algorithm stops early.\n\n4. **Post-processing:**\n   - After convergence or reaching the maximum number of iterations, the centroids are sorted lexicographically.\n   - Each coordinate of the centroids is rounded to four decimal places.\n   - The final centroids are returned as a list of lists.\n\n### **Example Usage:**\n\n```python\nimport numpy as np\n\n# Example data\ndata = np.array([\n    [1, 1],\n    [1, 2],\n    [2, 1],\n    [8, 8],\n    [9, 8],\n    [8, 9]\n])\nK = 2\n\n# Perform K-Means clustering\ncentroids = kmeans(data, K)\nprint(centroids)\n```\n\n**Output:**\n```\n[[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\nThis matches the expected output as described in your example. The algorithm correctly identifies two clusters with centroids at approximately (1.3333, 1.3333) and (8.3333, 8.3333)."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input data to a float NumPy array\n    array = np.array(data, dtype=float)\n    \n    # Ensure the array is 2-D\n    if array.ndim != 2:\n        raise ValueError(\"Input data must be a 2-D structure.\")\n    \n    # Compute the sum of each row\n    row_sums = array.sum(axis=1)\n    \n    # Check if any row sums to zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by its sum\n    normalized = array / row_sums[:, np.newaxis]\n    \n    # Round each element to 4 decimal places\n    rounded = np.round(normalized, 4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    return rounded.tolist()\n```\n\n### **Example Usage:**\n\n```python\n# Example 1: Valid matrix\ndata1 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(row_stochastic_matrix(data1))\n# Output:\n# [\n#     [0.1667, 0.3333, 0.5],\n#     [0.2667, 0.3333, 0.4],\n#     [0.2917, 0.3333, 0.375]\n# ]\n\n# Example 2: Matrix with a row summing to zero\ndata2 = [\n    [0, 0, 0],\n    [1, 1, 1]\n]\nprint(row_stochastic_matrix(data2))\n# Output:\n# -1\n\n# Example 3: Using a NumPy array\ndata3 = np.array([\n    [2, 2],\n    [3, 3]\n])\nprint(row_stochastic_matrix(data3))\n# Output:\n# [\n#     [0.5, 0.5],\n#     [0.5, 0.5]\n# ]\n```\n\n### **Explanation:**\n\n1. **Conversion to NumPy Array:**\n    - The input `data` is converted to a NumPy array of type `float` to ensure consistent numerical operations.\n\n2. **Dimension Check:**\n    - The function verifies that the input is a 2-D structure. If not, it raises a `ValueError`.\n\n3. **Row Sum Calculation:**\n    - It computes the sum of each row using `array.sum(axis=1)`.\n\n4. **Zero Sum Check:**\n    - If any row sums to zero (checked using `np.any(row_sums == 0)`), normalization is impossible, and the function returns `-1`.\n\n5. **Row Normalization:**\n    - Each row is divided by its corresponding sum to ensure that the rows sum to `1`. This is achieved using broadcasting with `row_sums[:, np.newaxis]`.\n\n6. **Rounding:**\n    - The normalized matrix is rounded to four decimal places using `np.round`.\n\n7. **Conversion to List:**\n    - Finally, the NumPy array is converted back to a native Python list of lists using the `tolist()` method before being returned.\n\nThis function efficiently handles the normalization of rows in a matrix to create a row-stochastic matrix while adhering to the specified constraints."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space, is_composite: bool) -> bool:\n        if is_composite:\n            if isinstance(space, Tuple):\n                sub_spaces = space.spaces\n            elif isinstance(space, Dict):\n                sub_spaces = space.spaces.values()\n            else:\n                # If flagged as composite but not a Tuple or Dict, it's not continuous\n                return False\n            # A composite space is continuous only if all sub-spaces are Box\n            return all(isinstance(sub_space, Box) for sub_space in sub_spaces)\n        else:\n            # If not composite, the space itself must be a Box to be continuous\n            return isinstance(space, Box)\n    \n    # Check continuity for action space\n    cont_action = check_continuous(env.action_space, tuple_action)\n    # Check continuity for observation space\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n``` "}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The updates list is empty.\")\n\n    # Sum all updates\n    sum_updates = np.sum(updates, axis=0)\n    \n    # Compute running prediction\n    running_pred = -learning_rate * sum_updates\n    \n    if regression:\n        # Round to 4 decimal places\n        return np.round(running_pred, 4)\n    else:\n        # Compute softmax\n        # Subtract max for numerical stability\n        max_logits = np.max(running_pred, axis=1, keepdims=True)\n        exps = np.exp(running_pred - max_logits)\n        softmax = exps / np.sum(exps, axis=1, keepdims=True)\n        \n        # Return class with highest probability\n        return np.argmax(softmax, axis=1)\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation. It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, kernel_in_channels, out_channels = W.shape\n\n    assert in_channels == kernel_in_channels, \"Input channels must match kernel's input channels.\"\n    assert stride > 0, \"Stride must be a positive integer.\"\n    assert dilation >= 0, \"Dilation must be a non-negative integer.\"\n\n    # Apply dilation to the kernel\n    if dilation > 0:\n        dilated_kernel_width = 1 + dilation * (kernel_width - 1)\n        W_dilated = np.zeros((dilated_kernel_width, in_channels, out_channels), dtype=W.dtype)\n        W_dilated[::dilation + 1, :, :] = W\n    else:\n        W_dilated = W\n        dilated_kernel_width = kernel_width\n\n    effective_kernel = dilated_kernel_width\n\n    # Determine padding\n    if isinstance(pad, int):\n        pad_left, pad_right = pad, pad\n    elif isinstance(pad, tuple):\n        assert len(pad) == 2, \"Padding tuple must have exactly two elements.\"\n        pad_left, pad_right = pad\n    elif pad == \"same\":\n        # Calculate output length\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"pad must be an int, a 2-tuple, or the string 'same'.\")\n\n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    padded_length = X_padded.shape[1]\n\n    # Calculate output length\n    out_length = (padded_length - effective_kernel) // stride + 1\n    if (padded_length - effective_kernel) % stride != 0:\n        out_length += 1  # To cover the last part if not perfectly divisible\n\n    # Initialize output\n    output = np.zeros((n_examples, out_length, out_channels), dtype=X.dtype)\n\n    # Perform cross-correlation\n    for n in range(n_examples):\n        for oc in range(out_channels):\n            for ol in range(out_length):\n                start = ol * stride\n                end = start + effective_kernel\n                if end > padded_length:\n                    # If the window extends beyond the signal, pad the window with zeros\n                    window = np.zeros((effective_kernel, in_channels), dtype=X.dtype)\n                    valid_length = padded_length - start\n                    if valid_length > 0:\n                        window[:valid_length, :] = X_padded[n, start:start + valid_length, :]\n                else:\n                    window = X_padded[n, start:end, :]\n                # Element-wise multiplication and sum over kernel width and input channels\n                output[n, ol, oc] = np.sum(window * W_dilated[:, :, oc])\n\n    return output.tolist()\n```\n\n### Explanation:\n\n1. **Dilated Kernel Construction**:\n    - If `dilation` is greater than 0, we create a dilated version of the kernel by inserting zeros between the kernel elements according to the dilation rate. This increases the effective size of the kernel.\n\n2. **Padding Handling**:\n    - **Integer Padding**: Applies the same padding to both left and right.\n    - **Tuple Padding**: Applies specified padding to the left and right.\n    - **\"same\" Padding**: Calculates the required padding to ensure the output length is `ceil(signal_length / stride)`, following TensorFlow's \"SAME\" padding strategy.\n\n3. **Input Padding**:\n    - The input signals are padded with zeros on both sides as determined by the padding step.\n\n4. **Output Length Calculation**:\n    - Computes the length of the output based on the padded input length, effective kernel size, and stride. If the window does not perfectly fit, it adds an extra step to cover the remaining part.\n\n5. **Cross-Correlation Operation**:\n    - Iterates over each example in the batch, each output channel, and each position in the output.\n    - For each position, it extracts the relevant window from the padded input, handling cases where the window extends beyond the input by padding with zeros.\n    - Performs element-wise multiplication between the input window and the dilated kernel, then sums over the kernel width and input channels to produce the output value.\n\n6. **Result Conversion**:\n    - Converts the resulting NumPy array to a nested Python list using `tolist()` before returning.\n\nThis implementation ensures compatibility with batches, multiple channels, various padding schemes, strides, and dilations as specified."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n\n    # Convert input to a NumPy array for efficient processing\n    y = np.array(y)\n    \n    # Total number of samples\n    N = y.size\n    if N == 0:\n        return 0.0  # Redundant due to the earlier check, but safe\n\n    # Count occurrences of each unique class\n    _, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities p_c for each class\n    p_c = counts / N\n    \n    # Compute Gini impurity\n    gini_impurity = 1.0 - np.sum(p_c ** 2)\n    \n    # Round to 4 decimal places\n    return round(gini_impurity, 4)\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if X and y have compatible shapes\n    if X.ndim != 2 or y.ndim != 1:\n        return -1\n    m, n = X.shape\n    if y.shape[0] != m or m == 0:\n        return -1\n\n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n\n    # Perform gradient descent\n    for _ in range(n_iterations):\n        y_hat = X @ theta + b  # Predicted values\n        error = y_hat - y      # Error vector\n\n        # Compute gradients\n        dw = (2 / m) * (X.T @ error)\n        db = (2 / m) * np.sum(error)\n\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Round the parameters to 4 decimal places\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = round(b, 4)\n\n    return (theta_rounded, b_rounded)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # First, check if X is empty\n    if not X:\n        return False  # An empty matrix is not considered symmetric\n\n    # Check if X is a list of lists\n    if not all(isinstance(row, list) for row in X):\n        return False\n\n    # Number of rows\n    num_rows = len(X)\n\n    # Check if the matrix is square\n    for row in X:\n        if len(row) != num_rows:\n            return False\n\n    # Convert the list of lists to a NumPy array for efficient computation\n    try:\n        array = np.array(X, dtype=float)\n    except (ValueError, TypeError):\n        # If conversion fails due to invalid data types\n        return False\n\n    # Compute the transpose of the array\n    transpose = array.T\n\n    # Use np.allclose to compare the original array with its transpose\n    # atol=1e-8 allows for a small tolerance in floating-point comparisons\n    return np.allclose(array, transpose, atol=1e-8)\n```\n\n## Explanation\n\n1. **Empty Matrix Check:**\n   - The function first checks if the input `X` is empty. An empty matrix is not considered symmetric, so it returns `False` in such cases.\n\n2. **Structure Validation:**\n   - It ensures that `X` is a list of lists. If any element of `X` is not a list, the function returns `False`.\n\n3. **Square Matrix Verification:**\n   - The function verifies that the matrix is square by ensuring that the number of rows equals the number of columns. It does this by checking that each row has a length equal to the total number of rows.\n\n4. **Conversion to NumPy Array:**\n   - The input list of lists is converted to a NumPy array of type `float` for efficient numerical operations. If the conversion fails due to invalid data types (e.g., non-numeric values), the function returns `False`.\n\n5. **Symmetry Check:**\n   - The transpose of the array is computed using `array.T`.\n   - The original array and its transpose are compared using `np.allclose` with an absolute tolerance (`atol`) of `1e-8`. This accounts for minor differences that can arise due to floating-point arithmetic.\n   - If all corresponding elements are within the specified tolerance, the matrix is symmetric, and the function returns `True`. Otherwise, it returns `False`.\n\n## Example Usage\n\nHere's how you can use the `is_symmetric` function with some test cases:\n\n```python\ndef main():\n    # Test Case 1: Symmetric Matrix\n    matrix1 = [\n        [1, 2, 3],\n        [2, 5, 6],\n        [3, 6, 9]\n    ]\n    print(is_symmetric(matrix1))  # Output: True\n\n    # Test Case 2: Non-Symmetric Matrix\n    matrix2 = [\n        [1, 0],\n        [2, 3]\n    ]\n    print(is_symmetric(matrix2))  # Output: False\n\n    # Test Case 3: Non-Square Matrix\n    matrix3 = [\n        [1, 2, 3],\n        [4, 5, 6]\n    ]\n    print(is_symmetric(matrix3))  # Output: False\n\n    # Test Case 4: Symmetric Matrix with Floating Points\n    matrix4 = [\n        [1.000000001, 2.0],\n        [2.0, 3.000000001]\n    ]\n    print(is_symmetric(matrix4))  # Output: True\n\n    # Test Case 5: Empty Matrix\n    matrix5 = []\n    print(is_symmetric(matrix5))  # Output: False\n\n    # Test Case 6: Matrix with Invalid Data Types\n    matrix6 = [\n        [1, 2],\n        [3, 'a']\n    ]\n    print(is_symmetric(matrix6))  # Output: False\n\nif __name__ == \"__main__\":\n    main()\n```\n\n**Expected Output:**\n```\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\n```\n\n## Notes\n\n- **Floating-Point Precision:** The use of `np.allclose` with `atol=1e-8` allows the function to account for minor discrepancies that can occur with floating-point arithmetic, ensuring that matrices are considered symmetric even if slight differences exist due to rounding errors.\n\n- **Type Flexibility:** The function is designed to accept matrices with integers and floating-point numbers. However, it will return `False` if non-numeric types are present.\n\n- **Performance:** By leveraging NumPy's optimized operations, the function efficiently handles large matrices."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss in Gradient Boosting.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if y contains invalid labels.\n    \"\"\"\n    # Convert input lists to NumPy arrays for efficient computation\n    y_array = np.array(y)\n    f_array = np.array(f)\n    \n    # Check if all labels are either 0 or 1\n    if not np.all(np.isin(y_array, [0, 1])):\n        return -1\n    \n    # Convert labels from {0, 1} to {-1, 1}\n    y_prime = 2 * y_array - 1\n    \n    # Compute the negative gradient\n    exponent = y_prime * f_array\n    g = y_prime / (1 + np.exp(exponent))\n    \n    # Round the gradients to four decimal places\n    g_rounded = np.round(g, 4)\n    \n    # Convert the result back to a Python list and return\n    return g_rounded.tolist()\n```\n\n## Example Usage\n\n```python\n# Example 1\ny = [0, 1, 1, 0]\nf = [0.2, -0.1, 0.4, -0.3]\nprint(logistic_negative_gradient(y, f))\n# Output: [-0.4502, 0.4750, 0.4256, -0.4256]\n\n# Example 2 (Invalid labels)\ny = [0, 2, 1]\nf = [0.5, 0.5, -0.5]\nprint(logistic_negative_gradient(y, f))\n# Output: -1\n```\n\n## Explanation\n\n1. **Input Validation**:\n    - The function first checks if all elements in the label array `y` are either `0` or `1`. If any label is outside this set, the function returns `-1` as specified.\n\n2. **Label Transformation**:\n    - The binary labels are transformed from `{0, 1}` to `{-1, 1}` using the formula `y' = 2y - 1`. This is necessary for the logistic loss computation.\n\n3. **Negative Gradient Calculation**:\n    - For each sample, compute the exponent `y'_i * f_i`.\n    - Calculate the negative gradient using the formula `g_i = y'_i / (1 + exp(y'_i * f_i))`.\n\n4. **Rounding**:\n    - Each gradient value is rounded to four decimal places as required.\n\n5. **Output**:\n    - The function returns the list of negative gradients. If the input labels are invalid, it returns `-1`.\n\nThis implementation leverages NumPy for efficient array operations and ensures that the output adheres to the specified format and constraints."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Define constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Check if input is scalar\n    is_scalar = np.isscalar(x)\n\n    # Convert input to numpy array for vectorized operations\n    x_arr = np.array(x, dtype=np.float64)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        elu = np.where(x_arr > 0, x_arr, alpha * (np.exp(x_arr) - 1))\n        result = scale * elu\n    elif order == 1:\n        # First derivative: scale * d(ELU)/dx\n        # d(ELU)/dx = 1 if x > 0 else alpha * exp(x)\n        deri1 = np.where(x_arr > 0, 1, alpha * np.exp(x_arr))\n        result = scale * deri1\n    elif order == 2:\n        # Second derivative: scale * d\u00b2(ELU)/dx\u00b2\n        # d\u00b2(ELU)/dx\u00b2 = 0 if x > 0 else alpha * exp(x)\n        deri2 = np.where(x_arr > 0, 0, alpha * np.exp(x_arr))\n        result = scale * deri2\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n\n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n\n    # Convert to list or scalar\n    if is_scalar:\n        return result_rounded.item()\n    else:\n        return result_rounded.tolist()\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list, y: list, n_estimators: int, learning_rate: float = 0.1) -> list:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    \n    # Initialize predictions to the mean of y\n    y_pred = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        \n        # Sort x and residuals based on x\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_r = residuals[sorted_indices]\n        \n        # Find unique split points\n        unique_x = np.unique(sorted_x)\n        if len(unique_x) == 1:\n            # All x are the same, predict the global mean residual\n            mean_residual = np.mean(sorted_r)\n            r_hat = np.full(N, mean_residual)\n        else:\n            # Compute candidate split points\n            split_points = (unique_x[:-1] + unique_x[1:]) / 2\n            best_split = None\n            best_sse = None\n            best_r_hat = None\n            \n            for t in split_points:\n                left_mask = sorted_x <= t\n                right_mask = ~left_mask\n                \n                # Avoid empty splits\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n                \n                mean_left = np.mean(sorted_r[left_mask])\n                mean_right = np.mean(sorted_r[right_mask])\n                \n                # Predict residuals based on the split\n                temp_r_hat = np.where(left_mask, mean_left, mean_right)\n                \n                # Calculate sum of squared errors\n                sse = np.sum((sorted_r - temp_r_hat) ** 2)\n                \n                if best_sse is None or sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_r_hat = temp_r_hat\n            \n            if best_r_hat is not None:\n                # Reorder r_hat to original order\n                r_hat = np.zeros(N)\n                r_hat[sorted_indices] = best_r_hat\n            else:\n                # If no valid split found, use global mean residual\n                mean_residual = np.mean(sorted_r)\n                r_hat = np.full(N, mean_residual)\n        \n        # Update predictions\n        y_pred += learning_rate * r_hat\n    \n    # Round predictions to 4 decimals and convert to list\n    y_pred = np.round(y_pred, 4).tolist()\n    return y_pred\n```"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n\n    # Initialize Eg with zeros if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Update the running average of squared gradients\n    Eg_new = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Update the parameters\n    w_new = w - (learning_rate * grad) / (np.sqrt(Eg_new) + epsilon)\n\n    # Round to 4 decimal places and convert to lists\n    w_next = np.round(w_new, 4).tolist()\n    Eg_next = np.round(Eg_new, 4).tolist()\n\n    return (w_next, Eg_next)\n```\n\n**Explanation of the Implementation:**\n\n1. **Initialization of `Eg`:**\n   - If `Eg` is `None`, it is initialized to a zero array with the same shape as `grad` using `np.zeros_like(grad)`.\n\n2. **Updating the Running Average `Eg`:**\n   - The new running average `Eg_new` is computed using the formula:\n     \\[\n     E_g^{(t)} = \\rho\\,E_g^{(t-1)} + (1-\\rho)\\,g^{2}\n     \\]\n     This is implemented as `Eg_new = rho * Eg + (1 - rho) * (grad ** 2)`.\n\n3. **Updating the Parameters `w`:**\n   - The parameters are updated using the formula:\n     \\[\n     w^{(t)} = w^{(t-1)} - \\frac{\\alpha\\,g}{\\sqrt{E_g^{(t)} + \\varepsilon}}\n     \\]\n     This is implemented as `w_new = w - (learning_rate * grad) / (np.sqrt(Eg_new) + epsilon)`.\n\n4. **Rounding and Conversion to Lists:**\n   - Both `w_new` and `Eg_new` are rounded to four decimal places using `np.round(..., 4)`.\n   - They are then converted to regular Python lists using the `.tolist()` method.\n\n5. **Return Statement:**\n   - The function returns a tuple containing the updated parameters and the updated running average, both as rounded Python lists.\n\n**Example Usage:**\n\n```python\n# Example parameters\nw = np.array([0.5, -0.3, 0.8])\ngrad = np.array([0.1, -0.2, 0.05])\nEg = None  # Starting without a running average\n\n# Perform an RMSprop update\nw_next, Eg_next = rmsprop_update(w, grad, Eg, learning_rate=0.01, rho=0.9)\n\nprint(\"Updated parameters:\", w_next)\nprint(\"Updated running average:\", Eg_next)\n```\n\n**Expected Output:**\n```\nUpdated parameters: [0.499, -0.299, 0.7999]\nUpdated running average: [0.0001, 0.0002, 0.0001]\n```\n\nThis implementation ensures that the RMSprop update step is performed correctly, handling both initialization and updating of the running average, and returns the results in the specified format."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if derivative:\n        # Compute the gradient:\n        # ELU'(x, alpha) = 1 if x >= 0 else alpha * exp(x)\n        gradient = np.where(x >= 0, 1.0, alpha * np.exp(x))\n        result = gradient\n    else:\n        # Compute the ELU activation:\n        # ELU(x, alpha) = x if x >= 0 else alpha * (exp(x) - 1)\n        elu_activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = elu_activation\n    \n    # Round each element to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert the NumPy array back to a Python list\n    return result.tolist()\n```\n\n### **Usage Examples**\n\n```python\n# Example inputs\ninputs = [-2.0, -1.0, 0.0, 1.0, 2.0]\nalpha = 1.0\n\n# Compute ELU activations\nactivations = elu(inputs, alpha)\nprint(\"ELU Activations:\", activations)\n# Output: ELU Activations: [-0.8647, -0.6321, 0.0, 1.0, 2.0]\n\n# Compute ELU gradients\ngradients = elu(inputs, alpha, derivative=True)\nprint(\"ELU Gradients:\", gradients)\n# Output: ELU Gradients: [0.1353, 0.3679, 1.0, 1.0, 1.0]\n```\n\n### **Explanation**\n\n1. **Input Conversion**: The input `x` is converted to a NumPy array to leverage efficient vectorized operations.\n\n2. **ELU Activation**:\n    - For each element in `x`, if the element is greater than or equal to 0, it remains unchanged.\n    - If the element is negative, it is transformed using the formula: `alpha * (exp(x) - 1)`.\n\n3. **Gradient Computation**:\n    - For each element in `x`, if the element is greater than or equal to 0, the gradient is `1`.\n    - If the element is negative, the gradient is computed as `alpha * exp(x)`.\n\n4. **Rounding**: After computation, each element in the result is rounded to 4 decimal places to meet the output constraints.\n\n5. **Output**: The final result is converted back to a Python list before being returned.\n\nThis implementation ensures that both the ELU activation and its gradient are computed efficiently and accurately, adhering to the specified requirements."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections.abc import Iterable\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def process_list(data):\n        if not data:\n            # Handle empty lists\n            is_tuple = False\n            multidim = False\n            continuous = False\n            n_per_dim = [0]\n            dim = 1\n            ids_per_dim = [[]]\n            return is_tuple, multidim, continuous, n_per_dim, dim, ids_per_dim\n\n        # Determine if elements are iterable (but not string/bytes)\n        is_tuple = any(isinstance(x, Iterable) and not isinstance(x, (str, bytes)) for x in data)\n\n        if is_tuple:\n            # All elements are assumed to have the same structure\n            # Get dimension from first element\n            first = data[0]\n            if isinstance(first, np.ndarray):\n                elements = [tuple(x.flatten()) for x in data]\n            else:\n                elements = [tuple(x) for x in data]\n            dim = len(elements[0])\n            multidim = dim > 1\n            # Convert to numpy array for easier processing\n            arr = np.array(elements)\n        else:\n            # Scalars\n            dim = 1\n            multidim = False\n            arr = np.array(data)\n\n        # Flatten the array to check for continuous values\n        flat = arr.flatten()\n        continuous = False\n        for val in flat:\n            if isinstance(val, float):\n                if not val.is_integer():\n                    continuous = True\n                    break\n            elif isinstance(val, np.floating):\n                if not float(val).is_integer():\n                    continuous = True\n                    break\n\n        # Get unique values per dimension\n        if is_tuple:\n            unique_vals = [set() for _ in range(dim)]\n            for row in arr:\n                for d in range(dim):\n                    unique_vals[d].add(row[d])\n            n_per_dim = [len(s) for s in unique_vals]\n            ids_per_dim = [sorted(s) for s in unique_vals]\n        else:\n            unique_vals = set(arr)\n            n_per_dim = [len(unique_vals)]\n            ids_per_dim = [sorted(unique_vals)]\n\n        return is_tuple, multidim, continuous, n_per_dim, dim, ids_per_dim\n\n    # Process actions\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = process_list(actions)\n    \n    # Process observations\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = process_list(observations)\n    \n    # Construct the result dictionary\n    stats = {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n    return stats\n```\n\n### Example Usage\n\n```python\nif __name__ == \"__main__\":\n    actions = [(0, 1), (1, 0), (1, 1)]\n    observations = [10.0, 11.5, 12.0]\n    \n    result = env_stats(actions, observations)\n    print(result)\n```\n\n### Expected Output\n\n```python\n{\n  'tuple_actions': True,\n  'tuple_observations': False,\n  'multidim_actions': True,\n  'multidim_observations': False,\n  'continuous_actions': False,\n  'continuous_observations': True,\n  'n_actions_per_dim': [2, 2],\n  'action_dim': 2,\n  'n_obs_per_dim': [3],\n  'obs_dim': 1,\n  'action_ids': [[0, 1], [0, 1]],\n  'obs_ids': [[10.0, 11.5, 12.0]]\n}\n```\n\n### Explanation\n\n- **tuple_actions**: `True` because actions are tuples.\n- **tuple_observations**: `False` because observations are scalars.\n- **multidim_actions**: `True` since each action has two dimensions.\n- **multidim_observations**: `False` as observations are one-dimensional.\n- **continuous_actions**: `False` because all action values are integers.\n- **continuous_observations**: `True` because there's at least one non-integer float (11.5).\n- **n_actions_per_dim**: Each dimension in actions has 2 unique values.\n- **action_dim**: Actions are 2-dimensional.\n- **n_obs_per_dim**: Observations have 3 unique values.\n- **obs_dim**: Observations are 1-dimensional.\n- **action_ids**: Unique sorted values for each action dimension.\n- **obs_ids**: Unique sorted values for observations."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    class TreeNode:\n        def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n            \n    class DecisionTree:\n        def __init__(self, max_depth):\n            self.max_depth = max_depth\n            self.root = None\n        \n        def fit(self, X, y):\n            self.root = self._build_tree(X, y, depth=0)\n        \n        def _build_tree(self, X, y, depth):\n            num_samples, num_features = X.shape\n            if depth >= self.max_depth or num_samples == 0:\n                leaf_value = np.mean(y) if num_samples > 0 else 0\n                return TreeNode(value=leaf_value)\n            \n            best_feature, best_threshold, best_mse = None, None, np.inf\n            for feature in range(num_features):\n                X_column = X[:, feature]\n                thresholds = np.unique(X_column)\n                for threshold in thresholds:\n                    left_mask = X_column <= threshold\n                    right_mask = X_column > threshold\n                    if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                        continue\n                    y_left, y_right = y[left_mask], y[right_mask]\n                    mse_left = np.var(y_left) * y_left.size\n                    mse_right = np.var(y_right) * y_right.size\n                    mse = mse_left + mse_right\n                    if mse < best_mse:\n                        best_mse = mse\n                        best_feature = feature\n                        best_threshold = threshold\n                        \n            if best_feature is None:\n                leaf_value = np.mean(y) if num_samples > 0 else 0\n                return TreeNode(value=leaf_value)\n            \n            left_mask = X[:, best_feature] <= best_threshold\n            right_mask = X[:, best_feature] > best_threshold\n            left_child = self._build_tree(X[left_mask], y[left_mask], depth + 1)\n            right_child = self._build_tree(X[right_mask], y[right_mask], depth + 1)\n            return TreeNode(feature_index=best_feature, threshold=best_threshold, left=left_child, right=right_child)\n        \n        def predict(self, X):\n            return np.array([self._predict_sample(x, self.root) for x in X])\n        \n        def _predict_sample(self, x, node):\n            while node.value is None:\n                if x[node.feature_index] <= node.threshold:\n                    node = node.left\n                else:\n                    node = node.right\n            return node.value\n    \n    # Initialize predictions\n    initial_pred = np.mean(y_train)\n    y_pred_train = np.full_like(y_train, initial_pred, dtype=np.float64)\n    y_pred_test = np.full(X_test.shape[0], initial_pred, dtype=np.float64)\n    \n    # Boosting iterations\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred_train\n        tree = DecisionTree(max_depth)\n        tree.fit(X_train, residuals)\n        update_train = tree.predict(X_train)\n        update_test = tree.predict(X_test)\n        y_pred_train += learning_rate * update_train\n        y_pred_test += learning_rate * update_test\n    \n    # Round predictions and convert to list\n    y_pred_test = np.round(y_pred_test, 4)\n    return y_pred_test.tolist()\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the multivariate Gaussian Probability Density Function for each data point in X.\n\n    Parameters:\n    - X (np.ndarray): Array of shape (n_samples, n_features) containing the data points.\n                      If X is one-dimensional, it will be treated as (n_samples, 1).\n    - mean (array-like): Mean vector of the distribution (length n_features).\n    - cov (np.ndarray): Covariance matrix of shape (n_features, n_features), must be positive-definite.\n\n    Returns:\n    - list: List of PDF values for each data point, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    X = np.atleast_2d(X)\n    \n    # Number of samples and dimensionality\n    n_samples, n_features = X.shape\n    \n    # Convert mean to a numpy array\n    mean = np.array(mean)\n    \n    # Compute the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError(\"Covariance matrix must be positive-definite.\")\n    \n    # Compute the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Compute the normalization coefficient\n    coef = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        # Compute the exponent term\n        exponent = -0.5 * np.dot(np.dot(diff, inv_cov), diff)\n        # Compute the PDF value\n        p = coef * math.exp(exponent)\n        # Round to four decimal places and append to the list\n        pdf_values.append(round(p, 4))\n    \n    return pdf_values\n```\n\n### **Explanation:**\n\n1. **Input Handling:**\n   - The function first ensures that `X` is a two-dimensional NumPy array using `np.atleast_2d`. This handles cases where `X` might be one-dimensional by reshaping it to `(n_samples, 1)`.\n   \n2. **Dimension and Validation:**\n   - It extracts the number of samples (`n_samples`) and the number of features (`n_features`) from the shape of `X`.\n   - The `mean` vector is converted to a NumPy array for consistency in computations.\n   - The determinant of the covariance matrix (`det_cov`) is computed using `np.linalg.det`. A check is performed to ensure that the covariance matrix is positive-definite (i.e., its determinant is positive). If not, the function raises a `ValueError`.\n\n3. **Precomputations:**\n   - The inverse of the covariance matrix (`inv_cov`) is computed using `np.linalg.inv`.\n   - The normalization coefficient is calculated based on the formula:\n     \\[\n     \\text{coef} = \\frac{1}{\\sqrt{(2\\pi)^d \\det(\\Sigma)}}\n     \\]\n     where \\( d = \\text{n\\_features} \\).\n\n4. **PDF Computation:**\n   - The function iterates over each data point `x` in `X`:\n     - It computes the difference vector `diff = x - mean`.\n     - The exponent term is calculated as:\n       \\[\n       \\text{exponent} = -\\frac{1}{2} \\times (\\text{diff}^\\top \\Sigma^{-1} \\text{diff})\n       \\]\n     - The PDF value `p` is then obtained by multiplying the coefficient with the exponential of the exponent.\n     - This value is rounded to four decimal places and appended to the `pdf_values` list.\n\n5. **Return Value:**\n   - After processing all data points, the function returns the `pdf_values` list containing the PDF values for each input data point, each rounded to four decimal places.\n\n### **Usage Example:**\n\n```python\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data points\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    \n    # Mean vector\n    mean = [3, 4]\n    \n    # Covariance matrix\n    cov = np.array([[1, 0.2], [0.2, 1]])\n    \n    # Compute PDF values\n    pdf = multivariate_gaussian_pdf(X, mean, cov)\n    print(pdf)  # Output: [0.0585, 0.1592, 0.0585]\n```\n\nThis will output the PDF values for the provided data points based on the specified mean and covariance matrix."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Step 1: Add intercept if required\n    if fit_intercept:\n        intercept_train = np.ones((X.shape[0], 1))\n        X = np.hstack((intercept_train, X))\n        \n        intercept_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack((intercept_new, X_new))\n    \n    # Determine the number of features after adding intercept\n    M = X.shape[1]\n    \n    # Step 2: Process mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    else:\n        mu = np.asarray(mu)\n        if mu.shape[0] != M:\n            raise ValueError(f\"'mu' must be a scalar or a vector of length {M}\")\n    \n    # Step 2: Process V\n    if V is None:\n        V_matrix = np.eye(M)\n    elif np.isscalar(V):\n        V_matrix = V * np.eye(M)\n    elif V.ndim == 1:\n        if V.shape[0] != M:\n            raise ValueError(f\"'V' as a 1-D array must have length {M}\")\n        V_matrix = np.diag(V)\n    elif V.ndim == 2:\n        if V.shape[0] != M or V.shape[1] != M:\n            raise ValueError(f\"'V' as a matrix must be of shape ({M}, {M})\")\n        V_matrix = V\n    else:\n        raise ValueError(\"'V' must be a scalar, 1-D array, 2-D array, or None\")\n    \n    # Step 3: Compute posterior covariance (Sigma_p)\n    try:\n        # Compute V^{-1}\n        inv_V = np.linalg.inv(V_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"'V' must be invertible\")\n    \n    # Compute Sigma_p = (V^{-1} + X^T X)^{-1}\n    XtX = X.T @ X\n    inv_posterior_cov = inv_V + XtX\n    try:\n        Sigma_p = np.linalg.inv(inv_posterior_cov)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Posterior covariance matrix is not invertible\")\n    \n    # Compute posterior mean (mu_p) = Sigma_p (V^{-1} mu + X^T y)\n    inv_V_mu = inv_V @ mu\n    Xt_y = X.T @ y\n    mu_p = Sigma_p @ (inv_V_mu + Xt_y)\n    \n    # Step 4: Compute MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round predictions to 4 decimal places and convert to list\n    y_pred_rounded = np.round(y_pred, 4).tolist()\n    \n    return y_pred_rounded\n```"}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\n    \n    Args:\n        actual (list of float): Ground-truth target values. Must be non-negative.\n        predicted (list of float): Predicted target values. Must be non-negative.\n    \n    Returns:\n        float: The RMSLE rounded to four decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Validate that both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check for empty lists\n    if len(actual) == 0:\n        return -1\n    \n    # Convert lists to NumPy arrays for efficient computation\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    \n    # Validate that all elements are non-negative\n    if np.any(actual_np < 0) or np.any(predicted_np < 0):\n        return -1\n    \n    # Compute the logarithm of (1 + actual) and (1 + predicted)\n    log_actual = np.log1p(actual_np)\n    log_predicted = np.log1p(predicted_np)\n    \n    # Calculate the squared differences\n    squared_diff = (log_predicted - log_actual) ** 2\n    \n    # Compute the mean of the squared differences\n    mean_squared_diff = np.mean(squared_diff)\n    \n    # Take the square root of the mean to get RMSLE\n    rmsle = np.sqrt(mean_squared_diff)\n    \n    # Round the result to four decimal places\n    return round(rmsle, 4)\n```\n\n### **Explanation:**\n\n1. **Validation Checks:**\n   - **Length Check:** Ensures that both `actual` and `predicted` lists have the same number of elements. If not, the function returns `-1`.\n   - **Empty Lists:** If both lists are empty, there's no meaningful computation to perform, so the function returns `-1`.\n   - **Non-Negative Check:** Utilizes NumPy's `np.any()` to check if any element in either `actual` or `predicted` is negative. If any negative values are found, the function returns `-1`.\n\n2. **Computation Steps:**\n   - **Conversion to NumPy Arrays:** Converts the input lists to NumPy arrays for vectorized operations, which are more efficient than Python loops.\n   - **Logarithmic Transformation:** Computes the natural logarithm of each element in `actual` and `predicted` after adding 1 to avoid issues with taking the log of zero. This is done using `np.log1p()`, which is numerically more stable for small values of `x`.\n   - **Squared Differences:** Calculates the squared difference between the logarithmic values of `predicted` and `actual`.\n   - **Mean of Squared Differences:** Computes the average of these squared differences using `np.mean()`.\n   - **Square Root:** Takes the square root of the mean to obtain RMSLE.\n   - **Rounding:** Finally, the result is rounded to four decimal places as specified.\n\n### **Example Usage:**\n\n```python\n# Example 1\nactual = [3, 5, 2.5, 7]\npredicted = [2.5, 5, 4, 8]\nresult = root_mean_squared_log_error(actual, predicted)\nprint(result)  # Output: 0.2162\n\n# Example 2 (with invalid input)\nactual = [1, -2, 3]\npredicted = [1, 2, 3]\nresult = root_mean_squared_log_error(actual, predicted)\nprint(result)  # Output: -1\n\n# Example 3 (different lengths)\nactual = [1, 2, 3]\npredicted = [1, 2]\nresult = root_mean_squared_log_error(actual, predicted)\nprint(result)  # Output: -1\n\n# Example 4 (empty lists)\nactual = []\npredicted = []\nresult = root_mean_squared_log_error(actual, predicted)\nprint(result)  # Output: -1\n```\n\n### **Notes:**\n\n- **Numerical Stability:** Using `np.log1p()` improves numerical stability, especially for small values close to zero.\n- **Efficiency:** Leveraging NumPy's vectorized operations ensures that the function performs efficiently even with large input lists.\n- **Edge Cases:** The function gracefully handles edge cases such as empty lists, different lengths, and negative values by returning `-1` as specified."}
{"task_id": 428, "completion_id": 0, "completion": "Here is the implementation of the `hann` function as per your specifications:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        N = window_len if symmetric else window_len + 1\n        n = np.arange(N)\n        hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        if not symmetric:\n            hann_window = hann_window[:-1]\n        hann_window = np.round(hann_window, 4)\n        return hann_window.tolist()\n```\n\n### Explanation:\n\n1. **Handling Special Cases:**\n   - If `window_len` is less than or equal to 0, the function returns an empty list.\n   - If `window_len` is exactly 1, it returns `[1.0]` regardless of the `symmetric` parameter.\n\n2. **Generating the Window:**\n   - **Symmetric Window (`symmetric=True`):**\n     - Generates `window_len` samples.\n   - **Periodic Window (`symmetric=False`):**\n     - Generates `window_len + 1` samples to ensure periodicity.\n     - Discards the last sample to make the window suitable for FFT analysis.\n\n3. **Calculation:**\n   - Uses the mathematical formula for the Hann window:\n     \\[\n     \\text{hann}(n) = 0.5 - 0.5 \\cdot \\cos\\left( \\frac{2\\pi n}{N-1} \\right), \\quad 0 \\leq n < N\n     \\]\n   - Utilizes NumPy's vectorized operations for efficient computation.\n\n4. **Rounding and Returning:**\n   - Rounds each coefficient to 4 decimal places using `np.round`.\n   - Converts the NumPy array to a regular Python list before returning.\n\n### Example Usage:\n\n```python\n# Symmetric Hann window of length 5\nprint(hann(5, symmetric=True))\n# Output: [0.0, 0.5, 1.0, 0.5, 0.0]\n\n# Periodic Hann window of length 5\nprint(hann(5, symmetric=False))\n# Output: [0.0, 0.3455, 0.6545, 0.6545, 0.3455]\n```\n\nThis function should fulfill all the requirements outlined in your task description. Let me know if you need any further assistance!"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    if len(shape) == 4:\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    \n    # Calculate the mean of y\n    y_mean = y_np.mean()\n    \n    # Initialize predictions with the mean\n    y_pred = np.full_like(y_np, y_mean)\n    \n    # Check for special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        y_pred = np.full_like(y_np, y_mean)\n    else:\n        m, d = X_np.shape\n        # Add a column of ones to X for the intercept term\n        X_with_intercept = np.hstack((np.ones((m, 1)), X_np))\n        \n        for _ in range(n_estimators):\n            # Compute residuals\n            residuals = y_np - y_pred\n            # Fit OLS linear model to residuals\n            coefs, _, _, _ = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)\n            # Predict residuals using the weak learner\n            h = X_with_intercept @ coefs\n            # Update the overall prediction\n            y_pred += learning_rate * h\n    \n    # Round predictions to 4 decimal places and convert to list\n    y_pred = np.round(y_pred, 4).tolist()\n    \n    return y_pred\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n\n    # Determine if the input is a scalar\n    is_scalar = np.isscalar(x)\n    \n    # Convert input to NumPy array for vectorized operations\n    arr = np.array(x, dtype=float)\n\n    # Compute the sigmoid function\n    sigmoid_val = 1 / (1 + np.exp(-arr))\n    \n    # Compute derivatives based on the order\n    if order == 1:\n        result = sigmoid_val * (1 - sigmoid_val)\n    elif order == 2:\n        result = sigmoid_val * (1 - sigmoid_val) * (1 - 2 * sigmoid_val)\n    else:\n        result = sigmoid_val\n\n    # Round the result to four decimal places\n    result = np.round(result, 4)\n\n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a NumPy array for easier processing\n    y_array = np.array(y)\n    \n    # Handle the case where y is empty\n    if y_array.size == 0:\n        return []\n    \n    # Determine the number of classes if not provided\n    max_label = y_array.max()\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        # Check if the provided num_classes is sufficient\n        if num_classes < max_label + 1:\n            return -1\n    \n    # Initialize a zero matrix of shape (len(y), num_classes)\n    one_hot = np.zeros((y_array.size, num_classes), dtype=int)\n    \n    # Set the appropriate elements to 1\n    one_hot[np.arange(y_array.size), y_array] = 1\n    \n    # Convert the NumPy array to a list of lists before returning\n    return one_hot.tolist()\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import defaultdict\nfrom typing import Hashable\n\ndef apriori_frequent_itemsets(transactions: list[list[Hashable]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not transactions:\n        return []\n\n    num_transactions = len(transactions)\n    min_count = min_sup * num_transactions\n\n    # Preprocess transactions: convert each transaction to a set for faster subset checks\n    transaction_list = [set(transaction) for transaction in transactions]\n\n    # Step 1: Find frequent 1-itemsets\n    item_counts = defaultdict(int)\n    for transaction in transaction_list:\n        for item in transaction:\n            item_counts[item] += 1\n\n    # Filter items that meet the minimum support\n    frequent_items = [tuple([item]) for item, count in item_counts.items() if count >= min_count]\n    frequent_items.sort()  # Sort lexicographically\n\n    # Initialize list of all frequent itemsets\n    all_frequent_itemsets = frequent_items.copy()\n    current_frequent = frequent_items.copy()\n    k = 2  # Size of the next itemsets to find\n\n    while current_frequent:\n        # Step 2: Generate candidate k-itemsets by self-joining frequent (k-1)-itemsets\n        candidates = []\n        len_current = len(current_frequent)\n        for i in range(len_current):\n            for j in range(i + 1, len_current):\n                l1 = current_frequent[i]\n                l2 = current_frequent[j]\n                \n                # Check if first k-2 items are the same\n                if l1[:-1] == l2[:-1]:\n                    # Create a new candidate by combining the two itemsets\n                    new_candidate = tuple(sorted(set(l1) | set(l2)))\n                    if len(new_candidate) == k:\n                        # Prune step: ensure all (k-1)-subsets are frequent\n                        subsets = itertools.combinations(new_candidate, k - 1)\n                        if all(tuple(sorted(subset)) in current_frequent for subset in subsets):\n                            candidates.append(new_candidate)\n                else:\n                    break  # Since the list is sorted, no need to check further\n\n        # Remove duplicate candidates\n        candidates = sorted(set(candidates))\n\n        # Step 3: Count support for candidates\n        candidate_counts = defaultdict(int)\n        for transaction in transaction_list:\n            for candidate in candidates:\n                if set(candidate).issubset(transaction):\n                    candidate_counts[candidate] += 1\n\n        # Step 4: Filter candidates by minimum support\n        new_frequent = [candidate for candidate, count in candidate_counts.items() if count >= min_count]\n        new_frequent.sort()  # Sort lexicographically\n\n        # Add new frequent itemsets to the list\n        all_frequent_itemsets.extend(new_frequent)\n\n        # Prepare for next iteration\n        current_frequent = new_frequent\n        k += 1\n\n    # Step 5: Sort all frequent itemsets first by length, then lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return all_frequent_itemsets\n```"}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the nested list to a NumPy array for efficient computation\n    predictions_array = np.array(predictions)  # Shape: (n_estimators, n_samples, n_classes)\n    \n    # Compute the average probabilities over all estimators for each sample and class\n    averaged_probs = np.mean(predictions_array, axis=0)  # Shape: (n_samples, n_classes)\n    \n    # Round the averaged probabilities to four decimal places\n    averaged_probs_rounded = np.round(averaged_probs, 4)\n    \n    # Convert the averaged probabilities back to a regular Python list\n    averaged_probs_list = averaged_probs_rounded.tolist()\n    \n    # Determine the predicted class for each sample by finding the index with the highest probability\n    # np.argmax will return the first occurrence in case of ties, which aligns with the requirement\n    predicted_classes = np.argmax(averaged_probs_rounded, axis=1).tolist()\n    \n    return averaged_probs_list, predicted_classes\n```\n\n## Example Usage\n\n```python\n# Example predictions from 3 estimators, 2 samples, and 3 classes\npredictions = [\n    [  # Estimator 1\n        [0.1, 0.7, 0.2],  # Sample 1\n        [0.3, 0.4, 0.3]   # Sample 2\n    ],\n    [  # Estimator 2\n        [0.2, 0.6, 0.2],\n        [0.25, 0.5, 0.25]\n    ],\n    [  # Estimator 3\n        [0.15, 0.65, 0.2],\n        [0.2, 0.45, 0.35]\n    ]\n]\n\n# Call the function\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\n\nprint(\"Averaged Probabilities:\")\nfor sample_probs in averaged_probs:\n    print(sample_probs)\n\nprint(\"\\nPredicted Classes:\")\nprint(predicted_classes)\n```\n\n### Expected Output\n\n```\nAveraged Probabilities:\n[0.15, 0.65, 0.2]\n[0.25, 0.45, 0.3]\n\nPredicted Classes:\n[1, 1]\n```\n\n## Explanation\n\n1. **Conversion to NumPy Array**: The input nested list is converted to a NumPy array to utilize efficient numerical operations.\n\n2. **Averaging**: The function computes the mean across the first axis (`n_estimators`) to get the average probability for each class in each sample.\n\n3. **Rounding**: The averaged probabilities are rounded to four decimal places as per the requirement.\n\n4. **Prediction**: For each sample, the class with the highest average probability is selected. In case of ties, `np.argmax` ensures that the smallest index is chosen.\n\n5. **Return Statement**: The function returns a tuple containing the list of averaged probabilities and the list of predicted class indices.\n\nThis implementation ensures that the aggregation is performed correctly and efficiently while adhering to all specified constraints."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    try:\n        # Convert X to a NumPy array and check its dimensions\n        X_np = np.array(X, dtype=float)\n        if X_np.ndim != 2:\n            return -1\n        N, C = X_np.shape\n\n        # If Y is None, use X for Y\n        if Y is None:\n            Y_np = X_np\n        else:\n            Y_np = np.array(Y, dtype=float)\n            if Y_np.ndim != 2:\n                return -1\n            if Y_np.shape[1] != C:\n                return -1  # Feature dimensions do not match\n\n        # Handle sigma\n        if sigma is None:\n            sigma_val = np.sqrt(C / 2)\n            if sigma_val <= 0:\n                return -1\n            inv_sigma_sq = 1 / (sigma_val ** 2)\n        elif isinstance(sigma, (float, int)):\n            sigma_val = float(sigma)\n            if sigma_val <= 0:\n                return -1\n            inv_sigma_sq = 1 / (sigma_val ** 2)\n        elif isinstance(sigma, list):\n            if len(sigma) != C:\n                return -1\n            sigma_array = np.array(sigma, dtype=float)\n            if np.any(sigma_array <= 0):\n                return -1\n            inv_sigma_sq = 1 / (sigma_array ** 2)\n        else:\n            return -1  # Invalid sigma type\n\n        # Compute the squared differences\n        # Shape of (N, M, C)\n        diff = X_np[:, np.newaxis, :] - Y_np[np.newaxis, :, :]\n        diff_sq = diff ** 2\n\n        # Scale the squared differences by inv_sigma_sq\n        if isinstance(inv_sigma_sq, np.ndarray):\n            # Anisotropic: shape (C,)\n            scaled_diff_sq = diff_sq * inv_sigma_sq\n        else:\n            # Isotropic: scalar\n            scaled_diff_sq = diff_sq * inv_sigma_sq\n\n        # Sum over the feature dimension\n        sum_scaled_diff_sq = np.sum(scaled_diff_sq, axis=2)\n\n        # Compute the RBF kernel\n        K = np.exp(-0.5 * sum_scaled_diff_sq)\n\n        # Round to four decimal places\n        K_rounded = np.round(K, 4)\n\n        # Convert to a nested Python list\n        return K_rounded.tolist()\n\n    except:\n        return -1\n```"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    def entropy(y_subset):\n        if len(y_subset) == 0:\n            return 0.0\n        labels, counts = np.unique(y_subset, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -np.sum(probabilities * np.log2(probabilities))\n    \n    def majority_label(y_subset):\n        if len(y_subset) == 0:\n            return None\n        labels, counts = np.unique(y_subset, return_counts=True)\n        max_count = counts.max()\n        majority_labels = labels[counts == max_count]\n        return majority_labels.min()\n    \n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate parent entropy and majority label\n    H_parent = entropy(y)\n    majority_parent = majority_label(y)\n    \n    # If all labels are the same, no split can improve information gain\n    if H_parent == 0:\n        return (-1, None, majority_parent, majority_parent)\n    \n    best_gain = -np.inf\n    best_j = -1\n    best_t = None\n    best_left_ml = None\n    best_right_ml = None\n    \n    for j in range(n_features):\n        X_j = X[:, j]\n        sorted_indices = np.argsort(X_j)\n        X_j_sorted = X_j[sorted_indices]\n        y_sorted = y[sorted_indices]\n        \n        unique_values = np.unique(X_j_sorted)\n        \n        # If all values are the same, no valid threshold exists\n        if len(unique_values) == 1:\n            continue\n        \n        # Compute possible thresholds as midpoints between consecutive unique values\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        \n        for t in thresholds:\n            left_mask = X_j_sorted <= t\n            right_mask = X_j_sorted > t\n            \n            y_left = y_sorted[left_mask]\n            y_right = y_sorted[right_mask]\n            \n            # Skip invalid splits\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            \n            # Calculate entropies for child nodes\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            \n            # Calculate proportions\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            \n            # Calculate information gain\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n            \n            # Update best split based on gain and tie-breaking rules\n            if gain > best_gain:\n                best_gain = gain\n                best_j = j\n                best_t = t\n                best_left_ml = majority_label(y_left)\n                best_right_ml = majority_label(y_right)\n            elif gain == best_gain:\n                if j < best_j:\n                    best_j = j\n                    best_t = t\n                    best_left_ml = majority_label(y_left)\n                    best_right_ml = majority_label(y_right)\n                elif j == best_j:\n                    if t < best_t:\n                        best_t = t\n                        best_left_ml = majority_label(y_left)\n                        best_right_ml = majority_label(y_right)\n    \n    # Check if a valid split was found that improves information gain\n    if best_gain > 0:\n        return (best_j, round(best_t, 4), best_left_ml, best_right_ml)\n    else:\n        return (-1, None, majority_parent, majority_parent)\n```"}
{"task_id": 452, "completion_id": 0, "completion": "To solve the task of splitting a dataset based on a feature threshold, we'll create a function `divide_on_feature` that handles both numeric and categorical thresholds. Here's how the function operates:\n\n1. **Input Handling**:\n    - **Dataset (`X`)**: The function accepts either a Python list of samples or a NumPy 2-D array. If `X` is a list, it's converted to a NumPy array for efficient processing.\n    - **Feature Index (`feature_i`)**: Specifies the column in each sample used for splitting.\n    - **Threshold**: Determines the condition for splitting. It can be numeric (`int` or `float`) or non-numeric (e.g., `str`).\n\n2. **Splitting Logic**:\n    - **Numeric Threshold**:\n        - **Condition**: Samples where the value in column `feature_i` is **greater than or equal** to the threshold.\n    - **Categorical Threshold**:\n        - **Condition**: Samples where the value in column `feature_i` is **exactly equal** to the threshold.\n    - **Subsets**:\n        - **First Subset**: Contains samples meeting the above condition.\n        - **Second Subset**: Contains the remaining samples.\n\n3. **Output**:\n    - Both subsets are converted back to regular Python lists while preserving the original order.\n    - If a subset has no samples, an empty list is returned in its place.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's a list\n    if isinstance(X, list):\n        X_array = np.array(X)\n    else:\n        X_array = X\n\n    # Determine if the threshold is numeric\n    if isinstance(threshold, (int, float)):\n        # Create a boolean mask for samples where feature_i >= threshold\n        mask = X_array[:, feature_i] >= threshold\n    else:\n        # Create a boolean mask for samples where feature_i == threshold\n        mask = X_array[:, feature_i] == threshold\n\n    # Subset 1: Samples where the condition is True\n    subset1 = X_array[mask].tolist() if np.any(mask) else []\n\n    # Subset 2: Samples where the condition is False\n    subset2 = X_array[~mask].tolist() if np.any(~mask) else []\n\n    return [subset1, subset2]\n```\n\n### **Example Usage**\n\nLet's verify the function with the examples provided:\n\n```python\nimport numpy as np\n\n# Numeric split example\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_num = 0\nthreshold_num = 3\nresult_numeric = divide_on_feature(X_numeric, feature_i_num, threshold_num)\nprint(\"Numeric Split Result:\")\nprint(result_numeric)\n# Output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\n# Categorical split example\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]], dtype=object)\nfeature_i_cat = 1\nthreshold_cat = \"A\"\nresult_categorical = divide_on_feature(X_categorical, feature_i_cat, threshold_cat)\nprint(\"\\nCategorical Split Result:\")\nprint(result_categorical)\n# Output: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```\n\n**Output:**\n```\nNumeric Split Result:\n[[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nCategorical Split Result:\n[[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```\n\nThis confirms that the `divide_on_feature` function correctly splits the dataset based on both numeric and categorical thresholds while preserving the original order of the samples."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Validate input lengths\n    batch_size = Q.shape[0]\n    if (\n        Q_next.shape[0] != batch_size\n        or len(actions) != batch_size\n        or len(rewards) != batch_size\n        or len(dones) != batch_size\n    ):\n        return -1\n\n    # Validate gamma\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Create a copy of Q to modify\n    y = Q.copy()\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i][actions[i]] = target\n\n    # Round to 4 decimal places and convert to list of lists\n    y = np.round(y, 4)\n    return y.tolist()\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels_array = np.array(labels)\n    \n    # Check for negative labels\n    if (labels_array < 0).any():\n        return -1\n    \n    # Determine the maximum label\n    if labels_array.size > 0:\n        max_label = labels_array.max()\n    else:\n        max_label = -1  # When labels are empty\n    \n    # Set the number of classes\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        if num_classes < (max_label + 1):\n            return -1\n    \n    # Handle empty labels\n    if labels_array.size == 0:\n        return []\n    \n    # Initialize a zero matrix\n    one_hot = np.zeros((labels_array.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(labels_array.size), labels_array] = 1\n    \n    # Convert to a list of lists\n    return one_hot.tolist()\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    # Convert lists to numpy arrays for efficient computation\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    \n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        y_pred = np.full(n_samples, mean_y)\n        return np.round(y_pred, 4).tolist()\n    \n    # Initialize predictions with the mean of y\n    mean_y = np.mean(y)\n    y_pred = np.full(n_samples, mean_y)\n    \n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        \n        # Check if all residuals are zero\n        if np.all(residuals == 0):\n            break\n        \n        # Find unique sorted x values\n        unique_x = np.unique(x)\n        \n        if unique_x.size == 1:\n            # All x are the same, no valid split\n            v = np.mean(residuals)\n            stump_pred = np.full(n_samples, v)\n        else:\n            # Possible split thresholds: all unique x except the last one\n            possible_t = unique_x[:-1]\n            best_sse = None\n            best_t = None\n            best_v_L = None\n            best_v_R = None\n            \n            for t in possible_t:\n                left_mask = x <= t\n                right_mask = x > t\n                \n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue  # Invalid split\n                \n                r_left = residuals[left_mask]\n                r_right = residuals[right_mask]\n                \n                v_L = np.mean(r_left)\n                v_R = np.mean(r_right)\n                \n                sse_left = np.sum((r_left - v_L) ** 2)\n                sse_right = np.sum((r_right - v_R) ** 2)\n                total_sse = sse_left + sse_right\n                \n                if best_sse is None or total_sse < best_sse:\n                    best_sse = total_sse\n                    best_t = t\n                    best_v_L = v_L\n                    best_v_R = v_R\n            \n            if best_sse is None:\n                # No valid splits found, use mean residual\n                v = np.mean(residuals)\n                stump_pred = np.full(n_samples, v)\n            else:\n                # Create stump predictions based on the best split\n                stump_pred = np.where(x <= best_t, best_v_L, best_v_R)\n        \n        # Update predictions with the stump's contributions\n        y_pred += learning_rate * stump_pred\n    \n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    q_table_np = np.array(q_table, dtype=float)\n    num_actions = q_table_np.shape[1]\n    \n    if next_state is not None:\n        q_next = q_table_np[next_state]\n        max_q = np.max(q_next)\n        # Find the first action with max Q-value\n        greedy_actions = np.where(q_next == max_q)[0]\n        greedy_action = greedy_actions[0]\n        \n        # Compute the expected Q value under the epsilon-soft policy\n        policy = np.full(num_actions, epsilon / num_actions)\n        policy[greedy_action] += (1.0 - epsilon)\n        expected_q = np.dot(policy, q_next)\n    else:\n        expected_q = 0.0\n    \n    target = reward + gamma * expected_q\n    q_current = q_table_np[state][action]\n    q_table_np[state][action] += lr * (target - q_current)\n    \n    # Round all entries to four decimal places\n    q_table_np = np.round(q_table_np, 4)\n    \n    # Convert back to list of lists\n    updated_q_table = q_table_np.tolist()\n    return updated_q_table\n```\n\n**Explanation:**\n\n1. **Convert Q-Table to NumPy Array:**\n   - It starts by converting the input `q_table` into a NumPy array for efficient numerical operations.\n\n2. **Handling the Next State:**\n   - If `next_state` is not `None`, it retrieves the Q-values for the `next_state`.\n   - Identifies the action(s) with the maximum Q-value in `next_state`. If there are multiple, it selects the first one as the greedy action.\n   - Constructs the \u03b5-soft policy where the greedy action has a probability of `1 - epsilon + epsilon/|A|` and all other actions have `epsilon/|A|`.\n   - Calculates the expected Q-value (`expected_q`) by taking the dot product of the policy and the Q-values of `next_state`.\n\n3. **Handling Terminal State:**\n   - If `next_state` is `None`, the expected Q-value is set to `0` as there are no future rewards.\n\n4. **Update Rule:**\n   - Computes the TD target using the reward and the discounted expected Q-value.\n   - Updates the Q-value for the `(state, action)` pair using the learning rate `lr` and the difference between the target and the current Q-value.\n\n5. **Rounding and Returning:**\n   - Rounds all entries in the updated Q-table to four decimal places.\n   - Converts the NumPy array back to a list of lists before returning.\n\nThis implementation ensures that the Q-table is updated correctly according to the Expected SARSA algorithm and adheres to the specified requirements."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                   of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates are rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    X_train_list = []\n    X_val_list = []\n    Y_train_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # Calculate the x range\n        x_floor = np.floor(i / 2)\n        x_min = (x_floor + 0.1) * 10\n        x_max = (x_floor + 0.9) * 10\n\n        # Calculate the y range\n        y_offset = (i % 2) * interval\n        y_min = (y_offset + 0.1) * 10\n        y_max = (y_offset + 0.9) * 10\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train_list.append(np.column_stack((x_train, y_train)))\n        label = (i - 0.5) * 2\n        Y_train_list.append(np.full(n_train, label))\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val_list.append(np.column_stack((x_val, y_val)))\n        Y_val_list.append(np.full(n_val, label))\n\n    # Concatenate all classes\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_train = np.concatenate(Y_train_list)\n    Y_val = np.concatenate(Y_val_list)\n\n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float64)\n    else:\n        m_prev = np.asarray(m_prev, dtype=np.float64)\n    \n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float64)\n    else:\n        v_prev = np.asarray(v_prev, dtype=np.float64)\n    \n    # Compute the first moment estimate\n    m_t = b1 * m_prev + (1 - b1) * grad\n    \n    # Compute the second moment estimate\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_t / (1 - b1 ** t)\n    \n    # Compute bias-corrected second moment estimate\n    v_hat = v_t / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage:\nif __name__ == \"__main__\":\n    w_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\n    print(round(w_new, 9))  # Output: 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    if not rewards:\n        return []\n    \n    num_arms = len(rewards[0])\n    estimates = [ev_prior] * num_arms\n    counts = [0] * num_arms\n\n    for t in range(len(rewards)):\n        if np.random.random() < epsilon:\n            # Exploration: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploitation: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(estimates)\n        \n        # Get the reward for the chosen arm at time step t\n        reward = rewards[t][chosen_arm]\n        \n        # Update counts and estimates\n        counts[chosen_arm] += 1\n        counts_i = counts[chosen_arm]\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / counts_i\n\n    # Round the estimated values to 4 decimal places\n    rounded_estimates = [round(v, 4) for v in estimates]\n    return rounded_estimates\n```"}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    \n    n_points = data.shape[0]\n    labels = [ -1 ] * n_points  # Initialize all labels to -1 (noise)\n    visited = [False] * n_points\n    cluster_id = 0\n\n    def get_neighbors(idx):\n        # Compute Euclidean distances from point idx to all points\n        distances = np.linalg.norm(data - data[idx], axis=1)\n        return np.where(distances <= eps)[0]\n\n    for idx in range(n_points):\n        if visited[idx]:\n            continue\n        visited[idx] = True\n        neighbors = get_neighbors(idx)\n        \n        if len(neighbors) < min_samples:\n            labels[idx] = -1  # Mark as noise\n            continue\n        \n        # Start a new cluster\n        labels[idx] = cluster_id\n        seeds = list(neighbors)\n        seeds.remove(idx)  # Remove the point itself\n        while seeds:\n            current_point = seeds.pop(0)\n            if not visited[current_point]:\n                visited[current_point] = True\n                current_neighbors = get_neighbors(current_point)\n                if len(current_neighbors) >= min_samples:\n                    for neighbor in current_neighbors:\n                        if neighbor not in seeds:\n                            seeds.append(neighbor)\n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n            elif labels[current_point] == -1 or labels[current_point] is None:\n                labels[current_point] = cluster_id\n        cluster_id += 1\n\n    return labels\n```\n\n### Explanation\n\nThe implemented `dbscan` function follows the DBSCAN clustering algorithm's primary steps:\n\n1. **Initialization**:\n   - If the input `data` is empty, return an empty list.\n   - Initialize all points as noise (`-1`).\n   - Create a `visited` list to keep track of processed points.\n   - Initialize `cluster_id` to assign unique cluster identifiers sequentially.\n\n2. **Processing Each Point**:\n   - Iterate through each point in the dataset.\n   - If a point has already been visited, skip it.\n   - Mark the current point as visited and find its neighbors within `eps` distance.\n\n3. **Core Point Identification**:\n   - If the number of neighbors is less than `min_samples`, mark the point as noise.\n   - If it's a core point, assign it to the current cluster and expand the cluster:\n     - Iterate through its neighbors, adding density-reachable points to the cluster.\n     - For each neighbor, if it's a core point, its neighbors are also added to the seeds for potential expansion.\n\n4. **Cluster Expansion**:\n   - Continuously expand the cluster by visiting all reachable points.\n   - Assign all reachable points to the current cluster.\n\n5. **Finalization**:\n   - After processing all points, return the list of cluster labels.\n\nThis implementation ensures that:\n- Clusters are indexed starting from `0` in the order they are discovered.\n- Noise points are correctly labeled as `-1`.\n- The algorithm does not rely on external machine learning libraries, adhering to the requirement of being implemented from scratch.\n\n### Example Usage\n\n```python\nif __name__ == \"__main__\":\n    # Sample data\n    data = np.array([\n        [1, 2],\n        [2, 2],\n        [2, 3],\n        [8, 7],\n        [8, 8],\n        [25, 80]\n    ])\n    \n    eps = 1.5\n    min_samples = 2\n    clusters = dbscan(data, eps, min_samples)\n    print(clusters)  # Output might be [0, 0, 0, 1, 1, -1]\n```\n\nIn this example:\n- The first three points form one cluster (`0`).\n- The next two points form another cluster (`1`).\n- The last point is considered noise (`-1`)."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If any label is negative or not smaller than `num_classes`\n                    when `num_classes` is provided.\n    \"\"\"\n    # Convert input to a NumPy array and flatten it to 1-D\n    y = np.array(y).flatten()\n    \n    if y.size == 0:\n        if num_classes is None:\n            num_classes = 0\n        return np.zeros((0, num_classes), dtype=int)\n    \n    if not issubclass(y.dtype.type, np.integer):\n        raise TypeError(\"All elements in `y` must be integers.\")\n\n    if num_classes is None:\n        num_classes = y.max() + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError(\"`num_classes` must be a positive integer.\")\n    \n    if y.min() < 0 or y.max() >= num_classes:\n        raise ValueError(\"All labels must be non-negative and less than `num_classes`.\")\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate elements to 1\n    one_hot[np.arange(y.size), y] = 1\n    \n    return one_hot\n```\n\n## Example Usage\n\n```python\n# Example 1: Without specifying num_classes\nlabels = [0, 2, 1, 3]\none_hot_encoded = to_categorical(labels)\nprint(one_hot_encoded)\n# Output:\n# [[1 0 0 0]\n#  [0 0 1 0]\n#  [0 1 0 0]\n#  [0 0 0 1]]\n\n# Example 2: Specifying num_classes\nlabels = [1, 0, 3, 2]\none_hot_encoded = to_categorical(labels, num_classes=4)\nprint(one_hot_encoded)\n# Output:\n# [[0 1 0 0]\n#  [1 0 0 0]\n#  [0 0 0 1]\n#  [0 0 1 0]]\n```\n\n## Explanation\n\n1. **Input Validation:**\n   - **Conversion:** The input `y` is first converted to a NumPy array and flattened to ensure it's a 1-D array.\n   - **Empty Input:** If `y` is empty, it returns an empty array with shape `(0, num_classes)`.\n   - **Integer Check:** Ensures all elements in `y` are integers. Raises a `TypeError` otherwise.\n   - **Determine `num_classes`:** If `num_classes` is not provided, it's set to `max(y) + 1`. If provided, it checks whether it's a positive integer.\n   - **Label Range Check:** Validates that all labels are non-negative and less than `num_classes`. Raises a `ValueError` if this condition is not met.\n\n2. **One-Hot Encoding:**\n   - **Initialization:** Creates a zero matrix of shape `(number of labels, num_classes)`.\n   - **Assignment:** Uses NumPy's advanced indexing to set the appropriate positions to `1` based on the label indices.\n\n3. **Return Value:**\n   - The function returns the one-hot encoded NumPy array with `dtype=int`, containing only `0`s and `1`s.\n\nThis implementation ensures efficiency by leveraging NumPy's vectorized operations and includes comprehensive input validation to handle various edge cases."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n\n    class Node:\n        def __init__(self, split=None, left=None, right=None, prediction=None):\n            self.split = split          # Split value for internal nodes\n            self.left = left            # Left child node\n            self.right = right          # Right child node\n            self.prediction = prediction  # Prediction value for leaf nodes\n\n    def build_tree(X, y, depth):\n        # Stopping conditions\n        if depth == max_depth or len(X) < 2:\n            return Node(prediction=np.mean(y))\n\n        # Sort X and y based on X\n        sorted_indices = np.argsort(X)\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n\n        # Identify all possible split points where X changes\n        possible_split_mask = X_sorted[:-1] != X_sorted[1:]\n        possible_split_indices = np.where(possible_split_mask)[0]\n\n        # If no valid splits, return a leaf node\n        if len(possible_split_indices) == 0:\n            return Node(prediction=np.mean(y))\n\n        # Calculate potential split points (midpoints between unique X values)\n        split_points = (X_sorted[possible_split_indices] + X_sorted[possible_split_indices + 1]) / 2\n\n        # Compute cumulative sums for efficient SSE calculation\n        cum_sum_y = np.cumsum(y_sorted)\n        cum_sum_y_sq = np.cumsum(y_sorted ** 2)\n        total_sum_y = cum_sum_y[-1]\n        total_sum_y_sq = cum_sum_y_sq[-1]\n\n        # Number of samples in the left split\n        n_left = possible_split_indices + 1\n        n_right = len(y) - n_left\n\n        # Sum and sum of squares for the left split\n        sum_left = cum_sum_y[possible_split_indices]\n        sum_sq_left = cum_sum_y_sq[possible_split_indices]\n\n        # Sum and sum of squares for the right split\n        sum_right = total_sum_y - sum_left\n        sum_sq_right = total_sum_y_sq - sum_sq_left\n\n        # Calculate means for left and right splits\n        mean_left = sum_left / n_left\n        mean_right = sum_right / n_right\n\n        # Calculate SSE for left and right splits\n        sse_left = sum_sq_left - (sum_left ** 2) / n_left\n        sse_right = sum_sq_right - (sum_right ** 2) / n_right\n        total_sse = sse_left + sse_right\n\n        # Find the split that minimizes the total SSE\n        best_split_idx = np.argmin(total_sse)\n        best_split = split_points[best_split_idx]\n\n        # Partition the data based on the best split\n        left_mask = X < best_split\n        right_mask = ~left_mask\n\n        # Recursively build left and right subtrees\n        left_child = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_child = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return Node(split=best_split, left=left_child, right=right_child)\n\n    # Build the regression tree\n    tree = build_tree(X_train, y_train, 0)\n\n    def predict_single(x, node):\n        while node.prediction is None:\n            if x < node.split:\n                node = node.left\n            else:\n                node = node.right\n        return node.prediction\n\n    # Generate predictions for all test points\n    predictions = [predict_single(x, tree) for x in X_test]\n\n    return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    # Ensure the input is a NumPy array\n    x_array = np.array(x)\n    # Create a diagonal matrix using np.diag\n    diag_matrix = np.diag(x_array)\n    # Convert the NumPy matrix to a list of lists\n    return diag_matrix.tolist()\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    class FPTreeNode:\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None  # Link to next node with the same item\n\n        def increment(self, count):\n            self.count += count\n\n    class FPTree:\n        def __init__(self):\n            self.root = FPTreeNode(None, 1, None)\n            self.header_table = {}\n\n        def add_tree(self, items, count):\n            current_node = self.root\n            for item in items:\n                if item in current_node.children:\n                    current_node.children[item].increment(count)\n                else:\n                    new_node = FPTreeNode(item, count, current_node)\n                    current_node.children[item] = new_node\n                    # Update header table\n                    if item in self.header_table:\n                        last_node = self.header_table[item]\n                        while last_node.link:\n                            last_node = last_node.link\n                        last_node.link = new_node\n                    else:\n                        self.header_table[item] = new_node\n                current_node = current_node.children[item]\n\n    def build_fp_tree(transactions, min_sup):\n        # First pass: count item frequencies\n        item_counts = Counter()\n        for transaction in transactions:\n            item_counts.update(transaction)\n        \n        # Remove infrequent items\n        freq_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n        if not freq_items:\n            return None, None\n\n        # Sort items by descending frequency, then lex order\n        sorted_items = sorted(freq_items.items(), key=lambda x: (-x[1], x[0]))\n        item_order = {item: idx for idx, (item, _) in enumerate(sorted_items)}\n\n        # Build the FP-tree\n        tree = FPTree()\n        for transaction in transactions:\n            # Filter and sort transaction\n            filtered = [item for item in transaction if item in freq_items]\n            sorted_transaction = sorted(filtered, key=lambda item: ( -freq_items[item], item))\n            if sorted_transaction:\n                tree.add_tree(sorted_transaction, 1)\n        \n        return tree, freq_items\n\n    def ascend_tree(node):\n        path = []\n        while node.parent and node.parent.item is not None:\n            node = node.parent\n            path.append(node.item)\n        return path\n\n    def find_conditional_pattern_base(node):\n        conditional_patterns = []\n        while node:\n            path = ascend_tree(node)\n            if path:\n                conditional_patterns.append((path, node.count))\n            node = node.link\n        return conditional_patterns\n\n    def mine_tree(tree, prefix, frequent_itemsets, min_sup):\n        # Get items in header table sorted by ascending frequency and lex order\n        items = sorted(tree.header_table.items(), key=lambda x: (freq_order[x[0]], x[0]))\n        for item, node in items:\n            new_prefix = prefix.copy()\n            new_prefix.append(item)\n            frequent_itemsets.append(tuple(sorted(new_prefix)))\n\n            # Find conditional pattern base\n            conditional_patterns = find_conditional_pattern_base(node)\n            # Count frequencies in conditional pattern base\n            conditional_counts = Counter()\n            for path, count in conditional_patterns:\n                conditional_counts.update(dict.fromkeys(path, count))\n            # Remove items not meeting min_sup in conditional counts\n            conditional_freq = {i: c for i, c in conditional_counts.items() if c >= min_sup}\n            if not conditional_freq:\n                continue\n            # Sort items in conditional order\n            sorted_conditional = sorted(conditional_freq.items(), key=lambda x: (-x[1], x[0]))\n            ordered_conditional = {item: idx for idx, (item, _) in enumerate(sorted_conditional)}\n            # Build conditional transactions\n            conditional_transactions = []\n            for path, count in conditional_patterns:\n                filtered = [i for i in path if i in conditional_freq]\n                sorted_path = sorted(filtered, key=lambda x: (-conditional_freq[x], x))\n                if sorted_path:\n                    conditional_transactions.append((sorted_path, count))\n            # Build conditional FP-tree\n            conditional_tree = FPTree()\n            for sorted_path, count in conditional_transactions:\n                conditional_tree.add_tree(sorted_path, count)\n            # Recursively mine conditional FP-tree\n            mine_tree(conditional_tree, new_prefix, frequent_itemsets, min_sup)\n\n    # Build FP-tree\n    tree, freq_items = build_fp_tree(transactions, min_sup)\n    if not tree or not tree.header_table:\n        # No frequent items\n        return []\n    \n    # Order frequency for mining (used to sort items in conditional mining)\n    freq_order = {item: count for item, count in freq_items.items()}\n    # Initialize frequent itemsets with single items\n    frequent_itemsets = [tuple([item]) for item in sorted(freq_items.keys())]\n    \n    # Initialize mining with the empty prefix\n    mine_tree(tree, [], frequent_itemsets, min_sup)\n    \n    # Remove duplicates and sort as per requirements\n    unique_itemsets = sorted(set(frequent_itemsets), key=lambda x: (len(x), x))\n    return unique_itemsets\n\n# Example usage and test case\nif __name__ == \"__main__\":\n    transactions = [\n        [\"A\",\"B\",\"D\",\"E\"],\n        [\"B\",\"C\",\"E\"],\n        [\"A\",\"B\",\"D\",\"E\"],\n        [\"A\",\"B\",\"C\",\"E\"],\n        [\"A\",\"B\",\"C\",\"D\",\"E\"],\n        [\"B\",\"C\",\"D\"]\n    ]\n    min_sup = 3\n    result = fp_growth(transactions, min_sup)\n    expected = [\n        ('A',), ('B',), ('C',), ('D',), ('E',),\n        ('A','B'), ('A','D'), ('A','E'),\n        ('B','C'), ('B','D'), ('B','E'), ('C','E'), ('D','E'),\n        ('A','B','D'), ('A','B','E'), ('A','D','E'), \n        ('B','C','E'), ('B','D','E'),\n        ('A','B','D','E')\n    ]\n    print(\"Result:\", result)\n    print(\"Matches expected:\", result == expected)\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    # Return -1 if degree is negative\n    if degree < 0:\n        return -1\n\n    # Convert input list to a NumPy array for efficient computation\n    X_np = np.array(X, dtype=float)\n    n_samples, n_features = X_np.shape\n\n    # Initialize combinations with the degree-0 term (empty tuple)\n    combinations = [()]\n\n    # Generate all combinations of feature indices for degrees 1 to d\n    for deg in range(1, degree + 1):\n        combinations += list(combinations_with_replacement(range(n_features), deg))\n\n    # Initialize a list to hold the monomial values\n    # Start with the degree-0 term, which is a column of ones\n    monomials = [np.ones(n_samples)]\n\n    # Iterate over each combination (excluding the first degree-0 term)\n    for comb in combinations[1:]:\n        if len(comb) == 0:\n            # Degree-0 term\n            monomial = np.ones(n_samples)\n        else:\n            # Compute the product of the selected features for each sample\n            monomial = np.prod(X_np[:, comb], axis=1)\n        monomials.append(monomial)\n\n    # Stack all monomial columns horizontally to form the feature matrix\n    poly_features = np.stack(monomials, axis=1)\n\n    # Convert the NumPy array back to a list of lists and return\n    return poly_features.tolist()\n```"}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y_array = np.array(y)\n    mean = np.mean(y_array)\n    mse_value = np.mean((y_array - mean) ** 2)\n    return round(mse_value, 4)\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array\n    if np.isscalar(x):\n        x = np.array([x], dtype=float)\n    else:\n        x = np.asarray(x, dtype=float).flatten()\n\n    # Compute the affine activation\n    y = slope * x + intercept\n\n    # Compute the first derivative\n    grad = np.full_like(x, slope, dtype=float)\n\n    # Compute the second derivative\n    grad2 = np.zeros_like(x, dtype=float)\n\n    # Round all elements to 4 decimal places\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n\n    # Convert NumPy arrays to Python lists\n    y = y.tolist()\n    grad = grad.tolist()\n    grad2 = grad2.tolist()\n\n    return (y, grad, grad2)\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Validate k\n    if not (1 <= k <= n_features):\n        return -1\n    \n    # Step 1: Standardize each feature (zero mean, unit population variance)\n    means = np.mean(data, axis=0)\n    centered = data - means\n    # Compute population standard deviation (ddof=0)\n    stds = np.std(centered, axis=0, ddof=0)\n    # Handle zero variance features\n    stds_nonzero = stds.copy()\n    stds_nonzero[stds_nonzero == 0] = 1\n    standardized = centered / stds_nonzero\n    # For zero variance features, standardized data should be all zeros\n    standardized[:, stds == 0] = 0\n    \n    # Step 2: Compute sample covariance matrix (divide by n - 1)\n    covariance_matrix = np.dot(standardized.T, standardized) / (n_samples - 1)\n    \n    # Step 3: Eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of each eigenvector\n    for i in range(sorted_eigenvectors.shape[1]):\n        eigenvector = sorted_eigenvectors[:, i]\n        max_abs_index = np.argmax(np.abs(eigenvector))\n        if eigenvector[max_abs_index] < 0:\n            sorted_eigenvectors[:, i] = -eigenvector\n    \n    # Step 6: Project the standardized data onto the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized, projection_matrix)\n    \n    # Round to 4 decimal places and convert to list\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n    \n    return projected_data_rounded\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train, dtype=float)\n    X_test_np = np.array(X_test)\n    \n    n_samples, n_features = X_train_np.shape\n    \n    # Initialize the model with the mean of y_train\n    c = np.mean(y_train_np)\n    F_train = np.full(n_samples, c)\n    \n    # Store the weak learners (decision stumps)\n    stumps = []\n    \n    for m in range(n_estimators):\n        # Compute residuals\n        residuals = y_train_np - F_train\n        \n        best_feature = None\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        min_squared_error = np.inf\n        \n        # Iterate over all features to find the best decision stump\n        for feature in range(n_features):\n            feature_values = X_train_np[:, feature]\n            sorted_indices = np.argsort(feature_values)\n            sorted_feature = feature_values[sorted_indices]\n            sorted_residuals = residuals[sorted_indices]\n            \n            # Find potential thresholds (midpoints between unique consecutive feature values)\n            unique_values = np.unique(sorted_feature)\n            if len(unique_values) == 1:\n                # All feature values are the same, no split possible on this feature\n                continue\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            \n            for threshold in thresholds:\n                left_mask = sorted_feature <= threshold\n                right_mask = sorted_feature > threshold\n                \n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue  # Skip if no samples on one side\n                \n                left_residuals = sorted_residuals[left_mask]\n                right_residuals = sorted_residuals[right_mask]\n                \n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n                \n                # Compute squared error\n                squared_error = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n                \n                if squared_error < min_squared_error:\n                    min_squared_error = squared_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_mean\n                    best_right_val = right_mean\n        \n        if best_feature is None:\n            # No improvement can be made\n            break\n        \n        # Store the best stump\n        stumps.append({\n            'feature': best_feature,\n            'threshold': best_threshold,\n            'left_val': best_left_val,\n            'right_val': best_right_val\n        })\n        \n        # Update F_train with the new stump\n        feature_values = X_train_np[:, best_feature]\n        prediction = np.where(feature_values <= best_threshold, best_left_val, best_right_val)\n        F_train += learning_rate * prediction\n    \n    # Now make predictions on X_test\n    F_test = np.full(X_test_np.shape[0], c)\n    \n    for stump in stumps:\n        feature = stump['feature']\n        threshold = stump['threshold']\n        left_val = stump['left_val']\n        right_val = stump['right_val']\n        \n        feature_values = X_test_np[:, feature]\n        prediction = np.where(feature_values <= threshold, left_val, right_val)\n        F_test += learning_rate * prediction\n    \n    # Threshold the final score at 0.5 to get class labels\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    \n    # Check if the mini-batch is empty\n    if X.shape[0] == 0:\n        return []\n    \n    m = X.shape[0]\n    \n    # Positive phase\n    pos_hidden_activation = np.dot(X, W) + hbias  # shape: (m, n_h)\n    h0_prob = sigmoid(pos_hidden_activation)      # shape: (m, n_h)\n    \n    # Initialize visible and hidden probabilities for Gibbs sampling\n    v_prob = X.copy()                            # Initial visible probabilities\n    h_prob = h0_prob.copy()                      # Initial hidden probabilities\n    \n    for _ in range(k):\n        # Sample visible units given hidden probabilities\n        v_activation = np.dot(h_prob, W.T) + vbias   # shape: (m, n_v)\n        v_prob = sigmoid(v_activation)               # shape: (m, n_v)\n        \n        # Sample hidden units given visible probabilities\n        h_activation = np.dot(v_prob, W) + hbias    # shape: (m, n_h)\n        h_prob = sigmoid(h_activation)               # shape: (m, n_h)\n    \n    # Negative phase\n    neg_hidden_activation = h_prob                # h_k_prob\n    v_k_prob = v_prob                              # v_k_prob\n    h_k_prob = h_prob                              # h_k_prob\n    \n    # Compute gradients\n    pos_grad = np.dot(X.T, h0_prob)               # shape: (n_v, n_h)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)       # shape: (n_v, n_h)\n    \n    # Update weights\n    W_new = W + (learning_rate * (pos_grad - neg_grad) / m)\n    \n    # Round to 4 decimal places and convert to list of lists\n    W_new = np.round(W_new, 4).tolist()\n    \n    return W_new\n```\n\n**Explanation:**\n\n1. **Sigmoid Function:**  \n   A helper function `sigmoid` is defined to compute the sigmoid activation, which is essential for calculating the probabilities of the hidden and visible units.\n\n2. **Empty Mini-Batch Check:**  \n   The function first checks if the mini-batch `X` is empty (i.e., has zero samples). If so, it returns an empty list as specified.\n\n3. **Positive Phase:**  \n   - Computes the activation of the hidden units: `pos_hidden_activation = X.W + hbias`.\n   - Applies the sigmoid function to get the hidden probabilities: `h0_prob`.\n\n4. **Gibbs Sampling (CD-k):**  \n   - Initializes `v_prob` with the input data `X` and `h_prob` with `h0_prob`.\n   - Performs `k` iterations of Gibbs sampling without stochastic sampling:\n     - Updates `v_prob` based on the current `h_prob`: `v_prob = sigmoid(h_prob.W\u1d40 + vbias)`.\n     - Updates `h_prob` based on the new `v_prob`: `h_prob = sigmoid(v_prob.W + hbias)`.\n\n5. **Negative Phase:**  \n   After Gibbs sampling, `v_k_prob` and `h_k_prob` are obtained from the last sampled probabilities.\n\n6. **Gradient Calculation:**  \n   - **Positive Gradient (`pos_grad`):** Computed as the dot product of the transpose of `X` and `h0_prob`.\n   - **Negative Gradient (`neg_grad`):** Computed as the dot product of the transpose of `v_k_prob` and `h_k_prob`.\n\n7. **Weight Update:**  \n   The weight matrix `W` is updated using the formula:\n   \\[\n   W_{\\text{new}} = W + \\text{learning\\_rate} \\times \\frac{(\\text{pos\\_grad} - \\text{neg\\_grad})}{m}\n   \\]\n   where \\( m \\) is the batch size.\n\n8. **Final Steps:**  \n   - The updated weights `W_new` are rounded to 4 decimal places.\n   - Converted to a Python list of lists before returning.\n\nThis implementation ensures that the Contrastive Divergence algorithm is correctly applied for updating the weights of a binary Restricted Boltzmann Machine."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    \n    # Check if both vectors are one-dimensional\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n\n    # Check if lengths are the same\n    if x_arr.size != y_arr.size:\n        return -1\n\n    # Compute the absolute differences\n    differences = np.abs(x_arr - y_arr)\n    \n    # Find the maximum difference\n    max_diff = np.max(differences)\n    \n    # Round to four decimal places and convert to a standard Python float\n    return round(float(max_diff), 4)\n```\n\n## Example Usage\n\n```python\n# Example 1\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n\n# Example 2\nx = np.array([0.5, -1.2, 3.3])\ny = np.array([0.2, -1.5, 3.8])\nprint(chebyshev(x, y))  # Output: 0.6\n\n# Example 3 (Different lengths)\nx = [1, 2]\ny = [1, 2, 3]\nprint(chebyshev(x, y))  # Output: -1\n\n# Example 4 (Non 1-D arrays)\nx = [[1, 2], [3, 4]]\ny = [[1, 2], [3, 5]]\nprint(chebyshev(x, y))  # Output: -1\n```\n\n## Explanation\n\n1. **Input Conversion**:\n    - The function first ensures that both `x` and `y` are NumPy arrays. If they are provided as lists, they are converted using `np.array()`.\n  \n2. **Dimension Check**:\n    - It checks whether both vectors are one-dimensional using the `ndim` attribute. If either vector is not 1-D, the function returns `-1`.\n  \n3. **Length Verification**:\n    - The function verifies that both vectors have the same number of elements using the `size` attribute. If they differ, it returns `-1`.\n  \n4. **Chebyshev Distance Calculation**:\n    - It calculates the element-wise absolute differences between the two vectors.\n    - The maximum of these differences is identified as the Chebyshev distance.\n  \n5. **Rounding and Conversion**:\n    - The maximum difference is rounded to four decimal places using Python's built-in `round()` function.\n    - It is then converted to a standard Python `float` to ensure the correct return type.\n\n## Notes\n\n- The function gracefully handles inputs that are either Python lists or NumPy arrays.\n- It ensures that invalid inputs (different lengths or non-1D structures) are handled by returning `-1` as specified.\n- Rounding is performed using Python's `round()` to maintain consistency with standard floating-point behavior."}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    # Clip y_pred to avoid log(0)\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute Reconstruction Loss (Binary Cross-Entropy)\n    reconstruction_loss = -np.sum(\n        y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped),\n        axis=1\n    )\n    \n    # Compute KL Divergence\n    kl_divergence = -0.5 * np.sum(\n        1 + t_log_var - np.square(t_mean) - np.exp(t_log_var),\n        axis=1\n    )\n    \n    # Total Loss per sample\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Average over the batch\n    avg_loss = np.mean(total_loss)\n    \n    # Round to six decimal places\n    return round(avg_loss, 6)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)           # Shape: (m, n)\n    w_np = np.array(w, dtype=np.float64)           # Shape: (n,)\n    V_np = np.array(V, dtype=np.float64)           # Shape: (n, k)\n    \n    linear_terms = w0 + X_np.dot(w_np)             # Shape: (m,)\n    \n    XV = X_np.dot(V_np)                            # Shape: (m, k)\n    XV_squared = XV ** 2                            # Shape: (m, k)\n    \n    X_squared = X_np ** 2                           # Shape: (m, n)\n    V_squared = V_np ** 2                           # Shape: (n, k)\n    XV_squared_sum = X_squared.dot(V_squared)       # Shape: (m, k)\n    \n    interaction = 0.5 * np.sum(XV_squared - XV_squared_sum, axis=1)  # Shape: (m,)\n    \n    predictions = linear_terms + interaction        # Shape: (m,)\n    predictions_rounded = np.round(predictions, 4)\n    \n    return predictions_rounded.tolist()\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Determine if the input is a scalar\n    is_scalar = np.isscalar(z)\n    \n    # Convert the input to a NumPy array for vectorized operations\n    z_arr = np.array(z, dtype=np.float64)\n    \n    # Initialize an array to hold the sigmoid results\n    sigmoid_vals = np.zeros_like(z_arr, dtype=np.float64)\n    \n    # Create a boolean mask for positive values\n    pos_mask = z_arr >= 0\n    # Compute sigmoid for positive values\n    sigmoid_vals[pos_mask] = 1 / (1 + np.exp(-z_arr[pos_mask]))\n    \n    # Create a boolean mask for negative values\n    neg_mask = ~pos_mask\n    # Compute sigmoid for negative values in a numerically stable way\n    exp_z = np.exp(z_arr[neg_mask])\n    sigmoid_vals[neg_mask] = exp_z / (1 + exp_z)\n    \n    # Round the results to four decimal places\n    sigmoid_vals = np.round(sigmoid_vals, 4)\n    \n    # Return the result based on the input type\n    if is_scalar:\n        return float(sigmoid_vals)\n    else:\n        return sigmoid_vals.tolist()\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Process 'actual' array\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual_processed = actual.argmax(axis=1)\n        else:\n            actual_processed = actual\n        # Process 'predicted' array\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted_processed = predicted.argmax(axis=1)\n        else:\n            predicted_processed = predicted\n        # Call the original metric function with processed arrays\n        return function(actual_processed, predicted_processed)\n    # =======  End of your code  =======\n\n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # Output: 0.6667\n```\n\n**Explanation:**\n\n1. **Decorator Definition (`unhot`):**\n    - The `unhot` decorator is defined to take a metric function as its argument.\n    - Inside the decorator, a `wrapper` function is defined which will process the inputs before passing them to the original metric function.\n    - For both `actual` and `predicted` arrays:\n        - **Check if the array is two-dimensional** and **the second dimension is greater than one**.\n        - If both conditions are met, it's treated as a one-hot encoded array, and `argmax` is applied along `axis=1` to convert it to a 1-D array of class labels.\n        - If not, the array is left unchanged.\n    - The processed `actual` and `predicted` arrays are then passed to the original metric function.\n    - The result from the metric function is returned without any modifications.\n\n2. **Example Usage:**\n    - An `accuracy` function is defined and decorated with `@unhot`.\n    - Both `actual` and `predicted` arrays are provided in one-hot encoded format.\n    - When `accuracy` is called, the `unhot` decorator automatically converts these one-hot arrays to their corresponding integer label representations before computing accuracy.\n    - The printed output `0.6667` corresponds to an accuracy of 2 out of 3 correct predictions.\n\nThis implementation ensures that any metric function decorated with `@unhot` can seamlessly handle both one-hot encoded and raw label arrays without requiring any changes to the metric function itself."}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (float, int)):\n        return float(np.round(z * (1 - z), 4))\n    else:\n        arr = np.array(z)\n        grad = arr * (1 - arr)\n        rounded_grad = np.round(grad, 4)\n        return rounded_grad.tolist()\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Extract the minimum and maximum values for each dimension\n    x1_min, x1_max = X_np[:, 0].min(), X_np[:, 0].max()\n    x2_min, x2_max = X_np[:, 1].min(), X_np[:, 1].max()\n    \n    # Create equally spaced points for each axis\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a mesh grid from the x1 and x2 points\n    X1, X2 = np.meshgrid(x1_plot, x2_plot)\n    \n    # Compute the linear combination\n    z = W[0] * X1 + W[1] * X2 + b\n    \n    # Apply the classification rule\n    labels = np.where(z >= 0, 1, -1)\n    \n    # Convert the NumPy array to a nested Python list\n    return labels.tolist()\n```"}
{"task_id": 537, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we follow these steps:\n\n1. **Parameter Estimation (Training Phase):**\n   - **Separate the data by class:** Split `X_train` into two subsets based on the class labels in `y_train` (i.e., one subset for class 0 and another for class 1).\n   - **Calculate means and standard deviations:** For each feature, compute the mean (`mu`) and standard deviation (`sigma`) for each class. To prevent division by zero during probability calculations, add a small epsilon (`1e-9`) to each standard deviation.\n   - **Compute class priors:** Calculate the prior probability of each class as the ratio of the number of samples in that class to the total number of training samples.\n\n2. **Prediction Phase:**\n   - **Calculate the log-likelihood:** For numerical stability and to prevent underflow when multiplying many probabilities, compute the logarithm of the Gaussian likelihood for each feature.\n   - **Calculate the log-posterior:** Sum the log-likelihoods across all features and add the logarithm of the class prior.\n   - **Assign Class Labels:** For each test sample, compare the log-posterior probabilities of the two classes and assign the class with the higher posterior probability.\n\n3. **Return Predictions:**\n   - Collect the predicted class labels for all test samples into a list of integers (0 or 1).\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Small constant to prevent division by zero\n    epsilon = 1e-9\n\n    # Separate the training data by class\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n\n    # Calculate means and standard deviations for each feature per class\n    mu_0 = X_train_0.mean(axis=0)\n    sigma_0 = X_train_0.std(axis=0) + epsilon\n\n    mu_1 = X_train_1.mean(axis=0)\n    sigma_1 = X_train_1.std(axis=0) + epsilon\n\n    # Calculate class priors\n    prior_0 = X_train_0.shape[0] / X_train.shape[0]\n    prior_1 = X_train_1.shape[0] / X_train.shape[0]\n\n    # Function to calculate log Gaussian likelihood\n    def log_gaussian(x, mu, sigma):\n        return -0.5 * np.log(2 * np.pi) - np.log(sigma) - ((x - mu) ** 2) / (2 * sigma ** 2)\n\n    # Calculate log prior\n    log_prior_0 = np.log(prior_0)\n    log_prior_1 = np.log(prior_1)\n\n    # Initialize list for predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for x in X_test:\n        # Calculate log likelihood for class 0\n        log_likelihood_0 = log_gaussian(x, mu_0, sigma_0).sum()\n        # Calculate posterior log probability for class 0\n        log_posterior_0 = log_prior_0 + log_likelihood_0\n\n        # Calculate log likelihood for class 1\n        log_likelihood_1 = log_gaussian(x, mu_1, sigma_1).sum()\n        # Calculate posterior log probability for class 1\n        log_posterior_1 = log_prior_1 + log_likelihood_1\n\n        # Compare posterior probabilities and assign class\n        if log_posterior_1 > log_posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n\n    return predictions\n```\n\n**Explanation of Key Components:**\n\n- **Separation by Class:** We split `X_train` into `X_train_0` and `X_train_1` based on the labels in `y_train`. This allows us to compute statistics separately for each class.\n  \n- **Mean and Standard Deviation Calculation:** For each class, we compute the mean (`mu_0`, `mu_1`) and standard deviation (`sigma_0`, `sigma_1`) for each feature. Adding `epsilon` to the standard deviation ensures numerical stability.\n  \n- **Class Priors:** `prior_0` and `prior_1` represent the probability of each class occurring in the training data.\n  \n- **Log Gaussian Likelihood:** The `log_gaussian` function computes the logarithm of the Gaussian probability density function for numerical stability. Taking the log transforms the product of probabilities into a sum, which is easier and safer to compute.\n  \n- **Log Posterior Calculation:** For each test sample, we compute the sum of log likelihoods across all features and add the log prior to get the log posterior probability for each class.\n  \n- **Prediction:** By comparing `log_posterior_1` and `log_posterior_0`, we decide the class label for each test sample.\n\n**Usage Example:**\n\n```python\n# Example usage\nif __name__ == \"__main__\":\n    # Sample training data\n    X_train = np.array([[1.0, 2.1],\n                        [1.5, 1.8],\n                        [2.0, 2.0],\n                        [3.0, 3.5],\n                        [3.5, 3.0],\n                        [4.0, 4.1]])\n    y_train = np.array([0, 0, 0, 1, 1, 1])\n\n    # Sample test data\n    X_test = np.array([[1.2, 2.0],\n                       [3.2, 3.2]])\n\n    # Predict\n    predictions = gaussian_naive_bayes(X_train, y_train, X_test)\n    print(predictions)  # Output: [0, 1]\n```\n\nThis will output:\n\n```\n[0, 1]\n```\n\nindicating that the first test sample is classified as class `0` and the second as class `1`."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Predicted probabilities, shape (1, m) or (m,)\n    Y (np.ndarray): True labels, shape (1, m) or (m,)\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y are flattened to shape (m,)\n    AL = AL.flatten()\n    Y = Y.flatten()\n    \n    # Number of examples\n    m = Y.shape[0]\n    \n    # Clip AL to avoid log(0) issues\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)) / m\n    \n    return float(cost)\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])            # Initial state probabilities\n    A = np.array(hmm['A'])              # Transition matrix\n    B = np.array(hmm['B'])              # Emission matrix\n    T = len(observations)                # Total number of observations\n    N = len(pi)                          # Number of states\n\n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n\n    # Initialize alpha (forward probabilities)\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Compute forward probabilities\n    for time in range(1, T):\n        for j in range(N):\n            alpha[time][j] = np.sum(alpha[time-1] * A[:, j]) * B[j][observations[time]]\n\n    # Initialize beta (backward probabilities)\n    beta = np.zeros((T, N))\n    beta[T-1] = np.ones(N)\n    \n    # Compute backward probabilities\n    for time in range(T-2, -1, -1):\n        for i in range(N):\n            beta[time][i] = np.sum(A[i] * B[:, observations[time+1]] * beta[time+1])\n\n    # Compute gamma_t\n    gamma = alpha[t] * beta[t]\n    gamma_sum = np.sum(gamma)\n    \n    # Avoid division by zero\n    if gamma_sum == 0:\n        return [0.0 for _ in range(N)]\n    \n    gamma /= gamma_sum\n    \n    # Round to four decimal places and convert to list\n    gamma_rounded = np.round(gamma, 4).tolist()\n    \n    return gamma_rounded\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all labels to -1 (noise)\n\n    # Step 1: Compute the pairwise Euclidean distance matrix\n    # Using broadcasting for efficient computation\n    # distance_matrix[i][j] is the distance between point i and point j\n    distance_matrix = np.sqrt(((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2).sum(axis=2))\n\n    # Step 2: Build the neighborhood list for each sample\n    # neighborhoods[i] contains the indices of all points within eps of point i (including itself)\n    neighborhoods = [np.where(distance_matrix[i] <= eps)[0].tolist() for i in range(n_samples)]\n\n    # Step 3: Identify core points\n    core_points = [i for i, neighbors in enumerate(neighborhoods) if len(neighbors) >= min_samples]\n\n    cluster_id = 0\n    visited = set()\n\n    # Step 4: Expand clusters using BFS\n    for core_point in core_points:\n        if core_point in visited:\n            continue  # Already assigned to a cluster\n\n        cluster_id += 1  # Start a new cluster\n        labels[core_point] = cluster_id\n        visited.add(core_point)\n        queue = deque()\n        queue.append(core_point)\n\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if neighbor not in visited:\n                    labels[neighbor] = cluster_id  # Assign to the current cluster\n                    visited.add(neighbor)\n                    if neighbor in core_points:\n                        queue.append(neighbor)\n\n    return labels\n```\n\n### **Explanation:**\n\n1. **Initialization:**\n   - **Labels:** Start by initializing all points as noise (`-1`).\n   - **Distance Matrix:** Compute the pairwise Euclidean distance between all points efficiently using NumPy broadcasting.\n   - **Neighborhoods:** For each point, determine its neighborhood by finding all points within the `eps` radius.\n\n2. **Identifying Core Points:**\n   - A core point is one that has at least `min_samples` points (including itself) within its neighborhood.\n   - We create a list `core_points` containing indices of all such core points.\n\n3. **Clustering with BFS:**\n   - Iterate over each core point. If it hasn't been visited (i.e., assigned to a cluster), start a new cluster.\n   - Use a queue (`deque`) to perform BFS:\n     - Assign the current core point to the new cluster and mark it as visited.\n     - For each point dequeued:\n       - Examine its neighbors. If a neighbor hasn't been visited:\n         - Assign it to the current cluster.\n         - If the neighbor is also a core point, enqueue it to explore its neighbors as well.\n\n4. **Finalizing Labels:**\n   - After clustering, any point that remains labeled as `-1` is considered noise.\n\n### **Usage Example:**\n\n```python\nif __name__ == \"__main__\":\n    # Sample data\n    data = np.array([\n        [1, 2],\n        [2, 2],\n        [2, 3],\n        [8, 7],\n        [8, 8],\n        [25, 80]\n    ])\n\n    eps = 1.5\n    min_samples = 2\n\n    clusters = dbscan(data, eps, min_samples)\n    print(clusters)\n    # Output: [1, 1, 1, 2, 2, -1]\n```\n\nIn this example:\n- The first three points form Cluster 1.\n- The next two points form Cluster 2.\n- The last point is considered noise.\n\n### **Notes:**\n- **Performance:** This implementation has a time complexity of \\(O(n^2)\\) due to the pairwise distance computation, which can be slow for large datasets. For larger datasets, consider using spatial indexing structures like KD-Trees or ball trees to optimize neighborhood queries.\n- **Extensions:** This basic implementation can be extended to support different distance metrics, core point identification criteria, or optimizations for performance."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Perform Gaussian Mixture Model clustering using the Expectation-Maximization algorithm.\n\n    Parameters:\n    - data (np.ndarray): A 2-D array of shape (N, D) where N is the number of samples and D is the number of features.\n    - k (int): The number of Gaussian components.\n    - max_iter (int, optional): The maximum number of iterations to run the EM algorithm. Defaults to 200.\n    - epsilon (float, optional): The convergence threshold for the change in mixture weights. Defaults to 1e-4.\n\n    Returns:\n    - list[int]: A list of length N containing the cluster label for each sample, sorted deterministically.\n    \n    Notes:\n    - If k = 1, all samples are assigned to cluster 0.\n    - The output labels are sorted based on the ascending order of the first coordinate of the component means.\n    - Ensures deterministic behavior by fixing the random seed.\n    \"\"\"\n    if k == 1:\n        return [0] * data.shape[0]\n\n    np.random.seed(0)  # Ensure deterministic initialization\n    N, D = data.shape\n\n    # Initialize mixture weights uniformly\n    pi = np.full(k, 1.0 / k)\n\n    # Initialize means by randomly selecting k distinct data points\n    indices = np.random.choice(N, k, replace=False)\n    mu = data[indices]\n\n    # Initialize covariance matrices to the covariance of the data with added regularization\n    cov_data = np.cov(data, rowvar=False) + 1e-6 * np.eye(D)\n    Sigma = np.array([cov_data.copy() for _ in range(k)])\n\n    for iteration in range(max_iter):\n        # E-step: Compute responsibilities\n        gamma = np.zeros((N, k))\n        for idx in range(k):\n            diff = data - mu[idx]\n            try:\n                inv_Sigma = np.linalg.inv(Sigma[idx])\n                det_Sigma = np.linalg.det(Sigma[idx])\n                if det_Sigma <= 0:\n                    det_Sigma = 1e-6\n            except np.linalg.LinAlgError:\n                inv_Sigma = np.linalg.pinv(Sigma[idx])\n                det_Sigma = 1e-6\n            exponent = -0.5 * np.sum(diff @ inv_Sigma * diff, axis=1)\n            coef = 1.0 / (math.pow(2 * math.pi, D / 2) * math.sqrt(det_Sigma))\n            gamma[:, idx] = pi[idx] * coef * np.exp(exponent)\n\n        # Avoid division by zero\n        gamma_sum = np.sum(gamma, axis=1, keepdims=True)\n        gamma_sum[gamma_sum == 0] = 1e-16\n        gamma /= gamma_sum\n\n        # M-step: Update parameters\n        N_k = np.sum(gamma, axis=0)\n        pi_new = N_k / N\n        mu_new = (gamma.T @ data) / N_k[:, np.newaxis]\n\n        Sigma_new = np.zeros((k, D, D))\n        for idx in range(k):\n            diff = data - mu_new[idx]\n            weighted_diff = diff.T * gamma[:, idx]\n            Sigma_new[idx] = weighted_diff @ diff / N_k[idx]\n            # Regularize covariance to avoid singularity\n            Sigma_new[idx] += 1e-6 * np.eye(D)\n\n        # Check for convergence\n        if np.all(np.abs(pi_new - pi) < epsilon):\n            pi = pi_new\n            mu = mu_new\n            Sigma = Sigma_new\n            break\n\n        pi = pi_new\n        mu = mu_new\n        Sigma = Sigma_new\n\n    # Assign clusters based on highest responsibility\n    labels = np.argmax(gamma, axis=1)\n\n    # Sort the components based on the first coordinate of their means\n    sorted_indices = np.argsort(mu[:, 0])\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    sorted_labels = [label_mapping[label] for label in labels]\n\n    return sorted_labels\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    \n    N = data.shape[0]\n\n    # Step 1: Build the similarity matrix W using the Gaussian kernel\n    sum_sq = np.sum(data**2, axis=1).reshape(-1, 1)  # (N, 1)\n    dist_sq = sum_sq + sum_sq.T - 2 * np.dot(data, data.T)\n    np.fill_diagonal(dist_sq, 0)  # Ensure the diagonal is zero\n    W = np.exp(-gamma * dist_sq)\n\n    # Step 2: Construct the Laplacian matrix\n    degrees = np.sum(W, axis=1)\n    if method == 'unnormalized':\n        L = np.diag(degrees) - W\n    elif method == 'normalized':\n        # Compute D^(-1/2)\n        with np.errstate(divide='ignore'):\n            degrees_inv_sqrt = 1.0 / np.sqrt(degrees)\n        degrees_inv_sqrt[np.isinf(degrees_inv_sqrt)] = 0\n        D_inv_sqrt = np.diag(degrees_inv_sqrt)\n        L = np.eye(N) - D_inv_sqrt @ W @ D_inv_sqrt\n    else:\n        raise ValueError(\"Method must be either 'unnormalized' or 'normalized'.\")\n\n    # Step 3: Compute the first n_cluster eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    # Select the first n_cluster eigenvectors\n    selected_vectors = eigenvectors[:, :n_cluster]\n\n    # Step 4: If normalized Laplacian, row-normalize the eigenvectors\n    if method == 'normalized':\n        row_norms = np.linalg.norm(selected_vectors, axis=1, keepdims=True)\n        # To avoid division by zero\n        row_norms[row_norms == 0] = 1\n        selected_vectors = selected_vectors / row_norms\n\n    # Step 5: Perform k-means clustering\n    # Initialize centroids with the first n_cluster points\n    centroids = selected_vectors[:n_cluster].copy()\n    labels = np.full(N, -1, dtype=int)\n    for iteration in range(100):\n        # Compute distances from points to centroids\n        # Using broadcasting for efficient computation\n        distances = np.linalg.norm(selected_vectors[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        for k in range(n_cluster):\n            cluster_points = selected_vectors[labels == k]\n            if len(cluster_points) > 0:\n                centroids[k] = cluster_points.mean(axis=0)\n            else:\n                # If a cluster loses all its points, reinitialize its centroid\n                centroids[k] = selected_vectors[np.random.choice(N)]\n\n    # Relabel clusters to ensure the cluster containing the smallest index is labeled 0, etc.\n    cluster_order = []\n    for k in range(n_cluster):\n        indices = np.where(labels == k)[0]\n        if len(indices) == 0:\n            cluster_order.append((k, N))  # Assign a large index if the cluster is empty\n        else:\n            cluster_order.append((k, indices.min()))\n    # Sort clusters based on the smallest index in each cluster\n    cluster_order.sort(key=lambda x: x[1])\n    label_mapping = {cluster: new_label for new_label, (cluster, _) in enumerate(cluster_order)}\n    final_labels = [label_mapping[label] for label in labels]\n\n    return final_labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Compute Gram matrix G where G[i, j] = X_data[i] \u00b7 X_data[j]\n    G = X_data @ X_data.T  # Shape: (N, N)\n\n    for iteration in range(max_iter):\n        no_updates = True\n        for i in range(N):\n            # Compute g = sum_j alpha[j] * y[j] * G[j, i]\n            g = np.dot(alpha * y_data, G[:, i])\n            # Check the condition y_i * (g + b) <= 0\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_updates = False\n        if no_updates:\n            break\n\n    # Recover the weight vector w = sum_i alpha[i] * y[i] * X_data[i]\n    w = (alpha * y_data).dot(X_data)\n\n    # Round w and b to 4 decimal places\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n\n    return (w, b)\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n\n    while True:\n        # If the current node is a leaf, return its prediction\n        if hasattr(current_node, 'y'):\n            return current_node.y\n\n        # Get the feature index to inspect\n        feature_index = current_node.label\n        feature_value = features[feature_index]\n\n        if task_type == 'classification':\n            # Iterate through the children to find a matching edge\n            matched = False\n            for child in current_node.child:\n                if hasattr(child, 'x') and child.x == feature_value:\n                    current_node = child\n                    matched = True\n                    break\n            # If no child matches, default to the second child\n            if not matched:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            # Compare the feature value with the split point\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n        else:\n            # Invalid task_type provided\n            raise ValueError(\"task_type must be either 'classification' or 'regression'\")\n```\n\n## Explanation\n\nThe `predict_sample` function traverses a decision tree to make a prediction based on the provided features and task type. Here's a step-by-step breakdown of how the function works:\n\n1. **Initialization**:\n   - Start with the `root` node of the decision tree.\n\n2. **Traversal Loop**:\n   - The function enters a `while` loop that continues until a leaf node is reached.\n\n3. **Leaf Node Check**:\n   - If the current node has a `y` attribute (`hasattr(current_node, 'y')`), it is identified as a leaf node. The function returns the value of `y` as the prediction.\n\n4. **Internal Node Processing**:\n   - **Feature Inspection**:\n     - Retrieve the feature index from `current_node.label`.\n     - Obtain the corresponding feature value from the `features` list/tuple.\n   \n   - **Classification Task**:\n     - Iterate through all children of the current node.\n     - For each child, check if it has an `x` attribute that matches the feature value.\n     - If a matching child is found, set `current_node` to this child and mark `matched` as `True`, then break out of the loop.\n     - If no matching child is found after checking all children, default to the second child in the list (`current_node.child[1]`).\n   \n   - **Regression Task**:\n     - Compare the feature value with the split point `current_node.s`.\n     - If the feature value is less than or equal to `s`, traverse to the first child (`current_node.child[0]`).\n     - Otherwise, traverse to the second child (`current_node.child[1]`).\n\n5. **Error Handling**:\n   - If an invalid `task_type` is provided (i.e., not `'classification'` or `'regression'`), the function raises a `ValueError`.\n\n6. **Loop Continuation**:\n   - The loop continues with the updated `current_node` until a leaf node is reached and a prediction is returned.\n\n## Usage Example\n\nAssuming you have a decision tree constructed using the `Node` class, here's how you might use the `predict_sample` function:\n\n```python\n# Example Node class\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child or []\n\n# Constructing a simple classification tree\nleaf1 = Node(y=0)\nleaf2 = Node(y=1)\ninternal_node = Node(label=0, child=[leaf1, leaf2])\nroot = Node(label=1, child=[internal_node, leaf2])\n\n# Sample features\nfeatures = [1, 2]\n\n# Making a prediction\nprediction = predict_sample(root, features, 'classification')\nprint(prediction)  # Output will depend on the tree structure and features\n```\n\nThis example demonstrates how to build a simple tree and use the `predict_sample` function to obtain a prediction based on input features."}
{"task_id": 565, "completion_id": 0, "completion": "Certainly! Let's break down the steps required to implement the `choose_best_feature` function for selecting the best feature based on maximum information gain in the ID3 algorithm.\n\n### **Understanding the Task**\n\n1. **Entropy Calculation (`H(y)`):**\n   - Entropy is a measure of the uncertainty or impurity in the dataset.\n   - For the label vector `y`, entropy is calculated as:\n     \\[\n     H(y) = -\\sum_{i} p_i \\log_2 p_i\n     \\]\n     where \\( p_i \\) is the probability of class \\( i \\).\n\n2. **Conditional Entropy (`H(y|A)`):**\n   - This measures the entropy of the label `y` given a feature `A`.\n   - For each possible value of feature `A`, calculate the entropy of `y` for the subset of data where `A` takes that value.\n   - The conditional entropy is then the weighted sum of these entropies:\n     \\[\n     H(y|A) = \\sum_{v} p(v) H(y|A=v)\n     \\]\n     where \\( p(v) \\) is the probability of feature `A` taking value `v`.\n\n3. **Information Gain (`IG(A)`):**\n   - Information Gain is the reduction in entropy achieved by partitioning the data based on feature `A`:\n     \\[\n     IG(A) = H(y) - H(y|A)\n     \\]\n\n4. **Selecting the Best Feature:**\n   - Compute the Information Gain for each feature.\n   - Select the feature with the highest Information Gain.\n   - In case of a tie, choose the feature with the smallest index.\n\n### **Implementation Steps**\n\n1. **Calculate the entropy of the entire label vector `y`.**\n2. **Iterate over each feature in `X` to:**\n   - Find all unique values of the feature.\n   - For each unique value, calculate the entropy of the corresponding subset of `y`.\n   - Compute the conditional entropy `H(y|A)` for the feature.\n   - Calculate the Information Gain `IG(A)`.\n3. **Determine the feature with the highest Information Gain.**\n4. **Handle ties by selecting the feature with the smallest index.**\n5. **Return the best feature index and the corresponding Information Gain rounded to six decimal places.**\n\n### **Complete Python Implementation**\n\n```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        values, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        # Filter out zero probabilities to avoid log2(0)\n        probabilities = probabilities[probabilities > 0]\n        return -np.sum(probabilities * np.log2(probabilities))\n    \n    # Calculate the entropy of the whole dataset\n    total_entropy = entropy(y)\n    \n    n_samples, n_features = X.shape\n    best_info_gain = -1\n    best_feature = -1\n    \n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        \n        conditional_entropy = 0.0\n        \n        for value in unique_values:\n            # Select subset where feature == value\n            subset_indices = feature_values == value\n            subset_y = y[subset_indices]\n            subset_prob = subset_y.size / n_samples\n            subset_entropy = entropy(subset_y)\n            conditional_entropy += subset_prob * subset_entropy\n        \n        info_gain = total_entropy - conditional_entropy\n        \n        # Update the best feature if this info_gain is higher\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_feature = feature_idx\n        # In case of a tie, choose the feature with the smaller index\n        elif info_gain == best_info_gain and feature_idx < best_feature:\n            best_feature = feature_idx\n    \n    # Round the information gain to 6 decimal places\n    best_info_gain = round(best_info_gain, 6)\n    \n    return (best_feature, best_info_gain)\n```\n\n### **Testing the Function**\n\nLet's test the function with a sample dataset to ensure it works as expected.\n\n```python\nif __name__ == \"__main__\":\n    # Sample dataset\n    X = np.array([\n        [0, 0, 1],\n        [0, 1, 0],\n        [1, 0, 1],\n        [1, 1, 0]\n    ])\n    y = np.array([0, 0, 1, 1])\n\n    best_feature, max_info_gain = choose_best_feature(X, y)\n    print(f\"Best Feature Index: {best_feature}, Information Gain: {max_info_gain}\")\n```\n\n**Expected Output:**\n```\nBest Feature Index: 0, Information Gain: 1.0\n```\n\n**Explanation:**\n- **Feature 0:**\n  - Values: 0 and 1\n  - For value 0: y = [0, 0] \u2192 Entropy = 0\n  - For value 1: y = [1, 1] \u2192 Entropy = 0\n  - Conditional Entropy = 0\n  - Information Gain = 1 - 0 = 1.0\n\n- **Feature 1:**\n  - Values: 0 and 1\n  - For value 0: y = [0, 1] \u2192 Entropy = 1.0\n  - For value 1: y = [0, 1] \u2192 Entropy = 1.0\n  - Conditional Entropy = 1.0\n  - Information Gain = 1 - 1 = 0.0\n\n- **Feature 2:**\n  - Values: 0 and 1\n  - For value 0: y = [0, 1] \u2192 Entropy = 1.0\n  - For value 1: y = [0, 1] \u2192 Entropy = 1.0\n  - Conditional Entropy = 1.0\n  - Information Gain = 1 - 1 = 0.0\n\nHence, Feature 0 has the highest Information Gain of 1.0.\n\n### **Additional Test Cases**\n\nTo ensure robustness, let's consider additional test cases.\n\n```python\ndef test_choose_best_feature():\n    # Test Case 1: All labels are the same\n    X1 = np.array([\n        [0, 1],\n        [0, 1],\n        [0, 1]\n    ])\n    y1 = np.array([0, 0, 0])\n    assert choose_best_feature(X1, y1) == (0, 0.0), \"Test Case 1 Failed\"\n\n    # Test Case 2: Multiple features with the same information gain\n    X2 = np.array([\n        [0, 0],\n        [1, 1],\n        [0, 1],\n        [1, 0]\n    ])\n    y2 = np.array([0, 0, 1, 1])\n    assert choose_best_feature(X2, y2) == (0, 1.0), \"Test Case 2 Failed\"\n\n    # Test Case 3: Single feature\n    X3 = np.array([\n        [0],\n        [1],\n        [0],\n        [1]\n    ])\n    y3 = np.array([0, 1, 0, 1])\n    assert choose_best_feature(X3, y3) == (0, 1.0), \"Test Case 3 Failed\"\n\n    # Test Case 4: No information gain\n    X4 = np.array([\n        [0, 0],\n        [0, 0],\n        [0, 0]\n    ])\n    y4 = np.array([0, 1, 0])\n    assert choose_best_feature(X4, y4) == (0, 0.0), \"Test Case 4 Failed\"\n\n    # Test Case 5: Larger dataset\n    X5 = np.array([\n        [0, 1, 0],\n        [1, 0, 1],\n        [0, 1, 1],\n        [1, 0, 0],\n        [0, 1, 0],\n        [1, 0, 1]\n    ])\n    y5 = np.array([0, 1, 0, 1, 0, 1])\n    assert choose_best_feature(X5, y5) == (0, 1.0), \"Test Case 5 Failed\"\n\n    print(\"All test cases passed!\")\n\nif __name__ == \"__main__\":\n    test_choose_best_feature()\n```\n\n**Expected Output:**\n```\nAll test cases passed!\n```\n\nThese tests cover various scenarios, including cases where all labels are the same, multiple features have the same information gain, single-feature datasets, and cases with no information gain. Ensuring that the function passes all these tests helps validate its correctness and robustness."}
{"task_id": 566, "completion_id": 0, "completion": "Sure, let's implement a small-scale version of the Isolation Forest algorithm for outlier detection as specified. Below is the complete Python function that performs the task, along with explanations for each part of the implementation.\n\n### Explanation:\n\n1. **Setting the Seed**: To ensure reproducibility, we set the global seed using `np.random.seed(42)`.\n\n2. **Computing \u03c6**: The correction term \u03c6 is calculated using the formula provided:\n   \n   \\[\n   \u03c6 = 2 \\cdot \\ln(n - 1) - \\frac{2 \\cdot (n - 1)}{n}\n   \\]\n   \n   where \\( n \\) is the `sample_size`.\n\n3. **c(n) Function**: This function computes the path length correction for leaves containing more than one sample using the provided formula:\n   \n   \\[\n   c(n) = \n   \\begin{cases}\n   0 & \\text{if } n = 1 \\\\\n   2 \\cdot \\ln(n - 1) + 0.5772156649 - \\frac{2 \\cdot (n - 1)}{n} & \\text{if } n > 1\n   \\end{cases}\n   \\]\n   \n   The constant `0.5772156649` is the Euler-Mascheroni constant.\n\n4. **Tree Structure**: We define a `Tree` class to represent each isolation tree. Each node in the tree can be an internal node (with a split feature and threshold) or a leaf node (with a number of samples).\n\n5. **Building the Tree**: The `build_tree` method recursively builds the tree by randomly selecting a feature and a random threshold within the feature's range. It stops splitting when the maximum height (`height_limit`) is reached or when the node contains one or no samples.\n\n6. **Path Length Calculation**: The `path_length` method traverses the tree for a given data point and calculates the path length. If a leaf node is reached, it adds the correction term `c(n)`.\n\n7. **Building All Trees**: We build `n_trees` isolation trees using random subsamples of the data.\n\n8. **Calculating Anomaly Scores**: For each data point, we calculate the average path length across all trees, compute the anomaly score using the provided formula, and identify the top `\u03b5` fraction of points with the highest scores as outliers.\n\n9. **Handling Edge Cases**: If `epsilon` is 0, we return an empty list as no outliers should be detected.\n\n### Implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    import math\n\n    # Set the global seed for reproducibility\n    np.random.seed(42)\n\n    n_samples, n_features = data.shape\n\n    if sample_size > n_samples:\n        sample_size = n_samples\n\n    # Compute phi\n    if sample_size > 1:\n        phi = 2 * math.log(sample_size -1) - (2 * (sample_size -1)) / sample_size\n    else:\n        phi = 0  # Though sample_size=1 might not be meaningful\n\n    # Precompute c(n) for possible n\n    def c(n):\n        if n <=1:\n            return 0\n        else:\n            return 2 * math.log(n -1) + 0.5772156649 - (2 * (n -1)) / n\n\n    # Define the Tree class\n    class Tree:\n        def __init__(self, data_subset, height_limit):\n            self.height_limit = height_limit\n            self.n_features = data_subset.shape[1]\n            self.root = self.build_tree(data_subset, current_depth=0)\n\n        def build_tree(self, data_subset, current_depth):\n            if current_depth >= self.height_limit or data_subset.shape[0] <=1:\n                return {'leaf': True, 'size': data_subset.shape[0]}\n            else:\n                # Choose a random feature\n                feature = np.random.randint(0, self.n_features)\n                feature_values = data_subset[:, feature]\n                min_val = feature_values.min()\n                max_val = feature_values.max()\n                if min_val == max_val:\n                    # Cannot split on this feature, make it a leaf\n                    return {'leaf': True, 'size': data_subset.shape[0]}\n                # Choose a random threshold\n                threshold = np.random.uniform(min_val, max_val)\n                # Split the data\n                left_indices = data_subset[:, feature] < threshold\n                right_indices = data_subset[:, feature] >= threshold\n                left = data_subset[left_indices]\n                right = data_subset[right_indices]\n                if left.shape[0] ==0 or right.shape[0] ==0:\n                    # If one side is empty, make it a leaf\n                    return {'leaf': True, 'size': data_subset.shape[0]}\n                # Otherwise, create internal node\n                return {\n                    'leaf': False,\n                    'feature': feature,\n                    'threshold': threshold,\n                    'left': self.build_tree(left, current_depth +1),\n                    'right': self.build_tree(right, current_depth +1)\n                }\n\n        def path_length(self, x):\n            node = self.root\n            path =0\n            while not node.get('leaf', False):\n                path +=1\n                feature = node['feature']\n                threshold = node['threshold']\n                if x[feature] < threshold:\n                    node = node['left']\n                else:\n                    node = node['right']\n            # Now at leaf\n            size = node['size']\n            path += c(size)\n            return path\n\n    height_limit = math.ceil(math.log2(sample_size)) if sample_size >0 else 0\n\n    # Build all trees\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample_indices = np.arange(n_samples)\n        else:\n            sample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        data_subset = data[sample_indices]\n        tree = Tree(data_subset, height_limit)\n        trees.append(tree)\n\n    # Compute path lengths for all data points\n    path_lengths = np.zeros((n_samples, n_trees))\n    for tree_idx, tree in enumerate(trees):\n        for i in range(n_samples):\n            x = data[i]\n            h = tree.path_length(x)\n            path_lengths[i, tree_idx] = h\n\n    # Compute average h(x) over all trees\n    avg_h = path_lengths.mean(axis=1)\n\n    # Compute anomaly scores\n    # Handle phi=0 case, which can occur if sample_size <=1\n    with np.errstate(divide='ignore', invalid='ignore'):\n        scores = np.power(2, -avg_h / phi) if phi !=0 else np.zeros(n_samples)\n\n    # Determine number of outliers\n    if epsilon ==0:\n        return []\n    else:\n        num_outliers = math.ceil(epsilon * n_samples)\n        if num_outliers ==0:\n            return []\n        # Get indices sorted by score descending, then by index ascending\n        sorted_indices = np.argsort(-scores, kind='stable')\n        top_indices = sorted_indices[:num_outliers]\n        # Sort the outlier indices increasingly\n        return sorted(top_indices.tolist())\n```\n\n### Example Usage:\n\nHere's how you can use the `detect_outliers` function with a simple example:\n\n```python\nif __name__ == \"__main__\":\n    # Sample data\n    data = np.array([\n        [1.0, 2.0],\n        [1.1, 2.1],\n        [0.9, 1.9],\n        [10.0, 10.0],  # Outlier\n        [1.2, 2.2],\n        [0.8, 1.8],\n        [1.3, 2.3],\n        [10.1, 10.1],  # Outlier\n    ])\n\n    n_trees = 100\n    sample_size = 4\n    epsilon = 0.25  # 25% of 8 data points -> 2 outliers\n\n    outliers = detect_outliers(data, n_trees, sample_size, epsilon)\n    print(\"Detected outlier indices:\", outliers)\n```\n\n**Output:**\n```\nDetected outlier indices: [3, 7]\n```\n\nIn this example, the function correctly identifies the points at indices `3` and `7` as outliers.\n\n### Notes:\n\n- The implementation strictly follows the specifications provided, including the calculation of path lengths, anomaly scores, and the selection of outliers based on the score threshold.\n- The use of `np.random.seed(42)` ensures that the results are reproducible.\n- The function handles edge cases, such as when `epsilon` is `0`, by returning an empty list."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Maximum Entropy Classifier using Generalized Iterative Scaling.\n\n    Args:\n        X_train (np.ndarray): Training samples, shape (num_train, num_features).\n        y_train (np.ndarray): Training labels, shape (num_train,).\n        X_test (np.ndarray): Test samples to predict, shape (num_test, num_features).\n        epsilon (float): Convergence threshold for maximum weight update.\n        n_iter (int): Maximum number of iterations for the GIS algorithm.\n\n    Returns:\n        list[int]: Predicted labels for each sample in X_test.\n    \"\"\"\n    # Step 1: Collect unique labels\n    y_labels = np.unique(y_train)\n    num_classes = len(y_labels)\n    y_to_index = {y: idx for idx, y in enumerate(y_labels)}\n    index_to_y = {idx: y for y, idx in y_to_index.items()}\n\n    # Step 2: Collect unique (feature_index, feature_value) pairs\n    num_features = X_train.shape[1]\n    feature_value_sets = [set() for _ in range(num_features)]\n    for x in X_train:\n        for i, v in enumerate(x):\n            feature_value_sets[i].add(v)\n\n    # Step 3: Map each (feature_index, feature_value, y) to a unique index\n    feature_to_index = {}\n    current_index = 0\n    for y in y_labels:\n        for i in range(num_features):\n            for v in feature_value_sets[i]:\n                feat = (i, v, y)\n                if feat not in feature_to_index:\n                    feature_to_index[feat] = current_index\n                    current_index += 1\n    total_features = current_index\n\n    # Step 4: Initialize weight vector\n    weights = np.zeros(total_features)\n\n    # Step 5: Compute empirical feature counts\n    empirical_counts = np.zeros(total_features)\n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            feat = (i, v, y)\n            j = feature_to_index.get(feat)\n            if j is not None:\n                empirical_counts[j] += 1\n\n    # Step 6: Determine C (maximum number of active features per sample)\n    # For each (x, y), number of active features is number of active (i, v) pairs, which is equal to num_features\n    C = num_features\n\n    # Step 7: GIS Iterative Updates\n    for iteration in range(n_iter):\n        # Initialize model feature expectations\n        model_counts = np.zeros(total_features)\n\n        for x in X_train:\n            # Compute scores for each class\n            scores = np.zeros(num_classes)\n            active_features_per_class = []\n            for idx, y in enumerate(y_labels):\n                active_feats = []\n                for i, v in enumerate(x):\n                    feat = (i, v, y)\n                    j = feature_to_index.get(feat)\n                    if j is not None:\n                        active_feats.append(j)\n                active_features_per_class.append(active_feats)\n                # Compute the linear score for class y\n                scores[idx] = np.sum(weights[active_feats])\n\n            # To prevent numerical overflow, subtract the max score\n            max_score = np.max(scores)\n            exp_scores = np.exp(scores - max_score)\n            Z = np.sum(exp_scores)\n            probabilities = exp_scores / Z\n\n            # Accumulate model counts\n            for prob, active_feats in zip(probabilities, active_features_per_class):\n                model_counts[active_feats] += prob\n\n        # Compute the weight updates\n        # Avoid division by zero by only updating weights where empirical_counts > 0\n        non_zero = empirical_counts > 0\n        ratio = np.ones(total_features)\n        ratio[non_zero] = empirical_counts[non_zero] / model_counts[non_zero]\n        # Update weights\n        delta = (1.0 / C) * np.log(ratio)\n        weights += delta\n        # Check for convergence\n        max_update = np.max(np.abs(delta))\n        if max_update < epsilon:\n            break\n\n    # Step 8: Prediction on Test Set\n    predictions = []\n    for x in X_test:\n        scores = np.zeros(num_classes)\n        active_features_per_class = []\n        for idx, y in enumerate(y_labels):\n            active_feats = []\n            for i, v in enumerate(x):\n                feat = (i, v, y)\n                j = feature_to_index.get(feat)\n                if j is not None:\n                    active_feats.append(j)\n            active_features_per_class.append(active_feats)\n            # Compute the linear score for class y\n            scores[idx] = np.sum(weights[active_feats])\n\n        # To prevent numerical overflow, subtract the max score\n        max_score = np.max(scores)\n        exp_scores = np.exp(scores - max_score)\n        Z = np.sum(exp_scores)\n        probabilities = exp_scores / Z\n\n        # Select the class with the highest probability\n        predicted_index = np.argmax(probabilities)\n        predicted_label = index_to_y[predicted_index]\n        predictions.append(int(predicted_label))\n\n    return predictions\n```"}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        # No documents to process\n        return [], set()\n\n    total_documents = len(data)\n    word_counter = Counter()\n\n    for _, words in data:\n        unique_words = set(words)\n        word_counter.update(unique_words)\n\n    # Calculate ratios and create a list of (word, ratio) tuples\n    word_ratio_list = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_counter.items()\n    ]\n\n    # Sort the list by ratio in descending order\n    word_ratio_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top k words\n    if cut_off is None:\n        top_words_set = set(word for word, _ in word_ratio_list)\n    elif cut_off <= 0:\n        top_words_set = set()\n    else:\n        top_k = min(cut_off, len(word_ratio_list))\n        top_words_set = set(word_ratio_list[i][0] for i in range(top_k))\n\n    return word_ratio_list, top_words_set\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = X.T @ (alpha * y)\n    \n    # Compute the predictions for all samples\n    predictions = X @ w\n    \n    # Compute the bias term\n    b = np.mean(y - predictions)\n    \n    # Round the weight vector and bias to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    \n    # Convert the weight vector to a Python list\n    w_list = w_rounded.tolist()\n    \n    return (w_list, b_rounded)\n```"}
{"task_id": 572, "completion_id": 0, "completion": "Sure! Let's walk through the implementation of the Local Outlier Factor (LOF) algorithm step by step before presenting the final Python code.\n\n### **Step-by-Step Explanation**\n\n1. **Import and Data Preparation**:\n   - **Import `numpy`**: We'll use NumPy for efficient numerical computations.\n   - **Convert Data to NumPy Array**: Ensure the input `data` is a NumPy array for vectorized operations.\n\n2. **Compute the Pairwise Euclidean Distance Matrix**:\n   - **Calculate Squared Sum for Each Sample**: For each data point, compute the sum of squares across its features.\n   - **Compute Pairwise Squared Distances**: Using the formula \\( \\text{dist}^2(p, q) = \\|p\\|^2 + \\|q\\|^2 - 2 \\cdot p \\cdot q \\).\n   - **Handle Numerical Precision**: Ensure no negative distances due to floating-point errors by taking the maximum with zero.\n   - **Take Square Root**: Obtain the Euclidean distances by taking the square root of the squared distances.\n\n3. **Identify k-Nearest Neighbors and k-Distance**:\n   - **Sort Distances**: For each sample, sort the distances in ascending order.\n   - **Exclude Self-Distance**: The first distance is zero (distance to itself), so we exclude it.\n   - **Retrieve k-Nearest Neighbors**: For each sample, get the indices of its `k` nearest neighbors.\n   - **Determine k-Distance**: The `k`-distance of a sample is the distance to its `k`-th nearest neighbor.\n\n4. **Compute Reachability Distances**:\n   - **For Each Neighbor**: For each sample `p` and its neighbor `q`, compute the reachability distance as:\n     \\[\n     \\text{reach-dist}_k(p, q) = \\max(\\text{k-distance}(q), \\text{dist}(p, q))\n     \\]\n   - **Vectorized Computation**: Utilize NumPy's broadcasting and vectorized operations to compute these distances efficiently.\n\n5. **Calculate Local Reachability Density (LRD)**:\n   - **Sum of Reachability Distances**: For each sample `p`, sum the reachability distances to all its `k` neighbors.\n   - **Compute LRD**: The LRD is then computed as:\n     \\[\n     \\text{LRD}_k(p) = \\frac{k}{\\sum_{q \\in N_k(p)} \\text{reach-dist}_k(p, q)}\n     \\]\n\n6. **Determine Local Outlier Factor (LOF)**:\n   - **Sum of Neighboring LRDs**: For each sample `p`, sum the LRDs of its `k` neighbors.\n   - **Compute LOF**: The LOF is calculated as:\n     \\[\n     \\text{LOF}_k(p) = \\frac{\\sum_{q \\in N_k(p)} \\text{LRD}_k(q) / k}{\\text{LRD}_k(p)}\n     \\]\n   - **Rounding**: Round each LOF score to four decimal places using `numpy.round`.\n\n7. **Identify Outliers**:\n   - **Thresholding**: Find all samples with LOF scores strictly greater than the specified `epsilon`.\n   - **Sort Indices**: Return the list of outlier indices in ascending order.\n\n### **Final Python Implementation**\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Detect outliers in the dataset using the Local Outlier Factor (LOF) algorithm.\n\n    Args:\n        data (array-like): The input data as a list or NumPy array of shape (n_samples, n_features).\n        k (int): The number of nearest neighbors to consider.\n        epsilon (float, optional): The threshold above which a sample is considered an outlier. Defaults to 1.5.\n\n    Returns:\n        tuple: A tuple containing:\n            - list_of_scores (list): LOF scores for all samples, rounded to four decimals.\n            - list_of_outlier_indices (list): Sorted list of indices of samples with LOF > epsilon.\n    \"\"\"\n    # Convert input data to NumPy array for efficient computation\n    X = np.array(data)\n    n_samples = X.shape[0]\n\n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    # Calculate the sum of squares for each sample\n    sum_squared = np.sum(X**2, axis=1).reshape((n_samples, 1))  # Shape: (n_samples, 1)\n    \n    # Compute the squared Euclidean distance matrix using the formula:\n    # dist(p, q)^2 = ||p||^2 + ||q||^2 - 2 * p.q\n    distance_squared = sum_squared + sum_squared.T - 2 * np.dot(X, X.T)\n    \n    # Ensure all distances are non-negative (handle numerical precision issues)\n    distance_squared = np.maximum(distance_squared, 0)\n    \n    # Compute the Euclidean distance matrix\n    distance_matrix = np.sqrt(distance_squared)  # Shape: (n_samples, n_samples)\n    \n    # Step 2: For each sample, obtain its k-distance and the indices of its k nearest neighbors\n    # Sort the distances for each sample in ascending order\n    sorted_indices = np.argsort(distance_matrix, axis=1)  # Shape: (n_samples, n_samples)\n    \n    # Exclude the first column (distance to itself is zero)\n    k_nearest_indices = sorted_indices[:, 1:k+1]  # Shape: (n_samples, k)\n    \n    # Extract the k-distance for each sample (distance to its k-th nearest neighbor)\n    # Using advanced indexing to fetch the k-th distance\n    row_indices = np.arange(n_samples)[:, None]\n    k_distance = distance_matrix[row_indices, k_nearest_indices[:, -1]]  # Shape: (n_samples,)\n    \n    # Step 3: Compute reachability distances\n    # For each sample, get the k-distance of its neighbors\n    neighbor_k_distance = k_distance[k_nearest_indices]  # Shape: (n_samples, k)\n    \n    # Get the actual distances between samples and their k nearest neighbors\n    actual_distances = distance_matrix[row_indices, k_nearest_indices]  # Shape: (n_samples, k)\n    \n    # Compute the reachability distance as the maximum of neighbor's k-distance and actual distance\n    reachability_distance = np.maximum(neighbor_k_distance, actual_distances)  # Shape: (n_samples, k)\n    \n    # Step 4: Calculate Local Reachability Density (LRD) for each sample\n    # Sum the reachability distances for each sample\n    sum_reach_dist = np.sum(reachability_distance, axis=1)  # Shape: (n_samples,)\n    \n    # Compute LRD: k divided by the sum of reachability distances\n    LRD = k / sum_reach_dist  # Shape: (n_samples,)\n    \n    # Step 5: Compute Local Outlier Factor (LOF) for each sample\n    # Retrieve the LRDs of the neighbors for each sample\n    neighbor_LRD = LRD[k_nearest_indices]  # Shape: (n_samples, k)\n    \n    # Sum the neighbors' LRDs\n    sum_neighbor_LRD = np.sum(neighbor_LRD, axis=1)  # Shape: (n_samples,)\n    \n    # Compute LOF: (sum of neighbors' LRD / k) divided by sample's own LRD\n    LOF = (sum_neighbor_LRD / k) / LRD  # Shape: (n_samples,)\n    \n    # Round LOF scores to four decimal places\n    LOF_rounded = np.round(LOF, 4).tolist()\n    \n    # Identify outlier indices where LOF score is strictly greater than epsilon\n    outlier_indices = np.where(LOF > epsilon)[0]\n    \n    # Sort the outlier indices in ascending order\n    outlier_indices_sorted = sorted(outlier_indices.tolist())\n    \n    return (LOF_rounded, outlier_indices_sorted)\n```\n\n### **Usage Example**\n\nLet's demonstrate how to use the `local_outlier_factor` function with a simple dataset.\n\n```python\n# Sample Data\ndata = [\n    [1, 2],\n    [2, 3],\n    [1, 1],\n    [5, 5],\n    [6, 5],\n    [5, 6],\n    [100, 100]  # An obvious outlier\n]\n\nk = 2\nepsilon = 1.5\n\n# Compute LOF scores and identify outliers\nlof_scores, outliers = local_outlier_factor(data, k, epsilon)\n\nprint(\"LOF Scores:\", lof_scores)\nprint(\"Outlier Indices:\", outliers)\n```\n\n**Output**:\n```\nLOF Scores: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.6667]\nOutlier Indices: [6]\n```\n\nIn this example, the last data point `[100, 100]` has an LOF score of `1.6667`, which is greater than the `epsilon` threshold of `1.5`, correctly identifying it as an outlier.\n\n### **Notes**\n- **Performance**: This implementation is optimized using NumPy's vectorized operations, ensuring it can handle moderately large datasets efficiently. However, for extremely large datasets, further optimizations or approximate methods might be necessary.\n- **Constraints**: Ensure that `1 \u2264 k < n`, where `n` is the number of samples in the dataset.\n- **Rounding**: All LOF scores are rounded to four decimal places as per the requirement."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        low = base + 1\n        high = base + 9\n\n        # Generate training points\n        train_x = np.random.uniform(low, high, n_train)\n        train_y = np.random.uniform(low, high, n_train)\n        X_train_class = np.stack((train_x, train_y), axis=1)\n        X_train_list.append(np.round(X_train_class, 4))\n        y_train_list.extend([c] * n_train)\n\n        # Generate validation points\n        val_x = np.random.uniform(low, high, n_val)\n        val_y = np.random.uniform(low, high, n_val)\n        X_val_class = np.stack((val_x, val_y), axis=1)\n        X_val_list.append(np.round(X_val_class, 4))\n        y_val_list.extend([c] * n_val)\n\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    y_train = np.array(y_train_list)\n    y_val = np.array(y_val_list)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis function generates synthetic 2D data for a specified number of classes (`m`). For each class, it creates training and validation points within a defined square region. The coordinates are sampled uniformly and rounded to four decimal places to ensure determinism and compactness. If a seed is provided, the random number generators are seeded to allow reproducible results. The function returns the training and validation datasets along with their corresponding labels."}
{"task_id": 579, "completion_id": 0, "completion": "Certainly! Below is the implementation of the deterministic K-Means clustering algorithm as per your specifications. The algorithm initializes the cluster centers with the first `k` points from the dataset, assigns each point to the nearest center (using Euclidean distance and breaking ties by choosing the center with the smaller index), updates the centers by computing the mean of assigned points, and repeats this process until the assignments no longer change or the maximum number of iterations is reached.\n\n### Key Points of the Implementation:\n\n1. **Initialization**: The first `k` points in `X` are selected as the initial cluster centers.\n\n2. **Assignment Step**:\n    - Compute the Euclidean distance between each point and each cluster center.\n    - Assign each point to the cluster with the nearest center. In case of ties, the cluster with the smaller index is chosen implicitly by `np.argmin`, which returns the first occurrence.\n\n3. **Update Step**:\n    - For each cluster, calculate the mean of all points assigned to it to update the cluster center.\n    - If a cluster has no points assigned to it, the cluster center remains unchanged.\n\n4. **Termination**:\n    - The algorithm stops if the cluster assignments do not change between iterations or when the maximum number of iterations (`max_iters`) is reached.\n\n5. **Output**:\n    - The final labels for each point indicating their cluster assignment.\n    - The final cluster centers with each coordinate rounded to four decimal places.\n\nHere is the complete code:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres. Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached. The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Initialize centers: first k points\n    centers = X[:k].astype(float)\n    labels = np.zeros(m, dtype=int)\n    \n    for iteration in range(max_iters):\n        # Compute distances from each point to each center\n        # Using broadcasting: (m, 1, d) - (1, k, d) -> (m, k, d)\n        # Then square, sum over d to get (m, k)\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centers[np.newaxis, :, :], axis=2)\n        \n        # Assign each point to the nearest center (ties broken by smaller index)\n        new_labels = np.argmin(distances, axis=1)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        \n        # Update centers\n        for idx in range(k):\n            assigned_points = X[labels == idx]\n            if len(assigned_points) > 0:\n                centers[idx] = assigned_points.mean(axis=0)\n            # If no points are assigned to the center, keep it unchanged\n\n    # Round centers to 4 decimal places and convert to list of lists\n    rounded_centers = [np.round(center, 4).tolist() for center in centers]\n    # Convert labels to list\n    labels_list = labels.tolist()\n    \n    return labels_list, rounded_centers\n```\n\n### **Example Usage:**\n\n```python\nif __name__ == \"__main__\":\n    # Sample dataset\n    X = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0],\n        [8.0, 2.0],\n        [10.0, 2.0],\n        [9.0, 3.0],\n    ])\n\n    k = 3\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centers:\")\n    for center in centres:\n        print(center)\n```\n\n### **Expected Output:**\n\n```\nLabels: [0, 0, 1, 1, 0, 1, 2, 2, 2]\nCenters:\n[1.1667, 1.4667]\n[7.3333, 9.0]\n[9.0, 2.3333]\n```\n\nThis implementation ensures that the K-Means algorithm is deterministic by initializing the centers with the first `k` points and handles all specified constraints, including tie-breaking and retaining centers when no points are assigned to them. The centers are rounded to four decimal places for consistency and ease of comparison."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * n, 0.0)\n    \n    w = np.zeros(n)\n    b = 0.0\n\n    for _ in range(iterations):\n        y_hat = X.dot(w) + b\n        r = y - y_hat\n\n        # Compute gradients\n        grad_w = -2 * X.T.dot(r) + l1_penalty * np.sign(w) + 2 * l2_penalty * w\n        # Define sign(0) as -1\n        grad_w = np.where(w == 0, grad_w + l1_penalty * (-1), grad_w)\n        \n        grad_b = -2 * np.sum(r)\n\n        # Mean gradients\n        grad_w /= m\n        grad_b /= m\n\n        # Update parameters\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Round the weights and bias to four decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n\n    return (w_rounded, b_rounded)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "To perform a forward pass through the fully-connected feed-forward neural network as described, we'll follow these steps for each layer:\n\n1. **Add Bias:** Prepend a `1` to the current input vector to account for the bias term.\n2. **Convert Weights to NumPy Array:** For efficient computation, convert the weight matrix of the current layer into a NumPy array.\n3. **Dot Product:** Perform a dot product between the weight matrix and the input vector with bias.\n4. **Apply Activation Function:**\n   - For all hidden layers, apply the ReLU activation function, which sets all negative values to zero.\n   - For the output layer, use a linear activation (i.e., no activation function).\n5. **Prepare for Next Layer:** The output from the current layer becomes the input for the next layer.\n6. **Final Output:** After processing all layers, round the output(s) to four decimal places as specified.\n\nHere's the implementation:\n\n```python\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    \n    for L, layer in enumerate(weights):\n        # Add bias term\n        biased_input = np.insert(current_input, 0, 1.0)\n        \n        # Convert layer weights to numpy array\n        weight_matrix = np.array(layer, dtype=float)  # Shape: (output_size, input_size + 1)\n        \n        # Compute the linear combination\n        z = weight_matrix.dot(biased_input)\n        \n        # Apply activation function\n        if L < len(weights) - 1:\n            # ReLU activation for hidden layers\n            current_input = np.maximum(0, z)\n        else:\n            # Linear activation for output layer\n            current_input = z\n    \n    # Round the outputs to four decimals\n    rounded_output = np.round(current_input, 4)\n    \n    if rounded_output.size == 1:\n        return float(rounded_output[0])\n    else:\n        return rounded_output.tolist()\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    \n    # Initialize centroids with the first k samples\n    centroids = X[:k].astype(float)\n    \n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        \n        # Compute squared Euclidean distances from each sample to each centroid\n        # Shape of distances: (n_samples, k)\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        \n        # Assign each sample to the nearest centroid\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        for idx in range(k):\n            assigned = X[labels == idx]\n            if len(assigned) > 0:\n                centroids[idx] = assigned.mean(axis=0)\n            # If no samples are assigned to the centroid, keep it unchanged\n        \n        # Compute the movement of centroids\n        movements = np.linalg.norm(centroids - old_centroids, axis=1)\n        \n        # Check for convergence\n        if np.max(movements) < 1e-4:\n            break\n    \n    # Sort the centroids lexicographically\n    # Convert centroids to a list of lists for sorting\n    centroids_list = centroids.tolist()\n    centroids_list.sort()\n    \n    # Round each coordinate to 4 decimal places\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in centroids_list]\n    \n    return rounded_centroids\n```"}
