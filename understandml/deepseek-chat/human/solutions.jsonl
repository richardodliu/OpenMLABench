{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float] | int:\n    if not a or not b:\n        return -1\n    num_columns = len(a[0])\n    if num_columns != len(b):\n        return -1\n    result = []\n    for row in a:\n        if len(row) != num_columns:\n            return -1\n        dot_product = sum((row[i] * b[i] for i in range(num_columns)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    if not a:\n        return []\n    rows = len(a)\n    cols = len(a[0]) if rows > 0 else 0\n    transposed = []\n    for j in range(cols):\n        new_row = []\n        for i in range(rows):\n            new_row.append(a[i][j])\n        transposed.append(new_row)\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    try:\n        np_array = np.array(a)\n        reshaped = np.reshape(np_array, new_shape)\n        return reshaped.tolist()\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if not matrix:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0]) if matrix else 0\n        means = []\n        for col in range(num_columns):\n            column_sum = 0.0\n            column_count = 0\n            for row in matrix:\n                if col < len(row):\n                    column_sum += row[col]\n                    column_count += 1\n            if column_count == 0:\n                means.append(0.0)\n            else:\n                means.append(column_sum / column_count)\n        return means\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix.\n    \n    Args:\n        matrix: A 2x2 matrix represented as a list of lists, where each inner list is a row.\n    \n    Returns:\n        A list of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    if discriminant >= 0:\n        sqrt_discriminant = math.sqrt(discriminant)\n        lambda1 = (trace + sqrt_discriminant) / 2\n        lambda2 = (trace - sqrt_discriminant) / 2\n    else:\n        sqrt_discriminant = math.sqrt(-discriminant)\n        lambda1 = trace / 2\n        lambda2 = trace / 2\n    eigenvalues = [lambda1, lambda2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    try:\n        det_T = np.linalg.det(T_np)\n        det_S = np.linalg.det(S_np)\n    except np.linalg.LinAlgError:\n        return -1\n    if np.isclose(det_T, 0) or np.isclose(det_S, 0):\n        return -1\n    try:\n        T_inv = np.linalg.inv(T_np)\n    except np.linalg.LinAlgError:\n        return -1\n    result = np.dot(T_inv, A_np)\n    result = np.dot(result, S_np)\n    result_rounded = np.round(result, 4)\n    return result_rounded.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        return None\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv_det = 1.0 / determinant\n    inverse = [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    if len(a[0]) != len(b):\n        return -1\n    rows_a = len(a)\n    cols_b = len(b[0])\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            total = 0\n            for k in range(len(b)):\n                total += a[i][k] * b[k][j]\n            result[i][j] = total\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    if not vectors:\n        return []\n    num_features = len(vectors)\n    num_observations = len(vectors[0]) if num_features > 0 else 0\n    for vec in vectors:\n        if len(vec) != num_observations:\n            raise ValueError('All vectors must have the same number of observations')\n    if num_observations == 0:\n        return []\n    means = [sum(feature) / num_observations for feature in vectors]\n    covariance_matrix = [[0.0 for _ in range(num_features)] for _ in range(num_features)]\n    for i in range(num_features):\n        for j in range(num_features):\n            covariance = 0.0\n            for k in range(num_observations):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= num_observations - 1\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b, dtype=float)\n    for _ in range(n):\n        x_new = np.zeros_like(x, dtype=float)\n        for i in range(A.shape[0]):\n            sum_ax = np.dot(A[i, :], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - sum_ax) / A[i, i]\n        x = np.round(x_new, decimals=4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    AT_A = np.dot(A.T, A)\n    a = AT_A[0, 0]\n    b = AT_A[0, 1]\n    c = AT_A[1, 0]\n    d = AT_A[1, 1]\n    trace = a + d\n    det = a * d - b * c\n    lambda1 = (trace + np.sqrt(trace ** 2 - 4 * det)) / 2\n    lambda2 = (trace - np.sqrt(trace ** 2 - 4 * det)) / 2\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    if sigma1 < sigma2:\n        (sigma1, sigma2) = (sigma2, sigma1)\n    sigma1 = round(sigma1, 4)\n    sigma2 = round(sigma2, 4)\n    return (sigma1, sigma2)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    n = len(matrix)\n    if n == 1:\n        return matrix[0][0]\n    elif n == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    else:\n        det = 0.0\n        for col in range(n):\n            minor = []\n            for i in range(1, n):\n                minor_row = []\n                for j in range(n):\n                    if j != col:\n                        minor_row.append(matrix[i][j])\n                minor.append(minor_row)\n            sign = (-1) ** (0 + col)\n            det += matrix[0][col] * sign * determinant_4x4(minor)\n        return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    X_np = np.column_stack((np.ones(X_np.shape[0]), X_np))\n    X_transpose = X_np.T\n    X_transpose_X = np.dot(X_transpose, X_np)\n    X_transpose_X_inv = np.linalg.inv(X_transpose_X)\n    X_transpose_y = np.dot(X_transpose, y_np)\n    theta = np.dot(X_transpose_X_inv, X_transpose_y)\n    theta_rounded = np.round(theta, 4)\n    coefficients = [float(coef) for coef in theta_rounded]\n    return coefficients"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Perform linear regression using gradient descent.\n    \n    Parameters:\n    X : np.ndarray\n        Feature matrix with a column of ones for the intercept.\n    y : np.ndarray\n        Target vector.\n    alpha : float\n        Learning rate.\n    iterations : int\n        Number of iterations for gradient descent.\n        \n    Returns:\n    np.ndarray\n        Coefficients of the linear regression model, rounded to four decimal places.\n    \"\"\"\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        error = predictions - y\n        gradient = X.T.dot(error) / len(y)\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    range_vals = max_vals - min_vals\n    range_vals[range_vals == 0] = 1\n    normalized_data = (data - min_vals) / range_vals\n    standardized_list = np.round(standardized_data, 4).tolist()\n    normalized_list = np.round(normalized_data, 4).tolist()\n    return (standardized_list, normalized_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test indices for K-Fold Cross-Validation.\n    \n    Parameters:\n    X : np.ndarray\n        Feature matrix.\n    y : np.ndarray\n        Target vector.\n    k : int, optional\n        Number of folds (default is 5).\n    shuffle : bool, optional\n        Whether to shuffle the data before splitting (default is True).\n    random_seed : int, optional\n        Seed for random number generator for reproducibility (default is None).\n        \n    Returns:\n    list of tuples\n        Each tuple contains (train_indices, test_indices) for each fold.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = len(X)\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_sizes = np.full(k, n_samples // k, dtype=int)\n    fold_sizes[:n_samples % k] += 1\n    current = 0\n    folds = []\n    for fold_size in fold_sizes:\n        (start, stop) = (current, current + fold_size)\n        folds.append(indices[start:stop])\n        current = stop\n    cv_splits = []\n    for i in range(k):\n        test_indices = folds[i]\n        train_indices = np.concatenate([folds[j] for j in range(k) if j != i])\n        cv_splits.append((train_indices, test_indices))\n    return cv_splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_rounded = np.round(principal_components, 4)\n    return principal_components_rounded.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str, parent_examples=None) -> dict:\n    if not examples:\n        return majority_value(parent_examples, target_attr)\n    target_values = [example[target_attr] for example in examples]\n    if all((v == target_values[0] for v in target_values)):\n        return target_values[0]\n    if not attributes:\n        return majority_value(examples, target_attr)\n    best_attr = choose_best_attribute(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    remaining_attrs = [attr for attr in attributes if attr != best_attr]\n    for value in get_values(examples, best_attr):\n        subset = [example for example in examples if example[best_attr] == value]\n        subtree = learn_decision_tree(subset, remaining_attrs, target_attr, examples)\n        tree[best_attr][value] = subtree\n    return tree\ndef majority_value(examples, target_attr):\n    if not examples:\n        return None\n    target_values = [example[target_attr] for example in examples]\n    counter = Counter(target_values)\n    majority = counter.most_common(1)[0][0]\n    return majority\ndef choose_best_attribute(examples, attributes, target_attr):\n    best_gain = -1\n    best_attr = None\n    for attr in attributes:\n        gain = information_gain(examples, attr, target_attr)\n        if gain > best_gain:\n            best_gain = gain\n            best_attr = attr\n    return best_attr\ndef information_gain(examples, attr, target_attr):\n    total_entropy = entropy([example[target_attr] for example in examples])\n    attr_values = get_values(examples, attr)\n    weighted_entropy = 0.0\n    for value in attr_values:\n        subset = [example for example in examples if example[attr] == value]\n        subset_entropy = entropy([example[target_attr] for example in subset])\n        weighted_entropy += len(subset) / len(examples) * subset_entropy\n    return total_entropy - weighted_entropy\ndef entropy(target_values):\n    if not target_values:\n        return 0.0\n    counts = Counter(target_values)\n    total = len(target_values)\n    entropy_val = 0.0\n    for count in counts.values():\n        probability = count / total\n        entropy_val -= probability * math.log2(probability)\n    return entropy_val\ndef get_values(examples, attr):\n    return list(set((example[attr] for example in examples)))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements the deterministic Pegasos algorithm for kernel SVM.\n\n    Parameters:\n    - data: 2D NumPy array where each row is a sample and each column is a feature.\n    - labels: 1D NumPy array of binary labels (-1 or 1).\n    - kernel: Type of kernel ('linear' or 'RBF').\n    - lambda_val: Regularization parameter.\n    - iterations: Number of training iterations.\n    - sigma: Sigma parameter for the RBF kernel.\n\n    Returns:\n    - alpha: List of alpha coefficients.\n    - bias: Bias term.\n    \"\"\"\n    n_samples = data.shape[0]\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    if kernel == 'linear':\n\n        def kernel_func(x, y):\n            return np.dot(x, y)\n    elif kernel == 'RBF':\n\n        def kernel_func(x, y):\n            return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Kernel not supported. Choose 'linear' or 'RBF'.\")\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            K[i, j] = kernel_func(data[i], data[j])\n    for _ in range(iterations):\n        eta = 1.0 / (lambda_val * (_ + 1))\n        predictions = np.zeros(n_samples)\n        for i in range(n_samples):\n            predictions[i] = np.sum(alpha * labels * K[:, i]) + bias\n        for i in range(n_samples):\n            if labels[i] * predictions[i] < 1:\n                alpha[i] += eta * labels[i]\n        alpha = np.maximum(alpha, 0)\n        bias = np.mean(labels - np.dot(K, alpha * labels))\n    alpha_rounded = np.round(alpha, 4).tolist()\n    bias_rounded = np.round(bias, 4).tolist()\n    return (alpha_rounded, bias_rounded)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"Compute the sigmoid of z.\"\"\"\n    sig = 1 / (1 + math.exp(-z))\n    return round(sig, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predicted_probabilities = []\n    mse = 0.0\n    for i in range(len(features)):\n        feature_vector = features[i]\n        z = 0.0\n        for j in range(len(feature_vector)):\n            z += feature_vector[j] * weights[j]\n        z += bias\n        probability = 1 / (1 + math.exp(-z))\n        predicted_probabilities.append(probability)\n    squared_errors = []\n    for i in range(len(labels)):\n        error = predicted_probabilities[i] - labels[i]\n        squared_errors.append(error ** 2)\n    mse = sum(squared_errors) / len(squared_errors)\n    predicted_probabilities_rounded = [round(prob, 4) for prob in predicted_probabilities]\n    mse_rounded = round(mse, 4)\n    return (predicted_probabilities_rounded, mse_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n    for epoch in range(epochs):\n        total_loss = 0.0\n        grad_weights = np.zeros_like(weights)\n        grad_bias = 0.0\n        for i in range(len(features)):\n            x = features[i]\n            y_true = labels[i]\n            z = np.dot(weights, x) + bias\n            y_pred = 1 / (1 + np.exp(-z))\n            loss = (y_true - y_pred) ** 2\n            total_loss += loss\n            d_loss = 2 * (y_pred - y_true)\n            d_sigmoid = y_pred * (1 - y_pred)\n            d_z = d_loss * d_sigmoid\n            grad_weights += d_z * x\n            grad_bias += d_z\n        grad_weights /= len(features)\n        grad_bias /= len(features)\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n        avg_mse = total_loss / len(features)\n        mse_history.append(round(avg_mse, 4))\n    return (weights, round(bias, 4), mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for v in reversed(topo):\n            v._backward()\n\n    def __radd__(self, other):\n        return self + other\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __neg__(self):\n        return self * -1\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B).T\n    C_matrix = np.array(C).T\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, decimals=4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    S = np.diag(singular_values)\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = 0\n    if np.linalg.det(U) < 0:\n        U[:, 1] = -U[:, 1]\n    U_rounded = np.round(U, 4)\n    S_rounded = np.round(S, 4)\n    V_rounded = np.round(V, 4)\n    U_list = U_rounded.reshape(2, 2).tolist()\n    S_list = S_rounded.reshape(2, 2).tolist()\n    V_list = V_rounded.reshape(2, 2).tolist()\n    return (U_list, S_list, V_list)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(len(X))\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Iterate over the dataset in batches.\n    \n    Parameters:\n    X (numpy.ndarray): Input data array.\n    y (numpy.ndarray, optional): Target data array. Defaults to None.\n    batch_size (int, optional): Size of each batch. Defaults to 64.\n    \n    Yields:\n    list: Batch of X (and y if provided) as Python lists.\n    \"\"\"\n    num_samples = X.shape[0]\n    for i in range(0, num_samples, batch_size):\n        batch_X = X[i:i + batch_size]\n        if y is not None:\n            batch_y = y[i:i + batch_size]\n            yield (batch_X.tolist(), batch_y.tolist())\n        else:\n            yield batch_X.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two subsets based on whether the specified feature\n    meets or exceeds the given threshold.\n    \n    Parameters:\n    X (numpy.ndarray): The input dataset.\n    feature_i (int): Index of the feature to evaluate.\n    threshold (float): Threshold value for the feature.\n    \n    Returns:\n    tuple: Two lists, the first where the feature >= threshold, the second where it is not.\n    \"\"\"\n    X_array = np.array(X)\n    feature_values = X_array[:, feature_i]\n    mask_ge = feature_values >= threshold\n    mask_lt = ~mask_ge\n    X_ge = X_array[mask_ge].tolist()\n    X_lt = X_array[mask_lt].tolist()\n    return (X_ge, X_lt)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree < 1:\n        raise ValueError('Degree must be at least 1')\n    (n_samples, n_features) = X.shape\n    features = []\n    for d in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), d):\n            exponents = np.zeros(n_features, dtype=int)\n            for idx in comb:\n                exponents[idx] += 1\n            features.append(exponents)\n    unique_features = []\n    seen = set()\n    for feat in features:\n        tuple_feat = tuple(feat)\n        if tuple_feat not in seen:\n            seen.add(tuple_feat)\n            unique_features.append(feat)\n    unique_features.sort(key=lambda x: (sum(x), tuple(x)))\n    X_poly = np.ones((n_samples, len(unique_features)))\n    for (i, exponents) in enumerate(unique_features):\n        X_poly[:, i] = np.prod(np.power(X, exponents), axis=1)\n    return X_poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a dataset.\n    \n    Parameters:\n    X : 2D numpy array\n        The feature matrix.\n    y : 1D numpy array\n        The target vector.\n    n_subsets : int\n        The number of subsets to generate.\n    replacements : bool, optional\n        Whether to sample with replacements (default is True).\n    seed : int, optional\n        Random seed for reproducibility (default is 42).\n    \n    Returns:\n    list\n        A list of tuples, where each tuple is (X_subset, y_subset) as lists.\n    \"\"\"\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.shape[0], n_col), dtype=int)\n    one_hot[np.arange(x.shape[0]), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    X : 2D numpy array\n        Input data matrix.\n    Y : 2D numpy array, optional\n        Second input data matrix. If not provided, the correlation matrix of X with itself is calculated.\n    \n    Returns:\n    list\n        Correlation matrix rounded to 4 decimal places, converted to a list.\n    \"\"\"\n    if Y is None:\n        corr_matrix = np.corrcoef(X, rowvar=False)\n    else:\n        combined = np.hstack((X, Y))\n        corr_matrix = np.corrcoef(combined, rowvar=False)\n        n_features_X = X.shape[1]\n        n_features_Y = Y.shape[1]\n        corr_matrix = corr_matrix[:n_features_X, n_features_X:]\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n    return corr_matrix_rounded.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    classifiers = []\n    weights = np.ones(n_samples) / n_samples\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_threshold = None\n        best_feature = None\n        best_direction = None\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    if direction == 1:\n                        predictions = np.where(feature_values >= threshold, 1, -1)\n                    else:\n                        predictions = np.where(feature_values < threshold, 1, -1)\n                    misclassified = predictions != y\n                    error = np.sum(weights * misclassified)\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature_idx\n                        best_direction = direction\n        if best_error <= 0:\n            best_error = 1e-10\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        if best_direction == 1:\n            predictions = np.where(X[:, best_feature] >= best_threshold, 1, -1)\n        else:\n            predictions = np.where(X[:, best_feature] < best_threshold, 1, -1)\n        misclassified = predictions != y\n        weights *= np.exp(alpha * misclassified)\n        weights /= np.sum(weights)\n        rounded_alpha = round(alpha, 4)\n        rounded_threshold = round(best_threshold, 4)\n        classifiers.append({'feature': best_feature, 'threshold': rounded_threshold, 'direction': best_direction, 'alpha': rounded_alpha})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    x = np.array(scores)\n    max_x = np.max(x)\n    shifted_x = x - max_x\n    sum_exp = np.sum(np.exp(shifted_x))\n    log_sum_exp = np.log(sum_exp)\n    log_softmax_values = shifted_x - log_sum_exp\n    rounded_log_softmax = np.round(log_softmax_values, 4)\n    return rounded_log_softmax.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_opt = None\n        self.w0_opt = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_opt = copy.copy(optimizer)\n        self.w0_opt = copy.copy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W_opt.update(self.W, grad_w)\n            self.w0 = self.w0_opt.update(self.w0, grad_w0)\n        accum_grad = accum_grad.dot(W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    if padding > 0:\n        padded_input = np.pad(input_matrix, pad_width=padding, mode='constant', constant_values=0)\n    else:\n        padded_input = input_matrix.copy()\n    (input_height, input_width) = padded_input.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, output_height):\n        for j in range(0, output_width):\n            start_i = i * stride\n            start_j = j * stride\n            end_i = start_i + kernel_height\n            end_j = start_j + kernel_width\n            region = padded_input[start_i:end_i, start_j:end_j]\n            output_matrix[i, j] = np.sum(region * kernel)\n    output_matrix_rounded = np.round(output_matrix, 4)\n    return output_matrix_rounded.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0.0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    l2_term = alpha * np.sum(w ** 2)\n    loss = mse + l2_term\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Parameters:\n    z (float): The input value.\n    alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n    float: The output after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z >= 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel (dot product) between two vectors x1 and x2.\n    \n    Parameters:\n    x1 : numpy.ndarray\n        First input vector.\n    x2 : numpy.ndarray\n        Second input vector.\n        \n    Returns:\n    float\n        The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    denominator = true_positives + false_positives\n    if denominator == 0:\n        return 0.0\n    precision_score = true_positives / denominator\n    return precision_score"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent variants (SGD, Batch, Mini-Batch) with MSE loss.\n    \n    Parameters:\n    X : numpy.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : numpy.ndarray\n        Target vector of shape (n_samples, 1).\n    weights : numpy.ndarray\n        Initial weight vector of shape (n_features, 1).\n    learning_rate : float\n        Learning rate for gradient descent.\n    n_iterations : int\n        Number of iterations to run gradient descent.\n    batch_size : int, optional\n        Size of the mini-batch (default is 1).\n    method : str, optional\n        Gradient descent variant ('sgd', 'batch', or 'mini-batch') (default is 'batch').\n    \n    Returns:\n    list\n        Updated weights as a list after reshaping and rounding to 4 decimal places.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    weights = weights.reshape(-1, 1)\n    y = y.reshape(-1, 1)\n    for _ in range(n_iterations):\n        if method == 'sgd':\n            for i in range(n_samples):\n                xi = X[i].reshape(1, -1)\n                yi = y[i].reshape(1, -1)\n                prediction = np.dot(xi, weights)\n                error = prediction - yi\n                gradient = 2 * np.dot(xi.T, error) / 1\n                weights -= learning_rate * gradient\n        elif method == 'batch':\n            prediction = np.dot(X, weights)\n            error = prediction - y\n            gradient = 2 * np.dot(X.T, error) / n_samples\n            weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                X_batch = X[i:i + batch_size]\n                y_batch = y[i:i + batch_size]\n                prediction = np.dot(X_batch, weights)\n                error = prediction - y_batch\n                gradient = 2 * np.dot(X_batch.T, error) / X_batch.shape[0]\n                weights -= learning_rate * gradient\n    weights_rounded = np.round(weights, 4)\n    return weights_rounded.reshape(-1).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    mat = np.array(matrix, dtype=np.float64)\n    (rows, cols) = mat.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            break\n        i = r\n        while mat[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if cols == lead:\n                    return mat.tolist()\n        mat[[i, r]] = mat[[r, i]]\n        pivot = mat[r, lead]\n        if pivot != 0:\n            mat[r] = mat[r] / pivot\n        for i in range(rows):\n            if i != r and mat[i, lead] != 0:\n                mat[i] = mat[i] - mat[i, lead] * mat[r]\n        lead += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Adam optimization algorithm implementation.\n\n    Parameters:\n    - f: The objective function to be optimized.\n    - grad: Function that computes the gradient of f.\n    - x0: Initial parameter values.\n    - learning_rate: Step size (default: 0.001).\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9).\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999).\n    - epsilon: Small constant for numerical stability (default: 1e-8).\n    - num_iterations: Number of iterations to run the optimizer (default: 1000).\n\n    Returns:\n    - Optimized parameters as a Python list, rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Perform Lasso Regression (L1 Regularization) using Gradient Descent.\n    \n    Parameters:\n    X : np.array\n        Feature matrix of shape (n_samples, n_features).\n    y : np.array\n        Target vector of shape (n_samples,).\n    alpha : float, optional\n        Regularization parameter (default is 0.1).\n    learning_rate : float, optional\n        Learning rate for gradient descent (default is 0.01).\n    max_iter : int, optional\n        Maximum number of iterations (default is 1000).\n    tol : float, optional\n        Tolerance for stopping criterion (default is 1e-4).\n        \n    Returns:\n    tuple\n        A tuple containing the weights (list) and bias (float), both rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        error = y_pred - y\n        grad_weights = 1 / n_samples * np.dot(X.T, error) + alpha * np.sign(weights)\n        grad_bias = 1 / n_samples * np.sum(error)\n        prev_weights = weights.copy()\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n        if np.linalg.norm(weights - prev_weights) < tol:\n            break\n    weights_rounded = np.round(weights, 4).tolist()\n    bias_rounded = round(bias, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    if m == 0:\n        return n\n    if n == 0:\n        return m\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    else:\n        recall_value = TP / denominator\n        return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x = np.array(x)\n        h_prev = np.tanh(np.dot(Wx, x) + np.dot(Wh, h_prev) + b)\n    final_hidden_state = np.round(h_prev, 4).tolist()\n    return final_hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translated_points = points_array + np.array([tx, ty])\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two normal distributions P and Q.\n    \n    Parameters:\n    mu_p : float\n        Mean of distribution P.\n    sigma_p : float\n        Standard deviation of distribution P.\n    mu_q : float\n        Mean of distribution Q.\n    sigma_q : float\n        Standard deviation of distribution Q.\n        \n    Returns:\n    float\n        The KL divergence D_KL(P || Q).\n    \"\"\"\n    ratio = sigma_q ** 2 / sigma_p ** 2\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve the linear system Ax = b using the Gauss-Seidel iterative method.\n    \n    Parameters:\n    A : numpy.ndarray\n        Square coefficient matrix\n    b : numpy.ndarray\n        Right-hand side vector\n    n : int\n        Number of iterations\n    x_ini : numpy.ndarray, optional\n        Initial guess for the solution vector (default is zeros)\n        \n    Returns:\n    list\n        Approximated solution vector after n iterations, rounded to 4 decimals\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError(\"Dimensions of A and b don't match\")\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n        if x.shape != b.shape:\n            raise ValueError('Initial guess x_ini must have same dimension as b')\n    for _ in range(n):\n        for i in range(len(x)):\n            sum_ax = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - sum_ax) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A : numpy.ndarray\n        Coefficient matrix of shape (n, n).\n    b : numpy.ndarray\n        Right-hand side vector of shape (n, 1) or (n,).\n    \n    Returns:\n    list\n        Solution vector x as a Python list with elements rounded to 4 decimal places.\n    \"\"\"\n    n = len(A)\n    if A.shape != (n, n):\n        raise ValueError('Matrix A must be square.')\n    if len(b) != n:\n        raise ValueError('Vector b must have the same number of rows as A.')\n    A = A.astype(float)\n    b = np.array(b, dtype=float).reshape(-1, 1)\n    augmented = np.hstack((A, b))\n    for col in range(n):\n        max_row = np.argmax(np.abs(augmented[col:, col])) + col\n        augmented[[col, max_row]] = augmented[[max_row, col]]\n        pivot = augmented[col, col]\n        if pivot == 0:\n            raise ValueError('Matrix is singular and cannot be solved.')\n        augmented[col] = augmented[col] / pivot\n        for row in range(col + 1, n):\n            factor = augmented[row, col]\n            augmented[row] -= factor * augmented[col]\n    x = np.zeros(n)\n    for row in range(n - 1, -1, -1):\n        x[row] = augmented[row, -1] - np.dot(augmented[row, row + 1:n], x[row + 1:n])\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \n        Args:\n            x: input sequence of shape (sequence_length, input_size)\n            initial_hidden_state: initial hidden state of shape (hidden_size, 1)\n            initial_cell_state: initial cell state of shape (hidden_size, 1)\n            \n        Returns:\n            hidden_states: list of hidden states at each time step\n            final_hidden_state: final hidden state after processing all inputs\n            final_cell_state: final cell state after processing all inputs\n        \"\"\"\n        sequence_length = x.shape[0]\n        hidden_states = []\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        for t in range(sequence_length):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((x_t, h_prev))\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_tilde_t = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            c_t = f_t * c_prev + i_t * c_tilde_t\n            h_t = o_t * np.tanh(c_t)\n            hidden_states.append(h_t)\n            h_prev = h_t\n            c_prev = c_t\n        hidden_states = [np.round(h, 4).tolist() for h in hidden_states]\n        final_hidden_state = np.round(h_prev, 4).tolist()\n        final_cell_state = np.round(c_prev, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    num_documents = len(corpus)\n    query_terms = query\n    tf_idf_scores = []\n    df = {}\n    for term in query_terms:\n        df[term] = 0\n        for doc in corpus:\n            if term in doc:\n                df[term] += 1\n    idf = {}\n    for term in query_terms:\n        idf_value = math.log((num_documents + 1) / (df[term] + 1)) + 1\n        idf[term] = idf_value\n    for doc in corpus:\n        doc_tf_idf = []\n        total_terms_in_doc = len(doc)\n        for term in query_terms:\n            if total_terms_in_doc == 0:\n                tf = 0.0\n            else:\n                tf = doc.count(term) / total_terms_in_doc\n            tf_idf = tf * idf[term]\n            doc_tf_idf.append(round(tf_idf, 5))\n        tf_idf_scores.append(doc_tf_idf)\n    return tf_idf_scores"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp != 0 else 0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0\n    if beta ** 2 * precision + recall == 0:\n        f_score_value = 0\n    else:\n        f_score_value = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score_value, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \n        Args:\n            input_size (int): Size of the input vectors.\n            hidden_size (int): Size of the hidden state vectors.\n            output_size (int): Size of the output vectors.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            input_sequence (list of np.array): Sequence of input vectors, each of shape (input_size, 1).\n            \n        Returns:\n            tuple: (outputs, last_inputs, last_hiddens)\n                outputs: list of output vectors at each time step.\n                last_inputs: list of input vectors at each time step (including initial zeros).\n                last_hiddens: list of hidden state vectors at each time step (including initial zeros).\n        \"\"\"\n        h_prev = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = [h_prev]\n        for x in input_sequence:\n            x = x.reshape(-1, 1)\n            last_inputs.append(x)\n            h = np.tanh(np.dot(self.W_xh, x) + np.dot(self.W_hh, h_prev) + self.b_h)\n            last_hiddens.append(h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n            h_prev = h\n        return (outputs, last_inputs, last_hiddens)\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \n        Args:\n            input_sequence (list of np.array): Sequence of input vectors.\n            expected_output (list of np.array): Sequence of expected output vectors.\n            outputs (list of np.array): Outputs from the forward pass.\n            last_inputs (list of np.array): Inputs from the forward pass.\n            last_hiddens (list of np.array): Hidden states from the forward pass.\n            learning_rate (float): Learning rate for weight updates.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(len(input_sequence))):\n            dy = outputs[t] - expected_output[t]\n            dW_hy += np.dot(dy, last_hiddens[t + 1].T)\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dh_raw = (1 - last_hiddens[t + 1] ** 2) * dh\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dW_hh += np.dot(dh_raw, last_hiddens[t].T)\n            db_h += dh_raw\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def train(self, input_sequence, expected_output, learning_rate=0.01):\n        \"\"\"\n        Convenience method to perform both forward and backward pass for training.\n        \n        Args:\n            input_sequence (list of np.array): Sequence of input vectors.\n            expected_output (list of np.array): Sequence of expected output vectors.\n            learning_rate (float): Learning rate for weight updates.\n            \n        Returns:\n            float: Total loss for the sequence.\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.forward(input_sequence)\n        self.backward(input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n        loss = 0\n        for (y, y_target) in zip(outputs, expected_output):\n            loss += 0.5 * np.sum((y - y_target) ** 2)\n        return loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - np.dot(A, x)\n    p = r.copy()\n    rsold = np.dot(r, r)\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    x_rounded = np.round(x, 8)\n    return x_rounded.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    total = len(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / total\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_ptr = [0]\n    for row in dense_matrix:\n        non_zero_count = 0\n        for (col_idx, element) in enumerate(row):\n            if element != 0:\n                values.append(element)\n                column_indices.append(col_idx)\n                non_zero_count += 1\n        row_ptr.append(row_ptr[-1] + non_zero_count)\n    return (values, column_indices, row_ptr)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product_vL = sum((vi * Li for (vi, Li) in zip(v, L)))\n    dot_product_LL = sum((Li * Li for Li in L))\n    if dot_product_LL == 0:\n        return [0.0 for _ in L]\n    scalar = dot_product_vL / dot_product_LL\n    projection = [scalar * Li for Li in L]\n    rounded_projection = [round(comp, 3) for comp in projection]\n    return rounded_projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix:\n        return ([], [], [])\n    rows = len(dense_matrix)\n    cols = len(dense_matrix[0]) if rows > 0 else 0\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for col in range(cols):\n        non_zero_in_col = 0\n        for row in range(rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n                non_zero_in_col += 1\n        column_pointer.append(column_pointer[-1] + non_zero_in_col)\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A_array = np.array(A, dtype=float)\n\n    def rref(matrix):\n        mat = matrix.copy()\n        (rows, cols) = mat.shape\n        r = 0\n        pivot_cols = []\n        for c in range(cols):\n            pivot = np.argmax(np.abs(mat[r:, c])) + r\n            if np.isclose(mat[pivot, c], 0):\n                continue\n            mat[[r, pivot]] = mat[[pivot, r]]\n            pivot_cols.append(c)\n            mat[r] = mat[r] / mat[r, c]\n            for i in range(rows):\n                if i != r and (not np.isclose(mat[i, c], 0)):\n                    mat[i] = mat[i] - mat[i, c] * mat[r]\n            r += 1\n            if r == rows:\n                break\n        return (mat, pivot_cols)\n    (rref_mat, pivot_cols) = rref(A_array)\n    basis = A_array[:, pivot_cols]\n    basis_rounded = np.round(basis, 8)\n    return basis_rounded.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    ssr = np.sum((y_true - y_pred) ** 2)\n    sst = np.sum((y_true - np.mean(y_true)) ** 2)\n    if sst == 0:\n        return 1.0 if ssr == 0 else 0.0\n    r2 = 1 - ssr / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    rows = len(img)\n    cols = len(img[0])\n    for row in img:\n        if len(row) != cols:\n            return -1\n    total_pixels = 0\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, int) or pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    if total_pixels == 0:\n        return -1\n    average = total_brightness / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n    \n    Parameters:\n    y_true (array-like): Array of actual values.\n    y_pred (array-like): Array of predicted values.\n    \n    Returns:\n    float: The RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If the input arrays are empty or have mismatched shapes.\n    TypeError: If the inputs are not array-like or cannot be converted to numpy arrays.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except Exception as e:\n        raise TypeError('Inputs must be array-like and convertible to numpy arrays.') from e\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_diff = (y_true - y_pred) ** 2\n    mse = np.mean(squared_diff)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 0.0\n    else:\n        jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / sum_true_pred\n    return round(float(dice), 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature_name, value) in row.items():\n        feature_seed = hash(feature_name) % 2 ** 32\n        np.random.seed(feature_seed)\n        feature_hv = np.random.choice([-1, 1], size=dim)\n        value_seed = random_seeds[feature_name]\n        np.random.seed(value_seed)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.sign(composite_hv)\n    composite_hv[composite_hv == 0] = 1\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    TP = FP = FN = TN = 0\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            TP += 1\n        elif y_true == 0 and y_pred == 1:\n            FP += 1\n        elif y_true == 1 and y_pred == 0:\n            FN += 1\n        elif y_true == 0 and y_pred == 0:\n            TN += 1\n    matrix = [[TP, FN], [FP, TN]]\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n    \n    Parameters:\n    v1 (numpy.ndarray): First input vector.\n    v2 (numpy.ndarray): Second input vector.\n    \n    Returns:\n    float: Cosine similarity between v1 and v2, rounded to three decimal places.\n    \n    Raises:\n    ValueError: If vectors have different shapes, are empty, or have zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Vectors cannot be empty.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    if norm_v1 == 0 or norm_v2 == 0:\n        raise ValueError('Vectors cannot have zero magnitude.')\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    TP = 0\n    FP = 0\n    TN = 0\n    FN = 0\n    for (a, p) in zip(actual, predicted):\n        if a == 1 and p == 1:\n            TP += 1\n        elif a == 0 and p == 1:\n            FP += 1\n        elif a == 0 and p == 0:\n            TN += 1\n        elif a == 1 and p == 0:\n            FN += 1\n    confusion_matrix = [[TP, FP], [FN, TN]]\n    accuracy = (TP + TN) / (TP + FP + TN + FN) if TP + FP + TN + FN != 0 else 0.0\n    accuracy = round(accuracy, 3)\n    precision = TP / (TP + FP) if TP + FP != 0 else 0.0\n    recall = TP / (TP + FN) if TP + FN != 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0.0\n    f1_score = round(f1_score, 3)\n    specificity = TN / (TN + FP) if TN + FP != 0 else 0.0\n    specificity = round(specificity, 3)\n    npv = TN / (TN + FN) if TN + FN != 0 else 0.0\n    npv = round(npv, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data_array = np.array(data)\n    mean = np.mean(data_array)\n    median = np.median(data_array)\n    try:\n        mode = stats.mode(data_array, keepdims=False).mode\n    except:\n        mode = np.nan\n    variance = np.var(data_array, ddof=0)\n    standard_deviation = np.std(data_array, ddof=0)\n    percentile_25 = np.percentile(data_array, 25)\n    percentile_50 = np.percentile(data_array, 50)\n    percentile_75 = np.percentile(data_array, 75)\n    iqr = percentile_75 - percentile_25\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode if np.isscalar(mode) else float(mode), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    if p < 0 or p > 1:\n        raise ValueError('Probability p must be between 0 and 1')\n    if k < 0 or k > n:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    if std_dev <= 0:\n        raise ValueError('Standard deviation must be positive.')\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    if lam < 0:\n        raise ValueError('Lambda (lam) must be non-negative')\n    if k < 0:\n        raise ValueError('k must be a non-negative integer')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, which is the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or img.ndim != 2:\n        raise ValueError('Input must be a 2D numpy array.')\n    max_val = np.max(img)\n    min_val = np.min(img)\n    contrast = max_val - min_val\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of vec1 and vec2.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        features = []\n        for d in range(degree + 1):\n            features.append(round(x ** d, 8))\n        transformed_data.append(features)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_enc = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            pos_enc[pos, i] = np.sin(pos / 10000 ** (i / d_model), dtype=np.float16)\n            if i + 1 < d_model:\n                pos_enc[pos, i + 1] = np.cos(pos / 10000 ** (i / d_model), dtype=np.float16)\n    return pos_enc.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    parameter_rounded = np.round(parameter, 5).tolist()\n    m_rounded = np.round(m, 5).tolist()\n    v_rounded = np.round(v, 5).tolist()\n    return (parameter_rounded, m_rounded, v_rounded)"}
{"task_id": 88, "completion_id": 0, "solution": "def feed_forward(x, ff_params):\n    return np.matmul(np.maximum(0, np.matmul(x, ff_params['w1']) + ff_params['b1']), ff_params['w2']) + ff_params['b2']\ndef transformer_block(x, block_params, n_head):\n    attn_out = multi_head_attention(layer_norm(x, block_params['ln_1']['g'], block_params['ln_1']['b']), n_head, block_params['attn'])\n    x = x + attn_out\n    ff_out = feed_forward(layer_norm(x, block_params['ln_2']['g'], block_params['ln_2']['b']), block_params['mlp'])\n    x = x + ff_out\n    return x\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    if not params['blocks']:\n        d_model = params['wte'].shape[1]\n        for _ in range(12):\n            block_params = {'ln_1': {'g': np.ones(d_model), 'b': np.zeros(d_model)}, 'attn': {'q_proj': np.random.randn(d_model, d_model) * 0.02, 'k_proj': np.random.randn(d_model, d_model) * 0.02, 'v_proj': np.random.randn(d_model, d_model) * 0.02, 'out_proj': np.random.randn(d_model, d_model) * 0.02}, 'ln_2': {'g': np.ones(d_model), 'b': np.zeros(d_model)}, 'mlp': {'w1': np.random.randn(d_model, 4 * d_model) * 0.02, 'b1': np.zeros(4 * d_model), 'w2': np.random.randn(4 * d_model, d_model) * 0.02, 'b2': np.zeros(d_model)}}\n            params['blocks'].append(block_params)\n    input_ids = encoder.encode(prompt)\n    generated_ids = list(input_ids)\n    for _ in range(n_tokens_to_generate):\n        x = params['wte'][input_ids] + params['wpe'][range(len(input_ids))]\n        for block in params['blocks']:\n            x = transformer_block(x, block, hparams['n_head'])\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        logits = np.matmul(x[-1], params['wte'].T)\n        probs = softmax(logits)\n        next_token = np.random.choice(len(probs), p=probs)\n        input_ids = [next_token]\n        generated_ids.append(next_token)\n    return encoder.decode(generated_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            attention_scores[i, j] = crystal_values[i] * crystal_values[j]\n    softmax_scores = np.zeros((n, n))\n    for i in range(n):\n        softmax_scores[i] = softmax(attention_scores[i])\n    enhanced_patterns = np.zeros(n)\n    for i in range(n):\n        weighted_sum = 0.0\n        for j in range(n):\n            weighted_sum += softmax_scores[i, j] * crystal_values[j]\n        enhanced_patterns[i] = weighted_sum\n    enhanced_patterns_rounded = [round(val, 4) for val in enhanced_patterns]\n    return enhanced_patterns_rounded"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            true_positives += 1\n        elif true == 0 and pred == 1:\n            false_positives += 1\n        elif true == 1 and pred == 0:\n            false_negatives += 1\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives != 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives != 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(len(consumption_data)):\n        day = i + 1\n        fluctuation = 10 * math.sin(2 * PI * day / 10)\n        detrended_value = consumption_data[i] - fluctuation\n        detrended_data.append(detrended_value)\n    n = len(detrended_data)\n    x_sum = 0\n    y_sum = 0\n    xy_sum = 0\n    x_sq_sum = 0\n    for i in range(n):\n        x = i + 1\n        y = detrended_data[i]\n        x_sum += x\n        y_sum += y\n        xy_sum += x * y\n        x_sq_sum += x * x\n    m = (n * xy_sum - x_sum * y_sum) / (n * x_sq_sum - x_sum * x_sum)\n    b = (y_sum - m * x_sum) / n\n    day_15 = 15\n    base_consumption = m * day_15 + b\n    fluctuation_15 = 10 * math.sin(2 * PI * day_15 / 10)\n    total_consumption = base_consumption + fluctuation_15\n    safety_margin = 1.05\n    final_value = math.ceil(total_consumption * safety_margin)\n    return int(final_value)"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n\n    Raises:\n    ValueError: If the lengths of y_true and y_pred are not equal\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The lengths of y_true and y_pred must be the same.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Query (Q), Key (K), and Value (V) matrices.\n    \n    Args:\n        X: Input matrix of shape (batch_size, sequence_length, input_dim)\n        W_q: Weight matrix for queries of shape (input_dim, d_q)\n        W_k: Weight matrix for keys of shape (input_dim, d_k)\n        W_v: Weight matrix for values of shape (input_dim, d_v)\n    \n    Returns:\n        Tuple of (Q, K, V) matrices\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the scaled dot-product attention.\n    \n    Args:\n        Q: Query matrix of shape (batch_size, sequence_length, d_q)\n        K: Key matrix of shape (batch_size, sequence_length, d_k)\n        V: Value matrix of shape (batch_size, sequence_length, d_v)\n    \n    Returns:\n        Output matrix of shape (batch_size, sequence_length, d_v)\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.matmul(Q, K.transpose(0, 2, 1)) / np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.matmul(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute the multi-head attention.\n    \n    Args:\n        X: Input matrix of shape (batch_size, sequence_length, input_dim)\n        W_q: Weight matrix for queries of shape (input_dim, d_model)\n        W_k: Weight matrix for keys of shape (input_dim, d_model)\n        W_v: Weight matrix for values of shape (input_dim, d_model)\n        n_heads: Number of attention heads\n    \n    Returns:\n        List representing the output of multi-head attention\n    \"\"\"\n    (batch_size, seq_len, input_dim) = X.shape\n    d_model = W_q.shape[1]\n    assert d_model % n_heads == 0, 'd_model must be divisible by n_heads'\n    head_dim = d_model // n_heads\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q = Q.reshape(batch_size, seq_len, n_heads, head_dim).transpose(0, 2, 1, 3)\n    K = K.reshape(batch_size, seq_len, n_heads, head_dim).transpose(0, 2, 1, 3)\n    V = V.reshape(batch_size, seq_len, n_heads, head_dim).transpose(0, 2, 1, 3)\n    attention_outputs = []\n    for i in range(n_heads):\n        Qi = Q[:, i, :, :]\n        Ki = K[:, i, :, :]\n        Vi = V[:, i, :, :]\n        head_output = self_attention(Qi, Ki, Vi)\n        attention_outputs.append(head_output)\n    output = np.concatenate(attention_outputs, axis=-1)\n    output = output.reshape(batch_size, seq_len, d_model)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('The input lists must be of the same length.')\n    a = b = c = d = 0\n    for (xi, yi) in zip(x, y):\n        if xi == 1 and yi == 1:\n            a += 1\n        elif xi == 1 and yi == 0:\n            b += 1\n        elif xi == 0 and yi == 1:\n            c += 1\n        elif xi == 0 and yi == 0:\n            d += 1\n        else:\n            raise ValueError('Input lists must contain only 0s and 1s.')\n    denominator = (a + b) * (c + d) * (a + c) * (b + d)\n    if denominator == 0:\n        return 0.0\n    phi = (a * d - b * c) / denominator ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x > 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to the 4th decimal place.\n    \"\"\"\n    if x > 30:\n        return round(x, 4)\n    elif x < -30:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places.\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    swish_value = x * sigmoid\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_output = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_output))\n    binary_predictions = (probabilities >= 0.5).astype(int)\n    return binary_predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: Input feature matrix of shape (N, M), where N is the number of samples and M is the number of features.\n        y: Target labels of shape (N,), where each element is an integer representing the class label.\n        learning_rate: Learning rate for gradient descent.\n        iterations: Number of iterations for gradient descent.\n\n    Returns:\n        B: Updated parameter matrix of shape (C, M), where C is the number of classes, rounded to 4 decimal places.\n        losses: List of Cross Entropy loss values over iterations, rounded to 4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    classes = np.unique(y)\n    C = len(classes)\n    B = np.zeros((C, M))\n    y_onehot = np.zeros((N, C))\n    y_onehot[np.arange(N), y] = 1\n    losses = []\n    for _ in range(iterations):\n        logits = X @ B.T\n        exp_logits = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n        softmax_probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        loss = -np.sum(y_onehot * np.log(softmax_probs + 1e-15)) / N\n        losses.append(round(loss, 4))\n        gradient = (softmax_probs - y_onehot).T @ X / N\n        B -= learning_rate * gradient\n    B_rounded = np.round(B, 4).tolist()\n    losses_rounded = [round(l, 4) for l in losses]\n    return (B_rounded, losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Args:\n        X: Input feature matrix (n_samples, n_features)\n        y: Target labels (n_samples,)\n        learning_rate: Learning rate for gradient descent\n        iterations: Number of iterations for training\n        \n    Returns:\n        tuple: (optimized coefficients, list of loss values over iterations)\n    \"\"\"\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    theta = np.zeros(X.shape[1])\n    loss_history = []\n    for _ in range(iterations):\n        z = np.dot(X, theta)\n        h = 1 / (1 + np.exp(-z))\n        loss = -np.mean(y * np.log(h + 1e-15) + (1 - y) * np.log(1 - h + 1e-15))\n        loss_history.append(round(loss, 4))\n        gradient = np.dot(X.T, h - y) / y.size\n        theta -= learning_rate * gradient\n    return (theta.tolist(), loss_history)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Args:\n        Q: Query matrix of shape (batch_size, seq_len, d_k)\n        K: Key matrix of shape (batch_size, seq_len, d_k)\n        V: Value matrix of shape (batch_size, seq_len, d_v)\n        mask: Mask matrix of shape (batch_size, seq_len, seq_len), where 1 indicates positions to keep and 0 indicates positions to mask.\n    \n    Returns:\n        Output of the masked attention mechanism, reshaped to a list.\n    \"\"\"\n    d_k = Q.shape[-1]\n    attention_scores = np.matmul(Q, K.transpose(0, 2, 1)) / np.sqrt(d_k)\n    mask = mask.astype(np.bool_)\n    attention_scores = np.where(mask, attention_scores, -1000000000.0)\n    attention_weights = np.exp(attention_scores - np.max(attention_scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.matmul(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    total_apples = len(apples)\n    color_counts = {}\n    for color in apples:\n        color_counts[color] = color_counts.get(color, 0) + 1\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log(probability) if probability > 0 else 0\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Args:\n        X: Input tensor of shape (batch_size, sequence_length, feature_dim).\n        gamma: Scaling parameter of shape (feature_dim,).\n        beta: Shifting parameter of shape (feature_dim,).\n        epsilon: Small constant for numerical stability.\n        \n    Returns:\n        Normalized tensor, rounded to 5 decimal places and converted to a list.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * X_normalized + beta\n    return np.round(output, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_words = reference.split()\n    cand_words = candidate.split()\n    ref_counts = Counter(ref_words)\n    cand_counts = Counter(cand_words)\n    common_unigrams = ref_counts & cand_counts\n    matches = sum(common_unigrams.values())\n    if matches == 0:\n        return 0.0\n    precision = matches / len(cand_words)\n    recall = matches / len(ref_words)\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    chunks = 0\n    i = 0\n    j = 0\n    len_ref = len(ref_words)\n    len_cand = len(cand_words)\n    while i < len_cand and j < len_ref:\n        if cand_words[i] == ref_words[j]:\n            start = i\n            while i < len_cand and j < len_ref and (cand_words[i] == ref_words[j]):\n                i += 1\n                j += 1\n            chunks += 1\n        elif cand_words[i] not in ref_words:\n            i += 1\n        else:\n            j += 1\n    penalty = gamma * (chunks / matches) ** beta if matches != 0 else 1.0\n    penalty = min(penalty, 1.0)\n    score = f_mean * (1 - penalty)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    if p_xy == 0 or p_x == 0 or p_y == 0:\n        return 0.0\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(float(pmi), 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(num, 4) for num in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    h = np.dot(x, w1)\n    h = np.maximum(0, h)\n    h = np.dot(h, w2)\n    h = h + x\n    output = np.maximum(0, h)\n    return np.round(output, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n    \n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n    \n    Returns:\n    np.ndarray: Output array of shape (channels,), where each element is the average of the corresponding channel.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    gamma_reshaped = gamma.reshape(1, -1, 1, 1)\n    beta_reshaped = beta.reshape(1, -1, 1, 1)\n    output = gamma_reshaped * X_normalized + beta_reshaped\n    output_rounded = np.round(output, decimals=4)\n    return output_rounded.tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    if n == 0:\n        derivative = 0.0\n    else:\n        derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        v_np = np.array(v, dtype=float)\n        u = v_np.copy()\n        for b in basis:\n            b_np = np.array(b)\n            u -= np.dot(v_np, b_np) * b_np\n        norm = np.linalg.norm(u)\n        if norm > tol:\n            u_normalized = u / norm\n            basis.append(u_normalized.tolist())\n    rounded_basis = [[round(component, 4) for component in vec] for vec in basis]\n    return rounded_basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    result = np.cross(a, b)\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    if A.shape[0] != A.shape[1]:\n        return -1\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    n = len(b)\n    solutions = []\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        det_Ai = np.linalg.det(Ai)\n        xi = det_Ai / det_A\n        solutions.append(round(xi, 4))\n    return solutions"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) == 0 or len(q) == 0 or len(p) != len(q):\n        return 0.0\n    bc = 0.0\n    for (pi, qi) in zip(p, q):\n        bc += np.sqrt(pi * qi)\n    if bc <= 0:\n        return 0.0\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float] | int:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        cumulative_return = 0.0\n        for (_, _, reward) in reversed(episode):\n            cumulative_return += reward\n            returns.insert(0, cumulative_return)\n        for (t, (state, action, _)) in enumerate(episode):\n            logits = theta[state, :]\n            max_logit = np.max(logits)\n            logits_exp = np.exp(logits - max_logit)\n            probs = logits_exp / np.sum(logits_exp)\n            d_log_pi = -probs.copy()\n            d_log_pi[action] += 1.0\n            gradient[state, :] += d_log_pi * returns[t]\n    if len(episodes) > 0:\n        gradient /= len(episodes)\n    gradient_rounded = np.round(gradient, 4)\n    return gradient_rounded.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = 2 * d_in * d_out\n    moe_flops = k_active * 2 * d_in * d_out\n    if dense_flops == 0:\n        savings_percentage = 0.0\n    else:\n        savings_percentage = (1 - moe_flops / dense_flops) * 100\n    savings_percentage_rounded = round(savings_percentage, 1)\n    return savings_percentage_rounded"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Compute the Noisy Top-K gating probabilities for a Mixture-of-Experts model.\n\n    Args:\n        X: Input matrix of shape (batch_size, input_dim).\n        W_g: Weight matrix for gating of shape (input_dim, num_experts).\n        W_noise: Weight matrix for noise of shape (input_dim, num_experts).\n        N: Pre-sampled noise matrix of shape (batch_size, num_experts).\n        k: Sparsity constraint (number of experts to select).\n\n    Returns:\n        Gating probabilities matrix as a Python list, rounded to 4 decimal places.\n    \"\"\"\n    clean_logits = np.dot(X, W_g)\n    noise_logits = np.dot(X, W_noise) * N\n    noisy_logits = clean_logits + noise_logits\n    probs = np.exp(noisy_logits) / np.sum(np.exp(noisy_logits), axis=1, keepdims=True)\n    topk_indices = np.argsort(noisy_logits, axis=1)[:, -k:]\n    mask = np.zeros_like(noisy_logits, dtype=bool)\n    np.put_along_axis(mask, topk_indices, True, axis=1)\n    probs = probs * mask\n    probs = probs / np.sum(probs, axis=1, keepdims=True)\n    probs_rounded = np.round(probs, 4)\n    return probs_rounded.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Sparse Mixture of Experts (MoE) layer with softmax gating and top-k routing.\n    \n    Args:\n        x: Input tensor of shape (batch_size, input_dim).\n        We: Expert weight matrices of shape (n_experts, input_dim, output_dim).\n        Wg: Gating weight matrix of shape (input_dim, n_experts).\n        n_experts: Number of experts.\n        top_k: Number of top experts to select per token.\n        \n    Returns:\n        Output tensor as a Python list after reshaping and rounding to 4 decimal places.\n    \"\"\"\n    (batch_size, input_dim) = x.shape\n    output_dim = We.shape[2]\n    gating_logits = np.dot(x, Wg)\n    gating_probs = np.exp(gating_logits - np.max(gating_logits, axis=1, keepdims=True))\n    gating_probs = gating_probs / np.sum(gating_probs, axis=1, keepdims=True)\n    top_k_indices = np.argsort(-gating_probs, axis=1)[:, :top_k]\n    top_k_values = np.take_along_axis(gating_probs, top_k_indices, axis=1)\n    top_k_values = top_k_values / np.sum(top_k_values, axis=1, keepdims=True)\n    output = np.zeros((batch_size, output_dim))\n    for i in range(batch_size):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_weight = We[expert_idx]\n            expert_output = np.dot(x[i], expert_weight)\n            output[i] += top_k_values[i, j] * expert_output\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor with shape (B, C, H, W).\n    \n    Args:\n        X: Input tensor of shape (B, C, H, W)\n        gamma: Scale parameter of shape (C,)\n        beta: Shift parameter of shape (C,)\n        num_groups: Number of groups to divide the channels into\n        epsilon: Small constant for numerical stability\n    \n    Returns:\n        Normalized tensor as a Python list after rounding to 4 decimal places\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    variance = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(variance + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    result = gamma.reshape(1, C, 1, 1) * X_normalized + beta.reshape(1, C, 1, 1)\n    return np.round(result, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for _ in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        new_x = x - learning_rate * gradient\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np"}
