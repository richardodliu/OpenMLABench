{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Implements Ridge Regression using the closed-form solution.\n    \n    Args:\n        data: An ndarray where the last column is the target y and the preceding columns are features X.\n        alpha: Regularization strength, default is 0.0.\n        \n    Returns:\n        A list of floats representing the weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    XTX = np.dot(X.T, X)\n    I = np.eye(XTX.shape[0])\n    matrix = XTX + alpha * I\n    try:\n        inv_matrix = np.linalg.inv(matrix)\n    except np.linalg.LinAlgError:\n        return -1\n    Xy = np.dot(X.T, y)\n    weights = np.dot(inv_matrix, Xy)\n    rounded_weights = [round(w, 4) for w in weights]\n    return rounded_weights"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = X_train @ X_train.T\n    updates = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    w = [round(num, 4) for num in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}, 'log': {'link': np.log, 'inv_link': np.exp, 'derivative': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": ""}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        distances = np.sum((data[:, np.newaxis, :] - centers) ** 2, axis=2)\n        assignments = np.argmin(distances, axis=1)\n        new_centers = np.zeros_like(centers)\n        for j in range(k):\n            mask = assignments == j\n            if np.sum(mask) == 0:\n                random_idx = np.random.randint(n_samples)\n                new_centers[j] = data[random_idx]\n            else:\n                new_centers[j] = np.mean(data[mask], axis=0)\n        max_change = np.max(np.linalg.norm(centers - new_centers, axis=1))\n        if max_change < epsilon:\n            centers = new_centers\n            break\n        else:\n            centers = new_centers.copy()\n    centers_rounded = np.round(centers, decimals=4)\n    centers_list = centers_rounded.tolist()\n    assignments_list = assignments.tolist()\n    return (centers_list, assignments_list)"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)) or (isinstance(x, np.ndarray) and x.ndim == 0):\n        sigmoid = 1.0 / (1.0 + np.exp(-x))\n        gradient = sigmoid * (1 - sigmoid)\n        sigmoid_rounded = round(sigmoid, 4)\n        gradient_rounded = round(gradient, 4)\n        return (sigmoid_rounded, gradient_rounded)\n    else:\n        if isinstance(x, list):\n            x = np.array(x)\n        sigmoid_x = 1.0 / (1.0 + np.exp(-x))\n        gradient_x = sigmoid_x * (1 - sigmoid_x)\n        sigmoid_rounded = np.round(sigmoid_x, 4)\n        gradient_rounded = np.round(gradient_x, 4)\n        sigmoid_list = sigmoid_rounded.tolist()\n        gradient_list = gradient_rounded.tolist()\n        return (sigmoid_list, gradient_list)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\"\"\"\n    sorted_data = sorted(zip(x_train, y_train), key=lambda x: x[0])\n    x_sorted = [x for (x, y) in sorted_data]\n    y_sorted = [y for (x, y) in sorted_data]\n    n = len(x_sorted)\n    sample_weights = [1.0 / n] * n\n    ensemble = []\n    while True:\n        current_stumps = []\n        for i in range(n - 1):\n            theta = (x_sorted[i] + x_sorted[i + 1]) / 2\n            current_stumps.append((0, theta))\n            current_stumps.append((1, theta))\n        min_error = float('inf')\n        best_stump = None\n        for (d, theta) in current_stumps:\n            error = 0.0\n            for i in range(n):\n                x = x_sorted[i]\n                y = y_sorted[i]\n                w = sample_weights[i]\n                if d == 0:\n                    h = 1 if x <= theta else -1\n                else:\n                    h = 1 if x > theta else -1\n                if h != y:\n                    error += w\n            if error < min_error:\n                min_error = error\n                best_stump = (d, theta)\n        if min_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        new_weights = []\n        Z = 0.0\n        for i in range(n):\n            x = x_sorted[i]\n            y = y_sorted[i]\n            w = sample_weights[i]\n            (d, theta) = best_stump\n            if d == 0:\n                h = 1 if x <= theta else -1\n            else:\n                h = 1 if x > theta else -1\n            if h != y:\n                factor = math.exp(alpha)\n            else:\n                factor = math.exp(-alpha)\n            new_w = w * factor\n            new_weights.append(new_w)\n            Z += new_w\n        if Z == 0:\n            sample_weights = [0.0] * n\n        else:\n            sample_weights = [w / Z for w in new_weights]\n        ensemble.append((best_stump[0], best_stump[1], alpha))\n        count = 0\n        for i in range(n):\n            x = x_sorted[i]\n            y = y_sorted[i]\n            sum_h = 0.0\n            for (d_i, theta_i, alpha_i) in ensemble:\n                if d_i == 0:\n                    h = 1 if x <= theta_i else -1\n                else:\n                    h = 1 if x > theta_i else -1\n                sum_h += alpha_i * h\n            prediction = 1 if sum_h >= 0 else -1\n            if prediction != y:\n                count += 1\n        training_error = count / n\n        if training_error <= epsilon:\n            break\n    predictions = []\n    for x in x_test:\n        sum_h = 0.0\n        for (d_i, theta_i, alpha_i) in ensemble:\n            if d_i == 0:\n                h = 1 if x <= theta_i else -1\n            else:\n                h = 1 if x > theta_i else -1\n            sum_h += alpha_i * h\n        prediction = 1 if sum_h >= 0 else -1\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\"\"\"\n    x_norms = np.sum(X_train ** 2, axis=1)\n    z_norms = np.sum(X_test ** 2, axis=1)\n    dot_products = X_train.dot(X_test.T)\n    dist_sq = x_norms[:, np.newaxis] + z_norms - 2 * dot_products\n    K = np.exp(-gamma * dist_sq)\n    alpha_y = alpha * y_train\n    g = alpha_y.dot(K) + b\n    signs = np.where(g >= 0, 1, -1)\n    return signs.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    m = len(X)\n    if m == 0:\n        return -1\n    n = len(X[0])\n    min_dim = min(m, n)\n    if k < 1 or k > min_dim:\n        return -1\n    X_np = np.array(X)\n    (U, s, Vh) = np.linalg.svd(X_np, full_matrices=True)\n    U_k = U[:, :k]\n    S_k = np.diag(s[:k])\n    Vh_k = Vh[:k, :]\n    X_hat_np = U_k @ S_k @ Vh_k\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat_rounded = np.round(X_hat_np, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    mse_rounded = np.round(mse, 4)\n    return (X_hat_list, mse_rounded)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Generates a binary tensor with specified shape and sparsity.\n    \n    Args:\n        shape: A tuple of integers representing the desired shape of the tensor.\n        sparsity: A float in [0, 1] representing the probability of each element being 1.0.\n        seed: An optional integer seed for reproducibility.\n    \n    Returns:\n        A numpy.ndarray of shape `shape` with elements 0.0 or 1.0, or -1 if sparsity is invalid.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_array = (random_array >= threshold).astype(float)\n    return binary_array"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    if n == 0:\n        return (0, [], [])\n    k = n // 2\n    column = data[:, d]\n    indices = np.argpartition(column, k)\n    pivot = indices[k]\n    median_value = data[pivot, d]\n    left = np.where(column < median_value)[0].tolist()\n    right = np.where(column > median_value)[0].tolist()\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be one-dimensional'\n    assert stride >= 1, 'stride must be at least 1'\n    assert len(x) >= frame_width, 'length of x must be at least frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    result = as_strided(x, shape=shape, strides=strides)\n    result.flags.writeable = writeable and x.flags.writeable\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        if not all((isinstance(row, list) for row in X)):\n            return False\n        try:\n            X_np = np.array(X, dtype=np.float64)\n        except:\n            return False\n    else:\n        X_np = X\n    if X_np.ndim != 2:\n        return False\n    if not np.issubdtype(X_np.dtype, np.number):\n        return False\n    if X_np.size == 0:\n        return False\n    if not np.all((X_np >= 0) & (X_np <= 1)):\n        return False\n    row_sums = X_np.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    current_position = 0\n    for iteration in range(max_iter):\n        if n < batch_size:\n            X_batch = X\n            y_batch = y\n            m = n\n        else:\n            end = current_position + batch_size\n            if end <= n:\n                X_batch = X[current_position:end]\n                y_batch = y[current_position:end]\n                current_position = end\n            else:\n                X_batch = np.concatenate((X[current_position:], X[:end - n]))\n                y_batch = np.concatenate((y[current_position:], y[:end - n]))\n                current_position = end - n\n            m = batch_size\n        residuals = X_batch @ w - y_batch\n        g = X_batch.T @ residuals / m\n        grad_norm = np.linalg.norm(g)\n        if grad_norm < epsilon:\n            break\n        s = rho * s + (1 - rho) * g ** 2\n        denominator = np.sqrt(s) + eps_station\n        w = w - eta * (g / denominator)\n    w_rounded = [round(x, 4) for x in w]\n    return w_rounded"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function or its derivative.\"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.asarray(x)\n    if deriv:\n        mask_high = x > 20\n        mask_low = x < -20\n        mask_mid = ~mask_high & ~mask_low\n        result = np.zeros_like(x, dtype=np.float64)\n        result[mask_high] = 1.0\n        result[mask_low] = 0.0\n        result[mask_mid] = 1.0 / (1.0 + np.exp(-x[mask_mid]))\n    else:\n        mask_high = x > 20\n        mask_low = x < -20\n        mask_mid = ~mask_high & ~mask_low\n        result = np.zeros_like(x, dtype=np.float64)\n        result[mask_high] = x[mask_high]\n        result[mask_low] = 0.0\n        result[mask_mid] = np.log1p(np.exp(x[mask_mid]))\n    rounded = np.round(result, decimals=4)\n    if is_scalar:\n        return float(rounded[0])\n    else:\n        return rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    if len(sequence) < N:\n        return 0.0\n    if N == 1:\n        ngram_counts = Counter()\n        for word in corpus:\n            ngram = (word,)\n            ngram_counts[ngram] += 1\n        prev_ngram_count = len(corpus)\n    else:\n        ngram_counts = Counter()\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i + N])\n            ngram_counts[ngram] += 1\n        prev_ngram_counts = Counter()\n        for i in range(len(corpus) - (N - 1) + 1):\n            prev_ngram = tuple(corpus[i:i + (N - 1)])\n            prev_ngram_counts[prev_ngram] += 1\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        current_ngram = tuple(sequence[i:i + N])\n        if current_ngram not in ngram_counts:\n            return float('-inf')\n        if N > 1:\n            prefix = current_ngram[:-1]\n            if prefix not in prev_ngram_counts:\n                return float('-inf')\n        if N == 1:\n            numerator = ngram_counts[current_ngram]\n            denominator = prev_ngram_count\n        else:\n            numerator = ngram_counts[current_ngram]\n            denominator = prev_ngram_counts[prefix]\n        if denominator == 0 or numerator == 0:\n            return float('-inf')\n        prob = numerator / denominator\n        log_prob = np.log(prob)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 63, "completion_id": 0, "solution": "def backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the backward probability vector for a given time index t in a Hidden Markov Model.\"\"\"\n    N = len(A)\n    T = len(obs)\n    beta_next = [1.0 for _ in range(N)]\n    for s in range(T - 2, t - 1, -1):\n        beta_current = []\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                a = A[i][j]\n                b = B[j][obs[s + 1]]\n                total += a * b * beta_next[j]\n            beta_current.append(total)\n        beta_next = beta_current\n    return [round(x, 4) for x in beta_next]"}
{"task_id": 65, "completion_id": 0, "solution": "def backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    if T == 0:\n        return 0.0\n    beta = [1.0 for _ in range(N)]\n    for t in range(T - 2, -1, -1):\n        new_beta = [0.0] * N\n        for i in range(N):\n            sum_val = 0.0\n            for j in range(N):\n                sum_val += A[i][j] * B[j][obs[t + 1]] * beta[j]\n            new_beta[i] = sum_val\n        beta = new_beta\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[i]\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "def forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not S or not A or (not B) or (not observations):\n        return -1\n    n = len(S)\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    if len(B) != n:\n        return -1\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    T = len(observations)\n    f = [S[i] * B[i][observations[0]] for i in range(n)]\n    for t in range(1, T):\n        next_f = [0.0] * n\n        for i in range(n):\n            sum_val = 0.0\n            for j in range(n):\n                sum_val += f[j] * A[j][i]\n            next_f[i] = sum_val * B[i][observations[t]]\n        f = next_f\n    result = sum(f)\n    return round(result, 4)"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid, returns a list of -1s with the same length as `X_test`.\n    \"\"\"\n    if k < 1 or k > len(X_train):\n        return [-1] * len(X_test)\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for x in X_test_np:\n        dist_sq = np.sum((X_train_np - x) ** 2, axis=1)\n        indices = np.argsort(dist_sq)\n        k_indices = indices[:k]\n        y_labels = y_train_np[k_indices]\n        (unique, counts) = np.unique(y_labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = unique[counts == max_count]\n        predicted = np.min(candidates)\n        predictions.append(int(predicted))\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    epsilon = 1e-15\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\"\"\"\n    W_keys = [k for k in parameters.keys() if k.startswith('W')]\n    if not W_keys:\n        L = 0\n    else:\n        layer_numbers = [int(k[1:]) for k in W_keys]\n        L = max(layer_numbers)\n    caches = []\n    A_prev = X\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        if l < L:\n            A = np.maximum(0, Z)\n        else:\n            A = 1 / (1 + np.exp(-Z))\n        caches.append((A_prev, W, b, Z))\n        A_prev = A\n    AL = A_prev\n    AL = np.round(AL, 4)\n    return AL.tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    m = A2.size\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    log_a = np.log(A2_clipped)\n    log_1_minus_a = np.log(1 - A2_clipped)\n    term1 = Y * log_a\n    term2 = (1 - Y) * log_1_minus_a\n    sum_terms = term1 + term2\n    cost = -1 / m * np.sum(sum_terms)\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    if n == 0:\n        return []\n    a_star = np.argmax(Q)\n    base = epsilon / n\n    probs = [base] * n\n    probs[a_star] = 1 - epsilon + base\n    rounded_probs = [round(p, 4) for p in probs]\n    sum_rounded = sum(rounded_probs)\n    if not np.isclose(sum_rounded, 1.0, atol=1e-12):\n        diff = 1.0 - sum_rounded\n        rounded_probs[-1] += diff\n    return rounded_probs"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    num_samples = len(predictions[0])\n    result = []\n    for i in range(num_samples):\n        sample_predictions = [tree[i] for tree in predictions]\n        counts = Counter(sample_predictions)\n        max_count = max(counts.values())\n        max_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n        max_labels.sort()\n        result.append(max_labels[0])\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        s = np.logaddexp(0.0, z)\n        s_rounded = np.round(s, 4)\n        return float(s_rounded)\n    else:\n        z_array = np.asarray(z)\n        s = np.logaddexp(0.0, z_array)\n        s_rounded = np.round(s, 4)\n        return s_rounded.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    estimates_dict = policy.ev_estimates\n    try:\n        true_values = bandit.arm_evs\n    except AttributeError:\n        return np.nan\n    if len(true_values) == 0:\n        return np.nan\n    arm_indices = list(range(len(true_values)))\n    for i in arm_indices:\n        if i not in estimates_dict:\n            return np.nan\n    estimates_list = [estimates_dict[i] for i in arm_indices]\n    squared_errors = [(est - true) ** 2 for (est, true) in zip(estimates_list, true_values)]\n    mean_squared_error = np.mean(squared_errors)\n    rounded_mse = round(mean_squared_error, 4)\n    return rounded_mse"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\"\"\"\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i + n])\n                ngram_counts[n][ngram] += 1\n    corpus_words = set()\n    for sentence in corpus:\n        words = sentence.split()\n        for word in words:\n            corpus_words.add(word)\n    vocabulary = corpus_words.union({'<UNK>'})\n    vocabulary_size = len(vocabulary)\n    target_words = sequence.split()\n    processed_target = []\n    for word in target_words:\n        if word in corpus_words:\n            processed_target.append(word)\n        else:\n            processed_target.append('<UNK>')\n    if len(processed_target) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(processed_target) - N + 1):\n        ngram = tuple(processed_target[i:i + N])\n        context = tuple(processed_target[i:i + N - 1])\n        count_ngram = ngram_counts[N].get(ngram, 0)\n        count_context = ngram_counts[N - 1].get(context, 0)\n        numerator = count_ngram + K\n        denominator = count_context + K * vocabulary_size\n        prob = numerator / denominator\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    for _ in range(max_iter):\n        HtH = H.T @ H\n        HtH += alpha * np.eye(K)\n        HtX = H.T @ X\n        W = np.linalg.solve(HtH, HtX)\n        WtW = W.T @ W\n        WtW += alpha * np.eye(K)\n        WtX = W.T @ X\n        H = np.linalg.solve(WtW, WtX)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro') ** 2\n        loss += alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if loss < tol:\n            break\n    X_hat = W @ H\n    X_hat_rounded = np.round(X_hat, 4)\n    return X_hat_rounded.tolist()"}
{"task_id": 109, "completion_id": 0, "solution": ""}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a string into a fixed-length list of integer token IDs.\"\"\"\n    substring = text[:time_steps]\n    encoded = []\n    for c in substring:\n        encoded.append(vocabulary.get(c, 0))\n    while len(encoded) < time_steps:\n        encoded.append(0)\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer token IDs back to a string, ignoring padding.\"\"\"\n    s = []\n    for idx in indices:\n        if idx == 0:\n            continue\n        if idx in inverse_vocab:\n            s.append(inverse_vocab[idx])\n    return ''.join(s)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, runs through model, and decodes the prediction.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_batch = np.array([encoded])\n    predictions = model.predict(encoded_batch)\n    predicted_ids = np.argmax(predictions, axis=2)\n    predicted_ids = predicted_ids[0]\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    n = X.shape[1]\n    y = y.ravel()\n    w = w.ravel()\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -(y * np.log(p) + (1 - y) * np.log(1 - p)).sum() / m\n    loss = round(loss, 4)\n    gradient = X.T.dot(p - y) / m\n    gradient = np.round(gradient, 4)\n    gradient = gradient.reshape(-1, 1).tolist()\n    return (loss, gradient)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    unique_classes = np.unique(y)\n    n_classes = len(unique_classes)\n    mu = np.mean(X, axis=0)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    S_B = np.zeros((d, d))\n    for c in unique_classes:\n        indices = np.where(y == c)[0]\n        X_c = X[indices]\n        N_c = len(X_c)\n        mu_c = np.mean(X_c, axis=0)\n        centered = X_c - mu_c\n        S_c = np.dot(centered.T, centered)\n        S_W += S_c\n        diff = mu_c - mu\n        S_B += N_c * np.outer(diff, diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(eigenvectors.shape[1]):\n        vec = eigenvectors[:, i]\n        for j in range(vec.shape[0]):\n            if vec[j] != 0:\n                if vec[j] < 0:\n                    eigenvectors[:, i] *= -1\n                break\n    W = eigenvectors[:, :n_components]\n    projection = X @ W\n    projection = np.round(projection, 4)\n    return projection.tolist()"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    if metric == 'euclidean':\n        dist_sq = np.sum((X_test[:, np.newaxis] - X_train) ** 2, axis=2)\n        distances = np.sqrt(dist_sq)\n    elif metric == 'manhattan':\n        distances = np.sum(np.abs(X_test[:, np.newaxis] - X_train), axis=2)\n    elif metric == 'cosine':\n        dot_products = X_test.dot(X_train.T)\n        norms_test = np.linalg.norm(X_test, axis=1)\n        norms_train = np.linalg.norm(X_train, axis=1)\n        denominator = norms_test[:, np.newaxis] * norms_train\n        mask = denominator != 0\n        cosine_sim = np.zeros_like(dot_products)\n        cosine_sim[mask] = dot_products[mask] / denominator[mask]\n        cosine_sim = np.clip(cosine_sim, -1, 1)\n        distances = 1 - cosine_sim\n    else:\n        pass\n    n_test = X_test.shape[0]\n    k_indices = np.argpartition(distances, k, axis=1)[:, :k]\n    predictions = np.zeros(n_test, dtype=y_train.dtype)\n    for i in range(n_test):\n        labels = y_train[k_indices[i]]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        max_count = np.max(counts)\n        mask = counts == max_count\n        candidates = unique_labels[mask]\n        predictions[i] = np.min(candidates)\n    return predictions"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    predictions = []\n    for x in X_test:\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - x) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - x), axis=1)\n        elif metric == 'cosine':\n            dot = np.dot(X, x)\n            norm_x = np.linalg.norm(x)\n            norms = np.linalg.norm(X, axis=1)\n            denominator = norm_x * norms + 1e-12\n            cosine_sim = dot / denominator\n            distances = 1 - cosine_sim\n        else:\n            raise ValueError('Invalid metric')\n        dist_label = list(zip(distances, y))\n        dist_label.sort(key=lambda x: x[0])\n        k_neighbors = dist_label[:k]\n        neighbor_labels = [label for (d, label) in k_neighbors]\n        counts = defaultdict(int)\n        for label in neighbor_labels:\n            counts[label] += 1\n        max_count = max(counts.values())\n        candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    if not isinstance(state, np.ndarray):\n        state = np.array(state)\n    layer1 = state.dot(weights['W1']) + weights['b1']\n    layer1 = np.maximum(0, layer1)\n    layer2 = layer1.dot(weights['W2']) + weights['b2']\n    layer2 = np.maximum(0, layer2)\n    action = layer2.dot(weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [round(x, 4) for x in action]"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        intercept_column = np.ones((m, 1))\n    else:\n        intercept_column = np.zeros((m, 1))\n    X = np.hstack([intercept_column, X])\n    w = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        if fit_intercept:\n            residual = y - X.dot(w)\n            intercept = residual.mean()\n            w[0] = intercept\n            residual = y - X.dot(w)\n        else:\n            residual = y - X.dot(w)\n        for j in range(1, X.shape[1]):\n            r_j = residual + X[:, j] * w[j]\n            a = np.dot(X[:, j], r_j)\n            tau = lambda_param * m\n            denom = X[:, j].dot(X[:, j])\n            if denom == 0:\n                w_j = 0.0\n            elif a > tau:\n                w_j = (a - tau) / denom\n            elif a < -tau:\n                w_j = (a + tau) / denom\n            else:\n                w_j = 0.0\n            delta = w_j - w[j]\n            w[j] = w_j\n            residual -= X[:, j] * delta\n    if fit_intercept:\n        bias = w[0]\n        weights = w[1:]\n    else:\n        bias = 0.0\n        weights = w\n    weights = [round(weight, 4) for weight in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    n = len(x)\n    if n == 0:\n        return 0.0\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    diff = x_arr != y_arr\n    count = np.sum(diff)\n    distance = count / n\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window type.')\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError('Coefficients must be provided for generalized_cosine window.')\n    if window == 'hamming':\n        n = np.arange(N)\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        n = np.arange(N)\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        n = np.arange(N)\n        term1 = a0\n        term2 = a1 * np.cos(2 * np.pi * n / (N - 1))\n        term3 = a2 * np.cos(4 * np.pi * n / (N - 1))\n        term4 = a3 * np.cos(6 * np.pi * n / (N - 1))\n        w = term1 - term2 + term3 - term4\n    elif window == 'generalized_cosine':\n        n = np.arange(N)\n        w = np.zeros(N)\n        for (k, a) in enumerate(coefficients):\n            w += a * np.cos(2 * np.pi * k * n / (N - 1))\n    rounded_w = [round(x, 4) for x in w]\n    return rounded_w"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    unique_labels = np.unique(y_train_np)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    X_train_np = np.insert(X_train_np, 0, 1, axis=1)\n    X_test_np = np.insert(X_test_np, 0, 1, axis=1)\n    label_map = {label: idx for (idx, label) in enumerate(unique_labels)}\n    y_train_bin = np.array([label_map[y] for y in y_train_np])\n    theta = np.zeros(X_train_np.shape[1])\n    for _ in range(epochs):\n        indices = np.random.permutation(len(X_train_np))\n        X_shuffled = X_train_np[indices]\n        y_shuffled = y_train_bin[indices]\n        for i in range(0, len(X_shuffled), batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = X_batch.dot(theta)\n            h = 1 / (1 + np.exp(-z))\n            gradient = X_batch.T.dot(h - y_batch) / len(X_batch)\n            theta -= learning_rate * gradient\n    z_test = X_test_np.dot(theta)\n    h_test = 1 / (1 + np.exp(-z_test))\n    y_pred_bin = (h_test >= 0.5).astype(int)\n    y_pred = unique_labels[y_pred_bin].tolist()\n    return y_pred"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    personal_best_positions = positions.copy()\n    global_best_value = np.min(personal_best_values)\n    global_best_position = personal_best_positions[np.argmin(personal_best_values)].copy()\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for p in range(num_particles):\n            r1 = rng.random()\n            r2 = rng.random()\n            velocities[p] = w * velocities[p] + c1 * r1 * (personal_best_positions[p] - positions[p]) + c2 * r2 * (global_best_position - positions[p])\n            positions[p] += velocities[p]\n            positions[p] = np.clip(positions[p], -1, 1)\n            new_value = np.sum(positions[p] ** 2)\n            if new_value < personal_best_values[p]:\n                personal_best_positions[p] = positions[p].copy()\n                personal_best_values[p] = new_value\n        current_min = np.min(personal_best_values)\n        if current_min < global_best_value:\n            global_best_value = current_min\n            idx = np.argmin(personal_best_values)\n            global_best_position = personal_best_positions[idx].copy()\n    return round(global_best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\"\"\"\n    n_train = len(X_train)\n    if k <= 0:\n        effective_k = n_train\n    else:\n        effective_k = min(k, n_train)\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for x_test in X_test_np:\n        distances = np.sqrt(np.sum((X_train_np - x_test) ** 2, axis=1))\n        indices = np.argsort(distances)\n        k_indices = indices[:effective_k]\n        k_y = [y_train[i] for i in k_indices]\n        if task == 'classification':\n            counts = Counter(k_y)\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            prediction = min(candidates)\n        elif task == 'regression':\n            prediction = round(np.mean(k_y), 4)\n        else:\n            raise ValueError(\"Invalid task type. Must be 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n\n        def d(x, y):\n            return -1\n        return d\n\n    def d(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        try:\n            x = np.array(x, dtype=np.float64)\n            y = np.array(y, dtype=np.float64)\n        except ValueError:\n            return -1\n        if x.ndim != 1 or y.ndim != 1:\n            return -1\n        if len(x) != len(y) or len(x) == 0:\n            return -1\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n        if name == 'euclidean':\n            diff = x - y\n            squared = diff ** 2\n            sum_sq = np.sum(squared)\n            distance = np.sqrt(sum_sq)\n        elif name == 'manhattan':\n            diff = x - y\n            abs_diff = np.abs(diff)\n            distance = np.sum(abs_diff)\n        elif name == 'chebyshev':\n            diff = x - y\n            abs_diff = np.abs(diff)\n            distance = np.max(abs_diff)\n        elif name == 'cosine':\n            dot = np.dot(x, y)\n            distance = 1 - dot / (norm_x * norm_y)\n        else:\n            return -1\n        return round(distance, 4)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        sub_spaces = env.action_space.spaces\n    else:\n        sub_spaces = [env.action_space]\n    n_actions_per_dim = []\n    for sub_space in sub_spaces:\n        if hasattr(sub_space, 'n'):\n            n_actions_per_dim.append(sub_space.n)\n        else:\n            n_actions_per_dim.append(np.inf)\n    action_dim = len(n_actions_per_dim)\n    if any((x == np.inf for x in n_actions_per_dim)):\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        T = 0\n    else:\n        T = phi[0].shape[1]\n    beta_accum = np.zeros((V, T), dtype=np.float64)\n    for d in range(len(corpus)):\n        words = corpus[d]\n        phi_d = phi[d]\n        for n in range(len(words)):\n            word = words[n]\n            beta_accum[word] += phi_d[n]\n    for t in range(T):\n        sum_t = beta_accum[:, t].sum()\n        if sum_t == 0:\n            continue\n        beta_accum[:, t] /= sum_t\n    beta = beta_accum.round(4)\n    beta_list = beta.tolist()\n    return beta_list"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n = X.shape[0]\n    if k == 0:\n        return []\n    if k == 1:\n        return [0] * n\n    medoid_indices = list(range(k))\n    current_cost = compute_cost(X, medoid_indices)\n    improvement = True\n    while improvement:\n        max_delta = 0\n        best_new_medoid_indices = None\n        medoid_indices_set = set(medoid_indices)\n        for m in medoid_indices:\n            for s in range(n):\n                if s not in medoid_indices_set:\n                    new_medoid_indices = medoid_indices.copy()\n                    idx = new_medoid_indices.index(m)\n                    new_medoid_indices[idx] = s\n                    new_cost = compute_cost(X, new_medoid_indices)\n                    delta = current_cost - new_cost\n                    if delta > max_delta:\n                        max_delta = delta\n                        best_new_medoid_indices = new_medoid_indices.copy()\n        if max_delta > 0:\n            medoid_indices = best_new_medoid_indices\n            current_cost = compute_cost(X, medoid_indices)\n        else:\n            improvement = False\n    labels = []\n    for x in X:\n        min_dist = np.inf\n        best_idx = 0\n        for (idx, m_idx) in enumerate(medoid_indices):\n            m = X[m_idx]\n            dist = np.linalg.norm(x - m)\n            if dist < min_dist:\n                min_dist = dist\n                best_idx = idx\n            elif dist == min_dist:\n                if idx < best_idx:\n                    best_idx = idx\n        labels.append(best_idx)\n    return labels\ndef compute_cost(X, medoid_indices):\n    medoids = X[medoid_indices]\n    cost = 0.0\n    for x in X:\n        min_dist = np.inf\n        for m in medoids:\n            dist = np.linalg.norm(x - m)\n            if dist < min_dist:\n                min_dist = dist\n        cost += min_dist\n    return cost"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def generate_polynomial_features(matrix, degree):\n        poly = []\n        for sample in matrix:\n            features = []\n            for x_i in sample:\n                for d in range(1, degree + 1):\n                    features.append(x_i ** d)\n            poly.append([1.0] + features)\n        return np.array(poly)\n    x_train_poly = generate_polynomial_features(x_train, degree)\n    x_test_poly = generate_polynomial_features(x_test, degree)\n    means = np.mean(x_train_poly[:, 1:], axis=0)\n    stds = np.std(x_train_poly[:, 1:], axis=0)\n    eps = 1e-08\n    stds = np.maximum(stds, eps)\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - means) / stds\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - means) / stds\n    (m, n_features) = x_train_poly.shape\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        y_pred = x_train_poly @ w\n        error = y_pred - y_train\n        grad = np.zeros_like(w)\n        grad[0] = 1.0 / m * np.sum(error * x_train_poly[:, 0])\n        x_without_bias = x_train_poly[:, 1:]\n        reg_term = reg_factor * (l1_ratio * np.sign(w[1:]) + (1 - l1_ratio) * w[1:])\n        grad[1:] = 1.0 / m * (x_without_bias.T @ error) + reg_term\n        w -= learning_rate * grad\n    y_pred_test = x_test_poly @ w\n    predictions = np.round(y_pred_test, 4).tolist()\n    return predictions"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    term = -actual_np * predicted_np\n    sigmoid_term = 1 / (1 + np.exp(-term))\n    gradient = actual_np * sigmoid_term\n    prob = 1 / (1 + np.exp(-predicted_np))\n    hessian = prob * (1 - prob)\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_hand(hand):\n        sum_base = sum(hand)\n        num_aces = hand.count(1)\n        if num_aces > 0 and sum_base <= 11:\n            possible_score = sum_base + 10\n            if possible_score <= 21:\n                score = possible_score\n            else:\n                score = sum_base\n        else:\n            score = sum_base\n        is_natural = len(hand) == 2 and 1 in hand and (10 in hand)\n        return (score, is_natural)\n    (player_score, player_natural) = calculate_hand(player)\n    (dealer_score, dealer_natural) = calculate_hand(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        if player_natural and (not dealer_natural):\n            return 1.5\n        else:\n            return 1.0\n    elif dealer_score > player_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Compute element-wise squared logarithmic errors.\"\"\"\n    log_actual = np.log(1 + actual)\n    log_predicted = np.log(1 + predicted)\n    diff = log_actual - log_predicted\n    return diff ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid, the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if actual.size == 0:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    sle = squared_log_error(actual, predicted)\n    msle = np.mean(sle)\n    return round(msle, 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            s = 1.0 / (1.0 + np.exp(-z))\n        else:\n            s = np.exp(z) / (1.0 + np.exp(z))\n        return round(s, 4)\n    else:\n        arr = np.asarray(z)\n        sigmoid = np.where(arr >= 0, 1 / (1 + np.exp(-arr)), np.exp(arr) / (1 + np.exp(arr)))\n        rounded = np.round(sigmoid, 4)\n        return rounded.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(elem, a) for elem in z]\n    else:\n        return z if z >= 0 else a * z"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    product_of_rest = 1\n    for dim in shape[1:]:\n        product_of_rest *= dim\n    A = np.random.randn(d0, product_of_rest)\n    (U, s, Vh) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vh\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    z1 = np.maximum(0, state.dot(W1) + b1)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    z2 = np.maximum(0, z1.dot(W2) + b2)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    z3 = np.maximum(0, z2.dot(W3) + b3)\n    W_a = np.ones((4, 3))\n    b_a = np.zeros(3)\n    logits = z3.dot(W_a) + b_a\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    W_c = np.ones((4, 1))\n    b_c = np.zeros(1)\n    state_value = z3.dot(W_c) + b_c\n    state_value = state_value[0]\n    action_probs = [round(p, 4) for p in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\"\"\"\n    state = np.array(state)\n    W1 = np.array(params['W1'])\n    b1 = np.array(params['b1'])\n    h1 = np.dot(state, W1) + b1\n    h1 = np.maximum(0, h1)\n    W2 = np.array(params['W2'])\n    b2 = np.array(params['b2'])\n    h2 = np.dot(h1, W2) + b2\n    h2 = np.maximum(0, h2)\n    W3 = np.array(params['W3'])\n    b3 = np.array(params['b3'])\n    h3 = np.dot(h2, W3) + b3\n    h3 = np.maximum(0, h3)\n    Wa = np.array(params['Wa'])\n    ba = np.array(params['ba'])\n    actor_output = np.dot(h3, Wa) + ba\n    actor_output_exp = np.exp(actor_output)\n    probabilities = actor_output_exp / np.sum(actor_output_exp)\n    probabilities = np.round(probabilities, 4).tolist()\n    Wc = np.array(params['Wc'])\n    bc = np.array(params['bc'])\n    value = np.dot(h3, Wc) + bc\n    value = np.round(value, 4).item()\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if gradient:\n        sign_w = np.sign(w)\n        gradient = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        gradient = [round(x, 4) for x in gradient]\n        return gradient\n    else:\n        l2_norm = np.linalg.norm(w, 2)\n        sum_w_sq = np.dot(w, w)\n        l1_part = l1_ratio * l2_norm\n        l2_part = (1 - l1_ratio) * 0.5 * sum_w_sq\n        penalty = alpha * (l1_part + l2_part)\n        return round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    elif param_name in ['Ba', 'Bx']:\n        param_key = param_name.lower()\n    else:\n        param_key = param_name\n    theta = model.parameters.get(param_key, None)\n    if theta is None:\n        return None\n    original_theta = theta.copy().astype(np.float64)\n    grads = np.zeros_like(original_theta, dtype=np.float64)\n    for i in range(original_theta.shape[0]):\n        for j in range(original_theta.shape[1]):\n            theta_plus = original_theta.copy()\n            theta_plus[i, j] += epsilon\n            model.parameters[param_key] = theta_plus\n            model.flush_gradients()\n            predictions_plus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                y_t = model.forward(x_t)\n                predictions_plus.append(y_t)\n            loss_plus = loss_func(predictions_plus)\n            theta_minus = original_theta.copy()\n            theta_minus[i, j] -= epsilon\n            model.parameters[param_key] = theta_minus\n            model.flush_gradients()\n            predictions_minus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                y_t = model.forward(x_t)\n                predictions_minus.append(y_t)\n            loss_minus = loss_func(predictions_minus)\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n            model.parameters[param_key] = original_theta\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    n = X_train.shape[1]\n    n_clf = max(n_clf, 1)\n    w = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for j in range(n):\n            feature_values = np.sort(np.unique(X_train[:, j]))\n            if len(feature_values) == 0:\n                continue\n            elif len(feature_values) == 1:\n                thresholds = [feature_values[0]]\n            else:\n                thresholds = []\n                for i in range(len(feature_values) - 1):\n                    thresholds.append((feature_values[i] + feature_values[i + 1]) / 2)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    if polarity == 1:\n                        predictions = np.where(X_train[:, j] <= threshold, 1, -1)\n                    else:\n                        predictions = np.where(X_train[:, j] > threshold, 1, -1)\n                    error = np.sum(w * (y_train != predictions))\n                    if error < best_error:\n                        best_error = error\n                        best_feature = j\n                        best_threshold = threshold\n                        best_polarity = polarity\n        if best_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * np.log((1 - best_error) / best_error)\n        if best_polarity == 1:\n            h = np.where(X_train[:, best_feature] <= best_threshold, 1, -1)\n        else:\n            h = np.where(X_train[:, best_feature] > best_threshold, 1, -1)\n        exponent = -alpha * y_train * h\n        w = w * np.exp(exponent)\n        Z = np.sum(w)\n        if Z == 0:\n            Z = 1e-10\n        w = w / Z\n        stumps.append((best_feature, best_threshold, best_polarity, alpha))\n        if best_error == 0:\n            break\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (feature, threshold, polarity, alpha) in stumps:\n            if polarity == 1:\n                if x[feature] <= threshold:\n                    h = 1\n                else:\n                    h = -1\n            elif x[feature] > threshold:\n                h = 1\n            else:\n                h = -1\n            total += alpha * h\n        if total > 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions"}
{"task_id": 261, "completion_id": 0, "solution": ""}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    vertex_index = {v: i for (i, v) in enumerate(V)}\n    adj_dict = {v: set() for v in V}\n    for (u, v) in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    G = []\n    for v in V:\n        neighbors = list(adj_dict[v])\n        sorted_neighbors = sorted(neighbors, key=lambda x: vertex_index[x])\n        G.append(sorted_neighbors)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\nimport bisect\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    for j in range(n_features):\n        x_j = X[:, j]\n        data = list(zip(x_j, y, sample_weights))\n        data.sort(key=lambda x: x[0])\n        x_sorted = [d[0] for d in data]\n        y_sorted = [d[1] for d in data]\n        w_sorted = [d[2] for d in data]\n        prefix_ones = [0.0]\n        prefix_minus_ones = [0.0]\n        for i in range(len(data)):\n            if y_sorted[i] == 1:\n                prefix_ones.append(prefix_ones[-1] + w_sorted[i])\n                prefix_minus_ones.append(prefix_minus_ones[-1])\n            else:\n                prefix_minus_ones.append(prefix_minus_ones[-1] + w_sorted[i])\n                prefix_ones.append(prefix_ones[-1])\n        total_ones = prefix_ones[-1]\n        total_minus_ones = prefix_minus_ones[-1]\n        unique_thresholds = sorted(list(set(x_sorted)))\n        for theta in unique_thresholds:\n            k = bisect.bisect_left(x_sorted, theta)\n            error_p1 = prefix_minus_ones[k] + (total_ones - prefix_ones[k])\n            error_p_neg1 = prefix_ones[k] + (total_minus_ones - prefix_minus_ones[k])\n            current_error = min(error_p1, error_p_neg1)\n            p = 1 if error_p1 < error_p_neg1 else -1\n            if current_error < best_error:\n                best_error = current_error\n                best_feature = j\n                best_threshold = theta\n                best_polarity = p\n    best_threshold = round(best_threshold, 4)\n    best_error = round(best_error, 4)\n    return {'feature_index': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': best_error}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport bisect\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_feature = [x[0] for x in data]\n    sorted_target = [x[1] for x in data]\n    n = len(sorted_feature)\n    thresholds = []\n    for i in range(len(sorted_feature) - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            t = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n            thresholds.append(t)\n    if not thresholds:\n        return (None, 0.0)\n\n    def entropy(labels):\n        if not labels:\n            return 0.0\n        counts = Counter(labels)\n        total = len(labels)\n        h = 0.0\n        for count in counts.values():\n            p = count / total\n            if p == 0:\n                continue\n            h -= p * math.log2(p)\n        return h\n    H_parent = entropy(sorted_target)\n    max_ig = -1\n    best_t = None\n    for t in thresholds:\n        index = bisect.bisect_left(sorted_feature, t)\n        left = sorted_target[:index]\n        right = sorted_target[index:]\n        H_left = entropy(left)\n        H_right = entropy(right)\n        ig = H_parent - len(left) / n * H_left - len(right) / n * H_right\n        if ig > max_ig:\n            max_ig = ig\n            best_t = t\n        elif ig == max_ig:\n            if t < best_t:\n                best_t = t\n    if max_ig > 0:\n        best_t_rounded = round(best_t, 4)\n        max_ig_rounded = round(max_ig, 4)\n        return (best_t_rounded, max_ig_rounded)\n    else:\n        return (None, 0.0)"}
{"task_id": 286, "completion_id": 0, "solution": ""}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_height = (H - p_h) // s_h + 1\n    output_width = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, output_height, output_width))\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_height):\n                for j in range(output_width):\n                    x_start = i * s_h\n                    y_start = j * s_w\n                    x_end = x_start + p_h\n                    y_end = y_start + p_w\n                    window = X[n, c, x_start:x_end, y_start:y_end]\n                    output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_height):\n                for j in range(output_width):\n                    x_start = i * s_h\n                    y_start = j * s_w\n                    x_end = x_start + p_h\n                    y_end = y_start + p_w\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, x_start:x_end, y_start:y_end] += grad\n    output_rounded = np.round(output, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n    return (output_rounded.tolist(), grad_input_rounded.tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    else:\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        if not compare_trees(tree_a.left, tree_b.left):\n            return False\n        if not compare_trees(tree_a.right, tree_b.right):\n            return False\n        return True"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1, dtype=float)\n    np_parent2 = np.array(parent2, dtype=float)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    left_child1 = np_parent1[:, :cutoff]\n    right_child1 = np_parent2[:, cutoff:]\n    child1 = np.concatenate((left_child1, right_child1), axis=1)\n    left_child2 = np_parent2[:, :cutoff]\n    right_child2 = np_parent1[:, cutoff:]\n    child2 = np.concatenate((left_child2, right_child2), axis=1)\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    mask = (x == 0) | (x == 1)\n    return np.all(mask)"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\"\"\"\n    count_ngram = Counter()\n    count_prefix = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            count_ngram[ngram] += 1\n            count_prefix[prefix] += 1\n    query_tokens = query.split()\n    if N > 1:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    if len(padded_query) < N:\n        return float('-inf')\n    total_log = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        if ngram not in count_ngram:\n            return float('-inf')\n        prefix = tuple(padded_query[i:i + N - 1])\n        if N > 1:\n            if prefix not in count_prefix:\n                return float('-inf')\n        denominator = count_prefix[prefix] if N > 1 else count_prefix[()]\n        if denominator == 0:\n            return float('-inf')\n        prob = count_ngram[ngram] / denominator\n        total_log += math.log(prob)\n    return round(total_log, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    D = np.linalg.norm(X[:, None, :] - X[None, :, :], axis=2)\n    W = 1.0 / (1.0 + D)\n    np.fill_diagonal(W, 0)\n    D_deg = np.sum(W, axis=1)\n    D_mat = np.diag(D_deg)\n    L = D_mat - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    prev_labels = None\n    for _ in range(100):\n        E_norms = np.sum(E ** 2, axis=1)\n        c_norms = np.sum(centroids ** 2, axis=1)\n        dot_product = E.dot(centroids.T)\n        dist_sq = E_norms[:, None] + c_norms[None, :] - 2 * dot_product\n        dist = np.sqrt(dist_sq)\n        labels = np.argmin(dist, axis=1)\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            mask = labels == i\n            if np.any(mask):\n                new_centroids[i] = np.mean(E[mask], axis=0)\n            else:\n                random_idx = np.random.choice(n)\n                new_centroids[i] = E[random_idx]\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    gold_prev = golds[prev_label]\n    gold_curr = golds[curr_label]\n    lines = ['-' * 25 + 'DEBUG' + '-' * 25, f'Mine (prev) [{prev_label}]:', prev_mine, f'Theirs (prev) [{prev_label}]:', gold_prev, f'Mine [{curr_label}]:', curr_mine, f'Theirs [{curr_label}]:', gold_curr + warn_str]\n    return '\\n'.join(lines)"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        intercept = np.ones((X.shape[0], 1))\n        X = np.hstack([intercept, X])\n    M = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    else:\n        mu = np.array(mu)\n        if mu.size != M:\n            raise ValueError('mu must be a scalar or a vector of length M')\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V = np.array(V)\n        if V.ndim != 1 or V.size != M:\n            raise ValueError('V must be a scalar, 1D array of length M, or 2D array of size MxM')\n        V_inv = np.diag(1.0 / V)\n    elif isinstance(V, np.ndarray):\n        if V.ndim != 2 or V.shape[0] != M or V.shape[1] != M:\n            raise ValueError('V must be a 2D array of size MxM')\n        V_inv = np.linalg.inv(V)\n    else:\n        raise ValueError('V must be None, scalar, list/tuple, or 2D array')\n    XTX = X.T.dot(X)\n    XTy = X.T.dot(y)\n    A = V_inv + XTX\n    try:\n        Sigma_b = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        raise ValueError('Matrix A is singular; cannot compute inverse')\n    B = V_inv.dot(mu) + XTy\n    mu_b = Sigma_b.dot(B)\n    return [round(float(x), 4) for x in mu_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    n_points = n_filters + 2\n    mel_points = np.linspace(min_mel, max_mel, n_points)\n    f = 700 * (10 ** (mel_points / 2595) - 1)\n    freqs = np.arange(0, N // 2 + 1) * fs / N\n    F = []\n    for i in range(n_filters):\n        f_i = f[i]\n        f_i1 = f[i + 1]\n        f_i2 = f[i + 2]\n        mask_left = (freqs >= f_i) & (freqs <= f_i1)\n        mask_right = (freqs > f_i1) & (freqs <= f_i2)\n        mask_out = ~(mask_left | mask_right)\n        left_weights = (freqs - f_i) / (f_i1 - f_i)\n        right_weights = (f_i2 - freqs) / (f_i2 - f_i1)\n        weights = np.zeros_like(freqs)\n        weights[mask_left] = left_weights[mask_left]\n        weights[mask_right] = right_weights[mask_right]\n        if normalize:\n            weights *= 2.0 / (f_i2 - f_i)\n        row = np.round(weights, 4).tolist()\n        F.append(row)\n    return F"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len + 1)\n    bh = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        bh = bh[:window_len]\n    bh_rounded = [round(x, 4) for x in bh]\n    return bh_rounded"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def asymptotic_digamma(x):\n        ln_x = math.log(x)\n        term1 = 1.0 / (2 * x)\n        term2 = 1.0 / (12 * x ** 2)\n        term3 = 1.0 / (120 * x ** 4)\n        term4 = 1.0 / (252 * x ** 6)\n        return ln_x - term1 - term2 + term3 - term4\n\n    def digamma(x):\n        if x < 6:\n            sum_reciprocal = 0.0\n            while x < 6:\n                sum_reciprocal += 1.0 / x\n                x += 1\n            return asymptotic_digamma(x) - sum_reciprocal\n        else:\n            return asymptotic_digamma(x)\n    gamma_row = gamma[d]\n    sum_gamma = sum(gamma_row)\n    gamma_dt = gamma_row[t]\n    psi_dt = digamma(gamma_dt)\n    psi_sum = digamma(sum_gamma)\n    result = psi_dt - psi_sum\n    return round(result, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    mine_prev = f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n'\n    theirs_prev = f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n'\n    current_mine = f'Mine [{curr_label}]:\\n{curr_prediction}\\n'\n    current_theirs = f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    footer = '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    result = header + mine_prev + theirs_prev + '\\n\\n' + current_mine + current_theirs + '\\n' + footer\n    return result"}
{"task_id": 318, "completion_id": 0, "solution": ""}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        num_bins = N // 2 + 1\n        frequencies = [k * (fs / N) for k in range(num_bins)]\n    else:\n        frequencies = np.fft.fftfreq(N, 1 / fs)\n    rounded = [round(f, 4) for f in frequencies]\n    return rounded"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1.0 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    sum_pred = np.sum(predictions * oob_mask, axis=1)\n    sum_oob = np.sum(oob_mask, axis=1)\n    valid = sum_oob > 0\n    if not np.any(valid):\n        return -1.0\n    avg_preds = sum_pred[valid] / sum_oob[valid]\n    squared_errors = (avg_preds - y_true[valid]) ** 2\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    item_order = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        unique_transaction = list(set(transaction))\n        frequent_transaction = [item for item in unique_transaction if item in frequent_items]\n        frequent_transaction.sort(key=lambda x: item_order[x])\n        current_node = root\n        for item in frequent_transaction:\n            if item in current_node['children']:\n                current_node = current_node['children'][item]\n                current_node['support'] += 1\n            else:\n                new_node = {'support': 1, 'children': {}}\n                current_node['children'][item] = new_node\n                current_node = new_node\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_np = np.array(X)\n    Y_np = np.array(Y)\n    if X_np.shape[0] == 0:\n        return []\n    if Y_np.shape[0] == 0:\n        return -1\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    K = X_np.dot(Y_np.T) + c0\n    K_rounded = np.round(K, decimals=4)\n    return K_rounded.tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    beta1_power = beta1 ** t\n    beta2_power = beta2 ** t\n    m_hat = m_t / (1 - beta1_power)\n    v_hat = v_t / (1 - beta2_power)\n    update = lr * m_hat / (np.sqrt(v_hat) + eps)\n    new_param = param - update\n    new_param_rounded = np.round(new_param, 8).tolist()\n    new_m_rounded = np.round(m_t, 8).tolist()\n    new_v_rounded = np.round(v_t, 8).tolist()\n    return (new_param_rounded, new_m_rounded, new_v_rounded)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.asarray(rewards)\n    n = theta_samples.shape[0]\n    k = int(retain_prcnt * n)\n    sorted_indices = np.argsort(-rewards)\n    selected_indices = sorted_indices[:k]\n    selected_thetas = theta_samples[selected_indices]\n    mean = np.mean(selected_thetas, axis=0)\n    variance = np.var(selected_thetas, axis=0, ddof=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    counts = Counter(labels)\n    total = sum(counts.values())\n    if total == 0:\n        return 0.0\n    entropy_val = 0.0\n    for count in counts.values():\n        p = count / total\n        entropy_val += p * math.log2(p)\n    entropy_val = -entropy_val\n    return round(entropy_val, 5)"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data_centered.shape\n    n_components = min(n_components, n_features)\n    if solver == 'svd':\n        (U, S, Vh) = np.linalg.svd(data_centered, full_matrices=False)\n        eigenvalues = S ** 2 / (n_samples - 1)\n        V = Vh.T\n        selected_eigenvectors = V[:, :n_components]\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(-eigenvalues)\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        selected_eigenvectors = eigenvectors[:, :n_components]\n    else:\n        raise ValueError('Invalid solver')\n    for i in range(n_components):\n        vec = selected_eigenvectors[:, i]\n        first_non_zero = 0\n        while first_non_zero < len(vec) and vec[first_non_zero] == 0:\n            first_non_zero += 1\n        if first_non_zero < len(vec):\n            if vec[first_non_zero] < 0:\n                selected_eigenvectors[:, i] *= -1\n    scores = data_centered @ selected_eigenvectors\n    scores_rounded = np.round(scores, 4).tolist()\n    total_variance = np.sum(eigenvalues)\n    explained_variance = eigenvalues[:n_components] / total_variance\n    explained_variance_ratio = [round(r, 4) for r in explained_variance]\n    return (scores_rounded, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        max_val = max(leaf.value)\n        return leaf.value.index(max_val)\n    else:\n        return leaf.value"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic = matrix / row_sums[:, np.newaxis]\n    stochastic = np.round(stochastic, decimals=4)\n    return stochastic.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = True\n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            for space in env.action_space.spaces:\n                if not isinstance(space, Box):\n                    cont_action = False\n                    break\n        elif isinstance(env.action_space, Dict):\n            for space in env.action_space.spaces.values():\n                if not isinstance(space, Box):\n                    cont_action = False\n                    break\n        else:\n            cont_action = False\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    cont_obs = True\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            for space in env.observation_space.spaces:\n                if not isinstance(space, Box):\n                    cont_obs = False\n                    break\n        elif isinstance(env.observation_space, Dict):\n            for space in env.observation_space.spaces.values():\n                if not isinstance(space, Box):\n                    cont_obs = False\n                    break\n        else:\n            cont_obs = False\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        if regression:\n            return np.array([], dtype=np.float64)\n        else:\n            return np.array([], dtype=np.int64)\n    sum_updates = sum(updates)\n    running_pred = -learning_rate * sum_updates\n    if regression:\n        return np.round(running_pred, decimals=4)\n    else:\n        return np.argmax(running_pred, axis=1)"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.asarray(y)\n    if len(y) == 0:\n        return 0.0\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    sum_p_squared = np.sum((counts / N) ** 2)\n    gini_impurity = 1 - sum_p_squared\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b\n        dw = 2 / m * X.T.dot(y_hat - y)\n        db = 2 / m * np.sum(y_hat - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = [round(x, 4) for x in theta]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    arr = np.array(X)\n    return np.allclose(arr, arr.T, rtol=0, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Compute the negative gradient for logistic loss in gradient boosting.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n\n    Returns:\n    list: The list of negative gradients, rounded to four decimal places.\n    If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    if len(y) != len(f):\n        return -1\n    for label in y:\n        if label not in (0, 1):\n            return -1\n    y_np = np.array(y)\n    f_np = np.array(f)\n    y_prime = 2 * y_np - 1\n    denominator = 1 + np.exp(y_prime * f_np)\n    g = y_prime / denominator\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    original_is_scalar = False\n    if isinstance(x, (float, int)):\n        original_is_scalar = True\n    elif isinstance(x, np.ndarray) and x.ndim == 0:\n        original_is_scalar = True\n    else:\n        original_is_scalar = False\n    x = np.asarray(x)\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    mask = x > 0\n    if order == 0:\n        elu = np.where(mask, x, alpha * (np.exp(x) - 1))\n        result = scale * elu\n    elif order == 1:\n        d_elu = np.where(mask, 1, alpha * np.exp(x))\n        result = scale * d_elu\n    elif order == 2:\n        d2_elu = np.where(mask, 0, alpha * np.exp(x))\n        result = scale * d2_elu\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    result = np.round(result, 4)\n    if original_is_scalar:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n = len(x)\n    current_predictions = np.full(n, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - current_predictions\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_r = residuals[sorted_indices]\n        split_points = []\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] != sorted_x[i + 1]:\n                t = (sorted_x[i] + sorted_x[i + 1]) / 2\n                split_points.append(t)\n        if not split_points:\n            best_r_hat = np.mean(sorted_r)\n            current_predictions += learning_rate * best_r_hat\n            continue\n        min_error = float('inf')\n        best_t = None\n        best_r_L = 0.0\n        best_r_R = 0.0\n        for t in split_points:\n            left_mask = sorted_x <= t\n            left = sorted_r[left_mask]\n            right = sorted_r[~left_mask]\n            r_L = np.mean(left) if len(left) > 0 else 0.0\n            r_R = np.mean(right) if len(right) > 0 else 0.0\n            error = np.sum((left - r_L) ** 2) + np.sum((right - r_R) ** 2)\n            if error < min_error:\n                min_error = error\n                best_t = t\n                best_r_L = r_L\n                best_r_R = r_R\n        r_hat = np.zeros(n)\n        for i in range(n):\n            if x[i] <= best_t:\n                r_hat[i] = best_r_L\n            else:\n                r_hat[i] = best_r_R\n        current_predictions += learning_rate * r_hat\n    return np.round(current_predictions, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    new_Eg = rho * Eg + (1 - rho) * grad ** 2\n    denominator = np.sqrt(new_Eg + 1e-08)\n    w_next = w - learning_rate * grad / denominator\n    rounded_w = np.round(w_next, 4)\n    rounded_Eg = np.round(new_Eg, 4)\n    if rounded_w.ndim == 0:\n        w_list = [rounded_w.item()]\n    else:\n        w_list = rounded_w.tolist()\n    if rounded_Eg.ndim == 0:\n        Eg_list = [rounded_Eg.item()]\n    else:\n        Eg_list = rounded_Eg.tolist()\n    return (w_list, Eg_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.asarray(x)\n    mask = x >= 0\n    if not derivative:\n        result = np.where(mask, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(mask, 1.0, alpha * np.exp(x))\n    rounded = np.round(result, 4).tolist()\n    return rounded"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n\n    def process_list(lst):\n        is_tuple = any((isinstance(e, (list, tuple)) or (isinstance(e, np.ndarray) and e.ndim > 0) for e in lst))\n        if len(lst) == 0:\n            dim = 0\n        else:\n            first_element = lst[0]\n            if isinstance(first_element, (list, tuple)):\n                dim = len(first_element)\n            elif isinstance(first_element, np.ndarray):\n                if first_element.ndim == 0:\n                    dim = 1\n                else:\n                    dim = first_element.shape[0]\n            else:\n                dim = 1\n        multidim = dim > 1\n        flattened = []\n        for e in lst:\n            if isinstance(e, (list, tuple)) or (isinstance(e, np.ndarray) and e.ndim > 0):\n                if isinstance(e, np.ndarray) and e.ndim == 0:\n                    flattened.append(e.item())\n                else:\n                    flattened.extend(e)\n            else:\n                flattened.append(e)\n        continuous = any((isinstance(v, float) and (not v.is_integer()) for v in flattened))\n        if dim == 0:\n            n_per_dim = []\n            ids = []\n        else:\n            all_components = []\n            for e in lst:\n                if isinstance(e, (list, tuple)) or (isinstance(e, np.ndarray) and e.ndim > 0):\n                    if isinstance(e, np.ndarray) and e.ndim == 0:\n                        components = [e.item()]\n                    else:\n                        components = list(e)\n                else:\n                    components = [e]\n                all_components.append(components)\n            n_per_dim = []\n            ids = []\n            for i in range(dim):\n                dim_values = [comp[i] for comp in all_components]\n                unique = sorted(list(set(dim_values)))\n                n_per_dim.append(len(unique))\n                ids.append(unique)\n        return {'tuple': is_tuple, 'multidim': multidim, 'continuous': continuous, 'dim': dim, 'n_per_dim': n_per_dim, 'ids': ids}\n    action_stats = process_list(actions)\n    obs_stats = process_list(observations)\n    result = {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}\n    return result"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Compute the multivariate Gaussian PDF for each sample in X.\"\"\"\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    (n_samples, d) = X.shape\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    normalization = 1.0 / np.sqrt((2 * np.pi) ** d * det_cov)\n    pdf_values = []\n    for x in X:\n        x_minus_mu = x - mean\n        exponent = -0.5 * x_minus_mu.dot(inv_cov).dot(x_minus_mu)\n        pdf = normalization * np.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": ""}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1.0\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1.0\n    n = len(actual)\n    if n == 0:\n        return -1.0\n    log_actual = np.log(1 + np.array(actual))\n    log_predicted = np.log(1 + np.array(predicted))\n    diff = log_predicted - log_actual\n    squared_diff = diff ** 2\n    mean = np.mean(squared_diff)\n    rmsle = np.sqrt(mean)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            N = window_len\n        else:\n            N = window_len + 1\n        n = np.arange(N)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        if not symmetric:\n            window = window[:window_len]\n        window = np.round(window, 4)\n        return window.tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "def glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\"\"\"\n    if len(shape) == 4:\n        (out_ch, in_ch, k_h, k_w) = shape\n        receptive_field = k_h * k_w\n        fan_in = in_ch * receptive_field\n        fan_out = out_ch * receptive_field\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to the nearest 4th decimal and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    m = len(y_np)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y_np)\n        return [round(mean_y, 4)] * m\n    y_hat = np.full(m, np.mean(y_np))\n    for _ in range(n_estimators):\n        r = y_np - y_hat\n        X_with_intercept = np.hstack([np.ones((m, 1)), X_np])\n        XTX = X_with_intercept.T.dot(X_with_intercept)\n        XTy = X_with_intercept.T.dot(r)\n        beta = np.linalg.solve(XTX, XTy)\n        h_t = X_with_intercept.dot(beta)\n        y_hat += learning_rate * h_t\n    y_hat_rounded = np.round(y_hat, 4)\n    return y_hat_rounded.tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    if np.isscalar(x):\n        sigma = 1.0 / (1.0 + np.exp(-x))\n        is_scalar = True\n    else:\n        x_np = np.array(x)\n        sigma = 1.0 / (1.0 + np.exp(-x_np))\n        is_scalar = False\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    else:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    if is_scalar:\n        rounded = np.round(result, decimals=4).item()\n    else:\n        rounded = np.round(result, decimals=4)\n    if is_scalar:\n        return rounded\n    else:\n        return rounded.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if len(y) == 0:\n        return []\n    max_y = max(y)\n    if num_classes is None:\n        num_classes = max_y + 1\n    elif num_classes < max_y + 1:\n        return -1\n    result = np.zeros((len(y), num_classes), dtype=int)\n    for i in range(len(y)):\n        result[i, y[i]] = 1\n    return result.tolist()"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    arr = np.array(predictions)\n    averaged = np.mean(arr, axis=0)\n    rounded = np.round(averaged, 4)\n    class_indices = np.argmax(rounded, axis=1)\n    averaged_list = rounded.tolist()\n    class_indices_list = class_indices.tolist()\n    return (averaged_list, class_indices_list)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if not X:\n        if Y is not None:\n            return -1\n        else:\n            return []\n    C = len(X[0])\n    for vec in X:\n        if len(vec) != C:\n            return -1\n    if Y is not None:\n        if not Y:\n            return -1\n        c_y = len(Y[0])\n        if c_y != C:\n            return -1\n        for vec in Y:\n            if len(vec) != c_y:\n                return -1\n    if sigma is None:\n        sigma_list = [np.sqrt(C / 2)] * C\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_list = [float(sigma)] * C\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        for s in sigma:\n            if s <= 0:\n                return -1\n        sigma_list = sigma\n    else:\n        return -1\n    if Y is None:\n        Y_or_X = X\n    else:\n        Y_or_X = Y\n    kernel = []\n    for x in X:\n        row = []\n        for y in Y_or_X:\n            sum_sq = 0.0\n            for j in range(C):\n                diff = x[j] - y[j]\n                scaled_diff = diff / sigma_list[j]\n                sum_sq += scaled_diff ** 2\n            exponent = -0.5 * sum_sq\n            kernel_val = np.exp(exponent)\n            rounded_val = round(kernel_val, 4)\n            row.append(rounded_val)\n        kernel.append(row)\n    return kernel"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n\n    def compute_entropy(labels):\n        if not labels:\n            return 0.0\n        counts = {}\n        for label in labels:\n            counts[label] = counts.get(label, 0) + 1\n        total = len(labels)\n        entropy = 0.0\n        for count in counts.values():\n            p = count / total\n            entropy -= p * np.log2(p)\n        return entropy\n\n    def get_majority(labels):\n        if not labels:\n            return None\n        counts = {}\n        for label in labels:\n            counts[label] = counts.get(label, 0) + 1\n        max_count = max(counts.values())\n        candidates = [k for (k, v) in counts.items() if v == max_count]\n        return min(candidates)\n    H_parent = compute_entropy(y)\n    if H_parent == 0:\n        majority_label = get_majority(y)\n        return (-1, None, majority_label, majority_label)\n    n_samples = len(y)\n    n_features = len(X[0]) if n_samples > 0 else 0\n    current_max_gain = 0.0\n    best_j = -1\n    best_t = None\n    left_majority = None\n    right_majority = None\n    for j in range(n_features):\n        column = [row[j] for row in X]\n        sorted_unique = sorted(list(set(column)))\n        if len(sorted_unique) < 2:\n            continue\n        for i in range(len(sorted_unique) - 1):\n            t = (sorted_unique[i] + sorted_unique[i + 1]) / 2\n            left_indices = [i for i in range(n_samples) if X[i][j] <= t]\n            right_indices = [i for i in range(n_samples) if X[i][j] > t]\n            left_labels = [y[i] for i in left_indices]\n            right_labels = [y[i] for i in right_indices]\n            H_left = compute_entropy(left_labels)\n            H_right = compute_entropy(right_labels)\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n            if gain > current_max_gain:\n                current_max_gain = gain\n                best_j = j\n                best_t = t\n                left_majority = get_majority(left_labels)\n                right_majority = get_majority(right_labels)\n            elif gain == current_max_gain:\n                if best_j == -1:\n                    best_j = j\n                    best_t = t\n                    left_majority = get_majority(left_labels)\n                    right_majority = get_majority(right_labels)\n                elif j < best_j:\n                    best_j = j\n                    best_t = t\n                    left_majority = get_majority(left_labels)\n                    right_majority = get_majority(right_labels)\n                elif j == best_j:\n                    if t < best_t:\n                        best_t = t\n                        left_majority = get_majority(left_labels)\n                        right_majority = get_majority(right_labels)\n    if current_max_gain <= 0:\n        majority_label = get_majority(y)\n        return (-1, None, majority_label, majority_label)\n    else:\n        best_t_rounded = round(best_t, 4)\n        return (best_j, best_t_rounded, left_majority, right_majority)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\nimport numbers\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    if isinstance(X, np.ndarray):\n        X_list = X.tolist()\n    else:\n        X_list = X\n    subset1 = []\n    subset2 = []\n    for sample in X_list:\n        value = sample[feature_i]\n        if isinstance(threshold, numbers.Real) and (not isinstance(threshold, bool)):\n            if value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    batch_size = Q.shape[0]\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    y = Q.copy()\n    for i in range(batch_size):\n        a = actions[i]\n        r = rewards[i]\n        done = dones[i]\n        if done:\n            target = r\n        else:\n            target = r + gamma * np.max(Q_next[i])\n        y[i, a] = target\n    y_rounded = np.round(y, 4)\n    return y_rounded.tolist()"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return []\n    for label in labels:\n        if label < 0:\n            return -1\n    max_label = max(labels)\n    required_num_classes = max_label + 1\n    if num_classes is None:\n        num_classes = required_num_classes\n    elif num_classes < required_num_classes:\n        return -1\n    for label in labels:\n        if label >= num_classes:\n            return -1\n    result = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\"\"\"\n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * len(y)\n    x = np.array(x)\n    y = np.array(y)\n    n = len(x)\n    predictions = np.full(n, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if np.allclose(residuals, 0):\n            break\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            delta = np.full(n, np.mean(residuals))\n        else:\n            min_sse = float('inf')\n            best_t = None\n            best_vL = None\n            best_vR = None\n            for t in unique_x[:-1]:\n                left_mask = x <= t\n                right_mask = x > t\n                if not (left_mask.any() and right_mask.any()):\n                    continue\n                mean_L = np.mean(residuals[left_mask])\n                mean_R = np.mean(residuals[right_mask])\n                sse = np.sum((residuals[left_mask] - mean_L) ** 2) + np.sum((residuals[right_mask] - mean_R) ** 2)\n                if sse < min_sse:\n                    min_sse = sse\n                    best_t = t\n                    best_vL = mean_L\n                    best_vR = mean_R\n            if best_t is None:\n                delta = np.full(n, np.mean(residuals))\n            else:\n                delta = np.zeros(n)\n                delta[x <= best_t] = best_vL\n                delta[x > best_t] = best_vR\n        predictions += learning_rate * delta\n    return np.round(predictions, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "def expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\"\"\"\n    if next_state is None:\n        target = reward\n    else:\n        q_next = q_table[next_state]\n        max_q = max(q_next)\n        a_g = q_next.index(max_q)\n        num_actions = len(q_next)\n        expectation = 0.0\n        for a in range(num_actions):\n            if a == a_g:\n                prob = 1 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expectation += q_next[a] * prob\n        target = reward + gamma * expectation\n    current_q = q_table[state][action]\n    new_q = current_q + lr * (target - current_q)\n    q_table[state][action] = new_q\n    rounded_q = []\n    for row in q_table:\n        rounded_row = [round(x, 4) for x in row]\n        rounded_q.append(rounded_row)\n    return rounded_q"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_floor = i // 2\n        x_low = (x_floor + 0.1) * 10\n        x_high = (x_floor + 0.9) * 10\n        y_mod = i % 2\n        y_low = (y_mod * interval + 0.1) * 10\n        y_high = (y_mod * interval + 0.9) * 10\n        x = np.random.uniform(x_low, x_high, n_train)\n        y = np.random.uniform(y_low, y_high, n_train)\n        samples = np.column_stack((x, y))\n        X_train.append(samples)\n        Y_train.extend([(i - 0.5) * 2] * n_train)\n        x_val = np.random.uniform(x_low, x_high, n_val)\n        y_val = np.random.uniform(y_low, y_high, n_val)\n        samples_val = np.column_stack((x_val, y_val))\n        X_val.append(samples_val)\n        Y_val.extend([(i - 0.5) * 2] * n_val)\n    X_train = np.concatenate(X_train, axis=0)\n    X_val = np.concatenate(X_val, axis=0)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    update = learning_rate * (m_hat / (np.sqrt(v_hat) + eps))\n    w_new = w - update\n    return (w_new, m_t, v_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\"\"\"\n    if not rewards:\n        return []\n    N = len(rewards[0])\n    V = [ev_prior] * N\n    C = [0] * N\n    if seed is not None:\n        np.random.seed(seed)\n    for t in range(len(rewards)):\n        current_rewards = rewards[t]\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.randint(0, N)\n        else:\n            max_v = max(V)\n            candidates = [i for (i, v) in enumerate(V) if v == max_v]\n            chosen_arm = min(candidates)\n        r = current_rewards[chosen_arm]\n        C[chosen_arm] += 1\n        V[chosen_arm] += (r - V[chosen_arm]) / C[chosen_arm]\n    return [round(v, 4) for v in V]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\"\"\"\n    if data.size == 0:\n        return []\n    n = data.shape[0]\n    if n == 0:\n        return []\n    core_points = np.zeros(n, dtype=bool)\n    for i in range(n):\n        distances = np.linalg.norm(data - data[i], axis=1)\n        count = np.sum(distances <= eps)\n        if count >= min_samples:\n            core_points[i] = True\n    visited = np.zeros(n, dtype=bool)\n    cluster_labels = [-1] * n\n    current_cluster = 0\n    for i in range(n):\n        if not visited[i] and core_points[i]:\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            cluster_labels[i] = current_cluster\n            while queue:\n                current_point = queue.popleft()\n                distances = np.linalg.norm(data - data[current_point], axis=1)\n                neighbors = np.where(distances <= eps)[0]\n                for neighbor in neighbors:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        cluster_labels[neighbor] = current_cluster\n                        queue.append(neighbor)\n            current_cluster += 1\n    return cluster_labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError('y must be a 1-D array')\n    if len(y) == 0:\n        if num_classes is None:\n            return np.zeros((0, 0), dtype=int)\n        else:\n            return np.zeros((0, num_classes), dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n        num_classes = int(num_classes)\n    elif not isinstance(num_classes, int) or num_classes < 1:\n        raise ValueError('num_classes must be a positive integer or None')\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes')\n    n = len(y)\n    matrix = np.zeros((n, num_classes), dtype=int)\n    matrix[np.arange(n), y] = 1\n    return matrix"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2 or len(set(X)) == 1:\n            return {'type': 'leaf', 'prediction': np.mean(y)}\n        sorted_data = sorted(zip(X, y), key=lambda x: x[0])\n        X_sorted = [x for (x, _) in sorted_data]\n        y_sorted = [y for (_, y) in sorted_data]\n        best_split = None\n        min_sse = float('inf')\n        for i in range(1, len(X_sorted)):\n            split_value = (X_sorted[i - 1] + X_sorted[i]) / 2\n            left_X = X_sorted[:i]\n            left_y = y_sorted[:i]\n            right_X = X_sorted[i:]\n            right_y = y_sorted[i:]\n            sse_left = np.sum((left_y - np.mean(left_y)) ** 2)\n            sse_right = np.sum((right_y - np.mean(right_y)) ** 2)\n            total_sse = sse_left + sse_right\n            if total_sse < min_sse:\n                min_sse = total_sse\n                best_split = (split_value, left_X, left_y, right_X, right_y)\n        if best_split is None:\n            return {'type': 'leaf', 'prediction': np.mean(y)}\n        (split_value, left_X, left_y, right_X, right_y) = best_split\n        left_child = build_tree(left_X, left_y, depth + 1)\n        right_child = build_tree(right_X, right_y, depth + 1)\n        return {'type': 'node', 'split_value': split_value, 'left': left_child, 'right': right_child}\n\n    def predict(x, tree):\n        if tree['type'] == 'leaf':\n            return tree['prediction']\n        elif x <= tree['split_value']:\n            return predict(x, tree['left'])\n        else:\n            return predict(x, tree['right'])\n    tree = build_tree(X_train, y_train, 0)\n    return [predict(x, tree) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    matrix = np.diag(x)\n    return matrix.tolist()"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    if n_samples == 0:\n        return []\n    n_features = len(X[0])\n    exponents = []\n    for current_degree in range(0, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), current_degree):\n            counts = [0] * n_features\n            for idx in combo:\n                counts[idx] += 1\n            exponents.append(counts)\n    result = []\n    for sample in X:\n        monomials = []\n        for exp in exponents:\n            product = 1.0\n            for i in range(n_features):\n                product *= sample[i] ** exp[i]\n            monomials.append(product)\n        result.append(monomials)\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    n = y.size\n    if n == 0:\n        return -1\n    mean = np.mean(y)\n    squared_diffs = (y - mean) ** 2\n    sum_sq = np.sum(squared_diffs)\n    mse_val = sum_sq / n\n    return round(mse_val, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x).reshape(-1)\n    y = slope * x + intercept\n    grad = np.full(x.shape, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_features = data.shape[1]\n    if k < 1 or k > n_features:\n        return -1\n    n_samples = data.shape[0]\n    standardized = np.zeros_like(data, dtype=np.float64)\n    for i in range(n_features):\n        col = data[:, i]\n        mean = np.mean(col)\n        centered = col - mean\n        variance = np.sum(centered ** 2) / n_samples\n        if variance == 0:\n            standardized[:, i] = centered\n        else:\n            std = np.sqrt(variance)\n            standardized[:, i] = centered / std\n    cov_matrix = np.cov(standardized, rowvar=False, bias=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        vec = eigenvectors[:, i]\n        max_abs_idx = np.argmax(np.abs(vec))\n        if vec[max_abs_idx] < 0:\n            eigenvectors[:, i] *= -1\n    projection = standardized @ eigenvectors[:, :k]\n    result = np.round(projection, 4).tolist()\n    return result"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    c = np.mean(y_train_np)\n    F_train = np.full_like(y_train_np, c, dtype=np.float64)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train_np - F_train\n        best_error = np.inf\n        best_feature = 0\n        best_threshold = 0.0\n        best_left = 0.0\n        best_right = 0.0\n        for feature in range(X_train_np.shape[1]):\n            feature_values = X_train_np[:, feature]\n            unique_vals = np.sort(np.unique(feature_values))\n            for i in range(len(unique_vals) - 1):\n                threshold = (unique_vals[i] + unique_vals[i + 1]) / 2\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n                left_r = residuals[left_mask]\n                right_r = residuals[right_mask]\n                left_mean = np.mean(left_r) if len(left_r) > 0 else 0\n                right_mean = np.mean(right_r) if len(right_r) > 0 else 0\n                error = np.sum((left_r - left_mean) ** 2) + np.sum((right_r - right_mean) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left = left_mean\n                    best_right = right_mean\n        feature_values = X_train_np[:, best_feature]\n        stump_predictions = np.zeros_like(residuals)\n        stump_predictions[feature_values <= best_threshold] = best_left\n        stump_predictions[feature_values > best_threshold] = best_right\n        F_train += learning_rate * stump_predictions\n        stumps.append((best_feature, best_threshold, best_left, best_right))\n    predictions = []\n    for x in X_test_np:\n        F = c\n        for (feature, threshold, left_val, right_val) in stumps:\n            if x[feature] <= threshold:\n                F += learning_rate * left_val\n            else:\n                F += learning_rate * right_val\n        if F >= 0.5:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.shape[0] == 0:\n        return []\n    h0 = 1 / (1 + np.exp(-(X.dot(W) + hbias)))\n    pos_grad = X.T.dot(h0)\n    h = h0.copy()\n    for _ in range(k):\n        v = 1 / (1 + np.exp(-(h.dot(W.T) + vbias)))\n        h = 1 / (1 + np.exp(-(v.dot(W) + hbias)))\n    neg_grad = v.T.dot(h)\n    m = X.shape[0]\n    delta = (pos_grad - neg_grad) / m\n    W_new = W + learning_rate * delta\n    W_new_rounded = np.round(W_new, 4)\n    return W_new_rounded.tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    n = len(x)\n    if n == 0:\n        return -1\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    diffs = np.abs(x_arr - y_arr)\n    max_diff = np.max(diffs)\n    return round(max_diff, 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to exactly 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    bce = -y * np.log(y_pred_clipped) - (1 - y) * np.log(1 - y_pred_clipped)\n    reconstruction_loss = np.sum(bce, axis=1)\n    kl_terms = 1 + t_log_var - np.square(t_mean) - np.exp(t_log_var)\n    kl_per_sample = -0.5 * np.sum(kl_terms, axis=1)\n    total_loss = reconstruction_loss + kl_per_sample\n    average_loss = np.mean(total_loss)\n    return np.round(average_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear = X.dot(w)\n    XV = X.dot(V)\n    XV_squared = XV ** 2\n    X_squared = X ** 2\n    V_squared = V ** 2\n    X_squared_V_squared = X_squared.dot(V_squared)\n    interaction = 0.5 * (XV_squared - X_squared_V_squared).sum(axis=1)\n    y_hat = w0 + linear + interaction\n    y_hat_rounded = np.round(y_hat, 4)\n    return y_hat_rounded.tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            s = 1.0 / (1.0 + np.exp(-z))\n        else:\n            s = np.exp(z) / (1.0 + np.exp(z))\n        s_rounded = np.round(s, 4)\n        return float(s_rounded)\n    else:\n        z = np.array(z)\n        sigmoid_z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n        sigmoid_z = np.round(sigmoid_z, 4)\n        return sigmoid_z.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual, predicted):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if np.isscalar(z):\n        result = z * (1 - z)\n        rounded = np.round(result, 4)\n        return rounded.item() if isinstance(rounded, np.ndarray) else rounded\n    else:\n        if isinstance(z, list) and len(z) == 0:\n            return []\n        arr = np.array(z)\n        grad = arr * (1 - arr)\n        grad_rounded = np.round(grad, 4)\n        result = grad_rounded.tolist()\n        return result"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    x1 = [point[0] for point in X]\n    x2 = [point[1] for point in X]\n    (x1_min, x1_max) = (min(x1), max(x1))\n    (x2_min, x2_max) = (min(x2), max(x2))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(Z >= 0, 1, -1)\n    labels_list = labels.tolist()\n    return labels_list"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\"\"\"\n    class_0 = X_train[y_train == 0]\n    class_1 = X_train[y_train == 1]\n    mu0 = class_0.mean(axis=0)\n    sigma0 = class_0.std(axis=0) + 1e-09\n    mu1 = class_1.mean(axis=0)\n    sigma1 = class_1.std(axis=0) + 1e-09\n    count0 = len(class_0)\n    count1 = len(class_1)\n    total = count0 + count1\n    prior0 = count0 / total\n    prior1 = count1 / total\n    const = -0.5 * np.log(2 * np.pi)\n    predictions = []\n    for x in X_test:\n        diff0 = x - mu0\n        term0 = const - np.log(sigma0) - diff0 ** 2 / (2 * sigma0 ** 2)\n        log_p0 = np.log(prior0) + np.sum(term0)\n        diff1 = x - mu1\n        term1 = const - np.log(sigma1) - diff1 ** 2 / (2 * sigma1 ** 2)\n        log_p1 = np.log(prior1) + np.sum(term1)\n        if log_p0 > log_p1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    m = Y.size\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    term1 = Y * np.log(AL_clipped)\n    term2 = (1 - Y) * np.log(1 - AL_clipped)\n    sum_terms = term1 + term2\n    cost = -1 / m * sum_terms.sum()\n    return float(cost)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    N = len(hmm['pi'])\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    for i in range(N):\n        alpha[0][i] = hmm['pi'][i] * hmm['B'][i][observations[0]]\n    for t_step in range(1, T):\n        for i in range(N):\n            sum_val = 0.0\n            for j in range(N):\n                sum_val += alpha[t_step - 1][j] * hmm['A'][j][i]\n            alpha[t_step][i] = sum_val * hmm['B'][i][observations[t_step]]\n    beta = np.zeros((T, N))\n    for i in range(N):\n        beta[T - 1][i] = 1.0\n    for t_step in range(T - 2, -1, -1):\n        for i in range(N):\n            sum_val = 0.0\n            for j in range(N):\n                sum_val += hmm['A'][i][j] * hmm['B'][j][observations[t_step + 1]] * beta[t_step + 1][j]\n            beta[t_step][i] = sum_val\n    gamma = alpha[t] * beta[t]\n    gamma = gamma / gamma.sum()\n    gamma = [round(x, 4) for x in gamma.tolist()]\n    return gamma"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighborhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    neighborhood = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            dist = np.linalg.norm(data[i] - data[j])\n            if dist <= eps:\n                neighborhood[i].append(j)\n    is_core = [len(neighbors) >= min_samples for neighbors in neighborhood]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] == -1 and is_core[i]:\n            cluster_id += 1\n            queue = deque()\n            queue.append(i)\n            labels[i] = cluster_id\n            while queue:\n                p = queue.popleft()\n                for q in neighborhood[p]:\n                    if labels[q] == -1:\n                        labels[q] = cluster_id\n                        if is_core[q]:\n                            queue.append(q)\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Implements the Expectation-Maximization algorithm for Gaussian Mixture Models.\n    \n    Args:\n        data: A 2D NumPy array of shape (N, D) containing N samples with D features.\n        k: Number of Gaussian components.\n        max_iter: Maximum number of iterations for the EM algorithm.\n        epsilon: Tolerance for convergence based on the change in mixture weights.\n    \n    Returns:\n        A list of integers representing the cluster label for each sample.\n    \"\"\"\n    if k == 1:\n        return [0] * len(data)\n    (N, D) = data.shape\n    indices = np.random.choice(N, size=k, replace=True)\n    mu = data[indices]\n    sigma = np.array([np.eye(D) for _ in range(k)])\n    pi = np.ones(k) / k\n    for _ in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for k_idx in range(k):\n            mu_k = mu[k_idx]\n            sigma_k = sigma[k_idx]\n            inv_sigma_k = np.linalg.inv(sigma_k)\n            det_sigma_k = np.linalg.det(sigma_k)\n            denom = np.sqrt((2 * np.pi) ** D * det_sigma_k)\n            dx = data - mu_k\n            exponent = -0.5 * np.einsum('nd,dc,nc->n', dx, inv_sigma_k, dx)\n            pdf = 1 / denom * np.exp(exponent)\n            responsibilities[:, k_idx] = pi[k_idx] * pdf\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        sum_r = responsibilities.sum(axis=0)\n        new_pi = sum_r / N\n        new_mu = data.T.dot(responsibilities).T / sum_r[:, np.newaxis]\n        new_sigma = np.zeros_like(sigma)\n        for k_idx in range(k):\n            weighted = responsibilities[:, k_idx] * (data - new_mu[k_idx])\n            new_sigma[k_idx] = weighted.T.dot(weighted) / sum_r[k_idx]\n        if np.allclose(pi, new_pi, atol=epsilon):\n            break\n        pi = new_pi\n        mu = new_mu\n        sigma = new_sigma\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_order = np.argsort(mu[:, 0])\n    new_indices = np.zeros(k, dtype=int)\n    for (new_idx, original_idx) in enumerate(sorted_order):\n        new_indices[original_idx] = new_idx\n    new_labels = new_indices[labels]\n    return new_labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    N = data.shape[0]\n    if N == 0:\n        return []\n    sum_sq = np.sum(data ** 2, axis=1)\n    D = sum_sq[:, np.newaxis] + sum_sq - 2 * (data @ data.T)\n    W = np.exp(-gamma * D)\n    D_deg = np.sum(W, axis=1)\n    L = np.diag(D_deg) - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(D_deg))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    embedding = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(embedding, axis=1)\n        row_norms[row_norms == 0] = 1e-12\n        embedding = embedding / row_norms[:, np.newaxis]\n\n    def kmeans(data, n_cluster, initial_centroids):\n        centroids = initial_centroids.copy()\n        prev_assignment = None\n        while True:\n            distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n            assignment = np.argmin(distances, axis=1)\n            if np.array_equal(assignment, prev_assignment):\n                break\n            prev_assignment = assignment.copy()\n            for i in range(n_cluster):\n                mask = assignment == i\n                if np.any(mask):\n                    centroids[i] = np.mean(data[mask], axis=0)\n        return assignment\n    initial_centroids = embedding[:n_cluster, :]\n    assignment = kmeans(embedding, n_cluster, initial_centroids)\n    min_indices = []\n    for label in range(n_cluster):\n        mask = assignment == label\n        indices = np.where(mask)[0]\n        if len(indices) == 0:\n            min_idx = -1\n        else:\n            min_idx = np.min(indices)\n        min_indices.append((min_idx, label))\n    sorted_min_indices = sorted(min_indices, key=lambda x: x[0])\n    label_mapping = {old_label: new_label for (new_label, (min_idx, old_label)) in enumerate(sorted_min_indices)}\n    new_labels = [label_mapping[old_label] for old_label in assignment]\n    return new_labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    d = X_data.shape[1]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = X_data.dot(X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = (X_data.T * (alpha * y_data)).sum(axis=1)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        feature_val = features[root.label]\n        for child in root.child:\n            if child.x == feature_val:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    else:\n        feature_val = features[root.label]\n        if feature_val <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n\n    def compute_entropy(y):\n        counts = np.bincount(y)\n        total = len(y)\n        entropy = 0.0\n        for count in counts:\n            if count == 0:\n                continue\n            p = count / total\n            entropy -= p * math.log2(p)\n        return entropy\n\n    def compute_conditional_entropy(X, y, feature_index):\n        feature = X[:, feature_index]\n        unique_values = np.unique(feature)\n        total = len(y)\n        conditional_entropy = 0.0\n        for value in unique_values:\n            mask = feature == value\n            subset_y = y[mask]\n            subset_size = len(subset_y)\n            if subset_size == 0:\n                continue\n            entropy = compute_entropy(subset_y)\n            conditional_entropy += subset_size / total * entropy\n        return conditional_entropy\n    h_y = compute_entropy(y)\n    n_features = X.shape[1]\n    max_ig = -1\n    best_feature = 0\n    for feature_index in range(n_features):\n        h_cond = compute_conditional_entropy(X, y, feature_index)\n        ig = h_y - h_cond\n        if ig > max_ig:\n            max_ig = ig\n            best_feature = feature_index\n        elif ig == max_ig:\n            if feature_index < best_feature:\n                best_feature = feature_index\n    max_ig_rounded = round(max_ig, 6)\n    return (best_feature, max_ig_rounded)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if n_samples == 0 or epsilon == 0:\n        return []\n\n    def compute_c(n):\n        if n <= 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(node_indices, current_depth, data, height_limit):\n        if current_depth >= height_limit or len(node_indices) <= 1:\n            return {'is_leaf': True, 'size': len(node_indices)}\n        feature = np.random.randint(n_features)\n        min_val = data[node_indices, feature].min()\n        max_val = data[node_indices, feature].max()\n        if min_val == max_val:\n            return {'is_leaf': True, 'size': len(node_indices)}\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = []\n        right_indices = []\n        for idx in node_indices:\n            if data[idx, feature] <= threshold:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        left_child = build_tree(left_indices, current_depth + 1, data, height_limit)\n        right_child = build_tree(right_indices, current_depth + 1, data, height_limit)\n        return {'is_leaf': False, 'feature': feature, 'threshold': threshold, 'left': left_child, 'right': right_child, 'size': len(node_indices)}\n\n    def compute_path_length(x, tree, data):\n        path_length = 0\n        current_node = tree\n        while True:\n            if current_node['is_leaf']:\n                n = current_node['size']\n                c = compute_c(n)\n                return path_length + c\n            feature = current_node['feature']\n            threshold = current_node['threshold']\n            if x[feature] <= threshold:\n                current_node = current_node['left']\n            else:\n                current_node = current_node['right']\n            path_length += 1\n    average_path = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample_indices = np.arange(n_samples)\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n        if len(subsample_indices) == 0:\n            continue\n        height_limit = math.ceil(math.log2(len(subsample_indices)))\n        tree = build_tree(subsample_indices, 0, data, height_limit)\n        for i in range(n_samples):\n            x = data[i]\n            pl = compute_path_length(x, tree, data)\n            average_path[i] += pl\n    average_path /= n_trees\n    n = n_samples\n    phi = 2 * math.log(n - 1) - 2 * (n - 1) / n\n    scores = 2 ** (-average_path / phi)\n    k = int(epsilon * n_samples)\n    if k == 0:\n        return []\n    sorted_scores = sorted(scores, reverse=True)\n    threshold = sorted_scores[k - 1]\n    outlier_indices = [i for i in range(n_samples) if scores[i] >= threshold]\n    outlier_indices.sort()\n    return outlier_indices"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier using Generalized Iterative Scaling.\"\"\"\n    feature_counts = defaultdict(int)\n    n_train = len(X_train)\n    for i in range(n_train):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(len(x)):\n            v = x[j]\n            key = (j, v, y)\n            feature_counts[key] += 1\n    labels = np.unique(y_train).tolist()\n    n_labels = len(labels)\n    weights = defaultdict(float)\n    for key in feature_counts:\n        weights[key] = 0.0\n    for iter in range(n_iter):\n        expected_counts = defaultdict(float)\n        for i in range(n_train):\n            x = X_train[i]\n            numerators = {}\n            for l in labels:\n                sum_weights = 0.0\n                for j in range(len(x)):\n                    v = x[j]\n                    key = (j, v, l)\n                    sum_weights += weights.get(key, 0.0)\n                numerators[l] = sum_weights\n            max_num = max(numerators.values())\n            Z = 0.0\n            for l in labels:\n                Z += math.exp(numerators[l] - max_num)\n            for l in labels:\n                p = math.exp(numerators[l] - max_num) / Z\n                for j in range(len(x)):\n                    v = x[j]\n                    key = (j, v, l)\n                    expected_counts[key] += p\n        deltas = {}\n        max_delta = 0.0\n        for key in feature_counts:\n            C = feature_counts[key]\n            E = expected_counts.get(key, 0.0)\n            if E == 0:\n                delta = 0.0\n            else:\n                r = C / E\n                delta = math.log(r)\n            deltas[key] = delta\n            if abs(delta) > max_delta:\n                max_delta = abs(delta)\n        if max_delta < epsilon:\n            break\n        for key in deltas:\n            weights[key] += deltas[key]\n    result = []\n    for x in X_test:\n        numerators = {}\n        for l in labels:\n            sum_weights = 0.0\n            for j in range(len(x)):\n                v = x[j]\n                key = (j, v, l)\n                sum_weights += weights.get(key, 0.0)\n            numerators[l] = sum_weights\n        max_num = max(numerators.values())\n        Z = 0.0\n        for l in labels:\n            Z += math.exp(numerators[l] - max_num)\n        max_p = -1\n        predicted = None\n        for l in labels:\n            p = math.exp(numerators[l] - max_num) / Z\n            if p > max_p:\n                max_p = p\n                predicted = l\n        result.append(predicted)\n    return result"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter()\n    total_docs = len(data)\n    if total_docs == 0:\n        return ([], set())\n    for doc in data:\n        words = doc[1]\n        unique_words = set(words)\n        for word in unique_words:\n            word_counts[word] += 1\n    word_ratio = []\n    for (word, count) in word_counts.items():\n        ratio = count / total_docs\n        ratio_rounded = round(ratio, 4)\n        word_ratio.append((word, ratio_rounded))\n    word_ratio.sort(key=lambda x: -x[1])\n    if cut_off is None:\n        top_words = set((word for (word, _) in word_ratio))\n    elif cut_off <= 0:\n        top_words = set()\n    else:\n        top_k = min(cut_off, len(word_ratio))\n        top_words = set((word for (word, _) in word_ratio[:top_k]))\n    return (word_ratio, top_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    n = X.shape[0]\n    w = X.T.dot(alpha * y)\n    Xw = X.dot(w)\n    diff = y - Xw\n    sum_diff = np.sum(diff)\n    b = sum_diff / n\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n = data.shape[0]\n    distance_matrix = np.sqrt(np.sum((data[:, np.newaxis] - data) ** 2, axis=2))\n    k_distances = np.zeros(n)\n    neighbors = [[] for _ in range(n)]\n    for p in range(n):\n        dist_indices = [(distance_matrix[p][j], j) for j in range(n)]\n        dist_indices.sort()\n        neighbor_indices = [j for (d, j) in dist_indices[1:k + 1]]\n        k_dist = dist_indices[k][0]\n        k_distances[p] = k_dist\n        neighbors[p] = neighbor_indices\n    lrd = np.zeros(n)\n    for p in range(n):\n        sum_reach = 0.0\n        for q in neighbors[p]:\n            reach = max(k_distances[q], distance_matrix[p][q])\n            sum_reach += reach\n        lrd[p] = k / sum_reach\n    lof = np.zeros(n)\n    for p in range(n):\n        sum_lrd_neighbors = 0.0\n        for q in neighbors[p]:\n            sum_lrd_neighbors += lrd[q]\n        average_lrd = sum_lrd_neighbors / k\n        lof[p] = average_lrd / lrd[p]\n    lof_rounded = np.round(lof, 4)\n    outlier_indices = [i for i in range(n) if lof_rounded[i] > epsilon]\n    outlier_indices.sort()\n    return (lof_rounded.tolist(), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = [random.uniform(base + 1, base + 9) for _ in range(n_train)]\n        y_train_c = [random.uniform(base + 1, base + 9) for _ in range(n_train)]\n        points_train = list(zip(x_train, y_train_c))\n        X_train.extend(points_train)\n        y_train.extend([c] * n_train)\n        x_val = [random.uniform(base + 1, base + 9) for _ in range(n_val)]\n        y_val_c = [random.uniform(base + 1, base + 9) for _ in range(n_val)]\n        points_val = list(zip(x_val, y_val_c))\n        X_val.extend(points_val)\n        y_val.extend([c] * n_val)\n    X_train = np.array(X_train).round(4)\n    X_val = np.array(X_val).round(4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centers = X[:k, :].copy()\n    previous_labels = None\n    for _ in range(max_iters):\n        distances = np.sqrt(np.sum((X[:, np.newaxis, :] - centers[np.newaxis, :, :]) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, previous_labels):\n            break\n        new_centers = []\n        for j in range(k):\n            mask = labels == j\n            if np.any(mask):\n                new_center = np.mean(X[mask, :], axis=0)\n            else:\n                new_center = centers[j]\n            new_centers.append(new_center)\n        centers = np.array(new_centers)\n        previous_labels = labels.copy()\n    rounded_centers = [np.round(center, 4).tolist() for center in centers]\n    labels_list = labels.tolist()\n    return (labels_list, rounded_centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * n, 0.0)\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        r = y - y_pred\n        term1 = -2 * X.T.dot(r)\n        sign_w = np.sign(w)\n        sign_w[sign_w == 0] = -1\n        term2 = l1_penalty * sign_w\n        term3 = 2 * l2_penalty * w\n        gradient_w = (term1 + term2 + term3) / m\n        gradient_b = -2 * np.sum(r) / m\n        w = w - learning_rate * gradient_w\n        b = b - learning_rate * gradient_b\n    weights = [round(num, 4) for num in w]\n    bias = round(b, 4)\n    return (weights, bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\"\"\"\n    current_input = np.array(x, dtype=np.float64)\n    for L in range(len(weights)):\n        augmented_input = np.insert(current_input, 0, 1)\n        layer_weights = np.array(weights[L])\n        output = np.dot(layer_weights, augmented_input)\n        if L != len(weights) - 1:\n            output = np.maximum(output, 0)\n        current_input = output\n    output = current_input.tolist()\n    rounded_output = [round(val, 4) for val in output]\n    return rounded_output[0] if len(rounded_output) == 1 else rounded_output"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering algorithm to compute centroids.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        assignments = np.argmin(distances, axis=1)\n        new_centroids = []\n        for i in range(k):\n            mask = assignments == i\n            if np.any(mask):\n                new_centroid = np.mean(X[mask], axis=0)\n            else:\n                new_centroid = centroids[i]\n            new_centroids.append(new_centroid)\n        new_centroids = np.array(new_centroids)\n        max_movement = np.max(np.linalg.norm(new_centroids - centroids, axis=1))\n        if max_movement < 0.0001:\n            break\n        centroids = new_centroids\n    rounded_centroids = np.round(centroids, decimals=4)\n    rounded_centroids = rounded_centroids.tolist()\n    rounded_centroids.sort()\n    return rounded_centroids"}
