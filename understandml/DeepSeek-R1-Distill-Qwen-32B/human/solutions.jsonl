{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a:\n        return [] if not b else -1\n    num_cols = len(a[0])\n    for row in a:\n        if len(row) != num_cols:\n            return -1\n    if len(b) != num_cols:\n        return -1\n    result = []\n    for row in a:\n        dot = 0\n        for i in range(num_cols):\n            dot += row[i] * b[i]\n        result.append(dot)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    total_elements = sum((len(row) for row in a))\n    if new_shape[0] * new_shape[1] != total_elements:\n        return []\n    arr = np.array(a)\n    reshaped = arr.reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        means = []\n        for row in matrix:\n            mean = sum(row) / len(row)\n            means.append(mean)\n        return means\n    else:\n        if not matrix:\n            return []\n        n_cols = len(matrix[0])\n        means = []\n        for i in range(n_cols):\n            column = [row[i] for row in matrix]\n            mean = sum(column) / len(column)\n            means.append(mean)\n        return means"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = []\n        for num in row:\n            new_row.append(num * scalar)\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigen1 = (trace + sqrt_discriminant) / 2\n    eigen2 = (trace - sqrt_discriminant) / 2\n    eigenvalues = [eigen1, eigen2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    det_T = np.linalg.det(T_np)\n    if abs(det_T) < 1e-10:\n        return -1\n    det_S = np.linalg.det(S_np)\n    if abs(det_S) < 1e-10:\n        return -1\n    if A_np.shape[0] != T_np.shape[0] or A_np.shape[1] != S_np.shape[0]:\n        return -1\n    T_inv = np.linalg.inv(T_np)\n    temp = T_inv @ A_np\n    result = temp @ S_np\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_det = 1.0 / det\n    return [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not b:\n        return -1\n    rows_a = len(a)\n    cols_a = len(a[0])\n    for row in a:\n        if len(row) != cols_a:\n            return -1\n    rows_b = len(b)\n    cols_b = len(b[0])\n    for row in b:\n        if len(row) != cols_b:\n            return -1\n    if cols_a != rows_b:\n        return -1\n    result = []\n    for i in range(rows_a):\n        new_row = []\n        for j in range(cols_b):\n            sum_val = 0\n            for k in range(cols_a):\n                sum_val += a[i][k] * b[k][j]\n            new_row.append(sum_val)\n        result.append(new_row)\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    n = len(vectors)\n    if n == 0:\n        return []\n    m = len(vectors[0])\n    covariance_matrix = [[0.0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            sum_product = 0.0\n            mean_i = sum(vectors[i]) / m\n            mean_j = sum(vectors[j]) / m\n            for k in range(m):\n                sum_product += (vectors[i][k] - mean_i) * (vectors[j][k] - mean_j)\n            covariance = sum_product / (m - 1)\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    m = len(b)\n    x = np.zeros(m)\n    for _ in range(n):\n        x_new = np.zeros(m)\n        for i in range(m):\n            s = np.dot(A[i], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (a, b) = (ATA[0, 0], ATA[0, 1])\n    (c, d) = (ATA[1, 0], ATA[1, 1])\n    trace = a + d\n    det = a * d - b * c\n    discriminant = trace ** 2 - 4 * det\n    sqrt_discriminant = np.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    singular_values = [np.sqrt(eigenvalue1), np.sqrt(eigenvalue2)]\n    singular_values.sort(reverse=True)\n    singular_values = [round(sv, 4) for sv in singular_values]\n    return tuple(singular_values)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(m):\n        (a, b, c) = m[0]\n        (d, e, f) = m[1]\n        (g, h, i) = m[2]\n        return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n    det = 0.0\n    for j in range(4):\n        minor = []\n        for row in matrix[1:]:\n            minor_row = row[:j] + row[j + 1:]\n            minor.append(minor_row)\n        minor_det = determinant_3x3(minor)\n        sign = (-1) ** j\n        det += matrix[0][j] * sign * minor_det\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    XTX = X_np.T @ X_np\n    XTX_inv = np.linalg.inv(XTX)\n    theta = XTX_inv @ (X_np.T @ y_np)\n    theta_rounded = [round(num, 4) for num in theta]\n    return theta_rounded"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    m = len(y)\n    n = X.shape[1]\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        h = X.dot(theta)\n        error = h - y\n        gradient = 1 / m * X.T.dot(error)\n        theta = theta - alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = data.mean(axis=0)\n    std = data.std(axis=0)\n    standardized = (data - mean) / std\n    min_vals = data.min(axis=0)\n    max_vals = data.max(axis=0)\n    normalized = (data - min_vals) / (max_vals - min_vals)\n    standardized_rounded = np.round(standardized, 4)\n    normalized_rounded = np.round(normalized, 4)\n    standardized_list = standardized_rounded.tolist()\n    normalized_list = normalized_rounded.tolist()\n    return (standardized_list, normalized_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_np = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(np.sum((points_np[:, np.newaxis] - centroids) ** 2, axis=2))\n        cluster_indices = np.argmin(distances, axis=1)\n        new_centroids = []\n        for i in range(k):\n            cluster_points = points_np[cluster_indices == i]\n            if len(cluster_points) == 0:\n                new_centroid = centroids[i]\n            else:\n                new_centroid = np.mean(cluster_points, axis=0)\n            new_centroids.append(new_centroid)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = np.array(new_centroids)\n    rounded_centroids = np.round(centroids, decimals=4)\n    final_centroids = [tuple(row) for row in rounded_centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    n = X.shape[0]\n    indices = np.arange(n)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(indices)\n    folds = np.array_split(indices, k)\n    splits = []\n    for i in range(k):\n        test_indices = folds[i]\n        train_indices = np.concatenate(folds[:i] + folds[i + 1:])\n        splits.append((train_indices, test_indices))\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    centered = data - mean\n    std = np.std(centered, axis=0, ddof=1)\n    standardized = centered / std\n    n = standardized.shape[0]\n    cov_matrix = standardized.T @ standardized / (n - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    eigen_pairs = [(eigenvalues[i], eigenvectors[:, i]) for i in range(len(eigenvalues))]\n    eigen_pairs.sort(key=lambda x: x[0], reverse=True)\n    num_components = min(k, len(eigen_pairs))\n    principal_components = [eigen_pairs[i][1] for i in range(num_components)]\n    result = []\n    for vec in principal_components:\n        rounded_vec = [round(x, 4) for x in vec]\n        result.append(rounded_vec)\n    return result"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    first_target = examples[0][target_attr]\n    if all((example[target_attr] == first_target for example in examples)):\n        return first_target\n    if not attributes:\n        target_counts = Counter((example[target_attr] for example in examples))\n        return max(target_counts, key=target_counts.get)\n    max_info_gain = -1\n    best_attr = None\n    for attr in attributes:\n        current_target_counts = Counter((example[target_attr] for example in examples))\n        current_entropy = 0.0\n        total = len(examples)\n        for count in current_target_counts.values():\n            p = count / total\n            current_entropy -= p * math.log2(p)\n        attribute_values = set((example[attr] for example in examples))\n        weighted_entropy = 0.0\n        for value in attribute_values:\n            subset = [example for example in examples if example[attr] == value]\n            subset_total = len(subset)\n            if subset_total == 0:\n                continue\n            subset_target_counts = Counter((example[target_attr] for example in subset))\n            subset_entropy = 0.0\n            for count in subset_target_counts.values():\n                p = count / subset_total\n                subset_entropy -= p * math.log2(p)\n            weighted_entropy += subset_total / total * subset_entropy\n        info_gain = current_entropy - weighted_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_attr = attr\n    tree = {best_attr: {}}\n    values = set((example[best_attr] for example in examples))\n    for value in values:\n        subset = [example for example in examples if example[best_attr] == value]\n        remaining_attrs = [attr for attr in attributes if attr != best_attr]\n        subtree = learn_decision_tree(subset, remaining_attrs, target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n = data.shape[0]\n    labels = np.where(labels == 0, -1, labels)\n    if kernel == 'linear':\n        K = data.dot(data.T)\n    elif kernel == 'rbf':\n        pairwise_diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n        squared_dist = np.sum(pairwise_diff ** 2, axis=2)\n        K = np.exp(-squared_dist / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Kernel must be 'linear' or 'rbf'\")\n    alpha = np.zeros(n)\n    b = 0.0\n    for t in range(1, iterations + 1):\n        s = K.dot(alpha * labels) + b\n        mask = labels * s < 1\n        delta_alpha = np.zeros(n)\n        delta_b = 0.0\n        for i in range(n):\n            if mask[i]:\n                yi = labels[i]\n                si = s[i]\n                term = (1 - yi * si) / yi\n                delta_alpha_i = 1 / (lambda_val * t) * term\n                delta_alpha[i] = delta_alpha_i\n                delta_b += 1 / (lambda_val * t) * (1 - yi * si)\n        alpha = (1 - 1 / (lambda_val * t)) * alpha + delta_alpha\n        b += delta_b\n    alpha = np.round(alpha, 4)\n    b = np.round(b, 4)\n    return (alpha.tolist(), b.tolist())"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    if not scores:\n        return []\n    max_score = max(scores)\n    adjusted_scores = [s - max_score for s in scores]\n    exp_scores = [math.exp(s) for s in adjusted_scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [e / sum_exp for e in exp_scores]\n    rounded = [round(v, 4) for v in softmax_values]\n    return rounded"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    X = np.array(features)\n    y = np.array(labels)\n    w = np.array(weights)\n    z = np.dot(X, w) + bias\n    predictions = 1 / (1 + np.exp(-z))\n    mse = np.mean((y - predictions) ** 2)\n    predictions_rounded = np.round(predictions, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    return (predictions_rounded, mse_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    N = features.shape[0]\n    mse_list = []\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        a = 1 / (1 + np.exp(-z))\n        delta = (a - labels) * a * (1 - a)\n        grad_weights = np.dot(features.T, delta) / N\n        grad_bias = np.sum(delta) / N\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n        mse = np.mean((a - labels) ** 2)\n        mse_rounded = round(mse, 4)\n        mse_list.append(mse_rounded)\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights, bias, mse_list)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        if not isinstance(other, Value):\n            other = Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        if not isinstance(other, Value):\n            other = Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='*')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(0, self.data), _children=(self,), _op='ReLU')\n\n        def _backward():\n            if self.data > 0:\n                self.grad += out.grad\n            else:\n                self.grad += 0\n        out._backward = _backward\n        return out"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_np = np.array(B)\n    C_np = np.array(C)\n    C_inv = np.linalg.inv(C_np)\n    P = C_inv @ B_np\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    B = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eigh(B)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    singular_values = np.sqrt(eigenvalues_sorted)\n    S = np.diag(singular_values)\n    V = eigenvectors_sorted\n    if singular_values[0] == 0:\n        U = np.eye(2)\n    else:\n        v1 = eigenvectors_sorted[:, 0]\n        u1 = A @ v1 / singular_values[0]\n        if singular_values[1] != 0:\n            v2 = eigenvectors_sorted[:, 1]\n            u2 = A @ v2 / singular_values[1]\n        else:\n            u1_vec = u1.flatten()\n            perp = np.array([u1_vec[1], -u1_vec[0]])\n            perp = perp / np.linalg.norm(perp)\n            u2 = perp.reshape(-1, 1)\n        U = np.hstack([u1, u2])\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    U_list = U.tolist()\n    S_list = S.tolist()\n    V_list = V.tolist()\n    return (U_list, S_list, V_list)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if len(X) != len(y):\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    permutation = np.random.permutation(len(X))\n    X_shuffled = X[permutation]\n    y_shuffled = y[permutation]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size].tolist()\n        if y is not None:\n            y_batch = y[i:i + batch_size].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    mask = X[:, feature_i] >= threshold\n    subset1 = X[mask]\n    subset2 = X[~mask]\n    return (subset1.tolist(), subset2.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree == 0:\n        return np.array([]).tolist()\n    n_features = X.shape[1]\n    features = []\n    for d in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), d):\n            feature = np.prod(X[:, comb], axis=1)\n            features.append(feature)\n    if not features:\n        return np.array([]).tolist()\n    result = np.column_stack(features)\n    return result.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    m = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        indices = np.random.choice(m, size=m, replace=replacements)\n        X_subset = X[indices].tolist()\n        y_subset = y[indices].tolist()\n        subsets.append((X_subset, y_subset))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if len(x) == 0:\n        return []\n    if n_col is None:\n        n_col = np.max(x) + 1\n    result = np.zeros((len(x), n_col), dtype=int)\n    result[np.arange(len(x)), x] = 1\n    return result.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    accuracy = np.mean(y_true == y_pred)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is not None:\n        if X.shape[0] != Y.shape[0]:\n            raise ValueError('X and Y must have the same number of samples.')\n        A = X\n        B = Y\n    else:\n        A = X\n        B = X\n    n = A.shape[0]\n    A_centered = A - np.mean(A, axis=0, keepdims=True)\n    B_centered = B - np.mean(B, axis=0, keepdims=True)\n    covariance = A_centered.T @ B_centered / (n - 1)\n    std_A = np.std(A, axis=0, ddof=1)\n    std_B = np.std(B, axis=0, ddof=1)\n    std_outer = np.outer(std_A, std_B)\n    correlation = np.zeros_like(covariance, dtype=np.float64)\n    mask = std_outer != 0\n    correlation[mask] = covariance[mask] / std_outer[mask]\n    correlation = np.round(correlation, 4)\n    return correlation.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = 1.0\n        best_feature = None\n        best_threshold = None\n        best_direction = None\n        for feature in range(n_features):\n            feature_values = X[:, feature]\n            unique_vals = np.sort(np.unique(feature_values))\n            thresholds = []\n            for i in range(len(unique_vals)):\n                thresholds.append(unique_vals[i])\n                if i < len(unique_vals) - 1:\n                    mid = (unique_vals[i] + unique_vals[i + 1]) / 2\n                    thresholds.append(mid)\n            for threshold in thresholds:\n                left = feature_values <= threshold\n                pred1 = np.where(left, -1, 1)\n                error1 = np.sum(sample_weights * (pred1 != y))\n                pred2 = np.where(left, 1, -1)\n                error2 = np.sum(sample_weights * (pred2 != y))\n                if error1 < error2:\n                    current_error = error1\n                    current_direction = 1\n                else:\n                    current_error = error2\n                    current_direction = -1\n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_direction = current_direction\n        if best_error >= 0.5:\n            continue\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        alpha = round(alpha, 4)\n        feature_values = X[:, best_feature]\n        left = feature_values <= best_threshold\n        pred = np.where(left, -1, 1)\n        pred = pred * best_direction\n        update_factor = np.exp(-alpha * y * pred)\n        sample_weights *= update_factor\n        sample_weights /= np.sum(sample_weights)\n        rounded_threshold = round(best_threshold, 4)\n        classifiers.append((best_feature, rounded_threshold, best_direction, alpha))\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_np = np.array(scores)\n    m = np.max(scores_np)\n    shifted = scores_np - m\n    exp_shifted = np.exp(shifted)\n    sum_exp = np.sum(exp_shifted)\n    log_sum = np.log(sum_exp)\n    log_softmax_values = shifted - log_sum\n    log_softmax_values = np.round(log_softmax_values, 4)\n    return log_softmax_values.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        super().__init__()\n        self.n_units = n_units\n        self.input_shape = input_shape\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n        self.layer_input = None\n\n    def initialize(self):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be set before initializing the layer.')\n        limit = 1.0 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(low=-limit, high=limit, size=(self.input_shape[0], self.n_units))\n        self.w0 = np.zeros(self.n_units)\n\n    def parameters(self):\n        if self.input_shape is None:\n            return 0\n        return self.input_shape[0] * self.n_units + self.n_units\n\n    def forward_pass(self, X, training):\n        self.layer_input = X.copy()\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        dL_dW = np.dot(self.layer_input.T, accum_grad)\n        dL_dw0 = np.sum(accum_grad, axis=0)\n        dL_dX = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            if self.optimizer_W is not None and self.optimizer_w0 is not None:\n                self.W = self.optimizer_W.update(self.W, dL_dW)\n                self.w0 = self.optimizer_w0.update(self.w0, dL_dw0)\n        return dL_dX\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    (kernel_height, kernel_width) = kernel.shape\n    (padded_height, padded_width) = padded_input.shape\n    output_height = (padded_height - kernel_height) // stride + 1\n    output_width = (padded_width - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            start_row = i * stride\n            start_col = j * stride\n            end_row = start_row + kernel_height\n            end_col = start_col + kernel_width\n            patch = padded_input[start_row:end_row, start_col:end_col]\n            output[i, j] = np.sum(patch * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(z, 0)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X.dot(w)\n    residuals = y_true - y_pred\n    squared_errors = residuals ** 2\n    mse = np.mean(squared_errors)\n    regularization = alpha * np.sum(w ** 2)\n    total_loss = mse + regularization\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    denominator = tp + fp\n    if denominator == 0:\n        return 0.0\n    return tp / denominator"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    weights = np.copy(weights)\n    for _ in range(n_iterations):\n        if method == 'batch':\n            batch_X = X\n            batch_y = y\n        elif method == 'sgd':\n            idx = np.random.randint(0, X.shape[0])\n            batch_X = X[idx:idx + 1]\n            batch_y = y[idx:idx + 1]\n        elif method == 'mini-batch':\n            batch_size = min(batch_size, X.shape[0])\n            idxs = np.random.choice(X.shape[0], batch_size, replace=False)\n            batch_X = X[idxs]\n            batch_y = y[idxs]\n        else:\n            raise ValueError('Invalid method')\n        y_pred = np.dot(batch_X, weights)\n        error = y_pred - batch_y\n        gradient = 1 / batch_size * np.dot(batch_X.T, error)\n        weights -= learning_rate * gradient\n    weights = np.round(weights, 4)\n    return weights.tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=np.float64).copy()\n    rows = matrix.shape[0]\n    cols = matrix.shape[1]\n    current_row = 0\n    current_col = 0\n    while current_row < rows and current_col < cols:\n        found = False\n        for j in range(current_col, cols):\n            for r in range(current_row, rows):\n                if abs(matrix[r, j]) > 1e-10:\n                    current_col = j\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            break\n        pivot_row = None\n        for r in range(current_row, rows):\n            if abs(matrix[r, current_col]) > 1e-10:\n                pivot_row = r\n                break\n        if pivot_row is None:\n            current_col += 1\n            continue\n        matrix[[current_row, pivot_row]] = matrix[[pivot_row, current_row]]\n        pivot_value = matrix[current_row, current_col]\n        matrix[current_row] = matrix[current_row] / pivot_value\n        for r in range(0, rows):\n            if r != current_row:\n                factor = matrix[r, current_col]\n                matrix[r] = matrix[r] - factor * matrix[current_row]\n        current_row += 1\n        current_col += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X.dot(w) + b\n        error = y - y_pred\n        gradient_w = 1 / n_samples * -X.T.dot(error) + alpha * np.sign(w)\n        gradient_b = 1 / n_samples * -np.sum(error)\n        new_w = w - learning_rate * gradient_w\n        new_b = b - learning_rate * gradient_b\n        change_w = np.max(np.abs(new_w - w))\n        change_b = np.abs(new_b - b)\n        if change_w < tol and change_b < tol:\n            break\n        w = new_w\n        b = new_b\n    w = np.round(w, 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 51, "completion_id": 0, "solution": "def OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            substitution = dp[i - 1][j - 1] + (0 if source[i - 1] == target[j - 1] else 1)\n            insertion = dp[i][j - 1] + 1\n            deletion = dp[i - 1][j] + 1\n            transposition = float('inf')\n            if i >= 2 and j >= 2:\n                if source[i - 2] == target[j - 1] and source[i - 1] == target[j - 2]:\n                    transposition = dp[i - 2][j - 2] + 1\n            dp[i][j] = min(substitution, insertion, deletion, transposition)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = tp + fn\n    if denominator == 0:\n        return 0.0\n    else:\n        rec = tp / denominator\n        return round(rec, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    d_k = K.shape[1]\n    scores = scores / np.sqrt(d_k)\n    exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attention_weights = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    output = attention_weights @ V\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h = np.array(initial_hidden_state)\n    Wx_np = np.array(Wx)\n    Wh_np = np.array(Wh)\n    b_np = np.array(b)\n    for x in input_sequence:\n        x_t = np.array(x)\n        input_contrib = Wx_np.dot(x_t)\n        hidden_contrib = Wh_np.dot(h)\n        pre_activation = input_contrib + hidden_contrib + b_np\n        h = np.tanh(pre_activation)\n    h_rounded = np.round(h, 4)\n    return h_rounded.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    if not points:\n        return []\n    points_np = np.array(points)\n    homogeneous = np.hstack([points_np, np.ones((points_np.shape[0], 1))])\n    trans_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    translated = trans_matrix.dot(homogeneous.T)\n    translated_points = translated[:2, :].T\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    delta_mu = mu_p - mu_q\n    term1 = (delta_mu ** 2 + sigma_p ** 2 - sigma_q ** 2) / (2 * sigma_q ** 2)\n    term2 = np.log(sigma_q / sigma_p)\n    return term1 + term2"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=np.float64)\n    else:\n        x = np.array(x_ini, dtype=np.float64)\n    for _ in range(n):\n        for i in range(len(x)):\n            sum1 = 0.0\n            for j in range(i):\n                sum1 += A[i, j] * x[j]\n            sum2 = 0.0\n            for j in range(i + 1, len(x)):\n                sum2 += A[i, j] * x[j]\n            x[i] = (b[i] - sum1 - sum2) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = A.copy()\n    b = b.copy().flatten()\n    n = A.shape[0]\n    M = np.hstack((A, b.reshape(-1, 1)))\n    for pivot in range(n):\n        max_row = pivot\n        for i in range(pivot + 1, n):\n            if abs(M[i, pivot]) > abs(M[max_row, pivot]):\n                max_row = i\n        M[[pivot, max_row]] = M[[max_row, pivot]]\n        for row in range(pivot + 1, n):\n            factor = M[row, pivot] / M[pivot, pivot]\n            M[row, pivot:] -= factor * M[pivot, pivot:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        sum_val = 0.0\n        for j in range(i + 1, n):\n            sum_val += M[i, j] * x[j]\n        x[i] = (M[i, n] - sum_val) / M[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        T = len(x)\n        hidden_states = []\n        h_prev = initial_hidden_state.copy()\n        c_prev = initial_cell_state.copy()\n        for t in range(T):\n            x_t = x[t]\n            concat = np.concatenate((h_prev, x_t), axis=0)\n            f = np.expit(self.Wf.dot(concat) + self.bf)\n            i = np.expit(self.Wi.dot(concat) + self.bi)\n            c_tilde = np.tanh(self.Wc.dot(concat) + self.bc)\n            o = np.expit(self.Wo.dot(concat) + self.bo)\n            c_t = f * c_prev + i * c_tilde\n            h_t = o * np.tanh(c_t)\n            hidden_states.append(np.round(h_t, 4).reshape(-1).tolist())\n            h_prev = h_t\n            c_prev = c_t\n        final_h = np.round(h_prev, 4).reshape(-1).tolist()\n        final_c = np.round(c_prev, 4).reshape(-1).tolist()\n        return (hidden_states, final_h, final_c)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    N = len(corpus)\n    query_words = query\n    word_counts_list = []\n    for doc in corpus:\n        word_counts = {}\n        for word in doc:\n            word_counts[word] = word_counts.get(word, 0) + 1\n        word_counts_list.append(word_counts)\n    df_dict = {}\n    for word in query_words:\n        df = 0\n        for word_counts in word_counts_list:\n            if word in word_counts:\n                df += 1\n        df_dict[word] = df\n    result = []\n    for i in range(len(corpus)):\n        doc = corpus[i]\n        word_counts = word_counts_list[i]\n        doc_len = len(doc)\n        doc_scores = []\n        for word in query_words:\n            if doc_len == 0:\n                tf = 0.0\n            else:\n                count = word_counts.get(word, 0)\n                tf = count / doc_len\n            df = df_dict[word]\n            idf = np.log10((N + 1) / (df + 1))\n            tf_idf = tf * idf\n            rounded = round(tf_idf, 4)\n            doc_scores.append(rounded)\n        result.append(doc_scores)\n    return result"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denom_precision = tp + fp\n    precision = tp / denom_precision if denom_precision != 0 else 0.0\n    denom_recall = tp + fn\n    recall = tp / denom_recall if denom_recall != 0 else 0.0\n    numerator = (1 + beta ** 2) * precision * recall\n    denominator = beta ** 2 * precision + recall\n    if denominator == 0:\n        f = 0.0\n    else:\n        f = numerator / denominator\n    return round(f, 3)"}
{"task_id": 62, "completion_id": 0, "solution": ""}
{"task_id": 63, "completion_id": 0, "solution": ""}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    (unique, counts) = np.unique(y, return_counts=True)\n    total = len(y)\n    sum_sq = 0.0\n    for count in counts:\n        p = count / total\n        sum_sq += p ** 2\n    gini = 1 - sum_sq\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        non_zero = []\n        cols = []\n        for (idx, val) in enumerate(row):\n            if val != 0:\n                non_zero.append(val)\n                cols.append(idx)\n        count = len(non_zero)\n        row_pointers.append(row_pointers[-1] + count)\n        values.extend(non_zero)\n        col_indices.extend(cols)\n    return (values, col_indices, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((x * y for (x, y) in zip(v, L)))\n    squared_magnitude = sum((x ** 2 for x in L))\n    t = dot_product / squared_magnitude\n    projection = [t * x for x in L]\n    return [round(num, 3) for num in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    rows = len(dense_matrix)\n    if rows == 0:\n        return ([], [], [0])\n    cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for j in range(cols):\n        for i in range(rows):\n            val = dense_matrix[i][j]\n            if val != 0:\n                values.append(val)\n                row_indices.append(i)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    mat = A.copy()\n    pivot_cols = []\n    current_row = 0\n    for col in range(n):\n        pivot_row = None\n        for r in range(current_row, m):\n            if abs(mat[r, col]) > 1e-10:\n                pivot_row = r\n                break\n        if pivot_row is None:\n            continue\n        mat[[current_row, pivot_row]] = mat[[pivot_row, current_row]]\n        pivot_cols.append(col)\n        for r in range(current_row + 1, m):\n            factor = mat[r, col] / mat[current_row, col]\n            mat[r, :] -= factor * mat[current_row, :]\n        current_row += 1\n        if current_row >= m:\n            break\n    basis = A[:, pivot_cols]\n    basis = np.round(basis, 8)\n    return basis.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y = np.mean(y_true)\n    tss = np.sum((y_true - mean_y) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    if tss == 0:\n        if np.all(y_pred == y_true):\n            return 1.0\n        else:\n            return 0.0\n    else:\n        r_sq = 1 - rss / tss\n        return round(r_sq, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    for row in img:\n        if not row:\n            return -1\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total = 0\n    count = 0\n    for row in img:\n        total += sum(row)\n        count += len(row)\n    average = total / count\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not (isinstance(y_true, (list, np.ndarray)) and isinstance(y_pred, (list, np.ndarray))):\n        raise ValueError('Invalid input type. y_true and y_pred must be lists or numpy arrays.')\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if not (np.issubdtype(y_true.dtype, np.number) and np.issubdtype(y_pred.dtype, np.number)):\n        raise ValueError('y_true and y_pred must contain numeric values.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    if y_true.size == 0:\n        raise ValueError('y_true and y_pred cannot be empty.')\n    squared_diff = (y_true - y_pred) ** 2\n    mean_squared = np.mean(squared_diff)\n    rmse_value = np.sqrt(mean_squared)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    union = np.sum(y_true | y_pred)\n    if union == 0:\n        return 1.0\n    else:\n        jaccard = intersection / union\n        return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    denominator = sum_true + sum_pred\n    if denominator == 0:\n        return 1.0\n    else:\n        dice = 2 * intersection / denominator\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n\n    def generate_hv(seed, dim):\n        rng = np.random.RandomState(seed)\n        return rng.choice([-1, 1], size=dim)\n    composite_hv = np.zeros(dim)\n    for (key, value) in row.items():\n        name_hv = generate_hv(0, dim)\n        value_seed = random_seeds[key]\n        value_hv = generate_hv(value_seed, dim)\n        bound_hv = name_hv * value_hv\n        composite_hv += bound_hv\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    unique_labels = sorted({y for pair in data for y in pair})\n    if len(unique_labels) != 2:\n        raise ValueError('Data must be binary classification')\n    counts = Counter()\n    for (y_true, y_pred) in data:\n        counts[y_true, y_pred] += 1\n    matrix = []\n    for true_label in unique_labels:\n        row = []\n        for pred_label in unique_labels:\n            row.append(counts.get((true_label, pred_label), 0))\n        matrix.append(row)\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    counts = Counter(zip(actual, predicted))\n    TN = counts.get((0, 0), 0)\n    FP = counts.get((0, 1), 0)\n    FN = counts.get((1, 0), 0)\n    TP = counts.get((1, 1), 0)\n    confusion_matrix = [[TN, FP], [FN, TP]]\n    total = TN + FP + FN + TP\n    accuracy = (TP + TN) / total if total != 0 else 0.0\n    accuracy = round(accuracy, 3)\n    precision = TP / (TP + FP) if TP + FP != 0 else 0.0\n    recall = TP / (TP + FN) if TP + FN != 0 else 0.0\n    if precision + recall == 0:\n        f1_score = 0.0\n    else:\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    f1_score = round(f1_score, 3)\n    specificity = TN / (TN + FP) if TN + FP != 0 else 0.0\n    specificity = round(specificity, 3)\n    npv = TN / (TN + FN) if TN + FN != 0 else 0.0\n    npv = round(npv, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = np.mode(data).mode[0]\n    variance = np.var(data)\n    std_dev = np.std(data)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = percentiles[2] - percentiles[0]\n    mean = round(mean, 4)\n    median = round(median, 4)\n    variance = round(variance, 4)\n    std_dev = round(std_dev, 4)\n    p25 = round(percentiles[0], 4)\n    p50 = round(percentiles[1], 4)\n    p75 = round(percentiles[2], 4)\n    iqr = round(iqr, 4)\n    result = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': std_dev, '25th_percentile': p25, '50th_percentile': p50, '75th_percentile': p75, 'interquartile_range': iqr}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf = 1 / denominator * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    return max_val - min_val"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "def phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    return [[round(x ** d, 8) for d in range(degree + 1)] for x in data]"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros(d_model, dtype=np.float64)\n    for j in range(d_model):\n        if j % 2 == 0:\n            i = j // 2\n            exponent = 2 * i / d_model\n            denominator = 10000 ** exponent\n            pe[j] = np.sin(position / denominator)\n        else:\n            i = (j - 1) // 2\n            exponent = 2 * i / d_model\n            denominator = 10000 ** exponent\n            pe[j] = np.cos(position / denominator)\n    pe = pe.astype(np.float16)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": ""}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    if len(token_ids) > hparams['n_ctx']:\n        token_ids = token_ids[-hparams['n_ctx']:]\n\n    def layer_norm(x, gamma, beta, epsilon=1e-05):\n        mean = x.mean(axis=-1, keepdims=True)\n        std = x.std(axis=-1, keepdims=True)\n        x_norm = (x - mean) / (std + epsilon)\n        return x_norm * gamma + beta\n    for _ in range(n_tokens_to_generate):\n        current_sequence = token_ids[-hparams['n_ctx']:] if len(token_ids) > hparams['n_ctx'] else token_ids\n        seq_len = len(current_sequence)\n        positions = np.arange(seq_len)\n        x = params['wte'][current_sequence]\n        pos_embeddings = params['wpe'][positions]\n        embeddings = x + pos_embeddings\n        ln_output = layer_norm(embeddings, params['ln_f']['g'], params['ln_f']['b'])\n        logits = ln_output @ params['wte'].T\n        last_logits = logits[-1]\n        next_token_id = np.argmax(last_logits)\n        token_ids.append(next_token_id)\n    generated_text = encoder.decode(token_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    V = np.array(crystal_values)\n    d = dimension\n    scores = V[:, None] * V[None, :] / np.sqrt(d)\n    weights = np.zeros_like(scores)\n    for i in range(n):\n        weights[i] = softmax(scores[i])\n    output = np.dot(weights, V)\n    return [round(x, 4) for x in output]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    processed_corpus = []\n    doc_freq = Counter()\n    doc_lengths = []\n    for doc in corpus:\n        words = doc.lower().split()\n        doc_lengths.append(len(words))\n        word_counts = Counter(words)\n        processed_corpus.append(word_counts)\n        for word in word_counts:\n            doc_freq[word] += 1\n    avgdl = np.mean(doc_lengths) if doc_lengths else 0\n    query_words = query.lower().split()\n    scores = []\n    for (i, doc_counts) in enumerate(processed_corpus):\n        score = 0.0\n        doc_length = doc_lengths[i]\n        denominator_part = k1 * (1 - b + b * (doc_length / avgdl)) if avgdl != 0 else 0\n        for word in query_words:\n            if word not in doc_counts:\n                continue\n            tf = doc_counts[word]\n            df = doc_freq[word]\n            n = len(corpus)\n            numerator = (k1 + 1) * tf\n            denominator = denominator_part + tf\n            term1 = numerator / denominator if denominator != 0 else 0\n            term2 = np.log((n - df + 0.5) / (df + 0.5)) if df + 0.5 != 0 else 0\n            score += term1 * term2\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    TP = 0\n    FP = 0\n    FN = 0\n    for (yt, yp) in zip(y_true, y_pred):\n        if yt == 1 and yp == 1:\n            TP += 1\n        elif yt == 0 and yp == 1:\n            FP += 1\n        elif yt == 1 and yp == 0:\n            FN += 1\n    if TP + FP == 0:\n        precision = 0.0\n    else:\n        precision = TP / (TP + FP)\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for j in range(10):\n        i = j + 1\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[j] - fluctuation\n        detrended_data.append(detrended)\n    x = list(range(1, 11))\n    y = detrended_data\n    x_mean = sum(x) / len(x)\n    y_mean = sum(y) / len(y)\n    numerator = 0.0\n    denominator = 0.0\n    for (xi, yi) in zip(x, y):\n        numerator += (xi - x_mean) * (yi - y_mean)\n        denominator += (xi - x_mean) ** 2\n    b = numerator / denominator\n    a = y_mean - b * x_mean\n    predicted_base = a + b * 15\n    i_15 = 15\n    fluctuation_15 = 10 * math.sin(2 * PI * i_15 / 10)\n    total = predicted_base + fluctuation_15\n    rounded_total = round(total)\n    safety = rounded_total * 1.05\n    final = math.ceil(safety)\n    return final"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return round(np.mean(np.abs(y_true - y_pred)), 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    d_k = Q.shape[1]\n    head_dim = d_k // n_heads\n    Q_heads = np.split(Q, n_heads, axis=1)\n    K_heads = np.split(K, n_heads, axis=1)\n    V_heads = np.split(V, n_heads, axis=1)\n    head_outputs = []\n    for (q, k, v) in zip(Q_heads, K_heads, V_heads):\n        dot_product = np.sum(q * k, axis=1, keepdims=True) / np.sqrt(head_dim)\n        scores = np.exp(dot_product - np.max(dot_product, axis=-1, keepdims=True))\n        scores = scores / np.sum(scores, axis=-1, keepdims=True)\n        output = scores * v\n        head_outputs.append(output)\n    output = np.concatenate(head_outputs, axis=1)\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 95, "completion_id": 0, "solution": "import math\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('x and y must be of the same length')\n    a = b = c = d = 0\n    for (xi, yi) in zip(x, y):\n        if xi == 1 and yi == 1:\n            a += 1\n        elif xi == 1 and yi == 0:\n            b += 1\n        elif xi == 0 and yi == 1:\n            c += 1\n        else:\n            d += 1\n    numerator = a * d - b * c\n    denominator = math.sqrt((a + b) * (c + d) * (a + c) * (b + d))\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return (x + 2.5) / 5.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to four decimal places\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x < 0:\n        return alpha * x\n    else:\n        return x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -20:\n        return 0.0\n    else:\n        result = math.log(1 + math.exp(x))\n        return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to four decimal places.\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    part1 = np.mean(clipped_rhos * A)\n    pi_theta = rhos * pi_theta_old\n    kl = np.sum(pi_theta * np.log(pi_theta / pi_theta_ref))\n    objective = part1 - beta * kl\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    result = x * sigmoid\n    return round(result, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to four decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (m, n) = X.shape\n    X = np.hstack((np.ones((m, 1)), X))\n    y = y.flatten()\n    k = len(np.unique(y))\n    y_onehot = np.eye(k)[y]\n    B = np.random.randn(n + 1, k) * 0.01\n    losses = []\n    for _ in range(iterations):\n        Z = X @ B\n        Z = Z - np.max(Z, axis=1, keepdims=True)\n        exp_Z = np.exp(Z)\n        A = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n        epsilon = 1e-15\n        A_clipped = np.clip(A, epsilon, 1 - epsilon)\n        loss = -np.mean(np.sum(y_onehot * np.log(A_clipped), axis=1))\n        losses.append(round(loss, 4))\n        grad = X.T @ (A - y_onehot) / m\n        B = B - learning_rate * grad\n    B_flat = B.flatten().round(4).tolist()\n    return (B_flat, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X_new = np.hstack((np.ones((X.shape[0], 1)), X))\n    (m, n) = X_new.shape\n    weights = np.zeros((n, 1))\n    losses = []\n    for _ in range(iterations):\n        z = X_new @ weights\n        a = 1 / (1 + np.exp(-z))\n        y_reshaped = y.reshape(-1, 1)\n        loss = -1 / m * np.sum(y_reshaped * np.log(a) + (1 - y_reshaped) * np.log(1 - a))\n        losses.append(round(loss, 4))\n        gradient = X_new.T @ (a - y_reshaped) / m\n        weights = weights - learning_rate * gradient\n    weights = np.round(weights, 4)\n    weights_list = weights.flatten().tolist()\n    return (losses, weights_list)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.einsum('bik, bjk -> bij', Q, K)\n    d_k = K.shape[-1]\n    scores = scores / np.sqrt(d_k)\n    mask = mask.astype(scores.dtype)\n    scores = scores + (1 - mask) * -1000000000.0\n    attention_weights = np.exp(scores)\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.einsum('bij, bjk -> bik', attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    counts = Counter(apples)\n    total = len(apples)\n    entropy = 0.0\n    for count in counts.values():\n        p = count / total\n        entropy += p * math.log2(p)\n    entropy = -entropy\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=2, keepdims=True)\n    var = ((X - mean) ** 2).mean(axis=2, keepdims=True)\n    denominator = np.sqrt(var + epsilon)\n    normalized = (X - mean) / denominator\n    output = gamma * normalized + beta\n    return output.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.split()\n    can_tokens = candidate.split()\n    ref_counts = Counter(ref_tokens)\n    can_counts = Counter(can_tokens)\n    matches = 0\n    for word in ref_counts:\n        if word in can_counts:\n            matches += min(ref_counts[word], can_counts[word])\n    len_ref = len(ref_tokens)\n    len_can = len(can_tokens)\n    precision = matches / len_can if len_can != 0 else 0.0\n    recall = matches / len_ref if len_ref != 0 else 0.0\n    beta_sq = beta ** 2\n    if beta_sq * precision + recall == 0:\n        f = 0.0\n    else:\n        f = (1 + beta_sq) * precision * recall / (beta_sq * precision + recall)\n\n    def lcs(a, b):\n        m = len(a)\n        n = len(b)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif a[i - 1] == b[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n    lcs_length = lcs(ref_tokens, can_tokens)\n    if matches == 0:\n        penalty = 0.0\n    else:\n        penalty = gamma * (1 - lcs_length / matches)\n    if f == 0:\n        score = 0.0\n    else:\n        score = f * (1 - penalty)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    ratio = joint_counts * total_samples / (total_counts_x * total_counts_y)\n    pmi = np.log(ratio)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    if max_val == min_val:\n        return [0.0 for _ in x]\n    normalized = [(num - min_val) / (max_val - min_val) for num in x]\n    return [round(num, 4) for num in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    y1 = x.dot(w1)\n    y1_relu = np.maximum(y1, 0)\n    y2 = y1_relu.dot(w2)\n    y_add = y2 + x\n    y_final = np.maximum(y_add, 0)\n    return y_final.round(4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    return x.mean(axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=(0, 2, 3))\n    var = X.var(axis=(0, 2, 3))\n    normalized = (X - mean) / np.sqrt(var + epsilon)\n    output = gamma * normalized + beta\n    return np.round(output, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    if n == 0:\n        return round(0.0, 4)\n    else:\n        derivative = c * n * x ** (n - 1)\n        return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        current = np.array(v)\n        for e in basis:\n            proj = current.dot(e) * e\n            current -= proj\n        norm = np.linalg.norm(current)\n        if norm > tol:\n            e = current / norm\n            basis.append(e)\n    rounded_basis = [np.round(vec, 4).tolist() for vec in basis]\n    return rounded_basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    cross = np.cross(a, b)\n    cross_rounded = np.round(cross, 4)\n    return cross_rounded.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    n = A.shape[0]\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    product = np.multiply(p, q)\n    sqrt_product = np.sqrt(product)\n    sum_sqrt = np.sum(sqrt_product)\n    ln_sum = np.log(sum_sqrt)\n    distance = -ln_sum\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": ""}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense = n_experts * d_in * d_out\n    moe = k_active * d_in * d_out + d_in * n_experts + d_out * k_active\n    if dense == 0:\n        return 0.0\n    savings = (dense - moe) / dense * 100\n    return round(savings, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    initial_logits = np.dot(X, W_g)\n    noise_term = W_noise * N\n    noisy_logits = initial_logits + noise_term\n    for i in range(noisy_logits.shape[0]):\n        row = noisy_logits[i]\n        topk_indices = np.argpartition(row, -k)[-k:]\n        mask = np.zeros_like(row)\n        mask[topk_indices] = 1\n        noisy_logits[i] = row * mask + (1 - mask) * -1000000000.0\n\n    def softmax(x):\n        exp_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n        return exp_x / np.sum(exp_x, axis=1, keepdims=True)\n    probs = softmax(noisy_logits)\n    probs = np.round(probs, decimals=4)\n    return probs.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    g = x.dot(Wg)\n    exp_g = np.exp(g - np.max(g, axis=1, keepdims=True))\n    p = exp_g / np.sum(exp_g, axis=1, keepdims=True)\n    indices = np.argsort(-p, axis=1)[:, :top_k]\n    E = x.dot(We)\n    batch_size = x.shape[0]\n    selected_E = E[np.arange(batch_size)[:, None], indices]\n    selected_p = p[np.arange(batch_size)[:, None], indices]\n    sum_p = selected_p.sum(axis=1, keepdims=True)\n    normalized_p = selected_p / sum_p\n    normalized_p = normalized_p[:, :, None]\n    output = (selected_E * normalized_p).sum(axis=1)\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    G = C // num_groups\n    X_grouped = X.reshape(B, num_groups, G, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_grouped = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_grouped.reshape(B, C, H, W)\n    out = gamma * X_normalized + beta\n    out = np.round(out, decimals=4)\n    return out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for _ in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        if abs(gradient) < tolerance:\n            break\n        x_new = x - learning_rate * gradient\n        change = abs(x_new - x)\n        if change < tolerance:\n            x = x_new\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    scaled_x = alpha * x\n    tanh_x = np.tanh(scaled_x)\n    result = gamma * tanh_x + beta\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
