{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Given an ndarray where the last column is the target $\\\\mathbf y$ and all preceding columns are the features $\\\\mathbf X$, add a bias (intercept) term, then compute the weight vector\n\n    $$\\\\hat\\\\mathbf w=(\\\\mathbf X^\top\\\\mathbf X+\\x07lpha\\\\,\\\\mathbf I)^{-1}\\\\,\\\\mathbf X^\top\\\\mathbf y,$$\n\n    where $\\x07lpha\\\\ge 0$ is the regularisation strength and $\\\\mathbf I$ is the identity matrix with a size equal to the number of columns in $\\\\mathbf X$ (after adding the bias).  \n\n    If the matrix $(\\\\mathbf X^\top\\\\mathbf X+\\x07lpha\\\\,\\\\mathbf I)$ is not invertible (numerical determinant equal to 0), return **-1**.  \n\n    Return the weight vector rounded to **4 decimal places** as a Python list.\n    \"\"\"\n    X_with_bias = np.hstack((data[:, :-1], np.ones(data.shape[1])))\n    inverse_matrix = np.linalg.inv(X_with_bias.T @ X_with_bias + alpha * np.eye(X_with_bias.shape[1]))\n    weight_vector = inverse_matrix @ X_with_bias.T @ data[:, -1]\n    weight_vector_rounded = round(weight_vector, 4)\n    return weight_vector_rounded.tolist()"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(n_iter):\n        for i in range(n_samples):\n            activation = np.dot(X_train[i], w) + b\n            if activation <= 0:\n                alpha = eta * activation + b\n                w -= alpha * X_train[i]\n                b += alpha * y_train[i]\n            else:\n                break\n        if np.allclose(w, w_old):\n            break\n        w_old = w.copy()\n    return (w.tolist(), b)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    identity = lambda x: x\n    log = lambda x: np.log(x)\n    logit = lambda x: np.log(x / (1 - x))\n    return {'identity': identity, 'log': log, 'logit': logit}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    depths = [0] * data.shape[0]\n\n    def build_tree(data, current_depth=0, parent=None):\n        if len(data) == 0:\n            return\n        down = min(data[:, 0])\n        up = max(data[:, 0])\n        f = np.random.randint(len(data[0]))\n        v = np.random.uniform(down, up)\n        build_tree(data[data[:, 0] <= v], current_depth + 1, f)\n        build_tree(data[data[:, 0] > v], current_depth + 1, f)\n    build_tree(data)\n    return depths"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    item_counts = {}\n    for transaction in transactions:\n        item_set = set(transaction)\n        item_counts[item_set] = item_counts.get(item_set, 0) + 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= minsup}\n    return frequent_items\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    if k <= 1:\n        raise ValueError('Number of clusters must be at least 2.')\n    centroids = data[:k]\n    assignments = np.argmin(np.square(data - centroids), axis=1)\n    while True:\n        new_centroids = []\n        for i in range(k):\n            closest_centroid = np.argmin(np.square(data[i] - centroids))\n            new_centroids.append(data[i])\n            assignments[closest_centroid] = i\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    return (centroids, assignments)\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nk = 3"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    if not np.any(data[user_ind, :]):\n        return []\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            if data[i, j] > 0:\n                S[i, j] = 1\n                S[j, i] = 1\n    if criterion == 'cosine':\n        for i in range(n_item):\n            if S[i, i] == 0:\n                continue\n            S[i, :] /= np.sqrt(np.sum(S[i, :]))\n    if criterion == 'pearson':\n        scores = np.dot(S, data)\n        for i in range(n_item):\n            if S[i, i] == 0:\n                continue\n            scores[i] /= np.sqrt(np.sum(S[i, :]))\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    predicted_attractiveness = np.dot(scores, unrated_items.T)\n    unrated_items_with_same_score = unrated_items[np.argsort(predicted_attractiveness)[::-1]]\n    return unrated_items_with_same_score[:k]\ndata = np.array([[0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 0, 0, 1, 0]])\nuser_ind = 2\nk = 3"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximize the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_split = None\n    for feature in range(n_features):\n        for i in range(n_samples):\n            contribution = np.dot(X[:, feature], g) + np.dot(X[:, feature], h)\n            potential_gain = -contribution ** 2 / (n_samples + lam)\n            if potential_gain > best_gain:\n                best_gain = potential_gain\n                best_split = (feature, contribution)\n    return best_split\nX = np.array([[1, 2], [3, 4], [5, 6]])\ng = np.array([0.1, 0.2, 0.3])\nh = np.array([0.1, 0.2, 0.3])\nlam = 0.1"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * sigmoid_x\n    return (round(sigmoid_x, 4), round(gradient_x, 4))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"\n    Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    n_features = len(x_train[0])\n    weights = np.ones(n_samples)\n    for i in range(n_samples):\n        midpoint = (x_train[i] + x_train[(i + 1) % n_samples]) / 2\n        best_stump = None\n        best_error = float('inf')\n        for d in [0, 1]:\n            threshold = midpoint - (1 - d) * (x_train[i] - midpoint)\n            weighted_error = sum(weights[i] * (1 - math.exp(-(x_train[i] - threshold) / (threshold + 1))))\n            if weighted_error < best_error:\n                best_stump = (d, threshold)\n                best_error = weighted_error\n        for j in range(n_samples):\n            if weights[j] == 0:\n                weights[j] = 1\n            else:\n                weights[j] /= sum(weights)\n    predictions = []\n    for x_test_point in x_test:\n        if best_stump[0] == 0:\n            predictions.append(1 if x_test_point <= best_stump[1] else -1)\n        else:\n            predictions.append(sign(best_stump[0] * x_test_point + best_stump[1]))\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    distances = np.linalg.norm(X_test, axis=1)\n    weights = np.exp(-gamma * distances ** 2)\n    y_pred = np.sum(alpha * y_train * weights, axis=1)\n    predicted_labels = y_pred + b\n    return predicted_labels\nX_train = np.array([[1, 2], [3, 4], [5, 6]])\ny_train = np.array([-1, -1, 1])\nalpha = np.array([1, 1, 1])\nb = 0\ngamma = 1\nX_test = np.array([[7, 8], [9, 10]])\npredicted_labels = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(X, list):\n        raise ValueError('Input X must be a list of lists.')\n    if not isinstance(k, int) or k < 1 or k > min(len(X), len(X[0])):\n        return -1\n    (m, n) = (len(X), len(X[0]))\n    (U, S, V) = np.linalg.svd(X)\n    k_indices = np.argsort(S)[-k:]\n    k_singular_values = S[k_indices]\n    (U_truncated, S_truncated, V_truncated) = np.linalg.svd(U[:, k_indices])\n    X_hat = np.dot(V_truncated, U_truncated.T)\n    mse = np.mean((X - X_hat) ** 2)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    n_features = len(x_train)\n    split_points = np.linspace(min(x_train), max(x_train), n_features - 1)\n    ensemble = []\n    current_residual_sum = 0\n    for s in split_points:\n        c1 = np.mean(y_train[x_train <= s])\n        c2 = np.mean(y_train[x_train > s])\n        current_residual_sum += c1 ** 2 + c2 ** 2\n        ensemble.append((s, c1, c2))\n    target = sum((c1 * x_query <= s for (s, c1, c2) in ensemble))\n    return round(target, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The shape of the tensor to generate.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int | None): A seed for reproducibility.\n\n    Returns:\n    numpy.ndarray: A NumPy array containing only the float values 0.0 and 1.0.\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.zeros(shape)\n    for i in range(tensor.shape[0]):\n        for j in range(tensor.shape[1]):\n            if np.random.uniform() < sparsity:\n                tensor[i, j] = 1.0\n            else:\n                tensor[i, j] = 0.0\n    return tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_index = np.argpartition(data[:, d], 0)[1]\n    if data.shape[0] % 2 == 1:\n        left = [median_index]\n        right = []\n    else:\n        left = [median_index - 1, median_index]\n        right = [median_index + 1]\n    return (median_index, left, right)\ndata = np.array([[1, 2], [4, 5], [3, 6], [7, 8]])\nd = 1"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if len(x) < 1:\n        raise ValueError('Input must be a one-dimensional array.')\n    if stride < 1:\n        raise ValueError('Stride must be greater than 0.')\n    if len(x) < frame_width:\n        raise ValueError('Length of the input signal must be at least frame_width.')\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_array = x[::stride]\n    return frame_array.view()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    elif not isinstance(X, np.ndarray):\n        raise ValueError('Input must be a list of lists or a NumPy array.')\n    if not np.allclose(X, np.arange(0, 1), atol=1e-08):\n        return False\n    if not np.isclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> List[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n = X.shape[0]\n    d = X.shape[1]\n    s = np.zeros(d)\n    w = np.zeros(d)\n    epoch = 0\n    while epoch < max_iter:\n        g = np.dot(X.T, X * w - y)\n        s = rho * s + (1 - rho) * np.square(g)\n        w -= eta / np.sqrt(s + eps_station) * g\n        if np.linalg.norm(g) < epsilon:\n            break\n        epoch += 1\n    return round(w, 4)\nX = np.array([[1, 2], [3, 4]])\ny = np.array([5, 6])"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    if isinstance(x, (int, float)):\n        return np.log1p(x)\n    if not isinstance(x, (list, np.ndarray)):\n        raise TypeError('Input must be a scalar, list, or NumPy array.')\n    if isinstance(x, list):\n        return np.piecewise(x < -10, [x, x * 1 / (1 + np.exp(-x))], [x * 1 / (1 + np.exp(-x)), 0])\n    if isinstance(x, np.ndarray):\n        return np.piecewise(x < -10, [x, x * 1 / (1 + np.exp(-x))], [x * 1 / (1 + np.exp(-x)), 0])\n    raise ValueError('Input must be a scalar, list, or NumPy array.')"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    ngram_counts = Counter()\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        ngram_counts[ngram] += 1\n    log_probabilities = []\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        window_count = ngram_counts[ngram]\n        if window_count == 0:\n            return float('-inf')\n        log_probabilities.append(np.log(window_count))\n    total_log_prob = np.sum(log_probabilities)\n    return round(total_log_prob, 4)\nsequence = ['apple', 'banana', 'orange']\nN = 2"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.optimize import minimize\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(y, list):\n        raise ValueError('Inputs must be lists.')\n    if not isinstance(degree, int) or degree < 1:\n        raise ValueError('Degree must be a positive integer.')\n    if not isinstance(reg_factor, (float, int)):\n        raise ValueError('Regularization factor must be either a float or an integer.')\n    if not isinstance(n_iterations, int) or n_iterations < 1:\n        raise ValueError('Number of iterations must be a positive integer.')\n    if not isinstance(tol, (float, int)):\n        raise ValueError('Tolerance must be either a float or an integer.')\n    X = np.array(X)\n    y = np.array(y)\n    design_matrix = np.hstack((np.ones(X.shape[0], 1), X))\n\n    def objective(weights):\n        predictions = np.dot(design_matrix, weights)\n        loss = 0.5 * np.sum((predictions - y) ** 2) + 0.5 * np.sum(np.abs(weights))\n        return loss\n    result = minimize(objective, initial_guess=[0], method='cohen', options={'maxiter': n_iterations, 'tol': tol})\n    learned_weights = result.x\n    learned_weights_rounded = [round(weight, 4) for weight in learned_weights]\n    return learned_weights_rounded"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \\\\(\\x08eta_t\\\\) for a given time index \\\\(t\\\\).\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: The backward probability vector \\\\(\\x08eta_t\\\\) rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    beta = np.zeros((N, len(obs)))\n    for j in range(N):\n        beta[j][0] = A[0][j] * B[obs[0]][obs[0]]\n    for i in range(1, N):\n        for j in range(N):\n            for k in range(N):\n                beta[i][j] += A[i][k] * B[k][obs[i]]\n    beta /= beta.sum(axis=1)\n    return beta.tolist()\nA = [[0.5, 0.7, 0.8], [0.6, 0.4, 0.3], [0.9, 0.2, 0.1]]\nB = [[0.3, 0.2, 0.1], [0.4, 0.3, 0.2], [0.5, 0.4, 0.3]]\nobs = [2, 1, 3]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    beta = np.zeros((N, len(obs)))\n    beta[0, :] = pi\n    for t in range(1, len(obs)):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j, obs[t - 1]] * beta[t - 1, j]\n    beta[-1, :] += pi * B[-1, obs[-1]]\n    total_probability = np.sum(beta[-1, :])\n    return round(total_probability, 6)\nA = [[0.7, 0.3], [0.5, 0.5]]\nB = [[0.4, 0.6], [0.3, 0.7]]\npi = [0.5, 0.5]\nobs = [2, 1]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    if len(S) != len(A) or len(S) != len(B) or len(observations) != len(A):\n        raise ValueError('Input dimensions must be equal.')\n    n = len(S)\n    m = len(B[0])\n    forward_probabilities = np.zeros((n, m))\n    forward_probabilities[0] = S\n    for observation in observations:\n        if observation < 0 or observation >= m:\n            return -1\n        current_state_probabilities = forward_probabilities[0]\n        for i in range(n):\n            current_state_probabilities[i] *= A[i][observation]\n        for j in range(m):\n            current_state_probabilities[j] += B[current_state_probabilities[j]][observation]\n        forward_probabilities[observation] = current_state_probabilities.sum()\n    return round(forward_probabilities[-1], 4)\nS = [0.5, 0.3, 0.2]\nA = [[0.7, 0.1, 0.2], [0.2, 0.6, 0.2], [0.1, 0.2, 0.5]]\nB = [[0.8, 0.2, 0.1], [0.1, 0.3, 0.2], [0.2, 0.1, 0.5]]\nobservations = [2, 1, 0]"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    def build_prefix_tree(items):\n        root = {}\n        for item in items:\n            current = root\n            for char in item:\n                if char not in current:\n                    current[char] = {}\n                current = current[char]\n            current['support'] = item_counts[item]\n        return root\n\n    def mine_conditional_frequent_trees(root, current_support, current_set):\n        if current_support < min_support:\n            return\n        if len(current_set) >= len(frequent_itemsets):\n            frequent_itemsets.append(current_set)\n            return\n        for next_char in current_set:\n            if next_char in root:\n                mine_conditional_frequent_trees(root[next_char], current_support + 1, current_set + [next_char])\n    root = build_prefix_tree(transactions[0])\n    mine_conditional_frequent_trees(root, 0, [])\n    return frequent_itemsets\ntransactions = [['apple', 'banana', 'cherry'], ['banana', 'date'], ['cherry', 'date'], ['date', 'elderberry'], ['elderberry', 'fig']]\nmin_support = 2"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    nearest_neighbors = [[] for _ in range(len(X_train))]\n    for i in range(len(X_train)):\n        for j in range(i + 1, len(X_train)):\n            distance = np.linalg.norm(np.array(X_train[i]) - np.array(X_train[j]))\n            nearest_neighbors[i].append((distance, y_train[i]))\n    nearest_neighbors.sort(key=lambda x: x[0])\n    predicted_labels = []\n    for i in range(len(X_test)):\n        min_distance = float('inf')\n        predicted_label = -1\n        for j in range(len(nearest_neighbors[i])):\n            (distance, label) = nearest_neighbors[i][j]\n            if distance < min_distance:\n                min_distance = distance\n                predicted_label = label\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    if len(y) != len(y_pred):\n        raise ValueError('The shapes of y and y_pred must be the same.')\n    for prob in y_pred:\n        if prob < 0 or prob > 1:\n            raise ValueError('All probabilities in y_pred must be between 0 and 1.')\n    loss = np.sum(-np.log(y_pred @ y))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import expit\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    A = np.dot(X, parameters['W1']) + parameters['b1']\n    Z = np.maximum(A, 0)\n    caches = []\n    for i in range(1, len(parameters)):\n        A_prev = Z\n        Z = np.maximum(np.dot(A_prev, parameters['W' + str(i)]), 0)\n        A = np.tanh(Z)\n        caches.append((A_prev, Z))\n    AL = np.tanh(Z)\n    AL_rounded = AL.round(4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    A2 = np.clip(A2, 1e-15, 1)\n    loss = np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(loss, 6)\nA2 = np.array([[0.8, 0.2], [0.7, 0.3]])\nY = np.array([0, 1])"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    a = np.argmax(Q)\n    p = np.where(Q == Q[a], 1 - epsilon, epsilon / n)\n    return [round(p[i], 4) for i in range(n)]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nn = 4"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    class_counts = []\n    for sample in predictions:\n        class_counts.append(Counter(sample))\n    max_votes = max(class_counts, key=lambda x: (-x[1], x[0]))\n    result = []\n    for sample in predictions:\n        result.append(max_votes[0])\n    return result\npredictions = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = [z]\n    softplus_values = np.logaddexp(0.0, z)\n    rounded_values = softplus_values.round(4)\n    if isinstance(z, list):\n        rounded_values = rounded_values.tolist()\n    return rounded_values"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy:\n        return np.nan\n    true_expected_payouts = np.array([bandit['arm_evs'][i] for i in range(len(bandit['arm_evs']))])\n    policy_estimates = np.array([policy['ev_estimates'][i] for i in range(len(policy['ev_estimates']))])\n    mse_value = np.mean((true_expected_payouts - policy_estimates) ** 2)\n    mse_value = round(mse_value, 4)\n    return mse_value\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    word_counts = Counter(corpus)\n    word_set = set(sequence.split())\n    total_log_prob = 0\n    for i in range(len(sequence) - N + 1):\n        ngram = sequence[i:i + N]\n        if ngram in word_set:\n            word_counts[ngram] += 1\n            prob = math.log(word_counts[ngram] / word_counts[word_set])\n            total_log_prob += prob\n    return round(math.log(total_log_prob), 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    if X.shape[0] != X.shape[1]:\n        raise ValueError('Input matrix must be square.')\n    W = np.random.rand(K, X.shape[1])\n    H = np.random.rand(K, X.shape[0])\n    for _ in range(max_iter):\n        loss = np.linalg.norm(X - W @ H) ** 2 / 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n        W -= alpha * (X - W @ H) / X.shape[0]\n        H -= alpha * (X - W @ H) / X.shape[1]\n    reconstructed_matrix = np.round(X, 4).tolist()\n    return reconstructed_matrix\nX = np.array([[1, 2], [3, 4]])\nK = 2\nalpha = 0.1\nmax_iter = 100\ntol = 1e-06\nreconstructed_matrix = als_factorization(X, K, alpha, max_iter, tol)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    if random_state is None:\n        random_state = np.random.randint(0, 10000)\n    if random_state is None:\n        centroids = np.random.rand(K, X.shape[1])\n    else:\n        centroids = X[:K]\n    for _ in range(max_iter):\n        cluster_assignments = np.argmin(np.linalg.norm(X - centroids, axis=1), axis=1)\n        new_centroids = np.zeros((K, X.shape[1]))\n        for i in range(K):\n            new_centroids[i] = np.mean(X[cluster_assignments == i], axis=0)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return [list(centroid) for centroid in sorted(centroids, key=lambda x: x[0], reverse=True)]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nK = 3"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer tokens ids.\"\"\"\n    padded_text = text + ' ' * (time_steps - len(text))\n    indices = [vocabulary[c] for c in padded_text]\n    return indices\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to text using an inverse vocabulary.\"\"\"\n    result = ''.join([inverse_vocab[i] for i in indices])\n    return result\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs example where the input text is processed.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    predictions = model.predict(encoded_text)\n    predicted_token = np.argmax(predictions, axis=-1)\n    decoded_text = int_to_string(predicted_token, inv_output_vocabulary)\n    return decoded_text"}
{"task_id": 113, "completion_id": 0, "solution": "from typing import *\nfrom collections import *\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction = model(example)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.astype(np.float32)\n    p = 1 / (1 + np.exp(-X.dot(w)))\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y)\n    gradient_list = gradient.tolist()\n    return (loss, gradient_list)\ny = np.array([1, 0])\nw = np.array([0.5, 0.3])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones(n_clf)\n    for _ in range(n_clf):\n        stump = min(X_train, key=lambda x: -weights[0] * np.sum(np.sign(x)))\n        weights *= np.exp(-stump.weight * X_train[:, np.newaxis])\n        predictions = np.sign(stump.predict(X_test[:, np.newaxis]))\n        predictions = np.concatenate((predictions, [0] * (len(X_test) - len(predictions))))\n    return predictions"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components < 1 or n_components > X.shape[1]:\n        return []\n    S_W = np.sum((X - np.mean(X, axis=0)) ** 2, axis=1)\n    S_W = np.linalg.inv(S_W)\n    N_c = np.sum(X[y == i] - np.mean(X[y == i], axis=0), axis=1)\n    S_B = N_c / X.shape[0]\n    A = np.dot(np.linalg.inv(S_W), S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_eigenvalues = np.sort(eigenvalues)[::-1]\n    result = []\n    for eigenvalue in sorted_eigenvalues:\n        if eigenvalue < 0:\n            eigenvalue *= -1\n        projected_sample = np.dot(eigenvectors[:, 0], X[y == i])\n        projected_sample = round(projected_sample, 4)\n        result.append(projected_sample)\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\nfrom collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque([(0, 0)])\n    visited[0][0] = True\n    fire_positions = []\n    while queue:\n        (x, y) = queue.popleft()\n        if x == n - 1 and y == n - 1:\n            return len(fire_positions)\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]):\n                visited[nx][ny] = True\n                queue.append((nx, ny))\n                if (nx, ny) not in fire_positions:\n                    fire_positions.append((nx, ny))\n    return -1\ngrid = [['.', '#', '.'], ['#', '#', '#'], ['.', '#', '.']]"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics.pairwise import euclidean_distances, manhattan_distances, cosine_similarity\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implement your code here.\n\n    :param X_train: Training features of shape (n_samples, n_features)\n    :param y_train: Training labels of shape (n_samples,)\n    :param X_test: Test features of shape (n_samples, n_features)\n    :param k: Number of nearest neighbors to consider\n    :param metric: Metric to use for distance calculation ('euclidean', 'manhattan', 'cosine')\n    :return: Predicted labels of shape (n_samples,)\n    \"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        raise ValueError(\"Invalid metric. Supported metrics are 'euclidean', 'manhattan', and 'cosine'.\")\n    distances = []\n    for x in X_test:\n        distances.append([euclidean_distances(x.reshape(1, -1), X_train)[0][0] for _ in range(k)])\n    sorted_indices = np.argsort(distances)[:k]\n    predicted_labels = [y_train[i] for i in sorted_indices]\n    return np.array(predicted_labels)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    distances = np.zeros((len(X_test), k))\n    votes = np.zeros(len(X_test))\n    for (i, x_test_sample) in enumerate(X_test):\n        for (j, x_train_sample) in enumerate(X):\n            if metric == 'euclidean':\n                distances[i, j] = np.sqrt(np.sum((x_test_sample - x_train_sample) ** 2))\n            elif metric == 'manhattan':\n                distances[i, j] = np.sum(abs(x_test_sample - x_train_sample))\n            else:\n                distances[i, j] = 1 - np.dot(x_test_sample, x_train_sample) / np.linalg.norm(x_test_sample) / np.linalg.norm(x_train_sample)\n    for (i, x_test_sample) in enumerate(X_test):\n        sorted_indices = np.argsort(distances[i])\n        k_nearest_labels = [y[j] for j in sorted_indices[:k]]\n        votes[i] = np.bincount(k_nearest_labels)\n    return votes.tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    if len(state) != weights['W1'].shape[0]:\n        raise ValueError(\"State vector must have the same number of elements as the first layer's input shape.\")\n    x1 = np.dot(state, weights['W1']) + weights['b1']\n    x2 = np.maximum(x1, 0)\n    x3 = np.dot(x2, weights['W2']) + weights['b2']\n    x4 = np.maximum(x3, 0)\n    action = np.tanh(x4)\n    return round(action, 4)\nweights = {'W1': np.array([[1, 2], [3, 4]]), 'b1': np.array([0.5, 0.7]), 'W2': np.array([[5, 6], [7, 8]]), 'b2': np.array([0.9, 1.1]), 'W3': np.array([[9, 10], [11, 12]]), 'b3': np.array([0.13, 0.14])}\nstate = np.array([1, 2])\naction = actor_forward(state, weights)"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"\n    Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights_list, bias_float) where weights_list is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    lambda_val = lambda_param\n    for _ in range(max_iters):\n        r_j = y - X.dot(weights)\n        weights -= lambda_val * np.sign(r_j) * np.maximum(np.abs(r_j), 0)\n        if np.linalg.norm(weights) < 1e-06:\n            break\n    return (weights.tolist(), bias)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"\n    Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    hamming_distance = sum((1 for (i, value) in enumerate(x) if value != y[i]))\n    return round(hamming_distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window == 'hamming':\n        return [0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1)) for i in range(N)]\n    elif window == 'hann':\n        return [0.5 - 0.5 * np.cos(2 * np.pi * i / (N - 1)) for i in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [a0 - a1 * np.cos(2 * np.pi * i / (N - 1)) + a2 * np.cos(4 * np.pi * i / (N - 1)) - a3 * np.cos(6 * np.pi * i / (N - 1)) for i in range(N)]\n    elif window == 'generalized_cosine':\n        coefficients = coefficients or [0.35875, 0.48829, 0.14128, 0.01168]\n        return [np.sum(coef * np.cos(2 * np.pi * i / (N - 1))) for i in range(N)]\n    else:\n        raise ValueError(f'Unsupported window: {window}')"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    n_classes = len(set(y_train))\n    X_train = np.hstack((np.ones(n_samples, 1), X_train))\n    weights = np.zeros(n_features + 1)\n    bias = 0\n    for epoch in range(epochs):\n        indices = np.random.choice(n_samples, batch_size)\n        predictions = np.dot(X_train[indices], weights) + bias\n        loss = -np.sum(y_train[indices] * np.log(predictions)) / n_samples\n        weights -= learning_rate * np.dot(X_train[indices], predictions - y_train[indices])\n        bias -= learning_rate * np.sum(predictions - y_train[indices])\n    y_pred = np.round(predictions)\n    return y_pred.tolist()\nX_train = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\ny_train = [0, 1, 0, 1]"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Implement the AdaBoost ensemble algorithm from scratch using decision stumps (one-level decision trees) as weak learners.\n\n    Parameters:\n    - X_train: A list of feature matrices X_train and labels y_train.\n    - y_train: A list of labels for the training data.\n    - X_test: A list of feature matrices X_test and labels for the test data.\n    - n_estimators: The number of decision stumps to train.\n\n    Returns:\n    - A list of integers representing the predicted class labels for X_test.\n    \"\"\"\n    weights = np.ones(n_estimators)\n    for _ in range(n_estimators):\n        sorted_indices = np.argsort(-weights)\n        sorted_thresholds = X_train[sorted_indices][:, 1]\n        best_stump = None\n        min_error = float('inf')\n        for (i, (feature_index, threshold, polarity)) in enumerate(zip(sorted_indices, sorted_thresholds, [-1, 1])):\n            error_t = np.sum(y_train != polarity * X_train[:, feature_index])\n            alpha_t = 0.5 * np.log((1 - error_t) / (error_t + 1e-10))\n            w_i = weights[i] * np.exp(-alpha_t * y_train[:, feature_index] * (polarity * X_train[:, feature_index]))\n            if w_i > 0:\n                normalised_weights = w_i / np.sum(w_i)\n                if error_t < min_error:\n                    min_error = error_t\n                    best_stump = (feature_index, threshold, polarity)\n        if best_stump:\n            weights[best_stump[0]] += alpha_t\n    predictions = []\n    for x_test in X_test:\n        sum_votes = np.sum([w * y_test[i] for (i, (feature_index, threshold, polarity)) in enumerate(best_stump)])\n        predictions.append(sum_votes >= 0)\n    return predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not isinstance(n_dims, int) or n_dims <= 0:\n        return -1\n    if not isinstance(num_particles, int) or num_particles <= 0:\n        return -1\n    if not isinstance(num_iterations, int) or num_iterations <= 0:\n        return -1\n    if not isinstance(seed, int):\n        seed = 1\n    rng = np.random.default_rng(seed)\n    swarm = []\n    for _ in range(num_particles):\n        x = rng.uniform(-1, 1, n_dims)\n        swarm.append(x)\n    best_x = swarm[0]\n    best_value = f(best_x)\n    for _ in range(num_iterations):\n        v = 0.5 * rng.uniform(0, 1) * (swarm[0] - best_x) + 0.5 * rng.uniform(0, 1) * (swarm[1] - best_x)\n        x = best_x + v\n        x = np.clip(x, -1, 1)\n        if f(x) < best_value:\n            best_x = x\n            best_value = f(x)\n    return best_value"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if task == 'classification':\n        distances = np.linalg.norm(X_test - X_train, axis=1)\n        sorted_indices = np.argsort(distances)\n        k_nearest_train = [X_train[i] for i in sorted_indices[:k]]\n        label_counts = Counter(y_train[k_nearest_train])\n        if len(label_counts) > 1:\n            most_common_label = max(label_counts, key=label_counts.get)\n        else:\n            most_common_label = min(label_counts, key=label_counts.get)\n        return [most_common_label]\n    elif task == 'regression':\n        average_targets = np.mean(X_test, axis=1)\n        rounded_average_targets = [round(target, 4) for target in average_targets]\n        return rounded_average_targets\n    else:\n        raise ValueError(\"Task must be 'classification' or 'regression'.\")\nX_train = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ny_train = [1, 2, 2, 3]\nX_test = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef calculate_gini_impurity(X, y):\n    \"\"\"\n    Calculate the Gini impurity of a single feature.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Class labels for the feature data, shape (n_samples,).\n    \n    Returns\n    -------\n    float\n        Gini impurity of the feature.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    gini = 0\n    for i in range(n_features):\n        unique_values = np.unique(X[:, i])\n        for value in unique_values:\n            p_value = np.mean(X[X[:, i] == value])\n            gini += p_value ** 2 * (1 - p_value)\n    return gini / n_samples\ndef split_feature(X, y, feature_index):\n    \"\"\"\n    Split the feature space into two subsets based on the Gini impurity criterion.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Class labels for the feature data, shape (n_samples,).\n    feature_index : int\n        Index of the feature to split on.\n    \n    Returns\n    -------\n    tuple\n        A tuple containing the left and right subsets.\n    \"\"\"\n    sorted_indices = np.argsort(X[:, feature_index])\n    left_indices = sorted_indices[:int(n_samples // 2)]\n    right_indices = sorted_indices[int(n_samples // 2):]\n    left_data = X[left_indices]\n    left_labels = y[left_indices]\n    right_data = X[right_indices]\n    right_labels = y[right_indices]\n    return (left_data, left_labels, right_data, right_labels)\ndef find_best_split(X, y, max_depth=None):\n    \"\"\"\n    Find the best split for the given feature space.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Class labels for the feature data, shape (n_samples,).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n    \n    Returns\n    -------\n    tuple\n        A tuple containing the best feature index and split threshold.\n    \"\"\"\n    if max_depth is None:\n        max_depth = np.inf\n    best_gini = float('-inf')\n    best_split = None\n    for feature_index in range(X.shape[1]):\n        (left_data, left_labels, right_data, right_labels) = split_feature(X, y, feature_index)\n        if len(left_labels) == 1:\n            continue\n        gini_left = calculate_gini_impurity(left_data, left_labels)\n        gini_right = calculate_gini_impurity(right_data, right_labels)\n        if gini_left > gini_right:\n            best_gini = gini_left\n            best_split = (feature_index, left_data, left_labels)\n        elif gini_left < gini_right:\n            best_gini = gini_right\n            best_split = (feature_index, right_data, right_labels)\n    return best_split\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"\n    Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n    \n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    if max_depth is None:\n        max_depth = np.inf\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    root = {'value': None, 'left': None, 'right': None, 'depth': 0}\n\n    def traverse(node):\n        if node['depth'] >= max_depth:\n            return node['value']\n        best_split = find_best_split(X_train, y_train, node['depth'])\n        (feature_index, left_data, left_labels, right_data, right_labels) = best_split\n        left_node = traverse({'value': left_data[best_split[1]], 'left': left_data[:best_split[1]], 'right': left_data[best_split[1] + 1]})\n        right_node = traverse({'value': right_data[best_split[1]], 'left': right_data[:best_split[1]], 'right': right_data[best_split[1] + 1]})\n        return max(left_node['value'], right_node['value'])\n    return traverse(root)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = float('inf')\n    for j in range(n_features):\n        for v in np.unique(X[:, j]):\n            left = X[X[:, j] <= v]\n            right = X[X[:, j] > v]\n            if not left.size or not right.size:\n                continue\n            G_left = 1 - sum((y == k).sum() / n_samples) ** 2\n            G_right = 1 - sum((y != k).sum() / n_samples) ** 2\n            if G_left < best_gini:\n                best_gini = G_left\n                best_feature_index = j\n                best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ny = [0, 1, 0]"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        return -1\n\n    def d(x, y):\n        if len(x) != len(y):\n            return -1\n        if name == 'euclidean':\n            return np.sqrt(np.sum((x - y) ** 2))\n        elif name == 'manhattan':\n            return np.sum(abs(x - y))\n        elif name == 'chebyshev':\n            return np.max(abs(x - y))\n        elif name == 'cosine':\n            if np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n                return -1\n            return 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    n_actions_per_dim = []\n    if md_action:\n        for i in range(env.action_space.shape[0]):\n            n_actions_per_dim.append(np.inf)\n    elif cont_action:\n        n_actions_per_dim = [len(range(env.action_space.shape[i])) for i in range(env.action_space.shape[0])]\n    if not n_actions_per_dim:\n        action_ids = None\n    else:\n        action_ids = tuple(action_ids)\n    return (n_actions_per_dim, action_ids, len(env.action_space.shape))\nmd_action = True\ncont_action = False"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    phi_normalized = [np.divide(row, np.sum(row)) for row in phi]\n    row_sums = np.sum(phi_normalized, axis=1)\n    if not np.allclose(row_sums, 1):\n        raise ValueError('The row sums of the normalized probability vectors do not sum to 1.')\n    beta_rounded = [[round(prob, 4) for prob in row] for row in phi_normalized]\n    return beta_rounded\nphi = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = X[:k]\n    while True:\n        closest_non_medoids = []\n        for sample in X:\n            for medoid in medoids:\n                if sample != medoid:\n                    dist = np.linalg.norm(sample - medoid)\n                    closest_non_medoids.append((dist, sample))\n        closest_non_medoids.sort()\n        if len(closest_non_medoids) == 0:\n            break\n        closest_non_medoid = closest_non_medoids.pop(0)\n        medoids.append(closest_non_medoid[1])\n    labels = [i for i in range(k)]\n    for i in range(len(X)):\n        labels[i] = np.argmin([np.linalg.norm(X[i] - medoid) for medoid in medoids])\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train) != len(x_test):\n        return -1\n    X = np.hstack((np.ones(len(x_train), 1), np.power(x_train, degree)))\n    n_features = X.shape[1]\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        gradients = np.dot(X.T, y_train - np.dot(X, w))\n        l1_penalty = l1_ratio * np.sign(w)\n        l2_penalty = reg_factor * np.sum(np.abs(w))\n        w -= learning_rate * gradients + l1_penalty + l2_penalty\n    predictions = np.dot(x_test, w)\n    predictions = predictions.round(4).tolist()\n    return predictions"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"\n    Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    gradient = np.dot(predicted, actual) * (-1 / (1 + np.exp(-predicted)))\n    hessian = np.dot(predicted, predicted) * ((1 - np.exp(-predicted)) / (1 + np.exp(-predicted))) - np.dot(predicted, actual) * np.exp(-predicted) / (1 + np.exp(-predicted))\n    probability = np.tanh(predicted)\n    gradient = np.round(gradient, decimals=6)\n    hessian = np.round(hessian, decimals=6)\n    probability = np.round(probability, decimals=6)\n    return (gradient, hessian, probability)"}
{"task_id": 218, "completion_id": 0, "solution": "import math\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = sum(player)\n    dealer_score = sum(dealer)\n    if player_score > dealer_score:\n        return 1\n    elif dealer_score > player_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    squared_errors = []\n    for (actual_val, predicted_val) in zip(actual, predicted):\n        if actual_val < 0 or predicted_val < 0:\n            return -1\n        squared_error = np.log(1 + actual_val) - np.log(1 + predicted_val)\n        squared_errors.append(squared_error)\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\nactual = [1, 2, 3, 4]\npredicted = [1.5, 2.5, 3.5, 4.5]"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    sigmoid_values = np.log(z / (1 - z))\n    result = sigmoid_values.round(4)\n    return result"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return [a * x if x >= 0 else a * x + a for x in z]\n    if isinstance(z, (list, np.ndarray)):\n        result = []\n        for item in z:\n            if isinstance(item, (int, float)):\n                result.append(a * item if item >= 0 else a * item + a)\n            else:\n                raise ValueError('All elements in the list must be numbers.')\n        return result\n    raise TypeError('Input must be a scalar, list, or numpy.ndarray.')\nz = np.array([[1.5, -2.2], [3.7, -4.8]])\nresult = leaky_relu(z)"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    weights = np.random.rand(n_clf)\n    for _ in range(n_clf):\n        feature_index = np.random.randint(X_train.shape[1])\n        threshold = X_train[:, feature_index].mean()\n        alpha = 0.5 * math.log((1 - y_train).mean() / (y_train + 1e-10))\n        weights += alpha * (y_train == -1) * (X_train[:, feature_index] < threshold)\n        weights += alpha * (y_train == 1) * (X_train[:, feature_index] > threshold)\n        predictions = np.sign(weights.sum(axis=0))\n    return predictions.tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=shape)\n    (U, Sigma, V) = np.linalg.svd(A)\n    k = min(len(shape), len(U.shape))\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = V.T\n    Q = Q.reshape(shape[0], k)\n    result = Q @ scale ** 2 * np.eye(shape[0])\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    W1 = np.array([[1.0, 1.0, 1.0]])\n    b1 = np.array([0.0])\n    W2 = np.array([[1.0, 1.0, 1.0]])\n    b2 = np.array([0.0])\n    W3 = np.array([[1.0, 1.0, 1.0]])\n    b3 = np.array([0.0])\n    W_c = np.array([[1.0, 1.0, 1.0]])\n    b_c = np.array([0.0])\n    z1 = np.maximum(0, state[0] + state[1] + state[2])\n    z2 = np.maximum(0, 4 * z1)\n    z3 = np.maximum(0, 4 * z2)\n    logits = z3.dot(W_c) + b_c\n    action_probs = np.exp(logits) / 3\n    state_value = 4 * z3[0]\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    actor_head_output = np.dot(params['Wa'], state) + params['ba']\n    actor_head_output = np.maximum(actor_head_output, 0)\n    actor_probabilities = np.exp(actor_head_output) / np.sum(np.exp(actor_head_output))\n    critic_head_output = np.dot(params['Wc'], state)\n    actor_probabilities_rounded = np.round(actor_probabilities, decimals=4)\n    critic_head_value_rounded = np.round(critic_head_output, decimals=4)\n    return (actor_probabilities_rounded, critic_head_value_rounded)\nstate = [1.0, 2.0, 3.0]\nparams = {'W1': [1.0, 2.0, 3.0], 'b1': [4.0, 5.0, 6.0], 'W2': [7.0, 8.0, 9.0], 'b2': [10.0, 11.0, 12.0], 'W3': [13.0, 14.0, 15.0], 'b3': [16.0, 17.0, 18.0]}"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    penalty_value = alpha * (np.linalg.norm(w) ** 2 + (1 - l1_ratio) * np.dot(w, w))\n    if not gradient:\n        return penalty_value\n    return [round(penalty_value, 4)]"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\nimport math\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name == 'Ba' or param_name == 'Bx':\n        param_name = param_name.lower()\n    grads = np.zeros_like(model.parameters[param_name])\n    for i in range(len(model.parameters[param_name])):\n        new_value = model.parameters[param_name][i] + epsilon\n        model.parameters[param_name][i] = new_value\n        predictions = model.forward(X)\n        loss = loss_func(predictions)\n        grad = (loss - model.parameters[param_name][i]) / (2 * epsilon)\n        grads[i] = grad\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    num_iterations = 0\n    predictions = []\n    for i in range(X_train.shape[0]):\n        stump = DecisionTreeClassifier(max_depth=1)\n        stump.fit(X_train[i], y_train[i])\n        weighted_error = np.sum(stump.predict_proba(X_test) * y_test)\n        alpha = 0.5 * np.log(1 - weighted_error / weighted_error)\n        stump.set_alpha(alpha)\n        predicted_label = stump.predict(X_test[i])\n        predictions.append(predicted_label)\n        num_iterations += 1\n    return predictions"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = {vertex: [] for vertex in V}\n    for (u, v) in E:\n        if u not in G[v]:\n            G[u].append(v)\n        else:\n            G[u].sort()\n    return G\nV = [1, 2, 3, 4, 5]\nE = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n\n    def get_best_threshold(X, y, sample_weights):\n        best_threshold = None\n        best_polarity = None\n        min_error = float('inf')\n        for i in range(X.shape[1]):\n            for threshold in np.linspace(0, X[:, i].max() + 1, num=100):\n                predictions = np.sign(X[:, i] - threshold)\n                weighted_error = np.sum(predictions != y) / sample_weights.sum()\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_threshold = threshold\n                    best_polarity = predictions[1]\n        return {'feature_index': i, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': min_error}\n    tree = {}\n    for feature_index in range(X.shape[1]):\n        best_threshold = get_best_threshold(X[:, feature_index], y, sample_weights)\n        if best_threshold is not None:\n            tree[feature_index] = {'threshold': best_threshold, 'left': {}, 'right': {}}\n        if best_threshold > 0:\n            left_tree = train_decision_stump(X[:, feature_index], y, sample_weights)\n            tree[feature_index]['left'] = left_tree\n        if best_threshold < 0:\n            right_tree = train_decision_stump(X[:, feature_index], y, sample_weights)\n            tree[feature_index]['right'] = right_tree\n    return tree\nX = np.array([[1, 2, 3], [4, 5, 6]])\ny = np.array([-1, 1])\nsample_weights = np.array([0.1, 0.2, 0.3])"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    min_val = min(feature)\n    max_val = max(feature)\n    best_threshold = None\n    best_info_gain = float('-inf')\n    for t in range(min_val, max_val + 1):\n        left_count = sum((1 for x in feature if x < t))\n        right_count = sum((1 for x in feature if x >= t))\n        entropy_left = -math.log2(left_count / len(feature))\n        entropy_right = -math.log2(right_count / len(feature))\n        info_gain = entropy_left + entropy_right\n        if info_gain > best_info_gain:\n            best_threshold = t\n            best_info_gain = info_gain\n    return (best_threshold, round(best_info_gain, 4))\nfeature = [1, 2, 3, 4, 5]"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name not in globals():\n        raise ValueError(f'Invalid initialization function. Available initializers are: zeros_init, ones_init, random_uniform_init')\n    return globals()[name]\nname = 'ones_init'"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to Python lists using\n    `tolist()`.\n    \"\"\"\n    pooled_output = np.mean(X, axis=(0, 1))\n    accum_grad = np.zeros_like(accum_grad)\n    for h in range(0, X.shape[2] - pool_shape[0] + 1):\n        for w in range(0, X.shape[3] - pool_shape[1] + 1):\n            start_h = h * stride[0]\n            start_w = w * stride[1]\n            end_h = start_h + pool_shape[0]\n            end_w = start_w + pool_shape[1]\n            window = X[start_h:end_h, start_w:end_w]\n            if end_h < X.shape[2]:\n                gradient = np.sum(window, axis=(0, 1)) / (end_h - start_h + 1)\n            else:\n                gradient = np.zeros_like(window)\n            accum_grad[start_h:end_h, start_w:end_w] += gradient\n    accum_grad = np.round(accum_grad, decimals=4)\n    accum_grad_list = accum_grad.tolist()\n    return (pooled_output, accum_grad_list)\nX = np.random.rand(10, 3, 5, 5)\npool_shape = (2, 2)\nstride = (1, 1)\naccum_grad = np.random.rand(10, 3, 5, 5)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if not tree_a.shape == tree_b.shape:\n        return False\n    if not np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n        return False\n    if not np.allclose(tree_a.value, tree_b.value, atol=1e-08):\n        return False\n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    if len(parent1) != len(parent2):\n        return -1\n    child1 = [row[:cutoff] + row[cutoff:] for row in parent1]\n    child2 = [row[:cutoff] + row[cutoff:] for row in parent2]\n    child1_list = [list(row) for row in child1]\n    child2_list = [list(row) for row in child2]\n    return (child1_list, child2_list)\nparent1 = [[1, 2], [3, 4]]\nparent2 = [[5, 6], [7, 8]]\ncutoff = 1"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    if not G:\n        return {}\n    is_directed = G.get('is_directed', False)\n    unique_vertices = set(G['_V2I'].keys())\n    adj = {vertex: [] for vertex in unique_vertices}\n    for edge in G['_G']:\n        (source_label, target_label, weight) = edge\n        if source_label not in unique_vertices or target_label not in unique_vertices:\n            raise ValueError('Invalid edge format')\n        if (source_label, target_label) not in adj[source_label]:\n            adj[source_label].append((target_label, weight))\n    sorted_adj = {vertex: sorted(adj[vertex]) for vertex in unique_vertices}\n    return sorted_adj\nG = {'is_directed': True, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [(('A', 'B'), 1), (('B', 'C'), 2)]}"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    if len(x) <= 1:\n        return True\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            return False\n    return True"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    tokens = query.split()\n    padded_tokens = []\n    for token in tokens:\n        padded_tokens.extend([f'<bol>{token}</bol>', f'<eol>'])\n    ngram_counts = defaultdict(int)\n    for i in range(len(padded_tokens) - N + 1):\n        ngram = tuple(padded_tokens[i:i + N])\n        ngram_counts[ngram] += 1\n    total_count = sum(ngram_counts.values())\n    if total_count == 0:\n        return float('-inf')\n    mle_probabilities = []\n    for (ngram, count) in ngram_counts.items():\n        log_prob = math.log(count / total_count)\n        mle_probabilities.append(log_prob)\n    total_log_prob = sum(mle_probabilities)\n    return round(total_log_prob, 4)\nN = 1"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    d = np.sqrt(np.sum((X - X.T) ** 2))\n    W = np.diag(1 / d)\n    D = np.diag(d)\n    L = D - W\n    (U, s, V) = np.linalg.svd(L)\n    E = V[:k, :]\n    centroids = E[0]\n    return [np.argmin(np.linalg.norm(X - c, axis=1)) for c in centroids]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nk = 3"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_mine = params[ix - 1][0]\n    curr_mine = params[ix][0]\n    if ix < len(params) - 1:\n        next_ix = ix + 1\n    else:\n        next_ix = 0\n    debug_string = f'------------------------- DEBUG -------------------------\\n'\n    debug_string += f'Mine ({prev_mine}) [{prev_label}]: {prev_mine}\\n'\n    debug_string += f'Theirs ({prev_mine}) [{prev_label}]: {golds[prev_label]}\\n'\n    debug_string += f'Mine ({curr_mine}) [{curr_label}]: {curr_mine}\\n'\n    debug_string += f'Theirs ({curr_mine}) [{curr_label}]: {golds[curr_label]}\\n'\n    debug_string += f'------------------------- END DEBUG -------------------------\\n'\n    if warn_str:\n        debug_string += f'\\n{warn_str}\\n'\n    return debug_string"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    if V is None:\n        V = np.eye(X.shape[1])\n    if isinstance(V, (int, float)):\n        V = np.full((X.shape[1], V), 1.0)\n    if isinstance(V, list):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    \u03a3_b = V_inv + X.T @ X\n    \u03bc_b = \u03a3_b @ (V_inv @ mu)\n    return round(\u03bc_b, 4)"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    mel_range = np.linspace(min_freq, max_freq, n_filters + 2)\n    f_range = mel_range * (10 ** (mel_range / 2595) - 1)\n    F = np.zeros((n_filters, N // 2 + 1))\n    for k in range(N):\n        for i in range(n_filters):\n            left_slope = min(f_range[k], f_range[i + 2] - f_range[i])\n            right_slope = min(f_range[k], f_range[i + 2] - f_range[i])\n            F[i, k] = 2 / (right_slope - left_slope) * F[i, k]\n    if normalize:\n        for i in range(n_filters):\n            for k in range(N):\n                F[i, k] *= 2 / (f_range[k] - f_range[i + 2]) - f_range[i]\n    return F.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0 or window_len > 0:\n        if symmetric:\n            window = np.array([0.35875, 0.48829, 0.14128, 0.01168], dtype=np.float32)\n        else:\n            window = np.array([0.35875, 0.48829, 0.14128, 0.01168], dtype=np.float32)\n    else:\n        return []\n    window = window.round(4)\n    return window"}
{"task_id": 313, "completion_id": 0, "solution": ""}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    weights = np.ones(n_estimators)\n    for _ in range(n_estimators):\n        best_feature = np.argmax(X_train[:, -1] - X_train[:, 0])\n        best_threshold = X_train[best_feature, -1]\n        stump = DecisionStump(best_feature, best_threshold, p=-1)\n        stump.train(X_train[:, :-1], y_train, weights)\n        y_pred = stump.predict(X_test[:, -1])\n        weights *= 0.5 * (1 - np.exp(-y_pred))\n    F_x = np.sign(np.sum(weights * y_pred, axis=1))\n    return F_x.tolist()"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        return []\n    if not isinstance(fs, int) or fs <= 0:\n        return []\n    if positive_only:\n        centers = np.linspace(0, N / 2, N // 2 + 1)\n    else:\n        centers = np.linspace(0, N, N)\n    centered_centers = [round(center, 4) for center in centers]\n    return centered_centers"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    if not oob_mask.any():\n        return -1\n    idx_with_oob = np.where(oob_mask.any(axis=1))[0]\n    avg_oob_predictions = np.mean(predictions[idx_with_oob], axis=0)\n    squared_errors = np.sum((predictions[idx_with_oob] - avg_oob_predictions) ** 2, axis=0)\n    oob_mse_value = np.mean(squared_errors)\n    return oob_mse_value\npredictions = np.array([[1.2, 2.3, 3.4, 4.5, 5.6], [1.1, 2.2, 3.3, 4.4, 5.5], [1.0, 2.1, 3.2, 4.3, 5.4], [1.9, 2.8, 3.7, 4.6, 5.5]])"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    filtered_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    root = {'support': len(filtered_items), 'children': {}}\n    sorted_items = sorted(filtered_items.items(), key=lambda x: (-x[1], x[0]))\n    for (item, count) in sorted_items:\n        current_node = root\n        for char in item:\n            if char not in current_node['children']:\n                current_node['children'][char] = {}\n            current_node = current_node['children'][char]\n        current_node['support'] += count\n    return root\ntransactions = [['apple', 'banana', 'cherry'], ['banana', 'date'], ['cherry', 'date'], ['date', 'fig'], ['fig', 'grape']]\nmin_support = 3"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(Y, list):\n        return -1\n    if len(X[0]) != len(Y[0]):\n        return -1\n    if Y is None:\n        Y = X\n    (N, C) = X.shape\n    (M, _) = Y.shape\n    if N != M:\n        return -1\n    K = np.zeros((N, M), dtype=np.float64)\n    for i in range(N):\n        for j in range(M):\n            K[i, j] = np.dot(X[i], Y[j]) + c0\n    return K\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8], [9, 10], [11, 12]]"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to **8** decimal places.\n    \"\"\"\n    m_t = np.mean(m)\n    v_t = np.mean(v)\n    theta_prime = param - lr * (m_t / np.sqrt(v_t + eps))\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    return [theta_prime, m_new, v_new]\nparam = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.5, 0.3, 0.4])\nm = np.array([0.1, 0.2, 0.3])\nv = np.array([0.01, 0.02, 0.03])"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    if len(rewards) == 0:\n        raise ValueError('The rewards array cannot be empty.')\n    retain_prcnt = min(1, max(0, retain_prcnt))\n    sorted_indices = np.argsort(-rewards)\n    theta_sorted = theta_samples[sorted_indices]\n    top_samples = theta_sorted[:int(retain_prcnt * len(theta_sorted))]\n    mean_top = np.mean(top_samples, axis=0)\n    var_top = np.var(top_samples, axis=0)\n    mean_top_rounded = round(mean_top, 4)\n    var_top_rounded = round(var_top, 4)\n    return (mean_top_rounded, var_top_rounded)\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrewards = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nretain_prcnt = 0.2"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    entropy_value = sum((p * math.log2(p) for p in label_counts.values()))\n    entropy_value_rounded = round(entropy_value, 5)\n    return entropy_value_rounded\nlabels = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list of shape ``(n_ex, out_rows, out_cols, out_ch)``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (out_rows, out_cols, out_ch) = W.shape\n    new_rows = out_rows + 2 * pad[0] + (stride - 1) * (stride - 1)\n    new_cols = out_cols + 2 * pad[1] + (stride - 1) * (stride - 1)\n    result = np.zeros((n_ex, new_rows, new_cols, out_ch))\n    for ex in range(n_ex):\n        for ch in range(in_ch):\n            kernel_row = ch * stride\n            kernel_col = ch * stride\n            for i in range(new_rows):\n                for j in range(new_cols):\n                    out_row = max(0, min(i + pad[0], new_rows - 1))\n                    out_col = max(0, min(j + pad[1], new_cols - 1))\n                    result[ex, i, j, ch] += X[ex, kernel_row:kernel_row + kernel_cols, kernel_col:kernel_col + kernel_cols, ch]\n    return result.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    if solver == 'svd':\n        (scores, explained_variance_ratio) = np.linalg.svd(standardized_data, full_matrices=False)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(standardized_data.T)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        sorted_eigenvectors = eigenvectors[:, sorted_indices]\n        scores = np.dot(sorted_eigenvectors, standardized_data.T)\n    rounded_scores = np.round(scores, 4)\n    explained_variance_ratio = np.round(explained_variance_ratio, 4)\n    return (rounded_scores, explained_variance_ratio)\ndata = np.random.rand(100, 20)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(0, sum(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.random.choice(data, size=(K,), replace=False)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data - centroids, axis=1)\n        assignments = np.argmin(distances, axis=0)\n        new_centroids = np.mean(data[assignments], axis=0)\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    return [round(coord, 4) for coord in sorted_centroids]"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    if not isinstance(data, list):\n        raise ValueError('Input must be a list.')\n    if not np.allclose(np.sum(data, axis=1), [1]):\n        return [-1]\n    normalized_data = []\n    for row in data:\n        if np.any(row == 0):\n            return [-1]\n        normalized_row = row / np.sum(row)\n        normalized_data.append(normalized_row)\n    normalized_data = [round(num, 4) for num in normalized_data]\n    return normalized_data\ndata = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    if isinstance(env.action_space, Box):\n        all_boxes = True\n        for space in env.action_space.spaces:\n            if not isinstance(space, Box):\n                all_boxes = False\n                break\n        return (all_boxes, True)\n    if isinstance(env.observation_space, Box):\n        all_boxes = True\n        for space in env.observation_space.spaces:\n            if not isinstance(space, Box):\n                all_boxes = False\n                break\n        return (all_boxes, True)\n    if not tuple_action and (not tuple_obs):\n        return (False, False)\n    all_boxes = True\n    for space in env.action_space.spaces:\n        if not isinstance(space, Box):\n            all_boxes = False\n            break\n    for space in env.observation_space.spaces:\n        if not isinstance(space, Box):\n            all_boxes = False\n            break\n    return (all_boxes, True)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"\n    Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if regression:\n        running_pred = np.zeros_like(updates[0])\n        for u in updates:\n            running_pred -= learning_rate * u\n            running_pred = np.exp(running_pred)\n            predicted_class = np.argmax(running_pred)\n        return running_pred\n    else:\n        running_pred = np.zeros_like(updates[0])\n        for u in updates:\n            running_pred -= learning_rate * u\n            running_pred = np.exp(running_pred)\n            probabilities = running_pred / np.sum(running_pred, axis=1)\n            predicted_class = np.argmax(probabilities)\n        return predicted_class\nupdates = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\nlearning_rate = 0.1\nregression = True"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: int, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = kernel_width - dilation\n    if pad == 'same':\n        total_pad = max(0, (signal_length - 1) * stride + effective_kernel - signal_length)\n    elif isinstance(pad, tuple):\n        total_pad = max(0, (pad[0] - signal_length + effective_kernel) // stride + (pad[1] - signal_length + effective_kernel) // stride)\n    else:\n        total_pad = max(0, (signal_length - 1) * stride + effective_kernel - signal_length)\n    p_left = total_pad // 2\n    p_right = total_pad - p_left\n    padded_X = np.pad(X, ((0, p_left), (0, p_right)), mode='constant', constant_values=0)\n    output_volume = np.zeros((n_examples, signal_length, out_channels))\n    for example_index in range(n_examples):\n        for channel_index in range(in_channels):\n            for kernel_index in range(effective_kernel):\n                dot_product = np.dot(padded_X[example_index, :, channel_index], W[kernel_index])\n                output_volume[example_index, :, channel_index] += dot_product\n    return output_volume.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6]])\nW = np.array([[1, 2], [3, 4]])\nstride = 2\npad = 'same'\ndilation = 1"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    class_counts = np.bincount(y)\n    N = len(y)\n    gini_impurity = 1 - sum([c ** 2 / N for c in class_counts])\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    theta = np.zeros(len(X[0]))\n    b = 0\n    for _ in range(n_iterations):\n        dw = 2 / len(X) * np.dot(X.T, theta * y - y)\n        db = 2 / len(X) * np.sum(theta * y - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return [theta.ravel(), b]\nX = np.array([[1, 2], [3, 4]])\ny = np.array([5, 6])"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    if len(X) != len(X[0]):\n        return False\n    for i in range(len(X)):\n        for j in range(i, len(X)):\n            if not np.allclose(X[i][j], X[j][i]):\n                return False\n    return True"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Returns the negative gradient of the logistic loss for binary classification.\"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not (np.all(y == 0) or np.all(y == 1)):\n        return [-1]\n    g = []\n    for i in range(len(y)):\n        g.append(y[i] / (1 + np.exp(-2 * y[i] * f[i])))\n    g_rounded = [round(g[i], 4) for g_i in g]\n    return g_rounded"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    if isinstance(x, (float, int)):\n        x = np.array([x])\n    result = np.where(x > 0, x * 1.6732632423543772, alpha * (np.exp(x - 1) - 1))\n    if order == 0:\n        return result.tolist()\n    elif order == 1:\n        return result[:-1].tolist()\n    elif order == 2:\n        return result[:-2].tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    predictions = []\n    for i in range(len(x)):\n        mean_y = np.mean(y)\n        current_prediction = mean_y\n        for _ in range(n_estimators):\n            residuals = y[i] - current_prediction\n            sorted_indices = np.argsort(x[i])\n            min_error = float('inf')\n            best_split = None\n            for j in range(len(sorted_indices) - 1):\n                mid_point = (sorted_indices[j] + sorted_indices[j + 1]) / 2\n                left_residual = residuals[sorted_indices[j]]\n                right_residual = residuals[sorted_indices[j + 1]]\n                error = left_residual + right_residual\n                if error < min_error:\n                    min_error = error\n                    best_split = mid_point\n            if best_split is not None:\n                current_prediction += learning_rate * residuals[best_split]\n        predictions.append(current_prediction)\n    return [round(p, 4) for p in predictions]\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 4, 5]\nn_estimators = 10\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    E_g_old = Eg.copy()\n    w_next = w - learning_rate / np.sqrt(Eg_old + 1e-08) * np.dot(grad, grad)\n    w_next = round(w_next, 4)\n    Eg_next = round(Eg_old, 4)\n    return (w_next, Eg_next)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    elu_value = np.maximum(x, 0)\n    if derivative:\n        grad_value = (elu_value >= 0) * (alpha * np.exp(x - 1)) + (elu_value < 0) * (alpha + alpha)\n        return grad_value.round(4)\n    else:\n        return elu_value.round(4)"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    if len(actions) != len(observations):\n        raise ValueError('The number of actions and observations must be the same.')\n    stats = {'tuple_actions': True, 'tuple_observations': False, 'multidim_actions': True, 'multidim_observations': False, 'continuous_actions': False, 'continuous_observations': True, 'n_actions_per_dim': [], 'action_dim': None, 'n_obs_per_dim': [], 'obs_dim': None, 'action_ids': [], 'obs_ids': []}\n    action_dim = None\n    obs_dim = None\n    for (i, action) in enumerate(actions):\n        if isinstance(action, list):\n            action_dim = len(action)\n        elif isinstance(action, tuple):\n            action_dim = len(action)\n        else:\n            action_dim = 1\n    for (i, observation) in enumerate(observations):\n        if isinstance(observation, list):\n            obs_dim = len(observation)\n        elif isinstance(observation, tuple):\n            obs_dim = len(observation)\n        else:\n            obs_dim = 1\n    n_actions_per_dim = []\n    n_obs_per_dim = []\n    for dim in range(action_dim, obs_dim + 1):\n        unique_values = set()\n        for action in actions:\n            if isinstance(action, list):\n                unique_values.update(set(action))\n            elif isinstance(action, tuple):\n                unique_values.update(set(action))\n            else:\n                unique_values.add(action)\n        n_actions_per_dim.append(len(unique_values))\n        n_obs_per_dim.append(len(unique_values))\n    stats['n_actions_per_dim'] = n_actions_per_dim\n    stats['action_dim'] = action_dim\n    stats['n_obs_per_dim'] = n_obs_per_dim\n    stats['obs_dim'] = obs_dim\n    stats['action_ids'] = []\n    stats['obs_ids'] = []\n    for (i, action) in enumerate(actions):\n        if isinstance(action, list):\n            action_ids.append([action])\n        elif isinstance(action, tuple):\n            action_ids.append([action])\n        else:\n            action_ids.append([action])\n    for (i, observation) in enumerate(observations):\n        if isinstance(observation, list):\n            observation_ids.append([observation])\n        elif isinstance(observation, tuple):\n            observation_ids.append([observation])\n        else:\n            observation_ids.append([observation])\n    return stats\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    predictions = np.mean(y_train, axis=0)\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = np.ctree(residuals, max_depth=max_depth, criterion='mse')\n        predictions += tree.predict(X_test) * learning_rate\n    predictions_rounded = np.round(predictions, decimals=4)\n    return predictions_rounded.tolist()\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=5, learning_rate=0.01, max_depth=3)"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Compute the PDF of a multivariate Gaussian distribution.\"\"\"\n    det_cov = np.linalg.det(cov)\n    exponent_term = -0.5 * np.dot((X - mean).T, np.linalg.inv(cov))\n    pdf_value = np.exp(exponent_term) / np.sqrt((2 * np.pi) ** len(mean))\n    rounded_pdf = round(pdf_value, 4)\n    return rounded_pdf"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if X_new is None or X_new.shape[1] != X.shape[0]:\n        raise ValueError('X_new must have the same number of columns as X')\n    if fit_intercept:\n        X_new = np.column_stack([np.ones(X_new.shape[0]), X_new])\n    V_inv = np.linalg.inv(V)\n    \u03bc_new = np.dot(V_inv, np.dot(X.T, X))\n    X_new_new = np.dot(V_inv, np.dot(X.T, X_new))\n    \u0177 = X_new_new @ \u03bc_new\n    return round(rxjs, 4)\nX = np.array([[1, 2], [3, 4]])\nX_new = np.array([[1], [2], [3]])"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Calculate the Root Mean Squared Logarithmic Error (RMSLE) for two lists of non-negative numbers.\n\n    Args:\n    actual (list[float]): A list of non-negative numbers representing the actual values.\n    predicted (list[float]): A list of non-negative numbers representing the predicted values.\n\n    Returns:\n    float: The RMSLE value rounded to four decimal places. If the lengths are different, returns -1.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    squared_diff = np.sum((np.log(1 + predicted) - np.log(1 + actual)) ** 2)\n    mse = squared_diff / len(actual)\n    rmsle = np.sqrt(mse)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        h = np.cos(np.pi * np.arange(window_len) / (window_len - 1))\n        h[window_len // 2] = 0\n        h = h[:-1]\n    else:\n        h = np.cos(np.pi * np.arange(window_len) / (window_len - 1))\n        h = h[:-1]\n    h_rounded = [round(val, 4) for val in h]\n    return h_rounded"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('The shape must have at least two dimensions.')\n    receptive_field_size = shape[2] * shape[3]\n    fan_in = shape[0] * receptive_field_size\n    fan_out = shape[1] * receptive_field_size\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    if n_estimators <= 0 or learning_rate == 0:\n        return np.full(y.shape[0], y.mean(), dtype=float)\n    y_pred = np.mean(y, axis=0)\n    for t in range(1, n_estimators):\n        residuals = y - y_pred\n        intercept = np.ones(len(residuals))\n        model = np.linalg.lstsq(intercept, residuals)[0]\n        h_pred = model @ X\n        y_pred = y_pred + learning_rate * h_pred\n    return np.round(y_pred, 4).tolist()\nX = [[1, 2], [3, 4], [5, 6]]\ny = [1, 2, 3]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        if order == 0:\n            return 1 / (1 + np.exp(-x))\n        elif order == 1:\n            return (1 - sigmoid(x)) * x\n        elif order == 2:\n            return (1 - sigmoid(x)) * (1 - 2 * sigmoid(x))\n        else:\n            return -1\n    elif isinstance(x, list):\n        result = []\n        for item in x:\n            result.append(sigmoid(item, order))\n        return result\n    elif isinstance(x, np.ndarray):\n        result = np.array([sigmoid(item, order) for item in x])\n        return result.tolist()\n    else:\n        raise TypeError('Input must be a scalar, list, or NumPy array.')"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    if num_classes is None:\n        max_class_index = np.max(y)\n    else:\n        max_class_index = num_classes\n    if max_class_index < len(y):\n        return [-1]\n    one_hot_matrix = np.zeros((len(y), max_class_index + 1))\n    for (i, label) in enumerate(y):\n        one_hot_matrix[i, label] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom typing import List\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n\n    def find_frequent_itemsets(frequent_items: set, transactions: List[List[int]], min_sup: float) -> List[tuple]:\n        result = []\n        for transaction in transactions:\n            if len(transaction) == 0:\n                continue\n            for item in frequent_items:\n                if item in transaction:\n                    continue\n                support = transaction.count(item)\n                if support >= min_sup:\n                    result.append((item, support))\n        return result\n    items = set()\n    for transaction in transactions:\n        for item in transaction:\n            items.add(item)\n    frequent_items = set(items)\n    frequent_itemsets = find_frequent_itemsets(frequent_items, transactions, min_sup)\n    for k in range(2, len(items) + 1):\n        frequent_items = set()\n        for transaction in transactions:\n            for i in range(len(transaction)):\n                for j in range(i + 1, len(transaction)):\n                    item1 = transaction[i]\n                    item2 = transaction[j]\n                    support1 = transaction.count(item1)\n                    support2 = transaction.count(item2)\n                    if support1 >= min_sup and support2 >= min_sup:\n                        frequent_items.add((item1, item2))\n        frequent_itemsets.extend(find_frequent_itemsets(frequent_items, transactions, min_sup))\n    frequent_itemsets.sort(key=lambda x: (-len(x), x[0]))\n    return frequent_itemsets\ntransactions = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]]\nmin_sup = 2"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n\n    def weighted_average(probabilities):\n        total_weight = np.sum(probabilities, axis=0)\n        weighted_sum = np.average(probabilities, weights=total_weight, axis=0)\n        return round(weighted_sum, 4)\n\n    def find_max_probability(probabilities):\n        max_prob = np.max(probabilities, axis=0)\n        return np.argmax(max_prob)\n    averaged_probabilities = [weighted_average(estimator) for estimator in predictions]\n    rounded_probabilities = [round(p, 4) for p in averaged_probabilities]\n    max_index = find_max_probability(rounded_probabilities)\n    return (rounded_probabilities, max_index)\npredictions = [[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [0.1, 0.2, 0.3]]]"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if len(X) != len(Y):\n        return [-1]\n    if sigma is None or not isinstance(sigma, (list, np.ndarray)):\n        sigma = np.sqrt(len(X[0]) / 2)\n    if any((not isinstance(feature, (int, float)) for feature in X[0])):\n        return [-1]\n    N = len(X)\n    M = len(Y)\n    K = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            if X[i] == Y[j]:\n                K[i, j] = 1\n            else:\n                d = np.linalg.norm(X[i] - Y[j])\n                K[i, j] = np.exp(-0.5 * d ** 2)\n    K = np.round(K, decimals=4)\n    return K\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        entropy = -np.sum(np.log(labels))\n        return entropy / len(labels)\n\n    def gini(labels):\n        if len(labels) == 0:\n            return 0.0\n        return np.sum((labels != y).sum() / len(labels))\n\n    def information_gain(y, X, feature_index, threshold):\n        left_majority = np.sum(X[:, feature_index] <= threshold)\n        right_majority = np.sum(X[:, feature_index] > threshold)\n        left_entropy = entropy(left_majority)\n        right_entropy = entropy(right_majority)\n        left_gini = gini(left_majority)\n        right_gini = gini(right_majority)\n        return left_entropy + right_entropy - (left_gini + right_gini) / 2\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    for i in range(len(X[0])):\n        for threshold in np.linspace(X[0][i], X[0][i + 1], num=1000):\n            current_gain = information_gain(y, X, i, threshold)\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_threshold = threshold\n                left_majority_label = y[y < threshold].mean()\n                right_majority_label = y[y > threshold].mean()\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if not 0 <= feature_i < X.shape[1]:\n        raise ValueError('Feature index is out of range.')\n    result = []\n    if threshold >= X[:, feature_i].max():\n        result.append(X[X[:, feature_i] >= threshold].tolist())\n    else:\n        result.append(X[X[:, feature_i] == threshold].tolist())\n    return result\nX = np.array([[1, 'A'], [2, 'B'], [3, 'A'], [4, 'C']])\nfeature_i = 1\nthreshold = 'A'"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(actions) or len(Q_next) != len(rewards) or len(dones) != len(rewards):\n        return -1\n    updated_Q = np.zeros_like(Q)\n    for i in range(len(Q)):\n        if actions[i] < 0 or actions[i] >= len(Q[0]):\n            return -1\n        expected_future_reward = rewards[i] + gamma * max(Q_next[i])\n        updated_Q[i, actions[i]] = expected_future_reward\n    return updated_Q.tolist()\nQ = np.array([[0.5, 0.3, 0.2], [0.4, 0.1, 0.8]])\nQ_next = np.array([[0.6, 0.4, 0.3], [0.7, 0.2, 0.1]])\nactions = [0, 1, 2]\nrewards = [10, 5, 2]\ndones = [True, False, True]\ngamma = 0.9"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if not all((label >= 0 for label in labels)):\n        return [-1] * len(labels)\n    one_hot_labels = np.eye(num_classes)[labels]\n    return one_hot_labels.tolist()"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    predictions = np.zeros_like(y)\n    weights = np.ones_like(y)\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        train_indices = np.where(x < np.min(x))[0]\n        test_indices = np.where(x >= np.max(x))[0]\n        sse = np.sum((residuals[train_indices] - np.mean(residuals[train_indices])) ** 2)\n        best_split = np.argmin(sse)\n        v_left = np.mean(residuals[train_indices][train_indices[:best_split]])\n        v_right = np.mean(residuals[train_indices][best_split + 1:])\n        if x[test_indices[best_split]] <= v_left:\n            predictions[test_indices[best_split]] = v_left\n        else:\n            predictions[test_indices[best_split]] = v_right\n        weights[best_split] *= learning_rate\n    return np.round(predictions, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is not None:\n        expected_future_value = reward + gamma * np.max(q_table[next_state])\n    else:\n        expected_future_value = 0\n    q_table[state][action] += lr * (expected_future_value - q_table[state][action])\n    return q_table\nq_table = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]\nstate = 0\naction = 1\nreward = 1\nnext_state = 2\nlr = 0.01\ngamma = 0.9"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m         \u2013 number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed      \u2013 optional integer; if given, call `random.seed(seed)` before sampling\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    num_samples_train = n_train // m\n    num_samples_val = n_val // m\n    x_train = np.random.uniform(num_samples_train * 10 / 2, num_samples_train * 10 / 2 + 0.9, size=(num_samples_train, 2))\n    y_train = np.random.uniform(num_samples_train * 10 / 2, num_samples_train * 10 / 2 + 0.9, size=(num_samples_train, 2))\n    x_val = np.random.uniform(num_samples_val * 10 / 2, num_samples_val * 10 / 2 + 0.1, size=(num_samples_val, 2))\n    y_val = np.random.uniform(num_samples_val * 10 / 2, num_samples_val * 10 / 2 + 0.9, size=(num_samples_val, 2))\n    return (x_train, x_val, y_train, y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev=None, v_prev=None, t=1, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m\u0302_t = m_t / (1 - b1 * m_t ** 2)\n    v\u0302_t = v_t / (1 - b2 * v_t ** 2)\n    w_new = w - learning_rate * m\u0302_t / np.sqrt(v\u0302_t + eps)\n    return (w_new, m\u0302_t, v\u0302_t)\nw = 1.0\ngrad = 0.1\nm_prev = np.zeros_like(grad)\nv_prev = np.zeros_like(grad)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    if seed is not None:\n        np.random.seed(seed)\n    evs = [ev_prior] * len(rewards[0])\n    pulls = [0] * len(rewards)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            best_arm = np.argmax(evs)\n            evs[best_arm] += (rewards[t][best_arm] - evs[best_arm]) / pulls[best_arm]\n            pulls[best_arm] += 1\n    return [round(e, 4) for e in evs]\nrewards = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    if data.shape[0] == 0:\n        return []\n    num_samples = data.shape[0]\n    cluster_labels = [-1] * num_samples\n    cluster_size = [1] * num_samples\n\n    def get_neighbors(point):\n        neighbors = []\n        for i in range(num_samples):\n            if i != point:\n                distance = np.linalg.norm(data[i] - data[point])\n                if distance <= eps:\n                    neighbors.append(i)\n        return neighbors\n    for i in range(num_samples):\n        if len(get_neighbors(i)) >= min_samples:\n            cluster_labels[i] = len(cluster_labels)\n            cluster_size[i] += 1\n    core_points = [i for (i, size) in enumerate(cluster_size) if size == len(cluster_labels)]\n    for point in core_points:\n        for neighbor in get_neighbors(point):\n            if cluster_labels[neighbor] == -1:\n                cluster_labels[neighbor] = cluster_labels[point]\n                cluster_size[neighbor] += 1\n    for i in range(num_samples):\n        if cluster_labels[i] == -1:\n            cluster_labels[i] = -1\n    return cluster_labels\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\neps = 1.5\nmin_samples = 3"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(y) + 1\n    one_hot_y = np.eye(num_classes)[y]\n    return one_hot_y"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n\n    def _build_tree(X, y, depth=0):\n        if len(X) == 0:\n            return None\n        mse = np.mean((y - np.mean(y)) ** 2)\n        current_leaf = None\n        for feature_index in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature_index])\n            left = X[sorted_indices[:depth]]\n            right = X[sorted_indices[depth + 1:]]\n            left_tree = _build_tree(left, y[left], depth + 1)\n            right_tree = _build_tree(right, y[right], depth + 1)\n            if left_tree is not None and right_tree is not None:\n                current_leaf = np.mean(y[left_tree])\n        return current_leaf\n    root = _build_tree(X_train, y_train, 0)\n    if root is None:\n        return []\n    predictions = [root]\n    for point in X_test:\n        next_node = root\n        while next_node is not None:\n            if next_node.left is not None:\n                next_node = next_node.left\n            else:\n                next_node = next_node.right\n            predictions.append(next_node)\n    return predictions\nX_train = [1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 4, 5]\nX_test = [2, 3, 4, 5]\npredictions = regression_tree_predict(X_train, y_train, X_test)"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    if not x:\n        return []\n    diagonal_matrix = np.zeros((len(x), len(x)))\n    for (i, value) in enumerate(x):\n        diagonal_matrix[i, i] = value\n    return diagonal_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    transactions.sort(key=lambda x: sum(x))\n    fp_trees = []\n    current_prefix = []\n    for transaction in transactions:\n        for item in transaction:\n            if item in frequent_items:\n                current_prefix.append(item)\n                if len(current_prefix) == min_sup:\n                    fp_trees.append(tuple(sorted(current_prefix)))\n                    current_prefix.clear()\n        if current_prefix:\n            fp_trees.append(tuple(sorted(current_prefix)))\n    return fp_trees\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    result = np.ones((len(X), degree + 1))\n    for i in range(degree + 1):\n        for j in range(i, len(X)):\n            for k in combinations_with_replacement(range(len(X)), i):\n                result[i][j] *= X[k[0]][k[1]]\n    return result.tolist()\nX = [[1, 2, 3], [4, 5], [6, 7]]\ndegree = 3"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse = np.mean(squared_diffs)\n    return round(mse, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    y = slope * x + intercept\n    grad = slope\n    grad2 = 0\n    return (y, grad, grad2)\nx = np.array([1.0, 2.0, 3.0])"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    cov_matrix = np.cov(standardized_data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(len(sorted_eigenvectors)):\n        if abs(sorted_eigenvectors[i][0]) > 0:\n            sorted_eigenvectors[i] *= -1\n    projected_data = standardized_data @ sorted_eigenvectors\n    projected_data_rounded = projected_data.round(4).tolist()\n    return projected_data_rounded"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    h = [np.mean(y_train)]\n    for _ in range(n_estimators):\n        y_pred = np.sum(h, axis=0)\n        residuals = y - y_pred\n        h.append(np.sum(residuals * h[-1]))\n    y_pred = np.array([0 if y > 0.5 else 1 for y in y_test])\n    return y_pred.tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.shape[0] == 0:\n        return []\n    h0_prob = np.zeros(X.shape[1])\n    h0_prob /= X.shape[1]\n    for _ in range(k):\n        h_k_prob = np.random.multinomial(1, h0_prob, size=X.shape[1])\n        pos_grad = X.T.dot(h_k_prob)\n        neg_grad = h_k_prob.T.dot(h0_prob)\n        W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n        pos_grad /= np.linalg.norm(pos_grad)\n        neg_grad /= np.linalg.norm(neg_grad)\n        h0_prob = h0_prob + pos_grad / X.shape[1]\n        h0_prob = h0_prob + neg_grad / X.shape[1]\n    updated_weight_matrix = []\n    for i in range(W.shape[0]):\n        row = []\n        for j in range(W.shape[1]):\n            row.append(round(W[i, j], 4))\n        updated_weight_matrix.append(row)\n    return updated_weight_matrix"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    distances = np.abs(x - y)\n    return np.max(distances)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    reconstruction_loss = np.mean(np.square(y - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + np.log(t_log_var) - np.log(t_mean) ** 2 - t_mean ** 2 - t_log_var)\n    average_loss = reconstruction_loss + kl_divergence\n    return round(average_loss, 6)\ny = np.array([[0, 0], [0, 1]])\ny_pred = np.array([[0.9, 0.1], [0.1, 0.9]])\nt_mean = np.array([0.5, 0.5])\nt_log_var = np.array([1, 1])"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    if len(w) != len(V):\n        raise ValueError('The number of columns in w must match the number of columns in V.')\n    predictions = []\n    for x in X:\n        predictions.append(w0 + np.dot(V, x))\n    return predictions\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nw0 = 1.0\nw = [0.5, -0.3, 0.7]\nV = [[1, 0.2, 0.5], [0.3, 1, 0.4], [0.5, 0.4, 1]]\npredictions = fm_predict(X, w0, w, V)"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(1 / (1 + np.exp(-z)), 4)\n    elif isinstance(z, list):\n        return [round(sigmoid(x), 4) for x in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(sigmoid(z), 4)\n    else:\n        raise ValueError('Input must be a scalar, list, tuple, or NumPy array.')"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(z, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array.')\n    if not all((0 <= x <= 1 for x in z)):\n        raise ValueError('All elements in z must be in the interval [0,1].')\n    x = 1 - z\n    derivative = x * (1 - x)\n    rounded_derivative = np.round(derivative, 4)\n    return rounded_derivative"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    if all((weight != 0 for weight in W)):\n        raise ValueError('All weights must be non-zero.')\n    min_x = np.min(X, axis=0)[0]\n    max_x = np.max(X, axis=0)[0]\n    x1_plot = np.linspace(min_x, max_x, grid_n)\n    x2_plot = np.linspace(min_x, max_x, grid_n)\n    mesh_grid = np.meshgrid(x1_plot, x2_plot)\n    labels = np.sign(np.dot(W, mesh_grid.T) + b)\n    return labels.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class_prior = np.zeros(n_classes)\n    for i in range(n_features):\n        unique_values = np.unique(X_train[:, i])\n        unique_values = unique_values[unique_values != 0]\n        mean = np.mean(unique_values)\n        std_dev = np.std(unique_values)\n        class_prior[i] = len(unique_values) / n_samples\n    posterior_probs = []\n    for x in X_test:\n        prior_sum = 0\n        for c in range(n_classes):\n            prior_sum += class_prior[c] * np.exp(-0.5 * (x - mean[c]) ** 2 / std_dev[c] ** 2)\n        posterior_probs.append(prior_sum / n_samples)\n    posterior_probs = [p + 1e-09 for p in posterior_probs]\n    return np.array(posterior_probs)"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for a binary classification model.\n\n    Args:\n    - AL: A 1D numpy array containing the model probabilities for each sample.\n    - Y: A 1D numpy array containing the true labels for each sample.\n\n    Returns:\n    - The binary cross-entropy cost as a float, rounded to 4 decimal places.\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    loss = -np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(loss, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    n_states = len(pi)\n    n_observations = len(observations)\n    alpha = np.zeros((n_states, n_observations))\n    beta = np.zeros((n_states, n_observations))\n    alpha[0] = pi * A[0][observations[0]]\n    for i in range(1, n_states):\n        alpha[i] = np.sum(alpha[i - 1] * A[i][observations[i]])\n    beta[n_states - 1] = B[n_states - 1][observations[-1]]\n    for i in range(n_states - 2, -1, -1):\n        beta[i] = np.sum(beta[i + 1] * B[i][observations[i]])\n    gamma = np.divide(alpha, beta)\n    gamma = [round(x, 4) for x in gamma]\n    return gamma"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    distances = np.sqrt(np.sum((data[:, np.newaxis] - data[np.newaxis, :]) ** 2, axis=2))\n    neighborhoods = {}\n    for i in range(data.shape[0]):\n        for j in range(i + 1, data.shape[0]):\n            if np.linalg.norm(data[i] - data[j]) < eps:\n                if (i, j) not in neighborhoods:\n                    neighborhoods[i, j] = []\n                neighborhoods[i, j].append(i)\n                neighborhoods[j, i].append(j)\n    core_points = [i for i in range(data.shape[0]) if len(neighborhoods.get((i, i), [])) >= min_samples]\n    cluster_labels = [-1] * data.shape[0]\n    while core_points:\n        core_point = core_points.pop(0)\n        cluster_labels[core_point] = len(cluster_labels)\n        for neighbor in neighborhoods[core_point, core_point]:\n            if cluster_labels[neighbor] == -1:\n                core_points.append(neighbor)\n                cluster_labels[neighbor] = len(cluster_labels)\n    return cluster_labels\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])\neps = 0.5\nmin_samples = 3\ncluster_labels = dbscan(data, eps, min_samples)"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2D NumPy array containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: Maximum number of iterations for the EM algorithm.\n    - epsilon: Tolerance for convergence.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    mixture_weights = np.ones(k)\n    means = np.zeros((k, n_features))\n    covariances = np.zeros((k, n_features, n_features))\n    for i in range(k):\n        mean = np.random.normal(loc=0, scale=1, size=n_features)\n        cov = np.identity(n_features)\n        mixture_weights[i] = np.sum(data == mean) / n_samples\n        means[i] = mean\n        covariances[i] = cov + np.dot((data == mean).astype(float), (data == mean).astype(float) - np.outer(mean, mean)) / n_samples\n    for _ in range(max_iter):\n        for i in range(k):\n            responsibilities = np.exp(-0.5 * np.dot(data - means[i], data - means[i]) / np.linalg.norm(data - means[i]))\n            means[i] = np.mean(data[responsibilities > 0], axis=0)\n            covariances[i] = np.dot(responsibilities, (data - means[i]).T) / np.linalg.norm(data - means[i])\n        new_mixture_weights = np.sum(responsibilities > 0) / n_samples\n        mixture_weights = np.where(new_mixture_weights > mixture_weights, new_mixture_weights, mixture_weights)\n    clusters = np.argmax(mixture_weights, axis=1)\n    sorted_clusters = np.sort(clusters, axis=0)\n    cluster_indices = np.unique(sorted_clusters)\n    return list(cluster_indices)\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\nk = 2"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    D = np.sum(data ** 2, axis=1)\n    W = np.exp(-gamma * D)\n    if method == 'normalized':\n        D_inv_sqrt_2 = np.linalg.inv(D / 2)\n        L = D_inv_sqrt_2 @ D_inv_sqrt_2\n    else:\n        L = D\n    (eigvals, eigvecs) = np.linalg.eig(L)\n    centroids = eigvecs[:, 0]\n    labels = np.argmin(np.linalg.norm(data - centroids, axis=1), axis=0)\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    w = np.zeros(X_data.shape[1])\n    b = 0\n    G = np.dot(X_data.T, X_data)\n    for _ in range(max_iter):\n        g = np.dot(X_data, y_data) + b\n        alpha = np.zeros(w.shape)\n        for i in range(X_data.shape[0]):\n            if g[i] <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n        if np.allclose(g, 0):\n            break\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str) -> int:\n    if root.y is not None:\n        return root.y\n    min_x = float('inf')\n    min_node = None\n    for child in root.child:\n        if child.x < min_x:\n            min_x = child.x\n            min_node = child\n    if min_node.is_leaf():\n        return min_node.y\n    return predict_sample(min_node, features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    (n_samples, n_features) = X.shape\n    H_y = -np.sum(y * np.log2(y))\n    conditional_entropies = []\n    for feature in range(n_features):\n        p_feature = np.sum(X[:, feature] == y) / n_samples\n        conditional_entropies.append(-np.sum(p_feature * np.log2(p_feature)))\n    best_feature_index = np.argmax(conditional_entropies)\n    max_information_gain = round(conditional_entropies[best_feature_index], 6)\n    return (best_feature_index, max_information_gain)\nX = np.array([[1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 0, 0]])\ny = np.array([0, 0, 0, 1])"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    root = TreeNode()\n\n    def build_tree(subset):\n        if len(subset) == 0:\n            return None\n        feature = np.random.choice(range(data.shape[1]))\n        threshold = np.random.uniform(min(data[:, feature]), max(data[:, feature]))\n        left = subset[subset[:, feature] <= threshold]\n        right = subset[subset[:, feature] > threshold]\n        left_node = build_tree(left)\n        if left_node:\n            left_node.parent = root\n        else:\n            root.left = left\n        right_node = build_tree(right)\n        if right_node:\n            right_node.parent = root\n        else:\n            root.right = right\n        return root\n    build_tree(data[:sample_size])\n\n    def calculate_path_length(node):\n        if not node:\n            return 0\n        return 1 + calculate_path_length(node.left) + calculate_path_length(node.right)\n\n    def calculate_anomaly_score(node):\n        if not node:\n            return 0\n        return calculate_path_length(node) - epsilon * 100\n    outliers = []\n    for (i, (x, y)) in enumerate(data[sample_size:]):\n        anomaly_score = calculate_anomaly_score(root)\n        if anomaly_score >= epsilon:\n            outliers.append(i)\n    outliers.sort()\n    return outliers\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nn_trees = 10\nsample_size = 5\nepsilon = 0.05\noutliers = detect_outliers(data, n_trees, sample_size, epsilon)"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    w = np.zeros(X_train.shape[1])\n    for _ in range(n_iter):\n        loss_gradient = np.zeros_like(w)\n        for i in range(X_train.shape[1]):\n            f_i = X_train[:, i]\n            y_i = y_train[:, i]\n            for j in range(X_train.shape[0]):\n                if f_i[j] == 1:\n                    loss_gradient[i] += -y_i[j] * np.log(f_i[j] + epsilon)\n                else:\n                    loss_gradient[i] += y_i[j] * np.log(1 - f_i[j] + epsilon)\n        loss_gradient /= np.linalg.norm(loss_gradient)\n        w -= epsilon * loss_gradient\n    predicted_labels = np.argmax(X_test @ w, axis=1)\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    word_counts = Counter()\n    for (label, words) in data:\n        word_counts.update(words)\n    sorted_words = sorted(word_counts.items(), key=lambda item: item[1], reverse=True)\n    if cut_off is None:\n        return sorted_words\n    rounded_ratios = [round(ratio, 4) for (ratio, _) in sorted_words]\n    most_frequent_words = set(sorted_words[:cut_off])\n    return (rounded_ratios, most_frequent_words)\ndata = [('Document 1', ['apple', 'banana', 'cherry']), ('Document 2', ['banana', 'date', 'elderberry']), ('Document 3', ['apple', 'banana', 'cherry'])]"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    weighted_sum = np.dot(X, y)\n    squared_diffs = np.sum((y - weighted_sum) ** 2)\n    num_samples = len(y)\n    w = weighted_sum / num_samples\n    b = squared_diffs / num_samples\n    w_rounded = [round(w[i], 4) for i in range(len(w))]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implement the Local Outlier Factor (LOF) algorithm.\n    \n    Parameters:\n    - data: A 2D numpy array representing the dataset.\n    - k: An integer specifying the number of nearest neighbors to consider for each sample.\n    - epsilon: A float specifying the threshold for considering a sample an outlier.\n    \n    Returns:\n    - A tuple containing the list of LOF scores rounded to 4 decimals and the ascending list of indices of all samples whose LOF score is strictly larger than epsilon.\n    \"\"\"\n    n = data.shape[0]\n    if n <= k:\n        raise ValueError('Number of samples must be greater than k.')\n    dist_matrix = np.linalg.norm(data - data[:, None], axis=2)\n    lof_scores = []\n    outlier_indices = []\n    for i in range(n):\n        distances = dist_matrix[i]\n        k_nearest = np.argsort(distances)[:k]\n        reach_dist = np.max(distances[k_nearest], dists[i])\n        lrd = k / reach_dist\n        lof_scores.append(lrd)\n        outlier_indices.append(i)\n    outlier_indices.sort(key=lambda x: lof_scores[x], reverse=True)\n    lof_scores_rounded = [np.round(score, 4) for score in lof_scores]\n    return (lof_scores_rounded, outlier_indices)\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nk = 2"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    base_width = 10 * np.floor(m / 2)\n    base_center = base_width // 2\n    X_train = np.random.uniform(base_center - 1, base_center + 1, (n_train, 2))\n    y_train = np.random.uniform(base_center - 1, base_center + 1, (n_train, 1))\n    X_val = np.random.uniform(base_center - 1, base_center + 1, (n_val, 2))\n    y_val = np.random.uniform(base_center - 1, base_center + 1, (n_val, 1))\n    X_train = X_train.round(4)\n    X_val = X_val.round(4)\n    y_train = y_train.round(4)\n    y_val = y_val.round(4)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    if k <= 0 or k > X.shape[0]:\n        raise ValueError('Number of clusters must be between 1 and the number of data points.')\n    centers = X[np.random.choice(X.shape[0], k, replace=False)]\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(X - centers, axis=1), axis=1)\n        new_centers = np.mean(X[labels], axis=0)\n        if np.allclose(centers, new_centers):\n            break\n        centers = new_centers\n    return (labels, centers.tolist())\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nk = 3"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    for _ in range(iterations):\n        \u0177 = np.dot(X, weights) + bias\n        r = y - \u0177\n        w_j_gradient = -2 * np.dot(X[:, :], r) + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n        b_gradient = -2 * np.sum(r)\n        weights -= learning_rate * w_j_gradient / X.shape[0]\n        bias -= learning_rate * b_gradient / X.shape[0]\n    return ([round(weight, 4) for weight in weights], round(bias, 4))\nX = np.array([[1, 2], [3, 4]])\ny = np.array([1, 2])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.01\nl2_penalty = 0.01"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    if len(weights) == 1:\n        return round(weights[0][0][0], 4)\n    prediction = weights[-1][0][0]\n    for i in range(len(weights) - 2, -1, -1):\n        prediction += weights[i][0][0] * x[i]\n        prediction = np.maximum(0, prediction)\n    return round(prediction, 4)\nweights = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]]]\nx = [1, 2, 3]\nprediction = neural_net_predict(weights, x)"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.linalg.norm(X - centroids, axis=1)\n        assignments = np.argmin(distances, axis=1)\n        new_centroids = np.mean(X[assignments], axis=0)\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [round(coord, 4) for coord in sorted_centroids]\n    return rounded_centroids\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nk = 3"}
