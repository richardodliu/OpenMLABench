{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((row[i] * b[i] for i in range(len(b))))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not a[0]:\n        return []\n    num_rows = len(a)\n    num_cols = len(a[0])\n    transposed = [[0] * num_rows for _ in range(num_cols)]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    original_elements = sum((len(row) for row in a))\n    new_elements = new_shape[0] * new_shape[1]\n    if original_elements != new_elements:\n        return []\n    np_array = np.array(a)\n    reshaped_array = np_array.reshape(new_shape)\n    reshaped_list = reshaped_array.tolist()\n    return reshaped_list\nnew_shape = (3, 2)"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0])\n        num_rows = len(matrix)\n        column_sums = [0] * num_columns\n        for row in matrix:\n            for col_index in range(num_columns):\n                column_sums[col_index] += row[col_index]\n        return [column_sum / num_rows for column_sum in column_sums]\nmatrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = []\n        for element in row:\n            new_row.append(element * scalar)\n        result.append(new_row)\n    return result\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nscalar = 2\nresult = scalar_multiply(matrix, scalar)"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    eigenvalue1 = (trace + discriminant ** 0.5) / 2\n    eigenvalue2 = (trace - discriminant ** 0.5) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\nmatrix = [[4, 2], [1, 3]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    if np.linalg.det(T_np) == 0 or np.linalg.det(S_np) == 0:\n        return -1\n    T_inv_np = np.linalg.inv(T_np)\n    transformed_matrix_np = T_inv_np @ A_np @ S_np\n    transformed_matrix_np = np.round(transformed_matrix_np, 4)\n    transformed_matrix_list = transformed_matrix_np.tolist()\n    return transformed_matrix_list"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse_matrix = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse_matrix\nmatrix = [[4, 7], [2, 6]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    import numpy as np\n    data = np.array(vectors)\n    num_features = data.shape[0]\n    means = np.mean(data, axis=1)\n    covariance_matrix = np.zeros((num_features, num_features))\n    for i in range(num_features):\n        for j in range(num_features):\n            covariance_matrix[i][j] = np.mean((data[i] - means[i]) * (data[j] - means[j]))\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    num_vars = len(b)\n    x = np.zeros(num_vars)\n    for _ in range(n):\n        x_new = np.zeros(num_vars)\n        for i in range(num_vars):\n            sum_ = sum((A[i][j] * x[j] for j in range(num_vars) if j != i))\n            x_new[i] = (b[i] - sum_) / A[i][i]\n        x = np.round(x_new, 4)\n    return x.tolist()\nA = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float)\nb = np.array([4, 7, 3], dtype=float)\nn = 25"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    assert A.shape == (2, 2), 'Input must be a 2x2 matrix.'\n    U = np.eye(2)\n    V = np.eye(2)\n    tol = 1e-10\n    max_iterations = 100\n    iteration = 0\n    while np.abs(A[0, 1]) > tol and iteration < max_iterations:\n        iteration += 1\n        if A[0, 1] != 0:\n            tau = (A[1, 1] - A[0, 0]) / (2 * A[0, 1])\n            t = np.sign(tau) / (np.abs(tau) + np.sqrt(1 + tau ** 2))\n            c = 1 / np.sqrt(1 + t ** 2)\n            s = c * t\n        else:\n            c = 1\n            s = 0\n        J = np.array([[c, s], [-s, c]])\n        A = J.T @ A @ J\n        U = U @ J\n        V = V @ J.T\n    singular_values = np.abs(np.diag(A))\n    singular_values.sort()\n    singular_values = singular_values[::-1]\n    singular_values = tuple(np.round(singular_values, 4))\n    return singular_values\nA = np.array([[4, 3], [3, 2]])\nsingular_values = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(m: list[list[int | float]]) -> float:\n        return m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) - m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) + m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0])\n\n    def get_minor(m: list[list[int | float]], i: int, j: int) -> list[list[int | float]]:\n        return [row[:j] + row[j + 1:] for row in m[:i] + m[i + 1:]]\n    det = 0\n    for col in range(4):\n        minor = get_minor(matrix, 0, col)\n        cofactor = (-1) ** col * matrix[0][col] * determinant_3x3(minor)\n        det += cofactor\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    theta = np.linalg.inv(X.T @ X) @ X.T @ y\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        error = predictions - y\n        gradient = 1 / m * X.T.dot(error)\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0)\n    standardized_data = (data - means) / stds\n    mins = np.min(data, axis=0)\n    maxs = np.max(data, axis=0)\n    min_max_normalized_data = (data - mins) / (maxs - mins)\n    standardized_data = np.round(standardized_data, 4)\n    min_max_normalized_data = np.round(min_max_normalized_data, 4)\n    standardized_list = standardized_data.tolist()\n    min_max_normalized_list = min_max_normalized_data.tolist()\n    return (standardized_list, min_max_normalized_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[closest_centroids == i].mean(axis=0) if np.any(closest_centroids == i) else centroids[i] for i in range(k)])\n        if np.allclose(new_centroids, centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(c, 4)) for c in centroids]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\ninitial_centroids = [(1.0, 2.0), (5.0, 8.0)]\nk = 2\nmax_iterations = 100\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Perform K-Fold Cross-Validation on the given dataset.\n\n    Parameters:\n    X (np.ndarray): Feature matrix.\n    y (np.ndarray): Target vector.\n    k (int): Number of folds. Default is 5.\n    shuffle (bool): Whether to shuffle the data before splitting. Default is True.\n    random_seed (int): Random seed for reproducibility. Default is None.\n\n    Returns:\n    list: A list of tuples, each containing train indices and test indices for each fold.\n    \"\"\"\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(len(X))\n    else:\n        indices = np.arange(len(X))\n    fold_sizes = np.full(k, len(X) // k, dtype=int)\n    fold_sizes[:len(X) % k] += 1\n    current = 0\n    folds = []\n    for fold_size in fold_sizes:\n        (start, stop) = (current, current + fold_size)\n        test_indices = indices[start:stop]\n        train_indices = np.concatenate([indices[:start], indices[stop:]])\n        folds.append((train_indices, test_indices))\n        current = stop\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_rounded = np.round(principal_components, 4)\n    return principal_components_rounded.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(examples, target_attr):\n    \"\"\"Calculate the entropy of the given examples.\"\"\"\n    label_counts = Counter((example[target_attr] for example in examples))\n    total_examples = len(examples)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_examples\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\ndef information_gain(examples, attr, target_attr):\n    \"\"\"Calculate the information gain of splitting the examples by the given attribute.\"\"\"\n    total_entropy = entropy(examples, target_attr)\n    attr_values = set((example[attr] for example in examples))\n    weighted_entropy = 0.0\n    for value in attr_values:\n        subset = [example for example in examples if example[attr] == value]\n        subset_entropy = entropy(subset, target_attr)\n        weighted_entropy += len(subset) / len(examples) * subset_entropy\n    return total_entropy - weighted_entropy\ndef majority_class(examples, target_attr):\n    \"\"\"Return the most common class label in the examples.\"\"\"\n    label_counts = Counter((example[target_attr] for example in examples))\n    return label_counts.most_common(1)[0][0]\ndef learn_decision_tree(examples, attributes, target_attr):\n    \"\"\"Recursively build a decision tree using the given examples and attributes.\"\"\"\n    if len(set((example[target_attr] for example in examples))) == 1:\n        return examples[0][target_attr]\n    if not attributes:\n        return majority_class(examples, target_attr)\n    best_attr = max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n    tree = {best_attr: {}}\n    attr_values = set((example[best_attr] for example in examples))\n    for value in attr_values:\n        subset = [example for example in examples if example[best_attr] == value]\n        if not subset:\n            tree[best_attr][value] = majority_class(examples, target_attr)\n        else:\n            remaining_attributes = [attr for attr in attributes if attr != best_attr]\n            tree[best_attr][value] = learn_decision_tree(subset, remaining_attributes, target_attr)\n    return tree\nexamples = [{'attribute1': 'A', 'attribute2': 'B', 'target': 'Yes'}, {'attribute1': 'A', 'attribute2': 'C', 'target': 'No'}, {'attribute1': 'B', 'attribute2': 'B', 'target': 'Yes'}, {'attribute1': 'B', 'attribute2': 'C', 'target': 'No'}]\nattributes = ['attribute1', 'attribute2']\ntarget_attr = 'target'"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x1, x2):\n    return np.dot(x1, x2)\ndef rbf_kernel(x1, x2, sigma):\n    return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\ndef compute_kernel_matrix(data, kernel, sigma):\n    n_samples = data.shape[0]\n    kernel_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if kernel == 'linear':\n                kernel_matrix[i, j] = linear_kernel(data[i], data[j])\n            elif kernel == 'rbf':\n                kernel_matrix[i, j] = rbf_kernel(data[i], data[j], sigma)\n    return kernel_matrix\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    kernel_matrix = compute_kernel_matrix(data, kernel, sigma)\n    for t in range(1, iterations + 1):\n        learning_rate = 1 / (lambda_val * t)\n        for i in range(n_samples):\n            margin = labels[i] * (np.dot(alpha * labels, kernel_matrix[i]) + bias)\n            if margin < 1:\n                alpha[i] = (1 - learning_rate * lambda_val) * alpha[i] + learning_rate * labels[i]\n            else:\n                alpha[i] = (1 - learning_rate * lambda_val) * alpha[i]\n        bias = np.mean(labels - np.dot(alpha * labels, kernel_matrix))\n    alpha = np.round(alpha, 4)\n    bias = np.round(bias, 4)\n    return (alpha.tolist(), bias)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    sigmoid_value = 1 / (1 + math.exp(-z))\n    return round(sigmoid_value, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x: float) -> float:\n    \"\"\"Compute the sigmoid activation function.\"\"\"\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predicted_probabilities = []\n    for feature_vector in features:\n        weighted_sum = sum((f * w for (f, w) in zip(feature_vector, weights))) + bias\n        probability = sigmoid(weighted_sum)\n        predicted_probabilities.append(round(probability, 4))\n    mse = np.mean([(p - l) ** 2 for (p, l) in zip(predicted_probabilities, labels)])\n    mse = round(mse, 4)\n    return (np.array(predicted_probabilities).reshape(-1).tolist(), mse)\nfeatures = [[0.5, 1.5], [1.0, -1.0], [2.0, 0.0]]\nlabels = [1, 0, 1]\nweights = [0.4, -0.6]\nbias = 0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_list = []\n    for epoch in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        errors = predictions - labels\n        mse = np.mean(errors ** 2)\n        mse_list.append(round(mse, 4))\n        d_loss_d_predictions = 2 * errors / len(labels)\n        d_predictions_d_linear_output = predictions * (1 - predictions)\n        d_linear_output_d_weights = features\n        d_linear_output_d_bias = 1\n        d_loss_d_linear_output = d_loss_d_predictions * d_predictions_d_linear_output\n        d_loss_d_weights = np.dot(d_linear_output_d_weights.T, d_loss_d_linear_output)\n        d_loss_d_bias = np.sum(d_loss_d_linear_output * d_linear_output_d_bias)\n        weights -= learning_rate * d_loss_d_weights\n        bias -= learning_rate * d_loss_d_bias\n    return (weights.round(4).tolist(), round(bias, 4), mse_list)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(0, self.data), (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for v in reversed(topo):\n            v._backward()\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    B_inv = np.linalg.inv(B_matrix)\n    P = np.dot(C_matrix, B_inv)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[0, 1, 0], [1, 0, 0], [0, 0, 1]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, V) = np.linalg.eigh(ATA)\n    singular_values = np.sqrt(eigenvalues)\n    S = np.zeros_like(A, dtype=float)\n    np.fill_diagonal(S, singular_values)\n    U = np.zeros_like(A, dtype=float)\n    for i in range(len(singular_values)):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    A generator function that yields batches of data from X and optionally y.\n\n    Parameters:\n    X (np.ndarray): The input data array.\n    y (np.ndarray, optional): The target data array. Default is None.\n    batch_size (int): The size of each batch. Default is 64.\n\n    Yields:\n    list: A list of batches of X, and optionally y, converted to Python lists.\n    \"\"\"\n    num_samples = X.shape[0]\n    indices = np.arange(num_samples)\n    np.random.shuffle(indices)\n    for start_idx in range(0, num_samples, batch_size):\n        end_idx = min(start_idx + batch_size, num_samples)\n        batch_indices = indices[start_idx:end_idx]\n        X_batch = X[batch_indices]\n        if y is not None:\n            y_batch = y[batch_indices]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide the dataset into two subsets based on a feature threshold.\n\n    Parameters:\n    X (numpy.ndarray): The dataset, where each row is a sample and each column is a feature.\n    feature_i (int): The index of the feature to use for division.\n    threshold (float): The threshold value to divide the dataset.\n\n    Returns:\n    tuple: Two lists containing the divided subsets of the dataset.\n    \"\"\"\n    X = np.array(X)\n    mask = X[:, feature_i] >= threshold\n    subset_meet_condition = X[mask]\n    subset_not_meet_condition = X[~mask]\n    return (subset_meet_condition.tolist(), subset_not_meet_condition.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    combinations = list(combinations_with_replacement(range(n_features), degree))\n    poly_features = np.empty((n_samples, len(combinations)))\n    for (i, comb) in enumerate(combinations):\n        poly_features[:, i] = np.prod(X[:, comb], axis=1)\n    return poly_features.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, size=n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((len(x), n_col), dtype=int)\n    one_hot[np.arange(len(x)), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    diagonal_list = diagonal_matrix.tolist()\n    return diagonal_list"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    Y = np.array(Y)\n    covariance_matrix = np.cov(X, Y, rowvar=False)\n    std_X = np.std(X, axis=0, ddof=1)\n    std_Y = np.std(Y, axis=0, ddof=1)\n    correlation_matrix = covariance_matrix / np.outer(std_X, std_Y)\n    correlation_matrix = np.round(correlation_matrix, 4)\n    return correlation_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    w = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_clf = None\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n_features):\n            feature_values = X[:, feature]\n            possible_thresholds = np.unique(feature_values)\n            for threshold in possible_thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values > threshold] = -1\n                    error = np.sum(w[y != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_clf = predictions\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1.0 - best_error) / (best_error + 1e-10))\n        w *= np.exp(-alpha * y * best_clf)\n        w /= np.sum(w)\n        classifiers.append({'feature': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores)\n    max_score = np.max(scores_array)\n    adjusted_scores = scores_array - max_score\n    exp_scores = np.exp(adjusted_scores)\n    sum_exp_scores = np.sum(exp_scores)\n    log_softmax_scores = adjusted_scores - np.log(sum_exp_scores)\n    rounded_log_softmax_scores = np.round(log_softmax_scores, 4)\n    return rounded_log_softmax_scores.tolist()\nscores = [3.0, 1.0, 0.2]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_optimizer = None\n        self.w0_optimizer = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_optimizer = copy.deepcopy(optimizer)\n        self.w0_optimizer = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return np.round(output, 4).tolist()\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W_optimizer.update(self.W, grad_W)\n            self.w0 = self.w0_optimizer.update(self.w0, grad_w0)\n        return np.round(grad_input, 4).tolist()\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    if padding > 0:\n        input_matrix = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            start_i = i * stride\n            start_j = j * stride\n            end_i = start_i + kernel_height\n            end_j = start_j + kernel_width\n            input_region = input_matrix[start_i:end_i, start_j:end_j]\n            conv_value = np.sum(input_region * kernel)\n            output_matrix[i, j] = round(conv_value, 4)\n    return output_matrix.tolist()\ninput_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nkernel = np.array([[1, 0], [0, -1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X.dot(w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization_term = alpha * np.sum(w ** 2)\n    ridge_loss_value = mse + regularization_term\n    return round(ridge_loss_value, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Apply the Leaky ReLU activation function to the input.\n\n    Parameters:\n    z (float): The input value to the activation function.\n    alpha (float): The slope for negative inputs. Default is 0.01.\n\n    Returns:\n    float: The output of the Leaky ReLU function.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel (dot product) between two input vectors.\n\n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n\n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    precision_value = true_positives / (true_positives + false_positives)\n    return precision_value"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef compute_gradient(X, y, weights):\n    predictions = X.dot(weights)\n    errors = predictions - y\n    gradient = 2 * X.T.dot(errors) / len(y)\n    return gradient\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    (n_samples, n_features) = X.shape\n    for iteration in range(n_iterations):\n        if method == 'batch':\n            gradient = compute_gradient(X, y, weights)\n            weights -= learning_rate * gradient\n        elif method == 'stochastic':\n            for i in range(n_samples):\n                xi = X[i:i + 1]\n                yi = y[i:i + 1]\n                gradient = compute_gradient(xi, yi, weights)\n                weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            indices = np.random.permutation(n_samples)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for start in range(0, n_samples, batch_size):\n                end = start + batch_size\n                X_mini = X_shuffled[start:end]\n                y_mini = y_shuffled[start:end]\n                gradient = compute_gradient(X_mini, y_mini, weights)\n                weights -= learning_rate * gradient\n        else:\n            raise ValueError(\"Method must be 'batch', 'stochastic', or 'mini-batch'\")\n    weights = np.round(weights, 4)\n    return weights.tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    A = np.array(matrix, dtype=float)\n    (rows, cols) = A.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            return A.tolist()\n        i = r\n        while A[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if cols == lead:\n                    return A.tolist()\n        A[[i, r]] = A[[r, i]]\n        lv = A[r, lead]\n        A[r] = A[r] / lv\n        for i in range(rows):\n            if i != r:\n                lv = A[i, lead]\n                A[i] = A[i] - lv * A[r]\n        lead += 1\n    return A.tolist()\nmatrix = [[1, 2, 1, -1], [3, 6, 2, 0], [2, 4, 1, 1]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        g = np.array(grad(x), dtype=np.float64)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()\ndef grad(x):\n    return 2 * x\nx0 = [1.0, 2.0, 3.0]"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0\n    for iteration in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        error = y_pred - y\n        dw = 1 / n_samples * np.dot(X.T, error) + alpha * np.sign(w)\n        db = 1 / n_samples * np.sum(error)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n        if np.linalg.norm(dw, ord=1) < tol and abs(db) < tol:\n            break\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i][0] = i\n    for j in range(len_target + 1):\n        dp[0][j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[len_source][len_target]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    recall_value = TP / denominator\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention mechanism.\n\n    Parameters:\n    X (numpy.ndarray): Input sequence matrix of shape (sequence_length, input_dim).\n    W_q (numpy.ndarray): Weight matrix for queries of shape (input_dim, attention_dim).\n    W_k (numpy.ndarray): Weight matrix for keys of shape (input_dim, attention_dim).\n    W_v (numpy.ndarray): Weight matrix for values of shape (input_dim, attention_dim).\n\n    Returns:\n    list: Self-attention output as a list rounded to the nearest 4th decimal.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T)\n    d_k = K.shape[-1]\n    attention_scores /= np.sqrt(d_k)\n    attention_weights = np.exp(attention_scores - np.max(attention_scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    attention_output = np.dot(attention_weights, V)\n    attention_output = np.round(attention_output, 4)\n    return attention_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    h_t = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x_t in input_sequence:\n        h_t = np.tanh(np.dot(x_t, Wx) + np.dot(h_t, Wh) + b)\n    h_t_rounded = np.round(h_t, 4)\n    return h_t_rounded.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.array([[x, y, 1] for (x, y) in points])\n    translated_points = homogeneous_points @ translation_matrix.T\n    return translated_points[:, :2].tolist()\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 2\nty = 3\ntranslated_points = translate_object(points, tx, ty)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div\nmu_p = 0.0\nsigma_p = 1.0\nmu_q = 1.0\nsigma_q = 2.0\nkl_div = kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q)"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    num_vars = len(b)\n    if x_ini is None:\n        x = np.zeros(num_vars)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(num_vars):\n            sum_ax = sum((A[i][j] * x[j] for j in range(num_vars) if j != i))\n            x[i] = (b[i] - sum_ax) / A[i][i]\n    x = np.round(x, 4)\n    return x.tolist()\nA = [[4, 1, 2], [3, 5, 1], [1, 1, 3]]\nb = [4, 7, 3]\nn = 10\nx_ini = [0, 0, 0]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(A[i:, i]))\n        if i != max_row:\n            A[[i, max_row]] = A[[max_row, i]]\n            b[[i, max_row]] = b[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] -= factor * A[i, i:]\n            b[j] -= factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()\nA = [[3, 2, -4], [2, 3, 3], [5, -3, 1]]\nb = [3, 15, 14]"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[0]):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((h_t, x_t))\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_hat_t = self.tanh(np.dot(self.Wc, combined) + self.bc)\n            c_t = f_t * c_t + i_t * c_hat_t\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            h_t = o_t * self.tanh(c_t)\n            hidden_states.append(h_t)\n        hidden_states = np.array(hidden_states).reshape(x.shape[0], -1).tolist()\n        hidden_states = [[round(val, 4) for val in state] for state in hidden_states]\n        final_hidden_state = h_t.reshape(-1).tolist()\n        final_hidden_state = [round(val, 4) for val in final_hidden_state]\n        final_cell_state = c_t.reshape(-1).tolist()\n        final_cell_state = [round(val, 4) for val in final_cell_state]\n        return (hidden_states, final_hidden_state, final_cell_state)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    doc_count = len(corpus)\n    df = {term: 0 for term in query}\n    for document in corpus:\n        unique_terms = set(document)\n        for term in query:\n            if term in unique_terms:\n                df[term] += 1\n    idf = {term: np.log((doc_count + 1) / (df[term] + 1)) + 1 for term in query}\n    tf_idf_scores = []\n    for document in corpus:\n        doc_length = len(document)\n        tf_idf_doc = []\n        for term in query:\n            tf = document.count(term) / doc_length if doc_length > 0 else 0\n            tf_idf = tf * idf[term]\n            tf_idf_doc.append(round(tf_idf, 4))\n        tf_idf_scores.append(tf_idf_doc)\n    return np.array(tf_idf_scores).tolist()\ncorpus = [['this', 'is', 'a', 'sample'], ['this', 'is', 'another', 'example', 'example'], ['one', 'more', 'example']]\nquery = ['this', 'example', 'sample', 'not_in_corpus']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    precision = TP / (TP + FP) if TP + FP > 0 else 0\n    recall = TP / (TP + FN) if TP + FN > 0 else 0\n    if precision + recall == 0:\n        return 0.0\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h_prev = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = [h_prev]\n        for t in range(len(x)):\n            x_t = x[t].reshape(-1, 1)\n            h_t = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h_prev) + self.b_h)\n            y_t = np.dot(self.W_hy, h_t) + self.b_y\n            outputs.append(y_t)\n            last_inputs.append(x_t)\n            last_hiddens.append(h_t)\n            h_prev = h_t\n        return (outputs, last_inputs, last_hiddens)\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        loss = 0\n        d_h_next = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(len(input_sequence))):\n            y_t = outputs[t]\n            y_true = expected_output[t].reshape(-1, 1)\n            loss += 0.5 * np.sum((y_t - y_true) ** 2)\n            dy = y_t - y_true\n            dW_hy += np.dot(dy, last_hiddens[t + 1].T)\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + d_h_next\n            dh_raw = (1 - last_hiddens[t + 1] ** 2) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dW_hh += np.dot(dh_raw, last_hiddens[t].T)\n            d_h_next = np.dot(self.W_hh.T, dh_raw)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return loss\ninput_size = 3\nhidden_size = 5\noutput_size = 1\ninput_sequence = [np.random.randn(input_size) for _ in range(10)]\nexpected_output = [np.random.randn(output_size) for _ in range(10)]\nlearning_rate = 0.01\nloss = rnn.backward(input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - np.dot(A, x)\n    p = r.copy()\n    rs_old = np.dot(r, r)\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = rs_old / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        rs_new = np.dot(r, r)\n        if np.sqrt(rs_new) < tol:\n            break\n        p = r + rs_new / rs_old * p\n        rs_old = rs_new\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (unique, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n        row_pointers.append(len(values))\n    return (values, column_indices, row_pointers)\ndense_matrix = [[0, 0, 3, 0], [22, 0, 0, 0], [0, 0, 0, 0], [0, 7, 0, 5]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_vL = sum((v_i * L_i for (v_i, L_i) in zip(v, L)))\n    dot_LL = sum((L_i * L_i for L_i in L))\n    scalar = dot_vL / dot_LL\n    projection = [round(scalar * L_i, 3) for L_i in L]\n    return projection\nv = [3, 4]\nL = [1, 2]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            value = dense_matrix[row][col]\n            if value != 0:\n                values.append(value)\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)\ndense_matrix = [[0, 0, 3], [4, 0, 0], [0, 5, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A, dtype=float)\n    (rows, cols) = A.shape\n    row_echelon = A.copy()\n    pivot_columns = []\n    row = 0\n    for col in range(cols):\n        pivot_row = None\n        for r in range(row, rows):\n            if row_echelon[r, col] != 0:\n                pivot_row = r\n                break\n        if pivot_row is not None:\n            row_echelon[[row, pivot_row]] = row_echelon[[pivot_row, row]]\n            pivot_columns.append(col)\n            row_echelon[row] = row_echelon[row] / row_echelon[row, col]\n            for r in range(rows):\n                if r != row:\n                    row_echelon[r] -= row_echelon[r, col] * row_echelon[row]\n            row += 1\n    basis_vectors = A[:, pivot_columns]\n    basis_vectors = np.round(basis_vectors, 8).tolist()\n    return basis_vectors\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not isinstance(img, list) or (not all((isinstance(row, list) for row in img))):\n        return -1\n    row_length = len(img[0])\n    if any((len(row) != row_length for row in img)):\n        return -1\n    total_brightness = 0\n    num_pixels = 0\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, int) or pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            num_pixels += 1\n    if num_pixels == 0:\n        return -1\n    average_brightness = total_brightness / num_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Inputs must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    mse = np.mean((y_true - y_pred) ** 2)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum((y_true == 1) & (y_pred == 1))\n    union = np.sum((y_true == 1) | (y_pred == 1))\n    if union == 0:\n        return 1.0 if np.all(y_true == 0) and np.all(y_pred == 0) else 0.0\n    jaccard_index_value = intersection / union\n    return round(jaccard_index_value, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 1.0\n    dice = 2 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_random_hv(dim, seed):\n    \"\"\"Generate a random hypervector of given dimensionality using a seed.\"\"\"\n    np.random.seed(seed)\n    return np.random.choice([-1, 1], size=dim)\ndef bind_hvs(hv1, hv2):\n    \"\"\"Bind two hypervectors using element-wise multiplication.\"\"\"\n    return hv1 * hv2\ndef bundle_hvs(hvs):\n    \"\"\"Bundle a list of hypervectors using element-wise summation and thresholding.\"\"\"\n    sum_hv = np.sum(hvs, axis=0)\n    return np.where(sum_hv >= 0, 1, -1)\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"Create a composite hypervector for a dataset row.\"\"\"\n    bound_hvs = []\n    for (feature, value) in row.items():\n        feature_hv = create_random_hv(dim, random_seeds[feature])\n        value_hv = create_random_hv(dim, random_seeds[feature] + hash(value))\n        bound_hv = bind_hvs(feature_hv, value_hv)\n        bound_hvs.append(bound_hv)\n    composite_hv = bundle_hvs(bound_hvs)\n    return composite_hv.tolist()\nrow = {'feature1': 'value1', 'feature2': 'value2'}\ndim = 10000\nrandom_seeds = {'feature1': 42, 'feature2': 84}\ncomposite_hv = create_row_hv(row, dim, random_seeds)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    true_positive = 0\n    true_negative = 0\n    false_positive = 0\n    false_negative = 0\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            true_positive += 1\n        elif y_true == 0 and y_pred == 0:\n            true_negative += 1\n        elif y_true == 0 and y_pred == 1:\n            false_positive += 1\n        elif y_true == 1 and y_pred == 0:\n            false_negative += 1\n    confusion_matrix = [[true_positive, false_negative], [false_positive, true_negative]]\n    return confusion_matrix\ndata = [[1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors must not have zero magnitude.')\n    cosine_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('The length of actual and predicted lists must be the same.')\n    true_positive = false_positive = true_negative = false_negative = 0\n    for (a, p) in zip(actual, predicted):\n        if a == 1 and p == 1:\n            true_positive += 1\n        elif a == 0 and p == 1:\n            false_positive += 1\n        elif a == 0 and p == 0:\n            true_negative += 1\n        elif a == 1 and p == 0:\n            false_negative += 1\n    confusion_matrix = [[true_positive, false_positive], [false_negative, true_negative]]\n    total = len(actual)\n    accuracy = (true_positive + true_negative) / total\n    precision = true_positive / (true_positive + false_positive) if true_positive + false_positive > 0 else 0\n    recall = true_positive / (true_positive + false_negative) if true_positive + false_negative > 0 else 0\n    f1_score = 2 * precision * recall / (precision + recall) if precision + recall > 0 else 0\n    specificity = true_negative / (true_negative + false_positive) if true_negative + false_positive > 0 else 0\n    negative_predictive_value = true_negative / (true_negative + false_negative) if true_negative + false_negative > 0 else 0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1]\npredicted = [1, 0, 1, 0, 0, 0, 1, 1, 0, 1]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode_result = stats.mode(data)\n    mode = mode_result.mode[0] if mode_result.count[0] > 0 else None\n    variance = np.var(data, ddof=1)\n    standard_deviation = np.std(data, ddof=1)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    interquartile_range = percentile_75 - percentile_25\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(interquartile_range, 4)}\n    return result\ndata = [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coefficient = math.comb(n, k)\n    probability = binomial_coefficient * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = 1 / (std_dev * math.sqrt(2 * math.pi)) * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if k < 0 or lam < 0:\n        raise ValueError('Both k and lam must be non-negative.')\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, which is the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if not isinstance(img, np.ndarray):\n        raise TypeError('Input must be a numpy.ndarray.')\n    if img.ndim != 2:\n        raise ValueError('Input must be a 2D array representing a grayscale image.')\n    max_pixel_value = np.max(img)\n    min_pixel_value = np.min(img)\n    contrast = max_pixel_value - min_pixel_value\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if not isinstance(vec1, np.ndarray) or not isinstance(vec2, np.ndarray):\n        raise ValueError('Both inputs must be numpy arrays.')\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if vec1.shape != vec2.shape:\n        raise ValueError('Both vectors must have the same length.')\n    dot_product = np.dot(vec1, vec2)\n    return dot_product"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        features = [round(x ** d, 8) for d in range(degree + 1)]\n        transformed_data.append(features)\n    return transformed_data\ndata = [1.0, 2.0, 3.0]\ndegree = 3"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_enc = np.zeros((position, d_model), dtype=np.float32)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pos_enc[pos, i] = np.sin(pos / 10000 ** (i / d_model))\n            else:\n                pos_enc[pos, i] = np.cos(pos / 10000 ** ((i - 1) / d_model))\n    pos_enc = pos_enc.astype(np.float16)\n    return pos_enc.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter_update = learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = parameter - parameter_update\n    updated_parameter = np.round(updated_parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef multi_head_attention(x, hparams, params):\n    return x\ndef feed_forward_network(x, params):\n    return x\ndef layer_norm(x, params):\n    g = params['ln_f']['g']\n    b = params['ln_f']['b']\n    mean = np.mean(x, axis=-1, keepdims=True)\n    std = np.std(x, axis=-1, keepdims=True)\n    return g * (x - mean) / (std + 1e-05) + b\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    context = np.array([params['wte'][token_id] for token_id in token_ids])\n    position_ids = np.arange(len(token_ids))\n    position_embeddings = params['wpe'][position_ids]\n    context += position_embeddings\n    for _ in range(n_tokens_to_generate):\n        attention_output = multi_head_attention(context, hparams, params)\n        ff_output = feed_forward_network(attention_output, params)\n        normalized_output = layer_norm(ff_output, params)\n        next_token_embedding = params['wte'][np.random.choice(len(params['wte']))]\n        context = np.vstack([context, next_token_embedding])\n    generated_token_ids = [np.argmax(embedding) for embedding in context]\n    generated_text = encoder.decode(generated_token_ids)\n    return generated_text\nprompt = 'hello'\ngenerated_text = gen_text(prompt, n_tokens_to_generate=5)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    enhanced_patterns = []\n    crystal_values = np.array(crystal_values)\n    for i in range(n):\n        relationships = np.dot(crystal_values, crystal_values[i])\n        attention_scores = softmax(relationships)\n        weighted_pattern = np.sum(attention_scores[:, np.newaxis] * crystal_values, axis=0)\n        enhanced_patterns.append(weighted_pattern)\n    flattened_patterns = [round(val, 4) for pattern in enhanced_patterns for val in pattern]\n    return flattened_patterns\nn = 3\ncrystal_values = [[1, 2], [3, 4], [5, 6]]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    avg_doc_length = np.mean([len(doc.split()) for doc in corpus])\n    doc_freq = Counter()\n    for doc in corpus:\n        unique_terms = set(doc.split())\n        for term in unique_terms:\n            doc_freq[term] += 1\n    N = len(corpus)\n    idf = {}\n    for term in query.split():\n        df = doc_freq.get(term, 0)\n        idf[term] = np.log((N - df + 0.5) / (df + 0.5) + 1)\n    scores = []\n    for doc in corpus:\n        doc_length = len(doc.split())\n        term_freq = Counter(doc.split())\n        score = 0.0\n        for term in query.split():\n            if term in term_freq:\n                tf = term_freq[term]\n                numerator = tf * (k1 + 1)\n                denominator = tf + k1 * (1 - b + b * (doc_length / avg_doc_length))\n                score += idf[term] * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores\ncorpus = ['the quick brown fox', 'jumped over the lazy dog', 'the quick dog', 'the brown dog jumped']"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positive = 0\n    false_positive = 0\n    false_negative = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            true_positive += 1\n        elif true == 0 and pred == 1:\n            false_positive += 1\n        elif true == 1 and pred == 0:\n            false_negative += 1\n    precision = true_positive / (true_positive + false_positive) if true_positive + false_positive > 0 else 0\n    recall = true_positive / (true_positive + false_negative) if true_positive + false_negative > 0 else 0\n    if precision + recall == 0:\n        f1_score = 0\n    else:\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption_data[i - 1] - fluctuation)\n    days = np.arange(1, 11).reshape(-1, 1)\n    detrended_data = np.array(detrended_data).reshape(-1, 1)\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15 = np.array([[15]])\n    base_consumption_day_15 = model.predict(day_15)[0][0]\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    total_consumption_day_15 = math.ceil(total_consumption_day_15)\n    safety_margin = math.ceil(total_consumption_day_15 * 0.05)\n    final_consumption = total_consumption_day_15 + safety_margin\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the queries, keys, and values matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention for a single head.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute the multi-head attention.\n    \"\"\"\n    d_model = X.shape[-1]\n    assert d_model % n_heads == 0, 'd_model must be divisible by n_heads'\n    d_head = d_model // n_heads\n    W_q_split = np.split(W_q, n_heads, axis=-1)\n    W_k_split = np.split(W_k, n_heads, axis=-1)\n    W_v_split = np.split(W_v, n_heads, axis=-1)\n    heads_output = []\n    for i in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q_split[i], W_k_split[i], W_v_split[i])\n        head_output = self_attention(Q, K, V)\n        heads_output.append(head_output)\n    concatenated_output = np.concatenate(heads_output, axis=-1)\n    rounded_output = np.round(concatenated_output, 4)\n    return rounded_output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must have the same length.')\n    n00 = n01 = n10 = n11 = 0\n    for (xi, yi) in zip(x, y):\n        if xi == 0 and yi == 0:\n            n00 += 1\n        elif xi == 0 and yi == 1:\n            n01 += 1\n        elif xi == 1 and yi == 0:\n            n10 += 1\n        elif xi == 1 and yi == 1:\n            n11 += 1\n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n01 + n00) * (n10 + n00)) ** 0.5\n    if denominator == 0:\n        raise ValueError('Denominator is zero, cannot calculate Phi coefficient.')\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [0, 1, 0, 1, 1, 0, 1, 0]\ny = [1, 0, 0, 1, 1, 0, 0, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0, min(1, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to the 4th decimal place\n    \"\"\"\n    if x > 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 709:\n        return round(x, 4)\n    elif x < -745:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log1p(math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    softsign_value = x / (1 + abs(x))\n    return round(softsign_value, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate_objective = np.minimum(rhos * A, clipped_rhos * A)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    grpo_objective_value = np.sum(surrogate_objective) - beta * kl_divergence\n    return round(grpo_objective_value, 6)\nrhos = [1.1, 0.9, 1.05]\nA = [0.5, 0.2, 0.3]\npi_theta_old = [0.4, 0.3, 0.3]\npi_theta_ref = [0.35, 0.35, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    sigmoid_x = 1 / (1 + math.exp(-x))\n    swish_value = x * sigmoid_x\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    exp_z = np.exp(z - np.max(z, axis=1, keepdims=True))\n    return exp_z / np.sum(exp_z, axis=1, keepdims=True)\ndef cross_entropy_loss(y_true, y_pred):\n    m = y_true.shape[0]\n    log_likelihood = -np.log(y_pred[range(m), y_true])\n    loss = np.sum(log_likelihood) / m\n    return loss\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = np.max(y) + 1\n    B = np.random.randn(n_features, n_classes)\n    losses = []\n    for i in range(iterations):\n        logits = np.dot(X, B)\n        y_pred = softmax(logits)\n        loss = cross_entropy_loss(y, y_pred)\n        losses.append(round(loss, 4))\n        y_one_hot = np.zeros((n_samples, n_classes))\n        y_one_hot[np.arange(n_samples), y] = 1\n        gradient = np.dot(X.T, y_pred - y_one_hot) / n_samples\n        B -= learning_rate * gradient\n    B_rounded = np.round(B, 4)\n    return (B_rounded.tolist(), losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross Entropy loss.\"\"\"\n    y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n    loss = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    return loss\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    loss_values = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = sigmoid(linear_model)\n        loss = binary_cross_entropy(y, y_pred)\n        loss_values.append(round(loss, 4))\n        dw = np.dot(X.T, y_pred - y) / n_samples\n        db = np.mean(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights.tolist(), bias, loss_values)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.dot(Q, K.T)\n    d_k = K.shape[-1]\n    scores /= np.sqrt(d_k)\n    scores = np.where(mask, scores, -np.inf)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()\nmask = np.array([[True, False, False, False, False], [True, True, False, False, False], [True, True, True, False, False], [True, True, True, True, False], [True, True, True, True, True]])\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    assert X.ndim == 3, 'Input tensor X must be a 3D array'\n    assert gamma.ndim == 1 and beta.ndim == 1, 'Gamma and Beta must be 1D arrays'\n    assert X.shape[2] == gamma.shape[0] == beta.shape[0], 'Feature dimension of X must match size of gamma and beta'\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_scaled_shifted = gamma * X_normalized + beta\n    return np.round(X_scaled_shifted, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    ref_count = Counter(ref_tokens)\n    cand_count = Counter(cand_tokens)\n    matches = sum((min(ref_count[word], cand_count[word]) for word in cand_count))\n    precision = matches / len(cand_tokens) if len(cand_tokens) > 0 else 0\n    recall = matches / len(ref_tokens) if len(ref_tokens) > 0 else 0\n    if precision + recall > 0:\n        f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    else:\n        f_mean = 0\n    chunks = 0\n    last_match_index = -1\n    for (i, word) in enumerate(cand_tokens):\n        if word in ref_tokens:\n            ref_index = ref_tokens.index(word)\n            if ref_index != last_match_index + 1:\n                chunks += 1\n            last_match_index = ref_index\n    frag_penalty = gamma * (chunks / matches) if matches > 0 else 1\n    meteor = f_mean * (1 - frag_penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    if p_xy == 0 or p_x == 0 or p_y == 0:\n        return 0.0\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(xi - min_val) / (max_val - min_val) for xi in x]\n    return [round(num, 4) for num in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef relu(x):\n    return np.maximum(0, x)\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(x, w1)\n    a1 = relu(z1)\n    z2 = np.dot(a1, w2)\n    a2 = relu(z2)\n    shortcut = x + a2\n    output = relu(shortcut)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: 1D array of shape (channels,) containing the average of each feature map.\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array of shape (height, width, channels)')\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_scaled_shifted = gamma.reshape(1, -1, 1, 1) * X_normalized + beta.reshape(1, -1, 1, 1)\n    return np.round(X_scaled_shifted, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative_value = c * n * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n\n    def normalize(v):\n        norm = np.linalg.norm(v)\n        if norm < tol:\n            return None\n        return v / norm\n\n    def project(u, v):\n        return np.dot(v, u) / np.dot(u, u) * u\n    orthonormal_vectors = []\n    for v in vectors:\n        v = np.array(v)\n        for u in orthonormal_vectors:\n            v = v - project(u, v)\n        normalized_v = normalize(v)\n        if normalized_v is not None:\n            orthonormal_vectors.append(normalized_v)\n    orthonormal_vectors = [np.round(vec, 4).tolist() for vec in orthonormal_vectors]\n    return orthonormal_vectors\nvectors = [[1, 1], [1, 0]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    cross_prod = np.cross(a, b)\n    cross_prod_rounded = np.round(cross_prod, 4)\n    return cross_prod_rounded.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = np.copy(A)\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    x = np.round(x, 4)\n    return x.tolist()\nA = [[2, -1, 0], [1, 2, 1], [3, 0, 1]]\nb = [1, 2, 3]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    bc = sum((np.sqrt(p_i * q_i) for (p_i, q_i) in zip(p, q)))\n    try:\n        distance = -np.log(bc)\n    except ValueError:\n        return 0.0\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = [a[i] + b[i] for i in range(len(a))]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each set of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        G = 0\n        returns = []\n        for (_, _, reward) in reversed(episode):\n            G = reward + G\n            returns.insert(0, G)\n        for (t, (state, action, _)) in enumerate(episode):\n            policy = softmax(theta[state, :])\n            grad_log_policy = np.zeros_like(theta)\n            grad_log_policy[state, action] = 1\n            grad_log_policy[state, :] -= policy\n            gradient += grad_log_policy * returns[t]\n    gradient /= len(episodes)\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()\ntheta = np.array([[0.2, 0.5, 0.3], [0.1, 0.7, 0.2]])\nepisodes = [[(0, 1, 1.0), (1, 2, 0.5)], [(0, 0, 0.5), (1, 1, 1.0)]]\ngradient = compute_policy_gradient(theta, episodes)"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of an MoE layer compared to a dense layer.\n\n    Parameters:\n    n_experts (int): Number of experts in the MoE layer.\n    k_active (int): Number of active experts in the MoE layer.\n    d_in (int): Input dimension.\n    d_out (int): Output dimension.\n\n    Returns:\n    float: Percentage savings in FLOPs.\n    \"\"\"\n    flops_dense = d_in * d_out\n    flops_moe = k_active * (d_in * d_out)\n    savings = (flops_dense - flops_moe) / flops_dense * 100\n    savings_rounded = round(savings, 1)\n    return savings_rounded\nk_active = 2\nd_in = 512\nd_out = 1024"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    logits = np.dot(X, W_g)\n    noisy_logits = logits + np.dot(N, W_noise)\n    topk_indices = np.argsort(noisy_logits, axis=1)[:, -k:]\n    mask = np.zeros_like(noisy_logits, dtype=bool)\n    np.put_along_axis(mask, topk_indices, True, axis=1)\n    topk_logits = np.where(mask, noisy_logits, -np.inf)\n    max_logits = np.max(topk_logits, axis=1, keepdims=True)\n    exp_logits = np.exp(topk_logits - max_logits)\n    sum_exp_logits = np.sum(exp_logits, axis=1, keepdims=True)\n    gating_probs = exp_logits / sum_exp_logits\n    gating_probs_rounded = np.round(gating_probs, 4)\n    return gating_probs_rounded.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gating_scores = np.dot(x, Wg)\n    gating_probs = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=-1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=-1)[:, -top_k:]\n    output = np.zeros((x.shape[0], We.shape[1]))\n    for i in range(x.shape[0]):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_output = np.dot(x[i], We[expert_idx])\n            output[i] += gating_probs[i, expert_idx] * expert_output\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of groups must divide the number of channels evenly'\n    channels_per_group = C // num_groups\n    X = X.reshape(B, num_groups, channels_per_group, H, W)\n    mean = X.mean(axis=(2, 3, 4), keepdims=True)\n    variance = X.var(axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    out = gamma * X_normalized + beta\n    out = np.round(out, 4)\n    return out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def derivative(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = derivative(x)\n        new_x = x - learning_rate * grad\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    transformed = gamma * np.tanh(alpha * x + beta)\n    rounded_transformed = np.round(transformed, 4)\n    result_list = rounded_transformed.tolist()\n    return result_list\nx = np.array([0.1, 0.5, -0.3, 0.7])\nalpha = 1.0\ngamma = 1.0\nbeta = 0.0"}
