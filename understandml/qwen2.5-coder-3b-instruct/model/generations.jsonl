{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularized) Linear Regression using its closed-form solution.\n\n    Given an ndarray where the last column is the target `y` and all preceding columns are the features `X`,\n    add a bias (intercept) term, then compute the weight vector:\n\n    .. math::\n        \\hat{\\mathbf{w}} = (\\mathbf{X}^\\top\\mathbf{X} + \\alpha\\,\\mathbf{I})^{-1}\\,\\mathbf{X}^\\top\\mathbf{y},\n\n    where `alpha >= 0` is the regularization strength and `mathbf{I}` is the identity matrix with a size equal to the number of columns in `X` (after adding the bias).\n\n    If the matrix `(\\mathbf{X}^\\top\\mathbf{X} + \\alpha\\,\\mathbf{I})` is not invertible (numerical determinant equal to 0), return -1.\n\n    Return the weight vector rounded to 4 decimal places as a Python list.\n    \"\"\"\n    # Add a bias term to the data\n    num_samples, num_features = data.shape\n    X_with_bias = np.c_[np.ones((num_samples, 1)), data]\n    \n    # Compute the closed-form solution for Ridge regression\n    try:\n        # Calculate the inverse of (X^T * X + alpha * I)\n        inv_term = np.linalg.inv(X_with_bias.T.dot(X_with_bias) + alpha * np.eye(num_features + 1))\n        \n        # Calculate the weight vector\n        w = inv_term.dot(X_with_bias.T).dot(data[:, -1])\n        \n        # Round the weights to 4 decimal places\n        rounded_w = [round(w_i, 4) for w_i in w]\n        \n        return rounded_w\n    \n    except np.linalg.LinAlgError:\n        # Return -1 if the matrix is not invertible\n        return [-1]\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nalpha = 0.1\nprint(ridge_regression(data, alpha))\n```\n\nThis function first adds a bias term to the input data. It then computes the closed-form solution for Ridge regression using the formula provided. If the matrix `(X^T * X + alpha * I)` is not invertible, it catches the `LinAlgError` exception and returns `-1`. Otherwise, it calculates the weight vector, rounds each component to four decimal places, and returns the result as a list."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    \n    # Initialize alpha and bias\n    alpha = np.zeros(n_samples)\n    b = 0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    # Perform the perceptron learning algorithm\n    for _ in range(n_iter):\n        all_updated = True\n        for i in range(n_samples):\n            # Calculate the activation\n            activation = np.sum(alpha * y_train * K[:, i])\n            \n            # Check if the margin is <= 0\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and bias\n                alpha[i] += eta\n                b += eta * y_train[i]\n                all_updated = False\n        \n        # Break if no updates were made\n        if all_updated:\n            break\n    \n    # Compute the primal weight vector w\n    w = np.dot(alpha, X_train)\n    \n    # Round the results to 4 decimal places\n    w_rounded = [round(val, 4) for val in w.tolist()]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n\n# Example usage:\n# X_train = np.array([[1, 2], [-1, -2], [2, 3], [-2, -3]])\n# y_train = np.array([1, -1, 1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(f\"Weight vector: {w}\")\n# print(f\"Bias: {b}\")\n```\n\n### Explanation:\n1. **Initialization**: We initialize `alpha` and `b` to zero.\n2. **Gram Matrix**: We compute the Gram matrix `K` which is the dot product of the training samples.\n3. **Perceptron Algorithm**: We iterate over each sample, calculate the activation using the current values of `alpha` and `b`. If the margin is less than or equal to zero, we update `alpha` and `b` accordingly.\n4. **Termination**: We stop if no updates are made in an iteration, which indicates convergence.\n5. **Primal Weight Vector**: We compute the primal weight vector `w` using the final `alpha`.\n6. **Rounding**: Finally, we round the weight vector and bias to four decimal places before returning them.\n\nThis implementation assumes that the input data is linearly separable, as required by the perceptron algorithm."}
{"task_id": 2, "completion_id": 0, "completion": "To implement the standard GLM link functions, we need to define three functions for each link:\n\n1. **Identity Link**: \\( g(\\mu) = \\mu \\)\n2. **Log Link**: \\( g(\\mu) = \\log(\\mu) \\)\n3. **Logit Link**: \\( g(\\mu) = \\log\\left(\\frac{\\mu}{1-\\mu}\\right) \\)\n\nEach of these functions should handle both scalar and array inputs efficiently using NumPy's broadcasting capabilities.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        \"\"\"Link function for the identity link.\"\"\"\n        return mu\n    \n    def log_link(mu):\n        \"\"\"Link function for the log link.\"\"\"\n        return np.log(mu)\n    \n    def logit_link(mu):\n        \"\"\"Link function for the logit link.\"\"\"\n        return np.log(mu / (1 - mu))\n    \n    def identity_inv_link(eta):\n        \"\"\"Inverse link function for the identity link.\"\"\"\n        return eta\n    \n    def log_inv_link(eta):\n        \"\"\"Inverse link function for the log link.\"\"\"\n        return np.exp(eta)\n    \n    def logit_inv_link(eta):\n        \"\"\"Inverse link function for the logit link.\"\"\"\n        return 1 / (1 + np.exp(-eta))\n    \n    def identity_derivative(mu):\n        \"\"\"Derivative of the link function for the identity link.\"\"\"\n        return np.ones_like(mu)\n    \n    def log_derivative(mu):\n        \"\"\"Derivative of the link function for the log link.\"\"\"\n        return 1 / mu\n    \n    def logit_derivative(mu):\n        \"\"\"Derivative of the link function for the logit link.\"\"\"\n        return mu / (1 - mu)**2\n    \n    # Create the dictionary with all required functions\n    links = {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n    \n    return links\n\n# Example usage\nlinks = glm_links()\n\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"mu:\", mu)\nprint(\"eta:\", eta)\nprint(\"mu2:\", mu2)\n```\n\n### Explanation:\n- **Identity Link**: This is simply the identity function, so it returns `mu` directly.\n- **Log Link**: The natural logarithm of `mu`.\n- **Logit Link**: The log of the odds ratio, which is \\(\\log\\left(\\frac{mu}{1-mu}\\right)\\).\n  \nThe inverse link functions (`inv_link`) are the inverses of these link functions:\n- **Identity Inv Link**: Returns `eta` directly.\n- **Log Inv Link**: Exponentiates `eta` to get back `mu`.\n- **Logit Inv Link**: Applies the logistic function to `eta`.\n\nThe derivatives are also implemented:\n- **Identity Derivative**: Always returns 1, since the derivative of the identity function is constant.\n- **Log Derivative**: Returns \\( \\frac{1}{\\mu} \\).\n- **Logit Derivative**: Returns \\( \\frac{\\mu}{(1-\\mu)^2} \\).\n\nThis implementation ensures that all functions handle both scalar and array inputs efficiently."}
{"task_id": 3, "completion_id": 0, "completion": "To solve the problem of computing the depth of the leaf reached by every sample in a random isolation tree, we need to follow these steps:\n\n1. Set the random seed to ensure reproducibility.\n2. Implement the logic for building the isolation tree recursively.\n3. Traverse the tree to compute the depth of each leaf for each sample.\n4. Return the list of depths.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    def build_isolation_tree(indices):\n        if len(indices) < 3:\n            return Counter({tuple(indices): 1})\n        \n        f = np.random.randint(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        \n        left_counts = build_isolation_tree(left_indices)\n        right_counts = build_isolation_tree(right_indices)\n        \n        return left_counts + right_counts\n    \n    depths = []\n    \n    for i in range(data.shape[0]):\n        indices = np.array([i], dtype=int)\n        counts = build_isolation_tree(indices)\n        depth = len(counts.keys())\n        depths.append(depth)\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\n\n### Explanation:\n\n1. **Random Seed**: We use `np.random.seed(0)` to ensure that the random splits are deterministic and reproducible.\n\n2. **Tree Construction**: The `build_isolation_tree` function constructs the isolation tree recursively:\n   - If the number of samples (`len(indices)`) is less than 3, it returns a counter with the current indices as the key and a count of 1.\n   - Otherwise, it selects a random feature and splits the samples based on the minimum and maximum values of that feature.\n   - It recursively builds the left and right subtrees and combines their results.\n\n3. **Depth Calculation**: For each sample, we generate its indices, build the tree, and determine the depth by counting the number of keys in the resulting counter.\n\n4. **Result Collection**: We collect the depths for each sample and return them as a list.\n\nThis implementation ensures that the tree is built correctly and that the depth of each leaf is computed accurately."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of finding frequent itemsets using the Apriori algorithm, we need to follow these steps:\n\n1. Calculate the total number of transactions.\n2. Compute the minimum support threshold based on the input `minsup`.\n3. Generate all possible candidate itemsets of size 1.\n4. Filter out infrequent itemsets from step 3.\n5. Use the filtered itemsets to generate candidate itemsets of size 2, 3, etc., until no more candidates can be generated.\n6. Count the support of each itemset.\n7. Return the itemsets that meet the minimum support threshold.\n\nHere's the implementation of the `find_frequent_itemsets` function:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Step 1: Calculate the total number of transactions\n    total_transactions = len(transactions)\n    \n    # Step 2: Compute the minimum support threshold\n    min_support_threshold = math.ceil(minsup * total_transactions)\n    \n    # Step 3: Generate all possible candidate itemsets of size 1\n    itemsets_1 = { frozenset([item]) for transaction in transactions for item in transaction }\n    \n    # Step 4: Filter out infrequent itemsets from step 3\n    frequent_itemsets_1 = { itemset: sum(1 for transaction in transactions if itemset <= transaction) for itemset in itemsets_1 if sum(1 for transaction in transactions if itemset <= transaction) >= min_support_threshold }\n    \n    # Step 5: Use the filtered itemsets to generate candidate itemsets of size 2, 3, etc., until no more candidates can be generated\n    k = 2\n    while True:\n        itemsets_k = set()\n        for itemset in frequent_itemsets_1:\n            for combination in combinations(itemset, k):\n                new_itemset = frozenset(combination)\n                itemsets_k.add(new_itemset)\n        \n        # Filter out infrequent itemsets from step 5\n        frequent_itemsets_k = { itemset: sum(1 for transaction in transactions if itemset <= transaction) for itemset in itemsets_k if sum(1 for transaction in transactions if itemset <= transaction) >= min_support_threshold }\n        \n        # Check if there are no more frequent itemsets\n        if not frequent_itemsets_k:\n            break\n        \n        # Update the frequent itemsets\n        frequent_itemsets_1 = frequent_itemsets_k\n        k += 1\n    \n    # Step 6: Count the support of each itemset\n    # This step is redundant because we already computed it in step 4 and 5\n    # frequent_itemsets = frequent_itemsets_1\n    \n    # Step 7: Return the itemsets that meet the minimum support threshold\n    return frequent_itemsets_1\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\n### Explanation:\n- **Step 1**: We calculate the total number of transactions.\n- **Step 2**: We compute the minimum support threshold.\n- **Step 3**: We generate all possible candidate itemsets of size 1.\n- **Step 4**: We filter out infrequent itemsets from step 3.\n- **Step 5**: We use the filtered itemsets to generate candidate itemsets of size 2, 3, etc., until no more candidates can be generated.\n- **Step 6**: We count the support of each itemset.\n- **Step 7**: We return the itemsets that meet the minimum support threshold.\n\nThis implementation efficiently finds all frequent itemsets using the Apriori algorithm, adhering to the constraints and requirements specified."}
{"task_id": 11, "completion_id": 0, "completion": "Here's the implementation of the K-Means clustering algorithm from scratch in Python:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the centers randomly\n    if k > data.shape[0]:\n        raise ValueError(\"Number of clusters cannot exceed the number of samples.\")\n    \n    centers = data[:k].copy()\n    \n    # Step 2: Iterate until convergence or max_iterations reached\n    for _ in range(max_iter):\n        # Step 2a: Assign each sample to the nearest center\n        distances = np.linalg.norm(data[:, np.newaxis] - centers[np.newaxis], axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2b: Re-compute the centers\n        new_centers = []\n        for i in range(k):\n            # Find samples in the current cluster\n            cluster_samples = data[labels == i]\n            \n            # If the cluster is empty, reinitialize it\n            if cluster_samples.size == 0:\n                new_center = data[np.random.randint(0, data.shape[0])]\n            else:\n                new_center = np.mean(cluster_samples, axis=0)\n            \n            # Round the new center to 4 decimal places\n            new_center_rounded = np.round(new_center, decimals=4)\n            new_centers.append(new_center_rounded.tolist())\n        \n        # Convert the list of lists to a NumPy array for comparison\n        new_centers = np.array(new_centers)\n        \n        # Check for convergence\n        if np.allclose(centers, new_centers, atol=epsilon):\n            break\n        \n        # Update the centers\n        centers = new_centers\n    \n    return centers.tolist(), labels.tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 4], [5, 6], [6, 7]])\n# k = 2\n# centers, labels = kmeans(data, k)\n# print(\"Centers:\", centers)\n# print(\"Labels:\", labels)\n```\n\n### Explanation:\n1. **Initialization**: The initial centers are chosen randomly from the first `k` samples of the input data.\n\n2. **Iteration**: \n   - Each sample is assigned to the nearest center based on the squared Euclidean distance.\n   - The centers are updated by computing the mean of all samples in each cluster.\n   - If a cluster becomes empty after updating, a new center is initialized randomly from the entire dataset.\n\n3. **Convergence**: The algorithm stops when the maximum change in any center position is less than `epsilon` or when the maximum number of iterations (`max_iter`) is reached.\n\n4. **Output**: The function returns the list of final centers rounded to four decimal places and the corresponding cluster labels for each sample."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender in pure Python using NumPy, we need to follow the steps outlined in the task description. Below is the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    if n_users <= 1:\n        return []\n    \n    # Step 1: Build the item-item similarity matrix\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            common_users = np.intersect1d(np.where(data[:, i] > 0)[0], np.where(data[:, j] > 0)[0])\n            \n            if len(common_users) > 0:\n                v1 = data[common_users, i].astype(float)\n                v2 = data[common_users, j].astype(float)\n                \n                if criterion == 'cosine':\n                    mean_v1 = np.mean(v1)\n                    std_v1 = np.std(v1)\n                    mean_v2 = np.mean(v2)\n                    std_v2 = np.std(v2)\n                    \n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1_centered = v1 - mean_v1\n                        v2_centered = v2 - mean_v2\n                        \n                        numerator = np.dot(v1_centered, v2_centered)\n                        denominator = np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered)\n                        \n                        S[i, j] = numerator / denominator\n                        S[j, i] = numerator / denominator\n                    else:\n                        S[i, j] = 0\n                        S[j, i] = 0\n                \n                elif criterion == 'pearson':\n                    corr_matrix = np.corrcoef(v1, v2)\n                    S[i, j] = corr_matrix[0, 1]\n                    S[j, i] = corr_matrix[0, 1]\n    \n    # Step 2: Collect the indices of items already rated by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Predict the attractiveness of each yet unrated item\n    predictions = {}\n    \n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            \n            if denominator == 0:\n                score = 0\n            else:\n                score = numerator / denominator\n            \n            predictions[t] = score\n    \n    # Step 4: Sort the predictions and return the top k items\n    sorted_predictions = sorted(predictions.items(), key=lambda x: (-x[1], x[0]))\n    \n    return [item for item, _ in sorted_predictions[:k]]\n\n# Example usage:\n# data = np.array([\n#     [5, 3, 0, 1],\n#     [4, 0, 0, 1],\n#     [1, 1, 0, 5],\n#     [1, 0, 0, 4],\n#     [0, 1, 5, 4]\n# ])\n# user_ind = 0\n# k = 3\n# print(knn_recommend(data, user_ind, k))  # Output: [2, 3, 4]\n```\n\n### Explanation:\n1. **Building the Similarity Matrix**: We iterate over all pairs of items and find the common users who rated both items. Depending on the criterion, we calculate either the cosine similarity or the Pearson correlation.\n\n2. **Collecting Rated Items**: We identify which items the active user has already rated.\n\n3. **Predicting Attractiveness**: For each unrated item, we calculate the predicted attractiveness using the formula provided in the task description.\n\n4. **Sorting and Returning Results**: We sort the predictions based on their scores and return the indices of the top `k` items.\n\nThis implementation ensures that the recommendations are based on the similarity between items and the user's past behavior."}
{"task_id": 19, "completion_id": 0, "completion": "To solve the problem of finding the best split for a gradient boosting tree, we need to follow these steps:\n\n1. Iterate over each feature and each unique threshold within that feature.\n2. For each threshold, split the data into two subsets: one for instances where the feature value is less than or equal to the threshold (`left_child`) and another for instances where the feature value is greater than the threshold (`right_child`).\n3. Calculate the loss for the original dataset (`loss_original`), the left child (`loss_left`), and the right child (`loss_right`).\n4. Compute the gain for the split using the formula provided.\n5. Keep track of the split with the highest positive gain.\n6. Return the split with the highest positive gain or `None` if no such split exists.\n\nHere's the implementation of the `best_split` function:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    max_gain = -np.inf\n    best_feature = -1\n    best_threshold = -1\n\n    n_samples, n_features = X.shape\n\n    for feature_idx in range(n_features):\n        unique_thresholds = np.unique(X[:, feature_idx])\n\n        for threshold in unique_thresholds:\n            # Create masks for left and right children\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n\n            # Check if both children have at least two samples\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n\n            # Calculate the loss for the original dataset\n            loss_original = -0.5 * (np.sum(g[left_mask]**2) / (np.sum(h[left_mask]) + lam)) + gamma\n            loss_original += -0.5 * (np.sum(g[right_mask]**2) / (np.sum(h[right_mask]) + lam)) + gamma\n\n            # Calculate the loss for the left child\n            loss_left = -0.5 * (np.sum(g[left_mask]**2) / (np.sum(h[left_mask]) + lam)) + gamma\n\n            # Calculate the loss for the right child\n            loss_right = -0.5 * (np.sum(g[right_mask]**2) / (np.sum(h[right_mask]) + lam)) + gamma\n\n            # Calculate the gain\n            gain = loss_original - loss_left - loss_right\n\n            # Update the best split if this gain is larger\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n\n    # If no positive gain was found, return None\n    if max_gain <= 0:\n        return None\n\n    return best_feature, best_threshold\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# g = np.array([1, 2, 3, 4])\n# h = np.array([1, 2, 3, 4])\n# gamma = 0.1\n# lam = 0.1\n# print(best_split(X, g, h, gamma, lam))\n```\n\nThis function iterates through each feature and each unique threshold, calculates the gain for each split, and keeps track of the split with the highest positive gain. If no such split exists, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array\n    x = np.array(x)\n    \n    # Compute the sigmoid values\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, decimals=4)\n    gradient_x_rounded = np.round(gradient_x, decimals=4)\n    \n    # Check if the input was a scalar and return appropriate types\n    if x.size == 1:\n        return (float(sigmoid_x_rounded[0]), float(gradient_x_rounded[0]))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())\n\n# Example usage:\nprint(sigmoid_activation(0))          # Output: (0.5000, 0.2500)\nprint(sigmoid_activation([0, 1]))      # Output: ([0.5000, 0.7311], [0.2500, 0.1966])\nprint(sigmoid_activation([[0, 1], [-1, 0]]))  # Output: ([[0.5000, 0.7311], [0.2689, 0.5000]], [[0.2500, 0.1966], [0.2689, 0.5000]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "To implement a from-scratch version of the AdaBoost algorithm using one-dimensional decision stumps, we need to follow the steps outlined in the problem description. Here's how you can implement the `adaboost_1d_predict` function:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Step 1: Initialize sample weights uniformly\n    n_samples = len(y_train)\n    w = np.ones(n_samples) / n_samples\n    \n    # Step 2: Initialize the ensemble\n    H = []\n    \n    while True:\n        # Step 3: Find the best decision stump\n        min_error = float('inf')\n        best_stump = None\n        \n        for d in range(2):\n            thresholds = np.unique(np.sort(x_train))\n            for theta in thresholds[:-1]:\n                pred = np.where(x_train <= theta, 1, -1)\n                \n                # Compute the weighted error\n                err = np.sum(w[y_train != pred])\n                \n                if err < min_error:\n                    min_error = err\n                    best_stump = (d, theta)\n        \n        # Step 4: Calculate the weight alpha\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        \n        # Step 5: Update the sample weights\n        w *= np.exp(-alpha * y_train * pred)\n        w /= np.sum(w)\n        \n        # Step 6: Add the best stump to the ensemble\n        H.append((best_stump, alpha))\n        \n        # Check if the training error is within the allowed limit\n        train_error = sum(alpha * (y_train == pred) for _, pred in H)\n        if train_error <= epsilon:\n            break\n    \n    # Step 7: Make predictions on the test set\n    def predict(x):\n        return np.sign(sum(alpha * h[1] * h[0][1] if x > h[0][1] else alpha * h[1] * (-h[0][1]) for h in H))\n    \n    return [predict(x) for x in x_test]\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [1.5, 3.5, 5.5]\n# print(adaboost_1d_predict(x_train, y_train, x_test))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the sample weights `w` to be uniform.\n2. **Training Loop**: We iterate until the training error of the ensemble is less than or equal to `epsilon`.\n   - For each iteration, we find the best decision stump by evaluating all possible splits (`d=0` and `d=1`) and selecting the one with the minimum weighted error.\n   - We calculate the weight `\u03b1` using the formula `\u03b1 = 0.5 * ln((1 - err) / err)`.\n   - We update the sample weights based on the predicted errors.\n3. **Ensemble Building**: We add the best stump to the ensemble along with its weight `\u03b1`.\n4. **Prediction**: After training, we define a helper function `predict` that computes the sign of the weighted sum of the hypotheses for a new input `x`.\n5. **Test Set Prediction**: Finally, we use this helper function to make predictions on the test set.\n\nThis implementation should correctly train the AdaBoost ensemble using one-dimensional decision stumps and provide predictions for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n\n    # Compute the kernel matrix K\n    K = np.exp(-gamma * np.sum((X_train[:, None] - X_train)**2, axis=-1))\n\n    # Compute the decision function for each test sample\n    scores = np.dot(K, alpha) * y_train + b\n\n    # Predict the label based on the sign of the score\n    predicted_labels = np.sign(scores).astype(int)\n\n    return predicted_labels.tolist()\n```\n\nThis code defines the `gaussian_svm_predict` function, which implements the prediction logic for a Gaussian-kernel Support Vector Machine (SVM) using the provided parameters and test data. It calculates the kernel matrix, computes the decision function for each test sample, and returns the predicted labels. The solution is fully vectorized and does not use any external libraries beyond NumPy and basic math operations."}
{"task_id": 28, "completion_id": 0, "completion": "To solve this problem, we need to perform a truncated Singular Value Decomposition (SVD) on the input matrix \\( X \\). The optimal rank-\\( k \\) reconstruction involves retaining only the top \\( k \\) singular values and their corresponding left and right singular vectors. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    m, n = len(X), len(X[0])\n    if not (1 <= k <= min(m, n)):\n        return (-1,)\n\n    # Convert the input list of lists to a NumPy array for efficient computation\n    X_np = np.array(X)\n\n    # Perform SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n\n    # Truncate the SVD components to the top k dimensions\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n\n    # Compute the rank-k approximation\n    X_hat = np.dot(U_k, np.dot(np.diag(s_k), Vt_k))\n\n    # Round the reconstructed matrix to four decimal places\n    X_hat_rounded = round_matrix(X_hat, 4)\n\n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_rounded)**2)\n\n    # Return the results as a tuple\n    return (X_hat_rounded.tolist(), mse)\n\ndef round_matrix(matrix, decimals):\n    \"\"\"Round each element of a matrix to the specified number of decimal places.\"\"\"\n    return [[round(x, decimals) for x in row] for row in matrix]\n\n# Example usage:\nX = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nk = 2\nresult = linear_autoencoder(X, k)\nprint(result)\n```\n\n### Explanation:\n1. **Input Validation**: We first check if \\( k \\) is within the valid range (i.e., between 1 and the minimum of \\( m \\) and \\( n \\)). If not, we return \\(-1\\).\n\n2. **Convert Input**: We convert the input list of lists into a NumPy array for efficient computation.\n\n3. **Perform SVD**: We use `np.linalg.svd` to compute the SVD of the matrix. The `full_matrices=False` parameter ensures that we get only the necessary components for the truncation.\n\n4. **Truncate SVD Components**: We select the top \\( k \\) singular values and their corresponding left and right singular vectors.\n\n5. **Compute Rank-k Approximation**: We reconstruct the matrix using the truncated SVD components.\n\n6. **Rounding**: We round each element of the reconstructed matrix to four decimal places.\n\n7. **Mean Squared Error Calculation**: We calculate the mean squared error between the original matrix and the reconstructed matrix.\n\n8. **Return Result**: Finally, we return the reconstructed matrix and the MSE as a tuple."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the one-dimensional gradient boosting regressor using decision stumps, we need to follow the steps outlined in the problem description. Here's how you can implement the `predict_boosting_tree` function:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by feature values\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    \n    # Initialize the residuals and the sum of weights\n    residuals = y_train_sorted - np.mean(y_train_sorted)\n    weight_sum = np.sum(np.abs(residuals))\n    \n    # Initialize the ensemble prediction\n    ensemble_prediction = 0\n    \n    while weight_sum > epsilon:\n        min_rss = np.inf\n        best_split = None\n        \n        # Iterate over all possible split points\n        for i in range(1, len(x_train_sorted)):\n            split_point = (x_train_sorted[i - 1] + x_train_sorted[i]) / 2\n            \n            # Split the residuals into two groups\n            left_residuals = residuals[:i]\n            right_residuals = residuals[i:]\n            \n            # Compute the means of the residuals for both groups\n            c1 = np.mean(left_residuals)\n            c2 = np.mean(right_residuals)\n            \n            # Compute the RSS for the current split\n            rss = np.sum((left_residuals - c1) ** 2) + np.sum((right_residuals - c2) ** 2)\n            \n            # Check if this split has the minimum RSS so far\n            if rss < min_rss:\n                min_rss = rss\n                best_split = split_point\n        \n        # Update the ensemble prediction\n        ensemble_prediction += min_rss / weight_sum\n        \n        # Update the residuals and the sum of weights\n        residuals = np.where(x_train_sorted <= best_split, residuals - min_rss / weight_sum, residuals + min_rss / weight_sum)\n        weight_sum -= min_rss\n    \n    # Predict the target for the query point\n    query_prediction = ensemble_prediction\n    \n    return round(query_prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2, 3, 5, 7, 11]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))  # Output will depend on the implementation\n```\n\n### Explanation:\n1. **Sorting**: We first sort the training data by the feature values (`x_train`). This helps in easily finding mid-points between consecutive values for splitting.\n\n2. **Initialization**: We initialize the residuals as the difference between the target values and their mean. The sum of weights starts at the sum of absolute residuals.\n\n3. **Iteration**: We iterate over all possible split points, calculate the RSS for each split, and keep track of the split with the smallest RSS.\n\n4. **Update Ensemble Prediction**: Once we find the best split, we update the ensemble prediction by adding the contribution of the best split to it. We also update the residuals and the sum of weights accordingly.\n\n5. **Stopping Condition**: The loop continues until the total residual sum of squares is less than the specified tolerance (`epsilon`).\n\n6. **Prediction**: Finally, we use the ensemble prediction to make a prediction for the query point `x_query`.\n\nThis implementation provides a basic framework for one-dimensional gradient boosting using decision stumps. Adjustments may be needed based on specific requirements or performance considerations."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n\n    Parameters:\n    - shape: A tuple representing the dimensions of the tensor.\n    - sparsity: A float between 0.0 and 1.0 indicating the probability of each element being 1.0.\n    - seed: An integer used to seed the random number generator for reproducibility.\n\n    Returns:\n    - A NumPy ndarray with the specified shape, where each element is either 0.0 or 1.0.\n      Returns -1 if the sparsity value is out of the valid range [0, 1].\n    \"\"\"\n\n    # Check if sparsity is within the valid range\n    if not (0 <= sparsity <= 1):\n        return -1\n\n    # Set the seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate a random tensor with values between 0 and 1\n    random_tensor = np.random.rand(*shape)\n\n    # Apply the sparsity level to convert some values to 1.0\n    binary_tensor = (random_tensor >= (1 - sparsity)).astype(float)\n\n    return binary_tensor\n```\n\nThis implementation meets all the specified requirements:\n1. It checks if the `sparsity` is within the valid range `[0, 1]`.\n2. It sets the seed if provided using `np.random.seed(seed)`.\n3. It generates a random tensor with values between 0 and 1 using `np.random.rand`.\n4. It applies the sparsity level to convert some values to 1.0 using boolean indexing.\n5. It returns the resulting binary tensor.\n6. If the `sparsity` is out of range, it returns `-1`."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the `get_split` function, we need to follow these steps:\n\n1. Find the median value of the specified column using `np.median`.\n2. Use `np.argpartition` to partition the array such that the median is at the correct position, which helps us efficiently identify the pivot.\n3. Determine the rows that fall to the left and right of the pivot based on their values in the specified column.\n4. Ensure that both the left and right lists are sorted.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Step 1: Find the median value of the specified column\n    median_value = np.median(data[:, d])\n    \n    # Step 2: Use np.argpartition to partition the array\n    # argpartition returns the indices that would partition the array into two parts\n    # such that the element at the k-th position is in the correct place,\n    # and all elements before it are less than or equal to the element,\n    # and all elements after it are greater than or equal to the element.\n    # We want the median to be at the correct position, so we set k to -1.\n    partition_indices = np.argpartition(data[:, d], -1)\n    \n    # Step 3: Determine the pivot index\n    pivot_index = partition_indices[-1]\n    \n    # Step 4: Get the rows that fall to the left and right of the pivot\n    left_indices = partition_indices[:pivot_index]\n    right_indices = partition_indices[pivot_index + 1:]\n    \n    # Step 5: Ensure the lists are sorted\n    left_indices.sort()\n    right_indices.sort()\n    \n    # Return the result as a tuple\n    return pivot_index, left_indices, right_indices\n\n# Example usage:\ndata = np.array([[1, 2], [3, 1], [4, 3], [5, 2]])\npivot, left, right = get_split(data, 0)\nprint(\"Pivot:\", pivot)\nprint(\"Left:\", left)\nprint(\"Right:\", right)\n```\n\nThis function will correctly perform a median split on the given dataset along the specified column and return the required indices. The use of `np.argpartition` ensures that the operation runs in O(n) time complexity."}
{"task_id": 40, "completion_id": 0, "completion": "To solve this problem, we need to use NumPy's `as_strided` function to create a view on the original array `x`. This function allows us to create a new array with a different shape and strides than the original array without actually copying the data. Here's how you can implement the `to_frames` function:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Check for pre-conditions\n    assert len(x.shape) == 1, \"Input signal must be one-dimensional.\"\n    assert stride > 0, \"Stride must be greater than zero.\"\n    assert frame_width <= len(x), \"Frame width must be less than or equal to the length of the signal.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the view using as_strided\n    framed_signal = as_strided(\n        x,\n        shape=(n_frames, frame_width),\n        strides=(stride * x.itemsize, x.itemsize)\n    )\n\n    # Set the writeable flag\n    framed_signal.flags.writeable = writeable\n\n    return framed_signal\n```\n\n### Explanation:\n\n1. **Pre-condition Checks**: \n   - We first check if `x` is one-dimensional using `len(x.shape) == 1`.\n   - We ensure that `stride` is greater than zero.\n   - We verify that `frame_width` is less than or equal to the length of `x`.\n\n2. **Calculate Number of Frames**:\n   - We compute the number of frames using the formula `(len(x) - frame_width) // stride + 1`.\n\n3. **Create the View Using `as_strided`**:\n   - We use `as_strided` to create a new array with the desired shape and strides.\n     - `shape`: `(n_frames, frame_width)`\n     - `strides`: `(stride * x.itemsize, x.itemsize)`\n       - `stride * x.itemsize` specifies the step size along the axis corresponding to the frame width.\n       - `x.itemsize` specifies the size of each element in bytes.\n\n4. **Set Writeable Flag**:\n   - We set the `writeable` flag of the resulting array based on the input parameter `writeable`.\n\nThis approach ensures that the resulting array is a view on the original data, and its shape matches the expected output format."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Check if X is a numpy array\n    if isinstance(X, np.ndarray):\n        # Check if all elements are within the range [0, 1]\n        if not np.all((X >= 0) & (X <= 1)):\n            return False\n        \n        # Check if each row sums to 1\n        if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n            return False\n    \n    # If X is a list of lists, convert it to a numpy array for processing\n    else:\n        try:\n            X = np.array(X)\n        except ValueError:\n            raise ValueError(\"Input must be a list of lists or a NumPy array.\")\n        \n        # Perform the checks as before\n        if not np.all((X >= 0) & (X <= 1)):\n            return False\n        \n        if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n            return False\n    \n    # If all checks pass, the matrix is row-stochastic\n    return True\n```\n\nThis function first checks if the input `X` is a `numpy.ndarray`. It then checks if all elements of the array are within the range [0, 1] and if each row sums to 1 using `np.allclose` with an absolute tolerance of `1e-8`. If `X` is a list of lists, it converts it to a `numpy.ndarray` before performing these checks. If any of the conditions fail, the function returns `False`; otherwise, it returns `True`, indicating that `X` is a row-stochastic matrix."}
{"task_id": 55, "completion_id": 0, "completion": "To implement the RMSprop optimization algorithm for linear regression, we need to follow these steps:\n\n1. Initialize the weight vector `w` to zero.\n2. Compute the initial gradient `g`.\n3. Initialize the running average of squared gradients `s` to zero.\n4. Iterate over the dataset in batches:\n   - Calculate the gradient for the current batch.\n   - Update the running average of squared gradients.\n   - Update the weight vector using the RMSprop update rule.\n5. Stop the iteration if the norm of the gradient is less than `epsilon` or if the maximum number of iterations is reached.\n6. Return the final weight vector rounded to four decimal places.\n\nHere's the implementation of the `rms_prop` function:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    # Initialize weights to zero\n    w = np.zeros(X.shape[1])\n    \n    # Initialize running average of squared gradients\n    s = np.zeros_like(w)\n    \n    # Loop through the dataset\n    for _ in range(max_iter):\n        # Calculate the number of complete batches\n        num_batches = len(X) // batch_size\n        \n        # Process each batch\n        for i in range(num_batches):\n            # Get the current batch indices\n            batch_indices = slice(i * batch_size, min((i + 1) * batch_size, len(X)))\n            \n            # Extract the current batch\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            \n            # Compute the prediction\n            y_pred = np.dot(X_batch, w)\n            \n            # Compute the gradient\n            g = (1 / len(y_batch)) * np.dot(X_batch.T, (y_pred - y_batch))\n            \n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * g**2\n            \n            # Update the weight vector using the RMSprop update rule\n            w -= eta * g / np.sqrt(s + eps_station)\n        \n        # Check if the norm of the gradient is small enough to stop\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    # Round the weight vector to four decimal places and return as a list\n    return [round(x, 4) for x in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([7, 8, 9])\n# print(rms_prop(X, y))\n```\n\nThis function implements the RMSprop optimization algorithm for linear regression. It processes the data in mini-batches and updates the weight vector according to the RMSprop rules until the convergence criteria are met. The final weight vector is returned as a list rounded to four decimal places."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its gradient.\n\n    Parameters:\n    x (scalar or list/array): Input data for which to compute the SoftPlus.\n    deriv (bool): Flag indicating whether to compute the gradient (True) or the SoftPlus itself (False).\n\n    Returns:\n    scalar/list/array: The SoftPlus output or gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n\n    if deriv:\n        # Numerically stable computation of the gradient using log1p\n        exp_x = np.exp(x)\n        sigm = 1 / (1 + exp_x)\n        return round(sigm, 4)\n\n    else:\n        # Numerically stable computation of the SoftPlus using log1p\n        log_sum_exp = np.log1p(exp_x)\n        return round(log_sum_exp, 4)\n\n# Example usage:\nprint(softplus(0))  # Should print 0.6931\nprint(softplus([-1, 0, 1]))  # Should print [0.3132, 0.6931, 1.3132]\nprint(softplus(10, True))  # Should print 0.7311\nprint(softplus(-10, True))  # Should print 0.2689\n```"}
{"task_id": 58, "completion_id": 0, "completion": "To implement the unsmoothed maximum likelihood estimation (MLE) N-gram language model, we need to follow these steps:\n\n1. Count the occurrences of each N-gram in the corpus.\n2. Calculate the log-probability for each N-gram in the sequence.\n3. Sum up the log-probabilities to get the total log-probability of the sequence.\n\nHere's the implementation of the `unsmoothed_ngram_log_prob` function:\n\n```python\nimport numpy as np\nfrom collections import Counter\nfrom typing import List\n\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"Order N must be greater than or equal to 1\")\n    \n    # Step 1: Count the occurrences of each N-gram in the corpus\n    ngrams_count = Counter()\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i+N])\n        ngrams_count[ngram] += 1\n    \n    # Step 2: Calculate the total number of unique prefixes of length N-1\n    num_unique_prefixes = len(ngrams_count)\n    \n    # Step 3: Compute the log-probability for each N-gram in the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        \n        # Check if the n-gram is present in the corpus\n        if ngram not in ngrams_count:\n            return float('-inf')\n        \n        # Calculate the log-probability of the current n-gram\n        count_ngram = ngrams_count[ngram]\n        count_prefix = num_unique_prefixes if N == 1 else ngrams_count[tuple(sequence[i:i+N-1])]\n        \n        # Avoid division by zero\n        if count_prefix == 0:\n            return float('-inf')\n        \n        prob_ngram = count_ngram / count_prefix\n        log_prob += np.log(prob_ngram)\n    \n    # Step 4: Return the total log-probability rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: -2.6657\n```\n\n### Explanation:\n\n1. **Counting N-grams**: We use a `Counter` to count the occurrences of each N-gram in the corpus. This helps us determine how many times each N-gram appears.\n\n2. **Unique Prefixes**: For N-grams of order greater than 1, we calculate the number of unique prefixes of length \\(N-1\\). This is necessary because the denominator of the probability formula requires the count of all possible prefixes of length \\(N-1\\).\n\n3. **Log-Probability Calculation**: For each N-gram in the sequence, we check if it exists in the corpus. If it does, we calculate its log-probability using the formula:\n   \\[\n   \\text{log } P(\\text{n-gram}) = \\log \\left( \\frac{\\text{count}(\\text{n-gram})}{\\text{count}(\\text{prefix})) \\right)\n   \\]\n   If any prefix has a count of zero, the log-probability is undefined, and we return `-inf`.\n\n4. **Summing Log-Probabilities**: We sum up the log-probabilities of all N-grams in the sequence to get the total log-probability.\n\n5. **Rounding**: Finally, we round the result to four decimal places before returning it."}
{"task_id": 62, "completion_id": 0, "completion": "To implement the univariate Lasso regression using coordinate descent with polynomial features, we need to follow these steps:\n\n1. **Build the Design Matrix**: Create a design matrix that includes a column of ones (for the bias) and columns for each polynomial term \\( x^j \\) from \\( j = 1 \\) to \\( degree \\).\n\n2. **Coordinate Descent Optimization**: Perform coordinate descent to minimize the Lasso objective function. This involves updating the bias and each coefficient iteratively.\n\n3. **Early Stopping**: Terminate the optimization process if the largest absolute weight change falls below the specified tolerance (`tol`) or if the maximum number of iterations (`n_iterations`) is reached.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y)\n\n    # Number of samples\n    m = len(X)\n    \n    # Initialize coefficients with zeros\n    w = np.zeros(degree + 1)\n    \n    # Function to perform coordinate descent\n    def coordinate_descent():\n        max_change = tol + 1\n        \n        for _ in range(n_iterations):\n            old_w = w.copy()\n            \n            # Update the bias\n            w[0] = np.mean(y - X.dot(w))\n            \n            # Update each coefficient\n            for j in range(1, degree + 1):\n                x_j = X**j\n                rho = x_j.T @ (y - X.dot(w) + w[j] * x_j)\n                w[j] = soft_threshold(rho, reg_factor) / (x_j.T @ x_j)\n            \n            # Check for convergence\n            max_change = max(np.abs(old_w - w))\n            \n            if max_change < tol:\n                break\n    \n    # Perform coordinate descent\n    coordinate_descent()\n    \n    # Round coefficients to 4 decimal places\n    w_rounded = [round(w[i], 4) for i in range(degree + 1)]\n    \n    return w_rounded\n\ndef soft_threshold(x, threshold):\n    \"\"\"Apply soft thresholding to a value.\"\"\"\n    return np.sign(x) * np.maximum(abs(x) - threshold, 0)\n\n# Example usage:\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 7, 8]\ndegree = 2\nreg_factor = 0.1\ncoefficients = lasso_regression(X, y, degree, reg_factor)\nprint(coefficients)\n```\n\n### Explanation:\n\n- **Design Matrix Construction**: We create a design matrix `X_poly` by raising each element of `X` to powers from 1 to `degree`. We add a column of ones at the beginning to handle the bias term.\n\n- **Coordinate Descent**: We iterate over each coefficient, updating it based on the current values of all other coefficients. The update formula for each coefficient involves calculating the residual contribution of the term \\( x^j \\) and applying soft thresholding.\n\n- **Soft Thresholding**: The soft thresholding function ensures that coefficients shrink towards zero but do not become negative unless they exceed the regularization strength.\n\n- **Convergence Check**: We check the largest absolute change in coefficients between iterations. If this change is less than the specified tolerance, we terminate the loop.\n\nThis implementation efficiently computes the Lasso regression coefficients using coordinate descent, adhering to the requirements specified in the task."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n\n    # Initialize the backward probability vector with ones\n    beta = np.ones(len(A))\n\n    # Iterate from t+1 to T-1 to fill the backward probability vector\n    for k in range(t + 1, len(obs)):\n        # Compute the next time step's backward probabilities\n        beta_next = np.dot(A, B[:, obs[k]])\n        # Update the current time step's backward probabilities using the formula\n        beta *= beta_next / np.sum(beta_next)\n\n    # Round the result to 4 decimal places\n    return [round(x, 4) for x in beta]\n\n# Example usage:\nA = [[0.5, 0.5], [0.5, 0.5]]\nB = [[0.9, 0.1], [0.2, 0.8]]\nobs = [0, 1]\nt = 0\nprint(backward_beta(A, B, obs, t))  # Output will depend on the input values\n```\n\nThis function calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model using dynamic programming. The function iterates backwards through the observation sequence, updating the backward probabilities according to the HMM model's transition and emission probabilities. The final result is rounded to four decimal places before being returned."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for a Hidden Markov Model (HMM), we need to follow these steps:\n\n1. Initialize the backward variables $\\beta_t(i)$ for all time steps $t$ and all states $i$. Initially, $\\beta_T(i) = 1$ for all $i$ since there are no future observations after $T-1$.\n\n2. Use the recursive formula to fill in the backward variables from $t = T-2$ down to $t = 0$:\n   \\[\n   \\beta_t(i) = \\sum_{j=0}^{N-1} A_{ij} \\cdot B_{j, o_{t+1}} \\cdot \\beta_{t+1}(j)\n   \\]\n   where $N$ is the number of states.\n\n3. Compute the overall probability of the observation sequence $O$ by summing up the probabilities of starting in each state and ending at each state:\n   \\[\n   P(O | \\lambda) = \\sum_{i=0}^{N-1} \\pi_i \\cdot B_{i, o_0} \\cdot \\beta_0(i)\n   \\]\n\nHere's the implementation of the `backward_prob` function:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not obs or not pi or not A or not B:\n        return 0.0\n    \n    # Number of states\n    N = len(pi)\n    \n    # Initialize beta array\n    beta = np.zeros((len(obs), N))\n    \n    # Base case: beta[T-1](i) = 1 for all i\n    beta[-1, :] = 1.0\n    \n    # Fill in the backward variables from T-2 to 0\n    for t in range(len(obs) - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum(A[i, j] * B[j, obs[t + 1]] * beta[t + 1, j] for j in range(N))\n    \n    # Calculate the overall probability\n    prob = sum(pi[i] * B[i, obs[0]] * beta[0, i] for i in range(N))\n    \n    # Return the result rounded to 6 decimal places\n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.5, 0.5], [0.4, 0.6]]\n# B = [[0.9, 0.1], [0.8, 0.2]]\n# pi = [0.6, 0.4]\n# obs = [0, 1]\n# print(backward_prob(A, B, pi, obs))  # Output: 0.773921\n```\n\nThis function first checks if any of the input lists are empty and returns 0.0 if they are. It then initializes the backward variable array `beta` and fills it using the backward recursion. Finally, it calculates the overall probability and returns it rounded to six decimal places."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models (HMMs), we need to follow these steps:\n\n1. **Input Validation**: Ensure that the dimensions of the matrices \\( S \\), \\( A \\), and \\( B \\) are consistent with each other and the length of the observations list.\n2. **Check Validity of Observations**: Verify that all indices in the observations list are within the valid range [0, m-1].\n3. **Compute the Forward Probability**: Implement the forward algorithm using dynamic programming to compute the probability of the observed sequence.\n\nHere's the implementation of the `forward_algorithm` function:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Step 1: Validate input dimensions\n    if len(S) != len(A):\n        return -1\n    if len(A[0]) != len(B):\n        return -1\n    if any(len(row) != len(S) for row in A):\n        return -1\n    if any(len(row) != len(B[0]) for row in B):\n        return -1\n    \n    # Step 2: Check validity of observations\n    num_states = len(S)\n    max_observation = max(observations)\n    if max_observation >= num_states:\n        return -1\n    \n    # Initialize the forward probabilities array\n    forward_probabilities = np.zeros((len(observations), num_states))\n    \n    # Initialize the first column of the forward probabilities\n    for j in range(num_states):\n        forward_probabilities[0, j] = S[j] * B[j][observations[0]]\n    \n    # Compute the forward probabilities for subsequent time steps\n    for t in range(1, len(observations)):\n        for j in range(num_states):\n            forward_probabilities[t, j] = (\n                sum(forward_probabilities[t-1, k] * A[k, j] for k in range(num_states)) *\n                B[j][observations[t]]\n            )\n    \n    # The total probability of the sequence is the sum of the last column of forward_probabilities\n    total_probability = np.sum(forward_probabilities[-1])\n    \n    # Round the result to 4 decimal places\n    return round(total_probability, 4)\n\n# Example usage:\nS = [0.5, 0.5]\nA = [\n    [0.7, 0.3],\n    [0.2, 0.8]\n]\nB = [\n    [0.9, 0.1],\n    [0.4, 0.6]\n]\nobservations = [0, 1]\n\nprint(forward_algorithm(S, A, B, observations))  # Output should be approximately 0.3384\n```\n\n### Explanation:\n\n1. **Dimension Validation**:\n   - We check if the number of rows in \\( A \\) matches the length of \\( S \\).\n   - We ensure that the number of columns in \\( B \\) matches both the length of \\( A \\) and \\( S \\).\n\n2. **Observation Validation**:\n   - We determine the maximum observation value and compare it with the number of states. If any observation exceeds the number of states, we return -1.\n\n3. **Forward Algorithm**:\n   - We initialize a 2D array `forward_probabilities` to store the forward probabilities at each time step and for each state.\n   - We set the initial probabilities for the first time step using the product of the initial state probabilities and the emission probabilities for the first observation.\n   - For each subsequent time step, we update the forward probabilities by considering the transition probabilities and the emission probabilities.\n\n4. **Result Calculation**:\n   - The total probability of the sequence is obtained by summing the last column of the `forward_probabilities` array.\n   - Finally, we round the result to four decimal places before returning it."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm in Python, we need to follow these steps:\n\n1. **Count Item Support**: First, we count the frequency of each individual item across all transactions.\n2. **Build the FP-Tree**: We construct a prefix tree where each node represents an item and its support count.\n3. **Prune Infrequent Items**: Remove items from the FP-Tree that do not meet the minimum support threshold.\n4. **Generate Candidate Item-Sets**: Use the FP-Tree to generate candidate item-sets for further mining.\n5. **Mine Conditional FP-Trees**: For each candidate item-set, create a conditional FP-Tree and extract frequent item-sets.\n6. **Combine Results**: Combine the frequent item-sets found from both the original tree and the conditional trees.\n\nHere's the implementation of the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n\n    # Step 1: Count item support\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    # Step 2: Filter out infrequent items\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Step 3: Sort frequent items lexicographically\n    frequent_items_sorted = sorted(frequent_items.keys())\n\n    # Step 4: Construct the initial FP-Tree\n    root = defaultdict(int)\n    for transaction in transactions:\n        path = root\n        for item in frequent_items_sorted:\n            if item in transaction:\n                path[item] += 1\n                path = path[item]\n\n    def build_conditional_tree(header_table, path):\n        conditional_tree = defaultdict(int)\n        for item in header_table:\n            if path[item]:\n                conditional_tree[item] = path[item]\n                conditional_tree[item].update(path[item])\n                del path[item]\n        return conditional_tree\n\n    def find_frequent_item_sets(tree, header_table, path, prefix, min_support):\n        frequent_item_sets = []\n        for item in header_table:\n            if path[item]:\n                new_path = path.copy()\n                new_path[item] -= 1\n                new_prefix = prefix + [item]\n                if len(new_prefix) > 1:\n                    frequent_item_sets.append(sorted(new_prefix))\n                else:\n                    frequent_item_sets.extend(find_frequent_item_sets(conditional_tree[item], header_table[item], new_path, new_prefix, min_support))\n        return frequent_item_sets\n\n    # Step 5: Generate candidate item-sets and mine them\n    frequent_item_sets = []\n    for i in range(len(frequent_items_sorted)):\n        head, tail = frequent_items_sorted[:i+1], frequent_items_sorted[i+1:]\n        header_table = defaultdict(list)\n        for item in head:\n            header_table[tree[item]].append(item)\n\n        for item in header_table:\n            path = tree[item]\n            conditional_tree = build_conditional_tree(header_table, path)\n            frequent_item_sets.extend(find_frequent_item_sets(conditional_tree, header_table[item], path, [], min_support))\n\n    # Step 6: Sort the result\n    frequent_item_sets.sort(key=lambda x: (len(x), x))\n\n    return frequent_item_sets\n```\n\n### Explanation:\n\n- **Item Support Counting**: We use `Counter` to count the occurrences of each item across all transactions.\n- **Filtering**: We filter out items that do not meet the minimum support threshold.\n- **FP-Tree Construction**: We build a tree where each node represents an item and its support count. We only include items that are frequent.\n- **Conditional Tree Generation**: For each frequent item set, we generate a conditional tree based on the remaining items.\n- **Mining**: We recursively mine the conditional trees to find more frequent item sets.\n- **Sorting**: Finally, we sort the resulting frequent item sets by their size and lexicographical order.\n\nThis implementation ensures that the results are deterministic and adhere to the specified constraints."}
{"task_id": 75, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) classifier, we need to follow these steps:\n\n1. Calculate the Euclidean distance between each test sample and every training sample.\n2. Identify the `k` nearest neighbors for each test sample.\n3. Determine the most frequent class among these `k` neighbors. In case of a tie, select the smallest class label.\n4. Return the predicted class labels for all test samples.\n\nHere's the implementation of the `knn_predict` function:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if not (1 <= k <= len(X_train)):\n        return [-1]\n\n    def euclidean_distance(x1, x2):\n        \"\"\"Calculate the Euclidean distance between two vectors.\"\"\"\n        return np.linalg.norm(np.array(x1) - np.array(x2))\n\n    predictions = []\n    \n    for test_sample in X_test:\n        distances = [(euclidean_distance(test_sample, train_sample), train_label)\n                     for train_sample, train_label in zip(X_train, y_train)]\n        \n        # Sort distances by ascending order\n        distances.sort()\n        \n        # Get the k nearest neighbors\n        nearest_neighbors = distances[:k]\n        \n        # Extract the class labels of the nearest neighbors\n        neighbor_labels = [label for _, label in nearest_neighbors]\n        \n        # Find the most common class label (in case of ties, choose the smallest one)\n        unique_labels, counts = np.unique(neighbor_labels, return_counts=True)\n        max_count = np.max(counts)\n        most_common_labels = unique_labels[counts == max_count]\n        \n        # Choose the smallest class label in case of ties\n        predicted_class = min(most_common_labels)\n        \n        predictions.append(predicted_class)\n\n    return predictions\n```\n\n### Explanation:\n\n- **Distance Calculation**: The Euclidean distance is calculated using `np.linalg.norm` to ensure that the result is squared before taking the square root, which simplifies the calculation but doesn't affect the relative distances.\n  \n- **Sorting**: The distances are sorted in ascending order to easily access the `k` nearest neighbors.\n\n- **Tie Handling**: After selecting the `k` nearest neighbors, we determine the most frequent class label. In case of a tie, we choose the smallest class label using `min()`.\n\n- **Output**: The function returns a list of predicted class labels for each test sample. If `k` is invalid, it returns `-1`."}
{"task_id": 76, "completion_id": 0, "completion": "To implement the categorical cross-entropy loss, we need to follow these steps:\n\n1. Ensure that both `y` and `y_pred` have the same shape.\n2. Add a small epsilon value to the predictions to prevent taking the logarithm of zero.\n3. Compute the cross-entropy loss using the formula provided.\n4. Sum the losses over all samples and classes.\n5. Return the total loss rounded to four decimal places.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Check if shapes match\n    if y.shape != y_pred.shape:\n        raise ValueError(\"Shapes of y and y_pred must be the same.\")\n    \n    # Add a small epsilon to avoid log(0)\n    eps = np.finfo(float).eps\n    \n    # Calculate the cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + eps))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\ny_true = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.2, 0.6, 0.2], [0.7, 0.2, 0.1], [0.1, 0.3, 0.6]]\n\nprint(cross_entropy_loss(y_true, y_pred))  # Output should be 0.9888\n```\n\n### Explanation:\n\n- **Input Validation**: We first convert the inputs to NumPy arrays and check if their shapes match. If not, we raise a `ValueError`.\n- **Epsilon Addition**: We add a small epsilon value (`np.finfo(float).eps`) to `y_pred` to ensure that no logarithm operation results in zero.\n- **Cross-Entropy Calculation**: We compute the cross-entropy loss using the formula `-sum(y * log(y_pred + eps))`. This involves summing over each sample and class.\n- **Rounding**: Finally, we round the computed loss to four decimal places before returning it."}
{"task_id": 77, "completion_id": 0, "completion": "To implement the forward propagation for an L-layer neural network using ReLU activations in the hidden layers and the sigmoid activation in the output layer, we need to follow these steps:\n\n1. Initialize the activation `A` with the input `X`.\n2. Iterate through each layer, performing a linear transformation followed by the appropriate activation function.\n3. Store the intermediate results in a list called `caches`.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    # Initialize the list to store caches\n    caches = []\n    \n    # Set the current activation to the input data\n    A = X\n    \n    # Loop through each layer\n    for l in range(1, len(parameters) // 2 + 1):\n        # Retrieve the weights and bias for the current layer\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        \n        # Perform the linear transformation\n        Z = np.dot(W, A) + b\n        \n        # Store the linear transformation result and the activation function applied\n        if l == 1:\n            # For the first layer, apply ReLU\n            A = np.maximum(0, Z)\n        else:\n            # For subsequent layers, apply ReLU\n            A = np.maximum(0, Z)\n        \n        # Append the linear transformation result and the activation function to the cache\n        caches.append((Z, A))\n    \n    # Apply the sigmoid activation to the output layer\n    W_L = parameters['W' + str(len(parameters) // 2 + 1)]\n    b_L = parameters['b' + str(len(parameters) // 2 + 1)]\n    Z_L = np.dot(W_L, A) + b_L\n    A_L = 1 / (1 + np.exp(-Z_L))\n    \n    # Append the linear transformation result and the activation function to the cache\n    caches.append((Z_L, A_L))\n    \n    # Round the final activation matrix AL to 4 decimal places and convert it to a plain Python list\n    AL_rounded = A_L.round(4).tolist()\n    \n    return AL_rounded, caches\n\n# Example usage:\n# X = np.random.rand(784, 50)  # Example input\n# parameters = {...}  # Example parameters\n# AL, caches = L_model_forward(X, parameters)\n# print(AL)\n```\n\n### Explanation:\n- **Input Layer**: Start with the input matrix `X`.\n- **Linear Transformation**: For each layer, compute \\( Z = W \\cdot A + b \\).\n- **Activation Function**: \n  - Use ReLU for all hidden layers (\\( A = \\max(0, Z) \\)).\n  - Use sigmoid for the output layer (\\( A = \\frac{1}{1 + e^{-Z}} \\)).\n- **Cache Storage**: Store the intermediate results (linear transformation and activation) in the `caches` list.\n- **Output Layer**: After processing all layers, apply the sigmoid activation to get the final output `AL`.\n- **Return Value**: Return the rounded and converted final activation `AL` along with the `caches`."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip the predicted probabilities to avoid log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    m = A2.shape[1]\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([[0.9, 0.1], [0.8, 0.2]])\n# Y = np.array([[1, 0], [1, 0]])\n# print(compute_cost(A2, Y))  # Expected output: 0.334796\n```\n\nThis code defines the `compute_cost` function, which calculates the binary cross-entropy cost for given predicted probabilities `A2` and ground-truth labels `Y`. It clips the predicted probabilities to prevent log(0) errors and then computes the cost using the formula provided in the description. The result is rounded to six decimal places before being returned."}
{"task_id": 82, "completion_id": 0, "completion": "To implement the \u03b5-soft exploration policy as described, we need to follow these steps:\n\n1. Identify the greediest action based on the Q-values.\n2. Calculate the base probability for the greedy action.\n3. Distribute the remaining probability equally among the other actions.\n4. Round the probabilities to four decimal places.\n5. Ensure the total sum of probabilities is exactly 1.\n\nHere's the implementation of the `epsilon_soft` function:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(epsilon, float) or not (0 <= epsilon <= 1):\n        raise ValueError(\"epsilon must be a float between 0 and 1\")\n\n    # Convert Q to a NumPy array if it's not already\n    Q = np.array(Q)\n\n    # Find the index of the greediest action\n    max_index = np.argmax(Q)\n    \n    # Calculate the base probability for the greediest action\n    base_prob = 1 - epsilon + (epsilon / len(Q))\n    \n    # Initialize the probabilities array with zeros\n    probs = np.zeros_like(Q)\n    \n    # Set the probability of the greediest action\n    probs[max_index] = base_prob\n    \n    # Distribute the remaining probability equally among the other actions\n    remaining_prob = epsilon / len(Q)\n    probs += remaining_prob\n    \n    # Round the probabilities to 4 decimal places\n    probs_rounded = np.round(probs, decimals=4)\n    \n    # Ensure the sum of probabilities is exactly 1\n    total_sum = np.sum(probs_rounded)\n    if not np.isclose(total_sum, 1, atol=1e-12):\n        raise ValueError(\"The sum of probabilities must be exactly 1\")\n    \n    return probs_rounded.tolist()\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\n### Explanation:\n- **Finding the Greediest Action**: We use `np.argmax(Q)` to find the index of the maximum Q-value.\n- **Base Probability Calculation**: The base probability for the greediest action is calculated as \\(1 - \\epsilon + \\frac{\\epsilon}{n}\\), where \\(n\\) is the number of actions.\n- **Distributing Remaining Probability**: The remaining probability (\\(\\epsilon / n\\)) is distributed equally among all other actions.\n- **Rounding and Normalization**: We round the probabilities to four decimal places and ensure they sum to exactly 1 using `np.isclose`. If the sum is not close enough, an error is raised."}
{"task_id": 86, "completion_id": 0, "completion": "To implement the `aggregate_random_forest_votes` function, we need to follow the steps outlined in the problem description. Here's how you can achieve this:\n\n1. Use `collections.Counter` to count the occurrences of each class label for each sample.\n2. Determine the most common class label for each sample. In case of a tie, select the smallest label using Python's built-in sorting behavior.\n3. Return the aggregated predictions as a list.\n\nHere's the complete implementation:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    \n    # Initialize a list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample\n    for i in range(num_samples):\n        # Count the occurrences of each class label for the current sample\n        vote_counts = Counter()\n        for row in predictions:\n            vote_counts[row[i]] += 1\n        \n        # Find the most common class label\n        most_common_label, _ = vote_counts.most_common(1)[0]\n        \n        # Append the most common label to the final predictions list\n        final_predictions.append(most_common_label)\n    \n    return final_predictions\n\n# Example usage:\npredictions = [\n    [1, 'a', 3],\n    ['b', 2, 3],\n    [1, 'a', 4],\n    ['c', 2, 3]\n]\n\nprint(aggregate_random_forest_votes(predictions))\n```\n\n### Explanation:\n- We iterate over each sample index `i`.\n- For each sample, we use `Counter` to count the occurrences of each class label across all trees.\n- The `most_common(1)` method returns the most frequently occurring element and its count. Since we only need the label, we take the first element of the tuple returned by `most_common(1)`.\n- This ensures that in case of a tie, the smallest label is chosen due to Python's sorting behavior.\n- Finally, we append the most common label to the `final_predictions` list, which is returned at the end."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Directly compute softplus for scalars\n        return round(np.logaddexp(0.0, z), 4)\n    \n    # Convert to NumPy array if it's not already one\n    z_array = np.asarray(z)\n    \n    # Compute softplus using logaddexp\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round results to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Convert to Python list\n    return rounded_values.tolist()\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis implementation handles both scalar and array-like inputs, ensuring that the output is correctly rounded to four decimal places and converted to a Python list if necessary."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy provides estimates\n    if 'ev_estimates' not in policy or not policy['ev_estimates']:\n        return np.nan\n    \n    # Get the true expected values from the bandit\n    arm_evs = bandit['arm_evs']\n    \n    # Get the policy's estimates\n    ev_estimates = policy['ev_estimates']\n    \n    # Sort the estimates based on the arm indices\n    sorted_arm_indices = sorted(ev_estimates.keys())\n    sorted_ev_estimates = [ev_estimates[arm_index] for arm_index in sorted_arm_indices]\n    \n    # Compute the squared errors\n    squared_errors = [(arm_evs[arm_index] - sorted_ev_estimates[i]) ** 2 for i, arm_index in enumerate(sorted_arm_indices)]\n    \n    # Calculate the mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Round the result to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```\n\nThis code defines the `mse` function according to the specified requirements, including handling cases where the policy does not provide any estimates and sorting the arm indices for accurate comparison."}
{"task_id": 96, "completion_id": 0, "completion": "To implement the `additive_ngram_log_prob` function, we need to follow the steps outlined in the problem description. Here's how you can do it:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build all 1-N gram frequency tables from the corpus\n    n_gram_counts = defaultdict(Counter)\n    \n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words)):\n            context = tuple(words[max(0, i - N + 1):i])\n            n_gram_counts[context][words[i]] += 1\n    \n    # Step 2: Add an explicit \"UNK\" token to the vocabulary\n    vocab = set()\n    for counts in n_gram_counts.values():\n        vocab.update(counts.keys())\n    vocab.add(\"<UNK>\")\n    \n    # Step 3: Estimate the probability of every contiguous N-gram in the target sentence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    total_count = sum(n_gram_counts[tuple(target_words[:i])].values() for i in range(N))\n    log_probability = 0.0\n    \n    for i in range(len(target_words) - N + 1):\n        context = tuple(target_words[max(0, i - N + 1):i])\n        word = target_words[i]\n        \n        # Count occurrences of the word in the current context\n        count_in_context = n_gram_counts[context].get(word, 0)\n        \n        # Add K to both numerator and denominator for Laplace smoothing\n        smoothed_count = count_in_context + K\n        smoothed_total = total_count + K * len(vocab)\n        \n        # Calculate the probability using the additive smoothing formula\n        probability = smoothed_count / smoothed_total\n        \n        # Add the log of the probability to the total log probability\n        log_probability += math.log(probability)\n    \n    # Step 4: Return the natural logarithm of the sentence probability rounded to 4 decimals\n    return round(log_probability, 4)\n\n# Example usage:\ncorpus = [\n    \"hello world\",\n    \"world hello\",\n    \"hello world again\"\n]\nsequence = \"hello world again\"\nN = 2\nprint(additive_ngram_log_prob(corpus, sequence, N))  # Output should be approximately -2.6559\n```\n\n### Explanation:\n1. **Building N-gram Frequency Tables**: We iterate over each sentence in the corpus and split it into words. For each word, we construct its context (the previous `N-1` words). We then update the count of this word in the corresponding context in our `n_gram_counts` dictionary.\n\n2. **Adding UNK Token**: We extract all unique words from the counts and add `<UNK>` to represent any unseen words.\n\n3. **Calculating Probabilities**: For each word in the target sequence, we calculate the probability using the additive smoothing formula. The probability is updated for each N-gram in the sequence.\n\n4. **Summing Log-Probabilities**: We sum up the log probabilities of all N-grams in the sequence to get the final log probability of the entire sequence.\n\n5. **Rounding**: Finally, we round the result to four decimal places before returning it."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) algorithm, we need to follow these steps:\n\n1. Initialize the factor matrices \\( W \\) and \\( H \\) randomly with a fixed seed.\n2. Alternate between updating \\( W \\) and \\( H \\) while keeping the other fixed.\n3. Use a regularised least-squares approach to solve for each factor matrix.\n4. Stop the iteration process when the change in the regularised loss falls below a specified tolerance or when the maximum number of iterations is reached.\n5. Return the reconstructed matrix \\( X \\hat{} = WH \\).\n\nHere's the implementation of the `als_factorization` function:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    \n    # Initialize W and H with random values\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    # Compute initial loss\n    loss = np.linalg.norm(X - np.dot(W, H))**2 / N + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n    \n    # List to store the loss history\n    loss_history = [loss]\n    \n    for _ in range(max_iter):\n        # Update W keeping H fixed\n        H_T = H.T\n        W_new = np.linalg.solve(np.dot(H_T, H) + alpha * np.eye(K), np.dot(H_T, X))\n        \n        # Update H keeping W fixed\n        W_T = W.T\n        H_new = np.linalg.solve(np.dot(W, W_T) + alpha * np.eye(M), np.dot(W, X.T))\n        \n        # Update W and H\n        W = W_new\n        H = H_new\n        \n        # Compute new loss\n        new_loss = np.linalg.norm(X - np.dot(W, H))**2 / N + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n        \n        # Check if convergence criterion is met\n        if np.abs(new_loss - loss) < tol:\n            break\n        \n        # Store the loss\n        loss_history.append(new_loss)\n        \n        # Print progress\n        print(f\"Iteration {_+1}: Loss = {new_loss:.6f}\")\n    \n    # Reconstruct the matrix\n    X_hat = np.round(np.dot(W, H), 4)\n    \n    return X_hat.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# K = 2\n# result = als_factorization(X, K)\n# print(result)\n```\n\n### Explanation:\n- **Initialization**: We initialize \\( W \\) and \\( H \\) with random values using NumPy's random module. A fixed seed ensures reproducibility.\n- **Loss Calculation**: The initial loss is calculated using the Frobenius norm and the regularization term.\n- **Alternating Updates**: For each iteration, we update either \\( W \\) or \\( H \\) while keeping the other fixed. This is done using the normal equations with added regularization terms.\n- **Convergence Check**: We check if the change in the loss is less than the specified tolerance. If it is, we stop the iterations.\n- **Reconstruction**: After convergence, we reconstruct the matrix \\( X \\) using the final \\( W \\) and \\( H \\) matrices and round it to four decimal places.\n\nThis implementation should work efficiently for most practical purposes, given the constraints."}
{"task_id": 109, "completion_id": 0, "completion": "Here's a complete implementation of the K-Means clustering algorithm with K-Means++ initialization:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n    if K >= m:\n        raise ValueError(\"Number of clusters K cannot be greater than or equal to the number of samples m.\")\n\n    # Step 1: Initialize the first centroid randomly\n    initial_centroids = [X[np.random.choice(m)]]\n\n    # Step 2: Select remaining centroids using K-Means++\n    while len(initial_centroids) < K:\n        distances_squared = np.sum((X - initial_centroids[-1])**2, axis=1)\n        probabilities = distances_squared / distances_squared.sum()\n        cumulative_probabilities = np.cumsum(probabilities)\n        u = random.uniform(0, cumulative_probabilities[-1])\n        index = np.searchsorted(cumulative_probabilities, u)\n        new_centroid = X[index]\n        initial_centroids.append(new_centroid)\n\n    # Convert centroids to lists of floats and sort them\n    centroids = [list(round(x, 4)) for x in initial_centroids]\n    centroids.sort(key=lambda x: (x[0], x[1]))\n\n    return centroids\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([\n        [1, 2],\n        [2, 3],\n        [3, 4],\n        [5, 6],\n        [6, 7],\n        [8, 9]\n    ])\n    K = 2\n    random_state = 42\n    centroids = kmeans(X, K, random_state=random_state)\n    print(centroids)\n```\n\n### Explanation:\n1. **Initialization**:\n   - The first centroid is chosen randomly from the data points.\n   - Subsequent centroids are selected based on the probability distribution defined by the squared Euclidean distance from the previously chosen centroids.\n\n2. **Lloyd's Iteration**:\n   - Assign each sample to the closest centroid.\n   - Update each centroid to be the mean of all samples assigned to it.\n   - Repeat until convergence or the maximum number of iterations is reached.\n\n3. **Output**:\n   - The centroids are converted to lists of floats and sorted by their first coordinate. In case of ties, they are further sorted by the second coordinate.\n\nThis implementation ensures reproducibility by setting the random state for both Python's `random` module and NumPy's random number generator."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    \n    Parameters:\n    - text (str): The input string to encode.\n    - time_steps (int): The fixed length of the encoded list.\n    - vocabulary (dict[str, int]): A mapping from characters to their corresponding integer IDs.\n    \n    Returns:\n    - List[int]: A list of integers representing the encoded text.\n    \"\"\"\n    # Convert each character to its corresponding ID in the vocabulary\n    encoded_ids = [vocabulary.get(char, 0) for char in text]\n    \n    # Pad the encoded list to the specified length with zeros\n    padded_encoded_ids = encoded_ids + [0] * (time_steps - len(encoded_ids))\n    \n    return padded_encoded_ids[:time_steps]\n\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer IDs back to text using an inverse vocabulary.\n    \n    Parameters:\n    - indices (list[int]): A list of integer IDs to decode.\n    - inverse_vocab (dict[int, str]): A mapping from integer IDs to their corresponding characters.\n    \n    Returns:\n    - str: The decoded text.\n    \"\"\"\n    # Filter out padding tokens (ID 0) and convert the remaining IDs to characters\n    decoded_chars = [inverse_vocab[id] for id in indices if id != 0]\n    \n    return ''.join(decoded_chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, runs the model, and decodes the output back to text.\n    \n    Parameters:\n    - model: The trained model used for prediction.\n    - input_vocabulary: A dictionary mapping characters to their corresponding IDs.\n    - inv_output_vocabulary: A dictionary mapping IDs to their corresponding characters.\n    - text: The input text to predict.\n    \n    Returns:\n    - str: The decoded prediction string.\n    \"\"\"\n    # Encode the input text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Reshape the encoded text to a batch of shape (1, TIME_STEPS)\n    input_batch = np.array([encoded_text]).reshape(1, TIME_STEPS)\n    \n    # Run the model prediction\n    predictions = model.predict(input_batch)\n    \n    # Apply argmax over the last axis to get the predicted IDs\n    predicted_indices = np.argmax(predictions, axis=-1)[0]\n    \n    # Decode the predicted IDs back to text\n    decoded_prediction = int_to_string(predicted_indices, inv_output_vocabulary)\n    \n    return decoded_prediction\n```\n\nThis solution includes the implementation of the required helper functions and demonstrates how they can be used together to process an input text through a model and produce a decoded prediction string."}
{"task_id": 113, "completion_id": 0, "completion": "```python\nimport random\n\n# Global constant for example strings\nEXAMPLES = [\n    \"hello\",\n    \"world\",\n    \"python\",\n    \"example\",\n    \"test\"\n]\n\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Helper function to run a single example through the model.\"\"\"\n    # Convert the example string to a list of integers using the input vocabulary\n    input_ids = [input_vocabulary[char] for char in example]\n    \n    # Run the model on the input IDs\n    output_ids = model(input_ids)\n    \n    # Convert the output IDs back to a string using the inverse output vocabulary\n    predicted_string = ''.join(inv_output_vocabulary[id] for id in output_ids)\n    \n    return predicted_string\n\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    \n    predictions = []\n    for example in examples:\n        predicted_string = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\\n\")\n        predictions.append(predicted_string)\n    \n    return predictions\n\n# Example usage:\n# Define a simple model that always predicts the same output as input\ndef simple_model(input_ids):\n    return input_ids\n\n# Define input and output vocabularies\ninput_vocab = {'h': 0, 'e': 1, 'l': 2, 'o': 3}\ninv_output_vocab = {0: 'h', 1: 'e', 2: 'l', 3: 'o'}\n\n# Run examples\npredictions = run_examples(simple_model, input_vocab, inv_output_vocab)\n\n# Print predictions\nfor i, prediction in enumerate(predictions):\n    print(f\"Prediction {i+1}: {prediction}\")\n```\n\nThis code defines the `run_examples` function, which runs a given model on a set of input examples and prints the results. It also includes a simple example model that always predicts the input string as output. The input and output vocabularies are defined to demonstrate how the model can process and interpret character sequences."}
{"task_id": 115, "completion_id": 0, "completion": "To solve this problem, we need to implement the binary cross-entropy loss and its gradient for logistic regression. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is in the correct shape\n    if len(y.shape) == 1:\n        y = y.reshape(-1, 1)\n\n    # Calculate z = X @ w\n    z = np.dot(X, w)\n\n    # Apply sigmoid function to get probabilities\n    p = 1 / (1 + np.exp(-z))\n\n    # Replace probabilities close to 0 or 1 with a small constant to avoid log(0) or log(1)\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n\n    # Calculate the loss\n    loss = -1 / len(y) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Calculate the gradient\n    gradient = 1 / len(y) * np.dot(X.T, (p - y))\n    \n    # Round the results to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = gradient.round(4).tolist()\n    \n    return loss_rounded, gradient_rounded\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 1])\nw = np.array([0.5, 0.5])\n\nloss, grad = logistic_loss_and_gradient(X, y, w)\nprint(\"Loss:\", loss)\nprint(\"Gradient:\", grad)\n```\n\n### Explanation:\n1. **Input Handling**: We ensure that `y` is a column vector by reshaping it if necessary.\n2. **Z Calculation**: Compute `z` using the dot product of `X` and `w`.\n3. **Probability Calculation**: Use the sigmoid function to compute the probability `p`.\n4. **Clip Probabilities**: Clip values close to 0 or 1 to avoid numerical issues when taking logs.\n5. **Loss Calculation**: Compute the binary cross-entropy loss using the formula provided.\n6. **Gradient Calculation**: Compute the gradient using the formula provided.\n7. **Rounding**: Round the loss and gradient to 4 decimal places and convert the gradient to a nested list using `tolist()`.\n\nThis implementation should work correctly for the given task."}
{"task_id": 118, "completion_id": 0, "completion": "Here's a complete implementation of the AdaBoost algorithm using decision stumps:\n\n```python\nimport numpy as np\n\nclass DecisionStump:\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.sign = None\n\n    def fit(self, X, y):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_sign = None\n\n        for feature_index in range(X.shape[1]):\n            for threshold in np.unique(X[:, feature_index]):\n                for sign in [-1, 1]:\n                    predictions = np.where(X[:, feature_index] >= threshold, sign, -sign)\n                    error = np.mean(predictions != y)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_index\n                        best_threshold = threshold\n                        best_sign = sign\n\n        self.feature_index = best_feature\n        self.threshold = best_threshold\n        self.sign = best_sign\n\n    def predict(self, X):\n        return np.where(X[:, self.feature_index] >= self.threshold, self.sign, -self.sign)\n\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    weights = np.ones(len(y_train)) / len(y_train)\n    alpha = []\n    predictions = []\n\n    for _ in range(n_clf):\n        stump = DecisionStump()\n        stump.fit(X_train, y_train * weights)\n        predictions.append(stump.predict(X_train))\n\n        errors = (stump.predict(X_train) != y_train).astype(int) * weights\n        epsilon = np.sum(errors)\n        alpha_t = 0.5 * np.log((1 - epsilon) / epsilon)\n        alpha.append(alpha_t)\n\n        weights *= np.exp(-alpha_t * (y_train * predictions[-1]))\n        weights /= np.sum(weights)\n\n    # Aggregate all stump votes to get final prediction\n    aggregated_predictions = np.sign(np.sum([a * p for a, p in zip(alpha, predictions)], axis=0))\n    return aggregated_predictions.tolist()\n\n# Example usage:\n# X_train = ...\n# y_train = ...\n# X_test = ...\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=5))\n```\n\n### Explanation:\n1. **DecisionStump Class**: This class represents a simple decision stump, which makes decisions based on a single feature and a threshold. It can classify samples into two classes (-1 or 1).\n\n2. **fit Method**: The `fit` method finds the best feature and threshold to split the data such that the resulting partition minimizes the weighted classification error.\n\n3. **predict Method**: The `predict` method uses the learned feature index and threshold to make predictions for new data points.\n\n4. **adaboost_predict Function**: This function trains the AdaBoost algorithm using the provided training data. It initializes weights, fits decision stumps, calculates their individual weights, updates the weights based on misclassifications, and aggregates the results to produce the final predictions for the test set."}
{"task_id": 128, "completion_id": 0, "completion": "To implement the multi-class Linear Discriminant Analysis (LDA), we need to follow the steps outlined in the task description. Below is the complete implementation of the `multi_class_lda` function:\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components < 1 or n_components > X.shape[1]:\n        raise ValueError(\"n_components must be between 1 and n_features\")\n    \n    # Step 1: Compute the global mean\n    mu = np.mean(X, axis=0)\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    unique_classes = np.unique(y)\n    num_classes = len(unique_classes)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    \n    for i, cls in enumerate(unique_classes):\n        X_cls = X[y == cls]\n        mu_cls = np.mean(X_cls, axis=0)\n        S_B += X_cls.shape[0] * (mu_cls - mu).reshape(-1, 1) @ (mu_cls - mu).reshape(1, -1)\n    \n    # Step 3: Compute the within-class scatter matrix S_W\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for i, cls in enumerate(unique_classes):\n        X_cls = X[y == cls]\n        mu_cls = np.mean(X_cls, axis=0)\n        S_W += (X_cls - mu_cls).T @ (X_cls - mu_cls)\n    \n    # Step 4: Compute the matrix A = pinv(S_W) \u00b7 S_B\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n    \n    # Step 5: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Step 6: Sort eigen-pairs in descending order of the eigen-values\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    \n    # Step 7: Apply deterministic sign fix\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[i][0] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Step 8: Project X on the first n_components eigenvectors\n    projected_data = np.dot(X, eigenvectors[:, :n_components])\n    \n    # Step 9: Round every element to four decimal places\n    projected_data_rounded = np.round(projected_data, 4)\n    \n    # Convert to list of lists\n    projected_data_list = projected_data_rounded.tolist()\n    \n    return projected_data_list\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\n### Explanation:\n1. **Global Mean Calculation**: We calculate the mean of all data points to get the global mean vector `mu`.\n2. **Between-Class Scatter Matrix (`S_B`)**: We compute the scatter matrix between each class. For each class, we calculate the mean vector of the class, subtract the global mean, and square it. We sum these squared differences weighted by the number of samples in each class.\n3. **Within-Class Scatter Matrix (`S_W`)**: We compute the scatter matrix within each class. For each class, we calculate the difference between each data point and the class mean, square it, and sum these squared differences.\n4. **Matrix `A` Computation**: We compute `A` as the product of the inverse of `S_W` and `S_B`.\n5. **Eigen-Decomposition**: We perform eigen-decomposition on `A` to obtain the eigenvalues and eigenvectors.\n6. **Deterministic Sign Fix**: We ensure that the first non-zero element of each eigenvector is positive.\n7. **Projection**: We project the original data onto the selected eigenvectors.\n8. **Rounding**: We round each element of the projected data to four decimal places.\n9. **Output**: We convert the resulting array to a list of lists and return it.\n\nThis implementation ensures that the LDA transformation is performed correctly and efficiently."}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping a fire maze, we need to simulate the movement of both the agent and the fire over time. The key steps are:\n\n1. **Initialize Data Structures**: Use two queues to keep track of the positions of the agent and the fire. Also, use a set to mark visited cells to avoid revisiting them.\n\n2. **Fire Spread Simulation**: Simulate the spread of fire from each burning cell to its neighboring cells. This will update the fire's position for each minute.\n\n3. **Agent Movement Simulation**: Simulate the agent moving from its current position to its next valid position (a non-burning cell) after the fire has spread. If the agent reaches the goal before the fire catches up, return the number of minutes taken. If the fire catches up to the agent or the agent cannot move further, return -1.\n\nHere's the implementation of the `escape_fire_maze` function:\n\n```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    \n    # Check if the start or goal is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # Initialize the agent's queue and visited set\n    agent_queue = deque([(0, 0)])\n    agent_visited = {(0, 0)}\n    \n    # Initialize the fire's queue and visited set\n    fire_queue = deque([pos for pos, char in enumerate(grid[0]) if char == 'F'])\n    fire_visited = {pos for pos, char in enumerate(grid[0]) if char == 'F'}\n    \n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Time counter\n    time = 0\n    \n    while agent_queue and fire_queue:\n        # Increment the time\n        time += 1\n        \n        # Move the fire\n        new_fire_positions = set()\n        for pos in fire_queue:\n            x, y = divmod(pos, n)\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx * n + ny) not in fire_visited:\n                    new_fire_positions.add(nx * n + ny)\n                    fire_visited.add(nx * n + ny)\n        \n        # Update the fire queue\n        fire_queue = deque(new_fire_positions)\n        \n        # Move the agent\n        for _ in range(len(agent_queue)):\n            x, y = agent_queue.popleft()\n            \n            # Check if the agent reached the goal\n            if (x, y) == (n-1, n-1):\n                return time\n            \n            # Explore all possible moves\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx * n + ny) not in agent_visited:\n                    agent_queue.append((nx, ny))\n                    agent_visited.add(nx * n + ny)\n        \n        # Prune the fire queue if necessary\n        if not fire_queue:\n            break\n    \n    # If the agent cannot reach the goal\n    return -1\n\n# Example usage:\ngrid = [\n    \".F.\",\n    \"#.#\",\n    \".F.\"\n]\nprint(escape_fire_maze(grid))  # Output: 3\n```\n\nThis solution simulates the fire spread and agent movement step-by-step, updating the state of the maze at each minute until the agent reaches the goal or the fire catches up. The function efficiently handles the constraints and ensures that the agent's path is optimized."}
{"task_id": 141, "completion_id": 0, "completion": "Here's a complete implementation of the k-Nearest Neighbors (k-NN) classifier in Python:\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    Implement the k-Nearest Neighbors (k-NN) classifier.\n\n    Parameters:\n    - X_train: A 2D NumPy array where each row represents a feature vector of a training example.\n    - y_train: A 1D NumPy array containing the labels for the training examples.\n    - X_test: A 2D NumPy array where each row represents a feature vector of a test example.\n    - k: An integer representing the number of nearest neighbors to consider.\n    - metric: A string specifying the distance metric ('euclidean', 'manhattan', or 'cosine'). Defaults to 'euclidean'.\n\n    Returns:\n    - A 1-D NumPy array containing the predicted labels for the test examples.\n    \"\"\"\n    \n    # Define a dictionary to map metric names to their corresponding functions\n    distance_functions = {\n        'euclidean': lambda x, y: np.linalg.norm(x - y),\n        'manhattan': lambda x, y: np.sum(np.abs(x - y)),\n        'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))\n    }\n    \n    # Get the appropriate distance function based on the input metric\n    dist_func = distance_functions.get(metric, distance_functions['euclidean'])\n    \n    # Initialize an empty list to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Calculate distances from the current test sample to all training samples\n        distances = [dist_func(test_sample, train_sample) for train_sample in X_train]\n        \n        # Find the indices of the k smallest distances\n        closest_indices = np.argsort(distances)[:k]\n        \n        # Extract the labels of the k closest training samples\n        closest_labels = y_train[closest_indices]\n        \n        # Determine the most common label among the k closest samples\n        unique_labels, counts = np.unique(closest_labels, return_counts=True)\n        predicted_label = unique_labels[np.argmax(counts)]\n        \n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n    \n    # Convert the predictions list to a NumPy array and return it\n    return np.array(predictions)\n\n# Example usage:\n# X_train, y_train, X_test, k, metric = load_data()\n# predictions = knn_predict(X_train, y_train, X_test, k, metric)\n# print(predictions)\n```\n\n### Explanation:\n1. **Distance Functions**: We define a dictionary `distance_functions` that maps each metric name to its corresponding distance calculation function. The Euclidean distance is used as the default if an unknown metric is provided.\n\n2. **Distance Calculation**: For each test sample, we calculate the distance to every training sample using the specified metric.\n\n3. **K Nearest Neighbors**: We find the indices of the `k` smallest distances and extract the corresponding labels from the training data.\n\n4. **Majority Voting**: We determine the most common label among the `k` closest neighbors. In case of a tie, the smallest label value is chosen.\n\n5. **Prediction Collection**: We collect the predicted labels for all test samples and return them as a NumPy array."}
{"task_id": 146, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) classifier from scratch, we need to follow these steps:\n\n1. Compute the distances between each test sample and every training sample using the specified metric.\n2. Select the `k` nearest neighbors for each test sample.\n3. Perform a majority vote on the labels of these neighbors, resolving ties by choosing the smallest label.\n4. Return the predicted labels for all test samples.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2, epsilon=1e-12):\n        dot_product = np.dot(x1, x2)\n        norm_x = np.linalg.norm(x1, ord=2)\n        norm_y = np.linalg.norm(x2, ord=2)\n        if norm_x == 0 or norm_y == 0:\n            return 1  # Avoid division by zero\n        return 1 - (dot_product / (norm_x * norm_y + epsilon))\n\n    # Determine the number of training samples\n    num_train_samples = len(y)\n\n    # Initialize the result list\n    predictions = []\n\n    # Iterate over each test sample\n    for x_test in X_test:\n        # Calculate distances to all training samples\n        if k > num_train_samples:\n            distances = [metric(x_test, train_sample) for train_sample in X]\n        else:\n            distances = sorted([(metric(x_test, train_sample), idx) for idx, train_sample in enumerate(X)], key=lambda item: item[0])\n\n        # Get the indices of the k nearest neighbors\n        nearest_indices = [distances[i][1] for i in range(k)]\n\n        # Extract the labels of the k nearest neighbors\n        neighbor_labels = [y[idx] for idx in nearest_indices]\n\n        # Count occurrences of each label\n        label_counts = {}\n        for label in neighbor_labels:\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n\n        # Find the most common label (in case of a tie, choose the smallest label)\n        predicted_label = min(label_counts, key=label_counts.get)\n\n        # Append the predicted label to the results\n        predictions.append(predicted_label)\n\n    return predictions.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([0, 0, 1, 1])\n# X_test = np.array([[2.5, 3.5], [3.5, 4.5]])\n# print(knn_predict(X, y, X_test))\n```\n\nThis implementation defines a function `knn_predict` that calculates the distances between test samples and training samples using the specified metric, finds the k nearest neighbors, performs a majority vote, and returns the predicted labels. The example usage demonstrates how to call the function with sample data."}
{"task_id": 155, "completion_id": 0, "completion": "To complete the `actor_forward` function, we need to perform the forward pass through the neural network as described. This involves applying the linear transformations and non-linear activation functions in sequence. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert the state to a NumPy array if it's not already\n    state = np.array(state)\n    \n    # Perform the first linear transformation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    \n    # Apply the ReLU activation function\n    a1 = np.maximum(0, z1)\n    \n    # Perform the second linear transformation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    \n    # Apply the ReLU activation function\n    a2 = np.maximum(0, z2)\n    \n    # Perform the third linear transformation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    \n    # Apply the tanh activation function\n    action = np.tanh(z3)\n    \n    # Round each element of the action vector to 4 decimal places\n    rounded_action = [round(x, 4) for x in action]\n    \n    return rounded_action\n\n# Example usage:\n# Define the state and weights\nstate = [0.5, -0.2, 1.1]\nweights = {\n    'W1': np.random.rand(3, 5),  # Example weight matrices\n    'b1': np.random.rand(5),\n    'W2': np.random.rand(5, 6),\n    'b2': np.random.rand(6),\n    'W3': np.random.rand(6, 2),\n    'b3': np.random.rand(2)\n}\n\n# Get the action\naction = actor_forward(state, weights)\nprint(action)\n```\n\n### Explanation:\n1. **State Conversion**: The input state is converted to a NumPy array if it's not already one.\n2. **Linear Transformations**: Each linear transformation is applied using `np.dot` to compute the weighted sum of inputs plus biases.\n3. **ReLU Activation**: The ReLU function is applied element-wise using `np.maximum(0, z)`.\n4. **Tanh Activation**: The final linear transformation is followed by the tanh activation function.\n5. **Rounding**: The result is rounded to four decimal places before returning.\n\nThis implementation ensures that the network follows the specified architecture and handles the rounding requirements as specified."}
{"task_id": 160, "completion_id": 0, "completion": "To implement Lasso regression using coordinate descent in Python, we need to follow the steps outlined in the task description. Below is the complete implementation:\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    \n    weights = np.zeros(n)\n    bias = 0.0\n    \n    for _ in range(max_iters):\n        for j in range(n):\n            if j == 0 and fit_intercept:\n                continue\n            \n            # Compute the partial residual\n            r_j = y - np.dot(X, weights)\n            \n            # Update the weight using soft-thresholding\n            sign_xj = np.sign(np.dot(X[:, j], r_j))\n            abs_xj = np.abs(np.dot(X[:, j], r_j))\n            threshold = lambda_param * m\n            updated_weight = sign_xj * np.maximum(abs_xj - threshold, 0) / np.sum(X[:, j]**2)\n            \n            # Update the weight and bias\n            weights[j] = updated_weight\n            bias += (y - np.dot(X, weights)).mean()\n    \n    return [round(weight, 4) for weight in weights], round(bias, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# lambda_param = 1.0\n# max_iters = 100\n# fit_intercept = True\n# weights, bias = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\n### Explanation:\n1. **Handling Intercept**: If `fit_intercept` is `True`, we prepend an all-ones column to the feature matrix `X`. This allows us to include an intercept term in the model.\n\n2. **Initialization**: We initialize the weight vector `weights` to zero and the bias to zero.\n\n3. **Coordinate Loop**: For each iteration, we iterate over each coefficient `w_j` (excluding the intercept if `fit_intercept` is `True`). For each coefficient:\n   - We compute the partial residual `r_j`.\n   - We apply the soft-thresholding operation to update `w_j`.\n   - We update the bias by averaging the residuals.\n\n4. **Output**: After completing the specified number of iterations, we return the weights and bias, both rounded to four decimal places.\n\nThis implementation ensures that the Lasso regression model is learned using coordinate descent, adhering to the constraints and requirements specified in the task."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Check if both inputs are numpy arrays\n    if isinstance(x, np.ndarray) and isinstance(y, np.ndarray):\n        # Ensure both arrays have the same shape\n        if x.shape != y.shape:\n            return -1\n        # Calculate the Hamming distance using np.where and sum\n        distance = np.sum(np.where(x != y, 1, 0))\n        # Normalize the distance\n        normalized_distance = distance / x.size\n        # Return the result rounded to 4 decimal places\n        return round(normalized_distance, 4)\n    \n    # Convert inputs to numpy arrays if they are not already\n    x_np = np.array(x)\n    y_np = np.array(y)\n    \n    # Check if both arrays have the same shape\n    if x_np.shape != y_np.shape:\n        return -1\n    \n    # Calculate the Hamming distance using np.where and sum\n    distance = np.sum(np.where(x_np != y_np, 1, 0))\n    # Normalize the distance\n    normalized_distance = distance / x_np.size\n    # Return the result rounded to 4 decimal places\n    return round(normalized_distance, 4)\n\n# Example usage:\nprint(hamming_distance([1, 2, 3], [1, 2, 4]))  # Output: 0.3333\nprint(hamming_distance([1, 2, 3], [4, 5, 6]))  # Output: 1.0000\nprint(hamming_distance([1, 2, 3], [1, 2, 3]))  # Output: 0.0000\nprint(hamming_distance([1, 2], [1, 2, 3]))   # Output: -1\n```\n\nThis function first checks if the inputs are numpy arrays and ensures they have the same shape. If not, it returns `-1`. Otherwise, it calculates the Hamming distance by counting the number of differing elements and normalizing it by dividing by the total number of elements. The result is then rounded to four decimal places before being returned."}
{"task_id": 169, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `generate_window` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    if window == \"generalized_cosine\":\n        if coefficients is None or len(coefficients) % 2 != 0:\n            raise ValueError(\"For 'generalized_cosine', the number of coefficients must be even.\")\n        \n        a_k = coefficients\n        window_coeffs = []\n        for n in range(N):\n            sum_val = 0.0\n            for k in range(len(a_k)):\n                sum_val += a_k[k] * np.cos(2 * np.pi * k * n / (N - 1))\n            window_coeffs.append(round(sum_val, 4))\n    else:\n        if window == \"hamming\":\n            a = 0.54\n            b = 0.46\n        elif window == \"hann\":\n            a = 0.5\n            b = 0.5\n        elif window == \"blackman_harris\":\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n        \n        window_coeffs = []\n        for n in range(N):\n            if window == \"generalized_cosine\":\n                sum_val = 0.0\n                for k in range(len(a_k)):\n                    sum_val += a_k[k] * np.cos(2 * np.pi * k * n / (N - 1))\n            else:\n                sum_val = a * (1 - np.cos(2 * np.pi * n / (N - 1))) + b * np.cos(4 * np.pi * n / (N - 1))\n            window_coeffs.append(round(sum_val, 4))\n    \n    return window_coeffs\n\n# Example usage:\nprint(generate_window(\"hamming\", 10))\nprint(generate_window(\"hann\", 10))\nprint(generate_window(\"blackman_harris\", 10))\nprint(generate_window(\"generalized_cosine\", 10, [0.35875, 0.48829, 0.14128, 0.01168]))\n```\n\n### Explanation:\n- **Input Validation**: The function checks if `N` is a positive integer and raises an error if it's not. It also checks for valid window types and ensures that the number of coefficients is even for the \"generalized_cosine\" window.\n- **Window Types**:\n  - **Hamming**: Defined as \\( w[n] = 0.54 - 0.46 \\cos\\left(\\frac{2\\pi n}{N-1}\\right) \\).\n  - **Hann**: Defined as \\( w[n] = 0.5 - 0.5 \\cos\\left(\\frac{2\\pi n}{N-1}\\right) \\).\n  - **Blackman-Harris**: Defined as \\( w[n] = a_0 - a_1 \\cos\\left(\\frac{2\\pi n}{N-1}\\right) + a_2 \\cos\\left(\\frac{4\\pi n}{N-1}\\right) - a_3 \\cos\\left(\\frac{6\\pi n}{N-1}\\right) \\), with specific coefficients.\n  - **Generalized Cosine**: Uses a user-provided list of coefficients \\( a_0, a_1, \\ldots, a_M \\).\n- **Coefficient Calculation**: Each window type is calculated iteratively over the range from 0 to \\( N-1 \\). The results are rounded to four decimal places before being returned as a list."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier from scratch using mini-batch Gradient Descent, we need to follow these steps:\n\n1. Add an intercept term to the data.\n2. Map the input features and labels to a binary format.\n3. Implement the logistic regression model with mini-batch gradient descent.\n4. Make predictions on the test set using a decision threshold of 0.5.\n5. Handle the case where all training labels are identical.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Determine the number of classes\n    num_classes = len(set(y_train))\n    \n    if num_classes != 2:\n        raise ValueError(\"Exactly two distinct numeric values are required for labels.\")\n    \n    # Convert labels to binary format\n    y_train_binary = [1 if label == max(y_train) else 0 for label in y_train]\n    y_test_binary = [1 if label == max(y_train) else 0 for label in y_test]\n    \n    # Add intercept term to the data\n    n_samples = len(X_train)\n    X_train = np.concatenate([np.ones((n_samples, 1)), X_train], axis=1)\n    X_test = np.concatenate([np.ones((len(X_test), 1)), X_test], axis=1)\n    \n    # Initialize weights\n    n_features = X_train.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Function to calculate sigmoid\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Function to compute the cost function\n    def cost_function(X, y, weights):\n        z = np.dot(X, weights)\n        probabilities = sigmoid(z)\n        cost = -np.mean(y * np.log(probabilities) + (1 - y) * np.log(1 - probabilities))\n        return cost\n    \n    # Perform mini-batch gradient descent\n    for epoch in range(epochs):\n        shuffled_indices = np.random.permutation(n_samples)\n        for i in range(0, n_samples, batch_size):\n            batch_indices = shuffled_indices[i:i+batch_size]\n            X_batch = X_train[batch_indices]\n            y_batch = y_train_binary[batch_indices]\n            \n            z = np.dot(X_batch, weights)\n            probabilities = sigmoid(z)\n            gradients = np.dot(X_batch.T, (probabilities - y_batch)) / batch_size\n            \n            weights -= learning_rate * gradients\n        \n        # Calculate the cost after each epoch\n        current_cost = cost_function(X_train, y_train_binary, weights)\n        \n        # Print progress every 100 epochs\n        if epoch % 100 == 0:\n            print(f\"Epoch {epoch}, Cost: {current_cost}\")\n    \n    # Predict probabilities on the test set\n    z_test = np.dot(X_test, weights)\n    probabilities_test = sigmoid(z_test)\n    \n    # Make predictions based on the decision threshold\n    predictions = (probabilities_test > 0.5).astype(int)\n    \n    # Map predictions back to the original label set\n    predictions_original = [max(y_train) if pred == 1 else min(y_train) for pred in predictions]\n    \n    return predictions_original\n\n# Example usage:\n# X_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\n# y_train = [1, 1, 0, 0]\n# X_test = [[5, 6], [6, 7]]\n# predictions = logistic_regression_train_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\n### Explanation:\n- **Data Preprocessing**: We add an intercept term to both training and test sets.\n- **Label Mapping**: The labels are mapped to `{0, 1}` for easier processing.\n- **Cost Function**: The negative log-likelihood (cross-entropy) is used as the cost function.\n- **Gradient Descent**: Mini-batch gradient descent is applied to update the weights iteratively.\n- **Prediction**: The predicted probabilities are converted to binary predictions using a decision threshold of 0.5.\n- **Handling Identical Labels**: If all training labels are identical, the function returns the unique label for all test samples."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps from scratch, we need to follow these steps:\n\n1. Initialize the weights of the samples.\n2. For each iteration `t` up to `n_estimators`:\n   - Fit a decision stump on the current sample weights.\n   - Calculate the classification error of the stump.\n   - Compute the weight `alpha_t` based on the error.\n   - Update the sample weights using the formula for AdaBoost.\n   - Aggregate the contributions of all weak learners to form the final prediction for `X_test`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\nclass DecisionStump:\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.polarity = None\n\n    def fit(self, X, y):\n        n_samples, n_features = X.shape\n        min_error = float('inf')\n        \n        # Iterate over each feature\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X[:, feature_idx])\n            \n            # Try all possible thresholds\n            for threshold in thresholds:\n                # Split into two groups based on the threshold\n                left_mask = X[:, feature_idx] <= threshold\n                right_mask = X[:, feature_idx] > threshold\n                \n                # Predictions for the split\n                left_predictions = 1 if np.sum(y[left_mask]) >= np.sum(y[~left_mask]) else -1\n                right_predictions = -1 if np.sum(y[left_mask]) >= np.sum(y[~left_mask]) else 1\n                \n                # Calculate the classification error\n                errors = np.where(y != left_predictions, 1, 0)\n                error = np.sum(errors * left_mask) + np.sum(errors * ~left_mask)\n                \n                # Check if this is the best threshold so far\n                if error < min_error:\n                    min_error = error\n                    self.feature_index = feature_idx\n                    self.threshold = threshold\n                    self.polarity = left_predictions\n        \n        # If no good stump was found, set polarity to None\n        if min_error == float('inf'):\n            self.polarity = None\n\n    def predict(self, X):\n        if self.polarity is None:\n            raise ValueError(\"Decision stump has not been trained.\")\n        \n        predictions = []\n        for x in X:\n            if x[self.feature_index] <= self.threshold:\n                prediction = self.polarity\n            else:\n                prediction = -self.polarity\n            predictions.append(prediction)\n        return np.array(predictions)\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    predictions = np.zeros(len(X_test))\n    \n    for t in range(n_estimators):\n        # Fit a decision stump\n        stump = DecisionStump()\n        stump.fit(X_train, y_train)\n        \n        # Calculate the classification error\n        predictions_stump = stump.predict(X_train)\n        errors = np.where(y_train != predictions_stump, 1, 0)\n        error_t = np.dot(weights, errors)\n        \n        # Skip if the stump is perfect\n        if error_t == 0:\n            break\n        \n        # Compute alpha_t\n        alpha_t = 0.5 * np.log((1 - error_t) / (error_t + 1e-10))\n        \n        # Update the sample weights\n        weights *= np.exp(-alpha_t * y_train * predictions_stump)\n        weights /= np.sum(weights)\n        \n        # Aggregate the predictions\n        predictions += alpha_t * stump.predict(X_test)\n    \n    # Convert the aggregated predictions to binary labels\n    predictions = (predictions > 0).astype(int)\n    return predictions.tolist()\n\n# Example usage:\n# X_train, y_train, X_test = load_data()  # Replace with actual data loading\n# predictions = adaboost_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\n### Explanation:\n- **DecisionStump Class**: This class defines a single decision stump with methods to fit it to data and make predictions.\n- **adaboost_predict Function**: This function implements the AdaBoost algorithm:\n  - Initializes the sample weights.\n  - Iteratively trains decision stumps, calculates their errors, and updates the weights accordingly.\n  - Aggregates the predictions from all stumps to produce final class labels for `X_test`.\n- **Error Handling**: If a perfect stump is found (i.e., zero error), the loop breaks early to save computation time."}
{"task_id": 178, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function:\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for valid inputs\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    \n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n    \n    # Set up the lower and upper bounds for the search space\n    lower_bound = -1.0\n    upper_bound = 1.0\n    \n    # Initialize positions and velocities\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    \n    # Initialize personal best positions and values\n    p_best_positions = positions.copy()\n    p_best_values = np.array([sphere_function(pos) for pos in p_best_positions])\n    \n    # Initialize global best position and value\n    g_best_position = positions[np.argmin(p_best_values)]\n    g_best_value = sphere_function(g_best_position)\n    \n    # Constants for PSO\n    w = 0.5  # Inertia weight\n    c1 = 1.5  # Cognitive weight\n    c2 = 1.5  # Social weight\n    \n    # Perform PSO optimization\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            velocities[i] = w * velocities[i] + \\\n                           c1 * rng.uniform(0, 1) * (p_best_positions[i] - positions[i]) + \\\n                           c2 * rng.uniform(0, 1) * (g_best_position - positions[i])\n            \n            # Clip velocities within bounds\n            velocities[i] = np.clip(velocities[i], -np.ones_like(velocities[i]), np.ones_like(velocities[i]))\n            \n            # Update position\n            positions[i] += velocities[i]\n            \n            # Clip positions within bounds\n            positions[i] = np.clip(positions[i], lower_bound, upper_bound)\n            \n            # Update personal best if current position is better\n            current_value = sphere_function(positions[i])\n            if current_value < p_best_values[i]:\n                p_best_positions[i] = positions[i]\n                p_best_values[i] = current_value\n        \n        # Update global best if current personal best is better\n        current_g_best_index = np.argmin(p_best_values)\n        if p_best_values[current_g_best_index] < g_best_value:\n            g_best_position = p_best_positions[current_g_best_index]\n            g_best_value = p_best_values[current_g_best_index]\n    \n    # Return the best value rounded to four decimals\n    return round(g_best_value, 4)\n\ndef sphere_function(x):\n    \"\"\"Compute the Sphere function.\"\"\"\n    return np.sum(x**2)\n\n# Example usage:\n# result = particle_swarm_optimisation(n_dims=3, num_particles=50, num_iterations=100, seed=42)\n# print(result)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input dimensions, number of particles, and number of iterations are positive. If not, it returns `-1`.\n\n2. **Random Number Generator**: A random number generator is initialized with the specified seed.\n\n3. **Bounds Setup**: The search space is defined between `-1` and `1` for each dimension.\n\n4. **Initialization**: Positions and velocities are randomly initialized within these bounds. Personal best positions and values are also set to the initial positions. The global best position and value are initialized to the best of the initial positions.\n\n5. **PSO Loop**: For each iteration, each particle's velocity is updated based on its own personal best and the global best. The positions are then updated accordingly, and the bounds are enforced. Personal bests and global bests are updated if the new position improves the corresponding value.\n\n6. **Termination**: After the specified number of iterations, the function returns the best value found, rounded to four decimal places.\n\n7. **Sphere Function**: The `sphere_function` computes the sum of squares of the elements in the input vector, which is the function being optimized."}
{"task_id": 180, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) algorithm as described, we need to follow these steps:\n\n1. Calculate the Euclidean distance between each test sample and every training sample.\n2. Determine the k nearest neighbors based on the calculated distances.\n3. Perform classification or regression based on the specified task type.\n\nHere's the complete implementation of the `knn_predict` function:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(x1, x2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x1 - x2) ** 2))\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbors prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Determine the number of training samples\n    num_train_samples = len(X_train)\n    \n    # Handle edge cases where k is out of bounds\n    if k == 0 or k > num_train_samples:\n        k = num_train_samples\n    \n    # Initialize the list to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for x_test in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = [euclidean_distance(x_test, x_train) for x_train in X_train]\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Extract the labels of the k nearest neighbors\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        \n        # Handle classification\n        if task == \"classification\":\n            # Find the most common label\n            label_counts = Counter(nearest_labels)\n            most_common_label, _ = label_counts.most_common(1)[0]\n            predictions.append(most_common_label)\n        \n        # Handle regression\n        elif task == \"regression\":\n            # Calculate the average of the k nearest neighbor targets\n            avg_target = np.mean(nearest_labels)\n            # Round to 4 decimal places\n            predictions.append(round(avg_target, 4))\n    \n    return predictions\n\n# Example usage:\n# X_train = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n# y_train = ['A', 'B', 'C', 'D', 'E']\n# X_test = [[2, 2], [3, 3], [4, 4]]\n# print(knn_predict(X_train, y_train, X_test, k=3, task=\"classification\"))\n# print(knn_predict(X_train, y_train, X_test, k=3, task=\"regression\"))\n```\n\n### Explanation:\n\n- **Euclidean Distance Calculation**: We define a helper function `euclidean_distance` to compute the Euclidean distance between two points.\n- **Distance Calculation and Selection**: For each test sample, we calculate the distance to all training samples and select the k nearest ones using `np.argsort`.\n- **Classification**: We use `Counter` from the `collections` module to find the most common label among the k nearest neighbors. In case of a tie, it returns the smallest label due to the natural ordering of Python lists.\n- **Regression**: We calculate the average of the k nearest neighbor targets and round it to four decimal places.\n- **Order Preservation**: The order of test samples in the input list is preserved in the output list.\n\nThis implementation handles both classification and regression tasks as specified."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision tree classifier from scratch using the CART algorithm, we need to follow these steps:\n\n1. **Calculate Gini Impurity**: This is used to measure the quality of a split. The Gini index measures the probability of misclassifying a randomly chosen element if it were labeled according to the most frequent class in the subset.\n\n2. **Recursive Splitting**: We recursively select the best feature and threshold to split the data into subsets. The goal is to maximize the reduction in Gini impurity after the split.\n\n3. **Stopping Criteria**: \n   - If all labels at a node are identical, create a leaf node with that label.\n   - If `max_depth` is reached, create a leaf node with the majority class of the node.\n   - If a split results in empty child nodes, create a leaf node with the majority class.\n\n4. **Predictions**: Once the tree is built, use it to predict the class labels for the test set by traversing the tree from root to leaves.\n\nHere's the implementation of the decision tree classifier:\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate Gini impurity for a given array of class labels.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef find_best_split(X, y, feature_index):\n    \"\"\"Find the best split point for a given feature.\"\"\"\n    best_gain = 0\n    best_feature_value = None\n    best_left_y, best_right_y = [], []\n\n    # Sort the feature column and corresponding labels\n    sorted_indices = np.argsort(X[:, feature_index])\n    sorted_X = X[sorted_indices]\n    sorted_y = y[sorted_indices]\n\n    # Calculate cumulative Gini impurities\n    cumulative_gini = np.cumsum(gini_impurity(sorted_y))\n\n    # Find the best split\n    for i in range(len(sorted_X) - 1):\n        left_y = sorted_y[:i + 1]\n        right_y = sorted_y[i + 1:]\n\n        # Calculate weights\n        weight_left = len(left_y) / len(sorted_y)\n        weight_right = len(right_y) / len(sorted_y)\n\n        # Calculate Gini gain\n        current_gain = cumulative_gini[-1] - (\n            weight_left * cumulative_gini[i + 1] +\n            weight_right * cumulative_gini[i]\n        )\n\n        if current_gain > best_gain:\n            best_gain = current_gain\n            best_feature_value = sorted_X[i, feature_index]\n            best_left_y = left_y\n            best_right_y = right_y\n\n    return best_feature_value, best_left_y, best_right_y\n\nclass TreeNode:\n    def __init__(self, value=None, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef build_decision_tree(X, y, max_depth=None, current_depth=0):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    unique_labels = np.unique(y)\n    \n    # Check stopping criteria\n    if len(unique_labels) == 1 or (max_depth is not None and current_depth >= max_depth):\n        return TreeNode(value=unique_labels[0])\n\n    best_feature_index, best_left_y, best_right_y = find_best_split(X, y, np.random.choice(X.shape[1]))\n\n    # Create a new internal node with the best feature and threshold\n    node = TreeNode(best_feature_index)\n\n    # Recursively build the left and right subtrees\n    node.left = build_decision_tree(X[y == best_feature_index], y[y == best_feature_index],\n                                   max_depth=max_depth, current_depth=current_depth + 1)\n    node.right = build_decision_tree(X[y != best_feature_index], y[y != best_feature_index],\n                                    max_depth=max_depth, current_depth=current_depth + 1)\n\n    return node\n\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    # Build the decision tree\n    root = build_decision_tree(X_train, y_train, max_depth=max_depth)\n\n    def traverse(node, x):\n        \"\"\"Traverse the tree to predict the class label for a given input.\"\"\"\n        if node.value is not None:\n            return node.value\n        \n        feature_index = node.value\n        if x[feature_index] < node.left.value:\n            return traverse(node.left, x)\n        else:\n            return traverse(node.right, x)\n\n    # Predict labels for the test set\n    predictions = [traverse(root, x) for x in X_test]\n    return predictions\n\n# Example usage:\n# X_train, y_train, X_test = ...  # Load your dataset\n# predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=3)\n```\n\n### Explanation:\n- **Gini Impurity Calculation**: The `gini_impurity` function calculates the Gini impurity for a given array of class labels.\n- **Best Split Finding**: The `find_best_split` function finds the best split point for a given feature by calculating the Gini gain at each possible threshold.\n- **TreeNode Class**: Represents a node in the decision tree with a value (feature index), left child, and right child.\n- **Decision Tree Construction**: The `build_decision_tree` function constructs the decision tree recursively, applying the stopping criteria mentioned.\n- **Prediction**: The `decision_tree_predict` function uses the constructed tree to predict the class labels for the test set.\n\nThis implementation provides a basic framework for building a decision tree classifier from scratch. You can further enhance it by adding more sophisticated features like handling continuous features, pruning, or using other evaluation metrics."}
{"task_id": 190, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that iterates over each feature and each unique value within that feature to find the best binary split that minimizes the weighted Gini impurity. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y)\n\n    # Calculate the Gini impurity for the entire dataset\n    def gini_impurity(labels):\n        _, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities**2)\n\n    G_whole_dataset = gini_impurity(y)\n\n    # Initialize variables to track the best split\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = G_whole_dataset\n\n    # Iterate over each feature\n    for j in range(X.shape[1]):\n        unique_values = np.unique(X[:, j])\n        \n        # Skip features with only one unique value\n        if len(unique_values) <= 1:\n            continue\n        \n        # Try splitting at each unique value\n        for i in range(len(unique_values) - 1):\n            left_indices = X[:, j] <= unique_values[i]\n            right_indices = X[:, j] > unique_values[i]\n            \n            # Check if both child nodes are non-empty\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            \n            # Calculate the Gini impurity for the left and right nodes\n            n_left = len(left_indices)\n            n_right = len(right_indices)\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            \n            # Calculate the weighted Gini impurity for the split\n            G_split = (n_left / (n_left + n_right)) * G_left + (n_right / (n_left + n_right)) * G_right\n            \n            # Update the best split if this one is better\n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = unique_values[i]\n\n    # Return the best split rounded to 4 decimal places\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\nX = [[1.5, 2.0], [1.8, 2.1], [1.9, 2.2], [2.0, 2.3]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: We define a helper function `gini_impurity` to compute the Gini impurity for a given set of labels.\n\n2. **Initial Setup**: We calculate the Gini impurity for the entire dataset to handle cases where no valid split is found.\n\n3. **Iterate Over Features**: For each feature, we extract unique values and attempt to split the data at each unique value.\n\n4. **Check Validity of Splits**: We ensure that both child nodes are non-empty before calculating the Gini impurity for the split.\n\n5. **Update Best Split**: We update the best split if the current split results in a lower weighted Gini impurity.\n\n6. **Return Result**: Finally, we return the best feature index, threshold, and Gini impurity rounded to four decimal places."}
{"task_id": 191, "completion_id": 0, "completion": "Here's how you can implement the `metric` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)):\n            return False\n        if not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        \n        x = np.array(x)\n        y = np.array(y)\n        \n        if len(x) != len(y):\n            return False\n        \n        if np.any(np.isnan(x)) or np.any(np.isnan(y)):\n            return False\n        \n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return False\n        \n        return True\n    \n    def euclidean(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return round(np.linalg.norm(x - y), 4)\n    \n    def manhattan(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n    \n    def chebyshev(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n    \n    def cosine(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        dot_product = np.dot(x, y)\n        return round(1 - dot_product / (norm_x * norm_y), 4)\n    \n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n    \n    return metrics.get(name, lambda _: -1)\n\n# Example usage:\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\n### Explanation:\n- **Validation**: The `validate_vectors` function checks if the inputs are valid lists, tuples, or NumPy arrays, ensures they are one-dimensional, non-empty, and of the same length. It also checks for NaN values and rejects zero-norm vectors for the cosine distance.\n  \n- **Distance Functions**: Each distance function (`euclidean`, `manhattan`, `chebyshev`, `cosine`) uses the `validate_vectors` function before performing its calculation. If validation fails, it returns `-1`.\n\n- **Metric Dictionary**: A dictionary `metrics` maps each supported metric name to its corresponding function. The `get` method of this dictionary is used to retrieve the appropriate function based on the input `name`. If the name is not found, it defaults to returning `-1`.\n\nThis implementation ensures that all required validations are performed and handles invalid inputs gracefully by returning `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "To implement the `action_stats` function, we need to analyze the environment's action space based on whether it is discrete, continuous, or multi-dimensional. Here's how you can achieve this:\n\n1. **Determine the type of action space**:\n   - If `md_action` is `True`, the action space is multi-dimensional.\n   - If `cont_action` is `True`, the action space is continuous.\n\n2. **Handle multi-dimensional action spaces**:\n   - If `md_action` is `True`, iterate over each sub-space in `env.action_space.spaces`.\n   - For each sub-space, determine if it is discrete or continuous and calculate the number of actions accordingly.\n   - If any dimension is continuous, set the corresponding entry in `n_actions_per_dim` to `np.inf`.\n\n3. **Handle discrete multi-dimensional action spaces**:\n   - Compute the Cartesian product of the range of actions for each dimension to get all possible discrete actions.\n\n4. **Handle continuous action spaces**:\n   - If any dimension is continuous, set `action_ids` to `None`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                # Discrete space\n                n_actions_per_dim.append(space.n)\n                action_dim += 1\n            elif hasattr(space, 'shape'):\n                # Continuous space\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n                break\n        else:\n            # All sub-spaces are discrete\n            action_ids = [tuple(range(n)) for n in n_actions_per_dim]\n    else:\n        # Single-dimensional action space\n        if hasattr(env.action_space, 'n'):\n            # Discrete space\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n        elif hasattr(env.action_space, 'shape') and len(env.action_space.shape) == 1:\n            # Continuous space\n            n_actions_per_dim.append(np.inf)\n            action_ids = None\n        else:\n            raise ValueError(\"Unsupported action space shape\")\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage:\n# env = gym.make('CartPole-v1')\n# md_action = True\n# cont_action = False\n# print(action_stats(env, md_action, cont_action))\n```\n\n### Explanation:\n- **Multi-dimensional action space**: We iterate through each sub-space in `env.action_space.spaces`. If a sub-space is discrete, we append its number of actions to `n_actions_per_dim` and increment `action_dim`. If any sub-space is continuous, we set `n_actions_per_dim` to `[np.inf]` and `action_ids` to `None`.\n- **Single-dimensional action space**: We check if the action space is discrete or continuous directly using `env.action_space.n` and `env.action_space.shape`.\n- **Continuous action space**: If any dimension is continuous, we set `n_actions_per_dim` to `[np.inf]` and `action_ids` to `None`.\n\nThis function will correctly summarize the action space based on the provided flags and the environment's structure."}
{"task_id": 198, "completion_id": 0, "completion": "To implement the \u03b2-maximisation step in Latent Dirichlet Allocation, we need to follow these steps:\n\n1. Compute the numerator for each cell in the \u03b2 matrix using the formula:\n   \\[\n   \\beta_{v,t} \\propto \\sum_{d=0}^{D-1} \\sum_{n=0}^{N_d-1} \\varphi^{(d)}_{n,t} [w^{(d)}_n = v]\n   \\]\n   where \\( w^{(d)}_n = v \\) is an indicator function that checks if the \\( n \\)-th token in document \\( d \\) is the word \\( v \\).\n\n2. Sum up the numerators for each topic to get the denominator for normalising each column.\n\n3. Normalize each column by dividing its numerator by the total sum of numerators for that topic.\n\n4. Round each entry in the normalized matrix to 4 decimal places.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, len(phi[0])))\n\n    # Iterate over each document\n    for d, doc in enumerate(corpus):\n        for t in range(len(phi[d])):\n            # Calculate the numerator for the current topic\n            numerator = np.sum(phi[d][:, t])\n            \n            # Update the beta matrix\n            beta[:, t] += numerator\n    \n    # Normalize each column\n    for t in range(len(beta)):\n        total_numerator = np.sum(beta[t])\n        if total_numerator > 0:\n            beta[t] /= total_numerator\n    \n    # Round the beta matrix to 4 decimal places\n    beta_rounded = np.round(beta, 4).tolist()\n\n    return beta_rounded\n\n# Example usage:\n# phi_example = [\n#     np.array([[0.5, 0.5], [0.3, 0.7]]),\n#     np.array([[0.6, 0.4], [0.8, 0.2]])\n# ]\n# corpus_example = [\n#     [0, 1],\n#     [1, 0]\n# ]\n# V_example = 2\n# print(update_beta(phi_example, corpus_example, V_example))\n```\n\n### Explanation:\n\n- We initialize the `beta` matrix with zeros, having dimensions `(V, T)`.\n- For each document, we iterate over each topic and compute the numerator as the sum of the probabilities for that topic across all tokens in the document.\n- We add this numerator to the corresponding column in the `beta` matrix.\n- After updating all columns, we normalize each column by dividing it by the total sum of numerators for that column to ensure they sum to 1.\n- Finally, we round each entry in the `beta` matrix to 4 decimal places before returning it as a list of lists."}
{"task_id": 202, "completion_id": 0, "completion": "To implement the Partitioning Around Medoids (PAM) clustering algorithm, we need to follow the steps outlined in the problem description. Here's a complete implementation in Python:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    # Step 1: Initialize medoids\n    medoids = X[:k]\n    \n    while True:\n        # Calculate the cost for each medoid\n        costs = np.sum((X[:, np.newaxis] - medoids[np.newaxis, :])**2, axis=2).sum(axis=1)\n        \n        # Find the best swap\n        best_swap_cost_reduction = -np.inf\n        best_medoid_index, best_sample_index = None, None\n        \n        for i in range(k):\n            for j in range(k, len(X)):\n                new_costs = np.copy(costs)\n                \n                # Swap medoid i with sample j\n                new_costs[i] = np.sum((X[j][:, np.newaxis] - medoids[np.newaxis, :])**2, axis=2).sum(axis=1)\n                new_costs[j] = np.sum((X[i][:, np.newaxis] - medoids[np.newaxis, :])**2, axis=2).sum(axis=1)\n                \n                # Check if this swap reduces the total cost\n                cost_reduction = np.sum(new_costs) - np.sum(costs)\n                if cost_reduction > best_swap_cost_reduction:\n                    best_swap_cost_reduction = cost_reduction\n                    best_medoid_index, best_sample_index = i, j\n        \n        # If no swap improves the cost, break the loop\n        if best_swap_cost_reduction <= 0:\n            break\n        \n        # Perform the swap\n        medoids[best_medoid_index], medoids[best_sample_index] = medoids[best_sample_index], medoids[best_medoid_index]\n    \n    # Assign each sample to the nearest medoid\n    labels = np.argmin(np.sum((X[:, np.newaxis] - medoids[np.newaxis, :])**2, axis=2), axis=1)\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: We start by selecting the first `k` samples as the initial medoids.\n2. **Cost Calculation**: For each possible pair of medoid and sample, calculate the total cost reduction if the medoid were swapped with the sample.\n3. **Swap Selection**: Identify the swap that results in the greatest cost reduction.\n4. **Convergence Check**: If no swap reduces the cost, terminate the process.\n5. **Label Assignment**: After convergence, assign each sample to the medoid that minimizes its distance.\n\nThis implementation ensures that the clustering process is deterministic and converges to a local optimum."}
{"task_id": 216, "completion_id": 0, "completion": "To implement Elastic Net regression from scratch, we need to follow several steps:\n\n1. **Build the Feature Matrix**: This involves expanding the original features into higher-degree polynomials and adding a bias term.\n\n2. **Standardize Features**: Subtract the mean and divide by the standard deviation for all features except the bias term.\n\n3. **Initialize Weights**: Start with random weights for the model.\n\n4. **Gradient Descent**: Perform batch gradient descent to minimize the mean-squared error with an Elastic Net penalty.\n\n5. **Predict**: Use the trained weights to make predictions on new data.\n\nHere's the implementation of the `elastic_net_regression` function:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Check input dimensions\n    if len(x_train) != len(y_train):\n        return -1\n    if len(x_test) == 0:\n        return []\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check if shapes are compatible\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # Add bias term\n    x_train = np.hstack((np.ones((x_train.shape[0], 1)), x_train))\n    x_test = np.hstack((np.ones((x_test.shape[0], 1)), x_test))\n    \n    # Polynomial expansion\n    powers = np.arange(degree + 1)\n    poly_x_train = np.power(x_train[:, 1:], powers).T\n    poly_x_test = np.power(x_test[:, 1:], powers).T\n    \n    # Standardize features\n    means = np.mean(poly_x_train, axis=0)\n    stds = np.std(poly_x_train, axis=0)\n    poly_x_train = (poly_x_train - means) / stds\n    poly_x_test = (poly_x_test - means) / stds\n    \n    # Initialize weights\n    num_features = poly_x_train.shape[1]\n    w = np.random.rand(num_features)\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = np.dot(poly_x_train, w)\n        \n        # Compute loss\n        residuals = y_pred - y_train\n        mse = np.mean(residuals**2)\n        l1_penalty = reg_factor * np.sum(np.abs(w[1:]))\n        l2_penalty = reg_factor * np.sum(w[1:]**2)\n        total_loss = mse + (l1_ratio * l1_penalty) + ((1 - l1_ratio) * l2_penalty)\n        \n        # Compute gradients\n        grad_mse = 2 * residuals / len(y_train)\n        grad_l1 = reg_factor * np.sign(w[1:])\n        grad_l2 = 2 * reg_factor * w[1:]\n        grad_total = grad_mse + (l1_ratio * grad_l1) + ((1 - l1_ratio) * grad_l2)\n        \n        # Update weights\n        w -= learning_rate * grad_total\n    \n    # Make predictions on test set\n    y_pred_test = np.dot(poly_x_test, w)\n    y_pred_rounded = np.round(y_pred_test, 4)\n    \n    return y_pred_rounded.tolist()\n\n# Example usage:\n# x_train = [[1, 2], [3, 4]]\n# y_train = [5, 6]\n# x_test = [[5, 6]]\n# print(elastic_net_regression(x_train, y_train, x_test))\n```\n\n### Explanation:\n- **Feature Expansion**: We expand the features using polynomial powers up to the specified degree.\n- **Bias Term**: We add a bias term to the feature matrix.\n- **Standardization**: We standardize the features (excluding the bias term) to have zero mean and unit variance.\n- **Weight Initialization**: We initialize the weights randomly.\n- **Gradient Descent**: We perform batch gradient descent to minimize the mean-squared error with an Elastic Net penalty. The sub-gradient for the L1 penalty is computed using the sign function.\n- **Prediction**: After training, we compute predictions on the test set and round them to four decimal places.\n\nThis implementation assumes that the input matrices are well-formed and contains no missing values. Adjustments may be needed for edge cases or additional functionality."}
{"task_id": 217, "completion_id": 0, "completion": "To implement the required functions for computing the gradient, Hessian, and probability of the logistic loss, we can follow these steps:\n\n1. Convert the input lists/tuples into NumPy arrays for efficient computation.\n2. Compute the sigmoid transformation for each prediction.\n3. Calculate the gradient and Hessian using the derived formulas.\n4. Round the results to six decimal places.\n5. Return the results as separate lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the inputs have the same length\n    if actual.shape != predicted.shape:\n        raise ValueError(\"The lengths of 'actual' and 'predicted' must be equal.\")\n    \n    # Compute sigmoid transformation\n    probabilities = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient\n    gradients = actual * probabilities * (-actual * predicted)\n    \n    # Compute Hessian\n    hessians = probabilities * (1 - probabilities)\n    \n    # Round results to 6 decimal places\n    gradients_rounded = np.round(gradients, decimals=6)\n    hessians_rounded = np.round(hessians, decimals=6)\n    probabilities_rounded = np.round(probabilities, decimals=6)\n    \n    # Convert NumPy arrays back to lists\n    gradient_list = gradients_rounded.tolist()\n    hessian_list = hessians_rounded.tolist()\n    probability_list = probabilities_rounded.tolist()\n    \n    return gradient_list, hessian_list, probability_list\n\n# Example usage:\nactual = [1, -1, 1]\npredicted = [-0.5, 0.5, -0.5]\ngradient, hessian, probability = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n\nThis code defines the `logistic_components` function, which computes the gradient, Hessian, and probability of the logistic loss for given actual and predicted values. It handles input validation, performs necessary computations, and rounds the results to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "To solve this problem, we need to evaluate the outcomes of both the player's and the dealer's hands according to the specified rules of Blackjack. Here's how you can implement the `blackjack_outcome` function:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def calculate_score(hand):\n        total = sum(hand)\n        num_aces = hand.count(1)\n        \n        if num_aces > 0 and total <= 11:\n            total += 10\n        \n        return total\n\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    if player_score > 21:\n        return -1  # Player busts\n    elif dealer_score > 21:\n        return 1   # Dealer busts, player wins\n    elif player_score == dealer_score:\n        return 0   # Draw\n    elif player_score > dealer_score:\n        return 1.5  # Player wins with a natural blackjack\n    else:\n        return 1   # Player wins normally\n\n# Example usage:\nprint(blackjack_outcome([1, 10], [1, 10]))  # Natural blackjack\nprint(blackjack_outcome([1, 2, 3], [4, 5]))  # Player wins\nprint(blackjack_outcome([7, 8], [9, 10]))  # Dealer wins\nprint(blackjack_outcome([10, 10], [2, 2]))  # Draw\n```\n\n### Explanation:\n\n1. **calculate_score Function**: This helper function calculates the score of a hand. It sums up the values of the cards and checks if there is an Ace that can be used as 11 without exceeding 21.\n\n2. **Player and Dealer Scores**: We calculate the scores for both the player and the dealer using the `calculate_score` function.\n\n3. **Outcome Evaluation**:\n   - If the player busts (`player_score > 21`), the player loses, so the reward is `-1`.\n   - If the dealer busts (`dealer_score > 21`) but the player does not, the player wins, so the reward is `+1`.\n   - If both scores are equal, it's a draw, and the reward is `0`.\n   - If the player's score is greater than the dealer's score, the player wins, and we check if the player has a natural blackjack. If they do, the reward is `1.5`; otherwise, it's `1`.\n   - If the player's score is less than the dealer's score, the player loses, so the reward is `-1`.\n\nThis implementation ensures that the function adheres to the rules of Blackjack and returns the correct reward based on the outcome of the round."}
{"task_id": 221, "completion_id": 0, "completion": "Here's how you can implement the Mean Squared Logarithmic Error (MSLE) in Python:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate the element-wise squared logarithmic error between actual and predicted values.\"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        raise ValueError(\"Inputs must be lists, tuples, or NumPy arrays.\")\n    \n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of actual and predicted must be the same.\")\n    \n    if not all(x >= 0 for x in actual) or not all(x >= 0 for x in predicted):\n        raise ValueError(\"All values in both actual and predicted must be non-negative.\")\n    \n    # Calculate the squared logarithmic errors\n    errors = np.log1p(actual) - np.log1p(predicted)\n    squared_errors = errors ** 2\n    \n    return squared_errors\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n    \n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n    \n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    try:\n        squared_errors = squared_log_error(actual, predicted)\n        msle = np.mean(squared_errors)\n        return round(msle, 4)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return -1\n\n# Example usage:\n# actual = [1.0, 2.0, 3.0]\n# predicted = [1.5, 2.5, 3.5]\n# print(mean_squared_log_error(actual, predicted))\n```\n\n### Explanation:\n\n1. **Helper Function (`squared_log_error`)**:\n   - Validates that both inputs are either lists, tuples, or NumPy arrays.\n   - Checks if they have the same length and contains only non-negative values.\n   - Computes the squared logarithmic error using `np.log1p`, which computes `log(1 + x)` for each element.\n\n2. **Main Function (`mean_squared_log_error`)**:\n   - Calls the helper function to get the squared errors.\n   - Calculates the mean of these squared errors.\n   - Rounds the result to four decimal places.\n   - Handles exceptions and returns `-1` if any validation fails.\n\nThis implementation ensures that the inputs meet the specified requirements and provides a robust way to calculate the MSLE."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function in Python, we need to handle both scalar and array-like inputs. We'll use NumPy for efficient computation, especially for handling arrays. Here's how you can implement the function:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z = np.array(z)\n    \n    # Use NumPy's where function to apply the sigmoid formula efficiently\n    # This handles large values by using logaddexp to avoid overflow\n    result = np.where(z >= 0,\n                       1 / (1 + np.exp(-z)),\n                       np.exp(z) / (np.exp(z) + 1))\n    \n    # Round the result to 4 decimal places\n    rounded_result = np.round(result, decimals=4)\n    \n    # Convert the result back to a Python list if necessary\n    if isinstance(z, np.ndarray) and len(z.shape) > 0:\n        return rounded_result.tolist()\n    else:\n        return rounded_result.item()\n\n# Example usage:\nprint(sigmoid(1000))      # Output: 1.0000\nprint(sigmoid(-1000))     # Output: 0.0000\nprint(sigmoid([1, -1, 2]))  # Output: [0.7311, 0.2689, 0.8808]\nprint(sigmoid(np.array([1, -1, 2])))  # Output: [0.7311, 0.2689, 0.8808]\n```\n\n### Explanation:\n- **Input Handling**: The function first converts the input `z` to a NumPy array. This allows us to leverage NumPy's vectorized operations.\n- **Numerical Stability**: For large values of `z`, using `np.logaddexp` helps prevent overflow. It computes `log(exp(x) + exp(y))` in a numerically stable way.\n- **Element-Wise Operation**: The `np.where` function is used to apply the sigmoid formula element-wise based on whether each element of `z` is greater than or equal to zero.\n- **Rounding**: The result is rounded to four decimal places using `np.round`.\n- **Output Conversion**: If the input was a list or array, the result is converted back to a Python list. Otherwise, it remains a single float.\n\nThis implementation ensures that the function works correctly for both scalar and array inputs and maintains numerical stability."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, tuple)):\n            return [apply_leaky_relu(sub_x) for sub_x in x]\n        elif isinstance(x, np.ndarray):\n            return x.clip(0, None).tolist() + a * x.clip(None, 0).tolist()\n        else:\n            return max(x, a * x)\n\n    return apply_leaky_relu(z)\n```\n\nThis implementation defines a recursive function `apply_leaky_relu` that processes each element of the input `z`. If the element is a list or tuple, it recursively applies the Leaky ReLU to its elements. If the element is a NumPy array, it clips the positive and negative parts separately and combines them with the appropriate slope. For scalars, it directly applies the Leaky ReLU formula. The result is then converted to a Python list using `tolist()`."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps, we need to follow these steps:\n\n1. Initialize the sample weights `w` to be equal for all samples.\n2. For each iteration `i` from 1 to `n_clf`:\n   - Find the best decision stump `(feature_index, threshold, polarity)` that minimizes the weighted classification error.\n   - Compute the learner weight `alpha_i` using the formula `alpha_i = 0.5 * ln((1 - error) / (error + 1e-10))`.\n   - Update the sample weights `w` based on the current stump's predictions.\n3. Predict the labels for the test set using the ensemble of decision stumps.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    w = np.ones(n_samples) / n_samples  # Initial weights\n    \n    predictions = []\n    \n    for _ in range(n_clf):\n        # Step 1: Find the best decision stump\n        min_error = float('inf')\n        best_stump = None\n        \n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    # Predictions for the current stump\n                    y_pred = (X_train[:, feature_idx] > threshold) == polarity\n                    \n                    # Calculate the weighted error\n                    error = np.sum(w[y_train != y_pred])\n                    \n                    # If this is the smallest error found so far, update the best stump\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        \n        # Step 2: Compute the learner weight alpha_i\n        alpha_i = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        \n        # Step 3: Update the sample weights\n        w *= np.exp(-alpha_i * y_train * y_pred)\n        w /= np.sum(w)\n        \n        # Step 4: Make predictions using the ensemble\n        y_pred_ensemble = np.sign(np.dot(w, y_train))\n        predictions.append(y_pred_ensemble)\n    \n    return predictions[0]\n\n# Example usage:\n# X_train, y_train, X_test = load_data()  # Replace with actual data loading\n# predictions = adaboost_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\n### Explanation:\n- **Initialization**: We start by initializing the sample weights `w` to be uniform.\n- **Finding the Best Stump**: For each feature and threshold combination, we check both possible polarities (1 and -1). We calculate the weighted classification error for each stump and keep track of the stump with the lowest error.\n- **Updating Weights**: After finding the best stump, we update the sample weights based on the current stump's predictions.\n- **Predicting**: Finally, we use the ensemble of decision stumps to make predictions on the test set by computing the weighted sum of the individual stump predictions. The final predictions are the signs of these sums."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we need to follow the steps outlined in the problem statement. Here's how you can achieve this using NumPy:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 1: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution\n    d0, d1, *rest = shape\n    A = np.random.randn(d0, d1)\n\n    # Step 2: Compute the singular value decomposition (SVD) of A\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 3: Choose the SVD factor that has the same size as A\n    k = min(d0, d1)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 4: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = Q.reshape(shape).astype(float)\n    result *= scale\n\n    # Verify the orthogonality condition\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale**2 * np.eye(shape[0]), atol=1e-6), \"Orthogonality condition not satisfied\"\n    else:\n        assert np.allclose(flat.T @ flat, scale**2 * np.eye(shape[1]), atol=1e-6), \"Orthogonality condition not satisfied\"\n\n    # Return the result as a list of lists\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nprint(orthogonal(shape, scale))\n```\n\n### Explanation:\n1. **Matrix Initialization**: We create a 2-D matrix `A` filled with i.i.d. samples from the standard normal distribution.\n2. **SVD Calculation**: We compute the Singular Value Decomposition (SVD) of `A`. This gives us matrices `U`, `S`, and `Vt`.\n3. **Choosing the SVD Factor**: We choose the SVD factor that matches the size of `A`. If `U` has the same shape as `A`, we use `U`; otherwise, we use `Vt`.\n4. **Reshaping and Scaling**: We reshape the chosen SVD factor into the desired shape and scale it by the given `scale`.\n5. **Verification**: We verify that the resulting matrix satisfies the orthogonality condition by checking the dot product of its rows or columns against the identity matrix scaled by `scale`.\n6. **Return**: Finally, we return the result as a list of lists.\n\nThis implementation ensures that the resulting tensor is orthogonal up to the specified scaling factor."}
{"task_id": 243, "completion_id": 0, "completion": "To implement the forward pass of the specified Actor-Critic network using NumPy, we need to follow the steps outlined in the problem description. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert the state list to a NumPy array\n    state_array = np.array(state)\n    \n    # Initialize weights and biases\n    W1 = np.ones((4, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    W_a = np.ones((4, 3))\n    b_a = np.zeros(3)\n    W_c = np.ones((4, 1))\n    b_c = np.zeros(1)\n    \n    # Compute intermediate activations\n    z1 = np.maximum(0, np.dot(state_array, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    \n    # Compute logits for the actor head\n    logits = np.dot(z3, W_a) + b_a\n    \n    # Compute action probabilities using softmax\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    \n    # Compute the state value\n    state_value = np.dot(z3, W_c) + b_c\n    \n    # Round the results to 4 decimal places\n    action_probs_rounded = np.round(action_probs, 4)\n    state_value_rounded = round(state_value[0], 4)\n    \n    return action_probs_rounded.tolist(), state_value_rounded\n\n# Example usage:\nstate = [1.0, -0.5, 0.8]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\n### Explanation:\n1. **Input State**: The input state is converted into a NumPy array.\n2. **Weight Initialization**: We initialize the weights and biases with values of 1.0 and 0.0, respectively.\n3. **Intermediate Activations**: We compute the intermediate activations using ReLU activation functions.\n4. **Logits Calculation**: The logits for the actor head are computed by multiplying the final hidden layer (`z3`) with the weight matrix `W_a` and adding the bias `b_a`.\n5. **Softmax Activation**: Action probabilities are obtained by applying the softmax function to the logits.\n6. **State Value Computation**: The state value is computed by multiplying the final hidden layer (`z3`) with the weight matrix `W_c` and adding the bias `b_c`.\n7. **Rounding**: Both the action probabilities and the state value are rounded to four decimal places before being returned.\n\nThis implementation ensures that the network behaves deterministically according to the given architecture and parameters."}
{"task_id": 249, "completion_id": 0, "completion": "Here's how you can implement the `actor_critic_forward` function using NumPy:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state).reshape(1, -1)\n    \n    # First set of weights and biases for the shared layers\n    W1, b1, W2, b2, W3, b3 = map(np.array, [params['W1'], params['b1'], params['W2'], params['b2'], params['W3'], params['b3']])\n    \n    # Perform the first affine transformation and ReLU activation\n    hidden_1 = np.maximum(0, np.dot(state, W1) + b1)\n    \n    # Second set of weights and biases for the shared layers\n    hidden_2 = np.maximum(0, np.dot(hidden_1, W2) + b2)\n    \n    # Third set of weights and biases for the shared layers\n    hidden_3 = np.maximum(0, np.dot(hidden_2, W3) + b3)\n    \n    # Weights and biases for the actor head\n    Wa, ba = map(np.array, [params['Wa'], params['ba']])\n    \n    # Compute the raw scores for the actor head\n    actor_scores = np.dot(hidden_3, Wa) + ba\n    \n    # Apply softmax to get the probabilities\n    probabilities = np.exp(actor_scores) / np.sum(np.exp(actor_scores), axis=1, keepdims=True)\n    \n    # Weights and biases for the critic head\n    Wc, bc = map(np.array, [params['Wc'], params['bc']])\n    \n    # Compute the state value\n    value = np.dot(hidden_3, Wc) + bc\n    \n    # Round the results to 4 decimal places\n    probabilities_rounded = np.round(probabilities[0], decimals=4)\n    value_rounded = round(value[0], 4)\n    \n    return probabilities_rounded.tolist(), value_rounded\n\n# Example usage:\nstate = [0.1, 0.2, 0.3]\nparams = {\n    'W1': [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],\n    'b1': [0.1, 0.2, 0.3],\n    'W2': [[7.0, 8.0], [9.0, 10.0]],\n    'b2': [0.4, 0.5],\n    'W3': [[11.0], [12.0]],\n    'b3': [0.6],\n    'Wa': [[13.0, 14.0], [15.0, 16.0]],\n    'ba': [0.7, 0.8],\n    'Wc': [[17.0], [18.0]],\n    'bc': [0.9]\n}\n\nprobabilities, value = actor_critic_forward(state, params)\nprint(\"Probabilities:\", probabilities)\nprint(\"Value:\", value)\n```\n\nThis code defines the `actor_critic_forward` function, which computes the forward pass through the specified Actor-Critic network using NumPy. It includes all necessary steps from input preprocessing to output rounding, ensuring the output meets the specified constraints."}
{"task_id": 253, "completion_id": 0, "completion": "To implement the `elastic_net_regularization` function, we need to calculate both the penalty value and the gradient based on the provided parameters. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert w to a NumPy array if it's not already\n    w = np.array(w)\n    \n    # Calculate the L2 norm of the weight vector\n    l2_norm = np.linalg.norm(w)\n    \n    # Compute the penalty value\n    penalty_value = alpha * (l1_ratio * l2_norm + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n    \n    # Calculate the gradient if requested\n    if gradient:\n        gradient_value = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return gradient_value.round(4).tolist()\n    else:\n        return round(penalty_value, 4)\n\n# Example usage:\nw = [1, 2, 3]\nalpha = 0.5\nl1_ratio = 0.5\n\nprint(elastic_net_regularization(w, alpha, l1_ratio))  # Output: 6.0\nprint(elastic_net_regularization(w, alpha, l1_ratio, gradient=True))  # Output: [0.0, 0.0, 0.0]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `w` is a list and converts it to a NumPy array if necessary.\n2. **L2 Norm Calculation**: It computes the L2 norm of the weight vector `w`.\n3. **Penalty Value Calculation**: Using the formula for the Elastic-Net penalty, it calculates the penalty value.\n4. **Gradient Calculation**: If `gradient` is set to `True`, it computes the gradient using the formula for the Elastic-Net gradient. The result is rounded to four decimal places and returned as a list.\n5. **Return Type**: If `gradient` is `False`, the function returns the penalty value as a float, also rounded to four decimal places."}
{"task_id": 256, "completion_id": 0, "completion": "To implement the numerical gradient check for a vanilla RNN parameter using the centred finite difference formula, we need to follow these steps:\n\n1. Identify the correct parameter name from the input `param_name`.\n2. Create copies of the original parameter values to use for perturbation.\n3. Perturb the parameter values by adding and subtracting `epsilon`.\n4. Run the forward pass for `n_t` time-steps with the perturbed parameters.\n5. Calculate the loss for both perturbed states.\n6. Compute the numerical gradient using the centered finite difference formula.\n7. Store the numerical gradient in a list and return its transpose.\n\nHere's the implementation of the `grad_check_RNN` function:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    if param_name == \"X\" or param_name == \"y\":\n        return None\n    \n    grads = []\n    \n    # Get the original parameter value\n    original_param = model.parameters[param_name].copy().astype(np.float64)\n    \n    # Iterate over each element in the parameter\n    for i in range(original_param.size):\n        # Perturb the parameter by +epsilon\n        perturbed_param_plus = original_param.copy()\n        perturbed_param_plus.flat[i] += epsilon\n        \n        # Perturb the parameter by -epsilon\n        perturbed_param_minus = original_param.copy()\n        perturbed_param_minus.flat[i] -= epsilon\n        \n        # Reset gradients\n        model.flush_gradients()\n        \n        # Forward pass with perturbed parameter +epsilon\n        predictions_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(predictions_plus)\n        \n        # Reset gradients\n        model.flush_gradients()\n        \n        # Forward pass with perturbed parameter -epsilon\n        predictions_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(predictions_minus)\n        \n        # Calculate the numerical gradient\n        num_grad = (loss_plus - loss_minus) / (2 * epsilon)\n        \n        # Append the numerical gradient to the list\n        grads.append(num_grad)\n    \n    # Return the transposed numerical gradient\n    return np.array(grads).T.astype(np.float64)\n```\n\n### Explanation:\n- **Parameter Handling**: We handle the special cases for \"Ba\" and \"Bx\" by converting them to lowercase. For \"X\" and \"y\", we immediately return `None` since they are not trainable parameters.\n- **Perturbation**: We create two copies of the parameter values: one perturbed by `+epsilon` and another by `-epsilon`. These perturbed values are used to compute the loss.\n- **Gradient Calculation**: Using the centered finite difference formula, we calculate the numerical gradient for each element of the parameter.\n- **Storage and Return**: The numerical gradients are collected in a list and returned as a transposed NumPy array.\n\nThis function efficiently computes the numerical gradient for any given RNN parameter using the specified finite difference approach."}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps, we need to follow these steps:\n\n1. Initialize weights for each training example.\n2. Iterate over `n_clf` times, building a decision stump for each iteration.\n3. For each stump, calculate its weighted error.\n4. Compute the weight for the stump based on the error.\n5. Update the weights of the training examples based on the stump's performance.\n6. Aggregate the votes from all stumps to make predictions on new data.\n\nHere's the implementation of the `adaboost_predict` function:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    # Initialize weights\n    m = len(y_train)\n    w = np.ones(m) / m\n    \n    # List to store predictions\n    predictions = []\n    \n    # Build n_clf decision stumps\n    for _ in range(n_clf):\n        # Find the best decision stump\n        best_stump = None\n        min_error = float('inf')\n        \n        for feature_idx in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_idx])\n            \n            for threshold in thresholds:\n                # Split the data into two parts\n                left_indices = X_train[:, feature_idx] <= threshold\n                right_indices = X_train[:, feature_idx] > threshold\n                \n                # Calculate predictions for left and right subsets\n                y_left = y_train[left_indices]\n                y_right = y_train[right_indices]\n                \n                # Assign labels based on the threshold\n                pred_left = np.where(y_left == 1, 1, -1)\n                pred_right = np.where(y_right == 1, 1, -1)\n                \n                # Calculate weighted errors\n                error_left = np.sum(w[left_indices] * (pred_left != y_left))\n                error_right = np.sum(w[right_indices] * (pred_right != y_right))\n                \n                # Total error\n                total_error = error_left + error_right\n                \n                # Check if this is the best stump so far\n                if total_error < min_error:\n                    min_error = total_error\n                    best_stump = {\n                        'feature': feature_idx,\n                        'threshold': threshold,\n                        'prediction_left': pred_left,\n                        'prediction_right': pred_right\n                    }\n        \n        # If no better stump found, skip this iteration\n        if best_stump is None:\n            break\n        \n        # Calculate alpha for the current stump\n        epsilon_t = min_error / np.sum(w)\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        \n        # Update weights\n        w *= np.exp(-alpha_t * y_train * best_stump['prediction'])\n        w /= np.sum(w)\n        \n        # Make predictions with the current stump\n        y_pred = np.where(best_stump['prediction_left'] == 1, 1, -1)\n        predictions.append(np.sign(np.sum(alpha_t * y_pred)))\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We initialize the weights `w` to be equal for all samples initially.\n\n2. **Decision Stump Construction**: In each iteration, we find the best decision stump by trying different thresholds for each feature. The best stump is chosen based on the minimum weighted error.\n\n3. **Weight Update**: After finding the best stump, we update the weights of the training examples. Samples that were misclassified by the stump have their weights increased, while those correctly classified have their weights decreased.\n\n4. **Prediction Aggregation**: For each test sample, we compute the weighted sum of the predictions from all stumps and use the sign of this sum to determine the final prediction.\n\nThis implementation efficiently builds a boosted classifier using decision stumps and returns the predicted labels for the test set."}
{"task_id": 261, "completion_id": 0, "completion": "To implement the Glorot Xavier Normal weight initialization, we need to follow these steps:\n\n1. Compute the fan-in and fan-out values based on the input shape.\n2. Calculate the standard deviation `s` using the formula \\( s = \\sqrt{\\frac{2}{\\text{fan\\_in} + \\text{fan\\_out}}} \\).\n3. Generate a NumPy array with the specified shape and fill it with samples drawn from a normal distribution with mean 0 and standard deviation `s`.\n\nHere's how you can implement this:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Calculate fan-in and fan-out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Calculate standard deviation\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n\n    # Generate random samples from a normal distribution\n    rng = np.random.default_rng()\n    weights = rng.normal(loc=0, scale=std_dev, size=shape)\n\n    return weights\n\n# Example usage:\nshape = (4, 5)\nweights = glorot_normal(shape)\nprint(weights.shape)\nprint(np.mean(weights))\nprint(np.std(weights))\n```\n\n### Explanation:\n\n- **Fan-In and Fan-Out Calculation**: \n  - If the shape has exactly two dimensions, `fan_in` and `fan_out` are simply the two dimensions.\n  - If the shape has more than two dimensions, the receptive field size is calculated as the product of all dimensions after the first two, and then `fan_in` and `fan_out` are computed accordingly.\n\n- **Standard Deviation Calculation**:\n  - The standard deviation `s` is calculated using the formula \\( s = \\sqrt{\\frac{2}{\\text{fan\\_in} + \\text{fan\\_out}}} \\).\n\n- **Random Sampling**:\n  - We use `np.random.default_rng()` to create a random number generator, which allows us to control the randomness without affecting the global state.\n  - We generate random samples from a normal distribution with mean 0 and standard deviation `s`, and reshape them to match the desired output shape.\n\nThis implementation ensures that the weights are initialized according to the Glorot Xavier normal distribution, which helps in stabilizing the learning process during network training."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of converting an undirected graph from its vertex list `V` and edge list `E` into an adjacency list representation, we need to ensure that each vertex's neighbors are listed exactly once, without duplicates, and in the order they appear in the original vertex list `V`. Here's how you can implement this:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to store the adjacency list\n    adj_list = {vertex: [] for vertex in V}\n    \n    # Iterate over each edge and add both directions to the adjacency list\n    for u, v in E:\n        # Add v to u's adjacency list\n        if v not in adj_list[u]:\n            adj_list[u].append(v)\n        \n        # Add u to v's adjacency list\n        if u not in adj_list[v]:\n            adj_list[v].append(u)\n    \n    # Sort the neighbors in each adjacency list\n    for key in adj_list:\n        adj_list[key].sort()\n    \n    # Convert the dictionary back to a list of lists\n    G = [adj_list[vertex] for vertex in V]\n    \n    return G\n\n# Example usage:\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('B', 'D'), ('C', 'D')]\nG = build_adj_list(V, E)\nprint(G)  # Output: [['B', 'C'], ['A', 'C'], ['A', 'B', 'D'], ['B', 'C', 'D']]\n```\n\n### Explanation:\n1. **Initialization**: We create a dictionary `adj_list` where each key is a vertex from `V` and the value is an empty list to store its neighbors.\n\n2. **Edge Processing**: For each edge `(u, v)` in `E`, we add `v` to `u`'s adjacency list and vice versa. This ensures that both directions of the edge are represented.\n\n3. **Sorting**: After populating the adjacency list, we sort each list of neighbors to maintain the order of appearance in `V`.\n\n4. **Conversion**: Finally, we convert the dictionary back into a list of lists using a list comprehension, preserving the order of vertices from `V`.\n\nThis approach efficiently constructs the adjacency list while ensuring that all conditions are met."}
{"task_id": 267, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that finds the optimal weighted decision stump for a given dataset. The function will iterate through all possible features and thresholds, calculate the weighted classification error for each stump, and keep track of the stump with the lowest error.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    best_stump = None\n    min_weighted_error = float('inf')\n    \n    n_samples, n_features = X.shape\n    \n    for i in range(n_features):\n        unique_values = np.unique(X[:, i])\n        \n        for j in range(len(unique_values)):\n            threshold = unique_values[j]\n            \n            # Calculate predictions for the current stump\n            if y[i] == 1:\n                predictions = np.where(X[:, i] < threshold, 1, -1)\n            else:\n                predictions = np.where(X[:, i] >= threshold, 1, -1)\n            \n            # Calculate weighted error\n            weighted_error = np.sum(sample_weights * (predictions != y))\n            \n            # Update best stump if this one has a lower error\n            if weighted_error < min_weighted_error:\n                min_weighted_error = weighted_error\n                best_stump = {\n                    \"feature_index\": i,\n                    \"threshold\": round(threshold, 4),\n                    \"polarity\": 1 if y[i] == 1 else -1,\n                    \"weighted_error\": round(weighted_error, 4)\n                }\n    \n    return best_stump\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, 1, -1, -1])\n# sample_weights = np.array([0.2, 0.2, 0.3, 0.3])\n# result = train_decision_stump(X, y, sample_weights)\n# print(result)\n```\n\n### Explanation:\n\n1. **Iterate Over Features**: We loop through each feature index `i`.\n\n2. **Extract Unique Values**: For each feature, we extract the unique values from the column to determine potential thresholds.\n\n3. **Calculate Predictions**: For each threshold, we predict the class based on whether the feature value is less than or greater than the threshold.\n\n4. **Compute Weighted Error**: We compute the weighted classification error using the formula provided in the task description.\n\n5. **Track Best Stump**: If the current stump has a lower weighted error than the previously recorded minimum, we update the best stump.\n\n6. **Return Result**: Finally, we return the best stump found.\n\nThis implementation efficiently explores all possible stumps and selects the one with the lowest weighted error."}
{"task_id": 273, "completion_id": 0, "completion": "To solve this problem, we need to implement the `best_split` function that calculates the information gain for each possible threshold and selects the one with the maximum gain. Here's how you can do it:\n\n```python\nimport math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Sort the feature values\n    sorted_feature = sorted(set(feature))\n    \n    # Check if there are any duplicate feature values\n    if len(sorted_feature) == len(feature):\n        return (None, 0.0)\n    \n    # Initialize variables to store the best threshold and information gain\n    best_threshold = None\n    max_info_gain = -math.inf\n    \n    # Iterate over all possible thresholds\n    for i in range(len(sorted_feature) - 1):\n        left_indices = [idx for idx, x in enumerate(feature) if x < sorted_feature[i + 1]]\n        right_indices = [idx for idx, x in enumerate(feature) if x >= sorted_feature[i + 1]]\n        \n        # Calculate the number of samples in left and right subsets\n        n = len(target)\n        left_count = len(left_indices)\n        right_count = len(right_indices)\n        \n        # If both subsets are empty, skip this threshold\n        if left_count == 0 or right_count == 0:\n            continue\n        \n        # Count the class labels in the left and right subsets\n        left_labels = [target[idx] for idx in left_indices]\n        right_labels = [target[idx] for idx in right_indices]\n        \n        # Calculate the entropy of the parent set\n        total_counts = Counter(target)\n        parent_entropy = -sum((count / n) * math.log2(count / n) for count in total_counts.values())\n        \n        # Calculate the entropies of the left and right subsets\n        left_entropy = -sum((count / left_count) * math.log2(count / left_count) for count in Counter(left_labels).values())\n        right_entropy = -sum((count / right_count) * math.log2(count / right_count) for count in Counter(right_labels).values())\n        \n        # Calculate the information gain\n        info_gain = parent_entropy - (left_count / n) * left_entropy - (right_count / n) * right_entropy\n        \n        # Update the best threshold if this one has a higher information gain\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = sorted_feature[i + 1]\n    \n    # Return the best threshold and information gain rounded to 4 decimal places\n    return (round(best_threshold, 4), round(max_info_gain, 4))\n\n# Example usage:\n# feature = [1.5, 2.3, 3.7, 3.7, 4.9, 5.2]\n# target = [0, 0, 1, 1, 1, 0]\n# print(best_split(feature, target))  # Output will depend on the input\n```\n\n### Explanation:\n1. **Sorting and Handling Duplicates**: We first sort the unique feature values and check if there are any duplicates. If there are, we return `(None, 0.0)` because a valid split cannot be made.\n\n2. **Iterating Over Thresholds**: We iterate over each pair of consecutive sorted feature values to consider as potential split points.\n\n3. **Splitting Data**: For each threshold, we create two lists of indices representing the left and right subsets of the data.\n\n4. **Calculating Entropy**: We calculate the Shannon entropy for the parent set, the left subset, and the right subset using `Counter` to count occurrences of each class label.\n\n5. **Computing Information Gain**: The information gain is calculated using the formula provided.\n\n6. **Updating Best Threshold**: If the current threshold yields a higher information gain than the previously recorded best, we update our best threshold and information gain.\n\n7. **Returning Result**: Finally, we return the best threshold and information gain rounded to four decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "Here's the implementation of the `get_initializer` function:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0] * cols for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0] * cols for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name not in globals():\n        raise ValueError(\"Invalid initialization function.\")\n    \n    initializer = globals()[name]\n    if not callable(initializer):\n        raise ValueError(\"Invalid initialization function.\")\n    \n    return initializer\n```\n\n### Explanation:\n1. **Function Definitions**: We define three functions `zeros_init`, `ones_init`, and `random_uniform_init` as specified in the problem description. Each function returns a matrix filled with zeros, ones, or randomly distributed numbers, respectively.\n\n2. **`get_initializer` Function**:\n   - It first checks if the provided `name` exists in the global namespace using `globals().get(name)`. If not, it raises a `ValueError`.\n   - It then retrieves the function associated with the given name from the global namespace.\n   - It checks if the retrieved object is callable using `callable()`. If not, it raises a `ValueError`.\n   - Finally, it returns the callable initializer.\n\nThis implementation ensures that the function behaves as expected and provides clear error messages when invalid input is given."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the forward and backward passes of a 2-D average pooling layer, we need to follow these steps:\n\n### Forward Pass\n\n1. Calculate the output size of the pooling layer.\n2. For each channel and position in the input, compute the average of the values within the pooling window.\n3. Store the result in the output array.\n\n### Backward Pass\n\n1. Iterate over each channel and position in the output.\n2. Distribute the gradient from the accumulated gradient to the corresponding positions in the input based on the pooling window size and stride.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    # Unpack the input parameters\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the output size\n    out_H = (H - p_h + 1) // s_h\n    out_W = (W - p_w + 1) // s_w\n    \n    # Initialize the output array\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    \n    # Perform the forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    start_h = h * s_h\n                    end_h = start_h + p_h\n                    start_w = w * s_w\n                    end_w = start_w + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, start_h:end_h, start_w:end_w])\n    \n    # Initialize the gradient input array\n    grad_input = np.zeros_like(X)\n    \n    # Perform the backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    start_h = h * s_h\n                    end_h = start_h + p_h\n                    start_w = w * s_w\n                    end_w = start_w + p_w\n                    \n                    # Accumulate the gradient to the appropriate positions in the input\n                    grad_input[n, c, start_h:end_h, start_w:end_w] += accum_grad[n, c, h, w]\n    \n    # Round the results to the nearest 4th decimal and convert to lists\n    pooled_output_rounded = np.round(pooled_output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    \n    return pooled_output_rounded, grad_input_rounded\n\n# Example usage:\n# X = np.array([[[[1, 2, 3],\n#                  [4, 5, 6],\n#                  [7, 8, 9]],\n#                 [[10, 11, 12],\n#                  [13, 14, 15],\n#                  [16, 17, 18]]]])\n# pool_shape = (2, 2)\n# stride = (2, 2)\n# accum_grad = np.ones_like(X)\n\n# output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n# print(\"Output:\", output)\n# print(\"Gradient Input:\", grad_input)\n```\n\n### Explanation\n\n- **Forward Pass**: We iterate over each channel and position in the output, calculate the mean of the values within the pooling window, and store the result in the output array.\n  \n- **Backward Pass**: We iterate over each channel and position in the output, distribute the gradient from the accumulated gradient to the corresponding positions in the input based on the pooling window size and stride.\n\nThis implementation ensures that the rounding and conversion to lists meet the specified constraints."}
{"task_id": 290, "completion_id": 0, "completion": "To solve the problem of comparing two binary decision trees recursively, we need to ensure that both trees have the same structure, use the same features with identical thresholds, and that corresponding leaf nodes have the same values within a specified numerical tolerance. Here's how you can implement this in Python:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Both are leaves, check if their values are close within a tolerance\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Both are nodes, check if they have the same feature and threshold\n        if tree_a.feature != tree_b.feature or abs(tree_a.threshold - tree_b.threshold) > 1e-8:\n            return False\n        \n        # Recursively compare the left and right subtrees\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    \n    # If one is a leaf and the other is not, they cannot be equivalent\n    return False\n\n# Example usage:\n# Define some sample trees\ntree_a = Node(0, 5.0, Leaf(3), Leaf(7))\ntree_b = Node(0, 5.0, Leaf(3), Leaf(7))\n\nprint(compare_trees(tree_a, tree_b))  # Output: True\n```\n\n### Explanation:\n\n1. **Base Case**: \n   - If both `tree_a` and `tree_b` are `Leaf`, compare their `value`s using `np.allclose()` with a tolerance of \\(1 \\times 10^{-8}\\). This ensures that floating-point numbers are compared accurately.\n\n2. **Recursive Case**:\n   - If both `tree_a` and `tree_b` are `Node`, check if they have the same `feature` and `threshold`. If either condition fails, return `False`.\n   - Recursively call `compare_trees` on the `left` and `right` children of both nodes to ensure they are also equivalent.\n\n3. **Incompatible Types**:\n   - If one node is a `Leaf` and the other is not, return `False` because they cannot represent the same tree structure.\n\nThis recursive approach ensures that all parts of the trees are checked, including their structures and values, ensuring the trees are considered equivalent under the specified conditions."}
{"task_id": 292, "completion_id": 0, "completion": "Here's the implementation of the `single_point_crossover` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for efficient computation\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n\n    # Validate that the parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n\n    # Ensure the cutoff is within valid bounds\n    if cutoff < 0 or cutoff > parent1_np.shape[1]:\n        return -1\n\n    # Perform the single-point column crossover\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n\n    # Convert the resulting NumPy arrays back to lists\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n\n    return (child1, child2)\n\n# Example usage:\nparent1 = [\n    [1, 2, 3],\n    [4, 5, 6]\n]\nparent2 = [\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\ncutoff = 1\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the shapes of the two parent matrices are the same. If not, it returns `-1`.\n2. **Cutoff Validation**: It ensures that the `cutoff` is within the valid range (0 to the number of columns).\n3. **Crossover Operation**: Using NumPy, it slices the columns before and after the `cutoff` from both parents and concatenates them to form the children.\n4. **Conversion to Lists**: Finally, it converts the resulting NumPy arrays back to ordinary Python lists and returns them as a tuple."}
{"task_id": 294, "completion_id": 0, "completion": "To solve this problem, we need to convert the given custom graph representation into a plain adjacency dictionary that meets the specified requirements. Here's how you can implement the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n\n    # Check if the graph is directed\n    is_directed = G.get('is_directed', False)\n\n    # Create a map from vertex index back to label\n    I2V = {v: k for k, v in G['_V2I'].items()}\n\n    # Populate the adjacency dictionary\n    for i, edges in enumerate(G['_G']):\n        vertex_label = I2V[i]\n        adj[vertex_label] = []\n\n        for source_label, target_label, weight in edges:\n            # Add the edge to the adjacency list\n            adj[vertex_label].append((target_label, weight))\n\n            # If the graph is undirected, add the reverse edge\n            if not is_directed:\n                adj[target_label].append((vertex_label, weight))\n\n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': True,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 5), ('A', 'C', 3)],\n#         [('B', 'A', 5), ('B', 'C', 2)],\n#         [('C', 'A', 3), ('C', 'B', 2)]\n#     ]\n# }\n# print(to_networkx(G))\n```\n\n### Explanation:\n\n1. **Input Parsing**: We first extract the necessary information from the input dictionary `G`, including whether the graph is directed and the mappings between labels and indices.\n\n2. **Reverse Mapping**: We create a reverse mapping `I2V` to convert indices back to labels, which will help us construct the adjacency list correctly.\n\n3. **Populate Adjacency Dictionary**: \n   - We iterate over each vertex and its corresponding edges in the `_G` list.\n   - For each edge, we add it to the adjacency list for the source vertex.\n   - If the graph is undirected, we also add the reverse edge to ensure symmetry.\n\n4. **Sorting Neighbors**: Since the problem requires sorting the neighbor lists alphabetically, we use Python's built-in sorting capabilities on the list of tuples.\n\n5. **Return Result**: Finally, we return the constructed adjacency dictionary.\n\nThis function ensures that the resulting adjacency dictionary meets all the specified constraints."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    x = np.array(x)\n    \n    # Check if all elements in the array are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\nprint(is_binary(np.array([0, 1, 1, 0])))  # True\nprint(is_binary(np.array([0, 2, 1, 0])))  # False\nprint(is_binary(np.array([True, False, True])))  # True\nprint(is_binary(np.array([0.5, 1.0, 0.0])))  # False\n```\n\nThis solution defines the `is_binary` function, which first converts the input to a NumPy array if it isn't already one. It then uses `np.all` combined with a logical OR operation to check if all elements in the array are either `0` or `1`. The function returns `True` if this condition is met, otherwise `False`."}
{"task_id": 298, "completion_id": 0, "completion": "To implement the `ngram_log_prob` function, we need to follow these steps:\n\n1. **Tokenize the Corpus**: Split each sentence into tokens using whitespace as the delimiter.\n2. **Pad the Query**: For N > 1, pad the query with `<bol>` at the beginning and `<eol>` at the end.\n3. **Count N-grams and Prefixes**: Use a dictionary to count all N-grams and their (N-1)-gram prefixes in the corpus.\n4. **Calculate Conditional Probabilities**: Compute the conditional probability for each N-gram in the padded query.\n5. **Compute Log-Probabilities**: Sum the natural logarithms of these probabilities.\n6. **Handle Edge Cases**: Return `float('-inf')` if any N-gram is unseen or if the query is too short.\n\nHere's the implementation of the function:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Step 1: Tokenize the corpus\n    token_counts = Counter()\n    prefix_counts = defaultdict(Counter)\n    \n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words)):\n            word = words[i]\n            token_counts[word] += 1\n            if i >= N - 1:\n                prefix = tuple(words[i - N + 1:i + 1])\n                prefix_counts[prefix][word] += 1\n    \n    # Step 2: Pad the query\n    if N == 1:\n        padded_query = query\n    else:\n        padded_query = '<bol>' * (N - 1) + query + '<eol>'\n    \n    # Step 3: Calculate conditional probabilities and log-probabilities\n    log_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        prefix = tuple(padded_query[i:i+N-1].split())\n        word = padded_query[i+N-1]\n        \n        if prefix not in prefix_counts or word not in prefix_counts[prefix]:\n            return float('-inf')\n        \n        count_prefix = prefix_counts[prefix][word]\n        count_full = token_counts[tuple(prefix)]\n        \n        prob = count_prefix / count_full\n        log_prob += math.log(prob, 2)  # Using base 2 for binary logarithm\n        \n    # Step 4: Round the result to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\n### Explanation:\n- **Tokenization**: We use `Counter` to count occurrences of each word and its prefixes.\n- **Padding**: For N > 1, we prepend `<bol>` and append `<eol>` to the query.\n- **Conditional Probability Calculation**: For each N-gram in the padded query, we check if it exists in the corpus. If it does, we calculate its probability using the formula \\( P(w_N | w_1...w_{N-1}) \\).\n- **Logarithm Calculation**: We use the natural logarithm (base 2) for numerical stability and accuracy.\n- **Edge Case Handling**: If any N-gram is missing from the corpus, the function returns `float('-inf')`."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n\n    # Step 1: Build the weighted adjacency matrix W\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n\n    # Step 2: Compute the degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n\n    # Step 3: Compute the unnormalized graph Laplacian L = D - W\n    L = D - W\n\n    # Step 4: Obtain the first k eigenvectors of L\n    eigvals, eigvecs = np.linalg.eig(L)\n    idx = np.argsort(eigvals)[:k]\n    E = eigvecs[:, idx]\n\n    # Step 5: Run k-means on the rows of E\n    num_iterations = 100\n    centroids = E[:k]\n    labels = np.full(n, -1)\n\n    for _ in range(num_iterations):\n        new_labels = np.argmin(np.linalg.norm(E[:, None] - centroids[None, :], axis=-1), axis=0)\n        for i in range(k):\n            cluster_indices = np.where(labels == i)[0]\n            if len(cluster_indices) > 0:\n                centroids[i] = np.mean(E[cluster_indices], axis=0)\n            else:\n                centroids[i] = E[np.random.randint(k)]\n\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n    return labels.tolist()\n```\n\nThis code implements the Spectral Clustering algorithm from scratch using only NumPy for numerical operations. It follows all the specified steps and returns the resulting cluster labels as a Python list."}
{"task_id": 303, "completion_id": 0, "completion": "To solve the problem, we need to construct a formatted string based on the input parameters and constraints. Here's how you can implement the `err_fmt` function:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Extract elements from params and golds based on ix\n    prev_ix = max(ix - 1, 0)\n    curr_label = params[ix][1]\n    prev_label = params[prev_ix][1]\n    curr_mine = params[ix][0]\n    prev_mine = params[prev_ix][0]\n\n    # Construct the debug string\n    debug_string = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\"\n        \"Theirs (prev) [{prev_label}]:\\n{golds.get(prev_label)}\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{golds.get(curr_label)}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n\n    return debug_string\n\n# Example usage:\nparams = [(\"output1\", \"test1\"), (\"output2\", \"test2\"), (\"output3\", \"test3\")]\ngolds = {\"test1\": \"expected_output1\", \"test2\": \"expected_output2\", \"test3\": \"expected_output3\"}\nix = 1\nwarn_str = \"\\nAdditional Warning: This is an error!\"\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\n### Explanation:\n1. **Extracting Elements**: We use `max(ix - 1, 0)` to ensure we don't go out of bounds when accessing previous elements. This handles the case where `ix` is 0.\n\n2. **String Construction**: We build the debug string using f-strings for formatting. Each part of the string is concatenated in the specified order and format.\n\n3. **Handling Warn Str**: The `warn_str` is directly appended to the end of the \"Theirs\" section, ensuring it appears exactly as provided.\n\n4. **Output Format**: The string is returned in the exact format specified in the task description, including the necessary number of dashes and line breaks.\n\nThis implementation ensures that the output matches the requirements precisely."}
{"task_id": 304, "completion_id": 0, "completion": "To compute the posterior mean of the regression coefficients in Bayesian linear regression with an unknown noise variance, we can follow these steps:\n\n1. Prepend an intercept column to the design matrix \\( X \\) if `fit_intercept` is `True`.\n2. Define the prior distributions for the coefficients \\( b \\) and the noise variance \\( \\sigma^2 \\).\n3. Compute the posterior distribution parameters using the provided formulas.\n4. Calculate the posterior mean of the coefficients \\( \\mu_b \\).\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu: float = 0.0,\n    V: Union[None, float, Iterable[float], np.ndarray] = None,\n    fit_intercept: bool = True,\n) -> List[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    N, M = X.shape\n    \n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((N, 1)), X))\n    \n    # Handle the prior scale V\n    if isinstance(V, (int, float)):\n        V = np.eye(M) * V\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    elif isinstance(V, np.ndarray):\n        pass\n    else:\n        raise ValueError(\"V must be None, a scalar, a list/tuple, or a 2D array.\")\n    \n    # Compute the posterior covariance \u03a3_b\n    V_inv = np.linalg.inv(V)\n    XTX_inv = np.linalg.inv(X.T @ X)\n    Sigma_b = np.linalg.inv(V_inv + XTX_inv)\n    \n    # Compute the posterior mean \u03bc_b\n    V_inv_mu = V_inv @ mu.reshape(-1, 1)\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv_mu + XTy)\n    \n    # Round the result to 4 decimal places\n    return [round(val, 4) for val in mu_b.flatten()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([5, 7, 9])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\n### Explanation:\n- **Intercept Handling**: If `fit_intercept` is `True`, an additional column of ones is added to the design matrix \\( X \\).\n- **Prior Scale V**: The prior scale \\( V \\) is handled based on its type:\n  - If `V` is a scalar, it is converted into a diagonal matrix.\n  - If `V` is a list or tuple, it is converted into a diagonal matrix.\n  - If `V` is a 2D array, it is used directly.\n- **Posterior Covariance Calculation**: The posterior covariance \\( \\Sigma_b \\) is computed using the formula \\( \\Sigma_b = (V^{-1} + X^T X)^{-1} \\).\n- **Posterior Mean Calculation**: The posterior mean \\( \\mu_b \\) is computed using the formula \\( \\mu_b = \\Sigma_b (V^{-1} \\mu + X^T y) \\).\n- **Rounding**: The result is rounded to 4 decimal places before returning."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert frequencies to Mel scale\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n\n    # Generate n_filters+2 equally-spaced Mel values\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hertz\n    freqs = 700 * (10 ** (mel_points / 2595) - 1)\n\n    # Initialize the filter bank matrix\n    filter_bank = []\n\n    # Compute each filter\n    for i in range(n_filters):\n        f0 = freqs[i]\n        f1 = freqs[i + 1]\n        f2 = freqs[i + 2]\n\n        # Calculate the slopes of the triangle\n        m_left = (f1 - f0) / (f1 - f0)\n        m_right = (f2 - f0) / (f2 - f1)\n\n        # Find the positive minimum of the two slopes\n        w = np.minimum(m_left, m_right)\n\n        # Add the filter to the bank\n        filter_bank.append(w)\n\n    # Normalize the filters if required\n    if normalize:\n        for i in range(n_filters):\n            filter_bank[i] *= 2 / (freqs[i + 2] - freqs[i])\n\n    # Round the results to 4 decimal places\n    return [round(x, 4) for sublist in filter_bank for x in sublist]\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    \n    # Fixed coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Generate the window\n    if symmetric:\n        N = window_len\n        w = np.array([a0 - a1 * np.cos(2 * np.pi * n / N) +\n                      a2 * np.cos(4 * np.pi * n / N) -\n                      a3 * np.cos(6 * np.pi * n / N) for n in range(N)])\n    else:\n        N = window_len + 1\n        w = np.array([a0 - a1 * np.cos(2 * np.pi * n / N) +\n                      a2 * np.cos(4 * np.pi * n / N) -\n                      a3 * np.cos(6 * np.pi * n / N) for n in range(N)])[:-1]\n    \n    # Round to 4 decimal places and convert to list\n    return round(w, 4).tolist()\n\n# Example usage:\nprint(blackman_harris(10))  # Symmetric window\nprint(blackman_harris(10, symmetric=False))  # Periodic window\n```"}
{"task_id": 313, "completion_id": 0, "completion": "To solve the problem of computing the expected logarithm of the \\( t \\)-th component of a Dirichlet-distributed vector, we need to implement the digamma function ourselves. The digamma function is the first derivative of the natural logarithm of the Gamma function. We will use a recursive approach to shift small values up to a moderate range and then apply an asymptotic expansion for larger values.\n\nHere's the implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        # Base case for small x\n        if x < 6:\n            return sum(1 / i for i in range(1, int(x) + 1))\n        \n        # Asymptotic expansion for large x\n        ln_x = math.log(x)\n        term1 = -1 / (2 * x)\n        term2 = -1 / (12 * x**2)\n        term3 = 1 / (120 * x**4)\n        term4 = -1 / (252 * x**6)\n        \n        return ln_x + term1 + term2 + term3 + term4\n    \n    # Extract the relevant parameters\n    gamma_d = gamma[d]\n    \n    # Compute the sum of gamma[d]\n    gamma_sum = sum(gamma_d)\n    \n    # Compute the expected log using the digamma function\n    expected_log = digamma(gamma_d[t]) - digamma(gamma_sum)\n    \n    # Round to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage:\n# gamma = [[1, 2], [3, 4]]\n# print(expected_log_dirichlet(gamma, 0, 0))  # Output: 0.0\n```\n\n### Explanation:\n- **Digamma Function**: We define a `digamma` function that uses both a recursive method for small values of \\( x \\) and an asymptotic series for large values.\n- **Recursive Method**: For \\( x < 6 \\), we compute the sum of reciprocals from 1 to \\( x \\).\n- **Asymptotic Expansion**: For \\( x \\geq 6 \\), we use the series expansion to approximate the digamma function.\n- **Expected Log Calculation**: We calculate the expected log using the digamma functions of the specific parameter and their sum.\n- **Rounding**: Finally, we round the result to four decimal places before returning it.\n\nThis implementation ensures that we correctly compute the expected logarithm of the \\( t \\)-th component of a Dirichlet-distributed vector without relying on external libraries."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    \n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    debug_report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_report\n```\n\nThis function constructs the debug report according to the specified format by accessing the appropriate elements from the input lists and dictionary, formatting them correctly, and concatenating them into a single string."}
{"task_id": 318, "completion_id": 0, "completion": "To implement the AdaBoost.M1 algorithm from scratch using decision stumps, we need to follow these steps:\n\n1. Initialize the weights for each training sample.\n2. For each boosting round, train a decision stump on the current dataset and compute its weight.\n3. Update the weights based on the performance of the decision stump.\n4. Combine the weak learners to form the final classifier.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    # Step 1: Initialize weights\n    n_samples = len(y_train)\n    w = np.ones(n_samples) / n_samples\n    \n    # List to store the predictions of each weak learner\n    predictions = []\n    \n    # Main loop for each boosting round\n    for _ in range(n_estimators):\n        # Step 2: Train a decision stump\n        best_stump, best_error = find_best_stump(X_train, y_train, w)\n        \n        # Calculate the weight of the current weak learner\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        \n        # Update the weights\n        w *= np.exp(-alpha * y_train * best_stump.predict(X_train))\n        w /= np.sum(w)\n        \n        # Add the prediction of the current weak learner to the list\n        predictions.append(best_stump.predict(X_test))\n    \n    # Step 3: Combine the weak learners\n    return combine_weak_learners(predictions)\n\ndef find_best_stump(X, y, w):\n    \"\"\"Find the best decision stump for the given dataset.\"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_stump = None\n    \n    for j in range(n_features):\n        thresholds = np.unique(X[:, j])\n        for t in thresholds:\n            for p in [-1, 1]:\n                stump = DecisionStump(j, t, p)\n                \n                # Compute the error rate for this stump\n                errors = np.sum(w[y != stump.predict(X)])\n                error_rate = errors / np.sum(w)\n                \n                # Check if this is the best stump found so far\n                if error_rate < best_error:\n                    best_error = error_rate\n                    best_stump = stump\n    \n    return best_stump, best_error\n\nclass DecisionStump:\n    def __init__(self, feature_index, threshold, polarity):\n        self.feature_index = feature_index\n        self.threshold = threshold\n        self.polarity = polarity\n    \n    def predict(self, X):\n        \"\"\"Predict the class labels for the input features.\"\"\"\n        predictions = np.sign(X[:, self.feature_index] - self.threshold) * self.polarity\n        return predictions\n\ndef combine_weak_learners(predictions):\n    \"\"\"Combine the predictions of multiple weak learners.\"\"\"\n    return np.sign(np.mean(predictions, axis=0))\n\n# Example usage:\n# X_train, y_train, X_test = load_data()  # Load your data\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=50)\n```\n\n### Explanation:\n\n- **Initialization**: We initialize the weights equally for all samples.\n- **Decision Stump Training**: For each boosting round, we find the decision stump that minimizes the weighted classification error. This involves trying different feature indices and thresholds, and calculating the sign prediction based on the polarity.\n- **Weight Update**: The weights are updated according to the performance of the current decision stump.\n- **Combining Weak Learners**: Finally, we combine the predictions of all weak learners using their weighted average to form the final classifier.\n\nThis implementation uses simple techniques like sorting and linear scans to find the best decision stump at each step. It also includes a basic decision stump class for prediction purposes."}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    frequencies = [i * delta_f for i in range(N)]\n\n    if positive_only:\n        return [round(f, 4) for f in frequencies[:N // 2 + 1]]\n    else:\n        return [round(f, 4) for f in frequencies]\n\n# Example usage:\nprint(dft_bins(10))  # Example output for N=10, fs=44000, positive_only=True\nprint(dft_bins(10, positive_only=False))\n```\n\nThis function calculates the center frequencies for each DFT bin based on the given parameters and returns them rounded to four decimal places. The function handles both the case where `positive_only` is `True` and `False`, returning the appropriate subset of frequencies. If either `N` or `fs` is not positive, it returns an empty list."}
{"task_id": 331, "completion_id": 0, "completion": "To implement the `oob_mse` function, we need to follow these steps:\n\n1. Ensure that the inputs are in the correct format (either lists or NumPy arrays).\n2. Convert the lists to NumPy arrays if necessary.\n3. Iterate over each sample to check if it has at least one out-of-bag prediction.\n4. If a sample has at least one out-of-bag prediction, calculate the average of its predictions and compute the squared error with the true value.\n5. Sum up all the squared errors and divide by the number of samples with at least one out-of-bag prediction.\n6. Return the result rounded to four decimal places. If no sample has an out-of-bag prediction, return -1.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Check if the shapes match\n    if y_true.shape != predictions.shape or predictions.shape != oob_mask.shape:\n        raise ValueError(\"Input shapes do not match\")\n\n    # Initialize variables\n    total_squared_error = 0.0\n    num_samples_with_oob_predictions = 0\n\n    # Iterate over each sample\n    for i in range(y_true.shape[0]):\n        # Get the indices of out-of-bag predictions for the current sample\n        oob_indices = np.where(oob_mask[i])[0]\n        \n        # Check if there are any out-of-bag predictions\n        if len(oob_indices) > 0:\n            # Calculate the average of the out-of-bag predictions\n            oob_prediction_mean = np.mean(predictions[i][oob_indices])\n            \n            # Compute the squared error\n            squared_error = (oob_prediction_mean - y_true[i]) ** 2\n            \n            # Add to total squared error and count the sample\n            total_squared_error += squared_error\n            num_samples_with_oob_predictions += 1\n\n    # Calculate the OOB mean squared error\n    if num_samples_with_oob_predictions == 0:\n        return -1.0\n    else:\n        oob_mse = total_squared_error / num_samples_with_oob_predictions\n        return round(oob_mse, 4)\n\n# Example usage:\n# y_true = [1, 2, 3, 4, 5]\n# predictions = [[0.9, 1.1, 2.8, 3.7, 4.6],\n#                [0.8, 1.2, 2.7, 3.8, 4.5],\n#                [0.7, 1.3, 2.6, 3.9, 4.4],\n#                [0.6, 1.4, 2.5, 4.0, 4.3],\n#                [0.5, 1.5, 2.4, 4.1, 4.2]]\n# oob_mask = [[True, False, True, False, True],\n#              [True, True, False, False, True],\n#              [False, True, True, False, True],\n#              [False, False, True, True, True],\n#              [True, False, False, True, False]]\n\n# print(oob_mse(y_true, predictions, oob_mask))\n```\n\nThis function will correctly compute the out-of-bag mean squared error for a given set of predictions and their corresponding out-of-bag masks."}
{"task_id": 332, "completion_id": 0, "completion": "To solve the problem of constructing an FP-Tree without using any classes, we can follow these steps:\n\n1. **Compute Item Support**: Calculate the frequency of each item across all transactions.\n2. **Filter Items Based on Min Support**: Remove items that do not meet the minimum support threshold.\n3. **Sort Items**: Sort the remaining items first by decreasing support and then alphabetically to handle ties.\n4. **Build the FP-Tree**: Traverse each transaction, filter out non-frequent items, and update the tree accordingly.\n\nHere's the implementation of the `build_fp_tree` function:\n\n```python\nfrom collections import defaultdict\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute item support\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    \n    # Step 2: Filter items based on min support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Sort items by decreasing support, then alphabetically\n    sorted_frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Step 4: Build the FP-Tree\n    def create_fp_tree(data):\n        root = {\"support\": 0, \"children\": {}}\n        \n        for transaction in data:\n            current_node = root\n            for item in sorted_frequent_items:\n                while item[0] in current_node[\"children\"]:\n                    current_node = current_node[\"children\"][item[0]]\n                if item[0] not in current_node[\"children\"]:\n                    new_node = {\"support\": 0, \"children\": {}}\n                    current_node[\"children\"][item[0]] = new_node\n                current_node = current_node[\"children\"][item[0]]\n                current_node[\"support\"] += 1\n        \n        return root\n    \n    return create_fp_tree(transactions)\n\n# Example usage:\ntransactions = [\n    [\"apple\", \"banana\", \"orange\"],\n    [\"banana\", \"orange\", \"grape\"],\n    [\"apple\", \"orange\", \"grape\"],\n    [\"apple\", \"banana\"],\n    [\"banana\"]\n]\n\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n\n- **Item Counting**: We use `Counter` from the `collections` module to count the occurrences of each item in all transactions.\n- **Filtering**: We retain only those items that have a support count greater than or equal to `min_support`.\n- **Sorting**: The remaining items are sorted primarily by their support in descending order and secondarily by their lexicographical order.\n- **Tree Construction**: We traverse each transaction, starting from the root. For each item in the sorted list, we navigate through the tree, creating nodes as necessary and updating their support counts.\n\nThis approach ensures that the FP-Tree is constructed efficiently without using any additional classes."}
{"task_id": 336, "completion_id": 0, "completion": "To solve this problem, we need to implement the `linear_kernel` function according to the specified requirements. The function should handle both Python lists and NumPy arrays for input vectors, compute the linear kernel matrix, and ensure that the output is rounded to four decimal places. Additionally, it should validate the input dimensions and return -1 if they are incompatible.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(Y, list):\n        Y = np.array(Y)\n    \n    # Get the shapes of X and Y\n    Nx, Cx = X.shape\n    Ny, Cy = Y.shape if Y is not None else (Nx, Cx)\n    \n    # Validate the number of columns\n    if Cx != Cy:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the kernel matrix to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result to a list of lists\n    K_list = K_rounded.tolist()\n    \n    return K_list\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nprint(linear_kernel(X, Y))\n```\n\n### Explanation:\n\n1. **Input Handling**: \n   - We first check if the inputs are lists and convert them to NumPy arrays using `np.array()`. This ensures compatibility with both data types.\n\n2. **Shape Validation**:\n   - We retrieve the shapes of `X` and `Y`. If `Y` is `None`, we set it to match the shape of `X`.\n   - We then check if the number of columns (`Cx`) in `X` matches the number of columns (`Cy`) in `Y`. If they do not match, we return `-1`.\n\n3. **Kernel Matrix Calculation**:\n   - We use `np.dot()` to compute the dot product of `X` and the transpose of `Y`, which gives us the pairwise dot products.\n   - We add the constant `c0` to each element of the resulting matrix.\n\n4. **Rounding and Conversion**:\n   - We round the kernel matrix to four decimal places using `np.round()`.\n   - Finally, we convert the NumPy array to a list of lists using `tolist()`.\n\nThis function handles all specified requirements and edge cases, such as empty input matrices and mismatched column counts."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update second moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Calculate bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Calculate bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Compute the updated parameter\n    param_prime = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Convert the results to lists rounded to 8 decimal places\n    updated_param_list = [round(x, 8) for x in param_prime]\n    new_m_list = [round(x, 8) for x in m_t]\n    new_v_list = [round(x, 8) for x in v_t]\n    \n    return updated_param_list, new_m_list, new_v_list\n```\n\nThis implementation follows the standard Adam optimization algorithm, updating both the parameter and the moment estimates accordingly. The gradients are used to compute the new moments, which are then used to update the parameter using the Adam update formula. The results are returned as lists rounded to eight decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the `cross_entropy_update` function according to the specifications, we need to follow these steps:\n\n1. Sort the `theta_samples` based on their corresponding `rewards`.\n2. Determine how many samples to retain based on `retain_prcnt`.\n3. Compute the mean and variance of the retained samples.\n4. Round the results to four decimal places before returning them.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to a numpy array if it's a list\n    rewards = np.array(rewards)\n    \n    # Combine theta_samples and rewards into a single array\n    combined = np.hstack((theta_samples, rewards[:, None]))\n    \n    # Sort the combined array based on rewards in descending order\n    sorted_combined = combined[combined[:, -1].argsort()[::-1]]\n    \n    # Calculate the number of samples to retain\n    n_to_retain = int(retain_prcnt * len(sorted_combined))\n    \n    # Extract the retained samples\n    retained_samples = sorted_combined[:n_to_retain, :-1]\n    \n    # Compute the mean of the retained samples\n    mean = retained_samples.mean(axis=0).round(4)\n    \n    # Compute the per-dimension variance of the retained samples\n    variances = retained_samples.var(axis=0).round(4)\n    \n    return mean.tolist(), variances.tolist()\n\n# Example usage:\n# theta_samples = np.random.rand(5, 3)\n# rewards = [0.9, 0.8, 0.7, 0.6, 0.5]\n# retain_prcnt = 0.8\n# print(cross_entropy_update(theta_samples, rewards, retain_prcnt))\n```\n\n### Explanation:\n1. **Combining Samples and Rewards**: We first combine the `theta_samples` and `rewards` into a single array for easier sorting.\n2. **Sorting**: We sort the combined array by the rewards in descending order to get the best samples at the top.\n3. **Retaining Samples**: We determine how many samples to retain using `retain_prcnt` and select the top `n_to_retain` samples.\n4. **Computing Mean and Variance**: We calculate the mean and variance of the retained samples along each dimension and round the results to four decimal places.\n5. **Returning Results**: Finally, we convert the means and variances to lists and return them."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    \n    total_count = sum(label_counts.values())\n    \n    # Calculate the probability of each label\n    probabilities = {label: count / total_count for label, count in label_counts.items()}\n    \n    # Calculate the entropy\n    entropy_value = -sum(prob * math.log2(prob) for prob in probabilities.values() if prob > 0)\n    \n    # Round the result to 5 decimal places\n    return round(entropy_value, 5)\n\n# Example usage:\nprint(entropy([1, 2, 2, 3]))  # Output: 1.74118\nprint(entropy([1, 1, 1, 1]))  # Output: 0.0\nprint(entropy([]))             # Output: 0.0\n```\n\nThis function calculates the Shannon entropy of a given list of class labels. It first checks if the list is empty and returns 0.0 if so. Then, it uses `Counter` from the `collections` module to count the occurrences of each unique label. It computes the probability of each label and uses these probabilities to calculate the entropy using the formula provided. Finally, it rounds the result to five decimal places before returning it."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the `im2col` technique, we need to follow these steps:\n\n1. **Padding**: Determine the padding amount based on the given specification.\n2. **Im2Col Transformation**: Convert the input image data into column vectors for efficient matrix multiplication.\n3. **Matrix Multiplication**: Perform the matrix multiplication with the weight kernels.\n4. **Reshape and Pad Back**: Reshape the resulting matrix back to the original image dimensions and apply any necessary padding.\n\nHere's the implementation of the `conv2D` function:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    \n    # Helper function to calculate padding based on the given specification\n    def calculate_padding(pad_spec, in_rows, in_cols):\n        if isinstance(pad_spec, int):\n            return pad_spec, pad_spec\n        elif isinstance(pad_spec, tuple):\n            if len(pad_spec) == 2:\n                return pad_spec[0], pad_spec[1]\n            elif len(pad_spec) == 4:\n                return pad_spec[0], pad_spec[1], pad_spec[2], pad_spec[3]\n        elif pad_spec == 'same':\n            padding_rows = max(0, (in_rows - 1) * stride + dilation * (W.shape[0] - 1) + 1 - in_rows)\n            padding_cols = max(0, (in_cols - 1) * stride + dilation * (W.shape[1] - 1) + 1 - in_cols)\n            return padding_rows // 2, padding_rows - padding_rows // 2, padding_cols // 2, padding_cols - padding_cols // 2\n        else:\n            raise ValueError(\"Invalid padding specification\")\n\n    # Calculate padding\n    if isinstance(pad, str):\n        padding = calculate_padding(pad, X.shape[1], X.shape[2])\n    else:\n        padding = calculate_padding(pad, X.shape[1], X.shape[2])\n\n    # Add padding to the input\n    X_padded = np.pad(X, ((0, 0), (padding[0], padding[1]), (padding[2], padding[3]), (0, 0)), mode='constant')\n\n    # Get the dimensions of the padded input\n    n_ex, in_rows, in_cols, in_ch = X_padded.shape\n\n    # Get the dimensions of the kernels\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Calculate the output dimensions\n    out_rows = (in_rows - kernel_rows + 2 * padding[0]) // stride + 1\n    out_cols = (in_cols - kernel_cols + 2 * padding[2]) // stride + 1\n\n    # Initialize the output array\n    Y = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # Loop over each example\n    for i in range(n_ex):\n        # Loop over each output channel\n        for c_out in range(out_ch):\n            # Loop over each output position\n            for r_out in range(out_rows):\n                for c_out in range(out_cols):\n                    # Extract the submatrix from the padded input\n                    submatrix = X_padded[i, \n                                        r_out * stride:(r_out * stride + kernel_rows),\n                                        c_out * stride:(c_out * stride + kernel_cols)]\n                    \n                    # Perform the dot product with the corresponding kernel\n                    Y[i, r_out, c_out, c_out] = np.sum(submatrix * W[:, :, :, c_out])\n\n    # Convert the result to a Python list\n    return Y.tolist()\n\n# Example usage:\nX = np.array([[[[1, 2],\n                 [3, 4]],\n                [[5, 6],\n                 [7, 8]]]])\nW = np.array([[[[1, 0],\n                 [0, 1]],\n                [[0, 1],\n                 [1, 0]]]])\nresult = conv2D(X, W, stride=1, pad=1)\nprint(result)\n```\n\n### Explanation:\n- **Padding Calculation**: The `calculate_padding` function handles different types of padding specifications.\n- **Im2Col Transformation**: We extract overlapping patches (submatrices) from the padded input using the specified stride and dilation.\n- **Matrix Multiplication**: Each patch is multiplied by the corresponding kernel to compute the convolution value.\n- **Reshaping and Padding Back**: The results are reshaped back to the original image dimensions after applying any necessary padding.\n\nThis implementation efficiently computes the convolution using the `im2col` approach, which is well-suited for large datasets and complex networks."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data by centering\n    centered_data = data - data.mean(axis=0)\n\n    # Step 2: Choose the appropriate solver based on the input\n    if solver == \"svd\":\n        U, S, Vt = np.linalg.svd(centered_data, full_matrices=False)\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n    else:\n        raise ValueError(\"Invalid solver specified. Use 'svd' or 'eigen'.\")\n\n    # Step 3: Sort the eigenvectors by eigenvalues in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 4: Select the top n_components eigenvectors\n    selected_eigenvectors = sorted_eigenvectors[:, :n_components]\n\n    # Step 5: Determine the sign of the eigenvectors to ensure determinism\n    signs = np.sign(selected_eigenvectors[abs(selected_eigenvectors).sum(axis=0) != 0])\n    selected_eigenvectors *= signs\n\n    # Step 6: Project the centered data onto the selected eigenvectors\n    scores = np.dot(centered_data, selected_eigenvectors)\n\n    # Step 7: Calculate the explained variance ratio\n    explained_variance = eigenvalues / eigenvalues.sum()\n    explained_variance_ratio = np.round(explained_variance[:n_components], 4).tolist()\n\n    # Convert scores to a list of lists and return\n    scores_list = [np.round(score, 4).tolist() for score in scores.T]\n    return scores_list, explained_variance_ratio\n```"}
{"task_id": 356, "completion_id": 0, "completion": "To complete the `leaf_predict` function, we need to handle both classification and regression cases based on the value of the `classifier` parameter. Here's how you can implement this:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # If it's a classification tree, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # If it's a regression tree, return the scalar value directly\n        return leaf.value\n\n# Example usage:\n# For classification:\n# leaf = Leaf([0.2, 0.5, 0.3])\n# print(leaf_predict(leaf, True))  # Output: 1\n\n# For regression:\n# leaf = Leaf(42.7)\n# print(leaf_predict(leaf, False))  # Output: 42\n```\n\n### Explanation:\n- **Classification Case**: We use `np.argmax(leaf.value)` to find the index of the largest probability in the list. This corresponds to the predicted class.\n- **Regression Case**: Since the leaf contains a single scalar value, we simply return this value as is.\n\nThis implementation ensures that the function behaves correctly according to whether the input tree is a classification or regression tree."}
{"task_id": 357, "completion_id": 0, "completion": "Here's a Python implementation of the K-Means clustering algorithm:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign samples to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=-1)\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        count = np.bincount(labels, minlength=K)\n        valid_count = count > 0\n        \n        new_centroids[valid_count] = np.mean(data[labels == valid_count], axis=0)\n        \n        # Check for convergence\n        if np.allclose(new_centroids, centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = centroids[np.lexsort((centroids[:, 1], centroids[:, 0]))]\n    rounded_centroids = np.round(sorted_centroids, decimals=4).tolist()\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nresult = kmeans(data, K)\nprint(result)  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized with the first `K` samples from the dataset.\n2. **Assignment**: For each sample, calculate the Euclidean distance to each centroid and assign the sample to the closest centroid.\n3. **Update**: Compute the new centroid for each cluster as the mean of all samples assigned to it.\n4. **Convergence Check**: If no centroid changes more than the specified tolerance (`1e-6`), stop the algorithm.\n5. **Sorting and Rounding**: Sort the centroids lexicographically and round each coordinate to four decimal places before returning.\n\nThis implementation handles any number of dimensions greater than or equal to one."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array if it's not already one\n    data_array = np.array(data)\n    \n    # Check if any row has a sum of 0\n    if np.any(np.sum(data_array, axis=1) == 0):\n        return -1\n    \n    # Normalize each row by dividing by its sum\n    normalized_data = data_array / np.sum(data_array, axis=1, keepdims=True)\n    \n    # Round the normalized data to 4 decimal places\n    rounded_data = np.round(normalized_data, decimals=4)\n    \n    # Return the result as a list of lists\n    return rounded_data.tolist()\n```\n\nThis function first checks if any row in the input data has a sum of 0, returning `-1` if so. Otherwise, it normalizes each row by dividing each element by the row's sum, rounds the result to four decimal places, and returns the normalized matrix as a list of lists."}
{"task_id": 363, "completion_id": 0, "completion": "Here's the implementation of the `is_continuous` function based on the requirements specified:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_box(space):\n        return isinstance(space, Box)\n\n    def is_composite(space):\n        return isinstance(space, (Tuple, Dict))\n\n    def all_boxes(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            return all(all_boxes(subspace) for subspace in space.spaces)\n        else:\n            return False\n\n    cont_action = (\n        tuple_action and\n        all_boxes(env.action_space)\n    )\n\n    cont_obs = (\n        tuple_obs and\n        all_boxes(env.observation_space)\n    )\n\n    return cont_action, cont_obs\n```\n\n### Explanation:\n\n1. **Helper Functions**:\n   - `is_box`: Checks if a space is an instance of `Box`.\n   - `is_composite`: Checks if a space is either `Tuple` or `Dict`.\n   - `all_boxes`: Recursively checks if all sub-spaces of a composite space are `Box`.\n\n2. **Main Logic**:\n   - `cont_action`: Determines if the action space is continuous based on the `tuple_action` flag and whether all sub-spaces are `Box`.\n   - `cont_obs`: Similarly, determines if the observation space is continuous based on the `tuple_obs` flag and whether all sub-spaces are `Box`.\n\n3. **Return Value**: The function returns a tuple `(cont_action, cont_obs)` indicating whether each space is continuous."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Iterate over each update and apply the learning rate\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        # Return the running prediction rounded to 4 decimal places\n        return np.round(running_pred, 4)\n    else:\n        # Apply the softmax function row-wise\n        exp_running_pred = np.exp(running_pred)\n        # Compute the probabilities using the softmax formula\n        probabilities = exp_running_pred / np.sum(exp_running_pred, axis=1, keepdims=True)\n        # Return the predicted class labels using argmax\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# Assume 'updates' is a list of NumPy arrays and 'learning_rate' is a float\n# 'regression' is a boolean indicating whether it's a regression problem\n# result = gradient_boosting_predict(updates, learning_rate, regression)\n# print(result)\n```\n\nThis implementation follows the specified behavior for both regression and classification tasks. It initializes the running prediction with zeros and iteratively subtracts each tree's update scaled by the learning rate. For regression, it returns the running prediction rounded to four decimal places. For classification, it applies the softmax function to obtain class probabilities and returns the predicted class labels using `np.argmax`."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D cross-correlation with the specified features, we need to handle batching, padding, and dilation. Here's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    # Determine the padding width based on the given pad specification\n    if isinstance(pad, str):\n        if pad == \"same\":\n            # Calculate padding to maintain the same output length\n            n_examples, signal_length, _ = X.shape\n            _, _, out_channels = W.shape\n            \n            effective_kernel = W.shape[0] * (dilation + 1)\n            out_len = (signal_length - 1) * stride + effective_kernel\n            \n            total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n            p_left = total_pad // 2\n            p_right = total_pad - p_left\n        else:\n            raise ValueError(\"Invalid padding type\")\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Invalid padding format\")\n\n    # Initialize the output volume\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    output_length = (signal_length + 2 * p_left - effective_kernel) // stride + 1\n    \n    output_volume = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform the cross-correlation\n    for example_idx in range(n_examples):\n        for channel_out in range(out_channels):\n            for offset in range(output_length):\n                x_start = p_left + offset * stride\n                x_end = min(signal_length, x_start + kernel_width)\n                \n                # Apply dilation\n                effective_x_start = x_start\n                effective_x_end = x_end\n                \n                # Compute the dot product for the current window\n                for channel_in in range(in_channels):\n                    w_slice = W[:, channel_in, channel_out]\n                    x_slice = X[example_idx, effective_x_start:effective_x_end, channel_in]\n                    \n                    # Apply dilation to the kernel slice\n                    dilated_w_slice = w_slice[dilation::dilation]\n                    \n                    output_volume[example_idx, offset, channel_out] += np.sum(x_slice * dilated_w_slice)\n\n    # Convert the output volume to a Python list\n    return output_volume.tolist()\n\n# Example usage:\nX = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nW = np.array([[[1], [2], [3]], [[4], [5], [6]]])\n\nresult = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\nprint(result)\n```\n\n### Explanation:\n- **Padding**: We determine the padding based on whether `pad` is `\"same\"`, an integer, or a tuple. For `\"same\"`, we calculate the necessary padding to ensure the output length remains unchanged.\n- **Output Volume Initialization**: We initialize the output volume with zeros and compute its dimensions.\n- **Cross-Correlation Calculation**: For each example, channel, and output position, we extract the relevant segments from both `X` and `W`, apply dilation to the kernel, and compute the dot product to update the output volume.\n- **Result Conversion**: Finally, we convert the output volume to a Python list using `tolist()` before returning it."}
{"task_id": 373, "completion_id": 0, "completion": "To calculate the Gini impurity of a discrete label sequence, we need to follow these steps:\n\n1. Determine the number of unique classes (`C`) in the label sequence.\n2. Calculate the proportion of each class (`p_c`) in the sequence.\n3. Compute the Gini impurity using the formula \\( Gini = 1 - \\sum_{c=0}^{C-1} p_c^2 \\).\n4. Return the result rounded to four decimal places.\n\nHere's the implementation of the `gini` function:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert input to NumPy array if it's not already\n    y = np.array(y)\n    \n    # Check if the input is empty\n    if len(y) == 0:\n        return 0.0\n    \n    # Get the number of unique classes\n    C = len(np.unique(y))\n    \n    # Calculate the frequency of each class\n    frequencies = np.bincount(y, minlength=C) / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(frequencies ** 2)\n    \n    # Round the result to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\nprint(gini([0, 1, 0, 1, 2]))  # Output: 0.4897\nprint(gini([]))               # Output: 0.0\n```\n\n### Explanation:\n\n- **Input Handling**: The function first converts the input `y` to a NumPy array to handle both lists and arrays uniformly.\n- **Empty Sequence Check**: It checks if the sequence is empty and returns `0.0` if so.\n- **Unique Classes**: It uses `np.unique(y)` to find the number of unique classes (`C`).\n- **Frequency Calculation**: `np.bincount(y, minlength=C)` counts the occurrences of each class and divides by the total number of elements to get the frequency of each class.\n- **Gini Impurity Calculation**: The Gini impurity is calculated using the formula, and the result is rounded to four decimal places before being returned."}
{"task_id": 374, "completion_id": 0, "completion": "To solve the problem of training a multiple linear regression model using batch gradient descent, we need to follow these steps:\n\n1. Initialize the weight vector `theta` with zeros and the bias `b` to zero.\n2. Iterate over the dataset for a specified number of iterations (`n_iterations`).\n3. In each iteration, compute the predictions `\u0177` using the current weights and bias.\n4. Calculate the gradients `dw` and `db` using the formulae provided.\n5. Update the weights and bias using the gradients and the learning rate.\n6. Repeat steps 3-5 until convergence or the maximum number of iterations is reached.\n7. Return the learned weights and bias rounded to four decimal places.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    \n    # Check if the input dimensions are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize theta and b\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0\n    \n    # Perform batch gradient descent\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = np.dot(X, theta) + b\n        \n        # Calculate gradients\n        dw = (2 / m) * np.dot(X.T, (y_pred - y))\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update weights and bias\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    weights_rounded = [round(weight, 4) for weight in theta]\n    bias_rounded = round(b, 4)\n    \n    return weights_rounded, bias_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# print(linear_regression_gd(X, y))\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the number of samples in `X` matches the number of samples in `y`. If not, it returns `-1`.\n- **Initialization**: It initializes `theta` as a vector of zeros and `b` to zero.\n- **Gradient Descent Loop**: For each iteration, it calculates the predicted values `\u0177`, computes the gradients `dw` and `db`, and updates `theta` and `b` using the learning rate.\n- **Rounding**: Finally, it rounds the learned weights and bias to four decimal places before returning them as a tuple.\n\nThis function should work correctly for any given dataset with appropriate feature scaling if needed."}
{"task_id": 376, "completion_id": 0, "completion": "To solve the problem of checking if a given 2-D numeric array is symmetric with respect to its main diagonal, we need to follow these steps:\n\n1. Verify if the matrix is square. A matrix is square if it has the same number of rows and columns.\n2. If the matrix is square, compare each element in the matrix with its corresponding element on the other side of the main diagonal.\n3. Use `numpy.allclose` to account for floating-point precision issues. This function checks if two arrays are element-wise approximately equal within a tolerance level.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_array = np.array(X)\n    \n    # Check if the matrix is square\n    if X_array.shape[0] != X_array.shape[1]:\n        return False\n    \n    # Calculate the transpose of the matrix\n    X_transpose = X_array.T\n    \n    # Use numpy.allclose to check if the matrix is symmetric\n    return np.allclose(X_array, X_transpose)\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [2, 4, 5],\n    [3, 5, 6]\n]\n\nprint(is_symmetric(matrix))  # Output: True\n```\n\n### Explanation:\n\n- **Convert to NumPy Array**: We first convert the input list of lists into a NumPy array to leverage efficient numerical operations.\n- **Check Squareness**: We use `X_array.shape[0] == X_array.shape[1]` to determine if the matrix is square.\n- **Transpose Calculation**: We compute the transpose of the matrix using `X_array.T`.\n- **Symmetry Check**: We use `np.allclose` to compare the original matrix with its transpose. This function returns `True` if all elements are approximately equal within the specified tolerance (default is `1e-8`), indicating symmetry.\n\nThis approach ensures that the function correctly identifies symmetric matrices while accounting for potential floating-point precision issues."}
{"task_id": 377, "completion_id": 0, "completion": "Here's the implementation of the `logistic_negative_gradient` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss given binary class labels and predictions.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n    \"\"\"\n    # Check if all elements in y are either 0 or 1\n    if not all(val in [0, 1] for val in y):\n        return [-1]\n    \n    # Convert y to {-1, 1}\n    y_prime = 2 * np.array(y) - 1\n    \n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(-y_prime * f))\n    \n    # Round the result to four decimal places\n    g_rounded = np.round(g, decimals=4).tolist()\n    \n    return g_rounded\n\n# Example usage:\n# y = [0, 1, 1, 0]\n# f = [0.5, -0.3, 0.7, -0.2]\n# print(logistic_negative_gradient(y, f))\n```\n\n### Explanation:\n- The function first checks if all elements in the `y` list are either 0 or 1. If not, it returns `-1` as per the output constraints.\n- It then converts the binary labels `y` to the corresponding sign values `y'`.\n- Using the formula for the negative gradient of the logistic loss, it computes `g_i = y'_i / (1 + \\exp(-y'_i f_i))`.\n- Finally, it rounds the computed gradients to four decimal places and returns them as a list."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    def elu(x, alpha):\n        \"\"\"Compute the ELU activation.\"\"\"\n        return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    \n    def der_elu(x, alpha):\n        \"\"\"Compute the first derivative of ELU.\"\"\"\n        return np.where(x > 0, 1, alpha * np.exp(x))\n    \n    def der2_elu(x, alpha):\n        \"\"\"Compute the second derivative of ELU.\"\"\"\n        return np.where(x > 0, 0, alpha * np.exp(x))\n    \n    # Convert input to NumPy array\n    x_array = np.array(x)\n    \n    # Compute SELU based on the order\n    if order == 0:\n        y = scale * elu(x_array, alpha)\n    elif order == 1:\n        y = scale * der_elu(x_array, alpha)\n    elif order == 2:\n        y = scale * der2_elu(x_array, alpha)\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    return y.round(4).tolist()\n\n# Example usage:\nprint(selu([1.0, -1.0, 2.0], order=0))  # Output: [1.0507, 0.0, 2.1014]\nprint(selu([1.0, -1.0, 2.0], order=1))  # Output: [1.0507, -1.6733, 2.1014]\nprint(selu([1.0, -1.0, 2.0], order=2))  # Output: [1.0507, 0.0, 2.1014]\n```\n\nThis implementation defines the SELU activation function and its derivatives, handling both scalar and multi-dimensional inputs. The derivatives are computed using helper functions for each order, and the results are rounded to four decimal places before being returned as a list."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Initialize the running prediction\n    predictions = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - predictions\n        \n        # Find the optimal split point\n        min_cost = float('inf')\n        best_split_point = None\n        \n        # Iterate over potential split points\n        for i in range(1, len(x)):\n            left_residuals = residuals[:i]\n            right_residuals = residuals[i:]\n            \n            if not left_residuals.size or not right_residuals.size:\n                continue\n            \n            # Calculate the cost of splitting at this point\n            left_mean_residual = np.mean(left_residuals)\n            right_mean_residual = np.mean(right_residuals)\n            cost = np.sum((left_residuals - left_mean_residual) ** 2) + np.sum((right_residuals - right_mean_residual) ** 2)\n            \n            # Update the best split if this one is better\n            if cost < min_cost:\n                min_cost = cost\n                best_split_point = x[i]\n        \n        # If no valid split was found, use the global mean residual\n        if best_split_point is None:\n            best_split_point = np.mean(x)\n            left_mean_residual = np.mean(residuals)\n            right_mean_residual = np.mean(residuals)\n        \n        # Update the predictions\n        for i in range(len(x)):\n            if x[i] <= best_split_point:\n                predictions[i] += learning_rate * left_mean_residual\n            else:\n                predictions[i] += learning_rate * right_mean_residual\n    \n    # Round the predictions to 4 decimal places\n    return np.round(predictions, 4).tolist()\n\n# Example usage:\n# x = [1, 2, 3, 4, 5]\n# y = [2, 3, 5, 7, 11]\n# print(gradient_boosting_1d(x, y, 3))\n```\n\nThis function implements the described Gradient Boosting Regressor using decision stumps for a single numerical feature. It iteratively computes residuals, finds the optimal split point, updates the predictions, and returns the final in-sample predictions rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "To implement the RMSprop optimization update step in Python, we need to follow the mathematical formula provided. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Calculate the new running average of squared gradients\n    Eg_new = rho * Eg + (1 - rho) * grad**2\n    \n    # Calculate the update step\n    delta_w = -learning_rate * grad / np.sqrt(Eg_new + 1e-8)\n    \n    # Update the parameters\n    w_next = w + delta_w\n    \n    # Convert the results to regular Python lists and round to 4 decimal places\n    w_next_list = [round(x, 4) for x in w_next.flatten()]\n    Eg_next_list = [round(x, 4) for x in Eg_new.flatten()]\n    \n    return w_next_list, Eg_next_list\n\n# Example usage:\n# w = np.array([1.0, 2.0])\n# grad = np.array([0.5, 0.3])\n# Eg = np.array([0.1, 0.2])\n# alpha = 0.01\n# rho = 0.9\n# w_next, Eg_next = rmsprop_update(w, grad, Eg, alpha, rho)\n# print(\"Updated parameters:\", w_next)\n# print(\"Updated running average of squared gradients:\", Eg_next)\n```\n\n### Explanation:\n1. **Initialization**: We check if `Eg` is `None` and initialize it with a zero array of the same shape as `grad`.\n\n2. **Running Average Calculation**: We calculate the new running average of squared gradients using the formula \\( E_g^{(t)} = \\rho E_g^{(t-1)} + (1-\\rho) g^2 \\).\n\n3. **Update Step**: The update step is calculated using the formula \\( \\Delta w = -\\frac{\\alpha g}{\\sqrt{E_g^{(t)} + \\epsilon}} \\). The epsilon term is added for numerical stability.\n\n4. **Parameter Update**: We update the parameters \\( w \\) using the computed \\( \\Delta w \\).\n\n5. **Conversion and Rounding**: Both the updated parameters and the new running average are converted to regular Python lists and rounded to four decimal places.\n\nThis implementation ensures that the updates are performed according to the RMSprop algorithm and returns the results in the required format."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    # Apply ELU activation function\n    if not derivative:\n        elu_output = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Calculate the derivative of ELU\n        elu_derivative = np.where(x >= 0, 1, alpha + np.exp(x))\n    \n    # Round the results to 4 decimal places\n    rounded_output = [round(val, 4) for val in elu_output]\n    \n    return rounded_output\n\n# Example usage:\n# print(elu([1, -2, 3], alpha=0.5, derivative=False))  # Output: [1.0, -0.7689, 3.0]\n# print(elu([1, -2, 3], alpha=0.5, derivative=True))   # Output: [1.0, 1.5311, 1.0]\n```\n\nThis function implements the ELU activation function and its gradient according to the specified requirements. It handles both cases where the derivative is needed and when it is not. The output is rounded to four decimal places before being returned as a list."}
{"task_id": 411, "completion_id": 0, "completion": "To solve this problem, we need to iterate through both the actions and observations lists, extract relevant statistical information, and construct the output dictionary accordingly. Here's how you can implement the `env_stats` function:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    # Initialize the result dictionary\n    stats = {\n        'tuple_actions': False,\n        'tuple_observations': False,\n        'multidim_actions': False,\n        'multidim_observations': False,\n        'continuous_actions': False,\n        'continuous_observations': False,\n        'n_actions_per_dim': [],\n        'action_dim': None,\n        'n_obs_per_dim': [],\n        'obs_dim': None,\n        'action_ids': [],\n        'obs_ids': []\n    }\n\n    # Helper function to flatten a list of iterables\n    def flatten(iterable):\n        return [item for sublist in iterable for item in sublist]\n\n    # Check if any element in actions is an iterable\n    stats['tuple_actions'] = any(isinstance(action, (list, tuple, np.ndarray)) for action in actions)\n\n    # Check if any element in observations is an iterable\n    stats['tuple_observations'] = any(isinstance(observation, (list, tuple, np.ndarray)) for observation in observations)\n\n    # Flatten the actions and observations\n    flat_actions = flatten(actions)\n    flat_observations = flatten(observations)\n\n    # Check if any action is multidimensional\n    stats['multidim_actions'] = any(len(action) > 1 for action in actions)\n\n    # Check if any observation is multidimensional\n    stats['multidim_observations'] = any(len(observation) > 1 for observation in observations)\n\n    # Determine if actions are continuous\n    stats['continuous_actions'] = any(not isinstance(action, int) for action in flat_actions)\n\n    # Determine if observations are continuous\n    stats['continuous_observations'] = any(not isinstance(observation, int) for observation in flat_observations)\n\n    # Calculate the number of unique values per dimension for actions\n    action_dims = set()\n    for action in actions:\n        if isinstance(action, (list, tuple)):\n            action_dims.add(tuple(sorted(action)))\n    stats['n_actions_per_dim'] = [len(dim) for dim in action_dims]\n    stats['action_dim'] = len(next(iter(action_dims)))\n\n    # Calculate the number of unique values per dimension for observations\n    obs_dims = set()\n    for obs in observations:\n        if isinstance(obs, (list, tuple)):\n            obs_dims.add(tuple(sorted(obs)))\n    stats['n_obs_per_dim'] = [len(dim) for dim in obs_dims]\n    stats['obs_dim'] = len(next(iter(obs_dims)))\n\n    # Get the sorted unique values for each dimension\n    action_ids = [sorted(set(action)) for action in actions if isinstance(action, (list, tuple))]\n    obs_ids = [sorted(set(obs)) for obs in observations if isinstance(obs, (list, tuple))]\n\n    # Update the dictionary with the calculated values\n    stats['action_ids'] = action_ids\n    stats['obs_ids'] = obs_ids\n\n    return stats\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis implementation checks various properties of the input lists, including whether they contain tuples, multidimensional structures, and continuous data types. It then calculates the necessary statistics and constructs the output dictionary according to the specified format."}
{"task_id": 413, "completion_id": 0, "completion": "To implement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch, we need to follow the steps outlined in the task description. Below is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree's prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    # Step 1: Initialize predictions with the mean of the training targets\n    predictions = np.mean(y_train)\n\n    # Step 2: Perform n_estimators iterations of boosting\n    for _ in range(n_estimators):\n        # Compute the residuals (negative gradients)\n        residuals = y_train - predictions\n        \n        # Fit a CART regression tree to the residuals\n        tree_predictions = fit_cart_tree(residuals, X_train, y_train, max_depth)\n        \n        # Update the running prediction\n        predictions += learning_rate * tree_predictions\n    \n    # Convert predictions to a list and round to 4 decimal places\n    return [round(pred, 4) for pred in predictions]\n\ndef fit_cart_tree(residuals: np.ndarray, X: np.ndarray, y: np.ndarray, max_depth: int) -> np.ndarray:\n    \"\"\"Fit a CART regression tree to the residuals.\"\"\"\n    \n    def find_best_split(data, target, feature_index):\n        best_score = float('inf')\n        best_feature = None\n        best_threshold = None\n        \n        unique_values = np.unique(data[:, feature_index])\n        \n        for threshold in unique_values[:-1]:\n            left_indices = data[:, feature_index] <= threshold\n            right_indices = data[:, feature_index] > threshold\n            \n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            \n            left_residuals = target[left_indices]\n            right_residuals = target[right_indices]\n            \n            left_mse = np.mean((left_residuals - np.mean(left_residuals)) ** 2)\n            right_mse = np.mean((right_residuals - np.mean(right_residuals)) ** 2)\n            \n            score = left_mse + right_mse\n            \n            if score < best_score:\n                best_score = score\n                best_feature = feature_index\n                best_threshold = threshold\n                \n        return best_feature, best_threshold\n\n    def build_tree(data, target, current_depth):\n        if current_depth >= max_depth or len(np.unique(target)) == 1:\n            return np.mean(target)\n        \n        feature_index, threshold = find_best_split(data, target, np.random.choice(data.shape[1]))\n        \n        left_indices = data[:, feature_index] <= threshold\n        right_indices = data[:, feature_index] > threshold\n        \n        left_subtree = build_tree(data[left_indices], target[left_indices], current_depth + 1)\n        right_subtree = build_tree(data[right_indices], target[right_indices], current_depth + 1)\n        \n        return np.where(data[:, feature_index] <= threshold, left_subtree, right_subtree)\n\n    # Randomly select a subset of features to avoid overfitting\n    num_features = min(5, X.shape[1])\n    selected_features = np.random.choice(X.shape[1], size=num_features, replace=False)\n    \n    # Build the tree using the selected features\n    return build_tree(X[:, selected_features], residuals, current_depth=0)\n\n# Example usage:\n# X_train, y_train, X_test = load_data()  # Replace with actual data loading\n# predictions = gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3)\n# print(predictions)\n```\n\n### Explanation:\n- **Initialization**: We start by initializing the predictions with the mean of the training targets.\n- **Boosting Loop**: For each boosting iteration, we compute the residuals (negative gradients of the squared-error loss).\n- **Tree Fitting**: We fit a CART regression tree to these residuals using a simple random selection of features to prevent overfitting.\n- **Prediction Update**: We update the running prediction by adding the tree\u2019s output multiplied by the learning rate.\n- **Output**: Finally, we convert the predictions to a list and round them to four decimal places before returning.\n\nThis implementation provides a basic framework for GBDT regression without using any external libraries beyond NumPy."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) for a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) or (n_samples,) representing the data points.\n    mean (np.ndarray): The mean vector of the distribution with length n_features.\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    \n    # Check if the covariance matrix is invertible\n    if det_cov == 0:\n        raise ValueError(\"Covariance matrix is not positive definite.\")\n    \n    # Calculate the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Calculate the exponent term\n    exp_term = -0.5 * np.sum((X - mean).T @ inv_cov @ (X - mean), axis=1)\n    \n    # Calculate the normalization term\n    norm_term = 1 / np.sqrt((2 * np.pi) ** n_features * det_cov)\n    \n    # Calculate the PDF values\n    pdf_values = norm_term * np.exp(exp_term)\n    \n    # Round the PDF values to four decimal places\n    rounded_pdf_values = [round(value, 4) for value in pdf_values]\n    \n    return rounded_pdf_values\n```\n\nThis function calculates the multivariate Gaussian PDF for each data point in `X` using the given mean and covariance matrix. It handles one-dimensional input by reshaping it appropriately. The PDF values are calculated and rounded to four decimal places before being returned as a list."}
{"task_id": 419, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Gaussian prior and known observation variance, we need to follow these steps:\n\n1. Add an intercept column if `fit_intercept=True`.\n2. Compute the posterior distribution parameters.\n3. Calculate the MAP predictive mean for the new design matrix `X_new`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Check input dimensions\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    \n    N, M = X.shape\n    \n    # Initialize V if not provided\n    if V is None:\n        V = np.eye(M)\n    \n    # Compute the posterior covariance matrix\n    Sigma_p = np.linalg.inv(V + X.T @ X)\n    \n    # Compute the posterior mean\n    mu_p = Sigma_p @ (V @ mu + X.T @ y)\n    \n    # Predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round predictions to 4 decimal places\n    y_pred_rounded = [round(val, 4) for val in y_pred]\n    \n    return y_pred_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([7, 8, 9])\n    X_new = np.array([[7, 8], [9, 10]])\n    \n    result = bayesian_linear_regression_pred(X, y, X_new)\n    print(result)\n```\n\n### Explanation:\n\n- **Intercept**: We add an intercept column to both `X` and `X_new` if `fit_intercept=True`.\n- **Posterior Covariance**: We compute the posterior covariance matrix using the formula \\( \\Sigma_p = (V^{-1} + X^T X)^{-1} \\).\n- **Posterior Mean**: We calculate the posterior mean using \\( \\mu_p = \\Sigma_p (V^{-1} \\mu + X^T y) \\).\n- **Predictive Mean**: For each row in `X_new`, we compute the predictive mean using \\( \\hat{y}_i = X_{new,i}^T \\mu_p \\).\n- **Rounding**: Finally, we round the predicted values to four decimal places before returning them as a list."}
{"task_id": 423, "completion_id": 0, "completion": "Here's the implementation of the `root_mean_squared_log_error` function in Python:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    \n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate that all elements are non-negative\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Calculate the sum of squared differences\n    squared_diffs = [(np.log1p(pred) - np.log1p(act))**2 for pred, act in zip(predicted, actual)]\n    \n    # Compute the mean of these squared differences\n    mean_squared_diff = np.mean(squared_diffs)\n    \n    # Return the square root of the mean squared difference, rounded to 4 decimal places\n    rmsle = round(np.sqrt(mean_squared_diff), 4)\n    \n    return rmsle\n\n# Example usage:\n# actual = [1.0, 2.0, 3.0]\n# predicted = [1.2, 2.5, 3.7]\n# print(root_mean_squared_log_error(actual, predicted))  # Output will depend on the input values\n```\n\n### Explanation:\n1. **Length Validation**: The function first checks if the lengths of the `actual` and `predicted` lists are equal. If not, it returns `-1`.\n\n2. **Non-Negativity Validation**: It then checks if all elements in both lists are non-negative. If any element is negative, it returns `-1`.\n\n3. **Squared Differences Calculation**: For each pair of corresponding elements from `actual` and `predicted`, it calculates the squared difference after applying the natural logarithm plus one (`log1p`). This is done using NumPy's `np.log1p` function.\n\n4. **Mean Calculation**: The squared differences are summed up, and the mean is calculated using NumPy's `np.mean`.\n\n5. **RMSLE Computation**: Finally, the square root of the mean squared difference is computed and rounded to four decimal places using `round(value, 4)`.\n\nThis function ensures that the input data meets the required conditions and provides a robust calculation of the RMSLE."}
{"task_id": 428, "completion_id": 0, "completion": "Here's the implementation of the `hann` function according to the specified requirements:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    \n    if window_len == 1:\n        return [1.0]\n    \n    # Calculate the Hann window coefficients\n    hann_window = [\n        0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)\n    ]\n    \n    # Round the coefficients to 4 decimal places\n    hann_window_rounded = [round(x, 4) for x in hann_window]\n    \n    # Convert the NumPy array to a regular Python list\n    hann_window_list = list(hann_window_rounded)\n    \n    # If symmetric is False, adjust the window to be periodic\n    if not symmetric:\n        # Drop the last element to make it periodic\n        hann_window_list.pop()\n    \n    return hann_window_list\n\n# Example usage:\nprint(hann(10, symmetric=True))\nprint(hann(10, symmetric=False))\n```\n\n### Explanation:\n- **Edge Cases**: The function handles edge cases where `window_len` is less than or equal to zero by returning an empty list. If `window_len` is exactly one, it returns `[1.0]`.\n- **Window Calculation**: The Hann window is calculated using the formula \\( \\text{hann}(n) = 0.5 - 0.5 \\cos\\left(\\frac{2\\pi n}{N-1}\\right) \\).\n- **Rounding**: Each coefficient is rounded to four decimal places using `round(x, 4)`.\n- **Periodicity**: If `symmetric` is `False`, the last element of the window is removed to ensure it forms a periodic window suitable for FFT analysis.\n- **Return Type**: The function returns a list of floats, which is converted from a NumPy array to maintain compatibility with typical Python list operations."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"The shape must have at least two dimensions.\")\n    \n    if len(shape) == 4:\n        # Assuming 4D convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For dense layers, embeddings, etc., take the first two dimensions\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return fan_in, fan_out\n```\n\nThis function correctly implements the logic to calculate `fan-in` and `fan-out` based on the provided rules. It handles both 4D convolutional kernels and other types of tensors by using the first two dimensions for `fan_in` and `fan_out`."}
{"task_id": 435, "completion_id": 0, "completion": "To implement the Tiny Gradient Boosting Regressor using ordinary least-squares (OLS) linear regression, we can follow the steps outlined in the task description. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Initialize the current prediction with the mean of y\n    hat_y = np.mean(y).astype(float)\n    \n    # Number of samples\n    m = len(y)\n    \n    # List to store predictions\n    predictions = [hat_y]\n    \n    # Perform gradient boosting\n    for t in range(n_estimators):\n        # Compute residuals\n        r = y - hat_y\n        \n        # Fit an OLS linear model to predict the residuals\n        coefficients = np.linalg.lstsq(X, r, rcond=None)[0]\n        \n        # Predict the residuals\n        residuals_prediction = np.dot(X, coefficients)\n        \n        # Update the overall prediction\n        hat_y += learning_rate * residuals_prediction\n        \n        # Append the updated prediction to the list\n        predictions.append(hat_y)\n    \n    # Round each prediction to 4 decimal places and convert to a regular Python list\n    rounded_predictions = [round(pred, 4) for pred in predictions]\n    \n    return rounded_predictions\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [10, 20, 30]\n# print(gradient_boosting_regressor(X, y))\n```\n\n### Explanation:\n1. **Input Conversion**: The input matrices `X` and `y` are converted to NumPy arrays for efficient computation.\n2. **Initialization**: The initial prediction `\\(\\hat y^{(0)}\\)` is set to the mean of `y`.\n3. **Gradient Boosting Loop**:\n   - For each iteration `t` from 1 to `n_estimators`, compute the residuals `r = y - \\hat y^{(t-1)}`.\n   - Use OLS to fit a linear model to predict these residuals, obtaining the coefficients.\n   - Compute the weak-learner prediction `h^{(t)}(X) = X \\cdot \\text{coefficients}`.\n   - Update the overall prediction: \\(\\hat y^{(t)} = \\hat y^{(t-1)} + \\text{learning\\_rate} \\cdot h^{(t)}(X)\\).\n4. **Output**: After completing all iterations, round each prediction to 4 decimal places and return them as a list.\n\nThis implementation adheres to the constraints specified, including not using any additional libraries beyond the Python standard library and NumPy."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(order, int) or order < 0 or order > 2:\n        return -1\n    \n    # Convert input to numpy array for unified processing\n    x_array = np.array(x)\n    \n    # Compute the logistic sigmoid function\n    if order == 0:\n        sigma_values = 1 / (1 + np.exp(-x_array))\n    \n    # Compute the first derivative\n    elif order == 1:\n        sigma_values = sigma_values * (1 - sigma_values)\n    \n    # Compute the second derivative\n    elif order == 2:\n        sigma_values = sigma_values * (1 - sigma_values) * (1 - 2 * sigma_values)\n    \n    # Round the results to 4 decimal places\n    sigma_values_rounded = np.round(sigma_values, 4)\n    \n    # Return the result in the appropriate format\n    if x_array.ndim == 0:\n        return sigma_values_rounded.item()\n    else:\n        return sigma_values_rounded.tolist()\n\n# Example usage:\nprint(sigmoid(0))          # Should print 0.5000\nprint(sigmoid([0, 1, 2]))   # Should print [0.5000, 0.7311, 0.8808]\nprint(sigmoid(np.array([0, 1, 2])))  # Should print [0.5000, 0.7311, 0.8808]\nprint(sigmoid(0, order=1))  # Should print 0.2500\nprint(sigmoid(0, order=2))  # Should print 0.1250\nprint(sigmoid(0, order=3))  # Should print -1\n```"}
{"task_id": 438, "completion_id": 0, "completion": "Here's a complete implementation of the `to_categorical` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    if num_classes is None:\n        num_classes = max(y) + 1\n    \n    if num_classes < len(set(y)):\n        return [-1]\n    \n    y_one_hot = np.eye(num_classes)[y]\n    \n    return y_one_hot.tolist()\n\n# Test cases\nprint(to_categorical([0, 1, 2]))  # [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nprint(to_categorical([0, 1, 2], 5))  # [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0]]\nprint(to_categorical([0, 1, 2], 3))  # [-1]\nprint(to_categorical(np.array([0, 1, 2])))  # [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nprint(to_categorical([0, 1, 2], 6))  # [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0]]\nprint(to_categorical([0, 1, 2], 4))  # [-1]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `y` is a list and converts it to a NumPy array if necessary.\n\n2. **Determine `num_classes`**: \n   - If `num_classes` is not provided, it calculates the maximum class index from `y` plus one (`max(y) + 1`) as the total number of classes.\n\n3. **Check Feasibility**:\n   - It checks if `num_classes` is less than the number of unique class indices in `y`. If so, it returns `-1` because one-hot encoding would require more classes than available.\n\n4. **One-Hot Encoding**:\n   - It uses NumPy's `eye` function to create a diagonal matrix with size `num_classes x num_classes`.\n   - It then selects the appropriate rows corresponding to the class indices in `y`.\n\n5. **Output Formatting**:\n   - The resulting one-hot encoded matrix is converted to a list of lists using `tolist()` and returned."}
{"task_id": 439, "completion_id": 0, "completion": "Here's the implementation of the Apriori algorithm for finding frequent itemsets:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def get_support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) / len(transactions)\n\n    def prune_candidates(candidates, freq_items):\n        return [candidate for candidate in candidates if all(get_support(subset) >= min_sup for subset in itertools.combinations(candidate, len(candidate)-1))]\n\n    # Step 1: Generate initial candidate sets of size 1\n    candidate_1 = {frozenset({item}) for transaction in transactions for item in transaction}\n    \n    # Initialize the list of frequent itemsets with size 1\n    freq_itemsets = []\n    \n    while candidate_1:\n        # Step 2: Prune candidate sets to keep only frequent ones\n        candidate_1 = prune_candidates(candidate_1, freq_itemsets)\n        \n        # If there are no more frequent candidates, break the loop\n        if not candidate_1:\n            break\n        \n        # Step 3: Add the current frequent candidate sets to the result\n        freq_itemsets.extend(candidate_1)\n        \n        # Step 4: Generate next level of candidate sets by joining frequent itemsets\n        candidate_1 = {frozenset(a.union(b)) for a, b in itertools.product(freq_itemsets, repeat=2) if len(a.union(b)) == len(freq_itemsets[-1]) + 1}\n\n    # Sort the frequent itemsets by length and then lexicographically\n    freq_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return freq_itemsets\n\n# Example usage:\ntransactions = [\n    ['apple', 'banana'],\n    ['banana', 'cherry'],\n    ['apple', 'cherry'],\n    ['banana']\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\n### Explanation:\n\n1. **Support Calculation**: The `get_support` function calculates the support of a given itemset by counting how many transactions it appears in and dividing by the total number of transactions.\n\n2. **Pruning Candidates**: The `prune_candidates` function filters out candidate sets that do not meet the minimum support threshold by checking if all subsets of the candidate have sufficient support.\n\n3. **Initialization**: The algorithm starts with candidate sets of size 1, which are generated from the transactions.\n\n4. **Iterative Generation**: The algorithm iteratively generates larger candidate sets by joining pairs of frequent itemsets of the previous size. It continues this process until no new frequent itemsets can be found.\n\n5. **Sorting**: Finally, the frequent itemsets are sorted by their length and lexicographical order before being returned.\n\nThis implementation efficiently finds all frequent itemsets using the Apriori algorithm and meets the specified output constraints."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    pred_array = np.array(predictions)\n    \n    # Calculate the mean along the estimator axis\n    averaged_probs = np.mean(pred_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_probs = np.round(averaged_probs, decimals=4)\n    \n    # Get the indices of the maximum values along the class axis\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    \n    # Convert the results back to lists\n    rounded_probs_list = rounded_probs.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return rounded_probs_list, predicted_classes_list\n```\n\nThis solution converts the input list to a NumPy array for efficient computation, calculates the mean across the estimator axis to get the averaged probabilities, rounds them to four decimal places, finds the indices of the maximum values to determine the predicted class, and finally converts the results back to regular Python lists."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel, we need to follow these steps:\n\n1. Validate the inputs:\n   - Ensure that the feature dimensions of `X` and `Y` match if both are provided.\n   - Check if `sigma` is valid:\n     - If `sigma` is a single positive float, it should be applied uniformly across all features.\n     - If `sigma` is a list, ensure its length matches the number of features.\n     - If `sigma` is `None`, use the default value `\u221a(C/2)` where `C` is the number of features.\n\n2. Compute the kernel matrix:\n   - Calculate the squared Euclidean distance between each pair of vectors from `X` and `Y`.\n   - Apply the RBF kernel formula using the calculated distances and the specified `sigma`.\n\n3. Round the results to four decimal places and return them as a nested list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    def validate_inputs(X, Y, sigma):\n        if Y is not None and len(X[0]) != len(Y[0]):\n            return False\n        \n        if sigma is None:\n            sigma = np.sqrt(len(X[0]) / 2)\n        \n        elif isinstance(sigma, (int, float)):\n            if sigma <= 0:\n                return False\n            \n        elif isinstance(sigma, list):\n            if len(sigma) != len(X[0]):\n                return False\n            if any(s <= 0 for s in sigma):\n                return False\n        \n        return True\n    \n    if not validate_inputs(X, Y, sigma):\n        return -1\n    \n    if Y is None:\n        Y = X\n    \n    N, C = len(X), len(X[0])\n    M, _ = len(Y), len(Y[0])\n    \n    K = np.zeros((N, M))\n    \n    for i in range(N):\n        for j in range(M):\n            dist_squared = sum((xi - yi) ** 2 for xi, yi in zip(X[i], Y[j]))\n            K[i, j] = np.exp(-0.5 * dist_squared / sigma)\n    \n    return round_to_four_decimal_places(K)\n\ndef round_to_four_decimal_places(matrix):\n    \"\"\"Round each element of the matrix to four decimal places.\"\"\"\n    return [[round(element, 4) for element in row] for row in matrix]\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nresult = rbf_kernel(X, Y, sigma)\nprint(result)  # Output: [[1.0, 0.3679], [0.3679, 1.0]]\n```\n\n### Explanation:\n- **Validation**: The `validate_inputs` function checks if the inputs are valid according to the specified rules.\n- **Kernel Calculation**: We iterate over each pair of vectors from `X` and `Y`, calculate the squared Euclidean distance, and apply the RBF kernel formula.\n- **Rounding**: The `round_to_four_decimal_places` function rounds each element of the resulting matrix to four decimal places.\n- **Output**: The function returns the kernel matrix as a nested list. If any input validation fails, it returns `-1`."}
{"task_id": 446, "completion_id": 0, "completion": "To solve the problem of finding the best single-level split (decision stump) using information gain, we need to follow these steps:\n\n1. Calculate the entropy of the entire dataset.\n2. Iterate over each feature and each possible threshold to calculate the information gain.\n3. Track the split that results in the maximum information gain.\n4. Handle ties according to the specified rules.\n\nHere's the implementation of the `decision_stump` function:\n\n```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    def entropy(y):\n        \"\"\"Calculate the Shannon entropy of the class labels.\"\"\"\n        unique_labels, counts = np.unique(y, return_counts=True)\n        probabilities = counts / len(y)\n        return -np.sum(probabilities * np.log2(probabilities))\n\n    n_samples, n_features = len(X), len(X[0])\n    \n    # Initialize variables to track the best split\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values\n        sorted_values = np.sort(np.array(X)[:, j])\n        \n        # Consider mid-points between consecutive distinct values\n        for i in range(len(sorted_values) - 1):\n            thr = round((sorted_values[i] + sorted_values[i + 1]) / 2, 4)\n            \n            # Split the data based on the threshold\n            left_indices = [i for i in range(n_samples) if X[i][j] <= thr]\n            right_indices = [i for i in range(n_samples) if X[i][j] > thr]\n            \n            # Calculate the entropy of the parent node\n            parent_entropy = entropy(y)\n            \n            # Calculate the entropy of the left and right nodes\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n            \n            # Calculate the weighted average of entropies\n            weighted_entropy = (len(left_indices) / n_samples) * left_entropy + \\\n                               (len(right_indices) / n_samples) * right_entropy\n            \n            # Calculate the information gain\n            gain = parent_entropy - weighted_entropy\n            \n            # Check if this gain is better than the current best\n            if gain > best_gain or \\\n               (gain == best_gain and (best_feature_index == -1 or j < best_feature_index)) or \\\n               (gain == best_gain and (best_feature_index == j and (best_threshold is None or thr < best_threshold))):\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = thr\n                left_majority_label = np.bincount(y[left_indices]).argmax()\n                right_majority_label = np.bincount(y[right_indices]).argmax()\n\n    # If no split improved the information gain, return the majority label\n    if best_gain == -np.inf:\n        majority_label = np.bincount(y).argmax()\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))\n```\n\n### Explanation:\n- **Entropy Calculation**: We define a helper function `entropy` to calculate the Shannon entropy of a set of labels.\n- **Iterate Over Features**: For each feature, we sort the values and consider mid-points between consecutive distinct values as potential thresholds.\n- **Split Data**: For each threshold, we split the data into two subsets and calculate the weighted average of their entropies to get the information gain.\n- **Track Best Split**: We keep track of the split with the highest information gain, resolving ties as specified.\n- **Return Result**: If no split improves the information gain, we return the majority label.\n\nThis implementation ensures that the function adheres to the requirements and handles ties correctly."}
{"task_id": 452, "completion_id": 0, "completion": "To solve the problem of splitting a dataset based on a feature and a threshold, we need to handle both numeric and categorical thresholds appropriately. Here's how you can implement the `divide_on_feature` function:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    X_np = np.asarray(X)\n    \n    # Determine the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X_np[:, feature_i] >= threshold\n    else:\n        condition = X_np[:, feature_i] == threshold\n    \n    # Split the data based on the condition\n    subset_1 = X_np[condition].tolist()\n    subset_2 = X_np[~condition].tolist()\n    \n    return [subset_1, subset_2]\n```\n\n### Explanation:\n\n1. **Input Conversion**: We first convert the input `X` to a NumPy array using `np.asarray(X)`. This ensures that we can easily use NumPy operations on the data.\n\n2. **Condition Determination**: \n   - If `threshold` is a numeric value (int or float), we use the condition `X[:, feature_i] >= threshold` to identify samples where the feature value is greater than or equal to the threshold.\n   - If `threshold` is a non-numeric value (e.g., string, list), we use the condition `X[:, feature_i] == threshold`.\n\n3. **Subset Creation**:\n   - We use boolean indexing (`condition`) to select the rows from `X` that meet the specified condition.\n   - We then convert these selected rows to a list of lists using `.tolist()` and store them in `subset_1`.\n   - The remaining rows are stored in `subset_2`, which are those that do not satisfy the condition.\n\n4. **Return Result**: Finally, we return a list containing `subset_1` and `subset_2`.\n\nThis implementation ensures that both subsets maintain their original order and are returned as regular Python lists."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs have consistent lengths\n    if len(Q) != len(actions) or len(Q) != len(rewards) or len(Q) != len(dones):\n        return -1\n    \n    # Check if gamma is within the valid range\n    if not (0 <= gamma <= 1):\n        return -1\n    \n    # Initialize the output list\n    y = []\n    \n    # Iterate over each sample in the batch\n    for i in range(len(Q)):\n        # Calculate the target value based on the done flag\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Create a copy of the current Q value\n        q_copy = Q[i].copy()\n        \n        # Replace the Q value corresponding to the action with the target value\n        q_copy[actions[i]] = target\n        \n        # Append the updated Q values to the output list\n        y.append(q_copy.tolist())\n    \n    # Return the updated Q matrix rounded to 4 decimal places\n    return np.round(y, decimals=4).tolist()\n\n# Example usage:\n# Q = np.array([[0.5, 0.3, 0.2], [0.8, 0.6, 0.4]])\n# Q_next = np.array([[0.7, 0.4, 0.1], [0.9, 0.5, 0.3]])\n# actions = [1, 0]\n# rewards = [10, 5]\n# dones = [False, True]\n# gamma = 0.9\n# print(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis function checks for consistency in the input sizes and ensures the gamma value is within the valid range before proceeding with the computation. It then calculates the target values for each sample and updates the Q values accordingly, returning the updated Q matrix rounded to four decimal places. If any input validation fails, it returns `-1`."}
{"task_id": 458, "completion_id": 0, "completion": "Here's the implementation of the `to_categorical` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    labels_array = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels_array) + 1\n    \n    # Check if num_classes is sufficient\n    if num_classes <= max(labels_array):\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels_array))]\n    \n    # Fill the one-hot encoded matrix\n    for i, label in enumerate(labels_array):\n        one_hot_matrix[i][label] = 1\n    \n    # Return the one-hot encoded matrix as a list of lists\n    return [row.tolist() for row in one_hot_matrix]\n\n# Example usage:\nlabels = [1, 2, 0]\nprint(to_categorical(labels))  # Output: [[0, 1, 0], [0, 0, 1], [1, 0, 0]]\n\nlabels_with_negative = [-1, 2, 0]\nprint(to_categorical(labels_with_negative))  # Output: -1\n\nlabels_too_small = [1, 2, 3]\nprint(to_categorical(labels_too_small, num_classes=2))  # Output: -1\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `labels` is a numpy array. If not, it converts it to one.\n\n2. **Negative Label Check**: It checks if there are any negative labels in the array. If so, it returns `-1`.\n\n3. **Num Classes Inference**: If `num_classes` is not provided, it calculates the maximum label plus one as the default number of classes.\n\n4. **Sufficient Num Classes Check**: It ensures that `num_classes` is greater than the maximum label. If not, it returns `-1`.\n\n5. **One-Hot Encoding**: It initializes a zero matrix with the appropriate dimensions and fills it with ones at the positions corresponding to the labels.\n\n6. **Output**: Finally, it returns the one-hot encoded matrix as a list of lists."}
{"task_id": 461, "completion_id": 0, "completion": "Here's a Python function that implements the Gradient Boosting Regressor for one-dimensional regression using decision stumps:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    # Convert lists to numpy arrays for efficient computation\n    x = np.array(x)\n    y = np.array(y)\n\n    # Initialize the ensemble prediction\n    predictions = np.mean(y)\n\n    # Perform gradient boosting\n    for _ in range(n_estimators):\n        # Calculate residuals\n        residuals = y - predictions\n\n        # Find unique x values except the greatest one\n        unique_x = np.unique(x[x != np.max(x)])\n\n        # Initialize variables to store best split information\n        min_sse = np.inf\n        best_split = None\n\n        # Iterate over all possible split values\n        for t in unique_x:\n            # Split the data into left and right subsets\n            left_indices = x <= t\n            right_indices = x > t\n\n            # Check if both sides have at least one element\n            if not left_indices.any() or not right_indices.any():\n                continue\n\n            # Calculate the sum of squared errors for the left subset\n            sse_left = np.sum(residuals[left_indices] ** 2)\n\n            # Calculate the sum of squared errors for the right subset\n            sse_right = np.sum(residuals[right_indices] ** 2)\n\n            # Calculate the total SSE\n            total_sse = sse_left + sse_right\n\n            # Update the best split if the current one has a smaller SSE\n            if total_sse < min_sse:\n                min_sse = total_sse\n                best_split = t\n\n        # If no valid split was found, use the mean residual of the whole data\n        if best_split is None:\n            v_L = np.mean(residuals)\n            v_R = np.mean(residuals)\n        else:\n            # Predict the mean residual on the left and right subsets\n            v_L = np.mean(residuals[x <= best_split])\n            v_R = np.mean(residuals[x > best_split])\n\n        # Update the ensemble prediction\n        predictions += learning_rate * (residuals - np.where(x <= best_split, v_L, v_R))\n\n    # Round the predictions to four decimal places\n    return np.round(predictions, 4).tolist()\n\n# Example usage:\n# x = [1, 2, 3, 4, 5]\n# y = [2, 3, 5, 7, 11]\n# print(gradient_boosting_regressor(x, y))\n```\n\n### Explanation:\n1. **Initialization**: Start with the mean of the target values as the initial prediction.\n2. **Gradient Boosting Loop**: Repeat `n_estimators` times:\n   - Calculate the residuals between actual and predicted values.\n   - Identify potential split points based on unique feature values (excluding the maximum value).\n   - For each split point, calculate the sum of squared errors for the left and right subsets.\n   - Choose the split with the smallest SSE.\n   - Update the ensemble prediction by adding the weighted residuals to it.\n3. **Output**: Round the final predictions to four decimal places before returning them."}
{"task_id": 471, "completion_id": 0, "completion": "To implement the Expected-SARSA TD(0) update, we need to follow these steps:\n\n1. Determine the greedy action in the next state `s'`.\n2. Calculate the expected Q-value for the next state using the \u03b5-soft policy.\n3. Compute the target value using the formula \\( \\text{target} = r + \\gamma \\times E[\\text{Q}[s', a'] | s'] \\).\n4. Update the Q-table entry for the current state-action pair using the formula \\( Q[s][a] += \\eta \\times (\\text{target} - Q[s][a]) \\).\n\nHere's the implementation of the `expected_sarsa_update` function:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    num_actions = len(q_table[0])\n    \n    # Find the greedy action in the next state\n    if next_state is not None:\n        max_q_value = -np.inf\n        best_action = None\n        for a in range(num_actions):\n            q_value = q_table[next_state][a]\n            if q_value > max_q_value:\n                max_q_value = q_value\n                best_action = a\n        \n        # Calculate the expected Q-value using the \u03b5-soft policy\n        expected_q_value = (1 - epsilon) / num_actions + epsilon / num_actions\n        for a in range(num_actions):\n            if a == best_action:\n                expected_q_value += epsilon / num_actions\n    \n    else:\n        expected_q_value = 0.0\n    \n    # Compute the target value\n    target = reward + gamma * expected_q_value\n    \n    # Update the Q-table entry\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [list(np.round(row, 4)) for row in q_table]\n    \n    return q_table\n\n# Example usage:\n# Initialize Q-table\nq_table = [\n    [0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0]\n]\n\n# Perform an update\nupdated_q_table = expected_sarsa_update(\n    q_table,\n    state=0,\n    action=0,\n    reward=1.0,\n    next_state=None,\n    epsilon=0.1,\n    lr=0.1,\n    gamma=0.99\n)\n\nprint(updated_q_table)\n```\n\n### Explanation:\n- **Greedy Action**: We find the action with the highest Q-value in the next state `s'`. If there is a tie, any of the tied actions can be chosen.\n- **Expected Q-value**: Using the \u03b5-soft policy, we calculate the expected Q-value by considering both the greedy action and the other possible actions with equal probability.\n- **Target Calculation**: The target is computed as the sum of the immediate reward and the discounted expected Q-value from the next state.\n- **Update Rule**: The Q-table entry for the current state-action pair is updated using the calculated target and the learning rate.\n- **Rounding**: All entries in the Q-table are rounded to four decimal places before returning."}
{"task_id": 474, "completion_id": 0, "completion": "To address the issues in the `_GenerateData` helper function, we need to make it reusable by accepting parameters and handling randomness properly. We'll also ensure that the data is generated according to the specified rules. Here's how you can implement the `generate_data` function:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Define the range for the x-coordinates based on the class index\n        x_min = (i // 2) * 10 + 0.1\n        x_max = (i // 2) * 10 + 0.9\n        \n        # Define the range for the y-coordinates based on the class index and interval\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        \n        # Sample points for training\n        x_train_sample = np.random.uniform(x_min, x_max, n_train)\n        y_train_sample = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(np.column_stack((x_train_sample, y_train_sample)))\n        Y_train.extend((np.ones(n_train) * (i - 0.5)) * 2)\n        \n        # Sample points for validation\n        x_val_sample = np.random.uniform(x_min, x_max, n_val)\n        y_val_sample = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(np.column_stack((x_val_sample, y_val_sample)))\n        Y_val.extend((np.ones(n_val) * (i - 0.5)) * 2)\n\n    # Convert lists to arrays and round to 4 decimal places\n    X_train = np.array(X_train).round(4)\n    Y_train = np.array(Y_train).round(4)\n    X_val = np.array(X_val).round(4)\n    Y_val = np.array(Y_val).round(4)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\n# X_train, X_val, Y_train, Y_val = generate_data(m=3, n_train=10, n_val=5, interval=5, seed=42)\n```\n\n### Explanation:\n- **Random Seed**: If `seed` is provided, it sets the random seed to ensure reproducibility.\n- **Class Indexing**: The class index `i` determines the range for both `x` and `y` coordinates.\n- **Sampling**: For each class, we sample `n_train` and `n_val` points uniformly within their respective ranges.\n- **Label Assignment**: Each point is assigned a label based on its class index, adjusted by `(i - 0.5) * 2` to get either `-1` or `+1`.\n- **Rounding**: All coordinates are rounded to four decimal places using `np.round(4)`.\n- **Output**: The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`."}
{"task_id": 475, "completion_id": 0, "completion": "To implement the Adam optimization update step in Python, we need to follow the provided formulae. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    \n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update first moment (mean of gradients)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    \n    # Update second moment (uncentred variance of gradients)\n    v_t = b2 * v_prev + (1 - b2) * grad**2\n    \n    # Bias-corrected first moment\n    m_hat_t = m_t / (1 - b1**t)\n    \n    # Bias-corrected second moment\n    v_hat_t = v_t / (1 - b2**t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage:\n# w_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\n# print(round(w_new, 9))  # \u2248 0.999000001\n```\n\n### Explanation:\n1. **Initialization**: If `m_prev` or `v_prev` is `None`, they are initialized to zero arrays of the same shape as `grad`.\n2. **First Moment Calculation**: The first moment (`m_t`) is calculated using the exponential decay formula.\n3. **Second Moment Calculation**: The second moment (`v_t`) is calculated similarly.\n4. **Bias Correction**: The bias-corrected first moment (`m_hat_t`) and second moment (`v_hat_t`) are computed by dividing by `(1 - b1^t)` and `(1 - b2^t)`, respectively.\n5. **Parameter Update**: The parameters are updated using the Adam formula, ensuring that the denominator is adjusted by adding a small epsilon (`eps`) for numerical stability.\n\nThis implementation handles both scalar and NumPy array inputs, making it versatile for different use cases."}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy multi-armed bandit simulation, we need to follow the steps outlined in the description. Here's how you can do it:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    arm_values = [ev_prior] * num_arms\n    arm_pulls = [0] * num_arms\n    \n    for t, arm_rewards in enumerate(rewards):\n        if np.random.rand() < epsilon:\n            # Explore: Choose an arm uniformly at random\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            # Exploit: Choose the arm with the highest estimated value\n            chosen_arm = np.argmax(arm_values)\n        \n        reward = arm_rewards[chosen_arm]\n        arm_pulls[chosen_arm] += 1\n        \n        # Update the estimated value of the chosen arm\n        arm_values[chosen_arm] += (reward - arm_values[chosen_arm]) / arm_pulls[chosen_arm]\n    \n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in arm_values]\n\n# Example usage:\n# rewards = [\n#     [1.0, 2.0, 3.0],\n#     [4.0, 5.0, 6.0],\n#     [7.0, 8.0, 9.0]\n# ]\n# print(epsilon_greedy_bandit(rewards))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the estimated value (`arm_values`) and the count of pulls (`arm_pulls`) for each arm to `ev_prior` and 0, respectively.\n\n2. **Simulation Loop**: For each time-step `t`, we decide whether to explore or exploit based on the current value of `epsilon`.\n   - If `epsilon` is less than a random draw, we select an arm uniformly at random.\n   - Otherwise, we select the arm with the highest estimated value. In case of a tie, we break it by choosing the arm with the smallest index.\n\n3. **Update Estimates**: After selecting an arm, we update its estimated value using the incremental sample mean formula:\n   \\[\n   V_i \\leftarrow V_i + \\frac{r - V_i}{C_i}\n   \\]\n   where \\( V_i \\) is the current estimate, \\( r \\) is the observed reward, and \\( C_i \\) is the number of times the arm has been pulled.\n\n4. **Output**: Finally, we round the estimated values to 4 decimal places and return them.\n\nThis implementation ensures that the \u03b5-greedy strategy is applied correctly, allowing you to simulate the behavior of a multi-armed bandit under different exploration probabilities."}
{"task_id": 481, "completion_id": 0, "completion": "To implement the DBSCAN clustering algorithm from scratch, we need to follow these steps:\n\n1. **Compute Pairwise Distances**: Calculate the Euclidean distances between all pairs of points in the dataset.\n2. **Identify Core Points**: Determine which points are core points based on the given `eps` and `min_samples`.\n3. **Expand Clusters**: Starting from core points, expand clusters by connecting them through their neighbors.\n4. **Label Noise Points**: Identify points that are not part of any cluster and label them as noise.\n\nHere's the implementation of the DBSCAN algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    num_points = len(data)\n    visited = np.zeros(num_points, dtype=bool)\n    labels = np.full(num_points, -1)\n\n    def get_neighbors(point_index):\n        return np.where(np.linalg.norm(data - data[point_index], axis=1) <= eps)[0]\n\n    def expand_cluster(cluster_id, point_index):\n        queue = [point_index]\n        visited[point_index] = True\n\n        while queue:\n            current_point_index = queue.pop(0)\n            labels[current_point_index] = cluster_id\n\n            neighbors = get_neighbors(current_point_index)\n            for neighbor_index in neighbors:\n                if not visited[neighbor_index]:\n                    visited[neighbor_index] = True\n                    if len(get_neighbors(neighbor_index)) >= min_samples:\n                        queue.append(neighbor_index)\n\n    cluster_id = 0\n    for i in range(num_points):\n        if visited[i]:\n            continue\n\n        neighbors = get_neighbors(i)\n        if len(neighbors) < min_samples:\n            labels[i] = -1  # Noise point\n        else:\n            cluster_id += 1\n            expand_cluster(cluster_id, i)\n\n    return list(labels)\n\n# Example usage:\n# data = np.array([[1, 2], [1, 8], [2, 3], [8, 9]])\n# eps = 1.5\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n\n- **Pairwise Distance Calculation**: We compute the Euclidean distance between each pair of points using `np.linalg.norm`.\n- **Core Point Identification**: A point is considered a core point if it has at least `min_samples` neighbors within `eps`.\n- **Cluster Expansion**: For each core point, we expand the cluster by adding its neighbors recursively until no more neighbors can be added.\n- **Noise Point Detection**: If a point does not meet the criteria to be a core point, it is labeled as noise (`-1`).\n\nThis implementation ensures that the clusters are labeled according to the specified rules and handles edge cases such as an empty input dataset."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(y) + 1\n    \n    if not isinstance(num_classes, int) or num_classes < 1:\n        raise ValueError(\"num_classes must be a positive integer.\")\n    \n    if not all(isinstance(label, int) and label >= 0 for label in y):\n        raise ValueError(\"All labels must be non-negative integers.\")\n    \n    if any(label >= num_classes for label in y):\n        raise ValueError(\"No label can be greater than or equal to num_classes.\")\n    \n    y_encoded = np.eye(num_classes)[y]\n    return y_encoded.astype(int)\n\n# Example usage:\n# y = [1, 2, 3, 4]\n# print(to_categorical(y))\n```\n\nThis implementation checks for valid inputs, calculates the number of classes if not specified, ensures all labels are within the valid range, and then constructs the one-hot encoded matrix using NumPy's `eye` function. The resulting array is converted to integers before being returned."}
{"task_id": 485, "completion_id": 0, "completion": "Here's a implementation of a very small version of the CART regression tree algorithm:\n\n```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) == 0:\n        return []\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n\n    def find_best_split(x, y):\n        best_sse = float('inf')\n        best_split_point = None\n        best_left_y = None\n        best_right_y = None\n\n        for i in range(1, len(x)):\n            left_x = x[:i]\n            right_x = x[i:]\n            left_y = y[:i]\n            right_y = y[i:]\n\n            if len(left_x) > 0 and len(right_x) > 0:\n                left_mean = np.mean(left_y)\n                right_mean = np.mean(right_y)\n                sse = np.sum((left_y - left_mean) ** 2) + np.sum((right_y - right_mean) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split_point = x[i]\n                    best_left_y = left_y\n                    best_right_y = right_y\n\n        return best_split_point, best_left_y, best_right_y\n\n    def build_tree(x, y, depth=0):\n        if depth >= max_depth or len(x) <= 1:\n            return {\n                'is_leaf': True,\n                'value': np.mean(y)\n            }\n\n        split_point, left_y, right_y = find_best_split(x, y)\n\n        left_x = x[x < split_point]\n        right_x = x[x >= split_point]\n\n        left_node = build_tree(left_x, left_y, depth + 1)\n        right_node = build_tree(right_x, right_y, depth + 1)\n\n        return {\n            'is_leaf': False,\n            'split_point': split_point,\n            'left': left_node,\n            'right': right_node\n        }\n\n    root = build_tree(X_train, y_train)\n\n    def traverse_tree(node, x):\n        if node['is_leaf']:\n            return node['value']\n        else:\n            if x < node['split_point']:\n                return traverse_tree(node['left'], x)\n            else:\n                return traverse_tree(node['right'], x)\n\n    predictions = [traverse_tree(root, x) for x in X_test]\n    return predictions\n\n# Example usage:\n# X_train = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# y_train = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# X_test = [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5]\n# print(regression_tree_predict(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Data Preparation**: The input data `X_train` and `y_train` are converted to NumPy arrays for efficient computation.\n2. **Splitting Function**: The `find_best_split` function calculates the SSE for each possible split point and selects the one that minimizes it.\n3. **Tree Construction**: The `build_tree` function recursively constructs the decision tree. It stops recursion when the maximum depth is reached or when a node contains fewer than two samples.\n4. **Prediction Function**: The `traverse_tree` function uses the constructed tree to make predictions on new data points.\n5. **Example Usage**: An example is provided to demonstrate how the function can be used."}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    \n    n = len(x)\n    diagonal_matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        diagonal_matrix[i][i] = x[i]\n    \n    return diagonal_matrix.tolist()\n```\n\nThis function first checks if the input is a list or tuple and converts it to a NumPy array if necessary. It then creates a zero-filled square matrix of size `n x n`, where `n` is the length of the input vector. Finally, it places each element of the vector on its corresponding position on the diagonal and returns the resulting matrix as a list of lists."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the two main stages as described: constructing the FP-tree and recursively mining for frequent item-sets. Here's how you can implement this in Python:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    def find_frequent_itemsets():\n        # Step 1: Construct the FP-tree\n        root = Node(None)\n        header_table = defaultdict(list)\n        \n        for transaction in transactions:\n            sorted_transaction = sorted(transaction, key=lambda x: -frequencies[x])\n            insert_into_fp_tree(root, sorted_transaction, header_table)\n        \n        # Step 2: Generate frequent item-sets\n        frequent_itemsets = []\n        for i in range(1, len(frequencies) + 1):\n            candidate_items = get_candidate_items(header_table, i)\n            for itemset in generate_frequent_itemsets(candidate_items, min_sup, root):\n                if len(itemset) > 1:\n                    frequent_itemsets.append(tuple(sorted(itemset)))\n        \n        return frequent_itemsets\n    \n    def insert_into_fp_tree(node, transaction, header_table):\n        current_node = node\n        for item in transaction:\n            if item not in current_node.children:\n                current_node.children[item] = Node(item)\n            current_node = current_node.children[item]\n            header_table[item].append(current_node)\n    \n    def get_candidate_items(header_table, k):\n        candidates = set()\n        for i, nodes in header_table.items():\n            if len(nodes) >= k:\n                candidates.add(i)\n        return candidates\n    \n    def generate_frequent_itemsets(candidate_items, min_sup, root):\n        for item in candidate_items:\n            new_root = Node(item)\n            for node in header_table[item]:\n                new_root.children[node.item] = node\n                new_root.size += node.size\n            if new_root.size >= min_sup:\n                yield frozenset([item]) | frozenset(generate_frequent_itemsets(new_root.children.values(), min_sup, new_root))\n    \n    # Count item frequencies\n    item_counts = Counter(itertools.chain.from_iterable(transactions))\n    total_transactions = len(transactions)\n    frequencies = {item: count / total_transactions for item, count in item_counts.items()}\n    \n    return sorted(find_frequent_itemsets())\n\nclass Node:\n    def __init__(self, item=None):\n        self.item = item\n        self.children = {}\n        self.size = 0\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\n### Explanation:\n1. **Node Class**: Represents a node in the FP-tree. Each node has a value (`item`), children, and a size representing the frequency of the path leading to it.\n\n2. **find_frequent_itemsets Function**: Main function to execute the FP-Growth algorithm.\n   - **Step 1**: Construct the FP-tree.\n     - Traverse each transaction and sort the items by their frequency in descending order.\n     - Insert the sorted transaction into the FP-tree.\n     - Update the header table to keep track of the last node for each item.\n\n   - **Step 2**: Generate frequent item-sets.\n     - Identify candidate items that meet the minimum support threshold.\n     - Recursively generate frequent item-sets starting from these candidate items.\n\n3. **insert_into_fp_tree Function**: Inserts a transaction into the FP-tree and updates the header table.\n\n4. **get_candidate_items Function**: Generates candidate items based on the header table.\n\n5. **generate_frequent_itemsets Function**: Recursively generates frequent item-sets by exploring paths in the FP-tree.\n\n6. **Counter and Sorting**: Used to count item frequencies and sort the results.\n\nThis implementation ensures that the frequent item-sets are found and returned in the specified format."}
{"task_id": 492, "completion_id": 0, "completion": "To solve this problem, we need to generate a polynomial feature matrix where each row corresponds to a sample from the input data, and each column corresponds to a polynomial term. The polynomial terms are constructed by taking non-negative integer powers of the original features, ensuring that the sum of these powers does not exceed the specified degree `d`. Here's how you can implement this:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    \n    # Convert the input list to a NumPy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Initialize the result matrix with ones (degree-0 term)\n    result = [[1] * len(X[0])]\n    \n    # Generate combinations with replacement for each possible degree up to 'degree'\n    for d in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(len(X[0])), d):\n            # Calculate the product of the features raised to the power of their combination indices\n            term = 1\n            for i, exp in enumerate(combo):\n                term *= X_np[:, i] ** exp\n            # Append the term to the result matrix\n            result.append(list(term))\n    \n    # Convert the result list back to a list of lists\n    return result.tolist()\n\n# Example usage:\nX = [\n    [1, 2],\n    [3, 4]\n]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\n### Explanation:\n\n1. **Input Validation**: First, check if the `degree` is negative. If so, return `-1`.\n\n2. **Convert Input**: Convert the input list `X` into a NumPy array for efficient computation.\n\n3. **Initialize Result Matrix**: Start with a result matrix containing only ones, representing the constant term (degree 0).\n\n4. **Generate Combinations**: Use `combinations_with_replacement` to generate all possible combinations of feature indices up to the specified degree `d`.\n\n5. **Compute Terms**: For each combination, compute the product of the corresponding features raised to the power of their indices.\n\n6. **Append Terms**: Append each computed term to the result matrix as a new row.\n\n7. **Return Result**: Finally, convert the result list to a list of lists and return it.\n\nThis approach ensures that the polynomial terms are generated in the correct order, starting with degree 0 and then moving to higher degrees while maintaining lexicographical order within each degree."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the mean of the sample\n    mean_y = np.mean(y)\n    \n    # Calculate the squared differences\n    squared_diffs = (y - mean_y) ** 2\n    \n    # Calculate the mean of the squared differences\n    mse_value = np.mean(squared_diffs)\n    \n    # Round to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4]))  # Should output 1.2500\n# print(mse([]))              # Should output -1\n```\n\nThis function first checks if the input `y` is empty and returns `-1` if it is. It then calculates the mean of the sample using `np.mean()`, computes the squared differences between each element and the mean, and finally calculates the mean of these squared differences to get the MSE. The result is rounded to four decimal places before being returned."}
{"task_id": 496, "completion_id": 0, "completion": "Here's the implementation of the `apply_affine` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert x to a NumPy array if it's not already one\n    x_array = np.array(x)\n    \n    # Calculate the activation output\n    y = slope * x_array + intercept\n    \n    # Calculate the first derivative\n    grad = [slope] * len(x_array)\n    \n    # Calculate the second derivative\n    grad2 = [0] * len(x_array)\n    \n    # Round all elements to 4 decimal places\n    y_rounded = np.round(y, decimals=4).tolist()\n    grad_rounded = np.round(grad, decimals=4).tolist()\n    grad2_rounded = np.round(grad2, decimals=4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\nx = [1, 2, 3]\nresult = apply_affine(x)\nprint(\"Activation:\", result[0])\nprint(\"First Derivative:\", result[1])\nprint(\"Second Derivative:\", result[2])\n```\n\n### Explanation:\n- The function first converts the input `x` into a NumPy array to facilitate vectorized operations.\n- It calculates the activation output using the formula \\( f(x) = \\text{slope} \\cdot x + \\text{intercept} \\).\n- The first derivative is constant for each element in the input, so we create a list of `[slope]` repeated for the number of elements in `x`.\n- The second derivative is zero for each element, so we create a list of `[0]` repeated for the number of elements in `x`.\n- Finally, all calculated values are rounded to four decimal places before being returned as a tuple of lists."}
{"task_id": 499, "completion_id": 0, "completion": "Here's a complete implementation of the PCA dimensionality reduction routine:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within the valid range\n    if not (1 <= k <= data.shape[1]):\n        return -1\n\n    # Step 1: Standardize the data\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n\n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n\n    # Step 3: Perform an eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of every eigenvector so that its entry with the largest absolute value is positive\n    for i in range(eigenvectors.shape[1]):\n        if np.abs(eigenvectors[i, 0]) < 1e-8:\n            # If the first element is very close to zero, choose any other element\n            eigenvectors[:, i] = eigenvectors[:, (i + 1) % eigenvectors.shape[1]]\n\n    # Step 6: Project the standardised data on the first k eigenvectors\n    projected_data = np.dot(standardized_data, eigenvectors[:, :k])\n\n    # Round the projected data to 4 decimal places and convert to a regular list\n    return round(projected_data, 4).tolist()\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4]])\nk = 1\nresult = pca_transform(data, k)\nprint(result)\n```\n\n### Explanation:\n1. **Standardization**: We subtract the mean and divide by the standard deviation of each feature to ensure that each feature has zero mean and unit variance.\n2. **Covariance Matrix**: We compute the covariance matrix of the standardized data using Bessel's correction.\n3. **Eigen-Decomposition**: We perform an eigen-decomposition of the covariance matrix to find the principal components.\n4. **Sorting Eigenvalues and Eigenvectors**: We sort the eigenvalues in descending order and rearrange the corresponding eigenvectors.\n5. **Fixing Sign Ambiguity**: We ensure that each eigenvector has a positive leading component by rotating it if necessary.\n6. **Projection**: We project the standardized data onto the first `k` principal components.\n7. **Output**: The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 500, "completion_id": 0, "completion": "To implement the Tiny Gradient Boosting Binary Classifier using decision stumps, we need to follow these steps:\n\n1. Initialize the base learner (`h_m`) as a simple decision stump that makes a one-dimensional split.\n2. For each iteration `m` from 1 to `n_estimators`:\n   - Compute the residuals `r_i = y_i - F(x_i)`, where `F(x_i)` is the current prediction made by the ensemble up to step `m-1`.\n   - Fit a new decision stump `h_m` to minimize the squared error on the residuals.\n   - Update the ensemble's prediction by adding `\u03b7 \u00b7 h_m(x_i)` to the previous prediction.\n3. Return the predicted class labels for the test set by thresholding the final score `F(x)` at 0.5.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Step 1: Initialize the ensemble with the average of the training labels\n    c = np.mean(y_train)\n    F = [c] * len(X_train)\n    \n    # Step 2: Perform n_estimators boosting iterations\n    for m in range(n_estimators):\n        # Step 2.1: Compute residuals\n        r = [y - F[i] for i, y in enumerate(y_train)]\n        \n        # Step 2.2: Fit a new decision stump to minimize squared error on residuals\n        best_split = None\n        min_error = float('inf')\n        num_features = len(X_train[0])\n        \n        for feature_index in range(num_features):\n            thresholds = sorted(set([x[feature_index] for x in X_train]))\n            \n            for i in range(len(thresholds) - 1):\n                left_threshold = thresholds[i]\n                right_threshold = thresholds[i + 1]\n                \n                # Calculate the left and right residuals\n                left_residuals = [r[j] if X_train[j][feature_index] <= left_threshold else 0 for j in range(len(X_train))]\n                right_residuals = [r[j] if X_train[j][feature_index] > right_threshold else 0 for j in range(len(X_train))]\n                \n                # Calculate the squared error\n                error_left = sum(left_residuals) ** 2\n                error_right = sum(right_residuals) ** 2\n                \n                # Total squared error\n                total_error = error_left + error_right\n                \n                if total_error < min_error:\n                    min_error = total_error\n                    best_split = (feature_index, left_threshold, right_threshold)\n        \n        # Step 2.3: Update the ensemble's prediction\n        feature_index, left_threshold, right_threshold = best_split\n        h_m = [1 if x[feature_index] <= left_threshold else 0 for x in X_train]\n        F = [f + learning_rate * h for f, h in zip(F, h_m)]\n    \n    # Step 3: Predict class labels for the test set\n    predictions = [(1 if f >= 0.5 else 0) for f in F]\n    return predictions\n\n# Example usage:\n# X_train = [[1, 2], [3, 4], [5, 6]]\n# y_train = [0, 1, 0]\n# X_test = [[2, 3], [4, 5]]\n# print(gradient_boosting_classifier(X_train, y_train, X_test))\n```\n\nThis implementation defines a function `gradient_boosting_classifier` that trains a Gradient Boosting model using decision stumps and returns the predicted class labels for the test set. The function iteratively fits decision stumps to the residuals and updates the ensemble's prediction based on the learned weights. The final scores are thresholded at 0.5 to produce binary class labels."}
{"task_id": 505, "completion_id": 0, "completion": "To implement the Contrastive Divergence (CD-k) update for a Binary Restricted Boltzmann Machine (RBM), we need to follow these steps:\n\n1. Compute the positive phase hidden probabilities.\n2. Run `k` full Gibbs sampling steps without stochastic sampling.\n3. Calculate the positive and negative gradients.\n4. Update the weight matrix using the computed gradients.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Step 1: Compute the positive phase hidden probabilities\n    p_h_given_v = sigmoid(X @ W + hbias)\n\n    # Initialize hidden states for the first Gibbs step\n    h = p_h_given_v\n\n    # Step 2: Run k full Gibbs sampling steps\n    for _ in range(k):\n        v = sigmoid(h @ W.T + vbias)\n        h = sigmoid(v @ W + hbias)\n\n    # Step 3: Calculate positive and negative gradients\n    pos_grad = X.T @ h\n    v_k_prob = sigmoid(h @ W.T + vbias)\n    h_k_prob = sigmoid(v_k_prob @ W + hbias)\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Step 4: Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, decimals=4).tolist()\n\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n```\n\n### Explanation:\n\n- **Sigmoid Function**: We define a helper function `sigmoid` to compute the sigmoid of a given input `x`.\n- **Positive Phase Hidden Probabilities**: In the positive phase, we calculate the probability of each hidden unit being active given the visible units using the sigmoid function.\n- **Gibbs Sampling**: We perform `k` full Gibbs sampling steps. For each step, we update the visible units based on the current hidden state and then update the hidden units based on the new visible state.\n- **Gradients Calculation**: We compute the positive gradient using the observed data (`X`) and the probabilities from the positive phase. The negative gradient is computed using the probabilities after `k` Gibbs steps.\n- **Weight Update**: We update the weight matrix using the calculated gradients and the learning rate.\n- **Output**: The updated weight matrix is returned as a list of lists, rounded to four decimal places. If the input batch is empty, an empty list is returned."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Check if both inputs are either lists or NumPy arrays\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        raise ValueError(\"Both inputs must be either lists or NumPy arrays.\")\n    \n    # Convert inputs to NumPy arrays for easier manipulation\n    x_array = np.array(x)\n    y_array = np.array(y)\n    \n    # Check if the lengths of the vectors are equal\n    if len(x_array) != len(y_array):\n        return -1\n    \n    # Calculate the component-wise absolute differences\n    differences = np.abs(x_array - y_array)\n    \n    # Compute the maximum of these differences\n    max_difference = np.max(differences)\n    \n    # Round the result to four decimal places\n    return round(max_difference, 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis function first checks if the inputs are valid lists or NumPy arrays. It then converts them to NumPy arrays for efficient computation. It verifies that the vectors have the same length and calculates the Chebyshev distance by finding the maximum of the absolute differences between corresponding elements of the vectors. Finally, it rounds the result to four decimal places before returning it."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the VAE loss for Bernoulli visible units, we need to calculate both the reconstruction loss and the KL divergence, and then combine them using their respective weights. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Define the epsilon value for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Clip the predictions to ensure they are within the open interval (epsilon, 1-epsilon)\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate the reconstruction loss using binary cross-entropy\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Calculate the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean**2 - np.exp(t_log_var))\n    \n    # Combine the losses with appropriate weights\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(total_loss / y.shape[0], 6)\n\n# Example usage:\n# y = np.array([[0, 1], [1, 0]])\n# y_pred = np.array([[0.9, 0.1], [0.8, 0.2]])\n# t_mean = np.array([[0.5, 0.5], [0.5, 0.5]])\n# t_log_var = np.array([[-1, -1], [-1, -1]])\n\n# print(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\n### Explanation:\n1. **Numerical Stability**: We clip the predicted values `y_pred` to ensure they are within the open interval `(\u03b5, 1-\u03b5)` to avoid taking the logarithm of zero or one, which would lead to NaNs.\n\n2. **Reconstruction Loss**: This is calculated using the binary cross-entropy formula:\n   \\[\n   L_{\\text{recon}} = -\\sum y_i \\log(y_{i,\\text{pred}}) - (1-y_i) \\log(1-y_{i,\\text{pred}})\n   \\]\n\n3. **KL Divergence**: For a standard normal distribution \\( p(t) = \\mathcal{N}(0, I) \\), the KL divergence between the approximate posterior \\( q(t|x) = \\mathcal{N}(\\mu, \\operatorname{diag}(\\sigma^2)) \\) and the prior is:\n   \\[\n   L_{\\text{KL}} = -0.5 \\sum \\left(1 + \\log(\\sigma^2) - \\mu^2 - \\sigma^2\\right)\n   \\]\n\n4. **Total Loss**: The total loss is the sum of the reconstruction loss and the KL divergence, weighted appropriately.\n\n5. **Average Calculation**: The average loss is computed by dividing the total loss by the batch size and rounding to 6 decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "Here's how you can implement the `fm_predict` function using NumPy:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays for efficient computation\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    \n    # Calculate the dot product of X and w\n    linear_part = np.dot(X_np, w_np)\n    \n    # Initialize the sum of squared interactions\n    squared_interactions_sum = 0\n    \n    # Compute the sum of squared interactions\n    for f in range(V_np.shape[1]):\n        interaction_term = np.sum(V_np[:, f] * X_np, axis=1)\n        squared_interaction_term = interaction_term ** 2 - (V_np[:, f] ** 2).dot(X_np ** 2)\n        squared_interactions_sum += squared_interaction_term\n    \n    # Combine all parts to get the final prediction\n    predictions = w0 + linear_part + 0.5 * squared_interactions_sum\n    \n    # Round predictions to 4 decimal places\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nw0 = 0.5\nw = [1, 2]\nV = [[0.1, 0.2], [0.3, 0.4]]\n\npredictions = fm_predict(X, w0, w, V)\nprint(predictions)\n```\n\n### Explanation:\n- **Input Conversion**: The input matrices `X`, `w`, and `V` are converted to NumPy arrays for efficient computation.\n- **Linear Part**: The linear part of the prediction is calculated as the dot product of the feature matrix `X` and the weight vector `w`.\n- **Squared Interactions**: The sum of squared interactions is computed for each latent factor `f`. This involves calculating the interaction terms between each feature and the latent factor, squaring them, and subtracting the squared norms of the latent factors from these products.\n- **Final Prediction**: The global bias `w0` is added to the linear part and the sum of squared interactions to obtain the final prediction for each sample.\n- **Rounding**: The predictions are rounded to four decimal places before being returned."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the sigmoid activation function in Python, we need to ensure numerical stability, especially for large values of \\( z \\). One way to achieve this is by using the `logaddexp2` function from NumPy, which is designed to handle such cases efficiently.\n\nHere's how you can implement the `sigmoid` function:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    z = np.array(z)\n    \n    # Use logaddexp2 for numerical stability\n    exp_z = np.exp(-z)\n    log_add_exp = np.logaddexp(0, -exp_z)\n    \n    # Compute the sigmoid\n    s = 1 / (1 + np.exp(log_add_exp))\n    \n    # Round the result to four decimal places\n    s_rounded = np.round(s, decimals=4)\n    \n    # Return the result based on whether z was a scalar or an array\n    if z.ndim == 0:\n        return float(s_rounded.item())\n    else:\n        return s_rounded.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Should return [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n\n1. **Input Handling**: The function first converts the input `z` into a NumPy array. This allows us to use vectorized operations, which are efficient and handle large arrays well.\n\n2. **Numerical Stability**: We use `np.logaddexp(0, -exp_z)` instead of directly computing `np.log(1 + exp(-z))`. This approach helps prevent overflow when `z` is very large because it avoids calculating `e^z` directly, which could lead to overflow errors.\n\n3. **Sigmoid Calculation**: After obtaining the log of the sum of exponentials, we compute the sigmoid using the formula \\( g(z) = \\frac{1}{1 + e^{-z}} \\).\n\n4. **Rounding**: The result is rounded to four decimal places using `np.round`.\n\n5. **Output**: The function returns a float if the input was a scalar and a list if the input was an array. This ensures that the output matches the expected structure.\n\nThis implementation should handle various input types and provide accurate results while maintaining numerical stability."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        return function(actual, predicted)\n    \n    return wrapper\n```\n\nThis implementation defines the `unhot` decorator, which checks if the input arrays are one-hot encoded and converts them to their corresponding class labels before calling the wrapped metric function. The decorator handles both 2D and 1D arrays appropriately, ensuring that only one-hot encoded arrays undergo conversion."}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    z = np.array(z)\n    \n    # Compute the derivative using element-wise multiplication\n    grad = z * (1 - z)\n    \n    # Round the result to 4 decimal places\n    grad_rounded = np.round(grad, 4)\n    \n    # Return the result as a Python object of the same rank as the input\n    return grad_rounded.tolist()\n\n# Example usage:\nprint(sigmoid_grad([0.5]))  # Output: [0.25]\nprint(sigmoid_grad([[0.3, 0.7], [0.1, 0.9]]))  # Output: [[0.2449, 0.4898], [0.1875, 0.75]]\nprint(sigmoid_grad([]))  # Output: []\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Extract the minimum and maximum values of each feature from X\n    min_x1, max_x1 = np.min(X[:, 0]), np.max(X[:, 0])\n    min_x2, max_x2 = np.min(X[:, 1]), np.max(X[:, 1])\n\n    # Create a grid of points spanning the bounding box of X\n    x1_plot = np.linspace(min_x1, max_x1, grid_n)\n    x2_plot = np.linspace(min_x2, max_x2, grid_n)\n\n    # Create a mesh-grid from the 1D arrays\n    X_grid, Y_grid = np.meshgrid(x1_plot, x2_plot)\n\n    # Flatten the mesh-grid to a 2D array for processing\n    X_flat = X_grid.flatten()\n    Y_flat = Y_grid.flatten()\n\n    # Compute the linear combination of weights and add the bias\n    Z_flat = W[0] * X_flat + W[1] * Y_flat + b\n\n    # Apply the sign function to get the classification labels\n    Z = np.sign(Z_flat).reshape(grid_n, grid_n)\n\n    # Convert the result to a list of lists\n    return Z.tolist()\n\n# Example usage:\n# X = [[-1, -1], [-1, 1], [1, -1], [1, 1]]\n# W = [1, 1]\n# b = 0\n# print(decision_boundary_grid(X, W, b))\n```\n\nThis function generates a grid of points within the bounding box of the input data `X` and classifies each point using the given linear classifier parameters `W` and `b`. The resulting grid of classifications is returned as a list of lists containing only the integers 1 and -1."}
{"task_id": 537, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we need to follow the steps outlined in the task description. Below is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    def calculate_mean_std(X, y):\n        means = {}\n        stds = {}\n        for i in range(2):  # Class 0 and Class 1\n            mask = y == i\n            if not mask.any():\n                continue\n            means[i] = X[mask].mean(axis=0)\n            stds[i] = X[mask].std(axis=0)\n        return means, stds\n\n    def log_likelihood(x, mu, sigma, epsilon=1e-9):\n        return -np.log(np.sqrt(2 * np.pi * sigma + epsilon)) - ((x - mu) ** 2) / (2 * sigma + epsilon)\n\n    # Calculate mean and standard deviation for each feature for both classes\n    means, stds = calculate_mean_std(X_train, y_train)\n\n    # Calculate class priors\n    class_priors = np.bincount(y_train) / len(y_train)\n\n    # Initialize predictions\n    predictions = []\n\n    # Predict for each test sample\n    for x in X_test:\n        posteriors = []\n        for i in range(2):\n            mu_i = means[i]\n            sigma_i = stds[i]\n            likelihood = np.prod([log_likelihood(xi, mu_i[j], sigma_i[j]) for j, xi in enumerate(x)])\n            prior = class_priors[i]\n            posterior = likelihood * prior\n            posteriors.append(posterior)\n        \n        # Predict the class with the higher posterior probability\n        prediction = np.argmax(posteriors)\n        predictions.append(prediction)\n\n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# print(gaussian_naive_bayes(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Mean and Standard Deviation Calculation**: We first calculate the mean and standard deviation of each feature for both classes. This involves iterating over each class and computing the mean and standard deviation of the features that belong to that class.\n\n2. **Log Likelihood Function**: We define a helper function to compute the log likelihood of a feature value given its mean and standard deviation, incorporating a small epsilon to prevent division by zero.\n\n3. **Class Priors**: We calculate the class priors as the relative frequency of each class in the training set.\n\n4. **Prediction**: For each test sample, we compute the posterior probability for each class using the product of the likelihood of the features and the class prior. We then predict the class with the highest posterior probability.\n\nThis implementation assumes a binary classification problem, but it can be easily extended to multi-class classification by modifying the class handling logic."}
{"task_id": 539, "completion_id": 0, "completion": "Certainly! Below is the implementation of the binary cross-entropy cost function using NumPy:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): The predicted probabilities from the output layer of shape (1, m) or (m,)\n    Y (np.ndarray): The true labels as binary vectors of shape (1, m) or (m,)\n\n    Returns:\n    float: The computed cost as a plain Python float rounded to 4 decimal places.\n    \"\"\"\n    # Clip probabilities to avoid numerical overflow\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Compute the loss for each example\n    loss = -(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Calculate the average loss over all samples\n    cost = np.mean(loss)\n    \n    # Round the result to 4 decimal places\n    return round(cost, 4)\n\n# Example usage:\nAL = np.array([[0.99, 0.01], [0.85, 0.15]])\nY = np.array([[1, 0], [1, 0]])\n\nprint(compute_cost(AL, Y))  # Output will depend on the values of AL and Y\n```\n\n### Explanation:\n1. **Clipping Probabilities**: The function clips the probabilities `AL` to ensure they do not exceed the range `[1e-15, 1 - 1e-15]`. This prevents numerical overflow when computing the logarithms.\n\n2. **Loss Calculation**: For each element in the prediction array `AL`, the loss is calculated using the formula:\n   \\[\n   \\text{loss} = -[y \\cdot \\log(a) + (1-y) \\cdot \\log(1-a)]\n   \\]\n   where \\( y \\) is the true label and \\( a \\) is the predicted probability.\n\n3. **Average Loss**: The average loss is computed by dividing the sum of losses by the number of samples `m`.\n\n4. **Rounding**: The final cost is rounded to four decimal places before being returned."}
{"task_id": 552, "completion_id": 0, "completion": "To solve this problem, we need to implement the forward-backward algorithm for Hidden Markov Models (HMMs). This involves computing the forward probabilities \\(\\alpha_t(i)\\) and backward probabilities \\(\\beta_t(i)\\), and then using these to calculate the posterior probabilities \\(\\gamma_t(i)\\).\n\nHere's how you can implement the `gamma_probabilities` function:\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n\n    pi = hmm['pi']  # Initial distribution\n    A = hmm['A']   # Transition matrix\n    B = hmm['B']   # Emission matrix\n\n    T = len(observations)\n\n    # Step 1: Compute alpha_t(i) - Forward probabilities\n    alpha = np.zeros((T, len(pi)))\n    alpha[0] = pi * B[:, observations[0]]\n\n    for i in range(1, T):\n        alpha[i] = B[:, observations[i]] @ (alpha[i-1].dot(A))\n\n    # Step 2: Compute beta_t(i) - Backward probabilities\n    beta = np.ones((T, len(pi)))\n    beta[-1] = np.ones(len(pi))  # Beta_t(T) is all ones\n\n    for i in range(T-2, -1, -1):\n        beta[i] = (A.dot(B[:, observations[i+1]]) * beta[i+1]).sum(axis=1)\n\n    # Step 3: Compute gamma_t(i) - Posterior probabilities\n    gamma = alpha[t] * beta[t]\n    gamma /= gamma.sum()\n\n    # Round the result to four decimal places\n    return [round(x, 4) for x in gamma]\n\n# Example usage:\nhmm_params = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3],\n                   [0.2, 0.8]]),\n    'B': np.array([[0.9, 0.1],\n                   [0.2, 0.8]])\n}\nobservation_sequence = [0, 1]\nt = 1\n\nprint(gamma_probabilities(hmm_params, observation_sequence, t))\n```\n\n### Explanation:\n1. **Initialization**:\n   - We initialize the initial distribution \\(\\pi\\) and the matrices \\(A\\) and \\(B\\).\n   - We also initialize the first element of the forward probabilities array \\(\\alpha_0\\) based on the initial distribution and the emission probabilities for the first observation.\n\n2. **Forward Algorithm**:\n   - We iterate over each time step \\(i\\) from 1 to \\(T-1\\) to compute the forward probabilities \\(\\alpha_i\\).\n   - For each state \\(i\\), we update the forward probability by multiplying the previous forward probabilities with the transition matrix and the emission probabilities for the current observation.\n\n3. **Backward Algorithm**:\n   - We initialize the last element of the backward probabilities array \\(\\beta_T\\) to be all ones.\n   - We iterate backwards from \\(T-2\\) to 0 to compute the backward probabilities \\(\\beta_i\\).\n   - For each state \\(i\\), we update the backward probability by summing over the next states weighted by their transition probabilities and the emission probabilities for the next observation.\n\n4. **Posterior Probabilities**:\n   - Finally, we compute the posterior probabilities \\(\\gamma_t(i)\\) by multiplying the forward and backward probabilities at time \\(t\\) and dividing by their sum.\n\n5. **Rounding**:\n   - We round each component of the \\(\\gamma_t\\) vector to four decimal places before returning it.\n\nThis function will correctly compute the posterior probabilities for any valid time step \\(t\\) within the bounds of the observation sequence. If \\(t\\) is out of bounds, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the description. Below is the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef euclidean_distance(p1, p2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(p1 - p2)\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    # Step 1: Compute every pairwise Euclidean distance\n    distances = np.zeros((data.shape[0], data.shape[0]))\n    for i in range(data.shape[0]):\n        for j in range(i + 1, data.shape[0]):\n            distances[i, j] = euclidean_distance(data[i], data[j])\n            distances[j, i] = distances[i, j]\n\n    # Step 2: Build the neighborhood list for each sample using the supplied \u03b5\n    neighborhoods = []\n    for i in range(data.shape[0]):\n        neighborhood = [j for j in range(data.shape[0]) if distances[i, j] <= eps]\n        neighborhoods.append(neighborhood)\n\n    # Step 3: Identify core points (|neighborhood| \u2265 min_samples)\n    core_points = [i for i in range(data.shape[0]) if len(neighborhoods[i]) >= min_samples]\n\n    # Step 4: Initialize variables for BFS and labeling\n    visited = set()\n    cluster_id = 1\n    cluster_labels = [-1] * data.shape[0]\n\n    # Step 5: Expand clusters starting from core points\n    for core_point in core_points:\n        if core_point not in visited:\n            queue = deque([core_point])\n            visited.add(core_point)\n            cluster_labels[core_point] = cluster_id\n\n            while queue:\n                current_point = queue.popleft()\n\n                for neighbor in neighborhoods[current_point]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        cluster_labels[neighbor] = cluster_id\n\n                        # If the neighbor is a core point, add it to the queue\n                        if len(neighborhoods[neighbor]) >= min_samples:\n                            queue.append(neighbor)\n\n            cluster_id += 1\n\n    return cluster_labels\n\n# Example usage:\n# data = np.array([[1, 1], [2, 2], [3, 3], [6, 6], [7, 7], [8, 8]])\n# eps = 2\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n- **Distance Calculation**: We use the `euclidean_distance` function to compute the pairwise Euclidean distances between all points.\n- **Neighborhood Construction**: For each point, we create a list of indices of its neighbors within the specified radius `eps`.\n- **Core Point Identification**: A point is identified as a core point if it has at least `min_samples` neighbors.\n- **Breadth-First Search (BFS)**: Starting from each core point, we perform a BFS to expand the cluster. Each visited point is labeled with the current cluster ID.\n- **Noise Points**: Any point that remains unvisited after processing all core points is labeled as noise (`-1`).\n\nThis implementation efficiently groups points based on their spatial density and handles both core and non-core points according to the DBSCAN algorithm's rules."}
{"task_id": 561, "completion_id": 0, "completion": "Here's a complete implementation of the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM):\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array containing N samples with D features.\n    - k: An integer representing the number of Gaussian components.\n    - max_iter: The maximum number of iterations to perform.\n    - epsilon: The tolerance for stopping the EM algorithm when the change in mixture weights is small.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n\n    # Step 1: Initialize the parameters\n    n_samples, n_features = data.shape\n    if k == 1:\n        return [0] * n_samples  # If k=1, all samples belong to the single component\n\n    # Initial random initialization\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, size=k)]\n    covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n\n    # Initialize responsibilities\n    responsibilities = np.zeros((n_samples, k))\n\n    # Iterate until convergence\n    for i in range(max_iter):\n        # E-step: Compute responsibilities\n        for j in range(k):\n            responsibilities[:, j] = weights[j] * np.exp(-0.5 * np.sum((data - means[j]) ** 2 / covariances[j], axis=1))\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n\n        # Check for convergence\n        if np.max(np.abs(weights - np.mean(weights))) < epsilon:\n            break\n\n        # M-step: Update parameters\n        weights = responsibilities.sum(axis=0) / n_samples\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True)\n        new_covariances = []\n        for j in range(k):\n            diff = data - means[j]\n            new_covariances.append(np.dot(diff.T @ responsibilities[:, j].reshape(-1, 1), diff) / responsibilities[:, j].sum())\n\n        # Update parameters\n        weights = np.clip(weights, 1e-6, 1 - 1e-6)  # Ensure positive weights\n        means = new_means\n        covariances = new_covariances\n\n    # Assign clusters based on the highest responsibility\n    cluster_labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by the first coordinate of their mean in ascending order\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_cluster_labels = [cluster_labels[i] for i in sorted_indices]\n\n    return sorted_cluster_labels\n\n# Example usage:\n# data = np.random.rand(100, 2)  # Example 2D data\n# k = 3\n# labels = gmm_em(data, k)\n# print(labels)\n```\n\n### Explanation:\n\n1. **Initialization**: \n   - We initialize the mixture weights randomly.\n   - We randomly select `k` samples from the dataset to serve as initial means.\n   - We compute the initial covariance matrices using the sample covariance matrix.\n\n2. **Expectation (E) Step**:\n   - For each sample, we calculate the responsibility of each Gaussian component using Bayes' theorem.\n   - The responsibility is proportional to the product of the weight of the component and the likelihood of the sample given the component.\n\n3. **Maximization (M) Step**:\n   - We update the mixture weights by averaging the responsibilities across samples.\n   - We update the means by taking the weighted average of the samples.\n   - We update the covariance matrices by computing the weighted sum of squared differences from the updated means.\n\n4. **Convergence Check**:\n   - We check if the change in mixture weights is less than the specified tolerance (`epsilon`). If it is, we stop the iteration.\n\n5. **Cluster Assignment**:\n   - We assign each sample to the component with the highest responsibility.\n\n6. **Sorting Components**:\n   - We sort the components by the first coordinate of their mean in ascending order and re-label the cluster indices accordingly.\n\nThis implementation ensures that the output is deterministic for identical inputs by maintaining a consistent order of components."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build a fully-connected similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    dist_matrix = np.sum((data[:, np.newaxis] - data[np.newaxis, :])**2, axis=-1)\n    similarity_matrix = np.exp(-gamma * dist_matrix)\n    \n    # Step 2: Construct the un-normalized Laplacian L = D - W\n    degree_vector = np.sum(similarity_matrix, axis=1)\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1 / np.sqrt(degree_vector))\n        L = D_sqrt_inv @ similarity_matrix @ D_sqrt_inv\n    else:\n        L = similarity_matrix - np.diag(degree_vector)\n    \n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)[:n_cluster]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    \n    # Step 4: Run k-means in the eigenvector space\n    def kmeans_eigenvectors(X, k):\n        from scipy.cluster.vq import vq\n        \n        # Initialize centroids randomly from the first k samples\n        centroids = X[:k]\n        \n        while True:\n            labels, _ = vq(X, centroids)\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            \n            if np.allclose(new_centroids, centroids):\n                break\n            \n            centroids = new_centroids\n    \n    labels = kmeans_eigenvectors(eigenvectors_sorted, n_cluster)\n    \n    # Step 5: Relabel clusters based on the order of their original indices\n    original_indices = np.arange(len(data))\n    sorted_labels = sorted(zip(original_indices, labels), key=lambda x: x[0])\n    final_labels = [label for _, label in sorted_labels]\n    \n    return final_labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "Here's the implementation of the Dual-form Perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    \n    # Step 2: Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    # Step 3: Main training loop\n    converged = False\n    num_iterations = 0\n    \n    while not converged and num_iterations < max_iter:\n        updated = False\n        \n        for i in range(N):\n            # Compute g\n            g = np.sum(alpha * y_data * G[:, i])\n            \n            # Check if update is needed\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        \n        # Check convergence\n        if not updated:\n            converged = True\n        \n        num_iterations += 1\n    \n    # Step 4: Recover the weight vector w\n    w = np.dot(alpha, y_data * X_data)\n    \n    # Step 5: Return the result\n    return [round(w_i, 4) for w_i in w.tolist()], round(b, 4)\n\n# Example usage:\n# X_data = np.array([[1, 2], [-1, -2], [2, -1], [-2, 1]])\n# y_data = np.array([1, -1, 1, -1])\n# w, b = perceptron_dual_train(X_data, y_data)\n# print(\"Weight vector:\", w)\n# print(\"Bias term:\", b)\n```\n\n### Explanation:\n- **Initialization**: We initialize the coefficients `alpha` to zero and the bias `b` to zero.\n- **Gram Matrix**: We compute the Gram matrix `G` which contains the dot products between all pairs of input vectors.\n- **Training Loop**: We iterate over each sample, compute the value of `g`, and check if an update is necessary based on the sign condition. If an update is needed, we adjust `alpha` and `b`.\n- **Convergence Check**: We continue iterating until no more updates are made or the maximum number of iterations is reached.\n- **Recovery of Weight Vector**: Finally, we recover the weight vector `w` using the formula \\( w = \\sum_{i=1}^n \\alpha_i y_i x_i \\).\n- **Output**: The weights and bias are returned as lists with each element rounded to four decimal places."}
{"task_id": 564, "completion_id": 0, "completion": "To implement the `predict_sample` function according to the specified rules, we need to traverse the decision tree based on whether it's a classification or regression tree. Here's how you can achieve this:\n\n```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str) -> int | float:\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    # Start at the root node\n    current_node = root\n    \n    while True:\n        if task_type == 'classification':\n            # Check if the current node is a leaf\n            if 'y' in current_node.__dict__:\n                return current_node.y\n            \n            # Inspect the feature with index node.label\n            feature_index = current_node.label\n            feature_value = features[feature_index]\n            \n            # Choose the first child with matching x value\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                # Default to the second child\n                current_node = current_node.child[1]\n        \n        elif task_type == 'regression':\n            # Check if the current node is a leaf\n            if 'y' in current_node.__dict__:\n                return current_node.y\n            \n            # Inspect the feature with index node.label\n            feature_index = current_node.label\n            feature_value = features[feature_index]\n            \n            # Compare the feature value with node.s\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    # This line should never be reached due to the loop condition\n    raise ValueError(\"Unexpected state reached during prediction.\")\n\n# Example usage:\n# Define the Node class (assuming it's defined elsewhere)\n# root = Node(label=0, x=5, child=[Node(y=1), Node(y=2)])\n# features = [5]\n# print(predict_sample(root, features, 'classification'))  # Output: 1\n```\n\n### Explanation:\n1. **Initialization**: We start at the root node.\n2. **Traversal Loop**:\n   - For classification trees, we check if the current node is a leaf. If so, we return the stored value `y`. Otherwise, we inspect the feature at the index specified by `node.label` and select the first child with a matching `x` value. If no match is found, we default to the second child.\n   - For regression trees, we similarly check if the current node is a leaf. If so, we return the stored value `y`. Otherwise, we inspect the feature at the index specified by `node.label`. Based on whether the feature value is less than or equal to `node.s`, we select the appropriate child.\n3. **Termination**: The loop continues until a leaf node is reached. If the loop terminates without finding a leaf, it raises a `ValueError`, which should not happen under normal conditions given the problem constraints."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the `choose_best_feature` function using the ID3 decision tree algorithm, we need to calculate the information gain for each feature and select the one with the highest gain. Here's how you can do it:\n\n1. Calculate the total number of samples (`n_samples`).\n2. For each feature, count the frequency of each unique value in the feature column.\n3. Calculate the entropy of the entire dataset (`H(y)`).\n4. For each unique value of the feature, split the dataset into subsets based on this value and calculate the entropy of these subsets (`H(y|A)`).\n5. Compute the information gain for the current feature as `IG(A) = H(y) - H(y|A)`.\n6. Track the feature with the maximum information gain and its corresponding gain.\n\nHere's the implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    def entropy(probabilities):\n        if not probabilities.any():\n            return 0.0\n        return -sum(p * math.log2(p) for p in probabilities)\n    \n    def information_gain(parent_entropy, child_entropies, weights):\n        weighted_sum = sum(w * e for w, e in zip(weights, child_entropies))\n        return parent_entropy - weighted_sum\n    \n    max_info_gain = -math.inf\n    best_feature_index = None\n    \n    for feature_idx in range(n_features):\n        # Count the frequency of each unique value in the feature column\n        unique_values, counts = np.unique(X[:, feature_idx], return_counts=True)\n        \n        # Calculate the probability of each unique value\n        probabilities = counts / n_samples\n        \n        # Calculate the entropy of the entire dataset\n        parent_entropy = entropy(probabilities)\n        \n        # Split the dataset into subsets based on the current feature\n        child_entropies = []\n        weights = []\n        \n        for value in unique_values:\n            subset_mask = X[:, feature_idx] == value\n            subset_y = y[subset_mask]\n            \n            # Calculate the entropy of the subset\n            subset_entropy = entropy(subset_y / subset_y.size)\n            \n            # Calculate the weight of the subset\n            weight = subset_y.size / n_samples\n            \n            child_entropies.append(subset_entropy)\n            weights.append(weight)\n        \n        # Calculate the information gain\n        info_gain = information_gain(parent_entropy, child_entropies, weights)\n        \n        # Update the best feature if this one has a higher gain\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = feature_idx\n    \n    return best_feature_index, round(max_info_gain, 6)\n\n# Example usage:\nX = np.array([\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1]\n])\ny = np.array([0, 0, 1, 1])\n\nbest_feature, max_gain = choose_best_feature(X, y)\nprint(f\"Best feature index: {best_feature}, Max information gain: {max_gain}\")\n```\n\nThis code defines the `choose_best_feature` function, which calculates the information gain for each feature and returns the feature with the highest gain along with its rounded information gain. The example usage demonstrates how to use this function with a sample dataset."}
{"task_id": 566, "completion_id": 0, "completion": "To implement the Tiny Isolation Forest algorithm as described, we need to follow these steps:\n\n1. Set the global seed for reproducibility.\n2. Define helper functions to calculate the path length and correction factor `c(n)`.\n3. Implement the main function `detect_outliers` to grow multiple isolation trees and compute the average path length for each observation.\n4. Determine the top `\u03b5`% of outlier scores and return their indices.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    # Set the global seed for reproducibility\n    np.random.seed(42)\n    \n    def path_length(node):\n        if len(node['samples']) == 1:\n            return 0\n        else:\n            feature = np.random.randint(len(data[0]))\n            threshold = np.random.uniform(min(data[node['samples'], feature]), max(data[node['samples'], feature]))\n            left_mask = data[:, feature] <= threshold\n            right_mask = data[:, feature] > threshold\n            left_samples = node['samples'][left_mask]\n            right_samples = node['samples'][right_mask]\n            return 1 + min(path_length({'samples': left_samples}), path_length({'samples': right_samples}))\n    \n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def generate_tree():\n        root = {'samples': np.arange(len(data))}\n        height_limit = math.ceil(math.log2(sample_size))\n        while True:\n            if height_limit == 0 or len(root['samples']) <= 1:\n                break\n            feature = np.random.randint(len(data[0]))\n            threshold = np.random.uniform(min(data[root['samples'], feature]), max(data[root['samples'], feature]))\n            left_mask = data[:, feature] <= threshold\n            right_mask = data[:, feature] > threshold\n            left_samples = root['samples'][left_mask]\n            right_samples = root['samples'][right_mask]\n            root['children'] = [{'samples': left_samples}, {'samples': right_samples}]\n            height_limit -= 1\n        return root\n    \n    scores = []\n    for _ in range(n_trees):\n        tree = generate_tree()\n        scores.append(path_length(tree))\n    \n    avg_scores = np.mean(scores)\n    phi = 2 * math.log(len(data)) - 2 * (len(data) - 1) / len(data)\n    anomaly_scores = 2 ** (-avg_scores / phi)\n    \n    num_outliers = int(epsilon * len(anomaly_scores))\n    top_outliers_indices = np.argsort(anomaly_scores)[-num_outliers:]\n    return top_outliers_indices.tolist()\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\nn_trees = 100\nsample_size = 5\nepsilon = 0.1\noutliers = detect_outliers(data, n_trees, sample_size, epsilon)\nprint(outliers)\n```\n\n### Explanation:\n- **Path Length Calculation**: The `path_length` function recursively calculates the path length from a given node to a leaf.\n- **Tree Generation**: The `generate_tree` function builds a purely random binary tree using the specified rules.\n- **Score Computation**: For each tree, the path lengths are averaged, and the anomaly scores are computed using the formula \\(s(x) = 2^{-(\\bar{h}(x)/\\phi)}\\).\n- **Outlier Detection**: The top `\u03b5`% of anomaly scores are identified, and their indices are returned.\n\nThis implementation ensures that the algorithm is both simple and efficient, adhering to the constraints provided."}
{"task_id": 568, "completion_id": 0, "completion": "To implement the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow these steps:\n\n1. **Build Empirical Distributions**: Calculate the empirical frequency of each feature-value-label combination in the training data.\n2. **Initialize Weights**: Initialize the weights randomly.\n3. **Iteratively Update Weights**: Use the GIS algorithm to update the weights iteratively until convergence.\n4. **Predict Labels**: For each test sample, compute the conditional probabilities and predict the label based on the highest probability.\n\nHere's the complete implementation of the `maxent_predict` function:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Fill in here.\"\"\"\n    \n    # Step 1: Build Empirical Distributions\n    num_features = X_train.shape[1]\n    num_labels = len(np.unique(y_train))\n    \n    # Dictionary to store empirical frequencies\n    empirical_frequencies = defaultdict(lambda: defaultdict(int))\n    \n    # Count occurrences of each feature-value-label combination\n    for i in range(len(X_train)):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(num_features):\n            feature_value = x[j]\n            empirical_frequencies[j][feature_value][y] += 1\n    \n    # Step 2: Initialize Weights\n    num_combinations = sum(empirical_frequencies.values())\n    weights = np.random.rand(num_features, num_labels)\n    \n    # Step 3: Iteratively Update Weights\n    for _ in range(n_iter):\n        converged = True\n        \n        for i in range(len(X_train)):\n            x = X_train[i]\n            y = y_train[i]\n            \n            # Compute the current prediction\n            log_probabilities = []\n            for j in range(num_features):\n                feature_value = x[j]\n                for k in range(num_labels):\n                    prob = empirical_frequencies[j][feature_value][k] / num_combinations\n                    log_probabilities.append(math.log(prob) + weights[j][k])\n            \n            # Find the maximum likelihood estimate\n            max_log_prob = max(log_probabilities)\n            predicted_label = np.argmax(log_probabilities)\n            \n            # Check if the prediction is correct\n            if predicted_label != y:\n                # Update the weights using GIS\n                for j in range(num_features):\n                    feature_value = x[j]\n                    for k in range(num_labels):\n                        empirical_frequencies[j][feature_value][k] -= 1\n                        new_prob = empirical_frequencies[j][feature_value][k] / num_combinations\n                        log_probabilities[j] = math.log(new_prob) + weights[j][k]\n                        new_max_log_prob = max(log_probabilities)\n                        if abs(new_max_log_prob - max_log_prob) > epsilon:\n                            converged = False\n                            break\n                    if not converged:\n                        break\n                if not converged:\n                    break\n        \n        if converged:\n            break\n    \n    # Step 4: Predict Labels for Test Data\n    predictions = []\n    for x in X_test:\n        log_probabilities = []\n        for j in range(num_features):\n            feature_value = x[j]\n            for k in range(num_labels):\n                prob = empirical_frequencies[j][feature_value][k] / num_combinations\n                log_probabilities.append(math.log(prob) + weights[j][k])\n        \n        predicted_label = np.argmax(log_probabilities)\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\n# X_train, y_train, X_test = load_data()  # Replace with actual data loading\n# predictions = maxent_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\n### Explanation:\n\n1. **Empirical Frequencies**: We count how many times each feature-value-label combination appears in the training data.\n2. **Weight Initialization**: Randomly initialize the weights.\n3. **Iteration**: For each training example, calculate the log probabilities of all possible labels given the features. Update the weights based on the difference between the old and new maximum log probabilities if they exceed the threshold `epsilon`.\n4. **Prediction**: For each test example, compute the log probabilities similarly and choose the label with the highest probability.\n\nThis implementation assumes that the input data is in a format where each sample is represented as a NumPy array of feature values, and the labels are integers. Adjust the data loading part as needed for your specific dataset."}
{"task_id": 569, "completion_id": 0, "completion": "To complete the task of calculating the document-frequency keyword statistics, we need to follow these steps:\n\n1. Count the occurrences of each word across all documents.\n2. Calculate the document-frequency ratio for each word.\n3. Sort the words based on their document-frequency ratio in descending order.\n4. Return the sorted list of words along with the set of the most common words up to the specified `cut_off`.\n\nHere's the implementation of the `statistic_key_word` function:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Step 1: Count the occurrences of each word across all documents\n    word_counts = Counter()\n    \n    for _, words in data:\n        word_counts.update(words)\n    \n    # Step 2: Calculate the document-frequency ratio for each word\n    total_documents = len(data)\n    word_ratios = [(word, count / total_documents) for word, count in word_counts.items()]\n    \n    # Step 3: Sort the words based on their document-frequency ratio in descending order\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Step 4: Return the sorted list of words along with the set of the most common words\n    if cut_off is None:\n        return word_ratios, set(word_counts.keys())\n    else:\n        return word_ratios[:cut_off], {word for word, _ in word_ratios[:cut_off]}\n\n# Example usage:\ndata = [\n    (\"doc1\", [\"apple\", \"banana\", \"cherry\"]),\n    (\"doc2\", [\"banana\", \"date\", \"fig\"]),\n    (\"doc3\", [\"grape\", \"fig\", \"kiwi\"])\n]\n\nresult = statistic_key_word(data, cut_off=2)\nprint(result)\n```\n\n### Explanation:\n\n- **Step 1**: We use `Counter` to count the occurrences of each word across all documents.\n- **Step 2**: We calculate the document-frequency ratio for each word by dividing its count by the total number of documents.\n- **Step 3**: We sort the list of word-ratio pairs in descending order based on the ratio.\n- **Step 4**: Depending on whether `cut_off` is `None`, we return either the entire sorted list of words or only the top `cut_off` words along with their frequencies.\n\nThis implementation ensures that the frequency ratios are rounded to four decimal places and handles edge cases such as when `cut_off` is larger than the number of distinct words or when it is `0`."}
{"task_id": 571, "completion_id": 0, "completion": "To complete the `compute_svm_parameters` function, we need to follow the steps outlined in the problem description. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, np.multiply(alpha, y))\n    \n    # Round the weight vector to 4 decimal places\n    w_rounded = np.round(w, decimals=4)\n    \n    # If X has only one feature, convert w to a one-dimensional list\n    if X.shape[1] == 1:\n        w_list = w_rounded.tolist()\n    else:\n        w_list = w_rounded.tolist()\n    \n    # Compute the bias term b\n    b = np.mean(np.multiply(y, (1 - np.dot(X, w))))\n    \n    # Round the bias term to 4 decimal places\n    b_rounded = round(b, 4)\n    \n    return w_list, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [-1, -2]])\n# y = np.array([1, 1, -1])\n# alpha = np.array([0.5, 0.5, 0])\n# print(compute_svm_parameters(X, y, alpha))\n```\n\n### Explanation:\n1. **Weight Vector Calculation**: We use the formula \\( \\mathbf{w} = X^\\top (\\boldsymbol{\\alpha} \\odot \\mathbf{y}) \\) to compute the weight vector \\( \\mathbf{w} \\). The operation \\( \\boldsymbol{\\alpha} \\odot \\mathbf{y} \\) performs element-wise multiplication between the alpha vector and the label vector.\n\n2. **Rounding**: We round each element of the weight vector to 4 decimal places using `np.round`.\n\n3. **Bias Term Calculation**: The bias term \\( b \\) is calculated using the formula \\( b = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\mathbf{w}^\\top \\mathbf{x}_i) \\).\n\n4. **Rounding the Bias**: We round the bias term to 4 decimal places using `round`.\n\n5. **Handling Single Feature Case**: If the input matrix \\( X \\) has only one feature, we convert the weight vector to a one-dimensional list before returning.\n\nThis implementation ensures that both the weight vector and the bias term are correctly computed and formatted according to the specified requirements."}
{"task_id": 572, "completion_id": 0, "completion": "To implement the Local Outlier Factor (LOF) algorithm from scratch, we need to follow the steps outlined in the problem description. Below is the complete implementation of the `local_outlier_factor` function:\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor for each point in the dataset.\"\"\"\n    n = len(data)\n    \n    # Step 1: Compute the full pairwise Euclidean distance matrix\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n            dist_matrix[j, i] = dist_matrix[i, j]\n    \n    # Step 2: For every sample p, get its k-distance and the index list of the k-nearest neighbors N_k(p)\n    lof_scores = []\n    outlier_indices = []\n    \n    for p in range(n):\n        distances = dist_matrix[p]\n        sorted_indices = np.argsort(distances)\n        \n        k_distances = distances[sorted_indices[:k]]\n        N_k_p = sorted_indices[:k]\n        \n        # Step 3: Define the reachability distance between two points\n        def reach_dist(q):\n            return max(k_distances[q], dist_matrix[p, q])\n        \n        # Step 4: Calculate the Local Reachability Density (LRD) of p\n        lrd_p = k / sum(reach_dist(q) for q in N_k_p)\n        \n        # Step 5: Calculate the Local Outlier Factor (LOF) of p\n        lof_score = sum(lrd_q / k for q in N_k_p) / lrd_p\n        \n        # Round the LOF score to 4 decimal places\n        lof_score_rounded = round(lof_score, 4)\n        \n        lof_scores.append(lof_score_rounded)\n        \n        # Check if the LOF score is greater than epsilon\n        if lof_score_rounded > epsilon:\n            outlier_indices.append(p)\n    \n    # Return the list of LOF scores and the list of outlier indices\n    return lof_scores, outlier_indices\n\n# Example usage:\ndata = np.array([[1, 1], [1.5, 1.5], [0, 0], [2, 2], [3, 3]])\nk = 2\nepsilon = 1.5\nlof_scores, outlier_indices = local_outlier_factor(data, k, epsilon)\nprint(\"LOF Scores:\", lof_scores)\nprint(\"Outlier Indices:\", outlier_indices)\n```\n\n### Explanation:\n1. **Distance Matrix**: We first compute the full pairwise Euclidean distance matrix using NumPy's `linalg.norm`.\n\n2. **k-Distance Calculation**: For each sample `p`, we sort the distances and select the `k` smallest distances to find the `k`-th nearest neighbors (`N_k(p)`).\n\n3. **Reachability Distance**: For each neighbor `q` in `N_k(p)`, we calculate the reachability distance as the maximum of the `k`-distance of `q` or the distance between `p` and `q`.\n\n4. **Local Reachability Density (LRD)**: The LRD of `p` is calculated as `k / \u03a3_{q\u2208N_k(p)} reach-dist_k(p,q)`.\n\n5. **Local Outlier Factor (LOF)**: The LOF of `p` is calculated as `(\u03a3_{q\u2208N_k(p)} LRD_k(q) / k) / LRD_k(p)`.\n\n6. **Rounding and Filtering**: Each LOF score is rounded to 4 decimal places, and any sample with a LOF score greater than `epsilon` is marked as an outlier.\n\nThis implementation should correctly compute the LOF scores and identify outliers based on the given constraints."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    \n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        x_train = np.random.uniform(base + 1, base + 9, size=(n_train,))\n        y_train = np.random.uniform(base + 1, base + 9, size=(n_train,))\n        x_val = np.random.uniform(base + 1, base + 9, size=(n_val,))\n        y_val = np.random.uniform(base + 1, base + 9, size=(n_val,))\n        \n        X_train.extend(np.column_stack((x_train, y_train)))\n        X_val.extend(np.column_stack((x_val, y_val)))\n        y_train.extend([c] * n_train)\n        y_val.extend([c] * n_val)\n    \n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.array(X_train).round(4)\n    X_val = np.array(X_val).round(4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    \n    return (X_train, X_val, y_train, y_val)\n```\n\nThis function generates synthetic 2D data according to the specified requirements. It ensures reproducibility using a seed if provided, samples points uniformly within the specified ranges, rounds the coordinates to 4 decimal places, and returns the data in the required format."}
{"task_id": 579, "completion_id": 0, "completion": "Here's a complete implementation of the classical (Lloyd-style) K-Means clustering algorithm using only base Python and NumPy:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise ValueError(\"Input 'X' must be a 2D NumPy array.\")\n    if not isinstance(k, int) or k <= 0 or k > X.shape[0]:\n        raise ValueError(\"Number of clusters 'k' must be a positive integer less than or equal to the number of data points.\")\n    if not isinstance(max_iters, int) or max_iters < 0:\n        raise ValueError(\"Maximum number of iterations 'max_iters' must be a non-negative integer.\")\n\n    m, d = X.shape\n    if k > m:\n        raise ValueError(\"The number of clusters cannot be greater than the number of data points.\")\n\n    # Initialisation: Take the first k points as the initial centers\n    centres = X[:k].tolist()\n\n    # Round the initial centers to 4 decimal places\n    centres_rounded = [round(coord, 4) for coord in centres]\n\n    # Assignment step\n    labels = []\n    for i in range(m):\n        distances = np.linalg.norm(X[i] - np.array(centres_rounded), axis=1)\n        min_index = np.argmin(distances)\n        labels.append(min_index)\n\n    # Update step\n    for _ in range(max_iters):\n        new_centres = []\n        for j in range(k):\n            points_in_cluster = X[np.array(labels) == j]\n            if points_in_cluster.size > 0:\n                new_centre = np.mean(points_in_cluster, axis=0)\n                new_centres.append(new_centre.tolist())\n            else:\n                new_centres.append(centres_rounded[j])\n        \n        # Round the new centres to 4 decimal places\n        new_centres_rounded = [round(coord, 4) for coord in new_centres]\n\n        # Check for convergence\n        if np.allclose(np.array(centres_rounded), np.array(new_centres_rounded)):\n            break\n\n        # Update the current centres\n        centres_rounded = new_centres_rounded\n\n    return labels, centres_rounded\n\n# Example usage:\n# X = np.random.rand(100, 2)  # Generate random 2D data points\n# k = 5\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\n### Explanation:\n1. **Initialization**: The first `k` points from the dataset are chosen as the initial cluster centers.\n2. **Assignment Step**: Each data point is assigned to the closest center based on Euclidean distance.\n3. **Update Step**: The center of each cluster is updated to be the mean of all points in that cluster.\n4. **Convergence Check**: The process repeats until the cluster centers do not change significantly between iterations or the maximum number of iterations is reached.\n5. **Output**: The function returns the final cluster labels and the rounded coordinates of the cluster centers."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return [0.0] * X.shape[1], 0.0\n\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    for _ in range(iterations):\n        # Compute predictions\n        predictions = np.dot(X, weights) + bias\n        \n        # Compute residuals\n        residuals = y - predictions\n        \n        # Compute gradients\n        gradient_w = -2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_b = -2 * np.sum(residuals)\n        \n        # Update weights and bias\n        weights -= learning_rate * gradient_w / m\n        bias -= learning_rate * gradient_b / m\n    \n    # Round the results to 4 decimal places\n    weights_rounded = [round(weight, 4) for weight in weights]\n    bias_rounded = round(bias, 4)\n    \n    return weights_rounded, bias_rounded\n```\n\nThis implementation defines the `elastic_net_regression` function which implements batch gradient descent for Elastic-Net regularization. It calculates the predictions, residuals, gradients, and updates the weights and bias accordingly. Finally, it rounds the results to four decimal places before returning them."}
{"task_id": 591, "completion_id": 0, "completion": "To implement the `neural_net_predict` function, we need to follow the steps outlined in the problem description. We'll iterate over each layer of the network, apply the necessary transformations, and accumulate the results until we reach the output layer. Here's how you can implement this:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Add a bias term to the input vector\n    x_with_bias = [1] + x\n    \n    # Initialize the output with the bias term\n    output = x_with_bias\n    \n    # Iterate over each layer\n    for layer_weights in weights:\n        # Compute the weighted sum for each neuron\n        weighted_sum = np.dot(output, layer_weights)\n        \n        # Apply ReLU activation to all layers except the last one\n        if len(layer_weights) > 1:  # Check if there is more than one neuron\n            output = np.maximum(0, weighted_sum)\n        else:\n            output = weighted_sum\n    \n    # Round the output to four decimal places\n    if len(output) == 1:\n        return round(output[0], 4)\n    else:\n        return [round(val, 4) for val in output]\n\n# Example usage:\n# weights = [\n#     [[1, 0.5], [0.5, 1]],  # Layer 0\n#     [[1, 0.3], [0.3, 1]],  # Layer 1\n#     [[1, 0.2], [0.2, 1]]   # Layer 2\n# ]\n# x = [0.5, 0.5]\n# print(neural_net_predict(weights, x))  # Output will depend on the actual weights\n```\n\n### Explanation:\n1. **Bias Addition**: We add a bias term `1` to the input vector `x` to account for the bias weights in the first layer.\n2. **Weighted Sum Calculation**: For each layer, we calculate the weighted sum of the inputs using `np.dot`.\n3. **ReLU Activation**: If the layer has more than one neuron, we apply the ReLU activation function using `np.maximum`. If it's the last layer, we simply take the weighted sum since the last layer is linear.\n4. **Rounding**: Finally, we round the output to four decimal places and return it as a list or a single float based on whether the output layer has one neuron or multiple neurons."}
{"task_id": 595, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch in Python, we need to follow the steps outlined in the task description. Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implements the K-Means clustering algorithm from scratch.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k]\n    \n    # Step 2: Iterate until convergence or max iterations\n    for _ in range(max_iters):\n        # Step 2.1: Assign samples to the nearest centroid\n        distances = np.linalg.norm(X[:, None] - centroids[None], axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Calculate new centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        \n        # Step 2.3: Check for convergence\n        if np.allclose(new_centroids, centroids, atol=1e-4):\n            break\n        \n        # Step 2.4: Update centroids\n        centroids = new_centroids\n    \n    # Step 3: Sort centroids and round to 4 decimal places\n    sorted_centroids = [round(x, 4) for x in centroids]\n    sorted_centroids.sort()\n    \n    return sorted_centroids\n\n# Example usage:\nX = np.array([\n    [1.0, 2.0],\n    [1.5, 1.8],\n    [5.0, 8.0],\n    [8.0, 8.0],\n    [1.0, 7.0],\n    [9.0, 6.0],\n    [0.0, 9.0]\n])\nk = 2\ncentroids = kmeans_centroids(X, k)\nprint(centroids)\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the centroids with the first `k` samples from the input data `X`.\n\n2. **Iteration**: We repeat the following steps until convergence or the maximum number of iterations (`max_iters`) is reached:\n   - **Assignment**: For each sample, calculate the squared Euclidean distance to each centroid and assign the sample to the closest centroid.\n   - **Update**: Compute the new centroid for each cluster as the average of the samples assigned to that cluster.\n   - **Convergence Check**: If the change in centroids between two consecutive iterations is less than `1e-4`, we stop the algorithm.\n\n3. **Sorting and Rounding**: After convergence, we sort the centroids in ascending order and round each coordinate to four decimal places before returning them.\n\nThis implementation ensures that the centroids are initialized deterministically and that the algorithm converges efficiently."}
