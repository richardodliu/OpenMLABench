{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b:\n        return -1\n    num_rows = len(a)\n    num_cols = len(a[0]) if num_rows > 0 else 0\n    vec_len = len(b)\n    if num_cols != vec_len:\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": ""}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    if arr.size != np.prod(new_shape):\n        return []\n    reshaped_arr = arr.reshape(new_shape)\n    return reshaped_arr.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        transposed = zip(*matrix)\n        return [sum(column) / len(column) for column in transposed]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = (a - d) ** 2 + 4 * b * c\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.linalg import inv\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if A_np.shape[0] != A_np.shape[1]:\n        return -1\n    if T_np.shape[0] != T_np.shape[1]:\n        return -1\n    if S_np.shape[0] != S_np.shape[1]:\n        return -1\n    try:\n        inv_T = inv(T_np)\n        inv_S = inv(S_np)\n    except np.linalg.LinAlgError:\n        return -1\n    transformed = inv_T @ A_np @ S_np\n    transformed_rounded = np.round(transformed, 4)\n    return transformed_rounded.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        return None\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)\n    cols_b = len(b[0])\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    n = len(vectors)\n    m = len(vectors[0])\n    means = [sum(vector) / m for vector in vectors]\n    covariance_matrix = [[0.0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            covariance = sum(((vectors[i][k] - means[i]) * (vectors[j][k] - means[j]) for k in range(m))) / (m - 1)\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solve a system of linear equations Ax = b using the Jacobi method.\n    \n    Parameters:\n        A (np.ndarray): Coefficient matrix (n x n)\n        b (np.ndarray): Right-hand side vector (n x 1)\n        n (int): Number of iterations\n    \n    Returns:\n        list: Approximate solution vector x rounded to 4 decimal places\n    \"\"\"\n    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:\n        raise ValueError('Matrix A must be square and have the same number of rows as vector b.')\n    (n_rows, _) = A.shape\n    x = np.zeros(n_rows)\n    for _ in range(n):\n        x_new = np.zeros(n_rows)\n        for i in range(n_rows):\n            diag = A[i, i]\n            sum_off_diag = np.sum(A[i, :i] * x[:i]) + np.sum(A[i, i + 1:] * x[i + 1:])\n            x_new[i] = (b[i] - sum_off_diag) / diag\n        x = np.round(x_new, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the SVD of a 2x2 matrix using the Jacobian method.\n    \n    Parameters:\n        A (np.ndarray): A 2x2 input matrix.\n        \n    Returns:\n        tuple: (u1, s1, v1) where u1 and v1 are unit vectors, and s1 is the largest singular value.\n               All results are rounded to 4 decimal places.\n    \"\"\"\n    assert A.shape == (2, 2), 'Matrix must be 2x2'\n    u = np.random.rand(2)\n    v = np.random.rand(2)\n    u /= np.linalg.norm(u)\n    v /= np.linalg.norm(v)\n    learning_rate = 0.01\n    num_iterations = 1000\n    for _ in range(num_iterations):\n        approx = np.outer(u, v) * np.dot(u, np.dot(A, v))\n        grad_u = 2 * np.dot(A.T @ (approx - A), v)\n        grad_v = 2 * np.dot((approx - A) @ u, A @ v)\n        u -= learning_rate * grad_u\n        v -= learning_rate * grad_v\n        u /= np.linalg.norm(u)\n        v /= np.linalg.norm(v)\n    sigma = np.dot(u, np.dot(A, v))\n    u_rounded = np.round(u, 4)\n    v_rounded = np.round(v, 4)\n    sigma_rounded = np.round(sigma, 4)\n    return (tuple(u_rounded), sigma_rounded, tuple(v_rounded))"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    if len(matrix) == 1:\n        return matrix[0][0]\n    if len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    det = 0.0\n    for col in range(len(matrix)):\n        sign = (-1) ** col\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        det += sign * matrix[0][col] * determinant_4x4(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_with_intercept = np.c_[np.ones((X.shape[0], 1)), X]\n    theta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ y\n    theta_rounded = np.round(theta, 4).tolist()\n    return theta_rounded"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X @ theta\n        error = predictions - y\n        gradient = X.T @ error\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    normalized_data = (data - min_vals) / (max_vals - min_vals)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    normalized_data = np.round(normalized_data, 4).tolist()\n    return (standardized_data, normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points_array[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = [tuple((round(coord, 4) for coord in centroid)) for centroid in centroids]\n    return rounded_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train-test splits for K-Fold Cross-Validation.\n    \n    Parameters:\n        X (np.ndarray): Feature matrix of shape (n_samples, n_features).\n        y (np.ndarray): Target vector of shape (n_samples,).\n        k (int): Number of folds (default is 5).\n        shuffle (bool): Whether to shuffle the data before splitting (default is True).\n        random_seed (int or None): Seed for random number generator (optional).\n        \n    Returns:\n        list of tuples: Each tuple contains (train_indices, test_indices) for a fold.\n    \"\"\"\n    n_samples = X.shape[0]\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    splits = []\n    for i in range(k):\n        start = i * fold_size\n        end = (i + 1) * fold_size\n        test_indices = indices[start:end]\n        train_indices = np.setdiff1d(indices, test_indices)\n        splits.append((train_indices, test_indices))\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) from scratch.\n    \n    Parameters:\n    - data: 2D NumPy array where each row is a sample and each column is a feature.\n    - k: Number of principal components to return.\n    \n    Returns:\n    - A list of lists containing the top k eigenvectors (principal components).\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    rounded_top_k_eigenvectors = np.round(top_k_eigenvectors, decimals=4).tolist()\n    return rounded_top_k_eigenvectors"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Builds a decision tree using recursive binary splitting based on entropy and information gain.\n    \n    Args:\n        examples (list[dict]): List of examples, each being a dictionary of attribute-value pairs.\n        attributes (list[str]): List of available attributes to consider for splitting.\n        target_attr (str): The name of the target attribute (class label).\n    \n    Returns:\n        dict: A nested dictionary representing the decision tree.\n    \"\"\"\n    if all((example[target_attr] == examples[0][target_attr] for example in examples)):\n        return examples[0][target_attr]\n    if not attributes:\n        return Counter([example[target_attr] for example in examples]).most_common(1)[0][0]\n    best_attribute = choose_best_attribute(examples, attributes, target_attr)\n    tree = {best_attribute: {}}\n    for value in get_values(examples, best_attribute):\n        sub_examples = [example for example in examples if example[best_attribute] == value]\n        remaining_attributes = [attr for attr in attributes if attr != best_attribute]\n        subtree = learn_decision_tree(sub_examples, remaining_attributes, target_attr)\n        tree[best_attribute][value] = subtree\n    return tree\ndef choose_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n    \"\"\"\n    Selects the attribute that provides the highest information gain.\n    \n    Args:\n        examples (list[dict]): List of examples.\n        attributes (list[str]): List of attributes to consider.\n        target_attr (str): Target attribute.\n    \n    Returns:\n        str: The attribute with the highest information gain.\n    \"\"\"\n    best_gain = -1\n    best_attr = None\n    for attr in attributes:\n        gain = calculate_information_gain(examples, attr, target_attr)\n        if gain > best_gain:\n            best_gain = gain\n            best_attr = attr\n    return best_attr\ndef calculate_information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"\n    Calculates the information gain from splitting on a given attribute.\n    \n    Args:\n        examples (list[dict]): List of examples.\n        attribute (str): Attribute to split on.\n        target_attr (str): Target attribute.\n    \n    Returns:\n        float: Information gain.\n    \"\"\"\n    entropy = calculate_entropy(examples, target_attr)\n    subsets = {}\n    for value in get_values(examples, attribute):\n        subset = [example for example in examples if example[attribute] == value]\n        subsets[value] = subset\n    total = len(examples)\n    weighted_entropy = 0.0\n    for value in subsets:\n        subset = subsets[value]\n        weight = len(subset) / total\n        weighted_entropy += weight * calculate_entropy(subset, target_attr)\n    return entropy - weighted_entropy\ndef calculate_entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"\n    Calculates the entropy of a set of examples.\n    \n    Args:\n        examples (list[dict]): List of examples.\n        target_attr (str): Target attribute.\n    \n    Returns:\n        float: Entropy of the set.\n    \"\"\"\n    counts = Counter([example[target_attr] for example in examples])\n    total = len(examples)\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return entropy\ndef get_values(examples: list[dict], attribute: str) -> list:\n    \"\"\"\n    Returns the unique values of a specific attribute in the examples.\n    \n    Args:\n        examples (list[dict]): List of examples.\n        attribute (str): Attribute to extract values from.\n    \n    Returns:\n        list: Unique values of the attribute.\n    \"\"\"\n    return list(set([example[attribute] for example in examples]))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Train a deterministic Pegasos Kernel SVM classifier.\n    \n    Parameters:\n    - data: 2D NumPy array where each row is a sample and each column is a feature.\n    - labels: 1D NumPy array with binary class labels (-1 or 1).\n    - kernel: str, 'linear' or 'rbf' (default: 'linear').\n    - lambda_val: float, regularization parameter (default: 0.01).\n    - iterations: int, number of training iterations (default: 100).\n    - sigma: float, bandwidth parameter for RBF kernel (default: 1.0).\n    \n    Returns:\n    - alpha: list of alpha coefficients (after reshaping using tolist()).\n    - bias: float, bias term.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    if kernel == 'linear':\n\n        def kernel_func(x, y):\n            return np.dot(x, y)\n    elif kernel == 'rbf':\n        gamma = 1.0 / (2 * sigma ** 2)\n\n        def kernel_func(x, y):\n            return np.exp(-gamma * np.dot(x - y, x - y))\n    else:\n        raise ValueError(\"Unsupported kernel. Use 'linear' or 'rbf'.\")\n    for _ in range(iterations):\n        for i in range(n_samples):\n            xi = data[i]\n            yi = labels[i]\n            grad = 0.0\n            for j in range(n_samples):\n                grad += alpha[j] * yi * kernel_func(xi, data[j])\n            grad -= 2 * lambda_val * alpha[i]\n            grad += yi\n            if grad < 1.0:\n                alpha[i] *= 1 - lambda_val\n                alpha[i] += yi / (lambda_val + 1.0)\n            else:\n                alpha[i] *= 1 - lambda_val\n            bias += yi * (1 - lambda_val) * (grad < 1.0)\n    return (alpha.tolist(), round(bias, 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [exp_score / sum_exp_scores for exp_score in exp_scores]\n    return [round(value, 4) for value in softmax_values]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    z = [sum((f * w for (f, w) in zip(feature, weights))) + bias for feature in features]\n    predictions = [1 / (1 + math.exp(-z_val)) for z_val in z]\n    predictions_array = np.array(predictions).tolist()\n    mse = sum(((pred - label) ** 2 for (pred, label) in zip(predictions, labels))) / len(labels)\n    rounded_predictions = [round(p, 4) for p in predictions]\n    rounded_mse = round(mse, 4)\n    return (rounded_predictions, rounded_mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        s = sigmoid(x)\n        return s * (1 - s)\n    for epoch in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        loss = np.mean((labels - predictions) ** 2)\n        mse_history.append(round(loss, 4))\n        d_loss = (predictions - labels) / labels.size\n        d_linear_output = d_loss\n        d_weights = np.dot(features.T, d_linear_output * sigmoid_derivative(linear_output))\n        d_bias = np.sum(d_linear_output * sigmoid_derivative(linear_output))\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return (weights, bias, [round(mse, 4) for mse in mse_history])"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'relu')\n\n        def _backward():\n            self.grad += out.grad if self.data >= 0 else 0\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_np = np.array(B)\n    C_np = np.array(C)\n    if C_np.shape[0] != C_np.shape[1]:\n        raise ValueError('C must be a square matrix (n x n) to form a basis.')\n    C_inv = np.linalg.inv(C_np)\n    P = np.dot(C_inv, B_np)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    AtA = np.dot(A.T, A)\n    (eigenvalues_A_T_A, eigenvectors_A_T_A) = np.linalg.eig(AtA)\n    sorted_indices = np.argsort(eigenvalues_A_T_A)[::-1]\n    eigenvalues_A_T_A = eigenvalues_A_T_A[sorted_indices]\n    eigenvectors_A_T_A = eigenvectors_A_T_A[:, sorted_indices]\n    V = eigenvectors_A_T_A\n    S = np.sqrt(eigenvalues_A_T_A)\n    S = np.diag(S)\n    U = np.dot(A, V)\n    U = U / np.linalg.norm(U, axis=0)\n    U = np.round(U, 4).tolist()\n    S = np.round(S, 4).tolist()\n    V = np.round(V, 4).tolist()\n    return (U, S, V)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(len(X))\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from X and optionally y.\n\n    Parameters:\n    - X: numpy.ndarray, input features.\n    - y: numpy.ndarray, optional target labels.\n    - batch_size: int, size of each batch.\n\n    Yields:\n    - A batch of X (and y if provided) as a Python list.\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size]\n        if y is not None:\n            y_batch = y[i:i + batch_size]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two subsets based on whether the value of a specified feature\n    is greater than or equal to a given threshold.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n        The input dataset.\n    - feature_i: int\n        The index of the feature to use for splitting.\n    - threshold: float\n        The threshold value to compare against.\n\n    Returns:\n    - below: list of samples where X[:, feature_i] < threshold\n    - above: list of samples where X[:, feature_i] >= threshold\n    \"\"\"\n    feature_column = X[:, feature_i]\n    below = X[feature_column < threshold].tolist()\n    above = X[feature_column >= threshold].tolist()\n    return (below, above)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features up to the specified degree for a given dataset.\n    \n    Parameters:\n        X (np.ndarray): A 2D NumPy array of shape (n_samples, n_features).\n        degree (int): The maximum degree of the polynomial features to generate.\n        \n    Returns:\n        np.ndarray: A 2D NumPy array of shape (n_samples, n_poly_features),\n                    where n_poly_features is the number of polynomial features.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    poly_features = []\n    for indices in combinations_with_replacement(range(n_features), degree):\n        feature = np.prod(X[:, indices], axis=1)\n        poly_features.append(feature)\n    return np.column_stack(poly_features).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n    \n    Parameters:\n    - X: 2D numpy array of features\n    - y: 1D numpy array of labels\n    - n_subsets: Number of subsets to generate\n    - replacements: Boolean indicating whether to sample with replacement (True) or without (False)\n    - seed: Random seed for reproducibility\n    \n    Returns:\n    - List of tuples, each tuple contains (X_subset, y_subset) as Python lists\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, size=n_samples, replace=False)\n        X_subset = X[indices].tolist()\n        y_subset = y[indices].tolist()\n        subsets.append((X_subset, y_subset))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D numpy array of integer labels into a one-hot encoded matrix.\n    \n    Parameters:\n        x (np.ndarray): A 1D numpy array of integer values.\n        n_col (int, optional): Number of columns in the one-hot encoded matrix. \n                              If not provided, it will be determined from the unique values in x.\n    \n    Returns:\n        list: A list of lists representing the one-hot encoded matrix.\n    \"\"\"\n    if n_col is None:\n        n_col = len(np.unique(x))\n    one_hot = np.eye(n_col)[x]\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must have the same length.')\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n        X (np.ndarray): A 2D numpy array representing the input features.\n        Y (np.ndarray, optional): An optional 2D numpy array representing additional features.\n        \n    Returns:\n        np.ndarray: A 2D numpy array representing the correlation matrix, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    if X.shape[1] != Y.shape[1]:\n        raise ValueError('X and Y must have the same number of columns.')\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    centered_X = X - mean_X\n    centered_Y = Y - mean_Y\n    cov_matrix = np.dot(centered_X.T, centered_Y) / (X.shape[0] - 1)\n    std_dev_X = np.std(X, axis=0)\n    std_dev_Y = np.std(Y, axis=0)\n    corr_matrix = cov_matrix / np.outer(std_dev_X, std_dev_Y)\n    corr_matrix = np.round(corr_matrix, 4)\n    return corr_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_prediction = None\n        for feature_idx in range(n_features):\n            sorted_indices = np.argsort(X[:, feature_idx])\n            X_sorted = X[sorted_indices]\n            y_sorted = y[sorted_indices]\n            weights_sorted = weights[sorted_indices]\n            for i in range(n_samples - 1):\n                threshold = (X_sorted[i, feature_idx] + X_sorted[i + 1, feature_idx]) / 2\n                predictions = np.where(X_sorted[:, feature_idx] > threshold, 1, -1)\n                error = np.sum(weights_sorted * (predictions != y_sorted))\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_prediction = predictions\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        predictions = np.zeros(n_samples)\n        for i in range(n_samples):\n            if X[i, best_feature] > best_threshold:\n                predictions[i] = 1\n            else:\n                predictions[i] = -1\n        weights *= np.exp(-alpha * (predictions == y))\n        weights /= np.sum(weights)\n        classifiers.append({'feature': int(best_feature), 'threshold': round(best_threshold, 4), 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores, dtype=np.float64)\n    max_score = np.max(scores)\n    shifted_scores = scores - max_score\n    exp_shifted = np.exp(shifted_scores)\n    sum_exp = np.sum(exp_shifted)\n    log_softmax_result = shifted_scores - np.log(sum_exp)\n    log_softmax_result = np.round(log_softmax_result, 4)\n    return log_softmax_result.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        \"\"\"\n        Initialize weights and biases with a uniform distribution and zero bias.\n        Also sets the optimizer for both W and w0.\n        \"\"\"\n        if self.input_shape is None:\n            raise ValueError('Input shape must be provided for the Dense layer.')\n        limit = 1 / np.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer_W = copy.deepcopy(optimizer)\n        self.optimizer_w0 = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        \"\"\"\n        Returns the total number of trainable parameters in the layer.\n        \"\"\"\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        \"\"\"\n        Computes the forward pass: X @ W + w0\n        \"\"\"\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        \"\"\"\n        Computes the gradient of the loss with respect to the input,\n        and updates the weights and biases if the layer is trainable.\n        \"\"\"\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(self.layer_input.T, accum_grad)\n            self.W = self.optimizer_W.update(self.W, grad_W)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        \"\"\"\n        Returns the shape of the output produced by the forward pass.\n        \"\"\"\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    if input_matrix.ndim != 2 or kernel.ndim != 2:\n        raise ValueError('Input matrix and kernel must be 2D arrays.')\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    output = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            roi = padded_input[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output[i, j] = np.sum(roi * kernel)\n    output = np.round(output, decimals=4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    total_loss = mse + reg_term\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function to a given input value.\n\n    Parameters:\n    z (float): The input value.\n    alpha (float): The slope for negative values (default is 0.01).\n\n    Returns:\n    float: The output after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n    \n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric.\n\n    Parameters:\n    y_true (np.ndarray): True binary labels.\n    y_pred (np.ndarray): Predicted binary labels.\n\n    Returns:\n    float: Precision value.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must have the same length.')\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0.0\n    return tp / (tp + fp)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent with specified variant using MSE loss.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: initial weight vector (numpy array of shape (n_features,))\n    - learning_rate: float\n    - n_iterations: int, number of iterations\n    - batch_size: int, size of each batch (for mini-batch and SGD)\n    - method: str, 'batch', 'sgd', or 'mini_batch'\n\n    Returns:\n    - weights: numpy array of shape (n_features,) with updated weights\n    - losses: list of floats representing MSE loss at each iteration\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    weights = np.array(weights)\n    (n_samples, n_features) = X.shape\n    losses = []\n    for _ in range(n_iterations):\n        if method in ['sgd', 'mini_batch']:\n            indices = np.random.permutation(n_samples)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n        for i in range(0, n_samples, batch_size):\n            if method == 'batch':\n                batch_mask = np.arange(n_samples)\n            elif method == 'sgd':\n                batch_mask = np.array([i])\n            elif method == 'mini_batch':\n                batch_mask = np.arange(i, min(i + batch_size, n_samples))\n            else:\n                raise ValueError(\"Invalid method. Choose 'batch', 'sgd', or 'mini_batch'.\")\n            X_batch = X[batch_mask]\n            y_batch = y[batch_mask]\n            y_pred = X_batch @ weights\n            error = y_pred - y_batch\n            gradient = 2 / len(batch_mask) * X_batch.T @ error\n            weights -= learning_rate * gradient\n            loss = np.mean((y_batch - y_pred) ** 2)\n            losses.append(loss)\n    weights = np.round(weights, 4).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (weights, losses)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix to its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n        matrix (list of lists): The input matrix.\n        \n    Returns:\n        list: A Python list representing the RREF of the matrix.\n    \"\"\"\n    mat = np.array(matrix, dtype=np.float64)\n    (m, n) = mat.shape\n    mat = mat.copy()\n    rank = 0\n    for col in range(n):\n        pivot_row = None\n        for row in range(rank, m):\n            if abs(mat[row, col]) > 1e-10:\n                pivot_row = row\n                break\n        if pivot_row is None:\n            continue\n        mat[[rank, pivot_row]] = mat[[pivot_row, rank]]\n        mat[rank] /= mat[rank, col]\n        for row in range(m):\n            if row != rank and abs(mat[row, col]) > 1e-10:\n                mat[row] -= mat[row, col] * mat[rank]\n        rank += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n    \n    Parameters:\n    - f: Objective function to be minimized.\n    - grad: Gradient of the objective function.\n    - x0: Initial parameter values (numpy array).\n    - learning_rate: Step size for weight updates.\n    - beta1: Exponential decay rate for first moment estimates.\n    - beta2: Exponential decay rate for second moment estimates.\n    - epsilon: Small constant for numerical stability.\n    - num_iterations: Number of iterations to run the optimizer.\n    \n    Returns:\n    - Optimized parameters as a list (rounded to 4 decimal places).\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 1\n    for _ in range(num_iterations):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n        t += 1\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implements Lasso Regression using Gradient Descent with L1 Regularization.\n    \n    Parameters:\n        X (np.array): Feature matrix of shape (n_samples, n_features)\n        y (np.array): Target vector of shape (n_samples,)\n        alpha (float): Regularization parameter (default: 0.1)\n        learning_rate (float): Learning rate for gradient descent (default: 0.01)\n        max_iter (int): Maximum number of iterations (default: 1000)\n        tol (float): Tolerance for early stopping (default: 1e-4)\n        \n    Returns:\n        tuple: (weights, bias), both rounded to 4 decimal places\n    \"\"\"\n    X = np.c_[np.ones(X.shape[0]), X]\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    for _ in range(max_iter):\n        predictions = X @ weights\n        gradient_error = (predictions - y) * X\n        gradient_weights = 1 / n_samples * gradient_error.sum(axis=0)\n        gradient_regularization = alpha * np.sign(weights)\n        gradient = gradient_weights + gradient_regularization\n        weights -= learning_rate * gradient\n        if np.linalg.norm(gradient) < tol:\n            break\n    bias = weights[0]\n    weights = weights[1:]\n    weights = np.round(weights, 4).tolist()\n    bias = np.round(bias, 4)\n    return (weights, bias)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                insert = dp[i][j - 1] + 1\n                delete = dp[i - 1][j] + 1\n                substitute = dp[i - 1][j - 1] + 1\n                transpose = float('inf')\n                if i > 1 and j > 1 and (source[i - 2] == target[j - 1]) and (source[i - 1] == target[j - 2]):\n                    transpose = dp[i - 2][j - 2] + 1\n                dp[i][j] = min(insert, delete, substitute, transpose)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = tp + fn\n    if denominator == 0:\n        return 0.0\n    recall_value = tp / denominator\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention output for a given input sequence X.\n\n    Parameters:\n    - X: Input tensor of shape (batch_size, seq_len, d_model)\n    - W_q: Query weight matrix of shape (d_model, d_k)\n    - W_k: Key weight matrix of shape (d_model, d_k)\n    - W_v: Value weight matrix of shape (d_model, d_v)\n\n    Returns:\n    - Output of self-attention as a numpy array with shape (batch_size, seq_len, d_v)\n    \"\"\"\n    X = np.array(X)\n    W_q = np.array(W_q)\n    W_k = np.array(W_k)\n    W_v = np.array(W_v)\n    (batch_size, seq_len, d_model) = X.shape\n    d_k = W_q.shape[1]\n    d_v = W_v.shape[1]\n    Q = np.matmul(X, W_q)\n    K = np.matmul(X, W_k)\n    V = np.matmul(X, W_v)\n    attention_scores = np.matmul(Q, K.swapaxes(1, 2)) / np.sqrt(d_k)\n    attention_weights = np.apply_along_axis(lambda x: np.exp(x) / np.sum(np.exp(x)), axis=2, arr=attention_scores)\n    attention_output = np.matmul(attention_weights, V)\n    attention_output = np.round(attention_output, 4).tolist()\n    return attention_output"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    h_prev = initial_hidden_state\n    for x in input_sequence:\n        input_to_hidden = np.dot(x, Wx) + b\n        hidden_to_hidden = np.dot(h_prev, Wh)\n        h_prev = np.tanh(input_to_hidden + hidden_to_hidden)\n    final_hidden_state = np.round(h_prev, 4).tolist()\n    return final_hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_array, np.ones((points_array.shape[0], 1))))\n    translated_points = np.dot(homogeneous_points, translation_matrix.T)\n    translated_points_list = translated_points[:, :2].tolist()\n    return translated_points_list"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: KL divergence D_KL(P || Q)\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    log_term = np.log(sigma_q / sigma_p)\n    term1 = sigma_p ** 2 / sigma_q ** 2\n    term2 = (mu_p - mu_q) ** 2 / sigma_q ** 2\n    kl_div = 0.5 * (log_term + term1 + term2 - 1)\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve a system of linear equations Ax = b using the Gauss-Seidel method.\n    \n    Parameters:\n    - A: Square matrix of coefficients (n x n)\n    - b: Right-hand side vector (n x 1)\n    - n: Number of iterations\n    - x_ini: Optional initial guess for x (default is a vector of zeros)\n    \n    Returns:\n    - Approximated solution vector x after `n` iterations, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    n_eq = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(n_eq)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(n_eq):\n            s = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - s) / A[i, i]\n    return np.round(x, decimals=4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n        A (np.ndarray): Coefficient matrix (n x n)\n        b (np.ndarray): Right-hand side vector (n x 1)\n    \n    Returns:\n        np.ndarray: Solution vector x (n x 1), rounded to 4 decimal places\n    \"\"\"\n    n = len(A)\n    aug = np.column_stack((A, b))\n    for i in range(n):\n        max_row = np.argmax(np.abs(aug[i:, i])) + i\n        aug[[i, max_row]] = aug[[max_row, i]]\n        if abs(aug[i, i]) < 1e-10:\n            raise ValueError('Matrix is singular or nearly singular.')\n        for j in range(i + 1, n):\n            factor = aug[j, i] / aug[i, i]\n            aug[j, i:] -= factor * aug[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (aug[i, -1] - np.dot(aug[i, :i], x[:i])) / aug[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        Inputs:\n            x: A list or numpy array of shape (seq_len, input_size)\n            initial_hidden_state: A numpy array of shape (hidden_size, 1)\n            initial_cell_state: A numpy array of shape (hidden_size, 1)\n        Outputs:\n            hidden_states: List of hidden states at each time step\n            final_hidden_state: Final hidden state after processing all inputs\n            final_cell_state: Final cell state after processing all inputs\n        \"\"\"\n        seq_len = x.shape[0]\n        hidden_states = []\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        for t in range(seq_len):\n            x_t = x[t].reshape(-1, 1)\n            h_t_prev = h_t\n            combined = np.hstack((x_t, h_t_prev))\n            f_t = np.tanh(np.dot(self.Wf, combined) + self.bf)\n            i_t = np.tanh(np.dot(self.Wi, combined) + self.bi)\n            c_t_candidate = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = np.tanh(np.dot(self.Wo, combined) + self.bo)\n            c_t = f_t * c_t + i_t * c_t_candidate\n            h_t = o_t * np.tanh(c_t)\n            hidden_states.append(h_t)\n        hidden_states = [np.round(h, 4).tolist() for h in hidden_states]\n        final_hidden_state = np.round(h_t, 4).tolist()\n        final_cell_state = np.round(c_t, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Computes TF-IDF scores for each word in the query against each document in the corpus.\n    \n    Parameters:\n    - corpus: List of documents, where each document is a list of words.\n    - query: List of words for which to compute TF-IDF scores.\n    \n    Returns:\n    - A list of lists containing TF-IDF scores for the query words in each document,\n      rounded to 5 decimal places.\n    \"\"\"\n    if not corpus:\n        raise ValueError('The corpus cannot be empty.')\n    vocab = set()\n    doc_freq = {}\n    docs = []\n    for (i, doc) in enumerate(corpus):\n        docs.append(doc)\n        vocab.update(doc)\n        for term in doc:\n            if term in doc_freq:\n                doc_freq[term] += 1\n            else:\n                doc_freq[term] = 1\n    tf_idf_scores = []\n    for doc in docs:\n        tf = {}\n        for term in query:\n            if term in doc:\n                tf_count = doc.count(term)\n                tf[term] = tf_count / len(doc) if len(doc) > 0 else 0\n            else:\n                tf[term] = 0.0\n        idf = {}\n        for term in query:\n            df = doc_freq.get(term, 0)\n            idf[term] = np.log((len(corpus) + 1) / (df + 1)) if df > 0 else 0.0\n        doc_scores = []\n        for term in query:\n            doc_scores.append(round(tf[term] * idf[term], 5))\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    if tp == 0:\n        return 0.0\n    precision = tp / (tp + fp)\n    recall = tp / (tp + fn)\n    numerator = (1 + beta ** 2) * precision * recall\n    denominator = beta ** 2 * precision + recall\n    f_score = numerator / denominator\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns: outputs (sequence of outputs), last_inputs (last input), last_hiddens (last hidden state)\n        \"\"\"\n        h_prev = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for t in range(len(x)):\n            x_t = x[t].reshape(-1, 1)\n            h_t = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h_prev) + self.b_h)\n            y_t = np.dot(self.W_hy, h_t) + self.b_y\n            outputs.append(y_t)\n            last_inputs.append(x_t)\n            last_hiddens.append(h_t)\n            h_prev = h_t\n        return (np.array(outputs), np.array(last_inputs), np.array(last_hiddens))\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Backpropagation Through Time (BPTT) to update weights based on loss.\n        \"\"\"\n        loss = 0.5 * np.mean((expected_output - outputs) ** 2, axis=0)\n        total_loss = np.sum(loss)\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        for t in reversed(range(len(input_sequence))):\n            y_t = outputs[t]\n            x_t = last_inputs[t]\n            h_t = last_hiddens[t]\n            error = y_t - expected_output[t]\n            dy = error\n            dh = np.dot(W_hy.T, dy)\n            dW_hy += np.dot(dy, h_t.T)\n            db_y += dy\n            dh -= np.dot(W_hh.T, dh)\n            dprev_h = dh\n            dx = np.dot(W_xh.T, dprev_h)\n            dW_xh += np.dot(dprev_h, x_t.T)\n            db_h += dprev_h\n            self.W_xh -= learning_rate * dW_xh\n            self.W_hh -= learning_rate * dW_hh\n            self.W_hy -= learning_rate * dW_hy\n            self.b_h -= learning_rate * db_h\n            self.b_y -= learning_rate * db_y\n        return total_loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x rounded to 8 decimal places\n    \"\"\"\n    A = np.asanyarray(A, dtype=np.float64)\n    b = np.asanyarray(b, dtype=np.float64)\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x0, dtype=np.float64)\n    r = b - np.dot(A, x)\n    p = r.copy()\n    if np.linalg.norm(r) < tol:\n        return x.tolist()\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = np.dot(r, r) / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        if np.linalg.norm(r) < tol:\n            return x.tolist()\n        beta = np.dot(r, r) / np.dot(p, Ap)\n        p = r + beta * p\n    return x.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    n = len(y)\n    if n == 0:\n        return 0.0\n    counts = Counter(y)\n    probabilities = [count / n for count in counts.values()]\n    gini = 1.0 - sum((p * p for p in probabilities))\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    rows = len(dense_matrix)\n    cols = len(dense_matrix[0])\n    values = []\n    col_indices = []\n    row_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if dense_matrix[i][j] != 0:\n                values.append(dense_matrix[i][j])\n                col_indices.append(j)\n                row_count += 1\n    row_pointers = [0] * (rows + 1)\n    for i in range(rows):\n        row_pointers[i + 1] = row_pointers[i] + len([val for val in values if val is not None and val != 0 and (val != 0)])\n    return (values, col_indices, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_v_L = sum((x * y for (x, y) in zip(v, L)))\n    dot_L_L = sum((x * x for x in L))\n    scalar = dot_v_L / dot_L_L\n    proj_vector = [scalar * x for x in L]\n    return [round(x, 3) for x in proj_vector]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    col_indices = []\n    row_indices = []\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n                col_indices.append(col)\n    col_ptr = [0] * (num_cols + 1)\n    for col in range(num_cols):\n        col_ptr[col + 1] = col_ptr[col] + len([v for v in values if v == col_indices[-1]])\n    return (values, row_indices, col_ptr)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space of a matrix A by finding its basis vectors.\n    \n    Parameters:\n        A (np.ndarray): Input matrix (2D NumPy array).\n        \n    Returns:\n        np.ndarray: Basis vectors of the column space, rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A)\n    R = np.linalg.qr(A, mode='r')[0]\n    pivot_columns = []\n    for col in range(R.shape[1]):\n        if np.any(R[:, col] != 0):\n            pivot_columns.append(col)\n    image_basis = A[:, pivot_columns]\n    return np.round(image_basis, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared (coefficient of determination) for a regression model.\n    \n    Parameters:\n    y_true (array-like): True target values.\n    y_pred (array-like): Predicted target values.\n    \n    Returns:\n    float: R-squared value rounded to three decimal places.\n    \"\"\"\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_lengths = set((len(row) for row in img))\n    if len(row_lengths) > 1:\n        return -1\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_brightness = sum((sum(row) for row in img))\n    num_pixels = len(img) * len(img[0])\n    average_brightness = total_brightness / num_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n    \n    Parameters:\n    y_true (array-like): Actual target values.\n    y_pred (array-like): Predicted target values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If input arrays have different shapes or are empty.\n    TypeError: If inputs are not array-like.\n    \"\"\"\n    if not isinstance(y_true, (list, np.ndarray)) or not isinstance(y_pred, (list, np.ndarray)):\n        raise TypeError('Inputs must be array-like (list or numpy array).')\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    rmse_value = np.sqrt(mean_squared_error)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0s and 1s).\n    y_pred (np.ndarray): Predicted binary labels (0s and 1s).\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length.')\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Compute the Dice Score between two binary arrays.\n\n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length.')\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 0.0\n    dice = 2 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generates a composite hypervector for a dataset row using Hyperdimensional Computing.\n\n    Parameters:\n    - row: A dictionary representing a dataset row.\n    - dim: The dimensionality of the hypervectors.\n    - random_seeds: A dictionary where keys are feature names and values are seeds for reproducibility.\n\n    Returns:\n    - A list representing the composite hypervector of the row.\n    \"\"\"\n    composite_hv = np.zeros(dim, dtype=np.float32)\n    for (feature_name, value) in row.items():\n        seed = random_seeds.get(feature_name, None)\n        feature_name_hv = generate_hv(feature_name, dim, seed)\n        value_hv = generate_hv(value, dim, seed)\n        bound_hv = bind_hv(feature_name_hv, value_hv)\n        composite_hv = bundle_hv(composite_hv, bound_hv)\n    return composite_hv.tolist()\ndef generate_hv(input_str, dim, seed=None):\n    \"\"\"\n    Generates a random hypervector from a string input using a given seed for reproducibility.\n\n    Parameters:\n    - input_str: The input string to generate the hypervector from.\n    - dim: The dimensionality of the hypervector.\n    - seed: An optional seed for reproducibility.\n\n    Returns:\n    - A numpy array representing the hypervector.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    hv = np.random.uniform(-1, 1, size=dim)\n    hash_value = hash(input_str)\n    bias = hash_value % dim\n    hv[bias] += 1.0\n    return hv\ndef bind_hv(hv1, hv2):\n    \"\"\"\n    Binds two hypervectors using element-wise multiplication (logical AND).\n\n    Parameters:\n    - hv1: First hypervector.\n    - hv2: Second hypervector.\n\n    Returns:\n    - A numpy array representing the bound hypervector.\n    \"\"\"\n    return np.multiply(hv1, hv2)\ndef bundle_hv(hv1, hv2):\n    \"\"\"\n    Bundles two hypervectors by adding them together.\n\n    Parameters:\n    - hv1: First hypervector.\n    - hv2: Second hypervector.\n\n    Returns:\n    - A numpy array representing the bundled hypervector.\n    \"\"\"\n    return np.add(hv1, hv2)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    cm = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            cm[0][0] += 1\n        elif y_true == 1 and y_pred == 0:\n            cm[0][1] += 1\n        elif y_true == 0 and y_pred == 1:\n            cm[1][0] += 1\n        else:\n            cm[1][1] += 1\n    return cm"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('actual and predicted lists must have the same length')\n    for label in actual + predicted:\n        if label not in (0, 1):\n            raise ValueError('All labels must be either 0 or 1')\n    true_positive = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    true_negative = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    false_positive = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    false_negative = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[true_negative, false_positive], [false_negative, true_positive]]\n    total = len(actual)\n    accuracy = true_positive + true_negative\n    accuracy /= total\n    precision = true_positive / (true_positive + false_positive) if true_positive + false_positive > 0 else 0\n    recall = true_positive / (true_positive + false_negative) if true_positive + false_negative > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    specificity = true_negative / (true_negative + false_positive) if true_negative + false_positive > 0 else 0\n    negative_predictive_value = true_negative / (true_negative + false_negative) if true_negative + false_negative > 0 else 0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data).mode[0] if len(np.unique(data)) > 1 else None\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = percentiles[2] - percentiles[0]\n    rounded_mean = round(mean, 4)\n    rounded_median = round(median, 4)\n    rounded_variance = round(variance, 4)\n    rounded_standard_deviation = round(standard_deviation, 4)\n    rounded_25th_percentile = round(percentiles[0], 4)\n    rounded_50th_percentile = round(percentiles[1], 4)\n    rounded_75th_percentile = round(percentiles[2], 4)\n    rounded_interquartile_range = round(iqr, 4)\n    return {'mean': rounded_mean, 'median': rounded_median, 'mode': mode, 'variance': rounded_variance, 'standard_deviation': rounded_standard_deviation, '25th_percentile': rounded_25th_percentile, '50th_percentile': rounded_50th_percentile, '75th_percentile': rounded_75th_percentile, 'interquartile_range': rounded_interquartile_range}"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    \n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials (rounded to 5 decimal places)\n    \"\"\"\n    if not 0 <= k <= n:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    \n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    if k < 0:\n        return 0.0\n    prob = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(prob, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast value, defined as max_pixel_value - min_pixel_value.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input must be a 2D grayscale image.')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    return max_pixel - min_pixel"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.shape != vec2.shape:\n        raise ValueError('Vectors must have the same shape.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    X = np.array(data).reshape(-1, 1)\n    poly_features = np.polynomial.polynomial.polyvander(X, degree)\n    transformed_data = [list((round(val, 8) for val in row)) for row in poly_features]\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model))\n    div_term = np.exp(np.arange(0, d_model, 2) * -(np.log(10000.0) / d_model))\n    pe[:, 0::2] = np.sin(position.reshape(-1, 1) * div_term.reshape(1, -1))\n    pe[:, 1::2] = np.cos(position.reshape(-1, 1) * div_term.reshape(1, -1))\n    return pe.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value (can be scalar or numpy array)\n    :param grad: Current gradient (can be scalar or numpy array)\n    :param m: First moment estimate (moving average of the gradient)\n    :param v: Second moment estimate (moving average of the squared gradient)\n    :param t: Current timestep (integer)\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (np.round(updated_parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    input_ids = encoder.encode(prompt)\n    max_length = len(input_ids) + n_tokens_to_generate\n    output_ids = input_ids.copy()\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][np.array(output_ids)]\n        position_embeddings = params['wpe'][np.arange(len(output_ids))]\n        embeddings = token_embeddings + position_embeddings\n        normalized_embeddings = embeddings / np.std(embeddings, axis=1, keepdims=True)\n        attention_output = np.dot(normalized_embeddings, np.random.rand(10, 10))\n        ff_output = np.tanh(np.dot(attention_output, np.random.rand(10, 10)))\n        final_output = ff_output / np.std(ff_output, axis=1, keepdims=True)\n        next_token_logits = np.dot(final_output, params['wte'].T)\n        next_token_probs = np.exp(next_token_logits) / np.sum(np.exp(next_token_logits), axis=1, keepdims=True)\n        next_token_id = np.random.choice(len(encoder.encoder_dict), p=next_token_probs[0])\n        output_ids.append(next_token_id)\n        if len(output_ids) > hparams['n_ctx']:\n            output_ids.pop(0)\n    generated_text = encoder.decode(output_ids[len(input_ids):])\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    result = []\n    for i in range(n):\n        relationships = np.array([np.dot(crystal_values[i], crystal_values[j]) for j in range(n)])\n        attention_weights = softmax(relationships)\n        weighted_pattern = np.dot(attention_weights, crystal_values)\n        result.append(round(float(weighted_pattern), 4))\n    return result"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for each document in the corpus based on a given query.\n    \n    Parameters:\n        corpus (list of str): List of documents in the corpus.\n        query (str): The query string.\n        k1 (float): Free parameter controlling the saturation of term frequency.\n        b (float): Free parameter controlling the penalty for document length.\n        \n    Returns:\n        list: A list of BM25 scores for each document in the corpus, rounded to 3 decimal places.\n    \"\"\"\n    query_terms = query.lower().split()\n    query_terms = [term for term in query_terms if term.strip()]\n    doc_lengths = []\n    term_freqs = []\n    for doc in corpus:\n        doc_terms = doc.lower().split()\n        doc_terms = [term for term in doc_terms if term.strip()]\n        doc_lengths.append(len(doc_terms))\n        term_freqs.append(Counter(doc_terms))\n    global_term_freq = Counter()\n    for doc in corpus:\n        doc_terms = doc.lower().split()\n        doc_terms = [term for term in doc_terms if term.strip()]\n        global_term_freq.update(doc_terms)\n    scores = []\n    for i in range(len(corpus)):\n        doc_terms = corpus[i].lower().split()\n        doc_terms = [term for term in doc_terms if term.strip()]\n        doc_len = doc_lengths[i]\n        tf_dict = term_freqs[i]\n        score = 0.0\n        for term in query_terms:\n            if term not in global_term_freq or term not in tf_dict:\n                continue\n            tf = tf_dict[term]\n            df = global_term_freq[term]\n            N = len(corpus)\n            numerator = tf * (k1 + 1)\n            denominator = tf + k1 * (1 - b + b * (doc_len / 100))\n            idf = np.log((N - df + 0.5) / (df + 0.5))\n            score += numerator / denominator * idf\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    from sklearn.metrics import f1_score\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of true and predicted labels must be the same.')\n    f1 = f1_score(y_true, y_pred, average='binary')\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(10):\n        day = i + 1\n        fluctuation = 10 * math.sin(2 * PI * day / 10)\n        detrended_value = consumption_data[i] - fluctuation\n        detrended_data.append(detrended_value)\n    x = list(range(1, 11))\n    y = detrended_data\n    n = len(x)\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_x2 = sum([xi ** 2 for xi in x])\n    sum_xy = sum([xi * yi for (xi, yi) in zip(x, y)])\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    day_15_base_consumption = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_consumption = day_15_base_consumption + fluctuation_day_15\n    rounded_total = round(total_consumption)\n    safety_margin = 0.05 * rounded_total\n    final_consumption = rounded_total + safety_margin\n    final_consumption = math.ceil(final_consumption)\n    return int(final_consumption)"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices from input X using weight matrices.\n    \n    Parameters:\n        X: Input matrix of shape (seq_len, d_model)\n        W_q: Weight matrix for Q of shape (d_model, d_k)\n        W_k: Weight matrix for K of shape (d_model, d_k)\n        W_v: Weight matrix for V of shape (d_model, d_k)\n    \n    Returns:\n        Q, K, V: Tensors of shape (seq_len, n_heads * d_k)\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, n_heads: int) -> np.ndarray:\n    \"\"\"\n    Perform self-attention on Q, K, and V matrices.\n    \n    Parameters:\n        Q: Query matrix of shape (seq_len, n_heads * d_k)\n        K: Key matrix of shape (seq_len, n_heads * d_k)\n        V: Value matrix of shape (seq_len, n_heads * d_k)\n        n_heads: Number of attention heads\n    \n    Returns:\n        Output of self-attention with shape (seq_len, d_model)\n    \"\"\"\n    (seq_len, d_total) = Q.shape\n    d_k = d_total // n_heads\n    Q = Q.reshape(n_heads, seq_len, d_k)\n    K = K.reshape(n_heads, seq_len, d_k)\n    V = V.reshape(n_heads, seq_len, d_k)\n    scores = np.matmul(Q, K.transpose(0, 2, 1)) / np.sqrt(d_k)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    context = np.matmul(attention_weights, V)\n    context = context.reshape(seq_len, -1)\n    return np.round(context, 4)\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-Head Attention mechanism.\n    \n    Parameters:\n        X: Input matrix of shape (seq_len, d_model)\n        W_q: Weight matrix for Q of shape (d_model, d_k)\n        W_k: Weight matrix for K of shape (d_model, d_k)\n        W_v: Weight matrix for V of shape (d_model, d_k)\n        n_heads: Number of attention heads\n    \n    Returns:\n        List of floats representing the output of multi-head attention\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    output = self_attention(Q, K, V, n_heads)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Both lists must have the same length.')\n    n = len(x)\n    n11 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 1))\n    n10 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 0))\n    n01 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 1))\n    n00 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 0))\n    n1_ = n11 + n10\n    n0_ = n01 + n00\n    _1 = n11 + n01\n    _0 = n10 + n00\n    numerator = n11 * n00 - n10 * n01\n    denominator = (n1_ * n0_) ** 0.5 * (_1 * _0) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n\n    Formula:\n        hard_sigmoid(x) = max(0, min(1, (x + 1.5) / 2))\n    \"\"\"\n    return max(0, min(1, (x + 1.5) / 2))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value, rounded to 4 decimal places\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x < 0:\n        return -math.log(1 + math.exp(-x))\n    else:\n        return math.log(1 + math.exp(x))"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places.\n    \"\"\"\n    return round(x / (abs(x) + 1), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value, rounded to 6 decimal places.\n    \"\"\"\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    obj = 0.0\n    for i in range(len(rhos)):\n        rho = rhos[i]\n        A_i = A[i]\n        pi_old = pi_theta_old[i]\n        pi_ref = pi_theta_ref[i]\n        term_unclipped = rho * A_i\n        term_clipped = clipped_rhos[i] * A_i\n        kl_penalty = beta * np.log(pi_old / pi_ref)\n        obj += np.minimum(term_unclipped, term_clipped) - kl_penalty\n    return round(obj, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    return round(x * sigmoid, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * alpha * (np.exp(x) - 1), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_output = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_output))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: Input features (N x D matrix)\n        y: One-hot encoded labels (N x C matrix)\n        learning_rate: Learning rate for gradient descent\n        iterations: Number of training iterations\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, D) = X.shape\n    C = y.shape[1]\n    W = np.random.randn(D, C)\n    losses = []\n    for _ in range(iterations):\n        scores = X @ W\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        correct_logprobs = -np.log(probs[range(N), y.argmax(axis=1)])\n        loss = np.sum(correct_logprobs) / N\n        losses.append(round(loss, 4))\n        dscores = probs\n        dscores[range(N), y.argmax(axis=1)] -= 1\n        dscores /= N\n        dW = X.T @ dscores\n        W += -learning_rate * dW\n    B = np.round(W, 4).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n        X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n        y (np.ndarray): Target vector of shape (n_samples,)\n        learning_rate (float): Learning rate for gradient descent\n        iterations (int): Number of iterations for training\n    \n    Returns:\n        tuple[list[float], list[float]]: \n            - A list of optimized coefficients (including intercept)\n            - A list of loss values over iterations (rounded to 4 decimals)\n    \"\"\"\n    X = np.c_[np.ones(X.shape[0]), X]\n    weights = np.zeros(X.shape[1])\n    losses = []\n    for _ in range(iterations):\n        z = X @ weights\n        y_pred = 1 / (1 + np.exp(-z))\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        gradient = 1 / X.shape[0] * X.T @ (y_pred - y)\n        weights -= learning_rate * gradient\n    weights_rounded = [round(w, 4) for w in weights]\n    return (weights_rounded, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Parameters:\n        Q: Query matrix of shape (batch_size, seq_len, d_k)\n        K: Key matrix of shape (batch_size, seq_len, d_k)\n        V: Value matrix of shape (batch_size, seq_len, d_k)\n        mask: Mask matrix of shape (batch_size, seq_len, seq_len), where 0 means \"ignore\" and 1 means \"attend\"\n    \n    Returns:\n        Output of shape (batch_size, seq_len, d_k), converted to Python list using tolist()\n    \"\"\"\n    scores = np.dot(Q, K.swapaxes(1, 2))\n    scores = scores + mask * -1000000000.0\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    - Disorder is 0 if all apples are the same color.\n    - Disorder increases with the variety and distribution of colors.\n    - The disorder is calculated using entropy from information theory.\n\n    Args:\n        apples (list): A list of integers representing apple colors.\n\n    Returns:\n        float: The disorder value, rounded to 4 decimal places.\n    \"\"\"\n    from collections import Counter\n    import math\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        prob = count / total_apples\n        entropy -= prob * math.log(prob, 2)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Applies Layer Normalization to a 3D input tensor.\n    \n    Parameters:\n    - X: Input tensor with shape (batch_size, sequence_length, feature_dim)\n    - gamma: Scaling parameter with shape (feature_dim,)\n    - beta: Shifting parameter with shape (feature_dim,)\n    - epsilon: Small value added to variance for numerical stability\n    \n    Returns:\n    - Normalized tensor with shape (batch_size, sequence_length, feature_dim),\n      rounded to 5 decimal places and converted to a list.\n    \"\"\"\n    if X.shape[2] != gamma.shape[0] or X.shape[2] != beta.shape[0]:\n        raise ValueError(\"Shape mismatch: gamma and beta must have the same number of features as X's last dimension.\")\n    (batch_size, seq_len, feature_dim) = X.shape\n    normalized_X = np.zeros_like(X)\n    for b in range(batch_size):\n        for s in range(seq_len):\n            x = X[b, s, :]\n            mean = np.mean(x)\n            var = np.var(x)\n            std = np.sqrt(var + epsilon)\n            normalized_x = (x - mean) / std\n            normalized_x = gamma * normalized_x + beta\n            normalized_X[b, s, :] = normalized_x\n    return np.round(normalized_X, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score between a reference translation and a candidate translation.\n    \n    Parameters:\n    - reference (str): The reference translation (target sentence).\n    - candidate (str): The candidate translation (machine-generated sentence).\n    - alpha (float): Weight for precision.\n    - beta (float): Exponent for F-measure.\n    - gamma (float): Weight for the fragmentation penalty.\n    \n    Returns:\n    - float: METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    ref_count = Counter(ref_tokens)\n    cand_count = Counter(cand_tokens)\n    common_words = set(ref_count.keys()) & set(cand_count.keys())\n    match_count = sum((min(ref_count[word], cand_count[word]) for word in common_words))\n    precision = match_count / len(cand_tokens) if cand_tokens else 0\n    recall = match_count / len(ref_tokens) if ref_tokens else 0\n    f_measure = (precision * recall) ** beta / (alpha * precision + (1 - alpha) * recall) ** beta\n\n    def align_words(ref, cand):\n        ref_idx = 0\n        cand_idx = 0\n        aligned_ref = []\n        aligned_cand = []\n        while ref_idx < len(ref) and cand_idx < len(cand):\n            if ref[ref_idx] == cand[cand_idx]:\n                aligned_ref.append(ref[ref_idx])\n                aligned_cand.append(cand[cand_idx])\n                ref_idx += 1\n                cand_idx += 1\n            elif cand[cand_idx] in ref[ref_idx:]:\n                pos = ref.index(cand[cand_idx], ref_idx)\n                aligned_ref.append(ref[pos])\n                aligned_cand.append(cand[cand_idx])\n                ref_idx = pos + 1\n                cand_idx += 1\n            else:\n                ref_idx += 1\n        return (aligned_ref, aligned_cand)\n    (aligned_ref, aligned_cand) = align_words(ref_tokens, cand_tokens)\n    fragment_penalty = 1 - len(aligned_ref) / max(len(ref_tokens), len(cand_tokens))\n    meteor = f_measure * (1 - gamma * fragment_penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute Pointwise Mutual Information (PMI) for two events.\n\n    Parameters:\n    - joint_counts: int, the number of times both events occurred together.\n    - total_counts_x: int, the total count of event X.\n    - total_counts_y: int, the total count of event Y.\n    - total_samples: int, the total number of samples.\n\n    Returns:\n    - float, PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    if p_x == 0 or p_y == 0:\n        return 0.0\n    pmi = np.log(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(num, 4) for num in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    if len(x.shape) == 1:\n        x = x.reshape(1, -1)\n    z1 = np.dot(x, w1)\n    z1_relu = np.maximum(z1, 0)\n    z2 = np.dot(z1_relu, w2)\n    shortcut = x\n    out = z2 + shortcut\n    final_out = np.maximum(out, 0)\n    return final_out.round(4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D input array.\n    \n    Parameters:\n        x (np.ndarray): Input array of shape (height, width, channels).\n        \n    Returns:\n        np.ndarray: Output array of shape (channels,), where each element is the average\n                     of all values in the corresponding feature map.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform batch normalization on a 4D input array (BCHW format).\n\n    Parameters:\n        X: Input tensor of shape (batch, channels, height, width)\n        gamma: Scale parameter of shape (channels,)\n        beta: Shift parameter of shape (channels,)\n        epsilon: Small value added to variance for numerical stability\n\n    Returns:\n        Normalized output tensor rounded to 4 decimal places.\n    \"\"\"\n    (B, C, H, W) = X.shape\n    X_flat = X.reshape(B * H * W, C)\n    mean = np.mean(X_flat, axis=0)\n    var = np.var(X_flat, axis=0)\n    X_normalized = (X_flat - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized * gamma + beta\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    return np.round(X_normalized, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of the polynomial term c * x^n at a given point x.\n    \n    The derivative is computed using the power rule: d/dx (c * x^n) = c * n * x^(n-1)\n    \n    Parameters:\n    - c (float): Coefficient of the term\n    - x (float): Point at which to evaluate the derivative\n    - n (float): Exponent of the term\n    \n    Returns:\n    - float: Derivative value rounded to 4 decimal places\n    \"\"\"\n    if n == 0:\n        return 0.0\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by a list of 2D vectors.\n    \n    Args:\n        vectors: A list of 2D vectors (each vector is a list of two floats).\n        tol: Tolerance value to determine linear independence (default is 1e-10).\n    \n    Returns:\n        A list of orthonormal vectors (unit length and orthogonal to each other),\n        rounded to 4 decimal places.\n    \"\"\"\n    vecs = np.array(vectors)\n    (n, m) = vecs.shape\n    orthonormal = []\n    for i in range(n):\n        if np.linalg.norm(vecs[i]) < tol:\n            continue\n        u = vecs[i].copy()\n        for j in range(len(orthonormal)):\n            proj = np.dot(u, orthonormal[j]) * orthonormal[j]\n            u -= proj\n        if np.linalg.norm(u) < tol:\n            continue\n        u /= np.linalg.norm(u)\n        orthonormal.append(u.tolist())\n    return [[round(x, 4) for x in vec] for vec in orthonormal]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3-dimensional vectors.\n    \n    Parameters:\n    a (list or np.ndarray): First 3D vector.\n    b (list or np.ndarray): Second 3D vector.\n    \n    Returns:\n    list: A list representing the cross product vector, rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    return result.round(4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n    A (np.ndarray): Square coefficient matrix of shape (n, n)\n    b (np.ndarray): Constant vector of shape (n,)\n    \n    Returns:\n    list: Solution vector x rounded to 4 decimal places if unique solution exists.\n          -1 if the system has no unique solution (determinant of A is zero).\n    \"\"\"\n    n = A.shape[0]\n    if A.shape[0] != A.shape[1] or b.shape[0] != n:\n        raise ValueError('A must be square and b must have the same length as the number of rows in A.')\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    x = []\n    for i in range(n):\n        A_i = np.copy(A)\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / det_A\n        x.append(round(x_i, 4))\n    return np.array(x).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    sum_sqrt = 0.0\n    for (pi, qi) in zip(p, q):\n        sum_sqrt += np.sqrt(pi * qi)\n    distance = -np.log(sum_sqrt)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    num_states = theta.shape[0]\n    num_actions = theta.shape[1]\n    grad = np.zeros((num_states, num_actions))\n    for episode in episodes:\n        returns = []\n        G = 0\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            G = reward + G\n            returns.append(G)\n        returns = returns[::-1]\n        for t in range(len(episode)):\n            (state, action, _) = episode[t]\n            state_idx = state\n            action_idx = action\n            exp_theta = np.exp(theta[state_idx])\n            prob = exp_theta / np.sum(exp_theta)\n            log_prob = np.log(prob[action_idx])\n            grad[state_idx, action_idx] += log_prob * returns[t]\n    grad /= len(episodes)\n    grad = np.round(grad, 4).tolist()\n    return grad"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = d_in * d_out * d_out\n    moe_flops = k_active * d_in * d_out\n    if dense_flops == 0:\n        return 0.0\n    savings_percentage = (1 - moe_flops / dense_flops) * 100\n    return round(savings_percentage, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating mechanism for Mixture-of-Experts (MoE).\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, d_model)\n    - W_g: Weight matrix for the gating network, shape (d_model, n_experts)\n    - W_noise: Noise matrix used to add noise to the gate scores, shape (n_experts,)\n    - N: Pre-sampled noise matrix of shape (batch_size, n_experts)\n    - k: Sparsity constraint, number of experts to activate per input\n\n    Returns:\n    - A list of probabilities after rounding to 4 decimal places.\n    \"\"\"\n    gate_scores = np.dot(X, W_g)\n    gate_scores += W_noise * N\n    top_k_indices = np.argsort(gate_scores, axis=1)[:, -k:]\n    output = np.zeros_like(gate_scores)\n    output[np.arange(gate_scores.shape[0])[:, None], top_k_indices] = 1.0\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Parameters:\n        x (np.ndarray): Input tensor of shape (batch_size, sequence_length, hidden_dim).\n        We (np.ndarray): Expert weight matrices of shape (n_experts, hidden_dim, expert_output_dim).\n        Wg (np.ndarray): Gating weight matrix of shape (hidden_dim, n_experts).\n        n_experts (int): Number of experts.\n        top_k (int): Number of top experts to select per token.\n\n    Returns:\n        np.ndarray: Output tensor of shape (batch_size, sequence_length, expert_output_dim), rounded to 4 decimal places.\n    \"\"\"\n    if len(x.shape) != 3:\n        raise ValueError('Input x must be a 3D tensor with shape (batch_size, sequence_length, hidden_dim).')\n    (batch_size, seq_len, hidden_dim) = x.shape\n    output_dim = We.shape[2]\n    gate_logits = np.dot(x, Wg.T)\n    gate_probs = np.apply_along_axis(lambda x: np.exp(x) / np.sum(np.exp(x)), axis=1, arr=gate_logits)\n    top_k_indices = np.argsort(gate_probs, axis=1)[:, -top_k:]\n    output = np.zeros((batch_size, seq_len, output_dim))\n    for i in range(batch_size):\n        for j in range(seq_len):\n            token_index = i * seq_len + j\n            probs = gate_probs[token_index, top_k_indices[token_index]]\n            probs /= np.sum(probs)\n            expert_outputs = []\n            for k in range(top_k):\n                expert_idx = top_k_indices[token_index, k]\n                expert_input = x[i, j, :]\n                expert_output = np.dot(expert_input, We[expert_idx])\n                expert_outputs.append(expert_output)\n            weighted_sum = np.sum([p * o for (p, o) in zip(probs, expert_outputs)], axis=0)\n            output[i, j, :] = weighted_sum\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor (B, C, H, W).\n\n    Parameters:\n        X: Input tensor with shape (B, C, H, W)\n        gamma: Scale parameter with shape (C,)\n        beta: Shift parameter with shape (C,)\n        num_groups: Number of groups to split the channels into\n        epsilon: Small value added to variance for numerical stability\n\n    Returns:\n        Normalized tensor with shape (B, C, H, W), rounded to 4 decimal places\n    \"\"\"\n    (B, C, H, W) = X.shape\n    if C % num_groups != 0:\n        raise ValueError('Number of groups must divide the number of channels.')\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_norm = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    X_norm = X_norm * gamma + beta\n    X_norm = np.round(X_norm, decimals=4)\n    return X_norm.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Find the value of x where the function f(x) = x^4 - 3x^3 + 2 reaches its minimum.\n    \n    Args:\n        start_x (float): Initial guess for x.\n        learning_rate (float): Step size for gradient descent.\n        tolerance (float): Stopping criterion for convergence.\n        max_iters (int): Maximum number of iterations.\n\n    Returns:\n        float: The x-value at which the function reaches its minimum, rounded to 4 decimal places.\n    \"\"\"\n    x = start_x\n    for _ in range(max_iters):\n        df = 4 * x ** 3 - 9 * x ** 2\n        x_new = x - learning_rate * df\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) function, a normalization-free transformation.\n    \n    Args:\n        x: Input array of shape (batch_size, sequence_length, hidden_dim).\n        alpha: Scaling parameter for the activation function.\n        gamma: Scaling factor for the input.\n        beta: Offset for the input.\n    \n    Returns:\n        A list of floats representing the DyT output, rounded to 4 decimal places.\n    \"\"\"\n    scaled_x = gamma * x + beta\n    dyt = alpha * (1 - np.exp(-2 * scaled_x)) / (1 + np.exp(-2 * scaled_x))\n    dyt_rounded = np.round(dyt, 4)\n    return dyt_rounded.tolist()"}
