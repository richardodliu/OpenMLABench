{"task_id": 1, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the dot product of a matrix and a vector.\n    \n    Args:\n        a: A matrix represented as a list of lists\n        b: A vector represented as a list\n        \n    Returns:\n        A list representing the resulting vector if dimensions are compatible,\n        or -1 if dimensions are incompatible\n    \"\"\"\n    if not a:\n        return -1\n    if not b:\n        return -1\n    num_cols = len(a[0])\n    if any((len(row) != num_cols for row in a)):\n        return -1\n    if num_cols != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((row[i] * b[i] for i in range(num_cols)))\n        result.append(dot_product)\n    return result\nassert matrix_dot_vector([[1, 2, 3], [2, 4, 5], [6, 8, 9]], [1, 2, 3]) == [14, 25, 49]\nassert matrix_dot_vector([[1, 2], [2, 4], [6, 8], [12, 4]], [1, 2, 3]) == -1\nassert matrix_dot_vector([[1.5, 2.5], [3.0, 4.0]], [2, 1]) == [5.5, 10.0]"}
{"task_id": 2, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Returns the transpose of the input matrix.\n    \n    Args:\n        a: A matrix represented as a list of lists where each inner list is a row\n        \n    Returns:\n        The transposed matrix where rows become columns and columns become rows\n        \n    Examples:\n        >>> transpose_matrix([[1, 2, 3], [4, 5, 6]])\n        [[1, 4], [2, 5], [3, 6]]\n        \n        >>> transpose_matrix([[1, 2], [3, 4], [5, 6]])\n        [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    if not a:\n        return []\n    return [list(row) for row in zip(*a)]\nassert transpose_matrix([[1,2],[3,4],[5,6]]) == [[1, 3, 5], [2, 4, 6]]\nassert transpose_matrix([[1,2,3],[4,5,6]]) == [[1, 4], [2, 5], [3, 6]]\nassert transpose_matrix([[1,2],[3,4]]) == [[1, 3], [2, 4]]"}
{"task_id": 3, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshape a matrix to a new shape if possible.\n    \n    Args:\n        a: Input matrix as a list of lists containing integers or floats\n        new_shape: Target shape as a tuple of (rows, columns)\n        \n    Returns:\n        Reshaped matrix as a list of lists, or empty list if reshaping is not possible\n    \"\"\"\n    try:\n        arr = np.array(a)\n        total_elements = arr.size\n        target_elements = new_shape[0] * new_shape[1]\n        if total_elements != target_elements:\n            return []\n        reshaped = arr.reshape(new_shape)\n        return reshaped.tolist()\n    except (ValueError, TypeError):\n        return []\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (4, 2)) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert reshape_matrix([[1, 2, 3, 4], [5, 6, 7, 8]], (1, 4)) == []\nassert reshape_matrix([[1,2,3],[4,5,6]], (3, 2)) == [[1, 2], [3, 4], [5, 6]]\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (2, 4)) == [[1, 2, 3, 4], [5, 6, 7, 8]]"}
{"task_id": 4, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    Args:\n        matrix: A 2D list (matrix) of floating-point numbers\n        mode: Either 'row' or 'column' to specify calculation direction\n    \n    Returns:\n        A list of mean values according to the specified mode\n    \n    Raises:\n        ValueError: If the mode is not 'row' or 'column' or if the matrix is empty\n    \"\"\"\n    if not matrix or not matrix[0]:\n        raise ValueError('Matrix cannot be empty')\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    else:\n        num_cols = len(matrix[0])\n        if not all((len(row) == num_cols for row in matrix)):\n            raise ValueError('All rows must have the same length')\n        means = []\n        for col_idx in range(num_cols):\n            col_sum = sum((row[col_idx] for row in matrix))\n            means.append(col_sum / len(matrix))\n        return means\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'column') == [4.0, 5.0, 6.0]\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'row') == [2.0, 5.0, 8.0]"}
{"task_id": 5, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiply each element of a matrix by a scalar value.\n    \n    Args:\n        matrix: A matrix represented as a list of lists\n        scalar: The scalar value to multiply by\n        \n    Returns:\n        A new matrix with each element multiplied by the scalar\n        \n    Example:\n        >>> scalar_multiply([[1, 2], [3, 4]], 2)\n        [[2, 4], [6, 8]]\n    \"\"\"\n    if not matrix:\n        return []\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result\nassert scalar_multiply([[1,2],[3,4]], 2) == [[2, 4], [6, 8]]\nassert scalar_multiply([[0,-1],[1,0]], -1) == [[0, 1], [-1, 0]]"}
{"task_id": 6, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nimport math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix.\n    \n    Args:\n        matrix: A 2x2 matrix represented as a list of lists.\n        \n    Returns:\n        A list of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    if discriminant >= 0:\n        eigenvalue1 = (trace + math.sqrt(discriminant)) / 2\n        eigenvalue2 = (trace - math.sqrt(discriminant)) / 2\n    else:\n        eigenvalue1 = trace / 2\n        eigenvalue2 = trace / 2\n    eigenvalues = [eigenvalue1, eigenvalue2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues\nassert calculate_eigenvalues([[2, 1], [1, 2]]) == [3.0, 1.0]\nassert calculate_eigenvalues([[4, -2], [1, 1]]) == [3.0, 2.0]"}
{"task_id": 7, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transform matrix A using the operation T^(-1)AS.\n    \n    Args:\n        A: Input matrix to transform\n        T: First transformation matrix (must be invertible)\n        S: Second transformation matrix (must be invertible)\n        \n    Returns:\n        Transformed matrix as a list of lists, or -1 if T or S is not invertible\n    \"\"\"\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    if abs(np.linalg.det(T_np)) < 1e-10 or abs(np.linalg.det(S_np)) < 1e-10:\n        return -1\n    try:\n        T_inv = np.linalg.inv(T_np)\n        result = T_inv @ A_np @ S_np\n        result = np.round(result, 4)\n        return result.tolist()\n    except np.linalg.LinAlgError:\n        return -1\nassert transform_matrix([[1, 2], [3, 4]], [[2, 0], [0, 2]], [[1, 1], [0, 1]]) == [[0.5,1.5],[1.5,3.5]]\nassert transform_matrix([[1, 0], [0, 1]], [[1, 2], [3, 4]], [[2, 0], [0, 2]]) == [[-4.0, 2.0], [3.0, -1.0]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [0, 1]]) == [[0.6667, 1.6667], [0.3333, 1.6667]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [1, 1]]) == -1"}
{"task_id": 8, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n    \n    Args:\n        matrix: A 2x2 matrix represented as a list of lists\n        \n    Returns:\n        The inverse matrix as a list of lists, or None if the matrix is not invertible\n    \"\"\"\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        raise ValueError('Input must be a 2x2 matrix')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse_determinant = 1 / determinant\n    return [[d * inverse_determinant, -b * inverse_determinant], [-c * inverse_determinant, a * inverse_determinant]]\nassert inverse_2x2([[4, 7], [2, 6]]) == [[0.6, -0.7], [-0.2, 0.4]]\nassert inverse_2x2([[2, 1], [6, 2]]) == [[-1.0, 0.5], [3.0, -1.0]]"}
{"task_id": 9, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not b:\n        return -1\n    rows_a = len(a)\n    if not all((len(row) == len(a[0]) for row in a)) or not all((len(row) == len(b[0]) for row in b)):\n        return -1\n    cols_a = len(a[0])\n    rows_b = len(b)\n    if cols_a != rows_b:\n        return -1\n    cols_b = len(b[0])\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\nassert matrixmul([[1,2,3],[2,3,4],[5,6,7]],[[3,2,1],[4,3,2],[5,4,3]]) == [[26, 20, 14], [38, 29, 20], [74, 56, 38]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0],[2,4]]) == [[0, 0], [8, 16], [4, 8]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0,1],[2,4,1],[1,2,3]]) == -1"}
{"task_id": 10, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Args:\n        vectors: A list of lists, where each inner list represents a feature with its observations.\n        \n    Returns:\n        A covariance matrix as a list of lists.\n    \"\"\"\n    n_features = len(vectors)\n    n_observations = len(vectors[0])\n    means = [sum(feature) / n_observations for feature in vectors]\n    covariance_matrix = [[0.0 for _ in range(n_features)] for _ in range(n_features)]\n    for i in range(n_features):\n        for j in range(n_features):\n            covariance = 0.0\n            for k in range(n_observations):\n                deviation_i = vectors[i][k] - means[i]\n                deviation_j = vectors[j][k] - means[j]\n                covariance += deviation_i * deviation_j\n            covariance_matrix[i][j] = covariance / (n_observations - 1)\n    return covariance_matrix\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6]]) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_covariance_matrix([[1, 5, 6], [2, 3, 4], [7, 8, 9]]) == [[7.0, 2.5, 2.5], [2.5, 1.0, 1.0], [2.5, 1.0, 1.0]]"}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Jacobi method.\n    \n    Args:\n        A: Coefficient matrix\n        b: Right-hand side vector\n        n: Number of iterations\n        \n    Returns:\n        Approximate solution as a Python list\n    \"\"\"\n    size = len(b)\n    x = np.zeros_like(b, dtype=float)\n    D = np.diag(A)\n    A_off_diag = A.copy()\n    np.fill_diagonal(A_off_diag, 0)\n    for _ in range(n):\n        x_new = (b - np.dot(A_off_diag, x)) / D\n        x_new = np.round(x_new, 4)\n        x = x_new\n    return x.tolist()\nassert solve_jacobi(np.array([[5, -2, 3], [-3, 9, 1], [2, -1, -7]]), np.array([-1, 2, 3]),2) == [0.146, 0.2032, -0.5175]\nassert solve_jacobi(np.array([[4, 1, 2], [1, 5, 1], [2, 1, 3]]), np.array([4, 6, 7]),5) == [-0.0806, 0.9324, 2.4422]\nassert solve_jacobi(np.array([[4,2,-2],[1,-3,-1],[3,-1,4]]), np.array([0,7,5]),3) == [1.7083, -1.9583, -0.7812]"}
{"task_id": 12, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the SVD of a 2x2 matrix using the Jacobi method.\n    \n    Args:\n        A: Input 2x2 matrix\n        \n    Returns:\n        tuple: (U, Sigma, V_T) where:\n            - U is a 2x2 orthogonal matrix\n            - Sigma is a 2x2 diagonal matrix with singular values\n            - V_T is the transpose of a 2x2 orthogonal matrix V\n    \"\"\"\n    ATA = A.T @ A\n    (a, b) = (ATA[0, 0], ATA[0, 1])\n    (c, d) = (ATA[1, 0], ATA[1, 1])\n    trace = a + d\n    det = a * d - b * c\n    discriminant = trace ** 2 - 4 * det\n    lambda1 = (trace + np.sqrt(discriminant)) / 2\n    lambda2 = (trace - np.sqrt(discriminant)) / 2\n    sigma1 = np.sqrt(max(0, lambda1))\n    sigma2 = np.sqrt(max(0, lambda2))\n    if sigma2 > sigma1:\n        (sigma1, sigma2) = (sigma2, sigma1)\n    if abs(b) < 1e-10 and abs(c) < 1e-10:\n        V = np.eye(2)\n    else:\n        v1 = np.array([b, lambda1 - a])\n        if np.linalg.norm(v1) < 1e-10:\n            v1 = np.array([lambda1 - d, c])\n        v1 = v1 / np.linalg.norm(v1)\n        v2 = np.array([-v1[1], v1[0]])\n        V = np.column_stack([v1, v2])\n    U = np.zeros((2, 2))\n    if sigma1 > 1e-10:\n        U[:, 0] = A @ V[:, 0] / sigma1\n    else:\n        U[:, 0] = np.array([1, 0])\n    U[:, 1] = np.array([-U[1, 0], U[0, 0]])\n    Sigma = np.zeros((2, 2))\n    Sigma[0, 0] = sigma1\n    Sigma[1, 1] = sigma2\n    U = np.round(U, 4)\n    Sigma = np.round(Sigma, 4)\n    V_T = np.round(V.T, 4)\n    return (U, Sigma, V_T)\nassert svd_2x2_singular_values(np.array([[2, 1], [1, 2]])) == ([[0.7071, -0.7071], [0.7071, 0.7071]], [3.0, 1.0], [[0.7071, 0.7071], [-0.7071, 0.7071]])\nassert svd_2x2_singular_values(np.array([[1, 2], [3, 4]])) == ([[0.4046, 0.9145], [0.9145, -0.4046]], [5.465, 0.366], [[0.576, 0.8174], [-0.8174, 0.576]])"}
{"task_id": 13, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's expansion.\n    \n    Args:\n        matrix: A 4x4 matrix represented as a list of lists\n        \n    Returns:\n        The determinant value as a float\n    \"\"\"\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Matrix must be 4x4')\n\n    def get_minor(matrix, i, j):\n        return [[matrix[row][col] for col in range(len(matrix)) if col != j] for row in range(len(matrix)) if row != i]\n\n    def calculate_determinant(matrix):\n        n = len(matrix)\n        if n == 2:\n            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n        det = 0\n        for j in range(n):\n            minor = get_minor(matrix, 0, j)\n            det += matrix[0][j] * calculate_determinant(minor) * (-1) ** j\n        return det\n    return calculate_determinant(matrix)\nassert determinant_4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 0\nassert determinant_4x4([[4, 3, 2, 1], [3, 2, 1, 4], [2, 1, 4, 3], [1, 4, 3, 2]]) == -160\nassert determinant_4x4([[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == 0"}
{"task_id": 14, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_array = np.array(X)\n    y_array = np.array(y)\n    X_transpose_X = X_array.T @ X_array\n    X_transpose_y = X_array.T @ y_array\n    coefficients = np.linalg.pinv(X_transpose_X) @ X_transpose_y\n    coefficients = np.round(coefficients, 4)\n    return coefficients.tolist()\nassert linear_regression_normal_equation([[1, 1], [1, 2], [1, 3]], [1, 2, 3]) == [0.0, 1.0]\nassert linear_regression_normal_equation([[1, 3, 4], [1, 2, 5], [1, 3, 2]], [1, 2, 1]) == [4.0, -1.0, -0.0]"}
{"task_id": 15, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Performs linear regression using gradient descent.\n    \n    Args:\n        X: Feature matrix with a column of ones for the intercept\n        y: Target values\n        alpha: Learning rate\n        iterations: Number of iterations\n        \n    Returns:\n        List of coefficients (weights) for the linear regression model\n    \"\"\"\n    (m, n) = X.shape\n    theta = np.zeros((n, 1))\n    y = y.reshape(-1, 1)\n    for _ in range(iterations):\n        predictions = X @ theta\n        errors = predictions - y\n        gradient = 1 / m * (X.T @ errors)\n        theta = theta - alpha * gradient\n    rounded_theta = np.round(theta, 4)\n    result = rounded_theta.flatten().tolist()\n    for i in range(len(result)):\n        if result[i] == -0.0:\n            result[i] = 0.0\n    return result\nassert linear_regression_gradient_descent(np.array([[1, 1], [1, 2], [1, 3]]), np.array([1, 2, 3]), 0.01, 1000) == [0.1107, 0.9513]"}
{"task_id": 16, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Performs feature scaling on a dataset using standardization and min-max normalization.\n    \n    Args:\n        data: 2D NumPy array where rows are samples and columns are features.\n        \n    Returns:\n        Tuple of two 2D lists:\n        - First list: data scaled using standardization\n        - Second list: data scaled using min-max normalization\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    std_safe = np.copy(std)\n    std_safe[std_safe == 0] = 1\n    standardized = (data - mean) / std_safe\n    zero_std_mask = std == 0\n    if np.any(zero_std_mask):\n        standardized[:, zero_std_mask] = 0\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    range_vals = max_vals - min_vals\n    range_safe = np.copy(range_vals)\n    range_safe[range_safe == 0] = 1\n    min_max_normalized = (data - min_vals) / range_safe\n    zero_range_mask = range_vals == 0\n    if np.any(zero_range_mask):\n        min_max_normalized[:, zero_range_mask] = 0.5\n    standardized = np.round(standardized, 4)\n    min_max_normalized = np.round(min_max_normalized, 4)\n    standardized_list = standardized.tolist()\n    min_max_list = min_max_normalized.tolist()\n    return (standardized_list, min_max_list)\nassert feature_scaling(np.array([[1, 2], [3, 4], [5, 6]])) == ([[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]])"}
{"task_id": 17, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Implements the k-means clustering algorithm.\n    \n    Args:\n        points: A list of points, where each point is a tuple of coordinates.\n        k: The number of clusters to form.\n        initial_centroids: A list of initial centroid points.\n        max_iterations: The maximum number of iterations to perform.\n        \n    Returns:\n        A list of the final centroids rounded to 4 decimal places.\n    \"\"\"\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        clusters = [[] for _ in range(k)]\n        for point in points_array:\n            distances = np.sum((point - centroids) ** 2, axis=1)\n            closest_centroid_idx = np.argmin(distances)\n            clusters[closest_centroid_idx].append(point)\n        previous_centroids = centroids.copy()\n        for i in range(k):\n            if clusters[i]:\n                centroids[i] = np.mean(clusters[i], axis=0)\n        if np.allclose(previous_centroids, centroids, atol=1e-08):\n            break\n    centroids = np.round(centroids, 4)\n    return [tuple((float(coord) for coord in centroid)) for centroid in centroids]\nassert k_means_clustering([(1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0)], 2, [(1, 1), (10, 1)], 10) == [(1.0, 2.0), (10.0, 2.0)]\nassert k_means_clustering([(0, 0, 0), (2, 2, 2), (1, 1, 1), (9, 10, 9), (10, 11, 10), (12, 11, 12)], 2, [(1, 1, 1), (10, 10, 10)], 10) == [(1.0, 1.0, 1.0), (10.3333, 10.6667, 10.3333)]\nassert k_means_clustering([(1, 1), (2, 2), (3, 3), (4, 4)], 1, [(0,0)], 10) == [(2.5, 2.5)]\nassert k_means_clustering([(0, 0), (1, 0), (0, 1), (1, 1), (5, 5), (6, 5), (5, 6), (6, 6),(0, 5), (1, 5), (0, 6), (1, 6), (5, 0), (6, 0), (5, 1), (6, 1)], 4, [(0, 0), (0, 5), (5, 0), (5, 5)], 10) == [(0.5, 0.5), (0.5, 5.5), (5.5, 0.5), (5.5, 5.5)]"}
{"task_id": 18, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test indices for k-fold cross-validation.\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        Features matrix.\n    y : np.ndarray\n        Target vector.\n    k : int, default=5\n        Number of folds.\n    shuffle : bool, default=True\n        Whether to shuffle the data before splitting.\n    random_seed : int or None, default=None\n        Random seed for reproducibility.\n        \n    Returns:\n    --------\n    folds : list of tuples\n        List of (train_indices, test_indices) tuples for each fold.\n    \"\"\"\n    if len(X) != len(y):\n        raise ValueError('X and y must have the same number of samples')\n    if k <= 1:\n        raise ValueError('k must be greater than 1')\n    n_samples = len(X)\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    fold_indices = np.array_split(indices, k)\n    folds = []\n    for i in range(k):\n        test_indices = fold_indices[i]\n        train_indices = np.concatenate([fold_indices[j] for j in range(k) if j != i])\n        folds.append((train_indices, test_indices))\n    return folds\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=5, shuffle=False) == [([2, 3, 4, 5, 6, 7, 8, 9], [0, 1]), ([0, 1, 4, 5, 6, 7, 8, 9], [2, 3]), ([0, 1, 2, 3, 6, 7, 8, 9], [4, 5]), ([0, 1, 2, 3, 4, 5, 8, 9], [6, 7]), ([0, 1, 2, 3, 4, 5, 6, 7], [8, 9])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=True, random_seed=42) == [([2, 9, 4, 3, 6], [8, 1, 5, 0, 7]), ([8, 1, 5, 0, 7], [2, 9, 4, 3, 6])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), k=3, shuffle=False) == [([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9]), ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=False) == [([5, 6, 7, 8, 9], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])]"}
{"task_id": 19, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Performs Principal Component Analysis on the input data.\n    \n    Args:\n        data: Input data matrix where rows are samples and columns are features\n        k: Number of principal components to return\n        \n    Returns:\n        A list of lists representing the top k principal components (eigenvectors)\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    std[std == 0] = 1.0\n    standardized_data = (data - mean) / std\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    eigenvalues = np.real(eigenvalues)\n    eigenvectors = np.real(eigenvectors)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4).tolist()\n    return principal_components\nassert pca(np.array([[4,2,1],[5,6,7],[9,12,1],[4,6,7]]),2) == [[0.6855, 0.0776], [0.6202, 0.4586], [-0.3814, 0.8853]]\nassert pca(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[0.7071], [0.7071]]"}
{"task_id": 20, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Build a decision tree using recursive binary splitting based on entropy and information gain.\n    \n    Args:\n        examples: List of dictionaries where each dictionary represents an example with attribute-value pairs\n        attributes: List of attribute names to consider for splitting\n        target_attr: The name of the target attribute to predict\n    \n    Returns:\n        A nested dictionary representing the decision tree\n    \"\"\"\n    if not examples:\n        return {'leaf': None}\n    target_values = [example[target_attr] for example in examples]\n    if len(set(target_values)) == 1:\n        return {'leaf': target_values[0]}\n    if not attributes:\n        counter = Counter(target_values)\n        most_common_target = counter.most_common(1)[0][0]\n        return {'leaf': most_common_target}\n    best_attr = choose_best_attribute(examples, attributes, target_attr)\n    tree = {'attribute': best_attr, 'branches': {}}\n    remaining_attrs = [attr for attr in attributes if attr != best_attr]\n    attr_values = set((example[best_attr] for example in examples))\n    for value in attr_values:\n        subset = [example for example in examples if example[best_attr] == value]\n        if not subset:\n            counter = Counter(target_values)\n            most_common_target = counter.most_common(1)[0][0]\n            tree['branches'][value] = {'leaf': most_common_target}\n        else:\n            tree['branches'][value] = learn_decision_tree(subset, remaining_attrs, target_attr)\n    return tree\ndef choose_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n    \"\"\"\n    Choose the best attribute to split on based on information gain.\n    \n    Args:\n        examples: List of example dictionaries\n        attributes: List of candidate attributes\n        target_attr: Target attribute name\n    \n    Returns:\n        The name of the attribute with the highest information gain\n    \"\"\"\n    target_values = [example[target_attr] for example in examples]\n    total_entropy = entropy(target_values)\n    best_gain = -1\n    best_attr = None\n    for attr in attributes:\n        value_subsets = {}\n        for example in examples:\n            value = example[attr]\n            if value not in value_subsets:\n                value_subsets[value] = []\n            value_subsets[value].append(example[target_attr])\n        attr_entropy = 0\n        for value_targets in value_subsets.values():\n            weight = len(value_targets) / len(examples)\n            attr_entropy += weight * entropy(value_targets)\n        gain = total_entropy - attr_entropy\n        if gain > best_gain:\n            best_gain = gain\n            best_attr = attr\n    return best_attr\ndef entropy(values: list) -> float:\n    \"\"\"\n    Calculate the entropy of a list of values.\n    \n    Args:\n        values: List of categorical values\n        \n    Returns:\n        The entropy of the value distribution\n    \"\"\"\n    if not values:\n        return 0\n    counter = Counter(values)\n    total = len(values)\n    result = 0\n    for count in counter.values():\n        probability = count / total\n        result -= probability * math.log2(probability)\n    return result\nassert learn_decision_tree([ {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Wind': 'Strong', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Sunny', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Overcast', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'} ], ['Outlook', 'Wind'], 'PlayTennis') == {'Outlook': {'Sunny': {'Wind': {'Weak': 'No', 'Strong': 'No'}}, 'Rain': {'Wind': {'Weak': 'Yes', 'Strong': 'No'}}, 'Overcast': 'Yes'}}"}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic version of the Pegasos algorithm for kernel SVM.\n    \n    Parameters:\n    -----------\n    data: np.ndarray\n        2D array where each row is a data sample\n    labels: np.ndarray\n        1D array of binary labels (should be +1 or -1)\n    kernel: str\n        The kernel to use ('linear' or 'rbf')\n    lambda_val: float\n        Regularization parameter\n    iterations: int\n        Number of iterations for training\n    sigma: float\n        Parameter for RBF kernel\n        \n    Returns:\n    --------\n    alphas: list\n        Alpha coefficients for each training sample\n    bias: float\n        The bias term for the SVM\n    \"\"\"\n    num_samples = data.shape[0]\n    alphas = np.zeros(num_samples)\n    bias = 0.0\n\n    def linear_kernel(x1, x2):\n        return np.dot(x1, x2)\n\n    def rbf_kernel(x1, x2):\n        return np.exp(-np.sum((x1 - x2) ** 2) / (2 * sigma ** 2))\n    if kernel == 'linear':\n        kernel_func = linear_kernel\n    elif kernel == 'rbf':\n        kernel_func = rbf_kernel\n    else:\n        raise ValueError(\"Kernel must be 'linear' or 'rbf'\")\n    K = np.zeros((num_samples, num_samples))\n    for i in range(num_samples):\n        for j in range(num_samples):\n            K[i, j] = kernel_func(data[i], data[j])\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        predictions = np.zeros(num_samples)\n        for i in range(num_samples):\n            for j in range(num_samples):\n                predictions[i] += alphas[j] * labels[j] * K[i, j]\n            predictions[i] += bias\n        margin_violations = labels * predictions < 1\n        alphas = (1 - eta * lambda_val) * alphas\n        for i in range(num_samples):\n            if margin_violations[i]:\n                alphas[i] += eta * labels[i]\n        if np.sum(margin_violations) > 0:\n            bias += eta * np.mean(labels[margin_violations])\n    alphas = np.round(alphas, 4)\n    bias = np.round(bias, 4)\n    return (alphas.tolist(), bias)\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='linear', lambda_val=0.01, iterations=100) == ([100.0, 0.0, -100.0, -100.0], -937.4755)\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([100.0, 99.0, -100.0, -100.0], -115.0)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([-100.0, 0.0, 100.0, 90.6128], -102.8081)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='linear', lambda_val=0.01, iterations=100) == ([-100.0, -100.0, 0.0, 0.0], -1037.4755)"}
{"task_id": 22, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation function value for input z.\n    \n    Args:\n        z (float): The input value\n    \n    Returns:\n        float: The sigmoid value of z, rounded to 4 decimal places\n    \"\"\"\n    sig_value = 1 / (1 + math.exp(-z))\n    return round(sig_value, 4)\nassert sigmoid(0) == 0.5\nassert sigmoid(1) == 0.7311\nassert sigmoid(-1) == 0.2689"}
{"task_id": 23, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax activation for a list of scores.\n    \n    Args:\n        scores: A list of floating-point numbers\n        \n    Returns:\n        A list of softmax values rounded to 4 decimal places\n    \"\"\"\n    max_score = max(scores)\n    shifted_scores = [score - max_score for score in scores]\n    exp_scores = [math.exp(score) for score in shifted_scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_scores = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_scores\nassert softmax([1, 2, 3]) == [0.09, 0.2447, 0.6652]\nassert softmax([1, 1, 1]) == [0.3333, 0.3333, 0.3333]\nassert softmax([-1, 0, 5]) == [0.0025, 0.0067, 0.9909]"}
{"task_id": 24, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    features_array = np.array(features)\n    labels_array = np.array(labels)\n    weights_array = np.array(weights)\n    z = np.dot(features_array, weights_array) + bias\n    predictions = 1 / (1 + np.exp(-z))\n    mse = np.mean(np.square(predictions - labels_array))\n    rounded_predictions = np.round(predictions, 4).tolist()\n    rounded_mse = round(mse, 4)\n    return (rounded_predictions, rounded_mse)\nassert single_neuron_model([[0.5, 1.0], [-1.5, -2.0], [2.0, 1.5]], [0, 1, 0], [0.7, -0.4], -0.1) == ([0.4626, 0.4134, 0.6682], 0.3349)\nassert single_neuron_model([[1, 2], [2, 3], [3, 1]], [1, 0, 1], [0.5, -0.2], 0) == ([0.525, 0.5987, 0.7858], 0.21)\nassert single_neuron_model([[2, 3], [3, 1], [1, 2]], [1, 0, 1], [0.5, -0.2], 1) == ([0.8022, 0.9089, 0.7503], 0.3092)"}
{"task_id": 25, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    for epoch in range(epochs):\n        z = np.dot(features, weights) + bias\n        y_pred = sigmoid(z)\n        mse = np.mean((y_pred - labels) ** 2)\n        mse_history.append(round(mse, 4))\n        gradient_factor = 2 * (y_pred - labels) * y_pred * (1 - y_pred) / len(labels)\n        dL_dw = np.dot(features.T, gradient_factor)\n        dL_db = np.sum(gradient_factor)\n        weights = weights - learning_rate * dL_dw\n        bias = bias - learning_rate * dL_db\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights.tolist(), bias, mse_history)\nassert train_neuron(np.array([[1.0, 2.0], [2.0, 1.0], [-1.0, -2.0]]), np.array([1, 0, 0]), np.array([0.1, -0.2]), 0.0, 0.1, 2) == ([0.1036, -0.1425], -0.0167, [0.3033, 0.2942])\nassert train_neuron(np.array([[1, 2], [2, 3], [3, 1]]), np.array([1, 0, 1]), np.array([0.5, -0.2]), 0, 0.1, 3) == ([0.4892, -0.2301], 0.0029, [0.21, 0.2087, 0.2076])\nassert train_neuron(np.array([[1, 3], [2, 1], [-1, -3]]), np.array([1, 0, 0]), np.array([-0.1, -0.2]), 0.0, 0.1, 2) == ([-0.087, -0.0951], -0.0131, [0.3513, 0.3227])"}
{"task_id": 26, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nclass Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (self.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()\n\n    def __radd__(self, other):\n        return self + other\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __neg__(self):\n        return self * -1\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'\na = Value(2)\nb = Value(3)\nc = Value(10)\nd = a + b * c \ne = Value(7) * Value(2)\nf = e + d\ng = f.relu() \ng.backward()\n\nassert a.data, a.grad == (2, 1)\nassert b.data, b.grad == (3, 10)\nassert c.data, c.grad == (10, 3)\nassert d.data, d.grad == (32, 1)\nassert e.data, e.grad == (14, 1)\nassert f.data, f.grad == (46, 1)\nassert g.data, g.grad == (46, 1)\na = Value(3)\nb = Value(4)\nc = Value(2)\nd = a * b + c \nd.backward()\n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (2, 1)\nassert d.data, d.grad == (14, 1)\na = Value(3)\nb = Value(4)\nc = Value(5)\nd = b * c \ne = a + d * b\ne.backward() \n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (5, 1)\nassert d.data, d.grad == (20, 1)\nassert e.data, e.grad == (83, 1)"}
{"task_id": 27, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B).T\n    C_matrix = np.array(C).T\n    P = np.linalg.inv(C_matrix) @ B_matrix\n    P = np.round(P, 4)\n    return P.tolist()\nassert transform_basis([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 2.3, 3], [4.4, 25, 6], [7.4, 8, 9]]) == [[-0.6772, -0.0126, 0.2342], [-0.0184, 0.0505, -0.0275], [0.5732, -0.0345, -0.0569]]\nassert transform_basis([[1,0],[0,1]],[[1,2],[9,2]]) == [[-0.125, 0.125 ],[ 0.5625, -0.0625]]\nassert transform_basis([[-1, 0], [3, 4]], [[2, -1], [0, 1]]) == [[1, 2], [3, 4]]\nassert transform_basis([[4, 8], [2, 4]], [[2, 1], [0, 1]]) == [[1, 2], [2, 4]]"}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Singular Value Decomposition (SVD) of a 2x2 matrix.\n    \n    Parameters:\n    A (np.ndarray): 2x2 matrix\n    \n    Returns:\n    tuple: (U, S, V) where A = U * S * V^T, with results rounded to 4 decimal places\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    eigenvalues = np.real(eigenvalues)\n    eigenvalues[eigenvalues < 0] = 0\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    V = np.real(eigenvectors)\n    singular_values = np.sqrt(eigenvalues)\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        elif i == 0:\n            U[:, i] = np.array([1, 0])\n        else:\n            U[:, i] = np.array([-U[1, 0], U[0, 0]])\n            norm = np.sqrt(U[0, i] ** 2 + U[1, i] ** 2)\n            if norm > 0:\n                U[:, i] /= norm\n    S = np.zeros((2, 2))\n    S[0, 0] = singular_values[0]\n    S[1, 1] = singular_values[1]\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())\nassert svd_2x2(np.array([[-10, 8], [10, -1]])) == ([[0.8, -0.6], [-0.6, -0.8]], [15.6525, 4.4721], [[-0.8944, 0.4472], [-0.4472, -0.8944]])\nassert svd_2x2(np.array([[1, 2], [3, 4]])) == ([[-0.4046, -0.9145], [-0.9145, 0.4046]], [5.465, 0.366], [[-0.576, -0.8174], [0.8174, -0.576]])\nassert svd_2x2(np.array([[3, 5], [7, 9]])) == ([[-0.4538, -0.8911], [-0.8911, 0.4538]], [12.791, 0.6254], [[-0.5941, -0.8044], [0.8044, -0.5941]])"}
{"task_id": 29, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffle two numpy arrays in the same order.\n    \n    Parameters:\n    -----------\n    X : numpy.ndarray\n        First array to shuffle\n    y : numpy.ndarray\n        Second array to shuffle\n    seed : int, optional\n        Random seed for reproducibility\n        \n    Returns:\n    --------\n    list, list\n        Shuffled X and y as Python lists\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_samples = len(X)\n    indices = np.random.permutation(n_samples)\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    X_list = X_shuffled.tolist()\n    y_list = y_shuffled.tolist()\n    return (X_list, y_list)\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([1, 2, 3, 4]), seed=42) == ([[3, 4], [7, 8], [1, 2], [5, 6]], [2, 4, 1, 3])\nassert shuffle_data(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), seed=24) == ([[4, 4],[2, 2],[1, 1],[3, 3]], [40, 20, 10, 30])\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([4, 6, 7, 8]), seed=10) == ([[5, 6], [1, 2], [7, 8], [3, 4]], [7, 4, 8, 6])\nassert shuffle_data(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), seed=20) == ([[1, 3], [3, 6], [5, 8], [7, 11]], [4, 5, 6, 7])"}
{"task_id": 30, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from X and optionally y.\n    \n    Parameters:\n    -----------\n    X : numpy.ndarray\n        Input features\n    y : numpy.ndarray, optional\n        Target values\n    batch_size : int, default=64\n        Size of each batch\n        \n    Yields:\n    -------\n    If y is None:\n        list: A batch of X samples as a Python list\n    If y is not None:\n        tuple: (X_batch, y_batch) where both are Python lists\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    for start_idx in range(0, n_samples, batch_size):\n        end_idx = min(start_idx + batch_size, n_samples)\n        batch_indices = indices[start_idx:end_idx]\n        X_batch = X[batch_indices].tolist()\n        if y is not None:\n            y_batch = y[batch_indices].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch\nassert batch_iterator(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), batch_size=2) == [[[[1, 2], [3, 4]], [1, 2]], [[[5, 6], [7, 8]], [3, 4]], [[[9, 10]], [5]]]\nassert batch_iterator(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), batch_size=3) == [[[1, 1], [2, 2], [3, 3]], [[4, 4]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), batch_size=2) == [[[1, 3], [3, 6]], [[5, 8], [7, 11]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), batch_size=2) == [[[[1, 3], [3, 6]], [4, 5]], [[[5, 8], [7, 11]], [6, 7]]]"}
{"task_id": 31, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide dataset based on if sample value of feature_i is >= threshold\n    \n    Parameters:\n    -----------\n    X : numpy array\n        Dataset where rows are samples and columns are features\n    feature_i : int\n        The index of the feature to divide on\n    threshold : float\n        The threshold value to divide the dataset on\n        \n    Returns:\n    --------\n    tuple (list, list)\n        Two lists containing samples where the feature value is greater than\n        or equal to the threshold and samples where it's less than the threshold\n    \"\"\"\n    X = np.array(X)\n    mask = X[:, feature_i] >= threshold\n    X_1 = X[mask]\n    X_2 = X[~mask]\n    return (X_1.tolist(), X_2.tolist())\nassert divide_on_feature(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), 0, 5) == [[[5, 6], [7, 8], [9, 10]], [[1, 2], [3, 4]]]\nassert divide_on_feature(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), 1, 3) == [[[3, 3], [4, 4]], [[1, 1], [2, 2]]]\nassert divide_on_feature(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), 0, 2) ==  [[[3, 6], [5, 8], [7, 11]], [[1, 3]]]\nassert divide_on_feature(np.array([[1, 3, 9], [6, 3, 6], [10, 5, 8], [9, 7, 11]]), 1, 5) ==  [[[10, 5, 8], [9, 7, 11]], [[1, 3, 9], [6, 3, 6]]]"}
{"task_id": 32, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features up to the specified degree.\n    \n    Parameters:\n    X (numpy.ndarray): 2D array where rows are samples and columns are features\n    degree (int): The maximum polynomial degree to generate\n    \n    Returns:\n    list: A 2D list containing the original data with polynomial features\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    combinations = []\n    for d in range(0, degree + 1):\n        combinations.extend(combinations_with_replacement(range(n_features), d))\n    n_output_features = len(combinations)\n    X_poly = np.ones((n_samples, n_output_features))\n    for (i, combo) in enumerate(combinations):\n        if len(combo) == 0:\n            continue\n        else:\n            X_poly[:, i] = np.prod(X[:, combo], axis=1)\n    return X_poly.tolist()\nassert polynomial_features(np.array([[2, 3], [3, 4], [5, 6]]), 2) == [[ 1., 2., 3., 4., 6., 9.], [ 1., 3., 4., 9., 12., 16.], [ 1., 5., 6., 25., 30., 36.]]\nassert polynomial_features(np.array([[1, 2], [3, 4], [5, 6]]), 3) == [[ 1., 1., 2., 1., 2., 4., 1., 2., 4., 8.], [ 1., 3., 4., 9., 12., 16., 27., 36., 48., 64.], [ 1., 5., 6., 25., 30., 36., 125., 150., 180., 216.]]\nassert polynomial_features(np.array([[1, 2, 3], [3, 4, 5], [5, 6, 9]]), 3) == [[ 1., 1., 2., 3., 1., 2., 3., 4., 6., 9., 1., 2., 3., 4., 6., 9., 8., 12., 18., 27.], [ 1., 3., 4., 5., 9., 12., 15., 16., 20., 25., 27., 36., 45., 48., 60., 75., 64., 80., 100., 125.],[ 1., 5., 6., 9., 25., 30., 45., 36., 54., 81., 125., 150., 225., 180., 270., 405., 216., 324., 486., 729.]]"}
{"task_id": 33, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n    \n    Parameters:\n        X (numpy.ndarray): 2D array of features\n        y (numpy.ndarray): 1D array of labels\n        n_subsets (int): Number of random subsets to generate\n        replacements (bool): Whether to sample with replacements\n        seed (int): Random seed for reproducibility\n    \n    Returns:\n        list: List of tuples where each tuple contains (X_subset, y_subset) as Python lists\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    random_subsets = []\n    for _ in range(n_subsets):\n        indices = np.random.choice(n_samples, n_samples, replace=replacements)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        random_subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return random_subsets\nassert get_random_subsets(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), 3, False, seed=42) == [([[3, 4], [9, 10]], [2, 5]), ([[7, 8], [3, 4]], [4, 2]), ([[3, 4], [1, 2]], [2, 1])]\nassert get_random_subsets(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), 1, True, seed=42) == [([[3, 3], [4, 4], [1, 1], [3, 3]], [30, 40, 10, 30])]\nassert get_random_subsets(np.array([[1, 3], [2, 4], [3, 5], [4, 6]]), np.array([1, 20, 30, 40]), 2, True, seed=42) == [([[3, 5], [4, 6], [1, 3], [3, 5]], [30, 40, 1, 30]), ([[3, 5], [4, 6], [1, 3], [1, 3]], [30, 40, 1, 1])]"}
{"task_id": 34, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D array of integer values to a one-hot encoded matrix.\n    \n    Parameters:\n    -----------\n    x : array-like\n        1D array of integer values to be encoded.\n    n_col : int, optional\n        Number of columns for the one-hot encoded array.\n        If None, determined automatically from the maximum value in x.\n        \n    Returns:\n    --------\n    list\n        One-hot encoded matrix as a Python list.\n    \"\"\"\n    x = np.array(x, dtype=int)\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((len(x), n_col), dtype=int)\n    for (i, val) in enumerate(x):\n        one_hot[i, val] = 1\n    return one_hot.tolist()\nassert to_categorical(np.array([0, 1, 2, 1, 0])) == [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 1., 0.], [1., 0., 0.]]\nassert to_categorical(np.array([3, 1, 2, 1, 3]), 4) == [[0., 0., 0., 1.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 1., 0., 0.], [0., 0., 0., 1.]]\nassert to_categorical(np.array([2, 3, 4, 1, 1]), 5) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]\nassert to_categorical(np.array([2, 4, 1, 1])) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]"}
{"task_id": 35, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n    \n    Parameters:\n    x (numpy.ndarray): 1D numpy array of values to place on the diagonal\n    \n    Returns:\n    list: A 2D list representation of the diagonal matrix\n    \"\"\"\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()\nassert make_diagonal(np.array([1, 2, 3])) == [[1., 0., 0.], [0., 2., 0.], [0., 0., 3.]]\nassert make_diagonal(np.array([4, 5, 6, 7])) == [[4., 0., 0., 0.], [0., 5., 0., 0.], [0., 0., 6., 0.], [0., 0., 0., 7.]]\nassert make_diagonal(np.array([2, 4, 1, 1])) == [[2.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nassert make_diagonal(np.array([1, 3, 5, 0])) == [[1.0, 0.0, 0.0, 0.0], [0.0, 3.0, 0.0, 0.0], [0.0, 0.0, 5.0, 0.0], [0.0, 0.0, 0.0, 0.0]]"}
{"task_id": 36, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    -----------\n    y_true : numpy.ndarray\n        The true labels.\n    y_pred : numpy.ndarray\n        The predicted labels.\n        \n    Returns:\n    --------\n    float\n        The accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must have the same length')\n    correct_predictions = np.sum(y_true == y_pred)\n    accuracy = correct_predictions / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 0, 1, 0, 1])) == 0.8333\nassert accuracy_score(np.array([1, 1, 1, 1]), np.array([1, 0, 1, 0])) == 0.5\nassert accuracy_score(np.array([1, 0, 1, 0, 1]), np.array([1, 0, 0, 1, 1])) == 0.6\nassert accuracy_score(np.array([0, 1, 0, 1]), np.array([1, 0, 1, 1])) == 0.25"}
{"task_id": 37, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        corr_matrix = np.corrcoef(X, rowvar=False)\n    else:\n        if X.shape[0] != Y.shape[0]:\n            raise ValueError('X and Y must have the same number of samples (rows)')\n        Z = np.concatenate([X, Y], axis=1)\n        full_corr = np.corrcoef(Z, rowvar=False)\n        n_x = X.shape[1]\n        corr_matrix = full_corr[:n_x, n_x:]\n    return np.round(corr_matrix, 4).tolist()\nassert calculate_correlation_matrix(np.array([[1, 2], [3, 4], [5, 6]])) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 2, 3], [7, 15, 6], [7, 8, 9]])) == [[1.0, 0.843, 0.866], [0.843, 1.0, 0.4611], [0.866, 0.4611, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[ -1.0, -1.0], [ 1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 3], [3, 6], [5, 8], [7, 11]])) == [[1.0, 0.9971], [0.9971, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 4], [3, 6]]), np.array([[8, 9], [7, 11]])) == [[-1.0, 1.0], [-1.0, 1.0]]"}
{"task_id": 38, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    y = np.where(y <= 0, -1, 1)\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = {}\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values >= threshold] = -1\n                    misclassified = predictions != y\n                    error = np.sum(weights[misclassified])\n                    if error < min_error:\n                        min_error = error\n                        best_clf = {'feature_idx': feature_idx, 'threshold': threshold, 'polarity': polarity}\n        epsilon = 1e-10\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + epsilon))\n        predictions = np.ones(n_samples)\n        if best_clf['polarity'] == 1:\n            predictions[X[:, best_clf['feature_idx']] < best_clf['threshold']] = -1\n        else:\n            predictions[X[:, best_clf['feature_idx']] >= best_clf['threshold']] = -1\n        weights = weights * np.exp(-alpha * y * predictions)\n        weights = weights / np.sum(weights)\n        best_clf['alpha'] = round(alpha, 4)\n        best_clf['threshold'] = round(best_clf['threshold'], 4)\n        classifiers.append(best_clf)\n    return classifiers\nassert adaboost_fit(np.array([[1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 1, -1, -1]), 3)  == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[8, 7], [3, 4], [5, 9], [4, 0], [1, 0], [0, 7], [3, 8], [4, 2], [6, 8], [0, 2]]), np.array([1, -1, 1, -1, 1, -1, -1, -1, 1, 1]), 2) == [{'polarity': 1, 'threshold': 5, 'feature_index': 0, 'alpha': 0.6931}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, 1, -1, -1]), 3) == [{'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, -1, 1, -1]), 2) == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}, {'polarity': -1, 'threshold': 7, 'feature_index': 0, 'alpha': 0.8047}]"}
{"task_id": 39, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores, dtype=float)\n    shifted_scores = scores_array - np.max(scores_array)\n    log_sum_exp = np.log(np.sum(np.exp(shifted_scores)))\n    log_softmax_values = shifted_scores - log_sum_exp\n    log_softmax_values = np.round(log_softmax_values, 4)\n    return log_softmax_values.tolist()\nassert log_softmax([1, 2, 3]) == [-2.4076, -1.4076, -0.4076]\nassert log_softmax([1, 1, 1]) == [-1.0986, -1.0986, -1.0986]\nassert log_softmax([1, 1, .0000001]) == [-0.862, -0.862, -1.862]"}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n    \n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nimport numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_optimizer = None\n        self.w0_optimizer = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, size=(self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_optimizer = copy.copy(optimizer)\n        self.w0_optimizer = copy.copy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        output = X.dot(self.W) + self.w0\n        return np.round(output, 4)\n\n    def backward_pass(self, accum_grad):\n        grad_X = accum_grad.dot(self.W.T)\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W_optimizer.update(self.W, grad_w)\n            self.w0 = self.w0_optimizer.update(self.w0, grad_w0)\n        return np.round(grad_X, 4)\n\n    def output_shape(self):\n        return (self.n_units,)\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[1, 2]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.1, 0.2, 0.3]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.2082, -0.2293]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[3, 5]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.2, 0.3, 0.4]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.287, -0.3126]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[2, 3]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.3, 0.4, 0.5]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.3658, -0.396]]"}
{"task_id": 41, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    if padding > 0:\n        padded_matrix = np.zeros((input_height + 2 * padding, input_width + 2 * padding))\n        padded_matrix[padding:padding + input_height, padding:padding + input_width] = input_matrix\n    else:\n        padded_matrix = input_matrix.copy()\n    output_height = (padded_matrix.shape[0] - kernel_height) // stride + 1\n    output_width = (padded_matrix.shape[1] - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            i_start = i * stride\n            j_start = j * stride\n            region = padded_matrix[i_start:i_start + kernel_height, j_start:j_start + kernel_width]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 0, 1)  == [[ 16., 21., 26., 31.], [ 41., 46., 51., 56.], [ 66., 71., 76., 81.], [ 91., 96., 101., 106.]]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [.5, 3.2], [1., -1.], ]), 2, 2)  == [[ 0., 0., 0., 0. ], [ 0., 5.9, 13.3, 12.5], [ 0., 42.9, 50.3, 27.5], [ 0., 80.9, 88.3, 12.5],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 1, 1)  == [[ -1., 1., 3., 5., 7., 15.], [ -4., 16., 21., 26., 31., 35.], [  1., 41., 46., 51., 56., 55.], [  6., 66., 71., 76., 81., 75.], [ 11., 91., 96., 101., 106., 95.], [ 42., 65., 68., 71., 74.,  25.],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 0, 1)  == [ [174., 194., 214.], [274., 294., 314.], [374., 394., 414.], ]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 1, 2)  == [ [51., 104., 51.], [234., 294., 110.], [301., 216., -35.], ]\nassert simple_conv2d(np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), 1, 1)  == [[16., 28., 16.], [24., 42., 24.], [16., 28., 16.]]"}
{"task_id": 42, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Args:\n        z (float): The input value\n        \n    Returns:\n        float: The output of the ReLU function (max(0, z))\n    \"\"\"\n    return max(0, z)\nassert relu(0) == 0\nassert relu(1) == 1\nassert relu(-1) == 0"}
{"task_id": 43, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X.dot(w)\n    n_samples = X.shape[0]\n    mse = np.sum((y_pred - y_true) ** 2) / n_samples\n    l2_term = alpha * np.sum(w ** 2)\n    loss = mse + l2_term\n    return round(loss, 4)\nassert ridge_loss(np.array([[1,1],[2,1],[3,1],[4,1]]), np.array([.2,2]), np.array([2,3,4,5]), 0.1) == 2.204\nassert ridge_loss(np.array([[1,1,4],[2,1,2],[3,1,.1],[4,1,1.2],[1,2,3]]), np.array([.2,2,5]), np.array([2,3,4,5,2]), 0.1) == 164.402\nassert ridge_loss(np.array([[3,4,1],[1,2,2],[1,.1,3],[1.2,1,4],[1,2,3]]), np.array([2,.2,5]), np.array([2,3,4,5,2]), 0.1) == 183.0721"}
{"task_id": 44, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Implements the Leaky ReLU activation function.\n    \n    Args:\n        z (float): The input value\n        alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n    \n    Returns:\n        float|int: The output after applying Leaky ReLU\n    \"\"\"\n    return z if z > 0 else alpha * z\nassert leaky_relu(5) == 5\nassert leaky_relu(1) == 1\nassert leaky_relu(-1) == -0.01\nassert leaky_relu(0) == 0\nassert leaky_relu(-2, alpha=0.1) == -0.2"}
{"task_id": 45, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors.\n    \n    The linear kernel is defined as the dot product of the two input vectors.\n    \n    Parameters:\n    -----------\n    x1 : array-like\n        First input vector\n    x2 : array-like\n        Second input vector\n        \n    Returns:\n    --------\n    float\n        The dot product between x1 and x2\n    \n    Examples:\n    ---------\n    >>> kernel_function(np.array([1, 2]), np.array([3, 4]))\n    11.0\n    \"\"\"\n    return np.dot(x1, x2)\nassert kernel_function(np.array([1, 2, 3]) , np.array([4, 5, 6]) ) == 32\nassert kernel_function(np.array([0, 1, 2]) , np.array([3, 4, 5]) ) == 14\nassert kernel_function(np.array([3, 1, 2, 5]) , np.array([3, 6, 4, 5]) ) == 48"}
{"task_id": 46, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Precision = TP / (TP + FP) = TP / (all predicted positives)\n    \n    Args:\n        y_true (numpy.ndarray): Array of true binary labels (0 or 1).\n        y_pred (numpy.ndarray): Array of predicted binary labels (0 or 1).\n        \n    Returns:\n        float: Precision score. Returns 0.0 if there are no predicted positives.\n    \"\"\"\n    true_positives = np.sum((y_pred == 1) & (y_true == 1))\n    false_positives = np.sum((y_pred == 1) & (y_true == 0))\n    predicted_positives = true_positives + false_positives\n    if predicted_positives == 0:\n        return 0.0\n    return true_positives / predicted_positives\nassert precision(np.array([1, 0, 1, 1, 0, 1])  , np.array([1, 0, 1, 0, 0, 1]) ) == 1.0\nassert precision(np.array([1, 0, 1, 1, 0, 0])  , np.array([1, 0, 0, 0, 0, 1]) ) == 0.5\nassert precision(np.array([1, 0, 1, 1, 0, 0, 1, 1])  , np.array([1, 0, 0, 0, 0, 1, 0, 0])) == 0.5"}
{"task_id": 47, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Implements three variants of gradient descent using MSE loss function.\n    \n    Parameters:\n    X: numpy array - Feature matrix of shape (m, n)\n    y: numpy array - Target values of shape (m,)\n    weights: list/array - Initial weights\n    learning_rate: float - Step size for gradient updates\n    n_iterations: int - Number of iterations to run\n    batch_size: int - Size of mini-batches (default=1 for SGD)\n    method: str - One of 'batch', 'stochastic', or 'mini-batch'\n    \n    Returns:\n    list - Optimized weights rounded to 4 decimal places\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float).reshape(-1, 1)\n    weights = np.array(weights, dtype=float).reshape(-1, 1)\n    m = X.shape[0]\n    if method == 'batch':\n        for _ in range(n_iterations):\n            predictions = np.dot(X, weights)\n            errors = predictions - y\n            gradient = 2 / m * np.dot(X.T, errors)\n            weights = weights - learning_rate * gradient\n    elif method == 'stochastic':\n        for _ in range(n_iterations):\n            for i in range(m):\n                xi = X[i:i + 1]\n                yi = y[i:i + 1]\n                prediction = np.dot(xi, weights)\n                error = prediction - yi\n                gradient = 2 * np.dot(xi.T, error)\n                weights = weights - learning_rate * gradient\n    elif method == 'mini-batch':\n        for _ in range(n_iterations):\n            indices = np.random.permutation(m)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for i in range(0, m, batch_size):\n                batch_end = min(i + batch_size, m)\n                X_batch = X_shuffled[i:batch_end]\n                y_batch = y_shuffled[i:batch_end]\n                batch_size_actual = X_batch.shape[0]\n                predictions = np.dot(X_batch, weights)\n                errors = predictions - y_batch\n                gradient = 2 / batch_size_actual * np.dot(X_batch.T, errors)\n                weights = weights - learning_rate * gradient\n    weights = np.round(weights, 4)\n    return weights.reshape(-1).tolist()\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='batch') == [1.1491, 0.5618]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='stochastic') == [1.0508, 0.8366]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, 2, method='mini_batch') == [1.1033, 0.6833]"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a matrix to its Reduced Row Echelon Form (RREF).\n    \n    Args:\n        matrix: A 2D list or numpy array representing a matrix\n        \n    Returns:\n        The RREF of the input matrix as a list of lists\n    \"\"\"\n    A = np.array(matrix, dtype=float)\n    (rows, cols) = A.shape\n    r = 0\n    for c in range(cols):\n        pivot_row = None\n        for i in range(r, rows):\n            if abs(A[i, c]) > 1e-10:\n                pivot_row = i\n                break\n        if pivot_row is not None:\n            if pivot_row != r:\n                A[[r, pivot_row]] = A[[pivot_row, r]]\n            pivot_value = A[r, c]\n            A[r] = A[r] / pivot_value\n            for i in range(rows):\n                if i != r:\n                    factor = A[i, c]\n                    A[i] = A[i] - factor * A[r]\n            r += 1\n            if r == rows:\n                break\n    A[abs(A) < 1e-10] = 0\n    return A.tolist()\nassert rref(np.array([ [1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22] ])) == [[ 1., 0., 0., -8.], [ 0., 1., 0., 1.], [-0., -0., 1., -2.]]\nassert rref(np.array([ [2, 4, -2], [4, 9, -3], [-2, -3, 7] ])) == [[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]\nassert rref(np.array([ [0, 2, -1, -4], [2, 0, -1, -11], [-2, 0, 0, 22] ])) == [[ 1., 0., 0., -11.],[-0., 1., 0., -7.5],[-0., -0., 1., -11.]]\nassert rref(np.array([ [1, 2, -1], [2, 4, -1], [-2, -4, -3]])) == [[ 1., 2., 0.],[ 0., 0., 0.],[-0., -0., 1.]]"}
{"task_id": 49, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n    \n    Args:\n        f (function): The objective function to minimize\n        grad (function): A function that computes the gradient of f\n        x0 (numpy.ndarray): Initial parameter values\n        learning_rate (float): Step size parameter (default: 0.001)\n        beta1 (float): Exponential decay rate for first moment estimates (default: 0.9)\n        beta2 (float): Exponential decay rate for second moment estimates (default: 0.999)\n        epsilon (float): Small constant for numerical stability (default: 1e-8)\n        num_iterations (int): Number of iterations to run the optimizer (default: 10)\n    \n    Returns:\n        list: Optimized parameters as a Python list\n    \"\"\"\n    x = np.copy(x0)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * np.square(g)\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    x = np.round(x, 4)\n    return x.tolist()\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1.0, 1.0])) == [0.99, 0.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([0.2, 12.3])) == [ 0.19, 12.29]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1, 3])) == [0.99, 2.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([5, 8])) == [4.99, 7.99]"}
{"task_id": 50, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implements Lasso Regression using Gradient Descent\n    \n    Parameters:\n    X (np.array): Feature matrix of shape (n_samples, n_features)\n    y (np.array): Target vector of shape (n_samples,)\n    alpha (float): Regularization parameter\n    learning_rate (float): Learning rate for gradient descent\n    max_iter (int): Maximum number of iterations\n    tol (float): Tolerance for convergence\n    \n    Returns:\n    tuple: (weights, bias) where weights is a list and bias is a float\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0\n    cost_history = []\n    for iteration in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        errors = y - y_pred\n        dw = -(1 / n_samples) * np.dot(X.T, errors) + alpha * np.sign(weights)\n        db = -(1 / n_samples) * np.sum(errors)\n        weights = weights - learning_rate * dw\n        bias = bias - learning_rate * db\n        mse = 1 / (2 * n_samples) * np.sum(errors ** 2)\n        l1_penalty = alpha * np.sum(np.abs(weights))\n        cost = mse + l1_penalty\n        cost_history.append(cost)\n        if iteration > 0 and abs(cost_history[-1] - cost_history[-2]) < tol:\n            break\n    weights = np.round(weights, 4)\n    bias = np.round(bias, 4)\n    return (weights.tolist(), bias)\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.4237, 0.4237], 0.1539)\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=5000)  == ([0.4249, 0.4249], 0.1504)\nassert l1_regularization_gradient_descent(np.array([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 2, 3, 4, 5]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.2728, 0.6811], 0.4083)"}
{"task_id": 51, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment distance between two strings.\n    \n    Args:\n        source (str): The source string\n        target (str): The target string\n        \n    Returns:\n        int: The minimum number of operations required to transform source into target\n    \"\"\"\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i, 0] = i\n    for j in range(n + 1):\n        dp[0, j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i, j] = dp[i - 1, j - 1]\n            else:\n                deletion = dp[i - 1, j] + 1\n                insertion = dp[i, j - 1] + 1\n                substitution = dp[i - 1, j - 1] + 1\n                dp[i, j] = min(deletion, insertion, substitution)\n                if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                    dp[i, j] = min(dp[i, j], dp[i - 2, j - 2] + 1)\n    return dp[m, n]\nassert OSA(\"butterfly\", \"dragonfly\") == 6\nassert OSA(\"caper\", \"acer\") == 2\nassert OSA(\"telescope\", \"microscope\") == 5\nassert OSA(\"london\", \"paris\") == 6\nassert OSA(\"shower\", \"grower\") == 2\nassert OSA(\"labyrinth\", \"puzzle\") == 9\nassert OSA(\"silhouette\", \"shadow\") == 8\nassert OSA(\"whisper\", \"screaming\") == 9\nassert OSA(\"enigma\", \"mystery\") == 7\nassert OSA(\"symphony\", \"cacophony\") == 4\nassert OSA(\"mirage\", \"oasis\") == 6\nassert OSA(\"asteroid\", \"meteorite\") == 5\nassert OSA(\"palindrome\", \"palladium\") == 5"}
{"task_id": 52, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate recall metric for binary classification.\n    \n    Parameters:\n        y_true (list): List of true binary labels (0 or 1)\n        y_pred (list): List of predicted binary labels (0 or 1)\n        \n    Returns:\n        float: Recall score rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_negatives = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = true_positives + false_negatives\n    if denominator == 0:\n        return 0.0\n    return round(true_positives / denominator, 3)\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1])) == 0.75\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1])) == 0.333\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0])) == 1.0\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1])) == 0.5\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 0, 1, 0])) == 0.0\nassert recall(np.array([1, 0, 0, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 0])) == 0.667"}
{"task_id": 53, "completion_id": 0, "passed": false, "result": "failed: axes don't match array", "solution": "import numpy as np\nimport numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Computes self-attention over the input sequence.\n    \n    Args:\n        X: Input tensor of shape (batch_size, seq_len, d_model)\n        W_q: Query weight matrix of shape (d_model, d_k)\n        W_k: Key weight matrix of shape (d_model, d_k)\n        W_v: Value weight matrix of shape (d_model, d_v)\n        \n    Returns:\n        attention_output: Self-attention output as a Python list\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    K_T = np.transpose(K, (0, 2, 1))\n    attention_scores = np.matmul(Q, K_T)\n    d_k = K.shape[-1]\n    attention_scores = attention_scores / np.sqrt(d_k)\n    scores_max = np.max(attention_scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(attention_scores - scores_max)\n    attention_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    attention_output = np.matmul(attention_weights, V)\n    attention_output = np.round(attention_output, 4).tolist()\n    return attention_output\nassert self_attention(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[1.6605, 2.6605], [2.3395, 3.3395]]\nassert self_attention(np.array([[1, 1], [1, 0]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[3.0093, 4.679], [2.5, 4.0]]\nassert self_attention(np.array([[1, 0, 1], [0, 1, 1], [1, 1, 0]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[8.0, 10.0, 12.0], [8.6199, 10.6199, 12.6199], [7.3801, 9.3801, 11.3801]]"}
{"task_id": 54, "completion_id": 0, "passed": false, "result": "failed: shapes (3,) and (2,3) not aligned: 3 (dim 0) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x_t in input_sequence:\n        hidden_state = np.tanh(np.dot(x_t, Wx) + np.dot(hidden_state, Wh) + b)\n    final_hidden_state = np.round(hidden_state, 4).tolist()\n    return final_hidden_state\nassert rnn_forward([[1.0], [2.0], [3.0]], [0.0], [[0.5]], [[0.8]], [0.0]) == [0.9759]\nassert rnn_forward([[0.5], [0.1], [-0.2]], [0.0], [[1.0]], [[0.5]], [0.1]) == [0.118]\nassert rnn_forward( [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [0.0, 0.0], [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8], [0.9, 1.0]], [0.1, 0.2] ) == [0.7474, 0.9302]"}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Apply a 2D translation matrix to a set of points.\n    \n    Parameters:\n    points (list): List of [x, y] coordinates\n    tx (float): Translation distance in x direction\n    ty (float): Translation distance in y direction\n    \n    Returns:\n    list: New list of translated points\n    \"\"\"\n    points_np = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_np, np.ones((len(points_np), 1))))\n    translated_homogeneous_points = np.dot(homogeneous_points, translation_matrix.T)\n    translated_points = translated_homogeneous_points[:, :2]\n    return translated_points.tolist()\nassert translate_object([[0, 0], [1, 0], [0.5, 1]], 2, 3) ==  [[2.0, 3.0], [3.0, 3.0], [2.5, 4.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], -1, 2) == [[-1.0, 2.0], [0.0, 2.0], [0.0, 3.0], [-1.0, 3.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], 2, 3) == [[2.0, 3.0], [3.0, 3.0], [3.0, 4.0], [2.0, 4.0]]"}
{"task_id": 56, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the KL divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: KL divergence from P to Q\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        return float('inf')\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    term3 = -0.5\n    kl_div = term1 + term2 + term3\n    return kl_div\nassert kl_divergence_normal(0.0, 1.0, 0.0, 1.0) == 0.0\nassert kl_divergence_normal(0.0, 1.0, 1.0, 1.0) == 0.5\nassert kl_divergence_normal(0.0, 1.0, 0.0, 2.0) == 0.3181471805599453\nassert kl_divergence_normal(1.0, 1.0, 0.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(2.0, 1.0, 3.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(0.0, 2.0, 0.0, 3.0) == 0.1276873303303866"}
{"task_id": 57, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve a system of linear equations Ax = b using the Gauss-Seidel method.\n    \n    Parameters:\n    - A: Square matrix of coefficients\n    - b: Right-hand side vector\n    - n: Number of iterations\n    - x_ini: Optional initial guess for the solution vector\n    \n    Returns:\n    - Approximated solution vector after n iterations\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    size = len(b)\n    if x_ini is None:\n        x = np.zeros(size)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(size):\n            sum1 = np.sum(A[i][:i] * x[:i])\n            sum2 = np.sum(A[i][i + 1:] * x[i + 1:])\n            x[i] = (b[i] - sum1 - sum2) / A[i][i]\n    x = np.round(x, 4)\n    return x.tolist()\nassert gauss_seidel(np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float), np.array([4, 7, 3], dtype=float), 5) == [0.5008, 0.9997, 0.4998]\nassert gauss_seidel(np.array([[4, -1, 0, 1], [-1, 4, -1, 0], [0, -1, 4, -1], [1, 0, -1, 4]], dtype=float), np.array([15, 10, 10, 15], dtype=float), 1) == [3.75, 3.4375, 3.3594, 3.6523]\nassert gauss_seidel(np.array([[10, -1, 2], [-1, 11, -1], [2, -1, 10]], dtype=float), np.array([6, 25, -11], dtype=float), 100) == [1.0433, 2.2692, -1.0817]"}
{"task_id": 58, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solve the linear system Ax = b using Gaussian elimination with partial pivoting.\n    \n    Parameters:\n    A (array-like): Coefficient matrix\n    b (array-like): Right-hand side vector\n    \n    Returns:\n    list: Solution vector rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if b.ndim == 1:\n        b = b.reshape(-1, 1)\n    n = len(A)\n    aug = np.column_stack((A, b))\n    for i in range(n):\n        pivot_row = i\n        for j in range(i + 1, n):\n            if abs(aug[j, i]) > abs(aug[pivot_row, i]):\n                pivot_row = j\n        if pivot_row != i:\n            aug[[i, pivot_row]] = aug[[pivot_row, i]]\n        if abs(aug[i, i]) < 1e-10:\n            raise ValueError('Matrix is singular or nearly singular')\n        for j in range(i + 1, n):\n            factor = aug[j, i] / aug[i, i]\n            aug[j, i:] = aug[j, i:] - factor * aug[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = aug[i, -1]\n        for j in range(i + 1, n):\n            x[i] = x[i] - aug[i, j] * x[j]\n        x[i] = x[i] / aug[i, i]\n    x = np.round(x, 4)\n    return x.tolist()\nassert gaussian_elimination(np.array([[2,8,4], [2,5,1], [4,10,-1]], dtype=float), np.array([2,5,1], dtype=float)) == [11.0, -4.0, 3.0]\nassert gaussian_elimination(np.array([ [0, 2, 1, 0, 0, 0, 0], [2, 6, 2, 1, 0, 0, 0], [1, 2, 7, 2, 1, 0, 0], [0, 1, 2, 8, 2, 1, 0], [0, 0, 1, 2, 9, 2, 1], [0, 0, 0, 1, 2, 10, 2], [0, 0, 0, 0, 1, 2, 11] ], dtype=float), np.array([1, 2, 3, 4, 5, 6, 7], dtype=float)) == [-0.4894, 0.3617, 0.2766, 0.2554, 0.319, 0.4039, 0.5339]\nassert gaussian_elimination(np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float), np.array([8, -11, -3], dtype=float)) == [2.0, 3.0, -1.0]"}
{"task_id": 59, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \n        Args:\n            x: Input sequence of shape (seq_len, input_size)\n            initial_hidden_state: Initial hidden state of shape (hidden_size, 1)\n            initial_cell_state: Initial cell state of shape (hidden_size, 1)\n            \n        Returns:\n            hidden_states: Hidden states at each time step\n            final_hidden_state: Final hidden state\n            final_cell_state: Final cell state\n        \"\"\"\n\n        def sigmoid(x):\n            return 1 / (1 + np.exp(-x))\n        seq_len = x.shape[0]\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        hidden_states = []\n        for t in range(seq_len):\n            x_t = x[t].reshape(-1, 1)\n            concat = np.vstack((x_t, h_t))\n            f_t = sigmoid(np.dot(self.Wf, concat) + self.bf)\n            i_t = sigmoid(np.dot(self.Wi, concat) + self.bi)\n            c_tilde = np.tanh(np.dot(self.Wc, concat) + self.bc)\n            c_t = f_t * c_t + i_t * c_tilde\n            o_t = sigmoid(np.dot(self.Wo, concat) + self.bo)\n            h_t = o_t * np.tanh(c_t)\n            hidden_states.append(h_t)\n        hidden_states = np.round(np.array(hidden_states), 4)\n        final_h = np.round(h_t, 4)\n        final_c = np.round(c_t, 4)\n        hidden_states = hidden_states.tolist()\n        final_h = final_h.tolist()\n        final_c = final_c.tolist()\n        return (hidden_states, final_h, final_c)\ninput_sequence = np.array([[1.0], [2.0], [3.0]]) \ninitial_hidden_state = np.zeros((1, 1)) \ninitial_cell_state = np.zeros((1, 1)) \nlstm = LSTM(input_size=1, hidden_size=1) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.5, 0.5]]) \nlstm.Wi = np.array([[0.5, 0.5]]) \nlstm.Wc = np.array([[0.3, 0.3]]) \nlstm.Wo = np.array([[0.5, 0.5]]) \nlstm.bf = np.array([[0.1]]) \nlstm.bi = np.array([[0.1]]) \nlstm.bc = np.array([[0.1]]) \nlstm.bo = np.array([[0.1]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.7370]]\ninput_sequence = np.array([[0.1, 0.2], [0.3, 0.4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.1661], [0.4030]]\ninput_sequence = np.array([[1, 3], [2, 4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.8543], [0.9567]]"}
{"task_id": 60, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport math\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute TF-IDF scores for query terms against a corpus of documents.\n    \n    Args:\n        corpus: List of documents, where each document is a list of words\n        query: List of words to compute TF-IDF scores for\n        \n    Returns:\n        List of lists containing TF-IDF scores for each query term in each document\n    \"\"\"\n    if not corpus:\n        return []\n    tf_idf_matrix = np.zeros((len(corpus), len(query)))\n    for (doc_idx, document) in enumerate(corpus):\n        if not document:\n            continue\n        doc_length = len(document)\n        for (term_idx, term) in enumerate(query):\n            term_count = document.count(term)\n            tf = term_count / doc_length\n            tf_idf_matrix[doc_idx, term_idx] = tf\n    for (term_idx, term) in enumerate(query):\n        doc_count = sum((1 for doc in corpus if term in doc))\n        idf = math.log((len(corpus) + 1) / (doc_count + 1)) + 1\n        tf_idf_matrix[:, term_idx] *= idf\n    tf_idf_matrix = np.round(tf_idf_matrix, 4)\n    return tf_idf_matrix.tolist()\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ] , [\"cat\"]) == [[0.2146], [0.2575], [0.0]]\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ], [\"cat\", \"mat\"]) == [[0.2146, 0.2146], [0.2575, 0.0], [0.0, 0.2146]]\nassert compute_tf_idf([ [\"this\", \"is\", \"a\", \"sample\"], [\"this\", \"is\", \"another\", \"example\"], [\"yet\", \"another\", \"sample\", \"document\"], [\"one\", \"more\", \"document\", \"for\", \"testing\"] ], [\"sample\", \"document\", \"test\"]) == [[0.3777, 0.0, 0.0], [0.0, 0.0, 0.0], [0.3777, 0.3777, 0.0], [0.0, 0.3022, 0.0]]"}
{"task_id": 61, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    true_positive = np.sum((y_true == 1) & (y_pred == 1))\n    false_positive = np.sum((y_true == 0) & (y_pred == 1))\n    false_negative = np.sum((y_true == 1) & (y_pred == 0))\n    precision = true_positive / (true_positive + false_positive) if true_positive + false_positive > 0 else 0\n    recall = true_positive / (true_positive + false_negative) if true_positive + false_negative > 0 else 0\n    if precision == 0 and recall == 0:\n        return 0.0\n    f_score_value = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score_value, 3)\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1]), 1) == 0.857\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1]), 1) == 0.4\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0]), 2) == 1.0\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1]), 2) == 0.556\nassert f_score(np.array([1, 1, 1, 1, 0, 0, 0]), np.array([0, 1, 0, 1, 1, 0, 0]), 3) == 0.513"}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            x: sequence of inputs, each with shape (input_size, 1)\n            \n        Returns:\n            outputs: list of outputs at each time step\n            last_inputs: list of inputs at each time step\n            last_hiddens: list of hidden states at each time step\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.rnn_forward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x)\n        return outputs\n\n    def backward(self, x, expected_output, learning_rate=0.01):\n        \"\"\"\n        Backward pass through the RNN to update weights using BPTT.\n        \n        Args:\n            x: sequence of inputs\n            expected_output: expected outputs\n            learning_rate: learning rate for weight updates\n            \n        Returns:\n            loss: total loss across all time steps\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.rnn_forward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x)\n        (self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, loss) = self.rnn_backward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n        return loss\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns outputs and internal states.\n        \n        Args:\n            W_xh: Weight matrix for input to hidden connections\n            W_hh: Weight matrix for hidden to hidden connections\n            W_hy: Weight matrix for hidden to output connections\n            b_h: Bias for hidden layer\n            b_y: Bias for output layer\n            hidden_size: Size of the hidden layer\n            input_sequence: Sequence of inputs, each with shape (input_size, 1)\n            \n        Returns:\n            outputs: List of outputs at each time step\n            last_inputs: List of inputs at each time step\n            last_hiddens: List of hidden states at each time step\n        \"\"\"\n        T = len(input_sequence)\n        last_inputs = []\n        last_hiddens = [np.zeros((hidden_size, 1))]\n        outputs = []\n        for t in range(T):\n            xt = np.array(input_sequence[t]).reshape(-1, 1)\n            last_inputs.append(xt)\n            hidden = np.tanh(np.dot(W_xh, xt) + np.dot(W_hh, last_hiddens[t]) + b_h)\n            last_hiddens.append(hidden)\n            yt = np.dot(W_hy, hidden) + b_y\n            outputs.append(yt)\n        return (outputs, last_inputs, last_hiddens)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs BPTT to adjust weights based on the loss.\n        \n        Args:\n            W_xh, W_hh, W_hy, b_h, b_y: RNN parameters\n            hidden_size: Size of hidden layer\n            input_sequence: Input sequence\n            expected_output: Expected output sequence\n            outputs: Outputs from forward pass\n            last_inputs: Inputs from forward pass\n            last_hiddens: Hidden states from forward pass\n            learning_rate: Learning rate for weight updates\n            \n        Returns:\n            Updated W_xh, W_hh, W_hy, b_h, b_y and the loss\n        \"\"\"\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        dhnext = np.zeros((hidden_size, 1))\n        loss = 0\n        for t in range(T):\n            loss += 0.5 * np.sum((outputs[t] - expected_output[t]) ** 2)\n        for t in reversed(range(T)):\n            dy = outputs[t] - expected_output[t]\n            dW_hy += np.dot(dy, last_hiddens[t + 1].T)\n            db_y += dy\n            dhidden = np.dot(W_hy.T, dy) + dhnext\n            dtanh = (1 - last_hiddens[t + 1] ** 2) * dhidden\n            db_h += dtanh\n            dW_xh += np.dot(dtanh, last_inputs[t].T)\n            dW_hh += np.dot(dtanh, last_hiddens[t].T)\n            dhnext = np.dot(W_hh.T, dtanh)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        W_xh -= learning_rate * dW_xh\n        W_hh -= learning_rate * dW_hh\n        W_hy -= learning_rate * dW_hy\n        b_h -= learning_rate * db_h\n        b_y -= learning_rate * db_y\n        return (W_xh, W_hh, W_hy, b_h, b_y, loss)\nnp.random.seed(42)\ninput_sequence = np.array([[1.0], [2.0], [3.0], [4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=1, hidden_size=5, output_size=1)\n# Train the RNN over multiple epochs\n\nfor epoch in range(100): \n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.2414]], [[3.1845]], [[4.0431]], [[4.5742]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=3, output_size=1)\n# Train the RNN over multiple epochs\nfor epoch in range(100):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.422]], [[3.4417]], [[3.613]], [[4.5066]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0,1.0], [3.0,7.0], [4.0,8.0], [5.0,10.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=10, output_size=2)\n# Train the RNN over multiple epochs\nfor epoch in range(50):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[3.2842], [5.9353]], [[3.6039], [6.8201]], [[3.5259], [6.5828]], [[3.6134], [6.8492]]]"}
{"task_id": 63, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    m = len(b)\n    if x0 is None:\n        x = np.zeros(m)\n    else:\n        x = x0.copy()\n    r = b - np.dot(A, x)\n    p = r.copy()\n    r_norm_squared = np.dot(r, r)\n    for k in range(n):\n        if np.sqrt(r_norm_squared) < tol:\n            break\n        Ap = np.dot(A, p)\n        alpha = r_norm_squared / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        r_norm_squared_new = np.dot(r, r)\n        beta = r_norm_squared_new / r_norm_squared\n        r_norm_squared = r_norm_squared_new\n        p = r + beta * p\n    return np.round(x, 8).tolist()\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]\nassert conjugate_gradient(np.array([[4, 1, 2], [1, 3, 0], [2, 0, 5]]), np.array([7, 8, 5]), 1) == [1.2627451, 1.44313725, 0.90196078]\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]"}
{"task_id": 64, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \n    Formula: Gini = 1 - \u03a3(p_i^2) where p_i is the probability of class i\n    \n    Examples:\n    >>> gini_impurity([0, 0, 0, 0])  # Pure node\n    0.0\n    >>> gini_impurity([0, 0, 1, 1])  # Equal split\n    0.5\n    >>> gini_impurity([0, 0, 0, 1])  # 75%/25% split\n    0.375\n    \"\"\"\n    if not y:\n        return 0.0\n    total_samples = len(y)\n    (unique_values, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / total_samples\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)\nassert gini_impurity([0, 0, 0, 0, 1, 1, 1, 1]) == 0.5\nassert gini_impurity([0, 0, 0, 0, 0, 1]) == 0.278\nassert gini_impurity([0, 1, 2, 2, 2, 1, 2]) == 0.571"}
{"task_id": 65, "completion_id": 0, "passed": false, "result": "failed: name 'compressed_row_sparse_matrix' is not defined", "solution": "\n\nassert compressed_row_sparse_matrix([[1, 0, 0, 0], [0, 2, 0, 0], [3, 0, 4, 0], [1, 0, 0, 5]]) == ([1, 2, 3, 4, 1, 5], [0, 1, 0, 2, 0, 3], [0, 1, 2, 4, 6])\nassert compressed_row_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [0, 1, 1, 2], [0, 0, 2, 4])\nassert compressed_row_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([3, 4, 5, 6, 7, 8], [2, 1, 0, 3, 1, 4], [0, 1, 2, 4, 4, 6])"}
{"task_id": 66, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    if len(v) != len(L):\n        raise ValueError('Vectors v and L must have the same dimension.')\n    dot_v_L = sum((v_i * L_i for (v_i, L_i) in zip(v, L)))\n    dot_L_L = sum((L_i * L_i for L_i in L))\n    if dot_L_L == 0:\n        raise ValueError('Cannot project onto the zero vector.')\n    scalar = dot_v_L / dot_L_L\n    projection = [scalar * L_i for L_i in L]\n    projection = [round(p, 3) for p in projection]\n    return projection\nassert orthogonal_projection([3, 4], [1, 0]) == [3.0, 0.0]\nassert orthogonal_projection([1, 2, 3], [0, 0, 1]) == [0.0, 0.0, 3.0]\nassert orthogonal_projection([5, 6, 7], [2, 0, 0]) == [5.0, 0.0, 0.0]"}
{"task_id": 67, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)\nassert compressed_col_sparse_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == ([], [], [0, 0, 0, 0])\nassert compressed_col_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [1, 1, 2, 2], [0, 1, 3, 4])\nassert compressed_col_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([5, 4, 7, 3, 6, 8], [2, 1, 4, 0, 2, 4], [0, 1, 3, 4, 5, 6])"}
{"task_id": 68, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space (image) of matrix A.\n    \n    Args:\n        A: Input matrix as a 2D array or list\n        \n    Returns:\n        A list of vectors that form a basis for the column space\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    aug = np.hstack((A.copy(), np.eye(m)))\n    r = 0\n    pivot_cols = []\n    for j in range(n):\n        pivot_found = False\n        for i in range(r, m):\n            if abs(aug[i, j]) > 1e-10:\n                if i != r:\n                    aug[[i, r]] = aug[[r, i]]\n                pivot_found = True\n                break\n        if pivot_found:\n            aug[r] = aug[r] / aug[r, j]\n            for i in range(m):\n                if i != r:\n                    aug[i] = aug[i] - aug[i, j] * aug[r]\n            pivot_cols.append(j)\n            r += 1\n            if r == m:\n                break\n    basis = A[:, pivot_cols]\n    return np.round(basis, 8).tolist()\nassert matrix_image(np.array([[1, 0], [0, 1]])) == [[1, 0], [0, 1]]\nassert matrix_image(np.array([[1, 2], [2, 4]])) == [[1], [2]]\nassert matrix_image(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[1, 2], [4, 5], [7, 8]]\nassert matrix_image(np.array([[3, 9, 6], [1, 4, 7], [2, 5, 8]])) == [[3, 9, 6], [1, 4, 7], [2, 5, 8]]\nassert matrix_image(np.array([[3, 3, 3], [1, 1, 1], [2, 2, 2]])) == [[3], [1], [2]]"}
{"task_id": 69, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared value for regression analysis.\n    \n    Parameters:\n    y_true (array-like): The true values of the dependent variable\n    y_pred (array-like): The predicted values from the regression model\n    \n    Returns:\n    float: R-squared value rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_mean = np.mean(y_true)\n    ss_total = np.sum((y_true - y_mean) ** 2)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    if ss_total == 0:\n        return round(1.0 if ss_residual == 0 else 0.0, 3)\n    r2 = 1 - ss_residual / ss_total\n    return round(r2, 3)\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])) == 1.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1.1, 2.1, 2.9, 4.2, 4.8])) == 0.989\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([2, 1, 4, 3, 5])) == 0.6\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([3, 3, 3, 3, 3])) == 0.0\nassert r_squared(np.array([3, 3, 3, 3, 3]), np.array([1, 2, 3, 4, 5])) == 0.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([5, 4, 3, 2, 1])) == -3.0\nassert r_squared(np.array([0, 0, 0, 0, 0]), np.array([0, 0, 0, 0, 0])) == 1.0\nassert r_squared(np.array([-2, -2, -2]), np.array([-2, -2, -2 + 1e-8])) == 0.0"}
{"task_id": 70, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_brightness(img):\n    if len(img) == 0:\n        return -1\n    row_length = len(img[0])\n    if row_length == 0:\n        return -1\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_brightness = sum((sum(row) for row in img))\n    total_pixels = len(img) * row_length\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)\nassert calculate_brightness([]) == -1\nassert calculate_brightness([[100, 200], [150]]) == -1\nassert calculate_brightness([[100, 300]]) == -1\nassert calculate_brightness([[100, -1]]) == -1\nassert calculate_brightness([[128]]) == 128.0\nassert calculate_brightness([[100, 200], [50, 150]]) == 125.0"}
{"task_id": 71, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error between two arrays.\n    \n    Parameters:\n    y_true (array-like): Array of actual values\n    y_pred (array-like): Array of predicted values\n    \n    Returns:\n    float: RMSE value rounded to three decimal places\n    \n    Raises:\n    ValueError: If arrays have different shapes or are empty\n    TypeError: If inputs are not array-like or contain non-numeric values\n    \"\"\"\n    try:\n        y_true = np.array(y_true, dtype=float)\n        y_pred = np.array(y_pred, dtype=float)\n    except (ValueError, TypeError):\n        raise TypeError('Inputs must be array-like objects containing numeric values')\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays cannot be empty')\n    if y_true.shape != y_pred.shape:\n        raise ValueError(f\"Input shapes don't match: y_true.shape={y_true.shape}, y_pred.shape={y_pred.shape}\")\n    rmse_value = np.sqrt(np.mean(np.square(y_true - y_pred)))\n    return round(rmse_value, 3)\nassert rmse(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.612\nassert rmse(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.842\nassert rmse(np.array([[1, 2], [3, 4]]), np.array([[1, 2], [3, 4]])) == 0.0"}
{"task_id": 72, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between binary arrays y_true and y_pred.\n    \n    Parameters:\n    -----------\n    y_true : array-like\n        Binary array of true labels\n    y_pred : array-like\n        Binary array of predicted labels\n        \n    Returns:\n    --------\n    float\n        Jaccard Index rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    return round(intersection / union, 3)\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 1])) == 1.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 0]), np.array([0, 1, 0, 0, 1, 1])) == 0.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 0])) == 0.5\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 1, 1, 0])) == 0.167\nassert jaccard_index(np.array([1, 1, 1, 1, 1, 1]), np.array([0, 0, 0, 1, 1, 0])) == 0.333\nassert jaccard_index(np.array([1, 1, 1, 0, 1, 1]), np.array([1, 0, 0, 0, 0, 0])) == 0.2"}
{"task_id": 73, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between true and predicted binary labels.\n    \n    Args:\n        y_true: Array of true binary labels (0s and 1s)\n        y_pred: Array of predicted binary labels (0s and 1s)\n        \n    Returns:\n        Dice Score as a float rounded to 3 decimal places (0.0 to 1.0)\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true == 0 and sum_pred == 0:\n        return 1.0\n    if sum_true == 0 or sum_pred == 0:\n        return 0.0\n    dice = 2 * intersection / (sum_true + sum_pred)\n    return round(float(dice), 3)\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 1, 0, 0])) == 1.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([0, 0, 1, 1])) == 0.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 0, 0, 0])) == 0.667\nassert dice_score(np.array([0, 0, 0, 0]), np.array([0, 0, 0, 0])) == 0.0\nassert dice_score(np.array([1, 1, 1, 1]), np.array([1, 1, 1, 1])) == 1.0\nassert dice_score(np.array([0, 0, 0, 0]), np.array([1, 1, 1, 1])) == 0.0\nassert dice_score(np.array([1]), np.array([1])) == 1.0\nassert dice_score(np.array([True, True, False, False]), np.array([1, 1, 0, 0])) == 1.0"}
{"task_id": 74, "completion_id": 0, "passed": false, "result": "failed: Seed must be between 0 and 2**32 - 1", "solution": "import numpy as np\nimport numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Create a composite hypervector for a dataset row.\n    \n    Args:\n        row: Dictionary representing a dataset row with feature names as keys and values\n        dim: Dimensionality of the hypervectors\n        random_seeds: Dictionary mapping feature names to random seeds\n        \n    Returns:\n        A list representing the composite hypervector for the row\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        np.random.seed(hash(feature_name))\n        feature_name_hv = np.random.choice([-1, 1], dim)\n        if feature_name in random_seeds:\n            seed = random_seeds[feature_name]\n            if isinstance(feature_value, (int, float)):\n                value_seed = seed + int(feature_value)\n            else:\n                value_seed = seed + hash(str(feature_value))\n            np.random.seed(value_seed)\n            feature_value_hv = np.random.choice([-1, 1], dim)\n        else:\n            np.random.seed(0)\n            feature_value_hv = np.random.choice([-1, 1], dim)\n        bound_hv = feature_name_hv * feature_value_hv\n        composite_hv += bound_hv\n    return composite_hv.tolist()\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 5, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, 1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 10, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, -1, -1, -1, -1, -1, -1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 15, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1]"}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "from collections import Counter\nfrom collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a confusion matrix for binary classification.\n    \n    Args:\n        data: List of [y_true, y_pred] pairs, where each value is 0 or 1\n            y_true: actual label (0 or 1)\n            y_pred: predicted label (0 or 1)\n    \n    Returns:\n        A 2x2 confusion matrix as [[TN, FP], [FN, TP]]\n    \"\"\"\n    counter = Counter(((y_true, y_pred) for (y_true, y_pred) in data))\n    TN = counter.get((0, 0), 0)\n    FP = counter.get((0, 1), 0)\n    FN = counter.get((1, 0), 0)\n    TP = counter.get((1, 1), 0)\n    return [[TN, FP], [FN, TP]]\nassert confusion_matrix([[1, 1], [1, 0], [0, 1], [0, 0], [0, 1]]) == [[1, 1], [2, 1]]\nassert confusion_matrix([[0, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0]]) == [[5, 5], [4, 3]]\nassert confusion_matrix([[0, 1], [0, 1], [0, 0], [0, 1], [0, 0], [0, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 1], [1, 0]]) == [[0, 3], [9, 4]]"}
{"task_id": 76, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n    \n    Args:\n        v1 (numpy.ndarray): First input vector\n        v2 (numpy.ndarray): Second input vector\n        \n    Returns:\n        float: Cosine similarity between v1 and v2, rounded to three decimal places\n    \n    Raises:\n        ValueError: If vectors don't have the same shape or have zero magnitude\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude')\n    return round(dot_product / (magnitude_v1 * magnitude_v2), 3)\nassert cosine_similarity(np.array([1, 2, 3]), np.array([2, 4, 6])) == 1.0\nassert cosine_similarity(np.array([1, 2, 3]), np.array([-1, -2, -3])) == -1.0\nassert cosine_similarity(np.array([1, 0, 7]), np.array([0, 1, 3])) == 0.939\nassert cosine_similarity(np.array([1, 0]), np.array([0, 1])) == 0.0"}
{"task_id": 77, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Calculate performance metrics for a binary classification model.\n    \n    Args:\n        actual: The actual class labels (1 for positive, 0 for negative).\n        predicted: The predicted class labels from the model.\n        \n    Returns:\n        A tuple containing confusion_matrix, accuracy, f1_score, specificity, and\n        negative_predictive_value.\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('Both lists must have the same length.')\n    if not all((x in [0, 1] for x in actual + predicted)):\n        raise ValueError('All elements in the lists must be either 0 or 1.')\n    true_positive = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    true_negative = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    false_positive = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    false_negative = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[true_positive, false_negative], [false_positive, true_negative]]\n    total = len(actual)\n    accuracy = round((true_positive + true_negative) / total, 3)\n    precision = true_positive / (true_positive + false_positive) if true_positive + false_positive > 0 else 0\n    recall = true_positive / (true_positive + false_negative) if true_positive + false_negative > 0 else 0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall > 0 else 0\n    specificity = round(true_negative / (true_negative + false_positive), 3) if true_negative + false_positive > 0 else 0\n    npv = round(true_negative / (true_negative + false_negative), 3) if true_negative + false_negative > 0 else 0\n    return (confusion_matrix, accuracy, f1_score, specificity, npv)\nassert performance_metrics([1, 0, 1, 0, 1], [1, 0, 0, 1, 1]) == ([[2, 1], [1, 1]], 0.6, 0.667, 0.5, 0.5)\nassert performance_metrics([1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0]) == ([[6, 4], [2, 7]], 0.684, 0.667, 0.778, 0.636)\nassert performance_metrics([0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1]) == ([[4, 4], [5, 2]], 0.4, 0.471, 0.286, 0.333)\nassert performance_metrics([1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0]) == ([[4, 5], [4, 2]], 0.4, 0.471, 0.333, 0.286)"}
{"task_id": 78, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics for a dataset.\n    \n    Args:\n        data: List or NumPy array of numerical values\n        \n    Returns:\n        Dictionary containing descriptive statistics\n    \"\"\"\n    data_array = np.array(data, dtype=float)\n    mean = round(float(np.mean(data_array)), 4)\n    median = round(float(np.median(data_array)), 4)\n    (unique_values, counts) = np.unique(data_array, return_counts=True)\n    max_count = np.max(counts)\n    if max_count == 1:\n        mode = None\n    else:\n        mode_indices = np.where(counts == max_count)[0]\n        modes = unique_values[mode_indices].tolist()\n        if len(modes) == 1:\n            mode = float(modes[0])\n        else:\n            mode = [float(m) for m in modes]\n    variance = round(float(np.var(data_array)), 4)\n    std_dev = round(float(np.std(data_array)), 4)\n    percentile_25 = round(float(np.percentile(data_array, 25)), 4)\n    percentile_50 = round(float(np.percentile(data_array, 50)), 4)\n    percentile_75 = round(float(np.percentile(data_array, 75)), 4)\n    iqr = round(float(percentile_75 - percentile_25), 4)\n    return {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': std_dev, '25th_percentile': percentile_25, '50th_percentile': percentile_50, '75th_percentile': percentile_75, 'interquartile_range': iqr}\nassert descriptive_statistics([10, 20, 30, 40, 50]) == {'mean': 30.0, 'median': 30.0, 'mode': 10, 'variance': 200.0, 'standard_deviation': 14.1421, '25th_percentile': 20.0, '50th_percentile': 30.0, '75th_percentile': 40.0, 'interquartile_range': 20.0}\nassert descriptive_statistics([1, 2, 2, 3, 4, 4, 4, 5]) == {'mean': 3.125, 'median': 3.5, 'mode': 4, 'variance': 1.6094, 'standard_deviation': 1.2686, '25th_percentile': 2.0, '50th_percentile': 3.5, '75th_percentile': 4.0, 'interquartile_range': 2.0}\nassert descriptive_statistics([100]) == {'mean': 100.0, 'median': 100.0, 'mode': 100, 'variance': 0.0, 'standard_deviation': 0.0, '25th_percentile': 100.0, '50th_percentile': 100.0, '75th_percentile': 100.0, 'interquartile_range': 0.0}"}
{"task_id": 79, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    if k < 0 or k > n:\n        return 0.0\n    combinations = math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    probability = combinations * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)\nassert binomial_probability(6, 2, 0.5) == 0.23438\nassert binomial_probability(6, 4, 0.7) == 0.32414\nassert binomial_probability(3, 3, 0.9) == 0.729\nassert binomial_probability(5, 0, 0.3) == 0.16807\nassert binomial_probability(7, 2, 0.1) == 0.124\nassert binomial_probability(100, 2, 0.1) == 0.00162\nassert binomial_probability(2, 2, 0.1) == 0.01"}
{"task_id": 80, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    if std_dev <= 0:\n        raise ValueError('Standard deviation must be positive')\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = 1 / denominator * math.exp(exponent)\n    return round(pdf_value, 5)\nassert normal_pdf(0, 0, 1) == 0.39894\nassert normal_pdf(16, 15, 2.04) == 0.17342\nassert normal_pdf(1, 0, 0.5) == 0.10798"}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: The probability rounded to 5 decimal places\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError('k must be a non-negative integer')\n    if lam <= 0:\n        raise ValueError('lambda must be positive')\n    numerator = math.exp(-lam) * lam ** k\n    denominator = math.factorial(k)\n    probability = numerator / denominator\n    return round(probability, 5)\nassert poisson_probability(3, 5) == 0.14037\nassert poisson_probability(0, 5) == 0.00674\nassert poisson_probability(2, 10) == 0.00227\nassert poisson_probability(1, 1) == 0.36788\nassert poisson_probability(20, 20) == 0.08884"}
{"task_id": 82, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \n    Returns:\n        float: The contrast value, which is the difference between the maximum and minimum pixel values.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    contrast = max_val - min_val\n    return contrast\nassert calculate_contrast(np.array([[0, 50], [200, 255]])) == 255\nassert calculate_contrast(np.array([[128, 128], [128, 128]])) == 0\nassert calculate_contrast(np.zeros((10, 10), dtype=np.uint8)) == 0\nassert calculate_contrast(np.ones((10, 10), dtype=np.uint8) * 255) == 0\nassert calculate_contrast(np.array([[10, 20, 30], [40, 50, 60]])) == 50"}
{"task_id": 83, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n        \n    Returns:\n        float: The dot product of the two vectors.\n        \n    Raises:\n        ValueError: If the vectors are not 1D or have different lengths.\n    \"\"\"\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays')\n    if len(vec1) != len(vec2):\n        raise ValueError('Vectors must have the same length')\n    return np.dot(vec1, vec2)\nassert calculate_dot_product(np.array([1, 2, 3]), np.array([4, 5, 6])) == 32\nassert calculate_dot_product(np.array([-1, 2, 3]), np.array([4, -5, 6])) == 4\nassert calculate_dot_product(np.array([1, 0]), np.array([0, 1])) == 0\nassert calculate_dot_product(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0\nassert calculate_dot_product(np.array([7]), np.array([3])) == 21"}
{"task_id": 84, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features\n                          of the corresponding data point, rounded to 8 decimal places.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data, dtype=float)\n    result = []\n    for x in data_array:\n        features = []\n        for d in range(degree + 1):\n            feature_value = round(x ** d, 8)\n            features.append(feature_value)\n        result.append(features)\n    return result\nassert phi_transform([], 2) == []\nassert phi_transform([1.0, 2.0], -1) == []\nassert phi_transform([1.0, 2.0], 2) == [[1.0, 1.0, 1.0], [1.0, 2.0, 4.0]]\nassert phi_transform([1.0, 3.0], 3) == [[1.0, 1.0, 1.0, 1.0], [1.0, 3.0, 9.0, 27.0]]\nassert phi_transform([2.0], 4) == [[1.0, 2.0, 4.0, 8.0, 16.0]]"}
{"task_id": 85, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pe[pos, i] = np.sin(pos / 10000 ** (i / d_model))\n            else:\n                pe[pos, i] = np.cos(pos / 10000 ** ((i - 1) / d_model))\n    return pe.tolist()\nassert pos_encoding(2, 8) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.0998, 0.995, 0.01, 1.0, 0.001, 1.0]]\nassert pos_encoding(5, 16) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.311, 0.9504, 0.0998, 0.995, 0.0316, 0.9995, 0.01, 1.0, 0.0032, 1.0, 0.001, 1.0, 0.0003, 1.0], [0.9093, -0.4161, 0.5911, 0.8066, 0.1987, 0.9801, 0.0632, 0.998, 0.02, 0.9998, 0.0063, 1.0, 0.002, 1.0, 0.0006, 1.0], [0.1411, -0.99, 0.8126, 0.5828, 0.2955, 0.9553, 0.0947, 0.9955, 0.03, 0.9996, 0.0095, 1.0, 0.003, 1.0, 0.0009, 1.0], [-0.7568, -0.6536, 0.9536, 0.3011, 0.3894, 0.9211, 0.1262, 0.992, 0.04, 0.9992, 0.0126, 0.9999, 0.004, 1.0, 0.0013, 1.0]]\nassert pos_encoding(0, 0) == -1\nassert pos_encoding(2, -1) == -1"}
{"task_id": 86, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0\nassert model_fit_quality(0.95, 0.65) == 1\nassert model_fit_quality(0.6, 0.5) == -1\nassert model_fit_quality(0.85, 0.8) == 0\nassert model_fit_quality(0.5, 0.6) == -1\nassert model_fit_quality(0.75, 0.74) == 0"}
{"task_id": 87, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    updated_parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(updated_parameter, 5)\n    m_new = np.round(m_new, 5)\n    v_new = np.round(v_new, 5)\n    if isinstance(updated_parameter, np.ndarray):\n        updated_parameter = updated_parameter.tolist()\n    if isinstance(m_new, np.ndarray):\n        m_new = m_new.tolist()\n    if isinstance(v_new, np.ndarray):\n        v_new = v_new.tolist()\n    return (updated_parameter, m_new, v_new)\nassert adam_optimizer(1.0, 0.1, 0.0, 0.0, 1) == (0.999, 0.01, 0.00001)\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1) == ([0.999, 1.999], [0.01, 0.02], [1.e-05, 4.e-05])\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1, 0.01, 0.8, 0.99) == ([0.99, 1.99], [0.02, 0.04], [0.0001, 0.0004])"}
{"task_id": 88, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (2,10) into shape (10,)", "solution": "import numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),\n        \"wpe\": np.random.rand(1024, 10),\n        \"blocks\": [],\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\nimport numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        context = token_ids[-hparams['n_ctx']:]\n        next_token_logits = gpt2_forward(context, hparams, params)\n        next_token_probs = softmax(next_token_logits)\n        next_token = np.random.choice(len(next_token_probs), p=next_token_probs)\n        token_ids.append(next_token)\n    generated_text = encoder.decode(token_ids)\n    return generated_text\ndef gpt2_forward(token_ids, hparams, params):\n    \"\"\"Forward pass through the GPT-2 model to get logits for next token prediction\"\"\"\n    token_embeddings = np.array([params['wte'][token_id] for token_id in token_ids])\n    positions = np.arange(len(token_ids))\n    position_embeddings = params['wpe'][positions]\n    hidden_states = token_embeddings + position_embeddings\n    hidden_states = apply_transformer_blocks(hidden_states, hparams)\n    hidden_states = layer_norm(hidden_states, params['ln_f']['g'], params['ln_f']['b'])\n    logits = hidden_states[-1] @ params['wte'].T\n    return logits\ndef apply_transformer_blocks(hidden_states, hparams):\n    \"\"\"Apply a sequence of transformer blocks to the hidden states\"\"\"\n    attention_output = multi_head_attention(hidden_states, hparams['n_head'])\n    hidden_states = hidden_states + attention_output\n    ffn_output = feed_forward_network(hidden_states)\n    hidden_states = hidden_states + ffn_output\n    return hidden_states\ndef multi_head_attention(hidden_states, n_heads):\n    \"\"\"Apply multi-head self-attention mechanism\"\"\"\n    seq_length = hidden_states.shape[0]\n    mask = np.tril(np.ones((seq_length, seq_length)))\n    attention_output = np.zeros_like(hidden_states)\n    for i in range(seq_length):\n        weights = mask[i][:seq_length] / (np.sum(mask[i][:seq_length]) + 1e-10)\n        attention_output[i] = weights.reshape(-1, 1) * hidden_states\n        attention_output[i] = np.sum(attention_output[i], axis=0)\n    return attention_output * 0.1\ndef feed_forward_network(hidden_states):\n    \"\"\"Apply a feed-forward network to each position\"\"\"\n    return hidden_states * 0.1\ndef layer_norm(x, g, b, eps=1e-05):\n    \"\"\"Apply layer normalization\"\"\"\n    mean = np.mean(x, axis=-1, keepdims=True)\n    var = np.var(x, axis=-1, keepdims=True)\n    return g * (x - mean) / np.sqrt(var + eps) + b\ndef softmax(x):\n    \"\"\"Compute softmax values for the vector x\"\"\"\n    exp_x = np.exp(x - np.max(x))\n    return exp_x / np.sum(exp_x)\nassert gen_text(\"hello\", 5) == \"hello hello hello <UNK> <UNK>\"\nassert gen_text(\"hello world\", 10) == \"world world world world world world world world world world\"\nassert gen_text(\"world\", 3) == \"world world world\""}
{"task_id": 89, "completion_id": 0, "passed": false, "result": "failed: cannot reshape array of size 3 into shape (3,2)", "solution": "import numpy as np\nimport numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    crystal_matrix = np.array(crystal_values)\n    if len(crystal_matrix.shape) == 1:\n        crystal_matrix = crystal_matrix.reshape(n, dimension)\n    enhanced_patterns = []\n    for i in range(n):\n        attention_scores = np.zeros(n)\n        for j in range(n):\n            attention_scores[j] = np.dot(crystal_matrix[i], crystal_matrix[j])\n        attention_scores = attention_scores / np.sqrt(dimension)\n        attention_weights = softmax(attention_scores)\n        enhanced_pattern = np.zeros(dimension)\n        for j in range(n):\n            enhanced_pattern += attention_weights[j] * crystal_matrix[j]\n        enhanced_patterns.append(enhanced_pattern)\n    result = np.round(np.array(enhanced_patterns).flatten(), 4).tolist()\n    return result\nassert pattern_weaver(5, [4, 2, 7, 1, 9], 1) == [8.9993, 8.9638, 9.0, 8.7259, 9.0]\nassert pattern_weaver(3, [1, 3, 5], 1) == [4.7019, 4.995, 4.9999]\nassert pattern_weaver(4, [2, 8, 6, 4], 1) == [7.9627, 8.0, 8.0, 7.9993]\nassert pattern_weaver(3, [9, 2, 1], 1) == [9.0, 9.0, 8.9909]\nassert pattern_weaver(3, [9, 2, 1], 2) == [9.0, 8.9996, 8.9233]"}
{"task_id": 90, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for each document in the corpus with respect to the query.\n    \n    Args:\n        corpus (list): List of documents, where each document is a list of terms.\n        query (list): List of terms in the query.\n        k1 (float): Parameter to control term frequency saturation.\n        b (float): Parameter to control document length normalization.\n    \n    Returns:\n        list: List of BM25 scores for each document in the corpus.\n    \"\"\"\n    N = len(corpus)\n    doc_lengths = [len(doc) for doc in corpus]\n    avgdl = sum(doc_lengths) / N\n    df = {}\n    for term in query:\n        df[term] = sum((1 for doc in corpus if term in doc))\n    idf = {}\n    for (term, count) in df.items():\n        idf[term] = np.log((N - count + 0.5) / (count + 0.5) + 1)\n    scores = []\n    for (i, doc) in enumerate(corpus):\n        score = 0\n        doc_counter = Counter(doc)\n        doc_len = doc_lengths[i]\n        for term in query:\n            if term in doc_counter:\n                term_freq = doc_counter[term]\n                numerator = term_freq * (k1 + 1)\n                denominator = term_freq + k1 * (1 - b + b * doc_len / avgdl)\n                term_score = idf[term] * (numerator / denominator)\n                score += term_score\n        scores.append(round(score, 3))\n    return scores\nassert calculate_bm25_scores([['the', 'cat', 'sat'], ['the', 'dog', 'ran'], ['the', 'bird', 'flew']], ['the', 'cat']) == [0.693, 0., 0. ]\nassert calculate_bm25_scores([['the'] * 10, ['the']], ['the']) == [0,0]\nassert calculate_bm25_scores([['term'] * 10, ['the'] * 2], ['term'], k1=1.0) == [.705, 0]"}
{"task_id": 91, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input lists must have the same length')\n    tp = fp = fn = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            tp += 1\n        elif true == 0 and pred == 1:\n            fp += 1\n        elif true == 1 and pred == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)\nassert calculate_f1_score([1, 0, 1, 1, 0], [1, 0, 0, 1, 1]) == 0.667\nassert calculate_f1_score([1, 1, 0, 0], [1, 0, 0, 1]) == 0.5\nassert calculate_f1_score([0, 0, 0, 0], [1, 1, 1, 1]) == 0.0\nassert calculate_f1_score([1, 1, 1, 1, 0], [1, 1, 0, 1, 1]) == 0.75\nassert calculate_f1_score([1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0]) == 0.889"}
{"task_id": 92, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    days = list(range(1, 11))\n    detrended_data = []\n    for (i, consumption) in zip(days, consumption_data):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption - fluctuation)\n    mean_days = sum(days) / len(days)\n    mean_consumption = sum(detrended_data) / len(detrended_data)\n    numerator = sum(((x - mean_days) * (y - mean_consumption) for (x, y) in zip(days, detrended_data)))\n    denominator = sum(((x - mean_days) ** 2 for x in days))\n    slope = numerator / denominator\n    intercept = mean_consumption - slope * mean_days\n    day_15_base = slope * 15 + intercept\n    fluctuation_15 = 10 * math.sin(2 * PI * 15 / 10)\n    day_15_with_fluctuation = day_15_base + fluctuation_15\n    day_15_rounded = round(day_15_with_fluctuation)\n    day_15_with_safety = math.ceil(day_15_rounded * 1.05)\n    return day_15_with_safety\nassert power_grid_forecast([150, 165, 185, 195, 210, 225, 240, 260, 275, 290]) == 404\nassert power_grid_forecast([160, 170, 190, 200, 215, 230, 245, 265, 280, 295]) == 407\nassert power_grid_forecast([140, 158, 180, 193, 205, 220, 237, 255, 270, 288]) == 404\nassert power_grid_forecast([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 19\nassert power_grid_forecast([1, 19, 1, 20, 1, 18, 1, 19, 1, 20]) == 35"}
{"task_id": 93, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape')\n    abs_diff = np.abs(y_true - y_pred)\n    mae_value = np.mean(abs_diff)\n    return round(mae_value, 3)\nassert mae(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.500\nassert mae(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.750\nassert mae(np.array([-1, -2, -3]), np.array([-1.5, -2.2, -2.8])) == 0.300\nassert mae(np.array([1, -1, 0]), np.array([-1, 1, 0])) == 1.333\nassert mae(np.array([1000, -1000, 0]), np.array([-1000, 1000, 0])) == 1333.333\nassert mae(np.array([1000, -1000, 0]), np.array([0, 0, 0])) == 666.667"}
{"task_id": 94, "completion_id": 0, "passed": false, "result": "failed: cannot reshape array of size 16 into shape (4,4,2,2)", "solution": "import numpy as np\nimport numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query, Key, and Value matrices by multiplying input with weight matrices\n    \n    Args:\n        X: Input matrix of shape (batch_size, seq_len, d_model)\n        W_q, W_k, W_v: Weight matrices for Q, K, V projections\n        \n    Returns:\n        Q, K, V matrices\n    \"\"\"\n    Q = np.matmul(X, W_q)\n    K = np.matmul(X, W_k)\n    V = np.matmul(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute self-attention mechanism\n    \n    Args:\n        Q: Query matrix\n        K: Key matrix\n        V: Value matrix\n        \n    Returns:\n        Attention output\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.matmul(Q, np.transpose(K, (0, 2, 1))) / np.sqrt(d_k)\n    exp_scores = np.exp(scores)\n    weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    output = np.matmul(weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute multi-head attention\n    \n    Args:\n        X: Input tensor of shape (batch_size, seq_len, d_model)\n        W_q, W_k, W_v: Weight matrices for Q, K, V\n        n_heads: Number of attention heads\n        \n    Returns:\n        Multi-head attention output as a Python list\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    (batch_size, seq_len) = (X.shape[0], X.shape[1])\n    d_k = W_q.shape[1] // n_heads\n    d_v = W_v.shape[1] // n_heads\n    Q = Q.reshape(batch_size, seq_len, n_heads, d_k)\n    K = K.reshape(batch_size, seq_len, n_heads, d_k)\n    V = V.reshape(batch_size, seq_len, n_heads, d_v)\n    Q = Q.transpose(0, 2, 1, 3)\n    K = K.transpose(0, 2, 1, 3)\n    V = V.transpose(0, 2, 1, 3)\n    heads_output = np.zeros((batch_size, n_heads, seq_len, d_v))\n    for i in range(n_heads):\n        heads_output[:, i] = self_attention(Q[:, i:i + 1], K[:, i:i + 1], V[:, i:i + 1])\n    attention_output = heads_output.transpose(0, 2, 1, 3).reshape(batch_size, seq_len, n_heads * d_v)\n    attention_output = np.round(attention_output, 4)\n    return attention_output.tolist()\nnp.random.seed(42)\n\nm, n = 4, 4\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 4\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]"}
{"task_id": 95, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    import math\n    if len(x) != len(y):\n        raise ValueError('Input lists must have the same length')\n    a = b = c = d = 0\n    for i in range(len(x)):\n        if x[i] == 1 and y[i] == 1:\n            a += 1\n        elif x[i] == 1 and y[i] == 0:\n            b += 1\n        elif x[i] == 0 and y[i] == 1:\n            c += 1\n        else:\n            d += 1\n    numerator = a * d - b * c\n    denominator = math.sqrt((a + b) * (c + d) * (a + c) * (b + d))\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nassert phi_corr([1, 1, 0, 0], [0, 0, 1, 1]) == -1.0\nassert phi_corr([1, 1, 0, 0], [1, 0, 1, 1]) == -0.5774\nassert phi_corr([0, 0, 1, 1], [0, 1, 0, 1]) == 0.0\nassert phi_corr([1, 0, 1, 0,1,1,0], [1, 1, 0, 0,1,1,1]) == 0.0913"}
{"task_id": 96, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5\nassert hard_sigmoid(.56) == 0.612\nassert hard_sigmoid(3.0) == 1.0\nassert hard_sigmoid(0.0) == 0.5\nassert hard_sigmoid(1.0) == 0.7\nassert hard_sigmoid(-1.0) == 0.3\nassert hard_sigmoid(2.5) == 1.0\nassert hard_sigmoid(-2.5) == 0.0\nassert hard_sigmoid(-3.0) == 0.0"}
{"task_id": 97, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)\nassert elu(0) == 0.0\nassert elu(1) == 1.0\nassert elu(-1) == -0.6321\nassert elu(-1, alpha=2.0) == -1.2642\nassert elu(5) == 5.0\nassert elu(-5) == -0.9933"}
{"task_id": 98, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x\nassert prelu(2.0) == 2.0\nassert prelu(0.0) == 0.0\nassert prelu(-2.0) == -0.5\nassert prelu(-2.0, alpha=0.1) == -0.2\nassert prelu(-2.0, alpha=1.0) == -2.0"}
{"task_id": 99, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x >= 0:\n        result = x + math.log(1 + math.exp(-x))\n    else:\n        result = math.log(1 + math.exp(x))\n    return round(result, 4)\nassert softplus(0) == 0.6931\nassert softplus(100) == 100.0\nassert softplus(-100) == 0.0\nassert softplus(2) == 2.1269\nassert softplus(-2) == 0.1269"}
{"task_id": 100, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nimport math\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    if math.isinf(x):\n        return 1.0 if x > 0 else -1.0\n    result = x / (1 + abs(x))\n    return round(result, 4)\nassert softsign(0) == 0.0\nassert softsign(1) == 0.5\nassert softsign(-1) == -0.5\nassert softsign(100) == 0.9901\nassert softsign(-100) == -0.9901"}
{"task_id": 101, "completion_id": 0, "passed": false, "result": "failed: test case failed: grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01)", "solution": "import numpy as np\nimport numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    pi_theta = rhos * pi_theta_old\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate1 = rhos * A\n    surrogate2 = clipped_rhos * A\n    clipped_objective = np.minimum(surrogate1, surrogate2).mean()\n    eps = 1e-10\n    ratio = np.maximum(pi_theta / np.maximum(pi_theta_ref, eps), eps)\n    kl_div = np.sum(pi_theta * np.log(ratio))\n    objective = clipped_objective - beta * kl_div\n    return round(float(objective), 6)\nassert grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01) == 1.032749, \"test case failed: grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01)\"\nassert grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05) == 0.999743, \"test case failed: grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05)\"\nassert grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02) == 0.882682, \"test case failed: grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02)\"\nassert grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01) == 1.0, \"test case failed: grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01)\""}
{"task_id": 102, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    result = x * sigmoid\n    return round(result, 4)\nassert swish(0) == 0.0, \"test case failed: swish(0)\"\nassert swish(1) == 0.7311, \"test case failed: swish(1)\"\nassert swish(-1) == -0.2689, \"test case failed: swish(-1)\"\nassert swish(10) == 9.9995, \"test case failed: swish(10)\"\nassert swish(-10) == -0.0005, \"test case failed: swish(-10)\""}
{"task_id": 103, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    elif x < -100:\n        result = -scale * alpha\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)\nassert selu(1.0) == 1.0507, \"test case failed: selu(1.0)\"\nassert selu(0.0) == 0.0, \"test case failed: selu(0.0)\"\nassert selu(-1.0) == -1.1113, \"test case failed: selu(-1.0)\"\nassert selu(5.0) == 5.2535, \"test case failed: selu(5.0)\"\nassert selu(-5.0) == -1.7463, \"test case failed: selu(-5.0)\""}
{"task_id": 104, "completion_id": 0, "passed": false, "result": "failed: test case failed: predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0)", "solution": "import numpy as np\nimport numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities > 0.5).astype(int)\n    return predictions.tolist()\nassert predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0) == [1,1,0], \"test case failed: predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1) == [1,0,0], \"test case failed: predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1)\"\nassert predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0)\"\nassert predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0) == [1,0], \"test case failed: predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0)\""}
{"task_id": 105, "completion_id": 0, "passed": false, "result": "failed: test case failed: train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10)", "solution": "import numpy as np\nimport numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    y_one_hot = np.zeros((N, C))\n    y_one_hot[np.arange(N), y] = 1\n    B = np.zeros((C, M))\n    losses = []\n    for _ in range(iterations):\n        scores = X.dot(B.T)\n        scores -= np.max(scores, axis=1, keepdims=True)\n        exp_scores = np.exp(scores)\n        softmax_probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        epsilon = 1e-15\n        softmax_probs = np.clip(softmax_probs, epsilon, 1 - epsilon)\n        loss = -np.sum(y_one_hot * np.log(softmax_probs)) / N\n        losses.append(round(loss, 4))\n        gradient = softmax_probs - y_one_hot\n        dB = gradient.T.dot(X) / N\n        B -= learning_rate * dB\n    B = np.round(B, 4).tolist()\n    return (B, losses)\nassert train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10) == ([[-0.0841, -0.5693, -0.3651, -0.2423, -0.5344, 0.0339], [0.2566, 0.0535, -0.2103, -0.4004, 0.2709, -0.1461], [-0.1318, 0.211, 0.3998, 0.523, -0.1001, 0.0545], [-0.0407, 0.3049, 0.1757, 0.1197, 0.3637, 0.0576]], [13.8629, 10.7202, 9.3164, 8.4943, 7.9134, 7.4599, 7.0856, 6.7655, 6.4853, 6.236]), \"test case failed: train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10)\"\nassert train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10) == ([[-0.0011, 0.0145, -0.0921], [0.002, -0.0598, 0.1263], [-0.0009, 0.0453, -0.0342]], [3.2958, 3.2611, 3.2272, 3.1941, 3.1618, 3.1302, 3.0993, 3.0692, 3.0398, 3.011]), \"test case failed: train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10)\""}
{"task_id": 106, "completion_id": 0, "passed": false, "result": "failed: tese case failed: train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10)", "solution": "import numpy as np\nimport numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0\n    loss_history = []\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-np.clip(z, -500, 500)))\n    for i in range(iterations):\n        linear_output = np.dot(X, weights) + bias\n        y_pred = sigmoid(linear_output)\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        loss_history.append(round(loss, 4))\n        dz = y_pred - y\n        dw = np.dot(X.T, dz) / n_samples\n        db = np.sum(dz) / n_samples\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights_rounded = np.round(weights, 4).tolist()\n    bias_rounded = [round(bias, 4)]\n    return (weights_rounded, bias_rounded, loss_history)\nassert train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10) == ([-0.0097, 0.0286, 0.015, 0.0135, 0.0316], [6.9315, 6.9075, 6.8837, 6.8601, 6.8367, 6.8134, 6.7904, 6.7675, 6.7448, 6.7223]), \"tese case failed: train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10)\"\nassert train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10) == ([-0.2509, 0.9325, 1.6218, 0.6336], [6.9315, 5.5073, 4.6382, 4.0609, 3.6503, 3.3432, 3.1045, 2.9134, 2.7567, 2.6258]), \"test case failed: train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10)\""}
{"task_id": 107, "completion_id": 0, "passed": false, "result": "failed: axes don't match array", "solution": "import numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\nimport numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Args:\n        Q: Query matrix of shape [batch_size, seq_len, d_k]\n        K: Key matrix of shape [batch_size, seq_len, d_k]\n        V: Value matrix of shape [batch_size, seq_len, d_v]\n        mask: Attention mask of shape [batch_size, seq_len, seq_len]\n             with large negative values in positions to be masked\n    \n    Returns:\n        Output as a Python list after applying attention\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.matmul(Q, np.transpose(K, (0, 2, 1))) / np.sqrt(d_k)\n    scores = scores + mask\n    scores_max = np.max(scores, axis=-1, keepdims=True)\n    scores_exp = np.exp(scores - scores_max)\n    attention_weights = scores_exp / (np.sum(scores_exp, axis=-1, keepdims=True) + 1e-09)\n    output = np.matmul(attention_weights, V)\n    return output.tolist()\nnp.random.seed(42)\nX = np.arange(48).reshape(6,8)\nX = np.random.permutation(X.flatten()).reshape(6, 8)\nmask = np.triu(np.ones((6, 6))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(8,8))\nW_k = np.random.randint(0,5,size=(8,8))\nW_v = np.random.randint(0,6,size=(8,8))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\nX = np.arange(16).reshape(4,4)\nX = np.random.permutation(X.flatten()).reshape(4, 4)\nmask = np.triu(np.ones((4, 4))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(4,4))\nW_k = np.random.randint(0,5,size=(4,4))\nW_v = np.random.randint(0,6,size=(4,4))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[52.0, 63.0, 48.0, 71.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]"}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: test case failed: disorder([1,1,0,0])", "solution": "\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \n    The function uses Shannon entropy to quantify color diversity:\n    - Returns 0 when all apples are the same color\n    - Increases as the variety and distribution of colors increases\n    \n    Args:\n        apples: List of integers representing apple colors\n        \n    Returns:\n        A float value representing the disorder, rounded to 4 decimal places\n    \"\"\"\n    if not apples or len(set(apples)) <= 1:\n        return 0.0\n    from collections import Counter\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    import math\n    entropy = -sum((p * math.log2(p) for p in probabilities))\n    return round(entropy, 4)\nassert disorder([0,0,0,0]) == 0.0, \"test case failed: disorder([0,0,0,0])\"\nassert disorder([1,1,0,0]) == 0.5, \"test case failed: disorder([1,1,0,0])\"\nassert disorder([0,1,2,3]) == 0.75, \"test case failed: disorder([0,1,2,3])\"\nassert disorder([0,0,1,1,2,2,3,3]) == 0.75, \"test case failed: disorder([0,0,1,1,2,2,3,3])\"\nassert disorder([0,0,0,0,0,1,2,3]) == 0.5625, \"test case failed: disorder([0,0,0,0,0,1,2,3])\""}
{"task_id": 109, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform layer normalization on a 3D input tensor.\n    \n    Args:\n        X: Input tensor of shape (batch_size, sequence_length, features)\n        gamma: Scale parameter of shape (features,)\n        beta: Shift parameter of shape (features,)\n        epsilon: Small constant for numerical stability\n        \n    Returns:\n        Normalized tensor with the same shape as X, rounded to 5 decimal places and converted to list\n    \"\"\"\n    (batch_size, seq_length, features) = X.shape\n    gamma = gamma.reshape(1, 1, -1)\n    beta = beta.reshape(1, 1, -1)\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    out = gamma * X_norm + beta\n    return np.round(out, 5).tolist()\nassert layer_normalization(np.array([[[0.242, -1.913, -1.725], [-0.562, -1.013, 0.314]], [[-0.908, -1.412, 1.466], [-0.226, 0.068, -1.425]]]), np.array([[[1., 1., 1.]]]), np.array([[[0., 0., 0.]]])) == [[[1.40981, -0.80136, -0.60846], [-0.25714, -1.07574, 1.33288]], [[-0.49672, -0.89835, 1.39507], [0.46714, 0.92241, -1.38955]]]\nassert layer_normalization(np.array([[[-0.544, 0.111, -1.151, 0.376], [-0.601, -0.292, -0.602, 1.852], [-0.013, -1.058, 0.823, -1.221]], [[0.209, -1.96, -1.328, 0.197], [0.738, 0.171, -0.116, -0.301], [-1.479, -0.72, -0.461, 1.057]]]), np.array([[[1., 1., 1., 1.]]]), np.array([[[0., 0., 0., 0.]]])) == [[[-0.40765, 0.6957, -1.43015, 1.1421], [-0.67306, -0.37175, -0.67403, 1.71885], [0.42738, -0.83334, 1.43595, -1.02999]], [[0.97825, -1.30451, -0.63936, 0.96562], [1.5653, 0.12217, -0.6083, -1.07917], [-1.17069, -0.34662, -0.06542, 1.58272]]]\nassert layer_normalization(np.array([[[0.344, -1.763, 0.324, -0.385], [-0.677, 0.612, 1.031, 0.931], [-0.839, -0.309, 0.331, 0.976]], [[-0.479, -0.186, -1.106, -1.196], [0.813, 1.356, -0.072, 1.004], [0.362, -0.645, 0.361, 1.538]]]), np.array([[[0.5, 0.5, 0.5, 0.5]]]), np.array([[[1., 1., 1., 1.]]])) == [[[1.41697, 0.1865, 1.40529, 0.99124], [0.15654, 1.10092, 1.4079, 1.33464], [0.35485, 0.74396, 1.21383, 1.68737]], [[1.31031, 1.65635, 0.56982, 0.46353], [1.03585, 1.5515, 0.19543, 1.21723], [0.97283, 0.32146, 0.97219, 1.73352]]]"}
{"task_id": 110, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Calculate METEOR score between reference and candidate translations.\n    \n    Args:\n        reference (str): Reference translation\n        candidate (str): Candidate translation to evaluate\n        alpha (float): Parameter controlling relative weight of precision and recall\n        beta (float): Parameter for penalty calculation\n        gamma (float): Parameter controlling penalty impact\n    \n    Returns:\n        float: METEOR score rounded to 3 decimal places\n    \"\"\"\n    ref_tokens = reference.lower().split()\n    cand_tokens = candidate.lower().split()\n    ref_counts = Counter(ref_tokens)\n    cand_counts = Counter(cand_tokens)\n    matches = sum((ref_counts & cand_counts).values())\n    if matches == 0:\n        return 0.0\n    precision = matches / len(cand_tokens) if len(cand_tokens) > 0 else 0\n    recall = matches / len(ref_tokens) if len(ref_tokens) > 0 else 0\n    if precision + recall == 0:\n        return 0.0\n    fmean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    ref_matched = []\n    cand_matched = []\n    for (i, token) in enumerate(ref_tokens):\n        if token in cand_tokens:\n            ref_matched.append((i, token))\n    for (i, token) in enumerate(cand_tokens):\n        if token in ref_tokens:\n            cand_matched.append((i, token))\n    ref_matched.sort(key=lambda x: x[1])\n    cand_matched.sort(key=lambda x: x[1])\n    chunks = 1\n    for i in range(1, len(ref_matched)):\n        if ref_matched[i][0] != ref_matched[i - 1][0] + 1 or cand_matched[i][0] != cand_matched[i - 1][0] + 1:\n            chunks += 1\n    frag_frac = chunks / matches if matches > 0 else 0\n    penalty = gamma * frag_frac ** beta\n    score = fmean * (1 - penalty)\n    return round(score, 3)\nassert meteor_score('The dog barks at the moon', 'The dog barks at the moon') == 0.998\nassert meteor_score('Rain falls gently from the sky', 'Gentle rain drops from the sky') == 0.625\nassert meteor_score('The sun shines brightly', 'Clouds cover the sky') == 0.125\nassert meteor_score('Birds sing in the trees', 'Birds in the trees sing') == 0.892\n\nassert meteor_score(\"The cat sits on the mat\", \"The cat on the mat sits\") == 0.938"}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information between two events.\n    \n    Parameters:\n    joint_counts (float): Number of times events x and y occurred together\n    total_counts_x (float): Total occurrences of event x\n    total_counts_y (float): Total occurrences of event y\n    total_samples (float): Total number of samples\n    \n    Returns:\n    float: The PMI value rounded to 3 decimal places\n    \"\"\"\n    if joint_counts == 0:\n        return float('-inf')\n    pmi = np.log(joint_counts * total_samples / (total_counts_x * total_counts_y))\n    return round(pmi, 3)\nassert compute_pmi(10, 50, 50, 200) == -0.322\nassert compute_pmi(100, 500, 500, 1000) == -1.322\nassert compute_pmi(100, 400, 600, 1200) == -1\nassert compute_pmi(100, 100, 100, 100) == 0.0\nassert compute_pmi(25, 50, 50, 100) == 0.0\nassert compute_pmi(10, 50, 50, 100) == -1.322\nassert compute_pmi(0, 50, 50, 100) == float('-inf')"}
{"task_id": 112, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Performs Min-Max Normalization on a list of integers,\n    scaling all values to the range [0, 1].\n    \n    Args:\n        x: A list of integers to normalize\n        \n    Returns:\n        A list of floats normalized to the range [0, 1],\n        rounded to 4 decimal places\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]\nassert min_max([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert min_max([30, 45, 56, 70, 88]) == [0.0, 0.2586, 0.4483, 0.6897, 1.0]\nassert min_max([5, 5, 5, 5]) == [0.0, 0.0, 0.0, 0.0]\nassert min_max([-3, -2, -1, 0, 1, 2, 3]) == [0.0, 0.1667, 0.3333, 0.5, 0.6667, 0.8333, 1.0]\nassert min_max([1,]) == [0.0]"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    Implements a simple residual block with shortcut connection.\n    \n    Args:\n        x: Input 1D array\n        w1: First weight matrix\n        w2: Second weight matrix\n        \n    Returns:\n        Output of the residual block rounded to 4 decimal places as a list\n    \"\"\"\n    h1 = np.dot(x, w1)\n    h1_relu = np.maximum(0, h1)\n    h2 = np.dot(h1_relu, w2)\n    output = h2 + x\n    final_output = np.maximum(0, output)\n    return np.round(final_output, 4).tolist()\nassert residual_block(np.array([1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [1.5, 3.0]\nassert residual_block(np.array([-1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0.,3.]\nassert residual_block(np.array([0.0, 0.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0., 0.]\nassert residual_block(np.array([5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [10.0, 19.5]\nassert residual_block(np.array([-5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [0.0, 3.0]"}
{"task_id": 114, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Performs Global Average Pooling on a 3D NumPy array.\n    \n    Args:\n        x: Input array of shape (height, width, channels)\n        \n    Returns:\n        1D array of shape (channels,) where each element is the average of all values\n        in the corresponding feature map\n    \"\"\"\n    if len(x.shape) != 3:\n        raise ValueError(f'Expected 3D input with shape (height, width, channels), got shape {x.shape}')\n    return np.mean(x, axis=(0, 1))\nassert global_avg_pool(np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])) == [5.5,6.5,7.5]\nassert global_avg_pool(np.array([[[100, 200]]])) == [100.0, 200.0]\nassert global_avg_pool(np.ones((3, 3, 1))) == [1.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, -4]]])) == [0.0, 0.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, 4]]])) == [0.0, 2.0]"}
{"task_id": 115, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Applies batch normalization to a 4D input tensor in BCHW format\n    \n    Args:\n        X: Input tensor of shape (batch_size, channels, height, width)\n        gamma: Scale parameter of shape (channels,)\n        beta: Shift parameter of shape (channels,)\n        epsilon: Small constant for numerical stability\n        \n    Returns:\n        Normalized tensor with same shape as input, rounded to 4 decimal places\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    gamma_reshaped = gamma.reshape(1, -1, 1, 1)\n    beta_reshaped = beta.reshape(1, -1, 1, 1)\n    out = gamma_reshaped * X_norm + beta_reshaped\n    return np.round(out, 4).tolist()\nassert batch_normalization(np.array([[[[0.4967, -0.1383], [0.6477, 1.523]], [[-0.2342, -0.2341], [1.5792, 0.7674]]], [[[-0.4695, 0.5426], [-0.4634, -0.4657]], [[0.242, -1.9133], [-1.7249, -0.5623]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[0.4286, -0.5178], [0.6536, 1.9582]], [[0.0235, 0.0236], [1.6735, 0.9349]]], [[[-1.0114, 0.497], [-1.0023, -1.0058]], [[0.4568, -1.5043], [-1.3329, -0.275]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[1.8177, 0.161], [0.3841, 0.062]], [[1.0043, -0.3714], [-1.121, 0.9403]]], [[[-1.948, 0.2503], [0.0819, -0.809]], [[0.3488, -0.9946], [-1.2417, 1.4352]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1) * 0.5, np.ones(2).reshape(1, 2, 1, 1)) == [[[[1.9089, 1.0805], [1.1921, 1.031]], [[1.5021, 0.8143], [0.4395, 1.4702]]], [[[0.026, 1.1251], [1.0409, 0.5955]], [[1.1744, 0.5027], [0.3792, 1.7176]]]]"}
{"task_id": 116, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of a polynomial term of the form c * x^n at a given point x.\n    \n    Args:\n        c (float): The coefficient of the term\n        x (float): The point at which to evaluate the derivative\n        n (float): The exponent of the term\n        \n    Returns:\n        float: The value of the derivative at point x, rounded to 4 decimal places\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)\nassert poly_term_derivative(2.0, 3.0, 2.0) == 12.0\nassert poly_term_derivative(1.5, 4.0, 0.0) == 0.0\nassert poly_term_derivative(3.0, 2.0, 3.0) == 36.0\nassert poly_term_derivative(0.5, 5.0, 1.0) == 0.5\nassert poly_term_derivative(2.0, 3.0, 4.0) == 216.0\nassert poly_term_derivative(2.0, 3.0, 0.0) == 0.0"}
{"task_id": 117, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by a list of 2D vectors\n    using the Gram-Schmidt process.\n    \n    Args:\n        vectors: List of 2D vectors represented as lists of floats\n        tol: Tolerance value to determine linear independence\n        \n    Returns:\n        List of orthonormal vectors (as lists) that form a basis for the subspace\n    \"\"\"\n    vectors = [np.array(v) for v in vectors]\n    orthogonal_vectors = []\n    for v in vectors:\n        u = v.copy()\n        for w in orthogonal_vectors:\n            projection = np.dot(v, w) / np.dot(w, w) * w\n            u = u - projection\n        norm = np.linalg.norm(u)\n        if norm > tol:\n            orthogonal_vectors.append(u)\n    orthonormal_vectors = []\n    for u in orthogonal_vectors:\n        unit_vector = u / np.linalg.norm(u)\n        unit_vector = np.round(unit_vector, 4)\n        orthonormal_vectors.append(unit_vector.tolist())\n    return orthonormal_vectors\nassert orthonormal_basis([[1, 0], [1, 1]]) == [[1.0, 0.0], [0., 1.]]\nassert orthonormal_basis([[2, 0], [4, 0]], tol=1e-10) == [[1.0, 0.0]]\nassert orthonormal_basis([[1, 1], [1, -1]], tol=1e-5) == [[0.7071, 0.7071], [0.7071, -0.7071]]\nassert orthonormal_basis([[0, 0]], tol=1e-10) == []\nassert orthonormal_basis([[1, 3], [3, 1]], tol=1e-10) == [[0.3162, 0.9487], [0.9487, -0.3162]]\nassert orthonormal_basis([[3, 3], [3, 1]], tol=1e-10) == [[0.7071, 0.7071], [0.7071, -0.7071]]"}
{"task_id": 118, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_product(a, b):\n    a_array = np.array(a)\n    b_array = np.array(b)\n    result = np.cross(a_array, b_array)\n    return result.round(4).tolist()\nassert cross_product([1, 0, 0], [0, 1, 0]) == [0, 0, 1]\nassert cross_product([0, 1, 0], [0, 0, 1]) == [1, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([1, 0, 0], [1, 0, 0]) == [0, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([12, 2, 3], [4, 45, 6]) == [-123, -60, 532]\nassert cross_product([1.2, 2.3, 4.4], [-4, 4, -4]) == [-26.8, -12.8, 14.0]"}
{"task_id": 119, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve a system of linear equations using Cramer's Rule.\n    \n    Args:\n        A: Square coefficient matrix\n        b: Constant vector\n        \n    Returns:\n        Solution vector as a list (rounded to 4 decimal places)\n        -1 if there's no unique solution (determinant of A is zero)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if b.ndim > 1:\n        b = b.flatten()\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    x = np.round(x, 4)\n    return x.tolist()\nassert cramers_rule([[2, -1, 3], [4, 2, 1], [-6, 1, -2]], [5, 10, -3]) == [0.1667, 3.3333, 2.6667]\nassert cramers_rule([[1, 2], [3, 4]], [5, 6]) == [-4.,4.5]\nassert cramers_rule([[1, 2], [2, 4]], [3, 6]) == -1"}
{"task_id": 120, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = sum((np.sqrt(p_i * q_i) for (p_i, q_i) in zip(p, q)))\n    if bc > 0:\n        distance = -np.log(bc)\n    else:\n        return 9999.9999\n    return round(distance, 4)\nassert bhattacharyya_distance([0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]) == 0.1166\nassert bhattacharyya_distance([0.7, 0.2, 0.1], [0.4, 0.3, 0.3]) == 0.0541\nassert bhattacharyya_distance([], [0.5, 0.4, 0.1]) == 0.0\nassert bhattacharyya_distance([0.6, 0.4], [0.1, 0.7, 0.2]) == 0.0\nassert bhattacharyya_distance([0.6, 0.2, 0.1, 0.1], [0.1, 0.2, 0.3, 0.4]) == 0.2007"}
{"task_id": 121, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the element-wise sum of two vectors.\n    \n    Args:\n        a: First vector (list of numbers)\n        b: Second vector (list of numbers)\n        \n    Returns:\n        A new vector representing the element-wise sum if vectors have the same length,\n        or -1 if the vectors have incompatible dimensions.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result\nassert vector_sum([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert vector_sum([1, 2], [1, 2, 3]) == -1\nassert vector_sum([1.5, 2.5, 3.0], [2, 1, 4]) == [3.5, 3.5, 7.0]"}
{"task_id": 122, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    gradient = np.zeros_like(theta)\n    num_episodes = len(episodes)\n    for episode in episodes:\n        returns = []\n        G = 0\n        for (_, _, reward) in reversed(episode):\n            G += reward\n            returns.insert(0, G)\n        for ((state, action, _), G) in zip(episode, returns):\n            logits = theta[state, :]\n            shifted_logits = logits - np.max(logits)\n            exp_logits = np.exp(shifted_logits)\n            policy = exp_logits / np.sum(exp_logits)\n            gradient[state, :] -= policy * G\n            gradient[state, action] += G\n    gradient = np.round(gradient / num_episodes, 4)\n    return gradient.tolist()\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,1,0), (1,0,1)], [(0,0,0)]]) == [[-0.25, 0.25], [0.25, -0.25]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,0,0), (0,1,0)], [(1,1,0)]]) == [[0.0, 0.0], [0.0, 0.0]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(1,0,1), (1,1,1)], [(1,0,0)]]) == [[0.0, 0.0], [0.25, -0.25]]"}
{"task_id": 123, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate computational efficiency of MoE compared to dense layer.\n    \n    Args:\n        n_experts: Number of experts in the MoE layer\n        k_active: Number of active experts per forward pass\n        d_in: Input dimension\n        d_out: Output dimension\n        \n    Returns:\n        Dictionary with dense_flops, moe_flops, and savings_percentage\n    \"\"\"\n    dense_flops = 2 * d_in * d_out\n    gating_flops = 2 * d_in * n_experts\n    expert_flops = k_active * 2 * d_in * d_out\n    combination_flops = k_active * d_out\n    moe_flops = gating_flops + expert_flops + combination_flops\n    savings_percentage = (dense_flops - moe_flops) / dense_flops * 100\n    savings_percentage = round(savings_percentage, 1)\n    return {'dense_flops': dense_flops, 'moe_flops': moe_flops, 'savings_percentage': savings_percentage}\nassert compute_efficiency(1000, 2, 512, 512) == 99.8\nassert compute_efficiency(10, 2, 256, 256) == 80.0\nassert compute_efficiency(100, 4, 512, 512) == 96.0"}
{"task_id": 124, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    logits = np.dot(X, W_g)\n    noise = np.dot(N, W_noise)\n    noisy_logits = logits + noise\n    masked_logits = np.full_like(noisy_logits, -np.inf)\n    top_k_indices = np.argpartition(noisy_logits, -k, axis=1)[:, -k:]\n    batch_indices = np.arange(noisy_logits.shape[0])[:, None]\n    masked_logits[batch_indices, top_k_indices] = noisy_logits[batch_indices, top_k_indices]\n    max_logits = np.max(masked_logits, axis=1, keepdims=True)\n    exp_logits = np.exp(masked_logits - max_logits)\n    probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n    rounded_probabilities = np.round(probabilities, 4)\n    return rounded_probabilities.tolist()\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.zeros((2,2)), np.zeros((1,2)), k=1) == [[0., 1.]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.5], [0.5, 0.5]]), np.array([[1.0, -1.0]]), k=2) == [[0.917, 0.083]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.25, 0.25], [0.5, 0.5]]), np.zeros((1,2)), k=2) == [[0.2689, 0.7311]]"}
{"task_id": 125, "completion_id": 0, "passed": false, "result": "failed: index 3 is out of bounds for axis 1 with size 3", "solution": "import numpy as np\nimport numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    logits = np.matmul(x, Wg)\n    exp_logits = np.exp(logits)\n    routing_probs = exp_logits / np.sum(exp_logits, axis=-1, keepdims=True)\n    top_k_indices = np.argsort(routing_probs, axis=-1)[:, -top_k:]\n    top_k_probs = np.take_along_axis(routing_probs, top_k_indices, axis=1)\n    normalized_probs = top_k_probs / np.sum(top_k_probs, axis=1, keepdims=True)\n    batch_size = x.shape[0]\n    output_dim = We.shape[2]\n    output = np.zeros((batch_size, output_dim))\n    for i in range(batch_size):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_output = np.matmul(x[i], We[expert_idx])\n            output[i] += normalized_probs[i, j] * expert_output\n    output = np.round(output, 4)\n    return output.tolist()\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4) , 4, 2) == [[[0.5148, 0.4329], [0.5554, 0.5447], [0.1285, 0.102 ]], [[0.339, 0.3046], [0.5391, 0.417 ], [0.3597, 0.3262]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.zeros((4, 2, 2)), np.random.rand(2, 4), 4, 2) == [[[0., 0.], [0., 0.], [0., 0.]], [[0., 0.], [0., 0.], [0., 0.]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4), 4, 1) == [[[0.5069, 0.4006], [0.6228, 0.3214], [0.141, 0.0789]], [[0.2886, 0.3254], [0.5747, 0.3433], [0.2959, 0.3582]]]"}
{"task_id": 126, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (batch_size, num_channels, height, width) = X.shape\n    assert num_channels % num_groups == 0, 'Number of channels must be divisible by number of groups'\n    channels_per_group = num_channels // num_groups\n    X_reshaped = X.reshape(batch_size, num_groups, channels_per_group, height, width)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(batch_size, num_channels, height, width)\n    gamma_reshaped = gamma.reshape(1, num_channels, 1, 1)\n    beta_reshaped = beta.reshape(1, num_channels, 1, 1)\n    out = gamma_reshaped * X_normalized + beta_reshaped\n    out = np.around(out, decimals=4)\n    return out.tolist()\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 2), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[-0.2287, -1.2998], [ 0.026, 1.5025]], [[-0.926, -0.9259], [1.46, 0.3919]]], [[[-0.5848, 1.732 ], [-0.5709, -0.5762]], [[1.4005, -1.0503], [-0.8361, 0.486 ]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 1), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[1. ], [-1. ]], [[-1. ], [1. ]]], [[[-0.0026],[0.0026]], [[1. ], [-1.]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 3), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[0.2419, -0.7606, 0.4803], [1.8624, -0.912, -0.912]], [[1.7041, 0.6646, -0.9193], [0.3766, -0.9115, -0.9145]]], [[[1.173, -1.31, -1.093], [0.2464, -0.2726, 1.2563]], [[-0.4992, -1.0008, 1.8623], [0.1796, 0.4714, -1.0132]]]]"}
{"task_id": 127, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Find the value of x where f(x) = x^4 - 3x^3 + 2 reaches its minimum.\n    \n    Args:\n        start_x: Initial x value to start the search\n        learning_rate: Step size for gradient descent\n        tolerance: Stop when the gradient's magnitude is below this value\n        max_iters: Maximum number of iterations to perform\n        \n    Returns:\n        The x-value corresponding to the minimum of f(x), rounded to 4 decimal places\n    \"\"\"\n    x = start_x\n    for i in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        if abs(gradient) < tolerance:\n            break\n        x = x - learning_rate * gradient\n    return round(x, 4)\nassert find_treasure(-1.0) == 2.3366\nassert find_treasure(1.0) == 2.1475\nassert find_treasure(3.0) == 2.3366"}
{"task_id": 128, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) function as a normalization-free transformation.\n    \n    Args:\n        x: Input numpy array\n        alpha: Controls the steepness of the tanh function\n        gamma: Scales the output\n        beta: Bias term\n        \n    Returns:\n        List of transformed values rounded to 4 decimal places\n    \"\"\"\n    result = gamma * np.tanh(alpha * x) + beta\n    result = np.round(result, 4)\n    return result.tolist()\nassert dynamic_tanh(np.array([[[0.94378259]],[[0.97754654]],[[0.36168351]],[[0.51821078]],[[0.76961589]]]), 0.5, np.ones((1,)), np.zeros((1,))) == [[[0.4397]], [[0.4532]], [[0.1789]], [[0.2535]], [[0.3669]]]\nassert dynamic_tanh(np.array([[[0.20793482, 0.16989285, 0.03898972], [0.17912554, 0.10962205, 0.3870742], [0.00107181, 0.35807922, 0.15861333]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1036, 0.0847, 0.0195], [0.0893, 0.0548, 0.1912], [0.0005, 0.1772, 0.0791]]]\nassert dynamic_tanh(np.array([[[0.35, 0.16, 0.42], [0.17, 0.25, 0.38], [0.71, 0.35, 0.68]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1732, 0.0798, 0.207], [0.0848, 0.1244, 0.1877], [0.3408, 0.1732, 0.3275]]]"}
