{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Args:\n        data: An ndarray where the last column is the target y and all preceding\n              columns are the features X.\n        alpha: The regularisation strength (non-negative).\n\n    Returns:\n        The weight vector rounded to 4 decimal places as a Python list,\n        or -1 if the matrix (X.T @ X + alpha * I) is not invertible.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    X = data[:, :-1]\n    y = data[:, -1]\n\n    # Add bias term (column of ones)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n\n    # Compute the matrix for inversion\n    XTX = X.T @ X\n    identity_matrix = np.eye(XTX.shape[0])\n    matrix_to_invert = XTX + alpha * identity_matrix\n\n    # Check for invertibility\n    if np.linalg.det(matrix_to_invert) == 0:\n        return -1\n\n    # Compute the weight vector\n    try:\n        inverse_matrix = np.linalg.inv(matrix_to_invert)\n        weights = inverse_matrix @ X.T @ y\n    except np.linalg.LinAlgError:\n        # This catch is a safeguard, as the determinant check should handle most cases\n        return -1\n\n    # Round and convert to list\n    rounded_weights = np.round(weights, 4)\n    return rounded_weights.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple linear data with some noise\n    np.random.seed(42)\n    X_train = 2 * np.random.rand(100, 1)\n    y_train = 4 + 3 * X_train + np.random.randn(100, 1)\n    data_train = np.hstack((X_train, y_train))\n\n    # Test with alpha = 0 (equivalent to OLS)\n    weights_ols = ridge_regression(data_train, alpha=0.0)\n    print(f\"Weights (alpha=0): {weights_ols}\")\n\n    # Test with a small alpha\n    weights_ridge_small = ridge_regression(data_train, alpha=0.1)\n    print(f\"Weights (alpha=0.1): {weights_ridge_small}\")\n\n    # Test with a larger alpha\n    weights_ridge_large = ridge_regression(data_train, alpha=10.0)\n    print(f\"Weights (alpha=10.0): {weights_ridge_large}\")\n\n    # Test with a singular matrix (example - not guaranteed to be singular in all runs)\n    # Create a dataset where one feature is a linear combination of others\n    data_singular = np.array([\n        [1, 2, 3, 6],\n        [2, 4, 6, 12],\n        [3, 6, 9, 18]\n    ])\n    weights_singular = ridge_regression(data_singular, alpha=0.0)\n    print(f\"Weights (singular matrix, alpha=0): {weights_singular}\") # Should return -1\n\n    # Test with an empty dataset\n    data_empty = np.array([])\n    weights_empty = ridge_regression(data_empty, alpha=1.0)\n    print(f\"Weights (empty data): {weights_empty}\") # Should return []\n\n    # Test with a dataset with only one data point\n    data_single_point = np.array([[1, 2, 5]])\n    weights_single_point = ridge_regression(data_single_point, alpha=0.0)\n    print(f\"Weights (single data point, alpha=0): {weights_single_point}\")\n\n    # Test with a dataset with only one feature and one data point\n    data_single_feature_single_point = np.array([[1, 5]])\n    weights_single_feature_single_point = ridge_regression(data_single_feature_single_point, alpha=0.0)\n    print(f\"Weights (single feature, single data point, alpha=0): {weights_single_feature_single_point}\")\n```"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    converged = False\n\n    # Compute the Gram matrix\n    K = X_train @ X_train.T\n\n    while updates < n_iter and not converged:\n        converged = True\n        for i in range(n_samples):\n            # Compute activation\n            activation = np.sum(alpha * y_train * K[:, i])\n\n            # Test the margin\n            margin = y_train[i] * (activation + b)\n\n            if margin <= 0:\n                # Misclassified, update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                converged = False\n                # Restart scan from i = 0 (implicitly done by the outer while loop)\n                break # Break the inner loop to restart the scan\n\n    # Compute the primal weight vector w\n    w = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n\n    # Round w and b to 4 decimal places\n    w_rounded = [round(float(val), 4) for val in w]\n    b_rounded = round(float(b), 4)\n\n    return w_rounded, b_rounded\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n    y_train = np.array([1, 1, 1, -1, -1])\n\n    w, b = perceptron_dual(X_train, y_train)\n    print(f\"Learned weights w: {w}\")\n    print(f\"Learned bias b: {b}\")\n\n    # Another example\n    X_train_2 = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])\n    y_train_2 = np.array([-1, 1, 1, 1])\n\n    w2, b2 = perceptron_dual(X_train_2, y_train_2)\n    print(f\"Learned weights w2: {w2}\")\n    print(f\"Learned bias b2: {b2}\")\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n\n    # 1. Identity link\n    links[\"identity\"] = {\n        \"link\": lambda mu: mu,\n        \"inv_link\": lambda eta: eta,\n        \"derivative\": lambda mu: np.ones_like(mu)\n    }\n\n    # 2. Log link\n    links[\"log\"] = {\n        \"link\": lambda mu: np.log(mu),\n        \"inv_link\": lambda eta: np.exp(eta),\n        \"derivative\": lambda mu: 1 / mu\n    }\n\n    # 3. Logit link\n    links[\"logit\"] = {\n        \"link\": lambda mu: np.log(mu / (1 - mu)),\n        \"inv_link\": lambda eta: 1 / (1 + np.exp(-eta)),\n        \"derivative\": lambda mu: 1 / (mu * (1 - mu))\n    }\n\n    return links\n\nif __name__ == '__main__':\n    links = glm_links()\n\n    # Example usage from the description\n    mu = np.array([0.2, 0.8])\n    eta = links[\"logit\"][\"link\"](mu)\n    print(f\"Logit link(mu): {np.round(eta, 4)}\")\n\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    print(f\"Logit inv_link(eta): {np.round(mu2, 4)}\")\n\n    # Additional examples\n    print(\"\\n--- Identity Link ---\")\n    mu_id = np.array([1.5, -0.5, 10.0])\n    eta_id = links[\"identity\"][\"link\"](mu_id)\n    print(f\"Identity link(mu): {np.round(eta_id, 4)}\")\n    mu_id_inv = links[\"identity\"][\"inv_link\"](eta_id)\n    print(f\"Identity inv_link(eta): {np.round(mu_id_inv, 4)}\")\n    deriv_id = links[\"identity\"][\"derivative\"](mu_id)\n    print(f\"Identity derivative(mu): {np.round(deriv_id, 4)}\")\n\n    print(\"\\n--- Log Link ---\")\n    mu_log = np.array([0.1, 1.0, 5.0])\n    eta_log = links[\"log\"][\"link\"](mu_log)\n    print(f\"Log link(mu): {np.round(eta_log, 4)}\")\n    mu_log_inv = links[\"log\"][\"inv_link\"](eta_log)\n    print(f\"Log inv_link(eta): {np.round(mu_log_inv, 4)}\")\n    deriv_log = links[\"log\"][\"derivative\"](mu_log)\n    print(f\"Log derivative(mu): {np.round(deriv_log, 4)}\")\n\n    print(\"\\n--- Logit Link ---\")\n    mu_logit = np.array([0.01, 0.5, 0.99])\n    eta_logit = links[\"logit\"][\"link\"](mu_logit)\n    print(f\"Logit link(mu): {np.round(eta_logit, 4)}\")\n    mu_logit_inv = links[\"logit\"][\"inv_link\"](eta_logit)\n    print(f\"Logit inv_link(eta): {np.round(mu_logit_inv, 4)}\")\n    deriv_logit = links[\"logit\"][\"derivative\"](mu_logit)\n    print(f\"Logit derivative(mu): {np.round(deriv_logit, 4)}\")\n\n    # Test with scalar input\n    print(\"\\n--- Scalar Input Test (Logit) ---\")\n    mu_scalar = 0.75\n    eta_scalar = links[\"logit\"][\"link\"](mu_scalar)\n    print(f\"Logit link(scalar mu): {np.round(eta_scalar, 4)}\")\n    mu_scalar_inv = links[\"logit\"][\"inv_link\"](eta_scalar)\n    print(f\"Logit inv_link(scalar eta): {np.round(mu_scalar_inv, 4)}\")\n    deriv_scalar = links[\"logit\"][\"derivative\"](mu_scalar)\n    print(f\"Logit derivative(scalar mu): {np.round(deriv_scalar, 4)}\")\n\n    # Test with 2D array input\n    print(\"\\n--- 2D Array Input Test (Identity) ---\")\n    mu_2d = np.array([[1, 2], [3, 4]])\n    eta_2d = links[\"identity\"][\"link\"](mu_2d)\n    print(f\"Identity link(2D mu):\\n{np.round(eta_2d, 4)}\")\n    mu_2d_inv = links[\"identity\"][\"inv_link\"](eta_2d)\n    print(f\"Identity inv_link(2D eta):\\n{np.round(mu_2d_inv, 4)}\")\n    deriv_2d = links[\"identity\"][\"derivative\"](mu_2d)\n    print(f\"Identity derivative(2D mu):\\n{np.round(deriv_2d, 4)}\")\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    n_samples, n_features = data.shape\n    depths = [0] * n_samples\n\n    def build_tree(indices, current_depth):\n        if len(indices) < 3:\n            for idx in indices:\n                depths[idx] = current_depth\n            return\n\n        f = np.random.randint(0, n_features)\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n\n        # Handle the case where all values for the chosen feature are the same\n        if down == up:\n            for idx in indices:\n                depths[idx] = current_depth\n            return\n\n        v = np.random.uniform(down, up)\n\n        left_indices = [idx for idx in indices if data[idx, f] <= v]\n        right_indices = [idx for idx in indices if data[idx, f] > v]\n\n        # Handle cases where one side is empty (can happen if v is min or max)\n        if not left_indices:\n            for idx in right_indices:\n                depths[idx] = current_depth\n            return\n        if not right_indices:\n            for idx in left_indices:\n                depths[idx] = current_depth\n            return\n\n        build_tree(left_indices, current_depth + 1)\n        build_tree(right_indices, current_depth + 1)\n\n    build_tree(list(range(n_samples)), 0)\n\n    return depths\n\nif __name__ == '__main__':\n    data = np.arange(5).reshape(-1, 1)\n    result = isolation_tree_path_length(data)\n    print(result)\n\n    data2 = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    result2 = isolation_tree_path_length(data2)\n    print(result2)\n\n    data3 = np.array([[1, 1], [1, 1], [1, 1]])\n    result3 = isolation_tree_path_length(data3)\n    print(result3)\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * num_transactions)\n    frequent_itemsets: Dict[Tuple[Hashable, ...], int] = {}\n\n    # Find frequent 1-itemsets\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):  # Use set to handle duplicates within a transaction\n            item_counts[item] += 1\n\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support_count}\n\n    if not frequent_items:\n        return {}\n\n    for item in sorted(list(frequent_items)):\n        frequent_itemsets[(item,)] = item_counts[item]\n\n    # Find frequent k-itemsets for k > 1\n    current_frequent_itemsets = {frozenset(itemset) for itemset in frequent_itemsets.keys()}\n    k = 2\n\n    while current_frequent_itemsets:\n        candidate_itemsets = set()\n        # Generate candidate k-itemsets from frequent (k-1)-itemsets\n        for itemset1 in current_frequent_itemsets:\n            for itemset2 in current_frequent_itemsets:\n                union_set = itemset1.union(itemset2)\n                if len(union_set) == k:\n                    # Check if all (k-1)-subsets of the candidate are frequent\n                    is_valid_candidate = True\n                    for subset in combinations(union_set, k - 1):\n                        if frozenset(subset) not in current_frequent_itemsets:\n                            is_valid_candidate = False\n                            break\n                    if is_valid_candidate:\n                        candidate_itemsets.add(union_set)\n\n        if not candidate_itemsets:\n            break\n\n        # Count support for candidate k-itemsets\n        candidate_counts = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in candidate_itemsets:\n                if candidate.issubset(transaction_set):\n                    candidate_counts[candidate] += 1\n\n        # Identify frequent k-itemsets\n        next_frequent_itemsets = set()\n        for itemset, count in candidate_counts.items():\n            if count >= min_support_count:\n                sorted_itemset = tuple(sorted(list(itemset)))\n                frequent_itemsets[sorted_itemset] = count\n                next_frequent_itemsets.add(itemset)\n\n        current_frequent_itemsets = next_frequent_itemsets\n        k += 1\n\n    return frequent_itemsets\n\nif __name__ == '__main__':\n    transactions = [\n        ['bread', 'milk'],\n        ['bread', 'diaper', 'beer', 'egg'],\n        ['milk', 'diaper', 'beer', 'coke'],\n        ['bread', 'milk', 'diaper', 'beer'],\n        ['bread', 'milk', 'diaper', 'coke']\n    ]\n    minsup = 0.6\n\n    frequent_itemsets = find_frequent_itemsets(transactions, minsup)\n    print(frequent_itemsets)\n\n    transactions2 = [\n        ['A', 'B', 'C'],\n        ['A', 'C'],\n        ['A', 'D'],\n        ['B', 'E']\n    ]\n    minsup2 = 0.5\n    frequent_itemsets2 = find_frequent_itemsets(transactions2, minsup2)\n    print(frequent_itemsets2)\n\n    transactions3 = [\n        ['A', 'B'],\n        ['C', 'D']\n    ]\n    minsup3 = 0.6\n    frequent_itemsets3 = find_frequent_itemsets(transactions3, minsup3)\n    print(frequent_itemsets3)\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    # 1. choose initial cluster centres\n    centres = data[:k].copy()\n\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iter):\n        # 2. assign every sample to its nearest centre\n        distances = np.sum((data[:, np.newaxis, :] - centres) ** 2, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        # Check for empty clusters and re-initialize\n        for cluster_idx in range(k):\n            if np.sum(new_labels == cluster_idx) == 0:\n                random_sample_index = np.random.randint(0, n_samples)\n                centres[cluster_idx] = data[random_sample_index]\n\n        # Re-calculate distances and labels after potential re-initialization\n        distances = np.sum((data[:, np.newaxis, :] - centres) ** 2, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        # 3. recompute each centre\n        new_centres = np.zeros_like(centres)\n        for cluster_idx in range(k):\n            samples_in_cluster = data[new_labels == cluster_idx]\n            if len(samples_in_cluster) > 0:\n                new_centres[cluster_idx] = np.mean(samples_in_cluster, axis=0)\n            else:\n                # This case should ideally not happen after the empty cluster check,\n                # but as a safeguard, re-initialize if it does.\n                random_sample_index = np.random.randint(0, n_samples)\n                new_centres[cluster_idx] = data[random_sample_index]\n\n\n        # 4. stop when the maximum change of any centre becomes smaller than epsilon\n        centre_movement = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        centres = new_centres\n        labels = new_labels\n\n        if centre_movement < epsilon:\n            break\n\n    # Round centres to 4 decimal places\n    rounded_centres = [[round(coord, 4) for coord in centre] for centre in centres]\n\n    return rounded_centres, labels.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    data = np.array([\n        [1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6],\n        [9, 11], [1, 3], [8, 9], [0, 0], [10, 2],\n        [1, 1], [9, 10], [3, 3], [8, 2], [7, 7]\n    ])\n\n    k = 3\n    centres, labels = kmeans(data, k)\n\n    print(\"Cluster Centres:\")\n    for i, centre in enumerate(centres):\n        print(f\"Cluster {i}: {centre}\")\n\n    print(\"\\nSample Labels:\")\n    print(labels)\n\n    # Example with more data and different k\n    data_large = np.random.rand(100, 5) * 10\n    k_large = 5\n    centres_large, labels_large = kmeans(data_large, k_large)\n\n    print(\"\\nCluster Centres (Large Data):\")\n    for i, centre in enumerate(centres_large):\n        print(f\"Cluster {i}: {centre}\")\n\n    print(\"\\nSample Labels (Large Data):\")\n    print(labels_large[:20], \"...\") # Print only the first few labels\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n\n    # 1. Build item-item similarity matrix\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users who rated both items i and j\n            rated_by_both_indices = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n\n            if len(rated_by_both_indices) > 0:\n                v1 = data[rated_by_both_indices, i]\n                v2 = data[rated_by_both_indices, j]\n\n                if criterion == \"cosine\":\n                    # Mean center if standard deviation is large enough\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n\n                    # Compute cosine similarity\n                    norm_v1 = np.linalg.norm(v1)\n                    norm_v2 = np.linalg.norm(v2)\n                    if norm_v1 > 1e-6 and norm_v2 > 1e-6:\n                        similarity = np.dot(v1, v2) / (norm_v1 * norm_v2)\n                    else:\n                        similarity = 0.0\n                elif criterion == \"pearson\":\n                    # Compute Pearson correlation\n                    similarity = np.corrcoef(v1, v2)[0, 1]\n                else:\n                    raise ValueError(\"Invalid criterion. Choose 'cosine' or 'pearson'.\")\n\n                S[i, j] = S[j, i] = similarity\n\n    # 2. Collect rated items and ratings for the active user\n    rated_items_indices = np.where(data[user_ind, :] > 0)[0]\n    rated_item_ratings = data[user_ind, rated_items_indices]\n\n    # If the user has rated all items, return an empty list\n    if len(rated_items_indices) == n_item:\n        return []\n\n    # 3. Compute predicted attractiveness for unrated items\n    unrated_items_indices = np.where(data[user_ind, :] == 0)[0]\n    predicted_scores = {}\n\n    for t in unrated_items_indices:\n        numerator = 0.0\n        denominator = 0.0\n\n        for i, rated_item_index in enumerate(rated_items_indices):\n            similarity = S[t, rated_item_index]\n            numerator += rated_item_ratings[i] * similarity\n            denominator += abs(similarity)\n\n        if denominator > 1e-6:\n            predicted_scores[t] = numerator / denominator\n        else:\n            predicted_scores[t] = 0.0\n\n    # 4. Sort and return top k items\n    # Sort by score descending, then by item index ascending (stable sort)\n    sorted_items = sorted(predicted_scores.items(), key=lambda item: (-item[1], item[0]))\n\n    recommended_items = [item[0] for item in sorted_items[:k]]\n\n    return recommended_items\n\nif __name__ == '__main__':\n    # Example Usage:\n    data = np.array([\n        [5, 3, 0, 1, 0],\n        [4, 0, 4, 0, 5],\n        [1, 1, 0, 5, 4],\n        [0, 0, 5, 4, 0],\n        [0, 4, 0, 0, 5]\n    ])\n\n    user_ind = 0\n    k = 2\n    criterion = 'cosine'\n    recommendations = knn_recommend(data, user_ind, k, criterion)\n    print(f\"Recommendations for user {user_ind} ({criterion}): {recommendations}\")\n\n    criterion = 'pearson'\n    recommendations = knn_recommend(data, user_ind, k, criterion)\n    print(f\"Recommendations for user {user_ind} ({criterion}): {recommendations}\")\n\n    user_ind = 1\n    k = 3\n    criterion = 'cosine'\n    recommendations = knn_recommend(data, user_ind, k, criterion)\n    print(f\"Recommendations for user {user_ind} ({criterion}): {recommendations}\")\n\n    # User who rated all items\n    data_full = np.array([\n        [5, 3, 4, 1, 2],\n        [4, 2, 4, 3, 5],\n    ])\n    user_ind_full = 0\n    k_full = 2\n    recommendations_full = knn_recommend(data_full, user_ind_full, k_full, 'cosine')\n    print(f\"Recommendations for user {user_ind_full} (rated all): {recommendations_full}\")\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    # >>>>>>>>>>  Write your code here  <<<<<<<<<<\n    n_samples, n_features = X.shape\n\n    def calculate_loss(sum_g, sum_h, gamma, lam):\n        if sum_h + lam <= 1e-9:  # Avoid division by zero or near-zero\n            return -np.inf\n        return -0.5 * (sum_g**2) / (sum_h + lam) + gamma\n\n    # Calculate the loss of the current node\n    sum_g_total = np.sum(g)\n    sum_h_total = np.sum(h)\n    loss_total = calculate_loss(sum_g_total, sum_h_total, gamma, lam)\n\n    best_gain = -np.inf\n    best_feature_index = None\n    best_threshold = None\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        # Get unique values and sort them\n        unique_values = np.unique(feature_values)\n\n        # Consider thresholds between unique values\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0 if len(unique_values) > 1 else []\n\n        for threshold in thresholds:\n            left_indices = np.where(feature_values <= threshold)[0]\n            right_indices = np.where(feature_values > threshold)[0]\n\n            # Check for valid split size\n            if len(left_indices) < 2 or len(right_indices) < 2:\n                continue\n\n            # Calculate sums for the left child\n            sum_g_left = np.sum(g[left_indices])\n            sum_h_left = np.sum(h[left_indices])\n            loss_left = calculate_loss(sum_g_left, sum_h_left, gamma, lam)\n\n            # Calculate sums for the right child\n            sum_g_right = np.sum(g[right_indices])\n            sum_h_right = np.sum(h[right_indices])\n            loss_right = calculate_loss(sum_g_right, sum_h_right, gamma, lam)\n\n            # Calculate the gain\n            gain = loss_total - loss_left - loss_right\n\n            # Update best split if the current gain is better and positive\n            if gain > best_gain and gain > 0:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n\n    if best_gain > 0:\n        return (best_feature_index, best_threshold)\n    else:\n        return None\n\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = not isinstance(x, (list, np.ndarray))\n\n    if is_scalar:\n        x_np = np.array(x)\n    else:\n        x_np = np.array(x)\n\n    sigmoid_x_np = 1 / (1 + np.exp(-x_np))\n    gradient_x_np = sigmoid_x_np * (1 - sigmoid_x_np)\n\n    if is_scalar:\n        sigmoid_x = round(float(sigmoid_x_np), 4)\n        gradient_x = round(float(gradient_x_np), 4)\n    else:\n        sigmoid_x = np.round(sigmoid_x_np, 4).tolist()\n        gradient_x = np.round(gradient_x_np, 4).tolist()\n\n    return (sigmoid_x, gradient_x)\n\nif __name__ == '__main__':\n    # Example usage:\n    # Scalar input\n    scalar_input = 2.5\n    sigmoid_scalar, gradient_scalar = sigmoid_activation(scalar_input)\n    print(f\"Scalar input: {scalar_input}\")\n    print(f\"Sigmoid: {sigmoid_scalar}, Gradient: {gradient_scalar}\")\n    print(\"-\" * 20)\n\n    # List input\n    list_input = [-1, 0, 1, 5]\n    sigmoid_list, gradient_list = sigmoid_activation(list_input)\n    print(f\"List input: {list_input}\")\n    print(f\"Sigmoid: {sigmoid_list}, Gradient: {gradient_list}\")\n    print(\"-\" * 20)\n\n    # 1-D NumPy array input\n    numpy_1d_input = np.array([10, -5, 0.5])\n    sigmoid_numpy_1d, gradient_numpy_1d = sigmoid_activation(numpy_1d_input)\n    print(f\"1-D NumPy array input: {numpy_1d_input}\")\n    print(f\"Sigmoid: {sigmoid_numpy_1d}, Gradient: {gradient_numpy_1d}\")\n    print(\"-\" * 20)\n\n    # 2-D NumPy array input\n    numpy_2d_input = np.array([[1, 2], [-3, 4]])\n    sigmoid_numpy_2d, gradient_numpy_2d = sigmoid_activation(numpy_2d_input)\n    print(f\"2-D NumPy array input: \\n{numpy_2d_input}\")\n    print(f\"Sigmoid: {sigmoid_numpy_2d}, Gradient: {gradient_numpy_2d}\")\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_train = len(x_train)\n    weights = np.ones(n_train) / n_train\n\n    # Sort training data and get corresponding sorted indices\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    # Generate possible thresholds\n    thresholds = []\n    if n_train > 1:\n        for i in range(n_train - 1):\n            thresholds.append((x_train_sorted[i] + x_train_sorted[i+1]) / 2.0)\n    # Add thresholds before the first and after the last point\n    if n_train > 0:\n        thresholds.append(x_train_sorted[0] - 1.0) # A value smaller than the smallest\n        thresholds.append(x_train_sorted[-1] + 1.0) # A value larger than the largest\n\n    stumps = []\n    alphas = []\n\n    while True:\n        min_weighted_error = float('inf')\n        best_stump = None\n\n        # Iterate through all possible stumps\n        for d in [0, 1]:  # d=0: <= theta -> +1, > theta -> -1; d=1: > theta -> +1, <= theta -> -1\n            for theta in thresholds:\n                predictions = np.zeros(n_train)\n                if d == 0:\n                    predictions[x_train_sorted <= theta] = 1\n                    predictions[x_train_sorted > theta] = -1\n                else: # d == 1\n                    predictions[x_train_sorted > theta] = 1\n                    predictions[x_train_sorted <= theta] = -1\n\n                # Calculate weighted error\n                weighted_error = np.sum(weights[predictions != y_train_sorted])\n\n                if weighted_error < min_weighted_error:\n                    min_weighted_error = weighted_error\n                    best_stump = (d, theta)\n\n        # Compute alpha\n        err = min_weighted_error\n        # Handle edge cases where err is 0 or 1 to avoid log(0)\n        if err == 0:\n            alpha = float('inf')\n        elif err == 1:\n            alpha = float('-inf')\n        else:\n            alpha = 0.5 * math.log((1.0 - err) / err)\n\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        # Update weights\n        best_d, best_theta = best_stump\n        predictions = np.zeros(n_train)\n        if best_d == 0:\n            predictions[x_train_sorted <= best_theta] = 1\n            predictions[x_train_sorted > best_theta] = -1\n        else: # best_d == 1\n            predictions[x_train_sorted > best_theta] = 1\n            predictions[x_train_sorted <= best_theta] = -1\n\n        weights *= np.exp(-alpha * y_train_sorted * predictions)\n        weights /= np.sum(weights) # Normalize weights\n\n        # Calculate training error of the current ensemble\n        ensemble_predictions_train = np.zeros(n_train)\n        for alpha_i, (d_i, theta_i) in zip(alphas, stumps):\n            stump_predictions = np.zeros(n_train)\n            if d_i == 0:\n                stump_predictions[x_train_sorted <= theta_i] = 1\n                stump_predictions[x_train_sorted > theta_i] = -1\n            else:\n                stump_predictions[x_train_sorted > theta_i] = 1\n                stump_predictions[x_train_sorted <= theta_i] = -1\n            ensemble_predictions_train += alpha_i * stump_predictions\n\n        ensemble_predictions_train = np.sign(ensemble_predictions_train)\n        training_error = np.sum(ensemble_predictions_train != y_train_sorted) / n_train\n\n        if training_error <= epsilon:\n            break\n\n    # Make predictions on the test set\n    n_test = len(x_test)\n    ensemble_predictions_test = np.zeros(n_test)\n\n    for alpha_i, (d_i, theta_i) in zip(alphas, stumps):\n        stump_predictions = np.zeros(n_test)\n        if d_i == 0:\n            stump_predictions[np.array(x_test) <= theta_i] = 1\n            stump_predictions[np.array(x_test) > theta_i] = -1\n        else:\n            stump_predictions[np.array(x_test) > theta_i] = 1\n            stump_predictions[np.array(x_test) <= theta_i] = -1\n        ensemble_predictions_test += alpha_i * stump_predictions\n\n    return np.sign(ensemble_predictions_test).astype(int).tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n    y_train = [1, 1, -1, -1, 1]\n    x_test = [0.5, 2.5, 4.5, 6.0]\n\n    predictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.0)\n    print(f\"Predictions for x_test: {predictions}\")\n\n    # Another example\n    x_train_2 = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    y_train_2 = [1, 1, 1, 1, 1, -1, -1, -1, -1, -1]\n    x_test_2 = [0.0, 5.5, 11.0]\n\n    predictions_2 = adaboost_1d_predict(x_train_2, y_train_2, x_test_2, epsilon=0.0)\n    print(f\"Predictions for x_test_2: {predictions_2}\")\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Calculate the squared Euclidean distance between each test sample and each training sample\n    # This can be done efficiently using broadcasting and matrix operations.\n    # ||x_i - z||^2 = ||x_i||^2 - 2 * x_i . z + ||z||^2\n    # For each test sample z (row in X_test) and each training sample x_i (row in X_train):\n    # Sum of squares of training samples: (n,) vector\n    sum_sq_train = np.sum(X_train**2, axis=1)\n    # Sum of squares of test samples: (m,) vector\n    sum_sq_test = np.sum(X_test**2, axis=1)\n    # Dot product between test and training samples: (m, n) matrix\n    dot_product = X_test @ X_train.T\n\n    # Squared Euclidean distance matrix: (m, n) matrix\n    # Each element (i, j) is ||X_test[i] - X_train[j]||^2\n    sq_dist = sum_sq_test[:, np.newaxis] - 2 * dot_product + sum_sq_train[np.newaxis, :]\n\n    # Compute the Gaussian kernel matrix: (m, n) matrix\n    # K(z, x_i) = exp(-gamma * ||z - x_i||^2)\n    kernel_matrix = np.exp(-gamma * sq_dist)\n\n    # Compute the decision function g(z) for each test sample\n    # g(z) = \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 K(z, x_i) + b\n    # The term \u03b1_i \u00b7 y_i is a (n,) vector\n    alpha_y = alpha * y_train\n\n    # The sum \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 K(z, x_i) is a matrix multiplication\n    # (m, n) @ (n,) -> (m,) vector\n    decision_values = kernel_matrix @ alpha_y + b\n\n    # Predict the class based on the sign of the decision function\n    # sign(g(z))\n    predicted_labels = np.sign(decision_values)\n\n    # Convert the NumPy array of predicted labels to a Python list of integers\n    return predicted_labels.astype(int).tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Create some dummy data\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([1, 1, -1, -1])\n    alpha = np.array([0.1, 0.2, 0.15, 0.25]) # Example Lagrange multipliers\n    b = 0.5 # Example bias\n    gamma = 0.1 # Example gamma\n\n    X_test = np.array([[1.5, 2.5], [3.5, 4.5], [0.5, 1.5], [5, 6]])\n\n    # Make predictions\n    predictions = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)\n\n    print(\"Training Samples (X_train):\\n\", X_train)\n    print(\"Training Labels (y_train):\\n\", y_train)\n    print(\"Lagrange Multipliers (alpha):\\n\", alpha)\n    print(\"Bias (b):\", b)\n    print(\"Gamma:\", gamma)\n    print(\"Test Samples (X_test):\\n\", X_test)\n    print(\"Predicted Labels:\\n\", predictions)\n\n    # Another example\n    X_train_2 = np.array([[0, 0], [1, 1], [0, 1], [1, 0]])\n    y_train_2 = np.array([-1, -1, 1, 1])\n    alpha_2 = np.array([0.1, 0.1, 0.1, 0.1])\n    b_2 = 0.0\n    gamma_2 = 1.0\n    X_test_2 = np.array([[0.5, 0.5], [-0.5, -0.5], [1.5, 1.5]])\n\n    predictions_2 = gaussian_svm_predict(X_train_2, y_train_2, alpha_2, b_2, gamma_2, X_test_2)\n    print(\"\\n--- Second Example ---\")\n    print(\"Training Samples (X_train):\\n\", X_train_2)\n    print(\"Training Labels (y_train):\\n\", y_train_2)\n    print(\"Lagrange Multipliers (alpha):\\n\", alpha_2)\n    print(\"Bias (b):\", b_2)\n    print(\"Gamma:\", gamma_2)\n    print(\"Test Samples (X_test):\\n\", X_test_2)\n    print(\"Predicted Labels:\\n\", predictions_2)\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float] | int:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    m, n = X_np.shape\n\n    if k < 1 or k > min(m, n):\n        return -1\n\n    # Compute the SVD\n    U, s, Vh = np.linalg.svd(X_np, full_matrices=False)\n\n    # Truncate the SVD\n    U_k = U[:, :k]\n    s_k = np.diag(s[:k])\n    Vh_k = Vh[:k, :]\n\n    # Reconstruct the matrix\n    X_hat_np = U_k @ s_k @ Vh_k\n\n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np)**2)\n\n    # Round and convert to list of lists\n    X_hat_list = np.round(X_hat_np, 4).tolist()\n    mse_rounded = round(mse, 4)\n\n    return X_hat_list, mse_rounded\n\nif __name__ == '__main__':\n    # Example usage:\n    X = [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]]\n    k = 2\n\n    X_hat, mse = linear_autoencoder(X, k)\n    print(\"Reconstructed Matrix X_hat:\")\n    for row in X_hat:\n        print(row)\n    print(f\"Mean Squared Error (MSE): {mse}\")\n\n    X2 = [[1, 2],\n          [3, 4],\n          [5, 6],\n          [7, 8]]\n    k2 = 1\n    X_hat2, mse2 = linear_autoencoder(X2, k2)\n    print(\"\\nReconstructed Matrix X_hat2:\")\n    for row in X_hat2:\n        print(row)\n    print(f\"Mean Squared Error (MSE2): {mse2}\")\n\n    # Invalid k\n    k3 = 0\n    result3 = linear_autoencoder(X, k3)\n    print(f\"\\nResult for invalid k={k3}: {result3}\")\n\n    k4 = 4\n    result4 = linear_autoencoder(X, k4)\n    print(f\"Result for invalid k={k4}: {result4}\")\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort training data by feature value\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n\n    # Candidate split points\n    split_points = (x_train_sorted[:-1] + x_train_sorted[1:]) / 2.0\n\n    # Initialize residuals and ensemble\n    residuals = y_train_sorted.copy()\n    ensemble = []\n\n    while np.sum(residuals**2) > epsilon:\n        best_rss = float('inf')\n        best_stump = None\n\n        for split in split_points:\n            # Indices for left and right sides of the split\n            left_indices = x_train_sorted <= split\n            right_indices = x_train_sorted > split\n\n            # Calculate constants for the stump\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0.0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0.0\n\n            # Calculate RSS if this stump were added\n            predicted_residuals = np.zeros_like(residuals)\n            predicted_residuals[left_indices] = c1\n            predicted_residuals[right_indices] = c2\n\n            current_rss = np.sum((residuals - predicted_residuals)**2)\n\n            if current_rss < best_rss:\n                best_rss = current_rss\n                best_stump = (split, c1, c2)\n\n        if best_stump is None:\n            # No improvement possible, break the loop\n            break\n\n        # Add the best stump to the ensemble\n        ensemble.append(best_stump)\n\n        # Update residuals\n        split, c1, c2 = best_stump\n        predicted_residuals = np.zeros_like(residuals)\n        predicted_residuals[x_train_sorted <= split] = c1\n        predicted_residuals[x_train_sorted > split] = c2\n        residuals -= predicted_residuals\n\n    # Predict for the query point\n    prediction = 0.0\n    for split, c1, c2 in ensemble:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n\n    return round(prediction, 4)\n\nif __name__ == '__main__':\n    # Example Usage\n    x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n    y_train = [2.0, 3.0, 4.0, 3.0, 2.0]\n    x_query = 2.5\n    epsilon = 1e-2\n\n    prediction = predict_boosting_tree(x_train, y_train, x_query, epsilon)\n    print(f\"Prediction for x_query={x_query}: {prediction}\")\n\n    x_train_2 = [0.5, 1.5, 2.5, 3.5]\n    y_train_2 = [10.0, 8.0, 6.0, 4.0]\n    x_query_2 = 1.0\n    prediction_2 = predict_boosting_tree(x_train_2, y_train_2, x_query_2)\n    print(f\"Prediction for x_query={x_query_2}: {prediction_2}\")\n\n    x_train_3 = np.array([10, 20, 30, 40, 50])\n    y_train_3 = np.array([1, 1, 0, 0, 1])\n    x_query_3 = 35.0\n    prediction_3 = predict_boosting_tree(x_train_3, y_train_3, x_query_3)\n    print(f\"Prediction for x_query={x_query_3}: {prediction_3}\")\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on a given sparsity.\n\n    Args:\n        shape: The desired shape of the output tensor.\n        sparsity: The probability of generating a 1.0 (must be in [0, 1]).\n        seed: An optional integer seed for reproducible results.\n\n    Returns:\n        A NumPy array of the specified shape with float values 0.0 and 1.0,\n        or -1 if the sparsity is outside the legal range [0, 1].\n    \"\"\"\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate random numbers between 0 and 1\n    random_values = np.random.rand(*shape)\n\n    # Create the binary tensor based on the sparsity threshold\n    # An entry is 1.0 if the random value is less than or equal to sparsity\n    binary_tensor = (random_values <= sparsity).astype(float)\n\n    return binary_tensor\n\nif __name__ == '__main__':\n    # Example usage:\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n\n    print(f\"Generating a binary tensor with shape {shape}, sparsity {sparsity}, and seed {seed}\")\n    tensor = random_binary_tensor(shape, sparsity, seed)\n    print(tensor)\n\n    print(\"\\nGenerating another tensor with the same parameters (should be the same)\")\n    tensor_reproducible = random_binary_tensor(shape, sparsity, seed)\n    print(tensor_reproducible)\n    assert np.array_equal(tensor, tensor_reproducible)\n\n    print(\"\\nGenerating a tensor with different seed\")\n    tensor_different_seed = random_binary_tensor(shape, sparsity, seed=123)\n    print(tensor_different_seed)\n    assert not np.array_equal(tensor, tensor_different_seed)\n\n    print(\"\\nGenerating a tensor with sparsity 0.0\")\n    tensor_zero_sparsity = random_binary_tensor((3, 3), sparsity=0.0)\n    print(tensor_zero_sparsity)\n    assert np.all(tensor_zero_sparsity == 0.0)\n\n    print(\"\\nGenerating a tensor with sparsity 1.0\")\n    tensor_one_sparsity = random_binary_tensor((3, 3), sparsity=1.0)\n    print(tensor_one_sparsity)\n    assert np.all(tensor_one_sparsity == 1.0)\n\n    print(\"\\nTesting invalid sparsity (less than 0)\")\n    invalid_sparsity_low = random_binary_tensor((2, 2), sparsity=-0.1)\n    print(f\"Result for sparsity -0.1: {invalid_sparsity_low}\")\n    assert invalid_sparsity_low == -1\n\n    print(\"\\nTesting invalid sparsity (greater than 1)\")\n    invalid_sparsity_high = random_binary_tensor((2, 2), sparsity=1.1)\n    print(f\"Result for sparsity 1.1: {invalid_sparsity_high}\")\n    assert invalid_sparsity_high == -1\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # ===== write your code below =====\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n\n    # Use argpartition to find the index of the median element in the original array\n    # This partitions the array such that the element at median_index is in its sorted position\n    # and all elements before it are smaller, and all elements after it are larger (or equal)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n\n    # The pivot is the row index of the element at the median position after partitioning\n    pivot = partitioned_indices[median_index]\n    median_value = data[pivot, d]\n\n    # Find indices of elements strictly less than the median value\n    left_indices = np.where(data[:, d] < median_value)[0]\n\n    # Find indices of elements strictly greater than the median value\n    right_indices = np.where(data[:, d] > median_value)[0]\n\n    # Convert numpy arrays to sorted Python lists\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n\n    return pivot, left, right\n\nif __name__ == '__main__':\n    # Example Usage\n    data = np.array([\n        [1, 5],\n        [3, 2],\n        [5, 8],\n        [2, 1],\n        [4, 6],\n        [6, 3],\n        [0, 9]\n    ])\n\n    # Split along the first column (index 0)\n    pivot_0, left_0, right_0 = get_split(data, 0)\n    print(f\"Splitting along column 0:\")\n    print(f\"Pivot index: {pivot_0}\")\n    print(f\"Left indices: {left_0}\")\n    print(f\"Right indices: {right_0}\")\n    print(\"-\" * 20)\n\n    # Split along the second column (index 1)\n    pivot_1, left_1, right_1 = get_split(data, 1)\n    print(f\"Splitting along column 1:\")\n    print(f\"Pivot index: {pivot_1}\")\n    print(f\"Left indices: {left_1}\")\n    print(f\"Right indices: {right_1}\")\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Pre-conditions\n    assert x.ndim == 1, \"x must be one-dimensional.\"\n    assert stride >= 1, \"stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"len(x) must be greater than or equal to frame_width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides for the new array\n    # The first stride is the stride of the original array multiplied by the hop length\n    # The second stride is the stride of the original array\n    new_strides = (x.strides[0] * stride, x.strides[0])\n\n    # Create the view using as_strided\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=new_strides, writeable=writeable)\n\n    return framed_signal\n\nif __name__ == '__main__':\n    # Example usage\n    signal = np.arange(20)\n    frame_width = 5\n    stride = 3\n\n    framed_view = to_frames(signal, frame_width, stride)\n    print(\"Original signal:\", signal)\n    print(\"Framed view shape:\", framed_view.shape)\n    print(\"Framed view:\\n\", framed_view)\n    print(\"Is framed view a view?\", np.shares_memory(signal, framed_view))\n    print(\"Is framed view writeable (default=False)?\", framed_view.flags.writeable)\n\n    print(\"-\" * 20)\n\n    # Example with writeable=True\n    framed_view_writeable = to_frames(signal, frame_width, stride, writeable=True)\n    print(\"Framed view (writeable=True) shape:\", framed_view_writeable.shape)\n    print(\"Is framed view writeable (writeable=True)?\", framed_view_writeable.flags.writeable)\n\n    # Modify the framed view and see the effect on the original signal\n    framed_view_writeable[0, 0] = 99\n    print(\"Original signal after modifying framed view:\", signal)\n\n    print(\"-\" * 20)\n\n    # Example with different parameters\n    signal2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    frame_width2 = 4\n    stride2 = 2\n    framed_view2 = to_frames(signal2, frame_width2, stride2)\n    print(\"Original signal 2:\", signal2)\n    print(\"Framed view 2 shape:\", framed_view2.shape)\n    print(\"Framed view 2:\\n\", framed_view2)\n\n    print(\"-\" * 20)\n\n    # Example demonstrating dropped samples\n    signal3 = np.arange(10)\n    frame_width3 = 3\n    stride3 = 4\n    framed_view3 = to_frames(signal3, frame_width3, stride3)\n    print(\"Original signal 3:\", signal3)\n    print(\"Framed view 3 shape:\", framed_view3.shape)\n    print(\"Framed view 3:\\n\", framed_view3)\n\n    print(\"-\" * 20)\n\n    # Example demonstrating assertions\n    try:\n        to_frames(np.array([[1, 2], [3, 4]]), 2, 1) # Not 1D\n    except AssertionError as e:\n        print(\"Assertion Error:\", e)\n\n    try:\n        to_frames(signal, 5, 0) # stride < 1\n    except AssertionError as e:\n        print(\"Assertion Error:\", e)\n\n    try:\n        to_frames(signal, 30, 1) # len(x) < frame_width\n    except AssertionError as e:\n        print(\"Assertion Error:\", e)\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X_np = np.asarray(X)\n    except Exception:\n        return False  # Handle cases where conversion to numpy array fails\n\n    # Check if the matrix is two-dimensional\n    if X_np.ndim != 2:\n        return False\n\n    # Check if every element is between 0 and 1 inclusive\n    if not np.all((X_np >= 0) & (X_np <= 1)):\n        return False\n\n    # Check if each row sums to 1 within the specified tolerance\n    row_sums = np.sum(X_np, axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-8):\n        return False\n\n    return True\n\nif __name__ == '__main__':\n    # Example Usage\n    stochastic_matrix_list = [\n        [0.5, 0.5, 0.0],\n        [0.2, 0.8, 0.0],\n        [0.1, 0.1, 0.8]\n    ]\n    print(f\"Is {stochastic_matrix_list} stochastic? {is_stochastic(stochastic_matrix_list)}\")\n\n    stochastic_matrix_np = np.array([\n        [1.0, 0.0],\n        [0.0, 1.0]\n    ])\n    print(f\"Is {stochastic_matrix_np} stochastic? {is_stochastic(stochastic_matrix_np)}\")\n\n    not_stochastic_negative = np.array([\n        [0.5, 0.5],\n        [-0.1, 1.1]\n    ])\n    print(f\"Is {not_stochastic_negative} stochastic? {is_stochastic(not_stochastic_negative)}\")\n\n    not_stochastic_sum = np.array([\n        [0.5, 0.4],\n        [0.6, 0.4]\n    ])\n    print(f\"Is {not_stochastic_sum} stochastic? {is_stochastic(not_stochastic_sum)}\")\n\n    not_stochastic_dimension = np.array([1, 2, 3])\n    print(f\"Is {not_stochastic_dimension} stochastic? {is_stochastic(not_stochastic_dimension)}\")\n\n    not_stochastic_non_numeric = [[0.5, 0.5], [0.2, 'a']]\n    print(f\"Is {not_stochastic_non_numeric} stochastic? {is_stochastic(not_stochastic_non_numeric)}\")\n\n    stochastic_matrix_tolerance = np.array([\n        [0.3333333333333333, 0.6666666666666667],\n        [0.5, 0.5]\n    ])\n    print(f\"Is {stochastic_matrix_tolerance} stochastic? {is_stochastic(stochastic_matrix_tolerance)}\")\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    current_iter = 0\n    batch_start = 0\n\n    while current_iter < max_iter:\n        # Determine batch size and indices\n        current_batch_size = min(batch_size, n)\n        batch_end = batch_start + current_batch_size\n\n        if batch_end > n:\n            # Wrap around\n            batch_indices = np.concatenate((np.arange(batch_start, n), np.arange(0, batch_end - n)))\n        else:\n            batch_indices = np.arange(batch_start, batch_end)\n\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n\n        # Calculate gradient for the current batch\n        # The gradient of L(w) = 1/(2n) ||Xw - y||^2 is g = (1/n) X^T (Xw - y)\n        # For a batch, we use the batch size in the denominator\n        g = (1 / current_batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n\n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n\n        # RMSprop update\n        s = rho * s + (1 - rho) * g**2\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n\n        # Update batch start index\n        batch_start = (batch_start + current_batch_size) % n\n        current_iter += 1\n\n    return np.round(w, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    # Simple linear data\n    np.random.seed(42)\n    n_samples = 100\n    n_features = 2\n    X_test = 2 * np.random.rand(n_samples, n_features)\n    true_weights = np.array([3, 5])\n    noise = np.random.randn(n_samples)\n    y_test = X_test @ true_weights + noise\n\n    # Run RMSprop\n    learned_weights = rms_prop(X_test, y_test)\n    print(f\"Learned weights: {learned_weights}\")\n\n    # Example with a larger dataset and different parameters\n    np.random.seed(123)\n    n_samples_large = 500\n    n_features_large = 5\n    X_large = np.random.rand(n_samples_large, n_features_large)\n    true_weights_large = np.array([1, -2, 0.5, 4, -1.5])\n    noise_large = 0.5 * np.random.randn(n_samples_large)\n    y_large = X_large @ true_weights_large + noise_large\n\n    learned_weights_large = rms_prop(\n        X_large,\n        y_large,\n        epsilon=1e-3,\n        max_iter=20_000,\n        eta=0.005,\n        rho=0.95,\n        batch_size=64,\n    )\n    print(f\"Learned weights (large dataset): {learned_weights_large}\")\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Implements the SoftPlus activation function and its gradient.\n\n    Args:\n        x: A scalar, Python list, or NumPy array containing real values.\n        deriv: A boolean flag. If False, returns the SoftPlus of x.\n               If True, returns the gradient (sigmoid) of x.\n\n    Returns:\n        A Python list (or a single float if the input is a scalar)\n        containing the SoftPlus or gradient values, rounded to the\n        nearest 4th decimal.\n    \"\"\"\n    is_scalar = not isinstance(x, (list, np.ndarray))\n    x_np = np.array(x) if not is_scalar else np.array([x])\n\n    if deriv:\n        # Numerically stable sigmoid\n        result_np = 1 / (1 + np.exp(-x_np))\n    else:\n        # Numerically stable SoftPlus\n        # For large positive x, log(1 + exp(x)) is approximately x\n        # For large negative x, log(1 + exp(x)) is approximately exp(x)\n        # For values around 0, use log1p(exp(x))\n        result_np = np.where(x_np > 20, x_np, np.log1p(np.exp(x_np)))\n\n    rounded_result_np = np.round(result_np, 4)\n\n    if is_scalar:\n        return float(rounded_result_np[0])\n    else:\n        return rounded_result_np.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    scalar_input = 2.5\n    list_input = [-1.0, 0.0, 1.0, 100.0, -100.0]\n    numpy_input = np.array([0.5, -0.5, 50.0, -50.0])\n\n    # SoftPlus examples\n    print(f\"SoftPlus of {scalar_input}: {softplus(scalar_input)}\")\n    print(f\"SoftPlus of {list_input}: {softplus(list_input)}\")\n    print(f\"SoftPlus of {numpy_input}: {softplus(numpy_input)}\")\n\n    # Gradient (Sigmoid) examples\n    print(f\"Gradient of {scalar_input}: {softplus(scalar_input, deriv=True)}\")\n    print(f\"Gradient of {list_input}: {softplus(list_input, deriv=True)}\")\n    print(f\"Gradient of {numpy_input}: {softplus(numpy_input, deriv=True)}\")\n\n    # Test with large values for numerical stability\n    large_positive = 1000.0\n    large_negative = -1000.0\n    print(f\"SoftPlus of {large_positive}: {softplus(large_positive)}\")\n    print(f\"SoftPlus of {large_negative}: {softplus(large_negative)}\")\n    print(f\"Gradient of {large_positive}: {softplus(large_positive, deriv=True)}\")\n    print(f\"Gradient of {large_negative}: {softplus(large_negative, deriv=True)}\")\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Build N-gram and (N-1)-gram counts from the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i : i + N])\n        ngram_counts[ngram] += 1\n        if N > 1:\n            prefix = tuple(corpus[i : i + N - 1])\n            prefix_counts[prefix] += 1\n\n    total_log_prob = 0.0\n\n    # Calculate the log-probability of the sequence\n    for i in range(len(sequence) - N + 1):\n        current_ngram = tuple(sequence[i : i + N])\n        ngram_count = ngram_counts[current_ngram]\n\n        if ngram_count == 0:\n            return float('-inf')\n\n        if N == 1:\n            prob = ngram_count / len(corpus)\n        else:\n            prefix = tuple(sequence[i : i + N - 1])\n            prefix_count = prefix_counts[prefix]\n            if prefix_count == 0:\n                return float('-inf')\n            prob = ngram_count / prefix_count\n\n        if prob == 0:\n            return float('-inf')\n\n        total_log_prob += np.log(prob)\n\n    return round(total_log_prob, 4)\n\nif __name__ == '__main__':\n    # Example Usage\n    corpus = [\"this\", \"is\", \"a\", \"test\", \"this\", \"is\", \"another\", \"test\"]\n    sequence = [\"this\", \"is\", \"a\", \"test\"]\n\n    # Unigram (N=1)\n    log_prob_unigram = unsmoothed_ngram_log_prob(corpus, sequence, 1)\n    print(f\"Unigram log-probability of {sequence}: {log_prob_unigram}\")\n\n    # Bigram (N=2)\n    log_prob_bigram = unsmoothed_ngram_log_prob(corpus, sequence, 2)\n    print(f\"Bigram log-probability of {sequence}: {log_prob_bigram}\")\n\n    # Trigram (N=3)\n    log_prob_trigram = unsmoothed_ngram_log_prob(corpus, sequence, 3)\n    print(f\"Trigram log-probability of {sequence}: {log_prob_trigram}\")\n\n    # Example with unseen n-gram\n    sequence_unseen = [\"this\", \"is\", \"a\", \"new\", \"test\"]\n    log_prob_unseen_bigram = unsmoothed_ngram_log_prob(corpus, sequence_unseen, 2)\n    print(f\"Bigram log-probability of {sequence_unseen}: {log_prob_unseen_bigram}\")\n\n    # Example with unseen prefix\n    sequence_unseen_prefix = [\"another\", \"new\", \"test\"]\n    log_prob_unseen_prefix_bigram = unsmoothed_ngram_log_prob(corpus, sequence_unseen_prefix, 2)\n    print(f\"Bigram log-probability of {sequence_unseen_prefix}: {log_prob_unseen_prefix_bigram}\")\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y)\n    m = len(y)\n\n    # Build design matrix\n    X_poly = np.ones((m, degree + 1))\n    for i in range(1, degree + 1):\n        X_poly[:, i] = X[:, 0] ** i\n\n    # Initialize weights\n    weights = np.zeros(degree + 1)\n\n    def soft_threshold(rho, lambda_val):\n        return np.sign(rho) * max(abs(rho) - lambda_val, 0)\n\n    for iteration in range(n_iterations):\n        weights_old = np.copy(weights)\n\n        # Update bias (w0)\n        y_pred = X_poly @ weights\n        weights[0] = np.mean(y - (y_pred - weights[0] * X_poly[:, 0]))\n\n        # Update other weights (w1 to wd)\n        for j in range(1, degree + 1):\n            y_pred = X_poly @ weights\n            rho = X_poly[:, j].T @ (y - (y_pred - weights[j] * X_poly[:, j]))\n            weights[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n\n        # Check for convergence\n        if np.max(np.abs(weights - weights_old)) < tol:\n            break\n\n    return [round(w, 4) for w in weights]\n\nif __name__ == '__main__':\n    # Example Usage\n    X = [1, 2, 3, 4, 5]\n    y = [2, 4, 5, 4, 5]\n    degree = 2\n    reg_factor = 0.1\n\n    weights = lasso_regression(X, y, degree, reg_factor)\n    print(f\"Learned weights: {weights}\")\n\n    # Example with reg_factor = 0 (should be close to OLS)\n    weights_ols = lasso_regression(X, y, degree, reg_factor=0)\n    print(f\"Learned weights (reg_factor=0): {weights_ols}\")\n\n    # More complex example\n    X_complex = np.linspace(-5, 5, 100)\n    y_complex = 2 * X_complex**3 - 3 * X_complex**2 + X_complex + 5 + np.random.randn(100) * 2\n    degree_complex = 3\n    reg_factor_complex = 1.0\n\n    weights_complex = lasso_regression(X_complex, y_complex, degree_complex, reg_factor_complex)\n    print(f\"Learned weights (complex data): {weights_complex}\")\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector beta_t for a given time index t.\n\n    Args:\n        A: Transition-probability matrix of shape (N, N).\n        B: Emission-probability matrix of shape (N, M).\n        obs: List of observation indices (length T).\n        t: Integer time index (0 <= t < T).\n\n    Returns:\n        A Python list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n\n    # Base case: beta_{T-1}(i) = 1 for all i\n    if t == T - 1:\n        return [round(1.0, 4) for _ in range(N)]\n\n    # Recursive step: beta_t(i) = sum_{j=1}^{N} a_{ij} * b_j(o_{t+1}) * beta_{t+1}(j)\n    beta_t_plus_1 = backward_beta(A, B, obs, t + 1)\n    beta_t = []\n\n    for i in range(N):\n        sum_j = 0.0\n        for j in range(N):\n            sum_j += A[i, j] * B[j, obs[t + 1]] * beta_t_plus_1[j]\n        beta_t.append(round(sum_j, 4))\n\n    return beta_t\n\nif __name__ == '__main__':\n    # Example Usage (from a common HMM example)\n    # States: 0 (Healthy), 1 (Fever)\n    # Observations: 0 (Normal), 1 (Cold), 2 (Dizzy)\n\n    # Transition probabilities\n    A = [[0.7, 0.3],\n         [0.4, 0.6]]\n\n    # Emission probabilities\n    B = [[0.5, 0.4, 0.1],\n         [0.1, 0.3, 0.6]]\n\n    # Observation sequence: Normal, Cold, Dizzy\n    obs = [0, 1, 2] # Indices corresponding to observations\n\n    # Calculate beta_0\n    beta_0 = backward_beta(A, B, obs, 0)\n    print(f\"Beta_0: {beta_0}\")\n\n    # Calculate beta_1\n    beta_1 = backward_beta(A, B, obs, 1)\n    print(f\"Beta_1: {beta_1}\")\n\n    # Calculate beta_2 (base case)\n    beta_2 = backward_beta(A, B, obs, 2)\n    print(f\"Beta_2: {beta_2}\")\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Initialize backward variables\n    beta = np.zeros((T, N))\n\n    # Base case: t = T-1\n    for i in range(N):\n        beta[T - 1, i] = 1.0\n\n    # Recursive step: t = T-2 down to 0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j]\n\n    # Final probability calculation\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0, i]\n\n    return round(prob, 6)\n\nif __name__ == '__main__':\n    # Example Usage (from Rabiner's tutorial)\n    A = [[0.5, 0.2, 0.3],\n         [0.3, 0.5, 0.2],\n         [0.2, 0.3, 0.5]]\n\n    B = [[0.5, 0.5],\n         [0.4, 0.6],\n         [0.7, 0.3]]\n\n    pi = [0.2, 0.4, 0.4]\n\n    obs = [0, 1, 0]  # Red, White, Red\n\n    probability = backward_prob(A, B, pi, obs)\n    print(f\"Probability of observation sequence {obs}: {probability}\")\n\n    # Example with empty input\n    print(f\"Probability with empty observation: {backward_prob(A, B, pi, [])}\")\n    print(f\"Probability with empty A: {backward_prob([], B, pi, obs)}\")\n    print(f\"Probability with empty B: {backward_prob(A, [], pi, obs)}\")\n    print(f\"Probability with empty pi: {backward_prob(A, B, [], obs)}\")\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)  # Number of states\n    if n == 0:\n        return -1\n\n    # Validate dimensions of A\n    if len(A) != n or any(len(row) != n for row in A):\n        return -1\n\n    # Validate dimensions of B\n    if len(B) != n:\n        return -1\n    m = len(B[0]) if n > 0 else 0\n    if m == 0 and len(observations) > 0:\n        return -1\n    if any(len(row) != m for row in B):\n        return -1\n\n    # Validate observations\n    if not observations:\n        return -1\n    if any(obs < 0 or obs >= m for obs in observations):\n        return -1\n\n    T = len(observations)  # Length of observation sequence\n\n    # Initialize the forward probabilities alpha\n    # alpha[t][i] is the probability of being in state i at time t\n    # having observed the sequence up to time t\n    alpha = np.zeros((T, n))\n\n    # Base case (t = 0)\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n\n    # Recursive step (t = 1 to T-1)\n    for t in range(1, T):\n        for j in range(n):\n            sum_over_prev_states = 0\n            for i in range(n):\n                sum_over_prev_states += alpha[t - 1][i] * A[i][j]\n            alpha[t][j] = sum_over_prev_states * B[j][observations[t]]\n\n    # Termination step: Sum of probabilities of being in any state at time T-1\n    likelihood = np.sum(alpha[T - 1])\n\n    return round(likelihood, 4)\n\nif __name__ == '__main__':\n    # Example 1: Simple HMM\n    S1 = [0.6, 0.4]\n    A1 = [[0.7, 0.3],\n          [0.4, 0.6]]\n    B1 = [[0.1, 0.4, 0.5],\n          [0.7, 0.2, 0.1]]\n    observations1 = [0, 1, 0]\n    likelihood1 = forward_algorithm(S1, A1, B1, observations1)\n    print(f\"Example 1 Likelihood: {likelihood1}\") # Expected: 0.0336\n\n    # Example 2: Invalid input - dimension mismatch in A\n    S2 = [0.6, 0.4]\n    A2 = [[0.7, 0.3, 0.1],\n          [0.4, 0.6]]\n    B2 = [[0.1, 0.4, 0.5],\n          [0.7, 0.2, 0.1]]\n    observations2 = [0, 1, 0]\n    likelihood2 = forward_algorithm(S2, A2, B2, observations2)\n    print(f\"Example 2 Likelihood: {likelihood2}\") # Expected: -1\n\n    # Example 3: Invalid input - out-of-range observation\n    S3 = [0.6, 0.4]\n    A3 = [[0.7, 0.3],\n          [0.4, 0.6]]\n    B3 = [[0.1, 0.4, 0.5],\n          [0.7, 0.2, 0.1]]\n    observations3 = [0, 3, 0] # 3 is out of range [0, 2]\n    likelihood3 = forward_algorithm(S3, A3, B3, observations3)\n    print(f\"Example 3 Likelihood: {likelihood3}\") # Expected: -1\n\n    # Example 4: Invalid input - empty observation sequence\n    S4 = [0.6, 0.4]\n    A4 = [[0.7, 0.3],\n          [0.4, 0.6]]\n    B4 = [[0.1, 0.4, 0.5],\n          [0.7, 0.2, 0.1]]\n    observations4 = []\n    likelihood4 = forward_algorithm(S4, A4, B4, observations4)\n    print(f\"Example 4 Likelihood: {likelihood4}\") # Expected: -1\n\n    # Example 5: Invalid input - empty S\n    S5 = []\n    A5 = []\n    B5 = []\n    observations5 = [0, 1]\n    likelihood5 = forward_algorithm(S5, A5, B5, observations5)\n    print(f\"Example 5 Likelihood: {likelihood5}\") # Expected: -1\n\n    # Example 6: Invalid input - B has inconsistent row lengths\n    S6 = [0.6, 0.4]\n    A6 = [[0.7, 0.3],\n          [0.4, 0.6]]\n    B6 = [[0.1, 0.4, 0.5],\n          [0.7, 0.2]]\n    observations6 = [0, 1]\n    likelihood6 = forward_algorithm(S6, A6, B6, observations6)\n    print(f\"Example 6 Likelihood: {likelihood6}\") # Expected: -1\n\n    # Example 7: Invalid input - B has 0 columns but observations are not empty\n    S7 = [0.6, 0.4]\n    A7 = [[0.7, 0.3],\n          [0.4, 0.6]]\n    B7 = [[], []]\n    observations7 = [0, 1]\n    likelihood7 = forward_algorithm(S7, A7, B7, observations7)\n    print(f\"Example 7 Likelihood: {likelihood7}\") # Expected: -1\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\n\nclass FPTreeNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next_node = None\n\ndef build_fp_tree(transactions, min_support):\n    \"\"\"Builds the FP-tree from the transactions.\"\"\"\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support}\n\n    if not frequent_items:\n        return None, None\n\n    header_table = defaultdict(lambda: None)\n    root = FPTreeNode(None, 0, None)\n\n    for transaction in transactions:\n        # Sort frequent items in the transaction by their frequency in descending order\n        ordered_transaction = [item for item in transaction if item in frequent_items]\n        ordered_transaction.sort(key=lambda x: item_counts[x], reverse=True)\n\n        current_node = root\n        for item in ordered_transaction:\n            if item not in current_node.children:\n                new_node = FPTreeNode(item, 0, current_node)\n                current_node.children[item] = new_node\n                # Link the new node to the header table\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    current = header_table[item]\n                    while current.next_node:\n                        current = current.next_node\n                    current.next_node = new_node\n            current_node.children[item].count += 1\n            current_node = current_node.children[item]\n\n    return root, header_table\n\ndef mine_conditional_tree(header_table, min_support, frequent_itemsets, current_pattern):\n    \"\"\"Recursively mines conditional FP-trees.\"\"\"\n    # Sort items in the header table by their frequency in ascending order\n    items = sorted(header_table.keys(), key=lambda item: sum(node.count for node in get_path(header_table[item])))\n\n    for item in items:\n        new_pattern = sorted(current_pattern + [item])\n        frequent_itemsets.append(new_pattern)\n\n        # Build conditional pattern base\n        conditional_pattern_base = []\n        node = header_table[item]\n        while node:\n            path = []\n            parent = node.parent\n            while parent and parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            if path:\n                conditional_pattern_base.append((path, node.count))\n            node = node.next_node\n\n        # Build conditional FP-tree\n        conditional_transactions = []\n        for path, count in conditional_pattern_base:\n            conditional_transactions.extend([path] * count)\n\n        conditional_root, conditional_header_table = build_fp_tree(conditional_transactions, min_support)\n\n        if conditional_root and conditional_header_table:\n            mine_conditional_tree(conditional_header_table, min_support, frequent_itemsets, new_pattern)\n\ndef get_path(node):\n    \"\"\"Gets the path from the node to the root.\"\"\"\n    path = []\n    current = node\n    while current and current.item is not None:\n        path.append(current)\n        current = current.next_node\n    return path\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Write your code below\n    if not transactions:\n        return []\n\n    root, header_table = build_fp_tree(transactions, min_support)\n\n    if not root or not header_table:\n        return []\n\n    frequent_itemsets = []\n    mine_conditional_tree(header_table, min_support, frequent_itemsets, [])\n\n    # Ensure itemsets are sorted alphabetically internally\n    for itemset in frequent_itemsets:\n        itemset.sort()\n\n    # Sort the outer list\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\nif __name__ == '__main__':\n    # Example Usage\n    transactions = [\n        ['f', 'a', 'c', 'd', 'g', 'i', 'm', 'p'],\n        ['a', 'b', 'c', 'f', 'l', 'm', 'o'],\n        ['b', 'f', 'h', 'j', 'o', 'w'],\n        ['b', 'k', 'p', 'r', 's', 'x'],\n        ['a', 'f', 'c', 'e', 'l', 'p', 'm', 'n']\n    ]\n    min_support = 3\n    frequent_itemsets = fp_growth(transactions, min_support)\n    print(\"Frequent Itemsets:\")\n    for itemset in frequent_itemsets:\n        print(itemset)\n\n    transactions2 = [\n        ['a', 'b', 'c'],\n        ['a', 'b'],\n        ['a', 'c'],\n        ['b', 'c'],\n        ['a']\n    ]\n    min_support2 = 2\n    frequent_itemsets2 = fp_growth(transactions2, min_support2)\n    print(\"\\nFrequent Itemsets (Example 2):\")\n    for itemset in frequent_itemsets2:\n        print(itemset)\n\n    transactions3 = [\n        ['a', 'b'],\n        ['c', 'd']\n    ]\n    min_support3 = 3\n    frequent_itemsets3 = fp_growth(transactions3, min_support3)\n    print(\"\\nFrequent Itemsets (Example 3 - No frequent itemsets):\")\n    for itemset in frequent_itemsets3:\n        print(itemset)\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return [-1]\n\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    predictions = []\n\n    for test_sample in X_test_np:\n        # Compute squared Euclidean distances\n        distances = np.sum((X_train_np - test_sample)**2, axis=1)\n\n        # Get indices of k nearest neighbours\n        nearest_indices = np.argsort(distances)[:k]\n\n        # Get the labels of the k nearest neighbours\n        nearest_labels = y_train_np[nearest_indices]\n\n        # Count votes for each class\n        label_counts = {}\n        for label in nearest_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n\n        # Find the class with the maximum vote\n        max_vote = 0\n        predicted_label = -1\n        for label, count in label_counts.items():\n            if count > max_vote:\n                max_vote = count\n                predicted_label = label\n            elif count == max_vote:\n                # Tie-breaking: choose the smallest class label\n                predicted_label = min(predicted_label, label)\n\n        predictions.append(predicted_label)\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = [[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0], [5.0, 5.0]]\n    y_train = [0, 0, 1, 1, 0]\n    X_test = [[1.5, 1.5], [3.5, 3.5], [5.0, 5.0]]\n\n    # Test with valid k\n    k = 3\n    predictions = knn_predict(X_train, y_train, X_test, k)\n    print(f\"Predictions for k={k}: {predictions}\") # Expected: [0, 1, 0]\n\n    # Test with invalid k (k=0)\n    k_invalid_zero = 0\n    predictions_invalid_zero = knn_predict(X_train, y_train, X_test, k_invalid_zero)\n    print(f\"Predictions for k={k_invalid_zero}: {predictions_invalid_zero}\") # Expected: [-1]\n\n    # Test with invalid k (k > len(X_train))\n    k_invalid_large = 6\n    predictions_invalid_large = knn_predict(X_train, y_train, X_test, k_invalid_large)\n    print(f\"Predictions for k={k_invalid_large}: {predictions_invalid_large}\") # Expected: [-1]\n\n    # Test with tie-breaking\n    X_train_tie = [[1, 1], [2, 2], [3, 3], [4, 4]]\n    y_train_tie = [0, 1, 0, 1]\n    X_test_tie = [[2.5, 2.5]]\n    k_tie = 2\n    predictions_tie = knn_predict(X_train_tie, y_train_tie, X_test_tie, k_tie)\n    print(f\"Predictions for tie-breaking with k={k_tie}: {predictions_tie}\") # Expected: [0] (since 0 < 1)\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n\n    epsilon = np.finfo(float).eps  # Machine epsilon for numerical stability\n    y_pred = np.clip(y_pred, epsilon, 1. - epsilon)  # Clip probabilities to avoid log(0)\n\n    # Calculate the loss for each sample and class\n    loss_matrix = -y * np.log(y_pred)\n\n    # Sum the loss over all samples and classes\n    total_loss = np.sum(loss_matrix)\n\n    return round(float(total_loss), 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    y_true = [[0, 1, 0],\n              [1, 0, 0],\n              [0, 0, 1]]\n\n    y_pred_good = [[0.1, 0.8, 0.1],\n                   [0.9, 0.05, 0.05],\n                   [0.05, 0.05, 0.9]]\n\n    y_pred_bad = [[0.5, 0.3, 0.2],\n                  [0.1, 0.8, 0.1],\n                  [0.7, 0.1, 0.2]]\n\n    loss_good = cross_entropy_loss(y_true, y_pred_good)\n    loss_bad = cross_entropy_loss(y_true, y_pred_bad)\n\n    print(f\"Loss with good predictions: {loss_good}\")\n    print(f\"Loss with bad predictions: {loss_bad}\")\n\n    # Example with NumPy arrays\n    y_true_np = np.array([[0, 1, 0],\n                          [1, 0, 0],\n                          [0, 0, 1]])\n\n    y_pred_good_np = np.array([[0.1, 0.8, 0.1],\n                               [0.9, 0.05, 0.05],\n                               [0.05, 0.05, 0.9]])\n\n    loss_good_np = cross_entropy_loss(y_true_np, y_pred_good_np)\n    print(f\"Loss with good predictions (NumPy): {loss_good_np}\")\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        The input to the activation function.\n\n    Returns\n    -------\n    A : np.ndarray\n        The output of the sigmoid function.\n    cache : np.ndarray\n        The input Z, stored for backward propagation.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    cache = Z\n    return A, cache\n\ndef relu(Z):\n    \"\"\"\n    Implements the ReLU activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        The input to the activation function.\n\n    Returns\n    -------\n    A : np.ndarray\n        The output of the ReLU function.\n    cache : np.ndarray\n        The input Z, stored for backward propagation.\n    \"\"\"\n    A = np.maximum(0, Z)\n    cache = Z\n    return A, cache\n\ndef linear_forward(A_prev, W, b):\n    \"\"\"\n    Implements the linear part of a layer's forward propagation.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer (or input data): (size of previous layer, number of examples).\n    W : np.ndarray\n        Weights matrix: (size of current layer, size of previous layer).\n    b : np.ndarray\n        Bias vector: (size of the current layer, 1).\n\n    Returns\n    -------\n    Z : np.ndarray\n        The input of the activation function, also called pre-activation parameter.\n    cache : tuple\n        A tuple containing A_prev, W, and b; stored for backward propagation.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    cache = (A_prev, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implements the forward propagation for the LINEAR->ACTIVATION layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from previous layer (or input data): (size of previous layer, number of examples).\n    W : np.ndarray\n        Weights matrix: (size of current layer, size of previous layer).\n    b : np.ndarray\n        Bias vector: (size of the current layer, 1).\n    activation : str\n        The activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\".\n\n    Returns\n    -------\n    A : np.ndarray\n        The activation value for this layer.\n    cache : tuple\n        A tuple containing the linear_cache and the activation_cache; stored for backward propagation.\n    \"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n\n    cache = (linear_cache, activation_cache)\n    return A, cache\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1) -> LINEAR -> SIGMOID\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        A, cache = linear_activation_forward(A_prev, W, b, activation=\"relu\")\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID at the output layer\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    AL, cache = linear_activation_forward(A, W, b, activation=\"sigmoid\")\n    caches.append(cache)\n\n    # Round AL to 4 decimal places and convert to a list\n    AL_rounded = np.around(AL, decimals=4)\n    return AL_rounded.tolist()\n\nif __name__ == '__main__':\n    # Example Usage (for testing purposes)\n    np.random.seed(1)\n    X_test = np.random.randn(3, 5)\n    parameters_test = {\n        'W1': np.random.randn(4, 3) * 0.01,\n        'b1': np.zeros((4, 1)),\n        'W2': np.random.randn(2, 4) * 0.01,\n        'b2': np.zeros((2, 1)),\n        'W3': np.random.randn(1, 2) * 0.01,\n        'b3': np.zeros((1, 1))\n    }\n\n    AL_test = L_model_forward(X_test, parameters_test)\n    print(\"AL (rounded to 4 decimals):\")\n    print(AL_test)\n\n    # Expected output structure (values will vary due to random initialization)\n    # AL (rounded to 4 decimals):\n    # [[0.5, 0.5, 0.5, 0.5, 0.5]] (approximately, before training)\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[-1] if Y.ndim > 1 else Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n\n    return round(float(cost), 6)\n\nif __name__ == '__main__':\n    # Example usage:\n    A2_example = np.array([[0.9, 0.1, 0.8, 0.2]])\n    Y_example = np.array([[1, 0, 1, 0]])\n    cost_example = compute_cost(A2_example, Y_example)\n    print(f\"Cost for example 1: {cost_example}\")\n\n    A2_example_flat = np.array([0.9, 0.1, 0.8, 0.2])\n    Y_example_flat = np.array([1, 0, 1, 0])\n    cost_example_flat = compute_cost(A2_example_flat, Y_example_flat)\n    print(f\"Cost for example 2 (flat arrays): {cost_example_flat}\")\n\n    A2_example_zeros = np.array([[0.000000000000001, 0.999999999999999]])\n    Y_example_zeros = np.array([[0, 1]])\n    cost_example_zeros = compute_cost(A2_example_zeros, Y_example_zeros)\n    print(f\"Cost for example with values near 0 and 1: {cost_example_zeros}\")\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.asarray(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n\n    probabilities = np.full(n, epsilon / n)\n    probabilities[greedy_index] += (1 - epsilon)\n\n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n\n    # Ensure probabilities sum to 1 due to rounding\n    # Find the index of the largest probability to add/subtract the difference\n    diff = 1.0 - np.sum(probabilities)\n    largest_prob_index = np.argmax(probabilities)\n    probabilities[largest_prob_index] += diff\n\n    return probabilities.tolist()\n\nif __name__ == '__main__':\n    Q1 = [1.2, 0.3, 1.2, -0.1]\n    epsilon1 = 0.1\n    probs1 = epsilon_soft(Q1, epsilon1)\n    print(f\"Q: {Q1}, epsilon: {epsilon1}\")\n    print(f\"Probabilities: {probs1}\")\n    print(f\"Sum of probabilities: {sum(probs1)}\")\n    print(\"-\" * 20)\n\n    Q2 = [5.0, 5.0, 5.0]\n    epsilon2 = 0.5\n    probs2 = epsilon_soft(Q2, epsilon2)\n    print(f\"Q: {Q2}, epsilon: {epsilon2}\")\n    print(f\"Probabilities: {probs2}\")\n    print(f\"Sum of probabilities: {sum(probs2)}\")\n    print(\"-\" * 20)\n\n    Q3 = [-1.0, -2.0, -3.0]\n    epsilon3 = 0.0\n    probs3 = epsilon_soft(Q3, epsilon3)\n    print(f\"Q: {Q3}, epsilon: {epsilon3}\")\n    print(f\"Probabilities: {probs3}\")\n    print(f\"Sum of probabilities: {sum(probs3)}\")\n    print(\"-\" * 20)\n\n    Q4 = [10.0]\n    epsilon4 = 0.8\n    probs4 = epsilon_soft(Q4, epsilon4)\n    print(f\"Q: {Q4}, epsilon: {epsilon4}\")\n    print(f\"Probabilities: {probs4}\")\n    print(f\"Sum of probabilities: {sum(probs4)}\")\n    print(\"-\" * 20)\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n\n    num_samples = len(predictions[0])\n    aggregated_predictions = []\n\n    for sample_index in range(num_samples):\n        # Collect predictions for the current sample from all trees\n        sample_votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n\n        # Count the occurrences of each prediction\n        vote_counts = Counter(sample_votes)\n\n        # Find the maximum vote count\n        max_vote_count = 0\n        if vote_counts:\n            max_vote_count = max(vote_counts.values())\n\n        # Find all labels with the maximum vote count\n        tied_labels = [label for label, count in vote_counts.items() if count == max_vote_count]\n\n        # Break ties by choosing the smallest label\n        if tied_labels:\n            final_prediction = min(tied_labels)\n        else:\n            # This case should ideally not happen if predictions is not empty,\n            # but as a fallback, we can return None or handle as appropriate.\n            # For this problem, assuming valid input where each sample has at least one vote.\n            final_prediction = None # Or handle error\n\n        aggregated_predictions.append(final_prediction)\n\n    return aggregated_predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    predictions1 = [\n        [1, 2, 1, 3, 2],\n        [1, 1, 1, 3, 2],\n        [2, 2, 1, 1, 2],\n        [1, 2, 3, 3, 1]\n    ]\n    aggregated1 = aggregate_random_forest_votes(predictions1)\n    print(f\"Predictions 1: {predictions1}\")\n    print(f\"Aggregated 1: {aggregated1}\") # Expected: [1, 2, 1, 3, 2]\n\n    predictions2 = [\n        ['cat', 'dog', 'cat'],\n        ['dog', 'dog', 'cat'],\n        ['cat', 'cat', 'dog']\n    ]\n    aggregated2 = aggregate_random_forest_votes(predictions2)\n    print(f\"\\nPredictions 2: {predictions2}\")\n    print(f\"Aggregated 2: {aggregated2}\") # Expected: ['cat', 'dog', 'cat']\n\n    predictions3 = [\n        [10, 20, 30],\n        [10, 20, 30],\n        [20, 10, 40]\n    ]\n    aggregated3 = aggregate_random_forest_votes(predictions3)\n    print(f\"\\nPredictions 3: {predictions3}\")\n    print(f\"Aggregated 3: {aggregated3}\") # Expected: [10, 20, 30]\n\n    predictions4 = [\n        [1, 2, 3],\n        [2, 1, 3],\n        [3, 3, 1]\n    ]\n    aggregated4 = aggregate_random_forest_votes(predictions4)\n    print(f\"\\nPredictions 4: {predictions4}\")\n    print(f\"Aggregated 4: {aggregated4}\") # Expected: [1, 1, 1] (Tie breaking: min(1,2,3)=1, min(1,2)=1, min(1,3)=1)\n\n    predictions5 = [\n        ['apple', 'banana', 'cherry'],\n        ['banana', 'apple', 'cherry'],\n        ['cherry', 'cherry', 'apple']\n    ]\n    aggregated5 = aggregate_random_forest_votes(predictions5)\n    print(f\"\\nPredictions 5: {predictions5}\")\n    print(f\"Aggregated 5: {aggregated5}\") # Expected: ['apple', 'apple', 'apple'] (Tie breaking: min('apple','banana','cherry')='apple', min('apple','banana')='apple', min('apple','cherry')='apple')\n\n    predictions6 = []\n    aggregated6 = aggregate_random_forest_votes(predictions6)\n    print(f\"\\nPredictions 6: {predictions6}\")\n    print(f\"Aggregated 6: {aggregated6}\") # Expected: []\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    is_scalar = not isinstance(z, (list, np.ndarray))\n    z_array = np.asarray(z)\n\n    # Use the numerically stable identity: softplus(z) = logaddexp(0.0, z)\n    result_array = np.logaddexp(0.0, z_array)\n\n    # Round to 4 decimal places\n    rounded_result_array = np.round(result_array, 4)\n\n    if is_scalar:\n        return float(rounded_result_array)\n    else:\n        return rounded_result_array.tolist()\n\nif __name__ == '__main__':\n    # Example usage:\n    z1 = -1000\n    print(f\"softplus({z1}) = {softplus(z1)}\")\n\n    z2 = 0\n    print(f\"softplus({z2}) = {softplus(z2)}\")\n\n    z3 = 3\n    print(f\"softplus({z3}) = {softplus(z3)}\")\n\n    z4 = np.array([-1000, 0, 3])\n    print(f\"softplus({z4}) = {softplus(z4)}\")\n\n    z5 = [10, -5, 0.5]\n    print(f\"softplus({z5}) = {softplus(z5)}\")\n\n    z6 = [[-100, 100], [0, 5]]\n    print(f\"softplus({z6}) = {softplus(z6)}\")\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Write your code below\n    try:\n        ev_estimates = policy.get(\"ev_estimates\", None) if isinstance(policy, dict) else getattr(policy, \"ev_estimates\", None)\n    except AttributeError:\n        ev_estimates = None\n\n    if ev_estimates is None or not ev_estimates:\n        return np.nan\n\n    try:\n        arm_evs = bandit.get(\"arm_evs\", None) if isinstance(bandit, dict) else getattr(bandit, \"arm_evs\", None)\n    except AttributeError:\n        arm_evs = None\n\n    if arm_evs is None:\n        return np.nan # Or handle this case based on requirements, assuming arm_evs is always present\n\n    # Sort estimates by arm index\n    sorted_estimates = sorted(ev_estimates.items())\n    estimated_values = [est for _, est in sorted_estimates]\n\n    if len(estimated_values) != len(arm_evs):\n        # This case is not explicitly handled in the description, but it's a potential issue.\n        # For this problem, we assume the number of estimates matches the number of true values.\n        # If not, we could return NaN or raise an error depending on the desired behavior.\n        # Based on the example, we assume a one-to-one correspondence.\n        pass\n\n    squared_errors = [(est - true_ev) ** 2 for est, true_ev in zip(estimated_values, arm_evs)]\n    mean_squared_error = np.mean(squared_errors)\n\n    return round(mean_squared_error, 4)\n\nif __name__ == '__main__':\n    # Example usage from the problem description\n    bandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\n    policy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n    print(f\"MSE for example 1: {mse(bandit, policy)}\")\n\n    # Example with different order of estimates\n    policy_unordered = {\"ev_estimates\": {1: 0.25, 0: 0.4, 2: 0.8}}\n    print(f\"MSE for example 2 (unordered): {mse(bandit, policy_unordered)}\")\n\n    # Example with missing estimates\n    policy_missing = {\"ev_estimates\": {}}\n    print(f\"MSE for missing estimates: {mse(bandit, policy_missing)}\")\n\n    # Example with no ev_estimates attribute\n    policy_no_attr = {}\n    print(f\"MSE for no ev_estimates attribute: {mse(bandit, policy_no_attr)}\")\n\n    # Example with object-like inputs\n    class BanditObject:\n        def __init__(self, arm_evs):\n            self.arm_evs = arm_evs\n\n    class PolicyObject:\n        def __init__(self, ev_estimates):\n            self.ev_estimates = ev_estimates\n\n    bandit_obj = BanditObject([0.5, 0.2, 0.9])\n    policy_obj = PolicyObject({0: 0.4, 1: 0.25, 2: 0.8})\n    print(f\"MSE for object inputs: {mse(bandit_obj, policy_obj)}\")\n\n    policy_obj_empty = PolicyObject({})\n    print(f\"MSE for empty object estimates: {mse(bandit_obj, policy_obj_empty)}\")\n\n    class PolicyObjectNoAttr:\n        pass\n\n    policy_obj_no_attr = PolicyObjectNoAttr()\n    print(f\"MSE for object with no ev_estimates attribute: {mse(bandit_obj, policy_obj_no_attr)}\")\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1. Build vocabulary and N-gram frequency tables\n    vocabulary = set()\n    ngram_counts = defaultdict(Counter)\n    context_counts = defaultdict(int)\n\n    for sentence in corpus:\n        words = sentence.split()\n        vocabulary.update(words)\n        # Add start and end tokens for N > 1\n        if N > 1:\n            words = [\"<s>\"] * (N - 1) + words + [\"</s>\"]\n        else:\n            words = words # No special tokens for unigrams\n\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i : i + N])\n            context = tuple(ngram[:-1])\n            ngram_counts[context][ngram[-1]] += 1\n            context_counts[context] += 1\n\n    # Add <UNK> to vocabulary\n    vocabulary.add(\"<UNK>\")\n    vocab_size = len(vocabulary)\n\n    # 2. Process the target sequence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n\n    # Add start and end tokens for N > 1\n    if N > 1:\n        target_words = [\"<s>\"] * (N - 1) + target_words + [\"</s>\"]\n    else:\n        target_words = target_words # No special tokens for unigrams\n\n    total_log_prob = 0.0\n\n    for i in range(len(target_words) - N + 1):\n        ngram = tuple(target_words[i : i + N])\n        context = tuple(ngram[:-1])\n        word = ngram[-1]\n\n        # Map unseen words to <UNK>\n        if word not in vocabulary:\n            word = \"<UNK>\"\n\n        # Calculate smoothed probability\n        # If the context is unseen, the context count is 0.\n        # The smoothed probability formula handles this correctly.\n        context_count = context_counts.get(context, 0)\n        ngram_count = ngram_counts.get(context, {}).get(word, 0)\n\n        probability = (ngram_count + K) / (context_count + K * vocab_size)\n\n        # Add log probability\n        total_log_prob += math.log(probability)\n\n    return round(total_log_prob, 4)\n\nif __name__ == '__main__':\n    # Example Usage:\n    corpus = [\n        \"this is a test sentence\",\n        \"another test sentence here\",\n        \"this is another sentence\"\n    ]\n    sequence = \"this is a test\"\n    N = 2\n    K = 1.0\n\n    log_prob = additive_ngram_log_prob(corpus, sequence, N, K)\n    print(f\"Log probability of '{sequence}' with N={N}, K={K}: {log_prob}\")\n\n    sequence_unk = \"this is a new word\"\n    log_prob_unk = additive_ngram_log_prob(corpus, sequence_unk, N, K)\n    print(f\"Log probability of '{sequence_unk}' with N={N}, K={K}: {log_prob_unk}\")\n\n    sequence_short = \"hi\"\n    log_prob_short = additive_ngram_log_prob(corpus, sequence_short, N, K)\n    print(f\"Log probability of '{sequence_short}' with N={N}, K={K}: {log_prob_short}\")\n\n    sequence_unigram = \"this is a test\"\n    N_unigram = 1\n    log_prob_unigram = additive_ngram_log_prob(corpus, sequence_unigram, N_unigram, K)\n    print(f\"Log probability of '{sequence_unigram}' with N={N_unigram}, K={K}: {log_prob_unigram}\")\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def calculate_loss(X, W, H, alpha):\n        reconstruction_error = np.linalg.norm(X - W @ H, 'fro')**2\n        regularization_term = alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        return reconstruction_error + regularization_term\n\n    best_loss = float('inf')\n    best_reconstruction = None\n\n    for iteration in range(max_iter):\n        # Update W\n        # W = X @ H.T @ np.linalg.inv(H @ H.T + alpha * np.eye(K))\n        # More stable way using solve\n        A_W = H @ H.T + alpha * np.eye(K)\n        B_W = X @ H.T\n        W = np.linalg.solve(A_W, B_W.T).T\n\n        # Update H\n        # H = np.linalg.inv(W.T @ W + alpha * np.eye(K)) @ W.T @ X\n        # More stable way using solve\n        A_H = W.T @ W + alpha * np.eye(K)\n        B_H = W.T @ X\n        H = np.linalg.solve(A_H, B_H)\n\n        current_loss = calculate_loss(X, W, H, alpha)\n\n        if current_loss < best_loss:\n            best_loss = current_loss\n            best_reconstruction = W @ H\n\n        if current_loss < tol:\n            break\n\n    if best_reconstruction is None:\n        # If no iteration improved the initial state, return the initial reconstruction\n        best_reconstruction = W @ H\n\n    return best_reconstruction.round(4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    X = np.array([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9]])\n    K = 2\n    alpha = 0.1\n\n    X_hat = als_factorization(X, K, alpha)\n    print(\"Reconstructed Matrix:\")\n    print(X_hat)\n\n    X_large = np.random.rand(100, 50)\n    K_large = 10\n    alpha_large = 0.5\n    X_hat_large = als_factorization(X_large, K_large, alpha_large, max_iter=50)\n    print(\"\\nReconstructed Large Matrix (first 5x5):\")\n    print([row[:5] for row in X_hat_large[:5]])\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n\n    # K-Means++ initialization\n    centroids = np.zeros((K, n))\n    centroids[0] = X[random.randint(0, m - 1)]\n\n    for k in range(1, K):\n        distances = np.min(np.sum((X - centroids[:k])**2, axis=1), axis=1)\n        probabilities = distances / np.sum(distances)\n        cumulative_probabilities = np.cumsum(probabilities)\n        r = random.random()\n        for i in range(m):\n            if r < cumulative_probabilities[i]:\n                centroids[k] = X[i]\n                break\n\n    # Lloyd's iterations\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iter):\n        # Assignment step\n        distances = np.sum((X[:, np.newaxis, :] - centroids)**2, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update step\n        new_centroids = np.copy(centroids)\n        for k in range(K):\n            cluster_points = X[labels == k]\n            if len(cluster_points) > 0:\n                new_centroids[k] = np.mean(cluster_points, axis=0)\n        centroids = new_centroids\n\n    # Round and sort centroids\n    rounded_centroids = [list(np.round(c, 4)) for c in centroids]\n    sorted_centroids = sorted(rounded_centroids, key=lambda c: (c[0], tuple(c)))\n\n    return sorted_centroids\n\nif __name__ == '__main__':\n    # Worked example from the problem description (assuming it exists)\n    # If no worked example is provided, this part can be removed or replaced\n    # with a simple test case.\n    # Example data (replace with your actual example data if available)\n    X_example = np.array([\n        [1.0, 1.0], [1.5, 2.0], [3.0, 4.0], [5.0, 7.0], [3.5, 5.0],\n        [4.5, 5.0], [3.5, 4.5]\n    ])\n    K_example = 3\n    random_state_example = 42\n\n    # Expected output for the example (replace with your actual expected output)\n    # This is a placeholder and needs to be determined based on the actual worked example.\n    # For random_state=42 and the above data, a possible output could be:\n    # expected_centroids = [[1.25, 1.5], [3.3333, 4.5], [4.5, 6.0]]\n    # Let's run the function and print the result\n    result_centroids = kmeans(X_example, K_example, random_state=random_state_example)\n    print(\"Resulting centroids:\")\n    for centroid in result_centroids:\n        print(centroid)\n\n    # You can add assertions here to compare the result with the expected output\n    # assert result_centroids == expected_centroids, \"Result does not match expected output\"\n\n    # Another simple test case\n    X_test = np.array([\n        [0, 0], [0.5, 0], [1, 0], [5, 5], [5.5, 5], [6, 5]\n    ])\n    K_test = 2\n    result_test = kmeans(X_test, K_test, random_state=1)\n    print(\"\\nResulting centroids for test data:\")\n    for centroid in result_test:\n        print(centroid)\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes a string into a fixed-length list of integer token ids.\n\n    Args:\n        text: The input string.\n        time_steps: The fixed length of the output sequence.\n        vocabulary: A dictionary mapping characters to integer ids.\n\n    Returns:\n        A list of integer ids of length time_steps.\n    \"\"\"\n    encoded_sequence = []\n    for char in text[:time_steps]:\n        encoded_sequence.append(vocabulary.get(char, 0))  # Use 0 for unknown characters\n\n    # Pad with 0 if the sequence is shorter than time_steps\n    while len(encoded_sequence) < time_steps:\n        encoded_sequence.append(0)\n\n    return encoded_sequence\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text.\n\n    Args:\n        indices: A list or array of integer ids.\n        inverse_vocab: A dictionary mapping integer ids to characters.\n\n    Returns:\n        The decoded string, ignoring padding tokens (0).\n    \"\"\"\n    decoded_string = \"\"\n    for index in indices:\n        if index != 0:  # Ignore padding tokens\n            decoded_string += inverse_vocab.get(index, \"\")  # Use empty string for unknown ids\n    return decoded_string\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes text, feeds it to a model, and decodes the prediction.\n\n    Args:\n        model: A model object with a predict method that takes a NumPy array\n               of shape (batch_size, time_steps) and returns a NumPy array\n               of shape (batch_size, time_steps, num_classes).\n        input_vocabulary: The vocabulary for encoding the input text.\n        inv_output_vocabulary: The inverse vocabulary for decoding the model's output.\n        text: The raw input text string.\n\n    Returns:\n        The decoded prediction string.\n    \"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n\n    # Prepare the input for the model (batch size 1)\n    model_input = np.array([encoded_input])\n\n    # Get the model prediction\n    model_output = model.predict(model_input)\n\n    # Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(model_output, axis=-1)[0]  # Get the predictions for the first (and only) item in the batch\n\n    # Decode the predicted ids\n    decoded_prediction = int_to_string(predicted_ids, inv_output_vocabulary)\n\n    return decoded_prediction\n\nif __name__ == '__main__':\n    # Example Usage:\n\n    # Create a simple dummy model for demonstration\n    class DummyModel:\n        def predict(self, x):\n            # Simulate a model prediction.\n            # For this example, let's assume the model predicts the input sequence shifted by one character.\n            batch_size, time_steps = x.shape\n            num_classes = 5  # Example number of classes (including padding)\n            output = np.zeros((batch_size, time_steps, num_classes))\n\n            for i in range(batch_size):\n                for j in range(time_steps):\n                    # Simple shift prediction: predict the next character's ID\n                    if j < time_steps - 1:\n                        output[i, j, x[i, j+1]] = 1.0  # Predict the ID of the next character\n                    else:\n                        output[i, j, 0] = 1.0  # Predict padding at the end\n\n            return output\n\n    # Define vocabularies\n    input_vocab = {'a': 1, 'b': 2, 'c': 3, ' ': 4}\n    output_vocab = {0: '', 1: 'a', 2: 'b', 3: 'c', 4: ' '}\n    inv_output_vocab = {v: k for k, v in output_vocab.items()}\n\n    # Create a dummy model instance\n    dummy_model = DummyModel()\n\n    # Example text\n    input_text = \"abc abc\"\n\n    # Run the example\n    predicted_text = run_example(dummy_model, input_vocab, inv_output_vocab, input_text)\n\n    print(f\"Input text: '{input_text}'\")\n    print(f\"Predicted text: '{predicted_text}'\")\n\n    # Another example with longer text\n    input_text_long = \"this is a longer sentence that will be truncated\"\n    predicted_text_long = run_example(dummy_model, input_vocab, inv_output_vocab, input_text_long)\n    print(f\"\\nInput text: '{input_text_long}'\")\n    print(f\"Predicted text: '{predicted_text_long}'\")\n\n    # Another example with unknown characters\n    input_text_unknown = \"hello world!\"\n    predicted_text_unknown = run_example(dummy_model, input_vocab, inv_output_vocab, input_text_unknown)\n    print(f\"\\nInput text: '{input_text_unknown}'\")\n    print(f\"Predicted text: '{predicted_text_unknown}'\")\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Write your code here\n    if examples is None:\n        examples = EXAMPLES  # Assuming EXAMPLES is a global constant\n\n    predictions = []\n    for example in examples:\n        # run_example is assumed to be available and returns a list of characters\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = \"\".join(predicted_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        predictions.append(predicted_string)\n\n    return predictions\n\n# Dummy implementations for testing purposes\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Dummy run_example function for testing.\"\"\"\n    # In a real scenario, this would use the model to generate output\n    # For this dummy, we'll just reverse the input string as a prediction\n    return list(model(example))\n\n# Dummy model for testing\ndef dummy_model(input_string):\n    \"\"\"A dummy model that reverses the input string.\"\"\"\n    return input_string[::-1]\n\n# Dummy vocabularies (not used by run_examples or dummy_model)\ninput_vocabulary = {}\ninv_output_vocabulary = {}\n\n# Dummy examples\nEXAMPLES = [\"hello\", \"world\", \"python\"]\n\nif __name__ == '__main__':\n    # Example usage\n    print(\"Running with explicit examples:\")\n    explicit_examples = [\"apple\", \"banana\", \"cherry\"]\n    predictions_explicit = run_examples(dummy_model, input_vocabulary, inv_output_vocabulary, explicit_examples)\n    print(\"\\nReturned predictions:\", predictions_explicit)\n\n    print(\"\\nRunning with global EXAMPLES:\")\n    predictions_global = run_examples(dummy_model, input_vocabulary, inv_output_vocabulary, None)\n    print(\"\\nReturned predictions:\", predictions_global)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    epsilon = 1e-20\n\n    # Ensure y and w have the correct shape for calculations\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n\n    # Compute z = X * w\n    z = X @ w\n\n    # Compute predicted probabilities p = sigmoid(z)\n    p = 1 / (1 + np.exp(-z))\n\n    # Handle numerical stability for logarithms\n    p = np.clip(p, epsilon, 1 - epsilon)\n\n    # Compute the average binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n\n    # Compute the gradient of the loss\n    gradient = (1 / m) * X.T @ (p - y)\n\n    # Round and convert to the required output format\n    rounded_loss = round(float(loss), 4)\n    rounded_gradient = np.round(gradient, 4).tolist()\n\n    return rounded_loss, rounded_gradient\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 0])\n    w = np.array([0.1, -0.2])\n\n    loss, gradient = logistic_loss_and_gradient(X, y, w)\n    print(f\"Loss: {loss}\")\n    print(f\"Gradient: {gradient}\")\n\n    # Example with different shapes\n    X_2 = np.array([[1, 2, 3], [4, 5, 6]])\n    y_2 = np.array([[1], [0]])\n    w_2 = np.array([[0.5], [-0.1], [0.3]])\n\n    loss_2, gradient_2 = logistic_loss_and_gradient(X_2, y_2, w_2)\n    print(f\"Loss 2: {loss_2}\")\n    print(f\"Gradient 2: {gradient_2}\")\n```"}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    k, _ = X_test.shape\n    n_clf = max(1, n_clf)  # Ensure n_clf is at least 1\n\n    # Initialize weights\n    weights = np.full(m, 1 / m)\n\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        min_weighted_error = float('inf')\n\n        # Iterate through all features and all possible thresholds\n        for feature_index in range(n):\n            feature_values = np.unique(X_train[:, feature_index])\n            # Consider thresholds between consecutive unique values and the min/max values\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2 if len(feature_values) > 1 else feature_values\n            if len(feature_values) > 0:\n                thresholds = np.insert(thresholds, 0, feature_values[0] - 1)\n                thresholds = np.append(thresholds, feature_values[-1] + 1)\n\n            for threshold in thresholds:\n                # Try both polarities (predict 1 if feature > threshold, or predict 1 if feature <= threshold)\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] > threshold] = -1\n\n                    # Calculate weighted error\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n\n        # Calculate alpha\n        epsilon_t = min_weighted_error\n        # Handle the case where epsilon_t is 0 or 1 to avoid log(0) or log(inf)\n        epsilon_t = max(1e-10, min(1 - 1e-10, epsilon_t))\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n\n        # Update weights\n        predictions = np.ones(m)\n        if best_stump['polarity'] == 1:\n            predictions[X_train[:, best_stump['feature_index']] <= best_stump['threshold']] = -1\n        else:\n            predictions[X_train[:, best_stump['feature_index']] > best_stump['threshold']] = -1\n\n        weights *= np.exp(-alpha_t * y_train * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n\n        stumps.append(best_stump)\n        alphas.append(alpha_t)\n\n    # Make predictions on X_test\n    predictions = np.zeros(k)\n    for i in range(n_clf):\n        stump = stumps[i]\n        alpha = alphas[i]\n        stump_predictions = np.ones(k)\n        if stump['polarity'] == 1:\n            stump_predictions[X_test[:, stump['feature_index']] <= stump['threshold']] = -1\n        else:\n            stump_predictions[X_test[:, stump['feature_index']] > stump['threshold']] = -1\n        predictions += alpha * stump_predictions\n\n    # Final prediction is the sign of the weighted sum\n    final_predictions = np.sign(predictions).astype(int)\n\n    return final_predictions.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = np.array([\n        [1, 2],\n        [2, 3],\n        [3, 4],\n        [4, 5],\n        [5, 6],\n        [6, 7],\n        [7, 8],\n        [8, 9]\n    ])\n    y_train = np.array([-1, -1, -1, -1, 1, 1, 1, 1])\n\n    X_test = np.array([\n        [1.5, 2.5],\n        [5.5, 6.5],\n        [0.5, 1.5],\n        [9, 10]\n    ])\n\n    predicted_labels = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(\"Predicted labels:\", predicted_labels)\n\n    # Another example\n    X_train_2 = np.array([\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1]\n    ])\n    y_train_2 = np.array([-1, 1, 1, -1])\n\n    X_test_2 = np.array([\n        [0.1, 0.1],\n        [0.9, 0.9],\n        [0.1, 0.9],\n        [0.9, 0.1]\n    ])\n\n    predicted_labels_2 = adaboost_predict(X_train_2, y_train_2, X_test_2, n_clf=5)\n    print(\"Predicted labels 2:\", predicted_labels_2)\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n\n    n_samples, n_features = X.shape\n    class_labels = np.unique(y)\n    n_classes = len(class_labels)\n\n    # 1. Compute the within-class scatter matrix S_W\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.cov(X_c.T) * (X_c.shape[0] - 1)\n\n    # 2. Compute the between-class scatter matrix S_B\n    S_B = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        mean_diff = (mean_c - mean_overall).reshape(-1, 1)\n        S_B += N_c * (mean_diff @ mean_diff.T)\n\n    # 3. Form the matrix A = pinv(S_W)\u00b7S_B\n    S_W_pinv = np.linalg.pinv(S_W)\n    A = S_W_pinv @ S_B\n\n    # 4. Perform eigen-decomposition of A and sort\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # 5. Deterministic sign\n    for i in range(eigenvectors.shape[1]):\n        first_nonzero_index = np.argmax(np.abs(eigenvectors[:, i]) > 1e-9)\n        if eigenvectors[first_nonzero_index, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Select the top n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n\n    # 6. Project X on the first n_components eigenvectors and round\n    X_projected = X @ W\n    X_projected_rounded = np.round(X_projected, 4)\n\n    # 7. Return the projected data as a list of lists\n    return X_projected_rounded.tolist()\n\nif __name__ == '__main__':\n    # Example from the problem description\n    X = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\n    y = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n    n_components = 1\n    projected_data = multi_class_lda(X, y, n_components)\n    print(projected_data)\n\n    # Another example\n    X_multi = np.array([\n        [1, 2], [2, 3], [3, 4],  # Class 0\n        [5, 6], [6, 7], [7, 8],  # Class 1\n        [10, 11], [11, 12], [12, 13] # Class 2\n    ])\n    y_multi = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2])\n    n_components_multi = 2\n    projected_data_multi = multi_class_lda(X_multi, y_multi, n_components_multi)\n    print(projected_data_multi)\n\n    # Example with n_components equal to n_features\n    X_full = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\n    y_full = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n    n_components_full = 2\n    projected_data_full = multi_class_lda(X_full, y_full, n_components_full)\n    print(projected_data_full)\n\n    # Example with n_components = 0\n    X_zero = np.array([[1, 1], [1, 2]])\n    y_zero = np.array([0, 0])\n    n_components_zero = 0\n    projected_data_zero = multi_class_lda(X_zero, y_zero, n_components_zero)\n    print(projected_data_zero)\n```"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n\n    # Handle 1x1 case\n    if n == 1 and grid[0] == \".\":\n        return 0\n    if n == 1 and grid[0] in (\"#\", \"F\"):\n        return -1\n\n    # Initialize fire spread times\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_time[r][c] = 0\n                fire_queue.append((r, c))\n\n    # If start or goal is initially on fire or a wall\n    if grid[0][0] in (\"#\", \"F\") or grid[n-1][n-1] == \"#\":\n        return -1\n\n    # BFS for fire spread\n    while fire_queue:\n        r, c = fire_queue.popleft()\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] != '#' and fire_time[nr][nc] == math.inf:\n                fire_time[nr][nc] = fire_time[r][c] + 1\n                fire_queue.append((nr, nc))\n\n    # BFS for agent movement\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    visited = set([(0, 0)])\n\n    while agent_queue:\n        r, c, time = agent_queue.popleft()\n\n        if (r, c) == (n - 1, n - 1):\n            return time\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] != '#' and (nr, nc) not in visited:\n                # Agent moves at time+1. Fire spreads at time+1.\n                # Agent can enter (nr, nc) at time+1 if fire reaches (nr, nc) at time+2 or later.\n                if fire_time[nr][nc] > time + 1:\n                    visited.add((nr, nc))\n                    agent_queue.append((nr, nc, time + 1))\n\n    return -1\n\nif __name__ == '__main__':\n    # Example Usage:\n    grid1 = [\n        \"....\",\n        \".F..\",\n        \"....\",\n        \"....\",\n    ]\n    print(f\"Grid 1: {escape_fire_maze(grid1)}\")  # Expected: 6\n\n    grid2 = [\n        \"...\",\n        \".F.\",\n        \"...\",\n    ]\n    print(f\"Grid 2: {escape_fire_maze(grid2)}\")  # Expected: 4\n\n    grid3 = [\n        \"F...\",\n        \"....\",\n        \"....\",\n        \"....\",\n    ]\n    print(f\"Grid 3: {escape_fire_maze(grid3)}\")  # Expected: -1\n\n    grid4 = [\n        \"...\",\n        \".#.\",\n        \"...\",\n    ]\n    print(f\"Grid 4: {escape_fire_maze(grid4)}\")  # Expected: 4\n\n    grid5 = [\n        \".\",\n    ]\n    print(f\"Grid 5: {escape_fire_maze(grid5)}\")  # Expected: 0\n\n    grid6 = [\n        \"#\",\n    ]\n    print(f\"Grid 6: {escape_fire_maze(grid6)}\")  # Expected: -1\n\n    grid7 = [\n        \"F\",\n    ]\n    print(f\"Grid 7: {escape_fire_maze(grid7)}\")  # Expected: -1\n\n    grid8 = [\n        \"....\",\n        \".F..\",\n        \".F..\",\n        \"....\",\n    ]\n    print(f\"Grid 8: {escape_fire_maze(grid8)}\") # Expected: 4\n\n    grid9 = [\n        \"....\",\n        \".##.\",\n        \".##.\",\n        \"....\",\n    ]\n    print(f\"Grid 9: {escape_fire_maze(grid9)}\") # Expected: 6\n```"}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    n_test = X_test.shape[0]\n    n_train = X_train.shape[0]\n    predictions = np.zeros(n_test, dtype=y_train.dtype)\n\n    for i in range(n_test):\n        distances = np.zeros(n_train)\n        for j in range(n_train):\n            if metric == 'manhattan':\n                distances[j] = np.sum(np.abs(X_test[i] - X_train[j]))\n            elif metric == 'cosine':\n                dot_product = np.dot(X_test[i], X_train[j])\n                norm_test = np.linalg.norm(X_test[i])\n                norm_train = np.linalg.norm(X_train[j])\n                if norm_test == 0 or norm_train == 0:\n                    distances[j] = 1.0  # Handle zero vectors\n                else:\n                    distances[j] = 1 - (dot_product / (norm_test * norm_train))\n            else:  # Default to euclidean\n                distances[j] = np.linalg.norm(X_test[i] - X_train[j])\n\n        # Find the indices of the k nearest neighbors\n        nearest_neighbors_indices = np.argsort(distances)[:k]\n\n        # Get the labels of the k nearest neighbors\n        nearest_neighbors_labels = y_train[nearest_neighbors_indices]\n\n        # Perform majority vote\n        unique_labels, counts = np.unique(nearest_neighbors_labels, return_counts=True)\n\n        # Find the label(s) with the maximum count\n        max_count = np.max(counts)\n        most_common_labels = unique_labels[counts == max_count]\n\n        # In case of a tie, return the smallest label value\n        predictions[i] = np.min(most_common_labels)\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])\n    y_train = np.array([0, 0, 1, 1, 0])\n    X_test = np.array([[2.5, 3.5], [4.5, 5.5], [1.5, 2.5]])\n\n    # Test with Euclidean distance\n    predictions_euclidean = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n    print(\"Predictions (Euclidean):\", predictions_euclidean)\n\n    # Test with Manhattan distance\n    predictions_manhattan = knn_predict(X_train, y_train, X_test, k=3, metric='manhattan')\n    print(\"Predictions (Manhattan):\", predictions_manhattan)\n\n    # Test with Cosine distance\n    predictions_cosine = knn_predict(X_train, y_train, X_test, k=3, metric='cosine')\n    print(\"Predictions (Cosine):\", predictions_cosine)\n\n    # Test with unknown metric (should default to Euclidean)\n    predictions_unknown = knn_predict(X_train, y_train, X_test, k=3, metric='unknown')\n    print(\"Predictions (Unknown Metric - defaults to Euclidean):\", predictions_unknown)\n\n    # Example with a tie\n    X_train_tie = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\n    y_train_tie = np.array([0, 1, 0, 1])\n    X_test_tie = np.array([[2.5, 2.5]])\n    predictions_tie = knn_predict(X_train_tie, y_train_tie, X_test_tie, k=2)\n    print(\"Predictions (Tie):\", predictions_tie)\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    # TODO: complete the implementation\n    n_samples_train = X.shape[0]\n    n_samples_test = X_test.shape[0]\n    k = min(k, n_samples_train)\n    predicted_labels = []\n\n    for i in range(n_samples_test):\n        distances = []\n        for j in range(n_samples_train):\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((X_test[i] - X[j])**2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(X_test[i] - X[j]))\n            elif metric == 'cosine':\n                dot_product = np.dot(X_test[i], X[j])\n                norm_test = np.linalg.norm(X_test[i])\n                norm_train = np.linalg.norm(X[j])\n                epsilon = 1e-12\n                dist = 1 - (dot_product / (norm_test * norm_train + epsilon))\n            else:\n                raise ValueError(\"Invalid metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n            distances.append((dist, y[j]))\n\n        # Sort by distance and get the k nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest_neighbours = distances[:k]\n\n        # Perform majority vote\n        labels = [label for dist, label in k_nearest_neighbours]\n        unique_labels, counts = np.unique(labels, return_counts=True)\n\n        # Find the label with the maximum count\n        max_count = np.max(counts)\n        most_common_labels = unique_labels[counts == max_count]\n\n        # In case of a tie, return the smallest label\n        predicted_label = np.min(most_common_labels)\n        predicted_labels.append(predicted_label)\n\n    return predicted_labels\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([[1, 2], [1, 3], [2, 2], [3, 4], [3, 5]])\n    y_train = np.array([0, 0, 0, 1, 1])\n    X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n\n    # Test with Euclidean distance\n    predictions_euclidean = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n    print(f\"Predictions (Euclidean): {predictions_euclidean}\")\n\n    # Test with Manhattan distance\n    predictions_manhattan = knn_predict(X_train, y_train, X_test, k=3, metric='manhattan')\n    print(f\"Predictions (Manhattan): {predictions_manhattan}\")\n\n    # Test with Cosine distance\n    predictions_cosine = knn_predict(X_train, y_train, X_test, k=3, metric='cosine')\n    print(f\"Predictions (Cosine): {predictions_cosine}\")\n\n    # Test with k > n_samples\n    predictions_large_k = knn_predict(X_train, y_train, X_test, k=10, metric='euclidean')\n    print(f\"Predictions (large k): {predictions_large_k}\")\n\n    # Test with a tie\n    X_train_tie = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\n    y_train_tie = np.array([0, 1, 0, 1])\n    X_test_tie = np.array([[2.5, 2.5]])\n    predictions_tie = knn_predict(X_train_tie, y_train_tie, X_test_tie, k=2, metric='euclidean')\n    print(f\"Predictions (tie): {predictions_tie}\")\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Write your code below\n    state = np.array(state)\n\n    # First linear layer\n    hidden1_pre_relu = np.dot(state, weights[\"W1\"]) + weights[\"b1\"]\n\n    # First ReLU activation\n    hidden1_post_relu = np.maximum(0, hidden1_pre_relu)\n\n    # Second linear layer\n    hidden2_pre_relu = np.dot(hidden1_post_relu, weights[\"W2\"]) + weights[\"b2\"]\n\n    # Second ReLU activation\n    hidden2_post_relu = np.maximum(0, hidden2_pre_relu)\n\n    # Output linear layer\n    action_pre_tanh = np.dot(hidden2_post_relu, weights[\"W3\"]) + weights[\"b3\"]\n\n    # Tanh activation\n    action = np.tanh(action_pre_tanh)\n\n    # Round to 4 decimal places and convert to list\n    return np.round(action, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    state_dim = 4\n    hidden1 = 8\n    hidden2 = 8\n    action_dim = 2\n\n    # Generate some random weights and biases\n    weights = {\n        \"W1\": np.random.randn(state_dim, hidden1),\n        \"b1\": np.random.randn(hidden1),\n        \"W2\": np.random.randn(hidden1, hidden2),\n        \"b2\": np.random.randn(hidden2),\n        \"W3\": np.random.randn(hidden2, action_dim),\n        \"b3\": np.random.randn(action_dim),\n    }\n\n    # Example state\n    state = [0.1, -0.5, 0.3, 0.8]\n\n    # Perform the forward pass\n    action = actor_forward(state, weights)\n\n    print(\"State:\", state)\n    print(\"Action:\", action)\n\n    # Example with a different state\n    state2 = [-0.9, 0.2, 0.0, 1.1]\n    action2 = actor_forward(state2, weights)\n    print(\"\\nState:\", state2)\n    print(\"Action:\", action2)\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n\n    # Step 1: Add intercept column\n    if fit_intercept:\n        X_augmented = np.hstack((np.ones((m, 1)), X))\n    else:\n        X_augmented = np.hstack((np.zeros((m, 1)), X))\n\n    # Step 2: Initialize parameters\n    weights_augmented = np.zeros(n + 1)\n    bias = 0.0\n\n    # Soft-thresholding function\n    def soft_threshold(a, tau):\n        return np.sign(a) * np.maximum(np.abs(a) - tau, 0)\n\n    for _ in range(max_iters):\n        # Step 2 (continued): Recompute intercept if fitting\n        if fit_intercept:\n            residuals = y - X_augmented @ weights_augmented\n            bias = np.mean(residuals)\n            weights_augmented[0] = bias\n\n        # Step 3: Coordinate loop over weights (excluding intercept)\n        for j in range(1, n + 1):\n            # Temporarily set the current weight to 0\n            current_weight = weights_augmented[j]\n            weights_augmented[j] = 0\n\n            # Compute partial residual\n            r_j = y - X_augmented @ weights_augmented\n\n            # Update weight w_j using soft-thresholding\n            numerator = np.dot(X_augmented[:, j], r_j)\n            denominator = np.sum(X_augmented[:, j]**2)\n\n            if denominator > 1e-9:  # Avoid division by zero\n                weights_augmented[j] = soft_threshold(numerator, lambda_param * m) / denominator\n            else:\n                weights_augmented[j] = 0.0 # If column is all zeros, weight remains zero\n\n    # Step 4: Return final intercept and weight vector\n    bias = weights_augmented[0]\n    weights = weights_augmented[1:]\n\n    # Round the results\n    rounded_weights = [round(w, 4) for w in weights]\n    rounded_bias = round(bias, 4)\n\n    return rounded_weights, rounded_bias\n\nif __name__ == '__main__':\n    # Example Usage\n    np.random.seed(42)\n    m, n = 100, 5\n    X_test = np.random.rand(m, n)\n    true_weights = np.array([1.0, 0.0, -0.5, 2.0, 0.0])\n    true_bias = 5.0\n    y_test = X_test @ true_weights + true_bias + np.random.randn(m) * 0.5\n\n    # Test with intercept\n    weights_with_intercept, bias_with_intercept = fit_lasso(X_test, y_test, lambda_param=0.1, max_iters=1000, fit_intercept=True)\n    print(\"With Intercept:\")\n    print(\"Learned Weights:\", weights_with_intercept)\n    print(\"Learned Bias:\", bias_with_intercept)\n\n    # Test without intercept\n    weights_without_intercept, bias_without_intercept = fit_lasso(X_test, y_test, lambda_param=0.1, max_iters=1000, fit_intercept=False)\n    print(\"\\nWithout Intercept:\")\n    print(\"Learned Weights:\", weights_without_intercept)\n    print(\"Learned Bias:\", bias_without_intercept) # Should be close to 0\n\n    # Evaluate Mean Squared Error (for verification, not part of the function)\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred)**2)\n\n    y_pred_with_intercept = X_test @ np.array(weights_with_intercept) + bias_with_intercept\n    print(\"\\nMSE with intercept:\", mse(y_test, y_pred_with_intercept))\n\n    y_pred_without_intercept = X_test @ np.array(weights_without_intercept) + bias_without_intercept\n    print(\"MSE without intercept:\", mse(y_test, y_pred_without_intercept))\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n\n    if len(x) == 0:\n        return 0.0\n\n    diff_count = np.sum(x != y)\n    distance = diff_count / len(x)\n\n    return round(distance, 4)\n\nif __name__ == '__main__':\n    # Example Usage\n    x1 = [1, 0, 1, 1, 0]\n    y1 = [1, 1, 1, 0, 0]\n    print(f\"Hamming distance between {x1} and {y1}: {hamming_distance(x1, y1)}\")\n\n    x2 = np.array([1, 2, 3, 4])\n    y2 = np.array([1, 2, 3, 4])\n    print(f\"Hamming distance between {x2} and {y2}: {hamming_distance(x2, y2)}\")\n\n    x3 = [1, 2, 3]\n    y3 = [4, 5, 6]\n    print(f\"Hamming distance between {x3} and {y3}: {hamming_distance(x3, y3)}\")\n\n    x4 = [1, 2, 3]\n    y4 = [1, 2, 3, 4]\n    print(f\"Hamming distance between {x4} and {y4}: {hamming_distance(x4, y4)}\")\n\n    x5 = []\n    y5 = []\n    print(f\"Hamming distance between {x5} and {y5}: {hamming_distance(x5, y5)}\")\n\n    x6 = [1, 1, 1]\n    y6 = [0, 0, 0]\n    print(f\"Hamming distance between {x6} and {y6}: {hamming_distance(x6, y6)}\")\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n\n    if N == 1:\n        return [1.0]\n\n    window_types = [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]\n    if window not in window_types:\n        raise ValueError(f\"Unknown window type: {window}. Supported types are: {', '.join(window_types)}\")\n\n    window_coeffs = []\n    for n in range(N):\n        if window == \"hamming\":\n            w_n = 0.54 - 0.46 * math.cos(2 * math.pi * n / (N - 1))\n        elif window == \"hann\":\n            w_n = 0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1))\n        elif window == \"blackman_harris\":\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            w_n = a0 - a1 * math.cos(2 * math.pi * n / (N - 1)) + a2 * math.cos(4 * math.pi * n / (N - 1)) - a3 * math.cos(6 * math.pi * n / (N - 1))\n        elif window == \"generalized_cosine\":\n            if coefficients is None:\n                raise ValueError(\"coefficients must be provided for 'generalized_cosine' window.\")\n            w_n = 0.0\n            for k, ak in enumerate(coefficients):\n                w_n += ak * math.cos(2 * math.pi * k * n / (N - 1))\n\n        window_coeffs.append(round(w_n, 4))\n\n    return window_coeffs\n\nif __name__ == '__main__':\n    # Example Usage\n    print(\"Hamming window (N=10):\")\n    print(generate_window(\"hamming\", 10))\n\n    print(\"\\nHann window (N=10):\")\n    print(generate_window(\"hann\", 10))\n\n    print(\"\\nBlackman-Harris window (N=10):\")\n    print(generate_window(\"blackman_harris\", 10))\n\n    print(\"\\nGeneralized Cosine window (N=10, coeffs=[0.5, 0.5]):\")\n    print(generate_window(\"generalized_cosine\", 10, coefficients=[0.5, 0.5]))\n\n    print(\"\\nGeneralized Cosine window (N=10, coeffs=[0.3, 0.4, 0.3]):\")\n    print(generate_window(\"generalized_cosine\", 10, coefficients=[0.3, 0.4, 0.3]))\n\n    print(\"\\nWindow for N=1:\")\n    print(generate_window(\"hamming\", 1))\n\n    try:\n        generate_window(\"unknown\", 10)\n    except ValueError as e:\n        print(f\"\\nError for unknown window: {e}\")\n\n    try:\n        generate_window(\"generalized_cosine\", 10)\n    except ValueError as e:\n        print(f\"\\nError for generalized_cosine without coefficients: {e}\")\n\n    try:\n        generate_window(\"hamming\", 0)\n    except ValueError as e:\n        print(f\"\\nError for N=0: {e}\")\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Handle the special case where all training labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n\n    # Map original labels to {0, 1}\n    original_labels = unique_labels\n    label_map = {original_labels[0]: 0, original_labels[1]: 1}\n    reverse_label_map = {0: original_labels[0], 1: original_labels[1]}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Add intercept term\n    X_train = np.insert(X_train, 0, 1, axis=1)\n    X_test = np.insert(X_test, 0, 1, axis=1)\n\n    n_samples, n_features = X_train.shape\n    weights = np.zeros(n_features)\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle data for each epoch\n        permutation = np.random.permutation(n_samples)\n        X_train_shuffled = X_train[permutation]\n        y_train_shuffled = y_train_mapped[permutation]\n\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_train_shuffled[i : i + batch_size]\n            y_batch = y_train_shuffled[i : i + batch_size]\n\n            # Calculate predictions\n            z = X_batch @ weights\n            predictions = sigmoid(z)\n\n            # Calculate gradient\n            gradient = (X_batch.T @ (predictions - y_batch)) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Make predictions on the test set\n    test_z = X_test @ weights\n    test_probabilities = sigmoid(test_z)\n\n    # Apply decision threshold and map back to original labels\n    predictions = [reverse_label_map[1] if prob >= 0.5 else reverse_label_map[0] for prob in test_probabilities]\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage 1: Linearly separable data\n    X_train_1 = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0], [5.0, 1.0], [6.0, 2.0]]\n    y_train_1 = [0, 0, 0, 1, 1, 1]\n    X_test_1 = [[1.5, 2.5], [5.5, 1.5]]\n    predictions_1 = logistic_regression_train_predict(X_train_1, y_train_1, X_test_1)\n    print(f\"Example 1 Predictions: {predictions_1}\") # Expected: [0, 1] or similar depending on convergence\n\n    # Example Usage 2: Different labels\n    X_train_2 = [[-1.0, -1.0], [-2.0, -2.0], [-3.0, -3.0], [1.0, 1.0], [2.0, 2.0], [3.0, 3.0]]\n    y_train_2 = [-1, -1, -1, 1, 1, 1]\n    X_test_2 = [[-1.5, -1.5], [1.5, 1.5]]\n    predictions_2 = logistic_regression_train_predict(X_train_2, y_train_2, X_test_2)\n    print(f\"Example 2 Predictions: {predictions_2}\") # Expected: [-1, 1] or similar\n\n    # Example Usage 3: All training labels identical\n    X_train_3 = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\n    y_train_3 = [7, 7, 7]\n    X_test_3 = [[1.5, 2.5], [5.5, 1.5]]\n    predictions_3 = logistic_regression_train_predict(X_train_3, y_train_3, X_test_3)\n    print(f\"Example 3 Predictions: {predictions_3}\") # Expected: [7, 7]\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"\n    Implements the AdaBoost ensemble algorithm with decision stumps.\n\n    Args:\n        X_train: Training feature matrix.\n        y_train: Training label vector (0 or 1).\n        X_test: Test feature matrix.\n        n_estimators: Number of boosting rounds.\n\n    Returns:\n        A list of predicted class labels (0 or 1) for X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n\n    stumps = []\n    alphas = []\n\n    # Convert labels to {-1, 1} for AdaBoost calculations\n    y_train_transformed = np.where(y_train == 0, -1, 1)\n\n    for _ in range(n_estimators):\n        best_stump = None\n        min_weighted_error = float('inf')\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Predict using the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n\n                    # Calculate weighted error\n                    weighted_error = np.sum(weights * (predictions != y_train_transformed))\n\n                    # Check for best stump (with tie-breaking)\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n                    elif weighted_error == min_weighted_error:\n                        # Tie-breaking rules\n                        if feature_index < best_stump['feature_index']:\n                            best_stump = {\n                                'feature_index': feature_index,\n                                'threshold': threshold,\n                                'polarity': polarity\n                            }\n                        elif feature_index == best_stump['feature_index']:\n                            if threshold < best_stump['threshold']:\n                                best_stump = {\n                                    'feature_index': feature_index,\n                                    'threshold': threshold,\n                                    'polarity': polarity\n                                }\n                            elif threshold == best_stump['threshold']:\n                                if polarity == 1 and best_stump['polarity'] == -1:\n                                    best_stump = {\n                                        'feature_index': feature_index,\n                                        'threshold': threshold,\n                                        'polarity': polarity\n                                    }\n\n        if best_stump is None:\n            # No valid stump found (should not happen with diverse data)\n            break\n\n        # Early stopping if perfect stump is found\n        if min_weighted_error == 0:\n            stumps.append(best_stump)\n            alphas.append(float('inf'))  # Assign a large alpha for perfect stump\n            break\n\n        # Calculate alpha\n        epsilon = 1e-10  # Small value to prevent division by zero\n        alpha = 0.5 * np.log((1.0 - min_weighted_error) / (min_weighted_error + epsilon))\n\n        # Update weights\n        predictions = np.ones(n_samples)\n        if best_stump['polarity'] == 1:\n            predictions[X_train[:, best_stump['feature_index']] < best_stump['threshold']] = -1\n        else:\n            predictions[X_train[:, best_stump['feature_index']] >= best_stump['threshold']] = -1\n\n        weights *= np.exp(-alpha * y_train_transformed * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n    # Make predictions on the test set\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, stumps):\n        stump_predictions = np.ones(X_test.shape[0])\n        if stump['polarity'] == 1:\n            stump_predictions[X_test[:, stump['feature_index']] < stump['threshold']] = -1\n        else:\n            stump_predictions[X_test[:, stump['feature_index']] >= stump['threshold']] = -1\n        final_predictions += alpha * stump_predictions\n\n    # Convert aggregated votes back to {0, 1} labels\n    predicted_labels = np.where(final_predictions >= 0, 1, 0)\n\n    return predicted_labels.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\n    y_train = [0, 0, 0, 1, 1, 1]\n    X_test = [[1.5, 2.5], [5.5, 6.5], [3.5, 4.5]]\n\n    predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=5)\n    print(\"Predictions:\", predictions)\n\n    # Another example\n    X_train_2 = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    y_train_2 = [0, 1, 1, 0]\n    X_test_2 = [[0.5, 0.5], [0.5, 1.5]]\n\n    predictions_2 = adaboost_predict(X_train_2, y_train_2, X_test_2, n_estimators=3)\n    print(\"Predictions 2:\", predictions_2)\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5 # cognitive weight\n    c2 = 1.5 # social weight\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n\n    # Initialize personal bests\n    personal_best_positions = np.copy(positions)\n    personal_best_values = np.sum(personal_best_positions**2, axis=1)\n\n    # Initialize global best\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = np.copy(personal_best_positions[global_best_index])\n    global_best_value = personal_best_values[global_best_index]\n\n    # Optimization loop\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        r2 = rng.uniform(0, 1, size=(num_particles, n_dims))\n\n        cognitive_component = c1 * r1 * (personal_best_positions - positions)\n        social_component = c2 * r2 * (global_best_position - positions)\n\n        velocities = w * velocities + cognitive_component + social_component\n\n        # Update positions\n        positions = positions + velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n\n        # Evaluate objective function\n        current_values = np.sum(positions**2, axis=1)\n\n        # Update personal bests\n        improved_indices = current_values < personal_best_values\n        personal_best_positions[improved_indices] = positions[improved_indices]\n        personal_best_values[improved_indices] = current_values[improved_indices]\n\n        # Update global best\n        min_personal_best_index = np.argmin(personal_best_values)\n        if personal_best_values[min_personal_best_index] < global_best_value:\n            global_best_value = personal_best_values[min_personal_best_index]\n            global_best_position = np.copy(personal_best_positions[min_personal_best_index])\n\n    return round(global_best_value, 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    n_dims = 10\n    num_particles = 30\n    num_iterations = 100\n    seed = 42\n\n    best_value = particle_swarm_optimisation(n_dims, num_particles, num_iterations, seed)\n    print(f\"Best Sphere function value found: {best_value}\")\n\n    # Example with invalid input\n    best_value_invalid = particle_swarm_optimisation(0, 30, 100, 42)\n    print(f\"Best Sphere function value found (invalid input): {best_value_invalid}\")\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    n_train = X_train_np.shape[0]\n    k_actual = k if k > 0 and k <= n_train else n_train\n\n    predictions = []\n\n    for test_sample in X_test_np:\n        # Calculate Euclidean distances\n        distances = np.linalg.norm(X_train_np - test_sample, axis=1)\n\n        # Get indices of the k nearest neighbours\n        nearest_neighbor_indices = np.argsort(distances)[:k_actual]\n\n        # Get the target values of the k nearest neighbours\n        nearest_neighbor_targets = y_train_np[nearest_neighbor_indices]\n\n        if task == \"classification\":\n            # Count occurrences of each target\n            target_counts = Counter(nearest_neighbor_targets)\n\n            # Find the most frequent target(s)\n            max_count = 0\n            most_frequent_targets = []\n            for target, count in target_counts.items():\n                if count > max_count:\n                    max_count = count\n                    most_frequent_targets = [target]\n                elif count == max_count:\n                    most_frequent_targets.append(target)\n\n            # In case of a tie, return the smallest label\n            predicted_target = min(most_frequent_targets)\n            predictions.append(predicted_target)\n\n        elif task == \"regression\":\n            # Calculate the mean of the target values\n            predicted_value = np.mean(nearest_neighbor_targets)\n            predictions.append(round(predicted_value, 4))\n\n        else:\n            raise ValueError(\"Task must be 'classification' or 'regression'\")\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage: Classification\n    X_train_clf = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n    y_train_clf = ['A', 'A', 'B', 'B', 'A']\n    X_test_clf = [[2.5, 3.5], [4.5, 5.5], [1.5, 2.5]]\n\n    predictions_clf_k3 = knn_predict(X_train_clf, y_train_clf, X_test_clf, k=3, task=\"classification\")\n    print(f\"Classification predictions (k=3): {predictions_clf_k3}\") # Expected: ['A', 'B', 'A']\n\n    predictions_clf_k0 = knn_predict(X_train_clf, y_train_clf, X_test_clf, k=0, task=\"classification\")\n    print(f\"Classification predictions (k=0): {predictions_clf_k0}\") # Expected: ['A', 'B', 'A']\n\n    predictions_clf_k10 = knn_predict(X_train_clf, y_train_clf, X_test_clf, k=10, task=\"classification\")\n    print(f\"Classification predictions (k=10): {predictions_clf_k10}\") # Expected: ['A', 'A', 'A']\n\n    # Example Usage: Regression\n    X_train_reg = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n    y_train_reg = [10.1, 12.5, 15.3, 18.0, 20.2]\n    X_test_reg = [[2.5, 3.5], [4.5, 5.5], [1.5, 2.5]]\n\n    predictions_reg_k3 = knn_predict(X_train_reg, y_train_reg, X_test_reg, k=3, task=\"regression\")\n    print(f\"Regression predictions (k=3): {predictions_reg_k3}\") # Expected: [12.6333, 17.8333, 11.3]\n\n    predictions_reg_k0 = knn_predict(X_train_reg, y_train_reg, X_test_reg, k=0, task=\"regression\")\n    print(f\"Regression predictions (k=0): {predictions_reg_k0}\") # Expected: [15.22, 15.22, 15.22]\n\n    predictions_reg_k10 = knn_predict(X_train_reg, y_train_reg, X_test_reg, k=10, task=\"regression\")\n    print(f\"Regression predictions (k=10): {predictions_reg_k10}\") # Expected: [15.22, 15.22, 15.22]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class Node:\n        def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value  # Class label for leaf nodes\n\n    def gini_impurity(y):\n        if len(y) == 0:\n            return 0\n        class_counts = np.bincount(y)\n        probabilities = class_counts / len(y)\n        return 1.0 - np.sum(probabilities**2)\n\n    def find_best_split(X, y):\n        n_samples, n_features = X.shape\n        if n_samples <= 1:\n            return None, None, None\n\n        parent_gini = gini_impurity(y)\n        best_gini_gain = 0\n        best_feature_index = None\n        best_threshold = None\n\n        for feature_index in range(n_features):\n            unique_values = np.unique(X[:, feature_index])\n            if len(unique_values) <= 1:\n                continue\n\n            sorted_indices = np.argsort(X[:, feature_index])\n            sorted_X = X[sorted_indices]\n            sorted_y = y[sorted_indices]\n\n            for i in range(len(unique_values) - 1):\n                threshold = (unique_values[i] + unique_values[i+1]) / 2.0\n\n                left_indices = np.where(sorted_X[:, feature_index] <= threshold)[0]\n                right_indices = np.where(sorted_X[:, feature_index] > threshold)[0]\n\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n\n                y_left = sorted_y[left_indices]\n                y_right = sorted_y[right_indices]\n\n                gini_left = gini_impurity(y_left)\n                gini_right = gini_impurity(y_right)\n\n                weighted_gini = (len(y_left) / n_samples) * gini_left + (len(y_right) / n_samples) * gini_right\n                gini_gain = parent_gini - weighted_gini\n\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n\n        return best_feature_index, best_threshold, best_gini_gain\n\n    def build_tree(X, y, depth):\n        n_samples = len(y)\n        unique_labels = np.unique(y)\n\n        # Stopping criteria\n        if len(unique_labels) == 1:\n            return Node(value=unique_labels[0])\n        if max_depth is not None and depth >= max_depth:\n            return Node(value=np.argmax(np.bincount(y)))\n\n        feature_index, threshold, gini_gain = find_best_split(X, y)\n\n        # Stopping criteria: no gain or empty child\n        if gini_gain <= 0 or feature_index is None:\n            return Node(value=np.argmax(np.bincount(y)))\n\n        left_indices = np.where(X[:, feature_index] <= threshold)[0]\n        right_indices = np.where(X[:, feature_index] > threshold)[0]\n\n        if len(left_indices) == 0 or len(right_indices) == 0:\n             return Node(value=np.argmax(np.bincount(y)))\n\n        X_left, y_left = X[left_indices], y[left_indices]\n        X_right, y_right = X[right_indices], y[right_indices]\n\n        left_subtree = build_tree(X_left, y_left, depth + 1)\n        right_subtree = build_tree(X_right, y_right, depth + 1)\n\n        return Node(feature_index=feature_index, threshold=threshold, left=left_subtree, right=right_subtree)\n\n    def predict_single(node, x):\n        if node.value is not None:\n            return node.value\n        if x[node.feature_index] <= node.threshold:\n            return predict_single(node.left, x)\n        else:\n            return predict_single(node.right, x)\n\n    root = build_tree(X_train, y_train, depth=0)\n\n    predictions = []\n    for x in X_test:\n        predictions.append(predict_single(root, x))\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\n    y_train = np.array([0, 0, 0, 1, 1, 1])\n    X_test = np.array([[1.5, 2.5], [5.5, 6.5], [3.5, 4.5]])\n\n    predictions = decision_tree_predict(X_train, y_train, X_test)\n    print(\"Predictions (unlimited depth):\", predictions)\n\n    predictions_max_depth = decision_tree_predict(X_train, y_train, X_test, max_depth=1)\n    print(\"Predictions (max_depth=1):\", predictions_max_depth)\n\n    # Another example\n    X_train_2 = np.array([[1, 1], [1, 0], [0, 1], [0, 0]])\n    y_train_2 = np.array([1, 0, 0, 1])\n    X_test_2 = np.array([[1, 1], [0, 1]])\n\n    predictions_2 = decision_tree_predict(X_train_2, y_train_2, X_test_2)\n    print(\"Predictions (example 2):\", predictions_2)\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n    n_total = n_samples\n\n    def gini_impurity(labels):\n        if len(labels) == 0:\n            return 0.0\n        class_counts = np.bincount(labels)\n        probabilities = class_counts / len(labels)\n        return 1.0 - np.sum(probabilities**2)\n\n    gini_whole_dataset = gini_impurity(y)\n\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        for v in unique_values:\n            left_indices = np.where(X[:, j] <= v)[0]\n            right_indices = np.where(X[:, j] > v)[0]\n\n            n_left = len(left_indices)\n            n_right = len(right_indices)\n\n            if n_left == 0 or n_right == 0:\n                continue\n\n            gini_left = gini_impurity(y[left_indices])\n            gini_right = gini_impurity(y[right_indices])\n\n            gini_split = (n_left / n_total) * gini_left + (n_right / n_total) * gini_right\n\n            # Tie-breaking rules\n            if gini_split < best_gini - 1e-12:\n                best_gini = gini_split\n                best_feature_index = j\n                best_threshold_value = v\n            elif abs(gini_split - best_gini) < 1e-12:\n                if j < best_feature_index:\n                    best_gini = gini_split\n                    best_feature_index = j\n                    best_threshold_value = v\n                elif j == best_feature_index:\n                    if v < best_threshold_value:\n                        best_gini = gini_split\n                        best_feature_index = j\n                        best_threshold_value = v\n\n    if best_feature_index == -1:\n        return (-1, None, round(gini_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\nif __name__ == '__main__':\n    # Example Usage\n    X = [[1.0, 2.0], [2.0, 1.0], [3.0, 2.0], [4.0, 1.0], [5.0, 2.0]]\n    y = [0, 0, 1, 1, 1]\n    result = best_gini_split(X, y)\n    print(f\"Example 1: {result}\") # Expected output: (0, 2.0, 0.4)\n\n    X = [[1.0, 2.0], [1.0, 2.0], [1.0, 2.0]]\n    y = [0, 0, 0]\n    result = best_gini_split(X, y)\n    print(f\"Example 2: {result}\") # Expected output: (-1, None, 0.0)\n\n    X = [[1.0, 2.0], [1.0, 2.0], [1.0, 2.0]]\n    y = [0, 1, 0]\n    result = best_gini_split(X, y)\n    print(f\"Example 3: {result}\") # Expected output: (-1, None, 0.4444)\n\n    X = [[1.0, 2.0], [2.0, 1.0], [3.0, 2.0], [4.0, 1.0], [5.0, 2.0]]\n    y = [0, 1, 0, 1, 0]\n    result = best_gini_split(X, y)\n    print(f\"Example 4: {result}\") # Expected output: (0, 2.0, 0.48)\n\n    X = [[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0], [5.0, 5.0]]\n    y = [0, 0, 1, 1, 1]\n    result = best_gini_split(X, y)\n    print(f\"Example 5: {result}\") # Expected output: (0, 2.0, 0.4) or (1, 2.0, 0.4) - tie-breaking should pick feature 0\n\n    X = [[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0], [5.0, 5.0]]\n    y = [0, 1, 0, 1, 0]\n    result = best_gini_split(X, y)\n    print(f\"Example 6: {result}\") # Expected output: (0, 2.0, 0.48) or (1, 2.0, 0.48) - tie-breaking should pick feature 0\n\n    X = [[1.0, 2.0], [1.0, 3.0], [2.0, 2.0], [2.0, 3.0]]\n    y = [0, 0, 1, 1]\n    result = best_gini_split(X, y)\n    print(f\"Example 7: {result}\") # Expected output: (0, 1.0, 0.0)\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = ['euclidean', 'manhattan', 'chebyshev', 'cosine']\n\n    if name not in supported_metrics:\n        return lambda x, y: -1\n\n    def validate_vectors(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        try:\n            x_arr = np.asarray(x, dtype=float)\n            y_arr = np.asarray(y, dtype=float)\n        except ValueError:\n            return False\n\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return False\n        if len(x_arr) == 0 or len(y_arr) == 0:\n            return False\n        if len(x_arr) != len(y_arr):\n            return False\n\n        return x_arr, y_arr\n\n    def distance_func(x, y):\n        validated = validate_vectors(x, y)\n        if validated is False:\n            return -1\n\n        x_arr, y_arr = validated\n\n        if name == 'euclidean':\n            return round(np.sqrt(np.sum((x_arr - y_arr)**2)), 4)\n        elif name == 'manhattan':\n            return round(np.sum(np.abs(x_arr - y_arr)), 4)\n        elif name == 'chebyshev':\n            return round(np.max(np.abs(x_arr - y_arr)), 4)\n        elif name == 'cosine':\n            norm_x = np.linalg.norm(x_arr)\n            norm_y = np.linalg.norm(y_arr)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            dot_product = np.dot(x_arr, y_arr)\n            cosine_similarity = dot_product / (norm_x * norm_y)\n            return round(1 - cosine_similarity, 4)\n        else:\n            # This case should not be reached due to the initial check,\n            # but included for completeness.\n            return -1\n\n    return distance_func\n\nif __name__ == '__main__':\n    # Example Usage:\n    euclidean_metric = metric('euclidean')\n    print(f\"Euclidean distance: {euclidean_metric([1, 2, 3], [4, 5, 6])}\")\n    print(f\"Euclidean distance (NumPy): {euclidean_metric(np.array([1, 2, 3]), np.array([4, 5, 6]))}\")\n    print(f\"Euclidean distance (invalid type): {euclidean_metric([1, 2, 3], 'abc')}\")\n    print(f\"Euclidean distance (different length): {euclidean_metric([1, 2], [4, 5, 6])}\")\n    print(f\"Euclidean distance (empty): {euclidean_metric([], [])}\")\n    print(f\"Euclidean distance (non-numeric): {euclidean_metric([1, 'a'], [4, 5])}\")\n\n    manhattan_metric = metric('manhattan')\n    print(f\"\\nManhattan distance: {manhattan_metric([1, 2, 3], [4, 5, 6])}\")\n\n    chebyshev_metric = metric('chebyshev')\n    print(f\"\\nChebyshev distance: {chebyshev_metric([1, 2, 3], [4, 5, 6])}\")\n\n    cosine_metric = metric('cosine')\n    print(f\"\\nCosine distance: {cosine_metric([1, 2, 3], [4, 5, 6])}\")\n    print(f\"Cosine distance (zero norm): {cosine_metric([0, 0, 0], [4, 5, 6])}\")\n    print(f\"Cosine distance (zero norm): {cosine_metric([1, 2, 3], [0, 0, 0])}\")\n\n    unsupported_metric = metric('hamming')\n    print(f\"\\nUnsupported metric: {unsupported_metric([1, 2], [3, 4])}\")\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim: List[Union[int, float]] = []\n    action_ids: Union[List[Tuple[int, ...]], None] = None\n    action_dim: int = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        discrete_ranges = []\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n                discrete_ranges.append(range(space.n))\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True  # Ensure cont_action is True if any dimension is continuous\n            else:\n                raise ValueError(\"Unknown action space type in multi-dimensional space.\")\n\n        if not cont_action:\n            action_ids = list(product(*discrete_ranges))\n\n    else:\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            if not cont_action:\n                action_ids = [(i,) for i in range(env.action_space.n)]\n        elif hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n            cont_action = True # Ensure cont_action is True if the space is continuous\n        else:\n            raise ValueError(\"Unknown action space type in single-dimensional space.\")\n\n    if cont_action:\n        action_ids = None\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example Usage (with mock environment objects)\n\n# Mock Environment Classes\nclass MockDiscreteSpace:\n    def __init__(self, n):\n        self.n = n\n\nclass MockContinuousSpace:\n    def __init__(self, shape):\n        self.shape = shape\n\nclass MockEnv:\n    def __init__(self, action_space):\n        self.action_space = action_space\n\n# Single-dimensional discrete\nenv_sd_discrete = MockEnv(MockDiscreteSpace(5))\nn_actions_per_dim_sd_d, action_ids_sd_d, action_dim_sd_d = action_stats(env_sd_discrete, md_action=False, cont_action=False)\nprint(f\"Single-dimensional discrete:\")\nprint(f\"  n_actions_per_dim: {n_actions_per_dim_sd_d}\")\nprint(f\"  action_ids: {action_ids_sd_d}\")\nprint(f\"  action_dim: {action_dim_sd_d}\")\nprint(\"-\" * 20)\n\n# Single-dimensional continuous\nenv_sd_continuous = MockEnv(MockContinuousSpace((1,)))\nn_actions_per_dim_sd_c, action_ids_sd_c, action_dim_sd_c = action_stats(env_sd_continuous, md_action=False, cont_action=True)\nprint(f\"Single-dimensional continuous:\")\nprint(f\"  n_actions_per_dim: {n_actions_per_dim_sd_c}\")\nprint(f\"  action_ids: {action_ids_sd_c}\")\nprint(f\"  action_dim: {action_dim_sd_c}\")\nprint(\"-\" * 20)\n\n# Multi-dimensional discrete\nclass MockMultiDiscreteSpace:\n    def __init__(self, spaces):\n        self.spaces = spaces\n\nenv_md_discrete = MockEnv(MockMultiDiscreteSpace([MockDiscreteSpace(2), MockDiscreteSpace(3)]))\nn_actions_per_dim_md_d, action_ids_md_d, action_dim_md_d = action_stats(env_md_discrete, md_action=True, cont_action=False)\nprint(f\"Multi-dimensional discrete:\")\nprint(f\"  n_actions_per_dim: {n_actions_per_dim_md_d}\")\nprint(f\"  action_ids: {action_ids_md_d}\")\nprint(f\"  action_dim: {action_dim_md_d}\")\nprint(\"-\" * 20)\n\n# Multi-dimensional mixed (discrete and continuous)\nenv_md_mixed = MockEnv(MockMultiDiscreteSpace([MockDiscreteSpace(2), MockContinuousSpace((1,))]))\nn_actions_per_dim_md_m, action_ids_md_m, action_dim_md_m = action_stats(env_md_mixed, md_action=True, cont_action=True)\nprint(f\"Multi-dimensional mixed:\")\nprint(f\"  n_actions_per_dim: {n_actions_per_dim_md_m}\")\nprint(f\"  action_ids: {action_ids_md_m}\")\nprint(f\"  action_dim: {action_dim_md_m}\")\nprint(\"-\" * 20)\n\n# Multi-dimensional continuous\nenv_md_continuous = MockEnv(MockMultiDiscreteSpace([MockContinuousSpace((1,)), MockContinuousSpace((2,))]))\nn_actions_per_dim_md_c, action_ids_md_c, action_dim_md_c = action_stats(env_md_continuous, md_action=True, cont_action=True)\nprint(f\"Multi-dimensional continuous:\")\nprint(f\"  n_actions_per_dim: {n_actions_per_dim_md_c}\")\nprint(f\"  action_ids: {action_ids_md_c}\")\nprint(f\"  action_dim: {action_dim_md_c}\")\nprint(\"-\" * 20)\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # ===== write your code below =====\n    T = phi[0].shape[1] if phi else 0\n    beta_unnormalized = np.zeros((V, T))\n\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            if 0 <= word_index < V:\n                beta_unnormalized[word_index, :] += phi[d][n, :]\n\n    # Normalize columns\n    beta = np.zeros((V, T))\n    for t in range(T):\n        column_sum = np.sum(beta_unnormalized[:, t])\n        if column_sum > 0:\n            beta[:, t] = beta_unnormalized[:, t] / column_sum\n\n    # Round to 4 decimal places and convert to list of lists\n    beta_list = [[round(beta[v, t], 4) for t in range(T)] for v in range(V)]\n\n    return beta_list\n\nif __name__ == '__main__':\n    # Example Usage\n    # Document 0: [0, 1, 0] (words: 'apple', 'banana', 'apple')\n    # Document 1: [1, 2] (words: 'banana', 'cherry')\n    corpus = [[0, 1, 0], [1, 2]]\n    V = 3 # Vocabulary size: 'apple', 'banana', 'cherry'\n\n    # Example phi values (assuming 2 topics)\n    # phi for document 0 (shape (3, 2))\n    phi0 = np.array([[0.8, 0.2],\n                     [0.3, 0.7],\n                     [0.9, 0.1]])\n    # phi for document 1 (shape (2, 2))\n    phi1 = np.array([[0.6, 0.4],\n                     [0.1, 0.9]])\n    phi = [phi0, phi1]\n\n    beta = update_beta(phi, corpus, V)\n\n    print(\"Updated Beta Matrix:\")\n    for row in beta:\n        print(row)\n\n    # Verify column sums (should be close to 1)\n    beta_np = np.array(beta)\n    column_sums = np.sum(beta_np, axis=0)\n    print(\"\\nColumn Sums:\")\n    print(column_sums)\n\n    # Example with a word not in the corpus\n    corpus_sparse = [[0, 1], [1, 0]]\n    V_sparse = 4 # Vocabulary size: 'apple', 'banana', 'cherry', 'date'\n    phi_sparse = [np.array([[0.7, 0.3], [0.2, 0.8]]), np.array([[0.5, 0.5], [0.9, 0.1]])]\n\n    beta_sparse = update_beta(phi_sparse, corpus_sparse, V_sparse)\n    print(\"\\nUpdated Beta Matrix (sparse vocabulary):\")\n    for row in beta_sparse:\n        print(row)\n\n    beta_sparse_np = np.array(beta_sparse)\n    column_sums_sparse = np.sum(beta_sparse_np, axis=0)\n    print(\"\\nColumn Sums (sparse vocabulary):\")\n    print(column_sums_sparse)\n```"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples, _ = X.shape\n\n    # 1. Initialise the medoids as the first k samples of X\n    medoid_indices = list(range(k))\n\n    def calculate_cost(X, medoid_indices):\n        \"\"\"Calculates the total clustering cost.\"\"\"\n        total_cost = 0\n        for i in range(n_samples):\n            min_distance = float('inf')\n            for medoid_index in medoid_indices:\n                distance = np.linalg.norm(X[i] - X[medoid_index])\n                min_distance = min(min_distance, distance)\n            total_cost += min_distance\n        return total_cost\n\n    current_cost = calculate_cost(X, medoid_indices)\n\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n\n        # Find non-medoid indices\n        all_indices = set(range(n_samples))\n        medoid_set = set(medoid_indices)\n        non_medoid_indices = list(all_indices - medoid_set)\n\n        # 2. Repeatedly attempt to reduce the total clustering cost\n        for i in range(k):  # Iterate through current medoids\n            current_medoid_index = medoid_indices[i]\n            for non_medoid_index in non_medoid_indices:\n                # Try swapping current_medoid_index with non_medoid_index\n                new_medoid_indices = medoid_indices[:]\n                new_medoid_indices[i] = non_medoid_index\n                new_cost = calculate_cost(X, new_medoid_indices)\n                cost_reduction = current_cost - new_cost\n\n                # Accept the swap that gives the largest cost reduction\n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    best_swap = (i, non_medoid_index)\n\n        # Only accept the swap if the cost is strictly lower than before\n        if best_cost_reduction > 0:\n            medoid_index_to_swap, new_medoid_sample_index = best_swap\n            medoid_indices[medoid_index_to_swap] = new_medoid_sample_index\n            current_cost -= best_cost_reduction\n        else:\n            # When no swap can further decrease the cost, stop.\n            break\n\n    # 3. After convergence assign each sample the label of the closest medoid\n    labels = []\n    for i in range(n_samples):\n        min_distance = float('inf')\n        assigned_label = -1\n        for j in range(k):\n            medoid_index = medoid_indices[j]\n            distance = np.linalg.norm(X[i] - X[medoid_index])\n            if distance < min_distance:\n                min_distance = distance\n                assigned_label = j\n            elif distance == min_distance:\n                # Ties are broken by the medoid that appears first in the current medoid list\n                pass # The earlier medoid index is already assigned\n\n        labels.append(assigned_label)\n\n    # 4. Return the cluster labels as a Python list of integers starting at 0.\n    return labels\n\nif __name__ == '__main__':\n    # Example usage:\n    X = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\n    k = 2\n    labels = pam_clustering(X, k)\n    print(labels)\n\n    X_large = np.random.rand(100, 5)\n    k_large = 5\n    labels_large = pam_clustering(X_large, k_large)\n    print(labels_large)\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train).reshape(-1, 1)\n    x_test = np.array(x_test)\n\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def create_polynomial_features(x, degree):\n        if degree < 1:\n            return x\n        x_poly = x\n        for d in range(2, degree + 1):\n            x_poly = np.hstack((x_poly, x**d))\n        return x_poly\n\n    x_train_poly = create_polynomial_features(x_train, degree)\n    x_test_poly = create_polynomial_features(x_test, degree)\n\n    # Standardize features (excluding bias)\n    mean = np.mean(x_train_poly, axis=0)\n    std = np.std(x_train_poly, axis=0)\n    # Avoid division by zero for constant features\n    std[std == 0] = 1e-8\n\n    x_train_scaled = (x_train_poly - mean) / std\n    x_test_scaled = (x_test_poly - mean) / std\n\n    # Add bias term\n    x_train_scaled = np.hstack((np.ones((x_train_scaled.shape[0], 1)), x_train_scaled))\n    x_test_scaled = np.hstack((np.ones((x_test_scaled.shape[0], 1)), x_test_scaled))\n\n    n_samples, n_features = x_train_scaled.shape\n    weights = np.zeros((n_features, 1))\n\n    for _ in range(n_iterations):\n        predictions = x_train_scaled @ weights\n        errors = predictions - y_train\n        gradient = (2 / n_samples) * x_train_scaled.T @ errors\n\n        # Apply Elastic Net penalty (excluding bias)\n        l2_penalty_gradient = (2 * reg_factor * (1 - l1_ratio)) * weights[1:]\n        l1_penalty_gradient = (reg_factor * l1_ratio) * np.sign(weights[1:])\n\n        # Combine gradients\n        regularization_gradient = np.vstack((np.zeros((1, 1)), l2_penalty_gradient + l1_penalty_gradient))\n        gradient += regularization_gradient\n\n        weights -= learning_rate * gradient\n\n    predictions_test = x_test_scaled @ weights\n\n    return np.round(predictions_test.flatten(), 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    x_train = [[1], [2], [3], [4], [5]]\n    y_train = [2, 4, 5, 4, 5]\n    x_test = [[6], [7]]\n\n    # Linear Regression (degree=1, reg_factor=0)\n    predictions_linear = elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0)\n    print(f\"Linear Regression Predictions: {predictions_linear}\")\n\n    # Polynomial Regression (degree=2, reg_factor=0)\n    predictions_poly = elastic_net_regression(x_train, y_train, x_test, degree=2, reg_factor=0)\n    print(f\"Polynomial Regression Predictions: {predictions_poly}\")\n\n    # Elastic Net Regression (degree=1, reg_factor=0.05, l1_ratio=0.5)\n    predictions_elastic_net = elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5)\n    print(f\"Elastic Net Regression Predictions: {predictions_elastic_net}\")\n\n    # Elastic Net Regression (degree=2, reg_factor=0.1, l1_ratio=0.8)\n    predictions_elastic_net_poly = elastic_net_regression(x_train, y_train, x_test, degree=2, reg_factor=0.1, l1_ratio=0.8)\n    print(f\"Elastic Net Regression (Poly) Predictions: {predictions_elastic_net_poly}\")\n\n    # Incompatible shapes\n    x_test_invalid = [[6, 7]]\n    predictions_invalid_shape = elastic_net_regression(x_train, y_train, x_test_invalid)\n    print(f\"Invalid Shape Test: {predictions_invalid_shape}\")\n\n    # Invalid n_iterations\n    predictions_invalid_iter = elastic_net_regression(x_train, y_train, x_test, n_iterations=0)\n    print(f\"Invalid Iterations Test: {predictions_invalid_iter}\")\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.asarray(actual)\n    predicted_np = np.asarray(predicted)\n\n    # Compute sigmoid(z) = 1 / (1 + e^(-z))\n    # To avoid numerical instability for large positive z, we can use the identity\n    # sigmoid(z) = e^z / (1 + e^z)\n    # For large negative z, the original formula is fine.\n    # A numerically stable way is to use log-sum-exp trick or np.expit\n    prob_np = np.expit(predicted_np)\n\n    # Compute gradient: grad_i = actual_i * sigmoid( \u2212 actual_i * predicted_i )\n    # Note that sigmoid(-z) = 1 - sigmoid(z)\n    # So, sigmoid(-actual_i * predicted_i) can be computed efficiently.\n    # If actual_i is 1, sigmoid(-predicted_i) = 1 - sigmoid(predicted_i)\n    # If actual_i is -1, sigmoid(predicted_i)\n    # This can be written as:\n    # grad_i = actual_i * (1 - actual_i * sigmoid(predicted_i))\n    # This is incorrect based on the provided formula.\n    # Let's stick to the provided formula: grad_i = actual_i * sigmoid( \u2212 actual_i * predicted_i )\n    # We can compute sigmoid(-actual_i * predicted_i) directly.\n    grad_np = actual_np * np.expit(-actual_np * predicted_np)\n\n    # Compute Hessian: hess_i = sigmoid(predicted_i) * ( 1 \u2212 sigmoid(predicted_i) )\n    hess_np = prob_np * (1 - prob_np)\n\n    # Round to 6 decimal places\n    grad_rounded = np.round(grad_np, 6)\n    hess_rounded = np.round(hess_np, 6)\n    prob_rounded = np.round(prob_np, 6)\n\n    # Convert back to Python lists\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n\n    return gradient_list, hessian_list, probability_list\n\nif __name__ == '__main__':\n    # Example Usage\n    actual_labels = [1, -1, 1, -1, 1]\n    predicted_scores = [0.5, -1.2, 2.0, 0.1, -0.8]\n\n    gradient, hessian, probability = logistic_components(actual_labels, predicted_scores)\n\n    print(\"Actual Labels:\", actual_labels)\n    print(\"Predicted Scores:\", predicted_scores)\n    print(\"Gradient:\", gradient)\n    print(\"Hessian:\", hessian)\n    print(\"Probability:\", probability)\n\n    # Example with NumPy arrays\n    actual_labels_np = np.array([1, -1, 1, -1, 1])\n    predicted_scores_np = np.array([0.5, -1.2, 2.0, 0.1, -0.8])\n\n    gradient_np, hessian_np, probability_np = logistic_components(actual_labels_np, predicted_scores_np)\n\n    print(\"\\nActual Labels (NumPy):\", actual_labels_np)\n    print(\"Predicted Scores (NumPy):\", predicted_scores_np)\n    print(\"Gradient (NumPy):\", gradient_np)\n    print(\"Hessian (NumPy):\", hessian_np)\n    print(\"Probability (NumPy):\", probability_np)\n\n    # Example with different values\n    actual_labels_2 = [1, 1, -1, -1]\n    predicted_scores_2 = [10.0, -10.0, 5.0, -5.0]\n\n    gradient_2, hessian_2, probability_2 = logistic_components(actual_labels_2, predicted_scores_2)\n\n    print(\"\\nActual Labels 2:\", actual_labels_2)\n    print(\"Predicted Scores 2:\", predicted_scores_2)\n    print(\"Gradient 2:\", gradient_2)\n    print(\"Hessian 2:\", hessian_2)\n    print(\"Probability 2:\", probability_2)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand: list[int]) -> int:\n        \"\"\"Calculates the score of a hand, considering usable aces.\"\"\"\n        score = sum(hand)\n        num_aces = hand.count(1)\n\n        # Check for usable ace\n        if num_aces > 0 and score + 10 <= 21:\n            score += 10\n\n        return score if score <= 21 else float('inf')  # Use infinity to represent bust\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Checks if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and (\n            (1 in hand and 10 in hand) or (10 in hand and 1 in hand)\n        )\n\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    player_bust = player_score == float('inf')\n    dealer_bust = dealer_score == float('inf')\n\n    player_natural = is_natural_blackjack(player)\n\n    # Rule 1: Player busts\n    if player_bust:\n        return -1.0\n\n    # Rule 2: Dealer busts (and player did not)\n    if dealer_bust:\n        return 1.0\n\n    # Rule 3 & 4: Compare scores\n    if player_score > dealer_score:\n        # Rule 4: Player wins with natural blackjack\n        if player_natural:\n            return 1.5\n        else:\n            return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:  # Equal scores\n        return 0.0\n\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted))**2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n\n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n\n    # Calculate MSLE\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n\n    return round(float(msle), 4)\n\nif __name__ == '__main__':\n    # Example usage\n    actual1 = [1, 2, 3, 4, 5]\n    predicted1 = [1.1, 2.2, 3.3, 4.4, 5.5]\n    print(f\"MSLE for actual1 and predicted1: {mean_squared_log_error(actual1, predicted1)}\")\n\n    actual2 = np.array([10, 20, 30])\n    predicted2 = np.array([12, 18, 35])\n    print(f\"MSLE for actual2 and predicted2: {mean_squared_log_error(actual2, predicted2)}\")\n\n    # Example of invalid input (different shapes)\n    actual3 = [1, 2]\n    predicted3 = [1, 2, 3]\n    print(f\"MSLE for actual3 and predicted3 (different shapes): {mean_squared_log_error(actual3, predicted3)}\")\n\n    # Example of invalid input (negative values)\n    actual4 = [1, -2, 3]\n    predicted4 = [1, 2, 3]\n    print(f\"MSLE for actual4 and predicted4 (negative value): {mean_squared_log_error(actual4, predicted4)}\")\n\n    actual5 = [1, 2, 3]\n    predicted5 = [1, 2, -3]\n    print(f\"MSLE for actual5 and predicted5 (negative value): {mean_squared_log_error(actual5, predicted5)}\")\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to NumPy array for vectorized operations\n    is_scalar = not isinstance(z, (list, np.ndarray))\n    z_np = np.array(z, dtype=float)\n\n    # Numerically stable implementation\n    # For z >= 0, use 1 / (1 + exp(-z))\n    # For z < 0, use exp(z) / (1 + exp(z))\n    result = np.zeros_like(z_np)\n    positive_mask = z_np >= 0\n    negative_mask = ~positive_mask\n\n    result[positive_mask] = 1.0 / (1.0 + np.exp(-z_np[positive_mask]))\n    result[negative_mask] = np.exp(z_np[negative_mask]) / (1.0 + np.exp(z_np[negative_mask]))\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return type rules\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    print(f\"sigmoid(0): {sigmoid(0)}\")\n    print(f\"sigmoid(1): {sigmoid(1)}\")\n    print(f\"sigmoid(-1): {sigmoid(-1)}\")\n    print(f\"sigmoid(1000): {sigmoid(1000)}\")\n    print(f\"sigmoid(-1000): {sigmoid(-1000)}\")\n\n    list_input = [0, 1, -1, 1000, -1000]\n    print(f\"sigmoid({list_input}): {sigmoid(list_input)}\")\n\n    np_array_input = np.array([[0, 1], [-1, 1000], [-1000, 0.5]])\n    print(f\"sigmoid(\\n{np_array_input}\\n): \\n{sigmoid(np_array_input)}\")\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Write your code here\n    if isinstance(z, (int, float)):\n        return z if z >= 0 else a * z\n    elif isinstance(z, (list, np.ndarray)):\n        z_np = np.asarray(z)\n        activated_z = np.where(z_np >= 0, z_np, a * z_np)\n        return activated_z.tolist()\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\nif __name__ == '__main__':\n    # Example Usage\n    scalar_input = -5\n    list_input = [-2, 0, 3, -1.5]\n    nested_list_input = [[1, -2], [0, 4], [-3, -0.5]]\n    numpy_input = np.array([[1, -2], [0, 4], [-3, -0.5]])\n\n    print(f\"Scalar input: {scalar_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(scalar_input)}\")\n    print(\"-\" * 20)\n\n    print(f\"List input: {list_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(list_input)}\")\n    print(\"-\" * 20)\n\n    print(f\"Nested list input: {nested_list_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(nested_list_input)}\")\n    print(\"-\" * 20)\n\n    print(f\"Numpy array input: {numpy_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(numpy_input)}\")\n    print(\"-\" * 20)\n\n    # Example with different 'a'\n    print(f\"Scalar input with a=0.1: {scalar_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(scalar_input, a=0.1)}\")\n    print(\"-\" * 20)\n\n    print(f\"List input with a=0.5: {list_input}\")\n    print(f\"Leaky ReLU output: {leaky_relu(list_input, a=0.5)}\")\n    print(\"-\" * 20)\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, (1 / n_samples))\n    stumps = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_predictions = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] > threshold] = -1\n\n                    error = np.sum(weights[predictions != y_train])\n\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n                        best_predictions = predictions\n\n        # Compute learner weight (alpha)\n        alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n\n        # Update sample weights\n        misclassified = (best_predictions != y_train)\n        weights *= np.exp(alpha * misclassified)\n        weights /= np.sum(weights)  # Normalize weights\n\n        stumps.append((best_stump, alpha))\n\n    # Prediction\n    ensemble_predictions = np.zeros(X_test.shape[0])\n    for (feature_index, threshold, polarity), alpha in stumps:\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] > threshold] = -1\n        ensemble_predictions += alpha * predictions\n\n    final_predictions = np.sign(ensemble_predictions).astype(int)\n    return final_predictions.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([\n        [1, 2],\n        [2, 3],\n        [3, 4],\n        [4, 5],\n        [5, 6],\n        [6, 7]\n    ])\n    y_train = np.array([-1, -1, -1, 1, 1, 1])\n\n    X_test = np.array([\n        [1.5, 2.5],\n        [5.5, 6.5],\n        [3.5, 4.5]\n    ])\n\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(f\"Predictions: {predictions}\")\n\n    # Another example\n    X_train_2 = np.array([\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1]\n    ])\n    y_train_2 = np.array([-1, 1, 1, -1])\n\n    X_test_2 = np.array([\n        [0.1, 0.1],\n        [0.9, 0.9],\n        [0.1, 0.9]\n    ])\n\n    predictions_2 = adaboost_predict(X_train_2, y_train_2, X_test_2, n_clf=5)\n    print(f\"Predictions 2: {predictions_2}\")\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # 1. Let the requested tensor shape be (d0, d1, \u2026, dn) with len(shape) \u2265 2.\n    d0 = shape[0]\n    other_dims_product = np.prod(shape[1:])\n\n    # 2. Create a 2-D matrix A \u2208 \u211d^{d0\u00d7(d1\u22efdn)} filled with i.i.d. samples from the standard normal distribution.\n    A = np.random.standard_normal(size=(d0, other_dims_product))\n\n    # 3. Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # 4. Choose the SVD factor that has the same size as A:\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # 5. Reshape Q back to the requested tensor shape and multiply it by scale.\n    result = Q.reshape(shape) * scale\n\n    return result.tolist()\n\nif __name__ == '__main__':\n    # Example usage with fixed random seed\n    np.random.seed(0)\n    shape = (2, 2)\n    scale = 0.5\n    result = orthogonal(shape, scale)\n    print(result)\n\n    # Verify orthogonality condition\n    result_np = np.array(result)\n    flat = result_np.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        ortho_check = flat @ flat.T\n        identity = np.eye(shape[0]) * scale**2\n        print(\"Orthogonality check (flat @ flat.T):\")\n        print(np.allclose(ortho_check, identity, atol=1e-6))\n    else:\n        ortho_check = flat.T @ flat\n        identity = np.eye(flat.shape[1]) * scale**2\n        print(\"Orthogonality check (flat.T @ flat):\")\n        print(np.allclose(ortho_check, identity, atol=1e-6))\n\n    # Example with different shape\n    np.random.seed(42)\n    shape_large = (3, 4, 2)\n    scale_large = 1.0\n    result_large = orthogonal(shape_large, scale_large)\n    print(\"\\nResult for shape (3, 4, 2):\")\n    # print(result_large) # Uncomment to see the full large result\n\n    # Verify orthogonality condition for large shape\n    result_large_np = np.array(result_large)\n    flat_large = result_large_np.reshape(shape_large[0], -1)\n    if shape_large[0] <= flat_large.shape[1]:\n        ortho_check_large = flat_large @ flat_large.T\n        identity_large = np.eye(shape_large[0]) * scale_large**2\n        print(\"Orthogonality check (flat @ flat.T):\")\n        print(np.allclose(ortho_check_large, identity_large, atol=1e-6))\n    else:\n        ortho_check_large = flat_large.T @ flat_large\n        identity_large = np.eye(flat_large.shape[1]) * scale_large**2\n        print(\"Orthogonality check (flat.T @ flat):\")\n        print(np.allclose(ortho_check_large, identity_large, atol=1e-6))\n\n    # Example with shape < 2\n    shape_invalid = (5,)\n    result_invalid = orthogonal(shape_invalid)\n    print(f\"\\nResult for shape {shape_invalid}: {result_invalid}\")\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state_np = np.array(state)\n\n    # Weights and biases are all 1.0 and 0.0 respectively\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n\n    # Dense-1\n    z1_pre_activation = np.dot(state_np, W1) + b1\n    z1 = np.maximum(0, z1_pre_activation)\n\n    # Dense-2\n    z2_pre_activation = np.dot(z1, W2) + b2\n    z2 = np.maximum(0, z2_pre_activation)\n\n    # Dense-3\n    z3_pre_activation = np.dot(z2, W3) + b3\n    z3 = np.maximum(0, z3_pre_activation)\n\n    # Actor head\n    logits = np.dot(z3, Wa) + ba\n    # Softmax activation\n    exp_logits = np.exp(logits - np.max(logits)) # Subtract max for numerical stability\n    action_probs = exp_logits / np.sum(exp_logits)\n\n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    state_value = state_value[0] # Extract the scalar value\n\n    # Round outputs\n    action_probs_rounded = [round(p, 4) for p in action_probs.tolist()]\n    state_value_rounded = round(state_value, 4)\n\n    return action_probs_rounded, state_value_rounded\n\nif __name__ == '__main__':\n    # Example usage:\n    state1 = [1.0, 2.0, 3.0]\n    action_probs1, state_value1 = actor_critic_forward(state1)\n    print(f\"State: {state1}\")\n    print(f\"Action Probabilities: {action_probs1}\")\n    print(f\"State Value: {state_value1}\")\n    # Expected: Action Probabilities: [0.3333, 0.3333, 0.3333], State Value: 384.0\n\n    state2 = [-1.0, -2.0, -3.0]\n    action_probs2, state_value2 = actor_critic_forward(state2)\n    print(f\"\\nState: {state2}\")\n    print(f\"Action Probabilities: {action_probs2}\")\n    print(f\"State Value: {state_value2}\")\n    # Expected: Action Probabilities: [0.3333, 0.3333, 0.3333], State Value: 0.0\n\n    state3 = [0.5, -0.5, 1.0]\n    action_probs3, state_value3 = actor_critic_forward(state3)\n    print(f\"\\nState: {state3}\")\n    print(f\"Action Probabilities: {action_probs3}\")\n    print(f\"State Value: {state_value3}\")\n    # Expected: Action Probabilities: [0.3333, 0.3333, 0.3333], State Value: 64.0\n```"}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to NumPy arrays\n    state_np = np.array(state)\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n\n    # Shared layers\n    hidden1 = np.maximum(0, np.dot(state_np, W1) + b1)\n    hidden2 = np.maximum(0, np.dot(hidden1, W2) + b2)\n    hidden3 = np.maximum(0, np.dot(hidden2, W3) + b3)\n\n    # Actor head\n    actor_scores = np.dot(hidden3, Wa) + ba\n    # Soft-max\n    exp_scores = np.exp(actor_scores - np.max(actor_scores))  # Subtract max for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = np.dot(hidden3, Wc) + bc\n\n    # Round probabilities and value to 4 decimal places\n    rounded_probabilities = [round(p, 4) for p in probabilities]\n    rounded_value = round(value.item(), 4)\n\n    # Handle exact 0 or 1 for probabilities and value\n    final_probabilities = []\n    for p in rounded_probabilities:\n        if p == 0.0 or p == 1.0:\n            final_probabilities.append(float(f\"{p:.1f}\"))\n        else:\n            final_probabilities.append(p)\n\n    if rounded_value == 0.0 or rounded_value == 1.0:\n        final_value = float(f\"{rounded_value:.1f}\")\n    else:\n        final_value = rounded_value\n\n    return final_probabilities, final_value\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Define some dummy parameters\n    params = {\n        'W1': [[0.1, 0.2], [0.3, 0.4]],\n        'b1': [0.1, 0.2],\n        'W2': [[0.5, 0.6], [0.7, 0.8]],\n        'b2': [0.3, 0.4],\n        'W3': [[0.9, 1.0], [1.1, 1.2]],\n        'b3': [0.5, 0.6],\n        'Wa': [[1.3, 1.4], [1.5, 1.6]],\n        'ba': [0.7, 0.8],\n        'Wc': [[1.7], [1.8]],\n        'bc': [0.9]\n    }\n\n    # Define a dummy state\n    state = [0.5, -0.2]\n\n    # Perform the forward pass\n    probs, val = actor_critic_forward(state, params)\n\n    print(\"Action Probabilities:\", probs)\n    print(\"State Value:\", val)\n\n    # Example with values that might round to 0 or 1\n    params_zero_one = {\n        'W1': [[100, 100], [100, 100]],\n        'b1': [-50, -50],\n        'W2': [[100, 100], [100, 100]],\n        'b2': [-50, -50],\n        'W3': [[100, 100], [100, 100]],\n        'b3': [-50, -50],\n        'Wa': [[100, -100], [-100, 100]],\n        'ba': [0, 0],\n        'Wc': [[100], [100]],\n        'bc': [-100]\n    }\n    state_zero_one = [0.5, 0.5]\n    probs_zo, val_zo = actor_critic_forward(state_zero_one, params_zero_one)\n    print(\"\\nAction Probabilities (Zero/One):\", probs_zo)\n    print(\"State Value (Zero/One):\", val_zo)\n```"}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n\n    if gradient:\n        # Compute gradient\n        l1_gradient = np.sign(w)\n        l2_gradient = w\n        gradient_value = alpha * (l1_ratio * l1_gradient + (1 - l1_ratio) * l2_gradient)\n        return [round(float(g), 4) for g in gradient_value]\n    else:\n        # Compute penalty\n        l1_penalty = np.sum(np.abs(w))\n        l2_penalty = 0.5 * np.sum(w**2)\n        penalty_value = alpha * (l1_ratio * l1_penalty + (1 - l1_ratio) * l2_penalty)\n        return round(float(penalty_value), 4)\n\nif __name__ == '__main__':\n    # Example Usage\n    w = [1.0, -2.0, 3.0]\n    alpha = 0.1\n    l1_ratio = 0.5\n\n    # Compute penalty\n    penalty = elastic_net_regularization(w, alpha, l1_ratio)\n    print(f\"Penalty: {penalty}\")\n\n    # Compute gradient\n    gradient = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\n    print(f\"Gradient: {gradient}\")\n\n    # Example with different alpha and l1_ratio\n    w2 = np.array([-0.5, 1.5])\n    alpha2 = 0.5\n    l1_ratio2 = 0.8\n\n    penalty2 = elastic_net_regularization(w2, alpha2, l1_ratio2)\n    print(f\"Penalty 2: {penalty2}\")\n\n    gradient2 = elastic_net_regularization(w2, alpha2, l1_ratio2, gradient=True)\n    print(f\"Gradient 2: {gradient2}\")\n\n    # Example with l1_ratio = 0 (L2 regularization)\n    w3 = [2.0, -1.0]\n    alpha3 = 0.2\n    l1_ratio3 = 0.0\n\n    penalty3 = elastic_net_regularization(w3, alpha3, l1_ratio3)\n    print(f\"Penalty 3 (L2): {penalty3}\")\n\n    gradient3 = elastic_net_regularization(w3, alpha3, l1_ratio3, gradient=True)\n    print(f\"Gradient 3 (L2): {gradient3}\")\n\n    # Example with l1_ratio = 1 (L1 regularization)\n    w4 = [0.5, -0.5]\n    alpha4 = 0.3\n    l1_ratio4 = 1.0\n\n    penalty4 = elastic_net_regularization(w4, alpha4, l1_ratio4)\n    print(f\"Penalty 4 (L1): {penalty4}\")\n\n    gradient4 = elastic_net_regularization(w4, alpha4, l1_ratio4, gradient=True)\n    print(f\"Gradient 4 (L1): {gradient4}\")\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    # Handle special cases for parameter names\n    if param_name == \"Ba\":\n        param_key = \"ba\"\n    elif param_name == \"Bx\":\n        param_key = \"bx\"\n    else:\n        param_key = param_name\n\n    if param_key not in model.parameters:\n        raise ValueError(f\"Parameter '{param_name}' not found in model parameters.\")\n\n    param = model.parameters[param_key].astype(np.float64)\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n\n        # Perturb by +epsilon\n        param_plus_epsilon = deepcopy(param)\n        param_plus_epsilon[idx] += epsilon\n        model.parameters[param_key] = param_plus_epsilon\n\n        predictions_plus = []\n        model.flush_gradients()\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n\n        # Perturb by -epsilon\n        param_minus_epsilon = deepcopy(param)\n        param_minus_epsilon[idx] -= epsilon\n        model.parameters[param_key] = param_minus_epsilon\n\n        predictions_minus = []\n        model.flush_gradients()\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n\n        # Approximate the partial derivative\n        numerical_gradient = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[idx] = numerical_gradient\n\n        # Restore the original parameter value\n        model.parameters[param_key] = param\n\n        it.iternext()\n\n    return grads.T\n\nif __name__ == '__main__':\n    # Example Usage (requires a dummy RNN model and loss function)\n\n    class DummyRNN:\n        def __init__(self, input_dim, hidden_dim, output_dim):\n            self.input_dim = input_dim\n            self.hidden_dim = hidden_dim\n            self.output_dim = output_dim\n\n            self.parameters = {\n                \"wx\": np.random.randn(hidden_dim, input_dim) * 0.01,\n                \"wh\": np.random.randn(hidden_dim, hidden_dim) * 0.01,\n                \"ba\": np.random.randn(hidden_dim, 1) * 0.01,\n                \"wy\": np.random.randn(output_dim, hidden_dim) * 0.01,\n                \"bx\": np.random.randn(output_dim, 1) * 0.01,\n            }\n            self.h = np.zeros((hidden_dim, 1))\n\n        def forward(self, X_t):\n            # X_t shape: (batch, input_dim)\n            # For simplicity, let's assume batch size is 1 for this example\n            X_t = X_t.reshape(-1, 1) # Reshape to (input_dim, 1)\n\n            self.h = np.tanh(np.dot(self.parameters[\"wx\"], X_t) + np.dot(self.parameters[\"wh\"], self.h) + self.parameters[\"ba\"])\n            y_hat = np.dot(self.parameters[\"wy\"], self.h) + self.parameters[\"bx\"]\n            return y_hat\n\n        def flush_gradients(self):\n            # In a real RNN, this would reset stored gradients\n            pass\n\n    def dummy_loss(predictions):\n        # Simple sum of squared predictions as a dummy loss\n        loss = 0\n        for pred in predictions:\n            loss += np.sum(pred**2)\n        return loss\n\n    # Model parameters\n    input_dim = 5\n    hidden_dim = 10\n    output_dim = 3\n    n_t = 4\n    batch_size = 1 # For this simple example\n\n    # Create dummy data\n    X = np.random.randn(batch_size, input_dim, n_t) * 0.1\n\n    # Create model\n    model = DummyRNN(input_dim, hidden_dim, output_dim)\n\n    # Check gradients for different parameters\n    param_names_to_check = [\"wx\", \"wh\", \"Ba\", \"wy\", \"Bx\"]\n\n    for param_name in param_names_to_check:\n        print(f\"Checking gradient for parameter: {param_name}\")\n        numerical_grad = grad_check_RNN(model, dummy_loss, param_name, n_t, X)\n\n        if numerical_grad is not None:\n            print(f\"Numerical gradient shape: {numerical_grad.shape}\")\n            # In a real scenario, you would compare this to the analytical gradient\n            # print(\"Numerical Gradient:\\n\", numerical_grad)\n        else:\n            print(f\"Parameter '{param_name}' is not trainable.\")\n        print(\"-\" * 20)\n\n    # Example of checking a non-trainable parameter\n    print(\"Checking gradient for parameter: X\")\n    numerical_grad_X = grad_check_RNN(model, dummy_loss, \"X\", n_t, X)\n    print(f\"Numerical gradient for X: {numerical_grad_X}\")\n    print(\"-\" * 20)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    k, _ = X_test.shape\n    n_clf = max(1, n_clf)  # Ensure n_clf is at least 1\n\n    # Initialize weights\n    weights = np.full(m, 1 / m)\n\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        min_weighted_error = float('inf')\n\n        # Iterate over all features and all possible thresholds\n        for feature_index in range(n):\n            feature_values = np.unique(X_train[:, feature_index])\n            # Consider thresholds between consecutive unique values and the min/max values\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2 if len(feature_values) > 1 else feature_values\n            if len(feature_values) > 0:\n                thresholds = np.insert(thresholds, 0, feature_values[0] - 1)\n                thresholds = np.append(thresholds, feature_values[-1] + 1)\n\n            for threshold in thresholds:\n                # Try both polarities (predict 1 if feature > threshold, and predict 1 if feature <= threshold)\n                for polarity in [-1, 1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] > threshold] = -1\n\n                    # Calculate weighted error\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error < min_weighted_error:\n                        min_weighted_error = weighted_error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n\n        # Calculate alpha\n        epsilon = min_weighted_error\n        # Handle the case where epsilon is 0 or 1 to avoid division by zero or log(0)\n        epsilon = max(1e-10, min(1 - 1e-10, epsilon))\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n\n        # Update weights\n        predictions = np.ones(m)\n        if best_stump['polarity'] == 1:\n            predictions[X_train[:, best_stump['feature_index']] <= best_stump['threshold']] = -1\n        else:\n            predictions[X_train[:, best_stump['feature_index']] > best_stump['threshold']] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n    # Make predictions on X_test\n    predictions = np.zeros(k)\n    for i in range(n_clf):\n        stump = stumps[i]\n        alpha = alphas[i]\n\n        stump_predictions = np.ones(k)\n        if stump['polarity'] == 1:\n            stump_predictions[X_test[:, stump['feature_index']] <= stump['threshold']] = -1\n        else:\n            stump_predictions[X_test[:, stump['feature_index']] > stump['threshold']] = -1\n\n        predictions += alpha * stump_predictions\n\n    # Return the sign of the weighted sum\n    return np.sign(predictions).astype(int).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([\n        [1, 2],\n        [2, 3],\n        [3, 4],\n        [4, 5],\n        [5, 6],\n        [6, 7],\n        [7, 8],\n        [8, 9]\n    ])\n    y_train = np.array([-1, -1, -1, -1, 1, 1, 1, 1])\n\n    X_test = np.array([\n        [1.5, 2.5],\n        [5.5, 6.5],\n        [0.5, 1.5],\n        [9.5, 10.5]\n    ])\n\n    predicted_labels = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(\"Predicted labels:\", predicted_labels)\n\n    # Another example\n    X_train_2 = np.array([\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1]\n    ])\n    y_train_2 = np.array([-1, 1, 1, -1])\n\n    X_test_2 = np.array([\n        [0.1, 0.1],\n        [0.9, 0.9],\n        [0.1, 0.9],\n        [0.9, 0.1]\n    ])\n\n    predicted_labels_2 = adaboost_predict(X_train_2, y_train_2, X_test_2, n_clf=5)\n    print(\"Predicted labels 2:\", predicted_labels_2)\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_out, fan_in = shape[:2]\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Use a temporary random state to avoid modifying the global state\n    rng = np.random.RandomState()\n    return rng.normal(loc=0.0, scale=std_dev, size=shape).astype(np.float32)\n\nif __name__ == '__main__':\n    # Example usage and verification\n\n    # 2D shape (fully connected layer)\n    shape_2d = (100, 50)\n    weights_2d = glorot_normal(shape_2d)\n    print(f\"Shape 2D: {shape_2d}\")\n    print(f\"Weights 2D shape: {weights_2d.shape}\")\n    print(f\"Weights 2D dtype: {weights_2d.dtype}\")\n\n    fan_in_2d, fan_out_2d = shape_2d\n    theoretical_std_dev_2d = np.sqrt(2.0 / (fan_in_2d + fan_out_2d))\n    print(f\"Theoretical std dev 2D: {theoretical_std_dev_2d:.6f}\")\n    print(f\"Sample mean 2D: {np.mean(weights_2d):.6f}\")\n    print(f\"Sample std dev 2D: {np.std(weights_2d):.6f}\")\n    print(\"-\" * 20)\n\n    # 4D shape (convolutional kernel)\n    shape_4d = (64, 3, 3, 3) # out_channels, in_channels, kH, kW\n    weights_4d = glorot_normal(shape_4d)\n    print(f\"Shape 4D: {shape_4d}\")\n    print(f\"Weights 4D shape: {weights_4d.shape}\")\n    print(f\"Weights 4D dtype: {weights_4d.dtype}\")\n\n    out_channels_4d, in_channels_4d = shape_4d[:2]\n    receptive_field_size_4d = np.prod(shape_4d[2:])\n    fan_in_4d = in_channels_4d * receptive_field_size_4d\n    fan_out_4d = out_channels_4d * receptive_field_size_4d\n    theoretical_std_dev_4d = np.sqrt(2.0 / (fan_in_4d + fan_out_4d))\n    print(f\"Theoretical std dev 4D: {theoretical_std_dev_4d:.6f}\")\n    print(f\"Sample mean 4D: {np.mean(weights_4d):.6f}\")\n    print(f\"Sample std dev 4D: {np.std(weights_4d):.6f}\")\n    print(\"-\" * 20)\n\n    # 5D shape (3D convolutional kernel)\n    shape_5d = (32, 16, 3, 3, 3) # out_channels, in_channels, kD, kH, kW\n    weights_5d = glorot_normal(shape_5d)\n    print(f\"Shape 5D: {shape_5d}\")\n    print(f\"Weights 5D shape: {weights_5d.shape}\")\n    print(f\"Weights 5D dtype: {weights_5d.dtype}\")\n\n    out_channels_5d, in_channels_5d = shape_5d[:2]\n    receptive_field_size_5d = np.prod(shape_5d[2:])\n    fan_in_5d = in_channels_5d * receptive_field_size_5d\n    fan_out_5d = out_channels_5d * receptive_field_size_5d\n    theoretical_std_dev_5d = np.sqrt(2.0 / (fan_in_5d + fan_out_5d))\n    print(f\"Theoretical std dev 5D: {theoretical_std_dev_5d:.6f}\")\n    print(f\"Sample mean 5D: {np.mean(weights_5d):.6f}\")\n    print(f\"Sample std dev 5D: {np.std(weights_5d):.6f}\")\n    print(\"-\" * 20)\n\n    # Test with invalid shape\n    try:\n        glorot_normal((10,))\n    except ValueError as e:\n        print(f\"Caught expected error: {e}\")\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a mapping from vertex identifier to its index in V\n    vertex_to_index = {vertex: i for i, vertex in enumerate(V)}\n\n    # Initialize the adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in range(len(V))]\n\n    # Populate the adjacency list\n    for u, v in E:\n        # Ensure both u and v are in V\n        if u in vertex_to_index and v in vertex_to_index:\n            u_index = vertex_to_index[u]\n            v_index = vertex_to_index[v]\n\n            # Add v to u's adjacency list and u to v's adjacency list\n            # We'll handle duplicates and sorting later\n            adj_list[u_index].append(v)\n            adj_list[v_index].append(u)\n\n    # Process each adjacency list to remove duplicates and sort\n    for i in range(len(adj_list)):\n        # Use a set to remove duplicates while preserving order of first appearance\n        # Then convert back to a list\n        seen = set()\n        unique_neighbors = []\n        for neighbor in adj_list[i]:\n            if neighbor not in seen:\n                unique_neighbors.append(neighbor)\n                seen.add(neighbor)\n\n        # Sort the unique neighbors based on their index in V\n        adj_list[i] = sorted(unique_neighbors, key=lambda neighbor: vertex_to_index[neighbor])\n\n    return adj_list\n\nif __name__ == '__main__':\n    # Example 1\n    V1 = [0, 1, 2, 3]\n    E1 = [(0, 1), (0, 2), (1, 2), (2, 3)]\n    G1 = build_adj_list(V1, E1)\n    print(f\"V1: {V1}\")\n    print(f\"E1: {E1}\")\n    print(f\"G1: {G1}\")\n    # Expected output: [[1, 2], [0, 2], [0, 1, 3], [2]]\n\n    # Example 2: Graph with isolated vertex\n    V2 = ['A', 'B', 'C', 'D']\n    E2 = [('A', 'B'), ('B', 'C')]\n    G2 = build_adj_list(V2, E2)\n    print(f\"\\nV2: {V2}\")\n    print(f\"E2: {E2}\")\n    print(f\"G2: {G2}\")\n    # Expected output: [['B'], ['A', 'C'], ['B'], []]\n\n    # Example 3: Graph with parallel edges and self-loops (should be ignored)\n    V3 = [10, 20, 30]\n    E3 = [(10, 20), (10, 20), (20, 30), (30, 30)]\n    G3 = build_adj_list(V3, E3)\n    print(f\"\\nV3: {V3}\")\n    print(f\"E3: {E3}\")\n    print(f\"G3: {G3}\")\n    # Expected output: [[20], [10, 30], [20]]\n\n    # Example 4: Empty graph\n    V4 = []\n    E4 = []\n    G4 = build_adj_list(V4, E4)\n    print(f\"\\nV4: {V4}\")\n    print(f\"E4: {E4}\")\n    print(f\"G4: {G4}\")\n    # Expected output: []\n\n    # Example 5: Graph with no edges\n    V5 = ['X', 'Y', 'Z']\n    E5 = []\n    G5 = build_adj_list(V5, E5)\n    print(f\"\\nV5: {V5}\")\n    print(f\"E5: {E5}\")\n    print(f\"G5: {G5}\")\n    # Expected output: [[], [], []]\n```"}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\n        \"feature_index\": -1,\n        \"threshold\": float('inf'),\n        \"polarity\": 0,\n        \"weighted_error\": float('inf')\n    }\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n\n        # Consider thresholds between unique values\n        candidate_thresholds = []\n        if len(unique_values) > 1:\n            candidate_thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        # Also consider thresholds at the min and max values to handle edge cases\n        if len(unique_values) > 0:\n             candidate_thresholds = np.concatenate(([unique_values[0] - 1e-6], candidate_thresholds, [unique_values[-1] + 1e-6]))\n\n\n        for threshold in candidate_thresholds:\n            for polarity in [1, -1]:\n                # Calculate predictions\n                if polarity == 1:\n                    predictions = np.where(feature_values < threshold, 1, -1)\n                else:  # polarity == -1\n                    predictions = np.where(feature_values < threshold, -1, 1)\n\n                # Calculate weighted error\n                misclassified = (predictions != y)\n                weighted_error = np.sum(sample_weights[misclassified])\n\n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump[\"weighted_error\"] = weighted_error\n                    best_stump[\"feature_index\"] = feature_index\n                    best_stump[\"threshold\"] = threshold\n                    best_stump[\"polarity\"] = polarity\n\n    # Round the results\n    best_stump[\"threshold\"] = round(best_stump[\"threshold\"], 4)\n    best_stump[\"weighted_error\"] = round(best_stump[\"weighted_error\"], 4)\n\n    return best_stump\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([\n        [1.0, 2.0],\n        [2.0, 1.0],\n        [3.0, 3.0],\n        [4.0, 2.0],\n        [5.0, 1.0]\n    ])\n    y = np.array([1, 1, -1, -1, -1])\n    sample_weights = np.array([0.1, 0.1, 0.2, 0.3, 0.3])\n\n    best_stump = train_decision_stump(X, y, sample_weights)\n    print(\"Best Decision Stump:\")\n    print(best_stump)\n\n    # Another example\n    X_2 = np.array([\n        [1, 5],\n        [2, 4],\n        [3, 3],\n        [4, 2],\n        [5, 1]\n    ])\n    y_2 = np.array([1, 1, -1, -1, -1])\n    sample_weights_2 = np.array([0.2, 0.2, 0.2, 0.2, 0.2])\n\n    best_stump_2 = train_decision_stump(X_2, y_2, sample_weights_2)\n    print(\"\\nBest Decision Stump (Example 2):\")\n    print(best_stump_2)\n\n    # Example with all same feature values\n    X_3 = np.array([\n        [1.0, 2.0],\n        [1.0, 1.0],\n        [1.0, 3.0],\n        [1.0, 2.0],\n        [1.0, 1.0]\n    ])\n    y_3 = np.array([1, 1, -1, -1, -1])\n    sample_weights_3 = np.array([0.1, 0.1, 0.2, 0.3, 0.3])\n\n    best_stump_3 = train_decision_stump(X_3, y_3, sample_weights_3)\n    print(\"\\nBest Decision Stump (Example 3 - same feature values):\")\n    print(best_stump_3)\n```"}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Write your code here\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n\n    # Convert to numpy arrays for easier indexing and sorting\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # Sort the data based on the feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n\n    # Calculate the entropy of the parent node\n    parent_entropy = calculate_entropy(sorted_target)\n\n    best_gain = 0.0\n    best_threshold = None\n\n    # Iterate through potential split points\n    for i in range(n - 1):\n        # A split point is between two consecutive distinct values\n        if sorted_feature[i] != sorted_feature[i+1]:\n            threshold = (sorted_feature[i] + sorted_feature[i+1]) / 2.0\n\n            # Split the data\n            left_indices = sorted_feature < threshold\n            right_indices = sorted_feature >= threshold\n\n            left_target = sorted_target[left_indices]\n            right_target = sorted_target[right_indices]\n\n            n_left = len(left_target)\n            n_right = len(right_target)\n\n            # Calculate the entropy of the left and right children\n            entropy_left = calculate_entropy(left_target)\n            entropy_right = calculate_entropy(right_target)\n\n            # Calculate information gain\n            information_gain = parent_entropy - (n_left / n) * entropy_left - (n_right / n) * entropy_right\n\n            # Update best split if the current gain is higher or equal (and threshold is smaller)\n            if information_gain > best_gain:\n                best_gain = information_gain\n                best_threshold = threshold\n            elif information_gain == best_gain and best_threshold is not None and threshold < best_threshold:\n                 best_threshold = threshold\n\n\n    # If no threshold provides positive information gain, return (None, 0.0)\n    if best_gain <= 0:\n        return (None, 0.0)\n\n    return (round(best_threshold, 4) if best_threshold is not None else None, round(best_gain, 4))\n\n\ndef calculate_entropy(labels):\n    \"\"\"Calculates the Shannon entropy of a set of class labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n\n    label_counts = Counter(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        probability = count / n\n        entropy -= probability * math.log2(probability)\n    return entropy\n\nif __name__ == '__main__':\n    # Example Usage\n    feature1 = [1, 2, 3, 4, 5]\n    target1 = [0, 0, 1, 1, 1]\n    threshold1, gain1 = best_split(feature1, target1)\n    print(f\"Feature: {feature1}, Target: {target1}\")\n    print(f\"Best Split: Threshold = {threshold1}, Information Gain = {gain1}\")\n    # Expected output: Best Split: Threshold = 2.5, Information Gain = 0.4591\n\n    feature2 = [1, 1, 1, 1, 1]\n    target2 = [0, 1, 0, 1, 0]\n    threshold2, gain2 = best_split(feature2, target2)\n    print(f\"\\nFeature: {feature2}, Target: {target2}\")\n    print(f\"Best Split: Threshold = {threshold2}, Information Gain = {gain2}\")\n    # Expected output: Best Split: Threshold = None, Information Gain = 0.0\n\n    feature3 = [1, 2, 3, 4, 5]\n    target3 = [0, 0, 0, 0, 0]\n    threshold3, gain3 = best_split(feature3, target3)\n    print(f\"\\nFeature: {feature3}, Target: {target3}\")\n    print(f\"Best Split: Threshold = {threshold3}, Information Gain = {gain3}\")\n    # Expected output: Best Split: Threshold = None, Information Gain = 0.0\n\n    feature4 = [1.5, 2.5, 3.5, 4.5, 5.5]\n    target4 = [0, 1, 0, 1, 0]\n    threshold4, gain4 = best_split(feature4, target4)\n    print(f\"\\nFeature: {feature4}, Target: {target4}\")\n    print(f\"Best Split: Threshold = {threshold4}, Information Gain = {gain4}\")\n    # Expected output: Best Split: Threshold = 2.0, Information Gain = 0.0199 (or 3.0, 4.0, 5.0 with same gain)\n\n    feature5 = [1, 2, 3, 4, 5, 6]\n    target5 = [0, 0, 1, 1, 0, 0]\n    threshold5, gain5 = best_split(feature5, target5)\n    print(f\"\\nFeature: {feature5}, Target: {target5}\")\n    print(f\"Best Split: Threshold = {threshold5}, Information Gain = {gain5}\")\n    # Expected output: Best Split: Threshold = 2.5, Information Gain = 0.2516\n\n    feature6 = [1, 2, 3, 4, 5, 6]\n    target6 = [0, 1, 0, 1, 0, 1]\n    threshold6, gain6 = best_split(feature6, target6)\n    print(f\"\\nFeature: {feature6}, Target: {target6}\")\n    print(f\"Best Split: Threshold = {threshold6}, Information Gain = {gain6}\")\n    # Expected output: Best Split: Threshold = 1.5, Information Gain = 0.0199 (or 2.5, 3.5, 4.5, 5.5 with same gain)\n```"}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals():\n        initializer = globals()[name]\n        if callable(initializer):\n            return initializer\n        else:\n            raise ValueError(\"Invalid initialization function.\")\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\nif __name__ == '__main__':\n    # Example usage:\n    name = \"ones_init\"\n    shape = (2, 2)\n\n    try:\n        init_fn = get_initializer(name)\n        output = init_fn(shape)\n        print(output)\n\n        name = \"zeros_init\"\n        shape = (3, 4)\n        init_fn = get_initializer(name)\n        output = init_fn(shape)\n        print(output)\n\n        name = \"random_uniform_init\"\n        shape = (2, 3)\n        init_fn = get_initializer(name)\n        output = init_fn(shape, low=-1.0, high=1.0)\n        print(output)\n\n        # Example of invalid name\n        name = \"invalid_init\"\n        init_fn = get_initializer(name)\n\n    except ValueError as e:\n        print(e)\n\n    # Example of non-callable object with a valid name\n    invalid_object = \"this is not a function\"\n    globals()[\"invalid_object\"] = invalid_object\n    try:\n        name = \"invalid_object\"\n        init_fn = get_initializer(name)\n    except ValueError as e:\n        print(e)\n    finally:\n        del globals()[\"invalid_object\"] # Clean up the global namespace\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output dimensions\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Forward pass\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n\n    # Backward pass\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    # Distribute the gradient equally to each element in the window\n                    grad_value = accum_grad[n, c, h, w] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad_value\n\n    # Round and convert to list\n    pooled_output_list = np.round(pooled_output, 4).tolist()\n    grad_input_list = np.round(grad_input, 4).tolist()\n\n    return pooled_output_list, grad_input_list\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([\n        [\n            [\n                [1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]\n            ],\n            [\n                [17, 18, 19, 20],\n                [21, 22, 23, 24],\n                [25, 26, 27, 28],\n                [29, 30, 31, 32]\n            ]\n        ]\n    ]) # Shape (1, 2, 4, 4)\n\n    pool_shape = (2, 2)\n    stride = (2, 2)\n\n    # Simulate an accum_grad for the backward pass\n    # The shape of accum_grad should match the output shape of the forward pass\n    # Output shape will be (1, 2, (4-2)//2+1, (4-2)//2+1) = (1, 2, 2, 2)\n    accum_grad = np.array([\n        [\n            [[1, 2], [3, 4]],\n            [[5, 6], [7, 8]]\n        ]\n    ]) # Shape (1, 2, 2, 2)\n\n    pooled_output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n\n    print(\"Pooled Output:\")\n    print(pooled_output)\n    print(\"\\nGradient Input:\")\n    print(grad_input)\n\n    # Another example\n    X_2 = np.array([\n        [\n            [\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1]\n            ]\n        ]\n    ]) # Shape (1, 1, 5, 5)\n\n    pool_shape_2 = (3, 3)\n    stride_2 = (1, 1)\n\n    # Output shape will be (1, 1, (5-3)//1+1, (5-3)//1+1) = (1, 1, 3, 3)\n    accum_grad_2 = np.array([\n        [\n            [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n        ]\n    ]) # Shape (1, 1, 3, 3)\n\n    pooled_output_2, grad_input_2 = average_pool2d(X_2, pool_shape_2, stride_2, accum_grad_2)\n\n    print(\"\\nPooled Output (Example 2):\")\n    print(pooled_output_2)\n    print(\"\\nGradient Input (Example 2):\")\n    print(grad_input_2)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Base case 1: Both are Leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Handle different types of values for comparison\n        if isinstance(tree_a.value, (int, float)) and isinstance(tree_b.value, (int, float)):\n            return np.isclose(tree_a.value, tree_b.value, atol=1e-8)\n        elif isinstance(tree_a.value, (np.ndarray, list)) and isinstance(tree_b.value, (np.ndarray, list)):\n            try:\n                return np.allclose(np.array(tree_a.value), np.array(tree_b.value), atol=1e-8)\n            except:\n                # Handle cases where conversion to numpy array fails (e.g., mixed types in list)\n                return False\n        else:\n            # Values are of different types or unsupported types for comparison\n            return False\n\n    # Base case 2: Both are Nodes\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check feature and threshold\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        # Recursively compare left and right children\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n\n    # Base case 3: One is a Leaf and the other is a Node (or vice versa)\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Example Usage:\n\n    # Equivalent trees\n    tree1_a = Node(0, 0.5, Leaf(1), Leaf(2))\n    tree1_b = Node(0, 0.5 + 1e-9, Leaf(1 + 1e-9), Leaf(2 - 1e-9))\n    print(f\"Tree 1a and 1b are equivalent: {compare_trees(tree1_a, tree1_b)}\") # Expected: True\n\n    # Non-equivalent trees (different structure)\n    tree2_a = Node(0, 0.5, Leaf(1), Node(1, 0.7, Leaf(3), Leaf(4)))\n    tree2_b = Node(0, 0.5, Node(1, 0.7, Leaf(3), Leaf(4)), Leaf(1))\n    print(f\"Tree 2a and 2b are equivalent: {compare_trees(tree2_a, tree2_b)}\") # Expected: False\n\n    # Non-equivalent trees (different feature)\n    tree3_a = Node(0, 0.5, Leaf(1), Leaf(2))\n    tree3_b = Node(1, 0.5, Leaf(1), Leaf(2))\n    print(f\"Tree 3a and 3b are equivalent: {compare_trees(tree3_a, tree3_b)}\") # Expected: False\n\n    # Non-equivalent trees (different threshold)\n    tree4_a = Node(0, 0.5, Leaf(1), Leaf(2))\n    tree4_b = Node(0, 0.6, Leaf(1), Leaf(2))\n    print(f\"Tree 4a and 4b are equivalent: {compare_trees(tree4_a, tree4_b)}\") # Expected: False\n\n    # Non-equivalent trees (different leaf value)\n    tree5_a = Node(0, 0.5, Leaf(1), Leaf(2))\n    tree5_b = Node(0, 0.5, Leaf(1), Leaf(3))\n    print(f\"Tree 5a and 5b are equivalent: {compare_trees(tree5_a, tree5_b)}\") # Expected: False\n\n    # Trees with numpy arrays in leaves\n    tree6_a = Node(0, 0.5, Leaf(np.array([1.0, 2.0])), Leaf(np.array([3.0, 4.0])))\n    tree6_b = Node(0, 0.5, Leaf(np.array([1.0 + 1e-9, 2.0 - 1e-9])), Leaf(np.array([3.0, 4.0])))\n    print(f\"Tree 6a and 6b are equivalent: {compare_trees(tree6_a, tree6_b)}\") # Expected: True\n\n    # Trees with lists in leaves\n    tree7_a = Node(0, 0.5, Leaf([1.0, 2.0]), Leaf([3.0, 4.0]))\n    tree7_b = Node(0, 0.5, Leaf([1.0 + 1e-9, 2.0 - 1e-9]), Leaf([3.0, 4.0]))\n    print(f\"Tree 7a and 7b are equivalent: {compare_trees(tree7_a, tree7_b)}\") # Expected: True\n\n    # Trees with different types in leaves\n    tree8_a = Node(0, 0.5, Leaf(1), Leaf([2.0]))\n    tree8_b = Node(0, 0.5, Leaf(1), Leaf(np.array([2.0])))\n    print(f\"Tree 8a and 8b are equivalent: {compare_trees(tree8_a, tree8_b)}\") # Expected: False\n\n    # Single leaf trees\n    tree9_a = Leaf(5)\n    tree9_b = Leaf(5 + 1e-9)\n    print(f\"Tree 9a and 9b are equivalent: {compare_trees(tree9_a, tree9_b)}\") # Expected: True\n\n    tree10_a = Leaf(5)\n    tree10_b = Leaf(6)\n    print(f\"Tree 10a and 10b are equivalent: {compare_trees(tree10_a, tree10_b)}\") # Expected: False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]] | int:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n\n    rows, cols = parent1_np.shape\n\n    # Handle edge cases for cutoff\n    if cutoff < 0:\n        cutoff = 0\n    elif cutoff > cols:\n        cutoff = cols\n\n    child1_np = np.zeros_like(parent1_np, dtype=float)\n    child2_np = np.zeros_like(parent2_np, dtype=float)\n\n    # Columns before cutoff\n    child1_np[:, :cutoff] = parent1_np[:, :cutoff]\n    child2_np[:, :cutoff] = parent2_np[:, :cutoff]\n\n    # Columns from cutoff onwards\n    child1_np[:, cutoff:] = parent2_np[:, cutoff:]\n    child2_np[:, cutoff:] = parent1_np[:, cutoff:]\n\n    return (child1_np.tolist(), child2_np.tolist())\n\nif __name__ == '__main__':\n    # Example Usage\n    parent_a = [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12]]\n\n    parent_b = [[101, 102, 103, 104],\n                [105, 106, 107, 108],\n                [109, 110, 111, 112]]\n\n    # Crossover at cutoff 2\n    cutoff_val = 2\n    child_a, child_b = single_point_crossover(parent_a, parent_b, cutoff_val)\n\n    print(f\"Parent A:\\n{parent_a}\")\n    print(f\"Parent B:\\n{parent_b}\")\n    print(f\"Cutoff: {cutoff_val}\")\n    print(f\"Child A:\\n{child_a}\")\n    print(f\"Child B:\\n{child_b}\")\n\n    print(\"-\" * 20)\n\n    # Crossover at cutoff 0 (swap all columns)\n    cutoff_val_0 = 0\n    child_a_0, child_b_0 = single_point_crossover(parent_a, parent_b, cutoff_val_0)\n    print(f\"Parent A:\\n{parent_a}\")\n    print(f\"Parent B:\\n{parent_b}\")\n    print(f\"Cutoff: {cutoff_val_0}\")\n    print(f\"Child A (cutoff 0):\\n{child_a_0}\")\n    print(f\"Child B (cutoff 0):\\n{child_b_0}\")\n\n    print(\"-\" * 20)\n\n    # Crossover at cutoff equal to number of columns (swap none)\n    cutoff_val_end = len(parent_a[0])\n    child_a_end, child_b_end = single_point_crossover(parent_a, parent_b, cutoff_val_end)\n    print(f\"Parent A:\\n{parent_a}\")\n    print(f\"Parent B:\\n{parent_b}\")\n    print(f\"Cutoff: {cutoff_val_end}\")\n    print(f\"Child A (cutoff end):\\n{child_a_end}\")\n    print(f\"Child B (cutoff end):\\n{child_b_end}\")\n\n    print(\"-\" * 20)\n\n    # Test with different shapes\n    parent_c = [[1, 2], [3, 4]]\n    parent_d = [[10, 20, 30], [40, 50, 60]]\n    result_diff_shape = single_point_crossover(parent_c, parent_d, 1)\n    print(f\"Parent C:\\n{parent_c}\")\n    print(f\"Parent D:\\n{parent_d}\")\n    print(f\"Result with different shapes: {result_diff_shape}\")\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    if not G or not G['_V2I']:\n        return {}\n\n    is_directed = G['is_directed']\n    v2i = G['_V2I']\n    graph_data = G['_G']\n    i2v = {index: label for label, index in v2i.items()}\n\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in v2i.keys()}\n\n    for i, edges in enumerate(graph_data):\n        source_label = i2v[i]\n        for _, target_label, weight in edges:\n            adj[source_label].append((target_label, float(weight)))\n            if not is_directed:\n                adj[target_label].append((source_label, float(weight)))\n\n    # Sort neighbour lists\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n\n    return adj\n\nif __name__ == '__main__':\n    # Example Usage\n    custom_graph_directed = {\n        'is_directed': True,\n        '_V2I': {'A': 0, 'B': 1, 'C': 2, 'D': 3},\n        '_G': [\n            [('A', 'B', 1.0), ('A', 'C', 2.0)],  # Edges from A\n            [('B', 'C', 3.0)],                  # Edges from B\n            [],                                 # Edges from C\n            [('D', 'A', 4.0)]                   # Edges from D\n        ]\n    }\n\n    adj_directed = to_networkx(custom_graph_directed)\n    print(\"Directed Graph Adjacency Dictionary:\")\n    for node, neighbors in adj_directed.items():\n        print(f\"{node}: {neighbors}\")\n\n    print(\"-\" * 20)\n\n    custom_graph_undirected = {\n        'is_directed': False,\n        '_V2I': {'X': 0, 'Y': 1, 'Z': 2},\n        '_G': [\n            [('X', 'Y', 5.0)],  # Edge X-Y\n            [('Y', 'X', 5.0), ('Y', 'Z', 6.0)], # Edge Y-X and Y-Z\n            [('Z', 'Y', 6.0)]   # Edge Z-Y\n        ]\n    }\n\n    adj_undirected = to_networkx(custom_graph_undirected)\n    print(\"Undirected Graph Adjacency Dictionary:\")\n    for node, neighbors in adj_undirected.items():\n        print(f\"{node}: {neighbors}\")\n\n    print(\"-\" * 20)\n\n    custom_graph_empty = {\n        'is_directed': True,\n        '_V2I': {},\n        '_G': []\n    }\n    adj_empty = to_networkx(custom_graph_empty)\n    print(\"Empty Graph Adjacency Dictionary:\")\n    print(adj_empty)\n\n    print(\"-\" * 20)\n\n    custom_graph_single_node_no_edges = {\n        'is_directed': True,\n        '_V2I': {'Single': 0},\n        '_G': [[]]\n    }\n    adj_single_node = to_networkx(custom_graph_single_node_no_edges)\n    print(\"Single Node No Edges Adjacency Dictionary:\")\n    print(adj_single_node)\n```"}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Write your code here\n    x = np.asarray(x)\n    if x.size == 0:\n        return True  # An empty array is considered binary\n\n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\nif __name__ == '__main__':\n    # Example Usage:\n    arr1 = np.array([0, 1, 0, 1])\n    print(f\"Array: {arr1}, Is binary: {is_binary(arr1)}\")\n\n    arr2 = np.array([0.0, 1.0, 0.0])\n    print(f\"Array: {arr2}, Is binary: {is_binary(arr2)}\")\n\n    arr3 = np.array([[True, False], [False, True]])\n    print(f\"Array: {arr3}, Is binary: {is_binary(arr3)}\")\n\n    arr4 = np.array([0, 1, 2, 0])\n    print(f\"Array: {arr4}, Is binary: {is_binary(arr4)}\")\n\n    arr5 = np.array([0.5, 1.0, 0.0])\n    print(f\"Array: {arr5}, Is binary: {is_binary(arr5)}\")\n\n    arr6 = np.array([])\n    print(f\"Array: {arr6}, Is binary: {is_binary(arr6)}\")\n\n    arr7 = np.array([True, False, 0, 1])\n    print(f\"Array: {arr7}, Is binary: {is_binary(arr7)}\")\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Write your code here\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    total_tokens = 0\n\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            padded_tokens = [\"<bol>\"] * (N - 1) + tokens + [\"<eol>\"]\n        else:\n            padded_tokens = tokens\n\n        total_tokens += len(tokens)\n\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i : i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                prefix = tuple(padded_tokens[i : i + N - 1])\n                prefix_counts[prefix] += 1\n\n    query_tokens = query.split()\n    if N > 1:\n        padded_query_tokens = [\"<bol>\"] * (N - 1) + query_tokens + [\"<eol>\"]\n    else:\n        padded_query_tokens = query_tokens\n\n    if len(padded_query_tokens) < N:\n        return float('-inf')\n\n    total_log_prob = 0.0\n\n    for i in range(len(padded_query_tokens) - N + 1):\n        ngram = tuple(padded_query_tokens[i : i + N])\n        ngram_count = ngram_counts[ngram]\n\n        if ngram_count == 0:\n            return float('-inf')\n\n        if N > 1:\n            prefix = tuple(padded_query_tokens[i : i + N - 1])\n            prefix_count = prefix_counts[prefix]\n            if prefix_count == 0:  # Should not happen if ngram_count > 0, but as a safeguard\n                 return float('-inf')\n            probability = ngram_count / prefix_count\n        else:\n            if total_tokens == 0: # Handle empty corpus case for unigrams\n                return float('-inf')\n            probability = ngram_count / total_tokens\n\n        total_log_prob += math.log(probability)\n\n    return round(total_log_prob, 4)\n\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    # 1. Build a weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                dist = np.linalg.norm(X[i] - X[j])\n                W[i, j] = 1 / (1 + dist)\n\n    # 2. Compute the (unnormalised) graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # 3. Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    # Sort eigenvectors by eigenvalues and take the first k\n    sorted_indices = np.argsort(eigenvalues)\n    E = eigenvectors[:, sorted_indices[:k]]\n\n    # 4. Run k-means on the rows of E\n    centroids = E[:k, :].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    max_iterations = 100\n    for iteration in range(max_iterations):\n        # Assign points to the closest centroid\n        new_labels = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            new_labels[i] = np.argmin(distances)\n\n        # Check for convergence\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n\n        # Handle empty clusters\n        for i in range(k):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n            else:\n                # Re-initialise empty cluster with a random row of E\n                new_centroids[i] = E[np.random.randint(n_samples)]\n\n        centroids = new_centroids\n\n    # 5. Return the resulting cluster labels as a Python list\n    return labels.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    # Create some sample data\n    np.random.seed(42)\n    X = np.vstack([\n        np.random.rand(50, 2) * 2 + [0, 0],\n        np.random.rand(50, 2) * 2 + [5, 5],\n        np.random.rand(50, 2) * 2 + [0, 5]\n    ])\n\n    k = 3\n    cluster_labels = spectral_clustering(X, k)\n\n    print(\"Cluster Labels:\", cluster_labels)\n    print(\"Number of samples:\", len(cluster_labels))\n    print(\"Unique labels:\", np.unique(cluster_labels))\n\n    # You can visualize the results if you have matplotlib installed\n    try:\n        import matplotlib.pyplot as plt\n        plt.scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='viridis')\n        plt.title(\"Spectral Clustering Results\")\n        plt.xlabel(\"Feature 1\")\n        plt.ylabel(\"Feature 2\")\n        plt.show()\n    except ImportError:\n        print(\"Matplotlib not found. Cannot visualize the results.\")\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    output = \"------------------------- DEBUG -------------------------\\n\"\n    output += f\"Mine (prev) [{prev_label}]:\\n\"\n    output += f\"{prev_mine}\\n\\n\"\n    output += f\"Theirs (prev) [{prev_label}]:\\n\"\n    output += f\"{golds[prev_label]}\\n\\n\"\n    output += f\"Mine [{curr_label}]:\\n\"\n    output += f\"{curr_mine}\\n\\n\"\n    output += f\"Theirs [{curr_label}]:\\n\"\n    output += f\"{golds[curr_label]}{warn_str}\\n\"\n    output += \"----------------------- END DEBUG -----------------------\"\n\n    return output\n\nif __name__ == '__main__':\n    # Example Usage\n    params = [\n        (\"output_0\", \"label_0\"),\n        (\"output_1\", \"label_1\"),\n        (\"output_2\", \"label_2\"),\n    ]\n    golds = {\n        \"label_0\": \"gold_0\",\n        \"label_1\": \"gold_1\",\n        \"label_2\": \"gold_2\",\n    }\n\n    # Test case with ix = 0\n    print(\"--- Test Case ix = 0 ---\")\n    print(err_fmt(params, golds, 0))\n    print(\"\\n\")\n\n    # Test case with ix = 1\n    print(\"--- Test Case ix = 1 ---\")\n    print(err_fmt(params, golds, 1))\n    print(\"\\n\")\n\n    # Test case with ix = 2 and a warning\n    print(\"--- Test Case ix = 2 with Warning ---\")\n    warning = \"\\nThis is an extra warning message.\"\n    print(err_fmt(params, golds, 2, warning))\n    print(\"\\n\")\n\n    # Test case with ix = 2 and a warning without a leading newline\n    print(\"--- Test Case ix = 2 with Warning (no leading newline) ---\")\n    warning_no_newline = \" Another warning.\"\n    print(err_fmt(params, golds, 2, warning_no_newline))\n    print(\"\\n\")\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    X_processed = X.copy()\n    if fit_intercept:\n        X_processed = np.hstack([np.ones((X_processed.shape[0], 1)), X_processed])\n\n    N, M = X_processed.shape\n\n    # Process V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)) and np.ndim(V) == 1:\n        if len(V) != M:\n            raise ValueError(f\"Length of V ({len(V)}) must match number of features ({M})\")\n        V_inv = np.diag(1.0 / np.array(V))\n    elif isinstance(V, np.ndarray) and np.ndim(V) == 2:\n        if V.shape != (M, M):\n            raise ValueError(f\"Shape of V ({V.shape}) must be ({M}, {M})\")\n        V_inv = np.linalg.inv(V)\n    else:\n        raise ValueError(\"Invalid format for V\")\n\n    # Process mu\n    if np.isscalar(mu):\n        mu_processed = np.full(M, mu)\n    elif isinstance(mu, (list, tuple, np.ndarray)) and np.ndim(mu) == 1:\n        if len(mu) != M:\n            raise ValueError(f\"Length of mu ({len(mu)}) must match number of features ({M})\")\n        mu_processed = np.array(mu)\n    else:\n        raise ValueError(\"Invalid format for mu\")\n\n    # Compute posterior mean\n    XTX = X_processed.T @ X_processed\n    XTy = X_processed.T @ y\n\n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n\n    mu_b = Sigma_b @ (V_inv @ mu_processed + XTy)\n\n    # Round and convert to list\n    return [round(coeff, 4) for coeff in mu_b.tolist()]\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([1, 2, 3])\n\n    # Example 1: Default parameters\n    print(\"Example 1: Default parameters\")\n    posterior_mean_1 = bayesian_posterior_mean(X, y)\n    print(f\"Posterior Mean: {posterior_mean_1}\")\n    # Expected output (approximately): [-0.0000, 0.5000, 0.0000]\n\n    # Example 2: No intercept, scalar mu, scalar V\n    print(\"\\nExample 2: No intercept, scalar mu, scalar V\")\n    posterior_mean_2 = bayesian_posterior_mean(X, y, mu=0.5, V=2.0, fit_intercept=False)\n    print(f\"Posterior Mean: {posterior_mean_2}\")\n    # Expected output (approximately): [0.1667, 0.3333]\n\n    # Example 3: Intercept, list V, list mu\n    print(\"\\nExample 3: Intercept, list V, list mu\")\n    posterior_mean_3 = bayesian_posterior_mean(X, y, mu=[0.1, 0.2, 0.3], V=[0.5, 1.0, 1.5], fit_intercept=True)\n    print(f\"Posterior Mean: {posterior_mean_3}\")\n    # Expected output (approximately): [-0.0000, 0.5000, 0.0000]\n\n    # Example 4: Intercept, full V, list mu\n    print(\"\\nExample 4: Intercept, full V, list mu\")\n    M_with_intercept = X.shape[1] + 1\n    V_full = np.eye(M_with_intercept) * 0.1\n    mu_list = [0.1] * M_with_intercept\n    posterior_mean_4 = bayesian_posterior_mean(X, y, mu=mu_list, V=V_full, fit_intercept=True)\n    print(f\"Posterior Mean: {posterior_mean_4}\")\n    # Expected output (approximately): [-0.0000, 0.5000, 0.0000]\n```"}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Helper functions for Hz <-> Mel conversion\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Convert limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate equally-spaced Mel values\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel values back to Hz (corner frequencies)\n    hz_points = mel_to_hz(mel_points)\n\n    # DFT bin frequencies\n    bin_freqs = np.linspace(0, fs / 2, N // 2 + 1)\n\n    filterbank = []\n\n    for i in range(n_filters):\n        filter_row = []\n        # Corner frequencies for the current filter\n        left_corner = hz_points[i]\n        center_corner = hz_points[i + 1]\n        right_corner = hz_points[i + 2]\n\n        for k in range(N // 2 + 1):\n            bin_freq = bin_freqs[k]\n\n            # Compute left and right slopes\n            left_slope = (bin_freq - left_corner) / (center_corner - left_corner) if center_corner != left_corner else 0\n            right_slope = (right_corner - bin_freq) / (right_corner - center_corner) if right_corner != center_corner else 0\n\n            # Keep the positive minimum\n            weight = max(0, min(left_slope, right_slope))\n            filter_row.append(weight)\n\n        # Normalize the filter\n        if normalize:\n            area_factor = 2 / (right_corner - left_corner) if right_corner != left_corner else 0\n            filter_row = [w * area_factor for w in filter_row]\n\n        filterbank.append([round(w, 4) for w in filter_row])\n\n    return filterbank\n\nif __name__ == '__main__':\n    # Example usage (similar to LibROSA's default parameters)\n    N = 2048\n    n_filters = 40\n    fs = 22050\n    min_freq = 0\n    max_freq = fs // 2\n\n    mel_fb = mel_filterbank(N, n_filters, fs, min_freq, max_freq)\n\n    # Print the shape of the resulting filterbank\n    print(f\"Filterbank shape: ({len(mel_fb)}, {len(mel_fb[0])})\")\n\n    # Print a few values to verify\n    print(\"\\nFirst filter row (first 10 values):\")\n    print(mel_fb[0][:10])\n\n    print(\"\\nLast filter row (first 10 values):\")\n    print(mel_fb[-1][:10])\n\n    print(\"\\nFirst filter row (last 10 values):\")\n    print(mel_fb[0][-10:])\n\n    print(\"\\nLast filter row (last 10 values):\")\n    print(mel_fb[-1][-10:])\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n\n    window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n              a2 * np.cos(4 * np.pi * n / N) -\n              a3 * np.cos(6 * np.pi * n / N))\n\n    if not symmetric:\n        # For periodic, the formula uses N=L, but the range of n is 0 to L-1.\n        # The standard definition uses N=L-1 for symmetric and N=L for periodic\n        # with n from 0 to L-1.\n        # The description in the prompt uses N=L-1 for both, but the periodic\n        # form is conceptually length L+1 with the last value discarded.\n        # Let's follow the standard definition where N=L for periodic.\n        # Recalculate for periodic with N=window_len\n        N_periodic = window_len\n        n_periodic = np.arange(window_len)\n        window = (a0 - a1 * np.cos(2 * np.pi * n_periodic / N_periodic) +\n                  a2 * np.cos(4 * np.pi * n_periodic / N_periodic) -\n                  a3 * np.cos(6 * np.pi * n_periodic / N_periodic))\n\n\n    # Round to 4 decimal places\n    window_rounded = [round(val, 4) for val in window]\n\n    return window_rounded\n\nif __name__ == '__main__':\n    # Example usage:\n    window_len = 10\n    symmetric_window = blackman_harris(window_len, symmetric=True)\n    periodic_window = blackman_harris(window_len, symmetric=False)\n\n    print(f\"Symmetric Blackman-Harris window (length {window_len}):\")\n    print(symmetric_window)\n\n    print(f\"\\nPeriodic Blackman-Harris window (length {window_len}):\")\n    print(periodic_window)\n\n    print(\"\\nSpecial cases:\")\n    print(f\"Length 0: {blackman_harris(0)}\")\n    print(f\"Length 1 (symmetric): {blackman_harris(1, symmetric=True)}\")\n    print(f\"Length 1 (periodic): {blackman_harris(1, symmetric=False)}\")\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x).\n\n    Uses recursion to shift small x and an asymptotic expansion for large x.\n    \"\"\"\n    # Shift small x up to a moderate value (e.g., 6)\n    while x < 6:\n        x += 1\n        return digamma(x) - 1 / (x - 1)\n\n    # Apply the asymptotic expansion for large x\n    ln_x = math.log(x)\n    inv_x = 1 / x\n    inv_x_sq = inv_x * inv_x\n    inv_x_4 = inv_x_sq * inv_x_sq\n    inv_x_6 = inv_x_4 * inv_x_sq\n\n    psi_x = ln_x - 0.5 * inv_x - (1/12) * inv_x_sq + (1/120) * inv_x_4 - (1/252) * inv_x_6\n    return psi_x\n\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # =====  Write your code below this line  =====\n    if isinstance(gamma, list):\n        gamma_d = gamma[d]\n    elif isinstance(gamma, np.ndarray):\n        gamma_d = gamma[d, :]\n    else:\n        raise TypeError(\"gamma must be a list of lists or a NumPy array\")\n\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n\n    expected_log = digamma(gamma_dt) - digamma(sum_gamma_d)\n\n    return round(expected_log, 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    gamma_list = [[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]]\n    gamma_np = np.array(gamma_list)\n\n    # Test with list\n    result_list = expected_log_dirichlet(gamma_list, 0, 1)\n    print(f\"Expected log (list, d=0, t=1): {result_list}\")\n\n    # Test with NumPy array\n    result_np = expected_log_dirichlet(gamma_np, 1, 0)\n    print(f\"Expected log (numpy, d=1, t=0): {result_np}\")\n\n    # Another test case\n    gamma_list_2 = [[10.0, 20.0, 30.0]]\n    result_list_2 = expected_log_dirichlet(gamma_list_2, 0, 2)\n    print(f\"Expected log (list, d=0, t=2): {result_list_2}\")\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    report = f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_prediction}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\n\nMine [{curr_label}]:\n{curr_prediction}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n\n    return report\n\nif __name__ == '__main__':\n    params = [\n        (\"This is the first prediction.\", \"label_1\"),\n        (\"This is the second prediction.\", \"label_2\"),\n        (\"This is the third prediction.\", \"label_3\"),\n    ]\n    golds = {\n        \"label_1\": \"This is the first gold.\",\n        \"label_2\": \"This is the second gold.\",\n        \"label_3\": \"This is the third gold.\",\n    }\n\n    # Test case 1: ix = 0\n    print(\"--- Test Case 1: ix = 0 ---\")\n    report_0 = err_fmt(params, golds, 0)\n    print(report_0)\n\n    # Test case 2: ix = 1\n    print(\"\\n--- Test Case 2: ix = 1 ---\")\n    report_1 = err_fmt(params, golds, 1)\n    print(report_1)\n\n    # Test case 3: ix = 2 with warning\n    print(\"\\n--- Test Case 3: ix = 2 with warning ---\")\n    report_2_warn = err_fmt(params, golds, 2, warn_str=\" (WARNING: mismatch)\")\n    print(report_2_warn)\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_test_samples = X_test.shape[0]\n\n    # Initialize weights\n    weights = np.full(n_samples, 1 / n_samples)\n\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n\n        # Iterate over features\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            # Consider all unique values as potential thresholds\n            thresholds = np.unique(feature_values)\n\n            # Iterate over thresholds and polarities\n            for t in thresholds:\n                for p in [-1, 1]:\n                    # Make predictions with the current stump\n                    predictions = p * np.sign(feature_values - t)\n                    # Handle the case where feature_values - t is 0\n                    predictions[feature_values == t] = p\n\n                    # Calculate weighted error\n                    errors = np.where(predictions != y_train, 1, 0)\n                    weighted_error = np.sum(weights * errors)\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': j, 'threshold': t, 'polarity': p}\n\n        # Calculate stump weight (alpha)\n        epsilon = min_error\n        if epsilon == 0:\n            alpha = float('inf') # Avoid division by zero, effectively giving infinite weight\n        elif epsilon >= 1:\n             alpha = -float('inf') # Avoid log of non-positive number\n        else:\n            alpha = 0.5 * math.log((1.0 - epsilon) / (epsilon + 1e-10)) # Add small epsilon to avoid log(0)\n\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n\n        # Update weights\n        predictions = best_stump['polarity'] * np.sign(X_train[:, best_stump['feature_index']] - best_stump['threshold'])\n        predictions[X_train[:, best_stump['feature_index']] == best_stump['threshold']] = best_stump['polarity']\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights) # Normalize weights\n\n    # Make predictions on X_test\n    final_predictions = np.zeros(n_test_samples)\n    for i in range(n_estimators):\n        stump = stumps[i]\n        alpha = stump_weights[i]\n        predictions = stump['polarity'] * np.sign(X_test[:, stump['feature_index']] - stump['threshold'])\n        predictions[X_test[:, stump['feature_index']] == stump['threshold']] = stump['polarity']\n        final_predictions += alpha * predictions\n\n    return list(np.sign(final_predictions).astype(int))\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\n    y_train = np.array([-1, -1, -1, 1, 1, 1])\n    X_test = np.array([[1.5, 2.5], [5.5, 6.5]])\n\n    predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=3)\n    print(predictions)\n\n    X_train_2 = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])\n    y_train_2 = np.array([-1, 1, 1, -1])\n    X_test_2 = np.array([[0.5, 0.5], [-0.5, -0.5]])\n\n    predictions_2 = adaboost_predict(X_train_2, y_train_2, X_test_2, n_estimators=5)\n    print(predictions_2)\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # Write your code here\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        # Non-negative frequencies (0 to floor(N/2))\n        num_bins = int(np.floor(N / 2)) + 1\n        frequencies = np.linspace(0, (num_bins - 1) * (fs / N), num_bins)\n    else:\n        # Full spectrum arranged like np.fftfreq\n        frequencies = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimal places and convert to list\n    rounded_frequencies = np.round(frequencies, 4).tolist()\n\n    return rounded_frequencies\n\nif __name__ == '__main__':\n    # Example usage:\n    N = 10\n    fs = 44000\n\n    # Positive only\n    positive_bins = dft_bins(N, fs, positive_only=True)\n    print(f\"Positive only bins (N={N}, fs={fs}): {positive_bins}\")\n\n    # Full spectrum\n    full_bins = dft_bins(N, fs, positive_only=False)\n    print(f\"Full spectrum bins (N={N}, fs={fs}): {full_bins}\")\n\n    # Example with odd N\n    N_odd = 11\n    positive_bins_odd = dft_bins(N_odd, fs, positive_only=True)\n    print(f\"Positive only bins (N={N_odd}, fs={fs}): {positive_bins_odd}\")\n\n    full_bins_odd = dft_bins(N_odd, fs, positive_only=False)\n    print(f\"Full spectrum bins (N={N_odd}, fs={fs}): {full_bins_odd}\")\n\n    # Example with invalid input\n    invalid_bins_N = dft_bins(0, fs)\n    print(f\"Invalid N=0: {invalid_bins_N}\")\n\n    invalid_bins_fs = dft_bins(N, 0)\n    print(f\"Invalid fs=0: {invalid_bins_fs}\")\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Write your code here\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n\n    n_samples, n_estimators = predictions.shape\n\n    # Calculate the sum of OOB predictions for each sample\n    oob_predictions_sum = np.sum(predictions * oob_mask, axis=1)\n\n    # Calculate the number of OOB predictions for each sample\n    oob_counts = np.sum(oob_mask, axis=1)\n\n    # Identify samples with at least one OOB prediction\n    has_oob = oob_counts > 0\n\n    # If no sample has an OOB prediction, return -1\n    if not np.any(has_oob):\n        return -1\n\n    # Calculate the average OOB prediction for samples with OOB predictions\n    oob_average_predictions = np.zeros(n_samples)\n    oob_average_predictions[has_oob] = oob_predictions_sum[has_oob] / oob_counts[has_oob]\n\n    # Compute the squared errors for samples with OOB predictions\n    squared_errors = (y_true[has_oob] - oob_average_predictions[has_oob]) ** 2\n\n    # Compute the mean of the squared errors\n    oob_mse_value = np.mean(squared_errors)\n\n    return round(oob_mse_value, 4)\n\nif __name__ == '__main__':\n    # Example Usage\n    y_true = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\n    predictions = np.array([\n        [1.1, 1.2, 1.0],\n        [2.1, 2.0, 2.2],\n        [3.0, 3.1, 3.2],\n        [4.1, 4.0, 4.2],\n        [5.0, 5.1, 5.2]\n    ])\n    oob_mask = np.array([\n        [True, False, True],\n        [False, True, False],\n        [True, True, False],\n        [False, False, True],\n        [True, False, True]\n    ])\n\n    mse = oob_mse(y_true, predictions, oob_mask)\n    print(f\"OOB MSE: {mse}\")\n\n    # Example with no OOB predictions\n    oob_mask_no_oob = np.array([\n        [False, False, False],\n        [False, False, False],\n        [False, False, False],\n        [False, False, False],\n        [False, False, False]\n    ])\n    mse_no_oob = oob_mse(y_true, predictions, oob_mask_no_oob)\n    print(f\"OOB MSE (no OOB): {mse_no_oob}\")\n\n    # Example with some samples having no OOB predictions\n    oob_mask_partial_oob = np.array([\n        [True, False, True],\n        [False, False, False],\n        [True, True, False],\n        [False, False, False],\n        [True, False, True]\n    ])\n    mse_partial_oob = oob_mse(y_true, predictions, oob_mask_partial_oob)\n    print(f\"OOB MSE (partial OOB): {mse_partial_oob}\")\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # 1. Compute the support for every item.\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n\n    # 2. Discard the items whose support is smaller than min_support.\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support}\n\n    # 3. Create a global ordering of the remaining items.\n    # First by decreasing support, then alphabetically.\n    item_order = sorted(frequent_items, key=lambda item: (-item_counts[item], item))\n\n    # Create the root node\n    root = {\"support\": 0, \"children\": {}}\n\n    # 4. For every transaction\n    for transaction in transactions:\n        # remove duplicates, keep only frequent items, and reorder them\n        processed_transaction = sorted([item for item in set(transaction) if item in frequent_items],\n                                       key=lambda item: item_order.index(item))\n\n        # walk from the root and update/extend the path\n        current_node = root\n        for item in processed_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n\n    return root\n\nif __name__ == '__main__':\n    # Example Usage:\n    transactions = [\n        [\"f\", \"a\", \"c\", \"d\", \"g\", \"i\", \"m\", \"p\"],\n        [\"a\", \"b\", \"c\", \"f\", \"l\", \"m\", \"o\"],\n        [\"b\", \"f\", \"h\", \"j\", \"o\", \"w\"],\n        [\"b\", \"k\", \"p\", \"r\", \"s\", \"x\"],\n        [\"a\", \"c\", \"e\", \"f\", \"l\", \"m\", \"n\", \"p\"]\n    ]\n    min_support = 3\n\n    fp_tree = build_fp_tree(transactions, min_support)\n    import json\n    print(json.dumps(fp_tree, indent=4))\n\n    # Another example\n    transactions2 = [\n        [\"a\", \"b\", \"c\"],\n        [\"a\", \"b\"],\n        [\"a\", \"c\"],\n        [\"a\"],\n        [\"b\", \"c\"]\n    ]\n    min_support2 = 2\n    fp_tree2 = build_fp_tree(transactions2, min_support2)\n    print(\"\\nAnother example:\")\n    print(json.dumps(fp_tree2, indent=4))\n```"}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for consistent handling\n    X_np = np.asarray(X, dtype=float)\n\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.asarray(Y, dtype=float)\n\n    # Handle empty input X\n    if X_np.shape[0] == 0:\n        return []\n\n    # Check for incompatible dimensions (number of columns)\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n\n    # Calculate the kernel matrix using matrix multiplication\n    kernel_matrix = np.dot(X_np, Y_np.T) + c0\n\n    # Round the result to 4 decimal places and convert to a list of lists\n    rounded_kernel_matrix = np.round(kernel_matrix, 4).tolist()\n\n    return rounded_kernel_matrix\n\nif __name__ == '__main__':\n    # Example Usage\n    X1 = [[1, 2], [3, 4]]\n    Y1 = [[5, 6], [7, 8]]\n    c0_1 = 0\n    kernel_matrix_1 = linear_kernel(X1, Y1, c0_1)\n    print(f\"Kernel Matrix 1:\\n{kernel_matrix_1}\")\n    # Expected: [[17.0, 23.0], [39.0, 53.0]]\n\n    X2 = np.array([[1.1, 2.2], [3.3, 4.4]])\n    Y2 = np.array([[5.5, 6.6], [7.7, 8.8]])\n    c0_2 = 1.5\n    kernel_matrix_2 = linear_kernel(X2, Y2, c0_2)\n    print(f\"\\nKernel Matrix 2:\\n{kernel_matrix_2}\")\n    # Expected: [[20.87 + 1.5, 25.96 + 1.5], [43.89 + 1.5, 54.56 + 1.5]]\n    # Rounded: [[22.37, 27.46], [45.39, 56.06]]\n\n    X3 = [[1, 2], [3, 4]]\n    kernel_matrix_3 = linear_kernel(X3)\n    print(f\"\\nKernel Matrix 3 (Y=X):\\n{kernel_matrix_3}\")\n    # Expected: [[1*1 + 2*2, 1*3 + 2*4], [3*1 + 4*2, 3*3 + 4*4]]\n    # Expected: [[5.0, 11.0], [11.0, 25.0]]\n\n    X4 = [[1, 2, 3]]\n    Y4 = [[4, 5]]\n    kernel_matrix_4 = linear_kernel(X4, Y4)\n    print(f\"\\nKernel Matrix 4 (Incompatible): {kernel_matrix_4}\")\n    # Expected: -1\n\n    X5 = []\n    Y5 = [[1, 2]]\n    kernel_matrix_5 = linear_kernel(X5, Y5)\n    print(f\"\\nKernel Matrix 5 (Empty X): {kernel_matrix_5}\")\n    # Expected: []\n\n    X6 = [[1, 2]]\n    Y6 = []\n    kernel_matrix_6 = linear_kernel(X6, Y6)\n    print(f\"\\nKernel Matrix 6 (Empty Y): {kernel_matrix_6}\")\n    # Expected: []\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected first and second moment estimates\n    m_hat = m_t / (1 - beta1**t)\n    v_hat = v_t / (1 - beta2**t)\n\n    # Update parameters\n    # Check if gradient is zero\n    if np.all(grad == 0):\n        param_prime = param\n    else:\n        param_prime = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    # Convert to lists and round\n    updated_param_list = np.around(param_prime, 8).tolist()\n    new_m_list = np.around(m_t, 8).tolist()\n    new_v_list = np.around(v_t, 8).tolist()\n\n    return updated_param_list, new_m_list, new_v_list\n\nif __name__ == '__main__':\n    # Example Usage\n    param = np.array([0.5, -0.2])\n    grad = np.array([0.1, 0.3])\n    t = 1\n    m = np.array([0.0, 0.0])\n    v = np.array([0.0, 0.0])\n\n    updated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n    print(f\"Step {t}:\")\n    print(f\"Updated Parameter: {updated_param}\")\n    print(f\"New Moment (m): {new_m}\")\n    print(f\"New Variance (v): {new_v}\")\n\n    # Example with zero gradient\n    param_zero_grad = np.array([1.0, 1.0])\n    grad_zero = np.array([0.0, 0.0])\n    t_zero = 2\n    m_zero = np.array([0.05, 0.15])\n    v_zero = np.array([0.005, 0.045])\n\n    updated_param_zero, new_m_zero, new_v_zero = adam_update(param_zero_grad, grad_zero, t_zero, m_zero, v_zero)\n    print(f\"\\nStep {t_zero} (Zero Gradient):\")\n    print(f\"Updated Parameter: {updated_param_zero}\")\n    print(f\"New Moment (m): {new_m_zero}\")\n    print(f\"New Variance (v): {new_v_zero}\")\n```"}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n\n    # Sort samples by reward in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:num_retain]\n\n    # Select the elite samples\n    elite_samples = theta_samples[elite_indices]\n\n    # Compute mean and variance of elite samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n\n    # Round to four decimal places and convert to lists\n    rounded_mean = [round(m, 4) for m in mean]\n    rounded_variance = [round(v, 4) for v in variance]\n\n    return rounded_mean, rounded_variance\n\nif __name__ == '__main__':\n    # Example Usage\n    theta_samples = np.array([\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.0],\n        [10.0, 11.0, 12.0],\n        [13.0, 14.0, 15.0]\n    ])\n    rewards = [10.0, 5.0, 20.0, 15.0, 0.0]\n    retain_prcnt = 0.4\n\n    mean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\n    print(f\"Mean of elite samples: {mean}\")\n    print(f\"Variance of elite samples: {variance}\")\n\n    # Expected output for this example:\n    # The top 40% of 5 samples is int(0.4 * 5) = 2 samples.\n    # Rewards: [10.0, 5.0, 20.0, 15.0, 0.0]\n    # Sorted rewards indices (descending): [2, 3, 0, 1, 4]\n    # Elite indices: [2, 3]\n    # Elite samples:\n    # [[ 7.  8.  9.]\n    #  [10. 11. 12.]]\n    # Mean: [(7+10)/2, (8+11)/2, (9+12)/2] = [8.5, 9.5, 10.5]\n    # Variance: [((7-8.5)^2 + (10-8.5)^2)/2, ((8-9.5)^2 + (11-9.5)^2)/2, ((9-10.5)^2 + (12-10.5)^2)/2]\n    # Variance: [((-1.5)^2 + (1.5)^2)/2, ((-1.5)^2 + (1.5)^2)/2, ((-1.5)^2 + (1.5)^2)/2]\n    # Variance: [(2.25 + 2.25)/2, (2.25 + 2.25)/2, (2.25 + 2.25)/2]\n    # Variance: [4.5/2, 4.5/2, 4.5/2] = [2.25, 2.25, 2.25]\n    # Rounded mean: [8.5000, 9.5000, 10.5000]\n    # Rounded variance: [2.2500, 2.2500, 2.2500]\n\n    theta_samples_2 = np.array([\n        [1.1, 2.2],\n        [3.3, 4.4],\n        [5.5, 6.6],\n        [7.7, 8.8]\n    ])\n    rewards_2 = [1.0, 3.0, 2.0, 4.0]\n    retain_prcnt_2 = 0.75\n\n    mean_2, variance_2 = cross_entropy_update(theta_samples_2, rewards_2, retain_prcnt_2)\n    print(f\"\\nMean of elite samples (example 2): {mean_2}\")\n    print(f\"Variance of elite samples (example 2): {variance_2}\")\n\n    # Expected output for example 2:\n    # The top 75% of 4 samples is int(0.75 * 4) = 3 samples.\n    # Rewards: [1.0, 3.0, 2.0, 4.0]\n    # Sorted rewards indices (descending): [3, 1, 2, 0]\n    # Elite indices: [3, 1, 2]\n    # Elite samples:\n    # [[7.7 8.8]\n    #  [3.3 4.4]\n    #  [5.5 6.6]]\n    # Mean: [(7.7+3.3+5.5)/3, (8.8+4.4+6.6)/3] = [16.5/3, 19.8/3] = [5.5, 6.6]\n    # Variance:\n    # Dim 0: ((7.7-5.5)^2 + (3.3-5.5)^2 + (5.5-5.5)^2)/3 = ((2.2)^2 + (-2.2)^2 + (0)^2)/3 = (4.84 + 4.84 + 0)/3 = 9.68/3 \u2248 3.22666...\n    # Dim 1: ((8.8-6.6)^2 + (4.4-6.6)^2 + (6.6-6.6)^2)/3 = ((2.2)^2 + (-2.2)^2 + (0)^2)/3 = (4.84 + 4.84 + 0)/3 = 9.68/3 \u2248 3.22666...\n    # Rounded mean: [5.5000, 6.6000]\n    # Rounded variance: [3.2267, 3.2267]\n```"}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # TODO: implement this function\n    if not labels:\n        return 0.0\n\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n\n    for count in label_counts.values():\n        probability = count / total_labels\n        if probability > 0:  # Handle the case where probability is 0\n            entropy_value -= probability * math.log2(probability)\n\n    return round(entropy_value, 5)\n\nif __name__ == '__main__':\n    # Example usage:\n    labels1 = ['A', 'B', 'A', 'C', 'B', 'A']\n    print(f\"Entropy of {labels1}: {entropy(labels1)}\")\n\n    labels2 = [1, 1, 1, 1, 1]\n    print(f\"Entropy of {labels2}: {entropy(labels2)}\")\n\n    labels3 = []\n    print(f\"Entropy of {labels3}: {entropy(labels3)}\")\n\n    labels4 = ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']\n    print(f\"Entropy of {labels4}: {entropy(labels4)}\")\n\n    labels5 = np.array([0, 1, 0, 1, 0, 1, 0, 1])\n    print(f\"Entropy of {labels5}: {entropy(labels5)}\")\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Calculate effective kernel size with dilation\n    effective_kernel_rows = kernel_rows + (kernel_rows - 1) * dilation\n    effective_kernel_cols = kernel_cols + (kernel_cols - 1) * dilation\n\n    # Determine padding\n    if isinstance(pad, int):\n        pr1, pr2, pc1, pc2 = pad, pad, pad, pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr1, pr2, pc1, pc2 = pad[0], pad[0], pad[1], pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        out_rows = (in_rows + stride - 1) // stride\n        out_cols = (in_cols + stride - 1) // stride\n\n        needed_rows = (out_rows - 1) * stride + effective_kernel_rows - in_rows\n        needed_cols = (out_cols - 1) * stride + effective_kernel_cols - in_cols\n\n        pr1 = needed_rows // 2\n        pr2 = needed_rows - pr1\n        pc1 = needed_cols // 2\n        pc2 = needed_cols - pc1\n    else:\n        # Undefined behavior for invalid padding\n        pass\n\n    # Pad the input image\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n\n    padded_rows, padded_cols = X_padded.shape[1], X_padded.shape[2]\n\n    # Calculate output dimensions\n    out_rows = (padded_rows - effective_kernel_rows) // stride + 1\n    out_cols = (padded_cols - effective_kernel_cols) // stride + 1\n\n    # Reshape kernels for GEMM\n    W_reshaped = W.reshape(-1, out_ch)\n\n    # Implement im2col\n    col_buffer = np.zeros((n_ex, out_rows * out_cols, effective_kernel_rows * effective_kernel_cols * in_ch))\n\n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            col_start = j * stride\n            row_end = row_start + effective_kernel_rows\n            col_end = col_start + effective_kernel_cols\n\n            # Extract the patch with dilation\n            patch = X_padded[:, row_start:row_end:dilation + 1, col_start:col_end:dilation + 1, :]\n            col_buffer[:, i * out_cols + j, :] = patch.reshape(n_ex, -1)\n\n    # Perform GEMM\n    # Reshape col_buffer for matrix multiplication: (n_ex * out_rows * out_cols, effective_kernel_rows * effective_kernel_cols * in_ch)\n    col_buffer_reshaped = col_buffer.reshape(n_ex * out_rows * out_cols, -1)\n\n    # Perform the matrix multiplication: (n_ex * out_rows * out_cols, out_ch)\n    output_flat = np.dot(col_buffer_reshaped, W_reshaped)\n\n    # Reshape the output back to the desired shape\n    output = output_flat.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    return output.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.random.rand(2, 10, 10, 3)  # 2 examples, 10x10 image, 3 channels\n    W = np.random.rand(3, 3, 3, 5)    # 3x3 kernel, 3 input channels, 5 output channels\n    stride = 1\n    pad = 1\n    dilation = 0\n\n    result = conv2D(X, W, stride, pad, dilation)\n    print(np.array(result).shape)\n\n    # Example with 'same' padding\n    stride = 2\n    pad = 'same'\n    result_same = conv2D(X, W, stride, pad, dilation)\n    print(np.array(result_same).shape)\n\n    # Example with dilation\n    stride = 1\n    pad = 0\n    dilation = 1\n    result_dilation = conv2D(X, W, stride, pad, dilation)\n    print(np.array(result_dilation).shape)\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # 1. Standardise the data\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n\n    # Determine the number of components to keep\n    n_components = min(n_components, data.shape[1])\n\n    if solver == \"svd\":\n        # 2. Obtain principal directions using SVD\n        U, S, Vt = np.linalg.svd(centred_data, full_matrices=False)\n        # Vt contains the principal directions as rows\n        principal_directions = Vt.T\n        explained_variance = S**2 / (data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # 2. Obtain principal directions using eigen-decomposition\n        covariance_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n        # eigh returns eigenvalues in ascending order\n        # eigenvectors[:, i] is the eigenvector corresponding to eigenvalue[i]\n        principal_directions = eigenvectors\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n\n    # 3. Sort the directions in descending order of importance\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    sorted_principal_directions = principal_directions[:, sorted_indices]\n    sorted_explained_variance = explained_variance[sorted_indices]\n\n    # Keep the first n_components\n    kept_principal_directions = sorted_principal_directions[:, :n_components]\n    kept_explained_variance = sorted_explained_variance[:n_components]\n\n    # 4. Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        direction = kept_principal_directions[:, i]\n        # Find the index of the first non-zero element\n        first_non_zero_index = np.where(direction != 0)[0]\n        if first_non_zero_index.size > 0:\n            first_loading = direction[first_non_zero_index[0]]\n            if first_loading < 0:\n                kept_principal_directions[:, i] *= -1\n\n    # 5. Project the centred data onto the retained directions\n    scores = centred_data @ kept_principal_directions\n\n    # 6. Calculate explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = kept_explained_variance / total_variance\n\n    # Round and convert to required format\n    scores_rounded = np.round(scores, 4)\n    scores_list = scores_rounded.tolist()\n\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4)\n    explained_variance_ratio_list = explained_variance_ratio_rounded.tolist()\n\n    return scores_list, explained_variance_ratio_list\n\nif __name__ == '__main__':\n    # Example Usage\n    data = np.array([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12]\n    ])\n\n    scores_svd, explained_variance_ratio_svd = pca_transform(data, n_components=2, solver=\"svd\")\n    print(\"SVD Solver:\")\n    print(\"Scores:\", scores_svd)\n    print(\"Explained Variance Ratio:\", explained_variance_ratio_svd)\n\n    scores_eigen, explained_variance_ratio_eigen = pca_transform(data, n_components=2, solver=\"eigen\")\n    print(\"\\nEigen Solver:\")\n    print(\"Scores:\", scores_eigen)\n    print(\"Explained Variance Ratio:\", explained_variance_ratio_eigen)\n\n    # Example with n_components > feature dimension\n    scores_svd_all, explained_variance_ratio_svd_all = pca_transform(data, n_components=5, solver=\"svd\")\n    print(\"\\nSVD Solver (all components):\")\n    print(\"Scores:\", scores_svd_all)\n    print(\"Explained Variance Ratio:\", explained_variance_ratio_svd_all)\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    # TODO: complete this function\n    if classifier:\n        # For classification, find the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n\n# Example Usage:\n\n# Classification Leaf\nclassification_leaf = Leaf([0.1, 0.7, 0.2])\npredicted_class = leaf_predict(classification_leaf, classifier=True)\nprint(f\"Classification prediction: {predicted_class}\") # Expected output: 1\n\n# Regression Leaf\nregression_leaf = Leaf(15.7)\npredicted_value = leaf_predict(regression_leaf, classifier=False)\nprint(f\"Regression prediction: {predicted_value}\") # Expected output: 15.7\n\n# Classification Leaf with tie\nclassification_leaf_tie = Leaf([0.5, 0.5, 0.0])\npredicted_class_tie = leaf_predict(classification_leaf_tie, classifier=True)\nprint(f\"Classification prediction with tie: {predicted_class_tie}\") # Expected output: 0\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Write your code below. Remove the pass statement.\n    n_samples, n_features = data.shape\n\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [[round(coord, 4) for coord in centroid]]\n\n    # 1. Initialise the K centroids with the first K samples\n    centroids = data[:K].copy()\n\n    for _ in range(max_iters):\n        # 2a. Assign every sample to the closest centroid\n        distances = np.sqrt(((data[:, np.newaxis, :] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n\n        # 2b. Recompute every centroid\n        new_centroids = np.empty_like(centroids)\n        changed = False\n\n        for i in range(K):\n            cluster_samples = data[labels == i]\n            if len(cluster_samples) > 0:\n                new_centroid = np.mean(cluster_samples, axis=0)\n                if not np.allclose(new_centroid, centroids[i], atol=1e-6):\n                    changed = True\n                new_centroids[i] = new_centroid\n            else:\n                # Keep the centroid unchanged if it loses all samples\n                new_centroids[i] = centroids[i]\n\n        centroids = new_centroids\n\n        # 2c. Stop early if none of the centroids changes any more\n        if not changed:\n            break\n\n    # 3. Sort the final centroids and round\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n\n    return rounded_centroids\n\nif __name__ == '__main__':\n    data = np.array([[1, 1],\n                     [1, 2],\n                     [2, 1],\n                     [8, 8],\n                     [9, 8],\n                     [8, 9]])\n    K = 2\n    result = kmeans(data, K)\n    print(result)\n\n    data_single = np.array([[1, 1],\n                            [2, 2],\n                            [3, 3]])\n    K_single = 1\n    result_single = kmeans(data_single, K_single)\n    print(result_single)\n\n    data_3d = np.array([[1, 1, 1],\n                        [1, 2, 1],\n                        [2, 1, 1],\n                        [8, 8, 8],\n                        [9, 8, 8],\n                        [8, 9, 8],\n                        [0, 0, 0]])\n    K_3d = 3\n    result_3d = kmeans(data_3d, K_3d)\n    print(result_3d)\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    try:\n        arr = np.asarray(data, dtype=float)\n    except ValueError:\n        # Handle cases where data cannot be converted to a float array\n        return -1\n\n    row_sums = arr.sum(axis=1)\n\n    if np.any(row_sums == 0):\n        return -1\n\n    # Use broadcasting to divide each row by its sum\n    normalized_arr = arr / row_sums[:, np.newaxis]\n\n    # Round to 4 decimal places\n    rounded_arr = np.round(normalized_arr, 4)\n\n    return rounded_arr.tolist()\n\nif __name__ == '__main__':\n    # Example usage:\n    data1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    result1 = row_stochastic_matrix(data1)\n    print(f\"Input: {data1}\")\n    print(f\"Result: {result1}\")\n    # Expected output: [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4], [0.3889, 0.4444, 0.1667]] (approximately due to rounding)\n\n    data2 = np.array([[10, 20], [30, 40]])\n    result2 = row_stochastic_matrix(data2)\n    print(f\"\\nInput: {data2}\")\n    print(f\"Result: {result2}\")\n    # Expected output: [[0.3333, 0.6667], [0.4286, 0.5714]] (approximately due to rounding)\n\n    data3 = [[1, 2], [0, 0], [3, 4]]\n    result3 = row_stochastic_matrix(data3)\n    print(f\"\\nInput: {data3}\")\n    print(f\"Result: {result3}\")\n    # Expected output: -1\n\n    data4 = [[0, 0], [0, 0]]\n    result4 = row_stochastic_matrix(data4)\n    print(f\"\\nInput: {data4}\")\n    print(f\"Result: {result4}\")\n    # Expected output: -1\n\n    data5 = [[5]]\n    result5 = row_stochastic_matrix(data5)\n    print(f\"\\nInput: {data5}\")\n    print(f\"Result: {result5}\")\n    # Expected output: [[1.0]]\n\n    data6 = [[0]]\n    result6 = row_stochastic_matrix(data6)\n    print(f\"\\nInput: {data6}\")\n    print(f\"Result: {result6}\")\n    # Expected output: -1\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_space_continuity(space: Space, is_composite: bool) -> bool:\n        if is_composite:\n            if isinstance(space, (Tuple, Dict)):\n                if isinstance(space, Tuple):\n                    sub_spaces = space.spaces\n                else:  # Dict\n                    sub_spaces = space.spaces.values()\n                return all(isinstance(sub_space, Box) for sub_space in sub_spaces)\n            else:\n                # If the flag says it's composite but the space isn't Tuple/Dict,\n                # it cannot be continuous according to the rules.\n                return False\n        else:\n            return isinstance(space, Box)\n\n    cont_action = check_space_continuity(env.action_space, tuple_action)\n    cont_obs = check_space_continuity(env.observation_space, tuple_obs)\n\n    return (cont_action, cont_obs)\n\n# Example Usage:\nif __name__ == '__main__':\n    # Example 1: Both spaces are Box, flags are False\n    env1 = Env(action_space=Box(0, 1, (2,)), observation_space=Box(-1, 1, (4,)))\n    print(f\"Env 1: {is_continuous(env1, tuple_action=False, tuple_obs=False)}\") # Expected: (True, True)\n\n    # Example 2: Action is Discrete, Obs is Box, flags are False\n    env2 = Env(action_space=Discrete(5), observation_space=Box(-1, 1, (4,)))\n    print(f\"Env 2: {is_continuous(env2, tuple_action=False, tuple_obs=False)}\") # Expected: (False, True)\n\n    # Example 3: Action is Tuple of Boxes, Obs is Tuple of Box and Discrete, flags are True\n    env3 = Env(\n        action_space=Tuple([Box(0, 1, (1,)), Box(0, 1, (3,))]),\n        observation_space=Tuple([Box(-1, 1, (2,)), Discrete(10)])\n    )\n    print(f\"Env 3: {is_continuous(env3, tuple_action=True, tuple_obs=True)}\") # Expected: (True, False)\n\n    # Example 4: Action is Dict of Boxes, Obs is Dict of Box and Discrete, flags are True\n    env4 = Env(\n        action_space=Dict({\"a\": Box(0, 1, (1,)), \"b\": Box(0, 1, (3,))}),\n        observation_space=Dict({\"obs1\": Box(-1, 1, (2,)), \"obs2\": Discrete(10)})\n    )\n    print(f\"Env 4: {is_continuous(env4, tuple_action=True, tuple_obs=True)}\") # Expected: (True, False)\n\n    # Example 5: Action is Tuple of Box and Discrete, flag is True. Obs is Box, flag is False.\n    env5 = Env(\n        action_space=Tuple([Box(0, 1, (1,)), Discrete(2)]),\n        observation_space=Box(-1, 1, (4,))\n    )\n    print(f\"Env 5: {is_continuous(env5, tuple_action=True, tuple_obs=False)}\") # Expected: (False, True)\n\n    # Example 6: Action is Box, flag is True (incorrect flag usage, but should handle)\n    env6 = Env(action_space=Box(0, 1, (2,)), observation_space=Box(-1, 1, (4,)))\n    print(f\"Env 6: {is_continuous(env6, tuple_action=True, tuple_obs=False)}\") # Expected: (False, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        if regression:\n            return np.array([], dtype=float)\n        else:\n            return np.array([], dtype=int)\n\n    first_update_shape = updates[0].shape\n    running_pred = np.zeros(first_update_shape)\n\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax row-wise\n        # Subtract max for numerical stability\n        exp_preds = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_preds / np.sum(exp_preds, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\nif __name__ == '__main__':\n    # Example Usage: Regression\n    updates_reg = [\n        np.array([0.1, -0.2, 0.3]),\n        np.array([-0.05, 0.15, -0.1]),\n        np.array([0.02, -0.03, 0.05])\n    ]\n    learning_rate_reg = 0.1\n    prediction_reg = gradient_boosting_predict(updates_reg, learning_rate_reg, regression=True)\n    print(\"Regression Prediction:\", prediction_reg)\n    # Expected output (approximately): [-0.007, 0.038, -0.025]\n\n    # Example Usage: Classification\n    updates_clf = [\n        np.array([[0.1, -0.2, 0.3], [-0.05, 0.15, -0.1]]),\n        np.array([[-0.02, 0.05, -0.03], [0.01, -0.02, 0.01]])\n    ]\n    learning_rate_clf = 0.2\n    prediction_clf = gradient_boosting_predict(updates_clf, learning_rate_clf, regression=False)\n    print(\"Classification Prediction:\", prediction_clf)\n    # Expected output (based on calculations): [2, 1]\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, w_in_channels, out_channels = W.shape\n\n    if in_channels != w_in_channels:\n        raise ValueError(\"Number of input channels in X and W must match.\")\n\n    effective_kernel_width = kernel_width + (kernel_width - 1) * dilation\n\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad_left, pad_right = pad\n    elif pad == \"same\":\n        out_len = math.ceil(signal_length / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        pad_left = math.floor(total_pad / 2)\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"Invalid padding value.\")\n\n    padded_signal_length = signal_length + pad_left + pad_right\n\n    # Calculate output length\n    output_length = math.floor((padded_signal_length - effective_kernel_width) / stride) + 1\n\n    # Pad the input signal\n    padded_X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n\n    for i in range(n_examples):\n        for j in range(output_length):\n            start_index = j * stride\n            end_index = start_index + effective_kernel_width\n            signal_window = padded_X[i, start_index:end_index, :]\n\n            # Reshape the kernel for easier multiplication\n            reshaped_kernel = W.reshape(kernel_width, in_channels * out_channels)\n\n            # Perform the cross-correlation for this window\n            for k in range(out_channels):\n                for l in range(kernel_width):\n                    kernel_element_start = l * (dilation + 1)\n                    if start_index + kernel_element_start < padded_signal_length:\n                        output_volume[i, j, k] += np.sum(\n                            signal_window[kernel_element_start, :] * W[l, :, k]\n                        )\n\n    return output_volume.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([\n        [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]],\n        [[11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n    ])  # (n_examples, signal_length, in_channels) = (2, 5, 2)\n\n    W = np.array([\n        [[0.1, 0.2], [0.3, 0.4]],\n        [[0.5, 0.6], [0.7, 0.8]],\n        [[0.9, 1.0], [1.1, 1.2]]\n    ])  # (kernel_width, in_channels, out_channels) = (3, 2, 2)\n\n    # Example 1: Stride 1, No Padding, No Dilation\n    output1 = conv1D(X, W, stride=1, pad=0, dilation=0)\n    print(\"Example 1 Output (Stride 1, Pad 0, Dilation 0):\")\n    print(output1)\n    print(\"-\" * 20)\n\n    # Example 2: Stride 2, Padding 1, No Dilation\n    output2 = conv1D(X, W, stride=2, pad=1, dilation=0)\n    print(\"Example 2 Output (Stride 2, Pad 1, Dilation 0):\")\n    print(output2)\n    print(\"-\" * 20)\n\n    # Example 3: Stride 1, Padding \"same\", No Dilation\n    output3 = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n    print(\"Example 3 Output (Stride 1, Pad 'same', Dilation 0):\")\n    print(output3)\n    print(\"-\" * 20)\n\n    # Example 4: Stride 1, Padding (1, 2), No Dilation\n    output4 = conv1D(X, W, stride=1, pad=(1, 2), dilation=0)\n    print(\"Example 4 Output (Stride 1, Pad (1, 2), Dilation 0):\")\n    print(output4)\n    print(\"-\" * 20)\n\n    # Example 5: Stride 1, No Padding, Dilation 1\n    output5 = conv1D(X, W, stride=1, pad=0, dilation=1)\n    print(\"Example 5 Output (Stride 1, Pad 0, Dilation 1):\")\n    print(output5)\n    print(\"-\" * 20)\n\n    # Example 6: Stride 2, Padding \"same\", Dilation 1\n    output6 = conv1D(X, W, stride=2, pad=\"same\", dilation=1)\n    print(\"Example 6 Output (Stride 2, Pad 'same', Dilation 1):\")\n    print(output6)\n    print(\"-\" * 20)\n```"}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n\n    if isinstance(y, list):\n        y = np.array(y)\n\n    n = len(y)\n    unique_classes, counts = np.unique(y, return_counts=True)\n    probabilities = counts / n\n    gini_impurity = 1.0 - np.sum(probabilities**2)\n\n    return round(gini_impurity, 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    labels1 = [0, 1, 0, 2, 1, 0]\n    gini_value1 = gini(labels1)\n    print(f\"Gini impurity of {labels1}: {gini_value1}\")\n\n    labels2 = np.array([0, 0, 0, 0])\n    gini_value2 = gini(labels2)\n    print(f\"Gini impurity of {labels2}: {gini_value2}\")\n\n    labels3 = [1, 2, 3, 4]\n    gini_value3 = gini(labels3)\n    print(f\"Gini impurity of {labels3}: {gini_value3}\")\n\n    labels4 = []\n    gini_value4 = gini(labels4)\n    print(f\"Gini impurity of {labels4}: {gini_value4}\")\n\n    labels5 = [0, 0, 1, 1]\n    gini_value5 = gini(labels5)\n    print(f\"Gini impurity of {labels5}: {gini_value5}\")\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    m, n = X.shape\n\n    # Check for inconsistent data\n    if m != y.shape[0]:\n        return -1\n\n    # 1. Initialise theta and b\n    theta = np.zeros(n)\n    b = 0\n\n    # 2. Gradient descent updates\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X @ theta + b\n\n        # Calculate gradients\n        dw = (2/m) * X.T @ (y_pred - y)\n        db = (2/m) * np.sum(y_pred - y)\n\n        # Update parameters\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n\n    # 3. Return the learned parameters rounded to 4 decimal places\n    theta_list = [round(w, 4) for w in theta]\n    b_rounded = round(b, 4)\n\n    return theta_list, b_rounded\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple 1D case\n    X_simple = np.array([[1], [2], [3], [4], [5]])\n    y_simple = np.array([2, 4, 5, 4, 5])\n    weights_simple, bias_simple = linear_regression_gd(X_simple, y_simple)\n    print(f\"Simple 1D case: Weights: {weights_simple}, Bias: {bias_simple}\")\n\n    # Multiple features case\n    X_multi = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])\n    y_multi = np.array([3, 5, 7, 9, 11])\n    weights_multi, bias_multi = linear_regression_gd(X_multi, y_multi)\n    print(f\"Multiple features case: Weights: {weights_multi}, Bias: {bias_multi}\")\n\n    # Inconsistent data case\n    X_inconsistent = np.array([[1], [2], [3]])\n    y_inconsistent = np.array([1, 2])\n    result_inconsistent = linear_regression_gd(X_inconsistent, y_inconsistent)\n    print(f\"Inconsistent data case: {result_inconsistent}\")\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Write your code here\n    try:\n        arr = np.array(X)\n    except ValueError:\n        # Handle cases where the input is not a valid 2D array\n        return False\n\n    # Check if the array is square\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n\n    # Check for symmetry using numpy.allclose\n    return np.allclose(arr, arr.T, atol=1e-8)\n\nif __name__ == '__main__':\n    # Example usage:\n    symmetric_matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n    print(f\"Is symmetric_matrix symmetric? {is_symmetric(symmetric_matrix)}\")\n\n    non_symmetric_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(f\"Is non_symmetric_matrix symmetric? {is_symmetric(non_symmetric_matrix)}\")\n\n    non_square_matrix = [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n    ]\n    print(f\"Is non_square_matrix symmetric? {is_symmetric(non_square_matrix)}\")\n\n    empty_matrix = []\n    print(f\"Is empty_matrix symmetric? {is_symmetric(empty_matrix)}\")\n\n    single_element_matrix = [[5]]\n    print(f\"Is single_element_matrix symmetric? {is_symmetric(single_element_matrix)}\")\n\n    float_symmetric_matrix = [\n        [1.0, 2.000000001],\n        [2.0, 3.0]\n    ]\n    print(f\"Is float_symmetric_matrix symmetric? {is_symmetric(float_symmetric_matrix)}\")\n\n    float_non_symmetric_matrix = [\n        [1.0, 2.0000001],\n        [2.0, 3.0]\n    ]\n    print(f\"Is float_non_symmetric_matrix symmetric? {is_symmetric(float_non_symmetric_matrix)}\")\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradient of the logistic loss for binary classification.\n\n    Args:\n        y: A list of binary class labels (0 or 1).\n        f: A list of current prediction scores (floats).\n\n    Returns:\n        A list of negative gradients rounded to four decimal places,\n        or -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    if not all(label in [0, 1] for label in y):\n        return -1\n\n    y_prime = np.array([2 * label - 1 for label in y])\n    f_array = np.array(f)\n\n    # Calculate the negative gradient g_i = y'_i / (1 + exp(y'_i * f_i))\n    g = y_prime / (1 + np.exp(y_prime * f_array))\n\n    # Round the results to four decimal places\n    g_rounded = [round(val, 4) for val in g]\n\n    return g_rounded\n\nif __name__ == '__main__':\n    # Example usage:\n    y_labels = [0, 1, 0, 1]\n    f_scores = [0.5, -0.2, 1.0, -0.8]\n    gradients = logistic_negative_gradient(y_labels, f_scores)\n    print(f\"Negative gradients: {gradients}\")\n\n    y_labels_invalid = [0, 1, 2, 1]\n    f_scores_invalid = [0.5, -0.2, 1.0, -0.8]\n    gradients_invalid = logistic_negative_gradient(y_labels_invalid, f_scores_invalid)\n    print(f\"Negative gradients with invalid labels: {gradients_invalid}\")\n```"}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    x = np.asarray(x)\n    result = np.zeros_like(x, dtype=float)\n\n    if order == 0:\n        result[x > 0] = scale * x[x > 0]\n        result[x <= 0] = scale * alpha * (np.exp(x[x <= 0]) - 1)\n    elif order == 1:\n        result[x > 0] = scale\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    elif order == 2:\n        result[x > 0] = 0\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    rounded_result = np.round(result, 4)\n\n    if x.shape == ():\n        return rounded_result.item()\n    else:\n        return rounded_result.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    x_scalar = 0.5\n    x_list = [-1.0, 0.0, 1.0, 2.5]\n    x_array = np.array([[-2.0, -0.5], [0.0, 3.0]])\n\n    print(f\"SELU({x_scalar}): {selu(x_scalar, order=0)}\")\n    print(f\"SELU'({x_scalar}): {selu(x_scalar, order=1)}\")\n    print(f\"SELU''({x_scalar}): {selu(x_scalar, order=2)}\")\n    print(\"-\" * 20)\n\n    print(f\"SELU({x_list}): {selu(x_list, order=0)}\")\n    print(f\"SELU'({x_list}): {selu(x_list, order=1)}\")\n    print(f\"SELU''({x_list}): {selu(x_list, order=2)}\")\n    print(\"-\" * 20)\n\n    print(f\"SELU({x_array}): {selu(x_array, order=0)}\")\n    print(f\"SELU'({x_array}): {selu(x_array, order=1)}\")\n    print(f\"SELU''({x_array}): {selu(x_array, order=2)}\")\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n\n    # 1. Initialize predictions with the mean of the targets\n    y_pred = np.full(n_samples, np.mean(y))\n\n    # Sort samples by x value to efficiently find split points\n    sorted_indices = np.argsort(x)\n    sorted_x = x[sorted_indices]\n    sorted_y = y[sorted_indices]\n    sorted_y_pred = y_pred[sorted_indices]\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = sorted_y - sorted_y_pred\n\n        # Find potential split points\n        potential_splits = []\n        for i in range(n_samples - 1):\n            if sorted_x[i] != sorted_x[i+1]:\n                potential_splits.append((sorted_x[i] + sorted_x[i+1]) / 2)\n\n        best_split = None\n        min_sse = float('inf')\n        best_stump_pred = np.zeros(n_samples)\n\n        if not potential_splits:\n            # If all feature values are identical, the stump predicts the global mean residual\n            global_mean_residual = np.mean(residuals)\n            stump_pred = np.full(n_samples, global_mean_residual)\n            best_stump_pred = stump_pred\n        else:\n            for split_point in potential_splits:\n                left_indices = sorted_x <= split_point\n                right_indices = ~left_indices\n\n                if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue # Skip splits that result in empty left or right sides\n\n                mean_residual_left = np.mean(residuals[left_indices])\n                mean_residual_right = np.mean(residuals[right_indices])\n\n                stump_pred = np.zeros(n_samples)\n                stump_pred[left_indices] = mean_residual_left\n                stump_pred[right_indices] = mean_residual_right\n\n                # Calculate sum of squared errors for this split\n                sse = np.sum((residuals - stump_pred)**2)\n\n                if sse < min_sse:\n                    min_sse = sse\n                    best_split = split_point\n                    best_stump_pred = stump_pred\n\n        # Update the running prediction\n        sorted_y_pred += learning_rate * best_stump_pred\n\n    # Reorder predictions back to the original sample order\n    final_y_pred = np.zeros(n_samples)\n    final_y_pred[sorted_indices] = sorted_y_pred\n\n    # Return rounded predictions as a Python list\n    return np.round(final_y_pred, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    x = [1.0, 2.0, 3.0, 4.0, 5.0]\n    y = [2.0, 3.0, 4.0, 5.0, 6.0]\n    n_estimators = 10\n    learning_rate = 0.1\n\n    predictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\n    print(f\"Predictions: {predictions}\")\n\n    x2 = [1.0, 1.0, 1.0, 1.0]\n    y2 = [2.0, 3.0, 4.0, 5.0]\n    predictions2 = gradient_boosting_1d(x2, y2, n_estimators, learning_rate)\n    print(f\"Predictions (all x same): {predictions2}\")\n\n    x3 = [1.0, 2.0, 3.0, 4.0, 5.0]\n    y3 = [10.0, 8.0, 6.0, 4.0, 2.0]\n    predictions3 = gradient_boosting_1d(x3, y3, n_estimators, learning_rate)\n    print(f\"Predictions (decreasing y): {predictions3}\")\n```"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # TODO: implement the function\n    epsilon = 1e-8\n\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Update the running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Update the parameters\n    w_next = w - (learning_rate * grad) / np.sqrt(Eg_next + epsilon)\n\n    # Round and convert to list\n    w_next_list = np.round(w_next, 4).tolist()\n    Eg_next_list = np.round(Eg_next, 4).tolist()\n\n    return w_next_list, Eg_next_list\n\nif __name__ == '__main__':\n    # Example usage\n    w = np.array([1.0, 2.0, 3.0])\n    grad = np.array([0.1, -0.2, 0.3])\n    learning_rate = 0.01\n    rho = 0.9\n\n    # First update (Eg is None)\n    w_next1, Eg_next1 = rmsprop_update(w, grad, learning_rate=learning_rate, rho=rho)\n    print(f\"First update:\")\n    print(f\"Updated parameters: {w_next1}\")\n    print(f\"Updated Eg: {Eg_next1}\")\n\n    # Second update (using the Eg from the first update)\n    w_next2, Eg_next2 = rmsprop_update(np.array(w_next1), np.array([0.05, 0.1, -0.15]), Eg=np.array(Eg_next1), learning_rate=learning_rate, rho=rho)\n    print(f\"\\nSecond update:\")\n    print(f\"Updated parameters: {w_next2}\")\n    print(f\"Updated Eg: {Eg_next2}\")\n\n    # Example with multi-dimensional arrays\n    w_md = np.array([[1.0, 2.0], [3.0, 4.0]])\n    grad_md = np.array([[0.1, -0.2], [0.3, -0.4]])\n\n    w_next_md, Eg_next_md = rmsprop_update(w_md, grad_md, learning_rate=learning_rate, rho=rho)\n    print(f\"\\nMulti-dimensional example:\")\n    print(f\"Updated parameters: {w_next_md}\")\n    print(f\"Updated Eg: {Eg_next_md}\")\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    result = []\n\n    if derivative:\n        for val in x:\n            if val >= 0:\n                result.append(1.0)\n            else:\n                result.append(alpha * np.exp(val))\n    else:\n        for val in x:\n            if val >= 0:\n                result.append(val)\n            else:\n                result.append(alpha * (np.exp(val) - 1))\n\n    return [round(val, 4) for val in result]\n\nif __name__ == '__main__':\n    # Example usage\n    x_values = [-2.0, -1.0, 0.0, 1.0, 2.0]\n    alpha_val = 0.5\n\n    # Compute ELU activation\n    elu_activation = elu(x_values, alpha=alpha_val)\n    print(f\"ELU activation for {x_values} with alpha={alpha_val}: {elu_activation}\")\n\n    # Compute ELU gradient\n    elu_gradient = elu(x_values, alpha=alpha_val, derivative=True)\n    print(f\"ELU gradient for {x_values} with alpha={alpha_val}: {elu_gradient}\")\n\n    # Example with default alpha\n    x_values_default = [-1.5, 0.5, 1.5]\n    elu_activation_default = elu(x_values_default)\n    print(f\"ELU activation for {x_values_default} with default alpha: {elu_activation_default}\")\n\n    elu_gradient_default = elu(x_values_default, derivative=True)\n    print(f\"ELU gradient for {x_values_default} with default alpha: {elu_gradient_default}\")\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    stats = {}\n\n    def analyze_data(data_list, name):\n        stats[f'tuple_{name}'] = any(isinstance(item, (list, tuple, np.ndarray)) for item in data_list)\n\n        if not data_list:\n            stats[f'multidim_{name}'] = False\n            stats[f'{name}_dim'] = 0\n            stats[f'continuous_{name}'] = False\n            stats[f'n_{name}_per_dim'] = []\n            stats[f'{name}_ids'] = []\n            return\n\n        first_element = data_list[0]\n        if isinstance(first_element, (list, tuple, np.ndarray)):\n            stats[f'multidim_{name}'] = len(first_element) > 1\n            stats[f'{name}_dim'] = len(first_element)\n            dim = len(first_element)\n            flattened_data = [item for sublist in data_list for item in (sublist if isinstance(sublist, (list, tuple, np.ndarray)) else [sublist])]\n        else:\n            stats[f'multidim_{name}'] = False\n            stats[f'{name}_dim'] = 1\n            dim = 1\n            flattened_data = data_list\n\n        stats[f'continuous_{name}'] = any(isinstance(item, float) and not item.is_integer() for item in flattened_data)\n\n        if dim > 0:\n            unique_values_per_dim = [set() for _ in range(dim)]\n            for item in data_list:\n                if isinstance(item, (list, tuple, np.ndarray)):\n                    for i in range(dim):\n                        unique_values_per_dim[i].add(item[i])\n                else:\n                    unique_values_per_dim[0].add(item)\n\n            stats[f'n_{name}_per_dim'] = [len(s) for s in unique_values_per_dim]\n            stats[f'{name}_ids'] = [sorted(list(s)) for s in unique_values_per_dim]\n        else:\n            stats[f'n_{name}_per_dim'] = []\n            stats[f'{name}_ids'] = []\n\n\n    analyze_data(actions, 'actions')\n    analyze_data(observations, 'observations')\n\n    return stats\n\nif __name__ == '__main__':\n    # Example 1 from the problem description\n    actions1 = [(0, 1), (1, 0), (1, 1)]\n    observations1 = [10.0, 11.5, 12.0]\n    stats1 = env_stats(actions1, observations1)\n    print(\"Example 1:\")\n    print(stats1)\n    print(\"-\" * 20)\n\n    # Example 2: Scalar actions, multi-dimensional observations\n    actions2 = [0, 1, 0, 1]\n    observations2 = [[1, 2, 3], [4, 5, 6], [1, 2, 3]]\n    stats2 = env_stats(actions2, observations2)\n    print(\"Example 2:\")\n    print(stats2)\n    print(\"-\" * 20)\n\n    # Example 3: Continuous actions, discrete observations\n    actions3 = [0.1, 0.2, 0.1, 0.3]\n    observations3 = [1, 2, 1, 3]\n    stats3 = env_stats(actions3, observations3)\n    print(\"Example 3:\")\n    print(stats3)\n    print(\"-\" * 20)\n\n    # Example 4: Empty lists\n    actions4 = []\n    observations4 = []\n    stats4 = env_stats(actions4, observations4)\n    print(\"Example 4:\")\n    print(stats4)\n    print(\"-\" * 20)\n\n    # Example 5: Numpy arrays\n    actions5 = [np.array([0, 1]), np.array([1, 0]), np.array([1, 1])]\n    observations5 = [np.array([10.0]), np.array([11.5]), np.array([12.0])]\n    stats5 = env_stats(actions5, observations5)\n    print(\"Example 5:\")\n    print(stats5)\n    print(\"-\" * 20)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    class Node:\n        def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    class RegressionTree:\n        def __init__(self, max_depth):\n            self.max_depth = max_depth\n            self.root = None\n\n        def _mse(self, y):\n            if len(y) == 0:\n                return 0\n            return np.mean((y - np.mean(y))**2)\n\n        def _find_best_split(self, X, y):\n            best_mse = float('inf')\n            best_feature_index = None\n            best_threshold = None\n\n            n_samples, n_features = X.shape\n\n            for feature_index in range(n_features):\n                thresholds = np.unique(X[:, feature_index])\n                for threshold in thresholds:\n                    left_indices = np.where(X[:, feature_index] <= threshold)[0]\n                    right_indices = np.where(X[:, feature_index] > threshold)[0]\n\n                    if len(left_indices) == 0 or len(right_indices) == 0:\n                        continue\n\n                    left_y = y[left_indices]\n                    right_y = y[right_indices]\n\n                    current_mse = (len(left_y) * self._mse(left_y) + len(right_y) * self._mse(right_y)) / n_samples\n\n                    if current_mse < best_mse:\n                        best_mse = current_mse\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n\n            return best_feature_index, best_threshold\n\n        def _build_tree(self, X, y, depth):\n            n_samples = len(y)\n            if depth >= self.max_depth or n_samples == 0 or self._mse(y) == 0:\n                return Node(value=np.mean(y))\n\n            feature_index, threshold = self._find_best_split(X, y)\n\n            if feature_index is None:\n                return Node(value=np.mean(y))\n\n            left_indices = np.where(X[:, feature_index] <= threshold)[0]\n            right_indices = np.where(X[:, feature_index] > threshold)[0]\n\n            left_subtree = self._build_tree(X[left_indices], y[left_indices], depth + 1)\n            right_subtree = self._build_tree(X[right_indices], y[right_indices], depth + 1)\n\n            return Node(feature_index=feature_index, threshold=threshold, left=left_subtree, right=right_subtree)\n\n        def fit(self, X, y):\n            self.root = self._build_tree(X, y, 0)\n\n        def _predict_single(self, x, node):\n            if node.value is not None:\n                return node.value\n\n            if x[node.feature_index] <= node.threshold:\n                return self._predict_single(x, node.left)\n            else:\n                return self._predict_single(x, node.right)\n\n        def predict(self, X):\n            return np.array([self._predict_single(x, self.root) for x in X])\n\n    # Initialize prediction with the mean of training targets\n    initial_prediction = np.mean(y_train)\n    y_pred_train = np.full_like(y_train, initial_prediction, dtype=float)\n    y_pred_test = np.full(X_test.shape[0], initial_prediction, dtype=float)\n\n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of squared-error loss)\n        residuals = y_train - y_pred_train\n\n        # Fit a regression tree to the residuals\n        tree = RegressionTree(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n\n        # Update predictions\n        y_pred_train += learning_rate * tree.predict(X_train)\n        y_pred_test += learning_rate * tree.predict(X_test)\n\n    # Round predictions and convert to list\n    final_predictions = [round(pred, 4) for pred in y_pred_test]\n\n    return final_predictions\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n    y_train = np.array([10, 20, 30, 40, 50])\n    X_test = np.array([[2, 3], [6, 7], [11, 12]])\n\n    predictions = gbdt_regression(X_train, y_train, X_test, n_estimators=5, learning_rate=0.2, max_depth=2)\n    print(predictions)\n\n    X_train_complex = np.random.rand(100, 5)\n    y_train_complex = 2 * X_train_complex[:, 0] + 3 * X_train_complex[:, 2]**2 + np.random.randn(100) * 0.5\n    X_test_complex = np.random.rand(20, 5)\n\n    predictions_complex = gbdt_regression(X_train_complex, y_train_complex, X_test_complex, n_estimators=20, learning_rate=0.1, max_depth=3)\n    print(predictions_complex)\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculates the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Args:\n        X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n                        If 1D, it's treated as (n_samples, 1).\n        mean (np.ndarray): The mean vector of the distribution (length n_features).\n        cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n                          Must be positive-definite.\n\n    Returns:\n        list: A Python list containing the PDF values for each data point in X,\n              rounded to four decimal places.\n    \"\"\"\n    # Ensure X is at least 2D\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n\n    # Calculate the determinant of the covariance matrix\n    # Using numpy.linalg.det for simplicity, as implementing determinant from scratch is complex\n    det_cov = np.linalg.det(cov)\n\n    # Calculate the inverse of the covariance matrix\n    # Using numpy.linalg.inv for simplicity, as implementing matrix inverse from scratch is complex\n    inv_cov = np.linalg.inv(cov)\n\n    # Calculate the normalization constant\n    normalization_constant = 1.0 / (math.sqrt((2 * math.pi)**n_features * det_cov))\n\n    pdf_values = []\n    for i in range(n_samples):\n        x_minus_mean = X[i] - mean\n        # Calculate the Mahalanobis distance squared: (x - mu)^T * Sigma^-1 * (x - mu)\n        mahalanobis_squared = np.dot(np.dot(x_minus_mean.T, inv_cov), x_minus_mean)\n\n        # Calculate the exponential term\n        exponential_term = math.exp(-0.5 * mahalanobis_squared)\n\n        # Calculate the PDF value\n        pdf_value = normalization_constant * exponential_term\n        pdf_values.append(round(pdf_value, 4))\n\n    return pdf_values\n\nif __name__ == '__main__':\n    # Example Usage:\n    # 2D case\n    X_2d = np.array([[0.5, 1.0], [1.5, 2.0], [-0.5, 0.0]])\n    mean_2d = np.array([1.0, 1.5])\n    cov_2d = np.array([[0.5, 0.1], [0.1, 0.3]])\n\n    pdf_values_2d = multivariate_gaussian_pdf(X_2d, mean_2d, cov_2d)\n    print(\"PDF values (2D):\", pdf_values_2d)\n\n    # 1D case (treated as (n_samples, 1))\n    X_1d = np.array([0.0, 1.0, 2.0])\n    mean_1d = np.array([1.0])\n    cov_1d = np.array([[0.5]])\n\n    pdf_values_1d = multivariate_gaussian_pdf(X_1d, mean_1d, cov_1d)\n    print(\"PDF values (1D):\", pdf_values_1d)\n\n    # Another 2D example\n    X_2d_2 = np.array([[0, 0], [1, 1]])\n    mean_2d_2 = np.array([0, 0])\n    cov_2d_2 = np.array([[1, 0], [0, 1]]) # Identity matrix\n\n    pdf_values_2d_2 = multivariate_gaussian_pdf(X_2d_2, mean_2d_2, cov_2d_2)\n    print(\"PDF values (2D, Identity Cov):\", pdf_values_2d_2)\n```"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    X_train = X.copy()\n    X_new_pred = X_new.copy()\n\n    if fit_intercept:\n        X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n        X_new_pred = np.hstack([np.ones((X_new_pred.shape[0], 1)), X_new_pred])\n\n    M = X_train.shape[1]\n\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    elif isinstance(mu, np.ndarray) and mu.ndim == 0:\n        mu = np.full(M, mu.item())\n    elif isinstance(mu, np.ndarray) and mu.ndim == 1 and mu.shape[0] != M:\n        raise ValueError(f\"mu must be a scalar or a vector of length {M}\")\n\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, np.ndarray) and V.ndim == 0:\n        V_inv = np.eye(M) / V.item()\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        if V.shape[0] != M:\n            raise ValueError(f\"V (diagonal) must be a vector of length {M}\")\n        V_inv = np.diag(1.0 / V)\n    elif isinstance(V, np.ndarray) and V.ndim == 2:\n        if V.shape != (M, M):\n            raise ValueError(f\"V (matrix) must be a {M}x{M} matrix\")\n        V_inv = np.linalg.inv(V)\n    else:\n        raise ValueError(\"Invalid type for V\")\n\n    XTX = X_train.T @ X_train\n    XTy = X_train.T @ y\n\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n\n    y_pred = X_new_pred @ mu_p\n\n    return [round(float(val), 4) for val in y_pred]\n\n```"}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric. Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n\n    for val in actual:\n        if val < 0:\n            return -1\n    for val in predicted:\n        if val < 0:\n            return -1\n\n    n = len(actual)\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += (np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2\n\n    rmsle = np.sqrt(sum_of_squares / n)\n\n    return round(rmsle, 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    actual1 = [1.0, 2.0, 3.0, 4.0]\n    predicted1 = [1.1, 2.2, 3.3, 4.4]\n    print(f\"RMSLE for actual1 and predicted1: {root_mean_squared_log_error(actual1, predicted1)}\")\n\n    actual2 = [0.5, 1.5, 2.5]\n    predicted2 = [0.6, 1.6, 2.6]\n    print(f\"RMSLE for actual2 and predicted2: {root_mean_squared_log_error(actual2, predicted2)}\")\n\n    actual3 = [1.0, 2.0]\n    predicted3 = [1.1, 2.2, 3.3] # Different length\n    print(f\"RMSLE for actual3 and predicted3 (different length): {root_mean_squared_log_error(actual3, predicted3)}\")\n\n    actual4 = [1.0, -2.0] # Negative value\n    predicted4 = [1.1, 2.2]\n    print(f\"RMSLE for actual4 and predicted4 (negative value): {root_mean_squared_log_error(actual4, predicted4)}\")\n\n    actual5 = [1.0, 2.0]\n    predicted5 = [1.1, -2.2] # Negative value\n    print(f\"RMSLE for actual5 and predicted5 (negative value): {root_mean_squared_log_error(actual5, predicted5)}\")\n\n    actual6 = [0.0, 0.0]\n    predicted6 = [0.0, 0.0]\n    print(f\"RMSLE for actual6 and predicted6: {root_mean_squared_log_error(actual6, predicted6)}\")\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    if symmetric:\n        N = window_len\n        n = np.arange(N)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n    else:\n        N = window_len + 1\n        n = np.arange(N)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n        window = window[:-1]\n\n    return [round(x, 4) for x in window.tolist()]\n\nif __name__ == '__main__':\n    # Example Usage:\n    print(\"Symmetric Hann window of length 5:\")\n    print(hann(5, symmetric=True))\n\n    print(\"\\nPeriodic Hann window of length 5:\")\n    print(hann(5, symmetric=False))\n\n    print(\"\\nHann window of length 1:\")\n    print(hann(1))\n\n    print(\"\\nHann window of length 0:\")\n    print(hann(0))\n\n    print(\"\\nHann window of length -3:\")\n    print(hann(-3))\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    if len(shape) == 4:\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n\n    return fan_in, fan_out\n\nif __name__ == '__main__':\n    # Example usage:\n    dense_shape = (128, 64)\n    conv_shape = (32, 3, 3, 3)\n    embedding_shape = (10000, 256)\n\n    fan_in_dense, fan_out_dense = glorot_fan(dense_shape)\n    print(f\"Dense layer shape {dense_shape}: fan_in={fan_in_dense}, fan_out={fan_out_dense}\")\n\n    fan_in_conv, fan_out_conv = glorot_fan(conv_shape)\n    print(f\"Conv layer shape {conv_shape}: fan_in={fan_in_conv}, fan_out={fan_out_conv}\")\n\n    fan_in_embedding, fan_out_embedding = glorot_fan(embedding_shape)\n    print(f\"Embedding layer shape {embedding_shape}: fan_in={fan_in_embedding}, fan_out={fan_out_embedding}\")\n\n    # Example with a higher-dimensional tensor\n    high_dim_shape = (10, 20, 30, 40, 50)\n    fan_in_high_dim, fan_out_high_dim = glorot_fan(high_dim_shape)\n    print(f\"High-dim shape {high_dim_shape}: fan_in={fan_in_high_dim}, fan_out={fan_out_high_dim}\")\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y_np)\n        return [round(mean_y, 4)] * len(y_np)\n\n    y_hat = np.full_like(y_np, np.mean(y_np))\n\n    for t in range(n_estimators):\n        residuals = y_np - y_hat\n\n        # Fit OLS linear model to residuals\n        # Add a column of ones for the intercept\n        X_with_intercept = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n\n        # Solve for coefficients using the normal equation: beta = (X^T X)^-1 X^T y\n        # Handle potential singularity by adding a small ridge term\n        XTX = X_with_intercept.T @ X_with_intercept\n        XTy = X_with_intercept.T @ residuals\n        try:\n            beta = np.linalg.solve(XTX, XTy)\n        except np.linalg.LinAlgError:\n            # Add a small ridge term for stability\n            beta = np.linalg.solve(XTX + np.eye(XTX.shape[0]) * 1e-6, XTy)\n\n\n        # Obtain weak-learner prediction\n        h_t_X = X_with_intercept @ beta\n\n        # Update overall prediction\n        y_hat = y_hat + learning_rate * h_t_X\n\n    return [round(pred, 4) for pred in y_hat.tolist()]\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\n    y_train = [2.0, 3.0, 4.0, 5.0]\n\n    predictions = gradient_boosting_regressor(X_train, y_train, n_estimators=5, learning_rate=0.5)\n    print(f\"Predictions with n_estimators=5, learning_rate=0.5: {predictions}\")\n\n    predictions_zero_estimators = gradient_boosting_regressor(X_train, y_train, n_estimators=0, learning_rate=0.5)\n    print(f\"Predictions with n_estimators=0: {predictions_zero_estimators}\")\n\n    predictions_zero_learning_rate = gradient_boosting_regressor(X_train, y_train, n_estimators=5, learning_rate=0.0)\n    print(f\"Predictions with learning_rate=0.0: {predictions_zero_learning_rate}\")\n\n    # Another example\n    X_train_2 = [[1.0], [2.0], [3.0]]\n    y_train_2 = [10.0, 12.0, 14.0]\n    predictions_2 = gradient_boosting_regressor(X_train_2, y_train_2, n_estimators=3, learning_rate=0.8)\n    print(f\"Predictions for second example: {predictions_2}\")\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n\n    is_scalar = not isinstance(x, (list, np.ndarray))\n    x_np = np.asarray(x, dtype=float)\n\n    sigma_x = 1 / (1 + np.exp(-x_np))\n\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    else:  # order == 2\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n\n    rounded_result = np.round(result, 4)\n\n    if is_scalar:\n        return float(rounded_result)\n    else:\n        return rounded_result.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    scalar_input = 0.5\n    list_input = [-1, 0, 1, 2]\n    ndarray_input = np.array([[1, 2], [-1, -2]])\n\n    # Order 0: Sigmoid function\n    print(f\"Sigmoid(0.5, order=0): {sigmoid(scalar_input, order=0)}\")\n    print(f\"Sigmoid([-1, 0, 1, 2], order=0): {sigmoid(list_input, order=0)}\")\n    print(f\"Sigmoid([[1, 2], [-1, -2]], order=0):\\n{sigmoid(ndarray_input, order=0)}\")\n\n    print(\"-\" * 20)\n\n    # Order 1: First derivative\n    print(f\"Sigmoid(0.5, order=1): {sigmoid(scalar_input, order=1)}\")\n    print(f\"Sigmoid([-1, 0, 1, 2], order=1): {sigmoid(list_input, order=1)}\")\n    print(f\"Sigmoid([[1, 2], [-1, -2]], order=1):\\n{sigmoid(ndarray_input, order=1)}\")\n\n    print(\"-\" * 20)\n\n    # Order 2: Second derivative\n    print(f\"Sigmoid(0.5, order=2): {sigmoid(scalar_input, order=2)}\")\n    print(f\"Sigmoid([-1, 0, 1, 2], order=2): {sigmoid(list_input, order=2)}\")\n    print(f\"Sigmoid([[1, 2], [-1, -2]], order=2):\\n{sigmoid(ndarray_input, order=2)}\")\n\n    print(\"-\" * 20)\n\n    # Invalid order\n    print(f\"Sigmoid(0.5, order=3): {sigmoid(scalar_input, order=3)}\")\n    print(f\"Sigmoid([-1, 0, 1, 2], order=4): {sigmoid(list_input, order=4)}\")\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n\n    if y.ndim != 1:\n        raise ValueError(\"Input 'y' must be a 1-D sequence.\")\n\n    if np.any(y < 0):\n        raise ValueError(\"Input 'y' must contain non-negative integers.\")\n\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n\n    n = len(y)\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n\n    return categorical.tolist()\n\nif __name__ == '__main__':\n    # Example 1: Basic usage with inferred num_classes\n    y1 = [0, 1, 2, 0, 1]\n    one_hot1 = to_categorical(y1)\n    print(f\"Input: {y1}\")\n    print(f\"Output: {one_hot1}\")\n    # Expected output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]]\n\n    print(\"-\" * 20)\n\n    # Example 2: Basic usage with specified num_classes\n    y2 = np.array([1, 0, 3, 2])\n    one_hot2 = to_categorical(y2, num_classes=4)\n    print(f\"Input: {y2}\")\n    print(f\"Output: {one_hot2}\")\n    # Expected output: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]\n\n    print(\"-\" * 20)\n\n    # Example 3: num_classes is too small\n    y3 = [0, 1, 2]\n    one_hot3 = to_categorical(y3, num_classes=2)\n    print(f\"Input: {y3}\")\n    print(f\"Output: {one_hot3}\")\n    # Expected output: -1\n\n    print(\"-\" * 20)\n\n    # Example 4: Empty input\n    y4 = []\n    one_hot4 = to_categorical(y4)\n    print(f\"Input: {y4}\")\n    print(f\"Output: {one_hot4}\")\n    # Expected output: []\n\n    print(\"-\" * 20)\n\n    # Example 5: Single element input\n    y5 = [5]\n    one_hot5 = to_categorical(y5)\n    print(f\"Input: {y5}\")\n    print(f\"Output: {one_hot5}\")\n    # Expected output: [[0, 0, 0, 0, 0, 1]]\n\n    print(\"-\" * 20)\n\n    # Example 6: Single element input with specified num_classes\n    y6 = [2]\n    one_hot6 = to_categorical(y6, num_classes=5)\n    print(f\"Input: {y6}\")\n    print(f\"Output: {one_hot6}\")\n    # Expected output: [[0, 0, 1, 0, 0]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_count = int(min_sup * num_transactions)\n\n    # Helper function to count support of itemsets\n    def count_support(candidates, transactions):\n        counts = {}\n        for transaction in transactions:\n            for candidate in candidates:\n                if all(item in transaction for item in candidate):\n                    counts[candidate] = counts.get(candidate, 0) + 1\n        return counts\n\n    # Step 1: Find frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    frequent_itemsets = []\n    current_frequent_itemsets = []\n    for item, count in item_counts.items():\n        if count >= min_count:\n            current_frequent_itemsets.append((item,))\n\n    current_frequent_itemsets.sort()\n    frequent_itemsets.extend(current_frequent_itemsets)\n\n    k = 2\n    while current_frequent_itemsets:\n        # Step 2: Generate size-k candidates\n        candidates = set()\n        for i in range(len(current_frequent_itemsets)):\n            for j in range(i + 1, len(current_frequent_itemsets)):\n                itemset1 = set(current_frequent_itemsets[i])\n                itemset2 = set(current_frequent_itemsets[j])\n                union_set = itemset1.union(itemset2)\n                if len(union_set) == k:\n                    candidate = tuple(sorted(list(union_set)))\n                    candidates.add(candidate)\n\n        # Prune candidates with infrequent subsets\n        pruned_candidates = set()\n        for candidate in candidates:\n            is_valid = True\n            for subset_items in itertools.combinations(candidate, k - 1):\n                subset = tuple(sorted(subset_items))\n                if subset not in current_frequent_itemsets:\n                    is_valid = False\n                    break\n            if is_valid:\n                pruned_candidates.add(candidate)\n\n        # Count support for pruned candidates\n        candidate_counts = count_support(pruned_candidates, transactions)\n\n        # Keep frequent candidates\n        current_frequent_itemsets = []\n        for candidate, count in candidate_counts.items():\n            if count >= min_count:\n                current_frequent_itemsets.append(candidate)\n\n        current_frequent_itemsets.sort()\n        frequent_itemsets.extend(current_frequent_itemsets)\n\n        k += 1\n\n    return frequent_itemsets\n\nif __name__ == '__main__':\n    # Example Usage\n    transactions = [\n        [1, 2, 3, 4],\n        [1, 2, 4],\n        [1, 2],\n        [2, 3, 4],\n        [2, 3],\n        [3, 4],\n        [2, 4]\n    ]\n    min_support = 0.3\n\n    frequent_itemsets = apriori_frequent_itemsets(transactions, min_support)\n    print(\"Frequent Itemsets:\")\n    for itemset in frequent_itemsets:\n        print(itemset)\n\n    transactions_strings = [\n        ['A', 'B', 'C'],\n        ['A', 'C', 'D'],\n        ['B', 'C', 'E'],\n        ['B', 'E'],\n        ['A', 'B', 'C', 'E']\n    ]\n    min_support_strings = 0.4\n\n    frequent_itemsets_strings = apriori_frequent_itemsets(transactions_strings, min_support_strings)\n    print(\"\\nFrequent Itemsets (Strings):\")\n    for itemset in frequent_itemsets_strings:\n        print(itemset)\n```"}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    if not predictions:\n        return [], []\n\n    # Convert the nested list to a NumPy array for easier processing\n    predictions_array = np.array(predictions)\n\n    # Average the probabilities over the estimators (axis 0)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n\n    # Round the averaged probabilities to 4 decimal places\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n\n    # Find the predicted class index for each sample using argmax\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n\n    # Convert the NumPy arrays back to Python lists\n    averaged_probabilities_list = rounded_probabilities.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n\n    return averaged_probabilities_list, predicted_classes_list\n\nif __name__ == '__main__':\n    # Example Usage\n    predictions = [\n        [[0.1, 0.9], [0.8, 0.2], [0.5, 0.5]],  # Estimator 1\n        [[0.2, 0.8], [0.7, 0.3], [0.6, 0.4]],  # Estimator 2\n        [[0.3, 0.7], [0.9, 0.1], [0.4, 0.6]]   # Estimator 3\n    ]\n\n    averaged_probs, predicted_labels = aggregate_predictions(predictions)\n\n    print(\"Averaged Probabilities:\")\n    for row in averaged_probs:\n        print(row)\n\n    print(\"\\nPredicted Labels:\")\n    print(predicted_labels)\n\n    # Example with tie-breaking\n    predictions_tie = [\n        [[0.5, 0.5], [0.6, 0.4]],\n        [[0.5, 0.5], [0.4, 0.6]]\n    ]\n    averaged_probs_tie, predicted_labels_tie = aggregate_predictions(predictions_tie)\n    print(\"\\nAveraged Probabilities (Tie-breaking):\")\n    for row in averaged_probs_tie:\n        print(row)\n    print(\"\\nPredicted Labels (Tie-breaking):\")\n    print(predicted_labels_tie)\n\n    # Example with empty input\n    averaged_probs_empty, predicted_labels_empty = aggregate_predictions([])\n    print(\"\\nAveraged Probabilities (Empty input):\")\n    print(averaged_probs_empty)\n    print(\"\\nPredicted Labels (Empty input):\")\n    print(predicted_labels_empty)\n```"}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y, dtype=float)\n\n    N, C_X = X_np.shape\n    M, C_Y = Y_np.shape\n\n    # 1. Validate inputs\n    if C_X != C_Y:\n        return -1  # Feature dimensions do not match\n\n    if sigma is None:\n        sigma_np = np.sqrt(C_X / 2.0)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1  # sigma is non-positive\n        sigma_np = float(sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != C_X:\n            return -1  # sigma list length mismatch\n        sigma_np = np.array(sigma, dtype=float)\n        if np.any(sigma_np <= 0):\n            return -1  # sigma list contains non-positive values\n    else:\n        return -1  # Invalid sigma type\n\n    # Reshape sigma for broadcasting\n    if sigma_np.ndim == 0:\n        sigma_reshaped = sigma_np\n    else:\n        sigma_reshaped = sigma_np.reshape(1, -1)\n\n    # Compute the squared Euclidean distance matrix\n    # (x_i - y_j)^2 = x_i^2 - 2*x_i*y_j + y_j^2\n    X_sq = np.sum(X_np**2 / (sigma_reshaped**2), axis=1, keepdims=True)\n    Y_sq = np.sum(Y_np**2 / (sigma_reshaped**2), axis=1, keepdims=True)\n    XY = X_np @ Y_np.T / (sigma_reshaped**2)\n\n    sq_dist_scaled = X_sq - 2 * XY + Y_sq.T\n\n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * sq_dist_scaled)\n\n    # Round to 4 decimal places and convert to list\n    rounded_kernel_matrix = np.round(kernel_matrix, 4)\n    return rounded_kernel_matrix.tolist()\n\nif __name__ == '__main__':\n    # Example 1 from the problem description\n    X1 = [[1, 0], [0, 1]]\n    Y1 = [[1, 0], [0, 1]]\n    sigma1 = 1.0\n    result1 = rbf_kernel(X1, Y1, sigma1)\n    print(f\"Example 1 Input:\")\n    print(f\"  X = {X1}\")\n    print(f\"  Y = {Y1}\")\n    print(f\"  sigma = {sigma1}\")\n    print(f\"Example 1 Output:\")\n    print(f\"  {result1}\")\n    print(\"-\" * 20)\n\n    # Example 2: Anisotropic kernel\n    X2 = [[1, 2], [3, 4]]\n    Y2 = [[1, 2], [5, 6]]\n    sigma2 = [1.0, 2.0]\n    result2 = rbf_kernel(X2, Y2, sigma2)\n    print(f\"Example 2 Input:\")\n    print(f\"  X = {X2}\")\n    print(f\"  Y = {Y2}\")\n    print(f\"  sigma = {sigma2}\")\n    print(f\"Example 2 Output:\")\n    print(f\"  {result2}\")\n    print(\"-\" * 20)\n\n    # Example 3: Y is None (kernel with itself)\n    X3 = [[1, 2], [3, 4]]\n    sigma3 = 1.0\n    result3 = rbf_kernel(X3, sigma=sigma3)\n    print(f\"Example 3 Input:\")\n    print(f\"  X = {X3}\")\n    print(f\"  Y = None\")\n    print(f\"  sigma = {sigma3}\")\n    print(f\"Example 3 Output:\")\n    print(f\"  {result3}\")\n    print(\"-\" * 20)\n\n    # Example 4: sigma is None\n    X4 = [[1, 2], [3, 4]]\n    Y4 = [[1, 2], [5, 6]]\n    sigma4 = None\n    result4 = rbf_kernel(X4, Y4, sigma4)\n    print(f\"Example 4 Input:\")\n    print(f\"  X = {X4}\")\n    print(f\"  Y = {Y4}\")\n    print(f\"  sigma = {sigma4}\")\n    print(f\"Example 4 Output:\")\n    print(f\"  {result4}\")\n    print(\"-\" * 20)\n\n    # Example 5: Invalid input - feature dimension mismatch\n    X5 = [[1, 0], [0, 1]]\n    Y5 = [[1, 0, 2], [0, 1, 3]]\n    sigma5 = 1.0\n    result5 = rbf_kernel(X5, Y5, sigma5)\n    print(f\"Example 5 Input:\")\n    print(f\"  X = {X5}\")\n    print(f\"  Y = {Y5}\")\n    print(f\"  sigma = {sigma5}\")\n    print(f\"Example 5 Output:\")\n    print(f\"  {result5}\")\n    print(\"-\" * 20)\n\n    # Example 6: Invalid input - sigma is non-positive\n    X6 = [[1, 0], [0, 1]]\n    Y6 = [[1, 0], [0, 1]]\n    sigma6 = 0.0\n    result6 = rbf_kernel(X6, Y6, sigma6)\n    print(f\"Example 6 Input:\")\n    print(f\"  X = {X6}\")\n    print(f\"  Y = {Y6}\")\n    print(f\"  sigma = {sigma6}\")\n    print(f\"Example 6 Output:\")\n    print(f\"  {result6}\")\n    print(\"-\" * 20)\n\n    # Example 7: Invalid input - sigma list length mismatch\n    X7 = [[1, 0], [0, 1]]\n    Y7 = [[1, 0], [0, 1]]\n    sigma7 = [1.0]\n    result7 = rbf_kernel(X7, Y7, sigma7)\n    print(f\"Example 7 Input:\")\n    print(f\"  X = {X7}\")\n    print(f\"  Y = {Y7}\")\n    print(f\"  sigma = {sigma7}\")\n    print(f\"Example 7 Output:\")\n    print(f\"  {result7}\")\n    print(\"-\" * 20)\n\n    # Example 8: Invalid input - sigma list contains non-positive\n    X8 = [[1, 0], [0, 1]]\n    Y8 = [[1, 0], [0, 1]]\n    sigma8 = [1.0, -0.5]\n    result8 = rbf_kernel(X8, Y8, sigma8)\n    print(f\"Example 8 Input:\")\n    print(f\"  X = {X8}\")\n    print(f\"  Y = {Y8}\")\n    print(f\"  sigma = {sigma8}\")\n    print(f\"Example 8 Output:\")\n    print(f\"  {result8}\")\n    print(\"-\" * 20)\n```"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculates the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0\n    label_counts = {}\n    for label in labels:\n        label_counts[label] = label_counts.get(label, 0) + 1\n    total_samples = len(labels)\n    entropy_value = 0\n    for count in label_counts.values():\n        probability = count / total_samples\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\n\ndef majority_label(labels):\n    \"\"\"Finds the majority label in a list of labels, handling ties.\"\"\"\n    if not labels:\n        return None\n    label_counts = {}\n    for label in labels:\n        label_counts[label] = label_counts.get(label, 0) + 1\n    max_count = 0\n    majority = None\n    for label, count in label_counts.items():\n        if count > max_count:\n            max_count = count\n            majority = label\n        elif count == max_count:\n            if majority is None or label < majority:\n                majority = label\n    return majority\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = majority_label(y)\n    best_right_majority = majority_label(y)\n\n    if parent_entropy == 0:\n        return (-1, None, best_left_majority, best_right_majority)\n\n    for j in range(n_features):\n        feature_values = X[:, j]\n        sorted_indices = np.argsort(feature_values)\n        sorted_values = feature_values[sorted_indices]\n        sorted_labels = y[sorted_indices]\n\n        candidate_thresholds = []\n        for i in range(n_samples - 1):\n            if sorted_values[i] != sorted_values[i+1]:\n                candidate_thresholds.append((sorted_values[i] + sorted_values[i+1]) / 2)\n\n        for t in candidate_thresholds:\n            left_indices = np.where(X[:, j] <= t)[0]\n            right_indices = np.where(X[:, j] > t)[0]\n\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n\n            if p_left == 0 or p_right == 0:\n                continue\n\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                best_left_majority = majority_label(left_labels)\n                best_right_majority = majority_label(right_labels)\n            elif gain == best_gain:\n                if j < best_feature_index or best_feature_index == -1:\n                    best_feature_index = j\n                    best_threshold = t\n                    best_left_majority = majority_label(left_labels)\n                    best_right_majority = majority_label(right_labels)\n                elif j == best_feature_index:\n                    if t < best_threshold:\n                        best_threshold = t\n                        best_left_majority = majority_label(left_labels)\n                        best_right_majority = majority_label(right_labels)\n\n    if best_gain == 0:\n        return (-1, None, majority_label(y), majority_label(y))\n    else:\n        return (best_feature_index, round(best_threshold, 4), best_left_majority, best_right_majority)\n\nif __name__ == '__main__':\n    # Example Usage:\n    X = [[1.0, 2.0], [2.0, 1.0], [3.0, 2.0], [4.0, 1.0], [5.0, 2.0]]\n    y = [0, 0, 1, 1, 1]\n    result = decision_stump(X, y)\n    print(f\"Example 1: {result}\")\n    # Expected output for Example 1 might vary slightly based on tie-breaking,\n    # but a likely good split is on feature 0 around 3.5.\n\n    X2 = [[1.0, 2.0], [1.5, 2.5], [2.0, 3.0], [2.5, 3.5]]\n    y2 = [0, 0, 1, 1]\n    result2 = decision_stump(X2, y2)\n    print(f\"Example 2: {result2}\")\n\n    X3 = [[1.0], [2.0], [3.0], [4.0]]\n    y3 = [0, 0, 0, 0]\n    result3 = decision_stump(X3, y3)\n    print(f\"Example 3: {result3}\")\n    # Expected output: (-1, None, 0, 0)\n\n    X4 = [[1.0, 5.0], [2.0, 4.0], [3.0, 3.0], [4.0, 2.0], [5.0, 1.0]]\n    y4 = [0, 1, 0, 1, 0]\n    result4 = decision_stump(X4, y4)\n    print(f\"Example 4: {result4}\")\n```"}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # ======  Write your code below this line  ======\n    X = np.asarray(X)\n    subset1 = []\n    subset2 = []\n\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold\n        for sample in X:\n            if sample[feature_i] >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    else:\n        # Categorical threshold\n        for sample in X:\n            if sample[feature_i] == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n\n    return [np.array(subset1).tolist(), np.array(subset2).tolist()]\n\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    batch_size = Q.shape[0]\n\n    # Input validation\n    if (\n        Q.shape != Q_next.shape\n        or len(actions) != batch_size\n        or len(rewards) != batch_size\n        or len(dones) != batch_size\n        or not (0 <= gamma <= 1)\n    ):\n        return -1\n\n    y = np.copy(Q)\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n\n        y[i, actions[i]] = target\n\n    # Round to 4 decimal places and convert to list of lists\n    y_rounded = np.round(y, 4)\n    return y_rounded.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    Q = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n    Q_next = np.array([[0.5, 1.5, 2.5], [3.5, 4.5, 5.5]])\n    actions = [1, 0]\n    rewards = [10.0, -5.0]\n    dones = [False, True]\n    gamma = 0.9\n\n    targets = update_q_values(Q, Q_next, actions, rewards, dones, gamma)\n    print(f\"Targets: {targets}\")\n\n    # Example with invalid input\n    Q_invalid = np.array([[1.0, 2.0], [4.0, 5.0, 6.0]]) # Inconsistent shape\n    targets_invalid = update_q_values(Q_invalid, Q_next, actions, rewards, dones, gamma)\n    print(f\"Targets (invalid input): {targets_invalid}\")\n\n    gamma_invalid = 1.5\n    targets_invalid_gamma = update_q_values(Q, Q_next, actions, rewards, dones, gamma_invalid)\n    print(f\"Targets (invalid gamma): {targets_invalid_gamma}\")\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not isinstance(labels, (list, tuple, np.ndarray)):\n        return -1\n\n    labels_np = np.asarray(labels)\n\n    if np.any(labels_np < 0):\n        return -1\n\n    max_label = np.max(labels_np)\n\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n\n    one_hot_matrix = []\n    for label in labels_np:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot_matrix.append(row)\n\n    return one_hot_matrix\n\nif __name__ == '__main__':\n    # Example Usage\n    labels1 = [0, 1, 2, 1, 0]\n    one_hot1 = to_categorical(labels1)\n    print(f\"Labels: {labels1}\")\n    print(f\"One-hot encoding (inferred num_classes): {one_hot1}\")\n    print(\"-\" * 20)\n\n    labels2 = (0, 1, 2, 1, 0)\n    one_hot2 = to_categorical(labels2, num_classes=3)\n    print(f\"Labels: {labels2}\")\n    print(f\"One-hot encoding (specified num_classes=3): {one_hot2}\")\n    print(\"-\" * 20)\n\n    labels3 = np.array([0, 1, 2, 1, 0])\n    one_hot3 = to_categorical(labels3, num_classes=4)\n    print(f\"Labels: {labels3}\")\n    print(f\"One-hot encoding (specified num_classes=4): {one_hot3}\")\n    print(\"-\" * 20)\n\n    # Invalid cases\n    labels4 = [0, 1, -1, 2]\n    one_hot4 = to_categorical(labels4)\n    print(f\"Labels: {labels4}\")\n    print(f\"One-hot encoding (negative label): {one_hot4}\")\n    print(\"-\" * 20)\n\n    labels5 = [0, 1, 2]\n    one_hot5 = to_categorical(labels5, num_classes=2)\n    print(f\"Labels: {labels5}\")\n    print(f\"One-hot encoding (num_classes too small): {one_hot5}\")\n    print(\"-\" * 20)\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n\n    if n_estimators <= 0:\n        return np.round(np.full(n_samples, np.mean(y)), 4).tolist()\n\n    y_pred = np.full(n_samples, np.mean(y))\n\n    unique_x = np.sort(np.unique(x))\n    split_values = unique_x[:-1] if len(unique_x) > 1 else []\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n\n        if np.allclose(residuals, 0):\n            break\n\n        best_sse = float('inf')\n        best_split_value = None\n        best_v_L = None\n        best_v_R = None\n\n        if not split_values:\n            # No valid split exists, use mean residual of the whole data\n            mean_residual = np.mean(residuals)\n            stump_pred = np.full(n_samples, mean_residual)\n        else:\n            for t in split_values:\n                left_indices = x <= t\n                right_indices = x > t\n\n                if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue\n\n                residuals_left = residuals[left_indices]\n                residuals_right = residuals[right_indices]\n\n                mean_residual_left = np.mean(residuals_left)\n                mean_residual_right = np.mean(residuals_right)\n\n                sse_left = np.sum((residuals_left - mean_residual_left) ** 2)\n                sse_right = np.sum((residuals_right - mean_residual_right) ** 2)\n                current_sse = sse_left + sse_right\n\n                if current_sse < best_sse:\n                    best_sse = current_sse\n                    best_split_value = t\n                    best_v_L = mean_residual_left\n                    best_v_R = mean_residual_right\n\n            if best_split_value is None:\n                 # No valid split found among unique x values, use mean residual of the whole data\n                mean_residual = np.mean(residuals)\n                stump_pred = np.full(n_samples, mean_residual)\n            else:\n                stump_pred = np.where(x <= best_split_value, best_v_L, best_v_R)\n\n        y_pred += learning_rate * stump_pred\n\n    return np.round(y_pred, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n    y_train = [2.0, 3.0, 4.0, 5.0, 6.0]\n\n    predictions = gradient_boosting_regressor(x_train, y_train, n_estimators=10, learning_rate=0.1)\n    print(f\"Predictions: {predictions}\")\n\n    x_train_same = [1.0, 1.0, 1.0]\n    y_train_same = [2.0, 3.0, 4.0]\n    predictions_same_x = gradient_boosting_regressor(x_train_same, y_train_same, n_estimators=10, learning_rate=0.1)\n    print(f\"Predictions with same x: {predictions_same_x}\")\n\n    x_train_single = [1.0]\n    y_train_single = [5.0]\n    predictions_single = gradient_boosting_regressor(x_train_single, y_train_single, n_estimators=10, learning_rate=0.1)\n    print(f\"Predictions with single sample: {predictions_single}\")\n\n    x_train_empty = []\n    y_train_empty = []\n    predictions_empty = gradient_boosting_regressor(x_train_empty, y_train_empty, n_estimators=10, learning_rate=0.1)\n    print(f\"Predictions with empty data: {predictions_empty}\")\n\n    x_train_zero_estimators = [1.0, 2.0]\n    y_train_zero_estimators = [3.0, 4.0]\n    predictions_zero_estimators = gradient_boosting_regressor(x_train_zero_estimators, y_train_zero_estimators, n_estimators=0)\n    print(f\"Predictions with zero estimators: {predictions_zero_estimators}\")\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    expected_q_next = 0.0\n\n    if next_state is not None:\n        q_values_next_state = q_table[next_state]\n        greedy_action_value = max(q_values_next_state)\n        greedy_actions = [i for i, q in enumerate(q_values_next_state) if q == greedy_action_value]\n\n        for a_prime in range(num_actions):\n            if a_prime in greedy_actions:\n                policy_prob = 1.0 - epsilon + epsilon / num_actions\n            else:\n                policy_prob = epsilon / num_actions\n            expected_q_next += policy_prob * q_table[next_state][a_prime]\n\n    target = reward + gamma * expected_q_next\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to four decimal places\n    rounded_q_table = [[round(q, 4) for q in row] for row in q_table]\n\n    return rounded_q_table\n\nif __name__ == '__main__':\n    # Example Usage\n    q_table = [\n        [0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0]\n    ]\n    state = 0\n    action = 1\n    reward = 1.0\n    next_state = 1\n    epsilon = 0.1\n    lr = 0.5\n    gamma = 0.9\n\n    updated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\n    print(\"Updated Q-table after one step:\")\n    for row in updated_q_table:\n        print(row)\n\n    # Example with terminal state\n    q_table_terminal = [\n        [0.0, 0.0],\n        [0.0, 0.0]\n    ]\n    state_terminal = 0\n    action_terminal = 0\n    reward_terminal = 10.0\n    next_state_terminal = None\n    epsilon_terminal = 0.2\n    lr_terminal = 0.8\n    gamma_terminal = 0.9\n\n    updated_q_table_terminal = expected_sarsa_update(q_table_terminal, state_terminal, action_terminal, reward_terminal, next_state_terminal, epsilon_terminal, lr_terminal, gamma_terminal)\n    print(\"\\nUpdated Q-table after a terminal step:\")\n    for row in updated_q_table_terminal:\n        print(row)\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = np.zeros((m * n_train, 2))\n    Y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    Y_val = np.zeros(m * n_val)\n\n    for i in range(m):\n        # Generate training data for class i\n        x_train_min = (i // 2 + 0.1) * 10\n        x_train_max = (i // 2 + 0.9) * 10\n        y_train_min = ((i % 2) * interval + 0.1) * 10\n        y_train_max = ((i % 2) * interval + 0.9) * 10\n\n        X_train[i * n_train:(i + 1) * n_train, 0] = np.random.uniform(x_train_min, x_train_max, n_train)\n        X_train[i * n_train:(i + 1) * n_train, 1] = np.random.uniform(y_train_min, y_train_max, n_train)\n        Y_train[i * n_train:(i + 1) * n_train] = (i - 0.5) * 2\n\n        # Generate validation data for class i\n        x_val_min = (i // 2 + 0.1) * 10\n        x_val_max = (i // 2 + 0.9) * 10\n        y_val_min = ((i % 2) * interval + 0.1) * 10\n        y_val_max = ((i % 2) * interval + 0.9) * 10\n\n        X_val[i * n_val:(i + 1) * n_val, 0] = np.random.uniform(x_val_min, x_val_max, n_val)\n        X_val[i * n_val:(i + 1) * n_val, 1] = np.random.uniform(y_val_min, y_val_max, n_val)\n        Y_val[i * n_val:(i + 1) * n_val] = (i - 0.5) * 2\n\n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val\n\nif __name__ == '__main__':\n    # Example usage:\n    m = 2\n    n_train = 100\n    n_val = 50\n    interval = 1.0\n    seed = 42\n\n    X_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\n\n    print(\"X_train shape:\", X_train.shape)\n    print(\"Y_train shape:\", Y_train.shape)\n    print(\"X_val shape:\", X_val.shape)\n    print(\"Y_val shape:\", Y_val.shape)\n\n    print(\"\\nFirst 5 training samples:\")\n    print(X_train[:5])\n    print(Y_train[:5])\n\n    print(\"\\nFirst 5 validation samples:\")\n    print(X_val[:5])\n    print(Y_val[:5])\n\n    # Example with different parameters and no seed\n    m = 4\n    n_train = 20\n    n_val = 10\n    interval = 0.5\n\n    X_train_2, X_val_2, Y_train_2, Y_val_2 = generate_data(m, n_train, n_val, interval)\n\n    print(\"\\n--- Second Data Set ---\")\n    print(\"X_train shape:\", X_train_2.shape)\n    print(\"Y_train shape:\", Y_train_2.shape)\n    print(\"X_val shape:\", X_val_2.shape)\n    print(\"Y_val shape:\", Y_val_2.shape)\n\n    print(\"\\nFirst 5 training samples:\")\n    print(X_train_2[:5])\n    print(Y_train_2[:5])\n\n    print(\"\\nFirst 5 validation samples:\")\n    print(X_val_2[:5])\n    print(Y_val_2[:5])\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Write your code here\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    m_hat = m_new / (1 - b1**t)\n    v_hat = v_new / (1 - b2**t)\n\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n\nif __name__ == '__main__':\n    # Example usage with scalar values\n    w_new_scalar, m_new_scalar, v_new_scalar = adam_update(1.0, 0.1, 0.0, 0.0, 1)\n    print(f\"Scalar example:\")\n    print(f\"  w_new: {round(w_new_scalar, 9)}\")\n    print(f\"  m_new: {round(m_new_scalar, 9)}\")\n    print(f\"  v_new: {round(v_new_scalar, 9)}\")\n\n    # Example usage with NumPy arrays\n    w_array = np.array([1.0, 2.0])\n    grad_array = np.array([0.1, -0.2])\n    m_prev_array = np.array([0.0, 0.0])\n    v_prev_array = np.array([0.0, 0.0])\n    t_array = 1\n\n    w_new_array, m_new_array, v_new_array = adam_update(w_array, grad_array, m_prev_array, v_prev_array, t_array)\n\n    print(f\"\\nNumPy array example:\")\n    print(f\"  w_new: {np.round(w_new_array, 9)}\")\n    print(f\"  m_new: {np.round(m_new_array, 9)}\")\n    print(f\"  v_new: {np.round(v_new_array, 9)}\")\n\n    # Example with None for initial moments\n    w_none = 5.0\n    grad_none = -0.5\n    t_none = 1\n    w_new_none, m_new_none, v_new_none = adam_update(w_none, grad_none, None, None, t_none)\n    print(f\"\\nNone initial moments example:\")\n    print(f\"  w_new: {round(w_new_none, 9)}\")\n    print(f\"  m_new: {round(m_new_none, 9)}\")\n    print(f\"  v_new: {round(v_new_none, 9)}\")\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\nimport numpy as np\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n\n    for time_step_rewards in rewards:\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            max_value = -float('inf')\n            chosen_arm = -1\n            for i in range(num_arms):\n                if estimated_values[i] > max_value:\n                    max_value = estimated_values[i]\n                    chosen_arm = i\n                elif estimated_values[i] == max_value and i < chosen_arm:\n                    chosen_arm = i\n\n        # Receive reward\n        reward = time_step_rewards[chosen_arm]\n\n        # Update pull count and estimated value\n        pull_counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counts[chosen_arm]\n\n    # Round the final estimates\n    rounded_estimates = [round(value, 4) for value in estimated_values]\n\n    return rounded_estimates\n\nif __name__ == '__main__':\n    # Example Usage\n    rewards_matrix = [\n        [0.1, 0.5, 0.2],\n        [0.3, 0.6, 0.1],\n        [0.2, 0.7, 0.3],\n        [0.4, 0.5, 0.4],\n        [0.1, 0.8, 0.2],\n    ]\n\n    # Example with default parameters\n    final_estimates_default = epsilon_greedy_bandit(rewards_matrix)\n    print(f\"Final estimates (default): {final_estimates_default}\")\n\n    # Example with custom epsilon and seed\n    final_estimates_custom = epsilon_greedy_bandit(rewards_matrix, epsilon=0.1, seed=42)\n    print(f\"Final estimates (custom): {final_estimates_custom}\")\n\n    # Example with greedy strategy (epsilon=0)\n    final_estimates_greedy = epsilon_greedy_bandit(rewards_matrix, epsilon=0)\n    print(f\"Final estimates (greedy): {final_estimates_greedy}\")\n\n    # Example with random strategy (epsilon=1)\n    final_estimates_random = epsilon_greedy_bandit(rewards_matrix, epsilon=1)\n    print(f\"Final estimates (random): {final_estimates_random}\")\n```"}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def get_neighbors(point_idx):\n        neighbors = []\n        for i in range(n_samples):\n            if np.linalg.norm(data[point_idx] - data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n\n        neighbors = get_neighbors(i)\n\n        if len(neighbors) < min_samples:\n            labels[i] = -1  # Mark as noise initially\n            continue\n\n        # Found a core point, start a new cluster\n        labels[i] = cluster_id\n        queue = list(neighbors)\n\n        while queue:\n            current_point_idx = queue.pop(0)\n\n            if labels[current_point_idx] == -1:\n                labels[current_point_idx] = cluster_id\n                current_neighbors = get_neighbors(current_point_idx)\n                if len(current_neighbors) >= min_samples:\n                    queue.extend(current_neighbors)\n            elif labels[current_point_idx] == -1: # This condition is redundant, already handled above\n                 labels[current_point_idx] = cluster_id\n\n\n        cluster_id += 1\n\n    return labels\n\nif __name__ == '__main__':\n    # Example Usage\n    data = np.array([\n        [1, 1], [1, 2], [2, 2], [2, 3],\n        [8, 8], [8, 9], [9, 8], [9, 9],\n        [0, 0], [5, 5]\n    ])\n\n    eps = 1.5\n    min_samples = 3\n\n    labels = dbscan(data, eps, min_samples)\n    print(\"Cluster labels:\", labels)\n\n    # Example with empty data\n    empty_data = np.array([])\n    labels_empty = dbscan(empty_data, eps, min_samples)\n    print(\"Cluster labels for empty data:\", labels_empty)\n\n    # Example with different parameters\n    data_2 = np.array([\n        [1, 1], [1.1, 1.1], [1.2, 1.2], [5, 5], [5.1, 5.1], [10, 10]\n    ])\n    eps_2 = 0.5\n    min_samples_2 = 2\n    labels_2 = dbscan(data_2, eps_2, min_samples_2)\n    print(\"Cluster labels for data_2:\", labels_2)\n```"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int')\n\n    if num_classes is None:\n        if y.size == 0:\n            num_classes = 0\n        else:\n            num_classes = np.max(y) + 1\n    else:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError(f\"Labels must be non-negative and less than num_classes ({num_classes}).\")\n\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes), dtype='int')\n    categorical[np.arange(n), y] = 1\n\n    return categorical\n\nif __name__ == '__main__':\n    # Example usage:\n    labels1 = [0, 1, 2, 1, 0]\n    one_hot1 = to_categorical(labels1)\n    print(\"Labels:\", labels1)\n    print(\"One-hot encoding (inferred classes):\\n\", one_hot1)\n    print(\"-\" * 20)\n\n    labels2 = np.array([1, 3, 0, 2])\n    one_hot2 = to_categorical(labels2, num_classes=4)\n    print(\"Labels:\", labels2)\n    print(\"One-hot encoding (specified classes=4):\\n\", one_hot2)\n    print(\"-\" * 20)\n\n    labels3 = [0, 1, 2]\n    one_hot3 = to_categorical(labels3, num_classes=5)\n    print(\"Labels:\", labels3)\n    print(\"One-hot encoding (specified classes=5):\\n\", one_hot3)\n    print(\"-\" * 20)\n\n    labels4 = []\n    one_hot4 = to_categorical(labels4)\n    print(\"Labels:\", labels4)\n    print(\"One-hot encoding (empty list):\\n\", one_hot4)\n    print(\"-\" * 20)\n\n    labels5 = [0, 1, 2]\n    try:\n        to_categorical(labels5, num_classes=2)\n    except ValueError as e:\n        print(\"Caught expected error:\", e)\n    print(\"-\" * 20)\n\n    labels6 = [-1, 0, 1]\n    try:\n        to_categorical(labels6)\n    except ValueError as e:\n        print(\"Caught expected error:\", e)\n    print(\"-\" * 20)\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    # Convert to numpy arrays for easier indexing and calculations\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    class Node:\n        def __init__(self, split_point=None, left=None, right=None, prediction=None):\n            self.split_point = split_point\n            self.left = left\n            self.right = right\n            self.prediction = prediction\n\n    def calculate_sse(y):\n        if len(y) == 0:\n            return 0\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n\n    def find_best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        n_samples = len(X)\n\n        # Sort the data by feature value to efficiently find split points\n        sorted_indices = np.argsort(X)\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n\n        # Consider all possible split points between distinct feature values\n        for i in range(1, n_samples):\n            if X_sorted[i] != X_sorted[i-1]:\n                split_point = (X_sorted[i] + X_sorted[i-1]) / 2.0\n\n                left_indices = X <= split_point\n                right_indices = X > split_point\n\n                y_left = y[left_indices]\n                y_right = y[right_indices]\n\n                sse = calculate_sse(y_left) + calculate_sse(y_right)\n\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split_point = split_point\n\n        return best_split_point\n\n    def build_tree(X, y, depth):\n        n_samples = len(X)\n\n        # Stopping conditions\n        if depth == max_depth or n_samples < 2:\n            return Node(prediction=np.mean(y) if n_samples > 0 else 0.0)\n\n        best_split_point = find_best_split(X, y)\n\n        # If no valid split point found (all feature values are the same)\n        if best_split_point is None:\n            return Node(prediction=np.mean(y) if n_samples > 0 else 0.0)\n\n        left_indices = X <= best_split_point\n        right_indices = X > best_split_point\n\n        X_left, y_left = X[left_indices], y[left_indices]\n        X_right, y_right = X[right_indices], y[right_indices]\n\n        left_subtree = build_tree(X_left, y_left, depth + 1)\n        right_subtree = build_tree(X_right, y_right, depth + 1)\n\n        return Node(split_point=best_split_point, left=left_subtree, right=right_subtree)\n\n    def predict_single(node, x):\n        if node.prediction is not None:\n            return node.prediction\n        if x <= node.split_point:\n            return predict_single(node.left, x)\n        else:\n            return predict_single(node.right, x)\n\n    root = build_tree(X_train, y_train, 0)\n\n    predictions = [predict_single(root, x) for x in X_test]\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    y_train = [2, 4, 5, 4, 5, 6, 7, 8, 9, 10]\n    X_test = [1.5, 3.5, 9.5, 0, 11]\n\n    predictions = regression_tree_predict(X_train, y_train, X_test, max_depth=2)\n    print(f\"Predictions for X_test: {predictions}\")\n\n    X_train_empty = []\n    y_train_empty = []\n    X_test_empty = [1, 2]\n    predictions_empty = regression_tree_predict(X_train_empty, y_train_empty, X_test_empty)\n    print(f\"Predictions for empty training set: {predictions_empty}\")\n\n    X_train_single = [5]\n    y_train_single = [10]\n    X_test_single = [4, 6]\n    predictions_single = regression_tree_predict(X_train_single, y_train_single, X_test_single, max_depth=1)\n    print(f\"Predictions for single training sample: {predictions_single}\")\n\n    X_train_same = [1, 1, 1, 1]\n    y_train_same = [2, 3, 4, 5]\n    X_test_same = [1, 2]\n    predictions_same = regression_tree_predict(X_train_same, y_train_same, X_test_same, max_depth=2)\n    print(f\"Predictions for same feature values: {predictions_same}\")\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n\n    # Convert input to a NumPy array for easy processing\n    x_np = np.asarray(x)\n\n    # Create a diagonal matrix from the array\n    diagonal_matrix = np.diag(x_np)\n\n    # Convert the NumPy matrix to a list of lists\n    return diagonal_matrix.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    vector1 = [1, 2, 3]\n    matrix1 = make_diagonal(vector1)\n    print(f\"Vector: {vector1}\")\n    print(f\"Diagonal Matrix: {matrix1}\")\n    # Expected output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    vector2 = (4.5, 6.0, 7.1, 8.9)\n    matrix2 = make_diagonal(vector2)\n    print(f\"\\nVector: {vector2}\")\n    print(f\"Diagonal Matrix: {matrix2}\")\n    # Expected output: [[4.5, 0.0, 0.0, 0.0], [0.0, 6.0, 0.0, 0.0], [0.0, 0.0, 7.1, 0.0], [0.0, 0.0, 0.0, 8.9]]\n\n    vector3 = np.array([10, 20, 30, 40, 50])\n    matrix3 = make_diagonal(vector3)\n    print(f\"\\nVector: {vector3}\")\n    print(f\"Diagonal Matrix: {matrix3}\")\n    # Expected output: [[10, 0, 0, 0, 0], [0, 20, 0, 0, 0], [0, 0, 30, 0, 0], [0, 0, 0, 40, 0], [0, 0, 0, 0, 50]]\n\n    vector4 = []\n    matrix4 = make_diagonal(vector4)\n    print(f\"\\nVector: {vector4}\")\n    print(f\"Diagonal Matrix: {matrix4}\")\n    # Expected output: []\n\n    vector5 = ()\n    matrix5 = make_diagonal(vector5)\n    print(f\"\\nVector: {vector5}\")\n    print(f\"Diagonal Matrix: {matrix5}\")\n    # Expected output: []\n\n    vector6 = np.array([])\n    matrix6 = make_diagonal(vector6)\n    print(f\"\\nVector: {vector6}\")\n    print(f\"Diagonal Matrix: {matrix6}\")\n    # Expected output: []\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass FPTreeNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next_node = None\n\ndef build_fp_tree(transactions, min_sup):\n    \"\"\"Builds the FP-tree and header table.\"\"\"\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item for item, count in item_counts.items() if count >= min_sup}\n\n    if not frequent_items:\n        return None, None\n\n    header_table = defaultdict(lambda: None)\n    root = FPTreeNode(None, 0, None)\n\n    for transaction in transactions:\n        ordered_transaction = sorted([item for item in transaction if item in frequent_items],\n                                     key=lambda item: (-item_counts[item], item))\n        if ordered_transaction:\n            current_node = root\n            for item in ordered_transaction:\n                if item not in current_node.children:\n                    new_node = FPTreeNode(item, 0, current_node)\n                    current_node.children[item] = new_node\n                    # Link the new node to the header table\n                    if header_table[item] is None:\n                        header_table[item] = new_node\n                    else:\n                        temp_node = header_table[item]\n                        while temp_node.next_node is not None:\n                            temp_node = temp_node.next_node\n                        temp_node.next_node = new_node\n                current_node = current_node.children[item]\n                current_node.count += 1\n\n    return root, header_table\n\ndef find_prefix_paths(item, header_table):\n    \"\"\"Finds all prefix paths for a given item.\"\"\"\n    paths = []\n    current_node = header_table[item]\n    while current_node is not None:\n        path = []\n        parent = current_node.parent\n        while parent.item is not None:\n            path.append(parent.item)\n            parent = parent.parent\n        if path:\n            paths.append((path[::-1], current_node.count))\n        current_node = current_node.next_node\n    return paths\n\ndef mine_conditional_tree(header_table, min_sup, prefix, frequent_itemsets):\n    \"\"\"Recursively mines frequent itemsets from conditional FP-trees.\"\"\"\n    # Sort items in the header table by frequency (ascending)\n    sorted_items = sorted(header_table.keys(), key=lambda item: sum(node.count for node in iter_nodes(header_table[item])))\n\n    for item in sorted_items:\n        new_prefix = tuple(sorted(list(prefix) + [item]))\n        frequent_itemsets.add(new_prefix)\n\n        # Build conditional pattern base\n        conditional_pattern_base = []\n        prefix_paths = find_prefix_paths(item, header_table)\n        for path, count in prefix_paths:\n            conditional_pattern_base.extend([path] * count)\n\n        # Build conditional FP-tree\n        conditional_root, conditional_header_table = build_fp_tree(conditional_pattern_base, min_sup)\n\n        if conditional_root and conditional_header_table:\n            mine_conditional_tree(conditional_header_table, min_sup, new_prefix, frequent_itemsets)\n\ndef iter_nodes(start_node):\n    \"\"\"Iterates through all nodes linked from a starting node.\"\"\"\n    current_node = start_node\n    while current_node is not None:\n        yield current_node\n        current_node = current_node.next_node\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    root, header_table = build_fp_tree(transactions, min_sup)\n\n    if not root or not header_table:\n        return []\n\n    frequent_itemsets = set()\n    mine_conditional_tree(header_table, min_sup, tuple(), frequent_itemsets)\n\n    # Sort the frequent itemsets\n    sorted_itemsets = sorted(list(frequent_itemsets), key=lambda itemset: (len(itemset), itemset))\n\n    return sorted_itemsets\n\nif __name__ == '__main__':\n    transactions = [\n        [\"A\", \"B\", \"D\", \"E\"],\n        [\"B\", \"C\", \"E\"],\n        [\"A\", \"B\", \"D\", \"E\"],\n        [\"A\", \"B\", \"C\", \"E\"],\n        [\"A\", \"B\", \"C\", \"D\", \"E\"],\n        [\"B\", \"C\", \"D\"]\n    ]\n    min_sup = 3\n    result = fp_growth(transactions, min_sup)\n    print(result)\n\n    expected_output = [\n        ('A',), ('B',), ('C',), ('D',), ('E',),\n        ('A', 'B'), ('A', 'D'), ('A', 'E'), ('B', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'E'), ('D', 'E'),\n        ('A', 'B', 'D'), ('A', 'B', 'E'), ('A', 'D', 'E'), ('B', 'C', 'E'), ('B', 'D', 'E'),\n        ('A', 'B', 'D', 'E')\n    ]\n    assert result == expected_output\n    print(\"Example test passed!\")\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    # Write your code below\n    if degree < 0:\n        return -1\n\n    X_np = np.array(X)\n    n_samples, n_features = X_np.shape\n\n    # Generate all combinations of feature indices with replacement\n    # for each degree from 0 to degree\n    feature_combinations = []\n    for d in range(degree + 1):\n        feature_combinations.extend(list(combinations_with_replacement(range(n_features), d)))\n\n    # Build the polynomial feature matrix\n    poly_features = []\n    for sample in X_np:\n        row = []\n        for combo in feature_combinations:\n            # Calculate the product of the features for the current combination\n            term = 1.0\n            for index in combo:\n                term *= sample[index]\n            row.append(term)\n        poly_features.append(row)\n\n    return poly_features\n\nif __name__ == '__main__':\n    # Example Usage\n    X = [[1, 2], [3, 4]]\n    degree = 2\n    poly_X = polynomial_features(X, degree)\n    print(f\"Input X: {X}\")\n    print(f\"Degree: {degree}\")\n    print(f\"Polynomial Features:\\n{poly_X}\")\n\n    X2 = [[10, 20, 30]]\n    degree2 = 1\n    poly_X2 = polynomial_features(X2, degree2)\n    print(f\"\\nInput X: {X2}\")\n    print(f\"Degree: {degree2}\")\n    print(f\"Polynomial Features:\\n{poly_X2}\")\n\n    X3 = [[1, 2]]\n    degree3 = 0\n    poly_X3 = polynomial_features(X3, degree3)\n    print(f\"\\nInput X: {X3}\")\n    print(f\"Degree: {degree3}\")\n    print(f\"Polynomial Features:\\n{poly_X3}\")\n\n    X4 = [[1, 2]]\n    degree4 = -1\n    poly_X4 = polynomial_features(X4, degree4)\n    print(f\"\\nInput X: {X4}\")\n    print(f\"Degree: {degree4}\")\n    print(f\"Polynomial Features:\\n{poly_X4}\")\n```"}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n\n    y_np = np.array(y)\n    mean_y = np.mean(y_np)\n    squared_errors = (y_np - mean_y) ** 2\n    mse_value = np.mean(squared_errors)\n\n    return round(float(mse_value), 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    sample1 = [1, 2, 3, 4, 5]\n    print(f\"MSE of {sample1}: {mse(sample1)}\")\n\n    sample2 = np.array([10.5, 11.2, 9.8, 10.1])\n    print(f\"MSE of {sample2}: {mse(sample2)}\")\n\n    sample3 = []\n    print(f\"MSE of empty list: {mse(sample3)}\")\n\n    sample4 = np.array([])\n    print(f\"MSE of empty numpy array: {mse(sample4)}\")\n\n    sample5 = [0, 0, 0, 0]\n    print(f\"MSE of {sample5}: {mse(sample5)}\")\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    if not isinstance(x, (list, np.ndarray)):\n        x = [x]\n\n    x_np = np.array(x, dtype=float)\n\n    y = slope * x_np + intercept\n    grad = np.full_like(x_np, slope)\n    grad2 = np.full_like(x_np, 0.0)\n\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n\n    return (y_rounded, grad_rounded, grad2_rounded)\n\nif __name__ == '__main__':\n    # Example usage:\n    x_list = [1.23456, -0.789, 5.0]\n    y_list, grad_list, grad2_list = apply_affine(x_list, slope=2.5, intercept=1.0)\n    print(f\"Input list: {x_list}\")\n    print(f\"Output y: {y_list}\")\n    print(f\"Gradient: {grad_list}\")\n    print(f\"Second Gradient: {grad2_list}\")\n\n    print(\"-\" * 20)\n\n    x_np_array = np.array([10.0, -2.5, 0.0])\n    y_np, grad_np, grad2_np = apply_affine(x_np_array, slope=-0.5)\n    print(f\"Input NumPy array: {x_np_array}\")\n    print(f\"Output y: {y_np}\")\n    print(f\"Gradient: {grad_np}\")\n    print(f\"Second Gradient: {grad2_np}\")\n\n    print(\"-\" * 20)\n\n    x_scalar = 3.14159\n    y_scalar, grad_scalar, grad2_scalar = apply_affine(x_scalar, intercept=5.0)\n    print(f\"Input scalar: {x_scalar}\")\n    print(f\"Output y: {y_scalar}\")\n    print(f\"Gradient: {grad_scalar}\")\n    print(f\"Second Gradient: {grad2_scalar}\")\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    if not (1 <= k <= n_features):\n        return -1\n\n    # 1. Standardise each feature\n    standardised_data = np.zeros_like(data, dtype=float)\n    for i in range(n_features):\n        feature = data[:, i]\n        mean = np.mean(feature)\n        std_dev = np.std(feature, ddof=0)  # Population standard deviation\n        if std_dev > 1e-9:  # Avoid division by zero for zero variance features\n            standardised_data[:, i] = (feature - mean) / std_dev\n        else:\n            standardised_data[:, i] = feature - mean # Centering for zero variance features\n\n    # 2. Compute the sample covariance matrix\n    # Use Bessel's correction (n-1)\n    covariance_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n\n    # 3. Perform an eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)\n\n    # 4. Sort eigenvalues in descending order and arrange eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # 5. Fix the sign of every eigenvector\n    for i in range(n_features):\n        largest_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[largest_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n\n    # 6. Project the standardised data on the first k eigenvectors\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = standardised_data @ principal_components\n\n    # Round and convert to list\n    return np.round(projected_data, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    data = np.array([[1, 2, 3],\n                     [4, 5, 6],\n                     [7, 8, 9],\n                     [10, 11, 12]])\n    k = 2\n    projected = pca_transform(data, k)\n    print(f\"Original data:\\n{data}\")\n    print(f\"Projected data (k={k}):\\n{projected}\")\n\n    data_zero_variance = np.array([[1, 2, 5],\n                                   [2, 3, 5],\n                                   [3, 4, 5]])\n    k_zv = 2\n    projected_zv = pca_transform(data_zero_variance, k_zv)\n    print(f\"\\nOriginal data (with zero variance feature):\\n{data_zero_variance}\")\n    print(f\"Projected data (k={k_zv}):\\n{projected_zv}\")\n\n    data_single_sample = np.array([[1, 2, 3]])\n    k_single = 1\n    projected_single = pca_transform(data_single_sample, k_single)\n    print(f\"\\nOriginal data (single sample):\\n{data_single_sample}\")\n    print(f\"Projected data (k={k_single}):\\n{projected_single}\")\n\n    data_invalid_k = np.array([[1, 2], [3, 4]])\n    k_invalid = 3\n    projected_invalid = pca_transform(data_invalid_k, k_invalid)\n    print(f\"\\nOriginal data:\\n{data_invalid_k}\")\n    print(f\"Projected data (k={k_invalid}): {projected_invalid}\")\n\n    k_invalid_zero = 0\n    projected_invalid_zero = pca_transform(data_invalid_k, k_invalid_zero)\n    print(f\"Projected data (k={k_invalid_zero}): {projected_invalid_zero}\")\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_train_samples, n_features = X_train.shape\n    n_test_samples = X_test.shape[0]\n\n    # Initialize the additive model with the average of the training labels\n    F_train = np.full(n_train_samples, np.mean(y_train))\n    F_test = np.full(n_test_samples, np.mean(y_train))\n\n    # Store the weak learners (stumps)\n    stumps = []\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F_train\n\n        # Fit a decision stump to the residuals\n        best_stump = None\n        min_squared_error = float('inf')\n\n        # Iterate through all features and all possible split points\n        for feature_index in range(n_features):\n            # Get unique values for the current feature to consider as thresholds\n            thresholds = np.unique(X_train[:, feature_index])\n\n            for threshold in thresholds:\n                # Split data based on the threshold\n                left_indices = X_train[:, feature_index] <= threshold\n                right_indices = ~left_indices\n\n                # Calculate the constant prediction for left and right nodes\n                # This is the average of the residuals in each node\n                if np.sum(left_indices) > 0:\n                    pred_left = np.mean(residuals[left_indices])\n                else:\n                    pred_left = 0.0\n\n                if np.sum(right_indices) > 0:\n                    pred_right = np.mean(residuals[right_indices])\n                else:\n                    pred_right = 0.0\n\n                # Calculate the squared error for this stump\n                current_residuals = np.copy(residuals)\n                current_residuals[left_indices] -= pred_left\n                current_residuals[right_indices] -= pred_right\n                squared_error = np.sum(current_residuals**2)\n\n                # Check if this stump is better than the current best\n                if squared_error < min_squared_error:\n                    min_squared_error = squared_error\n                    best_stump = {\n                        'feature_index': feature_index,\n                        'threshold': threshold,\n                        'pred_left': pred_left,\n                        'pred_right': pred_right\n                    }\n\n        # Add the best stump to the ensemble\n        stumps.append(best_stump)\n\n        # Update the additive model for training data\n        feature_index = best_stump['feature_index']\n        threshold = best_stump['threshold']\n        pred_left = best_stump['pred_left']\n        pred_right = best_stump['pred_right']\n\n        left_indices_train = X_train[:, feature_index] <= threshold\n        right_indices_train = ~left_indices_train\n\n        F_train[left_indices_train] += learning_rate * pred_left\n        F_train[right_indices_train] += learning_rate * pred_right\n\n    # Predict on the test set\n    for stump in stumps:\n        feature_index = stump['feature_index']\n        threshold = stump['threshold']\n        pred_left = stump['pred_left']\n        pred_right = stump['pred_right']\n\n        left_indices_test = X_test[:, feature_index] <= threshold\n        right_indices_test = ~left_indices_test\n\n        F_test[left_indices_test] += learning_rate * pred_left\n        F_test[right_indices_test] += learning_rate * pred_right\n\n    # Threshold the final scores at 0.5 to get binary predictions\n    predictions = (F_test > 0.5).astype(int)\n\n    return predictions.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0], [5.0, 6.0]]\n    y_train = [0, 0, 1, 1, 1]\n    X_test = [[1.5, 2.5], [4.5, 5.5], [0.5, 1.5]]\n\n    predictions = gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=10, learning_rate=0.2)\n    print(\"Predictions:\", predictions)\n\n    # Another example\n    X_train_2 = [[0.1], [0.2], [0.3], [0.7], [0.8], [0.9]]\n    y_train_2 = [0, 0, 0, 1, 1, 1]\n    X_test_2 = [[0.05], [0.5], [0.95]]\n\n    predictions_2 = gradient_boosting_classifier(X_train_2, y_train_2, X_test_2, n_estimators=5, learning_rate=0.5)\n    print(\"Predictions 2:\", predictions_2)\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    m, n_v = X.shape\n    if m == 0:\n        return []\n\n    # Positive phase\n    # Compute hidden probabilities given visible units\n    h0_prob = 1 / (1 + np.exp(-(np.dot(X, W) + hbias)))\n\n    # Gibbs sampling (without stochastic sampling)\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    for _ in range(k):\n        # Sample visible units given hidden probabilities\n        v_k_prob = 1 / (1 + np.exp(-(np.dot(h_k_prob, W.T) + vbias)))\n        # Sample hidden units given visible probabilities\n        h_k_prob = 1 / (1 + np.exp(-(np.dot(v_k_prob, W) + hbias)))\n\n    # Compute gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round and convert to list of lists\n    W_new_rounded = np.round(W_new, 4)\n    return W_new_rounded.tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([[1, 0, 1],\n                  [0, 1, 0],\n                  [1, 1, 1]])\n    W = np.array([[0.1, 0.2],\n                  [0.3, 0.4],\n                  [0.5, 0.6]])\n    hbias = np.array([0.1, 0.2])\n    vbias = np.array([0.1, 0.2, 0.3])\n    learning_rate = 0.1\n    k = 1\n\n    updated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n    print(\"Updated Weight Matrix:\")\n    for row in updated_W:\n        print(row)\n\n    # Example with empty batch\n    X_empty = np.array([])\n    W_empty = np.array([[0.1, 0.2], [0.3, 0.4]])\n    hbias_empty = np.array([0.1, 0.2])\n    vbias_empty = np.array([0.1, 0.2])\n    learning_rate_empty = 0.1\n    k_empty = 1\n\n    updated_W_empty = contrastive_divergence(X_empty.reshape(0, 2), W_empty, hbias_empty, vbias_empty, learning_rate_empty, k_empty)\n    print(\"\\nUpdated Weight Matrix (empty batch):\")\n    print(updated_W_empty)\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n\n    # Convert to NumPy arrays for easier element-wise operations\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n\n    # Compute the absolute differences\n    diffs = np.abs(x_arr - y_arr)\n\n    # Find the maximum difference\n    max_diff = np.max(diffs)\n\n    # Round to four decimal places and return as a standard Python float\n    return round(float(max_diff), 4)\n\nif __name__ == '__main__':\n    # Example usage:\n    x1 = [1, 2, 3]\n    y1 = [2, 4, 6]\n    distance1 = chebyshev(x1, y1)\n    print(f\"Chebyshev distance between {x1} and {y1}: {distance1}\")\n\n    x2 = [1.5, 2.0, 3.5]\n    y2 = [1.0, 2.5, 4.0]\n    distance2 = chebyshev(x2, y2)\n    print(f\"Chebyshev distance between {x2} and {y2}: {distance2}\")\n\n    x3 = [1, 2, 3]\n    y3 = [2, 4]\n    distance3 = chebyshev(x3, y3)\n    print(f\"Chebyshev distance between {x3} and {y3}: {distance3}\")\n\n    x4 = np.array([0.1, 0.2, 0.3])\n    y4 = np.array([0.15, 0.25, 0.35])\n    distance4 = chebyshev(x4, y4)\n    print(f\"Chebyshev distance between {x4} and {y4}: {distance4}\")\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # TODO: implement the function\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n\n    # Reconstruction Loss (Binary Cross-Entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n\n    # KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Total Loss per sample\n    total_loss_per_sample = reconstruction_loss + kl_divergence\n\n    # Mini-batch average loss\n    average_loss = np.mean(total_loss_per_sample)\n\n    return round(average_loss, 6)\n\nif __name__ == '__main__':\n    # Example Usage\n    batch_size = 4\n    n_features = 10\n    latent_dim = 5\n\n    # Generate some dummy data\n    y_true = np.random.randint(0, 2, size=(batch_size, n_features))\n    y_pred_probs = np.random.rand(batch_size, n_features)\n    t_mean_vals = np.random.randn(batch_size, latent_dim)\n    t_log_var_vals = np.random.randn(batch_size, latent_dim)\n\n    loss = vae_loss(y_true, y_pred_probs, t_mean_vals, t_log_var_vals)\n    print(f\"Calculated VAE Loss: {loss}\")\n\n    # Example with specific values for verification\n    y_test = np.array([[1, 0], [0, 1]])\n    y_pred_test = np.array([[0.9, 0.1], [0.2, 0.8]])\n    t_mean_test = np.array([[0.1, -0.2], [0.3, 0.4]])\n    t_log_var_test = np.array([[0.0, 0.0], [0.1, -0.1]])\n\n    loss_test = vae_loss(y_test, y_pred_test, t_mean_test, t_log_var_test)\n    print(f\"Calculated VAE Loss (Test): {loss_test}\")\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n\n    # Linear part: w0 + sum(w_j * x_j)\n    linear_part = w0 + np.dot(X_np, w_np)\n\n    # Interaction part: 0.5 * sum_{f=1}^{k} [ (sum_j V_{j,f} x_j)^2 - sum_j V_{j,f}^2 x_j^2 ]\n    # (sum_j V_{j,f} x_j)^2\n    term1 = np.dot(X_np, V_np)  # Shape (n_samples, k)\n    term1_squared = term1 ** 2  # Shape (n_samples, k)\n\n    # sum_j V_{j,f}^2 x_j^2\n    term2 = np.dot(X_np ** 2, V_np ** 2)  # Shape (n_samples, k)\n\n    # sum_{f=1}^{k} [ (sum_j V_{j,f} x_j)^2 - sum_j V_{j,f}^2 x_j^2 ]\n    interaction_sum = np.sum(term1_squared - term2, axis=1)  # Shape (n_samples,)\n\n    # Final prediction\n    predictions = linear_part + 0.5 * interaction_sum\n\n    return np.round(predictions, 4).tolist()\n\nif __name__ == '__main__':\n    # Example Usage\n    X = [\n        [1, 0, 2],\n        [0, 1, 1],\n        [1, 1, 0]\n    ]\n    w0 = 0.5\n    w = [0.1, 0.2, 0.3]\n    V = [\n        [0.4, 0.6],\n        [0.7, 0.8],\n        [0.9, 1.0]\n    ]\n\n    predictions = fm_predict(X, w0, w, V)\n    print(f\"Predictions: {predictions}\")\n\n    # Another example\n    X2 = [\n        [1, 1],\n        [0, 0]\n    ]\n    w0_2 = 1.0\n    w_2 = [0.5, -0.5]\n    V_2 = [\n        [0.1, 0.2, 0.3],\n        [0.4, 0.5, 0.6]\n    ]\n    predictions2 = fm_predict(X2, w0_2, w_2, V_2)\n    print(f\"Predictions 2: {predictions2}\")\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to NumPy array for element-wise operations\n    z_np = np.asarray(z)\n\n    # Apply the numerically stable sigmoid function\n    # For z > 0, use 1 / (1 + exp(-z))\n    # For z <= 0, use exp(z) / (1 + exp(z))\n    # This avoids overflow for large positive z and underflow for large negative z\n    sigmoid_output = np.where(z_np >= 0,\n                              1 / (1 + np.exp(-z_np)),\n                              np.exp(z_np) / (1 + np.exp(z_np)))\n\n    # Round the output to four decimal places\n    rounded_output = np.round(sigmoid_output, 4)\n\n    # Preserve the input structure\n    if np.isscalar(z):\n        return float(rounded_output)\n    else:\n        return rounded_output.tolist()\n\nif __name__ == '__main__':\n    # Example usage:\n    print(f\"sigmoid(-1): {sigmoid(-1)}\")\n    print(f\"sigmoid(0): {sigmoid(0)}\")\n    print(f\"sigmoid(1): {sigmoid(1)}\")\n    print(f\"sigmoid([-1, 0, 1]): {sigmoid([-1, 0, 1])}\")\n    print(f\"sigmoid((2, 3, 4)): {sigmoid((2, 3, 4))}\")\n    print(f\"sigmoid(np.array([[5, 6], [7, 8]])): {sigmoid(np.array([[5, 6], [7, 8]]))}\")\n    print(f\"sigmoid(700): {sigmoid(700)}\")\n    print(f\"sigmoid(-700): {sigmoid(-700)}\")\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    # =======  End of your code  =======\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))\n\nactual_1d = np.array([1, 0, 2])\npredicted_1d = np.array([1, 1, 2])\nprint(accuracy(actual_1d, predicted_1d))\n\nactual_col_vec = np.array([[1], [0], [2]])\npredicted_col_vec = np.array([[1], [1], [2]])\nprint(accuracy(actual_col_vec, predicted_col_vec))\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        if not z:\n            return []\n        if isinstance(z[0], (int, float)):\n            return [np.round(x * (1 - x), 4) for x in z]\n        else:\n            return [sigmoid_grad(sublist) for sublist in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError(\"Input must be a scalar, list, or NumPy array.\")\n\nif __name__ == '__main__':\n    # Example Usage:\n    scalar_input = 0.5\n    scalar_output = sigmoid_grad(scalar_input)\n    print(f\"Scalar input: {scalar_input}, Gradient: {scalar_output}\")\n\n    list_input_1d = [0.1, 0.9, 0.3]\n    list_output_1d = sigmoid_grad(list_input_1d)\n    print(f\"1D list input: {list_input_1d}, Gradient: {list_output_1d}\")\n\n    list_input_2d = [[0.2, 0.8], [0.4, 0.6]]\n    list_output_2d = sigmoid_grad(list_input_2d)\n    print(f\"2D list input: {list_input_2d}, Gradient: {list_output_2d}\")\n\n    numpy_input_1d = np.array([0.1, 0.9, 0.3])\n    numpy_output_1d = sigmoid_grad(numpy_input_1d)\n    print(f\"1D NumPy array input: {numpy_input_1d}, Gradient: {numpy_output_1d}\")\n\n    numpy_input_2d = np.array([[0.2, 0.8], [0.4, 0.6]])\n    numpy_output_2d = sigmoid_grad(numpy_input_2d)\n    print(f\"2D NumPy array input: {numpy_input_2d}, Gradient: {numpy_output_2d}\")\n\n    empty_list_input = []\n    empty_list_output = sigmoid_grad(empty_list_input)\n    print(f\"Empty list input: {empty_list_input}, Gradient: {empty_list_output}\")\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n\n    # Determine the range for each dimension\n    x1_min, x1_max = X_np[:, 0].min(), X_np[:, 0].max()\n    x2_min, x2_max = X_np[:, 1].min(), X_np[:, 1].max()\n\n    # Create equally spaced 1-D arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a mesh-grid\n    X1, X2 = np.meshgrid(x1_plot, x2_plot)\n\n    # Classify every grid point\n    # The linear combination w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b\n    linear_combination = W[0] * X1 + W[1] * X2 + b\n\n    # Apply the sign function\n    predictions = np.where(linear_combination >= 0, 1, -1)\n\n    # Convert the NumPy array to a Python list of lists\n    return predictions.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple data points\n    data = [[1, 2], [3, 4], [5, 6], [-1, -2], [-3, -4]]\n\n    # Classifier parameters\n    weights = [1, -1]\n    bias = 0\n\n    # Generate the decision boundary grid\n    grid = decision_boundary_grid(data, weights, bias, grid_n=10)\n\n    # Print the generated grid (for a small grid_n)\n    for row in grid:\n        print(row)\n\n    # Another example\n    data2 = [[0, 0], [1, 1], [2, 2], [-1, 0], [0, -1]]\n    weights2 = [1, 1]\n    bias2 = -1\n    grid2 = decision_boundary_grid(data2, weights2, bias2, grid_n=5)\n    print(\"\\nSecond example grid:\")\n    for row in grid2:\n        print(row)\n```"}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    m_samples, _ = X_test.shape\n    epsilon = 1e-9\n\n    # Separate data by class\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n\n    # Calculate class priors\n    prior_0 = len(X_train_class_0) / n_samples\n    prior_1 = len(X_train_class_1) / n_samples\n\n    # Calculate mean and standard deviation for each feature and class\n    mean_0 = np.mean(X_train_class_0, axis=0)\n    std_0 = np.std(X_train_class_0, axis=0) + epsilon\n\n    mean_1 = np.mean(X_train_class_1, axis=0)\n    std_1 = np.std(X_train_class_1, axis=0) + epsilon\n\n    # Prediction phase\n    predictions = []\n    for sample in X_test:\n        # Calculate likelihood for each class\n        likelihood_0 = np.prod(1 / (np.sqrt(2 * np.pi) * std_0) * np.exp(-((sample - mean_0)**2) / (2 * std_0**2)))\n        likelihood_1 = np.prod(1 / (np.sqrt(2 * np.pi) * std_1) * np.exp(-((sample - mean_1)**2) / (2 * std_1**2)))\n\n        # Calculate posterior probability (proportional to likelihood * prior)\n        posterior_0 = likelihood_0 * prior_0\n        posterior_1 = likelihood_1 * prior_1\n\n        # Predict the class with the higher posterior\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\n    y_train = np.array([0, 0, 0, 1, 1, 1])\n    X_test = np.array([[1.5, 2.5], [5.5, 6.5], [3.5, 4.5]])\n\n    predictions = gaussian_naive_bayes(X_train, y_train, X_test)\n    print(f\"Predictions: {predictions}\")\n\n    # Another example\n    X_train_2 = np.array([[1, 1], [1, 2], [2, 2], [3, 3], [3, 4], [4, 4]])\n    y_train_2 = np.array([0, 0, 0, 1, 1, 1])\n    X_test_2 = np.array([[1.5, 1.5], [3.5, 3.5], [2.5, 2.5]])\n\n    predictions_2 = gaussian_naive_bayes(X_train_2, y_train_2, X_test_2)\n    print(f\"Predictions 2: {predictions_2}\")\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Args:\n        AL: Probability vector of shape (1, m) or (m,)\n        Y: True labels vector of shape (1, m) or (m,)\n\n    Returns:\n        The scalar binary cross-entropy cost as a float.\n    \"\"\"\n    m = AL.shape[-1]  # Get the number of examples\n\n    # Clip probabilities to avoid numerical overflow\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n\n    # Compute the cost\n    cost = -1/m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n\n    # Return the cost as a Python float\n    return float(cost)\n\nif __name__ == '__main__':\n    # Example usage:\n    AL1 = np.array([[0.9, 0.1, 0.8, 0.2]])\n    Y1 = np.array([[1, 0, 1, 0]])\n    cost1 = compute_cost(AL1, Y1)\n    print(f\"Cost 1: {cost1:.4f}\")\n\n    AL2 = np.array([0.9, 0.1, 0.8, 0.2])\n    Y2 = np.array([1, 0, 1, 0])\n    cost2 = compute_cost(AL2, Y2)\n    print(f\"Cost 2: {cost2:.4f}\")\n\n    AL3 = np.array([[0.5, 0.5, 0.5]])\n    Y3 = np.array([[1, 0, 1]])\n    cost3 = compute_cost(AL3, Y3)\n    print(f\"Cost 3: {cost3:.4f}\")\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Write your code below\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    O = observations\n    N = len(pi)  # Number of states\n    T = len(O)  # Length of observation sequence\n\n    if not (0 <= t < T):\n        return []\n\n    # 1. Compute forward probabilities (alpha)\n    alpha = np.zeros((T, N))\n\n    # Base case t=0\n    alpha[0, :] = pi * B[:, O[0]]\n\n    # Recursive step t=1 to T-1\n    for tt in range(1, T):\n        for j in range(N):\n            alpha[tt, j] = np.sum(alpha[tt - 1, :] * A[:, j]) * B[j, O[tt]]\n\n    # 2. Compute backward probabilities (beta)\n    beta = np.zeros((T, N))\n\n    # Base case t=T-1\n    beta[T - 1, :] = 1.0\n\n    # Recursive step t=T-2 down to 0\n    for tt in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[tt, i] = np.sum(A[i, :] * B[:, O[tt + 1]] * beta[tt + 1, :])\n\n    # 3. Combine alpha and beta to obtain gamma_t\n    gamma_t = np.zeros(N)\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n\n    if denominator == 0:\n        # Handle cases where the probability of the observation sequence is zero\n        # This might happen with impossible observation sequences given the HMM\n        return [0.0] * N\n\n    gamma_t = numerator / denominator\n\n    # 4. Round and return\n    rounded_gamma_t = [round(prob, 4) for prob in gamma_t]\n\n    return rounded_gamma_t\n\nif __name__ == '__main__':\n    # Example HMM parameters (from Rabiner's tutorial)\n    hmm_example = {\n        'pi': [0.6, 0.4],\n        'A': [[0.7, 0.3], [0.4, 0.6]],\n        'B': [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n    }\n\n    # Example observation sequence (indices corresponding to columns in B)\n    observations_example = [0, 1, 2] # Corresponds to observations 1, 2, 3\n\n    # Example time step\n    t_example = 1\n\n    gamma_t_result = gamma_probabilities(hmm_example, observations_example, t_example)\n    print(f\"Gamma at time t={t_example}: {gamma_t_result}\")\n\n    # Example with t outside range\n    t_outside = 3\n    gamma_t_outside = gamma_probabilities(hmm_example, observations_example, t_outside)\n    print(f\"Gamma at time t={t_outside}: {gamma_t_outside}\")\n\n    t_negative = -1\n    gamma_t_negative = gamma_probabilities(hmm_example, observations_example, t_negative)\n    print(f\"Gamma at time t={t_negative}: {gamma_t_negative}\")\n\n    # Another example\n    hmm_simple = {\n        'pi': [0.5, 0.5],\n        'A': [[0.8, 0.2], [0.3, 0.7]],\n        'B': [[0.9, 0.1], [0.2, 0.8]]\n    }\n    observations_simple = [0, 0, 1]\n    t_simple = 1\n    gamma_t_simple = gamma_probabilities(hmm_simple, observations_simple, t_simple)\n    print(f\"Gamma at time t={t_simple} for simple HMM: {gamma_t_simple}\")\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [0] * n_samples  # 0: unvisited, -1: noise, 1, 2, ...: cluster id\n    cluster_id = 0\n\n    # 1. Compute every pairwise Euclidean distance and build neighborhood list\n    neighborhoods = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                distance = np.linalg.norm(data[i] - data[j])\n                if distance <= eps:\n                    neighborhoods[i].append(j)\n\n    # 3. Identify core points\n    is_core = [len(neighborhoods[i]) + 1 >= min_samples for i in range(n_samples)]\n\n    # 4. Expand clusters using BFS\n    for i in range(n_samples):\n        if labels[i] == 0 and is_core[i]:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque([i])\n\n            while queue:\n                current_point = queue.popleft()\n                neighbors = neighborhoods[current_point]\n\n                for neighbor in neighbors:\n                    if labels[neighbor] == 0:\n                        labels[neighbor] = cluster_id\n                        if is_core[neighbor]:\n                            queue.append(neighbor)\n                    elif labels[neighbor] == -1:\n                        # Noise points can be absorbed into a cluster if they are neighbors\n                        labels[neighbor] = cluster_id\n\n    # 5. Label remaining unlabeled points as noise\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n\n    return labels\n\nif __name__ == '__main__':\n    # Example Usage\n    data = np.array([\n        [1, 1], [1, 2], [2, 2], [2, 3],\n        [8, 8], [8, 9], [9, 8], [9, 9],\n        [0, 5], [5, 0]\n    ])\n\n    eps = 1.5\n    min_samples = 3\n\n    labels = dbscan(data, eps, min_samples)\n    print(\"Cluster labels:\", labels)\n\n    # Another example\n    data2 = np.array([\n        [1, 1], [1.5, 1.5], [2, 2],\n        [5, 5], [5.5, 5.5], [6, 6],\n        [10, 10], [10.5, 10.5], [11, 11],\n        [0, 0], [7, 7]\n    ])\n\n    eps2 = 0.7\n    min_samples2 = 2\n\n    labels2 = dbscan(data2, eps2, min_samples2)\n    print(\"Cluster labels 2:\", labels2)\n```"}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Args:\n        data: A 2-D NumPy array containing N samples with D features.\n        k: The number of Gaussian components.\n        max_iter: The maximum number of EM iterations.\n        epsilon: The tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n        A Python list of length N containing the final cluster label of each sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    if k == 1:\n        return [0] * n_samples\n\n    # 1. Randomly initializes the parameters of K Gaussian components\n    np.random.seed(42)  # for reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = [np.cov(data.T) + np.eye(n_features) * 1e-6 for _ in range(k)]  # Add small identity for stability\n\n    log_likelihoods = []\n\n    for iteration in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            try:\n                # Calculate multivariate normal probability density\n                diff = data - means[i]\n                cov_inv = np.linalg.inv(covariances[i])\n                det_cov = np.linalg.det(covariances[i])\n                if det_cov <= 0:\n                    # Handle singular covariance matrix\n                    det_cov = 1e-6\n                    covariances[i] += np.eye(n_features) * 1e-6\n                    cov_inv = np.linalg.inv(covariances[i])\n                    det_cov = np.linalg.det(covariances[i])\n\n                exponent = -0.5 * np.sum(diff @ cov_inv * diff, axis=1)\n                responsibilities[:, i] = weights[i] * (1.0 / (math.sqrt((2 * math.pi)**n_features * det_cov))) * np.exp(exponent)\n            except np.linalg.LinAlgError:\n                # Handle potential numerical issues with inverse\n                responsibilities[:, i] = 1e-10  # Assign a small value\n\n        # Normalize responsibilities\n        sum_responsibilities = np.sum(responsibilities, axis=1, keepdims=True)\n        responsibilities /= sum_responsibilities\n\n        # Calculate log-likelihood (for monitoring convergence, not strictly required by the task)\n        log_likelihood = np.sum(np.log(np.sum(responsibilities * np.array([weights[i] * (1.0 / (math.sqrt((2 * math.pi)**n_features * np.linalg.det(covariances[i])))) * np.exp(-0.5 * np.sum((data - means[i]) @ np.linalg.inv(covariances[i]) * (data - means[i]), axis=1)) for i in range(k)]).T, axis=1)))\n        log_likelihoods.append(log_likelihood)\n\n        # M-step: Update parameters\n        prev_weights = weights.copy()\n        for i in range(k):\n            nk = np.sum(responsibilities[:, i])\n            weights[i] = nk / n_samples\n            means[i] = np.sum(responsibilities[:, i, np.newaxis] * data, axis=0) / nk\n            diff = data - means[i]\n            covariances[i] = (diff.T @ (responsibilities[:, i, np.newaxis] * diff)) / nk + np.eye(n_features) * 1e-6 # Add small identity for stability\n\n        # Check for convergence\n        if np.max(np.abs(weights - prev_weights)) < epsilon:\n            break\n\n    # 3. Assign every sample to the component with the largest posterior probability\n    cluster_labels = np.argmax(responsibilities, axis=1)\n\n    # 4. Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    remapping = np.zeros(k, dtype=int)\n    for new_label, old_label in enumerate(sorted_indices):\n        remapping[old_label] = new_label\n\n    final_labels = [remapping[label] for label in cluster_labels]\n\n    return final_labels\n\nif __name__ == '__main__':\n    # Example Usage\n    from sklearn.datasets import make_blobs\n\n    # Generate synthetic data\n    n_samples = 300\n    n_features = 2\n    n_components = 3\n    X, y_true = make_blobs(n_samples=n_samples, centers=n_components, cluster_std=0.8, random_state=42)\n\n    # Run GMM EM\n    predicted_labels = gmm_em(X, k=n_components)\n\n    print(\"Predicted Cluster Labels (first 20):\", predicted_labels[:20])\n    print(\"Length of predicted labels:\", len(predicted_labels))\n    print(\"Unique predicted labels:\", sorted(list(set(predicted_labels))))\n\n    # Example with K=1\n    predicted_labels_k1 = gmm_em(X, k=1)\n    print(\"\\nPredicted Cluster Labels for K=1 (first 20):\", predicted_labels_k1[:20])\n    print(\"Length of predicted labels for K=1:\", len(predicted_labels_k1))\n    print(\"Unique predicted labels for K=1:\", sorted(list(set(predicted_labels_k1))))\n\n    # Example with different data\n    data_2d = np.array([[1, 1], [1.5, 2], [5, 7], [6, 8], [1, 0.5], [5.5, 7.5]])\n    predicted_labels_small = gmm_em(data_2d, k=2)\n    print(\"\\nPredicted Cluster Labels for small dataset:\", predicted_labels_small)\n    print(\"Length of predicted labels for small dataset:\", len(predicted_labels_small))\n    print(\"Unique predicted labels for small dataset:\", sorted(list(set(predicted_labels_small))))\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    n_samples = data.shape[0]\n\n    if n_cluster == 1:\n        return [0] * n_samples\n\n    # 1. Build a fully\u2013connected similarity graph using the Gaussian kernel\n    # Calculate pairwise squared distances\n    sq_distances = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    # Calculate similarity matrix\n    similarity_matrix = np.exp(-gamma * sq_distances)\n    # Set diagonal to 0 to avoid self-similarity\n    np.fill_diagonal(similarity_matrix, 0)\n\n    # 2. Construct the Laplacian\n    degree_matrix = np.diag(np.sum(similarity_matrix, axis=1))\n\n    if method == 'unnormalized':\n        laplacian = degree_matrix - similarity_matrix\n    elif method == 'normalized':\n        # Handle potential division by zero for isolated points\n        d_inv_sqrt = np.zeros_like(degree_matrix)\n        non_zero_degrees = np.where(np.diag(degree_matrix) > 1e-8)[0]\n        d_inv_sqrt[non_zero_degrees, non_zero_degrees] = 1.0 / np.sqrt(np.diag(degree_matrix)[non_zero_degrees])\n        laplacian = d_inv_sqrt @ (degree_matrix - similarity_matrix) @ d_inv_sqrt\n    else:\n        raise ValueError(\"Method must be 'unnormalized' or 'normalized'\")\n\n    # 3. Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(laplacian)\n    # Sort eigenvalues and corresponding eigenvectors\n    sorted_indices = np.argsort(eigenvalues)\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Select the first n_cluster eigenvectors (excluding the trivial eigenvector for unnormalized)\n    if method == 'unnormalized':\n        # The first eigenvector of the unnormalized Laplacian is all ones, which is trivial.\n        # We take the next n_cluster eigenvectors.\n        selected_eigenvectors = eigenvectors[:, 1:n_cluster + 1]\n    elif method == 'normalized':\n        # For the normalized Laplacian, the first eigenvector is also related to the constant vector,\n        # but we take the first n_cluster eigenvectors as per standard practice.\n        selected_eigenvectors = eigenvectors[:, :n_cluster]\n\n    # If the normalized variant is chosen, row-normalise the eigenvector matrix.\n    if method == 'normalized':\n        row_sums = np.sum(selected_eigenvectors**2, axis=1, keepdims=True)\n        # Handle potential division by zero\n        row_sums[row_sums < 1e-8] = 1.0\n        selected_eigenvectors = selected_eigenvectors / np.sqrt(row_sums)\n\n    # 4. Run k-means in the eigenvector space\n    # Deterministic k-means: initialize centroids with the first n_cluster samples\n    centroids = selected_eigenvectors[:n_cluster].copy()\n    labels = np.zeros(n_samples, dtype=int)\n\n    max_iterations = 100\n    for _ in range(max_iterations):\n        # Assign points to the nearest centroid\n        distances_to_centroids = np.sum((selected_eigenvectors[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        new_labels = np.argmin(distances_to_centroids, axis=1)\n\n        # Check for convergence\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        for i in range(n_cluster):\n            points_in_cluster = selected_eigenvectors[labels == i]\n            if len(points_in_cluster) > 0:\n                centroids[i] = np.mean(points_in_cluster, axis=0)\n            # If a cluster becomes empty, keep the old centroid or reinitialize (here we keep old)\n\n    # Relabel clusters based on the smallest original index\n    original_indices = np.arange(n_samples)\n    cluster_to_min_index = {}\n    for i in range(n_cluster):\n        indices_in_cluster = original_indices[labels == i]\n        if len(indices_in_cluster) > 0:\n            cluster_to_min_index[i] = np.min(indices_in_cluster)\n        else:\n            # Handle empty clusters - assign a large value to put them at the end\n            cluster_to_min_index[i] = np.inf\n\n    # Sort clusters by their minimum original index\n    sorted_clusters = sorted(cluster_to_min_index.items(), key=lambda item: item[1])\n\n    # Create a mapping from old label to new label\n    old_to_new_label = {old_label: new_label for new_label, (old_label, _) in enumerate(sorted_clusters)}\n\n    # Apply the new labels\n    relabelled_labels = [old_to_new_label[label] for label in labels]\n\n    return relabelled_labels\n\nif __name__ == '__main__':\n    # Example Usage\n    from sklearn.datasets import make_blobs\n    import matplotlib.pyplot as plt\n\n    # Generate synthetic data\n    X, y_true = make_blobs(n_samples=300, centers=3, cluster_std=0.5, random_state=42)\n\n    # Perform spectral clustering (unnormalized)\n    labels_unnormalized = spectral_clustering(X, n_cluster=3, gamma=2.0, method='unnormalized')\n\n    # Perform spectral clustering (normalized)\n    labels_normalized = spectral_clustering(X, n_cluster=3, gamma=2.0, method='normalized')\n\n    # Perform spectral clustering with n_cluster=1\n    labels_one_cluster = spectral_clustering(X, n_cluster=1)\n\n    # Plot results\n    plt.figure(figsize=(15, 5))\n\n    plt.subplot(1, 3, 1)\n    plt.scatter(X[:, 0], X[:, 1], c=labels_unnormalized, cmap='viridis', s=50)\n    plt.title('Spectral Clustering (Unnormalized)')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n\n    plt.subplot(1, 3, 2)\n    plt.scatter(X[:, 0], X[:, 1], c=labels_normalized, cmap='viridis', s=50)\n    plt.title('Spectral Clustering (Normalized)')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n\n    plt.subplot(1, 3, 3)\n    plt.scatter(X[:, 0], X[:, 1], c=labels_one_cluster, cmap='viridis', s=50)\n    plt.title('Spectral Clustering (1 Cluster)')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n\n    plt.tight_layout()\n    plt.show()\n\n    # Example with a different dataset structure (two moons)\n    from sklearn.datasets import make_moons\n    X_moons, y_true_moons = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n    labels_moons_unnormalized = spectral_clustering(X_moons, n_cluster=2, gamma=10.0, method='unnormalized')\n    labels_moons_normalized = spectral_clustering(X_moons, n_cluster=2, gamma=10.0, method='normalized')\n\n    plt.figure(figsize=(10, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.scatter(X_moons[:, 0], X_moons[:, 1], c=labels_moons_unnormalized, cmap='viridis', s=50)\n    plt.title('Spectral Clustering (Moons, Unnormalized)')"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build the Gram matrix\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        updates_made = False\n        for i in range(N):\n            # compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updates_made = True\n\n        if not updates_made:\n            break\n\n    # Recover the weight vector\n    w = np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0)\n\n    # Round and return\n    w_rounded = [round(float(wi), 4) for wi in w]\n    b_rounded = round(float(b), 4)\n\n    return (w_rounded, b_rounded)\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple linearly separable data\n    X_train = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5],\n                        [-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5]])\n    y_train = np.array([1, 1, 1, 1, 1, -1, -1, -1, -1, -1])\n\n    w, b = perceptron_dual_train(X_train, y_train)\n    print(f\"Learned weights (w): {w}\")\n    print(f\"Learned bias (b): {b}\")\n\n    # Test with a new data point\n    test_point = np.array([6, 6])\n    prediction = np.sign(np.dot(w, test_point) + b)\n    print(f\"Prediction for {test_point}: {prediction}\")\n\n    test_point = np.array([-6, -6])\n    prediction = np.sign(np.dot(w, test_point) + b)\n    print(f\"Prediction for {test_point}: {prediction}\")\n\n    test_point = np.array([0, 0])\n    prediction = np.sign(np.dot(w, test_point) + b)\n    print(f\"Prediction for {test_point}: {prediction}\")\n\n    # Another example\n    X_train_2 = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])\n    y_train_2 = np.array([-1, 1, 1, 1])\n\n    w2, b2 = perceptron_dual_train(X_train_2, y_train_2)\n    print(f\"\\nLearned weights (w2): {w2}\")\n    print(f\"Learned bias (b2): {b2}\")\n\n    test_point_2 = np.array([0, 0])\n    prediction_2 = np.sign(np.dot(w2, test_point_2) + b2)\n    print(f\"Prediction for {test_point_2}: {prediction_2}\")\n\n    test_point_2 = np.array([1, 1])\n    prediction_2 = np.sign(np.dot(w2, test_point_2) + b2)\n    print(f\"Prediction for {test_point_2}: {prediction_2}\")\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    \"\"\"A node in a decision tree.\"\"\"\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label  # Feature index to inspect (internal nodes)\n        self.x = x          # Edge value from parent (classification)\n        self.s = s          # Split point (regression)\n        self.y = y          # Leaf value (prediction)\n        self.child = child if child is not None else [] # List of children\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n\n    while current_node.y is None:  # While not a leaf node\n        feature_index = current_node.label\n        feature_value = features[feature_index]\n\n        if task_type == 'classification':\n            next_node = None\n            for child_node in current_node.child:\n                if child_node.x == feature_value:\n                    next_node = child_node\n                    break\n            if next_node is None:\n                # Default to the second child if no match is found\n                next_node = current_node.child[1]\n            current_node = next_node\n\n        elif task_type == 'regression':\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n\n    return current_node.y\n\nif __name__ == '__main__':\n    # Example Usage:\n\n    # Classification Tree Example\n    # Tree structure:\n    # root (label=0)\n    #   - child1 (x=0, label=1)\n    #     - child1_1 (x=0, y=10)\n    #     - child1_2 (x=1, y=20)\n    #   - child2 (x=1, y=30) # Default child\n\n    classification_tree = Node(label=0)\n    child1 = Node(x=0, label=1)\n    child2 = Node(x=1, y=30)\n    classification_tree.child = [child1, child2]\n\n    child1_1 = Node(x=0, y=10)\n    child1_2 = Node(x=1, y=20)\n    child1.child = [child1_1, child1_2]\n\n    sample_classification_1 = [0, 0]\n    prediction_classification_1 = predict_sample(classification_tree, sample_classification_1, 'classification')\n    print(f\"Classification prediction for {sample_classification_1}: {prediction_classification_1}\") # Expected: 10\n\n    sample_classification_2 = [0, 1]\n    prediction_classification_2 = predict_sample(classification_tree, sample_classification_2, 'classification')\n    print(f\"Classification prediction for {sample_classification_2}: {prediction_classification_2}\") # Expected: 20\n\n    sample_classification_3 = [1, 5] # Feature 1 value doesn't matter here\n    prediction_classification_3 = predict_sample(classification_tree, sample_classification_3, 'classification')\n    print(f\"Classification prediction for {sample_classification_3}: {prediction_classification_3}\") # Expected: 30\n\n    sample_classification_4 = [0, 99] # Feature 1 value doesn't match any child of child1\n    prediction_classification_4 = predict_sample(classification_tree, sample_classification_4, 'classification')\n    print(f\"Classification prediction for {sample_classification_4}: {prediction_classification_4}\") # Expected: 20 (default to second child of child1)\n\n\n    print(\"-\" * 20)\n\n    # Regression Tree Example\n    # Tree structure:\n    # root (label=0, s=5.0)\n    #   - child1 (y=100.5) # if feature[0] <= 5.0\n    #   - child2 (label=1, s=10.0) # if feature[0] > 5.0\n    #     - child2_1 (y=200.2) # if feature[1] <= 10.0\n    #     - child2_2 (y=300.8) # if feature[1] > 10.0\n\n    regression_tree = Node(label=0, s=5.0)\n    child1_reg = Node(y=100.5)\n    child2_reg = Node(label=1, s=10.0)\n    regression_tree.child = [child1_reg, child2_reg]\n\n    child2_1_reg = Node(y=200.2)\n    child2_2_reg = Node(y=300.8)\n    child2_reg.child = [child2_1_reg, child2_2_reg]\n\n    sample_regression_1 = [3.0, 7.0]\n    prediction_regression_1 = predict_sample(regression_tree, sample_regression_1, 'regression')\n    print(f\"Regression prediction for {sample_regression_1}: {prediction_regression_1}\") # Expected: 100.5\n\n    sample_regression_2 = [7.0, 8.0]\n    prediction_regression_2 = predict_sample(regression_tree, sample_regression_2, 'regression')\n    print(f\"Regression prediction for {sample_regression_2}: {prediction_regression_2}\") # Expected: 200.2\n\n    sample_regression_3 = [7.0, 12.0]\n    prediction_regression_3 = predict_sample(regression_tree, sample_regression_3, 'regression')\n    print(f\"Regression prediction for {sample_regression_3}: {prediction_regression_3}\") # Expected: 300.8\n\n    sample_regression_4 = [5.0, 1.0]\n    prediction_regression_4 = predict_sample(regression_tree, sample_regression_4, 'regression')\n    print(f\"Regression prediction for {sample_regression_4}: {prediction_regression_4}\") # Expected: 100.5\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculates the entropy of a set of labels.\"\"\"\n        if len(labels) == 0:\n            return 0\n        label_counts = np.bincount(labels)\n        probabilities = label_counts / len(labels)\n        entropy_value = -np.sum(p * math.log2(p) for p in probabilities if p > 0)\n        return entropy_value\n\n    def conditional_entropy(X_col, y):\n        \"\"\"Calculates the conditional entropy of labels given a feature column.\"\"\"\n        unique_feature_values = np.unique(X_col)\n        conditional_entropy_value = 0\n        for value in unique_feature_values:\n            indices = np.where(X_col == value)[0]\n            subset_y = y[indices]\n            probability_feature_value = len(subset_y) / len(y)\n            conditional_entropy_value += probability_feature_value * entropy(subset_y)\n        return conditional_entropy_value\n\n    n_samples, n_features = X.shape\n    base_entropy = entropy(y)\n    max_information_gain = -1.0\n    best_feature_index = -1\n\n    for feature_index in range(n_features):\n        feature_column = X[:, feature_index]\n        gain = base_entropy - conditional_entropy(feature_column, y)\n\n        if gain > max_information_gain:\n            max_information_gain = gain\n            best_feature_index = feature_index\n        elif gain == max_information_gain and feature_index < best_feature_index:\n            best_feature_index = feature_index\n\n    return (best_feature_index, round(max_information_gain, 6))\n\nif __name__ == '__main__':\n    # Example Usage:\n    X = np.array([\n        [0, 0, 1],\n        [0, 1, 0],\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0],\n        [1, 1, 0]\n    ])\n    y = np.array([0, 0, 1, 1, 0, 1])\n\n    best_feature, max_gain = choose_best_feature(X, y)\n    print(f\"Best feature index: {best_feature}\")\n    print(f\"Maximum information gain: {max_gain}\")\n\n    # Another example\n    X2 = np.array([\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1]\n    ])\n    y2 = np.array([0, 1, 1, 0])\n\n    best_feature2, max_gain2 = choose_best_feature(X2, y2)\n    print(f\"Best feature index (example 2): {best_feature2}\")\n    print(f\"Maximum information gain (example 2): {max_gain2}\")\n\n    # Example with equal information gain\n    X3 = np.array([\n        [0, 1],\n        [0, 1],\n        [1, 0],\n        [1, 0]\n    ])\n    y3 = np.array([0, 0, 1, 1])\n\n    best_feature3, max_gain3 = choose_best_feature(X3, y3)\n    print(f\"Best feature index (example 3): {best_feature3}\")\n    print(f\"Maximum information gain (example 3): {max_gain3}\")\n```"}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef c(n):\n    \"\"\"Correction factor for path length.\"\"\"\n    if n == 1:\n        return 0\n    return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\ndef path_length(x, tree, current_depth=0):\n    \"\"\"Computes the path length of a single observation in a tree.\"\"\"\n    if tree is None:\n        return current_depth + c(1)  # Should not happen with valid trees\n    if 'split_feature' not in tree:  # Leaf node\n        return current_depth + c(tree['size'])\n\n    split_feature = tree['split_feature']\n    split_threshold = tree['split_threshold']\n\n    if x[split_feature] < split_threshold:\n        return path_length(x, tree['left'], current_depth + 1)\n    else:\n        return path_length(x, tree['right'], current_depth + 1)\n\ndef build_tree(data, height_limit, current_depth=0):\n    \"\"\"Recursively builds an isolation tree.\"\"\"\n    n_samples, n_features = data.shape\n\n    if current_depth >= height_limit or n_samples <= 1:\n        return {'size': n_samples}\n\n    split_feature = np.random.randint(n_features)\n    min_val = np.min(data[:, split_feature])\n    max_val = np.max(data[:, split_feature])\n\n    if min_val == max_val:  # All values are the same, cannot split\n        return {'size': n_samples}\n\n    split_threshold = np.random.uniform(min_val, max_val)\n\n    left_indices = data[:, split_feature] < split_threshold\n    right_indices = ~left_indices\n\n    left_data = data[left_indices]\n    right_data = data[right_indices]\n\n    # Handle cases where one side is empty after split\n    if left_data.shape[0] == 0 or right_data.shape[0] == 0:\n         return {'size': n_samples}\n\n\n    left_tree = build_tree(left_data, height_limit, current_depth + 1)\n    right_tree = build_tree(right_data, height_limit, current_depth + 1)\n\n    return {\n        'split_feature': split_feature,\n        'split_threshold': split_threshold,\n        'left': left_tree,\n        'right': right_tree\n    }\n\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    n_samples, n_features = data.shape\n    sample_size = min(sample_size, n_samples)\n    height_limit = math.ceil(np.log2(sample_size))\n\n    all_path_lengths = np.zeros((n_samples, n_trees))\n\n    for i in range(n_trees):\n        if sample_size < n_samples:\n            sample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n            sampled_data = data[sample_indices]\n            tree = build_tree(sampled_data, height_limit)\n\n            # Map path lengths back to original indices\n            for j, original_index in enumerate(sample_indices):\n                all_path_lengths[original_index, i] = path_length(data[original_index], tree)\n        else:\n            tree = build_tree(data, height_limit)\n            for j in range(n_samples):\n                all_path_lengths[j, i] = path_length(data[j], tree)\n\n\n    mean_path_lengths = np.mean(all_path_lengths, axis=1)\n\n    if n_samples > 1:\n        phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    else:\n        phi = 0 # Handle the case of a single sample\n\n    anomaly_scores = 2**(-(mean_path_lengths / phi)) if phi != 0 else np.zeros(n_samples)\n\n\n    if epsilon == 0:\n        return []\n\n    num_outliers = int(epsilon * n_samples)\n    if num_outliers == 0 and epsilon > 0: # Ensure at least one outlier if epsilon > 0 and n_samples > 0\n        num_outliers = 1 if n_samples > 0 else 0\n\n    if num_outliers == 0:\n        return []\n\n    # Get indices of top scores\n    outlier_indices = np.argsort(anomaly_scores)[-num_outliers:]\n\n    return sorted(outlier_indices.tolist())\n\nif __name__ == '__main__':\n    # Example Usage\n    data = np.array([\n        [1, 1],\n        [1.1, 1.1],\n        [1.2, 1.2],\n        [10, 10],\n        [1.3, 1.3],\n        [1.4, 1.4],\n        [1.5, 1.5],\n        [1.6, 1.6],\n        [1.7, 1.7],\n        [1.8, 1.8],\n        [1.9, 1.9],\n        [2, 2],\n        [100, 100]\n    ])\n\n    n_trees = 100\n    sample_size = 256\n    epsilon = 0.1\n\n    outliers = detect_outliers(data, n_trees, sample_size, epsilon)\n    print(f\"Detected outliers (indices): {outliers}\")\n\n    # Example with epsilon = 0\n    outliers_zero_epsilon = detect_outliers(data, n_trees, sample_size, 0)\n    print(f\"Detected outliers (epsilon=0): {outliers_zero_epsilon}\")\n\n    # Example with small data\n    small_data = np.array([[1,1], [2,2], [10,10]])\n    outliers_small_data = detect_outliers(small_data, 10, 2, 0.3)\n    print(f\"Detected outliers (small data): {outliers_small_data}\")\n\n    # Example with single data point\n    single_data = np.array([[5,5]])\n    outliers_single_data = detect_outliers(single_data, 10, 1, 0.5)\n    print(f\"Detected outliers (single data): {outliers_single_data}\")\n\n    # Example with all identical data points\n    identical_data = np.array([[1,1], [1,1], [1,1]])\n    outliers_identical_data = detect_outliers(identical_data, 10, 3, 0.3)\n    print(f\"Detected outliers (identical data): {outliers_identical_data}\")\n```"}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Implements a Maximum Entropy classifier using the Generalized Iterative Scaling (GIS) algorithm.\n\n    Args:\n        X_train: Training data (numpy array).\n        y_train: Training labels (numpy array).\n        X_test: Test data (numpy array).\n        epsilon: Convergence threshold for the GIS algorithm.\n        n_iter: Maximum number of iterations for the GIS algorithm.\n\n    Returns:\n        A list of predicted labels for the test data.\n    \"\"\"\n\n    # 1. Build empirical distributions and feature mapping\n    feature_map = {}\n    feature_count = 0\n    empirical_counts = defaultdict(float)\n    labels = np.unique(y_train)\n\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(x.shape[0]):\n            feature_value = x[j]\n            feature_key = (j, feature_value, y)\n            if feature_key not in feature_map:\n                feature_map[feature_key] = feature_count\n                feature_count += 1\n            empirical_counts[feature_map[feature_key]] += 1\n\n    # Initialize weights\n    weights = np.zeros(feature_count)\n\n    # Calculate C, the maximum number of active features for any (x, y) pair\n    C = 0\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        current_C = 0\n        seen_features = set()\n        for j in range(x.shape[0]):\n            feature_value = x[j]\n            for y in labels:\n                feature_key = (j, feature_value, y)\n                if feature_key in feature_map and feature_map[feature_key] not in seen_features:\n                    current_C += 1\n                    seen_features.add(feature_map[feature_key])\n        C = max(C, current_C)\n\n    # 2. Iteratively update weights using GIS\n    for iteration in range(n_iter):\n        model_counts = defaultdict(float)\n        Z_x = {}\n\n        # Calculate Z(x) and model counts\n        for i in range(X_train.shape[0]):\n            x = X_train[i]\n            Z_x[i] = 0.0\n            for y in labels:\n                exponent = 0.0\n                for j in range(x.shape[0]):\n                    feature_value = x[j]\n                    feature_key = (j, feature_value, y)\n                    if feature_key in feature_map:\n                        feature_index = feature_map[feature_key]\n                        exponent += weights[feature_index]\n                prob = math.exp(exponent)\n                Z_x[i] += prob\n\n                # Accumulate model counts for each feature\n                for j in range(x.shape[0]):\n                    feature_value = x[j]\n                    feature_key = (j, feature_value, y)\n                    if feature_key in feature_map:\n                        feature_index = feature_map[feature_key]\n                        model_counts[feature_index] += prob / Z_x[i]\n\n        # Calculate delta_w\n        delta_w = np.zeros(feature_count)\n        max_delta = 0.0\n        for feature_index in range(feature_count):\n            empirical_freq = empirical_counts[feature_index] / X_train.shape[0]\n            model_freq = model_counts[feature_index] / X_train.shape[0]\n            if model_freq == 0:\n                # Avoid division by zero, handle cases where a feature is never active in the model\n                delta_w[feature_index] = math.log(empirical_freq) / C if empirical_freq > 0 else 0\n            else:\n                delta_w[feature_index] = math.log(empirical_freq / model_freq) / C\n            max_delta = max(max_delta, abs(delta_w[feature_index]))\n\n        # Update weights\n        weights += delta_w\n\n        # Check for convergence\n        if max_delta < epsilon:\n            break\n\n    # 3. Predict labels for the test set\n    predictions = []\n    for i in range(X_test.shape[0]):\n        x = X_test[i]\n        best_label = None\n        max_prob = -float('inf')\n\n        for y in labels:\n            exponent = 0.0\n            for j in range(x.shape[0]):\n                feature_value = x[j]\n                feature_key = (j, feature_value, y)\n                if feature_key in feature_map:\n                    feature_index = feature_map[feature_key]\n                    exponent += weights[feature_index]\n\n            # Calculate Z(x) for the test sample\n            current_Z_x = 0.0\n            for current_y in labels:\n                current_exponent = 0.0\n                for j in range(x.shape[0]):\n                    feature_value = x[j]\n                    feature_key = (j, feature_value, current_y)\n                    if feature_key in feature_map:\n                        feature_index = feature_map[feature_key]\n                        current_exponent += weights[feature_index]\n                current_Z_x += math.exp(current_exponent)\n\n            prob = math.exp(exponent) / current_Z_x if current_Z_x > 0 else 0\n\n            if prob > max_prob:\n                max_prob = prob\n                best_label = y\n        predictions.append(best_label)\n\n    return predictions\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple categorical data\n    X_train = np.array([\n        [1, 2],\n        [1, 3],\n        [2, 2],\n        [2, 3],\n        [1, 2],\n    ])\n    y_train = np.array([0, 1, 0, 1, 0])\n\n    X_test = np.array([\n        [1, 2],\n        [2, 3],\n        [1, 3],\n    ])\n\n    predictions = maxent_predict(X_train, y_train, X_test, epsilon=1e-3, n_iter=100)\n    print(\"Predictions:\", predictions)\n\n    # Another example\n    X_train_2 = np.array([\n        ['red', 'small'],\n        ['blue', 'large'],\n        ['red', 'large'],\n        ['blue', 'small'],\n    ])\n    y_train_2 = np.array([0, 1, 1, 0])\n\n    X_test_2 = np.array([\n        ['red', 'large'],\n        ['blue', 'small'],\n    ])\n\n    # Convert string features to numerical representation for simplicity in this example\n    # In a real-world scenario, you might use one-hot encoding or similar.\n    # For this example, we'll just use the string values directly as features.\n    # The feature_map handles the mapping of (feature_index, feature_value, label) tuples.\n\n    predictions_2 = maxent_predict(X_train_2, y_train_2, X_test_2, epsilon=1e-3, n_iter=100)\n    print(\"Predictions 2:\", predictions_2)\n```"}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return [], set()\n\n    doc_count = len(data)\n    word_doc_counts = Counter()\n\n    for _, words in data:\n        seen_words_in_doc = set()\n        for word in words:\n            if word not in seen_words_in_doc:\n                word_doc_counts[word] += 1\n                seen_words_in_doc.add(word)\n\n    word_ratios = []\n    for word, count in word_doc_counts.items():\n        ratio = round(count / doc_count, 4)\n        word_ratios.append((word, ratio))\n\n    word_ratios.sort(key=lambda item: item[1], reverse=True)\n\n    top_words_set = set()\n    if cut_off is None:\n        top_words_set = set(word for word, _ in word_ratios)\n    elif cut_off > 0:\n        top_words_set = set(word for word, _ in word_ratios[:cut_off])\n\n    return word_ratios, top_words_set\n\n\nif __name__ == '__main__':\n    documents = [\n        (\"doc1\", [\"apple\", \"banana\", \"apple\"]),\n        (\"doc2\", [\"banana\", \"orange\", \"grape\", \"banana\"]),\n        (\"doc3\", [\"apple\", \"orange\", \"kiwi\"]),\n        (\"doc4\", [\"banana\", \"kiwi\", \"apple\", \"grape\"]),\n    ]\n\n    # Test with cut_off = 2\n    ratios_2, top_2_words = statistic_key_word(documents, cut_off=2)\n    print(\"Results with cut_off = 2:\")\n    print(\"Word Ratios:\", ratios_2)\n    print(\"Top 2 Words:\", top_2_words)\n    print(\"-\" * 20)\n\n    # Test with cut_off = None\n    ratios_none, all_words = statistic_key_word(documents, cut_off=None)\n    print(\"Results with cut_off = None:\")\n    print(\"Word Ratios:\", ratios_none)\n    print(\"All Words:\", all_words)\n    print(\"-\" * 20)\n\n    # Test with cut_off = 0\n    ratios_0, empty_set = statistic_key_word(documents, cut_off=0)\n    print(\"Results with cut_off = 0:\")\n    print(\"Word Ratios:\", ratios_0)\n    print(\"Empty Set:\", empty_set)\n    print(\"-\" * 20)\n\n    # Test with cut_off larger than distinct words\n    ratios_large, all_words_large = statistic_key_word(documents, cut_off=10)\n    print(\"Results with cut_off = 10:\")\n    print(\"Word Ratios:\", ratios_large)\n    print(\"All Words (cut_off > distinct):\", all_words_large)\n    print(\"-\" * 20)\n\n    # Test with empty data\n    ratios_empty, empty_set_empty = statistic_key_word([], cut_off=2)\n    print(\"Results with empty data:\")\n    print(\"Word Ratios:\", ratios_empty)\n    print(\"Top Words:\", empty_set_empty)\n    print(\"-\" * 20)\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    # w = sum(alpha_i * y_i * x_i)\n    # This can be computed efficiently using matrix multiplication: X.T @ (alpha * y)\n    w = X.T @ (alpha * y)\n\n    # Compute the bias term b\n    # b = (1/n) * sum(y_i - w.T * x_i)\n    n_samples = X.shape[0]\n    b = np.mean(y - X @ w)\n\n    # Round the values to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n\n    # Convert the weight vector to a Python list\n    w_list = w_rounded.tolist()\n\n    return (w_list, b_rounded)\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([1, 1, -1, -1])\n    alpha_opt = np.array([0.1, 0.2, 0.3, 0.4])\n\n    w, b = compute_svm_parameters(X_train, y_train, alpha_opt)\n    print(f\"Weight vector w: {w}\")\n    print(f\"Bias term b: {b}\")\n\n    # Example with a single feature\n    X_single_feature = np.array([[1], [2], [3], [4]])\n    y_single_feature = np.array([1, -1, 1, -1])\n    alpha_single_feature = np.array([0.5, 0.1, 0.2, 0.2])\n\n    w_single, b_single = compute_svm_parameters(X_single_feature, y_single_feature, alpha_single_feature)\n    print(f\"Weight vector w (single feature): {w_single}\")\n    print(f\"Bias term b (single feature): {b_single}\")\n```"}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Computes the Local Outlier Factor (LOF) for each sample in the data.\n\n    Args:\n        data (np.ndarray): A numpy array of shape (n_samples, n_features).\n        k (int): The number of neighbors to consider.\n        epsilon (float): The threshold for identifying outliers.\n\n    Returns:\n        tuple: A tuple containing:\n            - list_of_scores (list): A list of LOF scores rounded to 4 decimals.\n            - list_of_outlier_indices (list): A list of indices of samples\n                                             whose LOF score is strictly\n                                             larger than epsilon, sorted\n                                             in ascending order.\n    \"\"\"\n    n_samples = data.shape[0]\n\n    # 1. Compute the full pair-wise Euclidean distance matrix.\n    dist_matrix = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n\n    # 2. For every sample p obtain its k-distance and the index list of those k nearest neighbours Nk(p).\n    k_distances = np.zeros(n_samples)\n    k_neighbors_indices = []\n\n    for i in range(n_samples):\n        distances_to_i = dist_matrix[i]\n        sorted_indices = np.argsort(distances_to_i)\n        k_neighbors_indices.append(sorted_indices[1:k + 1])  # Exclude self\n        k_distances[i] = distances_to_i[sorted_indices[k]]\n\n    # 3. Define the reachability distance between two points\n    reachability_distances = np.zeros_like(dist_matrix)\n    for i in range(n_samples):\n        for j in range(n_samples):\n            reachability_distances[i, j] = max(k_distances[j], dist_matrix[i, j])\n\n    # 4. The Local Reachability Density (LRD) of p\n    lrd_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = 0\n        for neighbor_index in k_neighbors_indices[i]:\n            sum_reach_dist += reachability_distances[i, neighbor_index]\n        lrd_scores[i] = k / sum_reach_dist if sum_reach_dist > 0 else np.inf # Handle division by zero\n\n    # 5. Finally the Local Outlier Factor is\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_lrd_neighbors = 0\n        for neighbor_index in k_neighbors_indices[i]:\n            sum_lrd_neighbors += lrd_scores[neighbor_index]\n\n        if lrd_scores[i] > 0:\n            lof_scores[i] = (sum_lrd_neighbors / k) / lrd_scores[i]\n        else:\n            lof_scores[i] = np.inf # Handle division by zero\n\n    # Round LOF scores to 4 decimal places\n    rounded_lof_scores = np.round(lof_scores, 4).tolist()\n\n    # Identify outliers\n    outlier_indices = [i for i, score in enumerate(rounded_lof_scores) if score > epsilon]\n    outlier_indices.sort()\n\n    return rounded_lof_scores, outlier_indices\n\nif __name__ == '__main__':\n    # Example Usage:\n    data = np.array([\n        [1, 1],\n        [1.5, 1.5],\n        [1, 0.5],\n        [0.5, 1],\n        [5, 5],\n        [5.5, 5.5],\n        [5, 4.5],\n        [4.5, 5],\n        [10, 10]  # This should be an outlier\n    ])\n\n    k = 3\n    epsilon = 1.5\n\n    scores, outliers = local_outlier_factor(data, k, epsilon)\n    print(\"LOF Scores:\", scores)\n    print(\"Outlier Indices:\", outliers)\n\n    # Another example\n    data2 = np.array([\n        [1, 2], [2, 1], [2, 3], [3, 2],\n        [10, 10], [10, 11], [11, 10], [11, 11],\n        [5, 5] # This should be an outlier\n    ])\n    k2 = 4\n    epsilon2 = 1.2\n\n    scores2, outliers2 = local_outlier_factor(data2, k2, epsilon2)\n    print(\"\\nLOF Scores (Example 2):\", scores2)\n    print(\"Outlier Indices (Example 2):\", outliers2)\n```"}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = np.empty((m * n_train, 2))\n    X_val = np.empty((m * n_val, 2))\n    y_train = np.empty((m * n_train,), dtype=int)\n    y_val = np.empty((m * n_val,), dtype=int)\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        low = base + 1\n        high = base + 9\n\n        # Generate training data\n        X_train[c * n_train:(c + 1) * n_train, 0] = np.random.uniform(low, high, n_train)\n        X_train[c * n_train:(c + 1) * n_train, 1] = np.random.uniform(low, high, n_train)\n        y_train[c * n_train:(c + 1) * n_train] = c\n\n        # Generate validation data\n        X_val[c * n_val:(c + 1) * n_val, 0] = np.random.uniform(low, high, n_val)\n        X_val[c * n_val:(c + 1) * n_val, 1] = np.random.uniform(low, high, n_val)\n        y_val[c * n_val:(c + 1) * n_val] = c\n\n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return (X_train, X_val, y_train, y_val)\n\nif __name__ == '__main__':\n    # Example usage:\n    m_classes = 3\n    n_train_points = 100\n    n_val_points = 50\n    seed_value = 42\n\n    X_train, X_val, y_train, y_val = generate_data(m_classes, n_train_points, n_val_points, seed=seed_value)\n\n    print(\"X_train shape:\", X_train.shape)\n    print(\"X_val shape:\", X_val.shape)\n    print(\"y_train shape:\", y_train.shape)\n    print(\"y_val shape:\", y_val.shape)\n\n    print(\"\\nFirst 5 training points and labels:\")\n    print(X_train[:5])\n    print(y_train[:5])\n\n    print(\"\\nFirst 5 validation points and labels:\")\n    print(X_val[:5])\n    print(y_val[:5])\n\n    # Example with a different seed\n    X_train_2, X_val_2, y_train_2, y_val_2 = generate_data(m_classes, n_train_points, n_val_points, seed=123)\n    print(\"\\nFirst 5 training points with different seed:\")\n    print(X_train_2[:5])\n\n    # Example with the same seed should produce the same output\n    X_train_3, X_val_3, y_train_3, y_val_3 = generate_data(m_classes, n_train_points, n_val_points, seed=seed_value)\n    print(\"\\nFirst 5 training points with the same seed:\")\n    print(X_train_3[:5])\n    print(\"Are X_train and X_train_3 equal?\", np.array_equal(X_train, X_train_3))\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n\n    # 1. Initialisation\n    centres = X[:k].copy()\n\n    labels = np.zeros(m, dtype=int)\n    prev_labels = np.copy(labels)\n\n    for _ in range(max_iters):\n        # 2. Assignment step\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Check for convergence\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = np.copy(labels)\n\n        # 3. Update step\n        new_centres = np.copy(centres)\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                new_centres[j] = np.mean(points_in_cluster, axis=0)\n        centres = new_centres\n\n    # Round centres to 4 decimal places\n    rounded_centres = [list(np.round(centre, 4)) for centre in centres]\n\n    return labels.tolist(), rounded_centres\n\nif __name__ == '__main__':\n    # Example Usage\n    X = np.array([\n        [1, 2],\n        [1.5, 1.8],\n        [5, 8],\n        [8, 8],\n        [1, 0.6],\n        [9, 11],\n        [1, 3],\n        [8, 9],\n        [0, 0],\n        [10, 2],\n        [10, 0]\n    ])\n    k = 3\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n\n    X_large = np.random.rand(1000, 10)\n    k_large = 5\n    labels_large, centres_large = kmeans(X_large, k_large)\n    print(\"\\nLabels (large dataset):\", labels_large[:10]) # Print first 10 labels\n    print(\"Centres (large dataset):\", centres_large)\n```"}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(0.0, 4)] * n, round(0.0, 4)\n\n    weights = np.zeros(n)\n    bias = 0.0\n\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n\n        # Calculate gradients\n        dw = np.zeros(n)\n        for j in range(n):\n            sign_wj = -1 if weights[j] == 0 else np.sign(weights[j])\n            dw[j] = -2 * np.dot(X[:, j], residuals) + l1_penalty * sign_wj + 2 * l2_penalty * weights[j]\n\n        db = -2 * np.sum(residuals)\n\n        # Update parameters\n        weights -= learning_rate * dw / m\n        bias -= learning_rate * db / m\n\n    rounded_weights = [round(w, 4) for w in weights]\n    rounded_bias = round(bias, 4)\n\n    return rounded_weights, rounded_bias\n\nif __name__ == '__main__':\n    # Example Usage:\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([3, 5, 7, 9])\n\n    learning_rate = 0.01\n    iterations = 1000\n    l1_penalty = 0.1\n    l2_penalty = 0.1\n\n    weights, bias = elastic_net_regression(X_train, y_train, learning_rate, iterations, l1_penalty, l2_penalty)\n    print(\"Learned Weights:\", weights)\n    print(\"Learned Bias:\", bias)\n\n    # Example with zero learning rate\n    weights_zero_lr, bias_zero_lr = elastic_net_regression(X_train, y_train, 0, 1000, l1_penalty, l2_penalty)\n    print(\"Learned Weights (zero lr):\", weights_zero_lr)\n    print(\"Learned Bias (zero lr):\", bias_zero_lr)\n\n    # Example with zero iterations\n    weights_zero_iter, bias_zero_iter = elastic_net_regression(X_train, y_train, learning_rate, 0, l1_penalty, l2_penalty)\n    print(\"Learned Weights (zero iter):\", weights_zero_iter)\n    print(\"Learned Bias (zero iter):\", bias_zero_iter)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Write your code here\n    current_input = np.array(x)\n\n    for layer_index, layer_weights in enumerate(weights):\n        # Add bias term to the current input\n        biased_input = np.insert(current_input, 0, 1.0)\n\n        # Convert layer weights to a NumPy array for matrix multiplication\n        weight_matrix = np.array(layer_weights)\n\n        # Perform dot product\n        output = np.dot(weight_matrix, biased_input)\n\n        # Apply activation function\n        if layer_index < len(weights) - 1:  # Not the last layer\n            current_input = np.maximum(0, output)  # ReLU\n        else:  # Last layer (linear)\n            current_input = output\n\n    # Round the final output to four decimals\n    rounded_output = np.round(current_input, 4)\n\n    # Return the output in the specified format\n    if len(rounded_output) == 1:\n        return float(rounded_output[0])\n    else:\n        return rounded_output.tolist()\n\nif __name__ == '__main__':\n    # Example Usage:\n    # Simple network with one hidden layer and one output neuron\n    weights1 = [\n        [  # Hidden layer 0\n            [0.1, 0.2, 0.3],  # Neuron 0 weights (bias, input1, input2)\n            [0.4, 0.5, 0.6]   # Neuron 1 weights (bias, input1, input2)\n        ],\n        [  # Output layer 1\n            [0.7, 0.8, 0.9]   # Neuron 0 weights (bias, hidden0_output0, hidden0_output1)\n        ]\n    ]\n    x1 = [1.0, 2.0]\n    prediction1 = neural_net_predict(weights1, x1)\n    print(f\"Prediction for weights1 and x1: {prediction1}\")\n\n    # Network with one hidden layer and two output neurons\n    weights2 = [\n        [  # Hidden layer 0\n            [0.1, 0.2, 0.3],  # Neuron 0 weights (bias, input1, input2)\n            [0.4, 0.5, 0.6]   # Neuron 1 weights (bias, input1, input2)\n        ],\n        [  # Output layer 1\n            [0.7, 0.8, 0.9],  # Neuron 0 weights (bias, hidden0_output0, hidden0_output1)\n            [1.0, 1.1, 1.2]   # Neuron 1 weights (bias, hidden0_output0, hidden0_output1)\n        ]\n    ]\n    x2 = [1.0, 2.0]\n    prediction2 = neural_net_predict(weights2, x2)\n    print(f\"Prediction for weights2 and x2: {prediction2}\")\n\n    # Network with two hidden layers and one output neuron\n    weights3 = [\n        [  # Hidden layer 0\n            [0.1, 0.2, 0.3],  # Neuron 0 weights (bias, input1, input2)\n            [0.4, 0.5, 0.6]   # Neuron 1 weights (bias, input1, input2)\n        ],\n        [  # Hidden layer 1\n            [0.7, 0.8, 0.9],  # Neuron 0 weights (bias, hidden0_output0, hidden0_output1)\n        ],\n        [  # Output layer 2\n            [1.0, 1.1]        # Neuron 0 weights (bias, hidden1_output0)\n        ]\n    ]\n    x3 = [1.0, 2.0]\n    prediction3 = neural_net_predict(weights3, x3)\n    print(f\"Prediction for weights3 and x3: {prediction3}\")\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Performs K-Means clustering to compute and return the final centroids.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n        k: The number of clusters.\n        max_iters: The maximum number of iterations.\n\n    Returns:\n        A list of lists representing the sorted and rounded centroids.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    # 1. Initialise the centroids with the first k samples\n    centroids = X[:k].copy()\n\n    for _ in range(max_iters):\n        # Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        # Update each centroid\n        new_centroids = np.copy(centroids)\n        moved = False\n        for i in range(k):\n            cluster_samples = X[labels == i]\n            if len(cluster_samples) > 0:\n                new_centroid = np.mean(cluster_samples, axis=0)\n                if np.sum((new_centroid - centroids[i]) ** 2) >= 1e-4**2:\n                    moved = True\n                new_centroids[i] = new_centroid\n\n        centroids = new_centroids\n\n        # Stop early if all centroids move less than 1e-4\n        if not moved:\n            break\n\n    # Sort the centroids lexicographically and round\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n\n    return rounded_centroids\n\nif __name__ == '__main__':\n    # Example Usage:\n    X = np.array([\n        [1, 1], [1.5, 2], [3, 4], [5, 7], [3.5, 5], [4.5, 5], [3.5, 4.5]\n    ])\n    k = 2\n    centroids = kmeans_centroids(X, k)\n    print(f\"Centroids for k={k}:\\n{centroids}\")\n\n    X2 = np.array([\n        [0, 0], [0.5, 0.5], [1, 1], [5, 5], [5.5, 5.5], [6, 6]\n    ])\n    k2 = 3\n    centroids2 = kmeans_centroids(X2, k2)\n    print(f\"\\nCentroids for k={k2}:\\n{centroids2}\")\n\n    X3 = np.array([\n        [1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]\n    ])\n    k3 = 3\n    centroids3 = kmeans_centroids(X3, k3)\n    print(f\"\\nCentroids for k={k3}:\\n{centroids3}\")\n```"}
