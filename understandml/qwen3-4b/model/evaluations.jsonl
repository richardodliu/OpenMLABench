{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name '_np' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: numpy.ndarray of shape (n_samples, n_features), where the last column is the target y,\n            and the rest are features X.\n    - alpha: float, the regularization strength (alpha >= 0).\n    \n    Returns:\n    - list[float]: The weight vector (coefficients) rounded to 4 decimal places.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_bias = np.c_[np.ones(X.shape[0]), X]\n    XTX = X_bias.T @ X_bias\n    I = np.eye(XTX.shape[0])\n    reg_matrix = XTX + alpha * I\n    try:\n        inv_reg_matrix = np.linalg.inv(reg_matrix)\n    except np.linalg.LinAlgError:\n        return [-1]\n    w = inv_reg_matrix @ X_bias.T @ y\n    return [round(coef, 4) for coef in w]\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    for _ in range(n_iter):\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, np.dot(X_train, X_train.T))\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update_count += 1\n                break\n        if update_count == 0:\n            break\n    w = np.dot(y_train * alpha, X_train)\n    w_rounded = [round(val, 4) for val in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: 'link_prime'", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 3, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    depths = [0] * n_samples\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'type': 'leaf', 'indices': indices}\n        feature_idx = np.random.choice(n_features)\n        values = data[indices, feature_idx]\n        down = np.min(values)\n        up = np.max(values)\n        v = np.random.uniform(down, up)\n        left_indices = indices[values <= v]\n        right_indices = indices[values > v]\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        return {'type': 'internal', 'left': left_child, 'right': right_child}\n    root = build_tree(np.arange(n_samples))\n\n    def traverse(node, depth):\n        if node['type'] == 'leaf':\n            for idx in node['indices']:\n                depths[idx] = depth\n        else:\n            traverse(node['left'], depth + 1)\n            traverse(node['right'], depth + 1)\n    traverse(root, 0)\n    return depths\nassert isolation_tree_path_length(np.arange(1).reshape(-1, 1)) == [0], \"test case failed: n=1\"\nassert isolation_tree_path_length(np.arange(2).reshape(-1, 1)) == [0, 0], \"test case failed: n=2\"\nassert isolation_tree_path_length(np.arange(3).reshape(-1, 1)) == [1, 1, 1], \"test case failed: n=3\"\nassert isolation_tree_path_length(np.arange(4).reshape(-1, 1)) == [1, 1, 1, 1], \"test case failed: n=4\"\nassert isolation_tree_path_length(np.arange(5).reshape(-1, 1)) == [2, 2, 2, 1, 1], \"test case failed: n=5\"\nassert isolation_tree_path_length(np.arange(6).reshape(-1, 1)) == [2, 2, 2, 2, 2, 2], \"test case failed: n=6\"\nassert isolation_tree_path_length(np.arange(7).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2], \"test case failed: n=7\"\nassert isolation_tree_path_length(np.arange(8).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2], \"test case failed: n=8\"\nassert isolation_tree_path_length(np.arange(9).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2, 2], \"test case failed: n=9\"\nassert isolation_tree_path_length(np.arange(10).reshape(-1, 1)) == [3, 3, 3, 2, 2, 3, 3, 3, 2, 2], \"test case failed: n=10\""}
{"task_id": 4, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    X_sq = np.sum(X ** 2, axis=1)\n    X_sq = X_sq.reshape(-1, 1)\n    XX = X @ X.T\n    D = X_sq + X_sq.T - 2 * XX\n    D_rounded = np.round(D, 4)\n    return D_rounded.tolist()\nassert l2_distance(np.array([[0, 0], [1, 0]], dtype=float)) == [[0.0, 1.0], [1.0, 0.0]], \"failed on two points, axis-aligned\"\nassert l2_distance(np.array([[1, 2]], dtype=float)) == [[0.0]], \"failed on single sample\"\nassert l2_distance(np.array([[1, 2], [3, 4], [5, 6]], dtype=float)) == [[0.0, 8.0, 32.0], [8.0, 0.0, 8.0], [32.0, 8.0, 0.0]], \"failed on three points 2-D\"\nassert l2_distance(np.array([[-1, -1], [1, 1]], dtype=float)) == [[0.0, 8.0], [8.0, 0.0]], \"failed on negative coordinates\"\nassert l2_distance(np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]], dtype=float)) == [[0.0, 3.0, 12.0], [3.0, 0.0, 3.0], [12.0, 3.0, 0.0]], \"failed on 3-D points\"\nassert l2_distance(np.array([[0.5, 0.5], [1.5, 1.5]], dtype=float)) == [[0.0, 2.0], [2.0, 0.0]], \"failed on float coordinates\"\nassert l2_distance(np.zeros((0, 5), dtype=float)) == [], \"failed on empty input\"\nrnd = np.random.RandomState(0); X_rand = rnd.randn(4, 3); D = l2_distance(X_rand); assert all(abs(D[i][i]) < 1e-8 for i in range(4)), \"diagonal not zero on random data\"\nX_same = np.array([[2, 3], [2, 3], [2, 3]], dtype=float); assert l2_distance(X_same) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed on identical points\""}
{"task_id": 6, "completion_id": 0, "passed": false, "result": "failed: test case failed: example case", "solution": "import numpy as np\nimport numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    stacked_predictions = np.stack(predictions)\n    ensemble_score = learning_rate * stacked_predictions.sum(axis=0)\n    probabilities = np.exp(ensemble_score) / np.sum(np.exp(ensemble_score), axis=1, keepdims=True)\n    predicted_classes = np.argmax(probabilities, axis=1).tolist()\n    return predicted_classes\nassert xgboost_predict([np.array([[0.2, -0.1], [1.0, -1.0]]), np.array([[-0.4, 0.3], [0.5, -0.2]])], 0.5) == [0, 1], \"test case failed: example case\"\nassert xgboost_predict([np.array([[2, 1], [1, 2], [0, 0]])], 0.1) == [1, 0, 0], \"test case failed: single tree\"\nassert xgboost_predict([np.array([[1, 5, 3]]), np.array([[1, 5, 3]])], 0.5) == [0], \"test case failed: two identical trees\"\nassert xgboost_predict([np.array([[-2, 2]])], 1.0) == [0], \"test case failed: negative vs positive\"\nassert xgboost_predict([np.array([[0, 1, 0]]), np.array([[0, 1, 0]])], 1.0) == [0], \"test case failed: tie situation\"\nassert xgboost_predict([np.array([[ 1, -1], [-1,  1], [0,  0]]), np.array([[ 1, -1], [-1,  1], [1, -1]]), np.array([[ 1, -1], [-1,  1], [2, -2]])], 0.2) == [1, 0, 1], \"test case failed: three trees, three samples\"\nassert xgboost_predict([np.zeros((2, 3)) for _ in range(5)], 0.5) == [0, 0], \"test case failed: all zeros\"\nassert xgboost_predict([np.array([[0.5, 1.5], [2.0, 0.0]])], 1.0) == [0, 1], \"test case failed: 1 tree, 2 samples\"\nassert xgboost_predict([np.array([[1, 2, 3, 4]]), np.array([[4, 3, 2, 1]])], 0.1) == [0], \"test case failed: four classes\"\nassert xgboost_predict([np.array([[1, 0, 0], [0, 1, 0]]), np.array([[0, 1, 0], [0, 0, 1]])], 0.3) == [2, 0], \"test case failed: 3 classes, 2 trees\""}
{"task_id": 7, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in transactions.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    N = len(transactions)\n    min_support = math.ceil(minsup * N)\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    candidates = [item for (item, count) in item_counts.items() if count >= min_support]\n    frequent_itemsets = []\n    current_level = set(candidates)\n    while current_level:\n        current_level_list = list(current_level)\n        next_level = set()\n        for i in range(1, len(current_level_list) + 1):\n            for combo in combinations(current_level_list, i):\n                sorted_combo = tuple(sorted(combo))\n                support = 0\n                for transaction in transactions:\n                    if all((item in transaction for item in sorted_combo)):\n                        support += 1\n                if support >= min_support:\n                    next_level.add(sorted_combo)\n        current_level = next_level\n        frequent_itemsets.extend(current_level)\n    result = {}\n    for itemset in frequent_itemsets:\n        support = 0\n        for transaction in transactions:\n            if all((item in transaction for item in itemset)):\n                support += 1\n        result[itemset] = support\n    return result\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 8, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(n_iterations):\n        z = np.dot(X_train, w) + b\n        probabilities = 1 / (1 + np.exp(-z))\n        dw = 1 / n_samples * np.dot(X_train.T, probabilities - y_train)\n        db = 1 / n_samples * np.sum(probabilities - y_train)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    predictions = []\n    for x in X_test:\n        z = np.dot(x, w) + b\n        prob = 1 / (1 + np.exp(-z))\n        pred = int(round(prob))\n        predictions.append(pred)\n    return predictions\nassert logistic_regression_predict(np.array([[0],[10]]), np.array([0,1]), np.array([[0],[10]])) == [0,1], \"failed: simple two-point case\"\nassert logistic_regression_predict(np.array([[-10],[10]]), np.array([0,1]), np.array([[-5],[5]])) == [0,1], \"failed: symmetric case\"\nassert logistic_regression_predict(np.array([[-3],[-2],[-1],[1],[2],[3]]), np.array([0,0,0,1,1,1]), np.array([[-4],[4]])) == [0,1], \"failed: clustered 1-D case\"\ntrain_X4 = np.array([[1,1],[2,2],[3,3],[-1,-1],[-2,-2],[-3,-3]]); train_y4 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X4, train_y4, np.array([[0.5,0.5],[-2.5,-2.5]])) == [1,0], \"failed: 2-D diagonal case\"\ntrain_X5 = np.array([[1,4],[2,5],[3,6],[-1,-4],[-2,-5],[-3,-6]]); train_y5 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X5, train_y5, np.array([[4,7],[-4,-7]])) == [1,0], \"failed: 2-D magnitudes case\"\ntrain_X6 = np.array([[0,0],[0,1],[0,2],[4,0],[4,1],[4,2]]); train_y6 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X6, train_y6, np.array([[0,1.5],[4,1.5]])) == [0,1], \"failed: vertical split\"\ntrain_X7 = np.array([[-50],[-40],[-30],[30],[40],[50]]); train_y7 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X7, train_y7, np.array([[-25],[25]])) == [0,1], \"failed: wide 1-D separation\"\ntrain_X8 = np.array([[-5],[-4],[-3],[-2],[-1],[1],[2],[3],[4],[5]]); train_y8 = np.array([0,0,0,0,0,1,1,1,1,1]); assert logistic_regression_predict(train_X8, train_y8, np.array([[-6],[6]])) == [0,1], \"failed: dense clusters\"\ntrain_X9 = np.array([[-1,-3],[-2,-5],[-3,-4],[1,3],[2,5],[3,4]]); train_y9 = np.array([0,0,0,1,1,1]); assert logistic_regression_predict(train_X9, train_y9, np.array([[-2,-4],[2,4]])) == [0,1], \"failed: mixed 2-D clusters\"\ntrain_X10 = np.array([[2,1],[3,1],[4,1],[-2,-1],[-3,-1],[-4,-1]]); train_y10 = np.array([1,1,1,0,0,0]); assert logistic_regression_predict(train_X10, train_y10, np.array([[3,1],[-3,-1]])) == [1,0], \"failed: rotated 2-D split\""}
{"task_id": 10, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\\\(\tilde{X}_{t-1}\\\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\\\(X_t\\\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\\\(\\x0barepsilon\\\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    prev = np.asarray(prev)\n    cur = np.asarray(cur)\n    weight = np.asarray(weight)\n    if prev.size == 1 and cur.size == 1 and (weight.size == 1):\n        result = weight * prev + (1 - weight) * cur\n        return round(result[0], 4)\n    else:\n        result = weight * prev + (1 - weight) * cur\n        result = np.round(result, 4)\n        return result.tolist()\nassert smooth(10.0, 12.0, 0.8) == 10.4, \"failed on (10,12,0.8)\"\nassert smooth(5, 7, 0.6) == 5.8, \"failed on (5,7,0.6)\"\nassert smooth([1,2,3], [4,5,6], 0.5) == [2.5, 3.5, 4.5], \"failed on vector weight scalar 0.5\"\nassert smooth([1,2,3], [4,5,6], 0.2) == [3.4, 4.4, 5.4], \"failed on scalar weight 0.2\"\nassert smooth([2,4,6], [8,10,12], [0.75,0.25,0.5]) == [3.5, 8.5, 9.0], \"failed on vector weight\"\nassert smooth(0, 1, 1/3) == 0.6667, \"failed on rounding check\"\nassert smooth(3, 9, 0.0) == 9.0, \"failed when weight=0\"\nassert smooth(3, 9, 1.0) == 3.0, \"failed when weight=1\"\nassert smooth([0,0,0], [10,20,30], 0) == [10.0, 20.0, 30.0], \"vector weight=0\"\nassert smooth([100,200], [50,  0], [0.5,0.2]) == [75.0, 40.0], \"mixed vector values\""}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centers = data[:k].copy()\n    labels = np.zeros(len(data), dtype=int)\n    for iteration in range(max_iter):\n        distances = np.sqrt(np.sum((data[:, np.newaxis, :] - centers[np.newaxis, :, :]) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centers = []\n        for cluster_id in range(k):\n            cluster_points = data[labels == cluster_id]\n            if len(cluster_points) == 0:\n                idx = np.random.randint(len(data))\n                new_centers.append(data[idx].copy())\n            else:\n                new_centers.append(np.mean(cluster_points, axis=0))\n        movement = np.max(np.abs(centers - new_centers))\n        if movement < epsilon:\n            break\n        centers = new_centers\n    rounded_centers = [np.round(center, 4).tolist() for center in centers]\n    return (rounded_centers, labels.tolist())\nassert kmeans(np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]), 2) == ([[5.5, 1.0], [5.5, 4.0]], [0, 1, 0, 0, 1, 0]), \"test case failed: basic two-cluster example\"\nassert kmeans(np.array([[0, 0], [0, 2], [10, 0], [10, 2]]), 2) == ([[5.0, 0.0], [5.0, 2.0]], [0, 1, 0, 1]), \"test case failed: symmetric rectangle\"\nassert kmeans(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[3.0, 4.0]], [0, 0, 0]), \"test case failed: single cluster mean\"\nassert kmeans(np.array([[0, 0], [1, 1], [2, 2]]), 3) == ([[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]], [0, 1, 2]), \"test case failed: k equals number of samples\"\nassert kmeans(np.array([[0], [10]]), 2) == ([[0.0], [10.0]], [0, 1]), \"test case failed: one-dimensional data\"\nassert kmeans(np.zeros((3, 2)), 1) == ([[0.0, 0.0]], [0, 0, 0]), \"test case failed: all identical samples\"\nassert kmeans(np.array([[0, 0], [10, 10], [20, 20]]), 3) == ([[0.0, 0.0], [10.0, 10.0], [20.0, 20.0]], [0, 1, 2]), \"test case failed: three isolated samples\"\nassert kmeans(np.array([[0, 0], [1, 0], [0, 1], [1, 1]]), 1) == ([[0.5, 0.5]], [0, 0, 0, 0]), \"test case failed: square to single centre\"\nassert kmeans(np.array([[2, 2], [2, 2], [2, 2]]), 1) == ([[2.0, 2.0]], [0, 0, 0]), \"test case failed: duplicate points single centre\"\nassert kmeans(np.array([[0, 0], [1, 1], [0, 0], [1, 1]]), 2) == ([[0.0, 0.0], [1.0, 1.0]], [0, 1, 0, 1]), \"test case failed: duplicates two centres\""}
{"task_id": 12, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool=False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    N = frames.shape[1]\n    fft_result = np.fft.rfft(frames)\n    power_spectrum = np.abs(fft_result) ** 2\n    if scale:\n        power_spectrum /= N // 2 + 1\n    return power_spectrum.round(4).tolist()\nassert power_spectrum(np.array([[1, 2, 1, 0], [0, 1, 0, 1]]), False) == [[16.0, 4.0, 0.0], [4.0, 0.0, 4.0]], \"test case failed: power_spectrum([[1,2,1,0],[0,1,0,1]], False)\"\nassert power_spectrum(np.array([[1, 2, 1, 0], [0, 1, 0, 1]]), True) == [[5.3333, 1.3333, 0.0], [1.3333, 0.0, 1.3333]], \"test case failed: power_spectrum([[1,2,1,0],[0,1,0,1]], True)\"\nassert power_spectrum(np.array([[1, 1, 1, 1]]), False) == [[16.0, 0.0, 0.0]], \"test case failed: power_spectrum([[1,1,1,1]], False)\"\nassert power_spectrum(np.array([[1, 1, 1, 1]]), True) == [[5.3333, 0.0, 0.0]], \"test case failed: power_spectrum([[1,1,1,1]], True)\"\nassert power_spectrum(np.zeros((1, 4)), False) == [[0.0, 0.0, 0.0]], \"test case failed: power_spectrum(zeros, False)\"\nassert power_spectrum(np.array([[1, -1]]), False) == [[0.0, 4.0]], \"test case failed: power_spectrum([[1,-1]], False)\"\nassert power_spectrum(np.array([[1, -1]]), True) == [[0.0, 2.0]], \"test case failed: power_spectrum([[1,-1]], True)\"\nassert power_spectrum(np.array([[2, 0, 2, 0]]), False) == [[16.0, 0.0, 16.0]], \"test case failed: power_spectrum([[2,0,2,0]], False)\"\nassert power_spectrum(np.array([[0, 1, 1, 0]]), False) == [[4.0, 2.0, 0.0]], \"test case failed: power_spectrum([[0,1,1,0]], False)\""}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'D1' is not defined", "solution": "import numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"\n    Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                continue\n            r_i = data[common_users, i]\n            r_j = data[common_users, j]\n            if criterion == 'cosine':\n                mean_i = np.mean(r_i)\n                mean_j = np.mean(r_j)\n                std_i = np.std(r_i)\n                std_j = np.std(r_j)\n                if std_i > 0.001 and std_j > 0.001:\n                    r_i_centered = r_i - mean_i\n                    r_j_centered = r_j - mean_j\n                else:\n                    r_i_centered = r_i\n                    r_j_centered = r_j\n                dot_product = np.dot(r_i_centered, r_j_centered)\n                norm_i = np.linalg.norm(r_i_centered)\n                norm_j = np.linalg.norm(r_j_centered)\n                similarity = dot_product / (norm_i * norm_j)\n            elif criterion == 'pearson':\n                corr_matrix = np.corrcoef(r_i, r_j)\n                similarity = corr_matrix[0, 1]\n            S[i, j] = similarity\n            S[j, i] = similarity\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == 0:\n        return []\n    r = data[user_ind, rated_items]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n    scores = []\n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            sim = S[t, i]\n            numerator += r[np.searchsorted(rated_items, i)] * sim\n            denominator += abs(sim)\n        if denominator == 0:\n            score = 0\n        else:\n            score = numerator / denominator\n        scores.append((score, t))\n    scores.sort(reverse=True, key=lambda x: (x[0], x[1]))\n    result = [t for (score, t) in scores[:k]]\n    return result\nassert knn_recommend(D1, 0, 1) == [1], \"failed: knn_recommend(D1,0,1)\"\nassert knn_recommend(D1, 2, 1) == [0], \"failed: knn_recommend(D1,2,1)\"\nassert knn_recommend(D1, 0, 1, 'pearson') == [1], \"failed: pearson D1 user0\"\nassert knn_recommend(D1, 1, 1) == [1], \"failed: knn_recommend(D1,1,1)\"\nassert knn_recommend(D1, 3, 1) == [0], \"failed: knn_recommend(D1,3,1)\"\nassert knn_recommend(D1, 0, 2) == [1], \"failed: k larger than unrated items\"\nassert knn_recommend(D2, 0, 1) == [0], \"failed: knn_recommend(D2,0,1)\"\nassert knn_recommend(D2, 1, 1) == [1], \"failed: knn_recommend(D2,1,1)\"\nassert knn_recommend(D2, 2, 1) == [2], \"failed: knn_recommend(D2,2,1)\"\nassert knn_recommend(D3, 0, 1) == [0], \"failed: knn_recommend(D3,0,1)\""}
{"task_id": 14, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    epsilon = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss_i = -(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = p - y\n    hessian = p * (1 - p)\n    mean_loss = np.mean(loss_i)\n    mean_loss_rounded = round(mean_loss, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    hessian_rounded = [round(h, 4) for h in hessian]\n    return (mean_loss_rounded, gradient_rounded, hessian_rounded)\nassert logistic_loss_metrics(np.array([1, 0, 1]), np.array([0.0, 0.0, 0.0])) == (0.6931, [-0.5, 0.5, -0.5], [0.25, 0.25, 0.25]), \"failed on zeros logits\"\nassert logistic_loss_metrics(np.array([0, 1]), np.array([2.0, -2.0])) == (2.1269, [0.8808, -0.8808], [0.105, 0.105]), \"failed on mixed logits 2 & -2\"\nassert logistic_loss_metrics(np.array([1]), np.array([1.0])) == (0.3133, [-0.2689], [0.1966]), \"failed on single positive logit\"\nassert logistic_loss_metrics(np.array([0]), np.array([-1.0])) == (0.3133, [0.2689], [0.1966]), \"failed on single negative logit\"\nassert logistic_loss_metrics(np.array([1, 0]), np.array([3.0, 3.0])) == (1.5486, [-0.0474, 0.9526], [0.0452, 0.0452]), \"failed on identical large positive logits\"\nassert logistic_loss_metrics(np.zeros(4), np.zeros(4)) == (0.6931, [0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25]), \"failed on all-zero labels\"\nassert logistic_loss_metrics(np.ones(4), np.zeros(4)) == (0.6931, [-0.5, -0.5, -0.5, -0.5], [0.25, 0.25, 0.25, 0.25]), \"failed on all-one labels\"\nassert logistic_loss_metrics(np.array([0, 1, 0, 1]), np.array([-2.0, -2.0, 2.0, 2.0])) == (1.1269, [0.1192, -0.8808, 0.8808, -0.1192], [0.105, 0.105, 0.105, 0.105]), \"failed on alternating logits\"\nassert logistic_loss_metrics(np.array([0]), np.array([5.0])) == (5.0067, [0.9933], [0.0066]), \"failed on large positive logit with label 0\"\nassert logistic_loss_metrics(np.array([1]), np.array([-5.0])) == (5.0067, [-0.9933], [0.0066]), \"failed on large negative logit with label 1\""}
{"task_id": 16, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    if N < 1:\n        return []\n    if len(sequence) < N:\n        return []\n    ngrams = []\n    for i in range(len(sequence) - N + 1):\n        ngrams.append(tuple(sequence[i:i + N]))\n    return ngrams\nassert ngrams([1, 2, 3, 4, 5], 2) == [(1, 2), (2, 3), (3, 4), (4, 5)], \"Test 1 failed: ngrams([1, 2, 3, 4, 5], 2)\"\nassert ngrams([1], 1) == [(1,)], \"Test 2 failed: ngrams([1], 1)\"\nassert ngrams([1], 2) == [], \"Test 3 failed: ngrams([1], 2)\"\nassert ngrams(\"hello\", 2) == [('h', 'e'), ('e', 'l'), ('l', 'l'), ('l', 'o')], \"Test 4 failed: ngrams('hello', 2)\"\nassert ngrams((1, 2, 3, 4), 3) == [(1, 2, 3), (2, 3, 4)], \"Test 5 failed: ngrams((1,2,3,4), 3)\"\nassert ngrams(range(6), 4) == [(0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5)], \"Test 6 failed: ngrams(range(6), 4)\"\nassert ngrams(['I', 'love', 'AI'], 2) == [('I', 'love'), ('love', 'AI')], \"Test 7 failed: ngrams(['I','love','AI'],2)\"\nassert ngrams([True, False, True, False], 3) == [(True, False, True), (False, True, False)], \"Test 8 failed: ngrams([True,False,True,False],3)\"\nassert ngrams([1, 1, 1, 1], 2) == [(1, 1), (1, 1), (1, 1)], \"Test 9 failed: ngrams([1,1,1,1],2)\"\nassert ngrams([7, 8, 9], 3) == [(7, 8, 9)], \"Test 10 failed: ngrams([7,8,9],3)\""}
{"task_id": 17, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not subscriptable", "solution": "\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items or not counts or (not parents):\n        return {}\n    n = len(items)\n    tree = [None] * n\n    root_index = parents.index(-1)\n    for i in range(n):\n        item = items[i]\n        count = counts[i]\n        parent_index = parents[i]\n        node = {'item': item, 'count': count, 'children': []}\n        if parent_index != -1:\n            tree[parent_index]['children'].append(node)\n        else:\n            tree[i] = node\n    return tree[root_index]\nassert build_tree([], [], []) == {}, \"test case failed: empty input lists\"\nassert build_tree(['A'], [5], [-1]) == {'item':'A','count':5,'children':[]}, \"test case failed: single node\"\nassert build_tree(['A','B','C','D'], [5,3,2,1], [-1,0,0,0]) == {'item':'A','count':5,'children':[{'item':'B','count':3,'children':[]},{'item':'C','count':2,'children':[]},{'item':'D','count':1,'children':[]}]}, \"test case failed: star tree\"\nassert build_tree(['A','B','C','D'], [7,6,5,4], [-1,0,1,2]) == {'item':'A','count':7,'children':[{'item':'B','count':6,'children':[{'item':'C','count':5,'children':[{'item':'D','count':4,'children':[]}]}]}]}, \"test case failed: linear chain\"\nassert build_tree(['R','A','B','C','D','E','F'], [9,4,4,2,2,1,1], [-1,0,0,1,1,2,2]) == {'item':'R','count':9,'children':[{'item':'A','count':4,'children':[{'item':'C','count':2,'children':[]},{'item':'D','count':2,'children':[]}]},{'item':'B','count':4,'children':[{'item':'E','count':1,'children':[]},{'item':'F','count':1,'children':[]}]}]}, \"test case failed: balanced tree\"\nassert build_tree(['root','n1','n2','n3','n4','n5','n6','n7','n8'], [9,8,7,6,5,4,3,2,1], [-1,0,0,1,1,2,2,3,6]) == {'item':'root','count':9,'children':[{'item':'n1','count':8,'children':[{'item':'n3','count':6,'children':[{'item':'n7','count':2,'children':[]}]},{'item':'n4','count':5,'children':[]}]},{'item':'n2','count':7,'children':[{'item':'n5','count':4,'children':[]},{'item':'n6','count':3,'children':[{'item':'n8','count':1,'children':[]}]}]}]}, \"test case failed: complex tree\"\nassert build_tree(['P','Q','R','S'], [1,1,1,1], [-1,0,1,2])['children'][0]['children'][0]['children'][0]['item'] == 'S', \"test case failed: verify deep child label\"\nassert len(build_tree(['A','B','C'], [1,1,1], [-1,0,0])['children']) == 2, \"test case failed: number of children\"\nassert build_tree(['A','B','C','D','E'], [6,4,3,2,1], [-1,0,1,1,2]) == {'item':'A','count':6,'children':[{'item':'B','count':4,'children':[{'item':'C','count':3,'children':[{'item':'E','count':1,'children':[]} ]},{'item':'D','count':2,'children':[]} ]} ]}, \"test case failed: provided example\""}
{"task_id": 18, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.get('dtype', float)\n    return np.zeros(shape, dtype=dtype)\nassert zero(5).shape == (5,), \"test case failed: zero(5) shape incorrect\"\nassert np.array_equal(zero(5), np.zeros(5)), \"test case failed: zero(5) values incorrect\"\nassert zero((2, 3)).shape == (2, 3), \"test case failed: zero((2, 3)) shape incorrect\"\nassert np.array_equal(zero((2, 3)), np.zeros((2, 3))), \"test case failed: zero((2, 3)) values incorrect\"\nassert zero((2, 3), dtype=int).dtype == np.int_, \"test case failed: dtype=int not respected\"\nassert zero((1, 1, 1)).shape == (1, 1, 1), \"test case failed: triple-dim shape\"\nassert zero((4,)).ndim == 1, \"test case failed: ndim for 1-tuple shape\"\nassert zero(()).shape == (), \"test case failed: zero-dimensional array shape\"\nassert zero(0).size == 0, \"test case failed: zero length vector size\"\nassert zero((2, 0, 3)).size == 0, \"test case failed: array with a zero axis size\""}
{"task_id": 19, "completion_id": 0, "passed": false, "result": "failed: test-case 1 failed", "solution": "import numpy as np\nimport numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = -1\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_values)\n        sorted_values = feature_values[sorted_indices]\n        for i in range(1, n_samples - 1):\n            threshold = (sorted_values[i - 1] + sorted_values[i]) / 2\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            if n_left < 2 or n_right < 2:\n                continue\n            g_left = g[left_mask]\n            h_left = h[left_mask]\n            g_right = g[right_mask]\n            h_right = h[right_mask]\n            sum_g = np.sum(g)\n            sum_h = np.sum(h)\n            original_loss = -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\n            sum_g_left = np.sum(g_left)\n            sum_h_left = np.sum(h_left)\n            loss_left = -0.5 * sum_g_left ** 2 / (sum_h_left + lam) + gamma\n            sum_g_right = np.sum(g_right)\n            sum_h_right = np.sum(h_right)\n            loss_right = -0.5 * sum_g_right ** 2 / (sum_h_right + lam) + gamma\n            gain = original_loss - loss_left - loss_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\nassert best_split(np.array([[2],[4],[6],[8]]), np.array([ 1, 1,-1,-1]), np.array([1,1,1,1]), 0.1, 1.0)==(0,4), \"test-case 1 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([5,4,3,2,1]), np.ones(5), 0.2, 1.0)==(0,3), \"test-case 2 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([-5,-4,-3,-2,-1]), np.ones(5), 0.2, 0.5)==(0,3), \"test-case 3 failed\"\nassert best_split(np.array([[1],[2],[3],[4]]), np.array([1,-1,1,-1]), np.ones(4), 0.8, 1.0) is None, \"test-case 4 failed\"\nassert best_split(np.array([[0,0],[1,1],[2,2],[3,3],[4,4]]), np.array([1,1,1,-1,-1]), np.ones(5), 0.1, 1.0)==(0,2), \"test-case 5 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,0,0,0]), np.ones(6), 0.1, 1.0) is None, \"test-case 7 failed\"\nassert best_split(np.array([[10],[20],[30],[40]]), np.array([10,-5,-5,0]), np.ones(4), 0.05, 1.0)==(0,20), \"test-case 8 failed\"\nassert best_split(np.array([[2],[2],[2],[2]]), np.array([1,1,1,1]), np.ones(4), 0.1, 1.0) is None, \"test-case 10 failed\""}
{"task_id": 20, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x_array = np.array([x], dtype=np.float64)\n    else:\n        x_array = np.array(x, dtype=np.float64)\n    sigmoid = 1 / (1 + np.exp(-x_array))\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid_rounded = np.round(sigmoid, 4)\n    gradient_rounded = np.round(gradient, 4)\n    if isinstance(x, (int, float)):\n        return (float(sigmoid_rounded[0]), float(gradient_rounded[0]))\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "failed: division by zero", "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    weights = np.ones(n) / n\n    alphas = []\n    errors = []\n    sorted_indices = np.argsort(x_train)\n    sorted_x = [x_train[i] for i in sorted_indices]\n    sorted_y = [y_train[i] for i in sorted_indices]\n    while True:\n        stumps = []\n        for i in range(n - 1):\n            theta = (sorted_x[i] + sorted_x[i + 1]) / 2\n            for d in [0, 1]:\n\n                def h(x):\n                    if d == 0:\n                        return 1 if x <= theta else -1\n                    else:\n                        return 1 if x > theta else -1\n                err = 0\n                for j in range(n):\n                    if h(sorted_x[j]) != sorted_y[j]:\n                        err += weights[j]\n                stumps.append((h, err))\n        if not stumps:\n            break\n        (best_stump, best_error) = min(stumps, key=lambda x: x[1])\n        predictions = [sum((alpha * h(x) for (alpha, h) in zip(alphas, [best_stump]))) for x in sorted_x]\n        train_error = sum((weights[j] for j in range(n) if predictions[j] * sorted_y[j] <= 0)) / sum(weights)\n        if train_error <= epsilon:\n            break\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        for j in range(n):\n            if best_stump(sorted_x[j]) != sorted_y[j]:\n                weights[j] *= math.exp(-alpha)\n            else:\n                weights[j] *= math.exp(alpha)\n        weights /= sum(weights)\n        alphas.append(alpha)\n    predictions = []\n    for x in x_test:\n        total = 0\n        for (alpha, h) in zip(alphas, [best_stump]):\n            total += alpha * h(x)\n        predictions.append(1 if total > 0 else -1)\n    return predictions\nassert adaboost_1d_predict([1,2,3,4],[1,1,-1,-1],[1.5,3.5])==[1,-1],\"failed on basic separable set\"\nassert adaboost_1d_predict([1,2,3,4,5],[1,1,1,-1,-1],[1,5])==[1,-1],\"failed on unbalanced set\"\nassert adaboost_1d_predict([0,1,2,3],[1,1,-1,-1],[0.5,2.5])==[1,-1],\"failed on shift threshold\"\nassert adaboost_1d_predict([-3,-2,-1,0],[-1,-1,1,1],[-2.5,-0.5])==[-1,1],\"failed on negative values\"\nassert adaboost_1d_predict([10,20,30,40],[1,1,-1,-1],[15,35])==[1,-1],\"failed on large values\"\nassert adaboost_1d_predict([1,3,5,7],[1,1,-1,-1],[2,6])==[1,-1],\"failed on odd spacing\"\nassert adaboost_1d_predict([2,4,6,8],[1,1,-1,-1],[3,7],epsilon=0)==[1,-1],\"failed with explicit epsilon\"\nassert adaboost_1d_predict([0.1,0.2,0.8,0.9],[1,1,-1,-1],[0.15,0.85])==[1,-1],\"failed on float inputs\"\nassert adaboost_1d_predict([5,6,7,8,9,10],[1,1,1,-1,-1,-1],[5.5,9.5])==[1,-1],\"failed on bigger set\"\nassert adaboost_1d_predict([-5,-4,-3,-2,-1,0],[1,1,1,-1,-1,-1],[-4.5,-0.5])==[1,-1],\"failed on negative range\""}
{"task_id": 22, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    offset = np.random.randint(-300, 300, size=shape)\n    u = np.random.rand(*shape)\n    tensor = offset + u\n    if standardize:\n        eps = np.finfo(float).eps\n        mean = np.mean(tensor, axis=0)\n        std = np.std(tensor, axis=0)\n        std = np.where(std == 0, eps, std)\n        tensor = (tensor - mean) / std\n    return tensor\nassert random_tensor((5, 3), True).shape == (5, 3), \"test case failed: random_tensor((5, 3), True) shape check\"\nassert (random_tensor((7, 1), False) >= -300).all(), \"test case failed: value range check\"\nx = random_tensor((4, 2), True); import numpy as _np; assert _np.allclose(x.mean(axis=0), 0, atol=1e-10), \"test case failed: column means not zero\"\nx = random_tensor((4, 2), True); import numpy as _np; assert _np.allclose(x.std(axis=0), 1, atol=1e-10), \"test case failed: column stds not one\"\nx = random_tensor((3, 4), False); import numpy as _np; assert not _np.allclose(x.std(axis=0), 1, atol=1e-2), \"test case failed: standardization wrongly applied\"\nassert random_tensor((1, 5), False).shape == (1, 5), \"test case failed: random_tensor((1,5), False) shape check\"\nassert random_tensor((6, 6), True).shape == (6, 6), \"test case failed: random_tensor((6,6), True) shape check\"\nx = random_tensor((10, 2), True); import numpy as _np; assert _np.isfinite(x).all(), \"test case failed: finite values\"\nassert random_tensor((2, 3), False).dtype == float, \"test case failed: dtype check\"\nx = random_tensor((8, 4), True); import numpy as _np; assert _np.allclose(x.mean(axis=0), 0, atol=1e-10) and _np.allclose(x.std(axis=0), 1, atol=1e-10), \"test case failed: standardization (8,4)\""}
{"task_id": 24, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    w_np = np.array(w)\n    velocity_np = np.array(velocity)\n    if len(velocity) == 0:\n        velocity_np = np.zeros_like(w_np)\n    tilde_w = w_np - momentum * velocity_np\n    g = np.clip(grad_func(tilde_w), -1, 1)\n    v_prime = momentum * velocity_np + learning_rate * g\n    w_prime = w_np - v_prime\n    new_weights = np.round(w_prime, 4).tolist()\n    new_velocity = np.round(v_prime, 4).tolist()\n    return (new_weights, new_velocity)\nassert nesterov_update([1.5, -0.8], [0, 0], lambda x: 2 * x, 0.1, 0.9) == ([1.4, -0.7], [0.1, -0.1]), \"failed on basic 2-D update\"\nassert nesterov_update([1.4, -0.7], [0.1, -0.1], lambda x: 2 * x, 0.1, 0.9) == ([1.21, -0.51], [0.19, -0.19]), \"failed on consecutive 2-D step\"\nassert nesterov_update([2.0], [], lambda x: 4 * x, 0.05, 0.8) == ([1.95], [0.05]), \"failed on 1-D first step\"\nassert nesterov_update([-0.2, 0.2], [0, 0], lambda x: np.array([10, -10]), 0.2, 0.0) == ([-0.4, 0.4], [0.2, -0.2]), \"failed on gradient clipping\"\nassert nesterov_update([0.0, 0.0], [0, 0], lambda x: np.array([-0.5, 0.3]), 0.1, 0.5) == ([0.05, -0.03], [-0.05, 0.03]), \"failed on mixed-sign gradient\"\nassert nesterov_update([0.5, -0.5], [0.2, -0.1], lambda x: x, 0.1, 0.9) == ([0.288, -0.369], [0.212, -0.131]), \"failed on non-zero initial velocity\"\nassert nesterov_update([1.0, 1.0], [0, 0], lambda x: np.zeros_like(x), 0.1, 0.85) == ([1.0, 1.0], [0.0, 0.0]), \"failed on zero gradient\"\nassert nesterov_update([0.1], [0], lambda x: np.array([100]), 0.01, 0.0) == ([0.09], [0.01]), \"failed on extreme gradient clipping\"\nassert nesterov_update([2.0, -1.0, 0.5], [0, 0, 0], lambda x: 0.5 * x, 0.2, 0.4) == ([1.8, -0.9, 0.45], [0.2, -0.1, 0.05]), \"failed on 3-D first step\"\nassert nesterov_update([1.8, -0.9, 0.45], [0.2, -0.1, 0.05], lambda x: 0.5 * x, 0.2, 0.4) == ([1.548, -0.774, 0.387], [0.252, -0.126, 0.063]), \"failed on 3-D consecutive step\""}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: Failed on single test sample.", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = np.linalg.norm(X_train[:, np.newaxis] - X_test, axis=2)\n    kernel_terms = np.exp(-gamma * distances ** 2)\n    decision_function = np.sum(alpha[:, np.newaxis] * y_train[np.newaxis, :] * kernel_terms, axis=1) + b\n    predictions = np.where(decision_function > 0, 1, -1)\n    return predictions.tolist()\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 26, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    x_np = np.array(x)\n    activation = np.maximum(0, x_np)\n    gradient = np.where(x_np >= 0, 1, 0)\n\n    def to_list(arr):\n        if isinstance(arr, np.ndarray):\n            if arr.ndim == 1:\n                return arr.tolist()\n            else:\n                return [to_list(sub_arr) for sub_arr in arr]\n        else:\n            return arr\n    activation_list = to_list(activation)\n    gradient_list = to_list(gradient)\n    return (activation_list, gradient_list)\nassert relu([-2,-1,0,1,3]) == ([0,0,0,1,3],[0,0,1,1,1]), \"failed on 1-D mixed values\"\nassert relu([0,0,0]) == ([0,0,0],[1,1,1]), \"failed on all zeros\"\nassert relu([[1,-2],[3,-4]]) == ([[1,0],[3,0]],[[1,0],[1,0]]), \"failed on simple 2-D array\"\nassert relu([[-1.5,2.7,-3.2]]) == ([[0,2.7,0]],[[0,1,0]]), \"failed on float values\"\nassert relu([5]) == ([5],[1]), \"failed on single positive scalar\"\nassert relu([-5]) == ([0],[0]), \"failed on single negative scalar\"\nassert relu([[0.0,-0.0]]) == ([[0.0,0.0]],[[1,1]]), \"failed on signed zeros\"\nassert relu([[1000,-1000],[0,0.0001]]) == ([[1000,0],[0,0.0001]],[[1,0],[1,1]]), \"failed on large magnitude values\"\nassert relu([[-2,-1],[-0.5,0.5],[1,2]]) == ([[0,0],[0,0.5],[1,2]],[[0,0],[0,1],[1,1]]), \"failed on rectangular 2-D list\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    X_hat_np = np.dot(U[:, :k], np.dot(np.diag(S[:k]), Vt[:k, :]))\n    X_hat = [list(np.round(x, 4)) for x in X_hat_np]\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    mse_rounded = np.round(mse, 4)\n    return (X_hat, mse_rounded)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "timed out", "solution": "import numpy as np\nimport numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    stumps = []\n    residuals = y_sorted.copy()\n    while True:\n        rss = np.sum(residuals ** 2)\n        if rss < epsilon:\n            break\n        split_points = (x_sorted[:-1] + x_sorted[1:]) / 2\n        best_split = None\n        best_reduction = float('inf')\n        for s in split_points:\n            left_mask = x_sorted <= s\n            right_mask = x_sorted > s\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            new_rss = np.sum((residuals - (c1 * left_mask + c2 * right_mask)) ** 2)\n            reduction = rss - new_rss\n            if reduction < best_reduction:\n                best_reduction = reduction\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        stumps.append((best_split, best_c1, best_c2))\n        residuals -= best_c1 * (x_sorted <= best_split) + best_c2 * (x_sorted > best_split)\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],3)==3.5, \"failed: piece-wise constant right side\"\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],2)==1.5, \"failed: piece-wise constant left side\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],5)==4.0, \"failed: split at 3.0, right prediction\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],2)==2.0, \"failed: split at 3.0, left prediction\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],6)==20.0, \"failed: right side prediction 20\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],2)==10.0, \"failed: left side prediction 10\"\nassert predict_boosting_tree([1,2,3,4],[0,0,0,0],3)==0.0, \"failed: all zeros\"\nassert predict_boosting_tree([1,1.5,2],[2,2,2],1.2)==2.0, \"failed: identical targets\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],4)==2.0, \"failed: two-segment data, right\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],2)==1.0, \"failed: two-segment data, left\""}
{"task_id": 32, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair (a, b) must then be returned.\n    \"\"\"\n    a = float(a) if isinstance(a, str) else a\n    b = float(b) if isinstance(b, str) else b\n    return (a, b)\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    return a + b\nassert sum_numbers(3, 4) == 7, \"failed on (3, 4)\"\nassert sum_numbers(\"3\", 4) == 7.0, \"failed on ('3', 4)\"\nassert sum_numbers(\"3.5\", \"4.5\") == 8.0, \"failed on ('3.5', '4.5')\"\nassert sum_numbers(-2, \"5\") == 3.0, \"failed on (-2, '5')\"\nassert sum_numbers(\"0\", \"0\") == 0, \"failed on ('0', '0')\"\nassert sum_numbers(\"10.75\", 1.25) == 12.0, \"failed on ('10.75', 1.25)\"\nassert sum_numbers(0.1, 0.2) == 0.30000000000000004, \"failed on (0.1, 0.2)\"\nassert sum_numbers(\"-2.5\", \"-2.5\") == -5.0, \"failed on ('-2.5', '-2.5')\"\nassert sum_numbers(\" 6 \", \"7\") == 13.0, \"failed on (' 6 ', '7')\"\nassert sum_numbers(100, \"200\") == 300, \"failed on (100, '200')\""}
{"task_id": 34, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a binary tensor filled with 0.0s and 1.0s based on the given sparsity.\n    \n    Parameters:\n    - shape: A tuple representing the dimensions of the tensor.\n    - sparsity: A float in [0, 1] indicating the probability of a value being 1.0.\n    - seed: An integer (optional) to set the random seed for reproducibility.\n    \n    Returns:\n    - A NumPy ndarray of float type containing only 0.0 and 1.0 values.\n    \n    Raises:\n    - ValueError: If sparsity is not in the range [0, 1].\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (random_values >= threshold).astype(float)\n    return binary_tensor\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 35, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Any\nfrom typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        if current.fea >= len(sample):\n            return -1\n        feature_value = sample[current.fea]\n        if feature_value not in current.child:\n            return -1\n        current = current.child[feature_value]\n    return current.res\nassert classify(node(res=\"Yes\"), []) == \"Yes\", \"test case failed: classify(node(res='Yes'), [])\"\nroot1 = node(fea=0, child={\"sunny\": node(res=\"No\"), \"rainy\": node(res=\"Yes\")})\nassert classify(root1, [\"sunny\"]) == \"No\", \"test case failed: classify(root1, ['sunny'])\"\nassert classify(root1, [\"rainy\"]) == \"Yes\", \"test case failed: classify(root1, ['rainy'])\"\nassert classify(root1, [\"cloudy\"]) == -1, \"test case failed: classify(root1, ['cloudy'])\"\nassert classify(root1, []) == -1, \"test case failed: classify(root1, [])\"\nsub = node(fea=1, child={\"Y\": node(res=\"Yes\"), \"Z\": node(res=\"No\")})\nroot2 = node(fea=0, child={\"A\": node(res=\"X\"), \"B\": sub})\nassert classify(root2, [\"B\", \"Y\"]) == \"Yes\", \"test case failed: classify(root2, ['B','Y'])\"\nassert classify(root2, [\"B\", \"Z\"]) == \"No\", \"test case failed: classify(root2, ['B','Z'])\"\nassert classify(root2, [\"B\", \"Unknown\"]) == -1, \"test case failed: classify(root2, ['B','Unknown'])\"\nassert classify(root2, [\"A\"]) == \"X\", \"test case failed: classify(root2, ['A'])\"\nlevel3 = node(fea=2, child={\"D\": node(res=\"OK\")})\nroot3 = node(fea=0, child={\"R\": node(fea=1, child={\"C\": level3})})\nassert classify(root3, [\"R\", \"C\", \"D\"]) == \"OK\", \"test case failed: classify(root3, ['R','C','D'])\""}
{"task_id": 36, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Optional\nfrom typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Run the decision tree on a batch of samples and return predictions.\"\"\"\n    if root is None:\n        return []\n    predictions = []\n    for sample in X:\n        current_node = root\n        while current_node.left is not None or current_node.right is not None:\n            feature_index = current_node.feature\n            threshold = current_node.threshold\n            if feature_index is not None and feature_index < len(sample):\n                if sample[feature_index] <= threshold:\n                    current_node = current_node.left\n                else:\n                    current_node = current_node.right\n            else:\n                current_node = current_node.left\n        predictions.append(current_node.threshold)\n    return predictions\nassert predict_tree(None, [[1, 2], [3, 4]]) == [], \"failed on empty tree\"\nsingle_leaf = Node(None, None, (None, 42))\nassert predict_tree(single_leaf, [[0], [100]]) == [42, 42], \"failed on single-leaf tree\"\nleaf0 = Node(None, None, (None, 0))\nleaf1 = Node(None, None, (None, 1))\nroot = Node(leaf0, leaf1, (0, 2.5))\nassert predict_tree(root, [[1.4, 0], [4.0, 0]]) == [0, 1], \"failed on depth-1 tree\"\nleaf_left = Node(None, None, (None, 0))\nleaf_mid  = Node(None, None, (None, 1))\nleaf_right= Node(None, None, (None, 2))\nright_child = Node(leaf_mid, leaf_right, (1, 1.7))\nroot2 = Node(leaf_left, right_child, (0, 5))\nassert predict_tree(root2, [[2, 0], [7, 1.0], [7, 4]]) == [0, 1, 2], \"failed on depth-2 tree, assorted samples\"\nassert predict_tree(root2, [[1, 100], [3, -5]]) == [0, 0], \"failed when all samples end in the same leaf\"\nl1 = Node(None, None, (None, -1))\nl2 = Node(None, None, (None, -2))\nl3 = Node(None, None, (None, -3))\nint_node = Node(l2, l3, (2, 0.0))\nroot3 = Node(l1, int_node, (0, 10.0))\nassert predict_tree(root3, [[5, 0, -1], [20, 0, -2], [20, 0, 1]]) == [-1, -2, -3], \"failed on multi-feature tree\"\nleaf_neg = Node(None, None, (None, 9))\nleaf_pos = Node(None, None, (None, 8))\nroot4 = Node(leaf_neg, leaf_pos, (0, -3.0))\nassert predict_tree(root4, [[-10], [0]]) == [9, 8], \"failed on negative threshold splitting\"\nleaf_a = Node(None, None, (None, 0.1))\nleaf_b = Node(None, None, (None, 0.9))\nroot5 = Node(leaf_a, leaf_b, (0, 0.123))\nassert predict_tree(root5, [[0.0], [0.5]]) == [0.1, 0.9], \"failed on fractional values\"\nbig_batch = [[i] for i in range(100)]\nexpected  = [0 if i <= 50 else 1 for i in range(100)]\nbig_root  = Node(Node(None, None, (None, 0)), Node(None, None, (None, 1)), (0, 50))\nassert predict_tree(big_root, big_batch) == expected, \"failed on large batch\"\nleaf_c = Node(None, None, (None, 'left'))\nleaf_d = Node(None, None, (None, 'right'))\nroot6  = Node(leaf_c, leaf_d, (2, 3))\nassert predict_tree(root6, [[0, 0, 2], [0, 0, 5]]) == ['left', 'right'], \"failed when splitting on non-first feature\""}
{"task_id": 37, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import cycle\nimport numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.size == 0:\n        return None\n    m = data.shape[1] - 1\n    dim_generator = cycle(range(m))\n\n    def _build(data):\n        if data.size == 0:\n            return None\n        d = next(dim_generator)\n        sorted_data = data[data[:, d].argsort()]\n        median_index = sorted_data.shape[0] // 2\n        median_point = sorted_data[median_index]\n        label = median_point[-1]\n        left_subset = sorted_data[:median_index]\n        right_subset = sorted_data[median_index + 1:]\n        left = _build(left_subset)\n        right = _build(right_subset)\n        return {'point': median_point[:m].tolist(), 'label': label, 'left': left, 'right': right}\n    return _build(data)\nassert build_kd_tree(np.empty((0, 3))) is None, \"failed: empty dataset should return None\"\nsingle = np.array([[3, 5, 1]])\nassert build_kd_tree(single) == {\"point\": [3, 5], \"label\": 1, \"left\": None, \"right\": None}, \"failed: single point test\"\nasc_two = np.array([[1, 2, 0], [3, 4, 1]])\nexp_asc_two = {\"point\": [3, 4], \"label\": 1, \"left\": {\"point\": [1, 2], \"label\": 0, \"left\": None, \"right\": None}, \"right\": None}\nassert build_kd_tree(asc_two) == exp_asc_two, \"failed: two-row ascending test\"\ndesc_two = np.array([[3, 4, 1], [1, 2, 0]])\nassert build_kd_tree(desc_two) == exp_asc_two, \"failed: two-row descending test\"\nthree = np.array([[2, 3, 0], [1, 5, 1], [4, 4, 0]])\nexp_three = {\"point\": [2, 3], \"label\": 0, \"left\": {\"point\": [1, 5], \"label\": 1, \"left\": None, \"right\": None}, \"right\": {\"point\": [4, 4], \"label\": 0, \"left\": None, \"right\": None}}\nassert build_kd_tree(three) == exp_three, \"failed: three-row test\"\nfour = np.array([[1, 1, 0], [2, 2, 1], [3, 3, 0], [4, 4, 1]])\nexp_four = {\"point\": [3, 3], \"label\": 0, \"left\": {\"point\": [2, 2], \"label\": 1, \"left\": {\"point\": [1, 1], \"label\": 0, \"left\": None, \"right\": None}, \"right\": None}, \"right\": {\"point\": [4, 4], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(four) == exp_four, \"failed: four-row test\"\nfloats = np.array([[1.5, 2.5, 0], [3.5, 4.5, 1], [2.5, 3.5, 1]])\nexp_floats = {\"point\": [2.5, 3.5], \"label\": 1, \"left\": {\"point\": [1.5, 2.5], \"label\": 0, \"left\": None, \"right\": None}, \"right\": {\"point\": [3.5, 4.5], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(floats) == exp_floats, \"failed: float data test\"\nthree_feat = np.array([[2, 3, 4, 0], [5, 4, 3, 1], [4, 6, 2, 0]])\nexp_three_feat = {\"point\": [4, 6, 2], \"label\": 0, \"left\": {\"point\": [2, 3, 4], \"label\": 0, \"left\": None, \"right\": None}, \"right\": {\"point\": [5, 4, 3], \"label\": 1, \"left\": None, \"right\": None}}\nassert build_kd_tree(three_feat) == exp_three_feat, \"failed: 3-feature data test\"\nsingle3 = np.array([[7, 8, 9, 5]])\nassert build_kd_tree(single3) == {\"point\": [7, 8, 9], \"label\": 5, \"left\": None, \"right\": None}, \"failed: single 3-feature test\"\npair3 = np.array([[9, 9, 0, 0], [1, 1, 1, 1]])\nexp_pair3 = {\"point\": [9, 9, 0], \"label\": 0, \"left\": {\"point\": [1, 1, 1], \"label\": 1, \"left\": None, \"right\": None}, \"right\": None}\nassert build_kd_tree(pair3) == exp_pair3, \"failed: two-row 3-feature test\""}
{"task_id": 38, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    A_np = [np.array(a) for a in A]\n    b_np = [np.array(b_a) for b_a in b]\n    theta_hat = [np.linalg.inv(A_np[i]) @ b_np[i] for i in range(len(A_np))]\n    scores = []\n    for i in range(len(context.T)):\n        c_a = context[:, i]\n        theta_hat_a = theta_hat[i]\n        score = theta_hat_a @ c_a + alpha * np.sqrt(c_a @ np.linalg.inv(A_np[i]) @ c_a)\n        scores.append(score)\n    return np.argmax(scores)\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [np.eye(2), 2*np.eye(2)], [np.zeros(2), np.zeros(2)], 1.0) == 0, \"failed on orthogonal identity contexts\"\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [np.eye(2), 5*np.eye(2)], [np.zeros(2), np.zeros(2)], 3.0) == 0, \"failed high-alpha exploration preference\"\nassert linucb_select_arm(np.array([[1,0,0],[0,1,0],[0,0,1]]), [np.eye(3), np.eye(3), 2*np.eye(3)], [np.zeros(3), np.array([1,0,0]), np.zeros(3)], 1.0) == 0, \"failed tie-breaking smallest index\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.5]], 0.2) == 1, \"failed single-feature small-alpha exploitation\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.5]], 5.0) == 1, \"failed single-feature large-alpha\"\nassert linucb_select_arm(np.array([[1,0],[1,0]]), [np.eye(2), np.eye(2)], [np.array([2,2]), np.array([1,1])], 0.1) == 0, \"failed higher theta\"\nassert linucb_select_arm(np.array([[1,0],[0,1]]), [10*np.eye(2), np.eye(2)], [np.zeros(2), np.zeros(2)], 5.0) == 1, \"failed uncertainty driven choice\"\nassert linucb_select_arm(np.array([[1,1]]), [[[1.0]], [[1.0]]], [[0.0], [0.0]], 0.5) == 0, \"failed identical arms pick smallest index\""}
{"task_id": 39, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    column = data[:, d]\n    pivot_index = np.argpartition(column, n // 2)[n // 2]\n    pivot_value = column[pivot_index]\n    left_indices = np.where(column < pivot_value)[0]\n    right_indices = np.where(column > pivot_value)[0]\n    left = left_indices.tolist()\n    right = right_indices.tolist()\n    left.sort()\n    right.sort()\n    return (pivot_index, left, right)\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input must be one-dimensional'\n    assert stride >= 1, 'Stride must be at least 1'\n    assert len(x) >= frame_width, 'Signal length must be at least equal to frame width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    strides = (stride * x.strides[0], x.strides[0])\n    shape = (n_frames, frame_width)\n    framed = as_strided(x, shape=shape, strides=strides)\n    if not writeable:\n        framed.flags.writeable = False\n    return framed\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 41, "completion_id": 0, "passed": false, "result": "failed: failed: numeric labels tie resolved to 1", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    predictions = []\n    for query in X:\n        distances = [np.linalg.norm(np.array(query) - np.array(sample)) for sample in X_data]\n        nearest_indices = np.argsort(distances)[:k]\n        neighbor_labels = [y_data[i] for i in nearest_indices]\n        counter = Counter(neighbor_labels)\n        most_common = counter.most_common(1)\n        if len(most_common) > 1:\n            tied_labels = [label for (label, count) in counter.items() if count == most_common[0][1]]\n            predicted_label = min(tied_labels)\n        else:\n            predicted_label = most_common[0][0]\n        predictions.append(predicted_label)\n    return predictions\nassert knn_predict([[1,2],[2,3],[3,3],[6,5],[7,7]], ['A','A','A','B','B'], [[1.5,2.5],[6,6]], 3) == ['A','B'], \"failed: basic 2-D example\"\nassert knn_predict([[0],[1],[2],[3]], [0,0,1,1], [[1.1],[2.9]], 1) == [0,1], \"failed: 1-D k=1\"\nassert knn_predict([[0],[1],[2],[3]], [0,0,1,1], [[1.1],[2.9]], 3) == [0,1], \"failed: 1-D k=3\"\nassert knn_predict([[0],[1],[5],[6]], ['A','A','B','B'], [[3]], 2) == ['A'], \"failed: tie case, lexicographic rule\"\nassert knn_predict([[2,2],[2,-2],[-2,2],[-2,-2]], ['X','Y','Y','X'], [[0,0]], 4) == ['X'], \"failed: even tie chose X\"\nassert knn_predict([[1,0],[2,0],[3,0]], [1,2,3], [[2,0]], 2) == [1], \"failed: numeric labels tie resolved to 1\"\nassert knn_predict([[1,1],[1,2],[1,3],[10,10]], ['a','a','a','b'], [[9,9]], 3) == ['a'], \"failed: distant outlier\"\ntrain_X = [[i] for i in range(20)]\ntrain_y = ['even' if i%2==0 else 'odd' for i in range(20)]\nassert knn_predict(train_X, train_y, [[0.1],[19.9]], 5) == ['even','odd'], \"failed: large set\""}
{"task_id": 42, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    if len(actual) == 0:\n        return -1\n    n = len(actual)\n    log_diffs = np.log(np.array(actual) + 1) - np.log(np.array(predicted) + 1)\n    mse = np.mean(log_diffs ** 2)\n    rmsle_value = np.sqrt(mse)\n    return round(rmsle_value, 4)\nassert rmsle([3, 5, 2.5, 7], [2.5, 5, 4, 8]) == 0.1993, \"failed: example case\"\nassert rmsle([1, 2, 3], [1, 2, 3]) == 0.0, \"failed: perfect prediction\"\nassert rmsle([100], [150]) == 0.4022, \"failed: single element\"\nassert rmsle([1, 2, 3], [1, 2]) == -1, \"failed: length mismatch\"\nassert rmsle([-1, 2], [0, 2]) == -1, \"failed: negative value in actual\"\nassert rmsle([1000, 2000], [1000, 2000]) == 0.0, \"failed: large identical numbers\"\nassert rmsle([0, 0], [0, 0]) == 0.0, \"failed: all zeros prediction\"\nassert rmsle([0], [1]) == 0.6931, \"failed: zero actual, positive prediction\"\nassert rmsle([1], [0]) == 0.6931, \"failed: positive actual, zero prediction\"\nassert rmsle([5, 10, 15], [6, 12, 18]) == 0.1645, \"failed: moderate deviation\""}
{"task_id": 44, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    x_np = np.array(x, dtype=np.float64)\n    if not derivative:\n        exp_term = np.exp(-2 * x_np)\n        tanh_values = 2 / (1 + exp_term) - 1\n    else:\n        exp_term = np.exp(-2 * x_np)\n        tanh_values = 2 / (1 + exp_term) - 1\n        derivative_values = 1 - tanh_values ** 2\n    result = [round(val, 4) for val in (derivative_values if derivative else tanh_values)]\n    return result\nassert tanh_activation([0, 1, -1], False) == [0.0, 0.7616, -0.7616], \"failed on basic forward pass\"\nassert tanh_activation([2], False) == [0.9640], \"failed on single positive value\"\nassert tanh_activation([2], True) == [0.0707], \"failed on gradient single\"\nassert tanh_activation([-2], False) == [-0.9640], \"failed on single negative value\"\nassert tanh_activation([-2], True) == [0.0707], \"failed on gradient negative\"\nassert tanh_activation([3, -3], False) == [0.9951, -0.9951], \"failed on larger magnitudes\"\nassert tanh_activation([3, -3], True) == [0.0099, 0.0099], \"failed on larger gradient\"\nassert tanh_activation([0.5, -0.5], False) == [0.4621, -0.4621], \"failed on half values\"\nassert tanh_activation([0.5, -0.5], True) == [0.7864, 0.7864], \"failed on half gradient\""}
{"task_id": 46, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    x = np.array(x)\n    N = len(x)\n    if N == 0:\n        return []\n    result = []\n    for k in range(N):\n        sum_val = 0\n        for n in range(N - k):\n            sum_val += x[n] * x[n + k]\n        result.append(sum_val)\n    return result\nassert autocorrelate_1d([1, 2, 3]) == [14, 8, 3], \"failed: autocorrelate_1d([1, 2, 3])\"\nassert autocorrelate_1d([1]) == [1], \"failed: autocorrelate_1d([1])\"\nassert autocorrelate_1d([1, 0, 0]) == [1, 0, 0], \"failed: autocorrelate_1d([1, 0, 0])\"\nassert autocorrelate_1d([1, -1, 1, -1]) == [4, -3, 2, -1], \"failed: autocorrelate_1d([1, -1, 1, -1])\"\nassert autocorrelate_1d([0.5, 0.5]) == [0.5, 0.25], \"failed: autocorrelate_1d([0.5, 0.5])\"\nassert autocorrelate_1d([1, 2, 3, 4]) == [30, 20, 11, 4], \"failed: autocorrelate_1d([1, 2, 3, 4])\"\nassert autocorrelate_1d([-1, 2, -3]) == [14, -8, 3], \"failed: autocorrelate_1d([-1, 2, -3])\"\nassert autocorrelate_1d([]) == [], \"failed: autocorrelate_1d([])\"\nassert autocorrelate_1d([2, 2]) == [8, 4], \"failed: autocorrelate_1d([2, 2])\"\nassert autocorrelate_1d([1, 3, 5, 7, 9]) == [165, 116, 71, 34, 9], \"failed: autocorrelate_1d([1, 3, 5, 7, 9])\""}
{"task_id": 48, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | np.ndarray) -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 49, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    if k <= 0 or k > len(nums):\n        return -1\n    heap = []\n\n    def _move_up(index):\n        while index > 0:\n            parent = (index - 1) // 2\n            if heap[parent] < heap[index]:\n                (heap[parent], heap[index]) = (heap[index], heap[parent])\n                index = parent\n            else:\n                break\n\n    def _move_down(index):\n        while index < len(heap):\n            left = 2 * index + 1\n            right = 2 * index + 2\n            largest = index\n            if left < len(heap) and heap[left] > heap[largest]:\n                largest = left\n            if right < len(heap) and heap[right] > heap[largest]:\n                largest = right\n            if largest != index:\n                (heap[index], heap[largest]) = (heap[largest], heap[index])\n                index = largest\n            else:\n                break\n    for num in nums:\n        if len(heap) < k:\n            heap.append(num)\n            _move_up(len(heap) - 1)\n        elif num < heap[0]:\n            heap[0] = num\n            _move_down(0)\n    heap.sort()\n    return heap\nassert k_smallest([7,10,4,3,20,15],3) == [3,4,7], \"failed for [7,10,4,3,20,15], k=3\"\nassert k_smallest([1,2,3,4,5],5) == [1,2,3,4,5], \"failed for already sorted list\"\nassert k_smallest([5,4,3,2,1],2) == [1,2], \"failed for reverse order list, k=2\"\nassert k_smallest([3,1,4,1,5,9,2],4) == [1,1,2,3], \"failed with duplicates, k=4\"\nassert k_smallest([8.5,3.2,7.7,4.4,2.2],1) == [2.2], \"failed for k=1 with floats\"\nassert k_smallest([0],1) == [0], \"failed for single element list\"\nassert k_smallest([9,8,7,6,5],3) == [5,6,7], \"failed for [9,8,7,6,5], k=3\"\nassert k_smallest([2,2,2,2],3) == [2,2,2], \"failed for all identical values, k=3\"\nassert k_smallest([10,9,8,7],4) == [7,8,9,10], \"failed when k equals length\"\nassert k_smallest([1,2,3],0) == -1, \"failed for invalid k (0)\""}
{"task_id": 51, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"\n    Apply Newton's method to solve a two-variable linear least-squares problem.\n    \n    Parameters:\n        X (np.ndarray): Data matrix of shape (n, 2)\n        y (np.ndarray): Target vector of shape (n, 1)\n        epsilon (float): Stopping criterion for gradient norm\n        max_iter (int): Maximum number of iterations\n    \n    Returns:\n        list[list[float]]: Final weight vector rounded to 4 decimal places\n    \"\"\"\n    w = np.array([1.0, 1.0]).reshape(-1, 1)\n    for _ in range(max_iter):\n        residual = X @ w - y\n        gradient = 2 / X.shape[0] * X.T @ residual\n        hessian = 2 / X.shape[0] * X.T @ X\n        if np.linalg.matrix_rank(hessian) < 2:\n            inv_hessian = np.linalg.pinv(hessian)\n        else:\n            inv_hessian = np.linalg.inv(hessian)\n        delta_w = inv_hessian @ gradient\n        w -= delta_w\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    return [[round(val, 4) for val in w[0]], [round(val, 4) for val in w[1]]]\nassert newton(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[3], [7], [11]])) == [[1.0], [1.0]], \"test case failed: newton([[1,2],[3,4],[5,6]],[3,7,11])\"\nassert newton(np.array([[1, 0], [0, 1], [1, 1]]), np.array([[2], [3], [5]])) == [[2.0], [3.0]], \"test case failed: newton([[1,0],[0,1],[1,1]],[2,3,5])\"\nassert newton(np.array([[2, 4], [1, 3], [0, 1], [1, 2]]), np.array([[-3], [-2.5], [-1], [-1.5]])) == [[0.5], [-1.0]], \"test case failed: newton([[2,4],[1,3],[0,1],[1,2]],y)\"\nassert newton(np.array([[1, 2], [2, 3], [3, 4], [4, 5]]), np.array([[3], [5], [7], [9]])) == [[1.0], [1.0]], \"test case failed: newton(sequential data)\"\nassert newton(np.array([[1, 0], [0, 1], [2, 2]]), np.array([[2], [1], [6]])) == [[2.0], [1.0]], \"test case failed: newton([[1,0],[0,1],[2,2]],y)\"\nassert newton(np.array([[1, 3], [2, 1], [3, 2]]), np.array([[1], [7], [10]])) == [[4.0], [-1.0]], \"test case failed: newton([[1,3],[2,1],[3,2]],y)\"\nassert newton(np.array([[1, 2], [2, 1], [3, 3], [4, 1]]), np.array([[-1], [1], [0], [3]])) == [[1.0], [-1.0]], \"test case failed: newton(mixed signs)\"\nassert newton(np.array([[1, 4], [2, 2], [3, 1]]), np.array([[-0.5], [2], [4]])) == [[1.5], [-0.5]], \"test case failed: newton([[1,4],[2,2],[3,1]],y)\"\nassert newton(np.array([[1, 0], [0, 2], [2, 1], [3, 4], [4, 2]]), np.array([[0.75], [2.5], [2.75], [7.25], [5.5]])) == [[0.75], [1.25]], \"test case failed: newton(varied data)\"\n\n"}
{"task_id": 54, "completion_id": 0, "passed": false, "result": "failed: failed on default settings", "solution": "import string\nimport string\nSTOP_WORDS = {'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'we', 'us', 'you', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'i', 'my', 'mine', 'your', 'yours', 'his', 'hers', 'the', 'and', 'a', 'an', 'as', 'at', 'by', 'for', 'in', 'into', 'near', 'of', 'off', 'on', 'over', 'to', 'up', 'with', 'about', 'above', 'across', 'after', 'along', 'among', 'around', 'before', 'behind', 'below', 'beside', 'between', 'beyond', 'during', 'except', 'from', 'instead', 'like', 'minus', 'near', 'past', 'since', 'through', 'until', 'upon', 'versus', 'via', 'wait', 'within', 'without'}\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    if lowercase:\n        line = line.lower()\n    tokens = line.split()\n    processed_tokens = []\n    for token in tokens:\n        if filter_punctuation:\n            stripped_token = token.strip(string.punctuation)\n            if stripped_token:\n                processed_tokens.append(stripped_token)\n        else:\n            processed_tokens.append(token)\n    if filter_stopwords:\n        processed_tokens = [token for token in processed_tokens if token not in STOP_WORDS]\n    return processed_tokens\nassert tokenize_whitespace(\"Hello, world! This is an example.\") == [\"hello\", \"world\", \"example\"], \"failed on default settings\"\nassert tokenize_whitespace(\"Hello, world!\", filter_punctuation=False) == [\"hello,\", \"world!\"] , \"failed punctuation=False\"\nassert tokenize_whitespace(\"This is a test\", filter_stopwords=False) == [\"this\", \"is\", \"a\", \"test\"], \"failed stopword=False\"\nassert tokenize_whitespace(\"Mixed CASE Sentence\", lowercase=False) == [\"Mixed\", \"CASE\", \"Sentence\"], \"failed lowercase=False\"\nassert tokenize_whitespace(\"\") == [], \"failed empty string\"\nassert tokenize_whitespace(\"!!! ???\") == [], \"failed all punctuation string\"\nassert tokenize_whitespace(\"Can't won't shouldn't\") == [\"cant\", \"wont\", \"shouldnt\"], \"failed apostrophes\"\nassert tokenize_whitespace(\"Line\\nwith\\tmultiple\\tspaces\") == [\"line\", \"multiple\", \"spaces\"], \"failed whitespace variants\"\nassert tokenize_whitespace(\"Repeated  the   the\", filter_stopwords=False) == [\"repeated\", \"the\", \"the\"], \"failed repeated tokens\"\nassert tokenize_whitespace(\"A quick brown fox\", filter_stopwords=True, filter_punctuation=True, lowercase=True) == [\"quick\", \"brown\", \"fox\"], \"failed combined settings\""}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        if batch_size > n:\n            batch_indices = np.arange(n)\n        else:\n            batch_indices = np.random.choice(n, batch_size, replace=False)\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        grad = 1 / n * X.T @ (X @ w - y)\n        s = rho * s + (1 - rho) * grad ** 2\n        w = w - eta * grad / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return [round(float(val), 4) for val in w]\nimport numpy as np\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([1,3,5,7],float)),[1,2])), \"Failed on y = 1+2x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3],[1,4]],float),np.array([3,7,11,15,19],float)),[3,4])), \"Failed on y = 3+4x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2]],float),np.array([5,5,5],float)),[5,0])), \"Failed on constant function\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([10,8,6,4],float)),[10,-2])), \"Failed on y = 10-2x\"\nX8=np.array([[1,-1],[1,0],[1,1],[1,2]],float);y8=np.array([4,5,6,7],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X8,y8),[5,1])), \"Failed on negative to positive x\"\nX9=np.array([[1,2],[1,4],[1,6],[1,8]],float);y9=np.array([5,9,13,17],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X9,y9),[1,2])), \"Failed on even x\"\nX10=np.array([[1,3],[1,6],[1,9]],float);y10=np.array([2,4,6],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X10,y10),[0,0.6667])), \"Failed on small sample 10\""}
{"task_id": 56, "completion_id": 0, "passed": false, "result": "failed: failed: softplus(0)", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Implements the SoftPlus activation function and its derivative (sigmoid).\n    \n    Parameters:\n    x (scalar, list, or numpy array): Input values.\n    deriv (bool, optional): If True, returns the derivative (sigmoid). Defaults to False.\n    \n    Returns:\n    list or float: Rounded values to the nearest 4th decimal.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n    x_np = np.array(x, dtype=np.float64)\n    if not deriv:\n        x_large = x_np > 500\n        x_small = x_np < -500\n        x_mid = ~x_large & ~x_small\n        result = np.where(x_large, np.log(np.exp(-500) + 1), np.where(x_small, np.log(1 + np.exp(500)), np.log1p(np.exp(x_np))))\n    else:\n        result = 1 / (1 + np.exp(-x_np))\n    result = np.round(result, 4)\n    return result.tolist()\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: failed test 5", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Args:\n        corpus: A list of word tokens used to train the model.\n        sequence: The target sequence for which we compute the log-probability.\n        N: The order of the n-gram model (\u22651).\n\n    Returns:\n        The total log-probability of the sequence under the N-gram MLE model,\n        rounded to 4 decimal places. If any required count is zero, returns\n        float('-inf').\n    \"\"\"\n    if len(sequence) < N:\n        return float('-inf')\n    n_grams = Counter()\n    for i in range(len(corpus) - N + 1):\n        n_gram = tuple(corpus[i:i + N])\n        n_grams[n_gram] += 1\n    n_minus_1_grams = Counter()\n    for i in range(len(corpus) - (N - 1) + 1):\n        n_minus_1_gram = tuple(corpus[i:i + N - 1])\n        n_minus_1_grams[n_minus_1_gram] += 1\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        n_gram = tuple(sequence[i:i + N])\n        n_minus_1_gram = tuple(sequence[i:i + N - 1])\n        if n_grams[n_gram] == 0 or n_minus_1_grams[n_minus_1_gram] == 0:\n            return float('-inf')\n        prob = np.log(n_grams[n_gram] / n_minus_1_grams[n_minus_1_gram])\n        log_prob += prob\n    return round(log_prob, 4)\nassert unsmoothed_ngram_log_prob([\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"],[\"the\",\"lazy\",\"dog\"],2)==-0.6931, \"failed test 1\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],2)==-0.4055, \"failed test 2\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"a\",\"b\"],2)==-0.4055, \"failed test 3\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"c\"],2)==float('-inf'), \"failed test 4\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],1)==-1.4271, \"failed test 5\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"c\"],1)==float('-inf'), \"failed test 6\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"i\",\"love\",\"deep\"],3)==-0.6931, \"failed test 7\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"love\",\"deep\",\"machine\"],3)==float('-inf'), \"failed test 8\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\"],2)==float('-inf'), \"failed test 9\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"machine\",\"learning\",\"i\"],3)==0.0, \"failed test 10\""}
{"task_id": 60, "completion_id": 0, "passed": false, "result": "failed: local variable 'mse' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    n = len(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    probs = counts / n\n    if criterion == 'entropy':\n        entropy = -np.sum(probs * np.log2(probs))\n    elif criterion == 'gini':\n        gini = 1 - np.sum(probs ** 2)\n    elif criterion == 'mse':\n        mse = np.sum(probs * (1 - probs))\n    else:\n        raise ValueError(\"Invalid criterion. Must be one of {'entropy', 'gini', 'mse'}\")\n    return round(float(mse), 4)\nassert compute_impurity(np.array([0, 1]), \"gini\") == 0.5, \"failed on gini([0,1])\"\nassert compute_impurity(np.array([0, 0, 1, 1]), \"entropy\") == 1.0, \"failed on entropy([0,0,1,1])\"\nassert compute_impurity(np.array([0, 0, 0, 0]), \"gini\") == 0.0, \"failed on gini(all same)\"\nassert compute_impurity(np.array([0, 0, 0, 0]), \"entropy\") == 0.0, \"failed on entropy(all same)\"\nassert compute_impurity(np.array([1.0, 2.0, 3.0, 4.0]), \"mse\") == 1.25, \"failed on mse([1,2,3,4])\"\nassert compute_impurity(np.array([3.0, 3.0, 4.0, 5.0]), \"mse\") == 0.6875, \"failed on mse([3,3,4,5])\"\nassert compute_impurity(np.array([0, 1, 2]), \"gini\") == 0.6667, \"failed on gini([0,1,2])\"\nassert compute_impurity(np.array([0, 1, 2]), \"entropy\") == 1.585, \"failed on entropy([0,1,2])\"\nassert compute_impurity(np.array([10, 10]), \"mse\") == 0.0, \"failed on mse([10,10])\"\nassert compute_impurity(np.array([0, 1, 1, 1, 1]), \"gini\") == 0.32, \"failed on gini(1 dominant)\""}
{"task_id": 61, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    W = np.array(W)\n    if X.ndim != 2:\n        return -1\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    elif y.shape[1] != 1:\n        return -1\n    if W.ndim == 1:\n        W = W.reshape(-1, 1)\n    elif W.shape[1] != 1:\n        return -1\n    (n_samples, n_features) = X.shape\n    if y.shape[0] != n_samples:\n        return -1\n    if W.shape[0] != n_features:\n        return -1\n    X_T = X.T\n    predictions = X @ W\n    error = predictions - y\n    gradient = X_T @ error / n_samples\n    gradient_rounded = np.round(gradient, 4)\n    return gradient_rounded.tolist()\nassert grad([[1, 2], [3, 4]], [[5], [6]], [[0], [0]]) == [[-11.5], [-17.0]], \"test case 1 failed\"\nassert grad([[1, 0], [0, 1], [1, 1]], [[1], [2], [3]], [[0], [0]]) == [[-1.3333], [-1.6667]], \"test case 2 failed\"\nassert grad([[1, 2], [3, 4]], [[1], [2], [3]], [[1], [1]]) == -1, \"test case 3 failed\"\nassert grad([[1, 2], [3, 4]], [[1], [2]], [[1], [1], [1]]) == -1, \"test case 4 failed\"\nassert grad([[2, 1], [1, 3]], [[1], [2]], [[0.5], [-1]]) == [[-3.25], [-7.25]], \"test case 5 failed\"\nassert grad([[1, 2, 3], [4, 5, 6]], [[1], [0]], [[1], [0], [-1]]) == [[-5.5], [-8.0], [-10.5]], \"test case 6 failed\"\nassert grad([[2, 4, 6]], [[5]], [[1], [1], [1]]) == [[14.0], [28.0], [42.0]], \"test case 7 failed\"\nassert grad([[1, 2], [3, 4], [5, 6]], [1, 2, 3], [0, 0]) == [[-7.3333], [-9.3333]], \"test case 8 failed\"\nassert grad([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], [[0],[0],[0],[0]], [[4],[8],[12],[16]]) == [[1.0], [2.0], [3.0], [4.0]], \"test case 9 failed\"\nassert grad([[1], [1], [1]], [[0], [1], [2]], [[1]]) == [[0.0]], \"test case 10 failed\""}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: failed: linear data degree 1", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to four decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_poly = np.ones((len(X), 1))\n    for i in range(1, degree + 1):\n        X_poly = np.hstack((X_poly, X.reshape(-1, 1) ** i))\n    w = np.zeros(degree + 1)\n    for iteration in range(n_iterations):\n        prev_w = w.copy()\n        w[0] = np.mean(y - np.dot(X_poly[:, 1:], prev_w[1:]))\n        for j in range(1, degree + 1):\n            x_j = X_poly[:, j]\n            residual = y - np.dot(X_poly[:, 1:], prev_w[1:])\n            rho = np.dot(x_j, residual - prev_w[j] * x_j)\n            if rho > 0:\n                new_wj = rho / np.dot(x_j, x_j)\n            elif rho < 0:\n                new_wj = -rho / np.dot(x_j, x_j)\n            else:\n                new_wj = 0\n            if rho > 0:\n                new_wj = max(rho - reg_factor, 0) / np.dot(x_j, x_j)\n            elif rho < 0:\n                new_wj = -max(-rho - reg_factor, 0) / np.dot(x_j, x_j)\n            else:\n                new_wj = 0\n            w[j] = new_wj\n        max_change = np.max(np.abs(w - prev_w))\n        if max_change < tol:\n            break\n    return [round(wi, 4) for wi in w]\nassert lasso_regression([0,1,2,3],[1,3,5,7],1,0)==[1.0,2.0],\"failed: linear data degree 1\"\nassert lasso_regression([1,2,3],[4,6,8],1,0)==[2.0,2.0],\"failed: linear data intercept 2 slope 2\"\nassert lasso_regression([0,1,2],[0,1,4],2,0)==[0.0,0.0,1.0],\"failed: quadratic x^2\"\nassert lasso_regression([0,1,2],[1,2,5],2,0)==[1.0,0.0,1.0],\"failed: quadratic x^2+1\"\nassert lasso_regression([0,1,2],[2,6,12],2,0)==[2.0,3.0,1.0],\"failed: quadratic 2+3x+x^2\"\nassert lasso_regression([-1,0,1],[2,1,0],1,0)==[1.0,-1.0],\"failed: negative slope\"\nassert lasso_regression([0,5],[7,17],1,0)==[7.0,2.0],\"failed: two-point line\""}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: name 'A1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    - A: Transition-probability matrix of shape (N, N)\n    - B: Emission-probability matrix of shape (N, M)\n    - obs: List of observation indices (length T)\n    - t: Integer time index (0 \u2264 t < T)\n    \n    Returns:\n    - A list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=np.float64)\n    B = np.array(B, dtype=np.float64)\n    obs = np.array(obs, dtype=np.int32)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros(N)\n    if t == T - 1:\n        beta[:] = 1.0\n    else:\n        next_obs = obs[t + 1]\n        beta = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                emission_prob = B[j, next_obs]\n                transition_prob = A[i, j]\n                beta[i] += transition_prob * emission_prob * beta[j]\n    return [round(prob, 4) for prob in beta]\nassert backward_beta(A1, B1, obs1, 0) == [0.2032, 0.2164], \"failed: example t=0\"\nassert backward_beta(A1, B1, obs1, 1) == [0.38, 0.26], \"failed: example t=1\"\nassert backward_beta(A1, B1, obs1, 2) == [1.0, 1.0], \"failed: example t=2 (last index)\"\nassert backward_beta(A2, B2, obs2, 3) == [1.0, 1.0, 1.0], \"failed: 3-state t=3\"\nassert backward_beta(A2, B2, obs2, 2) == [0.49, 0.5, 0.47], \"failed: 3-state t=2\"\nassert backward_beta(A2, B2, obs2, 1) == [0.2488, 0.2434, 0.2552], \"failed: 3-state t=1\"\nassert backward_beta(A2, B2, obs2, 0) == [0.1267, 0.1245, 0.133], \"failed: 3-state t=0\"\nassert backward_beta(A3, B3, obs3, 0) == [1.0, 1.0], \"failed: single observation\"\nassert backward_beta(A4, B4, obs4, 0) == [0.45, 0.54], \"failed: custom 2-state t=0\"\nassert backward_beta(A4, B4, obs4, 1) == [1.0, 1.0], \"failed: custom 2-state t=1\""}
{"task_id": 64, "completion_id": 0, "passed": false, "result": "failed: name 'dft' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert dft(np.array([1, 0, -1, 0]), True) == [0j, (2+0j), 0j], \"failed on basic 4-point signal (positive_only)\"\nassert dft(np.array([1, 0, -1, 0]), False) == [0j, (2+0j), 0j, (2+0j)], \"failed on basic 4-point signal (full)\"\nassert dft(np.array([0, 1, 0, -1])) == (np.round(np.fft.fft(np.array([0,1,0,-1]))[:3].real,4)+1j*np.round(np.fft.fft(np.array([0,1,0,-1]))[:3].imag,4)).tolist(), \"failed on shifted square wave (positive_only)\"\nassert dft(np.arange(8), False) == (np.round(np.fft.fft(np.arange(8)).real,4)+1j*np.round(np.fft.fft(np.arange(8)).imag,4)).tolist(), \"failed on ramp signal length 8 (full)\"\nassert dft(np.random.RandomState(0).rand(5)) == (np.round(np.fft.fft(np.random.RandomState(0).rand(5))[:3].real,4)+1j*np.round(np.fft.fft(np.random.RandomState(0).rand(5))[:3].imag,4)).tolist(), \"failed on random len-5 frame (positive_only)\"\nassert dft(np.array([7])) == [(7+0j)], \"failed on length-1 signal\"\nassert dft(np.array([1,2]), False) == (np.round(np.fft.fft(np.array([1,2])).real,4)+1j*np.round(np.fft.fft(np.array([1,2])).imag,4)).tolist(), \"failed on length-2 signal\"\nassert dft(np.array([1+1j,2-2j,-3+3j])) == (np.round(np.fft.fft(np.array([1+1j,2-2j,-3+3j]))[:2].real,4)+1j*np.round(np.fft.fft(np.array([1+1j,2-2j,-3+3j]))[:2].imag,4)).tolist(), \"failed on complex input (positive_only)\"\nassert dft(np.zeros(6)) == [0j]*4, \"failed on all-zeros input\"\nassert dft(np.ones(6), False) == (np.round(np.fft.fft(np.ones(6)).real,4)+1j*np.round(np.fft.fft(np.ones(6)).imag,4)).tolist(), \"failed on all-ones input\""}
{"task_id": 65, "completion_id": 0, "passed": false, "result": "failed: list assignment index out of range", "solution": "import numpy as np\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    beta = [0.0] * N\n    beta[T - 1] = [1.0] * N\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                total += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n            beta[t][i] = total\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0][i]\n    return round(prob, 6)\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2]) == 0.033612, \"test case failed: example sequence\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [2,1]) == 0.1246, \"test case failed: sequence [2,1]\"\nassert backward_prob([[1.0]], [[0.2,0.8]], [1.0], [0,1,1,0]) == 0.0256, \"test case failed: single-state model 1\"\nassert backward_prob([[1.0]], [[0.5,0.5]], [1.0], [1,1,1]) == 0.125, \"test case failed: single-state model 2\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [1]) == 0.36, \"test case failed: length-1 sequence\"\nassert backward_prob([[0.5,0.5,0.0],[0.2,0.3,0.5],[0.0,0.0,1.0]], [[0.1,0.9],[0.7,0.3],[0.4,0.6]], [1.0,0.0,0.0], [0,1]) == 0.06, \"test case failed: 3-state model\"\nassert backward_prob([[1,0],[0,1]], [[0.6,0.4],[0.2,0.8]], [0.5,0.5], [0,1]) == 0.2, \"test case failed: deterministic transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [0,0]) == 0.25, \"test case failed: symmetric transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [1]) == 0.5, \"test case failed: length-1 identity emissions\"\nassert backward_prob([[1.0]], [[0.3,0.7]], [1.0], [1,1,0]) == 0.147, \"test case failed: single-state model 3\""}
{"task_id": 67, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import accumulate\nimport numpy as np\nfrom itertools import accumulate\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    if not S or not A or (not B):\n        return -1\n    n_states = len(S)\n    if n_states == 0:\n        return -1\n    m_observations = len(B[0]) if B else 0\n    if m_observations == 0:\n        return -1\n    if abs(sum(S) - 1.0) > 1e-08:\n        return -1\n    for row in A:\n        if abs(sum(row) - 1.0) > 1e-08:\n            return -1\n    for row in B:\n        if abs(sum(row) - 1.0) > 1e-08:\n            return -1\n    if seed is not None:\n        np.random.seed(seed)\n    states = []\n    observations = []\n    current_state = np.random.choice(n_states, p=S)\n    states.append(current_state)\n    current_observation = np.random.choice(len(B[current_state]), p=B[current_state])\n    observations.append(current_observation)\n    for _ in range(n_sample - 1):\n        next_state = np.random.choice(n_states, p=A[current_state])\n        states.append(next_state)\n        current_observation = np.random.choice(len(B[next_state]), p=B[next_state])\n        observations.append(current_observation)\n        current_state = next_state\n    return (states, observations)\nassert gen_hmm_data([0.6,0.4],[[0.7,0.3],[0.4,0.6]],[[0.5,0.4,0.1],[0.1,0.3,0.6]],5,seed=42)==([0,1,0,0,0],[2,2,0,1,1]),\"tc1 failed\"\nassert gen_hmm_data([1,0],[[1,0],[0,1]],[[0,1],[1,0]],5,seed=7)==([0,0,0,0,0],[1,1,1,1,1]),\"tc2 failed\"\nassert gen_hmm_data([0,1],[[1,0],[0,1]],[[1,0],[0,1]],3,seed=10)==([1,1,1],[1,1,1]),\"tc3 failed\"\nassert gen_hmm_data([0.3,0.3],[[1,0],[0,1]],[[1,0],[0,1]],4)==-1,\"tc5 failed\"\nassert gen_hmm_data([0.5,0.5],[[0.5,0.5],[0.5,0.5]],[[0.5,0.5],[0.5,0.5]],2,seed=0)==([1,1],[1,1]),\"tc6 failed\"\nassert gen_hmm_data([0,0,1],[[0,0,1],[0,1,0],[0,0,1]],[[0,1],[1,0],[1,0]],3,seed=21)==([2,2,2],[0,0,0]),\"tc7 failed\"\nassert gen_hmm_data([1],[[1]],[[0,1]],4)==([0,0,0,0],[1,1,1,1]),\"tc8 failed\"\nassert gen_hmm_data([0.5,0.5],[[1,0],[0,1]],[[0.7,0.3],[0.2,0.8]],1,seed=123)==([1],[1]),\"tc9 failed\""}
{"task_id": 68, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    updated_w = w - learning_rate * new_update\n    updated_w_rounded = np.round(updated_w, 4).tolist()\n    new_update_rounded = np.round(new_update, 4).tolist()\n    return (updated_w_rounded, new_update_rounded)\nassert sgd_momentum_update(np.array([1.0, 2.0]), np.array([0.1, -0.2]), 0.1, 0.9, None) == ([0.999, 2.002], [0.01, -0.02]), \"failed on basic initial step\"\nassert sgd_momentum_update(np.array([0.5]), np.array([0.2]), 0.05, 0.8, np.array([0.03])) == ([0.4968], [0.064]), \"failed when previous update is given\"\nassert sgd_momentum_update(np.array([2.0, -3.0]), np.array([-0.5, 0.5]), 0.01, 0.0, None) == ([2.005, -3.005], [-0.5, 0.5]), \"failed with zero momentum\"\nassert sgd_momentum_update(np.array([1.0]), np.array([0.1]), 0.1, 1.0, np.array([0.2])) == ([0.98], [0.2]), \"failed with momentum equal to 1\"\nassert sgd_momentum_update(np.array([10.0]), np.array([1.0]), 0.001, 0.5, None) == ([9.9995], [0.5]), \"failed scalar update with 0.5 momentum\"\nassert sgd_momentum_update(np.array([1.0, 2.0, 3.0]), np.array([0.0, 0.0, 1.0]), 0.1, 0.5, np.zeros(3)) == ([1.0, 2.0, 2.95], [0.0, 0.0, 0.5]), \"failed on higher-dim vector\"\nassert sgd_momentum_update(np.zeros(2), np.ones(2), 0.5, 0.8, None) == ([-0.1, -0.1], [0.2, 0.2]), \"failed on zero parameters\"\nassert sgd_momentum_update(np.array([5.0]), np.array([-2.0]), 0.01, 0.7, np.array([-0.5])) == ([5.0095], [-0.95]), \"failed on negative gradient and prev_update\"\nassert sgd_momentum_update(np.array([[0.0,1.0],[1.0,0.0]]), np.array([[0.5,0.0],[0.0,0.5]]), 0.2, 0.6, np.full((2,2),0.1)) == ([[-0.052,0.988],[0.988,-0.052]], [[0.26,0.06],[0.06,0.26]]), \"failed on mixed matrix with previous velocity\""}
{"task_id": 69, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not S or not A or (not B) or (not observations):\n        return -1\n    n = len(S)\n    m = len(B[0]) if B else 0\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if len(B) != n or any((len(row) != m for row in B)):\n        return -1\n    if len(observations) == 0:\n        return -1\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1\n    T = len(observations)\n    alpha = np.zeros((n, T))\n    for i in range(n):\n        alpha[i][0] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[i][t] = sum((alpha[j][t - 1] * A[j][i] * B[i][observations[t]] for j in range(n)))\n    result = sum((alpha[i][T - 1] for i in range(n)))\n    return round(result, 4)\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [0,1,2]) == 0.0363, \"failed: basic 2-state example\"\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [1]) == 0.36, \"failed: single observation\"\nassert forward_algorithm([1.0,0.0], [[0.5,0.5],[0.2,0.8]], [[0.6,0.4],[0.3,0.7]], [0,1,1]) == 0.2004, \"failed: asymmetric model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [2,0]) == 0.097, \"failed: different start distribution\"\nassert forward_algorithm([1.0], [[1.0]], [[0.2,0.3]], [1,1,0]) == 0.018, \"failed: single-state model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.5]], [0]) == -1, \"failed: B wrong dimensions\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [-1,0]) == -1, \"failed: negative observation index\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [0,2]) == -1, \"failed: observation index out of range\"\nassert forward_algorithm([], [], [], [0]) == -1, \"failed: empty S\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3]], [[0.5,0.5],[0.5,0.5]], [0]) == -1, \"failed: A not square\""}
{"task_id": 70, "completion_id": 0, "passed": false, "result": "failed: maximum recursion depth exceeded", "solution": "from collections import Counter, defaultdict\nfrom collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)` so that calling `sort` with that key does **not** change the order.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_items = [item for (item, count) in item_counts.items() if count >= min_support]\n    if not frequent_items:\n        return []\n    frequent_items.sort()\n\n    def build_fp_tree(data, header_table, freq_item_set):\n        root = TrieNode()\n        for transaction in data:\n            sorted_transaction = sorted(transaction)\n            current = root\n            for item in sorted_transaction:\n                if item not in header_table:\n                    header_table[item] = {'count': 0, 'node': None}\n                if not current.children.get(item):\n                    current.children[item] = TrieNode()\n                current = current.children[item]\n                current.count += 1\n                header_table[item]['count'] += 1\n            current.transaction = sorted_transaction\n        return root\n\n    class TrieNode:\n\n        def __init__(self):\n            self.children = {}\n            self.count = 0\n            self.transaction = None\n    header_table = {}\n    for item in frequent_items:\n        header_table[item] = {'count': 0, 'node': None}\n    root = build_fp_tree(transactions, header_table, frequent_items)\n\n    def mine_conditional_pattern_base(root_node, header_table, frequent_item_set):\n        if not root_node or not header_table:\n            return []\n        most_frequent_item = max(header_table, key=lambda x: header_table[x]['count'])\n        conditional_pattern_base = []\n        for transaction in transactions:\n            sorted_transaction = sorted(transaction)\n            if most_frequent_item in sorted_transaction:\n                new_transaction = [item for item in sorted_transaction if item != most_frequent_item]\n                conditional_pattern_base.append(new_transaction)\n        conditional_root = build_fp_tree(conditional_pattern_base, header_table, frequent_item_set)\n        frequent_item_sets = []\n        if conditional_root:\n            frequent_item_sets.extend(mine_conditional_pattern_base(conditional_root, header_table, frequent_item_set))\n            frequent_item_sets.append(frequent_item_set + [most_frequent_item])\n        return frequent_item_sets\n    frequent_item_sets = mine_conditional_pattern_base(root, header_table, frequent_items)\n    frequent_item_sets = [sorted(item_set) for item_set in frequent_item_sets]\n    unique_frequent_item_sets = []\n    seen = set()\n    for item_set in frequent_item_sets:\n        frozen_set = frozenset(item_set)\n        if frozen_set not in seen:\n            seen.add(frozen_set)\n            unique_frequent_item_sets.append(item_set)\n    unique_frequent_item_sets.sort(key=lambda x: (len(x), x))\n    return unique_frequent_item_sets\nassert fp_growth([], 1) == [], \"test case failed: empty dataset\"\nassert fp_growth([[\"x\", \"y\"]], 2) == [], \"test case failed: single transaction, high support\"\nassert fp_growth([[\"x\", \"y\"]], 1) == [[\"x\"], [\"y\"], [\"x\", \"y\"]], \"test case failed: single transaction, min_support=1\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 4) == [], \"test case failed: support greater than number of transactions\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: small data set min_support=2\"\nassert fp_growth([[\"a\", \"b\", \"c\"]]*3, 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"b\", \"c\"]], \"test case failed: identical transactions\"\nassert fp_growth([[\"bread\", \"milk\"], [\"bread\", \"diaper\", \"beer\", \"egg\"], [\"milk\", \"diaper\", \"beer\", \"coke\"], [\"bread\", \"milk\", \"diaper\", \"beer\"], [\"bread\", \"milk\", \"diaper\", \"coke\"]], 2) == [[\"beer\"], [\"bread\"], [\"coke\"], [\"diaper\"], [\"milk\"], [\"beer\", \"bread\"], [\"beer\", \"diaper\"], [\"beer\", \"milk\"], [\"bread\", \"diaper\"], [\"bread\", \"milk\"], [\"coke\", \"diaper\"], [\"coke\", \"milk\"], [\"diaper\", \"milk\"], [\"beer\", \"bread\", \"diaper\"], [\"beer\", \"diaper\", \"milk\"], [\"bread\", \"diaper\", \"milk\"], [\"coke\", \"diaper\", \"milk\"]], \"test case failed: example data min_support=2\"\nassert fp_growth([[\"a\", \"b\"], [\"b\", \"c\"], [\"a\", \"c\"], [\"a\", \"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: mixed transactions\"\nassert fp_growth([[\"d\"]], 1) == [[\"d\"]], \"test case failed: single item single transaction\""}
{"task_id": 71, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    for sample in data:\n        if not sample:\n            continue\n        label = sample[-1]\n        if label in label_counts:\n            label_counts[label] += 1\n        else:\n            label_counts[label] = 1\n    return label_counts\nassert label_uniq_cnt([[1, 2, 'A'], [3, 5, 'B'], [7, 1, 'A']]) == {'A': 2, 'B': 1}, \"test case failed: multiple labels\"\nassert label_uniq_cnt([[0, 'cat'], [4, 'dog'], [9, 'dog'], [3, 'cat'], [1, 'cat']]) == {'cat': 3, 'dog': 2}, \"test case failed: string labels\"\nassert label_uniq_cnt([[0.2, 5.1, 1], [1.3, 3.3, 1], [9.0, 2.2, 2]]) == {1: 2, 2: 1}, \"test case failed: numeric labels\"\nassert label_uniq_cnt([[42, 'single']]) == {'single': 1}, \"test case failed: single sample\"\nassert label_uniq_cnt([[5, 7, 'same'], [1, 2, 'same'], [3, 4, 'same']]) == {'same': 3}, \"test case failed: all same label\"\nassert label_uniq_cnt([]) == {}, \"test case failed: empty data set\"\nassert label_uniq_cnt([[1,2,3,'x'],[2,3,4,'y'],[3,4,5,'x'],[4,5,6,'z']]) == {'x':2,'y':1,'z':1}, \"test case failed: longer samples\"\nassert label_uniq_cnt([[True, False, True, 'yes'], [False, True, False, 'no'], [True, True, True, 'yes']]) == {'yes':2,'no':1}, \"test case failed: boolean features\"\nassert label_uniq_cnt([[('tuple',1), 'T'], [('tuple',2), 'T'], [('tuple',3), 'S']]) == {'T':2,'S':1}, \"test case failed: tuple feature\"\nassert label_uniq_cnt([[1,'A'],[2,'B'],[3,'C'],[4,'D']]) == {'A':1,'B':1,'C':1,'D':1}, \"test case failed: all unique labels\""}
{"task_id": 72, "completion_id": 0, "passed": false, "result": "failed: failed on simple 1-D split", "solution": "import numpy as np\nimport numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Compute the variance reduction for a regression tree split.\n    \n    Parameters:\n    - y: np.ndarray, shape (n_samples,)\n        Target vector for the parent node.\n    - y_left: np.ndarray, shape (n_left_samples,)\n        Target vector for the left child node.\n    - y_right: np.ndarray, shape (n_right_samples,)\n        Target vector for the right child node.\n    \n    Returns:\n    - float: Variance reduction rounded to the nearest 4th decimal.\n    \"\"\"\n    n = len(y)\n    n_left = len(y_left)\n    n_right = len(y_right)\n    var_y = np.var(y, ddof=1)\n    var_y_left = np.var(y_left, ddof=1)\n    var_y_right = np.var(y_right, ddof=1)\n    vr = var_y - n_left / n * var_y_left - n_right / n * var_y_right\n    return round(vr, 4)\nassert variance_reduction(np.array([3,7,4,6]), np.array([3,4]), np.array([7,6])) == 2.25, \"failed on simple 1-D split\"\nassert variance_reduction(np.array([1,1,1,1]), np.array([1,1]), np.array([1,1])) == 0.0, \"failed when all variances are zero\"\nassert variance_reduction(np.array([[1,2],[3,4],[5,6]]), np.array([[1,2]]), np.array([[3,4],[5,6]])) == 4.0, \"failed on 2-D target\"\nassert variance_reduction(np.array([-3,-1,-4,-2]), np.array([-3,-4]), np.array([-1,-2])) == 1.0, \"failed on negative values\"\nassert variance_reduction(np.column_stack((np.arange(5), np.arange(5,10))), np.column_stack((np.arange(3), np.arange(5,8))), np.column_stack((np.arange(3,5), np.arange(8,10)))) == 3.0, \"failed on larger 2-D input\"\nassert variance_reduction(np.array([[2,2],[2,2],[2,2]]), np.array([[2,2]]), np.array([[2,2],[2,2]])) == 0.0, \"failed on identical multi-output\"\nassert variance_reduction(np.array([0,1]), np.array([0]), np.array([1])) == 0.25, \"failed on minimal split\""}
{"task_id": 74, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    if frames.ndim == 1:\n        frames = frames.reshape(1, -1)\n    spectra = np.abs(np.fft.rfft(frames))\n    return spectra.round(4).tolist()\nassert magnitude_spectrum(np.array([[1.0, 0.0, -1.0, 0.0]])) == [[0.0, 2.0, 0.0]], \"test case failed: single frame [1,0,-1,0]\"\nassert magnitude_spectrum(np.array([[1,1,1,1]])) == [[4.0, 0.0, 0.0]], \"test case failed: constant frame ones length 4\"\nassert magnitude_spectrum(np.array([[1,0,0,0,0,0,0,0]])) == [[1.0,1.0,1.0,1.0,1.0]], \"test case failed: impulse length 8\"\nassert magnitude_spectrum(np.array([[0,0,0,0]])) == [[0.0,0.0,0.0]], \"test case failed: all zeros\"\nassert magnitude_spectrum(np.array([1.0, 0.0, -1.0, 0.0])) == [[0.0, 2.0, 0.0]], \"test case failed: 1-D input\"\nassert magnitude_spectrum(np.array([[1,1,1,1],[1,0,-1,0]])) == [[4.0,0.0,0.0],[0.0,2.0,0.0]], \"test case failed: two frames batch\"\nassert magnitude_spectrum(np.zeros((2,6))) == [[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]], \"test case failed: zeros batch 6 samples\"\nassert magnitude_spectrum(np.array([[1,2,3,4]])) == [[10.0,2.8284,2.0]], \"test case failed: frame [1,2,3,4]\"\nassert magnitude_spectrum(np.array([[2,2,2,2],[0,0,0,0]])) == [[8.0,0.0,0.0],[0.0,0.0,0.0]], \"test case failed: constant twos and zeros\""}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: failed on majority >1", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return [-1] * len(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = [np.linalg.norm(np.array(test_sample) - np.array(sample)) for sample in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        vote_counts = {}\n        for label in nearest_labels:\n            vote_counts[label] = vote_counts.get(label, 0) + 1\n        max_votes = -1\n        smallest_class = -1\n        for (label, count) in vote_counts.items():\n            if count > max_votes or (count == max_votes and label < smallest_class):\n                max_votes = count\n                smallest_class = label\n        predictions.append(smallest_class)\n    return predictions\nassert knn_predict([[1,2],[2,3],[3,4]],[0,1,1],[[2,2]],2)==[0],\"failed on single sample, tie case\"\nassert knn_predict([[0,0],[1,1],[2,2],[3,3]],[1,1,0,0],[[1.1,1.1],[2.9,3.1]],3)==[1,0],\"failed on multi predict\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],1)==[0],\"failed on k=1\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],3)==[0],\"failed on k==n_train\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,2,2],[[0.9,0.9]],2)==[2],\"failed on majority >1\"\nassert knn_predict([[1,1]], [3], [[2,2],[0,0]], 1)==[3,3],\"failed on single-point training set\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],2)==[0],\"failed on tie chooses smaller label\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],0)==-1,\"failed on invalid k=0\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],3)==-1,\"failed on k>n_train\"\nassert knn_predict([[1,2],[2,1],[0,0],[2,2]],[1,1,0,0],[[1,1]],2)==[1],\"failed on mixed labels\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    if y.shape != y_pred.shape:\n        raise ValueError('Shapes of y and y_pred must be the same.')\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    for l in range(1, len(parameters) // 2 + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        if l < len(parameters) // 2:\n            A = np.maximum(0, Z)\n        else:\n            A = 1 / (1 + np.exp(-Z))\n        caches.append((Z, A))\n    AL = A.round(4).tolist()\n    return [AL]\nassert L_model_forward(X1, params1) == [[0.5374, 0.5671]], \"test case failed: example input\"\nassert L_model_forward(X2, params2) == [[0.5]], \"test case failed: zero weights and bias\"\nassert L_model_forward(X2, params3) == [[0.7311]], \"test case failed: bias = 1\"\nassert L_model_forward(X4, params4) == [[0.5]], \"test case failed: two-layer, Z=0\"\nassert L_model_forward(X5, params5) == [[0.5]], \"test case failed: ReLU zeros\"\nassert L_model_forward(X6, params6) == [[0.8808, 0.5]], \"test case failed: batch of 2 examples\"\nassert L_model_forward(X7, params7) == [[0.3775]], \"test case failed: mixed weights\"\nassert L_model_forward(X8, params8) == [[0.2689]], \"test case failed: negative bias\"\nassert L_model_forward(X9, params9) == [[0.6457]], \"test case failed: realistic 2-layer\"\nassert L_model_forward(X10, params10) == [[0.4502]], \"test case failed: small negative Z\""}
{"task_id": 78, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    params_np = np.array(params, dtype=np.float64)\n    grads_np = np.array(grads, dtype=np.float64)\n    m_np = np.array(m, dtype=np.float64)\n    u_np = np.array(u, dtype=np.float64)\n    m_t = beta1 * m_np + (1 - beta1) * grads_np\n    u_t = np.maximum(beta2 * u_np, np.abs(grads_np))\n    beta1_t = beta1 ** t\n    scale = learning_rate / (1 - beta1_t)\n    step = scale * m_t / (u_t + epsilon)\n    new_params = params_np - step\n    new_m = m_t\n    new_u = u_t\n    new_params_rounded = np.round(new_params, 6).tolist()\n    new_m_rounded = np.round(new_m, 6).tolist()\n    new_u_rounded = np.round(new_u, 6).tolist()\n    return (new_params_rounded, new_m_rounded, new_u_rounded, t + 1)\nassert adamax_step([1.0, 2.0], [0.1, -0.2], [0.0, 0.0], [0.0, 0.0], 1) == ([0.998, 2.002], [0.01, -0.02], [0.1, 0.2], 2), \"test case failed: basic two-dim update\"\nassert adamax_step([1.5], [0.5], [0.0], [0.0], 1) == ([1.498], [0.05], [0.5], 2), \"test case failed: positive grad single dim\"\nassert adamax_step([-1.0], [-1.0], [0.0], [0.0], 1) == ([-0.998], [-0.1], [1.0], 2), \"test case failed: negative grad single dim\"\nassert adamax_step([0.0, 0.0, 0.0], [1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 1) == ([-0.002, -0.002, -0.002], [0.1, 0.2, 0.3], [1.0, 2.0, 3.0], 2), \"test case failed: three-dim positive grads\"\nassert adamax_step([5.0, -3.0], [-2.0, 4.0], [0.0, 0.0], [0.0, 0.0], 1) == ([5.002, -3.002], [-0.2, 0.4], [2.0, 4.0], 2), \"test case failed: mixed sign grads\"\nassert adamax_step([1.498], [0.5], [0.05], [0.5], 2) == ([1.496], [0.095], [0.5], 3), \"test case failed: consecutive update positive grad\"\nassert adamax_step([-0.998], [-1.0], [-0.1], [1.0], 2) == ([-0.996], [-0.19], [1.0], 3), \"test case failed: consecutive update negative grad\"\nassert adamax_step([-0.002, -0.002, -0.002], [1.0, 2.0, 3.0], [0.1, 0.2, 0.3], [1.0, 2.0, 3.0], 2) == ([-0.004, -0.004, -0.004], [0.19, 0.38, 0.57], [1.0, 2.0, 3.0], 3), \"test case failed: consecutive update three-dim\"\nassert adamax_step([0.0], [0.3], [0.0], [0.0], 1) == ([-0.002], [0.03], [0.3], 2), \"test case failed: small positive grad\"\nassert adamax_step([0.0], [-0.3], [0.0], [0.0], 1) == ([0.002], [-0.03], [0.3], 2), \"test case failed: small negative grad\""}
{"task_id": 80, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    w_np = np.array(w)\n    grad_w_np = np.array(grad_w)\n    e_grad = np.zeros_like(w_np)\n    e_delta = np.zeros_like(w_np)\n    e_grad = rho * e_grad + (1 - rho) * grad_w_np ** 2\n    rms_grad = np.sqrt(e_grad + eps)\n    e_delta = rho * e_delta + (1 - rho) * np.zeros_like(w_np) ** 2\n    rms_delta = np.sqrt(e_delta + eps)\n    adaptive_lr = rms_delta / rms_grad\n    delta_w = adaptive_lr * grad_w_np\n    w_new = w_np - delta_w\n    return np.round(w_new, 4).tolist()\nassert adadelta_update([1, 2], [0, 0]) == [1.0, 2.0], \"test failed: zero gradient\"\nassert adadelta_update([1, 2], [1, 1]) == [0.9955, 1.9955], \"test failed: grad=[1,1]\"\nassert adadelta_update([1, 2], [1, -1]) == [0.9955, 2.0045], \"test failed: grad=[1,-1]\"\nassert adadelta_update([1, 2], [10, -10]) == [0.9955, 2.0045], \"test failed: large gradients\"\nassert adadelta_update([0, 0, 0], [1, -2, 0.5]) == [-0.0045, 0.0045, -0.0045], \"test failed: mixed gradients\"\nassert adadelta_update([-1, -2], [5, -5]) == [-1.0045, -1.9955], \"test failed: negative weights\"\nassert adadelta_update([3.1415], [0]) == [3.1415], \"test failed: single weight zero grad\"\nassert adadelta_update([100, 200], [50, 50]) == [99.9955, 199.9955], \"test failed: large weights\"\nassert adadelta_update([0.5, -0.5], [-0.1, 0.1]) == [0.5045, -0.5045], \"test failed: sign check\"\nassert adadelta_update([1, 1, 1, 1], [0, 1, 2, 3]) == [1.0, 0.9955, 0.9955, 0.9955], \"test failed: partial zero grad\""}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -np.mean(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: Test-1 failed: tie situation with \u03b5 = 0.1", "solution": "import numpy as np\nimport numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    max_value = np.max(Q)\n    greedy_indices = np.where(Q == max_value)[0]\n    greedy_index = greedy_indices[0]\n    base_prob = epsilon / n\n    prob_greedy = 1 - epsilon + epsilon / n\n    prob_non_greedy = epsilon / n\n    probs = np.zeros(n)\n    probs[greedy_index] = prob_greedy\n    probs[probs != prob_non_greedy] = prob_non_greedy\n    probs_rounded = np.round(probs, 4)\n    probs_rounded[-1] = 1.0 - np.sum(probs_rounded[:-1])\n    return probs_rounded.tolist()\nassert epsilon_soft([1.2, 0.3, 1.2, -0.1], 0.1) == [0.925, 0.025, 0.025, 0.025], \"Test-1 failed: tie situation with \u03b5 = 0.1\"\nassert epsilon_soft([5, 6, 7], 0) == [0.0, 0.0, 1.0], \"Test-2 failed: \u03b5 = 0 (pure greedy)\"\nassert epsilon_soft([2, 2, 2], 0.3) == [0.8, 0.1, 0.1], \"Test-3 failed: all equal Q-values\"\nassert epsilon_soft([-1, -5], 1) == [0.5, 0.5], \"Test-4 failed: \u03b5 = 1 (fully uniform)\"\nassert epsilon_soft([0], 0.5) == [1.0], \"Test-5 failed: single action case\"\nassert epsilon_soft([10, 0, -1, 8], 0.2) == [0.85, 0.05, 0.05, 0.05], \"Test-6 failed: general case\"\nassert len(epsilon_soft([1, 2, 3, 4, 5], 0.4)) == 5, \"Test-10 failed: wrong output length\""}
{"task_id": 84, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    numerator = np.dot(residuals, h_pred)\n    denominator = np.dot(h_pred, h_pred)\n    if denominator == 0:\n        return 1.0\n    gamma = numerator / denominator\n    return round(gamma, 4)\nassert mse_line_search(np.array([1.0]), np.array([0.0]), np.array([1.0])) == 1.0, \"failed on single element perfect fit\"\nassert mse_line_search(np.array([3, -0.5, 2]), np.array([2.5, 0.0, 2]), np.array([-0.5, 0.5, 0])) == -1.0, \"failed on example with negative gamma\"\nassert mse_line_search(np.array([0, 0]), np.array([0, 0]), np.array([1, 1])) == 0.0, \"failed on zero numerator\"\nassert mse_line_search(np.array([1, 2, 3]), np.array([1, 2, 3]), np.array([1, 2, 3])) == 0.0, \"failed when residuals are zero\"\nassert mse_line_search(np.array([1, 2]), np.array([0, 0]), np.array([0, 0])) == 1.0, \"failed when h_pred is all zeros\"\nassert mse_line_search(np.array([2, 4, 6]), np.array([1, 3, 5]), np.array([1, 1, 1])) == 1.0, \"failed on uniform positive residuals\"\nassert mse_line_search(np.array([1, 2, 3, 4]), np.array([4, 3, 2, 1]), np.array([-3, -1, 1, 3])) == 1.0, \"failed on symmetric residuals\"\nassert mse_line_search(np.array([1, 3]), np.array([2, 2]), np.array([0.5, -0.5])) == -2.0, \"failed on fractional h_pred\"\nassert mse_line_search(np.array([1]), np.array([1]), np.array([0])) == 1.0, \"failed on single zero h_pred\"\nassert mse_line_search(np.array([10, 20, 30, 40, 50]), np.array([8, 18, 26, 39, 49]), np.array([2, 2, 4, 1, 1])) == 1.0, \"failed on larger array\""}
{"task_id": 85, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    if lr == 0 or np.all(X == 0):\n        return W.tolist()\n    Z = X @ W\n    epsilon = 1e-08\n    Z = Z - np.max(Z, axis=1, keepdims=True)\n    exp_Z = np.exp(Z + epsilon)\n    Y_hat = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n    grad = X.T @ (Y_hat - Y) / X.shape[0]\n    W = W - lr * grad\n    return W.round(4).tolist()\nassert softmax_regression_step(np.array([[1,2],[3,4]]), np.array([[1,0],[0,1]]), np.array([[0.1,0.2],[0.3,0.4]]), 0.1) == [[0.079, 0.221], [0.2911, 0.4089]], \"test case failed: basic 2\u00d72 example\"\nassert softmax_regression_step(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]]), np.zeros((2,2)), 0.1) == [[0.025, -0.025], [-0.025, 0.025]], \"test case failed: identity data\"\nassert softmax_regression_step(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.eye(3), np.zeros((3,3)), 0.1) == [[-0.1, 0.0, 0.1], [-0.1, 0.0, 0.1], [-0.1, 0.0, 0.1]], \"test case failed: 3-class symmetric\"\nassert softmax_regression_step(np.eye(3), np.eye(3), np.zeros((3,3)), 0.5) == [[0.1111, -0.0556, -0.0556], [-0.0556, 0.1111, -0.0556], [-0.0556, -0.0556, 0.1111]], \"test case failed: larger learning rate\"\nassert softmax_regression_step(np.array([[1,2],[3,4],[5,6]]), np.array([[1,0],[1,0],[1,0]]), np.zeros((2,2)), 0.1) == [[0.15, -0.15], [0.2, -0.2]], \"test case failed: all same class\"\nassert softmax_regression_step(np.array([[1,1]]), np.array([[0,1]]), np.zeros((2,2)), 1.0) == [[-0.5, 0.5], [-0.5, 0.5]], \"test case failed: single sample\"\nassert softmax_regression_step(np.array([[1,0],[0,1]]), np.array([[1,0,0],[0,0,1]]), np.zeros((2,3)), 0.3) == [[0.1, -0.05, -0.05], [-0.05, -0.05, 0.1]], \"test case failed: 3-class diagonal\"\nassert softmax_regression_step(np.array([[1,2],[3,4]]), np.array([[1,0],[0,1]]), np.array([[0.1,0.2],[0.3,0.4]]), 0.0) == [[0.1, 0.2], [0.3, 0.4]], \"test case failed: zero learning rate\"\nassert softmax_regression_step(np.array([[1,2,3,4]]), np.array([[0,0,1]]), np.zeros((4,3)), 0.2) == [[-0.0667, -0.0667, 0.1333], [-0.1333, -0.1333, 0.2667], [-0.2, -0.2, 0.4], [-0.2667, -0.2667, 0.5333]], \"test case failed: 1\u00d74 sample 3-class\"\nassert softmax_regression_step(np.zeros((2,2)), np.array([[1,0],[0,1]]), np.zeros((2,2)), 1.0) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zero data matrix\""}
{"task_id": 86, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "from collections import Counter\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    result = []\n    for col in range(num_samples):\n        votes = [predictions[row][col] for row in range(len(predictions))]\n        vote_counts = Counter(votes)\n        max_count = -1\n        best_label = None\n        for (label, count) in vote_counts.items():\n            if count > max_count:\n                max_count = count\n                best_label = label\n            elif count == max_count:\n                if best_label is None:\n                    best_label = label\n                elif isinstance(best_label, (int, float)):\n                    if label < best_label:\n                        best_label = label\n                elif label < best_label:\n                    best_label = label\n        result.append(best_label)\n    return result\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 87, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_y = Y.shape[0]\n    n_h = 10\n    return (n_x, n_h, n_y)\nassert layer_sizes(np.zeros((3, 5)), np.zeros((1, 5))) == (3, 10, 1), \"failed on (3x5,1x5)\"\nassert layer_sizes(np.zeros((1, 10)), np.zeros((1, 10))) == (1, 10, 1), \"failed on (1x10,1x10)\"\nassert layer_sizes(np.zeros((8, 2)), np.zeros((4, 2))) == (8, 10, 4), \"failed on (8x2,4x2)\"\nassert layer_sizes(np.zeros((6, 9)), np.zeros((3, 9))) == (6, 10, 3), \"failed on (6x9,3x9)\"\nassert layer_sizes(np.zeros((10, 1)), np.zeros((5, 1))) == (10, 10, 5), \"failed on (10x1,5x1)\"\nassert layer_sizes(np.zeros((2, 7)), np.zeros((2, 7))) == (2, 10, 2), \"failed on (2x7,2x7)\"\nassert layer_sizes(np.zeros((4, 4)), np.zeros((6, 4))) == (4, 10, 6), \"failed on (4x4,6x4)\"\nassert layer_sizes(np.zeros((9, 3)), np.zeros((3, 3))) == (9, 10, 3), \"failed on (9x3,3x3)\"\nassert layer_sizes(np.zeros((12, 6)), np.zeros((2, 6))) == (12, 10, 2), \"failed on (12x6,2x6)\"\nassert layer_sizes(np.zeros((5, 20)), np.zeros((8, 20))) == (5, 10, 8), \"failed on (5x20,8x20)\""}
{"task_id": 88, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not subscriptable", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.asarray(z)\n    softplus_values = np.logaddexp(0.0, z_array)\n    softplus_values_rounded = np.round(softplus_values, 4)\n    result = softplus_values_rounded.tolist()\n    if isinstance(z, (int, float)):\n        return float(result[0])\n    else:\n        return result\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 89, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == 'relu':\n        A = np.maximum(Z, 0)\n    elif activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        raise ValueError(\"Activation must be 'relu' or 'sigmoid'\")\n    assert A.shape == (W.shape[0], A_prev.shape[1]), 'Output activation shape must be (n_l, m)'\n    A_rounded = np.round(A, 4).tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    return (A_rounded, (linear_cache, activation_cache))\nassert linear_activation_forward(np.array([[1, 2], [3, 4]]), np.array([[0.2, 0.8]]), np.array([[0.1]]), \"sigmoid\")[0] == [[0.937, 0.9759]], \"test case 1 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4]]), np.array([[0.2, 0.8]]), np.array([[0.1]]), \"relu\")[0] == [[2.7, 3.7]], \"test case 2 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, -1, 0.5], [0.5, 0.5, 0.5]]), np.array([[0.0], [1.0]]), \"relu\")[0] == [[0.5, 1.0], [5.5, 7.0]], \"test case 3 failed\"\nassert linear_activation_forward(np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, -1, 0.5], [0.5, 0.5, 0.5]]), np.array([[0.0], [1.0]]), \"sigmoid\")[0] == [[0.6225, 0.7311], [0.9959, 0.9991]], \"test case 4 failed\"\nassert linear_activation_forward(np.array([[0, -1, 2]]), np.array([[-3]]), np.array([[0]]), \"relu\")[0] == [[0.0, 3.0, 0.0]], \"test case 5 failed\"\nassert linear_activation_forward(np.array([[0, -1, 2]]), np.array([[-3]]), np.array([[0]]), \"sigmoid\")[0] == [[0.5, 0.9526, 0.0025]], \"test case 6 failed\"\nassert linear_activation_forward(np.array([[1], [2]]), np.array([[1, 1], [-1, 2]]), np.array([[0.5], [-0.5]]), \"sigmoid\")[0] == [[0.9707], [0.9241]], \"test case 7 failed\"\nassert linear_activation_forward(np.array([[1], [2]]), np.array([[1, 1], [-1, 2]]), np.array([[0.5], [-0.5]]), \"relu\")[0] == [[3.5], [2.5]], \"test case 8 failed\"\nassert linear_activation_forward(np.array([[1], [-1]]), np.array([[2, 3]]), np.array([[-0.5]]), \"relu\")[0] == [[0.0]], \"test case 9 failed\"\nassert linear_activation_forward(np.array([[0], [0]]), np.array([[2, 3]]), np.array([[-0.5]]), \"sigmoid\")[0] == [[0.3775]], \"test case 10 failed\""}
{"task_id": 90, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    arm_evs = bandit.get('arm_evs', [])\n    ev_estimates = policy.get('ev_estimates', {})\n    if not ev_estimates:\n        return np.nan\n    arm_indices = sorted(ev_estimates.keys())\n    if len(arm_indices) != len(arm_evs):\n        return np.nan\n    squared_errors = [(ev_estimates[i] - arm_evs[i]) ** 2 for i in arm_indices]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nassert mse({\"arm_evs\": [0.5, 0.2, 0.9]}, {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}) == 0.0075, \"test 1 failed\"\nassert mse({\"arm_evs\": [1.0, 0.0]}, {\"ev_estimates\": {1: 0.2, 0: 0.8}}) == 0.04, \"test 2 failed\"\nassert mse({\"arm_evs\": [0.3, 0.6, 0.9, 0.1]}, {\"ev_estimates\": {0: 0.3, 1: 0.6, 2: 0.9, 3: 0.1}}) == 0.0, \"test 3 failed\"\nassert mse({\"arm_evs\": [0.0, -1.0, 1.0]}, {\"ev_estimates\": {0: 0.5, 1: 0.0, 2: 1.5}}) == 0.5, \"test 4 failed\"\nassert np.isnan(mse({\"arm_evs\": [0.1, 0.2]}, {\"ev_estimates\": {}})), \"test 5 failed\"\nassert mse({\"arm_evs\": [2.0]}, {\"ev_estimates\": {0: 3.5}}) == 2.25, \"test 6 failed\"\nassert mse({\"arm_evs\": [0.0, 1.0]}, {\"ev_estimates\": {0: 0.35, 1: 0.35}}) == 0.2725, \"test 9 failed\"\nassert mse({\"arm_evs\": [5.0, 5.0, 5.0]}, {\"ev_estimates\": {0: 4.0, 1: 6.0, 2: 5.0}}) == 0.6667, \"test 10 failed\""}
{"task_id": 91, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    if len(dA) != len(activation_cache) or len(dA[0]) != len(activation_cache[0]):\n        return -1\n    dA_np = np.array(dA, dtype=np.float64)\n    Z_np = np.array(activation_cache, dtype=np.float64)\n    mask = (Z_np > 0).astype(float)\n    dZ_np = dA_np * mask\n    dZ = dZ_np.tolist()\n    return dZ\nassert relu_backward([[-1, 2], [3, -4]], [[1, -2], [0, 5]]) == [[-1, 0], [0, -4]], \"failed on mixed signs\"\nassert relu_backward([[1, 2], [3, 4]], [[5, 6], [7, 8]]) == [[1, 2], [3, 4]], \"failed on all positive Z\"\nassert relu_backward([[1, 2], [3, 4]], [[-5, -6], [-7, -8]]) == [[0, 0], [0, 0]], \"failed on all negative Z\"\nassert relu_backward([[0.5, -1.2, 3.0], [4.1, -2.2, 0.0], [7.7, 8.8, -9.9]], [[1, -1, 0], [2, 0, -2], [-3, 3, 4]]) == [[0.5, 0.0, 0.0], [4.1, 0.0, 0.0], [0.0, 8.8, -9.9]], \"failed on 3x3 mixed\"\nassert relu_backward([[1, 2, 3, 4]], [[-1, 0, 2, -3]]) == [[0, 0, 3, 0]], \"failed on 1x4 vector\"\nassert relu_backward([[1.5, -2.5], [3.5, -4.5]], [[0.0, 2.0], [0.0, -2.0]]) == [[0.0, -2.5], [0.0, 0.0]], \"failed on zeros in Z\"\nassert relu_backward([[1, 2], [3, 4]], [[1, 2], [3, 4]]) == [[1, 2], [3, 4]], \"failed when gradients passthrough\"\nassert relu_backward([[10, -10], [5, -5]], [[-1, 1], [-1, 1]]) == [[0, -10], [0, -5]], \"failed on alternating Z\"\nassert relu_backward([[3]], [[-7]]) == [[0]], \"failed on single negative element\"\nassert relu_backward([[3]], [[7]]) == [[3]], \"failed on single positive element\""}
{"task_id": 92, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numbers\nimport numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))\nassert is_number(10) is True, \"test case failed: is_number(10)\"\nassert is_number(3.14) is True, \"test case failed: is_number(3.14)\"\nassert is_number(1+2j) is True, \"test case failed: is_number(1+2j)\"\nassert is_number(\"5\") is False, \"test case failed: is_number('5')\"\nassert is_number([1,2]) is False, \"test case failed: is_number([1,2])\"\nassert is_number(True) is False, \"test case failed: is_number(True)\"\nassert is_number(None) is False, \"test case failed: is_number(None)\"\nassert is_number(-7) is True, \"test case failed: is_number(-7)\"\nassert is_number(float('nan')) is True, \"test case failed: is_number(float('nan'))\"\nassert is_number({'num': 5}) is False, \"test case failed: is_number({'num': 5})\""}
{"task_id": 93, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_array = np.array(Z)\n    A_array = np.maximum(0, Z_array)\n    A = A_array.tolist()\n    cache = Z_array.tolist()\n    return (A, cache)\nassert relu(np.array([[-1, 2], [3, -4]])) == ([[0, 2], [3, 0]], [[-1.0, 2.0], [3.0, -4.0]]), \"test case failed: relu([[-1,2],[3,-4]])\"\nassert relu(np.array([[0, 0], [0, 0]])) == ([[0, 0], [0, 0]], [[0.0, 0.0], [0.0, 0.0]]), \"test case failed: relu([[0,0],[0,0]])\"\nassert relu(np.array([[1, -1, 0]])) == ([[1, 0, 0]], [[1.0, -1.0, 0.0]]), \"test case failed: relu([[1,-1,0]])\"\nassert relu(np.array([-5, 4, -3, 2, 0])) == ([0, 4, 0, 2, 0], [-5.0, 4.0, -3.0, 2.0, 0.0]), \"test case failed: relu([-5,4,-3,2,0])\"\nassert relu(np.array(5)) == (5.0, 5.0), \"test case failed: relu(5)\"\nassert relu(np.array(-7)) == (0.0, -7.0), \"test case failed: relu(-7)\"\nassert relu(np.zeros((3, 3))) == ([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]), \"test case failed: relu(zeros)\"\nassert relu([[1, 2], [3, 4]]) == ([[1, 2], [3, 4]], [[1.0, 2.0], [3.0, 4.0]]), \"test case failed: relu([[1,2],[3,4]])\"\nassert relu([[-0.1, -0.2, -0.3]]) == ([[0, 0, 0]], [[-0.1, -0.2, -0.3]]), \"test case failed: relu([[-0.1,-0.2,-0.3]])\"\nassert relu(np.arange(-4, 5)) == ([0, 0, 0, 0, 0, 1, 2, 3, 4], [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0]), \"test case failed: relu(arange(-4,5))\""}
{"task_id": 94, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    label_counts = Counter(neighbors_targets)\n    max_frequency = max(label_counts.values())\n    candidates = [label for (label, count) in label_counts.items() if count == max_frequency]\n    return min(candidates)\nassert knn_majority_vote(['cat', 'dog', 'cat', 'bird']) == 'cat', \"failed on ['cat', 'dog', 'cat', 'bird']\"\nassert knn_majority_vote([1, 2, 2, 3, 1, 2]) == 2, \"failed on [1, 2, 2, 3, 1, 2]\"\nassert knn_majority_vote(['apple', 'banana', 'apple', 'banana']) == 'apple', \"failed on ['apple', 'banana', 'apple', 'banana']\"\nassert knn_majority_vote([42]) == 42, \"failed on [42]\"\nassert knn_majority_vote(['a', 'b', 'c']) == 'a', \"failed on ['a', 'b', 'c']\"\nassert knn_majority_vote([3, 3, 2, 2]) == 2, \"failed on [3, 3, 2, 2]\"\nassert knn_majority_vote([5, 4, 5, 4, 4, 5]) == 4, \"failed on [5, 4, 5, 4, 4, 5]\"\nassert knn_majority_vote(['x', 'y', 'y', 'x', 'z', 'z']) == 'x', \"failed on ['x', 'y', 'y', 'x', 'z', 'z']\"\nassert knn_majority_vote(list('aabbccd')) == 'a', \"failed on list('aabbccd')\"\nassert knn_majority_vote([0, 0, 1]) == 0, \"failed on [0, 0, 1]\""}
{"task_id": 96, "completion_id": 0, "passed": false, "result": "failed: failed on unigram repetition", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    words = []\n    for sentence in corpus:\n        words.extend(sentence.split())\n    vocab = set(words)\n    vocab.add('<UNK>')\n    V = len(vocab)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[N].update([ngram])\n    tokens = sequence.split()\n    if len(tokens) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(tokens) - N + 1):\n        context = tuple(tokens[i:i + N - 1])\n        word = tokens[i + N - 1]\n        if word in vocab:\n            count_context_word = ngram_counts[N][context + (word,)]\n        else:\n            count_context_word = 0\n        count_context = ngram_counts[N - 1][context] if N - 1 >= 1 else 1\n        numerator = count_context_word + K\n        denominator = count_context + K * V\n        log_prob += math.log(numerator / denominator)\n    return round(log_prob, 4)\nassert additive_ngram_log_prob([\"hello world\"], \"hello world hello\", 1, 1) == -2.7489, \"failed on unigram repetition\"\nassert additive_ngram_log_prob([\"a b c d\"], \"a b c d\", 3, 1) == -2.1972, \"failed on exact trigram\"\nassert additive_ngram_log_prob([\"the cat\"], \"the mouse\", 2, 1) == -1.3863, \"failed on unseen word in bigram\"\nassert additive_ngram_log_prob([\"cat sat\"], \"mouse cat\", 2, 1) == -1.0986, \"failed on unseen context\"\nassert additive_ngram_log_prob([\"a a b b\"], \"a b\", 1, 0.5) == -1.5769, \"failed on K=0.5 smoothing\"\nassert additive_ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 3, 1) == -1.9459, \"failed on trigram with unknown\"\nassert additive_ngram_log_prob([\"a b c\", \"a b d\"], \"a b d\", 2, 2) == -2.4849, \"failed on K=2 bigram\"\nassert additive_ngram_log_prob([\"hello world\"], \"foo\", 1, 1) == -1.6094, \"failed on completely unknown word\""}
{"task_id": 97, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    Z_array = np.array(Z)\n    drelu_array = np.where(Z_array > 0, 1.0, 0.0)\n    if isinstance(Z, (int, float)):\n        return float(drelu_array.item())\n    else:\n        return drelu_array.tolist()\nassert drelu([-2, -1, 0, 1, 5]) == [0.0, 0.0, 0.0, 1.0, 1.0], \"failed: drelu([-2, -1, 0, 1, 5])\"\nassert drelu([[1, -1], [-0.5, 2]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: drelu([[1, -1], [-0.5, 2]])\"\nassert drelu(3) == 1.0, \"failed: drelu(3)\"\nassert drelu(0) == 0.0, \"failed: drelu(0)\"\nassert drelu([[[-1, 2], [3, 0]], [[0, -2], [4, 5]]]) == [[[0.0, 1.0], [1.0, 0.0]], [[0.0, 0.0], [1.0, 1.0]]], \"failed: multi-dimensional input\"\nassert drelu(np.array([-3, -0.1, 0, 0.1, 5])) == [0.0, 0.0, 0.0, 1.0, 1.0], \"failed: ndarray input\"\nassert drelu(np.zeros((2, 3))) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed: zeros array\"\nassert drelu([-9999, 0.0001]) == [0.0, 1.0], \"failed: extreme values\"\nassert drelu([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed: list of zeros\"\nassert drelu([[5]]) == [[1.0]], \"failed: single element 2-D list\""}
{"task_id": 99, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    elif isinstance(Z, list):\n        if all((isinstance(row, list) for row in Z)):\n            return [[max(0, x) for x in row] for row in Z]\n        else:\n            return [max(0, x) for x in Z]\n    elif isinstance(Z, np.ndarray):\n        return np.maximum(0, Z)\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy.ndarray.')\nassert relu_(np.array([-1, 2, -3, 4])) .tolist() == [0, 2, 0, 4], \"failed: relu_(np.array([-1, 2, -3, 4]))\"\nassert relu_([-5, -4, -3]) == [0, 0, 0], \"failed: relu_([-5, -4, -3])\"\nassert relu_(np.array([[1, -1], [0, 3]])).tolist() == [[1, 0], [0, 3]], \"failed: relu_(np.array([[1, -1], [0, 3]]))\"\nassert relu_([[1, -2, 3], [-4, 5, -6]]) == [[1, 0, 3], [0, 5, 0]], \"failed: relu_([[1, -2, 3], [-4, 5, -6]])\"\nassert relu_(5) == 5, \"failed: relu_(5)\"\nassert relu_(-7) == 0, \"failed: relu_(-7)\"\nassert relu_([0.5, -0.2, 3.3]) == [0.5, 0, 3.3], \"failed: relu_([0.5, -0.2, 3.3])\"\nassert relu_(np.array([[0, -0.1], [-2.5, 4.4]])).tolist() == [[0, 0], [0, 4.4]], \"failed: relu_(np.array([[0, -0.1], [-2.5, 4.4]]))\"\nassert relu_(0) == 0, \"failed: relu_(0)\"\nassert relu_(np.array([-0.0001]))[0] == 0, \"failed: relu_(np.array([-0.0001]))\""}
{"task_id": 100, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        return -1\n    mismatches = np.sum(actual != predicted)\n    error_rate = round(mismatches / len(actual), 4)\n    return error_rate\nassert classification_error([1, 0, 1, 1], [1, 0, 1, 1]) == 0.0, \"Failed: identical arrays\"\nassert classification_error([0, 1, 2, 2, 1], [0, 0, 2, 1, 1]) == 0.4, \"Failed: basic example\"\nassert classification_error([0, 0, 0], [1, 1, 1]) == 1.0, \"Failed: all mismatched\"\nassert classification_error([1, 2, 3], [1, 2]) == -1, \"Failed: length mismatch\"\nassert classification_error(np.array([3, 3, 2, 1]), np.array([3, 2, 2, 1])) == 0.25, \"Failed: numpy arrays\"\nassert classification_error((5, 6, 7, 8), (5, 6, 0, 0)) == 0.5, \"Failed: tuples\"\nassert classification_error([\"cat\", \"dog\"], [\"dog\", \"dog\"]) == 0.5, \"Failed: string labels\"\nassert classification_error([True, False, True], [True, True, False]) == 0.6667, \"Failed: boolean labels\"\nassert classification_error(range(8), [0,1,2,3,4,5,6,7]) == 0.0, \"Failed: range vs list\"\nassert classification_error(np.array([1]), np.array([2])) == 1.0, \"Failed: single element mismatch\""}
{"task_id": 101, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    if axis < 0:\n        axis += x.ndim\n    max_vals = np.max(x, axis=axis, keepdims=True)\n    x_stable = x - max_vals\n    exp_x = np.exp(x_stable)\n    sum_exp = np.sum(exp_x, axis=axis, keepdims=True)\n    softmax_output = exp_x / sum_exp\n    softmax_rounded = np.round(softmax_output, 4)\n    return softmax_rounded.tolist()\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]]), 1) == [[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]], \"test case failed: softmax([[1,2,3],[4,5,6]], axis=1)\"\nassert softmax(np.array([[1, 1], [2, 2]]), 0) == [[0.2689, 0.2689], [0.7311, 0.7311]], \"test case failed: softmax([[1,1],[2,2]], axis=0)\"\nassert softmax(np.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]]), 2) == [[[0.2689, 0.7311], [0.2689, 0.7311]], [[0.2689, 0.7311], [0.2689, 0.7311]]], \"test case failed: softmax(3-D array, axis=2)\"\nassert softmax(np.array([[[1, 2]], [[3, 4]]]), 1) == [[[1.0, 1.0]], [[1.0, 1.0]]], \"test case failed: softmax(shape=(2,1,2), axis=1)\"\nassert softmax(np.array([[1000, 1000], [1000, 1000]]), 1) == [[0.5, 0.5], [0.5, 0.5]], \"test case failed: softmax(large values)\"\nassert softmax(np.array([[0, 1, 2], [2, 3, 4]]), 0) == [[0.1192, 0.1192, 0.1192], [0.8808, 0.8808, 0.8808]], \"test case failed: softmax([[0,1,2],[2,3,4]], axis=0)\"\nassert softmax(np.zeros((2, 2, 3)), -1) == [[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], [[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]], \"test case failed: softmax(zeros 3-D, axis=-1)\"\nassert softmax(np.array([[[1, 2, 3], [4, 5, 6]]]), 2) == [[[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]]], \"test case failed: softmax(shape=(1,2,3), axis=2)\"\nassert softmax(np.array([[-1, -1, -1], [0, 0, 0]]), 1) == [[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], \"test case failed: softmax(equal values)\""}
{"task_id": 102, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    if not x or not y or len(x) != len(y):\n        return -1\n    if degree < 0:\n        return -1\n    n = len(x)\n    if n < degree + 1:\n        return -1\n    X = np.zeros((n, degree + 1))\n    for i in range(n):\n        for j in range(degree + 1):\n            X[i, j] = x[i] ** j\n    try:\n        w = np.linalg.lstsq(X, y, rcond=None)[0]\n    except:\n        return -1\n    X_pred = np.zeros((len(x_pred), degree + 1))\n    for i in range(len(x_pred)):\n        for j in range(degree + 1):\n            X_pred[i, j] = x_pred[i] ** j\n    predictions = np.dot(X_pred, w)\n    return [round(pred, 4) for pred in predictions]\nassert polynomial_regression_predict([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], 2, [6, 7]) == [36.0, 49.0], \"Failed on perfect quadratic.\"\nassert polynomial_regression_predict([0, 1], [1, 3], 1, [2]) == [5.0], \"Failed on simple line y=2x+1.\"\nassert polynomial_regression_predict([1, 2, 3, 4], [1, 8, 27, 64], 3, [5]) == [125.0], \"Failed on cubic y=x^3.\"\nassert polynomial_regression_predict([0, 1, 2], [3, 3, 3], 0, [10]) == [3.0], \"Failed on constant model.\"\nassert polynomial_regression_predict([1, 2], [1, 4], 2, [3]) == -1, \"Did not catch insufficient data.\"\nassert polynomial_regression_predict([1, 2, 3, 4], [2, 3, 5, 4], 1, [5]) == [5.5], \"Failed on general linear data.\"\nassert polynomial_regression_predict([], [], 1, [1]) == -1, \"Did not handle empty input.\"\nassert polynomial_regression_predict([1, 2, 3], [2, 4, 6], 1, [4, 5, 6]) == [8.0, 10.0, 12.0], \"Failed on y=2x.\"\nassert polynomial_regression_predict([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], 2, [2.5]) == [6.25], \"Failed on fractional prediction.\"\nassert polynomial_regression_predict([0, 1, 2], [1, 2, 3], 0, [5]) == [2.0], \"Failed on degree-0 averaging.\""}
{"task_id": 104, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities))\n    child_entropies = [entropy(split) for split in splits]\n    total_samples = len(y)\n    weighted_child_entropies = [ent * (len(split) / total_samples) for (ent, split) in zip(child_entropies, splits)]\n    h_y = entropy(y)\n    ig = h_y - sum(weighted_child_entropies)\n    return round(ig, 4)\nassert information_gain(np.array([1,1,0,0]), [np.array([1,1]), np.array([0,0])]) == 1.0, \"test case failed: pure binary split\"\nassert information_gain(np.array([0,0,0,1,1,1]), [np.array([0,0,0]), np.array([1,1,1])]) == 1.0, \"test case failed: another pure binary split\"\nassert information_gain(np.array([0,0,1,1,0,1]), [np.array([0,1,1]), np.array([0,0,1])]) == 0.0817, \"test case failed: mixed binary split\"\nassert information_gain(np.array([0,0,1,1,2,2]), [np.array([0,0]), np.array([1,1,2]), np.array([2])]) == 1.1258, \"test case failed: ternary parent-node\"\nassert information_gain(np.array([1,1,1,1]), [np.array([1,1]), np.array([1,1])]) == 0.0, \"test case failed: zero entropy parent\"\nassert information_gain(np.array([1,0,1,0,1]), [np.array([1,0,1,0,1])]) == 0.0, \"test case failed: single child identical to parent\"\nassert information_gain(np.array([0,0,1,1,2,2,3,3]), [np.array([0,0]), np.array([1,1]), np.array([2,2]), np.array([3,3])]) == 2.0, \"test case failed: perfectly pure four-way split\"\nassert information_gain(np.array([0,0,0,0,1,1]), [np.array([0,0]), np.array([0,0]), np.array([1,1])]) == 0.9183, \"test case failed: unbalanced split with pure children\"\nassert information_gain(np.array([0,1,2,2,2,2]), [np.array([0,2,2]), np.array([1,2,2])]) == 0.3333, \"test case failed: two children, three classes\"\nassert information_gain(np.array([0,0,1,1,1,1,1,0,0,0]), [np.array([0,0,0]), np.array([0,0,1,1]), np.array([1,1])]) == 0.6, \"test case failed: three-way split, binary classes\""}
{"task_id": 105, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    if isinstance(x, (list, tuple)):\n        x_array = np.array(x)\n    elif isinstance(x, np.ndarray):\n        x_array = x\n    else:\n        x_array = np.array([x])\n    coefficient = 1.0 / (np.sqrt(2 * np.pi) * sigma)\n    exponent = -(x_array - mean) ** 2 / (2 * sigma ** 2)\n    pdf_values = coefficient * np.exp(exponent)\n    return [round(val, 5) for val in pdf_values.tolist()]\nassert gaussian_pdf([1, 2, 3], 2, 1) == [0.24197, 0.39894, 0.24197], \"test case failed: gaussian_pdf([1, 2, 3], 2, 1)\"\nassert gaussian_pdf([0], 0, 1) == [0.39894], \"test case failed: gaussian_pdf([0], 0, 1)\"\nassert gaussian_pdf([0], 0, 0.5) == [0.79788], \"test case failed: gaussian_pdf([0], 0, 0.5)\"\nassert gaussian_pdf([-1, 0, 1], 0, 1) == [0.24197, 0.39894, 0.24197], \"test case failed: gaussian_pdf([-1, 0, 1], 0, 1)\"\nassert gaussian_pdf([2], 1, 1) == [0.24197], \"test case failed: gaussian_pdf([2], 1, 1)\"\nassert gaussian_pdf([1], 0, -1) == -1, \"test case failed: gaussian_pdf([1], 0, -1)\"\nassert gaussian_pdf([1], 0, 0) == -1, \"test case failed: gaussian_pdf([1], 0, 0)\"\nassert gaussian_pdf([5], 2, 3) == [0.08066], \"test case failed: gaussian_pdf([5], 2, 3)\"\nassert gaussian_pdf([2.5, 3.5], 3, 0.5) == [0.48394, 0.48394], \"test case failed: gaussian_pdf([2.5, 3.5], 3, 0.5)\"\nassert gaussian_pdf([], 0, 1) == [], \"test case failed: gaussian_pdf([], 0, 1)\""}
{"task_id": 107, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    theta_new = theta - alpha * m_hat_t / (np.sqrt(v_hat_t) + epsilon)\n    theta_rounded = [float(x) for x in np.round(theta_new, 6)]\n    m_t_rounded = [float(x) for x in np.round(m_t, 6)]\n    v_t_rounded = [float(x) for x in np.round(v_t, 6)]\n    return (theta_rounded, m_t_rounded, v_t_rounded, t + 1)\nassert adam_step(np.array([1.0, 2.0]), np.array([0.1, -0.2]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([0.99, 2.01], [0.01, -0.02], [0.0001, 0.0004], 2), \"test case failed: adam_step([1,2],[0.1,-0.2])\"\nassert adam_step(np.array([1.0]), np.array([0.0]), np.array([0.0]), np.array([0.0]), 1) == ([1.0], [0.0], [0.0], 2), \"test case failed: zero gradient\"\nassert adam_step(np.array([-1.0, 2.0, -3.0]), np.array([-0.3, -0.5, 0.7]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), 1) == ([-0.99, 2.01, -3.01], [-0.03, -0.05, 0.07], [0.0009, 0.0025, 0.0049], 2), \"test case failed: mixed signs\"\nassert adam_step(np.array([0.0]), np.array([1.0]), np.array([0.0]), np.array([0.0]), 1) == ([-0.01], [0.1], [0.01], 2), \"test case failed: positive gradient scalar\"\nassert adam_step(np.array([0.0, 0.0]), np.array([1.0, 1.0]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([-0.01, -0.01], [0.1, 0.1], [0.01, 0.01], 2), \"test case failed: identical gradients\"\nassert adam_step(np.array([2.0]), np.array([-2.0]), np.array([0.0]), np.array([0.0]), 1) == ([2.01], [-0.2], [0.04], 2), \"test case failed: large negative gradient\"\nassert adam_step(np.array([1.0]), np.array([0.3]), np.array([0.0]), np.array([0.0]), 2) == ([0.992575], [0.03], [0.0009], 3), \"test case failed: second step\"\nassert adam_step(np.array([1.0]), np.array([-1.0]), np.array([0.0]), np.array([0.0]), 1) == ([1.01], [-0.1], [0.01], 2), \"test case failed: negative gradient scalar\"\nassert adam_step(np.array([1.0, 2.0, 3.0]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0]), 1) == ([1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 2), \"test case failed: all zero gradients\"\nassert adam_step(np.array([1.2, 3.4]), np.array([0.2, 0.2]), np.array([0.0, 0.0]), np.array([0.0, 0.0]), 1) == ([1.19, 3.39], [0.02, 0.02], [0.0004, 0.0004], 2), \"test case failed: small identical gradients\""}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: Singular matrix", "solution": "import numpy as np\nimport numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for iteration in range(max_iter):\n        for i in range(N):\n            x_i = X[i, :]\n            H_i = H[:, :]\n            A = H_i.T @ H_i + alpha * np.eye(K)\n            b = H_i.T @ x_i\n            W[i, :] = np.linalg.solve(A, b)\n        for j in range(M):\n            x_j = X[:, j]\n            W_j = W[:, j]\n            A = W @ W.T + alpha * np.eye(K)\n            b = W @ x_j\n            H[:, j] = np.linalg.solve(A, b)\n        reconstruction_error = np.sum((X - W @ H) ** 2)\n        regularization_error = alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n        current_loss = reconstruction_error + regularization_error\n        if iteration > 0 and abs(current_loss - previous_loss) < tol:\n            break\n        previous_loss = current_loss\n    X_hat = W @ H\n    X_hat_rounded = X_hat.round(4).tolist()\n    return X_hat_rounded\nassert np.allclose(als_factorization(np.array([[1.,2.],[3.,4.]]),2,alpha=0.0,max_iter=1000,tol=1e-8),[[1.0,2.0],[3.0,4.0]],atol=1e-3),\"failed on 2\u00d72 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.,3.],[4.,5.,6.]]),2,alpha=0.0),[[1.0,2.0,3.0],[4.0,5.0,6.0]],atol=1e-3),\"failed on 2\u00d73 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[7.,8.],[2.,1.],[3.,4.]]),2,alpha=0.0),[[7.0,8.0],[2.0,1.0],[3.0,4.0]],atol=1e-3),\"failed on 3\u00d72 matrix\"\nassert np.allclose(als_factorization(np.array([[1.5,2.5],[3.5,4.5]]),2,alpha=0.0),[[1.5,2.5],[3.5,4.5]],atol=1e-3),\"failed on decimal matrix\"\nassert np.allclose(als_factorization(np.array([[10.]]),1,alpha=0.0),[[10.0]],atol=1e-3),\"failed on 1\u00d71 matrix\"\nassert np.allclose(als_factorization(np.array([[2.,2.],[2.,2.]]),1,alpha=0.0),[[2.0,2.0],[2.0,2.0]],atol=1e-3),\"failed on constant matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.],[2.,4.]]),1,alpha=0.0),[[1.0,2.0],[2.0,4.0]],atol=1e-3),\"failed on rank-1 2\u00d72 matrix\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for /: 'generator' and 'float'", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is\n        the number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = []\n    centroids.append(X[np.random.randint(X.shape[0])].tolist())\n    for _ in range(K - 1):\n        distances = np.min((np.linalg.norm(X - c, axis=1) for c in centroids))\n        probabilities = distances / np.sum(distances)\n        next_centroid = X[np.random.choice(range(X.shape[0]), p=probabilities)].tolist()\n        centroids.append(next_centroid)\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = []\n        for i in range(K):\n            cluster_points = X[labels == i]\n            if len(cluster_points) == 0:\n                new_centroids.append(centroids[i])\n            else:\n                new_centroid = np.mean(cluster_points, axis=0).tolist()\n                new_centroids.append(new_centroid)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(map(round, centroid)) for centroid in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids\nassert kmeans(np.array([[1,2],[1,4],[1,0],[10,2],[10,4],[10,0]]),2,random_state=42)==[[1.0,2.0],[10.0,2.0]],\"failed: basic 2-cluster example\"\nassert kmeans(np.array([[-5,0],[-6,-1],[-4,1],[0,5],[1,6],[-1,4],[5,0],[6,1],[4,-1]]),3,random_state=0)==[[-5.0,0.0],[0.0,5.0],[5.0,0.0]],\"failed: three clearly separated clusters\"\nassert kmeans(np.array([[0,0],[0,1],[10,0],[10,1]]),2,random_state=7)==[[0.0,0.5],[10.0,0.5]],\"failed: two vertical stripes\"\nassert kmeans(np.array([[1],[2],[8],[9]]),2,random_state=3)==[[1.5],[8.5]],\"failed: one-dimensional data\"\nassert kmeans(np.array([[1],[2],[3],[4],[5]]),1,random_state=11)==[[3.0]],\"failed: single cluster\"\nassert kmeans(np.array([[0,0,0],[0,1,0],[0,0,1],[10,0,0],[10,1,0],[10,0,1]]),2,random_state=13)==[[0.0,0.3333,0.3333],[10.0,0.3333,0.3333]],\"failed: 3-D example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),3,random_state=19)==[[1.0,1.0],[2.0,2.0],[3.0,3.0]],\"failed: K equals number of points\"\nassert kmeans(np.array([[-1,0],[-2,0],[1,0],[2,0]]),2,random_state=23)==[[-1.5,0.0],[1.5,0.0]],\"failed: symmetric clusters on x-axis\"\nassert kmeans(np.array([[0,0],[0,1],[1,0],[1,1]]),4,random_state=29)==[[0.0,0.0],[0.0,1.0],[1.0,0.0],[1.0,1.0]],\"failed: each point its own cluster\"\nassert kmeans(np.array([[2,2],[2,4],[8,2],[8,4]]),2,random_state=5)==[[2.0,3.0],[8.0,3.0]],\"failed: square split into two rectangles\""}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: name '_identity_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes a text string into a fixed-length list of integer token IDs.\n    \n    Args:\n        text: Input text string.\n        time_steps: Fixed length of the output sequence.\n        vocabulary: Dictionary mapping characters to integers.\n        \n    Returns:\n        A list of integers representing the encoded text with fixed length.\n    \"\"\"\n    encoded = [0] * time_steps\n    for (i, char) in enumerate(text):\n        if char in vocabulary:\n            encoded[i] = vocabulary[char]\n        else:\n            encoded[i] = 0\n    return encoded[:time_steps]\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decodes a list of integer token IDs back to a text string.\n    \n    Args:\n        indices: List of integer token IDs.\n        inverse_vocab: Dictionary mapping integers back to characters.\n        \n    Returns:\n        A string representation of the decoded text, ignoring padding tokens (0).\n    \"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Runs an example through the encoding-decoding pipeline.\n    \n    Args:\n        model: The neural model to use for prediction.\n        input_vocabulary: Vocabulary for encoding input text.\n        inv_output_vocabulary: Inverse vocabulary for decoding output.\n        text: Input text string.\n        \n    Returns:\n        The decoded prediction string from the model.\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    predicted_output = model.predict(np.array([encoded_input]))\n    predicted_ids = np.argmax(predicted_output, axis=1)[0]\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_text\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hello') == 'hello', 'failed on \"hello\"'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'HELLO') == 'hello', 'failed on upper-case input'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '') == '', 'failed on empty string'\na20 = 'a' * 25\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, a20) == 'a' * 20, 'failed on long input truncation'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hi!') == 'hi', 'failed on unknown character removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'data science') == 'data science', 'failed on string with space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '       ') == '       ', 'failed on only spaces'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc xyz') == 'abc xyz', 'failed on mixed letters and space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc_def') == 'abcdef', 'failed on underscore removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'padding test') == 'padding test', 'failed on general case'"}
{"task_id": 112, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nfrom collections import Counter\nimport re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\"\"\"\n    words = re.findall('[A-Za-z]+', text)\n    if not words:\n        return []\n    word_counts = Counter((word.lower() for word in words))\n    tokens = [Token(word) for (word, count) in word_counts.items()]\n    for token in tokens:\n        token.count = word_counts[token.word]\n    tokens.sort(key=lambda x: (-x.count, x.word))\n    return tokens\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"Hello, hello world!\")] == [(\"hello\", 2), (\"world\", 1)], \"test case failed: 'Hello, hello world!'\"\nassert tokenize_and_count(\"\") == [], \"test case failed: empty string\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"A a A a b B\")] == [(\"a\", 4), (\"b\", 2)], \"test case failed: 'A a A a b B'\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"b a\")] == [(\"a\", 1), (\"b\", 1)], \"test case failed: 'b a'\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"This is a test. This test is only a test.\")] == [(\"test\", 3), (\"a\", 2), (\"is\", 2), (\"this\", 2), (\"only\", 1)], \"test case failed: sentence with punctuation\"\nassert tokenize_and_count(\"123 456 !!!\") == [], \"test case failed: numeric input\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"co-op co op\")] == [(\"co\", 2), (\"op\", 2)], \"test case failed: hyphenated words\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"Python\")] == [(\"python\", 1)], \"test case failed: single word\"\nassert [(tok.word, tok.count) for tok in tokenize_and_count(\"one1 two2 two2 one1 one1\")] == [(\"one\", 3), (\"two\", 2)], \"test case failed: alphanumeric words\"\nlarge_text = \"word \" * 1000 + \"test \" * 500\nassert [(tok.word, tok.count) for tok in tokenize_and_count(large_text)][:2] == [(\"word\", 1000), (\"test\", 500)], \"test case failed: large repetition\""}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: name 'run_example' is not defined", "solution": "\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n        predictions.append(output_str)\n    return predictions\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 114, "completion_id": 0, "passed": false, "result": "failed: local variable 'selu_derivative' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    lambda_ = 1.0507009873554805\n    if not derivative:\n        x_positive = x[x >= 0]\n        x_negative = x[x < 0]\n        selu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        x_positive = x[x >= 0]\n        x_negative = x[x < 0]\n        selu_derivative = np.where(x >= 0, 1, alpha * np.exp(x))\n    selu_values *= lambda_\n    selu_derivative *= lambda_\n    selu_values = np.round(selu_values, 6)\n    selu_derivative = np.round(selu_derivative, 6)\n    if not derivative:\n        return selu_values.tolist()\n    else:\n        return selu_derivative.tolist()\nimport numpy as np\nassert selu(np.array([-1, 0, 1])) == [-1.111331, 0.0, 1.050701], \"test case failed: selu([-1,0,1])\"\nassert selu(np.array([0])) == [0.0], \"test case failed: selu([0])\"\nassert selu(np.array([0]), derivative=True) == [1.050701], \"test case failed: selu([0], True)\"\nassert selu(np.array([])) == [], \"test case failed: empty array activation\"\nassert selu(np.array([]), derivative=True) == [], \"test case failed: empty array derivative\""}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: name '_expected' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    if w.ndim == 1:\n        w = w.reshape(-1, 1)\n    z = np.dot(X, w)\n    sigmoid = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(sigmoid, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / m\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [row.tolist() for row in np.round(gradient, 4)]\n    return (loss_rounded, gradient_rounded)\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])) == _expected(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])), \"test case failed: #1\"\nassert logistic_loss_and_gradient(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])) == _expected(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])), \"test case failed: #2\"\nassert logistic_loss_and_gradient(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])) == _expected(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])), \"test case failed: #3\"\nassert logistic_loss_and_gradient(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])) == _expected(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])), \"test case failed: #4\"\nassert logistic_loss_and_gradient(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])) == _expected(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])), \"test case failed: #5\"\nassert logistic_loss_and_gradient(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])) == _expected(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])), \"test case failed: #6\"\nassert logistic_loss_and_gradient(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])) == _expected(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])), \"test case failed: #7\"\nassert logistic_loss_and_gradient(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])) == _expected(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])), \"test case failed: #8\"\nassert logistic_loss_and_gradient(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])) == _expected(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])), \"test case failed: #9\"\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])) == _expected(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])), \"test case failed: #10\""}
{"task_id": 116, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    mean_y = np.mean(y)\n    mse_parent = np.mean((y - mean_y) ** 2)\n    total_samples = len(y)\n    mse_children = 0.0\n    for split in splits:\n        if len(split) == 0:\n            continue\n        mean_split = np.mean(split)\n        mse_split = np.mean((split - mean_split) ** 2)\n        mse_children += len(split) / total_samples * mse_split\n    delta_mse = mse_parent - mse_children\n    return round(delta_mse, 4)\nimport numpy as np\nassert mse_criterion(np.array([1, 2, 3, 4]), [np.array([1, 2]), np.array([3, 4])]) == 1.0, \"test case failed: basic two-way split\"\nassert mse_criterion(np.array([1, 2, 3]), [np.array([1, 2, 3])]) == 0.0, \"test case failed: no real split\"\nassert mse_criterion(np.array([1, 1, 1]), [np.array([1, 1]), np.array([1])]) == 0.0, \"test case failed: zero variance data\"\nassert mse_criterion(np.array([0, 10, 20, 30]), [np.array([0, 10]), np.array([20, 30])]) == 100.0, \"test case failed: large variance reduction\"\nassert mse_criterion(np.array([1, 4, 7, 10, 13]), [np.array([1, 4, 7]), np.array([10, 13])]) == 13.5, \"test case failed: uneven split sizes\"\nassert mse_criterion(np.array([2, 2, 2, 2]), [np.array([2, 2]), np.array([2, 2])]) == 0.0, \"test case failed: identical targets\"\nassert mse_criterion(np.array([1, 2]), [np.array([1]), np.array([2])]) == 0.25, \"test case failed: singletons\"\nassert mse_criterion(np.array([1, 2, 3, 4, 5, 6]), [np.array([1, 2, 3]), np.array([4, 5, 6])]) == 2.25, \"test case failed: six elements split in half\"\nassert mse_criterion(np.array([1, 4, 7, 10]), [np.array([1]), np.array([4]), np.array([7, 10])]) == 10.125, \"test case failed: three-way split\"\nassert mse_criterion(np.array([0, 0, 10, 10, 20, 20]), [np.array([0, 0, 10]), np.array([10, 20, 20])]) == 44.4444, \"test case failed: mixed targets split\""}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: failed: simple threshold", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        for feature_idx in range(n):\n            sorted_indices = np.argsort(X_train[:, feature_idx])\n            for i in range(m - 1):\n                threshold = (X_train[sorted_indices[i], feature_idx] + X_train[sorted_indices[i + 1], feature_idx]) / 2\n                left_mask = X_train[:, feature_idx] <= threshold\n                right_mask = X_train[:, feature_idx] > threshold\n                error_left = np.sum(weights[left_mask] * (y_train[left_mask] != -1))\n                error_right = np.sum(weights[right_mask] * (y_train[right_mask] != -1))\n                total_error = error_left + error_right\n                if total_error < best_error:\n                    best_error = total_error\n                    best_stump = (feature_idx, threshold)\n                    best_threshold = threshold\n        if best_error == float('inf'):\n            break\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        alphas.append(alpha)\n        weights = weights * np.exp(-alpha * y_train * (X_train[:, best_stump[0]] <= best_stump[1]))\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n    predictions = []\n    for x in X_test:\n        sum_votes = 0\n        for i in range(n_clf):\n            (feature_idx, threshold) = stumps[i]\n            if x[feature_idx] <= threshold:\n                sum_votes += alphas[i]\n            else:\n                sum_votes -= alphas[i]\n        predictions.append(1 if sum_votes > 0 else -1)\n    return predictions\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 119, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    if not params or not grads or len(params) != len(grads):\n        return []\n    updated_params = []\n    for (param, grad) in zip(params, grads):\n        updated_param = param - alpha * grad\n        updated_params.append(updated_param)\n    return [np.round(param, 4).tolist() for param in updated_params]\nassert sgd_update([np.array([1.0, 2.0, 3.0])], [np.array([0.1, -0.2, 0.3])], 0.1) == [[0.99, 2.02, 2.97]], \"failed on basic vector update\"\nassert sgd_update([np.array([[1.5, -2.0], [3.0, 4.0]])], [np.array([[0.5, 0.5], [1.0, -1.0]])], 0.2) == [[ [1.4, -2.1], [2.8, 4.2] ]], \"failed on matrix update\"\nassert sgd_update([], [], 0.1) == [], \"failed on empty input\"\nassert sgd_update([np.array(5.0)], [np.array(2.0)], 0.5) == [4.0], \"failed on scalar update\"\nassert sgd_update([np.array([0.0, 0.0])], [np.array([0.0, 0.0])], 10.0) == [[0.0, 0.0]], \"failed on zero gradients\"\nassert sgd_update([np.array([1.0, 1.0])], [np.array([1.0, 1.0])], 1.0) == [[0.0, 0.0]], \"failed on alpha=1\"\nassert sgd_update([np.array([-1.0, -2.0])], [np.array([-0.5, 0.5])], 0.4) == [[-0.8, -2.2]], \"failed on negative params/gradients\"\nassert sgd_update([np.array([[2.0, 3.0, 4.0]])], [np.array([[1.0, 1.0, 1.0]])], 0.25) == [[[1.75, 2.75, 3.75]]], \"failed on 1xN matrix\""}
{"task_id": 120, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    m = len(X)\n    n_features = len(X[0])\n    X_augmented = np.column_stack((np.ones(m), X))\n    N = X_augmented.shape[1]\n    w = np.random.uniform(-1 / math.sqrt(N), 1 / math.sqrt(N), size=N)\n    for _ in range(n_iterations):\n        predictions = X_augmented @ w\n        error = predictions - y\n        gradient = X_augmented.T @ error / m\n        w -= learning_rate * gradient\n    return [round(weight, 4) for weight in w.tolist()]\nassert linear_regression([[1], [2], [3]], [2, 4, 6], 10000, 0.01) == [0.0, 2.0], \"failed: slope 2 intercept 0\"\nassert linear_regression([[1], [2], [3], [4]], [3, 5, 7, 9], 10000, 0.01) == [1.0, 2.0], \"failed: slope 2 intercept 1\"\nassert linear_regression([[0], [1], [2], [3]], [5, 4, 3, 2], 15000, 0.01) == [5.0, -1.0], \"failed: slope -1 intercept 5\"\nassert linear_regression([[1, 2, 3], [2, 1, 0], [0, 0, 1], [3, 5, 1]], [6, 3, 1, 9], 25000, 0.01) == [0.0, 1.0, 1.0, 1.0], \"failed: three-feature weights [0,1,1,1]\"\nassert linear_regression([[1], [2], [3]], [7, 7, 7], 15000, 0.01) == [7.0, 0.0], \"failed: constant function\"\nassert linear_regression([[-1], [0], [1]], [-1, 1, 3], 10000, 0.01) == [1.0, 2.0], \"failed: negative feature values\"\nassert linear_regression([[2], [4], [6], [8]], [4, 8, 12, 16], 10000, 0.01) == [0.0, 2.0], \"failed: larger inputs slope 2\"\nassert linear_regression([[1, 1], [2, 3], [3, 2], [4, 0]], [0, -1, 1, 4], 20000, 0.01) == [0.0, 1.0, -1.0], \"failed: weights [0,1,-1]\"\nassert linear_regression([[1, 2], [2, 0], [0, 1], [3, 4]], [-0.5, -2.0, -2.0, 2.5], 20000, 0.01) == [-3.0, 0.5, 1.0], \"failed: weights [-3,0.5,1]\""}
{"task_id": 122, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector [w0, w1, ..., wd] rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_augmented = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n    w = np.linalg.pinv(X_augmented.T @ X_augmented) @ X_augmented.T @ y_np\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\nassert linear_regression_weights([[0], [1], [2]], [1, 2, 3]) == [1.0, 1.0], \"failed on y = x + 1\"\nassert linear_regression_weights([[0], [1], [2], [3]], [5, 5, 5, 5]) == [5.0, 0.0], \"failed on constant target\"\nassert linear_regression_weights([[1], [2], [3]], [2, 4, 6]) == [0.0, 2.0], \"failed on y = 2x\"\nassert linear_regression_weights([[1, 2], [2, 3], [3, 4], [4, 5]], [3, 5, 7, 9]) == [0.0, 1.0, 1.0], \"failed on y = x1 + x2\"\nassert linear_regression_weights([[1, 0], [0, 1], [1, 1], [2, 3]], [3, 3, 4, 7]) == [2.0, 1.0, 1.0], \"failed on y = 2 + x1 + x2\"\nassert linear_regression_weights([[4], [5], [6]], [9, 11.5, 14]) == [-1.0, 2.5], \"failed on y = -1 + 2.5x\"\nassert linear_regression_weights([[2, 1], [0, 1], [1, 3]], [0, 2, 5]) == [0.0, -1.0, 2.0], \"failed on y = -x1 + 2x2\"\nassert linear_regression_weights([[1], [2], [3]], [1.5, 1.5, 1.5]) == [1.5, 0.0], \"failed on y = 1.5\"\nassert linear_regression_weights([[0, 1], [1, 0], [2, 2]], [0, 1.5, 1.5]) == [0.5, 1.0, -0.5], \"failed on mixed weights\"\nassert linear_regression_weights([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]], [1, 2, 3, 6]) == [0.0, 1.0, 2.0, 3.0], \"failed on 3-feature dataset\""}
{"task_id": 123, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    unique_categories = np.unique(y)\n    unique_categories.sort()\n    num_categories = len(unique_categories)\n    result = []\n    for value in y:\n        row = [0] * num_categories\n        index = np.where(unique_categories == value)[0][0]\n        row[index] = 1\n        result.append(row)\n    return result\nassert one_hot_encoding(np.array([0, 1, 2])) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]], \"Test case failed: integers [0,1,2]\"\nassert one_hot_encoding(np.array([2, 2, 1, 0])) == [[0, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0]], \"Test case failed: integers with repetition [2,2,1,0]\"\nassert one_hot_encoding(np.array([-1, 0, -1])) == [[1, 0], [0, 1], [1, 0]], \"Test case failed: negative integers [-1,0,-1]\"\nassert one_hot_encoding(np.array([\"cat\", \"dog\", \"cat\"])) == [[1, 0], [0, 1], [1, 0]], \"Test case failed: strings ['cat','dog','cat']\"\nassert one_hot_encoding([3, 1, 3, 3]) == [[0, 1], [1, 0], [0, 1], [0, 1]], \"Test case failed: list [3,1,3,3]\"\nassert one_hot_encoding(np.array([42])) == [[1]], \"Test case failed: single element [42]\"\nassert one_hot_encoding(np.array([1, 1, 2, 2])) == [[1, 0], [1, 0], [0, 1], [0, 1]], \"Test case failed: sorted integers [1,1,2,2]\"\nlarge_input = np.arange(10)\nexpected_large = np.eye(10, dtype=int).tolist()\nassert one_hot_encoding(large_input) == expected_large, \"Test case failed: large range 0-9\"\nassert one_hot_encoding([\"a\", \"b\", \"c\", \"a\"]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], \"Test case failed: list of strings ['a','b','c','a']\"\nassert one_hot_encoding(np.array([\"x\", \"z\", \"x\", \"y\"])) == [[1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]], \"Test case failed: strings ['x','z','x','y']\""}
{"task_id": 126, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"\n    Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    Y_np = np.array(Y, dtype=np.float64) if Y is not None else X_np\n    C = X_np.shape[1]\n    if gamma is None:\n        gamma = 1.0 / C\n    inner_product = np.dot(X_np, Y_np.T)\n    kernel_matrix = (gamma * inner_product + c0) ** d\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nassert polynomial_kernel([[1, 2], [3, 4]]) == [[42.875, 274.625], [274.625, 2460.375]], \"test failed: default parameters with 2\u00d72 input\"\nassert polynomial_kernel([[1, 0], [0, 1]], d=2, gamma=1, c0=0) == [[1.0, 0.0], [0.0, 1.0]], \"test failed: homogeneous degree-2 kernel on identity\"\nassert polynomial_kernel([[1, 2, 1]], [[0, 1, 0]], d=2, gamma=0.5, c0=1) == [[4.0]], \"test failed: explicit X, Y with gamma=.5\"\nassert polynomial_kernel([[2, 3]], [[2, 3]], d=1, gamma=1, c0=0) == [[13.0]], \"test failed: degree-1 (linear) kernel, c0=0\"\nassert polynomial_kernel([[2, 3]], [[2, 3]], d=1, gamma=1, c0=5) == [[18.0]], \"test failed: degree-1 with bias term\"\nassert polynomial_kernel([[1, 2], [3, 4]], [[5, 6], [7, 8]], d=2, gamma=1, c0=1) == [[324.0, 576.0], [1600.0, 2916.0]], \"test failed: 2\u00d72 vs 2\u00d72 different matrices\"\nassert polynomial_kernel([[1, 2, 3]], d=3, gamma=None, c0=0) == [[101.6296]], \"test failed: automatic gamma = 1/C\"\nassert polynomial_kernel([[0, 0]], [[0, 0]], d=3, gamma=2, c0=1) == [[1.0]], \"test failed: zero vectors\"\nassert polynomial_kernel([[1, 1]], [[-1, -1]], d=2, gamma=1, c0=0) == [[4.0]], \"test failed: negative correlation\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], d=2, gamma=0.5, c0=0) == [[30.25]], \"test failed: gamma=0.5, degree=2\""}
{"task_id": 127, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    all_classes = set(y_true) | set(y_pred)\n    sorted_classes = sorted(all_classes)\n    num_classes = len(sorted_classes)\n    confusion_matrix = [[0 for _ in range(num_classes)] for _ in range(num_classes)]\n    for (true_label, pred_label) in zip(y_true, y_pred):\n        true_idx = sorted_classes.index(true_label)\n        pred_idx = sorted_classes.index(pred_label)\n        confusion_matrix[true_idx][pred_idx] += 1\n    return confusion_matrix\nassert confusion_matrix(['cat','dog','cat'],['cat','cat','dog']) == [[1,1],[1,0]], \"failed on example with strings\"\nassert confusion_matrix([1,2,3,4],[4,3,2,1]) == [[0,0,0,1],[0,0,1,0],[0,1,0,0],[1,0,0,0]], \"failed on reversed labels\"\nassert confusion_matrix([0,0,0,0],[0,0,0,0]) == [[4]], \"failed on single class perfect match\"\nassert confusion_matrix([0,1,1,1],[1,1,1,1]) == [[0,1],[0,3]], \"failed on partial mismatch\"\nassert confusion_matrix([],[]) == [], \"failed on empty lists\"\nassert confusion_matrix([1,2],[1]) == -1, \"failed on unequal length detection\"\nassert confusion_matrix([2,2,1,0],[2,1,1,0]) == [[1,0,0],[0,1,0],[0,1,1]], \"failed on unsorted class order\"\nassert confusion_matrix(['a','b','c'],['c','b','a']) == [[0,0,1],[0,1,0],[1,0,0]], \"failed on character labels\"\nassert confusion_matrix([True,False,True],[True,True,False]) == [[0,1],[1,1]], \"failed on boolean labels\""}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: test case failed: multi_class_lda(example 1, 2 components)", "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_classes = np.unique(y)\n    n_classes = len(unique_classes)\n    (n_samples, n_features) = X.shape\n    class_means = {}\n    for cls in unique_classes:\n        mask = y == cls\n        class_means[cls] = np.mean(X[mask], axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for cls in unique_classes:\n        mask = y == cls\n        mu_c = class_means[cls]\n        diff = X[mask] - mu_c\n        S_W += np.dot(diff.T, diff)\n    global_mean = np.mean(X, axis=0)\n    S_B = np.zeros((n_features, n_features))\n    for cls in unique_classes:\n        mask = y == cls\n        N_c = np.sum(mask)\n        mu_c = class_means[cls]\n        diff = mu_c - global_mean\n        S_B += N_c * np.dot(diff.T, diff)\n    try:\n        S_W_pinv = np.linalg.pinv(S_W)\n    except np.linalg.LinAlgError:\n        return []\n    A = S_W_pinv @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_values = eigen_values[sorted_indices]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(len(sorted_eigen_vectors)):\n        vec = sorted_eigen_vectors[i]\n        first_non_zero = None\n        for j in range(n_features):\n            if vec[j] != 0:\n                first_non_zero = j\n                break\n        if first_non_zero is not None and vec[first_non_zero] < 0:\n            sorted_eigen_vectors[i] *= -1\n    if n_components > n_features or n_components <= 0:\n        return []\n    W = sorted_eigen_vectors[:, :n_components]\n    projected_data = X @ W\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n    return projected_data_rounded\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 1) == [[1.4142],[2.1213],[2.1213],[2.8284],[11.3137],[12.0208],[12.0208],[12.7279]], \"test case failed: multi_class_lda(example 1, 1 component)\"\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 2) == [[1.4142,0.0],[2.1213,-0.7071],[2.1213,0.7071],[2.8284,0.0],[11.3137,0.0],[12.0208,0.7071],[12.0208,-0.7071],[12.7279,0.0]], \"test case failed: multi_class_lda(example 1, 2 components)\"\nassert multi_class_lda(np.array([[2,0],[4,0],[0,2],[0,4]]), np.array([0,0,1,1]), 1) == [[1.4142],[2.8284],[-1.4142],[-2.8284]], \"test case failed: axis-separated data\"\nassert multi_class_lda(np.array([[1],[2],[8],[9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: one-dimensional data #1\"\nassert multi_class_lda(np.array([[1,0],[2,0],[8,0],[9,0]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis data #2\"\nassert multi_class_lda(np.array([[2],[4],[6],[8],[10],[12]]), np.array([0,0,1,1,2,2]), 1) == [[2.0],[4.0],[6.0],[8.0],[10.0],[12.0]], \"test case failed: one-dimensional data #2\"\nassert multi_class_lda(np.array([[0,1],[0,2],[0,8],[0,9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis y-data\"\nassert multi_class_lda(np.array([[-2,0],[-4,0],[0,-2],[0,-4]]), np.array([0,0,1,1]), 1) == [[-1.4142],[-2.8284],[1.4142],[2.8284]], \"test case failed: negative axis data\"\nassert multi_class_lda(np.array([[0,-1],[0,-2],[0,3],[0,4]]), np.array([0,0,1,1]), 1) == [[-1.0],[-2.0],[3.0],[4.0]], \"test case failed: axis y negative-positive data\""}
{"task_id": 129, "completion_id": 0, "passed": true, "result": "passed", "solution": "from itertools import islice, cycle\nfrom itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    cycled = cycle(sequence)\n    return list(islice(cycled, samples))\nassert cycle_sequence([1,2,3], 8) == [1,2,3,1,2,3,1,2], \"failed on cycle_sequence([1,2,3], 8)\"\nassert cycle_sequence(['x'], 4) == ['x','x','x','x'], \"failed on single-element sequence\"\nassert cycle_sequence([], 5) == [], \"failed on empty sequence\"\nassert cycle_sequence([0,1], 0) == [], \"failed on zero samples\"\nassert cycle_sequence([0,1], -3) == [], \"failed on negative samples\"\nassert cycle_sequence(['a','b','c'], 1) == ['a'], \"failed on one sample\"\nassert cycle_sequence(['a','b','c'], 2) == ['a','b'], \"failed on two samples\"\nassert cycle_sequence(['a','b','c'], 3) == ['a','b','c'], \"failed on exactly full length\"\nassert cycle_sequence(['a','b','c'], 4) == ['a','b','c','a'], \"failed on length+1 samples\"\nassert cycle_sequence([True, False], 7) == [True, False, True, False, True, False, True], \"failed on boolean sequence\""}
{"task_id": 130, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    matching_transitions = [t for t in transitions if t[0] == state and t[1] == action]\n    if not matching_transitions:\n        return []\n    next_state_counts = Counter((t[3] for t in matching_transitions))\n    total = len(matching_transitions)\n    result = []\n    for (next_state, count) in next_state_counts.items():\n        prob = round(count / total, 4)\n        result.append([next_state, prob])\n    result.sort(key=lambda x: x[0])\n    return result\nassert outcome_probs([(0,'left',-1,1),(0,'left',-1,1),(0,'left',-1,2),(0,'right',0,3)],0,'left') == [[1,0.6667],[2,0.3333]], \"failed: basic two-outcome distribution\"\nassert outcome_probs([(1,'up',0,2),(1,'up',0,2),(1,'up',0,2)],1,'up') == [[2,1.0]], \"failed: single deterministic outcome\"\nassert outcome_probs([(0,'left',-1,1),(0,'right',0,3)],99,'none') == [], \"failed: unseen pair\"\nassert outcome_probs([(2,0,1,3),(2,0,0,3),(2,0,2,4)],2,0) == [[3,0.6667],[4,0.3333]], \"failed: numeric action\"\nassert outcome_probs([('s0','jump',0,'s1'),('s0','jump',0,'s2'),('s0','jump',0,'s1')],'s0','jump') == [['s1',0.6667],['s2',0.3333]], \"failed: string labels\"\nassert outcome_probs([(10,'a',0,i) for i in range(10)] + [(10,'a',0,0)],10,'a') == [[0,0.1818]] + [[i,0.0909] for i in range(1,10)], \"failed: many outcomes\"\nassert outcome_probs([(1.2,'go',0,2),(1.2,'go',0,2),(1.2,'go',0,3)],1.2,'go') == [[2,0.6667],[3,0.3333]], \"failed: float state\"\nassert outcome_probs([(1.2,'go',0,2)],1.2,'stop') == [], \"failed: unseen action\"\nassert outcome_probs([(0,'a',0,1)]*333 + [(0,'a',0,2)]*667,0,'a') == [[1,0.333],[2,0.667]], \"failed: rounding\"\nassert outcome_probs([(5,'x',0,7),(5,'x',0,6),(5,'x',0,7)],5,'x') == [[6,0.3333],[7,0.6667]], \"failed: sorting order\""}
{"task_id": 131, "completion_id": 0, "passed": false, "result": "failed: name '_SHARED_SEQUENCES' is not defined", "solution": "\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so that several parts of a program can work on different sequences at the same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    sequences = _SHARED_SEQUENCES\n    if not 0 <= uid < len(sequences):\n        return None\n    sequence = sequences[uid]\n    if i < 0:\n        i += len(sequence)\n    if not 0 <= i < len(sequence):\n        return None\n    return sequence[i]\nassert get_index(1, 0) == 5, \"test case failed: get_index(1, 0)\"\nassert get_index(2, 0) is None, \"test case failed: get_index(2, 0) \u2013 empty sequence should return None\"\nassert get_index(1, -1) == 2, \"test case failed: get_index(1, -1)\"\nassert get_index(0, 3) is None, \"test case failed: get_index(0, 3) \u2013 out of range\"\n_SHARED_SEQUENCES.append([100, 200])\nassert get_index(3, 1) == 200, \"test case failed: get_index(3, 1) after append\"\n_SHARED_SEQUENCES[0] = ['a', 'b']\nassert get_index(0, 1) == 'b', \"test case failed: get_index(0, 1) after replacement\"\n_SHARED_SEQUENCES.append([])\nassert get_index(4, 0) is None, \"test case failed: get_index(4, 0) \u2013 newly appended empty sequence\""}
{"task_id": 132, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return z\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        raise TypeError('Input must be a scalar, list, tuple, or NumPy ndarray.')\nassert linear(5) == 5, \"Failed on integer scalar 5\"\nassert linear(3.14159) == 3.14159, \"Failed on float scalar 3.14159\"\na = np.array([1, 2, 3]); assert linear(a) is a and np.array_equal(linear(a), np.array([1, 2, 3])), \"Failed on ndarray identity property\"\nassert np.array_equal(linear([4, 5, 6]), np.array([4.0, 5.0, 6.0])), \"Failed on list to ndarray conversion\"\nassert np.array_equal(linear([[1, 2], [3, 4]]), np.array([[1.0, 2.0], [3.0, 4.0]])), \"Failed on nested list conversion\"\nb = np.array([[7.5, -8.2]]); assert linear(b) is b, \"Failed on ndarray object identity (no copy)\"\nassert np.array_equal(linear((9, 10, 11)), np.array([9.0, 10.0, 11.0])), \"Failed on tuple to ndarray conversion\"\nc = np.arange(12).reshape(3, 4); assert linear(c) is c and np.array_equal(linear(c), c), \"Failed on multi-dimensional ndarray identity\"\nassert linear(-42) == -42, \"Failed on negative scalar\"\nd = np.zeros((2, 2, 2)); assert linear(d) is d and np.array_equal(linear(d), d), \"Failed on 3-D zeros ndarray\""}
{"task_id": 133, "completion_id": 0, "passed": false, "result": "failed: max() arg is an empty sequence", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    for seq in X_train:\n        for token in seq:\n            if not 0 <= token < vocab_length:\n                return -1\n    max_time_steps = max((len(seq) for seq in X_train))\n    Y_train = []\n    for seq in X_train:\n        one_hot_seq = []\n        for token in seq:\n            one_hot_vector = [0] * vocab_length\n            one_hot_vector[token] = 1\n            one_hot_seq.append(one_hot_vector)\n        while len(one_hot_seq) < max_time_steps:\n            one_hot_seq.append([0] * vocab_length)\n        Y_train.append(one_hot_seq)\n    return Y_train\nassert one_hot_targets([[0, 2, 1], [1, 3, 2]], 4) == [[[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]], [[0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]], \"failed: basic example\"\nassert one_hot_targets([[3, 3, 3]], 4) == [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]]], \"failed: repeated tokens\"\nassert one_hot_targets([[0]], 1) == [[[1]]], \"failed: single token single vocab\"\nassert one_hot_targets([[1, 0], [0, 1]], 2) == [[[0, 1], [1, 0]], [[1, 0], [0, 1]]], \"failed: two-class alternating\"\nassert one_hot_targets([], 5) == [], \"failed: empty input list\"\nassert one_hot_targets([[0, 4]], 4) == -1, \"failed: index equal to vocab_length should be invalid\"\nassert one_hot_targets([[0, -1]], 3) == -1, \"failed: negative index should be invalid\"\nassert one_hot_targets([[2, 1, 0]], 3) == [[[0, 0, 1], [0, 1, 0], [1, 0, 0]]], \"failed: descending indices\"\nassert one_hot_targets([[1, 2, 1, 0]], 3) == [[[0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]], \"failed: longer single sequence\"\nassert one_hot_targets([[2, 2], [2, 2], [2, 2]], 3) == [[[0, 0, 1], [0, 0, 1]], [[0, 0, 1], [0, 0, 1]], [[0, 0, 1], [0, 0, 1]]], \"failed: all same tokens multiple samples\""}
{"task_id": 134, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    if not payoff_probs:\n        return (-1.0, -1)\n    for p in payoff_probs:\n        if not 0.0 <= p <= 1.0:\n            return (-1.0, -1)\n    max_prob = max(payoff_probs)\n    best_index = payoff_probs.index(max_prob)\n    return (max_prob, best_index)\nassert best_arm([0.15, 0.6, 0.35]) == (0.6, 1), \"failed on [0.15, 0.6, 0.35]\"\nassert best_arm([0.8, 0.8, 0.5]) == (0.8, 0), \"failed on tie with first max\"\nassert best_arm([0.0, 0.0, 0.0]) == (0.0, 0), \"failed on all zeros\"\nassert best_arm([1.0]) == (1.0, 0), \"failed on single arm\"\nassert best_arm([]) == (-1.0, -1), \"failed on empty list\"\nassert best_arm([0.2, -0.1, 0.3]) == (-1.0, -1), \"failed on probability < 0\"\nassert best_arm([0.2, 1.1, 0.3]) == (-1.0, -1), \"failed on probability > 1\"\nassert best_arm([0.333, 0.333, 0.3329]) == (0.333, 0), \"failed on close tie\"\nassert best_arm([0.25, 0.5, 0.75, 0.74]) == (0.75, 2), \"failed on normal case\"\nassert best_arm([0.9, 0.1]) == (0.9, 0), \"failed on two arms\""}
{"task_id": 135, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic single feature", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Perform Ordinary Least Squares (OLS) linear regression from scratch using the normal equation.\n    \n    Args:\n        X_train: Training feature matrix (list of lists).\n        y_train: Training target vector (list).\n        X_test: Test feature matrix (list of lists).\n        \n    Returns:\n        List of predicted values rounded to 4 decimal places, or -1 if the matrix is singular.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    X_train_with_intercept = np.c_[np.ones((X_train_np.shape[0],)), X_train_np]\n    try:\n        theta = np.linalg.inv(X_train_with_intercept.T @ X_train_with_intercept) @ X_train_with_intercept.T @ y_train_np\n    except np.linalg.LinAlgError:\n        return [-1]\n    X_test_with_intercept = np.c_[np.ones((X_test_np.shape[0],)), X_test_np]\n    predictions = X_test_with_intercept @ theta\n    return [float(pred + 1e-08) for pred in np.round(predictions, 4)]\nassert linear_regression_predict([[1],[2],[3]],[2,3,4],[[4],[5]]) == [5.0, 6.0], \"test case failed: basic single feature\"\nassert linear_regression_predict([[1,2],[2,0],[3,1],[0,2]],[4,3,5,2],[[1,1]]) == [2.6], \"test case failed: two features, invertible\"\nassert linear_regression_predict([[1],[1]],[2,3],[[2]]) == -1, \"test case failed: singular design matrix\"\nassert linear_regression_predict([[0,0],[1,2],[2,1],[3,3]],[2,3,7,8],[[4,5]]) == [9.0], \"test case failed: exact fit two features\"\nassert linear_regression_predict([[0],[1],[2],[3]],[1,3,5,7],[[4],[5]]) == [9.0, 11.0], \"test case failed: larger single-feature set\"\nassert linear_regression_predict([[-2],[-1],[0],[1],[2]],[-3,-1,1,3,5],[[3]]) == [7.0], \"test case failed: negative values\"\nassert linear_regression_predict([[1,0,0],[0,1,0],[0,0,1],[1,1,1]],[-0.5,1,-2,0.5],[[2,0,1]]) == [-1.0], \"test case failed: three features\"\nassert linear_regression_predict([[0],[0],[0]],[1,1,1],[[0]]) == -1, \"test case failed: all zero features (singular)\"\nassert linear_regression_predict([[1],[2],[3]],[2,4,6],[[4]]) == [8.0], \"test case failed: zero intercept line\""}
{"task_id": 136, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: -1).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    max_vals = np.max(z, axis=axis, keepdims=True)\n    z_shifted = z - max_vals\n    exp_z = np.exp(z_shifted)\n    sum_exp = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_out = exp_z / sum_exp\n    softmax_rounded = np.round(softmax_out, 4)\n    return softmax_rounded.tolist()\nassert softmax(np.array([1, 2, 3])) == [0.09, 0.2447, 0.6652], \"test 1 failed: softmax([1,2,3])\"\nassert softmax(np.array([0, 0])) == [0.5, 0.5], \"test 2 failed: softmax([0,0])\"\nassert softmax(np.array([-1, -2, -3])) == [0.6652, 0.2447, 0.09], \"test 3 failed: softmax([-1,-2,-3])\"\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]])) == [[0.09, 0.2447, 0.6652], [0.09, 0.2447, 0.6652]], \"test 4 failed: row-wise softmax\"\nassert softmax(np.array([[1, 2, 3], [4, 5, 6]]), axis=0) == [[0.0474, 0.0474, 0.0474], [0.9526, 0.9526, 0.9526]], \"test 5 failed: column-wise softmax\"\nassert softmax(np.array([[1000, 1000], [1000, 1000]]), axis=1) == [[0.5, 0.5], [0.5, 0.5]], \"test 6 failed: large identical values\"\nassert softmax(np.array([1000, 1000])) == [0.5, 0.5], \"test 7 failed: vector of large identical values\"\nassert softmax(np.array([[1], [2]]), axis=0) == [[0.2689], [0.7311]], \"test 8 failed: column vector, axis=0\"\nassert softmax(np.array([[1], [2]]), axis=1) == [[1.0], [1.0]], \"test 9 failed: column vector, axis=1\"\nassert softmax(np.array([-1, 1])) == [0.1192, 0.8808], \"test 10 failed: softmax([-1,1])\""}
{"task_id": 138, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if len(y_true) == 0 or len(y_pred) == 0 or len(y_true) != len(y_pred):\n        return -1\n    correct = sum((1 for (a, b) in zip(y_true, y_pred) if a == b))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score([1, 0, 1, 1], [1, 0, 0, 1]) == 0.75, \"test case failed: basic numerical example\"\nassert accuracy_score([1, 1, 1], [1, 1, 1]) == 1.0, \"test case failed: all correct predictions\"\nassert accuracy_score([0, 0, 0], [1, 1, 1]) == 0.0, \"test case failed: no correct predictions\"\nassert accuracy_score([\"cat\", \"dog\", \"cat\"], [\"cat\", \"cat\", \"cat\"]) == 0.6667, \"test case failed: string labels\"\nassert accuracy_score([True, False, True, False], [True, False, False, False]) == 0.75, \"test case failed: boolean labels\"\nassert accuracy_score([1.2, 3.4, 5.6], [1.2, 3.5, 5.6]) == 0.6667, \"test case failed: float labels\"\nassert accuracy_score([42], [42]) == 1.0, \"test case failed: single element correct\"\nassert accuracy_score([], []) == -1, \"test case failed: empty input sequences\"\nassert accuracy_score([1, 2, 3], [1, 2]) == -1, \"test case failed: different length sequences\"\nassert accuracy_score(list(\"abcdef\"), list(\"abcxyz\")) == 0.5, \"test case failed: half correct predictions\""}
{"task_id": 139, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    if not z:\n        return []\n    z_array = np.array(z, dtype=np.float64)\n    tanh_values = 2 / (1 + np.exp(-2 * z_array)) - 1\n    result = [round(val, 4) for val in tanh_values]\n    return result\nassert tanh_activation([-1, 0, 1]) == [-0.7616, 0.0, 0.7616], \"test case failed: tanh_activation([-1, 0, 1])\"\nassert tanh_activation([2, -2]) == [0.964, -0.964], \"test case failed: tanh_activation([2, -2])\"\nassert tanh_activation([5]) == [0.9999], \"test case failed: tanh_activation([5])\"\nassert tanh_activation([-5]) == [-0.9999], \"test case failed: tanh_activation([-5])\"\nassert tanh_activation([0.5, -0.5]) == [0.4621, -0.4621], \"test case failed: tanh_activation([0.5, -0.5])\"\nassert tanh_activation([10]) == [1.0], \"test case failed: tanh_activation([10])\"\nassert tanh_activation([-10]) == [-1.0], \"test case failed: tanh_activation([-10])\"\nassert tanh_activation([0]) == [0.0], \"test case failed: tanh_activation([0])\"\nassert tanh_activation([3.3]) == [0.9973], \"test case failed: tanh_activation([3.3])\"\nassert tanh_activation([-3.3]) == [-0.9973], \"test case failed: tanh_activation([-3.3])\""}
{"task_id": 140, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_time = [[math.inf] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    while q:\n        (x, y) = q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] > fire_time[x][y] + 1):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                q.append((nx, ny))\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_q = deque()\n    agent_q.append((0, 0, 0))\n    agent_time[0][0] = 0\n    while agent_q:\n        (x, y, t) = agent_q.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#'):\n                if fire_time[nx][ny] > t + 1:\n                    if agent_time[nx][ny] > t + 1:\n                        agent_time[nx][ny] = t + 1\n                        agent_q.append((nx, ny, t + 1))\n    return -1\nassert escape_fire_maze([\".\"]) == 0, \"test case failed: grid=['.']\"\nassert escape_fire_maze([\"F\"]) == -1, \"test case failed: grid=['F']\"\nassert escape_fire_maze([\"..\", \"..\"]) == 2, \"test case failed: grid=['..','..']\"\nassert escape_fire_maze([\"F.\", \"..\"]) == -1, \"test case failed: grid=['F.','..']\"\nassert escape_fire_maze([\"..F\", \"...\", \"...\"]) == -1, \"test case failed: grid=['..F','...','...']\"\nassert escape_fire_maze([\"...\", \".F.\", \"...\"]) == -1, \"test case failed: grid=['...','.F.','...']\"\nassert escape_fire_maze([\"..\", \".F\"]) == -1, \"test case failed: grid=['..','.F']\"\nassert escape_fire_maze([\"...\", \"...\", \"...\"]) == 4, \"test case failed: grid=['...','...','...']\"\nassert escape_fire_maze([\"....\", \"....\", \"....\", \"....\"]) == 6, \"test case failed: grid=['....','....','....','....']\"\nassert escape_fire_maze([\"F..\", \".F.\", \"..F\"]) == -1, \"test case failed: grid=['F..','.F.','..F']\""}
{"task_id": 141, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Perform k-Nearest Neighbors classification on the given data.\n\n    Parameters:\n    - X_train: np.ndarray, shape (n_samples, n_features)\n        The training data.\n    - y_train: np.ndarray, shape (n_samples,)\n        The labels for the training data.\n    - X_test: np.ndarray, shape (n_samples, n_features)\n        The test data to predict labels for.\n    - k: int\n        The number of neighbors to consider.\n    - metric: str, optional\n        The distance metric to use. Options are 'euclidean', 'manhattan', 'cosine'.\n        Default is 'euclidean'.\n\n    Returns:\n    - np.ndarray, shape (n_samples,)\n        The predicted labels for the test data.\n    \"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    predictions = np.zeros(X_test.shape[0], dtype=int)\n    for i in range(X_test.shape[0]):\n        if metric == 'euclidean':\n            distances = np.linalg.norm(X_train - X_test[i], axis=1)\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - X_test[i]), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, X_test[i])\n            norms = np.linalg.norm(X_train, axis=1) * np.linalg.norm(X_test[i])\n            cosine_similarity = dot_product / norms\n            distances = 1 - cosine_similarity\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        prediction = unique_labels[np.argmax(counts)]\n        if len(unique_labels) > 1 and np.all(counts == counts[0]):\n            prediction = unique_labels[0]\n        predictions[i] = prediction\n    return predictions\nassert knn_predict(np.array([[0, 0], [1, 1], [0, 1], [1, 0]]), np.array([0, 0, 1, 1]), np.array([[0.9, 0.9]]), 3, 'euclidean').tolist() == [1], 'Test 1 failed.'\nassert knn_predict(np.array([[0, 0], [1, 2], [3, 4]]), np.array([0, 1, 1]), np.array([[0, 1]]), 1, 'manhattan').tolist() == [0], 'Test 2 failed.'\nassert knn_predict(np.array([[1, 0], [0, 1]]), np.array([0, 1]), np.array([[1, 0.1]]), 1, 'cosine').tolist() == [0], 'Test 3 failed.'\nassert knn_predict(np.array([[0, 0], [0, 2]]), np.array([0, 1]), np.array([[0, 1]]), 2, 'euclidean').tolist() == [0], 'Test 4 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3], [8, 8], [9, 9]]), np.array([0, 0, 0, 1, 1]), np.array([[1.5, 1.5], [9, 8.9]]), 3, 'euclidean').tolist() == [0, 1], 'Test 5 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 0, 0]), np.array([[2.1, 2]]), 1).tolist() == [0], 'Test 6 failed.'\nassert knn_predict(np.array([[0, 0], [0, 1], [1, 1]]), np.array([0, 0, 1]), np.array([[0.1, 0.1]]), 2, 'minkowski').tolist() == [0], 'Test 7 failed.'\nassert knn_predict(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1.1]]), 3, 'manhattan').tolist() == [1], 'Test 8 failed.'\nassert knn_predict(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 2]), np.array([[0.9, 0.05, 0.05]]), 1, 'cosine').tolist() == [0], 'Test 9 failed.'\nassert knn_predict(np.array([[-1, -1], [-2, -2], [1, 1], [2, 2]]), np.array([0, 0, 1, 1]), np.array([[-1.5, -1.5]]), 2, 'euclidean').tolist() == [0], 'Test 10 failed.'"}
{"task_id": 143, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    if not derivative:\n        return np.maximum(x, alpha * x)\n    else:\n        return np.where(x >= 0, 1, alpha)\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.1), np.array([-0.3, -0.1, 0., 1., 3.])), \"failed on mixed signs activation\"\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.05), np.array([-0.15, -0.05, 0., 1., 3.])), \"failed on custom alpha activation\"\nassert np.allclose(leaky_relu([-3, -1, 0, 1, 3], alpha=0.1, derivative=True), np.array([0.1, 0.1, 1., 1., 1.])), \"failed on gradient computation\"\nassert leaky_relu(5) == 5, \"scalar positive input failed\"\nassert leaky_relu(-5, alpha=0.3) == -1.5, \"scalar negative input failed\"\nassert leaky_relu(-5, alpha=0.3, derivative=True) == 0.3, \"scalar gradient negative failed\"\nx = np.random.randn(1000)\nassert leaky_relu(x).shape == x.shape, \"shape mismatch on random vector\"\nmat = np.random.randn(5, 4, 3)\nassert leaky_relu(mat, derivative=True).shape == mat.shape, \"shape mismatch on tensor derivative\"\nzero_arr = np.zeros((10,))\nassert np.array_equal(leaky_relu(zero_arr), zero_arr), \"zeros activation failed\""}
{"task_id": 144, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    absolute_errors = np.abs(actual - predicted)\n    mae = np.mean(absolute_errors)\n    return round(mae, 4)\nassert mean_absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.5, \"failed: basic 1-D list input\"\nassert mean_absolute_error((1, 2, 3), (1, 2, 3)) == 0.0, \"failed: identical tuples must give 0\"\nassert mean_absolute_error(np.array([[1, 2], [3, 4]]), np.array([[2, 3], [4, 5]])) == 1.0, \"failed: 2-D numpy arrays\"\nassert mean_absolute_error([1, 2, 3], [1, 2]) == -1, \"failed: length mismatch expected \u20111\"\nassert mean_absolute_error([[1, 2, 3]], [[1, 2, 3]]) == 0.0, \"failed: single-row matrix\"\nassert mean_absolute_error([0.12345], [0.12344]) == 0.0, \"failed: rounding to 4 decimals\"\nassert mean_absolute_error([10, 20, 30], [0, 0, 0]) == 20.0, \"failed: large errors\"\nassert mean_absolute_error(np.linspace(0, 1, 5), np.full(5, 0.5)) == 0.3, \"failed: linspace vs constant\""}
{"task_id": 146, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (m_samples, _) = X_test.shape\n    k = min(k, n_samples)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.zeros(n_samples)\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            epsilon = 1e-12\n            dot_product = np.dot(X, test_sample)\n            norm_x = np.linalg.norm(X, axis=1)\n            norm_test = np.linalg.norm(test_sample)\n            distances = 1 - dot_product / (norm_x * norm_test + epsilon)\n        sorted_indices = np.argsort(distances)\n        nearest_indices = sorted_indices[:k]\n        nearest_labels = y[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        sorted_labels = np.sort(unique_labels[np.argsort(-counts)])\n        prediction = sorted_labels[0]\n        predictions.append(prediction)\n    return predictions.tolist()\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'euclidean') == [0], \"Test 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 1, 'euclidean') == [1], \"Test 2 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'manhattan') == [0], \"Test 3 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'cosine') == [0], \"Test 4 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 3, 'euclidean') == [0], \"Test 5 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 1, 'manhattan') == [0], \"Test 6 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.2,0.2]]), 10, 'euclidean') == [0], \"Test 7 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), 4, 'euclidean') == [0], \"Test 8 failed\"\nassert knn_predict(np.array([[1,0],[0,1],[1,1]]), np.array([0,1,1]), np.array([[1,1]]), 1, 'cosine') == [1], \"Test 9 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.1,0.1],[0.9,0.9]]), 1, 'euclidean') == [0,1], \"Test 10 failed\""}
{"task_id": 147, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for epoch in range(epochs):\n        z = X_train @ w + b\n        y_pred = 1 / (1 + np.exp(-z))\n        dw = (y_pred - y_train) @ X_train\n        db = np.sum(y_pred - y_train)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    z_test = X_test @ w + b\n    y_pred_test = 1 / (1 + np.exp(-z_test))\n    return (y_pred_test >= 0.5).astype(int).tolist()\nassert logistic_regression(np.array([[-2,-1],[-3,-2],[-1,-2],[-2,-3],[2,1],[3,2],[1,2],[2,3]]), np.array([0,0,0,0,1,1,1,1]), np.array([[-2,-2],[2,2]])) == [0,1], \"test case failed: basic 2D separation\"\nassert logistic_regression(np.array([[-2],[-1.5],[-1],[5],[6],[7]]), np.array([0,0,0,1,1,1]), np.array([[-1.25],[6]])) == [0,1], \"test case failed: 1D simple\"\nassert logistic_regression(np.array([[-3,1],[-2,2],[-1,1],[4,1],[5,2],[6,2]]), np.array([0,0,0,1,1,1]), np.array([[-2,1],[5,1]])) == [0,1], \"test case failed: 2D x-axis split\"\nassert logistic_regression(np.array([[-4,0,1],[-3,1,0],[-2,1,1],[3,0,0],[4,1,1],[5,0,1]]), np.array([0,0,0,1,1,1]), np.array([[-3,0,1],[4,0,0]])) == [0,1], \"test case failed: 3D features\"\nassert logistic_regression(np.array([[-1,-1],[-2,-1],[-1,-2],[1,1],[2,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[-1.5,-1.5],[1.5,1.5]])) == [0,1], \"test case failed: negative vs positive quadrant\"\nassert logistic_regression(np.array([[-5],[-4],[-3],[3],[4],[5]]), np.array([0,0,0,1,1,1]), np.array([[-4.5],[4.5]])) == [0,1], \"test case failed: symmetric 1D\"\nassert logistic_regression(np.array([[-3,0],[-2,-2],[-1,0],[1,1],[2,2],[3,1]]), np.array([0,0,0,1,1,1]), np.array([[-2,-1],[2,1]])) == [0,1], \"test case failed: diagonal separation\"\nassert logistic_regression(np.array([[-1,10],[-2,9],[-3,11],[4,10],[5,9],[6,11]]), np.array([0,0,0,1,1,1]), np.array([[-2,10],[5,10]])) == [0,1], \"test case failed: irrelevant second feature\"\nassert logistic_regression(np.array([[-20],[-15],[-10],[10],[15],[20]]), np.array([0,0,0,1,1,1]), np.array([[-12],[12]])) == [0,1], \"test case failed: large magnitude 1D\"\nassert logistic_regression(np.array([[-3,-2,0],[-2,-1,-1],[-4,-1,-2],[3,2,1],[2,1,1],[4,2,2]]), np.array([0,0,0,1,1,1]), np.array([[-3,-1,-1],[3,1,1]])) == [0,1], \"test case failed: sum of features\""}
{"task_id": 148, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List\nfrom typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    n = len(data)\n    if n == 0:\n        return -1\n    result = [0.0] * n\n    if alpha == 0:\n        result[0] = data[0]\n        for i in range(1, n):\n            result[i] = data[0]\n    elif alpha == 1:\n        for i in range(n):\n            result[i] = data[i]\n    else:\n        result[0] = data[0]\n        for k in range(1, n):\n            result[k] = (1 - alpha) * result[k - 1] + alpha * data[k]\n    return [round(val, 4) for val in result]\nassert exp_smoothing([10, 20, 30, 25, 15], 0.1) == [10.0, 11.0, 12.9, 14.11, 14.199], \"failed on basic example\"\nassert exp_smoothing([5, 4, 3, 2, 1], 0.3) == [5.0, 4.7, 4.19, 3.533, 2.7731], \"failed on decreasing list\"\nassert exp_smoothing([1, 1, 1, 1], 0.25) == [1.0, 1.0, 1.0, 1.0], \"failed on constant list\"\nassert exp_smoothing([3, 6, 9], 0.5) == [3.0, 4.5, 6.75], \"failed on alpha 0.5\"\nassert exp_smoothing([7, 8, 9], 0) == [7.0, 7.0, 7.0], \"failed on alpha 0\"\nassert exp_smoothing([7, 8, 9], 1) == [7.0, 8.0, 9.0], \"failed on alpha 1\"\nassert exp_smoothing([], 0.3) == -1, \"failed on empty data list\"\nassert exp_smoothing([1, 2, 3], -0.1) == -1, \"failed on negative alpha\"\nassert exp_smoothing([1, 2, 3], 1.1) == -1, \"failed on alpha greater than 1\"\nassert exp_smoothing([100], 0.6) == [100.0], \"failed on single element list\""}
{"task_id": 150, "completion_id": 0, "passed": true, "result": "passed", "solution": "from heapq import heappush, heappop\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n    (m, n) = (len(grid), len(grid[0]))\n    if grid[0][0] == 1 or grid[m - 1][n - 1] == 1:\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    heappush(heap, (0, 0, 0, 0, [(0, 0)]))\n    visited = {}\n    visited[0, 0] = 0\n    while heap:\n        (f_score, g_score, row, col, path) = heappop(heap)\n        if row == m - 1 and col == n - 1:\n            return path\n        if visited.get((row, col), float('inf')) < g_score:\n            continue\n        for (dr, dc) in directions:\n            (new_row, new_col) = (row + dr, col + dc)\n            if 0 <= new_row < m and 0 <= new_col < n and (grid[new_row][new_col] == 0):\n                new_g_score = g_score + 1\n                new_h_score = abs(new_row - (m - 1)) + abs(new_col - (n - 1))\n                new_f_score = new_g_score + new_h_score\n                if (new_row, new_col) not in visited or new_g_score < visited[new_row, new_col]:\n                    visited[new_row, new_col] = new_g_score\n                    heappush(heap, (new_f_score, new_g_score, new_row, new_col, path + [(new_row, new_col)]))\n    return -1\nassert find_shortest_path([[0]]) == [(0, 0)], \"failed on 1x1 open grid\"\nassert find_shortest_path([[1]]) == -1, \"failed when single cell is blocked\"\nassert find_shortest_path([[0,0],[0,0]]) == [(0,0),(0,1),(1,1)], \"failed on 2x2 open grid\"\nassert find_shortest_path([[0,1,0],[0,1,0],[0,0,0]]) == [(0,0),(1,0),(2,0),(2,1),(2,2)], \"failed on narrow corridor\"\nassert find_shortest_path([[0,0,0],[1,1,0],[0,0,0]]) == [(0,0),(0,1),(0,2),(1,2),(2,2)], \"failed on example grid\"\nassert find_shortest_path([[0,1,0],[1,1,0],[0,0,0]]) == -1, \"failed on disconnected grid\"\nassert len(find_shortest_path([[0]*5 for _ in range(5)])) == 9, \"failed on 5x5 clear grid length\"\nassert find_shortest_path([[0,0,1,0],[1,0,1,0],[1,0,0,0],[1,1,1,0]])[-1] == (3,3), \"failed to reach correct goal\"\nassert find_shortest_path([[0,1,1],[0,1,1],[0,0,0]]) == [(0,0),(1,0),(2,0),(2,1),(2,2)], \"failed on bottom route\""}
{"task_id": 151, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as\n        `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                      derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    if activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-X))\n    elif activation == 'tanh':\n        A = np.tanh(X)\n    elif activation == 'relu':\n        A = np.maximum(X, 0)\n    elif activation == 'softmax':\n        max_vals = np.max(X, axis=-1, keepdims=True)\n        exp_vals = np.exp(X - max_vals)\n        A = exp_vals / np.sum(exp_vals, axis=-1, keepdims=True)\n    else:\n        raise ValueError(f'Unsupported activation: {activation}')\n    if activation == 'sigmoid':\n        derivative = A * (1 - A)\n    elif activation == 'tanh':\n        derivative = 1 - A ** 2\n    elif activation == 'relu':\n        derivative = (X > 0).astype(float)\n    elif activation == 'softmax':\n        derivative = np.ones_like(A)\n    else:\n        raise ValueError(f'Unsupported activation: {activation}')\n    grad = upstream_grad * derivative\n    A_rounded = np.round(A, 4)\n    grad_rounded = np.round(grad, 4)\n    return (A_rounded, grad_rounded)\nassert (activation_forward_backward(np.array([[-1,0,1]]),\"sigmoid\",np.ones((1,3)))[0] == np.array([[0.2689,0.5,0.7311]])).all(), \"test-case 1 failed: forward sigmoid\"\nassert (activation_forward_backward(np.array([[-1,0,1]]),\"sigmoid\",np.ones((1,3)))[1] == np.array([[0.1966,0.25,0.1966]])).all(), \"test-case 2 failed: backward sigmoid\"\nassert (activation_forward_backward(np.array([[0,-0.5,0.5]]),\"tanh\",np.ones((1,3)))[0] == np.array([[0.0,-0.4621,0.4621]])).all(), \"test-case 3 failed: forward tanh\"\nassert (activation_forward_backward(np.array([[-3,0,3]]),\"relu\",np.ones((1,3)))[0] == np.array([[0.0,0.0,3.0]])).all(), \"test-case 5 failed: forward relu\"\nassert (activation_forward_backward(np.array([[-3,0,3]]),\"relu\",np.ones((1,3)))[1] == np.array([[0.0,0.0,1.0]])).all(), \"test-case 6 failed: backward relu\"\nassert (activation_forward_backward(np.array([[1.0,2.0,3.0]]),\"softmax\",np.full((1,3),2.0))[1] == np.full((1,3),2.0)).all(), \"test-case 8 failed: backward softmax\"\nA,G = activation_forward_backward(np.array([[-1,0,1],[2,-2,0.5]]),\"sigmoid\",np.ones((2,3))); assert (A == np.array([[0.2689,0.5,0.7311],[0.8808,0.1192,0.6225]])).all() and (G == np.array([[0.1966,0.25,0.1966],[0.105,0.105,0.235]])).all(), \"test-case 9 failed: full sigmoid example\"\nassert (activation_forward_backward(np.array([[10,-10]]),\"relu\",np.array([[0.3,0.7]]))[1] == np.array([[0.3,0.0]])).all(), \"test-case 10 failed: mixed relu gradient\""}
{"task_id": 152, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score([1, 0, 2, 2, 1], [1, 0, 1, 2, 0]) == 0.6, \"Test case failed: basic mixed correctness\"\nassert accuracy_score([0, 1, 2], [0, 1, 2]) == 1.0, \"Test case failed: perfect accuracy\"\nassert accuracy_score([1, 2, 3], [1, 2]) == -1, \"Test case failed: unequal length should return -1\"\nassert accuracy_score([0, 1, 1, 1], [1, 1, 1, 1]) == 0.75, \"Test case failed: one misclassification\"\nassert accuracy_score([1, 2, 3, 4], [4, 3, 2, 1]) == 0.0, \"Test case failed: zero accuracy\"\nassert accuracy_score([1], [1]) == 1.0, \"Test case failed: single element correct\"\nassert accuracy_score([0, 0, 0, 0, 0], [0, 1, 0, 1, 0]) == 0.6, \"Test case failed: majority correct\"\nimport numpy as np\nassert accuracy_score(np.array([1, 2, 1, 2]), np.array([1, 2, 2, 2])) == 0.75, \"Test case failed: numpy array input\"\nassert accuracy_score([], []) == -1, \"Test case failed: empty input\"\nassert accuracy_score([1, 1, 1, 0, 0], [1, 0, 1, 0, 0]) == 0.8, \"Test case failed: 80 percent accuracy\""}
{"task_id": 154, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    dist_sq = np.sum(X ** 2, axis=1)[:, np.newaxis] + np.sum(Y ** 2, axis=1)[np.newaxis, :] - 2 * np.dot(X, Y.T)\n    K = np.exp(-gamma * dist_sq)\n    return K.round(6).tolist()\nassert rbf_kernel(np.array([[1, 2], [3, 4]]), np.array([[1, 2], [5, 5]]), 0.1) == [[1.0, 0.082085], [0.449329, 0.606531]], \"test case failed: example\"\nassert rbf_kernel(np.array([[1, 2, 3]]), np.array([[1, 2, 4]]), 0.5) == [[0.606531]], \"test case failed: single samples\"\nassert rbf_kernel(np.array([[1]]), np.array([[3]]), 0.0) == [[1.0]], \"test case failed: gamma 0\"\nassert rbf_kernel(np.array([[0, 0], [1, 1], [2, 2]]), np.array([[0, 0], [2, 2]]), 1.0) == [[1.0, 0.000335], [0.135335, 0.135335], [0.000335, 1.0]], \"test case failed: multiple samples\"\nassert rbf_kernel(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), 0.5) == [[1.0, 0.367879], [0.367879, 1.0]], \"test case failed: symmetric matrix\"\nassert rbf_kernel(np.array([[1, 2]]), np.array([[1, 2]]), 10.0) == [[1.0]], \"test case failed: large gamma\"\nassert rbf_kernel(np.array([[0, 0]]), np.array([[100, 100]]), 0.01) == [[0.0]], \"test case failed: distant points\"\nassert rbf_kernel(np.zeros((2, 2)), np.ones((2, 2)), 0.2) == [[0.67032, 0.67032], [0.67032, 0.67032]], \"test case failed: zeros vs ones\"\nassert rbf_kernel(np.array([[0], [1], [2]]), np.array([[1], [2]]), 0.5) == [[0.606531, 0.135335], [1.0, 0.606531], [0.606531, 1.0]], \"test case failed: 1-D features\"\nassert rbf_kernel(np.array([[1, 2, 3]]), np.array([[1, 2, 3]])) == [[1.0]], \"test case failed: default gamma\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(hidden1, 0)\n    hidden2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(hidden2, 0)\n    action = np.dot(hidden2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [float(round(x, 4)) for x in action]\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 157, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return -1 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or -1 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if len(y_true) == 0:\n        return 0.0\n    matches = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    accuracy = matches / len(y_true)\n    return round(accuracy, 4)\nassert accuracy_score([1, 2, 3], [1, 2, 3]) == 1.0, \"test case failed: identical labels\"\nassert accuracy_score([1, 2, 3], [3, 2, 1]) == 0.3333, \"test case failed: one correct out of three\"\nassert accuracy_score([], []) == 0, \"test case failed: empty inputs\"\nassert accuracy_score([1], []) == -1, \"test case failed: length mismatch\"\nassert accuracy_score([0, 1, 2, 2, 1], [0, 0, 2, 2, 1]) == 0.8, \"test case failed: mixed correctness\"\nassert accuracy_score([\"cat\", \"dog\", \"cat\"], [\"cat\", \"cat\", \"cat\"]) == 0.6667, \"test case failed: string labels\"\nassert accuracy_score([True, False, True, False], [True, True, True, False]) == 0.75, \"test case failed: boolean labels\"\nassert accuracy_score(list(range(100)), list(range(100))) == 1.0, \"test case failed: large perfect match\"\nassert accuracy_score(list(range(100)), list(range(99)) + [101]) == 0.99, \"test case failed: one error in 100\"\nassert accuracy_score((1, 1, 1, 1), (1, 0, 1, 0)) == 0.5, \"test case failed: tuple input\""}
{"task_id": 158, "completion_id": 0, "passed": false, "result": "failed: failed: example case", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    n_features = X.shape[1]\n    A = np.eye(n_features) * alpha\n    beta_hat = np.linalg.inv(X.T @ X + A) @ X.T @ y\n    return [round(coef, 4) for coef in beta_hat]\nassert ridge_regression([[1, 2], [3, 4], [5, 6]], [1, 2, 3], 1.0, True) == [0.3529, 0.2353, 0.2353], \"failed: example case\"\nassert ridge_regression([[1], [2], [3]], [1, 2, 3], 0.0, False) == [1.0], \"failed: simple OLS without intercept\"\nassert ridge_regression([[1], [2], [3]], [1, 2, 3], 1.0, False) == [0.9333], \"failed: ridge without intercept, \u03b1=1\"\nassert ridge_regression([[1, 0], [0, 1]], [1, 1], 1.0, True) == [1.0, 0.0, 0.0], \"failed: tiny matrix with intercept\"\nassert ridge_regression([[1, 2], [3, 4]], [5, 6], 0.0, False) == [-4.0, 4.5], \"failed: 2\u00d72 OLS\"\nassert ridge_regression([[1, 2], [3, 4]], [5, 6], 1.0, False) == [0.2, 1.4857], \"failed: 2\u00d72 ridge \u03b1=1\"\nassert ridge_regression([[1], [2]], [1, 1], 1.0, True) == [1.0, 0.0], \"failed: intercept only fit\"\nassert ridge_regression([[0], [0], [0]], [1, 1, 1], 1.0, True) == [1.0, 0.0], \"failed: zero feature with intercept\"\nassert ridge_regression([[1], [1]], [2, 4], 1.0, False) == [2.0], \"failed: single feature duplicates\"\nassert ridge_regression([[2, 0], [0, 2]], [1, 2], 0.0, False) == [0.5, 1.0], \"failed: diagonal X matrix\""}
{"task_id": 159, "completion_id": 0, "passed": false, "result": "failed: failed on 1D standard normal at mean", "solution": "import numpy as np\nimport numpy as np\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    x_i = np.asarray(x_i)\n    mu = np.asarray(mu)\n    sigma = np.asarray(sigma)\n    d = x_i.shape[0]\n    if mu.shape != (d,) or sigma.shape != (d, d):\n        raise ValueError('Inputs must have correct dimensions.')\n    diff = x_i - mu\n    inv_sigma_diff = np.linalg.solve(sigma, diff)\n    quad_form = np.dot(diff, inv_sigma_diff)\n    (log_det_sigma, _) = np.linalg.slogdet(sigma)\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + log_det_sigma + quad_form)\n    return round(log_prob, 4)\nassert log_gaussian_pdf(np.array([0]), np.array([0]), np.array([[1]])) == -0.9189, \"failed on 1D standard normal at mean\"\nassert log_gaussian_pdf(np.array([1]), np.array([0]), np.array([[1]])) == -1.4189, \"failed on 1D standard normal at x=1\"\nassert log_gaussian_pdf(np.array([0,0]), np.array([0,0]), np.eye(2)) == -1.8379, \"failed on 2D standard normal at mean\"\nassert log_gaussian_pdf(np.array([1,1]), np.array([0,0]), np.eye(2)) == -2.8379, \"failed on 2D standard normal at [1,1]\"\nassert log_gaussian_pdf(np.array([2,0]), np.array([1,0]), np.eye(2)) == -2.3379, \"failed on 2D standard normal shifted point\"\nassert log_gaussian_pdf(np.array([0,0]), np.array([0,0]), np.diag([2,2])) == -2.5310, \"failed on 2D diagonal covariance det>1\"\nassert log_gaussian_pdf(np.array([1,0]), np.array([0,0]), np.diag([2,2])) == -2.7810, \"failed on 2D diagonal covariance at [1,0]\"\nassert log_gaussian_pdf(np.array([0,0,0]), np.array([0,0,0]), np.eye(3)) == -2.7568, \"failed on 3D standard normal at mean\"\nassert log_gaussian_pdf(np.array([0]), np.array([0]), np.array([[0.5]])) == -0.5724, \"failed on 1D variance 0.5 at mean\"\nassert log_gaussian_pdf(np.array([1]), np.array([0]), np.array([[0.5]])) == -1.5724, \"failed on 1D variance 0.5 at x=1\""}
{"task_id": 160, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)", "solution": "import numpy as np\nimport numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(m), X]\n    w = np.zeros(n)\n    b = 0.0\n    if fit_intercept:\n        residuals = y - (b + X @ w)\n        b = np.mean(residuals)\n    for _ in range(max_iters):\n        for j in range(1, n):\n            x_j = X[:, j]\n            w_j = 0.0\n            r_j = y - (b + X[:, :j] @ w[:j] + X[:, j:] @ w[j:])\n            numerator = np.dot(x_j, r_j)\n            denominator = np.sum(x_j ** 2)\n            if denominator == 0:\n                continue\n            a = numerator / denominator\n            tau = lambda_param * m\n            s = np.sign(a) * max(abs(a) - tau, 0)\n            w_j = s / denominator\n            w[j] = w_j\n        if fit_intercept:\n            residuals = y - (b + X @ w)\n            b = np.mean(residuals)\n    weights_list = [round(w[i], 4) for i in range(n)]\n    bias_float = round(b, 4)\n    return (weights_list, bias_float)\nassert fit_lasso(np.array([[1], [2], [3]]), np.array([2, 4, 6]), 0.0, 60) == ([2.0], 0.0), \"failed on simple perfect line\"\nassert fit_lasso(np.array([[0], [1], [2]]), np.array([1, 3, 5]), 0.0, 60) == ([2.0], 1.0), \"failed on line with intercept\"\nassert fit_lasso(np.array([[3], [3], [3]]), np.array([2, 2, 2]), 0.0, 30, False) == ([0.6667], 0.0), \"no intercept forces through origin\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 0.0, 50) == ([1.0, 2.0, 3.0], 0.0), \"identity design matrix\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 5.0, 50) == ([0.0, 0.0, 0.0], 2.0), \"\u03bb eliminates weights\"\nassert fit_lasso(np.array([[1, -1], [-1, 1]]), np.array([0, 0]), 0.0, 40) == ([0.0, 0.0], 0.0), \"all zeros target\""}
{"task_id": 161, "completion_id": 0, "passed": false, "result": "failed: test case 1 failed", "solution": "import numpy as np\nimport numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predicts binary class labels (1 or -1) using a Factorization Machine model.\n    \n    Parameters:\n    X (np.ndarray): 2D array of shape (m, n), containing m samples with n features each.\n    w0 (float): Scalar global bias.\n    w (np.ndarray): 1D array of length n, containing linear weights.\n    V (np.ndarray): 2D array of shape (n, k), containing latent factors for each feature.\n    \n    Returns:\n    list: A list of length m where each element is either 1 or -1 based on the prediction score.\n    \"\"\"\n    (m, n) = X.shape\n    k = V.shape[1]\n    linear_part = np.dot(X, w) + w0\n    XV = np.dot(X, V)\n    XV_squared = np.sum(XV ** 2, axis=1)\n    X_squared = X ** 2\n    V_squared = V ** 2\n    X_squared_V_squared = np.dot(X_squared, V_squared)\n    interaction_part = (XV_squared - X_squared_V_squared) / 2\n    scores = linear_part + interaction_part\n    labels = np.where(scores >= 0, 1, -1)\n    return labels.tolist()\nassert factorization_machine_predict(np.array([[1, 0], [0, 1]]), 0.0, np.array([-0.5, 0.5]), np.zeros((2, 1))) == [-1, 1], \"test case 1 failed\"\nassert factorization_machine_predict(np.array([[1, 1]]), 0.0, np.array([0.2, 0.2]), np.zeros((2, 1))) == [1], \"test case 2 failed\"\nassert factorization_machine_predict(np.array([[1, 0], [1, 1]]), -1.0, np.array([1.0, 0.0]), np.zeros((2, 1))) == [1, 1], \"test case 3 failed\"\nassert factorization_machine_predict(np.array([[1, 0, 1], [0, 1, 1]]), 0.5, np.array([0.2, -0.3, 0.8]), np.array([[0.1, 0.2], [0.0, -0.1], [0.5, 0.6]])) == [1, 1], \"test case 4 failed\"\nassert factorization_machine_predict(np.array([[1, 0, 1], [0, 1, 1]]), 0.0, np.zeros(3), np.array([[0.1, 0.2], [0.0, -0.1], [0.5, 0.6]])) == [1, -1], \"test case 5 failed\"\nassert factorization_machine_predict(np.array([[1, 1]]), 0.0, np.zeros(2), np.array([[1.0], [1.0]])) == [1], \"test case 6 failed\"\nassert factorization_machine_predict(np.array([[3, 4]]), 0.0, np.zeros(2), np.zeros((2, 1))) == [1], \"test case 7 failed\"\nassert factorization_machine_predict(np.array([[1, 2]]), -0.2, np.array([0.2, 0.1]), np.array([[0.1, 0.2], [0.3, 0.4]])) == [1], \"test case 8 failed\"\nassert factorization_machine_predict(np.array([[2, 1]]), 0.0, np.array([-0.4, -0.3]), np.zeros((2, 1))) == [-1], \"test case 9 failed\"\nassert factorization_machine_predict(np.array([[0, 0], [1, 0], [0, 1]]), 0.2, np.array([0.1, 0.1]), np.zeros((2, 1))) == [1, 1, 1], \"test case 10 failed\""}
{"task_id": 162, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, 'Shapes of Y_hat and Y do not match'\n    (m, C) = Y_hat.shape\n    Y_hat = Y_hat + epsilon\n    loss = -np.mean(np.sum(Y * np.log(Y_hat), axis=1))\n    gradient = (Y_hat - Y) / m\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [[round(g, 4) for g in row] for row in gradient]\n    return (loss_rounded, gradient_rounded)\nassert cross_entropy(np.array([[0.7, 0.2, 0.1], [0.1, 0.8, 0.1]]), np.array([[1, 0, 0], [0, 1, 0]])) == (0.2899, [[-0.15, 0.1, 0.05], [0.05, -0.1, 0.05]]), \"test case failed: example 1\"\nassert cross_entropy(np.array([[0.9, 0.1], [0.2, 0.8]]), np.array([[1, 0], [0, 1]])) == (0.1643, [[-0.05, 0.05], [0.1, -0.1]]), \"test case failed: example 2\"\nassert cross_entropy(np.array([[0.5, 0.5]]), np.array([[1, 0]])) == (0.6931, [[-0.5, 0.5]]), \"test case failed: example 3\"\nassert cross_entropy(np.array([[1.0, 0.0], [0.0, 1.0], [1.0, 0.0]]), np.array([[1, 0], [0, 1], [1, 0]])) == (0.0, [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]), \"test case failed: example 4\"\nassert cross_entropy(np.array([[0.2, 0.3, 0.5]]), np.array([[0, 0, 1]])) == (0.6931, [[0.2, 0.3, -0.5]]), \"test case failed: example 5\"\nassert cross_entropy(np.array([[0.0, 1.0]]), np.array([[1, 0]])) == (46.0517, [[-1.0, 1.0]]), \"test case failed: example 6\"\nassert cross_entropy(np.array([[0.25, 0.25, 0.25, 0.25], [0.1, 0.2, 0.3, 0.4]]), np.array([[0, 0, 0, 1], [0, 0, 1, 0]])) == (1.2951, [[0.125, 0.125, 0.125, -0.375], [0.05, 0.1, -0.35, 0.2]]), \"test case failed: example 7\"\nassert cross_entropy(np.array([[0.6, 0.4], [0.3, 0.7], [0.5, 0.5], [0.9, 0.1]]), np.array([[1, 0], [0, 1], [1, 0], [0, 1]])) == (0.9658, [[-0.1, 0.1], [0.075, -0.075], [-0.125, 0.125], [0.225, -0.225]]), \"test case failed: example 8\"\nassert cross_entropy(np.array([[1.0, 0.0]]), np.array([[1, 0]])) == (0.0, [[0.0, 0.0]]), \"test case failed: example 9\"\nassert cross_entropy(np.array([[0.1, 0.8, 0.1], [0.3, 0.4, 0.3], [0.2, 0.2, 0.6]]), np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])) == (0.646, [[0.0333, -0.0667, 0.0333], [-0.2333, 0.1333, 0.1], [0.0667, 0.0667, -0.1333]]), \"test case failed: example 10\""}
{"task_id": 163, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    n_samples = len(X)\n    X_poly = np.zeros((n_samples, degree + 1))\n    for i in range(n_samples):\n        for d in range(degree + 1):\n            X_poly[i, d] = X[i] ** d\n    beta = np.zeros(degree + 1)\n    if l1_ratio == 0:\n        lambda_tikhonov = reg_factor * (1 - l1_ratio)\n        diag_matrix = np.eye(degree + 1)\n        diag_matrix[0, 0] = 0\n        XTX = X_poly.T @ X_poly\n        XTY = X_poly.T @ y\n        XTX += lambda_tikhonov * diag_matrix\n        beta = np.linalg.inv(XTX) @ XTY\n    else:\n        for _ in range(n_iterations):\n            y_pred = X_poly @ beta\n            residuals = y_pred - y\n            grad = 2 / n_samples * (X_poly.T @ residuals) + reg_factor * (l1_ratio * np.sign(beta[1:]) + (1 - l1_ratio) * beta[1:])\n            beta -= learning_rate * grad\n    predictions = X_poly @ beta\n    return [round(pred, 4) for pred in predictions]\nassert elastic_net_regression([0, 1, 2, 3], [3, 5, 7, 9], 1, 0.0, 0.0, 0.01, 1000) == [3.0, 5.0, 7.0, 9.0], \"Test case 1 failed\"\nassert elastic_net_regression([0, 1, 2], [1, 3, 7], 2, 0.0, 0.0, 0.01, 1000) == [1.0, 3.0, 7.0], \"Test case 2 failed\"\nassert elastic_net_regression([-1, 0, 1], [1, 0, 1], 2, 0.0, 0.0, 0.01, 1000) == [1.0, 0.0, 1.0], \"Test case 3 failed\"\nassert elastic_net_regression([1, 2, 3], [6, 11, 18], 2, 0.0, 0.0, 0.01, 1000) == [6.0, 11.0, 18.0], \"Test case 4 failed\"\nassert elastic_net_regression([0.5, 1.5, 2.5], [1, 3, 5], 1, 0.0, 0.0, 0.01, 1000) == [1.0, 3.0, 5.0], \"Test case 5 failed\"\nassert elastic_net_regression([-1, 0, 1], [-1, 0, 1], 1, 0.0, 0.0, 0.01, 1000) == [-1.0, 0.0, 1.0], \"Test case 6 failed\"\nassert elastic_net_regression([0, 1, 2, 3], [5, 6, 7, 8], 1, 1.0, 0.0, 0.01, 1000) == [5.25, 6.0833, 6.9167, 7.75], \"Test case 7 failed\"\nassert elastic_net_regression([0, 1, 2], [1, 2, 3], 1, 0.5, 0.0, 0.01, 1000) == [1.2, 2.0, 2.8], \"Test case 8 failed\"\nassert elastic_net_regression([1, 3, 5], [2, 4, 6], 1, 2.0, 0.0, 0.01, 1000) == [2.4, 4.0, 5.6], \"Test case 9 failed\"\nassert elastic_net_regression([0, 1, 2], [5, 5, 5], 1, 0.0, 0.0, 0.01, 1000) == [5.0, 5.0, 5.0], \"Test case 10 failed\""}
{"task_id": 164, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Compute the binary classification log-loss (cross-entropy loss).\n    \n    Parameters:\n    - actual: list or numpy array of ground-truth labels (0 or 1)\n    - predicted: list or numpy array of predicted probabilities (in [0, 1])\n    \n    Returns:\n    - The average log-loss rounded to 6 decimal places\n    \"\"\"\n    epsilon = 1e-15\n    predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    log_loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    return round(log_loss, 6)\nassert compute_log_loss([1, 0, 1, 1], [0.9, 0.2, 0.8, 0.7]) == 0.227081, \"test case failed: basic example\"\nassert compute_log_loss([1, 0, 1, 0], [1, 0, 1, 0]) == 0.0, \"test case failed: perfect predictions\"\nassert compute_log_loss([1, 1, 0, 0], [0.5, 0.5, 0.5, 0.5]) == 0.693147, \"test case failed: fifty-fifty predictions\"\nassert compute_log_loss([1], [0.01]) == 4.60517, \"test case failed: single poor prediction\"\nassert compute_log_loss([0, 0, 0], [0.1, 0.2, 0.3]) == 0.228393, \"test case failed: all zeros\"\nassert compute_log_loss([1, 1, 1], [0.9, 0.8, 0.7]) == 0.228393, \"test case failed: all ones\"\nassert compute_log_loss([1, 0, 1, 0, 1], [0.9, 0.1, 0.8, 0.2, 0.99]) == 0.133412, \"test case failed: mixed high confidence\"\nassert compute_log_loss([0], [0.999]) == 6.907755, \"test case failed: near-certain wrong prediction\"\nassert compute_log_loss([1], [1e-15]) == 34.538776, \"test case failed: clipped to EPS\"\nassert compute_log_loss([1, 0, 1, 0, 0, 1], [0.6, 0.4, 0.8, 0.3, 0.2, 0.9]) == 0.321662, \"test case failed: general mixture\""}
{"task_id": 165, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if x_np.shape[0] != y_np.shape[0]:\n        return -1\n    diff = x_np != y_np\n    hamming_dist = np.sum(diff) / x_np.shape[0]\n    return round(hamming_dist, 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 166, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    b = 0.0\n    for iteration in range(max_iter):\n        errors = 0\n        for i in range(len(X_train)):\n            x_i = X_train[i]\n            y_i = y_train[i]\n            margin = y_i * (np.dot(w, x_i) + b)\n            if margin <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        if errors == 0:\n            break\n    predictions = []\n    for x in X_test:\n        score = np.dot(w, x) + b\n        if score == 0:\n            predictions.append(1)\n        else:\n            predictions.append(1 if score > 0 else -1)\n    return predictions\nassert perceptron_predict(np.array([[1], [2], [-2], [-1]]), np.array([1, 1, -1, -1]), np.array([[0.5], [-1.5]])) == [1, -1], \"test case 1 failed\"\nassert perceptron_predict(np.array([[2, 2], [1, 1], [-2, -2], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[3, 3], [-3, -3]])) == [1, -1], \"test case 2 failed\"\nassert perceptron_predict(np.array([[2, 1], [2, 2], [-1, 1], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [-3, 2]])) == [1, -1], \"test case 3 failed\"\nassert perceptron_predict(np.array([[3, 1], [2, 1], [-3, -1], [-2, -1]]), np.array([1, 1, -1, -1]), np.array([[5, 2], [-4, -2]])) == [1, -1], \"test case 4 failed\"\nassert perceptron_predict(np.array([[1, 2, 0], [1, 1, 0], [-1, -2, 0], [-1, -1, 0]]), np.array([1, 1, -1, -1]), np.array([[2, 3, 0], [-2, -3, 0]])) == [1, -1], \"test case 5 failed\"\nassert perceptron_predict(np.array([[1, 0], [1, 1], [-1, 0], [-1, -1]]), np.array([1, 1, -1, -1]), np.array([[0.5, 0.5], [-0.5, -0.1]])) == [1, -1], \"test case 6 failed\"\nassert perceptron_predict(np.array([[2], [3], [-1], [-2]]), np.array([1, 1, -1, -1]), np.array([[1], [-1]])) == [1, -1], \"test case 7 failed\"\nassert perceptron_predict(np.array([[4, 4], [1, 2], [-3, -3], [-2, -4]]), np.array([1, 1, -1, -1]), np.array([[6, 5], [-3, -2]])) == [1, -1], \"test case 8 failed\"\nassert perceptron_predict(np.array([[2, 2, 2], [1, 1, 1], [-2, -2, -2], [-1, -1, -1]]), np.array([1, 1, -1, -1]), np.array([[3, 3, 3], [-2, -2, -2]])) == [1, -1], \"test case 9 failed\"\nassert perceptron_predict(np.array([[0, 2], [0, 1], [0, -2], [0, -1]]), np.array([1, 1, -1, -1]), np.array([[0, 3], [0, -3]])) == [1, -1], \"test case 10 failed\""}
{"task_id": 167, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    m = len(y)\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    gradient = (y_hat_clipped - y) / m\n    rounded_loss = round(loss, 4)\n    rounded_gradient = [round(g, 4) for g in gradient]\n    return (rounded_loss, rounded_gradient)\nassert binary_cross_entropy(np.array([0.9, 0.2, 0.1, 0.7]), np.array([1, 0, 0, 1])) == (0.1976, [-0.025, 0.05, 0.025, -0.075]), \"test case failed: ([0.9,0.2,0.1,0.7],[1,0,0,1])\"\nassert binary_cross_entropy(np.array([0.5, 0.5]), np.array([1, 0])) == (0.6931, [-0.25, 0.25]), \"test case failed: ([0.5,0.5],[1,0])\"\nassert binary_cross_entropy(np.array([0.99, 0.01, 0.8, 0.2]), np.array([1, 0, 1, 0])) == (0.1166, [-0.0025, 0.0025, -0.05, 0.05]), \"test case failed: high-confidence predictions\"\nassert binary_cross_entropy(np.array([0.15, 0.85, 0.7]), np.array([0, 1, 1])) == (0.2272, [0.05, -0.05, -0.1]), \"test case failed: mixed predictions\"\nassert binary_cross_entropy(np.array([0.3]), np.array([0])) == (0.3567, [0.3]), \"test case failed: single sample negative\"\nassert binary_cross_entropy(np.array([0.8]), np.array([1])) == (0.2231, [-0.2]), \"test case failed: single sample positive\"\nassert binary_cross_entropy(np.array([0.4, 0.6]), np.array([0, 1])) == (0.5108, [0.2, -0.2]), \"test case failed: ([0.4,0.6],[0,1])\"\nassert binary_cross_entropy(np.array([0.01, 0.99]), np.array([0, 1])) == (0.0101, [0.005, -0.005]), \"test case failed: near-perfect predictions\"\nassert binary_cross_entropy(np.array([0.25, 0.75, 0.5, 0.5]), np.array([0, 1, 0, 1])) == (0.4904, [0.0625, -0.0625, 0.125, -0.125]), \"test case failed: varied predictions\"\nassert binary_cross_entropy(np.array([0.6, 0.6, 0.6]), np.array([1, 1, 1])) == (0.5108, [-0.1333, -0.1333, -0.1333]), \"test case failed: uniform over-confident negative\""}
{"task_id": 168, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"\n    Gaussian Naive Bayes classifier from scratch.\n\n    Parameters:\n    X_train (list[list[float]]): 2-D list of training feature vectors.\n    y_train (list[int]): 1-D list of class labels for the training samples.\n    X_test (list[list[float]]): 2-D list of test feature vectors to classify.\n\n    Returns:\n    list[int]: Predicted class labels for each test sample.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_features = X_train.shape[1]\n    n_classes = len(np.unique(y_train))\n    means = {}\n    variances = {}\n    priors = {}\n    for class_label in np.unique(y_train):\n        class_samples = X_train[y_train == class_label]\n        means[class_label] = np.mean(class_samples, axis=0)\n        variances[class_label] = np.var(class_samples, axis=0) + 1e-06\n        priors[class_label] = np.sum(y_train == class_label) / len(y_train)\n    predictions = []\n    for x in X_test:\n        log_probabilities = {}\n        for class_label in np.unique(y_train):\n            log_prior = np.log(priors[class_label])\n            log_likelihood = np.sum(np.log(1 / np.sqrt(2 * np.pi * variances[class_label]) * np.exp(-(x - means[class_label]) ** 2 / (2 * variances[class_label]))))\n            log_probability = log_prior + log_likelihood\n            log_probabilities[class_label] = log_probability\n        predicted_class = max(log_probabilities, key=log_probabilities.get)\n        predictions.append(predicted_class)\n    return predictions\nassert gaussian_naive_bayes([[1.0,20.0],[2.0,21.0],[3.0,22.0],[4.0,21.0],[120.0,180.0],[130.0,195.0],[125.0,190.0]],[0,0,0,0,1,1,1],[[2.5,20.5],[128.0,190.0]])==[0,1], \"test case failed: gaussian_naive_bayes(example)\"\nassert gaussian_naive_bayes([[1],[2],[3],[20],[22],[19]],[0,0,0,1,1,1],[[2],[21]])==[0,1], \"test case failed: gaussian_naive_bayes(one_dimensional)\"\nassert gaussian_naive_bayes([[0.1,0.1],[0.2,-0.1],[-0.1,0.05],[4.9,5.1],[5.2,4.9],[5.0,5.0]],[0,0,0,1,1,1],[[0,0],[5,5]])==[0,1], \"test case failed: gaussian_naive_bayes(two_clusters)\"\nassert gaussian_naive_bayes([[1,1],[2,2],[1,2],[7,7],[8,8],[7,8],[13,13],[14,14],[15,15]],[0,0,0,1,1,1,2,2,2],[[1.5,1.5],[7.5,7.5],[14,14.5]])==[0,1,2], \"test case failed: gaussian_naive_bayes(three_classes)\"\nassert gaussian_naive_bayes([[1,1],[1,1.1],[1,0.9],[10,10],[9.9,10],[10.1,10]],[0,0,0,1,1,1],[[1,1],[10,10]])==[0,1], \"test case failed: gaussian_naive_bayes(almost_zero_variance)\"\nassert gaussian_naive_bayes([[1,1,1],[1,1,2],[2,2,2],[10,10,10],[11,10,10],[10,11,10]],[0,0,0,1,1,1],[[1,1,1.5],[10.5,10,10]])==[0,1], \"test case failed: gaussian_naive_bayes(three_features)\"\nassert gaussian_naive_bayes([[-1,-1],[-2,-1.5],[-1.5,-2],[3,3],[2.5,3.5],[3.2,2.8]],[0,0,0,1,1,1],[[-1.2,-1.4],[3,3]])==[0,1], \"test case failed: gaussian_naive_bayes(negative_coordinates)\"\nassert gaussian_naive_bayes([[5],[5],[6],[14],[15],[15]],[0,0,0,1,1,1],[[5],[15]])==[0,1], \"test case failed: gaussian_naive_bayes(duplicated_values)\"\nassert gaussian_naive_bayes([[1,2],[1,2.1],[50,50],[49,51]],[0,0,1,1],[[1,2],[50,50]])==[0,1], \"test case failed: gaussian_naive_bayes(large_gap)\"\nassert gaussian_naive_bayes([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10],[20,20],[21,20],[20,21]],[0,0,0,1,1,1,2,2,2],[[0.5,0.5],[10.2,10.1],[20.3,20.5]])==[0,1,2], \"test case failed: gaussian_naive_bayes(three_classes_revisited)\""}
{"task_id": 169, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError(f'Unknown window type: {window}. Supported types are: hamming, hann, blackman_harris, generalized_cosine.')\n    if window == 'hamming':\n        (a0, a1) = (0.54, 0.46)\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        (a0, a1) = (0.5, 0.5)\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        if len(coefficients) == 0:\n            raise ValueError('Coefficients list cannot be empty for generalized_cosine window.')\n        window_func = lambda n: sum((coef * np.cos(2 * np.pi * k * n / (N - 1)) for (k, coef) in enumerate(coefficients)))\n    window_coefficients = [round(window_func(n), 4) for n in range(N)]\n    return window_coefficients\nassert generate_window(\"hamming\", 5) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: hamming, N=5\"\nassert generate_window(\"hann\", 5) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann, N=5\"\nassert generate_window(\"blackman_harris\", 5) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"test case failed: blackman_harris, N=5\"\nassert generate_window(\"generalized_cosine\", 5, coefficients=[0.5, -0.5]) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: generalized_cosine, N=5, coeff=[0.5,-0.5]\"\nassert generate_window(\"hamming\", 1) == [1.0], \"test case failed: hamming, N=1\"\nassert generate_window(\"hann\", 1) == [1.0], \"test case failed: hann, N=1\"\nassert generate_window(\"blackman_harris\", 1) == [1.0], \"test case failed: blackman_harris, N=1\"\nassert generate_window(\"hamming\", 6) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979, 0.08], \"test case failed: hamming, N=6\"\nassert generate_window(\"blackman_harris\", 3) == [0.0001, 1.0, 0.0001], \"test case failed: blackman_harris, N=3\"\nassert generate_window(\"generalized_cosine\", 4, coefficients=[1.0]) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine, N=4, coeff=[1.0]\""}
{"task_id": 171, "completion_id": 0, "passed": false, "result": "failed: only integer scalar arrays can be converted to a scalar index", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    unique_labels = set(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct labels.')\n    label_map = {label: idx for (idx, label) in enumerate(sorted(unique_labels))}\n    y_train_mapped = [label_map[y] for y in y_train]\n    X_train = np.array([np.append([1.0], features) for features in X_train])\n    X_test = np.array([np.append([1.0], features) for features in X_test])\n    if len(set(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    weights = np.random.randn(X_train.shape[1])\n    for epoch in range(epochs):\n        indices = np.random.permutation(len(X_train))\n        shuffled_X = X_train[indices]\n        shuffled_y = y_train_mapped[indices]\n        num_batches = len(X_train) // batch_size\n        for batch_idx in range(num_batches):\n            start = batch_idx * batch_size\n            end = start + batch_size\n            batch_X = shuffled_X[start:end]\n            batch_y = shuffled_y[start:end]\n            z = np.dot(batch_X, weights)\n            probabilities = 1 / (1 + np.exp(-z))\n            gradient = np.dot(batch_X.T, probabilities - batch_y) / batch_size\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    probabilities_test = 1 / (1 + np.exp(-z_test))\n    predictions = (probabilities_test >= 0.5).astype(int)\n    predictions_original = [list(label_map.keys())[list(label_map.values()).index(pred)] for pred in predictions]\n    return predictions_original\nassert logistic_regression_train_predict([[-3],[-2],[2],[3]],[0,0,1,1],[[-2.5],[2.5]]) == [0,1], \"failed on shifted 1D separation\"\nassert logistic_regression_train_predict([[1],[2],[3]],[0,0,0],[[10],[-10]]) == [0,0], \"failed on constant-zero label case\"\nassert logistic_regression_train_predict([[1],[2],[3]],[1,1,1],[[0],[4]]) == [1,1], \"failed on constant-one label case\"\nassert logistic_regression_train_predict([[1,1],[1,2],[2,3],[3,3]],[0,0,1,1],[[1,1.5],[3,4]]) == [0,1], \"failed on simple 2D separation\"\nassert logistic_regression_train_predict([[0,0,1],[1,1,1],[2,2,3],[3,3,3]],[0,0,1,1],[[0,0,0.5],[3,3,4]]) == [0,1], \"failed on 3D separation\"\nassert logistic_regression_train_predict([[1],[2],[3],[4]],[1,1,0,0],[[1.5],[3.5]]) == [1,0], \"failed on negative slope separation\"\nassert logistic_regression_train_predict([[0],[1],[10],[11]],[0,0,1,1],[[0.5],[10.5]]) == [0,1], \"failed on large gap separation\"\nassert logistic_regression_train_predict([[1,0],[0,1],[1,1],[2,2]],[0,0,1,1],[[0.2,0.2],[1.5,1.5]]) == [0,1], \"failed on mixed 2D separation\""}
{"task_id": 172, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    tanh_z = np.tanh(z_array)\n    grad = 1 - tanh_z ** 2\n    grad_rounded = np.round(grad, 4)\n    if np.isscalar(z):\n        return float(grad_rounded[0])\n    else:\n        return grad_rounded.tolist()\nassert tanh_grad(0) == 1.0, \"test case failed: tanh_grad(0)\"\nassert tanh_grad(1) == 0.42, \"test case failed: tanh_grad(1)\"\nassert tanh_grad(-1) == 0.42, \"test case failed: tanh_grad(-1)\"\nassert tanh_grad(2) == 0.0707, \"test case failed: tanh_grad(2)\"\nassert tanh_grad(-2) == 0.0707, \"test case failed: tanh_grad(-2)\"\nassert tanh_grad(0.5) == 0.7864, \"test case failed: tanh_grad(0.5)\"\nassert tanh_grad([0, 1, -1, 2]) == [1.0, 0.42, 0.42, 0.0707], \"test case failed: tanh_grad([0, 1, -1, 2])\"\nassert tanh_grad(np.array([4])) == [0.0013], \"test case failed: tanh_grad(np.array([4]))\"\nassert tanh_grad(np.array([-4])) == [0.0013], \"test case failed: tanh_grad(np.array([-4]))\"\nassert tanh_grad(np.array([0.123])) == [0.985], \"test case failed: tanh_grad(np.array([0.123]))\""}
{"task_id": 173, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    return sum((abs(ord(c) - ord(t)) for (c, t) in zip(candidate, target)))\nassert alphabetical_distance(\"HELLO\", \"WORLD\") == 42, \"Test 1 failed: alphabetical_distance('HELLO', 'WORLD')\"\nassert alphabetical_distance(\"ABC\", \"ABC\") == 0, \"Test 2 failed: alphabetical_distance('ABC', 'ABC')\"\nassert alphabetical_distance(\"aaaa\", \"bbbb\") == 4, \"Test 3 failed: alphabetical_distance('aaaa', 'bbbb')\"\nassert alphabetical_distance(\"abcd\", \"dcba\") == 8, \"Test 4 failed: alphabetical_distance('abcd', 'dcba')\"\nassert alphabetical_distance(\"HI\", \"HI\") == 0, \"Test 5 failed: alphabetical_distance('HI', 'HI')\"\nassert alphabetical_distance(\"AZ\", \"ZA\") == 50, \"Test 6 failed: alphabetical_distance('AZ', 'ZA')\"\nassert alphabetical_distance(\"\", \"\") == 0, \"Test 7 failed: alphabetical_distance('', '')\"\nassert alphabetical_distance(\"Genetic\", \"Algorithm\") == -1, \"Test 8 failed: alphabetical_distance('Genetic', 'Algorithm')\"\nassert alphabetical_distance(\"2023\", \"2024\") == 1, \"Test 9 failed: alphabetical_distance('2023', '2024')\"\nassert alphabetical_distance(\"Python3\", \"Python3\") == 0, \"Test 10 failed: alphabetical_distance('Python3', 'Python3')\""}
{"task_id": 174, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.array(predictions)\n    labels = np.array(labels)\n    loss = -np.sum(np.multiply(labels, np.log(predictions + 1e-10))) / predictions.shape[0]\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n    loss_rounded = round(loss, 4)\n    accuracy_rounded = round(accuracy, 4)\n    return (loss_rounded, accuracy_rounded)\nassert gan_discriminator_metrics(np.array([[0.9,0.1],[0.1,0.9]]), np.array([[1,0],[0,1]])) == (0.1054,1.0), \"test case failed: perfect separation\"\nassert gan_discriminator_metrics(np.array([[0.7,0.3],[0.6,0.4],[0.2,0.8]]), np.array([[1,0],[1,0],[0,1]])) == (0.3635,1.0), \"test case failed: mixed high confidence\"\nassert gan_discriminator_metrics(np.array([[0.4,0.6],[0.4,0.6]]), np.array([[1,0],[0,1]])) == (0.7136,0.5), \"test case failed: one correct, one wrong\"\nassert gan_discriminator_metrics(np.array([[0.5,0.5]]), np.array([[1,0]])) == (0.6931,1.0), \"test case failed: tie handled by argmax\"\nassert gan_discriminator_metrics(np.array([[0.2,0.8],[0.7,0.3]]), np.array([[1,0],[0,1]])) == (1.4067,0.0), \"test case failed: all misclassified\"\nassert gan_discriminator_metrics(np.array([[0.8,0.2],[0.8,0.2],[0.8,0.2],[0.8,0.2]]), np.array([[1,0],[1,0],[1,0],[1,0]])) == (0.2231,1.0), \"test case failed: uniform batch\"\nassert gan_discriminator_metrics(np.array([[0.1,0.7,0.2],[0.25,0.25,0.5]]), np.array([[0,1,0],[0,0,1]])) == (0.5249,1.0), \"test case failed: 3-class perfect\"\nassert gan_discriminator_metrics(np.array([[0.33,0.33,0.34]]), np.array([[1,0,0]])) == (1.1087,0.0), \"test case failed: wrong prediction with 3 classes\"\nassert gan_discriminator_metrics(np.array([[0.0,1.0]]), np.array([[0,1]])) == (0.0,1.0), \"test case failed: clipping at boundaries\"\nassert gan_discriminator_metrics(np.array([[0.6,0.4],[0.3,0.7],[0.8,0.2],[0.1,0.9],[0.55,0.45]]), np.array([[1,0],[0,1],[1,0],[0,1],[1,0]])) == (0.3588,1.0), \"test case failed: mixed confident batch\""}
{"task_id": 175, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    weights_array = np.array(weights)\n    penalty = C * np.sum(np.square(weights_array))\n    return round(penalty, 4)\nassert l2_penalty([1, 2, 3], 1) == 14.0, \"failed: l2_penalty([1, 2, 3], 1)\"\nassert l2_penalty(np.array([1, -2, 3]), 0.5) == 7.0, \"failed: l2_penalty(np.array([1,-2,3]),0.5)\"\nassert l2_penalty([], 2) == 0.0, \"failed: l2_penalty([],2)\"\nassert l2_penalty([0, 0, 0], 1.5) == 0.0, \"failed: l2_penalty([0,0,0],1.5)\"\nassert l2_penalty([1.1111, 2.2222], 0.3) == round(0.3 * ((1.1111**2) + (2.2222**2)), 4), \"failed: l2_penalty([1.1111,2.2222],0.3)\"\nassert l2_penalty(np.array([5]), 0.1) == 2.5, \"failed: l2_penalty([5],0.1)\"\nassert l2_penalty(np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4]), 0.05) == round(0.05 * np.sum(np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4]) ** 2), 4), \"failed: mixed range\"\nassert l2_penalty([10, 20, 30], 0.0) == 0.0, \"failed: zero C\"\nassert l2_penalty([1e-3, -1e-3], 1) == round(((1e-3)**2 + (1e-3)**2), 4), \"failed: small weights\"\nassert l2_penalty([3.1415, 2.7182], 0.25) == round(0.25 * ((3.1415**2) + (2.7182**2)), 4), \"failed: l2_penalty([pi,e],0.25)\""}
{"task_id": 176, "completion_id": 0, "passed": false, "result": "failed: failed OR data", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Implement AdaBoost with decision stumps from scratch.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples = len(y_train)\n    w = np.ones(n_samples) / n_samples\n    learners = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        best_alpha = 0\n        for feature_idx in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                for polarity in [1, -1]:\n                    stump = {'feature_index': feature_idx, 'threshold': threshold, 'polarity': polarity}\n                    predictions = np.zeros(n_samples)\n                    for i in range(n_samples):\n                        if (X_train[i, feature_idx] < threshold) == (polarity == 1):\n                            predictions[i] = 1\n                        else:\n                            predictions[i] = -1\n                    error = np.dot(w, predictions * y_train)\n                    if error == 0:\n                        return [1 if pred == 1 else 0 for pred in np.sign(np.dot(X_test, np.array(learners)))]\n                    if error < best_error:\n                        best_error = error\n                        best_stump = stump\n        if best_stump is None:\n            break\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        alphas.append(alpha)\n        learners.append(best_stump)\n        for i in range(n_samples):\n            prediction = 1 if (X_train[i, best_stump['feature_index']] < best_stump['threshold']) == (best_stump['polarity'] == 1) else -1\n            w[i] *= np.exp(-alpha * y_train[i] * prediction)\n        w /= np.sum(w)\n    votes = np.zeros(len(X_test))\n    for i in range(len(X_test)):\n        for stump in learners:\n            feature_idx = stump['feature_index']\n            threshold = stump['threshold']\n            polarity = stump['polarity']\n            prediction = 1 if (X_test[i, feature_idx] < threshold) == (polarity == 1) else -1\n            votes[i] += alpha * prediction\n    return [1 if vote > 0 else 0 for vote in votes]\nassert adaboost_predict([[0,0],[1,0],[0,1],[1,1]],[0,1,1,1],[[0,0],[1,1]],3)==[0,1],\"failed OR data\"\nassert adaboost_predict([[1,2],[2,3],[3,4],[4,5]],[0,0,1,1],[[1.5,2.5],[3.5,4.5]],4)==[0,1],\"failed linear split\"\nassert adaboost_predict([[1],[2],[3],[4]],[0,0,1,1],[[2],[4]],3)==[0,1],\"failed 1-D split\"\nassert adaboost_predict([[1],[2],[3]],[0,1,1],[[1],[3]],3)==[0,1],\"failed small 1-D\"\nassert adaboost_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,0,1],[[0,1],[1,1]],4)==[0,1],\"failed AND-like data\"\nassert adaboost_predict([[0],[2],[4],[6]],[0,0,1,1],[[1],[5]],5)==[0,1],\"failed even/odd split\"\nassert adaboost_predict([[1,1],[1,2],[2,1],[2,2]],[0,0,1,1],[[1,1],[2,2]],3)==[0,1],\"failed grid split\"\nassert adaboost_predict([[2],[3],[10],[12]],[0,0,1,1],[[2.5],[11]],4)==[0,1],\"failed distant clusters\"\nassert adaboost_predict([[0,5],[1,6],[2,7],[3,8]],[0,0,1,1],[[0.5,5.5],[2.5,7.5]],4)==[0,1],\"failed correlated features\""}
{"task_id": 177, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Union\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n\n    def compute_tanh(x):\n        return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))\n    if isinstance(z, (int, float)):\n        result = compute_tanh(z)\n        return round(result, 4)\n    elif isinstance(z, np.ndarray):\n        result = compute_tanh(z)\n        return result.round(4).tolist()\n    elif isinstance(z, list):\n        try:\n            z_array = np.array(z)\n        except ValueError:\n            flat_list = []\n            for item in z:\n                if isinstance(item, list):\n                    flat_list.extend(item)\n                else:\n                    flat_list.append(item)\n            z_array = np.array(flat_list)\n        result = compute_tanh(z_array)\n        return result.round(4).tolist()\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy.ndarray.')\nassert tanh(0) == 0.0, \"test case failed: tanh(0)\"\nassert tanh(1) == 0.7616, \"test case failed: tanh(1)\"\nassert tanh(-1) == -0.7616, \"test case failed: tanh(-1)\"\nassert tanh(np.array([-2, -1, 0, 1, 2])) == [-0.964, -0.7616, 0.0, 0.7616, 0.964], \"test case failed: tanh(np.array([-2,-1,0,1,2]))\"\nassert tanh([0.5, -0.5]) == [0.4621, -0.4621], \"test case failed: tanh([0.5,-0.5])\"\nassert tanh(np.array([5])) == [0.9999], \"test case failed: tanh(np.array([5]))\"\nassert tanh(np.array([10, -10])) == [1.0, -1.0], \"test case failed: tanh(np.array([10,-10]))\"\nassert tanh([[0, 1], [2, -2]]) == [[0.0, 0.7616], [0.964, -0.964]], \"test case failed: tanh([[0,1],[2,-2]])\"\nassert tanh(3) == 0.9951, \"test case failed: tanh(3)\"\nassert tanh(-3) == -0.9951, \"test case failed: tanh(-3)\""}
{"task_id": 178, "completion_id": 0, "passed": false, "result": "failed: test failed: particle_swarm_optimisation(2,1,1,2)", "solution": "import numpy as np\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not all((x > 0 for x in [n_dims, num_particles, num_iterations])):\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    particles = []\n    for _ in range(num_particles):\n        position = rng.uniform(lower_bound, upper_bound, size=n_dims)\n        velocity = rng.uniform(-1.0, 1.0, size=n_dims)\n        p_best = np.copy(position)\n        p_best_value = np.sum(position ** 2)\n        particles.append({'position': position, 'velocity': velocity, 'p_best': p_best, 'p_best_value': p_best_value})\n    g_best = np.copy(particles[0]['p_best'])\n    g_best_value = particles[0]['p_best_value']\n    for iteration in range(num_iterations):\n        for particle in particles:\n            x = particle['position']\n            v = particle['velocity']\n            r1 = rng.uniform(0, 1)\n            r2 = rng.uniform(0, 1)\n            new_v = w * v + c1 * r1 * (particle['p_best'] - x) + c2 * r2 * (g_best - x)\n            new_x = x + new_v\n            new_x = np.clip(new_x, lower_bound, upper_bound)\n            new_value = np.sum(new_x ** 2)\n            if new_value < particle['p_best_value']:\n                particle['p_best'] = np.copy(new_x)\n                particle['p_best_value'] = new_value\n            if new_value < g_best_value:\n                g_best = np.copy(new_x)\n                g_best_value = new_value\n            particle['position'] = new_x\n            particle['velocity'] = new_v\n    return round(g_best_value, 4)\nassert particle_swarm_optimisation(2, 30, 100, seed=42) == 0.0, \"test failed: particle_swarm_optimisation(2,30,100,42)\"\nassert particle_swarm_optimisation(5, 50, 200, seed=3) == 0.0, \"test failed: particle_swarm_optimisation(5,50,200,3)\"\nassert particle_swarm_optimisation(10, 60, 300, seed=7) == 0.0, \"test failed: particle_swarm_optimisation(10,60,300,7)\"\nassert particle_swarm_optimisation(3, 10, 150, seed=11) == 0.0, \"test failed: particle_swarm_optimisation(3,10,150,11)\"\nassert particle_swarm_optimisation(4, 80, 250, seed=19) == 0.0, \"test failed: particle_swarm_optimisation(4,80,250,19)\"\nassert particle_swarm_optimisation(6, 40, 120, seed=23) == 0.0, \"test failed: particle_swarm_optimisation(6,40,120,23)\"\nassert particle_swarm_optimisation(1, 20, 90, seed=29) == 0.0, \"test failed: particle_swarm_optimisation(1,20,90,29)\"\nassert particle_swarm_optimisation(8, 70, 300, seed=31) == 0.0, \"test failed: particle_swarm_optimisation(8,70,300,31)\"\nassert particle_swarm_optimisation(2, 1, 1, seed=2) == 0.0, \"test failed: particle_swarm_optimisation(2,1,1,2)\"\nassert particle_swarm_optimisation(-1, 30, 100) == -1, \"test failed: invalid input not handled\""}
{"task_id": 179, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nimport string\nimport re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    processed_line = line\n    if lowercase:\n        processed_line = processed_line.lower()\n    if filter_punctuation:\n        processed_line = processed_line.translate(str.maketrans('', '', string.punctuation))\n    processed_line = re.sub('\\\\s+', ' ', processed_line)\n    processed_line = processed_line.strip()\n    return list(processed_line)\nassert tokenize_chars(\"Hello, World!\") == ['h','e','l','l','o',' ','w','o','r','l','d'], \"failed: default params\"\nassert tokenize_chars(\"Hello, World!\", lowercase=False, filter_punctuation=True) == ['H','e','l','l','o',' ','W','o','r','l','d'], \"failed: keep case\"\nassert tokenize_chars(\"Hello, World!\", lowercase=False, filter_punctuation=False) == ['H','e','l','l','o',',',' ','W','o','r','l','d','!'], \"failed: keep case & punctuation\"\nassert tokenize_chars(\"  Hi   there  \") == ['h','i',' ','t','h','e','r','e'], \"failed: extra spaces\"\nassert tokenize_chars(\"!!!\") == [], \"failed: only punctuation removed\"\nassert tokenize_chars(\"!!!\", filter_punctuation=False) == ['!','!','!'], \"failed: keep punctuation only\"\nassert tokenize_chars(\"\") == [], \"failed: empty string\"\nassert tokenize_chars(None) == [], \"failed: None input\"\nassert tokenize_chars(\"A.B,C\", filter_punctuation=True) == ['a','b','c'], \"failed: punctuation removal with dots and commas\"\nassert tokenize_chars(\"MixED CaSe\") == ['m','i','x','e','d',' ','c','a','s','e'], \"failed: lowercasing mixed case\""}
{"task_id": 180, "completion_id": 0, "passed": false, "result": "failed: failed: majority vote", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_samples = len(X_train)\n    if k <= 0 or k > n_samples:\n        k = n_samples\n    predictions = []\n    for test_sample in X_test:\n        distances = [np.linalg.norm(np.array(test_sample) - np.array(x)) for x in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_y = [y_train[i] for i in nearest_indices]\n        if task == 'classification':\n            counter = Counter(nearest_y)\n            most_common = counter.most_common(1)\n            if len(most_common) > 1 and most_common[0][1] == most_common[1][1]:\n                candidates = [label for (label, count) in counter.items() if count == most_common[0][1]]\n                predictions.append(min(candidates))\n            else:\n                predictions.append(most_common[0][0])\n        elif task == 'regression':\n            mean_value = np.mean(nearest_y)\n            predictions.append(round(mean_value, 4))\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    return predictions\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 181, "completion_id": 0, "passed": false, "result": "failed: failed: 2-D classification", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    k = min(k, len(X_train))\n    predictions = []\n    for test_sample in X_test:\n        distances = [np.linalg.norm(np.array(test_sample) - np.array(sample)) for sample in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        if problem == 'classify':\n            most_common_label = Counter(nearest_labels).most_common(1)[0][0]\n            unique_labels = sorted(set(nearest_labels))\n            if len(unique_labels) > 1:\n                most_common_label = min(unique_labels)\n            predictions.append(most_common_label)\n        elif problem == 'regress':\n            mean_value = np.mean(nearest_labels)\n            predictions.append(round(mean_value, 4))\n    return predictions\nassert knn_predict([[1,1],[2,2],[0,0]],[0,0,1],[[1.2,1.2]],3,'classify')==[0],\"failed: basic classification example\"\nassert knn_predict([[1],[3],[7],[8],[9]],[1,1,3,3,3],[[2],[4]],3,'classify')==[1,1],\"failed: classification with k=3\"\nassert knn_predict([[1],[2],[3]],[2,4,6],[[1.5],[2.5]],2,'regress')==[3.0,5.0],\"failed: simple regression\"\nassert knn_predict([[1],[2],[3]],[2,4,6],[[2]],5,'regress')==[4.0],\"failed: k larger than training set\"\nassert knn_predict([[0,0],[10,10]],[\"A\",\"B\"],[[1,1],[8,8]],1,'classify')==[\"A\",\"B\"],\"failed: k=1 classification\"\nassert knn_predict([[0],[1],[2],[3]],[0,0,1,1],[[1.5]],4,'classify')==[0],\"failed: tie breaking numeric\"\nassert knn_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,1,1],[[0.9,0.9]],3,'classify')==[1],\"failed: 2-D classification\"\nassert knn_predict([[0,0],[0,1],[1,0],[1,1]],[0,1,1,2],[[0.2,0.2]],2,'regress')==[0.5],\"failed: 2-D regression\"\nassert knn_predict([[0],[1],[2],[3]],[\"cat\",\"dog\",\"cat\",\"dog\"],[[1.5]],4,'classify')==[\"cat\"],\"failed: tie breaking strings\"\nassert knn_predict([[i] for i in range(10)],[i**2 for i in range(10)],[[4.5]],3,'regress')==[16.6667],\"failed: larger regression dataset\""}
{"task_id": 182, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'ndim'", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Computes the polynomial kernel matrix between two data matrices X and Y.\n    \n    Parameters:\n    X (list or np.ndarray): First input matrix of shape (n, p).\n    Y (list or np.ndarray): Second input matrix of shape (m, p).\n    degree (int, optional): Degree of the polynomial kernel. Default is 2.\n    \n    Returns:\n    list: A nested Python list representing the polynomial kernel matrix K,\n          where K[i][j] = (X_i \u00b7 Y_j)^degree, rounded to four decimal places.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)) or not isinstance(Y, (list, np.ndarray)):\n        return -1\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    X_np = np.array(X)\n    Y_np = np.array(Y)\n    dot_product = X_np @ Y_np.T\n    kernel_matrix = dot_product ** degree\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nassert polynomial_kernel([[1, 2], [3, 4]], [[5, 6], [7, 8]], 2) == [[289.0, 529.0], [1521.0, 2809.0]], \"failed: basic 2\u00d72 degree-2 example\"\nassert polynomial_kernel([[1, 0], [0, 1]], [[1, 0], [0, 1]], 1) == [[1.0, 0.0], [0.0, 1.0]], \"failed: identity dot product degree 1\"\nassert polynomial_kernel([[1, 2, 3]], [[4, 5, 6]], 3) == [[32768.0]], \"failed: single row, degree 3\"\nassert polynomial_kernel([[0.5, 1.5]], [[2.0, 3.0], [1.0, 1.0]], 2) == [[30.25, 4.0]], \"failed: float inputs\"\nassert polynomial_kernel([[1, 2]], [[3, 4, 5]], 2) == -1, \"failed: mismatched feature dimensions should return -1\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], 0) == -1, \"failed: degree 0 should return -1\"\nassert polynomial_kernel([[1, -1], [2, -2]], [[3, -3], [4, -4]], 2) == [[36.0, 64.0], [144.0, 256.0]], \"failed: negatives and degree 2\"\nassert polynomial_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 1) == [[50.0], [122.0]], \"failed: rectangular result\"\nassert polynomial_kernel([[1, 2]], [[3, 4]], 1) == [[11.0]], \"failed: simple dot, degree 1\""}
{"task_id": 183, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        (fW, fH, in_channels, _) = weight_shape\n        fan_in = fW * fH * in_channels\n    else:\n        raise ValueError('Unsupported weight shape dimensionality. Only 2 (dense) or 4 (convolutional) are supported.')\n    limit = np.sqrt(6.0 / fan_in)\n    weights = np.random.uniform(-limit, limit, size=weight_shape)\n    return weights\nw = he_uniform((2, 3)); assert w.shape == (2, 3) and np.all(w >= -np.sqrt(6/2)) and np.all(w <= np.sqrt(6/2)), \"test case failed: he_uniform((2, 3))\"\nw = he_uniform((5, 10)); assert w.shape == (5, 10) and np.all(w >= -np.sqrt(6/5)) and np.all(w <= np.sqrt(6/5)), \"test case failed: he_uniform((5, 10))\"\nw = he_uniform((3, 3, 1, 32)); assert w.shape == (3, 3, 1, 32) and np.all(w >= -np.sqrt(6/9)) and np.all(w <= np.sqrt(6/9)), \"test case failed: he_uniform((3, 3, 1, 32))\"\nw = he_uniform((5, 5, 16, 32)); assert w.shape == (5, 5, 16, 32) and np.all(w >= -np.sqrt(6/400)) and np.all(w <= np.sqrt(6/400)), \"test case failed: he_uniform((5, 5, 16, 32))\"\nw = he_uniform((1, 1, 64, 128)); assert w.shape == (1, 1, 64, 128) and np.all(w >= -np.sqrt(6/64)) and np.all(w <= np.sqrt(6/64)), \"test case failed: he_uniform((1, 1, 64, 128))\"\nw = he_uniform((10, 1)); assert w.shape == (10, 1) and np.all(w >= -np.sqrt(6/10)) and np.all(w <= np.sqrt(6/10)), \"test case failed: he_uniform((10, 1))\"\nw = he_uniform((7, 7, 3, 64)); assert w.shape == (7, 7, 3, 64) and np.all(w >= -np.sqrt(6/147)) and np.all(w <= np.sqrt(6/147)), \"test case failed: he_uniform((7, 7, 3, 64))\"\nw = he_uniform((128, 256)); assert w.shape == (128, 256) and np.all(w >= -np.sqrt(6/128)) and np.all(w <= np.sqrt(6/128)), \"test case failed: he_uniform((128, 256))\"\nw = he_uniform((4, 4)); assert w.shape == (4, 4) and np.all(w >= -np.sqrt(6/4)) and np.all(w <= np.sqrt(6/4)), \"test case failed: he_uniform((4, 4))\"\nw = he_uniform((3, 3, 3, 3)); assert w.shape == (3, 3, 3, 3) and np.all(w >= -np.sqrt(6/27)) and np.all(w <= np.sqrt(6/27)), \"test case failed: he_uniform((3, 3, 3, 3))\""}
{"task_id": 184, "completion_id": 0, "passed": false, "result": "failed: failed: split on second feature", "solution": "import numpy as np\nimport numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    tree = _build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = []\n    for sample in X_test:\n        prediction = _predict(sample, tree)\n        predictions.append(prediction)\n    return predictions\ndef _build_tree(X, y, max_depth=None, depth=0):\n    \"\"\"Recursively build a decision tree.\"\"\"\n    if len(np.unique(y)) == 1:\n        return {'type': 'leaf', 'value': y[0]}\n    if max_depth is not None and depth >= max_depth:\n        majority_class = np.bincount(y).argmax()\n        return {'type': 'leaf', 'value': majority_class}\n    best_split = _find_best_split(X, y)\n    if best_split is None:\n        majority_class = np.bincount(y).argmax()\n        return {'type': 'leaf', 'value': majority_class}\n    (left_X, left_y, right_X, right_y) = _split_data(X, y, best_split)\n    left_child = _build_tree(left_X, left_y, max_depth=max_depth, depth=depth + 1)\n    right_child = _build_tree(right_X, right_y, max_depth=max_depth, depth=depth + 1)\n    return {'type': 'internal', 'feature': best_split['feature'], 'threshold': best_split['threshold'], 'left': left_child, 'right': right_child}\ndef _find_best_split(X, y):\n    \"\"\"Find the best feature and threshold to split on.\"\"\"\n    best_gain = -1\n    best_split = None\n    for feature_idx in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        sorted_values = X[sorted_indices, feature_idx]\n        for i in range(1, len(sorted_values)):\n            threshold = (sorted_values[i - 1] + sorted_values[i]) / 2\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            parent_gini = _gini_impurity(y)\n            left_gini = _gini_impurity(left_y)\n            right_gini = _gini_impurity(right_y)\n            weighted_gini = len(left_y) / len(y) * left_gini + len(right_y) / len(y) * right_gini\n            gain = parent_gini - weighted_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_split = {'feature': feature_idx, 'threshold': threshold}\n    return best_split\ndef _split_data(X, y, best_split):\n    \"\"\"Split the data based on the best split.\"\"\"\n    feature_idx = best_split['feature']\n    threshold = best_split['threshold']\n    left_mask = X[:, feature_idx] <= threshold\n    right_mask = X[:, feature_idx] > threshold\n    left_X = X[left_mask]\n    left_y = y[left_mask]\n    right_X = X[right_mask]\n    right_y = y[right_mask]\n    return (left_X, left_y, right_X, right_y)\ndef _gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a node.\"\"\"\n    probabilities = np.bincount(y) / len(y)\n    return 1 - np.sum(probabilities ** 2)\ndef _predict(sample, tree):\n    \"\"\"Predict the class of a sample using the decision tree.\"\"\"\n    if tree['type'] == 'leaf':\n        return tree['value']\n    feature = tree['feature']\n    threshold = tree['threshold']\n    if sample[feature] <= threshold:\n        return _predict(sample, tree['left'])\n    else:\n        return _predict(sample, tree['right'])\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5],[5.5]])) == [0,0,1], \"failed: simple 1-D split\"\nassert decision_tree_predict(np.array([[0,0],[1,1],[2,2],[9,9],[10,10],[11,11]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[10,10]])) == [0,1], \"failed: two-dimensional clearly separated\"\nassert decision_tree_predict(np.array([[1],[2],[3],[10],[11],[12],[20],[21],[22]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[2.5],[11.5],[21]])) == [0,1,2], \"failed: three-class 1-D split\"\nassert decision_tree_predict(np.array([[1],[2],[3]]), np.array([1,1,1]), np.array([[0],[5]])) == [1,1], \"failed: all labels identical\"\nassert decision_tree_predict(np.array([[0.1],[0.2],[0.3],[0.4],[0.5],[0.6]]), np.array([0,0,0,1,1,1]), np.array([[0.25],[0.55]])) == [0,1], \"failed: threshold around 0.35\"\nassert decision_tree_predict(np.array([[5.1,3.5,1.4],[4.9,3.0,1.4],[6.2,3.4,5.4],[5.9,3.0,5.1]]), np.array([0,0,1,1]), np.array([[5.0,3.4,1.5],[6.0,3.1,5.0]])) == [0,1], \"failed: example in task description\"\nassert decision_tree_predict(np.array([[0,2],[1,2],[2,2],[0,10],[1,10],[2,10]]), np.array([0,0,0,1,1,1]), np.array([[0,3],[0,9]])) == [0,1], \"failed: split on second feature\"\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1]), np.array([[1.5],[4.5]])) == [0,1], \"failed: odd number of samples\"\nassert decision_tree_predict(np.array([[1],[1],[2],[2],[3],[3],[10],[10],[11],[11]]), np.array([0,0,0,0,0,0,1,1,1,1]), np.array([[1],[10],[3]])) == [0,1,0], \"failed: duplicates in features\"\nassert decision_tree_predict(np.array([[0],[5],[10],[15]]), np.array([0,1,2,3]), np.array([[12],[1]])) == [2,0], \"failed: multi-class, arbitrary values\""}
{"task_id": 185, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    X = np.array(X)\n    if X.size == 0:\n        raise ValueError('Got an empty matrix.')\n    if X.ndim == 1:\n        n_samples = 1\n        n_features = X.size\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    return (n_samples, n_features)\nassert dataset_shape([[1, 2], [3, 4]]) == (2, 2), \"test case failed: dataset_shape([[1, 2], [3, 4]])\"\nassert dataset_shape([1, 2, 3, 4]) == (1, 4), \"test case failed: dataset_shape([1, 2, 3, 4])\"\nassert dataset_shape(np.array([[1, 2, 3], [4, 5, 6]])) == (2, 3), \"test case failed: dataset_shape(np.array([[1, 2, 3], [4, 5, 6]]))\"\nassert dataset_shape(np.zeros((3, 4, 5))) == (3, 20), \"test case failed: dataset_shape(np.zeros((3, 4, 5)))\"\nassert dataset_shape([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) == (2, 4), \"test case failed: nested 3-D list\"\nassert dataset_shape(np.ones((1,))) == (1, 1), \"test case failed: dataset_shape(np.ones((1,)))\"\nassert dataset_shape(np.arange(12).reshape(3, 2, 2)) == (3, 4), \"test case failed: dataset_shape(np.arange(12).reshape(3, 2, 2))\"\nassert dataset_shape([[7]]) == (1, 1), \"test case failed: dataset_shape([[7]])\"\nassert dataset_shape(np.array([[0, 1]])) == (1, 2), \"test case failed: dataset_shape(np.array([[0, 1]]))\"\nassert dataset_shape(np.random.rand(5, 3)) == (5, 3), \"test case failed: dataset_shape(np.random.rand(5, 3))\""}
{"task_id": 186, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    mean_y = np.mean(y_train)\n    rounded_mean = round(mean_y, 4)\n    num_test_samples = len(X_test)\n    predictions = [rounded_mean] * num_test_samples\n    return predictions\nassert baseline_mean_predict(np.array([[1],[2],[3]]), np.array([2, 4, 6]), np.array([[4],[5]])) == [4.0, 4.0], \"test case failed: basic integer example\"\nassert baseline_mean_predict([[1],[2],[3],[4]], [1, 1, 1, 1], [[3],[4]]) == [1.0, 1.0], \"test case failed: identical targets\"\nassert baseline_mean_predict([[1],[2],[3]], [1.5, 2.5, 4.0], [[0],[1],[2]]) == [2.6667, 2.6667, 2.6667], \"test case failed: mean needs rounding\"\nassert baseline_mean_predict([], [1.1111, 2.2222, 3.3333], [[1],[2]]) == [2.2222, 2.2222], \"test case failed: 4-decimal precision targets\"\nassert baseline_mean_predict([[1],[2],[3]], [-1, -2, -3], [[10]]) == [-2.0], \"test case failed: negative targets\"\nassert baseline_mean_predict([[1],[2],[3]], [5, 6, 7], np.empty((0, 1))) == [], \"test case failed: empty X_test\"\nassert baseline_mean_predict([[42]], [10], [[4],[5],[6]]) == [10.0, 10.0, 10.0], \"test case failed: single training sample\"\nassert baseline_mean_predict([[1,2,3],[4,5,6]], [0, 10], [[7,8,9],[9,8,7]]) == [5.0, 5.0], \"test case failed: multi-feature X_test\"\nassert baseline_mean_predict([[1],[2]], [3, 5], [[9],[9],[9]]) == [4.0, 4.0, 4.0], \"test case failed: pure python lists\"\nassert baseline_mean_predict(np.random.rand(1000, 5), list(range(1,1001)), np.zeros((5,5))) == [500.5]*5, \"test case failed: large dataset\""}
{"task_id": 188, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    if not 0 <= min_epsilon < max_epsilon:\n        return -1\n    if decay_rate <= 0:\n        return -1\n    if step < 0:\n        return -1\n    epsilon = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n    epsilon = max(epsilon, min_epsilon)\n    return round(epsilon, 4)\nassert epsilon_decay(0.9, 0.1, 0.005, 0) == 0.9, \"failed: step 0 should return max_epsilon\"\nassert epsilon_decay(0.9, 0.1, 0.005, 100) == 0.5852, \"failed: step 100, \u03b5 should be 0.5852\"\nassert epsilon_decay(0.9, 0.1, 0.005, 200) == 0.3943, \"failed: step 200, \u03b5 should be 0.3943\"\nassert epsilon_decay(0.9, 0.1, 0.005, 500) == 0.1657, \"failed: step 500, \u03b5 should be 0.1657\"\nassert epsilon_decay(0.9, 0.1, 0.005, 1000) == 0.1054, \"failed: step 1000, \u03b5 should be 0.1054\"\nassert epsilon_decay(0.9, 0.1, 0.005, 10000) == 0.1, \"failed: \u03b5 must never drop below \u03b5_min\"\nassert epsilon_decay(0.5, 0.5, 0.01, 10) == -1, \"failed: \u03b5_max equal to \u03b5_min should be invalid\"\nassert epsilon_decay(0.5, 0.6, 0.01, 10) == -1, \"failed: \u03b5_max smaller than \u03b5_min should be invalid\"\nassert epsilon_decay(0.9, 0.1, -0.01, 10) == -1, \"failed: negative decay_rate should be invalid\"\nassert epsilon_decay(0.9, 0.1, 0.005, -5) == -1, \"failed: negative step should be invalid\""}
{"task_id": 189, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef batch_resample(X, new_dim, mode='bilinear'):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_channels) = X.shape\n    (out_rows, out_cols) = new_dim\n    out = np.zeros((n_ex, out_rows, out_cols, in_channels))\n    for i in range(n_ex):\n        img = X[i, :, :, :]\n        resampled_img = resample_image(img, new_dim, mode)\n        out[i, :, :, :] = resampled_img\n    return np.round(out, 4)\ndef resample_image(img, new_dim, mode):\n    \"\"\"Resample a single image using bilinear or nearest-neighbor interpolation.\"\"\"\n    (in_rows, in_cols) = img.shape[:2]\n    (out_rows, out_cols) = new_dim\n    scale_row = out_rows / in_rows\n    scale_col = out_cols / in_cols\n    if mode == 'bilinear':\n        return bilinear_resample(img, scale_row, scale_col)\n    elif mode == 'neighbor':\n        return neighbor_resample(img, scale_row, scale_col)\n    else:\n        raise NotImplementedError(f'Unrecognized resampling mode: {mode}')\ndef bilinear_resample(img, scale_row, scale_col):\n    \"\"\"Apply bilinear interpolation to an image.\"\"\"\n    from scipy.ndimage import zoom\n    return zoom(img, (scale_row, scale_col, 1), order=1)\ndef neighbor_resample(img, scale_row, scale_col):\n    \"\"\"Apply nearest-neighbor interpolation to an image.\"\"\"\n    from scipy.ndimage import zoom\n    return zoom(img, (scale_row, scale_col, 1), order=0)\nassert np.allclose(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(4,4)),np.array([[[[0.    ],[0.3333],[0.6667],[1.    ]],[[0.6667],[1.    ],[1.3333],[1.6667]],[[1.3333],[1.6667],[2.    ],[2.3333]],[[2.    ],[2.3333],[2.6667],[3.    ]]]])), \"test case failed: upsample bilinear 2x2->4x4\"\nassert np.array_equal(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(2,2)),np.array([[[[0.],[1.]],[[2.],[3.]]]])), \"test case failed: identity bilinear\"\nassert np.array_equal(batch_resample(np.array([[[[0.],[1.]],[[2.],[3.]]]]),(4,4),\"neighbor\"),np.array([[[[0.],[0.],[1.],[1.]],[[0.],[0.],[1.],[1.]],[[2.],[2.],[3.],[3.]],[[2.],[2.],[3.],[3.]]]])), \"test case failed: neighbor 2x2->4x4\"\nassert np.array_equal(batch_resample(np.arange(16.).reshape(1,4,4,1),(2,2)),np.array([[[[0.],[3.]],[[12.],[15.]]]])), \"test case failed: downsample 4x4->2x2 bilinear\"\nassert batch_resample(np.arange(12.).reshape(1,2,2,3),(3,3),\"neighbor\").shape == (1,3,3,3), \"test case failed: shape mismatch for multichannel\"\nassert np.array_equal(batch_resample(np.arange(12.).reshape(1,2,2,3),(3,3),\"neighbor\")[0,0,0],np.arange(12.).reshape(1,2,2,3)[0,0,0]), \"test case failed: neighbour first pixel value\"\nassert batch_resample(np.zeros((5,2,2,1)),(1,1)).shape == (5,1,1,1), \"test case failed: batch size preserved\"\nassert np.array_equal(batch_resample(np.zeros((1,3,3,2)),(5,5)),np.zeros((1,5,5,2))), \"test case failed: zeros remain zeros\"\nassert batch_resample(np.zeros((1,3,3,2)),(1,1),\"neighbor\").shape == (1,1,1,2), \"test case failed: neighbour 1x1 shape\"\nassert np.array_equal(batch_resample(np.array([[[[5.]]]]),(1,1)),np.array([[[[5.]]]])), \"test case failed: trivial 1x1 image\""}
{"task_id": 190, "completion_id": 0, "passed": false, "result": "failed: '<' not supported between instances of 'int' and 'NoneType'", "solution": "import numpy as np\nimport numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimizes the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def gini_impurity(node_y):\n        if len(node_y) == 0:\n            return 0.0\n        (unique_classes, counts) = np.unique(node_y, return_counts=True)\n        p = counts / len(node_y)\n        return 1 - np.sum(p ** 2)\n    whole_gini = gini_impurity(y)\n    best_gini = whole_gini\n    best_feature = -1\n    best_threshold = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.sort(np.unique(feature_values))\n        for val in unique_values:\n            left_mask = feature_values <= val\n            right_mask = feature_values > val\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            gini_left = gini_impurity(left_y)\n            gini_right = gini_impurity(right_y)\n            n_left = len(left_y)\n            n_right = len(right_y)\n            n_total = n_left + n_right\n            g_split = n_left / n_total * gini_left + n_right / n_total * gini_right\n            if g_split < best_gini:\n                best_gini = g_split\n                best_feature = feature_idx\n                best_threshold = val\n            elif np.abs(g_split - best_gini) < 1e-12 and feature_idx < best_feature:\n                best_gini = g_split\n                best_feature = feature_idx\n                best_threshold = val\n            elif np.abs(g_split - best_gini) < 1e-12 and val < best_threshold:\n                best_gini = g_split\n                best_feature = feature_idx\n                best_threshold = val\n    if best_feature == -1:\n        return (-1, None, round(whole_gini, 4))\n    return (best_feature, best_threshold, round(best_gini, 4))\nassert best_gini_split([[2], [3], [10], [19]], [0, 0, 1, 1]) == (0, 3, 0.0), \"test 1 failed\"\nassert best_gini_split([[2,3],[1,5],[3,2],[4,4]], [0,0,1,1]) == (0, 2, 0.0), \"test 2 failed\"\nassert best_gini_split([[1],[2],[3],[4]], [0,1,0,1]) == (0, 1, 0.3333), \"test 4 failed\"\nassert best_gini_split([[1,10], [2,1], [3,1], [4,10]], [0,0,1,1]) == (0, 2, 0.0), \"test 5 failed\"\nassert best_gini_split([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]], [0,0,0,1,1,1]) == (0, 3, 0.0), \"test 6 failed\"\nassert best_gini_split([[1],[2],[3]], [0,1,2]) == (0, 1, 0.3333), \"test 7 failed\"\nassert best_gini_split([[1,10],[2,10],[1,1],[2,1]], [0,0,1,1]) == (1, 1, 0.0), \"test 8 failed\"\nassert best_gini_split([[1],[1],[1]], [0,1,0]) == (-1, None, 0.4444), \"test 9 failed\"\nassert best_gini_split([[1,5,9],[2,6,8],[3,7,7],[4,8,6]], [0,0,1,1]) == (0, 2, 0.0), \"test 10 failed\""}
{"task_id": 191, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(np.array(x) - np.array(y))), 'chebyshev': lambda x, y: np.max(np.abs(np.array(x) - np.array(y))), 'cosine': lambda x, y: 1 - np.dot(np.array(x), np.array(y)) / (np.linalg.norm(np.array(x)) * np.linalg.norm(np.array(y)))}\n    if name not in supported_metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        try:\n            x_arr = np.array(x)\n            y_arr = np.array(y)\n            if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n                return -1\n            if x_arr.ndim != 1 or y_arr.ndim != 1:\n                return -1\n            if len(x_arr) == 0 or len(y_arr) == 0:\n                return -1\n            if len(x_arr) != len(y_arr):\n                return -1\n            if name == 'cosine':\n                if np.linalg.norm(x_arr) == 0 or np.linalg.norm(y_arr) == 0:\n                    return -1\n        except (ValueError, TypeError):\n            return -1\n        distance = supported_metrics[name](x, y)\n        return round(distance, 4)\n    return d\nassert metric('euclidean')([1,2,3],[4,5,6]) == 5.1962, \"test failed: metric('euclidean')([1,2,3],[4,5,6])\"\nassert metric('manhattan')([1,2,3],[4,5,6]) == 9.0, \"test failed: metric('manhattan')([1,2,3],[4,5,6])\"\nassert metric('chebyshev')([1,2,3],[4,5,6]) == 3.0, \"test failed: metric('chebyshev')([1,2,3],[4,5,6])\"\nassert metric('cosine')([1,0],[0,1]) == 1.0, \"test failed: metric('cosine')([1,0],[0,1])\"\nassert metric('cosine')([1,2],[1,2]) == 0.0, \"test failed: metric('cosine')([1,2],[1,2])\"\nassert metric('euclidean')([0,0],[0,0]) == 0.0, \"test failed: metric('euclidean')([0,0],[0,0])\"\nassert metric('manhattan')([3,4,5],[3,4,5]) == 0.0, \"test failed: metric('manhattan') identical vectors\"\nassert metric('unknown')([1,2],[3,4]) == -1, \"test failed: metric('unknown') should be -1\"\nassert metric('euclidean')([1,2,3],[1,2]) == -1, \"test failed: metric('euclidean') mismatched length\"\nassert metric('cosine')([0,0,0],[1,0,0]) == -1, \"test failed: metric('cosine') zero-norm vector\""}
{"task_id": 193, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'size'", "solution": "import numpy as np\nimport numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(z / (1 + abs(z)), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        if not z.size:\n            return []\n        result = np.array([x / (1 + abs(x)) for x in z])\n        return [round(num, 4) for num in result]\n    else:\n        raise TypeError('Input must be a scalar (int or float), or a list/NumPy array of real numbers.')\nassert softsign(3) == 0.75, \"test case failed: softsign(3)\"\nassert softsign(-4) == -0.8, \"test case failed: softsign(-4)\"\nassert softsign(0) == 0.0, \"test case failed: softsign(0)\"\nassert softsign([1, -2, 0]) == [0.5, -0.6667, 0.0], \"test case failed: softsign([1, -2, 0])\"\nassert softsign(np.array([10, -10])) == [0.9091, -0.9091], \"test case failed: softsign(np.array([10, -10]))\"\nassert softsign([]) == [], \"test case failed: softsign([])\"\nassert softsign(np.array([])).__eq__([]), \"test case failed: softsign(np.array([]))\"\nassert softsign([0.5]) == [0.3333], \"test case failed: softsign([0.5])\"\nassert softsign(np.array([1000])) == [0.999], \"test case failed: softsign(np.array([1000]))\"\nassert softsign([-1, -2, -3]) == [-0.5, -0.6667, -0.75], \"test case failed: softsign([-1, -2, -3])\""}
{"task_id": 194, "completion_id": 0, "passed": false, "result": "failed: test 2 failed: example from description", "solution": "import numpy as np\nimport numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    if G is None:\n        G = [0.0 for _ in range(len(weights))]\n    for i in range(len(gradients)):\n        G[i] += gradients[i] ** 2\n    new_weights = []\n    for (w, g) in zip(weights, gradients):\n        denominator = np.sqrt(G[i] + eps)\n        delta = learning_rate * g / denominator\n        new_weights.append(round(w - delta, 6))\n    new_G = [round(g, 6) for g in G]\n    return (new_weights, new_G)\nassert adagrad_update([1.0], [0.1], None, 0.1) == ([0.9], [0.01]), \"test 1 failed: first single-dim step\"\nassert adagrad_update([3.0, 4.0], [0.1, -0.2], None, 0.1) == ([2.9, 4.1], [0.01, 0.04]), \"test 2 failed: example from description\"\nassert adagrad_update([2.0], [-0.5], None, 0.05) == ([2.05], [0.25]), \"test 3 failed: negative gradient single-dim\"\nassert adagrad_update([1.5, -2.0], [0.2, 0.1], [0.04, 0.01], 0.1) == ([1.429289, -2.070711], [0.08, 0.02]), \"test 4 failed: update with existing G\"\nassert adagrad_update([2.0, -3.5], [0.0, 0.0], [0.01, 0.04], 0.1) == ([2.0, -3.5], [0.01, 0.04]), \"test 5 failed: zero gradient should keep weights\"\nassert adagrad_update([0.9], [0.05], [0.01], 0.1) == ([0.855279], [0.0125]), \"test 6 failed: second single-dim step\"\nassert adagrad_update([1.0, 2.0, 3.0], [1.0, -1.0, 0.5], None, 0.05) == ([0.95, 2.05, 2.95], [1.0, 1.0, 0.25]), \"test 7 failed: three-dim first step\"\nassert adagrad_update([10.0, -10.0], [1.0, 1.0], [100.0, 100.0], 1.0) == ([9.900496, -10.099504], [101.0, 101.0]), \"test 8 failed: large prior G\"\nassert adagrad_update([0.0, 0.0], [-2.0, -2.0], None, 0.1) == ([0.1, 0.1], [4.0, 4.0]), \"test 9 failed: negative gradient both dims\"\nassert adagrad_update([0.95, 2.05, 2.95], [0.1, 0.1, 0.1], [1.0, 1.0, 0.25], 0.05) == ([0.945025, 2.045025, 2.940194], [1.01, 1.01, 0.26]), \"test 10 failed: three-dim second step\""}
{"task_id": 197, "completion_id": 0, "passed": false, "result": "failed: name 'SimpleNamespace' is not defined", "solution": "import numpy as np\nfrom itertools import product\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    action_space = env.action_space\n    if cont_action:\n        return ([np.inf] if not md_action else [np.inf] * action_space.shape[0], None, action_space.shape[0])\n    if md_action:\n        n_actions_per_dim = []\n        for space in action_space.spaces:\n            n_actions_per_dim.append(space.n)\n        is_continuous = any((isinstance(space, np.ndarray) for space in action_space.spaces))\n        if is_continuous:\n            n_actions_per_dim = [np.inf] * len(n_actions_per_dim)\n            return (n_actions_per_dim, None, len(n_actions_per_dim))\n        action_ids = list(product(*[range(space.n) for space in action_space.spaces]))\n        return (n_actions_per_dim, action_ids, len(n_actions_per_dim))\n    else:\n        n_actions_per_dim = [action_space.n]\n        return (n_actions_per_dim, list(range(action_space.n)), 1)\nassert action_stats(SimpleNamespace(action_space=D(4)), False, False) == ([4], [0, 1, 2, 3], 1), \"failed test 1\"\nexpected_ids = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(3)])), True, False) == ([2, 3], expected_ids, 2), \"failed test 2\"\nmix_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), C(3)]))\nassert action_stats(mix_env, True, False) == ([2, np.inf], None, 2), \"failed test 3\"\nassert action_stats(SimpleNamespace(action_space=C(5)), False, True) == ([np.inf], None, 1), \"failed test 4\"\ncont_env = SimpleNamespace(action_space=SimpleNamespace(shape=(4,)))\nassert action_stats(cont_env, True, True) == ([np.inf, np.inf, np.inf, np.inf], None, 4), \"failed test 5\"\nassert action_stats(SimpleNamespace(action_space=D(1)), False, False) == ([1], [0], 1), \"failed test 6\"\nids_3d = list(product(range(2), repeat=3))\ntri_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(2), D(2)]))\nassert action_stats(tri_env, True, False) == ([2, 2, 2], ids_3d, 3), \"failed test 7\"\nids_31 = list(product(range(3), range(1)))\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(3), D(1)])), True, False) == ([3, 1], ids_31, 2), \"failed test 8\"\nmix2_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[C(2), D(3)]))\nassert action_stats(mix2_env, True, False) == ([np.inf, 3], None, 2), \"failed test 9\"\nassert action_stats(SimpleNamespace(action_space=D(10)), False, False) == ([10], list(range(10)), 1), \"failed test 10\""}
{"task_id": 198, "completion_id": 0, "passed": false, "result": "failed: name 'phi1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        return [[0.0 for _ in range(1)] for _ in range(V)]\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        doc_words = corpus[d]\n        N_d = len(doc_words)\n        for n in range(N_d):\n            word_index = doc_words[n]\n            for t in range(T):\n                beta[word_index, t] += doc_phi[n, t]\n    beta = beta / beta.sum(axis=0, keepdims=True)\n    beta_rounded = np.round(beta, 4)\n    beta_rounded = beta_rounded / beta_rounded.sum(axis=0, keepdims=True)\n    result = []\n    for v in range(V):\n        row = beta_rounded[v].tolist()\n        result.append(row)\n    return result\nassert update_beta(phi1, corpus1, 3) == [[0.3684, 0.0968], [0.4737, 0.6774], [0.1579, 0.2258]], \"failed: test case 1\"\nassert update_beta(phi2, corpus2, 2) == [[0.6667], [0.3333]], \"failed: test case 2\"\nassert update_beta(phi3, corpus3, 3) == [[0.1429, 0.5], [0.3571, 0.3125], [0.5, 0.1875]], \"failed: test case 3\"\nassert update_beta(phi4, corpus4, 2) == [[1.0, 0.0], [0.0, 1.0]], \"failed: test case 4\"\nassert update_beta(phi5, corpus5, 2) == [[0.3333, 0.3333], [0.6667, 0.6667]], \"failed: test case 5\"\nassert update_beta(phi6, corpus6, 3) == [[0.9474, 0.0952, 0.0952], [0.0263, 0.8571, 0.0476], [0.0263, 0.0476, 0.8571]], \"failed: test case 6\"\nassert update_beta(phi7, corpus7, 1) == [[1.0, 1.0]], \"failed: test case 7\"\nassert update_beta(phi8, corpus8, 4) == [[0.0, 0.0], [0.3333, 0.6364], [0.6667, 0.3636], [0.0, 0.0]], \"failed: test case 8\"\nassert update_beta(phi9, corpus9, 2) == [[0.5, 0.5], [0.5, 0.5]], \"failed: test case 9\"\nassert update_beta(phi10, corpus10, 2) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"failed: test case 10\""}
{"task_id": 199, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    left_mask = X < value\n    right_mask = X >= value\n    y_left = y[left_mask].tolist()\n    y_right = y[right_mask].tolist()\n    return (y_left, y_right)\nassert split(np.array([2,3,1,5,4]), np.array([0,1,0,1,0]), 3) == ([0,0],[1,1,0]), \"failed: basic split\"\nassert split(np.array([1,2,3,4]), np.array([10,20,30,40]), 4) == ([10,20,30],[40]), \"failed: threshold at max element\"\nassert split(np.array([1,2,3,4]), np.array([10,20,30,40]), 0) == ([],[10,20,30,40]), \"failed: threshold below min\"\nassert split(np.array([1,1,1,1]), np.array([7,8,9,10]), 1) == ([],[7,8,9,10]), \"failed: all equal to threshold\"\nassert split(np.array([1,1,1,1]), np.array([7,8,9,10]), 2) == ([7,8,9,10],[]), \"failed: all below threshold\"\nassert split(np.array([-5,-2,0,3]), np.array([5,4,3,2]), 0) == ([5,4],[3,2]), \"failed: negative values\"\nassert split(np.array([0.1,0.2,0.3]), np.array([1,2,3]), 0.25) == ([1,2],[3]), \"failed: float threshold\"\nassert split(np.array([5]), np.array([42]), 5) == ([],[42]), \"failed: single element equal threshold\"\nassert split(np.array([5]), np.array([42]), 10) == ([42],[]), \"failed: single element below threshold\"\nassert split(np.array([5]), np.array([42]), 0) == ([],[42]), \"failed: single element above threshold\""}
{"task_id": 200, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    flat_weights = np.array(weights).ravel()\n    l1_sum = np.sum(np.abs(flat_weights))\n    l1_penalty = C * l1_sum\n    return round(l1_penalty, 4)\nassert compute_l1_penalty([1.5, -2.0, 0.0, 3.2], 0.1) == 0.67, \"failed on simple 1-D list\"\nassert compute_l1_penalty([[1, -2], [3, -4]], 0.25) == 2.5, \"failed on 2-D list\"\nassert compute_l1_penalty([], 1.0) == 0.0, \"failed on empty list\"\nassert compute_l1_penalty([0, 0, 0], 10.0) == 0.0, \"failed on all zeros\"\nassert compute_l1_penalty([-3.3, 4.4], 1.0) == 7.7, \"failed on negative values\"\nassert compute_l1_penalty(np.array([0.3333, -0.6666]), 3) == 2.9997, \"failed on numpy 1-D array\"\nassert compute_l1_penalty(np.array([[1.1, -1.1], [2.2, -2.2]]), 0.5) == 3.3, \"failed on numpy 2-D array\"\nassert compute_l1_penalty([1]*1000, 0.001) == 1.0, \"failed on large list\"\nassert compute_l1_penalty([[[]]], 5) == 0.0, \"failed on deeply nested empty list\"\nassert compute_l1_penalty([[0.12345]], 2) == 0.2469, \"failed on rounding rule\""}
{"task_id": 201, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    if axis is None:\n        norm = np.linalg.norm(p)\n        scale = min(1.0, m / (norm + 1e-12))\n        clipped_p = p * scale\n    else:\n        norms = np.linalg.norm(p, axis=axis, keepdims=True)\n        scale = np.minimum(1.0, m / (norms + 1e-12))\n        clipped_p = p * scale\n    clipped_p_rounded = np.round(clipped_p, 4)\n    return clipped_p_rounded.tolist()\nassert max_norm(np.array([[1.,2.]]),3,1)==[[1.0,2.0]],\"failed: norms already below m\"\nassert max_norm(np.array([[3.,4.],[5.,12.]]),4,1)==[[2.4,3.2],[1.5385,3.6923]],\"failed: axis 1 clip\"\nassert max_norm(np.array([5.,0.]),3,0)==[3.0,0.0],\"failed: 1D vector clip\"\nassert max_norm(np.array([3.,4.]),5,0)==[3.0,4.0],\"failed: exact norm equals m\"\nassert max_norm(np.zeros((2,3)),1,-1)==[[0.0,0.0,0.0],[0.0,0.0,0.0]],\"failed: zero tensor remains zero\"\nassert max_norm(np.array([[-3.,-4.]]),5,1)==[[-3.0,-4.0]],\"failed: negative values no change\"\nassert max_norm(np.array([[1.,1.],[2.,2.]]),2,None)==[[0.6325,0.6325],[1.2649,1.2649]],\"failed: axis None\"\nassert max_norm(np.array([[0.,0.],[1.,1.]]),1,1)==[[0.0,0.0],[0.7071,0.7071]],\"failed: row with zero norm\""}
{"task_id": 202, "completion_id": 0, "passed": false, "result": "failed: list.remove(x): x not in list", "solution": "import numpy as np\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = X[:k].copy()\n    medoid_indices = list(range(k))\n\n    def total_cost(medoids, X):\n        cost = 0\n        for x in X:\n            min_dist = float('inf')\n            for (m_idx, m) in enumerate(medoids):\n                dist = np.linalg.norm(x - m)\n                if dist < min_dist:\n                    min_dist = dist\n            cost += min_dist\n        return cost\n\n    def find_best_swap(medoids, X, medoid_indices):\n        best_swap = None\n        best_reduction = 0\n        n_non_medoids = n - k\n        for non_medoid_idx in range(n):\n            if non_medoid_idx in medoid_indices:\n                continue\n            for medoid_idx in medoid_indices:\n                new_medoids = medoids.copy()\n                new_medoids[medoid_idx] = X[non_medoid_idx]\n                old_cost = total_cost(medoids, X)\n                new_cost = total_cost(new_medoids, X)\n                reduction = old_cost - new_cost\n                if reduction > best_reduction:\n                    best_reduction = reduction\n                    best_swap = (medoid_idx, non_medoid_idx)\n        return best_swap\n    while True:\n        best_swap = find_best_swap(medoids, X, medoid_indices)\n        if best_swap is None:\n            break\n        (medoid_idx, non_medoid_idx) = best_swap\n        medoids[medoid_idx] = X[non_medoid_idx]\n        medoid_indices[medoid_idx] = non_medoid_idx\n        medoid_indices.remove(medoid_idx)\n    labels = []\n    for x in X:\n        min_dist = float('inf')\n        closest_medoid = 0\n        for (i, m) in enumerate(medoids):\n            dist = np.linalg.norm(x - m)\n            if dist < min_dist:\n                min_dist = dist\n                closest_medoid = i\n            elif dist == min_dist:\n                pass\n        labels.append(closest_medoid)\n    return labels\nassert pam_clustering(np.array([[0,0]]),1)==[0],\"failed: single sample, k=1\"\nassert pam_clustering(np.array([[0,0],[1,0],[0,1],[5,5],[6,5],[5,6]]),2)==[0,0,0,1,1,1],\"failed: two well-separated clusters\"\nassert pam_clustering(np.array([[0],[10]]),2)==[0,1],\"failed: two samples, k=2\"\nassert pam_clustering(np.array([[1],[2],[3]]),3)==[0,1,2],\"failed: k equals number of samples\"\nassert pam_clustering(np.array([[-1,-1],[0,0],[1,1]]),1)==[0,0,0],\"failed: k=1, centre should move\"\nassert pam_clustering(np.array([[0],[1],[2],[3],[4]]),1)==[0,0,0,0,0],\"failed: all points one cluster\"\nassert pam_clustering(np.array([[1],[4],[7],[10]]),4)==[0,1,2,3],\"failed: each point its own cluster\""}
{"task_id": 203, "completion_id": 0, "passed": false, "result": "failed: Test-1 failed: probs=[0.1,0.2,0.7]", "solution": "import numpy as np\nimport numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    probs = np.array(probs)\n    if np.any(probs < 0):\n        return -1\n    if not np.isclose(np.sum(probs), 1.0, atol=1e-12):\n        return -1\n    N = len(probs)\n    scaled_probs = probs * N\n    small = []\n    large = []\n    for i in range(N):\n        if scaled_probs[i] < 1:\n            small.append(i)\n        else:\n            large.append(i)\n    prob_table = np.zeros(N)\n    alias_table = np.zeros(N, dtype=int)\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        scaled_probs[g] += scaled_probs[l] - 1\n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n    for i in large:\n        prob_table[i] = 1.0\n    prob_table = np.round(prob_table, 4).tolist()\n    alias_table = alias_table.tolist()\n    return (prob_table, alias_table)\nassert build_alias_table([0.1, 0.2, 0.7]) == ([0.3, 0.6, 1.0], [2, 2, 0]), \"Test-1 failed: probs=[0.1,0.2,0.7]\"\nassert build_alias_table([0.5, 0.5]) == ([1.0, 1.0], [0, 0]), \"Test-2 failed: probs=[0.5,0.5]\"\nassert build_alias_table([0.0, 1.0]) == ([0.0, 1.0], [1, 0]), \"Test-3 failed: probs=[0,1]\"\nassert build_alias_table([0.6, 0.4]) == ([1.0, 0.8], [0, 0]), \"Test-4 failed: probs=[0.6,0.4]\"\nassert build_alias_table([0.05, 0.9, 0.05]) == ([0.15, 1.0, 0.15], [1, 0, 1]), \"Test-5 failed: probs=[0.05,0.9,0.05]\"\nassert build_alias_table([0.25, 0.25, 0.25, 0.25]) == ([1.0, 1.0, 1.0, 1.0], [0, 0, 0, 0]), \"Test-6 failed: uniform 4\"\nimport numpy as np\nassert build_alias_table(np.array([0.2, 0.8])) == ([0.4, 1.0], [1, 0]), \"Test-7 failed: numpy input\"\nassert build_alias_table([0.2] * 5) == ([1.0] * 5, [0, 0, 0, 0, 0]), \"Test-8 failed: uniform 5\"\nassert build_alias_table([0.2, -0.1, 0.9]) == -1, \"Test-9 failed: negative prob not detected\"\nassert build_alias_table([0.3, 0.3, 0.3]) == -1, \"Test-10 failed: sum != 1 not detected\""}
{"task_id": 204, "completion_id": 0, "passed": false, "result": "failed: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    if not isinstance(data, list):\n        data = list(data)\n    missing_count = 0\n    for item in data:\n        if item is None or np.isnan(item):\n            missing_count += 1\n    return missing_count\nassert num_missing([1, 2, None, 4]) == 1, \"failed on [1, 2, None, 4]\"\nassert num_missing([np.nan, np.nan]) == 2, \"failed on two nans\"\nassert num_missing([]) == 0, \"failed on empty list\"\nassert num_missing([None, np.nan, 5]) == 2, \"failed on mixed missing\"\nassert num_missing(list(range(10))) == 0, \"failed on no missing\"\nassert num_missing([None, None, None]) == 3, \"failed on all missing\"\nassert num_missing(np.array([1.0, np.nan, 2.0])) == 1, \"failed on numpy array\"\nassert num_missing([float('nan'), 'nan', None]) == 2, \"failed on string 'nan' handling\"\nassert num_missing([True, False, None]) == 1, \"failed on boolean values\"\nassert num_missing([3.0, 4.5, 6.7]) == 0, \"failed on all valid numbers\""}
{"task_id": 205, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    seen = set()\n    result = []\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            env_id = item['id']\n            if env_id not in seen:\n                seen.add(env_id)\n                result.append(env_id)\n    return result\nassert get_gym_environs([]) == [], \"test case failed: empty list\"\nassert get_gym_environs([{\"id\": \"CartPole-v1\"}]) == [\"CartPole-v1\"], \"test case failed: single element\"\nassert get_gym_environs([{\"id\": \"A\"}, {\"id\": \"B\"}, {\"id\": \"A\"}]) == [\"A\", \"B\"], \"test case failed: duplicates must be removed\"\nassert get_gym_environs([{\"name\": \"NoId\"}, {\"id\": \"X\"}]) == [\"X\"], \"test case failed: items without 'id' key are ignored\"\nassert get_gym_environs([{\"id\": \"X\"}, 42, \"string\", (1, 2), {\"id\": \"Y\"}]) == [\"X\", \"Y\"], \"test case failed: non-dict elements should be ignored\"\nassert get_gym_environs([{\"id\": \"D\"}, {\"id\": \"C\"}, {\"id\": \"B\"}, {\"id\": \"A\"}, {\"id\": \"C\"}, {\"id\": \"D\"}]) == [\"D\", \"C\", \"B\", \"A\"], \"test case failed: preserve order of first occurrence\"\nassert get_gym_environs([{\"id\": 1}, {\"id\": 2}, {\"id\": 1}]) == [1, 2], \"test case failed: ids can be non-string\"\nassert get_gym_environs([{\"id\": \"same\"}, {\"id\": \"same\"}, {\"id\": \"same\"}]) == [\"same\"], \"test case failed: all ids identical\"\nassert get_gym_environs([{\"id\": \"X\"}, {\"name\": \"n/a\"}, {\"id\": \"Y\"}, {\"foo\": \"bar\"}, {\"id\": \"X\"}]) == [\"X\", \"Y\"], \"test case failed: mixed valid and invalid elements\"\nassert get_gym_environs([{\"id\": \"first\"}, {\"ignore\": \"me\"}, {\"id\": \"second\"}, {\"id\": \"third\"}, {\"id\": \"second\"}]) == [\"first\", \"second\", \"third\"], \"test case failed: general behaviour\""}
{"task_id": 206, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    if actual_np.ndim != 1 or predicted_np.ndim != 1:\n        return -1\n    if len(actual_np) != len(predicted_np):\n        return -1\n    mae = np.mean(np.abs(actual_np - predicted_np))\n    return round(mae, 4)\nassert absolute_error([1, 2, 3], [1, 2, 3]) == 0.0, \"Test case failed: perfect prediction\"\nassert absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.5, \"Test case failed: sample data\"\nassert absolute_error([1, 2, 3], [2, 2, 2]) == 0.6667, \"Test case failed: rounding check\"\nassert absolute_error([1, 2], [1]) == -1, \"Test case failed: length mismatch\"\nassert absolute_error([-1, -2, -3], [-1.5, -2.5, -2.5]) == 0.5, \"Test case failed: negative values\"\nassert absolute_error(list(range(10)), [0] * 10) == 4.5, \"Test case failed: larger range\"\nassert absolute_error([5], [3]) == 2.0, \"Test case failed: single element\"\nassert absolute_error(np.array([1, 2, 3, 4]), [2, 3, 4, 5]) == 1.0, \"Test case failed: mixed input types\"\nassert absolute_error([1, 1, 1], [0.9999, 1.0001, 1.0002]) == 0.0001, \"Test case failed: small decimals\"\nassert absolute_error([10, 20, 30, 40], [8, 25, 28, 41]) == 2.5, \"Test case failed: general case\""}
{"task_id": 207, "completion_id": 0, "passed": false, "result": "failed: failed: invalid divisibility (28,28),(3,3),(2,2),(0,0)", "solution": "\ndef convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    (H, W) = (img_height, img_width)\n    (KH, KW) = filter_shape\n    (SH, SW) = stride\n    (PH, PW) = padding\n    if SH <= 0 or SW <= 0:\n        return -1\n    try:\n        OH = (H + 2 * PH - KH) // SH + 1\n        OW = (W + 2 * PW - KW) // SW + 1\n    except ZeroDivisionError:\n        return -1\n    if OH <= 0 or OW <= 0:\n        return -1\n    return (OH, OW)\nassert convolution_shape(32, 32, (3, 3), (1, 1), (1, 1)) == (32, 32), \"failed: case (32,32),(3,3),(1,1),(1,1)\"\nassert convolution_shape(32, 32, (5, 5), (1, 1), (0, 0)) == (28, 28), \"failed: case (32,32),(5,5),(1,1),(0,0)\"\nassert convolution_shape(64, 64, (7, 7), (1, 1), (3, 3)) == (64, 64), \"failed: case (64,64),(7,7),(1,1),(3,3)\"\nassert convolution_shape(32, 32, (4, 4), (2, 2), (1, 1)) == (16, 16), \"failed: case (32,32),(4,4),(2,2),(1,1)\"\nassert convolution_shape(28, 28, (3, 3), (2, 2), (0, 0)) == -1, \"failed: invalid divisibility (28,28),(3,3),(2,2),(0,0)\"\nassert convolution_shape(28, 28, (3, 3), (2, 2), (1, 1)) == -1, \"failed: invalid divisibility (28,28),(3,3),(2,2),(1,1)\"\nassert convolution_shape(10, 10, (11, 11), (1, 1), (0, 0)) == -1, \"failed: kernel larger than input (10,10),(11,11)\"\nassert convolution_shape(227, 227, (11, 11), (4, 4), (0, 0)) == (55, 55), \"failed: case (227,227),(11,11),(4,4),(0,0)\"\nassert convolution_shape(32, 32, (3, 3), (0, 1), (1, 1)) == -1, \"failed: stride height zero invalid (32,32),(3,3),(0,1),(1,1)\""}
{"task_id": 208, "completion_id": 0, "passed": false, "result": "failed: Test case failed: unknown label should return -1", "solution": "import numpy as np\nimport numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        categories = []\n        seen = set()\n        for label in labels:\n            if label not in seen:\n                seen.add(label)\n                categories.append(label)\n    else:\n        for label in labels:\n            if label not in categories:\n                return [-1]\n    n_labels = len(labels)\n    n_categories = len(categories)\n    encoded = np.zeros((n_labels, n_categories), dtype=int)\n    for (i, label) in enumerate(labels):\n        category_index = categories.index(label)\n        encoded[i, category_index] = 1\n    return encoded.tolist()\nassert one_hot_encode(['red','green','blue','green'], ['red','green','blue']) == [[1,0,0],[0,1,0],[0,0,1],[0,1,0]], \"Test case failed: predefined categories\"\nassert one_hot_encode(['cat','dog','cat'], None) == [[1,0],[0,1],[1,0]], \"Test case failed: inferred categories\"\nassert one_hot_encode(['sun','moon','star'], ['sun','moon','star','cloud']) == [[1,0,0,0],[0,1,0,0],[0,0,1,0]], \"Test case failed: extra unused category\"\nassert one_hot_encode(['a','b','c','a'], ['a','b','c']) == [[1,0,0],[0,1,0],[0,0,1],[1,0,0]], \"Test case failed: repeated labels\"\nassert one_hot_encode(['apple','banana'], ['banana','apple']) == [[0,1],[1,0]], \"Test case failed: category order\"\nassert one_hot_encode(['x','y'], ['x','y','z']) == [[1,0,0],[0,1,0]], \"Test case failed: missing label category present\"\nassert one_hot_encode(['alpha','beta'], ['alpha','beta','gamma','delta']) == [[1,0,0,0],[0,1,0,0]], \"Test case failed: larger category list\"\nassert one_hot_encode(['dog'], None) == [[1]], \"Test case failed: single label\"\nassert one_hot_encode(['unknown'], ['a','b','c']) == -1, \"Test case failed: unknown label should return -1\""}
{"task_id": 209, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    if len(payoffs) != len(payoff_probs):\n        return -1\n    expected_values = []\n    for k in range(len(payoffs)):\n        payoffs_k = payoffs[k]\n        probs_k = payoff_probs[k]\n        if len(payoffs_k) != len(probs_k):\n            return -1\n        prob_sum = sum(probs_k)\n        if not np.isclose(prob_sum, 1.0, atol=1e-08):\n            return -1\n        expected_value = sum((payoffs_i * probs_i for (payoffs_i, probs_i) in zip(payoffs_k, probs_k)))\n        expected_values.append(round(expected_value, 4))\n    best_arm = 0\n    best_ev = expected_values[0]\n    for i in range(1, len(expected_values)):\n        if expected_values[i] > best_ev:\n            best_ev = expected_values[i]\n            best_arm = i\n        elif expected_values[i] == best_ev and i < best_arm:\n            best_arm = i\n    return (expected_values, best_arm, best_ev)\nassert analyze_bandit([[1,2,5],[0,3]], [[0.2,0.5,0.3],[0.6,0.4]]) == ([2.7,1.2],0,2.7), \"failed: basic two-arm example\"\nassert analyze_bandit([[10]], [[1.0]]) == ([10.0],0,10.0), \"failed: single arm certain reward\"\nassert analyze_bandit([[1,2,3]], [[0.3,0.3,0.4]]) == ([2.1],0,2.1), \"failed: single arm multi-outcome\"\nassert analyze_bandit([[1,2],[3]], [[0.5,0.5],[1.0]]) == ([1.5,3.0],1,3.0), \"failed: ragged lengths ok\"\nassert analyze_bandit([[1,2]], [[0.6,0.3]]) == -1, \"failed: probabilities not summing to 1\"\nassert analyze_bandit([[1,2]], [[0.6]]) == -1, \"failed: length mismatch\"\nassert analyze_bandit([[5,5],[5,5]], [[0.5,0.5],[0.5,0.5]]) == ([5.0,5.0],0,5.0), \"failed: tie choose smallest index\"\nassert analyze_bandit([[1,9],[5]], [[0.5,0.5],[1.0]]) == ([5.0,5.0],0,5.0), \"failed: tie different sized arms\""}
{"task_id": 210, "completion_id": 0, "passed": false, "result": "failed: name 'two' is not defined", "solution": "import functools\nimport functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n\n    def decorator(*args, **kwargs):\n        if len(args) == 1 and callable(args[0]):\n            return decorator_func(args[0], *args[1:], **kwargs)\n        return functools.partial(decorator_func, *args, **kwargs)\n    return functools.wraps(decorator_func)(decorator)\nassert two() == 2, \"failed: @multiply without args should double the result of two()\"\nassert three() == 15, \"failed: @multiply(5) should multiply by 5\"\nassert greet() == \"Hi!!!\", \"failed: @add_suffix(suffix='!!!') should append three exclamation marks\"\nassert word() == \"HaHaHa!\", \"failed: combined decorators order mismatch\"\nassert multiply.__name__ == \"multiply\", \"failed: metadata (name) was not preserved in multiply\"\nassert add_suffix.__doc__.startswith(\"Append\"), \"failed: metadata (docstring) was not preserved in add_suffix\"\nassert one() == 8, \"failed: stacked multiply decorators give wrong result\"\nassert echo() == \"Echo!\", \"failed: @add_suffix default suffix not appended\"\nassert add_suffix.__name__ == \"add_suffix\", \"failed: doublewrap did not preserve decorator name\"\nassert any_number() == 0, \"failed: @multiply(0) should return 0\""}
{"task_id": 211, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1.0\n    mismatches = sum((1 for (a, p) in zip(actual, predicted) if a != p))\n    total_samples = len(actual)\n    classification_error = mismatches / total_samples\n    accuracy = 1.0 - classification_error\n    return round(accuracy, 4)\nassert accuracy([1, 0, 1, 1], [1, 1, 1, 0]) == 0.5, \"failed: accuracy([1, 0, 1, 1], [1, 1, 1, 0])\"\nassert accuracy(['cat', 'dog', 'bird'], ['cat', 'dog', 'bird']) == 1.0, \"failed: perfect prediction\"\nassert accuracy([1, 1, 1], [0, 0, 0]) == 0.0, \"failed: completely wrong prediction\"\nassert accuracy([1, 2], [1]) == -1, \"failed: different lengths should give -1\"\nassert accuracy([], []) == -1, \"failed: empty lists should give -1\"\nassert accuracy([True, False, True, False], [True, False, False, False]) == 0.75, \"failed: boolean labels\"\nassert accuracy(['a', 'b', 'c', 'd'], ['a', 'x', 'c', 'y']) == 0.5, \"failed: string labels\"\nassert accuracy([0, 1, 2, 3, 4], [0, 2, 2, 3, 5]) == 0.6, \"failed: mixed correct/incorrect\"\nassert accuracy([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0.2, \"failed: reversed list\"\nassert accuracy([0], [1]) == 0.0, \"failed: single element wrong\""}
{"task_id": 212, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import deque\nfrom collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    if 'input' not in graph or 'output_realtime' not in graph:\n        return []\n    queue = deque()\n    queue.append(('input', ['input']))\n    visited = set()\n    visited.add('input')\n    while queue:\n        (current_node, path) = queue.popleft()\n        if current_node == 'output_realtime':\n            return path\n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                new_path = path + [neighbor]\n                queue.append((neighbor, new_path))\n    return []\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-1 failed\"\nassert extract_realtime_model({\"input\": [\"a\", \"b\"], \"a\": [\"c\"], \"b\": [\"c\"], \"c\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"c\", \"output_realtime\"], \"Test-2 failed\"\nassert extract_realtime_model({\"input\": [\"a\", \"b\"], \"a\": [\"output_realtime\"], \"b\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-3 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"b\"], \"b\": [\"a\", \"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"b\", \"output_realtime\"], \"Test-4 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [], \"output_realtime\": []}) == [], \"Test-5 failed\"\nassert extract_realtime_model({\"a\": [\"output_realtime\"], \"output_realtime\": []}) == [], \"Test-6 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": []}) == [], \"Test-7 failed\"\nassert extract_realtime_model({\"input\": [\"b\", \"a\"], \"a\": [\"d\"], \"b\": [\"c\"], \"c\": [\"d\"], \"d\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"a\", \"d\", \"output_realtime\"], \"Test-8 failed\"\nassert extract_realtime_model({\"input\": [\"output_realtime\"], \"output_realtime\": []}) == [\"input\", \"output_realtime\"], \"Test-9 failed\"\nassert extract_realtime_model({\"input\": [\"a\"], \"a\": [\"output_realtime\"], \"output_realtime\": [], \"junk1\": [\"junk2\"], \"junk2\": []}) == [\"input\", \"a\", \"output_realtime\"], \"Test-10 failed\""}
{"task_id": 213, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    np.random.seed(42)\n    if len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    if fan_in == 0:\n        return []\n    std_dev = np.sqrt(2.0 / fan_in)\n    weights = np.random.normal(loc=0, scale=std_dev, size=shape).tolist()\n    return weights\nassert tuple(len(row) for row in he_normal((2, 3))) == (3, 3), \"test failed: wrong shape for (2, 3)\"\nw1 = np.array(he_normal((100, 50))); fan_in_1 = 100; expected_std_1 = (2.0 / fan_in_1) ** 0.5; assert abs(w1.mean()) < 0.05 and abs(w1.std(ddof=0) - expected_std_1) < 0.05, \"test failed: stats check for (100, 50)\"\nw2 = np.array(he_normal((64, 3, 3, 3))); fan_in_2 = 3 * 3 * 3; expected_std_2 = (2.0 / fan_in_2) ** 0.5; assert abs(w2.mean()) < 0.05 and abs(w2.std(ddof=0) - expected_std_2) < 0.05, \"test failed: stats check for conv kernel\"\nassert he_normal(()) == [], \"test failed: empty shape should return empty list\"\nassert len(he_normal((1,))) == 1, \"test failed: shape (1,)\"\nw3 = np.array(he_normal((3, 2))); assert w3.shape == (3, 2), \"test failed: shape (3,2)\"\nw5 = np.array(he_normal((10, 10))); fan_in_5 = 10; assert abs(w5.mean()) < 0.1, \"test failed: mean too far from 0\"\nw6 = np.array(he_normal((10,))); fan_in_6 = 10; expected_std_6 = (2.0 / fan_in_6) ** 0.5; assert abs(w6.std(ddof=0) - expected_std_6) < 0.3, \"test failed: 1D tensor std\"\nassert isinstance(he_normal((2, 3)), list), \"test failed: output type must be list\""}
{"task_id": 214, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    if len(actual_np) != len(predicted_np):\n        return -1\n    squared_diffs = (actual_np - predicted_np) ** 2\n    mse = np.mean(squared_diffs)\n    return np.round(mse, 4)\nassert mean_squared_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed: identical lists should return 0.0\"\nassert mean_squared_error([1, 2, 3], [1, 2, 5]) == 1.3333, \"failed: mean_squared_error([1,2,3],[1,2,5])\"\nassert mean_squared_error(np.array([1, 2]), np.array([2, 3])) == 1.0, \"failed: numpy array input\"\nassert mean_squared_error([-1, -2, -3], [1, 2, 3]) == 18.6667, \"failed: negative values\"\nassert mean_squared_error([2.5, 0.0, 2.1], [3.0, -0.5, 2.0]) == 0.17, \"failed: float inputs\"\nassert mean_squared_error([7], [5]) == 4.0, \"failed: single element input\"\nassert mean_squared_error([1, 2], [1]) == -1, \"failed: unequal length should return -1\"\nassert mean_squared_error([100, 200], [110, 190]) == 100.0, \"failed: large numbers\"\nassert mean_squared_error(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0.0, \"failed: zeros input\"\nassert mean_squared_error([3, -3, 5, -5], [0, 0, 0, 0]) == 17.0, \"failed: mixed signs input\""}
{"task_id": 216, "completion_id": 0, "passed": false, "result": "failed: failed: simple linear case", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if not isinstance(x_train, np.ndarray) or not isinstance(x_test, np.ndarray):\n        return -1\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations <= 0:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    def generate_polynomial_features(X, degree):\n        (n_samples, n_features) = X.shape\n        poly_features = np.ones((n_samples, 1))\n        for i in range(n_features):\n            for d in range(1, degree + 1):\n                poly_features = np.hstack((poly_features, X[:, i] ** d))\n        return poly_features\n    x_train_poly = generate_polynomial_features(x_train, degree)\n    x_test_poly = generate_polynomial_features(x_test, degree)\n\n    def standardize_features(X):\n        (n_samples, n_features) = X.shape\n        bias = X[:, 0].reshape(-1, 1)\n        non_bias = X[:, 1:]\n        mean = np.mean(non_bias, axis=0)\n        std = np.std(non_bias, axis=0)\n        non_bias_std = (non_bias - mean) / std\n        standardized = np.hstack((bias, non_bias_std))\n        return standardized\n    x_train_poly_standardized = standardize_features(x_train_poly)\n    x_test_poly_standardized = standardize_features(x_test_poly)\n    n_features = x_train_poly_standardized.shape[1]\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        y_pred = x_train_poly_standardized @ w\n        error = y_pred - y_train\n        grad = (2 * error * x_train_poly_standardized).sum(axis=0)\n        l1_grad = np.sign(w[1:])\n        l2_grad = 2 * w[1:]\n        grad[1:] += reg_factor * l1_ratio * l1_grad\n        grad[1:] += reg_factor * (1 - l1_ratio) * l2_grad\n        w -= learning_rate * grad\n    y_pred_test = x_test_poly_standardized @ w\n    return np.round(y_pred_test, 4).tolist()\nassert elastic_net_regression([[1],[2],[3],[4]],[2,4,6,8],[[5],[6]],1,0.0,0.5,5000,0.1)==[10.0,12.0],\"failed: simple linear case\"\nassert elastic_net_regression([[0],[1],[2],[3]],[1,3,5,7],[[4]],1,0.0,0.5,6000,0.05)==[9.0],\"failed: another linear case\"\nassert elastic_net_regression([[1,1],[2,1],[3,1]],[3,5,7],[[4,1]],1,0.0,0.0,6000,0.1)==[9.0],\"failed: multi-feature ridge (ratio 0)\"\nassert elastic_net_regression([[1],[2],[3]],[2,4,6],[[4]],1,0.0,0.5,0,0.1)==-1,\"failed: n_iterations validation\"\nassert elastic_net_regression([[1,2]], [3], [[1]], 1,0.0,0.5,10,0.1)==-1,\"failed: dimension mismatch\"\nassert len(elastic_net_regression([[1],[2],[3],[4]],[1,2,3,4],[[5],[6]],1,0.0,0.5,5000,0.1))==2,\"failed: output length\"\nassert all(isinstance(v,float) for v in elastic_net_regression([[1],[2]], [2,4], [[3]], 1, 0.0,0.5,4000,0.1)),\"failed: output contains non-float values\""}
{"task_id": 217, "completion_id": 0, "passed": false, "result": "failed: arrays used as indices must be of integer (or boolean) type", "solution": "import numpy as np\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    prob = sigmoid\n    grad = actual * sigmoid[-actual * predicted]\n    hess = sigmoid * (1 - sigmoid)\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)\nassert logistic_components([1, -1], [0.5, -0.5]) == ([0.377541, -0.377541], [0.235004, 0.235004], [0.622459, 0.377541]), \"failed on ([1, -1], [0.5, -0.5])\"\nassert logistic_components([1, -1], [10, -10]) == ([0.000045, -0.000045], [0.000045, 0.000045], [0.999955, 0.000045]), \"failed on large magnitude scores\"\nassert logistic_components([1, 1, 1], [0, 0, 0]) == ([0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with positive labels\"\nassert logistic_components([-1, -1, -1], [0, 0, 0]) == ([-0.5, -0.5, -0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with negative labels\"\nassert logistic_components([1], [-2]) == ([0.880797], [0.104994], [0.119203]), \"failed on single sample (1, -2)\"\nassert logistic_components([-1], [2]) == ([-0.880797], [0.104994], [0.880797]), \"failed on single sample (-1, 2)\"\nassert logistic_components([1, -1, 1, -1], [1, 1, -1, -1]) == ([0.268941, -0.731059, 0.731059, -0.268941], [0.196612, 0.196612, 0.196612, 0.196612], [0.731059, 0.731059, 0.268941, 0.268941]), \"failed on mixed signs\"\nassert logistic_components([1], [0]) == ([0.5], [0.25], [0.5]), \"failed on ([1], [0])\"\nassert logistic_components([1, -1], [5, -5]) == ([0.006693, -0.006693], [0.006648, 0.006648], [0.993307, 0.006693]), \"failed on moderate magnitude scores\"\nassert logistic_components([-1], [3]) == ([-0.952574], [0.045177], [0.952574]), \"failed on (-1, 3)\""}
{"task_id": 218, "completion_id": 0, "passed": false, "result": "failed: Failed on natural blackjack win [1,10] vs [10,7]", "solution": "\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function follows the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand):\n        value = sum(hand)\n        aces = hand.count(1)\n        if aces == 0:\n            return value\n        if value + aces * 10 <= 21:\n            return value + aces\n        return value\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    if player_score > dealer_score:\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    elif player_score == 21 and len(player) == 2 and (dealer_score != 21) and (len(dealer) == 2):\n        return 1.5\n    else:\n        return 0.0\nassert blackjack_outcome([1,10],[10,7]) == 1.5, \"Failed on natural blackjack win [1,10] vs [10,7]\"\nassert blackjack_outcome([1,10],[1,10]) == 0.0, \"Failed on natural blackjack draw [1,10] vs [1,10]\"\nassert blackjack_outcome([10,6],[9,7]) == 0.0, \"Failed on simple draw 16 vs 16\"\nassert blackjack_outcome([10,6],[9,8]) == -1.0, \"Failed on player loses 16 vs 17\"\nassert blackjack_outcome([10,5,9],[10,6]) == -1.0, \"Failed on player bust 24 vs 16\"\nassert blackjack_outcome([10,7],[10,6,9]) == 1.0, \"Failed on dealer bust 17 vs 25\"\nassert blackjack_outcome([1,7,3],[10,10]) == 1.0, \"Failed on soft 21 win\"\nassert blackjack_outcome([1,5,5,10],[10,9,2]) == 0.0, \"Failed on 21 draw\"\nassert blackjack_outcome([10,2],[10,10,5]) == 1.0, \"Failed on dealer bust scenario\"\nassert blackjack_outcome([9,9,9],[1,9]) == -1.0, \"Failed on large bust 27 vs 20\""}
{"task_id": 220, "completion_id": 0, "passed": false, "result": "failed: test case failed: asymmetric example", "solution": "import numpy as np\nimport numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    if C_wt.size == 0 or C_dt.size == 0:\n        return ([], [])\n    (V, T) = C_wt.shape\n    (D, T) = C_dt.shape\n    sum_Cwt = np.sum(C_wt)\n    denom_phi = sum_Cwt + V * beta\n    sum_Cdt = np.sum(C_dt)\n    denom_theta = sum_Cdt + T * alpha\n    phi = (C_wt + beta) / denom_phi\n    theta = (C_dt + alpha) / denom_theta\n    phi_rounded = [row.tolist() for row in np.round(phi, 4)]\n    theta_rounded = [row.tolist() for row in np.round(theta, 4)]\n    return (phi_rounded, theta_rounded)\nassert estimate_lda_params(np.array([[2, 1], [3, 4], [5, 0]]), np.array([[3, 2], [1, 4]]), 0.1, 0.5) == ([[0.2174, 0.2308], [0.3043, 0.6923], [0.4783, 0.0769]], [[0.5962, 0.4038], [0.2115, 0.7885]]), \"test case failed: asymmetric example\"\nassert estimate_lda_params(np.zeros((2,2)), np.zeros((1,2)), 1, 1) == ([[0.5,0.5],[0.5,0.5]], [[0.5,0.5]]), \"test case failed: all zero counts\"\nassert estimate_lda_params(np.array([[3],[7]]), np.array([[10],[0]]), 0.1, 0.1) == ([[0.3039],[0.6961]], [[1.0],[1.0]]), \"test case failed: single topic\"\nassert estimate_lda_params(np.ones((2,2)), 2*np.ones((2,2)), 0.1, 0.1) == ([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]]), \"test case failed: symmetric counts\"\nassert estimate_lda_params(2*np.ones((3,3)), 3*np.ones((1,3)), 0.5, 0.5) == ([[0.3333,0.3333,0.3333],[0.3333,0.3333,0.3333],[0.3333,0.3333,0.3333]], [[0.3333,0.3333,0.3333]]), \"test case failed: three topics uniform\"\nassert estimate_lda_params(np.array([[4,0],[1,3]]), np.array([[2,1],[0,3]]), 0.2, 0.2) == ([[0.7778,0.0588],[0.2222,0.9412]], [[0.6471,0.3529],[0.0588,0.9412]]), \"test case failed: skewed word counts\"\nassert estimate_lda_params(np.array([[0,1],[2,3],[4,5]]), np.array([[6,9]]), 1.0, 1.0) == ([[0.1111,0.1667],[0.3333,0.3333],[0.5556,0.5]], [[0.4118,0.5882]]), \"test case failed: single document varying topics\"\nassert estimate_lda_params(np.array([[10,0],[0,10]]), np.array([[4,6],[7,3]]), 10, 10) == ([[0.6667,0.3333],[0.3333,0.6667]], [[0.4667,0.5333],[0.5667,0.4333]]), \"test case failed: large priors\"\nassert estimate_lda_params(np.array([[5,2,0]]), np.array([[1,2,3],[4,5,6]]), 0.3, 0.3) == ([[1.0,1.0,1.0]], [[0.1884,0.3333,0.4783],[0.2704,0.3333,0.3962]]), \"test case failed: single vocabulary word\"\nassert estimate_lda_params(np.zeros((2,4)), np.zeros((1,4)), 0.5, 0.5) == ([[0.5,0.5,0.5,0.5],[0.5,0.5,0.5,0.5]], [[0.25,0.25,0.25,0.25]]), \"test case failed: four topics zero counts\""}
{"task_id": 221, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return np.full_like(actual, -1)\n    log_actual = np.log(1 + actual)\n    log_predicted = np.log(1 + predicted)\n    error = (log_actual - log_predicted) ** 2\n    return error\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    errors = squared_log_error(actual, predicted)\n    msle = np.mean(errors)\n    return round(msle, 4)\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": false, "result": "failed: type list doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            return round(np.exp(z) / (1 + np.exp(z)), 4)\n    elif isinstance(z, list):\n        return [round(sigmoid(val), 4) for val in z]\n    elif isinstance(z, np.ndarray):\n        z = np.array(z, dtype=np.float64)\n        z_positive = z >= 0\n        z_negative = ~z_positive\n        sig_z_positive = 1 / (1 + np.exp(-z[z_positive]))\n        sig_z_negative = np.exp(z[z_negative]) / (1 + np.exp(z[z_negative]))\n        result = np.where(z_positive, sig_z_positive, sig_z_negative)\n        return result.tolist()\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array.')\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        z_array = z\n    else:\n        z_array = np.array(z)\n    z_leaky = np.where(z_array >= 0, z_array, a * z_array)\n    return z_leaky.tolist()\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 225, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    hz_array = np.array(hz)\n    if formula not in ['htk', 'slaney']:\n        raise AssertionError(\"formula must be either 'htk' or 'slaney'\")\n    if formula == 'htk':\n        mel = 2595 * np.log10(1 + hz_array / 700)\n    else:\n        mel = 1127 * np.log(1 + hz_array / 700)\n    mel_rounded = np.round(mel, 4)\n    return mel_rounded.tolist()\nassert hz2mel(np.array([0.0]), \"htk\") == [0.0], \"failed: hz2mel([0], 'htk')\"\nassert hz2mel([6300], \"htk\") == [2595.0], \"failed: hz2mel([6300], 'htk')\"\nassert hz2mel([69300], \"htk\") == [5190.0], \"failed: hz2mel([69300], 'htk')\"\nassert hz2mel([0.0, 6300, 69300], \"htk\") == [0.0, 2595.0, 5190.0], \"failed: hz2mel([...], 'htk')\"\nassert hz2mel(np.array([0.0]), \"slaney\") == [0.0], \"failed: hz2mel([0], 'slaney')\"\nassert hz2mel([1202.7972799213314], \"slaney\") == [1127.0], \"failed: hz2mel([1202.7972799], 'slaney')\"\nassert hz2mel([4472.339268], \"slaney\") == [2254.0], \"failed: hz2mel([4472.339268], 'slaney')\"\nassert hz2mel([0.0, 1202.7972799213314, 4472.339268], \"slaney\") == [0.0, 1127.0, 2254.0], \"failed: hz2mel([...], 'slaney')\"\nassert hz2mel([[0, 6300],[6300, 0]], \"htk\") == [[0.0, 2595.0],[2595.0, 0.0]], \"failed: hz2mel(2D, 'htk')\"\nassert hz2mel([[0, 1202.7972799213314],[4472.339268, 0]], \"slaney\") == [[0.0, 1127.0],[2254.0, 0.0]], \"failed: hz2mel(2D, 'slaney')\""}
{"task_id": 226, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (4,) (2,) ", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    ensemble = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_alpha = 0.0\n        for feature_idx in range(X_train.shape[1]):\n            sorted_indices = np.argsort(X_train[:, feature_idx])\n            thresholds = X_train[sorted_indices][1:]\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.zeros(n_samples)\n                    predictions[X_train[:, feature_idx] < threshold] = polarity\n                    predictions[X_train[:, feature_idx] >= threshold] = -polarity\n                    error = np.sum(weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        (feature_idx, threshold, polarity) = best_stump\n        predictions = np.zeros(n_samples)\n        predictions[X_train[:, feature_idx] < threshold] = polarity\n        predictions[X_train[:, feature_idx] >= threshold] = -polarity\n        weights *= np.exp(-best_alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        ensemble.append((feature_idx, threshold, polarity, best_alpha))\n    predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, polarity, alpha) in ensemble:\n        predictions += alpha * (np.sign(X_test[:, feature_idx] - threshold) * polarity)\n    return [1 if pred > 0 else -1 for pred in predictions]\nassert adaboost_predict(np.array([[0, 1], [1, 1], [1, 0], [0, 0]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [0, 1]]), 3) == [-1, 1], \"Test-1 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4], [5]]), np.array([-1, -1, 1, 1, 1]), np.array([[2], [4]]), 5) == [-1, 1], \"Test-2 failed\"\nassert adaboost_predict(np.array([[2, 9], [3, 8], [1, 10], [5, 2], [6, 3], [4, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 9], [6, 2]]), 4) == [1, -1], \"Test-3 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4]]), np.array([1, 1, -1, -1]), np.array([[1], [4]]), 3) == [1, -1], \"Test-4 failed\"\nassert adaboost_predict(np.array([[0], [1], [2], [3], [4], [5]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[0], [5]]), 6) == [-1, 1], \"Test-5 failed\"\nassert adaboost_predict(np.array([[1, 2], [1, 3], [1, 4], [10, 1], [10, 2], [10, 3]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[1, 3], [10, 1]]), 5) == [-1, 1], \"Test-6 failed\"\nassert adaboost_predict(np.array([[0.1], [0.4], [0.5], [0.6], [0.9]]), np.array([-1, -1, 1, 1, 1]), np.array([[0.2], [0.8]]), 4) == [-1, 1], \"Test-7 failed\"\nassert adaboost_predict(np.array([[2], [4], [6], [8], [10], [12]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[3], [11]]), 6) == [-1, 1], \"Test-8 failed\"\nassert adaboost_predict(np.array([[1, 5], [2, 5], [3, 5], [4, 1], [5, 1], [6, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 5], [5, 1]]), 5) == [1, -1], \"Test-9 failed\"\nassert adaboost_predict(np.array([[0], [1]]), np.array([-1, 1]), np.array([[0], [1]]), 1) == [-1, 1], \"Test-10 failed\""}
{"task_id": 227, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    state = np.array(state)\n    W1 = np.array(W1)\n    W2 = np.array(W2)\n    W3 = np.array(W3)\n    N = len(state)\n    H1 = W1.shape[1]\n    H2 = W2.shape[1]\n    if W3.ndim == 2:\n        if W3.shape != (H2, 1):\n            return -1\n    elif W3.shape != (H2,):\n        return -1\n    if W1.shape != (N, H1):\n        return -1\n    if W2.shape != (H1, H2):\n        return -1\n    if W3.shape != (H2, 1) and W3.shape != (H2,):\n        return -1\n    h1 = np.tanh(state @ W1)\n    h2 = np.tanh(h1 @ W2)\n    v = h2 @ W3\n    return round(float(v), 4)\nassert value_network_forward([0.0, 0.0, 0.0], [[3,1], [2,2], [1,3]], [[5],[4]], [[7.0]]) == 0.0, \"test case 2 failed\"\nassert value_network_forward([3,4], [[0,0,0],[0,0,0]], [[1,2,3],[1,2,3],[1,2,3]], [[1],[1],[1]]) == 0.0, \"test case 3 failed\"\nassert value_network_forward([2], [[2]], [[0]], [[5]]) == 0.0, \"test case 4 failed\"\nassert value_network_forward([2], [[2]], [[2]], [[0]]) == 0.0, \"test case 5 failed\"\nassert value_network_forward([1,0], [[-1],[ -1]], [[-1]], [[-1]]) == -0.642, \"test case 6 failed\"\nassert value_network_forward([1,2], [[1]], [[1]], [[1]]) == -1, \"test case 7 failed (shape mismatch)\"\nassert value_network_forward([1], [[1]], [[1]], [[1,1]]) == -1, \"test case 8 failed (shape mismatch)\"\nassert value_network_forward([0.5], [[2]], [[1]], [[1]]) == 0.642, \"test case 10 failed\""}
{"task_id": 228, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,1) (3,1) ", "solution": "import numpy as np\nimport numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    X_norm_sq = np.sum(X ** 2, axis=1, keepdims=True)\n    Y_norm_sq = np.sum(Y ** 2, axis=1, keepdims=True)\n    dot_product = np.dot(X, Y.T)\n    squared_distances = X_norm_sq + Y_norm_sq - 2 * dot_product\n    distances = np.sqrt(squared_distances)\n    distances = np.round(distances, 4)\n    return distances.tolist()\nassert pairwise_l2_distances(np.array([[0, 0], [1, 0]]), np.array([[1, 0], [2, 0], [0, 0]])) == [[1.0, 2.0, 0.0], [0.0, 1.0, 1.0]], \"failed on X1, Y1\"\nassert pairwise_l2_distances(np.array([[0, 0]]), np.array([[0, 0]])) == [[0.0]], \"failed on zero-distance case\"\nassert pairwise_l2_distances(np.array([[0, 0], [3, 4], [6, 8]])) == [[0.0, 5.0, 10.0], [5.0, 0.0, 5.0], [10.0, 5.0, 0.0]], \"failed when Y is None\"\nassert pairwise_l2_distances(np.array([[1, 2, 3], [4, 5, 6]]), np.array([[7, 8, 9]])) == [[10.3923], [5.1962]], \"failed on 3-D vectors\"\nassert pairwise_l2_distances(np.array([[1, 2]])) == [[0.0]], \"failed on single vector (Y None)\"\nassert pairwise_l2_distances(np.ones((1, 100)), np.zeros((1, 100))) == [[10.0]], \"failed on 100-D vectors\"\nassert pairwise_l2_distances(np.array([[-1, -1]]), np.array([[1, 1]])) == [[2.8284]], \"failed on negative coordinates\"\nassert pairwise_l2_distances(np.array([[0, 1], [1, 1]]), np.array([[1, 0]])) == [[1.4142], [1.0]], \"failed on mixed distances\"\nassert pairwise_l2_distances(np.array([[1, 2], [2, 1], [3, 3]])) == [[0.0, 1.4142, 2.2361], [1.4142, 0.0, 2.2361], [2.2361, 2.2361, 0.0]], \"failed on 3\u00d73 symmetry\"\nassert pairwise_l2_distances(np.array([[2]]), np.array([[5]])) == [[3.0]], \"failed on 1-D feature space\""}
{"task_id": 230, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Implements Gaussian Naive Bayes from scratch for binary classification.\n    \n    Parameters:\n    X_train (np.ndarray): Training data of shape (n_samples, n_features)\n    y_train (np.ndarray): Target labels of shape (n_samples,)\n    X_test (np.ndarray): Test data of shape (m_samples, n_features)\n    \n    Returns:\n    list: Predicted labels for test samples as a list of integers (0 or 1)\n    \"\"\"\n    class_0 = X_train[y_train == 0]\n    class_1 = X_train[y_train == 1]\n    n_features = X_train.shape[1]\n    n_class_0 = class_0.shape[0]\n    n_class_1 = class_1.shape[0]\n    prior_0 = n_class_0 / (n_class_0 + n_class_1)\n    prior_1 = n_class_1 / (n_class_0 + n_class_1)\n    mu_0 = np.mean(class_0, axis=0)\n    sigma_0_sq = np.var(class_0, axis=0) + 1e-09\n    mu_1 = np.mean(class_1, axis=0)\n    sigma_1_sq = np.var(class_1, axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        log_posterior_0 = np.log(prior_0)\n        for j in range(n_features):\n            x_j = x[j]\n            mu = mu_0[j]\n            sigma_sq = sigma_0_sq[j]\n            log_pdf_0 = -0.5 * ((x_j - mu) ** 2 / sigma_sq) - np.log(np.sqrt(2 * np.pi * sigma_sq))\n            log_posterior_0 += log_pdf_0\n        log_posterior_1 = np.log(prior_1)\n        for j in range(n_features):\n            x_j = x[j]\n            mu = mu_1[j]\n            sigma_sq = sigma_1_sq[j]\n            log_pdf_1 = -0.5 * ((x_j - mu) ** 2 / sigma_sq) - np.log(np.sqrt(2 * np.pi * sigma_sq))\n            log_posterior_1 += log_pdf_1\n        if log_posterior_0 > log_posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions\nassert gaussian_naive_bayes(np.array([[1.0,2.1],[1.5,1.8],[5.0,8.0],[6.0,8.5]]),np.array([0,0,1,1]),np.array([[1.2,2.0],[5.5,8.2]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.0,2.1],...])\"\nassert gaussian_naive_bayes(np.array([[1.0],[1.2],[0.8],[4.0],[5.0],[6.0]]),np.array([0,0,0,1,1,1]),np.array([[1.1],[5.5]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.0],[1.2],...])\"\nassert gaussian_naive_bayes(np.array([[1.,2.],[1.2,1.9],[3.,3.2],[3.1,2.9]]),np.array([0,0,1,1]),np.array([[1.1,1.95],[3.,3.]]))==[0,1],\"test case failed: gaussian_naive_bayes([[1.,2.],...])\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,0.],[1.,1.],[1.,1.]]),np.array([0,0,1,1]),np.array([[0.,0.],[1.,1.]]))==[0,1],\"test case failed: gaussian_naive_bayes([[0.,0.],...])\"\nassert gaussian_naive_bayes(np.array([[1.,1.,1.],[1.1,0.9,1.2],[5.,5.,5.],[4.9,5.1,5.2]]),np.array([0,0,1,1]),np.array([[1.,1.,1.],[5.,5.,5.]]))==[0,1],\"test case failed: gaussian_naive_bayes(3D case)\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,1.],[5.,5.],[6.,6.],[7.,7.]]),np.array([0,0,1,1,1]),np.array([[0.,0.],[6.5,6.5]]))==[0,1],\"test case failed: priors test\"\nassert gaussian_naive_bayes(np.array([[0.,0.],[0.,1.],[4.,4.],[4.,5.]]),np.array([0,0,1,1]),np.array([[0.,0.5],[4.,4.5]]))==[0,1],\"test case failed: separation by x coordinate\"\nassert gaussian_naive_bayes(np.array([[-6.],[-5.],[-4.],[4.],[5.],[6.]]),np.array([0,0,0,1,1,1]),np.array([[-4.5],[5.5]]))==[0,1],\"test case failed: negative vs positive\"\nassert gaussian_naive_bayes(np.array([[10.],[9.5],[10.5],[0.],[-0.5],[1.]]),np.array([0,0,0,1,1,1]),np.array([[10.],[0.]]))==[0,1],\"test case failed: reversed ordering\"\nassert gaussian_naive_bayes(np.array([[2.,2.],[2.,2.],[9.,9.],[9.,9.]]),np.array([0,0,1,1]),np.array([[2.,2.],[9.,9.]]))==[0,1],\"test case failed: second constant-feature example\""}
{"task_id": 231, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"Check if the given hand represents a natural blackjack.\n\n    A natural is a two-card hand consisting of an Ace (1) and a ten-valued card (10).\n\n    Args:\n        hand: A list of integers representing the ranks of the cards in the hand.\n\n    Returns:\n        True if the hand is a natural, False otherwise.\n    \"\"\"\n    if len(hand) != 2:\n        return False\n    return sorted(hand) == [1, 10]\nassert is_natural([1, 10]) is True, \"failed on: [1, 10]\"\nassert is_natural([10, 1]) is True, \"failed on: [10, 1]\"\nassert is_natural([1, 5]) is False, \"failed on: [1, 5]\"\nassert is_natural([10, 10]) is False, \"failed on: [10, 10]\"\nassert is_natural([1, 1]) is False, \"failed on: [1, 1]\"\nassert is_natural([5, 10]) is False, \"failed on: [5, 10]\"\nassert is_natural([1, 9]) is False, \"failed on: [1, 9]\"\nassert is_natural([7, 1]) is False, \"failed on: [7, 1]\"\nassert is_natural([10, 11]) is False, \"failed on: [10, 11] (11 is not allowed, no Ace)\"\nassert is_natural([1, 10, 5]) is False, \"failed on: [1, 10, 5] (more than two cards)\""}
{"task_id": 232, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if x.ndim != 2:\n        return False\n    if not np.all(np.isin(x, [0, 1])):\n        return False\n    if not np.all(np.sum(x, axis=1) == 1):\n        return False\n    return True\nassert is_one_hot(np.array([[1, 0, 0], [0, 1, 0]])) == True, \"failed: basic valid matrix\"\nassert is_one_hot(np.array([[0, 1], [1, 0], [0, 1]])) == True, \"failed: rectangular valid matrix\"\nassert is_one_hot(np.array([[0, 1], [1, 1]])) == False, \"failed: row with two ones\"\nassert is_one_hot(np.array([[0, 2], [1, 0]])) == False, \"failed: value other than 0/1 present\"\nassert is_one_hot(np.array([[0, 0, 0], [0, 1, 0]])) == False, \"failed: row with no ones\"\nassert is_one_hot(np.array([1, 0, 0])) == False, \"failed: not a 2-D array\"\nassert is_one_hot(np.array([[True, False], [False, True]])) == True, \"failed: boolean dtype matrix\"\nassert is_one_hot(np.array([[False, False], [False, True]])) == False, \"failed: boolean matrix with invalid row\"\nassert is_one_hot(np.eye(5)) == True, \"failed: identity matrix\"\nassert is_one_hot(np.array([[0, 0], [0, 0]])) == False, \"failed: all zeros matrix\""}
{"task_id": 234, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(successes)\n    samples = [np.random.beta(prior_alpha + successes[i], prior_beta + failures[i]) for i in range(num_arms)]\n    max_sample = max(samples)\n    selected_index = next((i for (i, s) in enumerate(samples) if s == max_sample))\n    return selected_index\nassert thompson_sampling_beta_binomial([10,0],[0,10],seed=42)==0, \"test case failed: ([10,0],[0,10],seed=42)\"\nassert thompson_sampling_beta_binomial([0,10],[10,0],seed=42)==1, \"test case failed: ([0,10],[10,0],seed=42)\"\nassert thompson_sampling_beta_binomial([100,0,50],[0,100,30])==0, \"test case failed: ([100,0,50],[0,100,30])\"\nassert thompson_sampling_beta_binomial([5],[3])==0, \"test case failed: single arm ([5],[3])\"\nassert thompson_sampling_beta_binomial([],[])==-1, \"test case failed: empty input\"\nassert thompson_sampling_beta_binomial([1,2,3],[3,2,1],seed=7)==2, \"test case failed: ([1,2,3],[3,2,1],seed=7)\"\nassert thompson_sampling_beta_binomial([20,5],[5,20])==0, \"test case failed: ([20,5],[5,20])\"\nassert thompson_sampling_beta_binomial([0,1,0,1],[1,0,1,0],seed=123)==3, \"test case failed: ([0,1,0,1],[1,0,1,0],seed=123)\"\n"}
{"task_id": 235, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError('Input array must be 1-dimensional.')\n    if n_classes is None:\n        n_classes = int(labels.max()) + 1\n    elif labels.max() + 1 > n_classes:\n        raise ValueError('n_classes must be at least max(labels) + 1.')\n    one_hot = np.zeros((labels.size, n_classes), dtype=np.float64)\n    one_hot[np.arange(labels.size), labels] = 1.0\n    return one_hot\nassert to_one_hot(np.array([0, 1, 2])).tolist() == [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], \"Test case 1 failed: labels=[0,1,2]\"\nassert to_one_hot(np.array([2, 0, 1]), 4).tolist() == [[0.0, 0.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0]], \"Test case 2 failed: labels=[2,0,1], n_classes=4\"\nassert to_one_hot(np.array([1, 1, 1, 1])).tolist() == [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]], \"Test case 3 failed: repeated label 1\"\nassert to_one_hot(np.array([3, 2])).tolist() == [[0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0]], \"Test case 4 failed: labels=[3,2]\"\nassert to_one_hot(np.array([0]), 1).tolist() == [[1.0]], \"Test case 5 failed: single label 0 with n_classes=1\"\nassert to_one_hot(np.array([0]), 3).tolist() == [[1.0, 0.0, 0.0]], \"Test case 6 failed: single label 0 with n_classes=3\"\nassert to_one_hot(np.array([2, 2, 0]), 3).tolist() == [[0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]], \"Test case 7 failed: labels=[2,2,0]\"\nassert to_one_hot(np.array([4, 1, 3]), 6).tolist() == [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 8 failed: labels=[4,1,3], n_classes=6\"\nassert to_one_hot(np.array([5]), 8).tolist() == [[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 9 failed: labels=[5], n_classes=8\"\nassert to_one_hot(np.array([1, 0, 4, 2]), 5).tolist() == [[0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0]], \"Test case 10 failed: mixed labels with n_classes=5\""}
{"task_id": 236, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    indices = np.arange(N)\n    if shuffle:\n        np.random.shuffle(indices)\n    n_batches = (N + batchsize - 1) // batchsize\n\n    def mb_generator():\n        for i in range(n_batches):\n            start = i * batchsize\n            end = min((i + 1) * batchsize, N)\n            yield indices[start:end].copy()\n    return (mb_generator(), n_batches)\n# 1  --- basic sequential batching\\nX = np.arange(10).reshape(10, 1)\\ngen, n = minibatch(X, batchsize=4, shuffle=False)\\nassert n == 3, \"failed: n_batches should be 3 for 10 samples and batchsize 4\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3],[4,5,6,7],[8,9]], \"failed: wrong indices for sequential batching\"\n# 2 --- full batch (batchsize == N)\\nX = np.arange(7).reshape(7,1)\\ngen, n = minibatch(X, batchsize=7, shuffle=False)\\nassert n == 1, \"failed: there should be 1 batch\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3,4,5,6]], \"failed: indices do not cover full data set\"\n# 3 --- batchsize larger than N\\nX = np.arange(5).reshape(5,1)\\ngen, n = minibatch(X, batchsize=8, shuffle=False)\\nassert n == 1, \"failed: ceil(5/8) == 1\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3,4]], \"failed: should return all indices in single batch\"\n# 4 --- batchsize = 1 (all singles)\\nX = np.arange(4).reshape(4,1)\\ngen, n = minibatch(X, batchsize=1, shuffle=False)\\nassert n == 4, \"failed: there should be 4 single-element batches\"\\nassert [int(b) for b in gen] == [0,1,2,3], \"failed: sequential single indices incorrect\"\n# 5 --- uneven last batch\\nX = np.arange(9).reshape(9,1)\\ngen, n = minibatch(X, batchsize=4, shuffle=False)\\nassert n == 3, \"failed: ceil(9/4) == 3\"\\nassert [b.tolist() for b in gen] == [[0,1,2,3],[4,5,6,7],[8]], \"failed: last batch should contain index 8 only\"\n# 6 --- empty data set\\nX = np.empty((0,2))\\ngen, n = minibatch(X, batchsize=3, shuffle=False)\\nassert n == 0, \"failed: zero samples must give zero batches\"\\nassert list(gen) == [], \"failed: generator should yield nothing for empty data set\"\n# 7 --- reproducible shuffle\\nnp.random.seed(123)\\nX = np.arange(10).reshape(10,1)\\ngen, n = minibatch(X, batchsize=3, shuffle=True)\\nshuffled = np.concatenate(list(gen))\\nnp.random.seed(123)\\nexpected = np.arange(10)\\nnp.random.shuffle(expected)\\nassert np.array_equal(shuffled, expected), \"failed: shuffle does not match NumPy's shuffle with same seed\"\n# 8 --- shuffled batches preserve sizes\\nnp.random.seed(0)\\nX = np.arange(12).reshape(12,1)\\ngen, n = minibatch(X, batchsize=5, shuffle=True)\\nlengths = [len(b) for b in gen]\\nassert lengths == [5,5,2], \"failed: batch sizes after shuffle should be 5,5,2\"\n# 9 --- generator is single-pass\\nX = np.arange(6).reshape(6,1)\\ngen, _ = minibatch(X, batchsize=2, shuffle=False)\\n_ = list(gen)\\nassert list(gen) == [], \"failed: generator should be exhausted after first iteration\"\n# 10 --- large dataset quick check\\nX = np.arange(1000).reshape(1000,1)\\nbs = 128\\n_, n = minibatch(X, batchsize=bs, shuffle=False)\\nassert n == int(np.ceil(1000/bs)), \"failed: incorrect number of batches for large data set\""}
{"task_id": 237, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    total = 0\n    aces = 0\n    for card in hand:\n        if card == 'J' or card == 'Q' or card == 'K':\n            total += 10\n        elif card == 'A':\n            total += 11\n            aces += 1\n        else:\n            total += int(card)\n    while aces > 0 and total > 21:\n        total -= 10\n        aces -= 1\n    return total if total <= 21 else 0\nassert score(['A','K']) == 21, \"Test case 1 failed: ['A','K']\"\nassert score(['10','8','5']) == 0, \"Test case 2 failed: ['10','8','5']\"\nassert score(['A','9','A']) == 21, \"Test case 3 failed: ['A','9','A']\"\nassert score(['5','3','7','6']) == 21, \"Test case 4 failed: ['5','3','7','6']\"\nassert score(['J','Q']) == 20, \"Test case 5 failed: ['J','Q']\"\nassert score(['A','A','9']) == 21, \"Test case 6 failed: ['A','A','9']\"\nassert score(['A','A','A','7']) == 20, \"Test case 7 failed: ['A','A','A','7']\"\nassert score(['2','3','4','5','6']) == 20, \"Test case 8 failed: ['2','3','4','5','6']\"\nassert score(['K','Q','2']) == 0, \"Test case 9 failed: ['K','Q','2']\"\nassert score(['A']) == 11, \"Test case 10 failed: ['A']\""}
{"task_id": 239, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str='same') -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    (filter_height, filter_width) = filter_shape\n    pad_top = (filter_height - 1) // 2\n    pad_bottom = filter_height - 1 - pad_top\n    pad_left = (filter_width - 1) // 2\n    pad_right = filter_width - 1 - pad_left\n    return ((pad_top, pad_bottom), (pad_left, pad_right))\nassert determine_padding((3, 3), \"same\") == ((1, 1), (1, 1)), \"failed: (3,3) same\"\nassert determine_padding((1, 1), \"same\") == ((0, 0), (0, 0)), \"failed: (1,1) same\"\nassert determine_padding((5, 5), \"same\") == ((2, 2), (2, 2)), \"failed: (5,5) same\"\nassert determine_padding((4, 4), \"same\") == ((1, 2), (1, 2)), \"failed: (4,4) same\"\nassert determine_padding((4, 2), \"same\") == ((1, 2), (0, 1)), \"failed: (4,2) same\"\nassert determine_padding((2, 4), \"same\") == ((0, 1), (1, 2)), \"failed: (2,4) same\"\nassert determine_padding((3, 3), \"valid\") == ((0, 0), (0, 0)), \"failed: (3,3) valid\"\nassert determine_padding((2, 2), \"valid\") == ((0, 0), (0, 0)), \"failed: (2,2) valid\"\nassert determine_padding((2, 2), \"same\") == ((0, 1), (0, 1)), \"failed: (2,2) same\"\nassert determine_padding((7, 3), \"same\") == ((3, 3), (1, 1)), \"failed: (7,3) same\""}
{"task_id": 240, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    if obs_encoder is not None:\n        obs2num = obs_encoder\n    else:\n        obs2num = {obs: idx for (idx, obs) in enumerate(obs_ids)}\n    num2obs = {v: k for (k, v) in obs2num.items()}\n    if act_encoder is not None:\n        act2num = act_encoder\n    else:\n        act2num = {act: idx for (idx, act) in enumerate(action_ids)}\n    num2act = {v: k for (k, v) in act2num.items()}\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}\nassert create_encoding_dicts(['a', 'b'], ['x', 'y']) == {'obs2num': {'a': 0, 'b': 1}, 'num2obs': {0: 'a', 1: 'b'}, 'act2num': {'x': 0, 'y': 1}, 'num2act': {0: 'x', 1: 'y'}}, 'test case failed: basic enumeration'\nres = create_encoding_dicts(['left', 'right', 'front', 'back'], ['move', 'turn']); assert res['obs2num']['front'] == 2 and res['num2obs'][2] == 'front', 'test case failed: larger lists (obs)'\nobs_enc = {'cold': 5, 'hot': 7}; act_enc = {'go': 9, 'stop': 3}; res = create_encoding_dicts(['cold', 'hot'], ['go', 'stop'], obs_enc, act_enc); assert res['obs2num'] == obs_enc and res['num2obs'] == {5: 'cold', 7: 'hot'}, 'test case failed: explicit obs encoder'\nassert create_encoding_dicts([], []) == {'obs2num': {}, 'num2obs': {}, 'act2num': {}, 'num2act': {}}, 'test case failed: empty lists'\nres = create_encoding_dicts(['sun', 'rain'], ['walk', 'run'], {'sun': 2, 'rain': 4}); assert res['act2num']['walk'] == 0 and res['num2act'][1] == 'run', 'test case failed: mixed encoders (act)'\nres = create_encoding_dicts([], ['jump'], None, {'jump': 42}); assert res['act2num']['jump'] == 42 and res['num2act'][42] == 'jump', 'test case failed: encoder with empty obs list'\nres = create_encoding_dicts(['x1', 'x2', 'x3'], ['y']); assert all(res['num2obs'][res['obs2num'][o]] == o for o in ['x1', 'x2', 'x3']), 'test case failed: consistency (obs)'\nres = create_encoding_dicts([10, 20], [30, 40]); assert res['obs2num'][10] == 0 and res['num2act'][0] == 30, 'test case failed: numerical identifiers'\nres = create_encoding_dicts(['only_obs'], ['only_act']); assert res['obs2num']['only_obs'] == 0 and res['act2num']['only_act'] == 0, 'test case failed: single element lists'\nres = create_encoding_dicts(['A','B','C'], ['L']); assert res['num2act'][res['act2num']['L']] == 'L', 'test case failed: consistency (act)'"}
{"task_id": 241, "completion_id": 0, "passed": false, "result": "failed: cannot reshape array of size 16 into shape (3,4)", "solution": "import numpy as np\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return [-1]\n    d0 = shape[0]\n    remaining_dims = shape[1:]\n    num_neurons = np.prod(remaining_dims)\n    A = np.random.randn(d0, num_neurons)\n    (U, singular_values, Vt) = np.linalg.svd(A)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    return result.tolist()\nnp.random.seed(0); assert (m := orthogonal((2, 2), 1.0)); flat = np.array(m); assert np.allclose(flat @ flat.T, np.eye(2), atol=1e-6), \"orthogonal((2,2),1.0) rows not orthonormal\"\nnp.random.seed(1); assert (m := orthogonal((3, 4), 0.1)); flat = np.array(m).reshape(3, -1); assert np.allclose(flat @ flat.T, 0.01 * np.eye(3), atol=1e-6), \"orthogonal((3,4),0.1) row-orthogonality failed\"\nnp.random.seed(2); assert (m := orthogonal((4, 3), 0.7)); flat = np.array(m).reshape(4, -1); assert np.allclose(flat.T @ flat, 0.49 * np.eye(3), atol=1e-6), \"orthogonal((4,3),0.7) column-orthogonality failed\"\nnp.random.seed(3); assert (m := orthogonal((5, 5), 0.3)); flat = np.array(m); assert np.allclose(flat @ flat.T, 0.09 * np.eye(5), atol=1e-6), \"orthogonal((5,5),0.3) failed\"\nnp.random.seed(4); assert (m := orthogonal((2, 8), 0.2)); flat = np.array(m).reshape(2, -1); assert np.allclose(flat @ flat.T, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((2,8),0.2) failed\"\nnp.random.seed(5); assert (m := orthogonal((8, 2), 0.2)); flat = np.array(m).reshape(8, -1); assert np.allclose(flat.T @ flat, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((8,2),0.2) failed\"\nnp.random.seed(6); assert isinstance(orthogonal((3, 3), 1.0), list), \"Return type is not list\"\nnp.random.seed(7); assert orthogonal((1,), 0.5) == -1, \"Shape length < 2 should return -1\"\nnp.random.seed(9); shape = (4, 6); scale = 0.75; m = orthogonal(shape, scale); flat = np.array(m).reshape(shape[0], -1); expected = scale**2 * np.eye(shape[0]); assert np.allclose(flat @ flat.T, expected, atol=1e-6), \"orthogonality condition failed for (4,6)\""}
{"task_id": 242, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    for i in range(len(pull_counts)):\n        if pull_counts[i] == 0:\n            return i\n    T = current_step + 1\n    scores = []\n    for i in range(len(ev_estimates)):\n        score = ev_estimates[i] + C * math.sqrt(2 * math.log(T) / pull_counts[i])\n        scores.append(score)\n    return max(range(len(scores)), key=lambda i: scores[i])\nassert ucb1_select([0.5, 0.7], [1, 1], 2) == 1, \"failed on basic two-arm example\"\nassert ucb1_select([0.2, 0.9, 0.1], [0, 5, 3], 8) == 0, \"failed when an arm was never pulled\"\nassert ucb1_select([0.6, 0.6], [10, 1], 11) == 1, \"failed when counts differ greatly\"\nassert ucb1_select([0.3, 0.4, 0.5, 0.6], [5, 5, 5, 5], 20) == 3, \"failed on equal counts different EVs\"\nassert ucb1_select([0.5, 0.5], [1, 1], 2) == 0, \"failed tie-breaking rule\"\nassert ucb1_select([0.2], [10], 10) == 0, \"failed single-arm bandit\"\nassert ucb1_select([0.4, 0.4], [3, 3], 6, C=0.5) == 0, \"failed tie with custom C\"\nassert ucb1_select([0.1, 0.2, 0.3], [2, 4, 6], 12) == 0, \"failed three-arm varying counts\"\nassert ucb1_select([0.9, 0.1], [100, 1], 101) == 1, \"failed exploration against high EV arm\"\nassert ucb1_select([0.0, 0.0, 0.0], [1, 0, 1], 2) == 1, \"failed when exactly one arm untried\""}
{"task_id": 243, "completion_id": 0, "passed": false, "result": "failed: failed on state [1.0, -1.0, 0.5]", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=np.float32)\n    W1 = np.ones((3, 4), dtype=np.float32)\n    b1 = np.zeros(4, dtype=np.float32)\n    W2 = np.ones((4, 4), dtype=np.float32)\n    b2 = np.zeros(4, dtype=np.float32)\n    W3 = np.ones((4, 4), dtype=np.float32)\n    b3 = np.zeros(4, dtype=np.float32)\n    W_a = np.ones((4, 3), dtype=np.float32)\n    b_a = np.zeros(3, dtype=np.float32)\n    W_c = np.ones((4, 1), dtype=np.float32)\n    b_c = np.zeros(1, dtype=np.float32)\n    z1 = np.maximum(0, np.dot(s, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, W_a) + b_a\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, W_c) + b_c\n    action_probs_rounded = [float(prob) for prob in np.round(action_probs, 4)]\n    state_value_rounded = float(np.round(state_value, 4))\n    return (action_probs_rounded, state_value_rounded)\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 244, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple):\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    rand_tensor = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (rand_tensor >= threshold).astype(float)\n    return binary_tensor.tolist()\nnp.random.seed(0)\nassert random_binary_tensor((2, 3), 0.5) == [[1.0, 1.0, 1.0], [1.0, 0.0, 1.0]], \"test case failed: seed=0, shape=(2,3), sparsity=0.5\"\nnp.random.seed(1)\nassert random_binary_tensor((5,), 0.3) == [0.0, 1.0, 0.0, 0.0, 0.0], \"test case failed: seed=1, shape=(5,), sparsity=0.3\"\nnp.random.seed(2)\nassert random_binary_tensor((1, 4), 0.0) == [[0.0, 0.0, 0.0, 0.0]], \"test case failed: seed=2, shape=(1,4), sparsity=0.0\"\nnp.random.seed(3)\nassert random_binary_tensor((2, 2), 1.0) == [[1.0, 1.0], [1.0, 1.0]], \"test case failed: seed=3, shape=(2,2), sparsity=1.0\"\nnp.random.seed(4)\nassert random_binary_tensor((3, 2), 0.7) == [[1.0, 1.0], [1.0, 1.0], [1.0, 0.0]], \"test case failed: seed=4, shape=(3,2), sparsity=0.7\"\nassert random_binary_tensor((2, 2), 1.2) == -1, \"test case failed: sparsity > 1\"\nassert random_binary_tensor((2, 2), -0.1) == -1, \"test case failed: sparsity < 0\"\nassert random_binary_tensor([2, 3], 0.5) == -1, \"test case failed: shape is not tuple\"\nassert random_binary_tensor((0, 3), 0.5) == -1, \"test case failed: zero dimension in shape\"\nassert random_binary_tensor((2.5, 3), 0.5) == -1, \"test case failed: non-integer dimension\""}
{"task_id": 247, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    if len(payoff_dists) != len(payoff_probs):\n        return -1\n    K = len(payoff_dists)\n    if K == 0:\n        return -1\n    for i in range(K):\n        (mu, sigma_sq) = payoff_dists[i]\n        p = payoff_probs[i]\n        if sigma_sq <= 0:\n            return -1\n        if not 0 <= p <= 1:\n            return -1\n    expected_rewards = [p * mu for ((mu, sigma_sq), p) in zip(payoff_dists, payoff_probs)]\n    max_reward = max(expected_rewards)\n    best_arm = expected_rewards.index(max_reward)\n    best_ev = round(max_reward, 4)\n    return (best_ev, best_arm)\nassert gaussian_bandit_oracle([(5, 2), (3, 1), (10, 4)], [1.0, 0.5, 0.2]) == (5.0, 0), \"failed on basic example\"\nassert gaussian_bandit_oracle([(0, 1), (7, 2)], [1, 1]) == (7.0, 1), \"failed when best arm is last\"\nassert gaussian_bandit_oracle([(4, 1), (4, 1)], [1, 1]) == (4.0, 0), \"failed on tie breaking\"\nassert gaussian_bandit_oracle([(4, 1), (1, 1)], [0, 1]) == (1.0, 1), \"failed with zero probability on an arm\"\nassert gaussian_bandit_oracle([(3.3333, 0.5)], [0.3]) == (1.0, 0), \"failed on rounding check\"\nassert gaussian_bandit_oracle([], []) == -1, \"failed on empty input\"\nassert gaussian_bandit_oracle([(1, -1)], [0.5]) == -1, \"failed to detect non-positive variance\"\nassert gaussian_bandit_oracle([(1, 1)], [1.2]) == -1, \"failed to detect probability > 1\"\nassert gaussian_bandit_oracle([(1, 1)], [-0.1]) == -1, \"failed to detect probability < 0\"\nassert gaussian_bandit_oracle([(1, 1), (2, 2), (3, 3), (4, 4)], [0.1, 0.2, 0.3, 0.4]) == (1.6, 3), \"failed on larger input\""}
{"task_id": 248, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    positive_count = np.sum(y_train)\n    total_samples = len(y_train)\n    if total_samples == 0:\n        return []\n    p = positive_count / total_samples\n    predictions = np.full(len(X_test), p)\n    predictions_rounded = np.round(predictions, 4)\n    return predictions_rounded.tolist()\nassert baseline_prob_predict(np.array([[1, 2], [3, 4], [5, 6]]), np.array([0, 1, 1]), np.array([[7, 8], [9, 10]])) == [0.6667, 0.6667], \"test case failed: p = 2/3\"\nassert baseline_prob_predict(np.array([[0], [1]]), np.array([0, 0]), np.array([[5], [6], [7]])) == [0.0, 0.0, 0.0], \"test case failed: all negatives\"\nassert baseline_prob_predict(np.array([[0], [1], [2]]), np.array([1, 1, 1]), np.array([[5], [6]])) == [1.0, 1.0], \"test case failed: all positives\"\nassert baseline_prob_predict(np.array([[0], [1], [2], [3]]), np.array([1, 0, 0, 0]), np.array([[9], [9], [9], [9]])) == [0.25, 0.25, 0.25, 0.25], \"test case failed: p = 0.25\"\nassert baseline_prob_predict(np.array([[0], [1], [2], [3], [4]]), np.array([1, 0, 1, 0, 0]), np.array([[0], [0], [0], [0], [0]])) == [0.4, 0.4, 0.4, 0.4, 0.4], \"test case failed: p = 0.4\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([1]), np.empty((0, 2))) == [], \"test case failed: empty X_test\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([0]), np.array([[3, 4]])) == [0.0], \"test case failed: single negative\"\nassert baseline_prob_predict(np.array([[1, 2]]), np.array([1]), np.array([[3, 4], [5, 6]])) == [1.0, 1.0], \"test case failed: single positive\"\nassert baseline_prob_predict(np.array([[0], [1], [2]]), np.array([1, 0, 0]), np.array([[8], [8], [8]])) == [0.3333, 0.3333, 0.3333], \"test case failed: rounding 1/3\"\nassert baseline_prob_predict(np.arange(100).reshape(100, 1), np.array([1] * 55 + [0] * 45), np.array([[0], [0], [0], [0]])) == [0.55, 0.55, 0.55, 0.55], \"test case failed: p = 0.55\""}
{"task_id": 249, "completion_id": 0, "passed": false, "result": "failed: name 'params_1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    h = state\n    h = np.dot(h, params['W1']) + params['b1']\n    h = np.maximum(h, 0)\n    h = np.dot(h, params['W2']) + params['b2']\n    h = np.maximum(h, 0)\n    h = np.dot(h, params['W3']) + params['b3']\n    h = np.maximum(h, 0)\n    actor_scores = np.dot(h, params['Wa']) + params['ba']\n    probabilities = np.exp(actor_scores) / np.sum(np.exp(actor_scores))\n    value = np.dot(h, params['Wc']) + params['bc']\n    probabilities_rounded = np.round(probabilities, 4)\n    value_rounded = np.round(value, 4)\n    probabilities_rounded = np.where(np.isclose(probabilities_rounded, 0.0), 0.0, probabilities_rounded)\n    probabilities_rounded = np.where(np.isclose(probabilities_rounded, 1.0), 1.0, probabilities_rounded)\n    value_rounded = np.where(np.isclose(value_rounded, 0.0), 0.0, value_rounded)\n    value_rounded = np.where(np.isclose(value_rounded, 1.0), 1.0, value_rounded)\n    return (probabilities_rounded.tolist(), value_rounded)\nassert actor_critic_forward([1, 0], params_1) == ([0.7311, 0.2689], 1.0), \"test case failed: state=[1,0]\"\nassert actor_critic_forward([0, 1], params_1) == ([0.2689, 0.7311], 1.0), \"test case failed: state=[0,1]\"\nassert actor_critic_forward([-1, 2], params_1) == ([0.1192, 0.8808], 2.0), \"test case failed: state=[-1,2]\"\nassert actor_critic_forward([3, 3], params_1)  == ([0.5, 0.5], 6.0),       \"test case failed: state=[3,3]\"\nassert actor_critic_forward([-2, -3], params_1)== ([0.5, 0.5], 0.0),       \"test case failed: state=[-2,-3]\"\nassert actor_critic_forward([0, 0], params_2)  == ([0.8808, 0.1192], 2.0), \"test case failed: state=[0,0]\"\nassert actor_critic_forward([1, -1], params_2) == ([0.982, 0.018],  3.0), \"test case failed: state=[1,-1]\"\nassert actor_critic_forward([-1, 1], params_2) == ([0.5, 0.5],     1.0), \"test case failed: state=[-1,1]\"\nassert actor_critic_forward([-5, -5], params_2)== ([0.5, 0.5],     1.0), \"test case failed: state=[-5,-5]\"\nassert actor_critic_forward([10, 0], params_2) == ([1.0, 0.0],    12.0), \"test case failed: state=[10,0]\""}
{"task_id": 251, "completion_id": 0, "passed": false, "result": "failed: bad operand type for unary -: 'list'", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Implement element-wise logistic sigmoid.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    \"\"\"Implement element-wise hyperbolic tangent.\"\"\"\n    return np.tanh(x)\ndef relu(x):\n    \"\"\"Implement element-wise Rectified Linear Unit.\"\"\"\n    return np.maximum(0, x)\ndef leaky_relu(x, alpha: float=0.01):\n    \"\"\"Implement element-wise Leaky-ReLU with slope *alpha* for x<0.\"\"\"\n    return np.where(x < 0, alpha * x, x)\ndef softmax(x):\n    \"\"\"Implement numerically stable softmax over a 1-D input.\"\"\"\n    x_shifted = x - np.max(x)\n    exp_x = np.exp(x_shifted)\n    return exp_x / np.sum(exp_x)\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    activations = {'sigmoid': sigmoid, 'tanh': tanh, 'relu': relu, 'leaky_relu': leaky_relu, 'softmax': softmax}\n    if name in activations:\n        return activations[name]\n    else:\n        raise ValueError('Invalid activation function.')\nact = get_activation(\"relu\"); assert np.array_equal(act(np.array([-1, 0, 2])), np.array([0., 0., 2.])), \"test case failed: relu([-1,0,2])\"\nact = get_activation(\"sigmoid\"); assert act(0) == 0.5, \"test case failed: sigmoid(0)\"\nact = get_activation(\"sigmoid\"); assert np.allclose(act([0,1]), np.array([0.5,0.7311])), \"test case failed: sigmoid([0,1])\"\nact = get_activation(\"tanh\"); assert act(0) == 0.0, \"test case failed: tanh(0)\"\nact = get_activation(\"leaky_relu\"); assert np.array_equal(act([-1, 0, 2]), np.array([-0.01, 0., 2.])), \"test case failed: leaky_relu([-1,0,2])\"\nact = get_activation(\"softmax\"); assert np.allclose(act([0,1,2]), np.array([0.09,0.2447,0.6652])), \"test case failed: softmax([0,1,2])\"\nact = get_activation(\"softmax\"); assert np.allclose(act([1000, 1000]), np.array([0.5,0.5])), \"test case failed: softmax([1000,1000])\"\ntry:\n    get_activation(\"_bad_\")\n    assert False, \"test case failed: expected ValueError for unknown activation\"\nexcept ValueError:\n    pass\nassert np.allclose(get_activation(\"sigmoid\")([-2,2]), np.array([0.1192,0.8808])), \"test case failed: sigmoid([-2,2])\"\nassert np.array_equal(get_activation(\"relu\")(0), 0.0), \"test case failed: relu(0)\""}
{"task_id": 252, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad = [actual[i] - predicted[i] for i in range(len(actual))]\n    hess = [1.0 for _ in range(len(actual))]\n    return (grad, hess)\nassert least_squares_loss(np.array([3.0, -0.5, 2.0, 7.0]), np.array([2.5, 0.0, 2.0, 8.0])) == ([0.5, -0.5, 0.0, -1.0], [1.0, 1.0, 1.0, 1.0]), \"failed on mixed positive/negative values\"\nassert least_squares_loss(np.array([0.0]), np.array([0.0])) == ([0.0], [1.0]), \"failed on single zero element\"\nassert least_squares_loss(np.array([1.0]), np.array([-1.0])) == ([2.0], [1.0]), \"failed on single element opposite sign\"\nassert least_squares_loss(np.array([5.0, 5.0]), np.array([5.0, 5.0])) == ([0.0, 0.0], [1.0, 1.0]), \"failed on identical vectors\"\nassert least_squares_loss(np.array([-2.0, -4.0]), np.array([-3.0, -1.0])) == ([1.0, -3.0], [1.0, 1.0]), \"failed on negative values\"\nassert least_squares_loss(np.array([1e6, -1e6]), np.array([0.0, 0.0])) == ([1000000.0, -1000000.0], [1.0, 1.0]), \"failed on large magnitude values\"\nassert least_squares_loss(np.array([0.123, 0.456]), np.array([0.321, 0.654])) == ([-0.198, -0.198], [1.0, 1.0]), \"failed on decimal values\"\nassert least_squares_loss(np.array([10.0, 20.0, 30.0]), np.array([9.0, 18.0, 33.0])) == ([1.0, 2.0, -3.0], [1.0, 1.0, 1.0]), \"failed on three-element vector\"\nassert least_squares_loss(np.array([7.0, 8.0, 9.0, 10.0]), np.array([7.0, 8.0, 9.0, 10.0])) == ([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]), \"failed on perfect prediction\""}
{"task_id": 253, "completion_id": 0, "passed": false, "result": "failed: failed on value, case 1", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_norm_squared = np.sum(w ** 2)\n    l1_norm = np.sum(np.abs(w))\n    if not gradient:\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm_squared)\n        return round(penalty, 4)\n    gradient_w = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n    return [round(g, 4) for g in gradient_w.tolist()]\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 255, "completion_id": 0, "passed": false, "result": "failed: failed on [1, 1, 9, 2]", "solution": "\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    total = 0\n    aces = 0\n    for card in hand:\n        if card == 1:\n            aces += 1\n            total += 1\n        elif card == 10:\n            total += 10\n        else:\n            total += card\n    if aces == 0:\n        return False\n    if total + aces <= 21:\n        return True\n    else:\n        return False\nassert usable_ace([1, 7]) is True, \"failed on [1, 7]\"\nassert usable_ace([1, 10]) is True, \"failed on [1, 10]\"\nassert usable_ace([1, 10, 10]) is False, \"failed on [1, 10, 10]\"\nassert usable_ace([2, 3, 4]) is False, \"failed on [2, 3, 4]\"\nassert usable_ace([1]) is True, \"failed on [1]\"\nassert usable_ace([1, 1, 9]) is True, \"failed on [1, 1, 9]\"\nassert usable_ace([1, 1, 9, 2]) is False, \"failed on [1, 1, 9, 2]\"\nassert usable_ace([1, 2, 3, 4, 5, 6]) is False, \"failed on [1, 2, 3, 4, 5, 6]\"\nassert usable_ace([1, 1, 1, 1, 8]) is False, \"failed on [1, 1, 1, 1, 8]\"\nassert usable_ace([1, 8, 1]) is True, \"failed on [1, 8, 1]\""}
{"task_id": 256, "completion_id": 0, "passed": false, "result": "failed: name 'ToyLinearRNN' is not defined", "solution": "import numpy as np\nfrom copy import deepcopy\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    (batch_size, input_dim, _) = X.shape\n    param_shape = param.shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n    param_copy = deepcopy(param)\n    for i in range(param_shape[0]):\n        for j in range(param_shape[1]):\n            for k in range(param_shape[2]):\n                original_value = param[i, j, k]\n                param_copy[i, j, k] = original_value + epsilon\n                predictions_plus = []\n                for t in range(n_t):\n                    pred = model.forward(X[:, :, t])\n                    predictions_plus.append(pred)\n                loss_plus = loss_func(predictions_plus)\n                param_copy[i, j, k] = original_value - epsilon\n                predictions_minus = []\n                for t in range(n_t):\n                    pred = model.forward(X[:, :, t])\n                    predictions_minus.append(pred)\n                loss_minus = loss_func(predictions_minus)\n                grad = (loss_plus - loss_minus) / (2 * epsilon)\n                grads[i, j, k] = grad\n                param_copy[i, j, k] = original_value\n    return grads.T\nimport numpy as np, math, random; from copy import deepcopy; rng = np.random.default_rng(0); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(3, 2, 3)); n_t = 3; expected = analytic_grad_P(model, n_t, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', n_t, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 2x2'\nimport numpy as np; rng = np.random.default_rng(1); model = ToyLinearRNN(3, 1, rng); X = rng.normal(size=(4, 3, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 3x1'\nimport numpy as np; rng = np.random.default_rng(2); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(5, 1, 1)); expected = analytic_grad_P(model, 1, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 1, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: n_t = 1'\nimport numpy as np; rng = np.random.default_rng(3); model = ToyLinearRNN(2, 4, rng); X = rng.normal(size=(2, 2, 3)); expected = analytic_grad_ba(model, 3, X); numeric = grad_check_RNN(model, squared_loss, 'Ba', 3, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for Ba'\nimport numpy as np; rng = np.random.default_rng(4); model = ToyLinearRNN(4, 2, rng); X = rng.normal(size=(3, 4, 4)); expected = analytic_grad_P(model, 4, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 4, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 4x2'\nimport numpy as np; rng = np.random.default_rng(5); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X, epsilon=1e-8); assert np.allclose(numeric, expected, atol=1e-4), 'test case failed: small epsilon'\nimport numpy as np; rng = np.random.default_rng(6); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(3, 1, 5)); expected = analytic_grad_P(model, 5, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 5, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 1x3'\nimport numpy as np; rng = np.random.default_rng(7); model = ToyLinearRNN(3, 2, rng); X = rng.normal(size=(2, 3, 2)); expected = analytic_grad_ba(model, 2, X); numeric = grad_check_RNN(model, squared_loss, 'ba', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for ba'\nimport numpy as np; rng = np.random.default_rng(8); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'X', 2, X) is None, 'test case failed: param X should return None'\nimport numpy as np; rng = np.random.default_rng(9); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'y', 2, X) is None, 'test case failed: param y should return None'"}
{"task_id": 257, "completion_id": 0, "passed": false, "result": "failed: failed: simple threshold", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_alpha = 0\n        for feature_idx in range(n):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                left = X_train[X_train[:, feature_idx] <= threshold]\n                right = X_train[X_train[:, feature_idx] > threshold]\n                left_pred = np.ones(len(left)) * -1\n                right_pred = np.ones(len(right)) * 1\n                error = 0\n                for i in range(len(left)):\n                    if left_pred[i] != y_train[np.where((X_train == left[i]).all(axis=1))[0][0]]:\n                        error += weights[np.where((X_train == left[i]).all(axis=1))[0][0]]\n                for i in range(len(right)):\n                    if right_pred[i] != y_train[np.where((X_train == right[i]).all(axis=1))[0][0]]:\n                        error += weights[np.where((X_train == right[i]).all(axis=1))[0][0]]\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_idx, threshold)\n        if best_error == 0:\n            alpha = 0\n        else:\n            alpha = 0.5 * np.log((1 - best_error) / best_error)\n        for i in range(m):\n            if X_train[i, best_stump[0]] <= best_stump[1] and y_train[i] == -1:\n                weights[i] *= np.exp(-alpha)\n            elif X_train[i, best_stump[0]] > best_stump[1] and y_train[i] == 1:\n                weights[i] *= np.exp(alpha)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    predictions = []\n    for x in X_test:\n        sum_votes = 0\n        for i in range(n_clf):\n            (feature_idx, threshold) = stumps[i]\n            if x[feature_idx] <= threshold:\n                sum_votes += alphas[i] * -1\n            else:\n                sum_votes += alphas[i] * 1\n        predictions.append(1 if sum_votes > 0 else -1)\n    return predictions\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 258, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape[0] != predicted.shape[0]:\n        return -1\n    loss = np.maximum(0, 1 - actual * predicted)\n    mean_loss = np.mean(loss)\n    return round(mean_loss, 4)\nassert hinge_loss([1, -1, 1, -1], [2, -0.5, 0.3, -3]) == 0.3, \"failed: basic mixed example\"\nassert hinge_loss([1, 1, 1], [3, 2, 4]) == 0.0, \"failed: all correct positive class\"\nassert hinge_loss([-1, -1, -1], [-2, -2, -1]) == 0.0, \"failed: all correct negative class\"\nassert hinge_loss([1, -1], [-1, -1]) == 1.0, \"failed: one mis-classified sample\"\nassert hinge_loss([-1, 1], [0, 0]) == 1.0, \"failed: zero predictions\"\nassert hinge_loss([1], [1]) == 0.0, \"failed: single perfect prediction\"\nassert hinge_loss([-1], [1]) == 2.0, \"failed: single worst-case prediction\"\nassert hinge_loss([1, -1, 1, -1], [0.5, 0.5, -0.5, -0.5]) == 1.0, \"failed: margin violations\"\nassert hinge_loss([1, -1, 1, -1], [1, -1, 1, -1]) == 0.0, \"failed: predictions on decision boundary\"\nassert hinge_loss([1, -1, 1, -1, 1], [2, -2, 0, -3, 0.8]) == 0.24, \"failed: larger array mixed case\""}
{"task_id": 259, "completion_id": 0, "passed": true, "result": "passed", "solution": "import random\nimport random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    random.seed(42)\n    sampled_transitions = random.sample(memory, batch_size)\n    return sampled_transitions\nassert sample_replay_memory([1, 2, 3, 4, 5], 3) == [1, 5, 3], \"failed: sample_replay_memory([1,2,3,4,5],3)\"\nassert sample_replay_memory(['a', 'b', 'c', 'd'], 2) == ['a', 'd'], \"failed: sample_replay_memory(['a','b','c','d'],2)\"\nassert sample_replay_memory([10], 1) == [10], \"failed: sample_replay_memory([10],1)\"\nassert sample_replay_memory([0, 1, 2], 4) == -1, \"failed: sample_replay_memory request larger than buffer\"\nassert sample_replay_memory(['x', 'y'], 1) == ['x'], \"failed: sample_replay_memory(['x','y'],1)\"\nassert sample_replay_memory(['x', 'y'], 2) == ['x', 'y'], \"failed: sample_replay_memory(['x','y'],2)\""}
{"task_id": 260, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "from itertools import zip_longest\nfrom math import floor\nfrom itertools import zip_longest\nfrom math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    q = [floor(f * numtilings) for f in floats]\n    wrapwidths = [w if w is not None and w > 0 else 0 for w in wrapwidths]\n    indices = []\n    for t in range(numtilings):\n        coords = [t]\n        b = t\n        for i in range(len(q)):\n            qi = q[i]\n            wi = wrapwidths[i]\n            c = (qi + b % numtilings) // numtilings\n            if wi > 0:\n                coords.append(c % wi)\n            else:\n                coords.append(c)\n            b += t * 2\n        if ints is not None:\n            coords.extend(ints)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n        indices.append(index)\n    return indices\nassert tileswrap(32, 2, [0.1], [5]) == [0, 31], \"test case failed: tileswrap(32, 2, [0.1], [5])\"\nassert tileswrap(64, 4, [0.35], [6]) == [0, 31, 62, 30], \"test case failed: tileswrap(64, 4, [0.35], [6])\"\nassert tileswrap(16, 4, [2.4], [5]) == [2, 1, 0, 0], \"test case failed: tileswrap(16, 4, [2.4], [5])\"\nassert tileswrap(128, 2, [1.2, 3.7], [5, None]) == [34, 100], \"test case failed: tileswrap(128, 2, [1.2, 3.7], [5, None])\"\nassert tileswrap(50, 3, [0.0], [3], [1]) == [1, 12, 23], \"test case failed: tileswrap(50, 3, [0.0], [3], [1])\"\nassert tileswrap(20, 3, [0.99], [2]) == [0, 12, 3], \"test case failed: tileswrap(20, 3, [0.99], [2])\"\nassert tileswrap(30, 2, [0.25, 0.25], []) == [0, 1], \"test case failed: tileswrap(30, 2, [0.25, 0.25], [])\"\nassert tileswrap(10, 1, [1.0], [None]) == [1], \"test case failed: tileswrap(10, 1, [1.0], [None])\"\nassert tileswrap(40, 2, [2.1], [None], [2, 3]) == [27, 18], \"test case failed: tileswrap(40, 2, [2.1], [None], [2, 3])\"\nassert tileswrap(8, 1, [0.0], [1]) == [0], \"test case failed: tileswrap(8, 1, [0.0], [1])\""}
{"task_id": 261, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        in_channels = shape[1]\n        receptive_field = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field\n        fan_out = shape[0] * receptive_field\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape).astype(np.float32)\nnp.random.seed(1)\nshape=(64,32)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (64,32)\"\nnp.random.seed(2)\nshape=(16,3,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (16,3,3,3)\"\nnp.random.seed(3)\nshape=(5,5)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.2,\"mean far from 0 for shape (5,5)\"\nnp.random.seed(4)\nshape=(8,8,1,1)\nW=glorot_normal(shape)\nfan_in=8*1*1\nfan_out=8*1*1\nexp_std=np.sqrt(2/(fan_in+fan_out))\nassert abs(W.std()-exp_std)<0.1,\"std incorrect for shape (8,8,1,1)\"\nnp.random.seed(5)\nshape=(1,1,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (1,1,3,3)\"\nnp.random.seed(6)\nshape=(10,)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (10,)\"\nnp.random.seed(7)\nshape=(12,6,2,2)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.1,\"mean far from 0 for shape (12,6,2,2)\"\nnp.random.seed(8)\nshape=(4,4,4)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (4,4,4)\"\nnp.random.seed(9)\nshape=(128,256)\nW=glorot_normal(shape)\nassert abs(W.std()-np.sqrt(2/(128+256)))<0.05,\"std incorrect for shape (128,256)\""}
{"task_id": 263, "completion_id": 0, "passed": false, "result": "failed: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 1 and the array at index 1 has size 2", "solution": "import numpy as np\nimport numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    a = np.array(x, dtype=np.float64)\n    a = a.reshape(1, -1)\n    for layer_idx in range(len(weights)):\n        W = weights[layer_idx]\n        g = activations[layer_idx]\n        bias = np.ones((1, 1))\n        a_with_bias = np.vstack((bias, a))\n        z = np.dot(W, a_with_bias)\n        if g == 'sigmoid':\n            a = 1 / (1 + np.exp(-z))\n        elif g == 'relu':\n            a = np.maximum(0, z)\n        elif g == 'linear':\n            a = z\n        else:\n            raise ValueError(f'Unknown activation function: {g}')\n        a = a.reshape(1, -1)\n    result = np.round(a[0], 4)\n    if len(result) == 1:\n        return float(result[0])\n    else:\n        return result.tolist()\nassert feedforward_predict([1.0, 0.5], [[[0.4,0.3,-0.2],[-0.1,0.2,0.5]], [[0.1,0.2,-0.3]]], ['sigmoid','linear']) == 0.0531, \"test case 1 failed\"\nassert feedforward_predict([0,0], [[[0.5,0.3,-0.1]], [[0.2,0.4]]], ['relu','linear']) == 0.4, \"test case 2 failed\"\nassert feedforward_predict([2.0], [[[0.1,-0.2]]], ['sigmoid']) == 0.4256, \"test case 3 failed\"\nassert feedforward_predict([1,2], [[[0.2,0.4,0.6],[0.1,-0.5,0.2]], [[0.3,0.2,-0.1],[0.5,-0.4,0.3]]], ['relu','linear']) == [0.66,-0.22], \"test case 4 failed\"\nassert feedforward_predict([0.5,-0.5], [[[0.1,0.2,0.3],[0.2,-0.1,0.4]], [[-0.2,0.5,0.1]]], ['sigmoid','sigmoid']) == 0.5262, \"test case 5 failed\"\nassert feedforward_predict([1], [[[0.3,0.4]], [[0.2,0.5]]], ['relu','sigmoid']) == 0.6341, \"test case 6 failed\"\nassert feedforward_predict([3], [[[-1.0,0.5]]], ['linear']) == 0.5, \"test case 7 failed\"\nassert feedforward_predict([-2,1], [[[-0.5,1,2]], [[1.0,0.7]]], ['relu','linear']) == 1.0, \"test case 8 failed\"\nassert feedforward_predict([0.2,0.8], [[[0.1,0.2,0.3]], [[0.05,0.1],[-0.2,0.4]]], ['sigmoid','linear']) == [0.1094,0.0375], \"test case 9 failed\"\nassert feedforward_predict([0], [[[0.0,0.0]]], ['linear']) == 0.0, \"test case 10 failed\""}
{"task_id": 265, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        return round(-0.25 * x + 82.50372665317208, 4)\n    elif 250 < x <= 600:\n        return round(20.00372665317208, 4)\n    elif 600 < x <= 700:\n        return round(-0.2 * x + 140.00372665317207, 4)\n    else:\n        return round(0.003726653172066108, 4)\nassert king_loss_fn(0) == 82.5037, \"test case failed: king_loss_fn(0)\"\nassert king_loss_fn(100) == 57.5037, \"test case failed: king_loss_fn(100)\"\nassert king_loss_fn(250) == 20.0037, \"test case failed: king_loss_fn(250)\"\nassert king_loss_fn(-50) == 95.0037, \"test case failed: king_loss_fn(-50)\"\nassert king_loss_fn(300) == 20.0037, \"test case failed: king_loss_fn(300)\"\nassert king_loss_fn(555) == 20.0037, \"test case failed: king_loss_fn(555)\"\nassert king_loss_fn(600) == 20.0037, \"test case failed: king_loss_fn(600)\"\nassert king_loss_fn(650) == 10.0037, \"test case failed: king_loss_fn(650)\"\nassert king_loss_fn(700) == 0.0037, \"test case failed: king_loss_fn(700)\"\nassert king_loss_fn(800) == 0.0037, \"test case failed: king_loss_fn(800)\""}
{"task_id": 266, "completion_id": 0, "passed": false, "result": "failed: failed: example with duplicate/reversed edges", "solution": "\nfrom typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj = [[] for _ in range(len(V))]\n    vertex_to_index = {vertex: idx for (idx, vertex) in enumerate(V)}\n    for (u, v) in E:\n        if u in vertex_to_index and v in vertex_to_index:\n            u_idx = vertex_to_index[u]\n            v_idx = vertex_to_index[v]\n            if v not in adj[u_idx]:\n                adj[u_idx].append(v)\n            if u not in adj[v_idx]:\n                adj[v_idx].append(u)\n    return adj\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 267, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        sorted_unique_values = np.sort(np.unique(feature))\n        for threshold in sorted_unique_values:\n            left_indices = np.where(feature < threshold)[0]\n            right_indices = np.where(feature >= threshold)[0]\n            left_weight = sample_weights[left_indices].sum()\n            right_weight = sample_weights[right_indices].sum()\n            for polarity in [1, -1]:\n                left_pred = 1 if polarity == 1 else -1\n                right_pred = -1 if polarity == 1 else 1\n                error = 0.0\n                for i in left_indices:\n                    if y[i] != left_pred:\n                        error += sample_weights[i]\n                for i in right_indices:\n                    if y[i] != right_pred:\n                        error += sample_weights[i]\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_polarity = polarity\n    best_threshold = round(best_threshold, 4)\n    best_error = round(best_error, 4)\n    return {'feature_index': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': best_error}\nassert train_decision_stump(np.array([[1],[1],[1]]), np.array([1,-1,1]), np.array([0.1,0.2,0.7]))[\"weighted_error\"] == 0.2, \"test case 5 failed\"\nassert train_decision_stump(np.array([[0],[1]]), np.array([-1,1]), np.array([0.8,0.2]))[\"threshold\"] in (0.0,1.0), \"test case 6 failed\"\nassert train_decision_stump(np.array([[2,0],[0,2],[2,2],[0,0]]), np.array([1,-1,1,-1]), np.ones(4))[\"weighted_error\"] == 0.0, \"test case 7 failed\"\nassert train_decision_stump(np.array([[5],[6],[7]]), np.array([1,1,1]), np.array([0.3,0.3,0.4]))[\"weighted_error\"] == 0.0, \"test case 8 failed\"\nassert train_decision_stump(np.array([[0],[1],[2],[3]]), np.array([1,-1,1,-1]), np.array([0.25,0.25,0.25,0.25]))[\"polarity\"] in (1,-1), \"test case 9 failed\"\nassert train_decision_stump(np.array([[2,3],[2,2],[2,1]]), np.array([-1,1,1]), np.ones(3))[\"feature_index\"] == 1, \"test case 10 failed\""}
{"task_id": 268, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import combinations, permutations\nimport numpy as np\nfrom itertools import combinations\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool): Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    if n_vertices == 1:\n        return [[0]]\n    adj_matrix = [[0 for _ in range(n_vertices)] for _ in range(n_vertices)]\n    if directed:\n        for i in range(n_vertices):\n            for j in range(n_vertices):\n                if i != j:\n                    if np.random.rand() <= edge_prob:\n                        adj_matrix[i][j] = 1\n    else:\n        for (i, j) in combinations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                adj_matrix[i][j] = 1\n                adj_matrix[j][i] = 1\n    return adj_matrix\nimport numpy as np\nnp.random.seed(0)\nassert random_unweighted_graph(1, 1.0, False) == [[0]], \"test failed: single vertex graph\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 0.0, False) == [[0,0],[0,0]], \"test failed: no edges undirected\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 1.0, False) == [[0,1],[1,0]], \"test failed: full graph undirected\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 0.0, True) == [[0,0],[0,0]], \"test failed: no edges directed\"\nnp.random.seed(0)\nassert random_unweighted_graph(2, 1.0, True) == [[0,1],[1,0]], \"test failed: full graph directed\"\nnp.random.seed(0)\nassert random_unweighted_graph(3, 1.0, False) == [[0,1,1],[1,0,1],[1,1,0]], \"test failed: triangle full\"\nnp.random.seed(0)\nassert random_unweighted_graph(3, 0.0, False) == [[0,0,0],[0,0,0],[0,0,0]], \"test failed: triangle empty\"\nnp.random.seed(1)\nassert random_unweighted_graph(3, 0.5, False) == [[0,1,0],[1,0,1],[0,1,0]], \"test failed: seeded example\"\nnp.random.seed(0)\nassert random_unweighted_graph(4, 0.0, False) == [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], \"test failed: 4-vertex empty graph\"\nnp.random.seed(0)\nassert random_unweighted_graph(4, 1.0, False) == [[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]], \"test failed: 4-vertex clique\""}
{"task_id": 269, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    layer1_weights = state_dimensions * 164\n    layer1_biases = 164\n    layer2_weights = 164 * action_dimensions\n    layer2_biases = action_dimensions\n    return layer1_weights + layer1_biases + layer2_weights + layer2_biases\nassert count_trainable_params(4, 2) == 1150, \"failed for (4,2)\"\nassert count_trainable_params(1, 1) == 493, \"failed for (1,1)\"\nassert count_trainable_params(10, 5) == 2629, \"failed for (10,5)\"\nassert count_trainable_params(3, 7) == 1811, \"failed for (3,7)\"\nassert count_trainable_params(20, 20) == 6744, \"failed for (20,20)\"\nassert count_trainable_params(100, 100) == 33064, \"failed for (100,100)\""}
{"task_id": 270, "completion_id": 0, "passed": false, "result": "failed: test case failed: example input", "solution": "import numpy as np\nimport numpy as np\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    rewards = np.dot(context, thetas)\n    rounded_rewards = np.round(rewards, 4)\n    max_reward = np.max(rounded_rewards)\n    max_indices = np.where(rounded_rewards == max_reward)[0]\n    best_arm = max_indices[0]\n    return (max_reward, best_arm)\nassert oracle_payoff(np.array([[0.5, 1.0],[1.5, 0.2]]), np.array([[0.1, 0.3],[0.4, 0.2]])) == (0.65, 0), \"test case failed: example input\"\nassert oracle_payoff(np.array([[1,2,3],[4,5,6]]), np.array([[0.1,0.2,0.3],[0.4,0.5,0.6]])) == (4.5, 2), \"test case failed: 3-arm matrix\"\nassert oracle_payoff(np.array([[-1,2],[3,-4],[5,6]]), np.array([[-0.2,0.3],[0.4,-0.5],[0.6,0.7]])) == (6.8, 1), \"test case failed: negative values\"\nassert oracle_payoff(np.array([[1,1],[1,1]]), np.array([[1,1],[1,1]])) == (2.0, 0), \"test case failed: tie \u2011 choose smallest index\"\nassert oracle_payoff(np.array([[1],[2],[3]]), np.array([[0.1],[0.2],[0.3]])) == (1.4, 0), \"test case failed: single arm\"\nassert oracle_payoff(np.array([[0,1,0.5],[1,0,0.5]]), np.array([[0.5,0.2,0.1],[0.1,0.9,0.2]])) == (0.2, 1), \"test case failed: mixed zeros\"\nassert oracle_payoff(np.array([[-1,-2],[2,1]]), np.array([[0.5,0.5],[-0.5,-0.5]])) == (-1.5, 0), \"test case failed: negative reward tie\"\nassert oracle_payoff(np.array([[0.3333,0.6667],[0.1,0.2]]), np.array([[0.2,0.4],[0.3,0.6]])) == (0.3867, 1), \"test case failed: rounding check\"\nassert oracle_payoff(np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]), np.ones((4,4))) == (1.0, 0), \"test case failed: identity context\"\nassert oracle_payoff(np.array([[2,4],[6,8]]), np.array([[0.5,0.25],[0.75,1]])) == (9.0, 1), \"test case failed: larger numbers\""}
{"task_id": 271, "completion_id": 0, "passed": false, "result": "failed: failed on example 1", "solution": "import numpy as np\nimport numpy as np\ndef xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    left_true = np.array(left_true)\n    left_pred = np.array(left_pred)\n    right_true = np.array(right_true)\n    right_pred = np.array(right_pred)\n    left_g = left_pred - left_true\n    right_g = right_pred - right_true\n    left_score = np.sum(left_g ** 2) / len(left_g)\n    right_score = np.sum(right_g ** 2) / len(right_g)\n    parent_score = np.sum((left_g + right_g) ** 2) / (len(left_g) + len(right_g))\n    gain = 0.5 * (left_score + right_score - parent_score)\n    return max(0.0, round(gain, 4))\nassert xgboost_split_gain([3, 5], [2.5, 5.5], [2, 7], [2, 8]) == 0.125, \"failed on example 1\"\nassert xgboost_split_gain([1, 2], [1, 2], [3, 4], [3, 4]) == 0.0, \"failed when gain should be zero\"\nassert xgboost_split_gain([0], [1], [0], [-1]) == 1.0, \"failed on opposite gradients\"\nassert xgboost_split_gain([2, 2, 2], [3, 3, 3], [1, 1], [1, 1]) == 0.6, \"failed on mixed split 1\"\nassert xgboost_split_gain([1], [2], [3], [4]) == 0.0, \"failed on zero-gain split\"\nassert xgboost_split_gain([5, 6], [4, 5], [7], [8]) == 1.3333, \"failed on mixed split 2\"\nassert xgboost_split_gain([0], [0.5], [0.5], [0.5]) == 0.0625, \"failed on uneven sample counts\"\nassert xgboost_split_gain([1, 1, 1], [1, 1, 1], [1, 2], [2, 2]) == 0.15, \"failed on partially perfect left\"\nassert xgboost_split_gain([2, 3], [2, 3], [4, 5], [5, 6]) == 0.5, \"failed on right only error\"\nassert xgboost_split_gain([10, 10, 10], [9, 9, 9], [5, 5, 5], [5, 5, 5]) == 0.75, \"failed on big left error\""}
{"task_id": 273, "completion_id": 0, "passed": false, "result": "failed: name 'np' is not defined", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    if len(np.unique(feature)) == 1:\n        return (None, 0.0)\n    sorted_feature = np.sort(feature)\n    unique_sorted = np.unique(sorted_feature)\n    thresholds = []\n    for i in range(len(unique_sorted) - 1):\n        threshold = (unique_sorted[i] + unique_sorted[i + 1]) / 2\n        thresholds.append(threshold)\n\n    def entropy(labels):\n        counts = np.bincount(labels)\n        probs = counts / len(labels)\n        return -np.sum(probs * np.log2(probs))\n    parent_entropy = entropy(target)\n    max_gain = 0.0\n    best_threshold = None\n    for t in thresholds:\n        left_mask = feature < t\n        right_mask = feature >= t\n        left_target = target[left_mask]\n        right_target = target[right_mask]\n        left_entropy = entropy(left_target) if len(left_target) > 0 else 0.0\n        right_entropy = entropy(right_target) if len(right_target) > 0 else 0.0\n        gain = parent_entropy - len(left_target) / len(target) * left_entropy - len(right_target) / len(target) * right_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = t\n        elif gain == max_gain and best_threshold is not None:\n            if t < best_threshold:\n                best_threshold = t\n    if max_gain <= 0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(max_gain, 4))\nassert best_split([2, 3, 10, 19], [0, 0, 1, 1]) == (6.5, 1.0), \"failed on perfect 2-class separation\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 1]) == (3.5, 0.8113), \"failed on unbalanced classes\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 0]) == (None, 0.0), \"failed on pure node\"\nassert best_split([1, 2, 3, 4], [0, 1, 0, 1]) == (1.5, 0.3113), \"failed on symmetric classes\"\nassert best_split([1, 2, 5, 6], [0, 0, 1, 1]) == (3.5, 1.0), \"failed on separated clusters\"\nassert best_split([10, 20, 30], [0, 1, 1]) == (15.0, 0.9183), \"failed on small dataset\"\nassert best_split([1, 2], [0, 1]) == (1.5, 1.0), \"failed on two-point perfect split\"\nassert best_split([1, 2], [0, 0]) == (None, 0.0), \"failed on two identical labels\"\nassert best_split([1, 2, 3, 4, 5], [0, 0, 1, 1, 1]) == (2.5, 0.971), \"failed on 5-point uneven split\"\nassert best_split([3, 3, 3, 3], [0, 1, 0, 1]) == (None, 0.0), \"failed on identical feature values\""}
{"task_id": 274, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    values_array = np.array(values, dtype=float)\n    clipped_array = np.clip(values_array, -5, 5)\n    return clipped_array.tolist()\nassert small_norm_clip([-10, -3, 0, 2, 20]) == [-5, -3, 0, 2, 5], \"test case failed: small_norm_clip([-10, -3, 0, 2, 20])\"\nassert small_norm_clip([5, -5, 4.9, -4.9]) == [5, -5, 4.9, -4.9], \"test case failed: small_norm_clip([5, -5, 4.9, -4.9])\"\nassert small_norm_clip([0]) == [0], \"test case failed: small_norm_clip([0])\"\nassert small_norm_clip([6, -6]) == [5, -5], \"test case failed: small_norm_clip([6, -6])\"\nassert small_norm_clip(np.array([-7.5, 7.5])) == [-5.0, 5.0], \"test case failed: small_norm_clip(np.array([-7.5, 7.5]))\"\nassert small_norm_clip([]) == [], \"test case failed: small_norm_clip([])\"\nassert small_norm_clip([3.333, -5.001]) == [3.333, -5], \"test case failed: small_norm_clip([3.333, -5.001])\"\nassert small_norm_clip([100, -100, 0]) == [5, -5, 0], \"test case failed: small_norm_clip([100, -100, 0])\"\nassert small_norm_clip([4.9999, -4.9999]) == [4.9999, -4.9999], \"test case failed: small_norm_clip([4.9999, -4.9999])\""}
{"task_id": 276, "completion_id": 0, "passed": false, "result": "failed: test 1 failed: bigram, seen words", "solution": "import math\nimport string\nfrom collections import Counter\nimport math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\n\n    The model is trained on *corpus* using the given *N* and *k* (smoothing\n    parameter).  All details of tokenisation, padding, vocabulary construction\n    and probability estimation are described in the task specification.\n\n    Args:\n        corpus: List of training sentences.\n        sentence: The sentence whose probability needs to be computed.\n        N: Order of the model (1 for unigram, 2 for bigram, etc.).\n        k: Additive smoothing parameter (default 1.0).\n        unk: If True, unseen tokens are mapped to a special <unk> symbol.\n\n    Returns:\n        A single float, rounded to 4 decimal places, representing the base-10\n        logarithm of the sentence probability.\n    \"\"\"\n\n    def tokenize_and_preprocess(text):\n        text = text.lower()\n        text = text.strip(string.punctuation)\n        tokens = text.split()\n        return tokens\n    padded_corpus = []\n    for sent in corpus:\n        tokens = tokenize_and_preprocess(sent)\n        padded_tokens = ['<bol>'] + tokens + ['<eol>']\n        padded_corpus.append(padded_tokens)\n    ngram_counts = Counter()\n    vocab = set()\n    for tokens in padded_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram] += 1\n            for token in ngram:\n                vocab.add(token)\n    if unk:\n        vocab.add('<unk>')\n    target_tokens = tokenize_and_preprocess(sentence)\n    padded_target = ['<bol>'] + target_tokens + ['<eol>']\n    unk_map = {}\n    for token in vocab:\n        unk_map[token] = token\n    for token in padded_target:\n        if token not in vocab:\n            unk_map[token] = '<unk>'\n    processed_target = [unk_map[token] for token in padded_target]\n    total_log_prob = 0.0\n    for i in range(len(processed_target) - N + 1):\n        ngram = tuple(processed_target[i:i + N])\n        history = ngram[:-1]\n        word = ngram[-1]\n        count_ngram = ngram_counts.get(ngram, 0)\n        count_history = 0\n        for j in range(len(processed_target) - N + 1):\n            current_history = tuple(processed_target[j:j + N - 1])\n            if current_history == history:\n                count_history += 1\n        numerator = count_ngram + k\n        denominator = count_history + k * len(vocab)\n        log_prob = math.log10(numerator / denominator)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"I love cats\", 2) == -2.2095, \"test 1 failed: bigram, seen words\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"I love birds\", 2) == -2.7536, \"test 2 failed: bigram, unseen word\"\nassert additive_ngram_log_prob([\"a a a b\"], \"a b\", 1) == -2.6604, \"test 3 failed: unigram standard\"\nassert additive_ngram_log_prob([\"a a a b\"], \"c\", 1) == -2.5221, \"test 4 failed: unigram with <unk>\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"dogs love\", 2) == -2.8116, \"test 5 failed: bigram, unseen order\"\nassert additive_ngram_log_prob([\"I love dogs\", \"I love cats\"], \"birds birds\", 2) == -2.6444, \"test 6 failed: bigram, consecutive <unk>\"\nassert additive_ngram_log_prob([\"to be or not to be\"], \"to be or\", 3) == -2.1584, \"test 7 failed: trigram, seen history\"\nassert additive_ngram_log_prob([\"to be or not to be\"], \"or not to\", 3) == -2.3502, \"test 8 failed: trigram, partly unseen history\"\nassert additive_ngram_log_prob([\"hello world\"], \"hello world\", 2) == -1.4314, \"test 9 failed: minimal corpus, perfect match\"\nassert additive_ngram_log_prob([\"hello world\"], \"world hello\", 2) == -2.3345, \"test 10 failed: minimal corpus, unseen order\""}
{"task_id": 277, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env['action_space'], (tuple, dict))\n    tuple_obs = isinstance(env['observation_space'], (tuple, dict))\n    return (tuple_action, tuple_obs)\nassert is_tuple({\"action_space\": (0, 1), \"observation_space\": {\"x\": 0}}) == (True, True), \"test case failed: both composite\"\nassert is_tuple({\"action_space\": [0, 1], \"observation_space\": (0, 1)}) == (False, True), \"test case failed: obs composite (tuple)\"\nassert is_tuple({\"action_space\": {\"a\": 1}, \"observation_space\": 42}) == (True, False), \"test case failed: action composite (dict)\"\nassert is_tuple({\"action_space\": 3.14, \"observation_space\": \"state\"}) == (False, False), \"test case failed: none composite\"\nassert is_tuple({\"action_space\": ((1, 2), (3, 4)), \"observation_space\": {\"a\": {\"b\": 2}}}) == (True, True), \"test case failed: nested composites\"\nassert is_tuple({\"action_space\": None, \"observation_space\": None}) == (False, False), \"test case failed: None spaces\"\nassert is_tuple({\"action_space\": [1, 2, 3], \"observation_space\": {}}) == (False, True), \"test case failed: observation dict\"\nassert is_tuple({\"action_space\": (\"left\", \"right\"), \"observation_space\": -1}) == (True, False), \"test case failed: action tuple\"\nassert is_tuple({\"action_space\": tuple(range(100)), \"observation_space\": {i: i*i for i in range(10)}}) == (True, True), \"test case failed: large composites\"\nassert is_tuple({\"action_space\": (1, {\"a\": 2}), \"observation_space\": {\"tuple\": (1, 2)}}) == (True, True), \"test case failed: mixed inner types\""}
{"task_id": 278, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    if 'value' in tree:\n        return tree['value']\n    feature_i = tree['feature_i']\n    threshold = tree['threshold']\n    true_branch = tree['true_branch']\n    false_branch = tree['false_branch']\n    if sample[feature_i] <= threshold:\n        return evaluate_decision_tree(true_branch, sample)\n    else:\n        return evaluate_decision_tree(false_branch, sample)\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': 2.5, 'true_branch': {'value': 1}, 'false_branch': {'value': 0}}, [3.0]) == 0, \"test case failed: simple_tree, sample [3.0]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': 2.5, 'true_branch': {'value': 1}, 'false_branch': {'value': 0}}, [2.0]) == 1, \"test case failed: simple_tree, sample [2.0]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.4, 1.2]) == 2, \"test case failed: deep_tree, sample [0.4,1.2]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.6, 1.2]) == 3, \"test case failed: deep_tree, sample [0.6,1.2]\"\nassert evaluate_decision_tree({'feature_i': 1, 'threshold': 1.0, 'true_branch': {'value': -1}, 'false_branch': {'feature_i': 0, 'threshold': 0.5, 'true_branch': {'value': 2}, 'false_branch': {'value': 3}}}, [0.1, 0.5]) == -1, \"test case failed: deep_tree, sample [0.1,0.5]\"\nassert evaluate_decision_tree({'value': 42}, [10, 20, 30]) == 42, \"test case failed: leaf_tree should always return 42\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [-2, 3]) == 'inside', \"test case failed: neg_tree, sample [-2,3]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [0, 0]) == 'edge', \"test case failed: neg_tree, sample [0,0]\"\nassert evaluate_decision_tree({'feature_i': 0, 'threshold': -1.5, 'true_branch': {'value': 'inside'}, 'false_branch': {'feature_i': 1, 'threshold': 0, 'true_branch': {'value': 'edge'}, 'false_branch': {'value': 'outside'}}}, [1, 1]) == 'outside', \"test case failed: neg_tree, sample [1,1]\""}
{"task_id": 279, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must have the same length.')\n    N = len(y_true)\n    mse = np.mean((y_pred - y_true) ** 2)\n    gradient = 2 / N * (y_pred - y_true)\n    y_binary = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(y_binary == y_true)\n    mse_rounded = round(float(mse), 4)\n    gradient_rounded = [round(float(val), 4) for val in gradient]\n    accuracy_rounded = round(float(accuracy), 4)\n    return (mse_rounded, gradient_rounded, accuracy_rounded)\nassert mse_loss([1, 0, 1], [0.8, 0.2, 0.6]) == (0.08, [-0.1333, 0.1333, -0.2667], 1.0), \"test case failed: mse_loss([1,0,1],[0.8,0.2,0.6])\"\nassert mse_loss([0, 0, 0], [0, 0, 0]) == (0.0, [0.0, 0.0, 0.0], 1.0), \"test case failed: mse_loss all zeros\"\nassert mse_loss([1, 1], [1, 1]) == (0.0, [0.0, 0.0], 1.0), \"test case failed: mse_loss perfect ones\"\nassert mse_loss([1, 0, 1, 0], [0, 1, 0, 1]) == (1.0, [-0.5, 0.5, -0.5, 0.5], 0.0), \"test case failed: mse_loss inverted predictions\"\nassert mse_loss([0, 1], [0.49, 0.51]) == (0.2401, [0.49, -0.49], 1.0), \"test case failed: mse_loss edge threshold\"\nassert mse_loss([0, 0, 1, 1], [0.25, 0.75, 0.35, 0.65]) == (0.2925, [0.125, 0.375, -0.325, -0.175], 0.5), \"test case failed: mse_loss mixed predictions\"\nassert mse_loss([1,1,1,0,0], [0.9,0.8,0.2,0.1,0.4]) == (0.172, [-0.04, -0.08, -0.32, 0.04, 0.16], 0.8), \"test case failed: mse_loss random 5\"\nimport numpy as np\nassert mse_loss(np.array([0,1,0,1]), np.array([0.2,0.8,0.3,0.7])) == (0.065, [0.1, -0.1, 0.15, -0.15], 1.0), \"test case failed: mse_loss numpy arrays\"\nassert mse_loss([1,0,1,0,1,0], [0.6,0.3,0.9,0.2,0.4,0.7]) == (0.1917, [-0.1333, 0.1, -0.0333, 0.0667, -0.2, 0.2333], 0.6667), \"test case failed: mse_loss length 6\"\nassert mse_loss([0], [0.9]) == (0.81, [1.8], 0.0), \"test case failed: mse_loss single sample\""}
{"task_id": 280, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if not return_grad:\n        regularization_value = 0.5 * alpha * np.sum(w ** 2)\n        return round(regularization_value, 4)\n    gradient = alpha * w\n    return np.round(gradient, 4)\nassert l2_regularization(np.array([1.0, -2.0, 3.0]), 0.1) == 0.7, \"Failed on scalar value with vector input\"\nassert np.allclose(l2_regularization(np.array([1.0, -2.0, 3.0]), 0.1, True), np.array([0.1, -0.2, 0.3])), \"Failed on gradient with vector input\"\nassert l2_regularization(np.array([0.0]), 0.3) == 0.0, \"Failed on zero vector value\"\nassert np.allclose(l2_regularization(np.zeros(5), 0.3, True), np.zeros(5)), \"Failed on zero vector gradient\"\nassert l2_regularization(np.array([4.0]), 2.0) == 16.0, \"Failed on single weight value\"\nassert np.allclose(l2_regularization(np.array([4.0]), 2.0, True), np.array([8.0])), \"Failed on single weight gradient\"\nassert l2_regularization(np.array([2.0, 2.0, 2.0, 2.0]), 0.5) == 4.0, \"Failed on equal elements value\"\nassert np.allclose(l2_regularization(np.array([2.0, 2.0, 2.0, 2.0]), 0.5, True), np.array([1.0, 1.0, 1.0, 1.0])), \"Failed on equal elements gradient\"\nassert l2_regularization(np.array([[1.0, 2.0], [3.0, 4.0]]), 0.2) == 3.0, \"Failed on matrix value\"\nassert np.allclose(l2_regularization(np.array([[1.0, 2.0], [3.0, 4.0]]), 0.2, True), np.array([[0.2, 0.4], [0.6, 0.8]])), \"Failed on matrix gradient\""}
{"task_id": 281, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n\n    class L1RegularizationWrapper:\n\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w):\n            \"\"\"Returns the L1 penalty value.\"\"\"\n            if self.alpha == 0:\n                return 0.0\n            return self.alpha * np.sum(np.abs(w))\n\n        def grad(self, w):\n            \"\"\"Returns the gradient of the penalty with respect to w.\"\"\"\n            if self.alpha == 0:\n                return np.zeros_like(w)\n            return self.alpha * np.sign(w)\n    return L1RegularizationWrapper(alpha)\nimport numpy as np\nreg1 = L1Regularization(0.1)\nreg2 = L1Regularization(0.0)\nw2 = np.random.randn(5,3)\nreg3 = L1Regularization(2.5)\nw3 = np.array([[0.0, 4.0], [-3.0, 1.0]])\nreg4 = L1Regularization(1.0)\nw4 = np.array([0.0, 0.0, 0.0])"}
{"task_id": 282, "completion_id": 0, "passed": false, "result": "failed: failed on [4, 7, 13, 16]", "solution": "import math\nimport math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to the nearest 4th decimal.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    if not data:\n        return (0.0, 0.0, 0.0)\n    n = 1\n    m = float(data[0])\n    s = 0.0\n    for x in data[1:]:\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n        n += 1\n    if n == 1:\n        variance = 0.0\n    else:\n        variance = s / (n - 1)\n    std = math.sqrt(variance)\n    return (round(m, 4), round(variance, 4), round(std, 4))\nassert running_stats([4, 7, 13, 16]) == (10.0, 30.0, 5.4772), \"failed on [4, 7, 13, 16]\"\nassert running_stats([1]) == (1.0, 0.0, 0.0), \"failed on single element\"\nassert running_stats([1, 1, 1, 1]) == (1.0, 0.0, 0.0), \"failed on identical elements\"\nassert running_stats([1, -1, 1, -1]) == (0.0, 1.3333, 1.1547), \"failed on alternating signs\"\nassert running_stats([-5, -4, -3, -2, -1]) == (-3.0, 2.5, 1.5811), \"failed on negative numbers\"\nassert running_stats([1_000_000, 1_000_001]) == (1000000.5, 0.5, 0.7071), \"failed on large numbers\"\nassert running_stats([0, 0, 0, 5, 5]) == (2.0, 7.5, 2.7386), \"failed on mixed zeros and fives\"\nassert running_stats([10, 20, 30]) == (20.0, 100.0, 10.0), \"failed on simple arithmetic progression\"\nassert running_stats([2.5, 3.5]) == (3.0, 0.5, 0.7071), \"failed on floats\"\nassert running_stats(list(range(1, 101))) == (50.5, 841.6667, 29.0115), \"failed on 1..100\""}
{"task_id": 283, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    p = 1 / (1 + np.exp(-predicted))\n    g = p - actual\n    h = p * (1 - p)\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    denominator = sum_h + regularization\n    leaf_value = sum_g / denominator\n    gain = 0.5 * sum_g ** 2 / denominator\n    leaf_value_rounded = round(leaf_value, 4)\n    gain_rounded = round(gain, 4)\n    return [leaf_value_rounded, gain_rounded]\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([0.0, 0.0])) == [0.0, 0.0], \"test case failed: all-zero scores\"\nassert binary_log_loss_metrics(np.array([1]), np.array([2.0])) == [-0.1079, 0.0064], \"test case failed: single positive sample\"\nassert binary_log_loss_metrics(np.array([0]), np.array([-2.0])) == [0.1079, 0.0064], \"test case failed: single negative sample\"\nassert binary_log_loss_metrics(np.array([1, 0, 1, 0]), np.array([0.5, -0.5, 1.0, -1.5])) == [-0.0476, 0.0021], \"test case failed: mixed labels\"\nassert binary_log_loss_metrics(np.array([0, 0, 0]), np.array([0.0, 0.0, 0.0])) == [0.8571, 0.6429], \"test case failed: all negatives same score\"\nassert binary_log_loss_metrics(np.array([1, 1, 1]), np.array([0.0, 0.0, 0.0])) == [-0.8571, 0.6429], \"test case failed: all positives same score\"\nassert binary_log_loss_metrics(np.array([0, 1]), np.array([-1.0, 1.0])) == [0.0, 0.0], \"test case failed: symmetric scores\"\nassert binary_log_loss_metrics(np.array([1, 0, 1, 0, 1, 0]), np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])) == [0.0, 0.0], \"test case failed: alternating labels\"\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([10.0, -10.0])) == [0.0, 0.0], \"test case failed: extreme scores\"\nassert binary_log_loss_metrics(np.array([1, 0]), np.array([0.5, -0.5]), regularization=0.5) == [0.0, 0.0], \"test case failed: custom regularisation\""}
{"task_id": 284, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef iht_get_index(obj: object, size: int, table: dict, overfull_count: list[int], readonly: bool=False) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    if obj in table:\n        return table[obj]\n    if readonly:\n        return None\n    if len(table) >= size:\n        index = hash(obj) % size\n        overfull_count[0] += 1\n        return index\n    else:\n        index = len(table)\n        table[obj] = index\n        return index\n# 1 first insertion\\n_table = {}\\n_over = [0]\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 1'\\nassert _table == {'dog': 0} and _over == [0], 'failed test 1 (state)'\n# 2 same object again, should not change anything\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 2'\n# 3 readonly request for unknown object\\nassert iht_get_index('cat', 3, _table, _over, readonly=True) is None, 'failed test 3'\n# 4 fill the table to capacity\\nassert iht_get_index('cat', 3, _table, _over) == 1, 'failed test 4'\\nassert iht_get_index('bird', 3, _table, _over) == 2, 'failed test 4'\n# 5 collision after full\\ncollision_idx = iht_get_index('fish', 3, _table, _over)\\nassert 0 <= collision_idx < 3, 'failed test 5'\n# 6 repeated collision\\nassert iht_get_index('fish', 3, _table, _over) == collision_idx, 'failed test 6'\n# 7 new collision\\nidx_new = iht_get_index(('tuple', 42), 3, _table, _over)\\nassert 0 <= idx_new < 3, 'failed test 7'\n# 8 original entries unaffected\\nassert iht_get_index('dog', 3, _table, _over) == 0, 'failed test 8'\n# 9 readonly after collision\\nassert iht_get_index('unknown', 3, _table, _over, readonly=True) is None, 'failed test 9'\n# 10 collision count correct\\nfor i in range(5):\\n    iht_get_index(f'x{i}', 3, _table, _over)\\nassert _over == [8], 'failed test 10'"}
{"task_id": 285, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    if x.shape[1] != y.shape[1]:\n        return -1\n    kernel_matrix = x @ y.T\n    return kernel_matrix.tolist()\nimport numpy as np\nassert linear_kernel(np.array([1,2,3]), np.array([4,5,6])) == [[32]], \"failed on 1-D vs 1-D\"\nassert linear_kernel(np.array([[1,2],[3,4]]), np.array([[5,6],[7,8]])) == [[17,23],[39,53]], \"failed on 2\u00d72 vs 2\u00d72\"\nassert linear_kernel(np.array([[1,2,3],[4,5,6]]), np.array([[7,8,9],[1,0,1]])) == [[50,4],[122,10]], \"failed on 2\u00d73 vs 2\u00d73\"\nassert linear_kernel(np.array([[1,2]]), np.array([[3,4],[5,6]])) == [[11,17]], \"failed on 1\u00d7d vs 2\u00d7d\"\nassert linear_kernel(np.array([[3,4],[5,6]]), np.array([1,2])) == [[11],[17]], \"failed on 2\u00d7d vs 1\u00d7d\"\nassert linear_kernel(np.array([[1,2]]), np.array([[1,2,3]])) == -1, \"failed on mismatched features (2 vs 3)\"\nassert linear_kernel(np.array([1,2,3]), np.array([1,2])) == -1, \"failed on mismatched 1-D lengths\"\nassert linear_kernel(np.array([[1,2,3]]), np.array([[4,5,6],[7,8,9],[1,1,1]])) == [[32,50,6]], \"failed on 1\u00d73 vs 3\u00d73\"\nassert linear_kernel(np.array([[2,0],[0,2]]), np.array([[1,1]])) == [[2],[2]], \"failed on 2\u00d72 vs 1\u00d72\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if not callable(initializer):\n        raise ValueError('Invalid initialization function.')\n    return initializer\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 287, "completion_id": 0, "passed": false, "result": "failed: index 1 is out of bounds for axis 3 with size 1", "solution": "import numpy as np\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H):\n                for w in range(W):\n                    oh = h // s_h if h % s_h == 0 else h // s_h\n                    ow = w // s_w if w % s_w == 0 else w // s_w\n                    start_h = oh * s_h\n                    end_h = start_h + p_h\n                    start_w = ow * s_w\n                    end_w = start_w + p_w\n                    window = X[n, c, start_h:end_h, start_w:end_w]\n                    avg = np.mean(window)\n                    pooled_output[n, c, oh, ow] = avg\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for oh in range(out_H):\n                for ow in range(out_W):\n                    start_h = oh * s_h\n                    end_h = start_h + p_h\n                    start_w = ow * s_w\n                    end_w = start_w + p_w\n                    grad_window = accum_grad[n, c, oh, ow]\n                    grad_input[n, c, start_h:end_h, start_w:end_w] += grad_window / (p_h * p_w)\n    pooled_output_rounded = pooled_output.round(4).tolist()\n    grad_input_rounded = grad_input.round(4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[1]]]])) == ([[[[2.5]]]], [[[[0.25, 0.25], [0.25, 0.25]]]]), \"test case 1 failed: overlapping 2x2 window with unit gradient\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.5, 0.25], [0.5, 1.0, 0.5], [0.25, 0.5, 0.25]]]]), \"test case 2 failed: 3x3 input with overlapping windows\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]), (2, 2), (2, 2), np.ones((1, 2, 1, 1))) == ([[[[2.5]], [[6.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 3 failed: 2 channels, non-overlapping windows\"\nassert average_pool2d(np.arange(32, dtype=float).reshape(2, 1, 4, 4), (2, 2), (2, 2), np.ones((2, 1, 2, 2))) == ([ [[[2.5, 4.5], [10.5, 12.5]]], [[[18.5, 20.5], [26.5, 28.5]]] ], [ [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]], [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]]]), \"test case 4 failed: batch size 2 with non-overlapping windows\"\nassert average_pool2d(np.array([[[[10, 20], [30, 40]]]]), (1, 1), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[10.0, 20.0], [30.0, 40.0]]]], [[[[1.0, 1.0], [1.0, 1.0]]]]), \"test case 5 failed: pooling window 1x1 should be identity\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]]), (2, 2), (2, 2), np.ones((1, 3, 1, 1))) == ([[[[2.5]], [[6.5]], [[10.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 6 failed: three-channel input\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6]]]]), (1, 3), (1, 3), np.ones((1, 1, 2, 1))) == ([[[[2.0], [5.0]]]], [[[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]]]), \"test case 7 failed: pooling window covers full width\"\nassert average_pool2d(np.array([[[[1], [2], [3]]]]), (3, 1), (1, 1), np.ones((1, 1, 1, 1))) == ([[[[2.0]]]], [[[[0.3333], [0.3333], [0.3333]]]]), \"test case 8 failed: pooling window covers full height\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[2]]]])) == ([[[[2.5]]]], [[[[0.5, 0.5], [0.5, 0.5]]]]), \"test case 9 failed: scaled gradient for single window\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.array([[[[1, 2], [3, 4]]]])) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.75, 0.5], [1.0, 2.5, 1.5], [0.75, 1.75, 1.0]]]]), \"test case 10 failed: non-uniform incoming gradient\""}
{"task_id": 288, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    is_iterable = isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray))\n    is_scalar = not is_iterable and isinstance(actual, (int, float)) and (not isinstance(actual, bool)) and isinstance(predicted, (int, float)) and (not isinstance(predicted, bool))\n    if is_scalar:\n        return round((actual - predicted) ** 2, 4)\n    elif is_iterable:\n        if len(actual) == 0 or len(predicted) == 0 or len(actual) != len(predicted):\n            return -1\n        mse = np.mean((np.array(actual) - np.array(predicted)) ** 2)\n        return round(mse, 4)\n    else:\n        return -1\nassert squared_error(3, 5) == 4, \"test case failed: squared_error(3, 5)\"\nassert squared_error(2.5, 0.5) == 4, \"test case failed: squared_error(2.5, 0.5)\"\nassert squared_error(2, 3) == 1, \"test case failed: squared_error(2, 3)\"\nassert squared_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8]) == 0.375, \"test case failed: list example\"\nassert squared_error([1, 2, 3], [1, 2, 3]) == 0, \"test case failed: perfect prediction\"\nassert squared_error([1, 2], [1, 2, 3]) == -1, \"test case failed: length mismatch\"\nassert squared_error(np.array([1, 2, 3]), np.array([1, 2, 4])) == 0.3333, \"test case failed: numpy array input\"\nassert squared_error((1, 4), (3, 4)) == 2, \"test case failed: tuple input\"\nassert squared_error([1.1, 2.2, 3.3], [1.0, 2.0, 3.0]) == 0.0467, \"test case failed: float rounding\"\nassert squared_error([], []) == -1, \"test case failed: empty iterable input\""}
{"task_id": 289, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    return '\\n'.join((f'{field}: \"{value}\"' for (field, value) in entries))\nassert format_entries([(\"username\", \"john_doe\"), (\"password\", \"s3cr3t\")]) == \"username: \\\"john_doe\\\"\\npassword: \\\"s3cr3t\\\"\", \"Test case 1 failed: two simple pairs\"\nassert format_entries([]) == \"\", \"Test case 2 failed: empty list should return empty string\"\nassert format_entries([(\"Quote\", \"He said \\\"Hello\\\"\")]) == \"Quote: \\\"He said \\\"Hello\\\"\\\"\", \"Test case 3 failed: value containing quotes\"\nassert format_entries([(\"a\", \"\"), (\"b\", \"\")]) == \"a: \\\"\\\"\\nb: \\\"\\\"\", \"Test case 4 failed: empty strings as values\"\nassert format_entries([(\"single\", \"one\")]) == \"single: \\\"one\\\"\", \"Test case 5 failed: single pair\"\nassert format_entries([(\"x\", \"1\"), (\"y\", \"2\"), (\"z\", \"3\")]) == \"x: \\\"1\\\"\\ny: \\\"2\\\"\\nz: \\\"3\\\"\", \"Test case 6 failed: three numeric-string pairs\"\nassert format_entries([(\"\", \"blank field\"), (\"space\", \"with space\")]) == \": \\\"blank field\\\"\\nspace: \\\"with space\\\"\", \"Test case 7 failed: empty field name\"\nassert format_entries([(\"UPPER\", \"lower\"), (\"MiXeD\", \"CaSe\")]) == \"UPPER: \\\"lower\\\"\\nMiXeD: \\\"CaSe\\\"\", \"Test case 8 failed: case sensitivity\"\nassert format_entries([(\"special\", \"!@#$%^&*()\")]) == \"special: \\\"!@#$%^&*()\\\"\", \"Test case 9 failed: special characters\"\nassert format_entries([(\"newline\", \"line1\\\\nline2\")]) == \"newline: \\\"line1\\\\nline2\\\"\", \"Test case 10 failed: value containing newline\""}
{"task_id": 290, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Leaf) ^ isinstance(tree_b, Leaf):\n        return False\n    if not (isinstance(tree_a, Node) and isinstance(tree_b, Node)):\n        return False\n    if not (np.isclose(tree_a.feature, tree_b.feature) and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08)):\n        return False\n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 291, "completion_id": 0, "passed": false, "result": "failed: test case failed: perfect correlation data", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    if not 1 <= n_components <= X.shape[1]:\n        return -1\n    cov_matrix = np.cov(X, rowvar=False)\n    (eigen_values, eigen_vectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_values = eigen_values[sorted_indices]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    selected_eigen_vectors = sorted_eigen_vectors[:, :n_components]\n    for i in range(n_components):\n        if selected_eigen_vectors[i, 0] < 0:\n            selected_eigen_vectors[i] *= -1\n    projected_data = X @ selected_eigen_vectors\n    return np.round(projected_data, 4).tolist()\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[2.1213], [4.9497], [7.7782]], \"test case failed: pca_transform(example 1)\"\nassert pca_transform(np.array([[2, 4], [4, 8], [6, 12]]), 1) == [[4.4721], [8.9443], [13.4164]], \"test case failed: perfect correlation data\"\nassert pca_transform(np.array([[1, 2], [3, 4]]), 0) == -1, \"test case failed: invalid n_components (0)\"\nassert pca_transform(np.array([[1, 2], [3, 4]]), 3) == -1, \"test case failed: n_components greater than number of features\"\nassert pca_transform(np.array([[2, 3], [4, 9], [6, 15]]), 1) == [[3.4785], [9.8031], [16.1276]], \"test case failed: linear relation data\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[0.7071], [-0.7071]], \"test case failed: two point anti-correlation data\"\nassert pca_transform(np.array([[1, 2], [2, 1], [3, 3]]), 1) == [[2.1213], [2.1213], [4.2426]], \"test case failed: mixed data\"\nassert pca_transform(np.array([[1, 2], [3, 2], [5, 2]]), 1) == [[1.0], [3.0], [5.0]], \"test case failed: variance only in first feature\""}
{"task_id": 292, "completion_id": 0, "passed": false, "result": "failed: failed: negative cutoff", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    num_columns = parent1_np.shape[1]\n    if cutoff < 0 or cutoff > num_columns:\n        return -1\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    return (child1, child2)\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 293, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    agent_name = agent_name.strip().lower()\n    agent_mapping = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    if agent_name in agent_mapping:\n        return agent_mapping[agent_name]\n    else:\n        return -1\nassert map_agent_environment(\"dqn\") == (\"CartPole-v0\", \"unwrapped\"), \"failed on dqn\"\nassert map_agent_environment(\"Ddpg\") == (\"Pendulum-v0\", \"env\"), \"failed on Ddpg (case-insensitive)\"\nassert map_agent_environment(\"A3C\") == (\"Pendulum-v0\", \"unwrapped\"), \"failed on A3C\"\nassert map_agent_environment(\"a2c\") == (\"CartPole-v0\", \"env\"), \"failed on a2c\"\nassert map_agent_environment(\"A2C_MULTI\") == (\"CartPole-v0\", \"raw\"), \"failed on A2C_MULTI\"\nassert map_agent_environment(\"trpo\") == (\"Pendulum-v0\", \"unwrapped\"), \"failed on trpo\"\nassert map_agent_environment(\"random_agent\") == -1, \"failed on unknown agent\"\nassert map_agent_environment(\"  dqn  \") == (\"CartPole-v0\", \"unwrapped\"), \"failed on whitespace handling\"\nassert map_agent_environment(\"\") == -1, \"failed on empty string\"\nassert map_agent_environment(\"A2c\") == (\"CartPole-v0\", \"env\"), \"failed on mixed-case A2c\""}
{"task_id": 294, "completion_id": 0, "passed": false, "result": "failed: name '_build_graph' is not defined", "solution": "from typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    v2i = G['_V2I']\n    adj_list = G['_G']\n    vertices = list(v2i.keys())\n    adj = {}\n    i2v = {i: label for (label, i) in v2i.items()}\n    for (i, edges) in enumerate(adj_list):\n        source_label = i2v[i]\n        for edge in edges:\n            (source_label, target_label, weight) = edge\n            if source_label not in adj:\n                adj[source_label] = []\n            adj[source_label].append((target_label, weight))\n    if not is_directed:\n        for u in adj:\n            for (v, w) in adj[u]:\n                if v not in adj:\n                    adj[v] = []\n                adj[v].append((u, w))\n    for u in adj:\n        adj[u].sort(key=lambda x: x[0])\n    return adj\nassert to_networkx(_build_graph(False, [('A','B',3),('A','C',2),('B','C',4)])) == {'A':[('B',3),('C',2)],'B':[('A',3),('C',4)],'C':[('A',2),('B',4)]}, \"test case failed: simple undirected graph\"\nassert to_networkx(_build_graph(True, [('A','B',1),('B','C',2),('C','A',3)])) == {'A':[('B',1)],'B':[('C',2)],'C':[('A',3)]}, \"test case failed: directed cycle\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','A',1),('B','C',2),('C','B',2)])) == {'A':[('B',1)],'B':[('A',1),('C',2)],'C':[('B',2)]}, \"test case failed: duplicate undirected edges\"\nassert to_networkx(_build_graph(True, [('A','B',1),('A','B',1),('A','B',1)])) == {'A':[('B',1)],'B':[]}, \"test case failed: repeated directed edges\"\nassert to_networkx(_build_graph(False, [('A','A',5)])) == {'A':[('A',5)]}, \"test case failed: self-loop in undirected graph\"\nassert to_networkx(_build_graph(True, [('X','Y',-3)])) == {'X':[('Y',-3)],'Y':[]}, \"test case failed: negative weight\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','C',2),('C','D',3),('D','A',4)])) == {'A':[('B',1),('D',4)],'B':[('A',1),('C',2)],'C':[('B',2),('D',3)],'D':[('A',4),('C',3)]}, \"test case failed: larger undirected graph\"\nassert to_networkx(_build_graph(False, [('A','B',1.5),('B','C',2.25)])) == {'A':[('B',1.5)],'B':[('A',1.5),('C',2.25)],'C':[('B',2.25)]}, \"test case failed: float weights\"\nassert to_networkx({'is_directed':False,'_V2I':{},'_G':[]}) == {}, \"test case failed: empty graph\""}
{"task_id": 296, "completion_id": 0, "passed": false, "result": "failed: Failed on integer vector", "solution": "import numpy as np\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))\nassert is_binary(np.array([0, 1, 1, 0])) is True, \"Failed on integer vector\"\nassert is_binary(np.array([[0, 1], [1, 0]], dtype=bool)) is True, \"Failed on boolean matrix\"\nassert is_binary(np.array([0.0, 1.0])) is True, \"Failed on float vector\"\nassert is_binary(np.array([0, 2])) is False, \"Failed on non-binary value 2\"\nassert is_binary(np.array([-1, 0, 1])) is False, \"Failed on negative non-binary value\"\nassert is_binary(np.array([0, 1, 3])) is False, \"Failed on non-binary value 3\"\nassert is_binary(np.array([[0], [1], [0]])) is True, \"Failed on column vector\"\nassert is_binary(np.zeros((3, 4))) is True, \"Failed on all-zeros matrix\"\nassert is_binary(np.ones((2, 2))) is True, \"Failed on all-ones matrix\"\nassert is_binary(np.array([True, False, True])) is True, \"Failed on boolean vector\""}
{"task_id": 297, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    (a, b) = feature_range\n    if a >= b:\n        return -1\n    data_np = np.array(data, dtype=np.float64)\n    min_vals = np.min(data_np, axis=0)\n    max_vals = np.max(data_np, axis=0)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        scale_factors = max_vals - min_vals + 1e-12\n        scaled_data = (data_np - min_vals) / scale_factors * (b - a) + a\n    scaled_data = np.nan_to_num(scaled_data)\n    scaled_data_rounded = np.round(scaled_data, 4)\n    return scaled_data_rounded.tolist()\nassert min_max_scale([[-1, 2], [-0.5, 6], [0, 10], [1, 18]]) == [[0.0, 0.0], [0.25, 0.25], [0.5, 0.5], [1.0, 1.0]], \"failed on basic example\"\nassert min_max_scale([[5, 2], [5, 8]]) == [[0.0, 0.0], [0.0, 1.0]], \"failed when a feature is constant\"\nassert min_max_scale([[0, 10], [5, 30]], feature_range=(1, 3)) == [[1.0, 1.0], [3.0, 3.0]], \"failed on custom range (1,3)\"\nassert min_max_scale([[1, 2], [3, 4]], feature_range=(2, 2)) == -1, \"failed to detect invalid feature_range\"\nassert min_max_scale([[-10, -20], [0, -10], [10, 0]]) == [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]], \"failed on negative numbers\"\nassert min_max_scale([[1.5], [3.0]]) == [[0.0], [1.0]], \"failed on single-column input\"\nassert min_max_scale([[2, 2], [2, 2]]) == [[0.0, 0.0], [0.0, 0.0]], \"failed when all columns are constant\"\nassert min_max_scale([[2, 2], [4, 6]], feature_range=(-1, 1)) == [[-1.0, -1.0], [1.0, 1.0]], \"failed on range (-1,1)\"\ninput_9 = [[i, i * 2, 10 - i] for i in range(6)]\noutput_9 = min_max_scale(input_9)\nexpected_9 = [[0.0, 0.0, 1.0],[0.2, 0.2, 0.8],[0.4, 0.4, 0.6],[0.6, 0.6, 0.4],[0.8, 0.8, 0.2],[1.0, 1.0, 0.0]]\nassert output_9 == expected_9, \"failed on larger matrix\"\nassert min_max_scale([[1, 2.5], [3, 7.5], [5, 12.5]]) == [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]], \"failed on mixed numeric types\""}
{"task_id": 298, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def tokenize(sentence):\n        return sentence.split()\n    corpus_tokens = [tokenize(s) for s in corpus]\n    query_tokens = tokenize(query)\n\n    def pad_sentence(tokens, N):\n        if N == 1:\n            return tokens\n        return ['<bol>'] * (N - 1) + tokens + ['<eol>']\n    padded_corpus = [pad_sentence(tokens, N) for tokens in corpus_tokens]\n    padded_query = pad_sentence(query_tokens, N)\n    if len(padded_query) < N:\n        return float('-inf')\n    ngram_counts = Counter()\n    n_minus_1gram_counts = Counter()\n    for sentence in padded_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            ngram_counts[ngram] += 1\n            n_minus_1gram = tuple(sentence[i:i + N - 1])\n            n_minus_1gram_counts[n_minus_1gram] += 1\n    log_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        n_minus_1gram = tuple(padded_query[i:i + N - 1])\n        if ngram not in ngram_counts or n_minus_1gram not in n_minus_1gram_counts:\n            return float('-inf')\n        prob = ngram_counts[ngram] / n_minus_1gram_counts[n_minus_1gram]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\nassert ngram_log_prob([\"a b a\", \"b a b\"], \"a b\", 1) == -1.3863, \"test case failed: unigram example\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love AI\", 2) == -0.6931, \"test case failed: bigram simple\"\nassert ngram_log_prob([\"hello world\"], \"hello world\", 2) == 0.0, \"test case failed: probability 1 for every bigram\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b c\", 3) == -0.6931, \"test case failed: trigram with mixed counts\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b e\", 3) == float('-inf'), \"test case failed: unseen trigram should be -inf\"\nassert ngram_log_prob([\"hello world\"], \"unknown\", 1) == float('-inf'), \"test case failed: unseen unigram should be -inf\"\nassert ngram_log_prob([\"red blue blue red\"], \"red\", 1) == -0.6931, \"test case failed: unigram single token\"\nassert ngram_log_prob([\"a a b\", \"a a a\"], \"a a\", 2) == -2.1203, \"test case failed: complex bigram counts\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 2) == float('-inf'), \"test case failed: unknown bigram\"\nassert ngram_log_prob([\"cat sat\"], \"cat sat\", 2) == 0.0, \"test case failed: perfect bigram match\""}
{"task_id": 299, "completion_id": 0, "passed": false, "result": "failed: from __future__ imports must occur at the beginning of the file (<string>, line 3)", "solution": "import numpy as np\nimport numpy as np\nfrom __future__ import annotations\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    (m, n) = X.shape\n    centroids = X[:k].copy()\n    cluster_assignments = np.zeros(m, dtype=int)\n    for iteration in range(max_iterations):\n        distances = np.sqrt(np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2))\n        cluster_assignments = np.argmin(distances, axis=1)\n        non_empty_clusters = np.where(np.sum(cluster_assignments == np.arange(k)) > 0)[0]\n        for cluster in non_empty_clusters:\n            indices = np.where(cluster_assignments == cluster)[0]\n            centroids[cluster] = np.mean(X[indices], axis=0)\n        if np.all(centroids == centroids):\n            break\n    return cluster_assignments.tolist()\nassert k_means(np.array([[1.0,1.0],[5.0,5.0],[1.2,0.8],[5.1,6.0]]),2)==[0,1,0,1],\"failed: basic 2-cluster test\"\nassert k_means(np.array([[0.0,0.0],[10.0,0.0],[0.0,1.0],[10.0,1.0],[0.0,-1.0],[10.0,-1.0]]),2)==[0,1,0,1,0,1],\"failed: x-separated clusters\"\nassert k_means(np.array([[0.0],[10.0],[20.0],[0.1],[9.9],[19.8]]),3)==[0,1,2,0,1,2],\"failed: 1-D 3-cluster test\"\nassert k_means(np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[0.1,-0.1,0.05],[10.2,9.9,10.1]]),2)==[0,1,0,1],\"failed: 3-D clusters\"\nassert k_means(np.arange(5.0).reshape(-1,1),5)==[0,1,2,3,4],\"failed: k equals number of samples\"\nassert k_means(np.array([[0.0,0.0],[0.0,10.0],[0.1,0.0],[0.2,10.0]]),2)==[0,1,0,1],\"failed: y-separated clusters\"\nassert k_means(np.array([[1.0,1.0],[8.0,8.0],[2.0,2.0],[7.0,7.0],[1.5,1.5]]),2)==[0,1,0,1,0],\"failed: diagonal clusters\"\nassert k_means(np.array([[-5.0,-5.0],[5.0,5.0],[-4.0,-4.0],[6.0,6.0]]),2)==[0,1,0,1],\"failed: negative vs positive cluster\"\nassert k_means(np.array([[0.0,0.0],[0.0,10.0],[10.0,0.0],[0.1,0.2],[10.2,0.1],[0.0,9.9]]),3)==[0,1,2,0,2,1],\"failed: 3 clusters in 2-D\""}
{"task_id": 300, "completion_id": 0, "passed": true, "result": "passed", "solution": "import heapq\nimport heapq\nfrom typing import List, Union\nNumber = Union[int, float]\ndef top_k_elements(sequence: List[Number], k: int, order: str='largest') -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    if k <= 0 or not sequence:\n        return []\n    if order == 'largest':\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            elif num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n        return sorted(heap, reverse=True)\n    elif order == 'smallest':\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, -num)\n            elif num < -heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -num)\n        return sorted([-x for x in heap])\n    else:\n        raise ValueError(\"order must be either 'largest' or 'smallest'\")\nassert top_k_elements([5,1,3,2,4],2,\"largest\") == [5,4], \"failed: top_k_elements([5,1,3,2,4],2,'largest')\"\nassert top_k_elements([5,1,3,2,4],2,\"smallest\") == [1,2], \"failed: top_k_elements([5,1,3,2,4],2,'smallest')\"\nassert top_k_elements([7,2,9,4,1],3,\"largest\") == [9,7,4], \"failed: top_k_elements([7,2,9,4,1],3,'largest')\"\nassert top_k_elements([7,2,9,4,1],3,\"smallest\") == [1,2,4], \"failed: top_k_elements([7,2,9,4,1],3,'smallest')\"\nassert top_k_elements([1,2,3,4],4,\"largest\") == [4,3,2,1], \"failed: k==n case\"\nassert top_k_elements([1,2,2,3],3,\"largest\") == [3,2,2], \"failed: duplicate numbers\"\nassert top_k_elements([-10,-20,-30],2,\"largest\") == [-10,-20], \"failed: negative numbers largest\"\nassert top_k_elements([1.5,2.7,-3.4,2.7],2,\"largest\") == [2.7,2.7], \"failed: float input\"\nassert top_k_elements([3,1],5,\"largest\") == [3,1], \"failed: k>len(sequence)\"\nassert top_k_elements([],3,\"largest\") == [], \"failed: empty sequence\""}
{"task_id": 301, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n\n    class Node:\n\n        def __init__(self, val, key):\n            self.val = val\n            self.key = key\n            self.left = None\n            self.right = None\n\n        def __gt__(self, other):\n            return self.val > other.val\n\n        def __ge__(self, other):\n            return self.val >= other.val\n\n        def __lt__(self, other):\n            return self.val < other.val\n\n        def __le__(self, other):\n            return self.val <= other.val\n    root = Node(pairs[0][1], pairs[0][0])\n    for (key, value) in pairs[1:]:\n        current = root\n        while True:\n            if Node(value, None) < current:\n                if current.left:\n                    current = current.left\n                else:\n                    current.left = Node(value, key)\n                    break\n            elif current.right:\n                current = current.right\n            else:\n                current.right = Node(value, key)\n                break\n    result = []\n    stack = []\n    current = root\n    while stack or current:\n        while current:\n            stack.append(current)\n            current = current.left\n        current = stack.pop()\n        result.append(current.key)\n        current = current.right\n    return result\nassert inorder_keys([('a', 3), ('b', 1), ('c', 5), ('d', 2)]) == ['b', 'd', 'a', 'c'], \"test case failed: [('a',3),('b',1),('c',5),('d',2)]\"\nassert inorder_keys([('x', 10), ('y', 20), ('z', 30)]) == ['x', 'y', 'z'], \"test case failed: ascending values\"\nassert inorder_keys([('x', 30), ('y', 20), ('z', 10)]) == ['z', 'y', 'x'], \"test case failed: descending values\"\nassert inorder_keys([('k', 1)]) == ['k'], \"test case failed: single node\"\nassert inorder_keys([]) == [], \"test case failed: empty list\"\nassert inorder_keys([('a', 2), ('b', 2), ('c', 2)]) == ['a', 'b', 'c'], \"test case failed: equal values\"\nassert inorder_keys([('a', -1), ('b', -5), ('c', 0)]) == ['b', 'a', 'c'], \"test case failed: negative numbers\"\nassert inorder_keys([('p', 1.5), ('q', 1.2), ('r', 2.8)]) == ['q', 'p', 'r'], \"test case failed: floating values\"\nassert inorder_keys([('d', 4), ('b', 2), ('a', 1), ('c', 3)]) == ['a', 'b', 'c', 'd'], \"test case failed: balanced tree\"\nassert inorder_keys([('root', 50), ('l1', 30), ('l2', 20), ('l3', 40), ('r1', 70), ('r2', 60), ('r3', 80)]) == ['l2', 'l1', 'l3', 'root', 'r2', 'r1', 'r3'], \"test case failed: larger tree\""}
{"task_id": 302, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    dists = np.sqrt(np.sum((X[:, np.newaxis, :] - X[np.newaxis, :, :]) ** 2, axis=2))\n    W = 1 / (1 + dists)\n    np.fill_diagonal(W, 0)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)\n    eigenvectors = eigenvectors[sorted_indices]\n    E = eigenvectors[:, :k]\n    centroids = E[:k]\n    for _ in range(100):\n        distances = np.sqrt(np.sum((E[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([E[labels == i].mean(axis=0) for i in range(k)])\n        for i in range(k):\n            if np.all(np.isnan(new_centroids[i])):\n                new_centroids[i] = E[np.random.choice(n)]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()\nassert spectral_clustering(X1, 2) == [0, 0, 1, 1], \"test case failed: spectral_clustering(X1, 2)\"\nassert spectral_clustering(X2, 3) == [0, 1, 2, 0, 1, 2], \"test case failed: spectral_clustering(X2, 3)\"\nassert spectral_clustering(X3, 1) == [0] * 10, \"test case failed: spectral_clustering(X3, 1)\"\nassert spectral_clustering(X4, 1) == [0, 0, 0], \"test case failed: spectral_clustering(X4, 1)\"\nassert set(res5) == {0, 1} and res5.count(0) != 0 and res5.count(1) != 0, \"test case failed: spectral_clustering(X5, 2)\"\nassert set(labels6) == {0, 1, 2}, \"test case failed: spectral_clustering(X6, 3)\"\nassert set(labels7) == {0, 1}, \"test case failed: spectral_clustering(X7, 2)\"\nassert labels8 == list(range(5)), \"test case failed: spectral_clustering(X8, 5)\"\nassert spectral_clustering(X9, 2) == [0, 1], \"test case failed: spectral_clustering(X9, 2)\"\nassert set(labels10) <= {0, 1}, \"test case failed: spectral_clustering(X10, 2)\""}
{"task_id": 303, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic example", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\"\"\"\n    prev_idx = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_idx]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 304, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu: float=0.0, V: np.ndarray=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    M = X.shape[1]\n    if isinstance(mu, float):\n        mu = np.full(M, mu)\n    elif mu is None:\n        mu = np.zeros(M)\n    else:\n        mu = np.array(mu)\n        if mu.ndim == 1 and mu.shape[0] != M:\n            raise ValueError(f'mu must have length {M}, got {mu.shape[0]}')\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = np.eye(M) * V\n    elif np.ndim(V) == 1:\n        V = np.diag(V)\n    elif np.ndim(V) == 2 and V.shape[0] != M or V.shape[1] != M:\n        raise ValueError(f'V must be a (M x M) matrix, got shape {V.shape}')\n    else:\n        V = np.array(V)\n    if V.shape[0] != V.shape[1]:\n        raise ValueError('V must be a square matrix')\n    inv_V = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    inv_V_plus_X_T_X = np.linalg.inv(inv_V + X_T_X)\n    term = inv_V @ mu + X.T @ y\n    mu_b = inv_V_plus_X_T_X @ term\n    return [round(val, 4) for val in mu_b.tolist()]\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0])) == [0.5, 1.6667], \"test case 1 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,5.0])) == [1.0, 1.6667], \"test case 2 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0])) == [0.8, 0.8], \"test case 3 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0]), fit_intercept=False) == [1.8667], \"test case 4 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,3.0]), V=[2,2]) == [1.2632, 0.9474], \"test case 5 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0]), mu=1.0) == [1.0, 1.0], \"test case 6 failed\"\nassert bayesian_posterior_mean(np.array([[2.0],[4.0],[6.0]]), np.array([1.0,2.0,3.0]), V=2, fit_intercept=False) == [0.4956], \"test case 7 failed\"\nassert bayesian_posterior_mean(np.array([[0.0],[1.0]]), np.array([1.0,2.0]), fit_intercept=False) == [1.0], \"test case 8 failed\"\nassert bayesian_posterior_mean(np.array([[0.0]]), np.array([0.0]), mu=10.0, fit_intercept=False) == [10.0], \"test case 9 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0],[4.0]]), np.array([1.0,2.0,3.0,4.0]), V=[1,1000]) == [0.0002, 0.9999], \"test case 10 failed\""}
{"task_id": 305, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    x_array = np.array(x, dtype=np.float64)\n    if x_array >= 0:\n        sig = 1 / (1 + np.exp(-x_array))\n    else:\n        sig = np.exp(x_array) / (1 + np.exp(x_array))\n    return [round(val, 4) for val in sig.tolist()]\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"failed on [-1,0,1]\"\nassert sigmoid([10, -10]) == [1.0, 0.0], \"failed on [10,-10]\"\nassert sigmoid(np.array([5.0, -5.0])) == [0.9933, 0.0067], \"failed on [5,-5]\"\nassert sigmoid([0]) == [0.5], \"failed on [0]\"\nassert sigmoid([-1000, 1000]) == [0.0, 1.0], \"failed on large magnitude values\"\nassert sigmoid([20]) == [1.0], \"failed on [20]\"\nassert sigmoid([-20]) == [0.0], \"failed on [-20]\"\nassert sigmoid([0.0001]) == [0.5], \"failed on small positive value\"\nassert sigmoid([-0.0001]) == [0.5], \"failed on small negative value\"\nassert sigmoid([3.5]) == [0.9707], \"failed on [3.5]\""}
{"task_id": 307, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    idxs = np.random.randint(0, n_samples, size=n_samples)\n    return (X[idxs], y[idxs])\nimport numpy as np\n\n# Test 1 \u2013 basic reproducibility\nnp.random.seed(0)\nX = np.arange(20).reshape(10, 2)\ny = np.arange(10)\nXb, yb = bootstrap_sample(X, y)\nnp.random.seed(0)\nidx = np.random.choice(10, 10, replace=True)\nassert np.array_equal(Xb, X[idx]) and np.array_equal(yb, y[idx]), \"test case failed: reproducibility with seed 0\"\nimport numpy as np\n\n# Test 2 \u2013 1-D feature array\nnp.random.seed(1)\nX = np.array([5, 6, 7, 8])\ny = np.array([1, 1, 0, 0])\nXb, yb = bootstrap_sample(X, y)\nassert Xb.shape == X.shape and yb.shape == y.shape, \"test case failed: shape mismatch for 1D feature array\"\nimport numpy as np\n\n# Test 3 \u2013 correspondence between X and y\nnp.random.seed(2)\nX = np.arange(12).reshape(6, 2)\ny = np.array(list(\"abcdef\"))\nXb, yb = bootstrap_sample(X, y)\nfor row, label in zip(Xb, yb):\n    idx = np.where((X == row).all(axis=1))[0][0]\n    assert y[idx] == label, \"test case failed: X and y got out of sync\"\nimport numpy as np\n\n# Test 4 \u2013 single-sample data set (deterministic)\nnp.random.seed(123)\nX = np.array([[42, 99]])\ny = np.array([7])\nXb, yb = bootstrap_sample(X, y)\nassert np.array_equal(Xb, X) and np.array_equal(yb, y), \"test case failed: single-sample data set\"\nimport numpy as np\n\n# Test 5 \u2013 larger data set shape test\nnp.random.seed(5)\nX = np.arange(300).reshape(100, 3)\ny = np.arange(100)\nXb, yb = bootstrap_sample(X, y)\nassert Xb.shape == X.shape and yb.shape == y.shape, \"test case failed: shape mismatch on larger data set\"\nimport numpy as np\n\n# Test 6 \u2013 values belong to original set\nnp.random.seed(6)\nX = np.arange(15).reshape(5, 3)\ny = np.arange(5)\nXb, yb = bootstrap_sample(X, y)\nassert set(map(tuple, Xb)).issubset(set(map(tuple, X))), \"test case failed: unknown rows in X_sample\"\nimport numpy as np\n\n# Test 7 \u2013 multiple consecutive calls produce different samples without reseeding\nnp.random.seed(7)\nX = np.arange(20).reshape(10, 2)\ny = np.arange(10)\nXa, ya = bootstrap_sample(X, y)\nXb, yb = bootstrap_sample(X, y)\nassert not np.array_equal(Xa, Xb) or not np.array_equal(ya, yb), \"test case failed: consecutive calls returned identical samples\"\nimport numpy as np\n\n# Test 8 \u2013 reseeding reproduces previous sample\nnp.random.seed(8)\nX = np.arange(12).reshape(6, 2)\ny = np.arange(6)\nX1, y1 = bootstrap_sample(X, y)\nnp.random.seed(8)\nX2, y2 = bootstrap_sample(X, y)\nassert np.array_equal(X1, X2) and np.array_equal(y1, y2), \"test case failed: reseeding did not reproduce sample\"\nimport numpy as np\n\n# Test 9 \u2013 check that replacement really happens (probabilistic)\nnp.random.seed(9)\nX = np.arange(50).reshape(25, 2)\ny = np.arange(25)\nXb, _ = bootstrap_sample(X, y)\nunique_rows = {tuple(row) for row in Xb}\nassert len(unique_rows) < 25, \"test case failed: sampling seems to be without replacement\""}
{"task_id": 308, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    mel_values = np.linspace(min_mel, max_mel, n_filters + 2)\n    filter_frequencies = 700 * (10 ** (mel_values / 2595) - 1)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f1 = filter_frequencies[i]\n        f2 = filter_frequencies[i + 1]\n        f3 = filter_frequencies[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            left_slope = (f_k - f1) / (f2 - f1) if f2 > f1 else 0\n            right_slope = (f3 - f_k) / (f3 - f2) if f3 > f2 else 0\n            weight = min(left_slope, right_slope) if left_slope > 0 and right_slope > 0 else 0\n            filterbank[i, k] = weight\n    if normalize:\n        for i in range(n_filters):\n            width = filter_frequencies[i + 2] - filter_frequencies[i]\n            filterbank[i] /= width\n    return [[round(x, 4) for x in row] for row in filterbank]\nimport numpy as np\n\nfb = mel_filterbank(16, 6, 16000)\nassert (len(fb), len(fb[0])) == (6, 16//2 + 1), \"shape mismatch for mel_filterbank(16,6,16000)\"\nimport numpy as np\n\nfb = mel_filterbank(1024, 40, 22050)\nassert all(0.0 <= w <= 1.0 for row in fb for w in row), \"weights out of range in mel_filterbank(1024,40,22050)\"\nimport numpy as np\n\nfb = mel_filterbank(32, 10, 16000, min_freq=300, max_freq=6000)\nassert fb[0][0] == 0.0 and fb[-1][-1] == 0.0, \"edge bins should be zero for out-of-band frequencies\"\nimport numpy as np\n\nfb1 = mel_filterbank(512, 26, 16000)\nfb2 = mel_filterbank(512, 26, 16000)\nassert fb1 == fb2, \"function must be deterministic for identical parameters\"\nimport numpy as np\n\nfb = mel_filterbank(64, 5, 8000)\n# every filter must have non-zero values somewhere\nassert all(any(v > 0.0 for v in row) for row in fb), \"empty filter detected in mel_filterbank(64,5,8000)\"\nimport numpy as np\n\nfb = mel_filterbank(8, 3, 8000)\n# with normalization the maximum value must be below 1\nassert max(max(r) for r in fb) < 1.0, \"filters are not normalized when normalize=True\"\nimport numpy as np\n\nfb = mel_filterbank(128, 20, 44100)\nassert len({tuple(row) for row in fb}) == 20, \"filters must be distinct in mel_filterbank(128,20,44100)\""}
{"task_id": 309, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    predictions = []\n    for i in range(m):\n        x_i = X[i]\n        linear_part = w0 + np.dot(w, x_i)\n        interaction_part = 0.5 * np.sum((x_i @ v) ** 2 - x_i ** 2 @ v ** 2)\n        prediction = linear_part + interaction_part\n        predictions.append(round(prediction, 4))\n    return predictions\nassert fm_predict(np.array([[1, 2], [3, 4]]), 0.5, np.array([0.1, 0.2]), np.array([[0.05, 0.1], [0.2, 0.3]])) == [1.08, 2.08], \"test case failed: example input\"\nassert fm_predict(np.array([[0, 0, 0]]), 1.0, np.array([0.0, 0.0, 0.0]), np.zeros((3, 2))) == [1.0], \"test case failed: bias only\"\nassert fm_predict(np.array([[2], [3]]), 0.2, np.array([0.5]), np.array([[0.1, 0.2]])) == [1.2, 1.7], \"test case failed: single feature\"\nassert fm_predict(np.array([[1, 1]]), 0.5, np.array([0.3, 0.2]), np.zeros((2, 3))) == [1.0], \"test case failed: zero factor matrix\"\nassert fm_predict(np.array([[1, 0], [0, 1]]), 0.0, np.array([1.0, 1.0]), np.array([[0.5, 0.5], [0.5, 0.5]])) == [1.0, 1.0], \"test case failed: sparse rows\"\nassert fm_predict(np.array([[1, 2, 3]]), 0.3, np.array([0.1, 0.2, 0.3]), np.array([[0.1, 0.0], [0.0, 0.1], [0.1, 0.1]])) == [1.79], \"test case failed: 3-feature interaction\"\nassert fm_predict(np.array([[1, 2], [3, 4], [5, 6]]), 0.0, np.array([0.0, 0.0]), np.array([[0.1], [0.2]])) == [0.04, 0.24, 0.6], \"test case failed: single latent factor\"\nassert fm_predict(np.array([[1, 1, 1]]), 0.0, np.array([1.0, 1.0, 1.0]), np.zeros((3, 2))) == [3.0], \"test case failed: linear only\"\nassert fm_predict(np.array([[1, 2]]), -1.0, np.array([-0.5, 0.5]), np.zeros((2, 1))) == [-0.5], \"test case failed: negative weights\"\nassert fm_predict(np.array([[2, 0, 1], [0, 2, 3]]), 0.1, np.array([0.2, 0.1, 0.0]), np.array([[0.1, 0.2], [0.2, 0.1], [0.3, 0.2]])) == [0.64, 0.78], \"test case failed: mixed interactions\""}
{"task_id": 310, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns -1 if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or -1 on invalid\n        input.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.size == 0 or predicted.size == 0 or actual.size != predicted.size:\n        return -1\n    squared_diffs = (actual - predicted) ** 2\n    mean_squared_error = np.mean(squared_diffs)\n    rmse = np.sqrt(mean_squared_error)\n    return round(rmse, 4)\nassert root_mean_squared_error([1, 2, 3], [1, 2, 2]) == 0.5774, \"test case failed: rmse([1,2,3],[1,2,2])\"\nassert root_mean_squared_error([5, 5, 5], [5, 5, 5]) == 0.0, \"test case failed: identical arrays\"\nassert root_mean_squared_error([2.5, 0.0, 2, 8], [3, -0.5, 2, 7]) == 0.6124, \"test case failed: rmse with floats\"\nassert root_mean_squared_error([1, 2], [1]) == -1, \"test case failed: mismatched lengths\"\nassert root_mean_squared_error([], []) == -1, \"test case failed: empty lists\"\nassert root_mean_squared_error([0, 0, 0, 0], [1, 1, 1, 1]) == 1.0, \"test case failed: zeros vs ones\"\nassert root_mean_squared_error(list(range(100)), list(range(100))) == 0.0, \"test case failed: long identical arrays\"\nassert root_mean_squared_error(np.array([1,2,3,4]), np.array([4,3,2,1])) == 2.2361, \"test case failed: numpy array input\""}
{"task_id": 311, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    if isinstance(arr, np.ndarray):\n        arr = arr.copy()\n        arr[arr < 0] = 0.0\n        return arr.tolist()\n    else:\n\n        def _clip_list(lst):\n            for i in range(len(lst)):\n                if isinstance(lst[i], list):\n                    _clip_list(lst[i])\n                elif lst[i] < 0:\n                    lst[i] = 0.0\n            return lst\n        return _clip_list(arr)\nassert clip_non_negative([-1, 2, -3, 4]) == [0.0, 2.0, 0.0, 4.0], \"failed: clip_non_negative([-1, 2, -3, 4])\"\nassert clip_non_negative([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed: clip_non_negative([0, 0, 0])\"\nassert clip_non_negative([[-1, 0, 3], [4, -5, -6]]) == [[0.0, 0.0, 3.0], [4.0, 0.0, 0.0]], \"failed: 2-D list input\"\nassert clip_non_negative(np.array([-1.1, 2.2, -0.1])) == [0.0, 2.2, 0.0], \"failed: 1-D NumPy input\"\nassert clip_non_negative(np.array([[1, -1], [-2, 3]])) == [[1.0, 0.0], [0.0, 3.0]], \"failed: 2-D NumPy input\"\nassert clip_non_negative([]) == [], \"failed: empty list\"\nassert clip_non_negative([[-7]]) == [[0.0]], \"failed: single negative element\"\nassert clip_non_negative([1, 2, 3]) == [1.0, 2.0, 3.0], \"failed: all positive\"\nassert clip_non_negative([[0, -0, -0.0]]) == [[0.0, 0.0, 0.0]], \"failed: negative zeros\"\nassert clip_non_negative(np.array([[-1, -2], [-3, -4]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed: all negative NumPy\""}
{"task_id": 312, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    N = window_len - 1\n    window = []\n    for n in range(window_len):\n        if symmetric:\n            cos_2pi_n_N = np.cos(2 * np.pi * n / N)\n            cos_4pi_n_N = np.cos(4 * np.pi * n / N)\n            cos_6pi_n_N = np.cos(6 * np.pi * n / N)\n            val = a0 - a1 * cos_2pi_n_N + a2 * cos_4pi_n_N - a3 * cos_6pi_n_N\n        else:\n            cos_2pi_n_N = np.cos(2 * np.pi * n / N)\n            cos_4pi_n_N = np.cos(4 * np.pi * n / N)\n            cos_6pi_n_N = np.cos(6 * np.pi * n / N)\n            val = a0 - a1 * cos_2pi_n_N + a2 * cos_4pi_n_N - a3 * cos_6pi_n_N\n        window.append(round(val, 4))\n    return window\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 313, "completion_id": 0, "passed": false, "result": "failed: failed: gamma=[[1,1]], d=0, t=0", "solution": "import math\nimport numpy as np\nimport math\ndef digamma(x):\n    \"\"\"\n    Compute the digamma function \u03c8(x) using a combination of recursion and asymptotic expansion.\n    \"\"\"\n    if x < 6:\n        while x < 6:\n            x += 1.0\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"\n    Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_row = gamma[d]\n    total = sum(gamma_row)\n    psi_gt = digamma(gamma_row[t])\n    psi_total = digamma(total)\n    expected_log = psi_gt - psi_total\n    return round(expected_log, 4)\nassert expected_log_dirichlet([[1,1]],0,0) == -1.0, \"failed: gamma=[[1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[2,3]],0,1) == -0.5833, \"failed: gamma=[[2,3]], d=0, t=1\"\nassert expected_log_dirichlet([[4,5,6],[1,1,1]],0,2) == -0.9682, \"failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2\"\nassert expected_log_dirichlet([[4,1,1]],0,0) == -0.45, \"failed: gamma=[[4,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[3,7]],0,1) == -0.379, \"failed: gamma=[[3,7]], d=0, t=1\"\nassert expected_log_dirichlet([[10,10,10]],0,2) == -1.1327, \"failed: gamma=[[10,10,10]], d=0, t=2\"\nassert expected_log_dirichlet([[8,1,1]],0,0) == -0.2361, \"failed: gamma=[[8,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[1,1,1,1]],0,3) == -1.8333, \"failed: gamma=[[1,1,1,1]], d=0, t=3\"\nassert expected_log_dirichlet([[1,2,1]],0,1) == -0.8333, \"failed: gamma=[[1,2,1]], d=0, t=1\"\nassert expected_log_dirichlet([[2,2,2,2,2]],0,2) == -1.829, \"failed: gamma=[[2,2,2,2,2]], d=0, t=2\""}
{"task_id": 315, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'list' and 'list'", "solution": "import numpy as np\nimport numpy as np\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    canonical_name = name.lower().replace('_', '')\n    loss_map = {'mae': 'mae', 'mean_absolute_error': 'mae', 'mse': 'mse', 'mean_squared_error': 'mse', 'cross_entropy': 'ce', 'log_loss': 'ce', 'ce': 'ce'}\n    if canonical_name not in loss_map:\n        raise ValueError('Invalid loss function.')\n    loss_type = loss_map[canonical_name]\n\n    def mae(y_true, y_pred):\n        return np.round(np.mean(np.abs(y_true - y_pred)), 4)\n\n    def mse(y_true, y_pred):\n        return np.round(np.mean((y_true - y_pred) ** 2), 4)\n\n    def ce(y_true, y_pred):\n        y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n        return np.round(-np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred)), 4)\n    if loss_type == 'mae':\n        return mae\n    elif loss_type == 'mse':\n        return mse\n    elif loss_type == 'ce':\n        return ce\nassert get_loss(\"mse\")([1, 2, 3], [2, 2, 2]) == 0.6667, \"failed: mse basic\"\nassert get_loss(\"MAE\")([1, 2, 3], [3, 2, 1]) == 1.3333, \"failed: mae alias upper\"\nassert get_loss(\"mean_squared_error\")([1, 1, 1], [1, 1, 1]) == 0.0, \"failed: mse perfect\"\nassert get_loss(\"mean_absolute_error\")([1, 1, 1], [1, 1, 1]) == 0.0, \"failed: mae perfect\"\nassert get_loss(\"cross_entropy\")([1, 0, 1, 0], [0.9, 0.1, 0.8, 0.2]) == 0.1643, \"failed: ce basic\"\nassert get_loss(\"log_loss\")([1, 0, 1, 0], [0.9, 0.1, 0.8, 0.2]) == 0.1643, \"failed: ce alias log_loss\"\nassert get_loss(\"ce\")([0, 1], [0.7, 0.3]) == 1.204, \"failed: ce alias short\"\nassert get_loss(\"mse\")(np.array([1, 4]), np.array([1, 1])) == 4.5, \"failed: mse numpy arrays\"\nassert get_loss(\"mae\")([0, 0, 0], [0, 0, 0]) == 0.0, \"failed: mae zeros\"\nassert get_loss(\"mse\")([1.5, 2.5], [1.5, 2.0]) == 0.125, \"failed: mse floats\""}
{"task_id": 316, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if len(x_np) != len(y_np):\n        return -1\n    difference = x_np - y_np\n    squared_diff = difference ** 2\n    sum_squared_diff = np.sum(squared_diff)\n    distance = np.sqrt(sum_squared_diff)\n    return round(distance, 4)\nassert euclidean([0, 0], [0, 0]) == 0.0, \"failed: euclidean([0,0],[0,0])\"\nassert euclidean([1, 2, 3], [4, 5, 6]) == 5.1962, \"failed: euclidean([1,2,3],[4,5,6])\"\nassert euclidean([1], [4]) == 3.0, \"failed: euclidean([1],[4])\"\nassert euclidean([2, -1], [-2, 3]) == 5.6569, \"failed: euclidean([2,-1],[-2,3])\"\nassert euclidean([1.5, 2.5], [3.5, 4.5]) == 2.8284, \"failed: euclidean([1.5,2.5],[3.5,4.5])\"\nassert euclidean([1, 2], [1, 2, 3]) == -1, \"failed: euclidean length mismatch\"\nassert euclidean([0, 0, 0], [-1, -1, -1]) == 1.7321, \"failed: euclidean([0,0,0],[-1,-1,-1])\""}
{"task_id": 317, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic two-element list, ix=1", "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    curr_item = params[ix]\n    prev_item = params[prev_ix]\n    (curr_prediction, curr_label) = curr_item\n    (prev_prediction, prev_label) = prev_item\n    curr_gold = golds[curr_label]\n    prev_gold = golds[prev_label]\n    result = f'------------------------- DEBUG -------------------------\\nMine (prev) [<prev_label>]:\\n{prev_prediction}\\n\\nTheirs (prev) [<prev_label>]:\\n{prev_gold}\\n\\nMine [<curr_label>]:\\n{curr_prediction}\\n\\nTheirs [<curr_label>]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return result\nassert err_fmt([(\"cat\",\"A\"),(\"dog\",\"B\")],{\"A\":\"feline\",\"B\":\"canine\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\ncat\\n\\nTheirs (prev) [A]:\\nfeline\\n\\nMine [B]:\\ndog\\n\\nTheirs [B]:\\ncanine\\n----------------------- END DEBUG -----------------------\", \"test case failed: basic two-element list, ix=1\"\nassert err_fmt([(\"hi\",\"g\")],{\"g\":\"hello\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [g]:\\nhi\\n\\nTheirs (prev) [g]:\\nhello\\n\\nMine [g]:\\nhi\\n\\nTheirs [g]:\\nhello\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},2,\" -- mismatch\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [L2]:\\nv2\\n\\nTheirs (prev) [L2]:\\nt2\\n\\nMine [L3]:\\nv3\\n\\nTheirs [L3]:\\nt3 -- mismatch\\n----------------------- END DEBUG -----------------------\", \"test case failed: three elements, last index\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nv1\\n\\nTheirs (prev) [L1]:\\nt1\\n\\nMine [L2]:\\nv2\\n\\nTheirs [L2]:\\nt2\\n----------------------- END DEBUG -----------------------\", \"test case failed: middle index\"\nassert err_fmt([(\"x\",\"X\"),(\"y\",\"Y\")],{\"X\":\"alpha\",\"Y\":\"beta\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [X]:\\nx\\n\\nTheirs (prev) [X]:\\nalpha\\n\\nMine [X]:\\nx\\n\\nTheirs [X]:\\nalpha\\n----------------------- END DEBUG -----------------------\", \"test case failed: duplicate first idx\"\nassert err_fmt([(\"p\",\"a\"),(\"q\",\"b\")],{\"a\":\"A\",\"b\":\"B\"},1,\" !!!\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [a]:\\np\\n\\nTheirs (prev) [a]:\\nA\\n\\nMine [b]:\\nq\\n\\nTheirs [b]:\\nB !!!\\n----------------------- END DEBUG -----------------------\", \"test case failed: warn_str appended\"\nassert err_fmt([(\"first\",\"1\"),(\"second\",\"2\"),(\"third\",\"3\")],{\"1\":\"I\",\"2\":\"II\",\"3\":\"III\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [1]:\\nfirst\\n\\nTheirs (prev) [1]:\\nI\\n\\nMine [1]:\\nfirst\\n\\nTheirs [1]:\\nI\\n----------------------- END DEBUG -----------------------\", \"test case failed: multi-element, ix=0\"\nassert err_fmt([(\"A\",\"A\"),(\"B\",\"B\"),(\"C\",\"C\"),(\"D\",\"D\")],{\"A\":\"a\",\"B\":\"b\",\"C\":\"c\",\"D\":\"d\"},3) == \"------------------------- DEBUG -------------------------\\nMine (prev) [C]:\\nC\\n\\nTheirs (prev) [C]:\\nc\\n\\nMine [D]:\\nD\\n\\nTheirs [D]:\\nd\\n----------------------- END DEBUG -----------------------\", \"test case failed: four elements, last index\"\nassert err_fmt([(\"only\",\"one\")],{\"one\":\"1\"},0,\" <end>\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [one]:\\nonly\\n\\nTheirs (prev) [one]:\\n1\\n\\nMine [one]:\\nonly\\n\\nTheirs [one]:\\n1 <end>\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element with warn_str\""}
{"task_id": 318, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'float' and 'NoneType'", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples = len(y_train)\n    weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_j = best_t = best_p = None\n        for j in range(X_train.shape[1]):\n            sorted_indices = np.argsort(X_train[:, j])\n            sorted_values = X_train[sorted_indices, j]\n            for t in np.unique(sorted_values):\n                for p in [1, -1]:\n                    predictions = np.zeros(n_samples)\n                    for i in range(n_samples):\n                        if X_train[i, j] - t > 0:\n                            predictions[i] = p\n                        else:\n                            predictions[i] = -p\n                    error = np.dot(weights, predictions != y_train)\n                    if error < best_error:\n                        best_error = error\n                        best_j = j\n                        best_t = t\n                        best_p = p\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        weights *= np.exp(-alpha * y_train * (X_train[:, best_j] - best_t))\n        weights /= np.sum(weights)\n        weak_learners.append((best_j, best_t, best_p, alpha))\n    predictions = np.zeros(len(X_test))\n    for (j, t, p, alpha) in weak_learners:\n        for i in range(len(X_test)):\n            if X_test[i, j] - t > 0:\n                predictions[i] += p * alpha\n            else:\n                predictions[i] -= p * alpha\n    return [1 if x > 0 else -1 for x in predictions]\nassert adaboost_predict(np.array([[-2],[-1],[-0.5],[0.5],[1],[2]]), np.array([-1,-1,-1,1,1,1]), np.array([[-1.5],[-0.3],[1.5]]), 5) == [-1,-1,1], \"failed on simple 1-D split\"\nassert adaboost_predict(np.array([[1,1],[1,2],[1,3],[-1,1],[-1,2],[-1,3]]), np.array([1,1,1,-1,-1,-1]), np.array([[1,2],[-1,2],[0,1]]), 5) == [1,-1,-1], \"failed on horizontal vs vertical split\"\nassert adaboost_predict(np.array([[0,5],[0,6],[0,-5],[0,-6]]), np.array([-1,-1,1,1]), np.array([[0,10],[0,-10]]), 5) == [-1,1], \"failed on feature-2 split\"\nassert adaboost_predict(np.array([[-3],[ -2],[-1],[ 1],[ 2],[ 3]]), np.array([-1,-1,-1,1,1,1]), np.array([[-4],[-0.2],[0.2],[4]]), 3) == [-1,-1,1,1], \"failed on wider range\"\nassert adaboost_predict(np.array([[2,2],[3,3],[-2,-2],[-3,-3]]), np.array([1,1,-1,-1]), np.array([[1.5,1.5],[-1.5,-1.5]]), 10) == [1,-1], \"failed on diagonal clusters\"\nassert adaboost_predict(np.array([[1,0],[2,0],[3,0],[-1,0],[-2,0],[-3,0]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.5,0],[-0.5,0]]), 4) == [1,-1], \"failed on feature-0 split\"\nassert adaboost_predict(np.array([[0,1],[0,2],[0,3],[0,-1],[0,-2],[0,-3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0.5],[0,-0.5]]), 4) == [1,-1], \"failed on feature-1 split\"\nassert adaboost_predict(np.array([[1],[2],[3],[4],[-1],[-2],[-3],[-4]]), np.array([1,1,1,1,-1,-1,-1,-1]), np.array([[5],[-5]]), 6) == [1,-1], \"failed on extended 1-D\"\nassert adaboost_predict(np.array([[1,2],[2,3],[3,4],[-1,-2],[-2,-3],[-3,-4]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0],[4,5],[-4,-5]]), 6) == [-1,1,-1], \"failed on 2-D linear split\"\nassert adaboost_predict(np.array([[0.1],[0.2],[0.3],[-0.1],[-0.2],[-0.3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.15],[-0.15]]), 5) == [1,-1], \"failed on small decimal values\""}
{"task_id": 319, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    theta = np.zeros(X.shape[1])\n    for _ in range(epochs):\n        for i in range(X.shape[0]):\n            x_i = X[i]\n            y_i = y[i]\n            y_hat = theta @ x_i\n            e = y_hat - y_i\n            theta -= learning_rate * e * x_i\n    return [float(val) for val in np.round(theta, 4)]\nassert stochastic_gradient_descent(np.array([[1],[2],[3]]), np.array([3,5,7]), 0.01, 5000) == [1.0, 2.0], \"test case failed: simple 1-D, y=1+2x\"\nassert stochastic_gradient_descent([[0],[1],[2],[3]], [ -2, 3, 8, 13], 0.01, 8000) == [-2.0, 5.0], \"test case failed: 1-D, y=-2+5x\"\nassert stochastic_gradient_descent([[-2],[-1],[0],[1],[2]], [10, 7, 4, 1, -2], 0.01, 10000) == [4.0, -3.0], \"test case failed: 1-D, y=4-3x\"\nassert stochastic_gradient_descent([[0,0],[1,0],[0,1],[1,1]], [1,3,4,6], 0.01, 10000) == [1.0, 2.0, 3.0], \"test case failed: 2-D, y=1+2x1+3x2\"\nassert stochastic_gradient_descent([[0],[5],[10]], [0.3, 1.3, 2.3], 0.005, 30000) == [0.3, 0.2], \"test case failed: fractional slope\"\nassert stochastic_gradient_descent([[0],[1],[2],[3]], [7,7,7,7], 0.01, 6000) == [7.0, 0.0], \"test case failed: constant function\"\nassert stochastic_gradient_descent([[1,0],[0,1],[2,2],[3,1]], [-2, -5, -5, -2], 0.01, 12000) == [-3.0, 1.0, -2.0], \"test case failed: 2-D, negatives\"\nassert stochastic_gradient_descent([[0,0,0],[1,0,0],[0,1,0],[0,0,1],[1,1,1]], [2,3,4,5,8], 0.01, 20000) == [2.0,1.0,2.0,3.0], \"test case failed: 3-D\"\nassert stochastic_gradient_descent([[0],[2],[4]], [-4, -7, -10], 0.01, 8000) == [-4.0, -1.5], \"test case failed: negative intercept & slope\""}
{"task_id": 321, "completion_id": 0, "passed": false, "result": "failed: a must be 1-dimensional or an integer", "solution": "import numpy as np\nimport string\nimport numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    np.random.seed(42)\n    alphabet = string.ascii_letters\n    alphabet_size = len(alphabet)\n    L = len(target)\n    target_indices = [alphabet.index(char) for char in target]\n\n    def create_individual():\n        return [np.random.choice(alphabet) for _ in range(L)]\n    population = [create_individual() for _ in range(population_size)]\n\n    def individual_to_indices(individual):\n        return [alphabet.index(char) for char in individual]\n\n    def compute_fitness(individual):\n        individual_indices = individual_to_indices(individual)\n        sum_abs_diff = sum((abs(p - t) for (p, t) in zip(individual_indices, target_indices)))\n        return 1.0 / (sum_abs_diff + 1e-06)\n    best_individual = None\n    best_fitness = 0.0\n    for epoch in range(iterations):\n        fitnesses = [compute_fitness(ind) for ind in population]\n        best_fitness = max(best_fitness, max(fitnesses))\n        best_individual = max(population, key=lambda x: compute_fitness(x))\n        if best_individual == target:\n            return target\n        total_fitness = sum(fitnesses)\n        selection_probs = [f / total_fitness for f in fitnesses]\n        parents = np.random.choice(population, size=population_size, p=selection_probs, replace=False)\n        children = []\n        for i in range(0, population_size, 2):\n            parent1 = parents[i]\n            parent2 = parents[i + 1]\n            crossover_point = np.random.randint(1, L)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:]\n            children.append(child1)\n            children.append(child2)\n        for child in children:\n            for i in range(L):\n                if np.random.rand() < mutation_rate:\n                    child[i] = np.random.choice(alphabet)\n        population = children\n    return best_individual\nassert genetic_algorithm(\"a\", 20, 0.1, 400) == \"a\", \"test failed: target='a'\"\nassert genetic_algorithm(\"Z\", 25, 0.05, 600) == \"Z\", \"test failed: target='Z'\"\nassert genetic_algorithm(\" \", 30, 0.05, 500) == \" \", \"test failed: target=' '\"\nassert genetic_algorithm(\"Hi\", 30, 0.05, 2000) == \"Hi\", \"test failed: target='Hi'\"\nassert genetic_algorithm(\"AB\", 40, 0.05, 3000) == \"AB\", \"test failed: target='AB'\"\nassert genetic_algorithm(\"GA\", 35, 0.08, 3000) == \"GA\", \"test failed: target='GA'\"\nassert genetic_algorithm(\"Py\", 50, 0.1, 3000) == \"Py\", \"test failed: target='Py'\"\nassert genetic_algorithm(\"AI\", 45, 0.07, 3500) == \"AI\", \"test failed: target='AI'\"\nassert genetic_algorithm(\"Go\", 25, 0.06, 2500) == \"Go\", \"test failed: target='Go'\"\nassert genetic_algorithm(\"OK\", 30, 0.09, 3000) == \"OK\", \"test failed: target='OK'\""}
{"task_id": 322, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    predicted = np.clip(predicted, EPS, 1 - EPS)\n    bce = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    return round(bce, 4)\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.9, 0.1, 0.8, 0.2])) == 0.1643, \"test case failed: binary_crossentropy([1,0,1,0],[0.9,0.1,0.8,0.2])\"\nassert binary_crossentropy(np.array([1, 1, 1]), np.array([1, 1, 1])) == 0.0, \"test case failed: binary_crossentropy([1,1,1],[1,1,1])\"\nassert binary_crossentropy(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0.0, \"test case failed: binary_crossentropy([0,0,0],[0,0,0])\"\nassert binary_crossentropy(np.array([[1,0],[0,1]]), np.array([[0.8,0.2],[0.2,0.8]])) == 0.2231, \"test case failed: binary_crossentropy([[1,0],[0,1]],[[0.8,0.2],[0.2,0.8]])\"\nassert binary_crossentropy(np.array([1,0]), np.array([0.5,0.5])) == 0.6931, \"test case failed: binary_crossentropy([1,0],[0.5,0.5])\"\nassert binary_crossentropy(np.array([0,1]), np.array([0.1,0.9])) == 0.1054, \"test case failed: binary_crossentropy([0,1],[0.1,0.9])\"\nassert binary_crossentropy(np.array([1]), np.array([0.001])) == 6.9078, \"test case failed: binary_crossentropy([1],[0.001])\"\nassert binary_crossentropy(np.array([0]), np.array([0.999])) == 6.9078, \"test case failed: binary_crossentropy([0],[0.999])\"\nassert binary_crossentropy(np.array([1,1,0,0]), np.array([0.7,0.6,0.4,0.3])) == 0.4338, \"test case failed: binary_crossentropy([1,1,0,0],[0.7,0.6,0.4,0.3])\"\nassert binary_crossentropy(np.array([1,0,1,0,1]), np.array([0.2,0.8,0.6,0.4,0.9])) == 0.8692, \"test case failed: binary_crossentropy([1,0,1,0,1],[0.2,0.8,0.6,0.4,0.9])\""}
{"task_id": 324, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n    (rows, cols, channels) = X.shape\n    result = []\n    for (xi, yi) in zip(x, y):\n        yi_clipped = max(0, min(rows - 1, yi))\n        xi_clipped = max(0, min(cols - 1, xi))\n        x0 = int(np.floor(xi_clipped))\n        x1 = x0 + 1\n        y0 = int(np.floor(yi_clipped))\n        y1 = y0 + 1\n        x0 = max(0, min(cols - 1, x0))\n        x1 = max(0, min(cols - 1, x1))\n        y0 = max(0, min(rows - 1, y0))\n        y1 = max(0, min(rows - 1, y1))\n        X00 = X[y0, x0]\n        X01 = X[y0, x1]\n        X10 = X[y1, x0]\n        X11 = X[y1, x1]\n        wx = xi_clipped - x0\n        wy = yi_clipped - y0\n        X0 = X00 * (1 - wx) + X01 * wx\n        X1 = X10 * (1 - wx) + X11 * wx\n        interpolated = X0 * (1 - wy) + X1 * wy\n        rounded = [round(val, 4) for val in interpolated.tolist()]\n        result.append(rounded)\n    return result\nassert bilinear_interpolate(np.array([[[0],[10]],[[20],[30]]]),[0.5],[0.5]) == [[15.0]], \"failed on 2x2 grayscale at centre\"\nassert bilinear_interpolate(np.array([[[0],[10]],[[20],[30]]]),[0.0],[0.0]) == [[0.0]], \"failed on exact pixel (0,0)\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[1.0],[1.0]) == [[4.0]], \"failed on 3x3 centre pixel\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[1.5],[1.5]) == [[6.0]], \"failed on fractional inside 3x3\"\nassert bilinear_interpolate(np.arange(9).reshape(3,3,1),[-1.0],[-1.0]) == [[0.0]], \"failed on top-left out-of-bounds\"\nassert bilinear_interpolate(np.array([[[0,0,0],[10,10,10]],[[20,20,20],[30,30,30]]]),[0.75],[0.25]) == [[12.5,12.5,12.5]], \"failed on RGB sample\""}
{"task_id": 326, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    X = np.array(X)\n    support_vectors = np.array(support_vectors)\n    support_vector_labels = np.array(support_vector_labels)\n    lagr_multipliers = np.array(lagr_multipliers)\n    if gamma is None:\n        n_features = support_vectors.shape[1]\n        gamma = 1.0 / n_features\n    predictions = []\n    for x in X:\n        decision_value = 0.0\n        for i in range(len(support_vectors)):\n            if kernel == 'linear':\n                k = np.dot(support_vectors[i], x)\n            elif kernel == 'polynomial':\n                k = (gamma * np.dot(support_vectors[i], x) + coef) ** power\n            elif kernel == 'rbf':\n                diff = support_vectors[i] - x\n                norm_sq = np.sum(diff ** 2)\n                k = np.exp(-gamma * norm_sq)\n            else:\n                raise ValueError(f'Unknown kernel: {kernel}')\n            decision_value += lagr_multipliers[i] * support_vector_labels[i] * k\n        decision_value += intercept\n        if decision_value >= 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions\nassert svm_predict([[2, 2], [0, 0]], [[0, 0], [1, 1]], [0.5, 0.5], [-1, 1], -0.5, kernel=\"linear\") == [1, -1], \"test case failed: example from the statement\"\nassert svm_predict([[1], [-1]], [[1]], [1.2], [1], -0.5, kernel=\"linear\") == [1, -1], \"test case failed: 1-D linear\"\nassert svm_predict([[0, 0]], [[0, 0]], [0.0], [1], 3.2, kernel=\"linear\") == [1], \"test case failed: intercept only positive\"\nassert svm_predict([[1, 0]], [[1, 0]], [1], [1], -3, kernel=\"polynomial\", power=2, gamma=1, coef=1) == [1], \"test case failed: polynomial positive\"\nassert svm_predict([[0, 1]], [[1, 0]], [1], [1], -3, kernel=\"polynomial\", power=2, gamma=1, coef=1) == [-1], \"test case failed: polynomial negative\"\nassert svm_predict([[2, 2]], [[2, 2]], [0.8], [1], 0, kernel=\"rbf\", gamma=0.5) == [1], \"test case failed: rbf identical vector\"\nassert svm_predict([[10, 10]], [[0, 0]], [1.0], [1], -0.2, kernel=\"rbf\", gamma=1) == [-1], \"test case failed: rbf far away\"\nassert svm_predict([[1, 1]], [[0, 0], [2, 2]], [1, 1], [-1, 1], 0, kernel=\"rbf\", gamma=0.5) == [1], \"test case failed: rbf two svs\"\nassert svm_predict([[0, 0]], [[1, 1]], [1], [-1], 0, kernel=\"rbf\") == [-1], \"test case failed: default gamma\"\nassert svm_predict([[0]], [[0]], [0], [1], 0, kernel=\"linear\") == [1], \"test case failed: sign zero handling\""}
{"task_id": 328, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\nassert first_capitalized_word([\"hello\", \"World\", \"again\"]) == [\"World\"], \"failed: ['hello','World','again']\"\nassert first_capitalized_word([\"Python\", \"java\", \"c++\"]) == [\"Python\"], \"failed: ['Python','java','c++']\"\nassert first_capitalized_word([\"lower\", \"case\", \"only\"]) == [], \"failed: ['lower','case','only']\"\nassert first_capitalized_word([\"CONSTANT\", \"CamelCase\"]) == [\"CONSTANT\"], \"failed: ['CONSTANT','CamelCase']\"\nassert first_capitalized_word([]) == [], \"failed: []\"\nassert first_capitalized_word([\"hello\", \"world\", \"123\", \"!\"]) == [], \"failed: ['hello','world','123','!']\"\nassert first_capitalized_word([\"test\", \"StackOverflow\", \"github\"]) == [\"StackOverflow\"], \"failed: ['test','StackOverflow','github']\"\nassert first_capitalized_word([\"python3\", \"Ruby\", \"perl\"]) == [\"Ruby\"], \"failed: ['python3','Ruby','perl']\"\nassert first_capitalized_word([\"A\", \"b\", \"C\"]) == [\"A\"], \"failed: ['A','b','C']\"\nassert first_capitalized_word([\"lower\", \"UPPER\"]) == [\"UPPER\"], \"failed: ['lower','UPPER']\""}
{"task_id": 329, "completion_id": 0, "passed": false, "result": "failed: test case failed: dft_bins(8, 8000, True)", "solution": "import numpy as np\nimport numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    full_freqs = np.arange(-N // 2, N // 2) * delta_f\n    if positive_only:\n        freqs = full_freqs[full_freqs >= 0]\n    else:\n        freqs = full_freqs\n    return [round(freq, 4) for freq in freqs.tolist()]\nassert dft_bins(8, 8000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(8, 8000, True)\"\nassert dft_bins(8, 8000, False) == [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(8, 8000, False)\"\nassert dft_bins(5, 10000, True) == [0.0, 2000.0, 4000.0], \"test case failed: dft_bins(5, 10000, True)\"\nassert dft_bins(5, 10000, False) == [0.0, 2000.0, 4000.0, -4000.0, -2000.0], \"test case failed: dft_bins(5, 10000, False)\"\nassert dft_bins(1, 48000, True) == [0.0], \"test case failed: dft_bins(1, 48000, True)\"\nassert dft_bins(2, 48000, False) == [0.0, -24000.0], \"test case failed: dft_bins(2, 48000, False)\"\nassert dft_bins(16, 16000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0], \"test case failed: dft_bins(16, 16000, True)\"\nassert dft_bins(16, 16000, False) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, -8000.0, -7000.0, -6000.0, -5000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(16, 16000, False)\"\nassert dft_bins(9, 9000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(9, 9000, True)\"\nassert dft_bins(3, 3000, False) == [0.0, 1000.0, -1000.0], \"test case failed: dft_bins(3, 3000, False)\""}
{"task_id": 330, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n    if 'parameters' in summary_dict:\n        for (key, value) in summary_dict['parameters'].items():\n            new_parameters[key] = value\n        del summary_dict['parameters']\n    if 'hyperparameters' in summary_dict:\n        for (key, value) in summary_dict['hyperparameters'].items():\n            new_hyperparameters[key] = value\n        del summary_dict['hyperparameters']\n    for (key, value) in summary_dict.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n    return (new_parameters, new_hyperparameters)\n# Basic update of both dictionaries\\nparams = {\"sigma\": 1, \"gamma\": 0.5}\\nhparams = {\"id\": \"RBF\", \"trainable\": True}\\nsummary = {\"parameters\": {\"sigma\": 2}, \"hyperparameters\": {\"trainable\": False}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"sigma\": 2, \"gamma\": 0.5}, {\"id\": \"RBF\", \"trainable\": False} ), \"test 1 failed\"\n# Only parameter update\\nparams = {\"a\": 10, \"b\": 20}\\nhparams = {\"id\": \"LIN\"}\\nsummary = {\"parameters\": {\"a\": 15}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"a\": 15, \"b\": 20}, {\"id\": \"LIN\"} ), \"test 2 failed\"\n# Only hyperparameter update\\nparams = {\"c\": 3}\\nhparams = {\"id\": \"POLY\", \"degree\": 2}\\nsummary = {\"hyperparameters\": {\"degree\": 3}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"c\": 3}, {\"id\": \"POLY\", \"degree\": 3} ), \"test 3 failed\"\n# Mixed nested and flat updates\\nparams = {\"p\": 1, \"q\": 2}\\nhparams = {\"id\": \"MIX\", \"flag\": False}\\nsummary = {\"parameters\": {\"p\": 7}, \"flag\": True}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"p\": 7, \"q\": 2}, {\"id\": \"MIX\", \"flag\": True} ), \"test 4 failed\"\n# Unknown keys are ignored\\nparams = {\"x\": 0}\\nhparams = {\"id\": \"UNK\"}\\nsummary = {\"parameters\": {\"y\": 99}, \"foo\": 123}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"x\": 0}, {\"id\": \"UNK\"} ), \"test 5 failed\"\n# Original dictionaries remain unchanged\\nparams = {\"u\": 4}\\nhparams = {\"id\": \"ORI\"}\\nsummary = {\"parameters\": {\"u\": 5}}\\nupdate_kernel_settings(params, hparams, summary)\\nassert params == {\"u\": 4} and hparams == {\"id\": \"ORI\"}, \"test 6 failed\"\n# Empty summary dictionary\\nparams = {\"a\": 1}\\nhparams = {\"id\": \"EMPTY\"}\\nsummary = {}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"a\": 1}, {\"id\": \"EMPTY\"} ), \"test 7 failed\"\n# Flattening removes nested keys influence on iteration order\\nparams = {\"k1\": 1}\\nhparams = {\"id\": \"X\"}\\nsummary = {\"parameters\": {\"k1\": 2}, \"hyperparameters\": {\"id\": \"Y\"}}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"k1\": 2}, {\"id\": \"Y\"} ), \"test 8 failed\"\n# Summary provides direct key also present in nested dict\\nparams = {\"alpha\": 0.1}\\nhparams = {\"id\": \"ALPHA\", \"beta\": 0.2}\\nsummary = {\"parameters\": {\"alpha\": 0.3}, \"alpha\": 0.4, \"beta\": 0.25}\\nassert update_kernel_settings(params, hparams, summary) == ( {\"alpha\": 0.4}, {\"id\": \"ALPHA\", \"beta\": 0.25} ), \"test 9 failed\"\n# Large dictionary stress test\\nparams = {str(i): i for i in range(100)}\\nhparams = {\"id\": \"BIG\", **{f\"h{i}\": i for i in range(100)}}\\nsummary = {\"parameters\": {\"0\": -1, \"50\": -50}, \"hyperparameters\": {\"h99\": -99}}\\nassert update_kernel_settings(params, hparams, summary)[0][\"0\"] == -1 and update_kernel_settings(params, hparams, summary)[1][\"h99\"] == -99, \"test 10 failed\""}
{"task_id": 331, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (0,) into shape (2,)", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    if predictions.shape != oob_mask.shape:\n        raise ValueError('predictions and oob_mask must have the same shape')\n    (n_samples, n_estimators) = predictions.shape\n    oob_predictions = np.zeros((n_samples, n_estimators))\n    for i in range(n_samples):\n        oob_predictions[i] = predictions[i][oob_mask[i]]\n    oob_mean = np.mean(oob_predictions, axis=1)\n    squared_errors = (y_true - oob_mean) ** 2\n    has_oob = np.any(oob_mask, axis=1)\n    valid_errors = squared_errors[has_oob]\n    if len(valid_errors) == 0:\n        return -1.0\n    oob_mse_value = np.mean(valid_errors)\n    return round(oob_mse_value, 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_support[item] += 1\n    frequent_items = {item: count for (item, count) in item_support.items() if count >= min_support}\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        ordered_transaction = [item for item in sorted_items if item in filtered_transaction]\n        current = root\n        for item in ordered_transaction:\n            if item not in current['children']:\n                current['children'][item] = {'support': 1, 'children': {}}\n            else:\n                current['children'][item]['support'] += 1\n            current = current['children'][item]\n    return root\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 333, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    mean = np.mean(X, axis=0)\n    std = np.std(X, axis=0)\n    X_standardized = (X - mean) / (std + 1e-08)\n    X_augmented = np.hstack((np.ones((X_standardized.shape[0], 1)), X_standardized))\n    theta = np.zeros(X_augmented.shape[1])\n    m = X_augmented.shape[0]\n    for _ in range(num_iter):\n        z = X_augmented @ theta\n        h_theta = 1 / (1 + np.exp(-z))\n        gradient = X_augmented.T @ (h_theta - y) / m\n        theta -= alpha * gradient\n    z = X_augmented @ theta\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()\nassert logistic_regression(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 1, 1, 1])) == [0, 1, 1, 1], \"test case failed: OR gate\"\nassert logistic_regression(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1])) == [0, 0, 0, 1], \"test case failed: AND gate\"\nassert logistic_regression(np.array([[-3], [-2], [-1], [1], [2], [3]]), np.array([0, 0, 0, 1, 1, 1])) == [0, 0, 0, 1, 1, 1], \"test case failed: 1-D separable\"\nassert logistic_regression(np.array([[-2, -2], [-1, -1], [1, 2], [2, 3]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: 2-D clusters\"\nassert logistic_regression(np.array([[1], [2], [4], [5]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: 1-D threshold\"\nassert logistic_regression(np.array([[-1], [1]]), np.array([0, 1])) == [0, 1], \"test case failed: minimal set\"\nassert logistic_regression(np.array([[1, 0], [0, 1], [1, 1], [2, 0], [0, 2]]), np.array([0, 0, 1, 1, 1])) == [0, 0, 1, 1, 1], \"test case failed: mixed patterns\"\nassert logistic_regression(np.array([[10], [20], [30], [40]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: large magnitude\"\nassert logistic_regression(np.array([[-5, -5], [-4, -4], [4, 4], [5, 5]]), np.array([0, 0, 1, 1])) == [0, 0, 1, 1], \"test case failed: symmetric data\"\nassert logistic_regression(np.array([[1, 2], [2, 1], [2, 2], [3, 3], [3, 1]]), np.array([0, 0, 1, 1, 1])) == [0, 0, 1, 1, 1], \"test case failed: harder pattern\""}
{"task_id": 334, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef noam_learning_rate(step: int, model_dim: int=512, scale_factor: float=1.0, warmup_steps: int=4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return round(0.0, 9)\n    lr = scale_factor * model_dim ** (-0.5) * min(step ** (-0.5), step * warmup_steps ** (-1.5))\n    return round(lr, 9)\nassert noam_learning_rate(10) == 0.000001747, \"test case failed: noam_learning_rate(10)\"\nassert noam_learning_rate(100) == 0.000017469, \"test case failed: noam_learning_rate(100)\"\nassert noam_learning_rate(250) == 0.000043673, \"test case failed: noam_learning_rate(250)\"\nassert noam_learning_rate(1000) == 0.000174693, \"test case failed: noam_learning_rate(1000)\"\nassert noam_learning_rate(2000) == 0.000349386, \"test case failed: noam_learning_rate(2000)\"\nassert noam_learning_rate(4000) == 0.000698771, \"test case failed: noam_learning_rate(4000)\"\nassert noam_learning_rate(5000, scale_factor=2) == 0.00125, \"test case failed: noam_learning_rate(5000, scale_factor=2)\"\nassert noam_learning_rate(1, model_dim=256, warmup_steps=1000) == 0.000001976, \"test case failed: noam_learning_rate(1, model_dim=256, warmup_steps=1000)\""}
{"task_id": 335, "completion_id": 0, "passed": false, "result": "failed: Unsupported initializer name did not raise ValueError", "solution": "import numpy as np\nimport numpy as np\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    name = name.lower()\n\n    def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n        if name == 'zeros':\n            return np.zeros(shape)\n        elif name == 'ones':\n            return scale * np.ones(shape)\n        elif name == 'normal':\n            return np.random.normal(0, scale, shape)\n        elif name == 'glorot_uniform':\n            if len(shape) < 2:\n                raise ValueError('Glorot uniform initialization requires at least 2 dimensions.')\n            fan_in = shape[0]\n            fan_out = shape[1]\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(-limit, limit, shape)\n        else:\n            raise ValueError(f'Unsupported initialisation strategy: {name}')\n    return initializer\n# 1 \u2013 zeros\narr = get_initializer(\"zeros\")((2, 3), 0.7)\nassert arr.shape == (2, 3) and np.all(arr == 0), \"zeros initialiser failed\"\n# 2 \u2013 ones (check scaling)\narr = get_initializer(\"ones\")((3, 1), 2.5)\nassert np.all(arr == 2.5), \"ones initialiser failed with scaling\"\n# 3 \u2013 normal (mean close to 0)\nnp.random.seed(0)\narr = get_initializer(\"normal\")((1000,), 0.1)\nassert abs(arr.mean()) < 0.02, \"normal initialiser mean too far from 0\"\n# 5 \u2013 glorot_uniform (limits respected)\nnp.random.seed(1)\nshape = (4, 5)\nscale = 0.8\nlimit = scale * (6 / (shape[0] + shape[1])) ** 0.5\narr = get_initializer(\"glorot_uniform\")(shape, scale)\nassert arr.shape == shape and arr.max() <= limit + 1e-7 and arr.min() >= -limit - 1e-7, \"glorot uniform limits violated\"\n# 6 \u2013 glorot_uniform raises on 1-D shape\nraised = False\ntry:\n    get_initializer(\"glorot_uniform\")((10,), 1.0)\nexcept ValueError:\n    raised = True\nassert raised, \"glorot_uniform did not raise on 1-D shape\"\n# 7 \u2013 unsupported name raises\nraised = False\ntry:\n    get_initializer(\"invalid\")\nexcept ValueError:\n    raised = True\nassert raised, \"Unsupported initializer name did not raise ValueError\"\n# 8 \u2013 multiple independent calls produce independent arrays (different seeds)\narr1 = get_initializer(\"zeros\")((2, 2), 1.0)\narr2 = get_initializer(\"zeros\")((2, 2), 1.0)\nassert arr1 is not arr2 and np.array_equal(arr1, arr2), \"independent calls issue\"\n# 9 \u2013 ones with scale 1 equals all ones\narr = get_initializer(\"ones\")((4,), 1.0)\nassert np.all(arr == 1.0), \"ones initialiser with scale 1 failed\"\n# 10 \u2013 normal shape correctness\narr = get_initializer(\"normal\")((3, 4, 5), 0.2)\nassert arr.shape == (3, 4, 5), \"normal initializer gives wrong shape\""}
{"task_id": 336, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\ndef linear_kernel(X: list[list[int | float]] | np.ndarray, Y: list[list[int | float]] | np.ndarray | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y, dtype=np.float64)\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    if X_np.size == 0:\n        return []\n    dot_product = np.dot(X_np, Y_np.T)\n    kernel_matrix = dot_product + c0\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix_rounded\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 337, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nn_interpolate_2D(X: np.ndarray, x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"\n    Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    if not x or not y:\n        return []\n    (rows, cols, channels) = X.shape\n    rounded_x = np.around(np.array(x)).astype(int)\n    rounded_y = np.around(np.array(y)).astype(int)\n    rounded_x = np.clip(rounded_x, 0, cols - 1)\n    rounded_y = np.clip(rounded_y, 0, rows - 1)\n    result = X[rounded_y, rounded_x]\n    return result.tolist()\nassert nn_interpolate_2D(np.arange(1,10).reshape(3,3,1), [0.1,1.7,2.6], [0.2,1.4,2.8]) == [[1],[6],[9]], \"failed on basic 3\u00d73 single-channel example\"\nassert nn_interpolate_2D(np.array([[[1],[2]],[[3],[4]]]), [0.4,1.6], [1.2,0.9]) == [[3],[4]], \"failed when rounding & clipping on 2\u00d72 image\"\nassert nn_interpolate_2D(np.array([[[255,0,0],[0,255,0]],[[0,0,255],[255,255,0]]]), [1.2], [0.2]) == [[0,255,0]], \"failed on RGB sample extraction\"\nassert nn_interpolate_2D(np.arange(1,10).reshape(3,3,1), [-1,2], [-2,4]) == [[1],[9]], \"failed on negative and overshoot coordinates\"\nassert nn_interpolate_2D(np.arange(1,7).reshape(2,3,1), [1.49], [0.51]) == [[5]], \"failed on banker\u2019s rounding behaviour\"\nassert nn_interpolate_2D(np.zeros((4,4,3)), [], []) == [], \"failed on empty coordinate lists\"\nassert nn_interpolate_2D(np.arange(24).reshape(4,3,2), [2.49,0.5], [3.6,1.4]) == [[22,23],[6,7]], \"failed on mixed boundary and interior coordinates\"\nassert nn_interpolate_2D(np.arange(8).reshape(2,2,2), [1.0,0.0], [0.0,1.0]) == [[2,3],[4,5]], \"failed on exact integer coordinates\""}
{"task_id": 338, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"\n    Compute the closed-form solution of Ridge Regression.\n    \n    Parameters:\n    X (np.ndarray or list of lists): Design matrix with n rows and d columns.\n    y (np.ndarray or list): Target vector with n elements.\n    reg_factor (float): Regularization factor (\u03b1), must be \u2265 0.\n    \n    Returns:\n    list: Weights with the bias term first, rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_with_bias = np.hstack((np.ones((X.shape[0], 1)), X))\n    reg_matrix = reg_factor * np.eye(X_with_bias.shape[1])\n    XTX_reg = np.dot(X_with_bias.T, X_with_bias) + reg_matrix\n    XTX_reg_inv = np.linalg.inv(XTX_reg)\n    w = np.dot(XTX_reg_inv, np.dot(X_with_bias.T, y))\n    return [round(coef, 4) for coef in w]\nassert ridge_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,9,11]), 1) == [1.5, 1.55, 2.15], \"test case failed: reg_factor=1 example\"\nassert ridge_regression(np.array([[0],[1],[2]]), np.array([1,3,5]), 0.1) == [1.0132, 1.953], \"test case failed: simple 1-feature, \u03b1=0.1\"\nassert ridge_regression(np.array([[1],[2],[3],[4]]), np.array([3,5,7,9]), 0) == [1.0, 2.0], \"test case failed: ordinary least squares\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[2,3]]), np.array([5,4,6,10]), 0) == [2.0, 1.0, 2.0], \"test case failed: 2-feature, \u03b1=0\"\nassert ridge_regression(np.array([[1],[2],[3]]), np.array([1,2,3]), 100) == [0.0513, 0.1201], \"test case failed: strong regularisation\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,2]]), np.array([1,3,5]), 0.5) == [0.88, 0.9867, 0.9867], \"test case failed: symmetric features\"\nassert ridge_regression(np.array([[1],[1],[1]]), np.array([2,2,2]), 1) == [0.8571, 0.8571], \"test case failed: singular design matrix with reg\"\nassert ridge_regression(np.array([[1,0],[0,1],[1,1],[2,2]]), np.array([3,4,6,11]), 5) == [1.1786, 1.5908, 1.7574], \"test case failed: moderate regularisation\"\nassert ridge_regression(np.array([[10,10],[20,20]]), np.array([30,60]), 100) == [0.0815, 1.3614, 1.3614], \"test case failed: scaled features with strong reg\""}
{"task_id": 339, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    counts = Counter(y)\n    max_freq = max(counts.values())\n    candidates = [item for (item, freq) in counts.items() if freq == max_freq]\n    first_occurrence = {}\n    for (idx, item) in enumerate(y):\n        if item not in first_occurrence:\n            first_occurrence[item] = idx\n    return min(candidates, key=lambda x: first_occurrence[x])\nassert most_common_label(['cat', 'dog', 'cat', 'bird']) == 'cat', \"failed on ['cat', 'dog', 'cat', 'bird']\"\nassert most_common_label(['apple','banana','apple','banana']) == 'apple', \"failed on tie ['apple','banana','apple','banana']\"\nassert most_common_label([1,2,3,2,3,3]) == 3, \"failed on [1,2,3,2,3,3]\"\nassert most_common_label([True, False, True, True, False]) is True, \"failed on booleans\"\nassert most_common_label([]) is None, \"failed on empty list\"\nassert most_common_label(['x']) == 'x', \"failed on single element\"\nassert most_common_label(['a','b','c','d','e']) == 'a', \"failed on all unique\"\nassert most_common_label([0,0,0,1,1,2]) == 0, \"failed on numeric counts\"\nassert most_common_label(['red','blue','green','blue','red','blue']) == 'blue', \"failed on colour list\"\nassert most_common_label(['same','same','same']) == 'same', \"failed on identical elements\""}
{"task_id": 340, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (4,) (2,2) ", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param = [float(x) for x in np.round(param_new, 8).flatten()]\n    new_m = [float(x) for x in np.round(m_new, 8).flatten()]\n    new_v = [float(x) for x in np.round(v_new, 8).flatten()]\n    return (updated_param, new_m, new_v)\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 342, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    distance = sum((abs(xi - yi) for (xi, yi) in zip(x, y)))\n    return round(distance, 4)\nassert manhattan([1, 2, 3], [2, 4, 6]) == 6.0, \"failed: manhattan([1,2,3],[2,4,6])\"\nassert manhattan([0, -1, 4.5], [-2, 3.5, 1]) == 10.0, \"failed: manhattan([...])\"\nassert manhattan([], []) == 0.0, \"failed: manhattan([],[])\"\nassert manhattan([1], []) == -1, \"failed: manhattan([1],[])\"\nassert manhattan([1.1111, 2.2222], [3.3333, 4.4444]) == 4.4444, \"failed: manhattan([...]) rounding\"\nassert manhattan([5,5,5,5],[5,5,5,5]) == 0.0, \"failed: identical vectors\"\nassert manhattan([-1,-2,-3],[-1,-2,-3]) == 0.0, \"failed: identical negative\"\nassert manhattan([100,200,300],[0,0,0]) == 600.0, \"failed: large numbers\"\nassert manhattan([0.1,0.2,0.3],[0.3,0.2,0.1]) == 0.4, \"failed: decimals\"\nassert manhattan([1e-5,-1e-5],[0,0]) == 0.0, \"failed: small numbers rounding\""}
{"task_id": 343, "completion_id": 0, "passed": false, "result": "failed: failed when retaining single best sample", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    N = len(rewards)\n    num_elites = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_samples = theta_samples[sorted_indices[:num_elites]]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean_rounded = [round(val, 4) for val in mean]\n    variance_rounded = [round(val, 4) for val in variance]\n    return (mean_rounded, variance_rounded)\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 344, "completion_id": 0, "passed": false, "result": "failed: failed on single token", "solution": "import heapq\nimport heapq\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n    frequency = {}\n    for token in tokens:\n        frequency[token] = frequency.get(token, 0) + 1\n    heap = []\n    for (token, freq) in frequency.items():\n        heapq.heappush(heap, (freq, token))\n    while len(heap) > 1:\n        (freq1, token1) = heapq.heappop(heap)\n        (freq2, token2) = heapq.heappop(heap)\n        merged_freq = freq1 + freq2\n        merged_token = ''\n        heapq.heappush(heap, (merged_freq, merged_token))\n    if len(heap) == 1:\n        root = heap[0][1]\n    else:\n        return {}\n\n    class Node:\n\n        def __init__(self, freq, char=None):\n            self.freq = freq\n            self.char = char\n            self.children = []\n\n        def __lt__(self, other):\n            if self.freq != other.freq:\n                return self.freq < other.freq\n            return self.char < other.char if self.char is not None else False\n    heap = []\n    for (token, freq) in frequency.items():\n        node = Node(freq, token)\n        heapq.heappush(heap, node)\n    while len(heap) > 1:\n        node1 = heapq.heappop(heap)\n        node2 = heapq.heappop(heap)\n        merged = Node(node1.freq + node2.freq)\n        merged.children.append(node1)\n        merged.children.append(node2)\n        heapq.heappush(heap, merged)\n    codes = {}\n\n    def traverse(node, code):\n        if node.char is not None:\n            codes[node.char] = code\n            return\n        traverse(node.children[0], code + '0')\n        traverse(node.children[1], code + '1')\n    traverse(heap[0], '')\n    return codes\nassert huffman_encode([]) == {}, \"failed on empty input\"\nassert huffman_encode([\"a\"]) == {\"a\": \"0\"}, \"failed on single token\"\nassert huffman_encode([\"a\", \"b\"]) == {\"a\": \"0\", \"b\": \"1\"}, \"failed on two tokens\"\nassert huffman_encode([\"a\", \"b\", \"a\", \"b\"]) == {\"a\": \"0\", \"b\": \"1\"}, \"failed on uniform frequencies\"\nassert huffman_encode([\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"]) == {\"a\": \"1\", \"b\": \"01\", \"c\": \"00\"}, \"failed on example 1\"\nassert huffman_encode([\"x\", \"y\", \"z\", \"x\", \"x\", \"y\", \"y\", \"y\"]) == {\"y\": \"1\", \"x\": \"01\", \"z\": \"00\"}, \"failed on example 2\"\nassert len({code for code in huffman_encode([\"m\", \"n\", \"o\", \"p\", \"q\", \"n\", \"o\", \"p\", \"o\", \"p\", \"p\"]).values()}) == 5, \"failed on five token set\"\nassert all(set(code) <= {\"0\", \"1\"} for code in huffman_encode(list(\"abracadabra\")).values()), \"found non-binary characters\"\nassert len(huffman_encode([str(i) for i in range(10)])) == 10, \"did not encode all unique tokens\"\nassert all(not any(code.startswith(other) for other in huffman_encode(list(\"huffman\")).values() if other != code) for code in huffman_encode(list(\"huffman\")).values()), \"codes are not prefix-free\""}
{"task_id": 345, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    X_train_with_intercept = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_with_intercept = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    XT_X = X_train_with_intercept.T @ X_train_with_intercept\n    XT_y = X_train_with_intercept.T @ y_train\n    Omega_0 = omega0\n    posterior_mean = np.linalg.inv(XT_X + Omega_0) @ (XT_y + Omega_0 @ mu0)\n    predictions = X_test_with_intercept @ posterior_mean\n    return [float(pred.round(4)) for pred in predictions]\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([2, 3, 5]), np.array([[4]]), np.zeros(2), np.eye(2)) == [5.8333], \"Test-1 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), np.eye(2)) == [8.5417], \"Test-2 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3],[4]]), np.array([1, 2, 3, 4]), np.array([[5]]), np.zeros(2), np.eye(2)) == [4.7273], \"Test-3 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2]]), np.array([1, 2]), np.array([[3]]), np.zeros(2), np.eye(2)) == [2.3333], \"Test-4 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), 5 * np.eye(2)) == [6.9741], \"Test-5 failed\"\nassert bayesian_linear_regression_predict(np.array([[2]]), np.array([4]), np.array([[3]]), np.zeros(2), np.eye(2)) == [4.6667], \"Test-6 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.array([1, 1]), np.eye(2)) == [8.5833], \"Test-7 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3],[4],[5]]), np.array([5, 7, 9, 11, 13]), np.array([[6]]), np.zeros(2), np.eye(2)) == [15.5405], \"Test-8 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.zeros(2), 0.5 * np.eye(2)) == [8.7797], \"Test-9 failed\"\nassert bayesian_linear_regression_predict(np.array([[1],[2],[3]]), np.array([3, 5, 7]), np.array([[4]]), np.array([2, 2]), np.eye(2)) == [8.625], \"Test-10 failed\""}
{"task_id": 346, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    label_counts = np.unique(y, return_counts=True)[1]\n    total_samples = len(y)\n    probabilities = label_counts / total_samples\n    probabilities = np.where(probabilities == 0, 1e-16, probabilities)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return round(entropy, 4)\nassert entropy([0, 0, 1, 1, 1, 1]) == 0.9183, \"failed: entropy([0,0,1,1,1,1])\"\nassert entropy([0, 0, 0, 0]) == 0.0, \"failed: entropy([0,0,0,0])\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy([0, 1, 2, 3]) == 2.0, \"failed: entropy([0,1,2,3])\"\nassert entropy([0, 1, 1, 1]) == 0.8113, \"failed: entropy([0,1,1,1])\"\nassert entropy([1, 1, 1, 1, 2, 2]) == 0.9183, \"failed: entropy([1,1,1,1,2,2])\"\nassert entropy([3, 3, 3, 3, 3, 4, 4, 5]) == 1.2988, \"failed: entropy([3,3,3,3,3,4,4,5])\"\nassert entropy([0]) == 0.0, \"failed: entropy([0])\"\nassert entropy([0, 0, 1, 2]) == 1.5, \"failed: entropy([0,0,1,2])\"\nassert entropy([10, 10, 10, 10, 10, 10, 10]) == 0.0, \"failed: entropy(repeated single label)\""}
{"task_id": 347, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module not in ['C', 'G']:\n        raise ValueError(\"Module must be 'C' for critic or 'G' for generator.\")\n    if module == 'G':\n        if Y_real is not None or gradInterp is not None:\n            raise ValueError('Y_real and gradInterp should not be provided for generator loss.')\n        loss = -np.mean(Y_fake)\n    elif module == 'C':\n        if Y_real is None or gradInterp is None:\n            raise ValueError('Y_real and gradInterp are required for critic loss.')\n        term1 = np.mean(Y_fake)\n        term2 = np.mean(Y_real)\n        term3 = np.mean((np.linalg.norm(gradInterp, axis=1) - 1) ** 2)\n        loss = term1 - term2 + lambda_ * term3\n    return round(loss, 4)\nassert wgan_gp_loss(np.array([0.3, -0.2, 0.1]), \"C\", np.array([0.8, 0.4, 0.6]), np.array([[0.5, 0.5],[1.0, -1.0],[0.0, 1.0]])) == 0.3245, \"failed on example critic loss\"\nassert wgan_gp_loss(np.array([-1,-1,-1]), \"C\", np.array([1,1,1]), np.zeros((3,2))) == 8.0, \"failed on critic loss with zero gradients\"\nassert wgan_gp_loss(np.array([2,2]), \"C\", np.array([2,2]), np.array([[1.0],[1.0]])) == 0.0, \"failed on critic loss, zero Wasserstein, zero penalty\"\nassert wgan_gp_loss(np.array([0.0]), \"C\", np.array([0.0]), np.array([[1.5,0.0]])) == 2.5, \"failed on single-sample critic loss\"\nassert wgan_gp_loss(np.array([1.0,1.0]), \"G\") == -1.0, \"failed on generator loss, positive mean\"\nassert wgan_gp_loss(np.array([-0.2,0.2]), \"G\") == 0.0, \"failed on generator loss, zero mean\"\nassert wgan_gp_loss(np.array([0.0]), \"G\") == 0.0, \"failed on generator loss, zero output\"\nassert wgan_gp_loss(np.array([3,-1]), \"G\") == -1.0, \"failed on generator loss, mixed signs\"\nassert wgan_gp_loss(np.array([-2,-2,-2,-2]), \"G\") == 2.0, \"failed on generator loss, negative mean\"\nassert wgan_gp_loss(np.array([0.1234,0.5678]), \"G\") == -0.3456, \"failed on generator loss, rounding check\""}
{"task_id": 348, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    if X.shape[0] != X.shape[1]:\n        return False\n    if not np.allclose(X, X.T, atol=1e-08):\n        return False\n    eigenvalues = np.linalg.eigvalsh(X)\n    if np.all(eigenvalues > 1e-08):\n        return True\n    else:\n        return False\nassert is_symmetric_positive_definite(np.array([[2, -1], [-1, 2]])) is True, \"failed on symmetric PD matrix [[2,-1],[-1,2]]\"\nassert is_symmetric_positive_definite(np.array([[1, 2], [3, 4]])) is False, \"failed on non-symmetric matrix [[1,2],[3,4]]\"\nassert is_symmetric_positive_definite(np.array([[0, 0], [0, 0]])) is False, \"failed on zero matrix\"\nassert is_symmetric_positive_definite(np.array([[4, 1], [1, 3]])) is True, \"failed on symmetric PD matrix [[4,1],[1,3]]\"\nassert is_symmetric_positive_definite(np.eye(3)) is True, \"failed on identity matrix\"\nassert is_symmetric_positive_definite(np.array([[1, 0, 0], [0, 1, 0]])) is False, \"failed on non-square matrix\"\nassert is_symmetric_positive_definite(np.diag([-1, 5])) is False, \"failed on matrix with a negative eigenvalue\"\nassert is_symmetric_positive_definite(np.array([[1, 2, 3], [2, 1, 2], [3, 2, 1]])) is False, \"failed on indefinite symmetric matrix\"\nassert is_symmetric_positive_definite(np.array([[1e-9, 0], [0, 1e-9]])) is False, \"failed on nearly zero eigenvalues\"\nassert is_symmetric_positive_definite(np.diag([2, 3, 4])) is True, \"failed on positive diagonal matrix\""}
{"task_id": 350, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef polynomial_ridge_regression(X: list[float | int], y: list[float | int], degree: int, reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(X)\n    design_matrix = np.zeros((n_samples, degree + 1))\n    for i in range(n_samples):\n        for j in range(degree + 1):\n            design_matrix[i, j] = X[i] ** j\n    identity_matrix = np.eye(degree + 1) * reg_factor\n    w = np.linalg.inv(design_matrix.T @ design_matrix + identity_matrix) @ design_matrix.T @ y\n    return [round(coef, 4) for coef in w]\nassert polynomial_ridge_regression([0,1,2,3],[1,6,17,34],2,0) == [1.0, 2.0, 3.0], \"failed: quadratic without regularisation\"\nassert polynomial_ridge_regression([0,1],[1,3],1,0) == [1.0, 2.0], \"failed: simple line fit\"\nassert polynomial_ridge_regression([-2,-1,0,1,2],[2,3.5,4.0,3.5,2],2,0) == [4.0, 0.0, -0.5], \"failed: symmetric parabola\"\nassert polynomial_ridge_regression([0,0,0],[3,3,3],0,2) == [1.8], \"failed: constant with ridge\"\nassert polynomial_ridge_regression([0,1],[0,1],1,1) == [0.2, 0.4], \"failed: line with ridge\"\nassert polynomial_ridge_regression([-1,0,1],[1,0,1],2,1) == [0.25, 0.0, 0.5], \"failed: parabola with ridge\"\nassert polynomial_ridge_regression([-5,0,5],[2,2,2],0,0) == [2.0], \"failed: constant fit\"\nassert polynomial_ridge_regression([1,2,3,4],[4,15,40,85],3,0) == [1.0, 1.0, 1.0, 1.0], \"failed: cubic polynomial\"\nassert polynomial_ridge_regression([0,1,2],[0,1,4],2,0) == [0.0, 0.0, 1.0], \"failed: pure square\"\nassert polynomial_ridge_regression([-1,1],[-1,1],1,20) == [0.0, 0.0909], \"failed: heavy ridge shrinkage\""}
{"task_id": 351, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            image = X[n, c, :, :]\n            for i in range(out_h):\n                for j in range(out_w):\n                    start_row = i * stride\n                    start_col = j * stride\n                    end_row = start_row + p_h\n                    end_col = start_col + p_w\n                    window = image[start_row:end_row, start_col:end_col]\n                    max_val = np.max(window)\n                    output[n, c, i, j] = max_val\n    return output.tolist()\nassert max_pool2d(np.array([[[[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 9, 10, 11, 12],[13, 14, 15, 16]]]]), (2, 2), 2) == [[[[6, 8], [14, 16]]]], \"test case 1 failed\"\nassert max_pool2d(np.arange(1, 17).reshape(1, 1, 4, 4), (4, 4), 4) == [[[[16]]]], \"test case 2 failed\"\nassert max_pool2d(np.array([[[[1,2,3],[4,5,6],[7,8,9]],[[9,8,7],[6,5,4],[3,2,1]]]]), (2, 2), 1) == [[[[5, 6], [8, 9]], [[9, 8], [6, 5]]]], \"test case 3 failed\"\nassert max_pool2d(np.stack([np.arange(1,17).reshape(1,4,4)[0] for _ in range(2)]).reshape(2,1,4,4), (2, 2), 2) == [[[[6, 8], [14, 16]]], [[[6, 8], [14, 16]]]], \"test case 4 failed\"\nassert max_pool2d(np.array([[[[0,1,0],[2,3,2],[0,1,0]]]]), (2, 2), 1) == [[[[3, 3], [3, 3]]]], \"test case 5 failed\"\nassert max_pool2d(np.array([[[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]]]), (3, 3), 2) == [[[[13, 15], [23, 25]]]], \"test case 6 failed\"\nassert max_pool2d(np.zeros((1,1,3,3)), (2, 2), 1) == [[[[0.0, 0.0], [0.0, 0.0]]]], \"test case 7 failed\"\nassert max_pool2d(np.ones((1,3,2,2))*7, (2, 2), 2) == [[[ [7.0] ], [[7.0]], [[7.0]]]], \"test case 8 failed\"\nassert max_pool2d(np.arange(1,10).reshape(1,1,3,3), (1, 1), 1) == np.arange(1,10).reshape(1,1,3,3).tolist(), \"test case 9 failed\"\nassert max_pool2d(np.array([[[[5,4],[3,2]]]]), (2, 2), 2) == [[[[5]]]], \"test case 10 failed\""}
{"task_id": 353, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    total = len(labels)\n    probabilities = [count / total for count in counts.values()]\n    entropy = 0.0\n    for p in probabilities:\n        if p > 0:\n            entropy -= p * math.log2(p)\n    return round(entropy, 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 354, "completion_id": 0, "passed": false, "result": "failed: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (4,) + inhomogeneous part.", "solution": "import numpy as np\nimport numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch_w, out_ch) = W.shape\n    if pad == 'same':\n        pad_rows = (in_rows - (kernel_rows - dilation + 1) + (stride - 1)) // 2\n        pad_cols = (in_cols - (kernel_cols - dilation + 1) + (stride - 1)) // 2\n        pad = (pad_rows, pad_rows, pad_cols, pad_cols)\n    elif isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad = (pad[0], pad[0], pad[1], pad[1])\n        elif len(pad) == 4:\n            pass\n        else:\n            raise ValueError('Invalid padding specification')\n    else:\n        raise ValueError('Invalid padding specification')\n    X_padded = np.pad(X, ((0, 0), pad[0], pad[2], (0, 0)), mode='constant')\n    out_rows = (in_rows + 2 * pad[0] - (kernel_rows - dilation + 1)) // stride + 1\n    out_cols = (in_cols + 2 * pad[2] - (kernel_cols - dilation + 1)) // stride + 1\n    im2col = []\n    for ch in range(in_ch):\n        channel = X_padded[:, :, :, ch]\n        num_patches_rows = (in_rows + 2 * pad[0] - (kernel_rows - dilation + 1)) // stride + 1\n        num_patches_cols = (in_cols + 2 * pad[2] - (kernel_cols - dilation + 1)) // stride + 1\n        patches = []\n        for r in range(0, in_rows + 2 * pad[0], stride):\n            for c in range(0, in_cols + 2 * pad[2], stride):\n                patch = []\n                for k_row in range(kernel_rows):\n                    for k_col in range(kernel_cols):\n                        row = r + k_row * dilation\n                        col = c + k_col * dilation\n                        patch.append(channel[row, col])\n                patches.append(patch)\n        im2col.append(np.array(patches))\n    im2col = np.stack(im2col, axis=0)\n    im2col = im2col.reshape(-1, in_ch * kernel_rows * kernel_cols)\n    W_reshaped = W.reshape(out_ch, in_ch * kernel_rows * kernel_cols)\n    output = np.dot(im2col, W_reshaped)\n    output = output.reshape(n_ex, out_rows, out_cols, out_ch)\n    return output.tolist()\nassert conv2D(np.arange(1, 10, dtype=float).reshape(1,3,3,1), np.array([[[[1.]],[[0.]]],[[[0.]],[[-1.]]]]), 1, 0) == [[[[-4.0], [-4.0]], [[-4.0], [-4.0]]]], \"basic 3\u00d73 no-pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, \"same\") == [[[ [1.0], [2.0] ], [ [3.0], [4.0] ]]], \"same pad identity\"\nassert conv2D(np.arange(1,17,dtype=float).reshape(1,4,4,1), np.ones((2,2,1,1)), 2, 0) == [[[ [14.0], [22.0] ], [ [46.0], [54.0] ]]], \"stride 2\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.concatenate([np.ones((1,1,1,1)), -np.ones((1,1,1,1))], axis=3), 1, 0) == [[[[1.0,-1.0],[2.0,-2.0]],[[3.0,-3.0],[4.0,-4.0]]]], \"multi-out ch\"\nassert conv2D(np.array([[[[1.,10.],[2.,20.]],[[3.,30.],[4.,40.]]]]), np.array([[[[1.],[1.]]]]), 1, 0) == [[[ [11.0], [22.0] ], [ [33.0], [44.0] ]]], \"multi-in ch\"\nassert conv2D(np.array([[[[7.]]]]), np.ones((1,1,1,1)), 1, (1,1)) == [[[[0.0],[0.0],[0.0]],[[0.0],[7.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"2-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, (0,1,0,1)) == [[[[1.0],[2.0],[0.0]],[[3.0],[4.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"4-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]],[[[5.],[6.]],[[7.],[8.]]]]), np.full((1,1,1,1),2.), 1, 0) == [[[[2.0],[4.0]],[[6.0],[8.0]]],[[[10.0],[12.0]],[[14.0],[16.0]]]], \"batching\"\nassert conv2D(np.full((1,2,2,1),5.), np.zeros((1,1,1,1)), 1, 0) == [[[ [0.0], [0.0] ], [ [0.0], [0.0] ]]], \"zero kernel\""}
{"task_id": 355, "completion_id": 0, "passed": false, "result": "failed: local variable 'eigen_values' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        directions = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigen_values, eigen_vectors) = np.linalg.eigh(cov_matrix)\n        directions = eigen_vectors\n    else:\n        raise ValueError(f\"Unknown solver: {solver}. Choose 'svd' or 'eigen'.\")\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    directions = directions[sorted_indices]\n    if solver == 'eigen':\n        directions = directions[sorted_indices]\n    for i in range(n_components):\n        direction = directions[i]\n        first_non_zero = np.where(direction != 0)[0][0]\n        if direction[first_non_zero] < 0:\n            directions[i] *= -1\n    scores = centred_data @ directions\n    total_variance = np.sum(eigen_values)\n    explained_variance = eigen_values / total_variance\n    explained_variance_ratio = explained_variance[:n_components]\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: centred diagonal data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 svd\"\nassert pca_transform(np.array([[2, 2], [4, 4], [6, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: scaled diagonal \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [1, 1], [1, 2]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: variation along second axis \u2013 svd\"\nassert pca_transform(np.array([[1], [2], [3], [4]]), 1) == ([[-1.5], [-0.5], [0.5], [1.5]], [1.0]), \"failed: one-dimensional data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1, solver=\"eigen\") == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 eigen\"\nassert pca_transform(np.array([[1, 2], [1, 4]]), 1, solver=\"eigen\") == ([[-1.0], [1.0]], [1.0]), \"failed: two samples \u2013 eigen\"\nassert pca_transform(np.array([[0, 0, 1], [0, 0, 2], [0, 0, 3]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: third axis variation \u2013 svd\"\nassert pca_transform(np.array([[1, 2], [2, 4], [3, 6], [4, 8]]), 1) == ([[-3.3541], [-1.118 ], [1.118 ], [3.3541]], [1.0]), \"failed: perfectly collinear \u2013 svd\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        import numpy as np\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 357, "completion_id": 0, "passed": false, "result": "failed: only length-1 arrays can be converted to Python scalars", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for iteration in range(max_iters):\n        distances = np.sqrt(np.sum((data[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            mask = labels == k\n            if np.any(mask):\n                new_centroids[k] = np.mean(data[mask], axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_indices = np.argsort(centroids)\n    sorted_centroids = centroids[sorted_indices]\n    return [[round(float(x), 4) for x in centroid] for centroid in sorted_centroids]\nassert kmeans(np.array([[1,1],[1,2],[2,1],[8,8],[9,8],[8,9]]),2)==[[1.3333,1.3333],[8.3333,8.3333]],\"failed on separated two-cluster example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),1)==[[2.0,2.0]],\"failed on single-cluster mean\"\nassert kmeans(np.array([[0,0],[1,0],[0,1],[1,1]]),2)==[[0.0,0.5],[1.0,0.5]],\"failed on square dataset\"\nassert kmeans(np.array([[1,0],[0,1],[-1,0],[0,-1]]),2)==[[-0.5,0.5],[0.5,-0.5]],\"failed on cross dataset\"\nassert kmeans(np.array([[2,2],[2,4],[4,2],[4,4],[10,10]]),2)==[[3.0,3.0],[10.0,10.0]],\"failed on distant outlier dataset\"\nassert kmeans(np.array([[0,0],[1,1]]),2)==[[0.0,0.0],[1.0,1.0]],\"failed on two-point two-cluster dataset\"\nassert kmeans(np.array([[0,0],[0,1],[1,0]]),3)==[[0.0,0.0],[0.0,1.0],[1.0,0.0]],\"failed on three-point three-cluster dataset\"\nassert kmeans(np.array([[1],[2],[3]]),2)==[[1.0],[2.5]],\"failed on one-dimensional dataset\"\nassert kmeans(np.array([[3,3],[4,3],[3,4],[4,4]]),2)==[[3.0,3.5],[4.0,3.5]],\"failed on 2x2 square dataset\"\nassert kmeans(np.array([[0,0,0],[0,0,1],[0,1,0],[1,0,0],[9,9,9],[9,9,8],[9,8,9],[8,9,9]]),2)==[[0.25,0.25,0.25],[8.75,8.75,8.75]],\"failed on 3-D dataset\""}
{"task_id": 358, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\nassert accuracy([1, 0, 1, 1], [1, 0, 0, 1]) == 0.75, \"failed: basic mixed case\"\nassert accuracy([0, 0, 0], [0, 0, 0]) == 1.0, \"failed: perfect accuracy\"\nassert accuracy([1, 2, 3], [4, 5, 6]) == 0.0, \"failed: zero accuracy\"\nassert accuracy(np.array([1, 2, 3, 4, 2]), np.array([1, 2, 4, 4, 2])) == 0.8, \"failed: numpy array input\"\nassert accuracy([1, 2], [1]) == -1, \"failed: length mismatch\"\nassert accuracy(['cat', 'dog', 'cat'], ['cat', 'dog', 'dog']) == 0.6667, \"failed: string labels\"\nassert accuracy([True, False, True], [True, True, True]) == 0.6667, \"failed: boolean labels\"\nassert accuracy([1,1,1,1,1], [0,0,0,0,0]) == 0.0, \"failed: all incorrect large same label\"\nassert accuracy(list(range(100)), list(range(100))) == 1.0, \"failed: large perfect accuracy\""}
{"task_id": 359, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    if not derivative:\n        loss = -np.sum(y * np.log(y_pred))\n    else:\n        gradient = y_pred - y\n    if not derivative:\n        return round(loss, 4)\n    else:\n        return [[round(val, 4) for val in row] for row in gradient]\nassert cross_entropy(np.array([[0,1,0],[1,0,0]]), np.array([[0.2,0.7,0.1],[0.6,0.3,0.1]])) == 0.8675, \"test case 1 failed\"\nassert cross_entropy(np.array([[0,1,0],[1,0,0]]), np.array([[0.2,0.7,0.1],[0.6,0.3,0.1]]), True) == [[0.2,-0.3,0.1],[-0.4,0.3,0.1]], \"test case 2 failed\"\nassert cross_entropy(np.array([[1,0],[0,1]]), np.array([[0.9,0.1],[0.2,0.8]])) == 0.3285, \"test case 3 failed\"\nassert cross_entropy(np.array([[1,0],[0,1]]), np.array([[0.9,0.1],[0.2,0.8]]), True) == [[-0.1,0.1],[0.2,-0.2]], \"test case 4 failed\"\nassert cross_entropy(np.array([[0,0,1],[0,1,0],[1,0,0]]), np.array([[0.3,0.2,0.5],[0.1,0.7,0.2],[0.6,0.3,0.1]])) == 1.5606, \"test case 5 failed\"\nassert cross_entropy(np.array([[0,0,1],[0,1,0],[1,0,0]]), np.array([[0.3,0.2,0.5],[0.1,0.7,0.2],[0.6,0.3,0.1]]), True) == [[0.3,0.2,-0.5],[0.1,-0.3,0.2],[-0.4,0.3,0.1]], \"test case 6 failed\"\nassert cross_entropy(np.array([[1,0,0]]), np.array([[1/3,1/3,1/3]])) == 1.0986, \"test case 7 failed\"\nassert cross_entropy(np.array([[1,0,0]]), np.array([[1/3,1/3,1/3]]), True) == [[-0.6667,0.3333,0.3333]], \"test case 8 failed\"\nassert cross_entropy(np.array([[0,1],[1,0],[0,1]]), np.array([[0.4,0.6],[0.9,0.1],[0.2,0.8]])) == 0.8393, \"test case 9 failed\"\nassert cross_entropy(np.array([[0,1],[1,0],[0,1]]), np.array([[0.4,0.6],[0.9,0.1],[0.2,0.8]]), True) == [[0.4,-0.4],[-0.1,0.1],[0.2,-0.2]], \"test case 10 failed\""}
{"task_id": 360, "completion_id": 0, "passed": false, "result": "failed: failed: dct([1,1],True)", "solution": "import numpy as np\nimport numpy as np\ndef dct(frame: np.ndarray | list[float], orthonormal: bool=True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    if isinstance(frame, list):\n        frame = np.array(frame)\n    N = len(frame)\n    coefficients = []\n    for k in range(N):\n        cos_term = np.cos(np.pi * k * (2 * np.arange(N) + 1) / (2 * N))\n        c_k = 2 * np.dot(frame, cos_term)\n        if orthonormal:\n            if k == 0:\n                c_k *= 2 * np.sqrt(1 / (4 * N))\n            else:\n                c_k *= 2 * np.sqrt(1 / (2 * N))\n        coefficients.append(round(c_k.real, 4))\n    return coefficients\nassert dct(np.array([1, 1]), True) == [1.4142, 0.0], \"failed: dct([1,1],True)\"\nassert dct(np.array([1, 1]), False) == [4.0, 0.0], \"failed: dct([1,1],False)\"\nassert dct(np.array([0, 0, 0]), True) == [0.0, 0.0, 0.0], \"failed: dct([0,0,0],True)\"\nassert dct(np.array([1, 0]), True) == [0.7071, 0.7071], \"failed: dct([1,0],True)\"\nassert dct(np.array([1, 0]), False) == [2.0, 1.4142], \"failed: dct([1,0],False)\"\nassert dct(np.array([1, 2, 3, 4]), True) == [5.0, -2.2304, 0.0, -0.1585], \"failed: dct([1,2,3,4],True)\"\nassert dct(np.array([1, 2, 3, 4]), False) == [20.0, -6.3086, 0.0, -0.4483], \"failed: dct([1,2,3,4],False)\"\nassert dct(np.array([2, 2, 2, 2]), True) == [4.0, 0.0, 0.0, 0.0], \"failed: dct([2,2,2,2],True)\"\nassert dct(np.array([2, 2, 2, 2]), False) == [16.0, 0.0, 0.0, 0.0], \"failed: dct([2,2,2,2],False)\"\nassert dct(np.array([1, 2, 3]), True) == [3.4641, -1.4142, 0.0], \"failed: dct([1,2,3],True)\""}
{"task_id": 362, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    if isinstance(data, list):\n        arr = np.array(data, dtype=np.float64)\n    else:\n        arr = np.asarray(data, dtype=np.float64)\n    row_sums = np.sum(arr, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = arr / row_sums[:, np.newaxis]\n    rounded_matrix = np.round(stochastic_matrix, 4).tolist()\n    return rounded_matrix\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: name 'Discrete' is not defined", "solution": "\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_space(space: Space, is_tuple: bool) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)) and is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(s, Box) for s in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(s, Box) for s in space.values()))\n        return False\n    cont_action = is_continuous_space(env.action_space, tuple_action)\n    cont_obs = is_continuous_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 364, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\nassert sign(10) == 1, \"test case failed: sign(10)\"\nassert sign(-5) == -1, \"test case failed: sign(-5)\"\nassert sign(0) == 0, \"test case failed: sign(0)\"\nassert sign(3.14) == 1, \"test case failed: sign(3.14)\"\nassert sign(-2.71) == -1, \"test case failed: sign(-2.71)\"\nassert sign(1e-12) == 1, \"test case failed: sign(1e-12)\"\nassert sign(-1e-8) == -1, \"test case failed: sign(-1e-8)\"\nassert sign(-0.0) == 0, \"test case failed: sign(-0.0)\"\nassert sign(999999999) == 1, \"test case failed: sign(999999999)\"\nassert sign(-999999999) == -1, \"test case failed: sign(-999999999)\""}
{"task_id": 366, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    n = X.shape[0]\n    squared_norms = np.sum(X ** 2, axis=1)\n    dot_products = np.dot(X, X.T)\n    D = squared_norms.reshape(-1, 1) + squared_norms - 2 * dot_products\n    np.fill_diagonal(D, 0.0)\n    D = np.maximum(D, 0.0)\n    return D.tolist()\nassert l2_distance(np.array([[0, 0], [1, 0], [1, 1]])) == [[0.0, 1.0, 2.0], [1.0, 0.0, 1.0], [2.0, 1.0, 0.0]], \"failed on basic 2-D example\"\nassert l2_distance(np.array([[2, 3]])) == [[0.0]], \"failed on single sample\"\nassert l2_distance(np.array([[1, 1], [1, 1]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed on identical samples\"\nassert l2_distance(np.array([[0, 0], [1, 0], [1, 1], [0, 1]])) == [[0.0, 1.0, 2.0, 1.0], [1.0, 0.0, 1.0, 2.0], [2.0, 1.0, 0.0, 1.0], [1.0, 2.0, 1.0, 0.0]], \"failed on square\"\nassert l2_distance(np.array([[0, 1, 2], [3, 4, 5]])) == [[0.0, 27.0], [27.0, 0.0]], \"failed on 3-D points\"\nassert l2_distance(np.array([[-1, -1], [1, 1]])) == [[0.0, 8.0], [8.0, 0.0]], \"failed on negative coordinates\"\nassert l2_distance(np.array([[0.5, 0.5], [0.5, 0.5]])) == [[0.0, 0.0], [0.0, 0.0]], \"failed on duplicate float rows\"\nassert l2_distance(np.array([[2, 0], [0, 2], [2, 0]])) == [[0.0, 8.0, 0.0], [8.0, 0.0, 8.0], [0.0, 8.0, 0.0]], \"failed on partial duplicates\"\nassert l2_distance(np.array([[0], [3], [6]])) == [[0.0, 9.0, 36.0], [9.0, 0.0, 9.0], [36.0, 9.0, 0.0]], \"failed on 1-D samples\"\nD_tmp = np.array(l2_distance(np.random.default_rng(123).normal(size=(4, 3)))); assert np.allclose(D_tmp, D_tmp.T) and np.allclose(np.diag(D_tmp), np.zeros(4)), \"failed on random symmetry/diagonal\""}
{"task_id": 367, "completion_id": 0, "passed": false, "result": "failed: Unknown kernel type: poly", "solution": "import re\nimport re\nfrom typing import Any, Dict, Optional\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get('hyperparameters', {})\n        self.params.update({k: v for (k, v) in hp.items() if k != 'id'})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {'hyperparameters': {'id': self.__class__.__name__, **self.params}}\nclass LinearKernel(KernelBase):\n\n    def __init__(self):\n        super().__init__()\nclass PolynomialKernel(KernelBase):\n\n    def __init__(self, degree: int=3, coef0: float=1.0):\n        super().__init__(degree=degree, coef0=coef0)\nclass RBFKernel(KernelBase):\n\n    def __init__(self, gamma: float=1.0):\n        super().__init__(gamma=gamma)\ndef initialize_kernel(param: Optional[Any]=None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    elif isinstance(param, KernelBase):\n        return param\n    elif isinstance(param, dict):\n        hyperparams = param.get('hyperparameters')\n        if hyperparams is None:\n            raise ValueError(\"Missing 'hyperparameters' key in dictionary.\")\n        kernel_type = hyperparams.get('id')\n        if kernel_type not in ['LinearKernel', 'PolynomialKernel', 'RBFKernel']:\n            raise NotImplementedError(f'Unsupported kernel type: {kernel_type}')\n        params = hyperparams.copy()\n        del params['id']\n        if kernel_type == 'LinearKernel':\n            return LinearKernel(**params)\n        elif kernel_type == 'PolynomialKernel':\n            return PolynomialKernel(**params)\n        elif kernel_type == 'RBFKernel':\n            return RBFKernel(**params)\n        else:\n            raise NotImplementedError(f'Unsupported kernel type: {kernel_type}')\n    elif isinstance(param, str):\n        match = re.match('^([a-zA-Z]+)\\\\((.*)\\\\)$', param)\n        if not match:\n            if param.lower() == 'linear':\n                return LinearKernel()\n            elif param.lower() == 'rbf':\n                return RBFKernel()\n            elif param.lower() == 'polynomial':\n                return PolynomialKernel()\n            else:\n                raise NotImplementedError(f'Unknown kernel type: {param}')\n        kernel_type = match.group(1).lower()\n        args_str = match.group(2)\n        args = {}\n        if args_str:\n            for arg_str in args_str.split(','):\n                arg_str = arg_str.strip()\n                if '=' in arg_str:\n                    (key, value) = arg_str.split('=', 1)\n                    key = key.strip()\n                    value = value.strip()\n                    if value.lower() == 'true':\n                        args[key] = True\n                    elif value.lower() == 'false':\n                        args[key] = False\n                    else:\n                        try:\n                            args[key] = float(value)\n                        except ValueError:\n                            args[key] = value\n        if kernel_type == 'linear':\n            return LinearKernel(**args)\n        elif kernel_type == 'rbf':\n            return RBFKernel(**args)\n        elif kernel_type == 'polynomial':\n            return PolynomialKernel(**args)\n        else:\n            raise NotImplementedError(f'Unknown kernel type: {kernel_type}')\n    else:\n        raise TypeError(f'Unsupported parameter type: {type(param)}')\nassert isinstance(initialize_kernel(), LinearKernel), \"Test failed: None should give LinearKernel\"\nlin = LinearKernel(); assert initialize_kernel(lin) is lin, \"Test failed: Existing instance should be returned unchanged\"\nassert isinstance(initialize_kernel(\"linear\"), LinearKernel), \"Test failed: 'linear' string\"\nrbf = initialize_kernel(\"RBF(gamma=0.5)\"); assert isinstance(rbf, RBFKernel) and abs(rbf.params[\"gamma\"] - 0.5) < 1e-12, \"Test failed: RBF with gamma\"\npoly = initialize_kernel(\"Polynomial(degree=4, coef0=2)\"); assert isinstance(poly, PolynomialKernel) and poly.params == {\"degree\": 4, \"coef0\": 2}, \"Test failed: Polynomial with kwargs\"\nd1 = {\"hyperparameters\": {\"id\": \"LinearKernel\"}}; assert isinstance(initialize_kernel(d1), LinearKernel), \"Test failed: dict \u2192 LinearKernel\"\nd2 = {\"hyperparameters\": {\"id\": \"PolynomialKernel\", \"degree\": 5}}; poly2 = initialize_kernel(d2); assert isinstance(poly2, PolynomialKernel) and poly2.params[\"degree\"] == 5, \"Test failed: dict \u2192 PolynomialKernel\"\nd3 = {\"hyperparameters\": {\"id\": \"RBFKernel\", \"gamma\": 2.5}}; rbf2 = initialize_kernel(d3); assert isinstance(rbf2, RBFKernel) and rbf2.params[\"gamma\"] == 2.5, \"Test failed: dict \u2192 RBFKernel\"\nassert isinstance(initialize_kernel(\"rbf\"), RBFKernel), \"Test failed: 'rbf' string\"\nassert isinstance(initialize_kernel(\"poly\"), PolynomialKernel), \"Test failed: 'poly' shorthand\""}
{"task_id": 368, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or -1 when\n               input validation fails.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    if p <= 0:\n        return -1\n    differences = np.abs(x - y)\n    sum_powers = np.sum(differences ** p)\n    distance = sum_powers ** (1 / p)\n    return round(distance, 4)\nassert minkowski([1,2,3],[4,0,3],1)==5.0,\"failed: ([1,2,3],[4,0,3],1)\"\nassert minkowski([0,0,0],[0,0,0],2)==0.0,\"failed: (zero vectors)\"\nassert minkowski([5],[2],3)==3.0,\"failed: ([5],[2],3)\"\nassert minkowski([1,2,3],[1,2],2)==-1,\"failed: shape mismatch\"\nassert minkowski([1,2],[3,4],0)==-1,\"failed: p<=0\"\nassert minkowski([-1,-2,-3],[1,2,3],1)==12.0,\"failed: negatives, p=1\""}
{"task_id": 369, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if regression:\n        running_pred = np.zeros(len(updates[0]))\n    else:\n        running_pred = np.zeros((len(updates[0]), len(updates[0][0])))\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        prob = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(prob, axis=1)\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 370, "completion_id": 0, "passed": false, "result": "failed: Covariance matrix must be positive definite.", "solution": "import numpy as np\nimport numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"\n    Compute the multivariate Gaussian (normal) probability density function for each sample in X.\n    \n    Parameters:\n    - X: 2D NumPy array of shape (m, n), where each row is an n-dimensional sample.\n    - mu: 1D NumPy array of length n, the mean of the distribution.\n    - cov: 2D NumPy array of shape (n, n), the covariance matrix of the distribution.\n    \n    Returns:\n    - A list of floats, where each float is the density value of the corresponding sample in X,\n      rounded to 4 decimal places.\n    \"\"\"\n    if not np.allclose(np.linalg.eigvals(cov), np.zeros_like(np.linalg.eigvals(cov)), atol=1e-06):\n        raise ValueError('Covariance matrix must be positive definite.')\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.sqrt(np.linalg.det(cov))\n    diff = X - mu\n    exponent = -0.5 * np.einsum('ij,ji->i', diff @ inv_cov, diff)\n    normalization = 1.0 / ((2 * np.pi) ** (len(mu) / 2) * det_cov)\n    densities = normalization * np.exp(exponent)\n    return [round(d, 4) for d in densities]\nassert multivariate_gaussian(np.array([[0.]]), np.array([0.]), np.array([[1.]])) == [0.3989], \"Case 1 failed: 1-D, \u03bc=0, \u03c3\u00b2=1, x=0\"\nassert multivariate_gaussian(np.array([[1.]]), np.array([0.]), np.array([[1.]])) == [0.242], \"Case 2 failed: 1-D, \u03bc=0, \u03c3\u00b2=1, x=1\"\nassert multivariate_gaussian(np.array([[2.]]), np.array([2.]), np.array([[4.]])) == [0.1995], \"Case 3 failed: 1-D, \u03bc=2, \u03c3\u00b2=4, x=2\"\nassert multivariate_gaussian(np.array([[1,2],[3,4]]), np.array([2,3]), np.eye(2)) == [0.0585,0.0585], \"Case 4 failed: 2-D identity \u03a3, two samples\"\nassert multivariate_gaussian(np.array([[2,3]]), np.array([2,3]), np.eye(2)) == [0.1592], \"Case 5 failed: 2-D, centred sample\"\nassert multivariate_gaussian(np.array([[0,0]]), np.array([0,0]), np.array([[2,0],[0,2]])) == [0.0796], \"Case 6 failed: 2-D, \u03a3=diag(2,2)\"\nassert multivariate_gaussian(np.array([[1,2]]), np.array([1,1]), np.array([[2,0],[0,1]])) == [0.0683], \"Case 7 failed: 2-D, mixed variances sample A\"\nassert multivariate_gaussian(np.array([[2,1]]), np.array([1,1]), np.array([[2,0],[0,1]])) == [0.0876], \"Case 8 failed: 2-D, mixed variances sample B\"\nassert multivariate_gaussian(np.array([[0,0,0]]), np.array([0,0,0]), np.eye(3)) == [0.0635], \"Case 9 failed: 3-D, origin\""}
{"task_id": 371, "completion_id": 0, "passed": false, "result": "failed: slice step cannot be zero", "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if pad == 'same':\n        out_len = (signal_length + dilation * (kernel_width - 1) + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + (kernel_width - 1) * dilation - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(\"pad must be an integer, a 2-tuple, or the string 'same'\")\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = (signal_length + dilation * (kernel_width - 1) + p_left + p_right - 1) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for b in range(n_examples):\n        for oc in range(out_channels):\n            for ic in range(in_channels):\n                kernel = W[:, ic, oc]\n                for i in range(output_length):\n                    start = i * stride\n                    end = start + kernel_width\n                    kernel_indices = np.arange(0, kernel_width) * dilation\n                    input_slice = X_padded[b, start:start + kernel_width:dilation, ic]\n                    output[b, i, oc] += np.dot(kernel, input_slice)\n    return output.tolist()\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, \"same\", 0) == [[[-2.0],[-2.0],[-2.0],[-2.0],[4.0]]], \"failed on same-pad basic example\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, 0) == [[[-2.0],[-2.0],[-2.0]]], \"failed on zero-pad example\"\nassert conv1D(np.array([[[1],[2],[1],[2],[1],[2]]]), np.array([[[1]],[[1]]]), 2, 0) == [[[3.0],[3.0],[3.0]]], \"failed on stride 2\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[1]]]), 1, 0, 1) == [[[4.0],[6.0],[8.0]]], \"failed on dilation 1\"\nassert conv1D(np.array([[[1,2],[3,4],[5,6],[7,8]]]),\n              np.array([[[1,0,1],[1,0,0]],[[1,0,0],[1,0,1]]]), 1, 0) == [[[10,0,5],[18,0,9],[26,0,13]]], \"failed on multi-channel\"\nassert conv1D(np.array([[[1],[2],[3],[4]]]), np.array([[[1]],[[1]],[[1]]]), 2, \"same\") == [[[6.0],[7.0]]], \"failed on same-pad + stride 2\"\nassert conv1D(np.array([[[1],[2]]]), np.array([[[1]],[[1]]]), 1, 1) == [[[1.0],[3.0],[2.0]]], \"failed on symmetric integer pad\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5],[6],[7]]]), np.array([[[1]],[[1]],[[1]]]), 1, 0, 2) == [[[12.0]]], \"failed on dilation 2\"\nassert conv1D(np.array([[[1],[2],[3]],[[4],[5],[6]]]), np.array([[[1]],[[1]]]), 1, 0) == [[[3.0],[5.0]],[[9.0],[11.0]]], \"failed on batch processing\"\nassert conv1D(np.array([[[1],[2],[3]]]), np.array([[[2]]]), 1, (2,1)) == [[[0.0],[0.0],[2.0],[4.0],[6.0],[0.0]]], \"failed on asymmetric tuple pad\""}
{"task_id": 373, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to the nearest 4th decimal place. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    classes = np.unique(y)\n    N = len(y)\n    p_c = np.array([np.sum(y == c) / N for c in classes])\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    weights_list = [theta.tolist()]\n    for _ in range(n_iterations):\n        y_hat = X @ theta + b\n        dw = 2 / m * X.T @ (y_hat - y)\n        db = 2 / m * np.sum(y_hat - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n        weights_list.append(theta.tolist())\n    rounded_weights = [round(w, 4) for w in theta]\n    rounded_bias = round(b, 4)\n    return (rounded_weights, rounded_bias)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 375, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calc_pad_dims_2D(X_shape: tuple, out_dim: tuple, kernel_shape: tuple, stride: int, dilation: int=0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    (_, in_rows, in_cols, _) = X_shape\n    (out_rows, out_cols) = out_dim\n    (fr, fc) = kernel_shape\n    effective_fr = fr * (dilation + 1) - dilation\n    effective_fc = fc * (dilation + 1) - dilation\n\n    def calc_padding(input_size, output_size, filter_size, stride):\n        required_padding = (output_size - 1) * stride + filter_size - input_size\n        if required_padding < 0:\n            raise ValueError('Requested output size is impossible with given parameters.')\n        top_pad = required_padding // 2\n        bottom_pad = required_padding - top_pad\n        return (top_pad, bottom_pad)\n    try:\n        (up_pad, down_pad) = calc_padding(in_rows, out_rows, effective_fr, stride)\n        (left_pad, right_pad) = calc_padding(in_cols, out_cols, effective_fc, stride)\n    except ValueError as e:\n        raise ValueError('Requested output size is impossible with given parameters.') from e\n    return (up_pad, down_pad, left_pad, right_pad)\nassert calc_pad_dims_2D((1, 28, 28, 1), (28, 28), (3, 3), 1) == (1, 1, 1, 1), \"failed: same 3\u00d73 stride-1 on 28\u00d728\"\nassert calc_pad_dims_2D((1, 32, 32, 3), (16, 16), (3, 3), 2) == (0, 1, 0, 1), \"failed: 3\u00d73 stride-2 on 32\u00d732\"\nassert calc_pad_dims_2D((1, 64, 64, 1), (64, 64), (5, 3), 1) == (2, 2, 1, 1), \"failed: non-square kernel same padding\"\nassert calc_pad_dims_2D((1, 28, 28, 1), (28, 28), (3, 3), 1, 1) == (2, 2, 2, 2), \"failed: dilated convolution same padding\"\nassert calc_pad_dims_2D((1, 31, 31, 1), (11, 11), (3, 3), 3) == (1, 1, 1, 1), \"failed: stride-3 upsample target\"\nassert calc_pad_dims_2D((1, 100, 100, 1), (45, 45), (5, 5), 2, 2) == (0, 1, 0, 1), \"failed: large dilation and stride\"\nassert calc_pad_dims_2D((1, 28, 28, 1), (26, 26), (3, 3), 1) == (0, 0, 0, 0), \"failed: valid convolution (no padding)\"\nassert calc_pad_dims_2D((1, 50, 30, 1), (25, 15), (4, 6), 2) == (1, 1, 2, 2), \"failed: rectangular input and kernel\"\nassert calc_pad_dims_2D((1, 10, 10, 3), (10, 10), (1, 1), 1) == (0, 0, 0, 0), \"failed: 1\u00d71 kernel should never pad\"\nassert calc_pad_dims_2D((1, 33, 33, 3), (17, 17), (3, 3), 2) == (1, 1, 1, 1), \"failed: stride-2 odd input size\""}
{"task_id": 376, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    X_transposed = X_np.T\n    return np.allclose(X_np, X_transposed, atol=1e-08)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 377, "completion_id": 0, "passed": false, "result": "failed: failed: invalid label", "solution": "import numpy as np\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n    \n    Returns:\n    list: List of negative gradients g rounded to four decimal places.\n    \"\"\"\n    if not all((label in {0, 1} for label in y)):\n        return [-1] * len(y)\n    y_prime = [2 * label - 1 for label in y]\n    g = []\n    for (yi, fi) in zip(y_prime, f):\n        denominator = 1 + np.exp(yi * fi)\n        gi = yi / denominator\n        g.append(round(gi, 4))\n    return g\nassert logistic_negative_gradient([0,1,0],[0.0,0.5,-0.5])==[-0.5,0.3775,-0.3775],\"failed: basic example\"\nassert logistic_negative_gradient([1,1,1],[0,0,0])==[0.5,0.5,0.5],\"failed: all ones zero score\"\nassert logistic_negative_gradient([0,0,0],[0,0,0])==[-0.5,-0.5,-0.5],\"failed: all zeros zero score\"\nassert logistic_negative_gradient([1,0],[2,-2])==[0.1192,-0.1192],\"failed: symmetric scores\"\nassert logistic_negative_gradient([1],[10])==[0.0],\"failed: large positive score\"\nassert logistic_negative_gradient([0],[-10])==[-0.0],\"failed: large negative score\"\nassert logistic_negative_gradient([],[])==[],\"failed: empty input\"\nassert logistic_negative_gradient([0,2],[0,0])==-1,\"failed: invalid label\"\nassert logistic_negative_gradient([0,1,0],[0.1])==-1,\"failed: mismatched lengths\""}
{"task_id": 378, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0\nassert indicator(1) == 1, \"test case failed: indicator(1)\"\nassert indicator(0) == 0, \"test case failed: indicator(0)\"\nassert indicator(-1) == 0, \"test case failed: indicator(-1)\"\nassert indicator(2) == 0, \"test case failed: indicator(2)\"\nassert indicator(999) == 0, \"test case failed: indicator(999)\"\nassert indicator(-999) == 0, \"test case failed: indicator(-999)\"\nassert indicator(int(False)) == 0, \"test case failed: indicator(int(False))\"\nassert indicator(1+0) == 1, \"test case failed: indicator(1+0)\"\nassert indicator(1*1) == 1, \"test case failed: indicator(1*1)\""}
{"task_id": 379, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    if not nodes:\n        return []\n    sorted_nodes = sorted(nodes, key=lambda x: (x['priority'], x['entry_id']))\n    return [node['key'] for node in sorted_nodes]\n# Test Case 1: Example from the description\nassert sort_priority_nodes([\n    {\"key\": \"A\", \"val\": 10, \"priority\": 3, \"entry_id\": 2},\n    {\"key\": \"B\", \"val\": 20, \"priority\": 2, \"entry_id\": 1},\n    {\"key\": \"C\", \"val\": 30, \"priority\": 3, \"entry_id\": 1}\n]) == ['B', 'C', 'A'], \"failed on example input\"\n# Test Case 2: already ordered input\nassert sort_priority_nodes([\n    {\"key\": \"X\", \"val\": 1, \"priority\": 1, \"entry_id\": 1},\n    {\"key\": \"Y\", \"val\": 2, \"priority\": 2, \"entry_id\": 2},\n    {\"key\": \"Z\", \"val\": 3, \"priority\": 3, \"entry_id\": 3}\n]) == ['X', 'Y', 'Z'], \"failed on already ordered input\"\n# Test Case 3: reverse ordered input\nassert sort_priority_nodes([\n    {\"key\": \"Z\", \"val\": 3, \"priority\": 3, \"entry_id\": 3},\n    {\"key\": \"Y\", \"val\": 2, \"priority\": 2, \"entry_id\": 2},\n    {\"key\": \"X\", \"val\": 1, \"priority\": 1, \"entry_id\": 1}\n]) == ['X', 'Y', 'Z'], \"failed on reverse ordered input\"\n# Test Case 4: duplicate priorities, different entry_ids\nassert sort_priority_nodes([\n    {\"key\": \"A\", \"val\": 0, \"priority\": 5, \"entry_id\": 2},\n    {\"key\": \"B\", \"val\": 0, \"priority\": 5, \"entry_id\": 1},\n    {\"key\": \"C\", \"val\": 0, \"priority\": 5, \"entry_id\": 3}\n]) == ['B', 'A', 'C'], \"failed on identical priorities\"\n# Test Case 5: single element list\nassert sort_priority_nodes([\n    {\"key\": \"only\", \"val\": 42, \"priority\": 7, \"entry_id\": 0}\n]) == ['only'], \"failed on single element\"\n# Test Case 6: empty input\nassert sort_priority_nodes([]) == [], \"failed on empty input\"\n# Test Case 7: negative priorities\nassert sort_priority_nodes([\n    {\"key\": \"neg\", \"val\": -1, \"priority\": -10, \"entry_id\": 5},\n    {\"key\": \"zero\", \"val\": 0, \"priority\": 0, \"entry_id\": 1}\n]) == ['neg', 'zero'], \"failed on negative priorities\"\n# Test Case 8: priorities with floats\nassert sort_priority_nodes([\n    {\"key\": \"low\", \"val\": 1, \"priority\": 1.5, \"entry_id\": 1},\n    {\"key\": \"high\", \"val\": 2, \"priority\": 0.5, \"entry_id\": 2}\n]) == ['high', 'low'], \"failed on float priorities\"\n# Test Case 9: mixed identical priorities and entry_ids (order stable for equal tuples)\nassert sort_priority_nodes([\n    {\"key\": \"first\", \"val\": 0, \"priority\": 4, \"entry_id\": 4},\n    {\"key\": \"second\", \"val\": 0, \"priority\": 4, \"entry_id\": 4}\n]) == ['first', 'second'], \"failed on identical priority and entry_id\"\n# Test Case 10: non-consecutive entry_ids\nassert sort_priority_nodes([\n    {\"key\": \"k1\", \"val\": 0, \"priority\": 2, \"entry_id\": 10},\n    {\"key\": \"k2\", \"val\": 0, \"priority\": 2, \"entry_id\": 3},\n    {\"key\": \"k3\", \"val\": 0, \"priority\": 1, \"entry_id\": 7}\n]) == ['k3', 'k2', 'k1'], \"failed on non-consecutive entry_ids\""}
{"task_id": 380, "completion_id": 0, "passed": false, "result": "failed: test failed: selu([-1,0,1],1)", "solution": "import numpy as np\nimport numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n\n    def elu(z):\n        return np.where(z > 0, z, alpha * (np.exp(z) - 1))\n\n    def selu_func(z):\n        return scale * elu(z)\n\n    def selu_first_derivative(z):\n        return scale * np.where(z > 0, 1, alpha * np.exp(z))\n\n    def selu_second_derivative(z):\n        return scale * np.where(z > 0, 0, alpha * np.exp(z))\n    if order == 0:\n        result = selu_func(x)\n    elif order == 1:\n        result = selu_first_derivative(x)\n    elif order == 2:\n        result = selu_second_derivative(x)\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    return result.round(4).tolist()\nassert selu([-1, 0, 1], 0) == [-1.1113, 0.0, 1.0507], \"test failed: selu([-1,0,1],0)\"\nassert selu([2], 0) == [2.1014], \"test failed: selu([2],0)\"\nassert selu(0, 0) == 0.0, \"test failed: selu(0,0)\"\nassert selu([[1, 0], [-1, 2]], 0) == [[1.0507, 0.0], [-1.1113, 2.1014]], \"test failed: selu([[1,0],[-1,2]],0)\"\nassert selu([-1, 0, 1], 1) == [0.6468, 1.0507, 1.0507], \"test failed: selu([-1,0,1],1)\"\nassert selu([2.5], 1) == [1.0507], \"test failed: selu([2.5],1)\"\nassert selu(0, 1) == 1.0507, \"test failed: selu(0,1)\"\nassert selu([-1, 1], 2) == [0.6468, 0.0], \"test failed: selu([-1,1],2)\"\nassert selu([0], 2) == [1.7581], \"test failed: selu([0],2)\"\nassert selu(2, 2) == 0.0, \"test failed: selu(2,2)\""}
{"task_id": 382, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef gaussian_naive_bayes_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_classes = np.unique(y_train).shape[0]\n    n_features = X_train.shape[1]\n    class_counts = np.bincount(y_train)\n    priors = class_counts / class_counts.sum()\n    means = {}\n    variances = {}\n    for c in np.unique(y_train):\n        mask = y_train == c\n        class_data = X_train[mask]\n        means[c] = np.mean(class_data, axis=0)\n        variances[c] = np.var(class_data, axis=0)\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for c in np.unique(y_train):\n            mu = means[c]\n            sigma_sq = variances[c]\n            eps = 0.0001\n            log_likelihood = 0.0\n            for i in range(n_features):\n                x_i = x[i]\n                numerator = (x_i - mu[i]) ** 2\n                denominator = 2 * sigma_sq[i] + eps\n                exp_term = np.exp(-numerator / denominator)\n                log_likelihood += math.log(1 / np.sqrt(2 * np.pi * sigma_sq[i] + eps)) + np.log(exp_term)\n            log_posterior = log_likelihood + np.log(priors[c])\n            posteriors.append(log_posterior)\n        predicted_class = np.argmax(posteriors)\n        predictions.append(np.unique(y_train)[predicted_class])\n    return predictions\nassert gaussian_naive_bayes_predict(np.array([[1],[2],[10],[12]]), np.array([0,0,1,1]), np.array([[1.5],[11]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,1],[1.1,0.9],[5,5],[5.1,5.2]]), np.array([0,0,1,1]), np.array([[1,0.8],[5.2,5.1]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes_predict(np.array([[0,0],[0,1],[1,0],[5,5],[5,6],[6,5],[9,9],[9.5,9],[8.5,9.2]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[0.2,0.2],[5.5,5.5],[9,8.8]])) == [0,1,2], \"test case 3 failed\"\nassert gaussian_naive_bayes_predict(np.array([[0],[5]]), np.array([0,1]), np.array([[0.1],[4.9]])) == [0,1], \"test case 4 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,1,1],[1.1,1,1.2],[4,4,4],[4.1,4.2,4]]), np.array([0,0,1,1]), np.array([[1,1.2,0.9],[4,3.9,4.1]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes_predict(np.array([[-5],[-4],[-3],[0],[0.5],[1],[5],[5.5],[6]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[-4.5],[0.2],[5.2]])) == [0,1,2], \"test case 6 failed\"\nassert gaussian_naive_bayes_predict(np.array([[2,3],[2,3],[8,9],[8,9]]), np.array([0,0,1,1]), np.array([[2.1,3.1],[8.2,9.1]])) == [0,1], \"test case 7 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1,8],[2,9],[8,1],[9,2]]), np.array([0,0,1,1]), np.array([[1.5,8.5],[8.5,1.5]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes_predict(np.array([[1],[2],[3],[7],[8],[9]]), np.array([0,0,0,1,1,1]), np.array([[2],[8]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes_predict(np.array([[-10],[-9],[-11],[10],[11],[12]]), np.array([0,0,0,1,1,1]), np.array([[-10.5],[11.5]])) == [0,1], \"test case 10 failed\""}
{"task_id": 383, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]\nassert find_bounds(1, -1, 0.3, 0.4, 1.0) == [0.1, 1.0], \"failed: (1,-1,0.3,0.4,1)\"\nassert find_bounds(1, 1, 0.2, 0.5, 1.0) == [0.0, 0.7], \"failed: (1,1,0.2,0.5,1)\"\nassert find_bounds(1, 1, 0.8, 0.5, 1.0) == [0.3, 1.0], \"failed: (1,1,0.8,0.5,1)\"\nassert find_bounds(-1, 1, 0.1, 0.3, 1.0) == [0.2, 1.0], \"failed: (-1,1,0.1,0.3,1)\"\nassert find_bounds(-1, -1, 0.0, 0.0, 1.0) == [0.0, 0.0], \"failed: (-1,-1,0,0,1)\"\nassert find_bounds(-1, 1, 0.6, 0.2, 1.0) == [0.0, 0.6], \"failed: (-1,1,0.6,0.2,1)\"\nassert find_bounds(1, 1, 0.0, 0.0, 1.0) == [0.0, 0.0], \"failed: (1,1,0,0,1)\"\nassert find_bounds(1, -1, 0.9, 0.1, 1.0) == [0.0, 0.2], \"failed: (1,-1,0.9,0.1,1)\"\nassert find_bounds(-1, -1, 0.4, 0.9, 1.0) == [0.3, 1.0], \"failed: (-1,-1,0.4,0.9,1)\""}
{"task_id": 384, "completion_id": 0, "passed": false, "result": "failed: failed: k=1, 2x2 Laplacian", "solution": "import numpy as np\nimport numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    L_np = np.array(L, dtype=np.float64)\n    n = L_np.shape[0]\n    if k > n:\n        return -1\n    (eigen_values, eigen_vectors) = np.linalg.eigh(L_np)\n    sorted_indices = np.argsort(eigen_values)\n    sorted_eigen_values = eigen_values[sorted_indices]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    selected_eigen_vectors = sorted_eigen_vectors[:, :k]\n    for i in range(k):\n        norm = np.linalg.norm(selected_eigen_vectors[:, i])\n        if norm == 0:\n            continue\n        selected_eigen_vectors[:, i] /= norm\n    for i in range(k):\n        first_non_zero_index = None\n        for j in range(n):\n            if selected_eigen_vectors[j, i] != 0:\n                first_non_zero_index = j\n                break\n        if first_non_zero_index is not None:\n            if selected_eigen_vectors[first_non_zero_index, i] < 0:\n                selected_eigen_vectors[first_non_zero_index, i] *= -1\n    result = np.round(selected_eigen_vectors, 4).tolist()\n    return [[entry] for entry in zip(*result)]\nassert get_eigvecs(np.array([[1, -1], [-1, 1]]), 1) == [[0.7071], [0.7071]], \"failed: k=1, 2x2 Laplacian\"\nassert get_eigvecs(np.diag([0, 2, 3]), 1) == [[1.0], [0.0], [0.0]], \"failed: diag 3x3, k=1\"\nassert get_eigvecs(np.diag([0, 2, 3]), 2) == [[1.0, 0.0], [0.0, 1.0], [0.0, 0.0]], \"failed: diag 3x3, k=2\"\nassert get_eigvecs(np.diag([4, 1, 3, 2]), 3) == [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]], \"failed: diag 4x4, k=3\"\nassert get_eigvecs(np.diag([0, 1]), 3) == -1, \"failed: k larger than dimension should return -1\"\nassert get_eigvecs(np.array([[0]]), 1) == [[1.0]], \"failed: 1x1 matrix\"\nassert get_eigvecs(np.diag([7, 6, 5, 4]), 1) == [[0.0], [0.0], [0.0], [1.0]], \"failed: diag 4x4 descending, k=1\"\nassert get_eigvecs(np.diag([1, 1, 2]), 2) == [[1.0, 0.0], [0.0, 1.0], [0.0, 0.0]], \"failed: repeated eigenvalues\"\nassert get_eigvecs(np.diag([5, 4, 3, 2, 1]), 5) == [[0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0]], \"failed: diag 5x5 full set\"\nassert get_eigvecs(np.array([[2, -1, -1], [-1, 2, -1], [-1, -1, 2]]), 1) == [[0.5774], [0.5774], [0.5774]], \"failed: complete graph Laplacian 3x3, k=1\""}
{"task_id": 385, "completion_id": 0, "passed": false, "result": "failed: test case failed: simple 2-class (1)", "solution": "import numpy as np\nimport numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Perform Linear Discriminant Analysis (LDA) for dimensionality reduction.\n    \n    Args:\n        X: A 2D list of shape (n_samples, n_features)\n        y: A 1D list of class labels for each sample\n        k: Number of discriminant components to project onto\n        \n    Returns:\n        A 2D list of shape (n_samples, k) with the projected data\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    if n_classes == 1:\n        return [[0.0 for _ in range(k)] for _ in range(n_samples)]\n    class_means = np.array([X[y == cls].mean(axis=0) for cls in np.unique(y)])\n    n_classes = class_means.shape[0]\n    S_w = np.zeros((n_features, n_features))\n    for cls in np.unique(y):\n        class_data = X[y == cls]\n        class_mean = class_means[cls]\n        S_w += np.dot(class_data - class_mean, (class_data - class_mean).T)\n    overall_mean = X.mean(axis=0)\n    S_b = np.zeros((n_features, n_features))\n    for cls in np.unique(y):\n        class_mean = class_means[cls]\n        n_class = np.sum(y == cls)\n        S_b += n_class * np.dot(class_mean - overall_mean, (class_mean - overall_mean).T)\n    S_w_pinv = np.linalg.pinv(S_w)\n    (eigenvalues, eigenvectors) = np.linalg.eig(np.dot(S_w_pinv, S_b))\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    k = min(k, n_classes - 1)\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projection_matrix = projection_matrix / np.sqrt(np.sum(projection_matrix ** 2, axis=0))\n    for i in range(k):\n        if projection_matrix[0, i] < 0:\n            projection_matrix[:, i] *= -1\n    projected_data = np.dot(X, projection_matrix)\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n    return projected_data_rounded\nassert lda_transform([[1, 0], [2, 0], [5, 0], [6, 0]], [0, 0, 1, 1], 1) == [[1.0], [2.0], [5.0], [6.0]], \"test case failed: simple 2-class (1)\"\nassert lda_transform([[-3, 0], [-2, 0], [7, 0], [8, 0]], [0, 0, 1, 1], 1) == [[-3.0], [-2.0], [7.0], [8.0]], \"test case failed: simple 2-class (2)\"\nassert lda_transform([[10, 1], [12, 1], [20, 1], [22, 1]], [0, 0, 1, 1], 1) == [[10.0], [12.0], [20.0], [22.0]], \"test case failed: constant second feature\"\nassert lda_transform([[0, 3], [1, 3], [10, 3], [11, 3]], [0, 0, 1, 1], 1) == [[0.0], [1.0], [10.0], [11.0]], \"test case failed: shifted constant feature\"\nassert lda_transform([[-5, 2], [-4, 2], [4, 2], [5, 2]], [0, 0, 1, 1], 1) == [[-5.0], [-4.0], [4.0], [5.0]], \"test case failed: negative values\"\nassert lda_transform([[1, 7], [2, 7], [5, 7], [6, 7]], [0, 0, 1, 1], 1) == [[1.0], [2.0], [5.0], [6.0]], \"test case failed: constant high second feature\"\nassert lda_transform([[-8, -3], [-7, -3], [2, -3], [3, -3]], [0, 0, 1, 1], 1) == [[-8.0], [-7.0], [2.0], [3.0]], \"test case failed: negative constant second feature\"\nassert lda_transform([[1, 0], [2, 0], [3, 0], [8, 0], [9, 0], [10, 0]], [0, 0, 0, 1, 1, 1], 1) == [[1.0], [2.0], [3.0], [8.0], [9.0], [10.0]], \"test case failed: 3-vs-3 samples\"\nassert lda_transform([[1, 0], [2, 0], [4, 0], [8, 0], [10, 0], [12, 0]], [0, 0, 1, 1, 2, 2], 1) == [[1.0], [2.0], [4.0], [8.0], [10.0], [12.0]], \"test case failed: 3 classes k=1\"\nassert lda_transform([[0, 0], [1, 0], [2, 0], [9, 0], [10, 0], [11, 0], [20, 0], [21, 0]], [0, 0, 0, 1, 1, 1, 2, 2], 1) == [[0.0], [1.0], [2.0], [9.0], [10.0], [11.0], [20.0], [21.0]], \"test case failed: 8 samples 3 classes\""}
{"task_id": 386, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    bce = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    return round(bce, 4)\nassert binary_crossentropy(np.array([1, 0, 1]), np.array([0.9, 0.2, 0.7])) == 0.2284, \"Failed on mixed probabilities.\"\nassert binary_crossentropy(np.array([0, 1]), np.array([0.0, 1.0])) == 0.0, \"Failed on perfect predictions.\"\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.5, 0.5, 0.5, 0.5])) == 0.6931, \"Failed on 0.5 predictions.\"\nassert binary_crossentropy(np.array([1]), np.array([0.1])) == 2.3026, \"Failed on single sample (positive).\"\nassert binary_crossentropy(np.array([0]), np.array([0.9])) == 2.3026, \"Failed on single sample (negative).\"\nassert binary_crossentropy(np.array([1, 1, 1]), np.array([0.99, 0.99, 0.99])) == 0.0101, \"Failed on confident positives.\"\nassert binary_crossentropy(np.array([0, 0, 0]), np.array([0.01, 0.01, 0.01])) == 0.0101, \"Failed on confident negatives.\"\nassert binary_crossentropy(np.array([1, 0]), np.array([1e-6, 0.999999])) == 13.8155, \"Failed on extreme wrong predictions.\"\nassert binary_crossentropy(np.array([1, 0, 1, 0]), np.array([0.8, 0.3, 0.4, 0.2])) == 0.4298, \"Failed on assorted probabilities.\"\nassert binary_crossentropy(np.array([1,0,1,0,1,0,1,0]), np.array([0.75,0.25,0.75,0.25,0.75,0.25,0.75,0.25])) == 0.2877, \"Failed on repeated pattern predictions.\""}
{"task_id": 387, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    sorted_indices = np.argsort(x)\n    sorted_x = x[sorted_indices]\n    sorted_y = y[sorted_indices]\n    residuals = y - y_pred\n    for _ in range(n_estimators):\n        unique_x = np.unique(sorted_x)\n        split_points = (unique_x[:-1] + unique_x[1:]) / 2\n        best_split = None\n        min_error = float('inf')\n        for t in split_points:\n            left_mask = sorted_x <= t\n            right_mask = sorted_x > t\n            left_residuals = residuals[left_mask]\n            right_residuals = residuals[right_mask]\n            mean_left = np.mean(left_residuals) if np.any(left_mask) else 0\n            mean_right = np.mean(right_residuals) if np.any(right_mask) else 0\n            error = np.sum((residuals - mean_left) * left_mask) + np.sum((residuals - mean_right) * right_mask)\n            if error < min_error:\n                min_error = error\n                best_split = t\n                best_mean_left = mean_left\n                best_mean_right = mean_right\n        if best_split is None:\n            best_mean = np.mean(residuals)\n            best_split = 0\n            best_mean_left = best_mean\n            best_mean_right = best_mean\n        mask = x <= best_split\n        y_pred[mask] += learning_rate * best_mean_left\n        y_pred[~mask] += learning_rate * best_mean_right\n        residuals = y - y_pred\n    return np.round(y_pred, 4).tolist()\nassert gradient_boosting_1d([1, 2], [2, 4], 1, 0.5) == [2.5, 3.5], \"failed on simple two-point example\"\nassert gradient_boosting_1d([1, 2, 3, 4], [5, 5, 5, 5], 3, 0.1) == [5.0, 5.0, 5.0, 5.0], \"failed on constant target\"\nassert gradient_boosting_1d([1, 2, 3], [1, 2, 3], 2, 0.5) == [1.3125, 2.0625, 2.625], \"failed on small increasing sequence\"\nassert gradient_boosting_1d([1, 2, 3], [3, 3, 3], 5, 0.2) == [3.0, 3.0, 3.0], \"failed on constant target, many rounds\"\nassert gradient_boosting_1d([1, 2, 3, 4], [2, 4, 6, 8], 2, 0.5) == [3.0, 4.3333, 6.3333, 6.3333], \"failed on linear 4-point set\"\nassert gradient_boosting_1d([1, 2, 3], [2, 2, 6], 1, 1.0) == [2.0, 2.0, 6.0], \"failed on perfect one-round fit\"\nassert gradient_boosting_1d([1, 1, 1], [1, 2, 3], 3, 0.3) == [2.0, 2.0, 2.0], \"failed when all features identical\"\nassert gradient_boosting_1d([5, 6], [10, 10], 4, 0.1) == [10.0, 10.0], \"failed on two identical targets\"\nassert gradient_boosting_1d([1, 2, 3], [10, 0, 10], 1, 0.5) == [8.3333, 5.8333, 5.8333], \"failed on uneven targets\"\nassert gradient_boosting_1d([1, 2], [0, 0], 2, 0.4) == [0.0, 0.0], \"failed on zero targets\""}
{"task_id": 389, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    W_np = np.array(W)\n    if W_np.shape[0] != W_np.shape[1]:\n        return -1\n    degrees = np.sum(W_np, axis=1)\n    D = np.diag(degrees)\n    L = D - W_np\n    return np.round(L, 4).tolist()\nassert compute_laplacian([[0,1],[1,0]]) == [[1,-1],[-1,1]], \"failed: 2-node unweighted graph\"\nassert compute_laplacian([[0,2,0],[2,0,3],[0,3,0]]) == [[2,-2,0],[-2,5,-3],[0,-3,3]], \"failed: 3-node weighted graph\"\nassert compute_laplacian([[0,0,0],[0,0,0]]) == -1, \"failed: non-square matrix should return -1\"\nassert compute_laplacian([[0]]) == [[0]], \"failed: single-node graph\"\nassert compute_laplacian([[0,0,0],[0,0,0],[0,0,0]]) == [[0,0,0],[0,0,0],[0,0,0]], \"failed: graph with no edges\"\nassert compute_laplacian([[0,1,1],[1,0,1],[1,1,0]]) == [[2,-1,-1],[-1,2,-1],[-1,-1,2]], \"failed: complete graph K3\"\nassert compute_laplacian([[0,0.5],[0.5,0]]) == [[0.5,-0.5],[-0.5,0.5]], \"failed: fractional weights\"\nassert compute_laplacian([[0,1,0,0],[1,0,1,1],[0,1,0,0],[0,1,0,0]]) == [[1,-1,0,0],[-1,3,-1,-1],[0,-1,1,0],[0,-1,0,1]], \"failed: 4-node graph\"\nassert compute_laplacian([[0,4],[4,0]]) == [[4,-4],[-4,4]], \"failed: weight 4 edge\"\nassert compute_laplacian([[0,0,0],[0,0,5],[0,5,0]]) == [[0,0,0],[0,5,-5],[0,-5,5]], \"failed: isolated node present\""}
{"task_id": 391, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    rounded_t = np.around(np.array(t)).astype(int)\n    in_length = X.shape[0]\n    clipped_t = np.clip(rounded_t, 0, in_length - 1)\n    interpolated_values = X[clipped_t, :]\n    return interpolated_values.tolist()\nassert nn_interpolate_1D(np.arange(10).reshape(10, 1), [0, 2.3, 4.8, 9.7]) == [[0], [2], [5], [9]], \"Test 1 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [1.2, 2.7, -0.6, 3.9]) == [[1, 10], [3, 30], [0, 0], [3, 30]], \"Test 2 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [0, 1, 2, 3]) == [[0, 0], [1, 10], [2, 20], [3, 30]], \"Test 3 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), []) == [], \"Test 4 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [10, 5.3]) == [[3, 30], [3, 30]], \"Test 5 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [-10, -1.2]) == [[0, 0], [0, 0]], \"Test 6 failed\"\nassert nn_interpolate_1D(np.array([[5, 4, 3]]), [2.4]) == [[5, 4, 3]], \"Test 7 failed\"\nassert nn_interpolate_1D(np.arange(5).reshape(5, 1), [0.5, 1.5]) == [[0], [2]], \"Test 8 failed\"\nbig_X = np.arange(1000).reshape(1000, 1)\nassert nn_interpolate_1D(big_X, [0, 999.4, 500.2]) == [[0], [999], [500]], \"Test 9 failed\"\nassert nn_interpolate_1D(np.array([[0, 0], [1, 10], [2, 20], [3, 30]]), [1.1, 1.9, 1.6]) == [[1, 10], [2, 20], [2, 20]], \"Test 10 failed\""}
{"task_id": 392, "completion_id": 0, "passed": false, "result": "failed: test case failed: preemphasis([1, 1, 1, 1], 0.9)", "solution": "import numpy as np\nimport numpy as np\ndef preemphasis(x: 'list[float] | np.ndarray', alpha: float) -> list[float]:\n    \"\"\"\n    Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal. A one-dimensional array-like object containing the samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval [0, 1).\n\n    Returns:\n        The filtered signal as a Python list with every element rounded to four decimal places.\n    \"\"\"\n    x = np.array(x)\n    if x.ndim > 1:\n        x = x.flatten()\n    if alpha == 0:\n        filtered = x.copy()\n    else:\n        filtered = np.zeros_like(x)\n        filtered[0] = x[0]\n        for t in range(1, len(x)):\n            filtered[t] = x[t] - alpha * x[t - 1]\n    return [round(val, 4) for val in filtered]\nassert preemphasis([1, 2, 3, 2.5], 0.97) == [1.0, 1.03, 1.06, -0.41], \"test case failed: preemphasis([1, 2, 3, 2.5], 0.97)\"\nassert preemphasis([0, 0, 0], 0.5) == [0.0, 0.0, 0.0], \"test case failed: preemphasis([0, 0, 0], 0.5)\"\nassert preemphasis([5, -5, 10, -10, 20], 0.8) == [5.0, -9.0, 14.0, -18.0, 28.0], \"test case failed: preemphasis([5, -5, 10, -10, 20], 0.8)\"\nassert preemphasis([1, 2, 3], 0.0) == [1.0, 2.0, 3.0], \"test case failed: preemphasis([1, 2, 3], 0.0)\"\nassert preemphasis([1, 1, 1, 1], 0.9) == [1.0, 0.1, 0.1, 0.1], \"test case failed: preemphasis([1, 1, 1, 1], 0.9)\"\nassert preemphasis([10], 0.5) == [10.0], \"test case failed: preemphasis([10], 0.5)\"\nassert preemphasis([-1, -2, -3, -2], 0.5) == [-1.0, -1.5, -2.0, -0.5], \"test case failed: preemphasis([-1, -2, -3, -2], 0.5)\"\nassert preemphasis([0.1, 0.2, 0.3, 0.4], 0.95) == [0.1, 0.105, 0.11, 0.115], \"test case failed: preemphasis([0.1, 0.2, 0.3, 0.4], 0.95)\"\nassert preemphasis(list(range(5)), 0.5) == [0.0, 1.0, 1.5, 2.0, 2.5], \"test case failed: preemphasis(list(range(5)), 0.5)\"\nassert preemphasis([2.5, 3.7, 4.1, 5.6, 7.8], 0.3) == [2.5, 2.95, 2.99, 4.37, 6.12], \"test case failed: preemphasis([2.5, 3.7, 4.1, 5.6, 7.8], 0.3)\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'float'", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    epsilon = 1e-08\n    denominator = np.sqrt(Eg + epsilon)\n    w_next = w - learning_rate * grad / denominator\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 395, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    beta_str = str(beta)\n    return f'**************************************************\\nBeta:\\n{beta_str}\\nProbability of sequence: {b_prob}'\nassert print_backward_result(np.array([[1, 2], [3, 4]]), 0.75) == \"**************************************************\\nBeta:\\n[[1 2]\\n [3 4]]\\nProbability of sequence: 0.75\", \"failed on integer matrix\"\nassert print_backward_result(np.array([[0.1, 0.2]]), 0.3) == \"**************************************************\\nBeta:\\n[[0.1 0.2]]\\nProbability of sequence: 0.3\", \"failed on single-row matrix\"\nassert print_backward_result(np.array([[0.5]]), 1.0) == \"**************************************************\\nBeta:\\n[[0.5]]\\nProbability of sequence: 1.0\", \"failed on 1\u00d71 matrix\"\nassert print_backward_result(np.array([[0., 0.], [0., 0.]]), 0.0) == \"**************************************************\\nBeta:\\n[[0. 0.]\\n [0. 0.]]\\nProbability of sequence: 0.0\", \"failed on zero values\"\nassert print_backward_result(np.array([[0.123456]]), 0.987654) == \"**************************************************\\nBeta:\\n[[0.123456]]\\nProbability of sequence: 0.987654\", \"failed on longer decimals\"\nassert print_backward_result(np.array([[10, 20, 30]]), 42) == \"**************************************************\\nBeta:\\n[[10 20 30]]\\nProbability of sequence: 42\", \"failed on row vector\"\nassert print_backward_result(np.array([[5], [6], [7]]), 0.001) == \"**************************************************\\nBeta:\\n[[5]\\n [6]\\n [7]]\\nProbability of sequence: 0.001\", \"failed on column vector\"\nassert print_backward_result(np.array([[1.1, 2.2], [3.3, 4.4]]), np.float64(0.55)) == \"**************************************************\\nBeta:\\n[[1.1 2.2]\\n [3.3 4.4]]\\nProbability of sequence: 0.55\", \"failed on numpy.float64 input\"\nassert print_backward_result(np.array([[0, 1], [1, 0]]), 0.999) == \"**************************************************\\nBeta:\\n[[0 1]\\n [1 0]]\\nProbability of sequence: 0.999\", \"failed on mixed values\""}
{"task_id": 396, "completion_id": 0, "passed": false, "result": "failed: test case failed: tanh_with_derivatives([0,1,-1])", "solution": "import numpy as np\nimport numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    x_np = np.array(x, dtype=np.float64)\n    tanh_x = np.tanh(x_np)\n    first_derivative = 1 - tanh_x\n    second_derivative = -2 * tanh_x * first_derivative\n    tanh_x_rounded = np.round(tanh_x, 6)\n    first_derivative_rounded = np.round(first_derivative, 6)\n    second_derivative_rounded = np.round(second_derivative, 6)\n    tanh_list = tanh_x_rounded.tolist()\n    first_derivative_list = first_derivative_rounded.tolist()\n    second_derivative_list = second_derivative_rounded.tolist()\n    return [tanh_list, first_derivative_list, second_derivative_list]\nassert tanh_with_derivatives([0]) == [[0.0], [1.0], [0.0]], \"test case failed: tanh_with_derivatives([0])\"\nassert tanh_with_derivatives([0,1,-1]) == [np.round(np.tanh([0,1,-1]),6).tolist(), np.round(1 - np.tanh([0,1,-1])**2,6).tolist(), np.round(-2*np.tanh([0,1,-1])*(1 - np.tanh([0,1,-1])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0,1,-1])\"\nassert tanh_with_derivatives([2,-2]) == [np.round(np.tanh([2,-2]),6).tolist(), np.round(1 - np.tanh([2,-2])**2,6).tolist(), np.round(-2*np.tanh([2,-2])*(1 - np.tanh([2,-2])**2),6).tolist()], \"test case failed: tanh_with_derivatives([2,-2])\"\nassert tanh_with_derivatives([10,-10]) == [np.round(np.tanh([10,-10]),6).tolist(), np.round(1 - np.tanh([10,-10])**2,6).tolist(), np.round(-2*np.tanh([10,-10])*(1 - np.tanh([10,-10])**2),6).tolist()], \"test case failed: tanh_with_derivatives([10,-10])\"\nassert tanh_with_derivatives([0.5,-0.5,3]) == [np.round(np.tanh([0.5,-0.5,3]),6).tolist(), np.round(1 - np.tanh([0.5,-0.5,3])**2,6).tolist(), np.round(-2*np.tanh([0.5,-0.5,3])*(1 - np.tanh([0.5,-0.5,3])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0.5,-0.5,3])\"\nassert tanh_with_derivatives(np.array([0.2,-0.2])) == [np.round(np.tanh(np.array([0.2,-0.2])),6).tolist(), np.round(1 - np.tanh(np.array([0.2,-0.2]))**2,6).tolist(), np.round(-2*np.tanh(np.array([0.2,-0.2]))*(1 - np.tanh(np.array([0.2,-0.2]))**2),6).tolist()], \"test case failed: tanh_with_derivatives(np.array([0.2,-0.2]))\"\nassert tanh_with_derivatives([4]) == [np.round(np.tanh([4]),6).tolist(), np.round(1 - np.tanh([4])**2,6).tolist(), np.round(-2*np.tanh([4])*(1 - np.tanh([4])**2),6).tolist()], \"test case failed: tanh_with_derivatives([4])\"\nassert tanh_with_derivatives([-3]) == [np.round(np.tanh([-3]),6).tolist(), np.round(1 - np.tanh([-3])**2,6).tolist(), np.round(-2*np.tanh([-3])*(1 - np.tanh([-3])**2),6).tolist()], \"test case failed: tanh_with_derivatives([-3])\"\nassert tanh_with_derivatives([0.25]) == [np.round(np.tanh([0.25]),6).tolist(), np.round(1 - np.tanh([0.25])**2,6).tolist(), np.round(-2*np.tanh([0.25])*(1 - np.tanh([0.25])**2),6).tolist()], \"test case failed: tanh_with_derivatives([0.25])\"\nassert tanh_with_derivatives([-0.75,0.75]) == [np.round(np.tanh([-0.75,0.75]),6).tolist(), np.round(1 - np.tanh([-0.75,0.75])**2,6).tolist(), np.round(-2*np.tanh([-0.75,0.75])*(1 - np.tanh([-0.75,0.75])**2),6).tolist()], \"test case failed: tanh_with_derivatives([-0.75,0.75])\""}
{"task_id": 397, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.empty((0, n_classes))\n    class_indices = np.random.randint(0, n_classes, size=n_examples)\n    one_hot_matrix = np.zeros((n_examples, n_classes), dtype=np.float64)\n    one_hot_matrix[np.arange(n_examples), class_indices] = 1.0\n    return one_hot_matrix\nnp.random.seed(1)\nassert np.array_equal(random_one_hot_matrix(1, 1), np.array([[1.]])), \"failed: (1,1) edge-case\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert mat.shape == (5, 3), \"shape mismatch for (5,3)\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert np.all((mat == 0) | (mat == 1)), \"non-binary values (5,3)\"\nnp.random.seed(0)\nmat = random_one_hot_matrix(5, 3)\nassert np.all(mat.sum(axis=1) == 1), \"row sum not equal to 1 (5,3)\"\nnp.random.seed(2)\nmat = random_one_hot_matrix(0, 4)\nassert mat.shape == (0, 4), \"shape mismatch for zero rows\"\nnp.random.seed(3)\nmat = random_one_hot_matrix(10, 4)\nassert mat.shape == (10, 4), \"shape mismatch (10,4)\"\nnp.random.seed(5)\nmat = random_one_hot_matrix(6, 6)\nassert np.all(mat.sum(axis=1) == 1), \"row sum error square matrix\"\nnp.random.seed(6)\nmat = random_one_hot_matrix(100, 50)\nassert mat.shape == (100, 50), \"shape mismatch (100,50)\"\nnp.random.seed(7)\nmat1 = random_one_hot_matrix(8, 3)\nnp.random.seed(8)\nmat2 = random_one_hot_matrix(8, 3)\nassert not np.array_equal(mat1, mat2), \"different seeds should produce different matrices\"\nnp.random.seed(10)\nmat = random_one_hot_matrix(2, 4)\nassert np.all(mat.sum(axis=1) == 1), \"row sum error (2,4)\""}
{"task_id": 398, "completion_id": 0, "passed": false, "result": "failed: failed on basic gradient", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_array = np.array(x)\n    if derivative:\n        gradient = np.where(x_array >= 0, 1.0, x_array + alpha)\n    else:\n        elu_values = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n    result = np.round(gradient if derivative else elu_values, 4).tolist()\n    return result\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 399, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    if not (X.ndim == 2 and Y.ndim == 2):\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    (m, d) = X.shape\n    n = Y.shape[0]\n    X_squared = np.sum(X ** 2, axis=1)\n    Y_squared = np.sum(Y ** 2, axis=1)\n    dist_sq = X_squared[:, np.newaxis] - 2 * np.dot(X, Y.T) + Y_squared[np.newaxis, :]\n    dist = np.sqrt(dist_sq)\n    dist_rounded = np.round(dist, 4)\n    result = dist_rounded.tolist()\n    return result\nassert pairwise_distances(np.array([[0, 0], [3, 4]]), np.array([[3, 0], [0, 4]])) == [[3.0, 4.0], [4.0, 3.0]], \"Test-1 failed\"\nassert pairwise_distances(np.array([[0, 0]]), np.array([[0, 0]])) == [[0.0]], \"Test-2 failed\"\nassert pairwise_distances(np.array([[1, 2], [3, 4]]), np.array([[5, 6]])) == [[5.6569], [2.8284]], \"Test-3 failed\"\nassert pairwise_distances(np.array([[0, 0, 0]]), np.array([[1, 2, 2], [2, 2, 1]])) == [[3.0, 3.0]], \"Test-4 failed\"\nassert pairwise_distances(np.array([[1, 2]]), np.array([[1, 2, 3]])) == -1, \"Test-5 failed (shape mismatch)\"\nassert pairwise_distances(np.array([[1, 1]]), np.array([[2, 2]])) == [[1.4142]], \"Test-6 failed\"\nassert pairwise_distances(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]])) == [[0.0, 1.4142], [1.4142, 0.0]], \"Test-7 failed\"\nassert pairwise_distances(np.array([[2, -3]]), np.array([[-2, 3]])) == [[7.2111]], \"Test-8 failed\"\nassert pairwise_distances(np.empty((0, 2)), np.array([[1, 1]])) == [], \"Test-9 failed (empty X)\"\nassert pairwise_distances(np.array([[1, 2]]), np.empty((0, 2))) == [[]], \"Test-10 failed (empty Y)\""}
{"task_id": 400, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance == 0:\n        if x < mean:\n            return round(0.0, 6)\n        elif x == mean:\n            return round(0.5, 6)\n        else:\n            return round(1.0, 6)\n    else:\n        sigma = math.sqrt(variance)\n        z = (x - mean) / (sigma * math.sqrt(2))\n        erf_value = math.erf(z)\n        cdf_value = 0.5 * (1 + erf_value)\n        return round(cdf_value, 6)\nassert gaussian_cdf(0.0, 0.0, 1.0) == 0.5, \"Failed on standard normal at 0\"\nassert gaussian_cdf(2.0, 2.0, 4.0) == 0.5, \"Failed on N(2,4) at mean\"\nassert gaussian_cdf(10.0, 0.0, 1.0) == 1.0, \"Failed on far right tail\"\nassert gaussian_cdf(-10.0, 0.0, 1.0) == 0.0, \"Failed on far left tail\"\nassert gaussian_cdf(0.0, 0.0, 0.0) == 0.5, \"Failed on degenerate var=0 at mean\"\nassert gaussian_cdf(-1.0, 0.0, 0.0) == 0.0, \"Failed on degenerate var=0 left\"\nassert gaussian_cdf(1.0, 0.0, 0.0) == 1.0, \"Failed on degenerate var=0 right\""}
{"task_id": 401, "completion_id": 0, "passed": false, "result": "failed: shape mismatch: indexing arrays could not be broadcast together with shapes (6,) (2,3) ", "solution": "import numpy as np\nimport numpy as np\ndef to_one_hot(y: np.ndarray, num_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    if len(y.shape) == 2 and y.dtype == np.float32 and np.allclose(y.sum(axis=1), 1.0):\n        return y.copy()\n    if num_classes is None:\n        if y.size == 0:\n            return np.array([], dtype=np.float32)\n        num_classes = int(np.max(y)) + 1\n    else:\n        num_classes = int(num_classes)\n    if len(y.shape) == 2 and y.shape[1] == 1:\n        y = y.reshape(-1)\n    N = y.size\n    one_hot = np.zeros((N, num_classes), dtype=np.float32)\n    one_hot[np.arange(N), y] = 1.0\n    return one_hot\nassert np.array_equal(to_one_hot(np.array([2, 0, 1])), np.array([[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]])), \"Test case 1 failed: basic three-class example\"\nassert np.array_equal(to_one_hot(np.array([[2],[0],[1]])), np.array([[0., 0., 1.], [1., 0., 0.], [0., 1., 0.]])), \"Test case 2 failed: column vector input\"\nassert np.array_equal(to_one_hot(np.array([0, 0, 0])), np.array([[1.], [1.], [1.]])), \"Test case 3 failed: single-class input\"\nassert np.array_equal(to_one_hot(np.array([3, 1]), num_classes=5), np.array([[0., 0., 0., 1., 0.], [0., 1., 0., 0., 0.]])), \"Test case 4 failed: user-supplied num_classes > max label\"\nalready = np.array([[0,1,0],[1,0,0]])\nassert np.array_equal(to_one_hot(already), already.astype(float)), \"Test case 5 failed: already one-hot input\"\nassert to_one_hot(np.array([5])).shape == (1, 6), \"Test case 6 failed: single sample, inferred classes\"\nassert to_one_hot(np.array([4]), num_classes=10).shape == (1, 10), \"Test case 7 failed: single sample with explicit num_classes\"\nlabels = np.random.randint(0, 4, size=100)\nencoded = to_one_hot(labels)\nassert encoded.shape == (100, 4) and np.allclose(encoded.sum(axis=1), 1), \"Test case 8 failed: random vector of length 100\"\nassert np.array_equal(to_one_hot(np.array([1,1,1,1])), np.array([[0.,1.]]*4)), \"Test case 9 failed: all labels identical (multi-class)\"\nlabels2d = np.arange(12).reshape(12,1)%3\nenc = to_one_hot(labels2d)\nassert enc.shape == (12,3) and np.allclose(enc.sum(axis=1),1), \"Test case 10 failed: reshape check\""}
{"task_id": 402, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float=1e-06) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    n_classes = len(np.unique(y_train))\n    n_features = X_train.shape[1]\n    class_priors = np.zeros(n_classes)\n    for c in range(n_classes):\n        class_mask = y_train == c\n        class_count = np.sum(class_mask)\n        class_priors[c] = class_count / len(y_train)\n    means = np.zeros((n_classes, n_features))\n    variances = np.zeros((n_classes, n_features))\n    for c in range(n_classes):\n        class_mask = y_train == c\n        class_samples = X_train[class_mask]\n        class_mean = np.mean(class_samples, axis=0)\n        class_var = np.var(class_samples, axis=0) + eps\n        means[c] = class_mean\n        variances[c] = class_var\n    predictions = np.zeros(X_test.shape[0], dtype=int)\n    for i in range(X_test.shape[0]):\n        test_sample = X_test[i]\n        log_posteriors = np.zeros(n_classes)\n        for c in range(n_classes):\n            log_prior = np.log(class_priors[c])\n            log_likelihood = 0.0\n            for j in range(n_features):\n                x_j = test_sample[j]\n                mu_cj = means[c][j]\n                sigma2_cj = variances[c][j]\n                log_density = -0.5 * (np.log(2 * np.pi * sigma2_cj) + (x_j - mu_cj) ** 2 / sigma2_cj)\n                log_likelihood += log_density\n            log_posteriors[c] = log_prior + log_likelihood\n        predictions[i] = np.argmax(log_posteriors)\n    return predictions\nassert (gaussian_nb_predict(np.array([[1.0], [2.0], [1.1], [5.0], [6.0], [5.5]]), np.array([0,0,0,1,1,1]), np.array([[1.2], [5.1]])) == np.array([0,1])).all(), \"failed on simple 1-D binary case\"\nassert (gaussian_nb_predict(np.array([[1,2],[2,1],[1,1],[9,8],[8,9],[9,9]]), np.array([0,0,0,1,1,1]), np.array([[1,1.5],[8.5,8.7]])) == np.array([0,1])).all(), \"failed on 2-D binary case\"\nassert (gaussian_nb_predict(np.array([[0],[0.5],[-0.2],[5],[5.5],[4.5],[10],[10.2],[9.7]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[1],[5],[9.9]])) == np.array([0,1,2])).all(), \"failed on 1-D three-class case\"\nassert (gaussian_nb_predict(np.array([[1],[1],[1],[2],[2],[2]]), np.array([0,0,0,1,1,1]), np.array([[1],[2]])) == np.array([0,1])).all(), \"failed on zero-variance handling\"\nassert (gaussian_nb_predict(np.array([[1,1],[1,2],[2,1],[8,8],[8,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.1,1.2],[8.4,8.7],[1.8,1.3]])) == np.array([0,1,0])).all(), \"failed on mixed predictions\"\nassert (gaussian_nb_predict(np.array([[0,0],[0.1,0.2],[5,5],[5.1,4.9],[10,10],[10.2,9.8]]), np.array([0,0,1,1,2,2]), np.array([[0,0.1],[5.2,5.2],[9.9,10.1]])) == np.array([0,1,2])).all(), \"failed on evenly spaced clusters\"\nassert (gaussian_nb_predict(np.array([[2,3],[3,2],[3,3],[7,7],[8,7],[7,8]]), np.array([0,0,0,1,1,1]), np.array([[2.5,2.5],[7.5,7.2]])) == np.array([0,1])).all(), \"failed on overlapping variance\"\nassert (gaussian_nb_predict(np.array([[1,0],[0,1],[1,1],[9,10],[10,9],[9,9]]), np.array([0,0,0,1,1,1]), np.array([[0.9,0.2],[9.5,9.1]])) == np.array([0,1])).all(), \"failed on correlated-looking but independent assumption\"\nassert (gaussian_nb_predict(np.array([[0],[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5]])) == np.array([0,1])).all(), \"failed on basic contiguous ranges\""}
{"task_id": 405, "completion_id": 0, "passed": false, "result": "failed: failed: custom leaky relu", "solution": "import numpy as np\nimport re\nimport numpy as np\nimport re\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    x = np.asarray(x, dtype=np.float64)\n    if param in (None, 'identity'):\n        return np.round(x, 6).tolist()\n    param = param.lower()\n\n    def identity(z):\n        return z\n\n    def relu(z):\n        return np.maximum(0, z)\n\n    def tanh(z):\n        return np.tanh(z)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def leaky_relu(z, alpha=0.01):\n        return np.where(z > 0, z, alpha * z)\n\n    def affine(z, slope, intercept):\n        return slope * z + intercept\n    if param.startswith('leaky relu('):\n        match = re.search('leaky relu\\\\(([^)]+)\\\\)', param)\n        if not match:\n            raise ValueError(f'Unknown activation: {param}')\n        args = match.group(1).split(',')\n        alpha = float(args[0]) if len(args) > 1 else 0.01\n        func = leaky_relu\n    elif param.startswith('affine('):\n        match = re.search('affine\\\\(([^)]+)\\\\)', param)\n        if not match:\n            raise ValueError(f'Unknown activation: {param}')\n        args = match.group(1).split(',')\n        slope = float(args[0])\n        intercept = float(args[1])\n        func = affine\n    elif param == 'relu':\n        func = relu\n    elif param == 'tanh':\n        func = tanh\n    elif param == 'sigmoid':\n        func = sigmoid\n    else:\n        raise ValueError(f'Unknown activation: {param}')\n    result = func(x)\n    return np.round(result, 6).tolist()\nassert apply_activation([-2, 0, 3], None) == [-2.0, 0.0, 3.0], \"failed: identity with None\"\nassert apply_activation([-2, 0, 3], \"identity\") == [-2.0, 0.0, 3.0], \"failed: explicit identity\"\nassert apply_activation([-1, 0, 2], \"relu\") == [0.0, 0.0, 2.0], \"failed: relu\"\nassert apply_activation([0], \"sigmoid\") == [0.5], \"failed: sigmoid on zero\"\nassert apply_activation([0, 1], \"tanh\") == [0.0, 0.761594], \"failed: tanh\"\nassert apply_activation([-1, 3], \"leaky relu(alpha=0.2)\") == [-0.2, 3.0], \"failed: custom leaky relu\"\nassert apply_activation([1, 2, 3], \"affine(slope=2, intercept=1)\") == [3.0, 5.0, 7.0], \"failed: affine 2x+1\"\nimport numpy as _np\na = _np.array([-3, -2, 10])\nassert apply_activation(a, \"relu\") == [0.0, 0.0, 10.0], \"failed: relu with numpy array\"\nassert apply_activation([-100, 100], \"leaky relu(alpha=0.01)\") == [-1.0, 100.0], \"failed: leaky relu with default alpha\"\nassert apply_activation([-2, 0, 2], \"affine(slope=-1.5, intercept=2.5)\") == [5.5, 2.5, -0.5], \"failed: affine -1.5x+2.5\""}
{"task_id": 406, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: 'np.ndarray', y_train: 'np.ndarray', X_test: 'np.ndarray', k: int=5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    n_test = X_test.shape[0]\n    predictions = []\n    for i in range(n_test):\n        distances = np.sqrt(np.sum((X_train - X_test[i, :]) ** 2, axis=1))\n        k_neighbors = min(k, len(X_train))\n        nearest_indices = np.argsort(distances)[:k_neighbors]\n        nearest_labels = y_train[nearest_indices]\n        counts = np.bincount(nearest_labels)\n        predicted_label = np.argmax(counts)\n        predictions.append(predicted_label)\n    return predictions\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,1,1,0]), np.array([[0.9,0.9],[0.1,0.2]]), k=1) == [0,0], \"Test case 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,1,1,0]), np.array([[0.9,0.9],[0.1,0.2]]), k=3) == [1,1], \"Test case 2 failed\"\nassert knn_predict(np.array([[2,3],[3,4],[4,5]]), np.array([0,1,1]), np.array([[3,3]]), k=5) == [1], \"Test case 3 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), k=2) == [0], \"Test case 4 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,1,1,0]), np.array([[1.5]]), k=4) == [0], \"Test case 5 failed\"\nassert knn_predict(np.array([[-1,-1],[2,2]]), np.array([0,1]), np.array([[1,1]]), k=1) == [1], \"Test case 6 failed\"\nassert knn_predict(np.array([[0,0,0],[1,1,1],[2,2,2]]), np.array([0,1,1]), np.array([[0.1,0.1,0.1]]), k=2) == [0], \"Test case 7 failed\"\nassert knn_predict(np.array([[5,5]]), np.array([3]), np.array([[0,0]]), k=1) == [3], \"Test case 8 failed\"\nassert knn_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[1.2]]), k=2) == [1], \"Test case 9 failed\"\nassert knn_predict(np.array([[0],[2]]), np.array([0,1]), np.array([[1]]), k=2) == [0], \"Test case 10 failed\""}
{"task_id": 410, "completion_id": 0, "passed": true, "result": "passed", "solution": "import re\nimport re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    if act_str == 'ReLU':\n        return {'type': 'ReLU'}\n    elif act_str == 'Sigmoid':\n        return {'type': 'Sigmoid'}\n    elif act_str == 'Tanh':\n        return {'type': 'Tanh'}\n    leaky_relu_pattern = '^Leaky ReLU\\\\(alpha=([-+]?\\\\d*\\\\.?\\\\d+)\\\\)$'\n    match = re.match(leaky_relu_pattern, act_str)\n    if match:\n        alpha = float(match.group(1))\n        return {'type': 'Leaky ReLU', 'alpha': alpha}\n    affine_pattern = '^Affine\\\\(slope=([-+]?\\\\d*\\\\.?\\\\d+), intercept=([-+]?\\\\d*\\\\.?\\\\d+)\\\\)$'\n    match = re.match(affine_pattern, act_str)\n    if match:\n        slope = float(match.group(1))\n        intercept = float(match.group(2))\n        return {'type': 'Affine', 'slope': slope, 'intercept': intercept}\n    return -1\nassert parse_activation(\"ReLU\") == {\"type\": \"ReLU\"}, \"test failed: 'ReLU'\"\nassert parse_activation(\"Sigmoid\") == {\"type\": \"Sigmoid\"}, \"test failed: 'Sigmoid'\"\nassert parse_activation(\"Tanh\") == {\"type\": \"Tanh\"}, \"test failed: 'Tanh'\"\nassert parse_activation(\"Affine(slope=3, intercept=2)\") == {\"type\": \"Affine\", \"slope\": 3.0, \"intercept\": 2.0}, \"test failed: integer parameters\"\nassert parse_activation(\"Affine(slope=3.5, intercept=-1.2)\") == {\"type\": \"Affine\", \"slope\": 3.5, \"intercept\": -1.2}, \"test failed: float & negative parameters\"\nassert parse_activation(\"Leaky ReLU(alpha=0.1)\") == {\"type\": \"Leaky ReLU\", \"alpha\": 0.1}, \"test failed: leaky relu 0.1\"\nassert parse_activation(\"Leaky ReLU(alpha=.01)\") == {\"type\": \"Leaky ReLU\", \"alpha\": 0.01}, \"test failed: leaky relu .01\"\nassert parse_activation(\"affine(slope=1, intercept=2)\") == -1, \"test failed: case sensitivity\"\nassert parse_activation(\"Affine(slope=1)\") == -1, \"test failed: missing intercept\"\nassert parse_activation(\"ELU\") == -1, \"test failed: unknown activation\""}
{"task_id": 411, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_non_integer_float(x):\n        if isinstance(x, float):\n            return not x.is_integer()\n        return False\n\n    def is_iterable(x):\n        return isinstance(x, (list, tuple, np.ndarray))\n    tuple_actions = any((is_iterable(a) for a in actions))\n    tuple_observations = any((is_iterable(o) for o in observations))\n\n    def get_dim(x):\n        if is_iterable(x):\n            return len(x)\n        else:\n            return 1\n    action_dim = get_dim(actions[0]) if actions else 0\n    obs_dim = get_dim(observations[0]) if observations else 0\n    multidim_actions = action_dim > 1\n    multidim_observations = obs_dim > 1\n    continuous_actions = any((is_non_integer_float(a) for a in actions))\n    continuous_observations = any((is_non_integer_float(o) for o in observations))\n\n    def get_unique_values(data):\n        if not data:\n            return []\n        if is_iterable(data[0]):\n            unique_values = []\n            for i in range(len(data[0])):\n                dim_values = [x[i] for x in data]\n                unique_values.append(list(set(dim_values)))\n            return unique_values\n        else:\n            return [list(set(data))]\n    action_ids = get_unique_values(actions)\n    obs_ids = get_unique_values(observations)\n    n_actions_per_dim = [len(vals) for vals in action_ids]\n    n_obs_per_dim = [len(vals) for vals in obs_ids]\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nacts = [0, 1, 2, 0]\nobs  = [10, 11, 10]\nassert env_stats(acts, obs)['n_actions_per_dim'] == [3], \"test case failed: scalar integers\"\nacts = [0.0, 1.5, 2.0]\nobs  = [1, 2, 3]\nassert env_stats(acts, obs)['continuous_actions'] is True, \"test case failed: continuous actions\"\nacts = [(0, 0), (1, 1), (0, 1)]\nobs  = [5, 6, 7]\nassert env_stats(acts, obs)['multidim_actions'] is True, \"test case failed: 2-D integer actions\"\nacts = [(0, 0, 0)]\nobs  = [(1.1, 2.2)]\nassert env_stats(acts, obs)['obs_dim'] == 2, \"test case failed: single sample multi-dim\"\nacts = [[1], [2], [3], [1]]\nobs  = [[10], [10], [12]]\nassert env_stats(acts, obs)['tuple_actions'] is True, \"test case failed: tuple single-dim\"\nacts = [(1, 2), (2, 3), (1, 3)]\nobs  = [0.1, 0.2, 0.3]\nassert env_stats(acts, obs)['continuous_observations'] is True, \"test 6 failed\"\nacts = [1, 2, 3]\nobs  = [(0, 0), (1, 1)]\nassert env_stats(acts, obs)['multidim_observations'] is True, \"test 7 failed\"\nacts = [2.0, 3.0]\nobs  = [1, 1]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 8 failed\"\nacts = [True, False, True]\nobs  = [0, 1, 0]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 9 failed\"\nacts = list(range(100))\nobs  = list(range(0, 200, 2))\nassert env_stats(acts, obs)['n_obs_per_dim'] == [100], \"test 10 failed\""}
{"task_id": 412, "completion_id": 0, "passed": false, "result": "failed: failed: precision case 1", "solution": "\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    if name == 'accuracy':\n\n        def accuracy(y_true, y_pred):\n            tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == p == 1))\n            tn = sum((1 for (t, p) in zip(y_true, y_pred) if t == p == 0))\n            total = len(y_true)\n            return round((tp + tn) / total, 4)\n        return accuracy\n    elif name == 'precision':\n\n        def precision(y_true, y_pred):\n            tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 1))\n            fp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 0 and p == 1))\n            if fp == 0:\n                return 0.0\n            return round(tp / fp, 4)\n        return precision\n    elif name == 'recall':\n\n        def recall(y_true, y_pred):\n            tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 1))\n            fn = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 0))\n            if fn == 0:\n                return 0.0\n            return round(tp / fn, 4)\n        return recall\n    elif name == 'f1':\n\n        def f1(y_true, y_pred):\n            tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 1))\n            fp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 0 and p == 1))\n            fn = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 0))\n            if fp == 0 and fn == 0:\n                return 0.0\n            precision_val = tp / fp if fp != 0 else 0.0\n            recall_val = tp / fn if fn != 0 else 0.0\n            if precision_val == 0 and recall_val == 0:\n                return 0.0\n            return round(2 * (precision_val * recall_val) / (precision_val + recall_val), 4)\n        return f1\n    else:\n        return -1\nassert get_metric('accuracy')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6, \"failed: accuracy case 1\"\nassert get_metric('precision')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: precision case 1\"\nassert get_metric('recall')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: recall case 1\"\nassert get_metric('f1')([1, 0, 1, 1, 0], [1, 1, 1, 0, 0]) == 0.6667, \"failed: f1 case 1\"\nassert get_metric('precision')([1,0,1], [0,0,0]) == 0.0, \"failed: zero-division precision\"\nassert get_metric('f1')([1,0,1], [0,0,0]) == 0.0, \"failed: zero-division f1\"\nassert get_metric('accuracy')([1,1,0,0], [1,1,0,0]) == 1.0, \"failed: all correct accuracy\"\nassert get_metric('recall')([1,1,1,1], [1,0,0,0]) == 0.25, \"failed: unbalanced recall\"\nassert get_metric('f1')([1,1,1,1], [1,0,0,0]) == 0.4, \"failed: unbalanced f1\"\nassert get_metric('auc') == -1, \"failed: unknown metric name\""}
{"task_id": 413, "completion_id": 0, "passed": false, "result": "failed: local variable 'split_data' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree's prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = fit_regression_tree(X_train, residuals, max_depth)\n        trees.append(tree)\n        y_pred += learning_rate * tree.predict(X_train)\n    y_test_pred = np.zeros(X_test.shape[0])\n    for tree in trees:\n        y_test_pred += learning_rate * tree.predict(X_test)\n    return [round(pred, 4) for pred in y_test_pred]\ndef fit_regression_tree(X, y, max_depth):\n    \"\"\"Fit a regression tree to the data.\"\"\"\n    tree = {'split_feature': None, 'split_value': None, 'left': None, 'right': None, 'value': np.mean(y)}\n\n    def split_data(X, y, feature_index, split_value):\n        left_mask = X[:, feature_index] <= split_value\n        right_mask = X[:, feature_index] > split_value\n        return {'left': {'X': X[left_mask], 'y': y[left_mask]}, 'right': {'X': X[right_mask], 'y': y[right_mask]}}\n\n    def find_best_split(X, y):\n        best_gain = -np.inf\n        best_feature = None\n        best_value = None\n        for feature_index in range(X.shape[1]):\n            sorted_values = np.sort(np.unique(X[:, feature_index]))\n            for split_value in sorted_values:\n                split_data = split_data(X, y, feature_index, split_value)\n\n                def rss(data):\n                    return np.sum((data['y'] - np.mean(data['y'])) ** 2)\n                rss_before = rss({'X': X, 'y': y})\n                rss_after = rss(split_data['left']) + rss(split_data['right'])\n                gain = rss_before - rss_after\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_index\n                    best_value = split_value\n        return (best_feature, best_value)\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(y) == 0:\n            return {'value': np.mean(y)}\n        (feature, value) = find_best_split(X, y)\n        if feature is None:\n            return {'value': np.mean(y)}\n        split_data = split_data(X, y, feature, value)\n        left_tree = build_tree(split_data['left']['X'], split_data['left']['y'], depth + 1)\n        right_tree = build_tree(split_data['right']['X'], split_data['right']['y'], depth + 1)\n        return {'split_feature': feature, 'split_value': value, 'left': left_tree, 'right': right_tree, 'value': np.mean(y)}\n    tree = build_tree(X, y, 0)\n    return tree\nassert gbdt_regression(np.array([[0],[1]]), np.array([0,1]), np.array([[0],[1]]), 1, 1.0, 1) == [0.0, 1.0], \"test-1 failed: two-point identity mapping\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[1]]), 3, 0.5, 1) == [5.0], \"test-2 failed: constant target 5\"\nassert gbdt_regression(np.array([[0,1],[1,2],[2,3]]), np.array([7,7,7]), np.array([[0.5,1.5]]), 5, 0.3, 2) == [7.0], \"test-3 failed: 2-D constant target 7\"\nassert gbdt_regression(np.array([[-1],[0],[1]]), np.array([-2,-2,-2]), np.array([[0]]), 4, 0.8, 1) == [-2.0], \"test-4 failed: negative constant target\"\nassert gbdt_regression(np.array([[10]]), np.array([42]), np.array([[15]]), 6, 0.2, 1) == [42.0], \"test-5 failed: single-sample dataset\"\nassert gbdt_regression(np.array([[2],[4]]), np.array([4,8]), np.array([[2],[4]]), 1, 1.0, 1) == [4.0, 8.0], \"test-6 failed: two-point linear x2 mapping\"\nassert gbdt_regression(np.array([[0,1],[1,2]]), np.array([1,3]), np.array([[0,1],[1,2]]), 1, 1.0, 1) == [1.0, 3.0], \"test-7 failed: two-point 2-D features\"\nassert gbdt_regression(np.array([[5]]), np.array([10]), np.array([[7]]), 3, 0.9, 1) == [10.0], \"test-8 failed: single-sample constant 10\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([0,0,0]), np.array([[0],[2]]), 2, 0.7, 1) == [0.0, 0.0], \"test-9 failed: zero target\"\nassert gbdt_regression(np.array([[0],[1]]), np.array([-5,10]), np.array([[0],[1]]), 1, 1.0, 1) == [-5.0, 10.0], \"test-10 failed: mixed sign targets\""}
{"task_id": 414, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef exponential_scheduler(step: int, initial_lr: float=0.01, stage_length: int=500, staircase: bool=False, decay: float=0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    if step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n    lr = initial_lr * decay ** curr_stage\n    return round(lr, 6)\nassert exponential_scheduler(0) == 0.01, \"test failed: exponential_scheduler(0)\"\nassert exponential_scheduler(500) == 0.001, \"test failed: exponential_scheduler(500)\"\nassert exponential_scheduler(250) == 0.003162, \"test failed: exponential_scheduler(250)\"\nassert exponential_scheduler(250, staircase=True) == 0.01, \"test failed: exponential_scheduler(250, staircase=True)\"\nassert exponential_scheduler(750, staircase=True) == 0.001, \"test failed: exponential_scheduler(750, staircase=True)\"\nassert exponential_scheduler(1500, stage_length=1000, decay=0.5) == 0.003536, \"test failed: exponential_scheduler(1500, stage_length=1000, decay=0.5)\"\nassert exponential_scheduler(2000, stage_length=1000, decay=0.5, staircase=True) == 0.0025, \"test failed: exponential_scheduler(2000, stage_length=1000, decay=0.5, staircase=True)\"\nassert exponential_scheduler(10, stage_length=0) == -1, \"test failed: exponential_scheduler(10, stage_length=0)\"\nassert exponential_scheduler(-5) == -1, \"test failed: exponential_scheduler(-5)\"\nassert exponential_scheduler(300, initial_lr=0.1, stage_length=100, decay=0.9) == 0.0729, \"test failed: exponential_scheduler(300, initial_lr=0.1, stage_length=100, decay=0.9)\""}
{"task_id": 415, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Compute the un-normalised 1-D Discrete Cosine Transform Type-II (DCT-II) of a given frame.\n    \n    Args:\n        frame: A list of real numbers (integers or floats).\n        \n    Returns:\n        A list of the same length as the input, containing the DCT-II coefficients rounded to four decimal places.\n    \"\"\"\n    if not frame:\n        return []\n    N = len(frame)\n    x = np.array(frame, dtype=np.float64)\n    X = np.zeros(N, dtype=np.float64)\n    for k in range(N):\n        for n in range(N):\n            X[k] += x[n] * np.cos(np.pi / N * (n + 0.5) * k)\n    return [round(x, 4) for x in X]\nassert dct2([1]) == [1.0], \"failed on [1]\"\nassert dct2([1, 1]) == [2.0, 0.0], \"failed on [1,1]\"\nassert dct2([0, 0, 0]) == [0.0, 0.0, 0.0], \"failed on all-zero vector\"\nassert dct2([2, 2, 2, 2]) == [8.0, 0.0, 0.0, 0.0], \"failed on constant vector\"\nassert dct2([0.5, 2.5, 3.5]) == [6.5, -2.5981, -0.5], \"failed on [0.5,2.5,3.5]\"\nassert dct2([5, 5, 5]) == [15.0, 0.0, 0.0], \"failed on constant length-3 vector\""}
{"task_id": 416, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.ndarray): Input data points of shape (n_samples, n_features).\n    mean (np.ndarray): Mean vector of shape (n_features,).\n    cov (np.ndarray): Covariance matrix of shape (n_features, n_features), must be positive-definite.\n    \n    Returns:\n    list: A list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    if X.shape[1] != len(mean) or X.shape[1] != cov.shape[0]:\n        raise ValueError('X must have the same number of features as the mean and covariance matrix.')\n    (n_samples, n_features) = X.shape\n    d = n_features\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    const = 1.0 / np.sqrt((2 * np.pi) ** d * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        x = X[i]\n        x_minus_mu = x - mean\n        log_likelihood = -0.5 * np.dot(x_minus_mu, np.dot(inv_cov, x_minus_mu))\n        pdf = const * np.exp(log_likelihood)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values\nassert multivariate_gaussian_pdf(np.array([[0]]), [0], [[1]]) == [0.3989], \"test case failed: N(0,1) at 0\"\nassert multivariate_gaussian_pdf(np.array([[1]]), [0], [[1]]) == [0.2420], \"test case failed: N(0,1) at 1\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[1,0],[0,1]]) == [0.1592], \"test case failed: 2D standard normal at (0,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,1]]), [0,0], [[1,0],[0,1]]) == [0.0585], \"test case failed: 2D standard normal at (1,1)\"\nassert multivariate_gaussian_pdf(np.array([[0,0,0]]), [0,0,0], np.identity(3)) == [0.0635], \"test case failed: 3D standard normal at origin\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[2,0],[0,2]]) == [0.0796], \"test case failed: 2D diag(2,2) at origin\"\nassert multivariate_gaussian_pdf(np.array([[1,0]]), [0,0], [[1,0],[0,2]]) == [0.0683], \"test case failed: diag(1,2) at (1,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,0],[0,1]]), [0,0], [[1,0],[0,2]]) == [0.0683,0.0876], \"test case failed: two points with diag(1,2)\"\nassert multivariate_gaussian_pdf(np.array([[0,0],[2,0]]), [0,0], [[1,0],[0,1]]) == [0.1592,0.0215], \"test case failed: (0,0) and (2,0) in 2D standard normal\"\nassert multivariate_gaussian_pdf(np.array([[-1],[0],[1]]), [0], [[1]]) == [0.2420,0.3989,0.2420], \"test case failed: vectorised 1D standard normal\""}
{"task_id": 417, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    cov_matrix = np.cov(centered_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(k):\n        first_non_zero = np.argmax(sorted_eigenvectors[i, :] != 0)\n        if sorted_eigenvectors[i, first_non_zero] < 0:\n            sorted_eigenvectors[i, :] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    low_dim_representation = centered_data @ projection_matrix\n    reconstructed_data = low_dim_representation @ projection_matrix.T + mean\n    low_dim_rounded = np.round(low_dim_representation, 4).tolist()\n    recon_rounded = np.round(reconstructed_data, 4).tolist()\n    return (low_dim_rounded, recon_rounded)\nassert pca(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]), \"test case 1 failed\"\nassert pca(np.array([[3, 1], [4, 1], [5, 1]]), 1) == ([[-1.0], [0.0], [1.0]], [[3.0, 1.0], [4.0, 1.0], [5.0, 1.0]]), \"test case 2 failed\"\nassert pca(np.array([[0, 1], [0, 3], [0, 5]]), 1) == ([[-2.0], [0.0], [2.0]], [[0.0, 1.0], [0.0, 3.0], [0.0, 5.0]]), \"test case 3 failed\"\nassert pca(np.array([[0, 0], [1, 1], [2, 2]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]]), \"test case 4 failed\"\nassert pca(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == ([[-1.7321], [0.0], [1.7321]], [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]]), \"test case 5 failed\"\nassert pca(np.array([[10, 10], [20, 20], [30, 30]]), 1) == ([[-14.1421], [0.0], [14.1421]], [[10.0, 10.0], [20.0, 20.0], [30.0, 30.0]]), \"test case 6 failed\"\nassert pca(np.array([[2, 5], [3, 6], [4, 7]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[2.0, 5.0], [3.0, 6.0], [4.0, 7.0]]), \"test case 7 failed\"\nassert pca(np.array([[7, 0], [9, 2], [11, 4]]), 1) == ([[-2.8284], [0.0], [2.8284]], [[7.0, 0.0], [9.0, 2.0], [11.0, 4.0]]), \"test case 8 failed\"\nassert pca(np.array([[-1, -2], [0, -1], [1, 0]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[-1.0, -2.0], [0.0, -1.0], [1.0, 0.0]]), \"test case 9 failed\"\nassert pca(np.array([[50, 52], [51, 53], [52, 54]]), 1) == ([[-1.4142], [0.0], [1.4142]], [[50.0, 52.0], [51.0, 53.0], [52.0, 54.0]]), \"test case 10 failed\""}
{"task_id": 418, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    if n_samples < 2:\n        return [[0.0 for _ in range(n_features)] for _ in range(n_features)]\n    mean_vector = np.mean(X, axis=0)\n    centered_data = X - mean_vector\n    cov_matrix = np.cov(centered_data, rowvar=False)\n    return [row.tolist() for row in np.round(cov_matrix, 4)]\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[9.0, 9.0, 9.0], [9.0, 9.0, 9.0], [9.0, 9.0, 9.0]], \"test case failed: ascending 3\u00d73 matrix\"\nassert calculate_covariance_matrix([[1, 2], [1, 2]]) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: identical rows\"\nassert calculate_covariance_matrix([[1, 1], [1, 3], [1, 5]]) == [[0.0, 0.0], [0.0, 4.0]], \"test case failed: variance only in second feature\"\nassert calculate_covariance_matrix([[0, 0, 0], [1, 1, 1]]) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"test case failed: two samples with identical features\"\nassert calculate_covariance_matrix([[1, 2, 3]]) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"test case failed: single sample\"\nassert calculate_covariance_matrix([[1, 0], [0, 1]]) == [[0.5, -0.5], [-0.5, 0.5]], \"test case failed: negative covariance\"\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[15.0, 15.0, 15.0], [15.0, 15.0, 15.0], [15.0, 15.0, 15.0]], \"test case failed: 4\u00d73 ascending matrix\"\nassert calculate_covariance_matrix([[0, 1], [1, 1], [2, 1]]) == [[1.0, 0.0], [0.0, 0.0]], \"test case failed: constant second feature\"\nassert calculate_covariance_matrix([[1, 1], [2, 0], [3, 1], [4, 0]]) == [[1.6667, -0.3333], [-0.3333, 0.3333]], \"test case failed: mild negative correlation\"\nassert calculate_covariance_matrix([[1, 4], [2, 3], [3, 2], [4, 1]]) == [[1.6667, -1.6667], [-1.6667, 1.6667]], \"test case failed: strong negative correlation\""}
{"task_id": 419, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n        elif V.ndim == 2:\n            if V.shape[0] != V.shape[1]:\n                raise ValueError('V must be a square matrix if 2D')\n            if not np.allclose(V, V.T):\n                raise ValueError('V must be symmetric')\n        else:\n            raise ValueError('V must be a scalar, 1-D array, or 2-D square matrix')\n    try:\n        inv_V = np.linalg.inv(V)\n    except np.linalg.LinAlgError:\n        raise ValueError('V is not positive definite')\n    X_T_X = X.T @ X\n    try:\n        inv_X_T_X = np.linalg.inv(X_T_X)\n    except np.linalg.LinAlgError:\n        raise ValueError('X_T_X is not positive definite')\n    inv_V_mu = inv_V @ mu\n    X_T_y = X.T @ y\n    mu_p = inv_X_T_X @ (inv_V_mu + X_T_y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred]\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 420, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    if not 0 <= column < X.shape[1]:\n        return ([], [])\n    column_values = X[:, column]\n    left_mask = column_values < value\n    right_mask = column_values >= value\n    left_list = left_mask.tolist()\n    right_list = right_mask.tolist()\n    return (left_list, right_list)\nassert get_split_mask(np.array([[1,2,3],[4,5,6],[7,8,9]]),1,5) == ([True, False, False],[False, True, True]), \"failed: column 1, value 5\"\nassert get_split_mask(np.array([[0],[0],[1]]),0,0) == ([False, False, False],[True, True, True]), \"failed: threshold equal to 0\"\nassert get_split_mask(np.array([[0],[0],[1]]),0,2) == ([True, True, True],[False, False, False]), \"failed: threshold greater than max\"\nassert get_split_mask(np.array([[-3],[-2],[5]]),0,0) == ([True, True, False],[False, False, True]), \"failed: negative values\"\nassert get_split_mask(np.array([[1,2],[3,4]]),1,3) == ([True, False],[False, True]), \"failed: last column\"\nassert get_split_mask(np.array([[1,2],[3,4]]),-1,0) == ([],[]), \"failed: negative column index\"\nassert get_split_mask(np.array([[1,2],[3,4]]),5,0) == ([],[]), \"failed: column index out of range\"\nassert get_split_mask(np.array([[5,5,5],[5,5,5]]),2,5) == ([False, False],[True, True]), \"failed: values equal to threshold\"\nassert get_split_mask(np.array([[10,20],[30,40],[50,60]]),0,25) == ([True, False, False],[False, True, True]), \"failed: mix split on first column\"\nassert get_split_mask(np.array([[1.1,2.2],[3.3,4.4],[5.5,6.6]]),0,3.3) == ([True, False, False],[False, True, True]), \"failed: float threshold\""}
{"task_id": 421, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are first discovered\n        during the scan over the data set.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    labels = [-1] * n_samples\n    cluster_id = 0\n    visited = [False] * n_samples\n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        neighbors = np.where(np.linalg.norm(data[i] - data, axis=1) <= eps)[0]\n        if len(neighbors) >= min_samples:\n            cluster_id += 1\n            visited[i] = True\n            labels[i] = cluster_id\n            queue = [i]\n            while queue:\n                current = queue.pop(0)\n                for neighbor in neighbors:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n        else:\n            labels[i] = -1\n    return labels\nimport numpy as np\nassert dbscan(np.array([[0.,0.],[0.,1.],[1.,0.],[8.,8.]]),1.5,2) == [1,1,1,-1], \"test case failed: simple cluster with noise\"\nassert dbscan(np.array([[0.,0.],[0.2,0.1],[1.,-0.1],[10.,10.],[10.1,9.9],[9.9,10.2]]),1.5,2) == [1,1,1,2,2,2], \"test case failed: two well separated clusters\"\nassert dbscan(np.array([[0.,0.],[3.,3.]]),1.,2) == [-1,-1], \"test case failed: all noise\"\nassert dbscan(np.array([[0.,0.],[0.2,0.2],[0.3,0.1]]),1.,2) == [1,1,1], \"test case failed: single compact cluster\"\nassert dbscan(np.array([[0.,0.],[3.,0.],[0.,3.]]),1.,1) == [1,2,3], \"test case failed: each point its own cluster when min_samples=1\"\nassert dbscan(np.array([[0.,0.,0.],[0.1,0.,0.2],[5.,5.,5.]]),0.5,2) == [1,1,-1], \"test case failed: 3D data with noise\"\nassert dbscan(np.array([[0.,0.],[0.1,0.2],[0.2,0.]]),0.5,4) == [-1,-1,-1], \"test case failed: not enough points to form cluster\"\nassert dbscan(np.array([[0.,0.],[0.1,0.2],[0.2,0.],[5.,5.]]),0.5,3) == [1,1,1,-1], \"test case failed: cluster plus distant noise\"\nassert dbscan(np.array([[0.,0.],[0.1,-0.1],[-0.2,0.05],[3.,3.],[3.1,2.9],[2.9,3.1]]),0.3,2) == [1,1,1,2,2,2], \"test case failed: two tight clusters\"\nassert dbscan(np.array([[0.,0.],[0.,0.],[0.,0.]]),0.1,2) == [1,1,1], \"test case failed: duplicate points forming a single cluster\""}
{"task_id": 422, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if order == 0:\n        result = np.log(1 + np.exp(x))\n    elif order == 1:\n        result = np.exp(x) / (1 + np.exp(x))\n    elif order == 2:\n        result = np.exp(x) / (1 + np.exp(x)) ** 2\n    else:\n        return -1\n    return result.round(4).tolist()\nassert softplus(-1, 0) == 0.3133, \"failed: softplus(-1, 0)\"\nassert softplus(0, 0) == 0.6931, \"failed: softplus(0, 0)\"\nassert softplus(2, 0) == 2.1269, \"failed: softplus(2, 0)\"\nassert softplus([-1, 0, 2], 0) == [0.3133, 0.6931, 2.1269], \"failed: softplus([-1,0,2],0)\"\nassert softplus(np.array([0]), 1) == [0.5], \"failed: softplus(np.array([0]),1)\"\nassert softplus(0, 1) == 0.5, \"failed: softplus(0,1)\"\nassert softplus(-10, 1) == 0.0, \"failed: softplus(-10,1)\"\nassert softplus(10, 1) == 1.0, \"failed: softplus(10,1)\"\nassert softplus([0], 2) == [0.25], \"failed: softplus([0],2)\"\nassert softplus(3, 3) == -1, \"failed: softplus(3,3)\""}
{"task_id": 423, "completion_id": 0, "passed": false, "result": "failed: failed on empty lists", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    log_diffs = np.log(1 + np.array(predicted)) - np.log(1 + np.array(actual))\n    mse = np.mean(log_diffs ** 2)\n    rmsle = np.sqrt(mse)\n    return round(rmsle, 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 424, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return round(entropy, 4)\nassert entropy([0, 0, 1, 1]) == 1.0, \"test case failed: entropy([0, 0, 1, 1])\"\nassert entropy([0, 0, 0, 0]) == 0.0, \"test case failed: entropy([0, 0, 0, 0])\"\nassert entropy([0, 1, 2, 3]) == 2.0, \"test case failed: entropy([0, 1, 2, 3])\"\nassert entropy([0, 1]) == 1.0, \"test case failed: entropy([0, 1])\"\nassert entropy([0, 1, 1, 1]) == 0.8113, \"test case failed: entropy([0, 1, 1, 1])\"\nassert entropy([i % 3 for i in range(300)]) == 1.585, \"test case failed: entropy([i % 3 for i in range(300)])\"\nassert entropy([0, 0, 0, 1]) == 0.8113, \"test case failed: entropy([0, 0, 0, 1])\"\nassert entropy([0, 1, 2, 2]) == 1.5, \"test case failed: entropy([0, 1, 2, 2])\"\nassert entropy([0, 1, 2, 3, 4]) == 2.3219, \"test case failed: entropy([0, 1, 2, 3, 4])\""}
{"task_id": 425, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the natural-log Shannon entropy of a one-dimensional collection of non-negative integers.\n    \n    Parameters:\n    p (list[int] | np.ndarray): A list or NumPy array of non-negative integers representing the data.\n    \n    Returns:\n    float: The Shannon entropy rounded to 4 decimal places. If all elements are the same, returns 0.0.\n    \"\"\"\n    p = np.array(p)\n    (unique_values, counts) = np.unique(p, return_counts=True)\n    total = len(p)\n    if len(unique_values) == 1:\n        return 0.0\n    probabilities = counts / total\n    entropy = -np.sum(probabilities * np.log(probabilities))\n    return round(entropy, 4)\nassert f_entropy(np.array([1, 1, 2, 2])) == 0.6931, \"failed on [1,1,2,2]\"\nassert f_entropy([0, 0, 0]) == 0.0, \"failed on [0,0,0]\"\nassert f_entropy([0, 1]) == 0.6931, \"failed on [0,1]\"\nassert f_entropy([0, 1, 2, 3]) == 1.3863, \"failed on [0,1,2,3]\"\nassert f_entropy([1, 2, 3, 3]) == 1.0397, \"failed on [1,2,3,3]\"\nassert f_entropy([0, 1, 1, 1]) == 0.5623, \"failed on [0,1,1,1]\"\nassert f_entropy([2]) == 0.0, \"failed on single element [2]\"\nassert f_entropy(list(range(10))) == 2.3026, \"failed on range(10)\"\nassert f_entropy([0, 0, 0, 0, 1]) == 0.5004, \"failed on [0,0,0,0,1]\"\nassert f_entropy([0, 0, 1, 1, 2, 2, 3, 3]) == 1.3863, \"failed on balanced eight elements\""}
{"task_id": 426, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    if not y_true or not y_pred:\n        return -1.0\n    if len(y_true) != len(y_pred):\n        return -1.0\n    correct = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\nassert classification_accuracy([1, 0, 1, 1], [1, 1, 1, 0]) == 0.5, \"test case failed: basic integer labels\"\nassert classification_accuracy(['cat', 'dog', 'cat'], ['cat', 'dog', 'dog']) == 0.6667, \"test case failed: string labels\"\nassert classification_accuracy([1, 2], []) == -1, \"test case failed: unequal length\"\nassert classification_accuracy([], []) == -1, \"test case failed: empty lists\"\nassert classification_accuracy([1, 2, 3], [1, 2, 3]) == 1.0, \"test case failed: perfect accuracy\"\nassert classification_accuracy([0, 0, 0, 0], [1, 1, 1, 1]) == 0.0, \"test case failed: zero accuracy\"\nassert classification_accuracy(['a'], ['b']) == 0.0, \"test case failed: single wrong prediction\"\nassert classification_accuracy([True, False, True], [True, True, True]) == 0.6667, \"test case failed: boolean labels\"\nassert classification_accuracy([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0.2, \"test case failed: reversed list\"\nassert classification_accuracy(list('abcde'), list('abcdf')) == 0.8, \"test case failed: sequence of characters\""}
{"task_id": 427, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    z_array = np.array(z)\n    activation = z_array.copy()\n    derivative = np.ones_like(z_array)\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    return (activation_list, derivative_list)\nassert identity_activation([-2, 0, 3.5]) == ([-2.0, 0.0, 3.5], [1.0, 1.0, 1.0]), \"test case failed: identity_activation([-2, 0, 3.5])\"\nassert identity_activation([0]) == ([0.0], [1.0]), \"test case failed: identity_activation([0])\"\nassert identity_activation((5, -7)) == ([5.0, -7.0], [1.0, 1.0]), \"test case failed: identity_activation((5, -7))\"\nassert identity_activation([[1, 2], [3, 4]]) == ([[1.0, 2.0], [3.0, 4.0]], [[1.0, 1.0], [1.0, 1.0]]), \"test case failed: identity_activation([[1, 2], [3, 4]])\"\nassert identity_activation(np.array([[0, -1, 2], [3, -4, 5]])) == ([[0.0, -1.0, 2.0], [3.0, -4.0, 5.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]), \"test case failed: identity_activation(np.array([[0, -1, 2], [3, -4, 5]]))\"\ninput_3d = np.arange(8).reshape(2, 2, 2)\nexpected_activation = input_3d.astype(float).tolist()\nexpected_derivative = np.ones_like(input_3d, dtype=float).tolist()\nassert identity_activation(input_3d) == (expected_activation, expected_derivative), \"test case failed: identity_activation(3-D array)\"\nassert identity_activation([1.2, -3.4, 5.6]) == ([1.2, -3.4, 5.6], [1.0, 1.0, 1.0]), \"test case failed: identity_activation([1.2, -3.4, 5.6])\"\nassert identity_activation([1e9, -1e9]) == ([1e9, -1e9], [1.0, 1.0]), \"test case failed: identity_activation([1e9, -1e9])\"\nassert identity_activation([[1, 2, 3], (4, 5, 6)]) == ([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]), \"test case failed: identity_activation([[1, 2, 3], (4, 5, 6)])\"\nassert identity_activation(0) == (0.0, 1.0), \"test case failed: identity_activation(0)\""}
{"task_id": 428, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if symmetric:\n        window = np.hanning(window_len)\n    else:\n        window = np.hanning(window_len + 1)[:-1]\n    return [round(x, 4) for x in window.tolist()]\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 429, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, -1).\n    \"\"\"\n    if not isinstance(context, np.ndarray):\n        return (-1, -1)\n    D = context_probs.shape[0]\n    if context.shape[0] != D:\n        return (-1, -1)\n    if not np.all((context == 0) | (context == 1)) or np.sum(context) != 1:\n        return (-1, -1)\n    optimal_arm = np.argmax(context_probs[np.where(context == 1)[0], :])\n    optimal_rwd = np.round(context_probs[np.where(context == 1)[0], optimal_arm].item(), 4)\n    return (optimal_rwd, optimal_arm)\nassert oracle_payoff(np.array([[0.1,0.8],[0.6,0.4]]), np.array([1,0])) == (0.8,1), \"failed on basic 2x2 (context 0)\"\nassert oracle_payoff(np.array([[0.1,0.8],[0.6,0.4]]), np.array([0,1])) == (0.6,0), \"failed on basic 2x2 (context 1)\"\nassert oracle_payoff(np.array([[0.5,0.5],[0.9,0.9]]), np.array([0,1])) == (0.9,0), \"failed when best arms tie (choose smallest)\"\nassert oracle_payoff(np.array([[0.3,0.2,0.7]]), np.array([1])) == (0.7,2), \"failed single-context multi-arm\"\nassert oracle_payoff(np.array([[0.4,0.2,0.6],[0.1,0.5,0.3],[0.7,0.4,0.9]]), np.array([0,0,1])) == (0.9,2), \"failed on example from task description\"\nassert oracle_payoff(np.array([[0.123456,0.654321]]), np.array([1])) == (0.6543,1), \"failed on rounding to 4 decimals\"\nassert oracle_payoff(np.array([[0.2,0.8],[0.3,0.4]]), np.array([0,0])) == (-1,-1), \"failed on invalid context (no 1 present)\"\nassert oracle_payoff(np.array([[0.2,0.8],[0.3,0.4]]), np.array([0,1,0])) == (-1,-1), \"failed on length mismatch\"\nassert oracle_payoff(np.array([[0.2],[0.7],[0.6],[0.1]]), np.array([0,1,0,0])) == (0.7,0), \"failed on K=1\""}
{"task_id": 430, "completion_id": 0, "passed": false, "result": "failed: failed on DAG with shared children", "solution": "from typing import List, Dict, Set, Tuple\nfrom typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph using DFS.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 None when the graph contains at least one directed cycle.\n    \"\"\"\n    adj = {v: [] for v in vertices}\n    for (u, v) in edges:\n        adj[u].append(v)\n    visited = set()\n    rec_stack = set()\n    result = []\n\n    def dfs(node):\n        visited.add(node)\n        rec_stack.add(node)\n        for neighbor in adj[node]:\n            if neighbor not in visited:\n                if not dfs(neighbor):\n                    return False\n            elif neighbor in rec_stack:\n                return False\n        rec_stack.remove(node)\n        result.append(node)\n        return True\n    for node in vertices:\n        if node not in visited:\n            if not dfs(node):\n                return None\n    return result\nassert topological_sort([0, 1, 2, 3], [(0, 1), (0, 2), (1, 3), (2, 3)]) == [0, 2, 1, 3], \"failed on DAG with shared children\"\nassert topological_sort([0, 1, 2, 3, 4], [(0, 2), (2, 3)]) == [4, 1, 0, 2, 3], \"failed on disconnected DAG\"\nassert topological_sort([0, 1, 2], [(0, 1), (1, 2), (2, 0)]) is None, \"failed to detect 3-cycle\"\nassert topological_sort([0], [(0, 0)]) is None, \"failed to detect self-loop\"\nassert topological_sort(['a', 'b', 'c'], []) == ['c', 'b', 'a'], \"failed on edgeless graph\"\nassert topological_sort([0, 1, 2, 3], [(0, 1), (0, 1), (1, 2), (2, 3)]) == [0, 1, 2, 3], \"failed with duplicate edges\"\nassert topological_sort([1, 2, 3, 4, 5, 6], [(1, 2), (1, 3), (3, 4), (2, 4), (4, 5), (5, 6)]) == [1, 3, 2, 4, 5, 6], \"failed on larger DAG\"\nassert topological_sort([1, 2, 3], [(2, 3)]) == [2, 3, 1], \"failed on simple chain with isolated vertex\"\nassert topological_sort([10], []) == [10], \"failed on single isolated vertex\"\nassert topological_sort([0, 1, 2], [(0, 1), (1, 2), (2, 1)]) is None, \"failed to detect 2-cycle\""}
{"task_id": 431, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    x1_np = np.array(x1)\n    x2_np = np.array(x2)\n    if x1_np.ndim != 1 or x2_np.ndim != 1:\n        return -1\n    if len(x1_np) != len(x2_np):\n        return -1\n    difference = x1_np - x2_np\n    squared_diff = difference ** 2\n    sum_squared_diff = np.sum(squared_diff)\n    euclidean_distance = np.sqrt(sum_squared_diff)\n    return round(euclidean_distance, 4)\nassert dist([0, 0], [3, 4]) == 5.0, \"Test case failed: dist([0, 0], [3, 4])\"\nassert dist(np.array([1, 2, 3]), np.array([4, 5, 6])) == 5.1962, \"Test case failed: dist(np.array([1,2,3]), np.array([4,5,6]))\"\nassert dist([1.5, 2.5], [1.5, 2.5]) == 0.0, \"Test case failed: identical vectors\"\nassert dist([1], [0]) == 1.0, \"Test case failed: single-element vectors\"\nassert dist([], []) == 0.0, \"Test case failed: empty vectors\"\nassert dist([1, 2, 3], [1, 2]) == -1, \"Test case failed: unequal lengths should return -1\"\nassert dist([1, -2, -3], [-1, 2, 3]) == 7.4833, \"Test case failed: dist([1,-2,-3],[-1,2,3])\"\nassert dist(np.array([10, 20]), np.array([13, 24])) == 5.0, \"Test case failed: dist([10,20],[13,24])\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 434, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax.\"\"\"\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    max_values = np.max(logits, axis=1, keepdims=True)\n    logits_stable = logits - max_values\n    exp_logits = np.exp(logits_stable)\n    sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n    softmax_probs = exp_logits / sum_exp\n    softmax_probs_rounded = np.round(softmax_probs, 6)\n    result = [row.tolist() for row in softmax_probs_rounded]\n    return result\nassert softmax(np.array([[1.0, 2.0, 3.0]])) == [[0.090031, 0.244728, 0.665241]], \"failed: single row [[1,2,3]]\"\nassert softmax(np.array([1.0, 2.0, 3.0])) == [[0.090031, 0.244728, 0.665241]], \"failed: 1-D input [1,2,3]\"\nassert softmax(np.array([[0.0, 0.0, 0.0]])) == [[0.333333, 0.333333, 0.333333]], \"failed: equal logits\"\nassert softmax(np.array([[2.0, -2.0]])) == [[0.982014, 0.017986]], \"failed: [2,-2]\"\nassert softmax(np.array([[1000.0, 1000.0]])) == [[0.5, 0.5]], \"failed: large identical logits\"\nassert softmax(np.array([[-1000.0, -1000.0]])) == [[0.5, 0.5]], \"failed: large negative identical logits\"\nassert softmax(np.array([[1.0, 2.0, 3.0], [-1.0, 0.0, 1.0]])) == [[0.090031, 0.244728, 0.665241], [0.090031, 0.244728, 0.665241]], \"failed: two rows\"\nassert softmax(np.array([[5.0]])) == [[1.0]], \"failed: single element\""}
{"task_id": 435, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=np.float64)\n    y = np.array(y, dtype=np.float64)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4) for _ in range(len(y))]\n    y_pred = np.full_like(y, np.mean(y))\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.column_stack((X, np.ones(X.shape[0])))\n        (coefficients, _, _, _) = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)\n        h_t = X_with_intercept @ coefficients\n        y_pred += learning_rate * h_t\n    return [round(pred, 4) for pred in y_pred]\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    if isinstance(x, (int, float)):\n        result = np.array([x])\n    elif isinstance(x, list):\n        result = np.array(x)\n    elif isinstance(x, np.ndarray):\n        result = x\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array.')\n    if order == 0:\n        sig = 1 / (1 + np.exp(-result))\n    elif order == 1:\n        sig = 1 / (1 + np.exp(-result))\n        deriv = sig * (1 - sig)\n    elif order == 2:\n        sig = 1 / (1 + np.exp(-result))\n        deriv1 = sig * (1 - sig)\n        deriv2 = deriv1 * (1 - 2 * sig)\n    if order == 0:\n        output = sig\n    elif order == 1:\n        output = deriv\n    elif order == 2:\n        output = deriv2\n    output = np.round(output, 4)\n    if np.isscalar(x):\n        return float(output)\n    else:\n        return output.tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": false, "result": "failed: zero-size array to reduction operation maximum which has no identity", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y_np = np.array(y)\n    if num_classes is None:\n        num_classes = int(np.max(y_np)) + 1\n    elif num_classes < np.max(y_np) + 1:\n        return -1\n    one_hot = np.zeros((len(y_np), num_classes), dtype=int)\n    one_hot[np.arange(len(y_np)), y_np] = 1\n    return one_hot.tolist()\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 439, "completion_id": 0, "passed": false, "result": "failed: failed: very low threshold", "solution": "import itertools\nimport itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_itemsets = []\n    candidates = set(item_counts.keys())\n    candidates = [item for item in candidates if item_counts[item] / len(transactions) >= min_sup]\n    frequent_by_size = defaultdict(list)\n    for item in candidates:\n        frequent_by_size[1].append(tuple(sorted([item])))\n    k = 2\n    while True:\n        new_candidates = set()\n        for i in range(len(frequent_by_size[k - 1])):\n            for j in range(i + 1, len(frequent_by_size[k - 1])):\n                c1 = frequent_by_size[k - 1][i]\n                c2 = frequent_by_size[k - 1][j]\n                if c1[:-1] == c2[:-1]:\n                    candidate = tuple(sorted(c1 + c2))\n                    new_candidates.add(candidate)\n        pruned_candidates = []\n        for candidate in new_candidates:\n            is_frequent = True\n            for subset in itertools.combinations(candidate, k - 1):\n                if tuple(sorted(subset)) not in frequent_by_size[k - 1]:\n                    is_frequent = False\n                    break\n            if is_frequent:\n                pruned_candidates.append(candidate)\n        if not pruned_candidates:\n            break\n        candidate_supports = {}\n        for candidate in pruned_candidates:\n            count = 0\n            for transaction in transactions:\n                if all((item in transaction for item in candidate)):\n                    count += 1\n            support = count / len(transactions)\n            if support >= min_sup:\n                candidate_supports[candidate] = support\n        for candidate in candidate_supports:\n            frequent_by_size[k].append(tuple(sorted(candidate)))\n        candidates = pruned_candidates\n        k += 1\n    result = []\n    for size in sorted(frequent_by_size.keys()):\n        result.extend(sorted(frequent_by_size[size]))\n    return result\nassert apriori_frequent_itemsets([[1,2,3],[1,2],[2,3],[1,3]],0.5)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed: basic example\"\nassert apriori_frequent_itemsets([],0.5)==[],\"failed: empty dataset\"\nassert apriori_frequent_itemsets([[\"a\",\"b\",\"c\"],[\"a\",\"b\"],[\"a\",\"c\"],[\"b\",\"c\"]],0.75)==[(\"a\",),(\"b\",),(\"c\",)],\"failed: high threshold\"\nassert apriori_frequent_itemsets([[1,2],[1,3],[2,3],[1,2,3]],0.25)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed: very low threshold\"\nassert apriori_frequent_itemsets([[1,2],[3,4],[5,6]],0.34)==[],\"failed: no frequent itemsets across disjoint transactions\"\nassert apriori_frequent_itemsets([[\"x\",\"y\"],[\"x\",\"y\"],[\"x\",\"y\"]],0.2)==[(\"x\",),(\"y\",),(\"x\",\"y\",)],\"failed: every item always occurs\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n    averaged_probabilities_list = [rounded_probabilities[i].tolist() for i in range(len(rounded_probabilities))]\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 441, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len\n    if symmetric:\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n    else:\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(N + 1) / N)\n        w = w[:-1]\n    return [round(x, 4) for x in w.tolist()]\nassert hamming(5, True) == [0.08, 0.54, 1.0, 0.54, 0.08], \"failed for hamming(5, True)\"\nassert hamming(5, False) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979], \"failed for hamming(5, False)\"\nassert hamming(1, True) == [1.0], \"failed for hamming(1, True)\"\nassert hamming(1, False) == [1.0], \"failed for hamming(1, False)\"\nassert hamming(2, True) == [0.08, 0.08], \"failed for hamming(2, True)\"\nassert hamming(2, False) == [0.08, 1.0], \"failed for hamming(2, False)\"\nassert hamming(7, True) == [0.08, 0.31, 0.77, 1.0, 0.77, 0.31, 0.08], \"failed for hamming(7, True)\"\nassert hamming(7, False) == [0.08, 0.2532, 0.6424, 0.9544, 0.9544, 0.6424, 0.2532], \"failed for hamming(7, False)\"\nassert hamming(3, True) == [0.08, 1.0, 0.08], \"failed for hamming(3, True)\"\nassert hamming(3, False) == [0.08, 0.77, 0.77], \"failed for hamming(3, False)\""}
{"task_id": 442, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport heapq\nimport numpy as np\nimport heapq\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbors classification accelerated by a KD-Tree.\n\n    The function must build a KD-Tree from the training data, query the *k* nearest\n    neighbours for every sample in *X_test*, perform a majority vote on their\n    labels and return the sequence of predicted labels.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_train, n_features) with training\n                  samples.\n        y_train: 1-D NumPy integer array of shape (n_train,) containing the class\n                  label for every training sample.\n        X_test:  2-D NumPy array of shape (n_test, n_features) with samples to\n                  be classified.\n        k:       Number of nearest neighbours to use (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A Python *list* with the predicted label for every row in *X_test*.\n    \"\"\"\n\n    def build_kd_tree(data, depth=0):\n        if len(data) == 0:\n            return None\n        axis = depth % data.shape[1]\n        sorted_data = sorted(data, key=lambda x: x[axis])\n        median_idx = len(sorted_data) // 2\n        median = sorted_data[median_idx]\n        left_subtree = build_kd_tree(sorted_data[:median_idx], depth + 1)\n        right_subtree = build_kd_tree(sorted_data[median_idx + 1:], depth + 1)\n        return (axis, median, left_subtree, right_subtree)\n    kd_tree = build_kd_tree(X_train)\n\n    def search_kd_tree(tree, point, depth=0, k=k):\n        if tree is None:\n            return []\n        axis = tree[0]\n        median = tree[1]\n        left = tree[2]\n        right = tree[3]\n        if point[axis] < median[axis]:\n            side = left\n        else:\n            side = right\n        neighbors = search_kd_tree(side, point, depth + 1, k)\n        if len(neighbors) >= k:\n            return neighbors\n        other_side = right if side == left else left\n        other_neighbors = search_kd_tree(other_side, point, depth + 1, k)\n        combined = neighbors + other_neighbors\n        combined.sort(key=lambda x: np.linalg.norm(x - point))\n        return combined[:k]\n\n    def get_knn(point):\n        point = np.array(point)\n        neighbors = search_kd_tree(kd_tree, point)\n        labels = [y_train[i] for i in range(len(X_train)) if np.allclose(X_train[i], neighbors[0])]\n        return labels\n    predictions = []\n    for test_point in X_test:\n        knn_labels = get_knn(test_point)\n        counts = np.bincount(knn_labels)\n        prediction = np.argmax(counts)\n        predictions.append(prediction)\n    return predictions\nassert knn_kdtree(np.array([[1,1],[2,2],[3,3],[10,10]]), np.array([0,0,0,1]), np.array([[1.5,1.5],[9,9]]), 1) == [0,1], \"test-1 failed\"\nassert knn_kdtree(np.array([[1,1],[2,2],[3,3],[10,10]]), np.array([0,0,0,1]), np.array([[1.5,1.5],[9,9]]), 3) == [0,0], \"test-2 failed\"\nassert knn_kdtree(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]), np.array([0,0,0,1,1,1]), np.array([[0.1,0.2],[10.2,10.1]]), 3) == [0,1], \"test-3 failed\"\nassert knn_kdtree(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), 1) == [0,1], \"test-4 failed\"\nassert knn_kdtree(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), 2) == [0,1], \"test-5 failed\"\nassert knn_kdtree(np.array([[0,0],[0,1],[1,1]]), np.array([1,1,2]), np.array([[0.2,0.2]]), 3) == [1], \"test-6 failed\"\nassert knn_kdtree(np.array([[1,2,3,4],[2,2,3,4],[10,10,10,10]]), np.array([0,0,1]), np.array([[1,2.1,2.9,4.1],[9,9.5,9.8,10]]), 1) == [0,1], \"test-7 failed\"\nassert knn_kdtree(np.array([[0,0],[0,0],[1,1]]), np.array([0,1,1]), np.array([[0,0]]), 2) == [0], \"test-8 failed\"\nimport numpy as _np, numpy as _npt\n_rng = _np.random.default_rng(42)\n_X = _rng.random((50,3))\n_y = _rng.integers(0,3,50)\n_q = _X[0:2] + 1e-4\nassert knn_kdtree(_X, _y, _q, 1) == _y[0:2].tolist(), \"test-9 failed\"\nassert knn_kdtree(np.array([[0],[1],[2]]), np.array([0,1,1]), np.array([[1]]), 2) == [1], \"test-10 failed\""}
{"task_id": 443, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    is_numeric = isinstance(threshold, (int, float))\n    if is_numeric:\n        left_mask = X[:, feature_i] >= threshold\n    else:\n        left_mask = X[:, feature_i] == threshold\n    left_subset = X[left_mask]\n    right_subset = X[~left_mask]\n    left_subset = np.hstack((left_subset, np.zeros((left_subset.shape[0], X.shape[1] - left_subset.shape[1]))))\n    right_subset = np.hstack((right_subset, np.zeros((right_subset.shape[0], X.shape[1] - right_subset.shape[1]))))\n    return (left_subset, right_subset)\nX1 = np.array([[1, 2], [3, 4], [5, 6]])\nassert np.array_equal(divide_on_feature(X1, 0, 3)[0], np.array([[3, 4], [5, 6]])), \"failed on X1 left\"\nassert np.array_equal(divide_on_feature(X1, 0, 3)[1], np.array([[1, 2]])), \"failed on X1 right\"\nX2 = np.array([[10.5, 0], [ 2.0, 1], [10.5, 2]])\nleft, right = divide_on_feature(X2, 0, 10.5)\nassert left.shape == (2, 2) and right.shape == (1, 2), \"shape mismatch on floats\"\nassert np.all(left[:, 0] >= 10.5) and np.all(right[:, 0] < 10.5), \"wrong split on floats\"\nX3 = np.array([[\"red\", 1], [\"blue\", 2], [\"red\", 3]], dtype=object)\nleft, right = divide_on_feature(X3, 0, \"red\")\nassert np.array_equal(left, np.array([[\"red\", 1], [\"red\", 3]], dtype=object)), \"categorical left wrong\"\nassert np.array_equal(right, np.array([[\"blue\", 2]], dtype=object)), \"categorical right wrong\"\nX4 = np.array([[0, 0], [1, 1], [2, 2]])\nleft, right = divide_on_feature(X4, 1, 5)\nassert left.size == 0 and right.shape == (3, 2), \"all rows should be right when threshold too high\"\nX5 = np.array([[5, 5], [6, 6], [7, 7]])\nleft, right = divide_on_feature(X5, 1, 5)\nassert right.size == 0 and left.shape == (3, 2), \"all rows should be left when threshold too low\"\nX6 = np.array([[1, 0, 1], [2, 0, 2], [3, 1, 3]])\nleft, right = divide_on_feature(X6, 1, 0)\nassert np.all(left[:, 1] >= 0), \"numeric equality/greater failed\"\nX7 = np.array([[\"a\"], [\"b\"], [\"c\"], [\"b\"]], dtype=object)\nleft, right = divide_on_feature(X7, 0, \"b\")\nassert left.shape == (2, 1) and right.shape == (2, 1), \"string split size wrong\"\nX8 = np.arange(20).reshape(10, 2)\nleft, right = divide_on_feature(X8, 0, 8)\nassert np.all(left[:, 0] >= 8) and np.all(right[:, 0] < 8), \"large numeric matrix split failed\"\nX9 = np.array([[True, 1], [False, 2], [True, 3]], dtype=object)\nleft, right = divide_on_feature(X9, 0, True)\nassert left.shape == (2, 2) and right.shape == (1, 2), \"boolean threshold split failed\"\nX10 = np.random.randint(0, 100, size=(100, 5))\nleft, right = divide_on_feature(X10, 4, 50)\nassert left.shape[0] + right.shape[0] == 100, \"row count mismatch on random test\""}
{"task_id": 444, "completion_id": 0, "passed": false, "result": "failed: Test 4 failed: X\u2260Y shapes", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\"\"\"\n    if not X or not all((x for x in X)):\n        return [-1]\n    C = len(X[0])\n    if Y is not None:\n        if not Y or not all((y for y in Y)):\n            return [-1]\n        if len(Y[0]) != C:\n            return [-1]\n        (N, M) = (len(X), len(Y))\n    else:\n        N = M = len(X)\n    if sigma is None:\n        sigma = np.sqrt(C / 2.0)\n    elif isinstance(sigma, (float, int)):\n        sigma = [sigma] * C\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return [-1]\n        if any((s <= 0 for s in sigma)):\n            return [-1]\n    else:\n        return [-1]\n    X_np = np.array(X, dtype=np.float64)\n    if Y is not None:\n        Y_np = np.array(Y, dtype=np.float64)\n    else:\n        Y_np = X_np\n    diff = X_np[:, np.newaxis, :] - Y_np[np.newaxis, :, :]\n    squared_diff = np.sum(diff ** 2, axis=2)\n    scaled_squared_diff = squared_diff / np.array(sigma) ** 2\n    kernel_matrix = np.exp(-0.5 * scaled_squared_diff)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    result = []\n    for row in kernel_matrix_rounded:\n        result.append(row.tolist())\n    return result\nassert rbf_kernel([[1,0],[0,1]], [[1,0],[0,1]], 1.0) == [[1.0, 0.3679], [0.3679, 1.0]], \"Test 1 failed: isotropic \u03c3=1.0\"\nassert rbf_kernel([[1,1],[2,2],[3,3]], None, None) == [[1.0, 0.3679, 0.0183], [0.3679, 1.0, 0.3679], [0.0183, 0.3679, 1.0]], \"Test 3 failed: default \u03c3\"\nassert rbf_kernel([[0,0],[1,1]], [[1,0]], 1.0) == [[0.6065], [0.6065]], \"Test 4 failed: X\u2260Y shapes\"\nassert rbf_kernel([[1,0],[0,1]], None, [2,2]) == [[1.0, 0.7788], [0.7788, 1.0]], \"Test 5 failed: larger anisotropic \u03c3\"\nassert rbf_kernel([[0],[1],[2]], None, 1.0) == [[1.0, 0.6065, 0.1353], [0.6065, 1.0, 0.6065], [0.1353, 0.6065, 1.0]], \"Test 6 failed: 1-D data\"\nassert rbf_kernel([[0,0,0]], None, None) == [[1.0]], \"Test 7 failed: single vector\"\nassert rbf_kernel([[1,2,3]], None, [1,2]) == -1, \"Test 8 failed: wrong \u03c3 length\"\nassert rbf_kernel([[1,2]], None, -1.0) == -1, \"Test 9 failed: negative \u03c3\"\nassert rbf_kernel([[1,2]], None, [1,0]) == -1, \"Test 10 failed: zero in \u03c3 list\""}
{"task_id": 446, "completion_id": 0, "passed": false, "result": "failed: failed on simple 1-D split", "solution": "import numpy as np\nimport numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0\n        counts = np.bincount(labels)\n        probs = counts / len(labels)\n        return -np.sum(probs * np.log2(probs))\n    majority_label = Counter(y).most_common(1)[0][0]\n    if len(set(y)) == 1:\n        return (-1, None, majority_label, majority_label)\n    best_gain = -1\n    best_feature = -1\n    best_threshold = None\n    for j in range(n_features):\n        sorted_values = np.sort(np.unique(X[:, j]))\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n        for t in thresholds:\n            left_mask = X[:, j] <= t\n            right_mask = X[:, j] > t\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            parent_entropy = entropy(y)\n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = t\n            elif gain == best_gain:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                elif j == best_feature and t < best_threshold:\n                    best_threshold = t\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    left_counts = Counter(left_y)\n    left_majority = left_counts.most_common(1)[0][0]\n    right_counts = Counter(right_y)\n    right_majority = right_counts.most_common(1)[0][0]\n    best_threshold = round(best_threshold, 4)\n    return (best_feature, best_threshold, left_majority, right_majority)\nassert decision_stump([[1],[2],[3],[4]],[0,0,1,1])==(0,2.5,0,1),\"failed on simple 1-D split\"\nassert decision_stump([[1,1],[2,1],[3,2],[4,2]],[0,0,1,1])==(0,2.5,0,1),\"failed when two features tie\"\nassert decision_stump([[1],[2]],[1,1])==(-1,None,1,1),\"failed when no split improves gain\"\nassert decision_stump([[0],[1],[2],[3],[4],[5]],[1,1,1,0,0,0])==(0,2.5,1,0),\"failed on mixed labels\"\nassert decision_stump([[10,0],[20,0],[30,1],[40,1]],[0,0,1,1])==(0,25.0,0,1),\"failed on threshold rounding\"\nassert decision_stump([[5,2],[6,2],[7,3],[8,3]],[1,1,0,0])==(0,6.5,1,0),\"failed different labels/values\"\nassert decision_stump([[1,10],[2,20],[3,30],[4,40]],[0,0,1,1])==(0,2.5,0,1),\"failed preference of feature 0 over 1\"\nassert decision_stump([[1,1,1],[2,2,2],[3,3,3],[4,4,4]],[0,0,1,1])==(0,2.5,0,1),\"failed more than two features\"\nassert decision_stump([[1],[1.5],[2],[2.5],[3]], [0,0,0,1,1])==(0,2.25,0,1),\"failed uneven split\"\nassert decision_stump([[1,2],[1,3],[1,4]],[2,2,2])==(-1,None,2,2),\"failed when all labels identical\""}
{"task_id": 447, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    arr = np.ones(shape, **kwargs)\n    return arr.tolist()\nassert one(3) == [1.0, 1.0, 1.0], \"failed on one(3)\"\nassert one((2, 2)) == [[1.0, 1.0], [1.0, 1.0]], \"failed on one((2, 2))\"\nassert one((1,)) == [1.0], \"failed on one((1,))\"\nassert one((2, 3)) == [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]], \"failed on one((2, 3))\"\nassert one((2, 2, 1)) == [[[1.0], [1.0]], [[1.0], [1.0]]], \"failed on one((2, 2, 1))\"\nassert one(0) == [], \"failed on one(0)\"\nassert len(one((1, 2, 3))) == 1 and len(one((1, 2, 3))[0]) == 2, \"failed on shape dimensions for one((1, 2, 3))\"\nassert one((2,), dtype=int) == [1, 1], \"failed on dtype=int for one((2,))\"\nassert one(4, dtype=int) == [1, 1, 1, 1], \"failed on dtype=int for one(4)\"\nassert one((2, 1)) == [[1.0], [1.0]], \"failed on one((2, 1))\""}
{"task_id": 448, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if len(y_train) == 0:\n        return []\n    mean_y = np.mean(y_train)\n    predictions = np.full(len(X_test), mean_y)\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()\nassert mean_baseline_predict(np.array([[1,2],[3,4]]), np.array([2,4]), np.array([[5,6],[7,8],[9,10]])) == [3.0,3.0,3.0], \"tc1 failed: simple ints\"\nassert mean_baseline_predict(np.array([[0]]), np.array([1.2345, 5.4321]), np.zeros((4,2))) == [3.3333,3.3333,3.3333,3.3333], \"tc2 failed: float mean rounding\"\nassert mean_baseline_predict(np.random.randn(10,3), np.arange(10), np.random.randn(5,3)) == [4.5]*5, \"tc3 failed: sequential targets\"\nassert mean_baseline_predict(np.zeros((2,2)), np.array([-1,-1,-1]), np.ones((6,1))) == [-1.0]*6, \"tc4 failed: negative mean\"\nassert mean_baseline_predict(np.random.randn(3,4), np.array([7.8]), np.random.randn(2,4)) == [7.8,7.8], \"tc5 failed: single target\"\nassert mean_baseline_predict(np.random.randn(4,2), np.array([1,2,3,4]), np.empty((0,2))) == [], \"tc6 failed: no test samples\"\nassert mean_baseline_predict(np.random.randn(4,5), np.array([]), np.random.randn(3,5)) == [], \"tc7 failed: no training targets\"\nassert mean_baseline_predict(np.array([[10,20],[30,40]]), np.array([1e6,1e6]), np.array([[5,6]])) == [1000000.0], \"tc8 failed: large numbers\"\nassert mean_baseline_predict(np.array([[1,2,3]]*10), np.linspace(0,9,10), np.array([[0,0,0]]*3)) == [4.5,4.5,4.5], \"tc9 failed: high dimensional features\""}
{"task_id": 449, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    Mu0 = np.mean(X0, axis=0)\n    Mu1 = np.mean(X1, axis=0)\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec ** 2))\n    w = normal_vec\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    predictions = []\n    for x in X_test:\n        prediction = int(np.dot(w.T, x) + b > 0) * sign\n        predictions.append(prediction)\n    return predictions\nassert gda(np.array([[1,2],[2,1],[3,4],[4,3]]), np.array([0,0,1,1]), np.array([[1.5,1.5],[3,3]])) == [0, 1], \"failed: simple symmetric dataset\"\nassert gda(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0.2,0.2],[0.9,0.9]])) == [0, 1], \"failed: XOR-like but linearly separable\"\nassert gda(np.array([[2,3],[3,3],[3,4],[5,5],[1,0]]), np.array([0,0,1,1,0]), np.array([[4,4],[1,1]])) == [1, 0], \"failed: unbalanced classes\"\nassert gda(np.array([[-1,-2],[-2,-1],[2,1],[3,1]]), np.array([0,0,1,1]), np.array([[-1.5,-1.5],[2.5,1]])) == [0, 1], \"failed: negative coordinates\"\nassert gda(np.array([[1,0],[2,0],[3,0],[4,0]]), np.array([0,0,1,1]), np.array([[1.5,0],[3.5,0]])) == [0, 1], \"failed: 1-D manifold in 2-D space\"\nassert gda(np.array([[0,0],[1,1],[2,2],[3,3]]), np.array([0,0,1,1]), np.array([[0.5,0.5],[2.5,2.5]])) == [0, 1], \"failed: diagonal line\"\nassert gda(np.array([[1,2],[3,4],[5,6],[7,8]]), np.array([0,0,1,1]), np.array([[2,3],[6,7]])) == [0, 1], \"failed: larger coordinate values\"\nassert gda(np.array([[5,5],[6,5],[7,5],[8,5]]), np.array([0,0,1,1]), np.array([[5.5,5],[7.5,5]])) == [0, 1], \"failed: horizontal line\"\nassert gda(np.array([[1,1],[1,2],[2,1],[2,2]]), np.array([0,0,1,1]), np.array([[1.25,1.25],[1.75,1.75]])) == [0, 1], \"failed: small grid\"\nassert gda(np.array([[10,10],[10,11],[11,10],[11,11]]), np.array([0,0,1,1]), np.array([[10.2,10.2],[10.9,10.9]])) == [0, 1], \"failed: shifted square\""}
{"task_id": 450, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (3,) into shape (2,)", "solution": "import numpy as np\nimport numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    counts = np.apply_along_axis(np.bincount, axis=1, arr=preds)\n    result = np.argmax(counts, axis=1)\n    return result.tolist()\nassert majority_vote(np.array([[0, 1, 1], [2, 2, 1], [0, 0, 0]])) == [1, 2, 0], \"test failed: simple majority\"\nassert majority_vote(np.array([[1, 1, 2, 2], [3, 3, 3, 3]])) == [1, 3], \"test failed: even tie followed by clear majority\"\nassert majority_vote(np.array([[4, 4, 4, 2, 2, 2]])) == [2], \"test failed: tie for label 2 and 4, expect smallest\"\nassert majority_vote(np.array([[0]])) == [0], \"test failed: single estimator single sample\"\nassert majority_vote(np.array([[5, 5, 5], [6, 7, 6], [9, 8, 8]])) == [5, 6, 8], \"test failed: varied labels\"\nassert majority_vote(np.array([[1, 2, 3, 4, 5]])) == [1], \"test failed: all distinct labels pick smallest\"\nassert majority_vote(np.array([[2, 2, 2], [1, 1, 2], [3, 4, 4]])) == [2, 1, 4], \"test failed: mixed patterns\"\nassert majority_vote(np.array([[0, 0, 1, 1, 2, 2]])) == [0], \"test failed: triple tie choose smallest\"\nassert majority_vote(np.array([[10, 10], [0, 1], [1, 0]])) == [10, 0, 0], \"test failed: two estimators case\"\nassert majority_vote(np.array([[3, 3, 3, 3], [2, 3, 2, 3]])) == [3, 2], \"test failed: majority vs tie\""}
{"task_id": 451, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple, Dict\nimport numpy as np\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> List[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    List[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    if X_train.size == 0 or k <= 0:\n        return []\n    tree = build_kd_tree(X_train, y_train, 0)\n    predictions = []\n    for test_point in X_test:\n        neighbors = find_k_nearest_neighbors(tree, test_point, k)\n        votes = Counter([label for (_, label) in neighbors])\n        most_common = votes.most_common(1)\n        if most_common:\n            predictions.append(most_common[0][0])\n        else:\n            predictions.append(-1)\n    return predictions\ndef build_kd_tree(points: np.ndarray, labels: np.ndarray, depth: int) -> Dict:\n    \"\"\"Build a KD-Tree from the given points and labels.\"\"\"\n    if len(points) == 0:\n        return {}\n    axis = depth % points.shape[1]\n    sorted_indices = np.argsort(points[:, axis])\n    mid = len(sorted_indices) // 2\n    split_point = points[sorted_indices[mid]]\n    split_label = labels[sorted_indices[mid]]\n    left_points = points[sorted_indices[:mid]]\n    left_labels = labels[sorted_indices[:mid]]\n    right_points = points[sorted_indices[mid + 1:]]\n    right_labels = labels[sorted_indices[mid + 1:]]\n    left_tree = build_kd_tree(left_points, left_labels, depth + 1)\n    right_tree = build_kd_tree(right_points, right_labels, depth + 1)\n    return {'split_axis': axis, 'split_point': split_point, 'left': left_tree, 'right': right_tree, 'label': split_label}\ndef find_k_nearest_neighbors(tree: Dict, point: np.ndarray, k: int) -> List[Tuple[float, int]]:\n    \"\"\"Find the k nearest neighbors in the KD-Tree.\"\"\"\n    if not tree:\n        return []\n    if not tree['left'] and (not tree['right']):\n        return [(0, tree['label'])]\n    axis = tree['split_axis']\n    distance_to_split = np.abs(point[axis] - tree['split_point'][axis])\n    if point[axis] < tree['split_point'][axis]:\n        subtree = tree['left']\n    else:\n        subtree = tree['right']\n    neighbors = find_k_nearest_neighbors(subtree, point, k)\n    if len(neighbors) >= k:\n        return neighbors\n    other_subtree = tree['right'] if subtree == tree['left'] else tree['left']\n    other_neighbors = find_k_nearest_neighbors(other_subtree, point, k)\n    combined = neighbors + other_neighbors\n    combined.sort()\n    return combined[:k]\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0],[1,1],[4,4],[4,5],[5,4],[5,5]]), np.array([0,0,0,0,1,1,1,1]), np.array([[0.1,0.2],[4.2,4.3]]), 3) == [0,1], \"failed: basic separated clusters\"\nassert knn_kdtree_predict(np.array([[0,0]]), np.array([7]), np.array([[1,1],[2,2]]), 1) == [7,7], \"failed: single training sample\"\nassert knn_kdtree_predict(np.array([[0,0],[0,2]]), np.array([1,2]), np.array([[0,1]]), 2) == [1], \"failed: tie should choose smaller label\"\nassert knn_kdtree_predict(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.array([0,1,1]), np.array([[1,2,4],[6,5,4]]), 1) == [0,1], \"failed: 3-D space k=1\"\nassert knn_kdtree_predict(np.array([[1,2,3],[4,5,6],[7,8,9]]), np.array([0,1,1]), np.array([[1,2,4],[6,5,4]]), 2) == [0,1], \"failed: 3-D space k=2\"\nassert knn_kdtree_predict(np.empty((0,2)), np.array([]), np.array([[0,0]]), 3) == [], \"failed: empty training set\"\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,1]), np.array([[0.9,0.1]]), 3) == [1], \"failed: majority vote 2-1\"\nassert knn_kdtree_predict(np.array([[0,0],[0,1],[1,0]]), np.array([2,2,3]), np.array([[0.1,0.9]]), 3) == [2], \"failed: majority vote with tie breaking\""}
{"task_id": 452, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        X = X.tolist()\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [subset1, subset2]\nassert divide_on_feature([[1,5],[3,2],[4,6],[2,1]],0,3) == [[[3,2],[4,6]],[[1,5],[2,1]]], \"test case failed: numeric split >= 3\"\nassert divide_on_feature([[1.0,1],[2.5,3],[2.4,0],[3.1,2]],0,2.5) == [[[2.5,3],[3.1,2]],[[1.0,1],[2.4,0]]], \"test case failed: float threshold\"\nassert divide_on_feature([[1,'A'],[2,'B'],[3,'A'],[4,'C']],1,'A') == [[[1,'A'],[3,'A']],[[2,'B'],[4,'C']]], \"test case failed: categorical split\"\nassert divide_on_feature([[5],[6],[7]],0,10) == [[],[[5],[6],[7]]], \"test case failed: threshold greater than all\"\nassert divide_on_feature([[5],[6],[7]],0,0) == [[[5],[6],[7]],[]], \"test case failed: threshold smaller than all\"\nassert divide_on_feature([[1,2,3]],2,3) == [[[1,2,3]],[]], \"test case failed: single sample equal\"\nassert divide_on_feature([[1,2,3]],2,4) == [[],[[1,2,3]]], \"test case failed: single sample not equal\"\nassert divide_on_feature([[1,'yes'],[2,'no'],[3,'yes']],1,'no') == [[[2,'no']],[[1,'yes'],[3,'yes']]], \"test case failed: exactly one match\"\nassert divide_on_feature([[1.2],[3.4],[5.6],[7.8]],0,5.6) == [[[5.6],[7.8]],[[1.2],[3.4]]], \"test case failed: equality on floats\"\nassert divide_on_feature(np.array([[1,'cat'],[2,'dog'],[3,'cat']],dtype=object),1,'cat') == [[[1,'cat'],[3,'cat']],[[2,'dog']]], \"test case failed: ndarray object dtype\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not all((len(arr) == len(Q) for arr in [actions, rewards, dones])):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    targets = [row.copy() for row in Q]\n    for i in range(len(rewards)):\n        if dones[i]:\n            targets[i][actions[i]] = round(rewards[i], 4)\n        else:\n            max_q_next = np.max(Q_next[i])\n            target = round(rewards[i] + gamma * max_q_next, 4)\n            targets[i][actions[i]] = target\n    return targets\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 454, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    valid_half = np.array([[1, 0] for _ in range(batch_size // 2)])\n    fake_half = np.array([[0, 1] for _ in range(batch_size // 2)])\n    valid_full = np.array([[1, 0] for _ in range(batch_size)])\n    return (valid_half.tolist(), fake_half.tolist(), valid_full.tolist())\nassert generate_dcgan_labels(2) == ([[1,0]], [[0,1]], [[1,0],[1,0]]), \"failed on batch_size=2\"\nassert generate_dcgan_labels(4) == ([[1,0],[1,0]], [[0,1],[0,1]], [[1,0],[1,0],[1,0],[1,0]]), \"failed on batch_size=4\"\nassert generate_dcgan_labels(6)[0] == [[1,0],[1,0],[1,0]], \"valid_half incorrect for batch_size=6\"\nassert generate_dcgan_labels(6)[1] == [[0,1],[0,1],[0,1]], \"fake_half incorrect for batch_size=6\"\nassert len(generate_dcgan_labels(8)[2]) == 8, \"valid_full length incorrect for batch_size=8\"\nassert all(label==[1,0] for label in generate_dcgan_labels(10)[2]), \"valid_full content incorrect for batch_size=10\"\nvh, fh, vf = generate_dcgan_labels(12); assert len(vh)==len(fh)==6, \"half batch size wrong for batch_size=12\"\nassert generate_dcgan_labels(14)[0].count([1,0]) == 7, \"valid_half repetition error for batch_size=14\"\nassert generate_dcgan_labels(14)[1].count([0,1]) == 7, \"fake_half repetition error for batch_size=14\""}
{"task_id": 455, "completion_id": 0, "passed": false, "result": "failed: Failed on basic 2D heap case", "solution": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\ndef knn_classifier(X_train, y_train, X_query, k, method='naive'):\n    \"\"\"k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, default \"naive\"\n        Neighbour search strategy: \"naive\", \"heap\" or \"kdtree\".\n\n    Returns\n    -------\n    list[int]\n        Predicted label for each query sample.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_query = np.array(X_query)\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def get_largest_variance_index(data):\n        variances = np.var(data, axis=0)\n        return np.argmax(variances)\n\n    def naive_search(query_point):\n        distances = []\n        for i in range(len(X_train)):\n            dist = euclidean_distance(query_point, X_train[i])\n            distances.append((dist, i))\n        distances.sort()\n        return [distances[i][1] for i in range(k)]\n\n    def heap_search(query_point):\n        heap = []\n        for i in range(len(X_train)):\n            dist = euclidean_distance(query_point, X_train[i])\n            if len(heap) < k:\n                heapq.heappush(heap, (dist, i))\n            elif dist < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (dist, i))\n        return [heapq.heappop(heap)[1] for _ in range(k)]\n\n    class KDTNode:\n\n        def __init__(self, data, depth):\n            self.data = data\n            self.left = None\n            self.right = None\n            self.depth = depth\n\n    def build_kd_tree(data, depth=0):\n        if len(data) == 0:\n            return None\n        axis = get_largest_variance_index(data)\n        median_index = np.argsort(data[:, axis])[len(data) // 2]\n        median_point = data[median_index]\n        left_data = data[data[:, axis] < median_point[axis]]\n        right_data = data[data[:, axis] > median_point[axis]]\n        return (KDTNode(median_point, depth), build_kd_tree(left_data, depth + 1), build_kd_tree(right_data, depth + 1))\n\n    def kd_tree_search(node, query_point, k, current_closest):\n        if node is None:\n            return\n        dist = euclidean_distance(query_point, node.data)\n        if dist < current_closest[0]:\n            heapq.heappushpop(current_closest, (-dist, node.data, node.depth))\n        axis = node.depth % node.data.shape[1]\n        if query_point[axis] < node.data[axis]:\n            kd_tree_search(node.left, query_point, k, current_closest)\n        else:\n            kd_tree_search(node.right, query_point, k, current_closest)\n        axis = node.depth % node.data.shape[1]\n        if query_point[axis] < node.data[axis]:\n            kd_tree_search(node.right, query_point, k, current_closest)\n        else:\n            kd_tree_search(node.left, query_point, k, current_closest)\n\n    def kdtree_search(query_point):\n        (root, _, _) = build_kd_tree(X_train)\n        current_closest = []\n        kd_tree_search(root, query_point, k, current_closest)\n        indices = [point[1] for point in current_closest[:k]]\n        return indices\n    if method == 'naive':\n        neighbors = [naive_search(query_point) for query_point in X_query]\n    elif method == 'heap':\n        neighbors = [heap_search(query_point) for query_point in X_query]\n    elif method == 'kdtree':\n        neighbors = [kdtree_search(query_point) for query_point in X_query]\n    else:\n        raise ValueError(f'Unknown method: {method}')\n    predictions = []\n    for i in range(len(X_query)):\n        labels = y_train[neighbors[i]]\n        counter = Counter(labels)\n        most_common = counter.most_common(1)\n        if len(most_common) == 0:\n            predictions.append(0)\n        else:\n            predictions.append(most_common[0][0])\n    return predictions\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"naive\") == [0,1], \"Failed on basic 2D naive case\"\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"heap\") == [0,1], \"Failed on basic 2D heap case\"\nassert knn_classifier([[0,0],[1,1],[5,5],[6,6]],[0,0,1,1],[[0.1,0.2],[5.5,5.5]],3,\"kdtree\") == [0,1], \"Failed on basic 2D kdtree case\"\nassert knn_classifier([[1,2],[2,3],[3,3],[8,8],[9,8]],[0,0,0,1,1],[[2,2],[9,9]],1,\"naive\") == [0,1], \"Failed with k=1 naive\"\nassert knn_classifier([[1,2],[2,3],[3,3],[8,8],[9,8]],[0,0,0,1,1],[[2,2],[9,9]],1,\"kdtree\") == [0,1], \"Failed with k=1 kdtree\"\nassert knn_classifier([[0,0],[10,10]],[0,1],[[5,5]],2) == [0], \"Tie with equal votes\"\nassert knn_classifier([[0],[1],[2],[3],[4]],[0,0,1,1,1],[[1.8]],3,\"kdtree\") == [1], \"1D kdtree case\"\nassert knn_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0,0]],4) == [0], \"k equals n\""}
{"task_id": 456, "completion_id": 0, "passed": false, "result": "failed: failed on mismatched sample sizes", "solution": "import numpy as np\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if X.shape[0] < 2:\n        return [-1]\n    n = X.shape[0]\n    p = X.shape[1]\n    if Y is None:\n        Y = X\n    elif Y.shape[0] != n:\n        return [-1]\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    X_centered = X - mean_X\n    Y_centered = Y - mean_Y\n    cov_matrix = np.dot(X_centered.T, Y_centered) / (n - 1)\n    return np.round(cov_matrix, 4).tolist()\nassert calculate_covariance_matrix(np.array([[1, 2], [3, 4], [5, 6]])) == [[4.0, 4.0], [4.0, 4.0]], \"failed on example 1\"\nassert calculate_covariance_matrix(np.array([[1,2,3],[4,5,6],[7,8,9]])) == [[9.0,9.0,9.0],[9.0,9.0,9.0],[9.0,9.0,9.0]], \"failed on 3\u00d73 all-equal differences\"\nassert calculate_covariance_matrix(np.array([[2,0],[0,2],[2,2],[0,0]])) == [[1.3333,0.0],[0.0,1.3333]], \"failed on zero cross-covariance\"\nassert calculate_covariance_matrix(np.array([[1,2],[3,4]]), np.array([[5,6],[7,8]])) == [[2.0,2.0],[2.0,2.0]], \"failed on X\u2260Y cross-covariance\"\nassert calculate_covariance_matrix(np.array([[1,2],[3,4],[5,6]]), np.array([[1,2]])) == -1, \"failed on mismatched sample sizes\"\nassert calculate_covariance_matrix(np.array([[1,2]])) == -1, \"failed on too few samples\"\nassert calculate_covariance_matrix(np.array([[0,1],[1,0],[2,2]])) == [[1.0,0.5],[0.5,1.0]], \"failed on asymmetrical covariances\"\nassert calculate_covariance_matrix(np.array([[1],[2],[3],[4]])) == [[1.6667]], \"failed on single-feature dataset\"\nassert calculate_covariance_matrix(np.array([[2],[2],[2]])) == [[0.0]], \"failed on zero variance data\"\nassert calculate_covariance_matrix(np.array([[0,0,0],[1,1,1],[2,2,2],[3,3,3],[4,4,4]])) == [[2.5,2.5,2.5],[2.5,2.5,2.5],[2.5,2.5,2.5]], \"failed on linear trend data\""}
{"task_id": 457, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    weights = np.array(weights)\n    if not 0 <= alpha <= 1:\n        return -1\n    l2_norm = np.sum(weights ** 2)\n    l1_norm = np.sum(np.abs(weights))\n    penalty = 0.5 * alpha * l2_norm + (1 - alpha) * l1_norm\n    return round(penalty, 4)\nassert elastic_net_penalty([1.5, -2.0, 0.5], 0.6) == 3.55, \"failed: example case\"\nassert elastic_net_penalty([1, -1, 2], 1.0) == 3.0, \"failed: pure L2 case\"\nassert elastic_net_penalty([1, -1, 2], 0.0) == 4.0, \"failed: pure L1 case\"\nassert elastic_net_penalty([0, 0, 0], 0.4) == 0.0, \"failed: zero weights\"\nassert elastic_net_penalty([10], 0.5) == 30.0, \"failed: single weight\"\nassert elastic_net_penalty([1, 2, 3], -0.2) == -1, \"failed: alpha < 0 handling\"\nassert elastic_net_penalty([1, 2, 3], 1.2) == -1, \"failed: alpha > 1 handling\"\nassert elastic_net_penalty(np.array([-3.5, 2.0]), 0.75) == 7.4688, \"failed: numpy array input\"\nassert elastic_net_penalty((0.1234, -0.9876), 0.33) == 0.9078, \"failed: tuple input\"\nassert elastic_net_penalty([2, -3, 4, -5], 0.25) == 17.25, \"failed: larger vector\""}
{"task_id": 458, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return []\n    if any((label < 0 for label in labels)):\n        return [-1]\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1:\n        return [-1]\n    result = []\n    for label in labels:\n        one_hot = [0] * num_classes\n        one_hot[label] = 1\n        result.append(one_hot)\n    return result\nassert to_categorical([0, 2, 1, 3], 4) == [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]], \"test case failed: to_categorical([0, 2, 1, 3], 4)\"\nassert to_categorical(np.array([1,1,1]), None) == [[0,1],[0,1],[0,1]], \"test case failed: to_categorical(np.array([1,1,1]), None)\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical([3,2,4], 5) == [[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,1]], \"test case failed: to_categorical([3,2,4], 5)\"\nassert to_categorical([], 0) == [], \"test case failed: to_categorical([], 0)\"\nassert to_categorical([0], None) == [[1]], \"test case failed: to_categorical([0], None)\"\nassert to_categorical([9,8,7,6,5], None) == [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0]], \"test case failed: labels 9..5\"\nassert to_categorical([1,0,1,0], 2) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: alternating labels\"\nassert to_categorical([0,0,0], 1) == [[1],[1],[1]], \"test case failed: single class\"\nassert to_categorical([2,1], 2) == -1, \"test case failed: num_classes too small\""}
{"task_id": 459, "completion_id": 0, "passed": false, "result": "failed: attempt to get argmin of an empty sequence", "solution": "import numpy as np\nimport heapq\nimport numpy as np\nimport heapq\ndef knn_validate_heap(X_train: 'np.ndarray', Y_train: 'np.ndarray', X_val: 'np.ndarray', Y_val: 'np.ndarray', k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    n_val = X_val.shape[0]\n    predicted_labels = []\n    for i in range(n_val):\n        val_sample = X_val[i]\n        distances = np.sqrt(np.sum((X_train - val_sample) ** 2, axis=1))\n        heap = []\n        for j in range(len(distances)):\n            dist = distances[j]\n            idx = j\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, idx))\n            elif dist < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-dist, idx))\n        k_neighbors = [Y_train[idx] for (dist, idx) in heap]\n        label_counts = np.bincount(k_neighbors)\n        predicted_label = np.argmax(label_counts)\n        if np.sum(label_counts == label_counts[predicted_label]) > 1:\n            predicted_label = np.argmin(label_counts[label_counts != label_counts[predicted_label]])\n        predicted_labels.append(predicted_label)\n    accuracy = np.mean(np.array(predicted_labels) == Y_val)\n    accuracy = round(accuracy, 4)\n    return (accuracy, predicted_labels)\nassert knn_validate_heap(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 1]), np.array([[0, 0], [2, 2]]), np.array([0, 1]), 1) == (1.0, [0, 1]), \"test case 1 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1]), np.array([[0.1, 0.1]]), np.array([0]), 3) == (1.0, [0]), \"test case 2 failed\"\nassert knn_validate_heap(np.array([[0, 0], [5, 5], [0, 5]]), np.array([0, 1, 2]), np.array([[0, 4]]), np.array([2]), 1) == (1.0, [2]), \"test case 3 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1]), np.array([[0.5, 0.5]]), np.array([0]), 4) == (1.0, [0]), \"test case 4 failed\"\nassert knn_validate_heap(np.array([[0, 0], [0, 1]]), np.array([0, 0]), np.array([[1, 1]]), np.array([1]), 1) == (0.0, [0]), \"test case 5 failed\"\nassert knn_validate_heap(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1]]), np.array([1]), 3) == (1.0, [1]), \"test case 6 failed\"\nassert knn_validate_heap(np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]]), np.array([0, 1, 1]), np.array([[1, 2, 3.1]]), np.array([0]), 2) == (1.0, [0]), \"test case 7 failed\"\nassert knn_validate_heap(np.array([[0, 0], [1, 1], [2, 2], [3, 3]]), np.array([0, 0, 1, 1]), np.array([[0, 0.1], [3, 2.9], [1.5, 1.5]]), np.array([0, 1, 1]), 2) == (0.6667, [0, 1, 0]), \"test case 8 failed\"\nassert knn_validate_heap(np.array([[0], [1]]), np.array([0, 1]), np.array([[0], [1]]), np.array([0, 1]), 1) == (1.0, [0, 1]), \"test case 9 failed\"\nassert knn_validate_heap(np.array([[i, i] for i in range(10)]), np.array([0 if i < 5 else 1 for i in range(10)]), np.array([[2.1, 2.1], [7.9, 7.9]]), np.array([0, 1]), 3) == (1.0, [0, 1]), \"test case 10 failed\""}
{"task_id": 460, "completion_id": 0, "passed": false, "result": "failed: local variable 'n_features_y' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    if X.ndim != 2:\n        raise ValueError('X must be a 2D array')\n    (n_samples, n_features_x) = X.shape\n    if Y is None:\n        Y = X\n    else:\n        if Y.ndim != 2 or Y.shape[0] != n_samples:\n            raise ValueError('Y must be a 2D array with the same number of rows as X')\n        n_features_y = Y.shape[1]\n    combined = np.vstack((X, Y))\n    n_vars = n_features_x + n_features_y\n    n_cols = n_vars\n    means = np.mean(combined, axis=0)\n    centered = combined - means\n    cov_matrix = np.zeros((n_cols, n_cols))\n    for i in range(n_cols):\n        for j in range(n_cols):\n            var_i = centered[:, i]\n            var_j = centered[:, j]\n            if np.std(var_i) == 0 or np.std(var_j) == 0:\n                return [-1]\n            cov = np.dot(var_i, var_j) / n_samples\n            cov_matrix[i, j] = cov\n    stds = np.sqrt(np.sum(centered ** 2, axis=0) / n_samples)\n    corr_matrix = np.zeros((n_cols, n_cols))\n    for i in range(n_cols):\n        for j in range(n_cols):\n            if stds[i] == 0 or stds[j] == 0:\n                corr_matrix[i, j] = -1\n            else:\n                corr_matrix[i, j] = cov_matrix[i, j] / (stds[i] * stds[j])\n    result = []\n    for row in corr_matrix:\n        rounded_row = [round(val, 4) for val in row]\n        result.append(rounded_row)\n    return result\nassert calculate_correlation_matrix(np.array([[1,2],[3,4],[5,6]])) == [[1.0, 1.0], [1.0, 1.0]], \"failed: identical linear columns should give 1 everywhere\"\nassert calculate_correlation_matrix(np.array([[1,2],[2,1],[3,0]])) == [[1.0, -1.0], [-1.0, 1.0]], \"failed: perfect negative correlation expected\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[4,5,6]]), np.array([[1,1],[2,2]])) == [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], \"failed: X columns perfectly correlate with Y columns\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[1,2,3],[1,2,3]])) == -1, \"failed: zero variance columns should return -1\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[2,4,6],[3,6,9],[4,8,12]])) == [[1.0,1.0,1.0],[1.0,1.0,1.0],[1.0,1.0,1.0]], \"failed: perfectly collinear columns expected\"\nassert calculate_correlation_matrix(np.array([[1,0],[2,0],[3,0]])) == -1, \"failed: second column zero variance\"\nassert calculate_correlation_matrix(np.array([[1,2,3],[4,5,6]]), np.array([[1,1],[2,2]])) == [[1.0,1.0],[1.0,1.0],[1.0,1.0]], \"failed: repeated test with explicit Y\"\nassert calculate_correlation_matrix(np.array([[1,0],[0,1],[1,0],[0,1]])) == [[1.0,-1.0],[-1.0,1.0]], \"failed: alternating pattern should give -1 off diagonal\"\nassert calculate_correlation_matrix(np.array([[1,2],[1,3],[1,4],[1,5]])) == -1, \"failed: first column constant\"\nassert calculate_correlation_matrix(np.array([[1,2],[2,3],[3,4]]), np.array([[5,5],[5,5],[5,5]])) == -1, \"failed: Y has zero variance\""}
{"task_id": 461, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if len(x_np) != len(y_np):\n        raise ValueError('x and y must have the same length')\n    y_pred = np.full(len(y_np), np.mean(y_np))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    unique_x = np.unique(x_np)\n    if len(unique_x) == 1:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        split_points = unique_x[:-1]\n        best_split = None\n        best_sse = float('inf')\n        for t in split_points:\n            left_mask = x_np <= t\n            right_mask = x_np > t\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            v_L = np.mean(residuals[left_mask])\n            v_R = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - v_L) ** 2) + np.sum((residuals[right_mask] - v_R) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (t, v_L, v_R)\n        if best_split is None:\n            v_L = np.mean(residuals)\n            best_split = (np.nan, v_L, v_L)\n        (t, v_L, v_R) = best_split\n        y_pred += learning_rate * np.where(x_np <= t, v_L, v_R)\n    return np.round(y_pred, 4).tolist()\nassert gradient_boosting_regressor([1, 2], [1, 2], 1, 1.0) == [1.0, 2.0], \"failed case: ([1,2],[1,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2], [1, 3], 1, 1.0) == [1.0, 3.0], \"failed case: ([1,2],[1,3],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3], [2, 2, 2], 1, 1.0) == [2.0, 2.0, 2.0], \"failed case: ([1,2,3],[2,2,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [4, 3, 2, 1], 1, 1.0) == [3.5, 3.5, 1.5, 1.5], \"failed case: descending targets\"\nassert gradient_boosting_regressor([1, 2], [2, 4], 2, 0.5) == [2.25, 3.75], \"failed case: two iterations, shrinkage 0.5\"\nassert gradient_boosting_regressor([1, 2], [1, 2], 0, 0.5) == [1.5, 1.5], \"failed case: n_estimators == 0\"\nassert gradient_boosting_regressor([1, 1, 2, 2], [1, 1, 3, 3], 1, 1.0) == [1.0, 1.0, 3.0, 3.0], \"failed case: repeated feature values\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [2, 2, 2, 10], 2, 1.0) == [2.0, 2.0, 2.0, 10.0], \"failed case: perfect fit in first round\"\nassert gradient_boosting_regressor([1, 2, 3], [1, 2, 4], 1, 0.5) == [1.9167, 1.9167, 3.1667], \"failed case: fractional shrinkage\"\nassert gradient_boosting_regressor([1, 2, 3, 4, 5], [3, 3, 3, 3, 3], 3, 0.3) == [3.0, 3.0, 3.0, 3.0, 3.0], \"failed case: constant targets\""}
{"task_id": 462, "completion_id": 0, "passed": false, "result": "failed: failed on all-zeros input", "solution": "import numpy as np\nimport numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    C = mfccs.shape[1]\n    if D == 0 or D == 1:\n        return mfccs.copy()\n    lifter = 1 + D / 2 * np.sin(np.pi * np.arange(C) / D)\n    lifted_mfccs = mfccs * lifter[:, np.newaxis]\n    return lifted_mfccs\nassert np.array_equal(cepstral_lifter(np.array([[1,2,3],[4,5,6]]),0), np.array([[1,2,3],[4,5,6]])), \"failed on D=0 (no liftering)\"\nassert np.array_equal(cepstral_lifter(np.array([[1,2,3],[4,5,6]]),1), np.array([[1,2,3],[4,5,6]])), \"failed on D=1 (sinusoid zero)\"\nassert np.array_equal(cepstral_lifter(np.array([[0,0,0]]),4), np.zeros((1,3))), \"failed on all-zeros input\"\nrng = np.random.default_rng(42)\nA = rng.integers(0, 10, size=(5, 7))\nD = 5\nassert np.array_equal(cepstral_lifter(A, D), A * (1 + (D/2)*np.sin(np.pi*np.arange(7)/D))), \"failed on random 5\u00d77, D=5\"\nassert cepstral_lifter(np.array([[1]]),2)[0,0] == 1, \"failed on single coefficient\"\nB = np.array([[3,5,7],[1,1,1]], dtype=float)\nassert cepstral_lifter(B,4).dtype == B.dtype, \"dtype changed\"\nC = np.array([[1,2],[3,4]], dtype=float)\nassert np.allclose(cepstral_lifter(C,8), C * (1 + 4*np.sin(np.pi*np.arange(2)/8))), \"failed on small float matrix, D=8\"\nDmat = np.array([[1,2,3,4,5]])\nassert np.array_equal(cepstral_lifter(Dmat,6).shape, Dmat.shape), \"shape mismatch\""}
{"task_id": 463, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    if not X:\n        return 0.0\n    max_distance = 0.0\n    for point in X:\n        distance_sq = sum(((c - p) ** 2 for (c, p) in zip(centroid, point)))\n        if distance_sq > max_distance:\n            max_distance = distance_sq\n    radius = math.sqrt(max_distance)\n    return round(radius, 4)\nassert compute_ball_radius([0, 0], [[1, 0], [0, 2]]) == 2.0, \"failed on simple 2-D example\"\nassert compute_ball_radius([1, 1], [[1, 1]]) == 0.0, \"failed on zero radius case\"\nassert compute_ball_radius([0.0], [[-3.0], [3.0]]) == 3.0, \"failed on 1-D symmetric points\"\nassert compute_ball_radius([0, 0, 0], [[1, 1, 1], [-2, -2, -2]]) == 3.4641, \"failed on 3-D mixed points\"\nassert compute_ball_radius([2], []) == 0.0, \"failed on empty data set\"\nassert compute_ball_radius([0, 0], [[-5, -12]]) == 13.0, \"failed on single far point\"\nassert compute_ball_radius([2, -1], [[2, -1], [3, -1], [2, -3]]) == 2.0, \"failed on mixed distances\"\nassert compute_ball_radius([1, 2, 3, 4], [[1, 2, 3, 4], [5, 6, 7, 8]]) == 8.0, \"failed on 4-D example\"\nassert compute_ball_radius([0], [[0.0001], [-0.0001]]) == 0.0001, \"failed on small distances\"\nassert compute_ball_radius([10, 10], [[10, 10], [13, 14], [7, 6]]) == 5.0, \"failed on mixed near/far points\""}
{"task_id": 464, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_validate(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    n_val = X_val.shape[0]\n    predictions = []\n    for i in range(n_val):\n        distances = np.sqrt(np.sum((X_train - X_val[i]) ** 2, axis=1))\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = Y_train[nearest_indices]\n        counts = np.bincount(nearest_labels)\n        predicted_label = np.argmax(counts)\n        predictions.append(predicted_label)\n    correct = sum((p == y for (p, y) in zip(predictions, Y_val)))\n    accuracy = round(correct / n_val, 4)\n    return (accuracy, predictions)\nassert knn_validate(np.array([[0,0],[1,1],[0,1],[1,0]]), np.array([0,0,1,1]), np.array([[0.9,0.9],[0.2,0.8]]), np.array([1,0]), 3) == (1.0, [1, 0]), \"test case 1 failed\"\nassert knn_validate(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2],[6]]), np.array([0,1]), 1) == (1.0, [0, 1]), \"test case 2 failed\"\nassert knn_validate(np.array([[1],[3],[5],[7]]), np.array([0,0,1,1]), np.array([[2]]), np.array([0]), 2) == (1.0, [0]), \"test case 3 failed\"\nassert knn_validate(np.array([[0,0,0],[1,1,1],[2,2,2]]), np.array([0,1,1]), np.array([[1,1,0]]), np.array([0]), 2) == (1.0, [0]), \"test case 4 failed\"\nassert knn_validate(np.array([[0],[2],[4],[6]]), np.array([0,1,1,2]), np.array([[3]]), np.array([1]), 3) == (1.0, [1]), \"test case 5 failed\"\nassert knn_validate(np.array([[0,0]]), np.array([1]), np.array([[1,1]]), np.array([1]), 1) == (1.0, [1]), \"test case 6 failed\"\nassert knn_validate(np.array([[0],[1],[2]]), np.array([1,1,0]), np.array([[1.5]]), np.array([1]), 3) == (1.0, [1]), \"test case 7 failed\"\nassert knn_validate(np.array([[0],[1]]), np.array([0,1]), np.array([[0.3]]), np.array([0]), 2) == (1.0, [0]), \"test case 8 failed\"\nassert knn_validate(np.array([[0],[5]]), np.array([0,1]), np.array([[0],[5]]), np.array([0,1]), 1) == (1.0, [0, 1]), \"test case 9 failed\"\nassert knn_validate(np.array([[0,0],[1,1]]), np.array([0,0]), np.array([[1,0],[0,1]]), np.array([1,1]), 1) == (0.0, [0, 0]), \"test case 10 failed\""}
{"task_id": 465, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n\n    def f(x1, x2):\n        diff = x1 - x2\n        squared_norm = np.dot(diff, diff)\n        if gamma == 0:\n            return round(1.0, 4)\n        similarity = np.exp(-gamma * squared_norm)\n        return round(similarity, 4)\n    return f\nassert rbf_kernel(0.5)(np.array([1, 2]), np.array([2, 4])) == 0.0821, \"failed on gamma=0.5, vectors [1,2] [2,4]\"\nassert rbf_kernel(0.2)(np.array([3, 4]), np.array([0, 0])) == 0.0067, \"failed on gamma=0.2, vectors [3,4] [0,0]\"\nassert rbf_kernel(0)(np.array([1, 1]), np.array([2, 2])) == 1.0, \"failed on gamma=0, arbitrary vectors\"\nassert rbf_kernel(1)(np.array([1, 1, 1]), np.array([1, 1, 1])) == 1.0, \"failed on identical vectors, gamma=1\"\nassert rbf_kernel(1)(np.array([1, 0]), np.array([0, 1])) == 0.1353, \"failed on gamma=1, vectors [1,0] [0,1]\"\nassert rbf_kernel(5)(np.array([1, 0]), np.array([1, 0])) == 1.0, \"failed on identical vectors, gamma=5\"\nassert rbf_kernel(5)(np.array([1, 0]), np.array([0, 0])) == 0.0067, \"failed on gamma=5, vectors [1,0] [0,0]\"\nassert rbf_kernel(0.5)(np.array([2, -1]), np.array([-2, 2])) == 0.0, \"failed on gamma=0.5, distant vectors\"\nassert rbf_kernel(0.1)(np.array([-1, -1]), np.array([1, 1])) == 0.4493, \"failed on gamma=0.1, vectors [-1,-1] [1,1]\"\nassert rbf_kernel(2)(np.array([3]), np.array([4])) == 0.1353, \"failed on gamma=2, scalar vectors\""}
{"task_id": 466, "completion_id": 0, "passed": false, "result": "failed: name '_PUNC_TABLE' is not defined", "solution": "import string\nimport string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    stripped_line = line.translate(_PUNC_TABLE)\n    return stripped_line.strip()\nassert strip_punctuation(\"Hello, World!!!\") == \"Hello World\", \"failed: strip_punctuation('Hello, World!!!')\"\nassert strip_punctuation(\"  ...Python?? \") == \"Python\", \"failed: strip_punctuation('  ...Python?? ')\"\nassert strip_punctuation(\"No-punctuation\") == \"Nopunctuation\", \"failed: strip_punctuation('No-punctuation')\"\nassert strip_punctuation(\"Numbers 1234 remain 1234.\") == \"Numbers 1234 remain 1234\", \"failed: strip_punctuation('Numbers 1234 remain 1234.')\"\nassert strip_punctuation(\"!!!\") == \"\", \"failed: strip_punctuation('!!!')\"\nassert strip_punctuation(\"\") == \"\", \"failed: strip_punctuation('')\"\nassert strip_punctuation(\"email@example.com\") == \"emailexamplecom\", \"failed: strip_punctuation('email@example.com')\"\nassert strip_punctuation(\"   spaced   \") == \"spaced\", \"failed: strip_punctuation('   spaced   ')\"\nassert strip_punctuation(\"[brackets]{curly}(parentheses)\") == \"bracketscurlyparentheses\", \"failed: strip_punctuation('[brackets]{curly}(parentheses)')\""}
{"task_id": 467, "completion_id": 0, "passed": false, "result": "failed: test case failed: unsupported norm", "solution": "import numpy as np\nimport numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if norm not in ['l1', 'l2']:\n        return (-1, [])\n    penalty = 0.0\n    gradient = []\n    if norm == 'l1':\n        penalty = C * np.sum(np.abs(weights))\n        for w in weights:\n            if w > 0:\n                grad = C * 1\n            elif w < 0:\n                grad = C * -1\n            else:\n                grad = 0.0\n            gradient.append(grad)\n    elif norm == 'l2':\n        penalty = 0.5 * C * np.sum(np.square(weights))\n        gradient = [C * w for w in weights]\n    penalty_rounded = round(penalty, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    return (penalty_rounded, gradient_rounded)\nassert regularization([1.0, -2.0, 3.0], 0.1, 'l2') == (0.7, [0.1, -0.2, 0.3]), \"test case failed: regularization([1.0, -2.0, 3.0], 0.1, 'l2')\"\nassert regularization([1.0, -2.0, 3.0], 0.1, 'l1') == (0.6, [0.1, -0.1, 0.1]), \"test case failed: regularization([1.0, -2.0, 3.0], 0.1, 'l1')\"\nassert regularization([0, 0, 0], 1.0, 'l2') == (0.0, [0.0, 0.0, 0.0]), \"test case failed: zero weights l2\"\nassert regularization([0, 0, 0], 0.5, 'l1') == (0.0, [0.0, 0.0, 0.0]), \"test case failed: zero weights l1\"\nassert regularization([-5], 0.2, 'l2') == (2.5, [-1.0]), \"test case failed: single weight l2\"\nassert regularization([-5], 0.2, 'l1') == (1.0, [-0.2]), \"test case failed: single weight l1\"\nassert regularization([1,2,3], 0.1, 'elastic') == -1, \"test case failed: unsupported norm\""}
{"task_id": 468, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,) (2,4) (2,) ", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, num_iters: int=10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    if y_train.ndim == 1:\n        y_train = y_train.reshape(-1, 1)\n    (m, n) = X_train.shape\n    X_train = np.hstack((np.ones((m, 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    W = np.zeros(n + 1)\n    for _ in range(num_iters):\n        z = X_train @ W\n        h = 1 / (1 + np.exp(-z))\n        dW = X_train.T @ (h - y_train) / m\n        W -= learning_rate * dW\n    z_test = X_test @ W\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions = (probabilities >= 0.5).astype(int).flatten().tolist()\n    return predictions\nassert logistic_regression_predict(np.array([[-2.0], [-1.0], [1.0], [2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.5], [1.5]])) == [0, 1], \"test case 1 failed: basic 1-D symmetrical dataset\"\nassert logistic_regression_predict(np.array([[-3.0], [-2.0], [2.0], [3.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.5], [2.5]])) == [0, 1], \"test case 2 failed: shifted 1-D dataset\"\nassert logistic_regression_predict(np.array([[-1.5], [-0.5], [1.0], [2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-1.0], [1.5]])) == [0, 1], \"test case 3 failed: uneven distances\"\nassert logistic_regression_predict(np.array([[-4.0], [-1.0], [1.0], [4.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.0], [3.0]])) == [0, 1], \"test case 4 failed: wider margin\"\nassert logistic_regression_predict(np.array([[-2.0], [-1.0], [1.0], [2.0]]), np.array([0, 0, 1, 1]), np.array([[-0.75], [1.25]])) == [0, 1], \"test case 5 failed: 1-D y given as 1-D array\"\nassert logistic_regression_predict(np.array([[-2.0, -2.0], [-1.0, -1.0], [1.0, 1.0], [2.0, 2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.5, -0.5], [1.5, 1.5]])) == [0, 1], \"test case 6 failed: 2-D symmetrical dataset\"\nassert logistic_regression_predict(np.array([[-3.0, -2.0], [-2.0, -1.5], [2.0, 1.5], [3.0, 2.0]]), np.array([[0], [0], [1], [1]]), np.array([[-2.5, -2.0], [2.5, 2.0]])) == [0, 1], \"test case 7 failed: slanted 2-D dataset\"\nassert logistic_regression_predict(np.array([[-5.0], [-4.0], [4.0], [5.0]]), np.array([[0], [0], [1], [1]]), np.array([[-4.5], [4.5]])) == [0, 1], \"test case 8 failed: distant points\"\nassert logistic_regression_predict(np.array([[-1.0], [-0.8], [0.8], [1.0]]), np.array([[0], [0], [1], [1]]), np.array([[-0.9], [0.9]])) == [0, 1], \"test case 9 failed: close points\"\nassert logistic_regression_predict(np.array([[-6.0, -3.0], [-4.0, -2.0], [4.0, 2.0], [6.0, 3.0]]), np.array([[0], [0], [1], [1]]), np.array([[-5.0, -2.5], [5.0, 2.5]])) == [0, 1], \"test case 10 failed: large-scale 2-D dataset\""}
{"task_id": 469, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return -1.\n    \"\"\"\n\n    def f(x1, x2):\n        x1 = np.asarray(x1, dtype=np.float64)\n        x2 = np.asarray(x2, dtype=np.float64)\n        if x1.shape[0] != x2.shape[0]:\n            return -1\n        return np.inner(x1, x2).item()\n    return f\nk = linear_kernel(); assert k([1, 2, 3], [4, 5, 6]) == 32.0, \"test case failed: k([1,2,3],[4,5,6])\"\nk = linear_kernel(); assert k([-1, 2], [3, -4]) == -11.0, \"test case failed: k([-1,2],[3,-4])\"\nk = linear_kernel(); assert k([0, 0], [0, 0]) == 0.0, \"test case failed: k([0,0],[0,0])\"\nk = linear_kernel(); assert k([1.5, 2.5], [3.0, -1.0]) == 2.0, \"test case failed: k([1.5,2.5],[3.0,-1.0])\"\nk = linear_kernel(); assert k([1, 2, 3], [1, 2]) == -1, \"test case failed: k([1,2,3],[1,2])\"\nk = linear_kernel(); assert k(np.array([1, 2, 3]), np.array([4, 5, 6])) == 32.0, \"test case failed: arrays input\"\nk = linear_kernel(); assert k(list(range(5)), list(range(5))) == 30.0, \"test case failed: k(range5,range5)\"\nx = np.arange(100); k = linear_kernel(); assert k(x, x) == float(np.dot(x, x)), \"test case failed: large vector\"\nk = linear_kernel(); assert k([1, -1, 1, -1], [-1, 1, -1, 1]) == -4.0, \"test case failed: alternating signs\"\nk = linear_kernel(); assert k([3], [4]) == 12.0, \"test case failed: single element vectors\""}
{"task_id": 470, "completion_id": 0, "passed": false, "result": "failed: failed on root-level file", "solution": "import os\nimport os\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory \"/\").\n    \"\"\"\n    canonical_path = os.path.abspath(file_path)\n    canonical_path = os.path.realpath(canonical_path)\n    directory = os.path.dirname(canonical_path)\n    if directory == '':\n        return '/'\n    elif directory.endswith(os.sep):\n        directory = directory[:-1]\n    return directory\nassert get_scriptdir(\"/home/alice/project/script.py\") == \"/home/alice/project\", \"failed on /home/alice/project/script.py\"\nassert get_scriptdir(\"/home/alice/project/src/../script.py\") == \"/home/alice/project\", \"failed on path with .. segments\"\nassert get_scriptdir(\"/tmp/script\") == \"/tmp\", \"failed on /tmp/script\"\nassert get_scriptdir(\"/script.py\") == \"/\", \"failed on root-level file\"\nassert get_scriptdir(\"/a/./b/./c/d.txt\") == \"/a/b/c\", \"failed on path with . segments\"\nassert get_scriptdir(\"/etc//passwd\") == \"/etc\", \"failed on path with repeated separator\"\nassert get_scriptdir(\"/var/log/../log/nginx/access.log\") == \"/var/log/nginx\", \"failed on /var/log/../log/nginx/access.log\"\nassert get_scriptdir(\"/opt/\") == \"/\", \"failed on directory path ending with separator\"\nassert get_scriptdir(\"/single\") == \"/\", \"failed on single component under root\"\nassert get_scriptdir(\"/home/user/docs/../../photos/./pic.jpg\") == \"/home/photos\", \"failed on complex mixed path\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: test4 failed", "solution": "import numpy as np\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"\n    One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    A = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q_value = max(q_table[next_state])\n        greedy_actions = [a for a in range(A) if q_table[next_state][a] == max_q_value]\n        expected_q = 0.0\n        for a in range(A):\n            if a in greedy_actions:\n                prob = 1 - epsilon + epsilon / A\n            else:\n                prob = epsilon / A\n            expected_q += prob * q_table[next_state][a]\n        target = reward + gamma * expected_q\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(q, 4) for q in row] for row in q_table]\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
{"task_id": 472, "completion_id": 0, "passed": false, "result": "failed: failed on large positives", "solution": "import numpy as np\nimport numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    x_np = np.array(x)\n    if x_np.ndim == 1:\n        x_np = x_np.reshape(1, -1)\n    max_vals = np.max(x_np, axis=1, keepdims=True)\n    x_stable = x_np - max_vals\n    exp_x = np.exp(x_stable)\n    sum_exp = np.sum(exp_x, axis=1, keepdims=True)\n    probabilities = exp_x / sum_exp\n    gradient = probabilities * (1 - probabilities)\n    probabilities_rounded = np.round(probabilities, 4).tolist()\n    gradient_rounded = np.round(gradient, 4).tolist()\n    if x_np.ndim == 1:\n        probabilities_rounded = probabilities_rounded[0]\n        gradient_rounded = gradient_rounded[0]\n    return (probabilities_rounded, gradient_rounded)\nassert softmax([1000, 1001]) == ([0.2689, 0.7311], [0.1966, 0.1966]), \"failed on large positives\"\nassert softmax([[0, 0], [0, 0]]) == ([[0.5, 0.5], [0.5, 0.5]], [[0.25, 0.25], [0.25, 0.25]]), \"failed on zeros matrix\"\nassert softmax([[0], [1], [2]]) == ([[1.0], [1.0], [1.0]], [[0.0], [0.0], [0.0]]), \"failed on column vector\"\nassert softmax([0, 0, 0, 0]) == ([0.25, 0.25, 0.25, 0.25], [0.1875, 0.1875, 0.1875, 0.1875]), \"failed on uniform vector\"\nassert softmax([[2, 2, 2], [2, 2, 2]]) == ([[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]], [[0.2222, 0.2222, 0.2222], [0.2222, 0.2222, 0.2222]]), \"failed on identical rows\"\nassert softmax([10, -10]) == ([1.0, 0.0], [0.0, 0.0]), \"failed on extreme gap\"\nassert softmax([[5]]) == ([[1.0]], [[0.0]]), \"failed on single element 2-D\""}
{"task_id": 474, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.empty((m * n_train, 2))\n    X_val = np.empty((m * n_val, 2))\n    Y_train = np.empty((m * n_train,), dtype=int)\n    Y_val = np.empty((m * n_val,), dtype=int)\n    for i in range(m):\n        x_start = (i // 2 + 0.1) * 10\n        x_end = (i // 2 + 0.9) * 10\n        y_start = (i % 2 * interval + 0.1) * 10\n        y_end = (i % 2 * interval + 0.9) * 10\n        for j in range(n_train):\n            x = random.uniform(x_start, x_end)\n            y = random.uniform(y_start, y_end)\n            X_train[i * n_train + j] = [round(x, 4), round(y, 4)]\n            Y_train[i * n_train + j] = int((i - 0.5) * 2)\n        for j in range(n_val):\n            x = random.uniform(x_start, x_end)\n            y = random.uniform(y_start, y_end)\n            X_val[i * n_val + j] = [round(x, 4), round(y, 4)]\n            Y_val[i * n_val + j] = int((i - 0.5) * 2)\n    return (X_train, X_val, Y_train, Y_val)\nassert generate_data(2, 2, 1, 1, seed=0)[0].tolist() == [[7.7554, 7.0636], [4.3646, 3.0713], [7.2704, 13.4265], [4.8128, 15.6671]], \"test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train\"\nassert generate_data(2, 1, 1, 1, seed=1)[2].tolist() == [-1, 1], \"test case failed: generate_data(2,1,1,1,seed=1) \u2013 Y_train\"\nassert generate_data(2, 3, 0, 1, seed=0)[0].shape == (6, 2), \"test case failed: generate_data(2,3,0,1,seed=0) \u2013 shapes\"\nassert generate_data(3, 2, 1, 0.5, seed=3)[2].shape == (6,), \"test case failed: generate_data(3,2,1,0.5,seed=3) \u2013 label shape\"\nassert generate_data(4, 1, 0, 1, seed=4)[1].size == 0, \"test case failed: generate_data(4,1,0,1,seed=4) \u2013 empty validation\"\nassert len(set(generate_data(5, 2, 2, 1, seed=6)[2].tolist())) == 5, \"test case failed: unique labels\"\nassert not np.array_equal(generate_data(2, 2, 0, 1, seed=7)[0], generate_data(2, 2, 0, 1, seed=8)[0]), \"test case failed: different seeds\"\nassert generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==1][:,1].min() - generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==-1][:,1].max() >= 20, \"test case failed: interval separation\"\nassert isinstance(generate_data(2, 1, 1, 1, seed=10)[0], np.ndarray), \"test case failed: return type\"\nassert generate_data(2, 1, 1, 1, seed=0)[0].dtype == float, \"test case failed: dtype check\""}
{"task_id": 475, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not subscriptable", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"\n    Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    m_prev = np.zeros_like(grad) if m_prev is None else m_prev\n    v_prev = np.zeros_like(grad) if v_prev is None else v_prev\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    beta1_pow = b1 ** t\n    beta2_pow = b2 ** t\n    m_hat = m_t / (1 - beta1_pow)\n    v_hat = v_t / (1 - beta2_pow)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    m_new = m_t\n    v_new = v_t\n    return (w_new, m_new, v_new)\nimport numpy as np\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1)[0], 0.999000001, atol=1e-8), \"failed: scalar, t=1, positive grad\"\nassert np.allclose(adam_update(1.0, -0.1, 0.0, 0.0, 1)[0], 1.000999999, atol=1e-8), \"failed: scalar, t=1, negative grad\"\nw_vec, m_vec, v_vec = adam_update(np.array([1.0, -1.0]), np.array([0.2, -0.2]), np.zeros(2), np.zeros(2), 1)\nassert np.allclose(w_vec, np.array([0.999, -0.999]), atol=1e-8), \"failed: vector, t=1\"\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1, learning_rate=0.01)[0], 0.990000001, atol=1e-8), \"failed: different learning rate\"\nassert np.allclose(adam_update(1.0, 0.0, 0.0, 0.0, 1)[0], 1.0, atol=1e-12), \"failed: zero gradient gives no update\"\nw6, m6, v6 = adam_update(2.5, -0.5, 0.0, 0.0, 1)\nassert np.allclose([w6, m6, v6], [2.501, -0.05, 0.00025], atol=1e-8), \"failed: scalar, large grad\"\nw7, m7, v7 = adam_update(0.999000001, 0.1, 0.01, 1e-5, 2)\nassert np.allclose([w7, m7, v7[...]], [0.998000002, 0.019, 1.999e-5], atol=1e-8), \"failed: scalar, t=2\"\nvec_prev_m = np.array([0.02, -0.02])\nvec_prev_v = np.array([4e-5, 4e-5])\nwv, mv, vv = adam_update(np.array([0.999, -0.999]), np.array([0.2, -0.2]), vec_prev_m, vec_prev_v, 2)\nassert np.allclose(wv, np.array([0.998, -0.998]), atol=1e-8), \"failed: vector, t=2\"\nassert np.allclose(adam_update(5.0, 0.0, None, None, 3)[1:], (0.0, 0.0), atol=1e-12), \"failed: None moments treated as zeros\""}
{"task_id": 477, "completion_id": 0, "passed": true, "result": "passed", "solution": "import heapq\nimport heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or -1 if the destination is unreachable.\n    \"\"\"\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    (rows, cols) = (len(grid), len(grid[0]))\n    if grid[start[0]][start[1]] == 1 or grid[dest[0]][dest[1]] == 1:\n        return -1\n    pq = []\n    heapq.heappush(pq, (0, 0, start[0], start[1]))\n    visited = {}\n    visited[start[0], start[1]] = 0\n    while pq:\n        (f_score, g_score, r, c) = heapq.heappop(pq)\n        if (r, c) == dest:\n            return g_score\n        if (r, c) in visited and visited[r, c] < g_score:\n            continue\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < rows and 0 <= nc < cols and (grid[nr][nc] == 0):\n                new_g_score = g_score + 1\n                h_score = abs(nr - dest[0]) + abs(nc - dest[1])\n                f_score_new = new_g_score + h_score\n                if (nr, nc) not in visited or new_g_score < visited[nr, nc]:\n                    visited[nr, nc] = new_g_score\n                    heapq.heappush(pq, (f_score_new, new_g_score, nr, nc))\n    return -1\nassert astar([[0, 0, 0], [1, 1, 0], [0, 0, 0]], (0, 0), (2, 2)) == 4, \"test case failed: simple 3\u00d73 grid\"\nassert astar([[0]], (0, 0), (0, 0)) == 0, \"test case failed: start equals destination\"\nassert astar([[0, 1], [1, 0]], (0, 0), (1, 1)) == -1, \"test case failed: unreachable destination\"\nassert astar([[0, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (3, 2)) == 5, \"test case failed: 4\u00d73 grid with obstacles\"\nassert astar([[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0]], (0, 0), (4, 4)) == 8, \"test case failed: 5\u00d75 mixed grid\"\nassert astar([[0, 1, 1], [0, 0, 0], [1, 1, 0]], (0, 0), (2, 2)) == 4, \"test case failed: narrow corridor\"\nassert astar([[0, 0], [0, 1]], (0, 0), (1, 1)) == -1, \"test case failed: destination is an obstacle\"\nassert astar([[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0]], (0, 0), (3, 3)) == 6, \"test case failed: 4\u00d74 grid with a detour\"\nassert astar([[0, 1, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (0, 2)) == 6, \"test case failed: central wall requiring long detour\"\ngrid10 = [[0]*10 for _ in range(10)]; assert astar(grid10, (0, 0), (9, 9)) == 18, \"test case failed: 10\u00d710 empty grid\""}
{"task_id": 478, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=float)\n    if X.size == 0:\n        return []\n    (n_samples, n_features) = X.shape\n    means = np.mean(X, axis=0)\n    squared_diffs = (X - means) ** 2\n    variances = np.sum(squared_diffs, axis=0) / n_samples\n    std_devs = np.sqrt(variances)\n    return [round(std_dev, 4) for std_dev in std_devs]\nassert calculate_std_dev([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2.4495, 2.4495, 2.4495], \"test case failed: equal spread 3\u00d73\"\nassert calculate_std_dev([[2, 2], [2, 2]]) == [0.0, 0.0], \"test case failed: constant columns\"\nassert calculate_std_dev([[1, 4], [2, 4], [3, 4]]) == [0.8165, 0.0], \"test case failed: mixed constant/varying\"\nassert calculate_std_dev([[10], [10], [10], [10]]) == [0.0], \"test case failed: single constant feature\"\nassert calculate_std_dev([[1, 2, 3, 4]]) == [0.0, 0.0, 0.0, 0.0], \"test case failed: single row\"\nassert calculate_std_dev([[0, 1], [1, 0]]) == [0.5, 0.5], \"test case failed: swapped values\"\nassert calculate_std_dev([[-1, -2], [-3, -4], [-5, -6]]) == [1.633, 1.633], \"test case failed: negative spread\"\nassert calculate_std_dev([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]) == [1.5, 1.5, 1.5], \"test case failed: float values\"\nassert calculate_std_dev([[1, 2], [3, 4], [5, 1], [2, 3]]) == [1.479, 1.118], \"test case failed: irregular data\"\nassert calculate_std_dev([]) == [], \"test case failed: empty dataset\""}
{"task_id": 479, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0]) if rewards else 0\n    values = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(num_arms)\n        else:\n            arm = np.argmax(values)\n        reward = rewards[t][arm]\n        counts[arm] += 1\n        values[arm] += (reward - values[arm]) / counts[arm]\n    return [round(val, 4) for val in values]\nassert epsilon_greedy_bandit([[1,0,0],[0,1,0],[1,0,0],[0,1,0],[1,0,0]],0,0.5,42) == [0.6,0.5,0.5], \"test case 1 failed\"\nassert epsilon_greedy_bandit([[0,1],[0,1],[0,1]],0,0) == [0.0,0.0], \"test case 2 failed\"\nassert epsilon_greedy_bandit([[1,0],[1,0],[1,0]],0,0.5) == [1.0,0.5], \"test case 3 failed\"\nassert epsilon_greedy_bandit([[0,0,1],[0,1,0],[1,0,0]],0,0) == [0.3333,0.0,0.0], \"test case 4 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,1],[0,1],[0,1]],0,0.1) == [0.0,1.0], \"test case 5 failed\"\nassert epsilon_greedy_bandit([[1],[0],[1],[1],[1]],0,0.5) == [0.8], \"test case 6 failed\"\nassert epsilon_greedy_bandit([[0,0,0],[0,0,1],[0,1,0],[0,0,1]],0,0.0) == [0.0,0.0,0.0], \"test case 7 failed\"\nassert epsilon_greedy_bandit([[0.5,1.0,0.2,0.2]],0,0.5) == [0.5,0.5,0.5,0.5], \"test case 8 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,0]],0,0.7) == [0.0,0.0], \"test case 9 failed\"\nassert epsilon_greedy_bandit([[1,1]],0,0.5) == [1.0,0.5], \"test case 10 failed\""}
{"task_id": 480, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mel_spectrogram(x: np.ndarray, window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    if alpha < 1:\n        x = np.convolve(x, [1, -alpha], mode='valid')\n    frame_width = round(window_duration * fs)\n    stride = round(stride_duration * fs)\n    num_frames = len(x) - frame_width + 1\n    if center:\n        pad_length = frame_width // 2\n        x = np.pad(x, (pad_length, pad_length), mode='constant')\n    frames = []\n    for i in range(0, len(x) - frame_width + 1, stride):\n        frame = x[i:i + frame_width]\n        frames.append(frame)\n\n    def get_window(window_type):\n        if window_type == 'hamming':\n            return np.hamming(frame_width)\n        elif window_type == 'hann':\n            return np.hanning(frame_width)\n        elif window_type == 'blackman_harris':\n            return np.blackman_harris(frame_width)\n        else:\n            raise ValueError(f'Unknown window type: {window_type}')\n    windows = get_window(window)\n    frames = [frame * window for (frame, window) in zip(frames, windows)]\n    N = frame_width\n    fft_size = N\n    power_spectrum = []\n    for frame in frames:\n        fft_result = np.fft.rfft(frame, fft_size)\n        power = np.abs(fft_result) ** 2 / N\n        power_spectrum.append(power)\n\n    def mel_to_hz(mel):\n        return 2595 * np.log10(1 + mel / 700)\n\n    def hz_to_mel(hz):\n        return 700 * (10 ** (hz / 2595) - 1)\n    mel_points = np.linspace(0, mel_to_hz(fs / 2), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    bins = np.round(hz_points * fft_size / fs).astype(int)\n    fbank = np.zeros((n_filters, len(power_spectrum)))\n    for i in range(n_filters):\n        for j in range(len(power_spectrum)):\n            (start, mid, end) = (bins[i], bins[i + 1], bins[i + 2])\n            if start > end:\n                continue\n            if j < start:\n                val = 0\n            elif j >= start and j < mid:\n                val = (j - start) / (mid - start)\n            elif j >= mid and j < end:\n                val = 1 - (j - mid) / (end - mid)\n            else:\n                val = 0\n            fbank[i, j] = val\n    filter_energies = np.dot(power_spectrum, fbank.T)\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=1, keepdims=True)\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    return (filter_energies, energy_per_frame)\nimport numpy as np\nrng = np.random.RandomState(0)  # deterministic pseudo-random numbers\nsig2 = np.ones(3200)\nsig3 = np.zeros(8000)\nsig4 = np.sin(2*np.pi*440*np.arange(0,0.1,1/8000))\nassert True, \"Function executed without errors when center=False\""}
{"task_id": 481, "completion_id": 0, "passed": false, "result": "failed: test case failed: example dataset", "solution": "import numpy as np\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    visited = [False] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        neighbors = []\n        for j in range(n_samples):\n            if i != j and np.linalg.norm(data[i] - data[j]) <= eps:\n                neighbors.append(j)\n        if len(neighbors) >= min_samples:\n            cluster_id += 1\n            for j in neighbors:\n                if not visited[j]:\n                    visited[j] = True\n                    labels[j] = cluster_id\n            queue = list(neighbors)\n            while queue:\n                current = queue.pop(0)\n                for j in range(n_samples):\n                    if not visited[j] and np.linalg.norm(data[current] - data[j]) <= eps:\n                        visited[j] = True\n                        labels[j] = cluster_id\n                        queue.append(j)\n        else:\n            labels[i] = -1\n    return labels\nassert dbscan(np.array([[1,1],[1.1,1.1],[0.9,1],[5,5],[5.2,5.1],[4.9,5],[8,0]]),0.3,2)==[0,0,0,1,1,1,-1],\"test case failed: example dataset\"\nassert dbscan(np.array([[0,0],[0.1,0],[0.05,0.05],[0.2,0.2]]),0.25,1)==[0,0,0,0],\"test case failed: single cluster with min_samples=1\"\nassert dbscan(np.array([[0,0],[5,5],[10,10]]),0.5,2)==[-1,-1,-1],\"test case failed: all noise\"\nassert dbscan(np.empty((0,2)),0.5,2)==[],\"test case failed: empty dataset\"\nassert dbscan(np.array([[0,0],[0,0],[0,0]]),0.01,2)==[0,0,0],\"test case failed: duplicate points cluster\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[0,0,0,0],\"test case failed: linear chain cluster\"\nassert dbscan(np.array([[0,0],[3,3],[0.1,0.1],[3.1,3.1],[6,6]]),0.25,2)==[0,1,0,1,-1],\"test case failed: two small clusters plus noise\"\nassert dbscan(np.array([[0,0],[0.05,0.05],[2,2],[2.05,2.05]]),0.1,2)==[0,0,1,1],\"test case failed: two tight clusters\""}
{"task_id": 482, "completion_id": 0, "passed": false, "result": "failed: failed: did not raise on negative label", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = int(np.max(y)) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('All labels must be non-negative and less than num_classes.')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    for i in range(len(y)):\n        result[i, y[i]] = 1\n    return result\nassert (to_categorical([0, 1, 2]) == np.array([[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: basic consecutive labels\"\nassert (to_categorical(np.array([2,0,1,2])) == np.array([[0,0,1],[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: shuffled labels\"\nassert (to_categorical([0,1,2], num_classes=5) == np.array([[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]])).all(), \"failed: extra unused columns\"\nassert (to_categorical([4], num_classes=5) == np.array([[0,0,0,0,1]])).all(), \"failed: single element\"\nassert (to_categorical((3,3,3)) == np.array([[0,0,0,1],[0,0,0,1],[0,0,0,1]])).all(), \"failed: tuple input\"\nassert (to_categorical(np.arange(6)) == np.eye(6, dtype=int)).all(), \"failed: arange sequence\"\nassert (to_categorical([1,1,1,1]) == np.array([[0,1],[0,1],[0,1],[0,1]])).all(), \"failed: duplicate labels\"\nassert to_categorical([], num_classes=0).shape == (0,0), \"failed: empty input with explicit classes\"\ntry:\n    to_categorical([0,2], num_classes=2)\n    assert False, \"failed: did not raise on out-of-range label\"\nexcept ValueError:\n    pass\ntry:\n    to_categorical([-1,0,1])\n    assert False, \"failed: did not raise on negative label\"\nexcept ValueError:\n    pass"}
{"task_id": 483, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    labels = np.array(labels)\n    if num_classes is None:\n        num_classes = int(np.max(labels)) + 1\n    one_hot = []\n    for label in labels:\n        vec = [0] * num_classes\n        vec[label] = 1\n        one_hot.append(vec)\n    return one_hot\nassert to_categorical([0, 1, 2]) == [[1,0,0],[0,1,0],[0,0,1]], \"test case failed: to_categorical([0, 1, 2])\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical(np.array([1,1,0])) == [[0,1],[0,1],[1,0]], \"test case failed: to_categorical(np.array([1,1,0]))\"\nassert to_categorical([3,3,3,3]) == [[0,0,0,1]]*4, \"test case failed: to_categorical([3,3,3,3])\"\nassert to_categorical([0]) == [[1]], \"test case failed: to_categorical([0])\"\nassert to_categorical([4,2], 6) == [[0,0,0,0,1,0],[0,0,1,0,0,0]], \"test case failed: to_categorical([4,2], 6)\"\nassert to_categorical(np.arange(5)) == [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], \"test case failed: to_categorical(np.arange(5))\"\nassert to_categorical([1,0,1,0]) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: to_categorical([1,0,1,0])\"\nassert to_categorical([2], 5) == [[0,0,1,0,0]], \"test case failed: to_categorical([2], 5)\"\nassert to_categorical([1,2,3,4], 5) == [[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], \"test case failed: to_categorical([1,2,3,4], 5)\""}
{"task_id": 484, "completion_id": 0, "passed": false, "result": "failed: test case failed: quadratic fit", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], degree: int, reg_factor: float=0.1, n_iterations: int=1000) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test: Inputs on which the trained model is evaluated.\n        degree: Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularization strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    def polynomial_features(X, degree):\n        \"\"\"Generate polynomial features up to given degree.\"\"\"\n        n_samples = X.shape[0]\n        phi = np.zeros((n_samples, 1 + degree))\n        for i in range(n_samples):\n            phi[i, 0] = 1.0\n            for d in range(1, degree + 1):\n                phi[i, d] = X[i] ** d\n        return phi\n    phi_train = polynomial_features(X_train, degree)\n    phi_test = polynomial_features(X_test, degree)\n    n_features = phi_train.shape[1]\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        z = np.sum(phi_train ** 2, axis=0)\n        rho = np.dot(phi_train, y_train - np.dot(phi_train, w))\n        rho -= reg_factor * w\n        for j in range(n_features):\n            if j == 0:\n                w[j] = rho[j] / z[j]\n            else:\n                w[j] = np.sign(rho[j]) * max(abs(rho[j]) - reg_factor, 0) / z[j]\n    predictions = np.dot(phi_test, w)\n    predictions = np.round(predictions, 4).tolist()\n    return predictions\nassert lasso_regression_predict([0, 1, 2], [1, 3, 7], [0, 1, 2], 2, 0.0) == [1.0, 3.0, 7.0], \"test case failed: quadratic fit\"\nassert lasso_regression_predict([0, 1, 2, 3], [0, 2, 4, 6], [0, 1, 2, 3], 1, 0.0) == [0.0, 2.0, 4.0, 6.0], \"test case failed: linear fit\"\nassert lasso_regression_predict([2, 4, 6], [3, 3, 3], [2, 4, 6], 3, 0.0) == [3.0, 3.0, 3.0], \"test case failed: constant function\"\nassert lasso_regression_predict([-1, 0, 1], [1, 0, 1], [-1, 0, 1], 2, 0.0) == [1.0, 0.0, 1.0], \"test case failed: symmetric quadratic\"\nassert lasso_regression_predict([0, 1, 2, 3], [1, 3, 5, 7], [0, 1, 2, 3], 1, 0.0) == [1.0, 3.0, 5.0, 7.0], \"test case failed: linear with intercept\"\nassert lasso_regression_predict([0, 1, 2], [0, 1, 8], [0, 1, 2], 3, 0.0) == [0.0, 1.0, 8.0], \"test case failed: cubic fit\"\nassert lasso_regression_predict([-3, -2, -1, 0, 1, 2, 3], [9, 4, 1, 0, 1, 4, 9], [-3, -2, -1, 0, 1, 2, 3], 2, 0.0) == [9.0, 4.0, 1.0, 0.0, 1.0, 4.0, 9.0], \"test case failed: wide quadratic\"\nassert lasso_regression_predict([0, 1], [1, 1], [0, 1], 1, 0.0) == [1.0, 1.0], \"test case failed: horizontal line\"\nassert lasso_regression_predict([2, 4], [5, 5], [2, 4], 2, 0.0) == [5.0, 5.0], \"test case failed: horizontal line (different X)\"\nassert lasso_regression_predict([-1, 1], [-1, 1], [-1, 1], 1, 0.0) == [-1.0, 1.0], \"test case failed: diagonal line\""}
{"task_id": 485, "completion_id": 0, "passed": false, "result": "failed: Failed test 1 \u2013 description example", "solution": "import numpy as np\nimport numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the train set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n\n    def build_tree(data_X, data_y, depth):\n        if depth == max_depth or len(data_y) < 2:\n            return {'type': 'leaf', 'value': np.mean(data_y)}\n        best_split = None\n        best_sse = float('inf')\n        for i in range(len(data_X) - 1):\n            split_point = data_X[i]\n            left_X = data_X[:i + 1]\n            right_X = data_X[i + 1:]\n            left_y = data_y[:i + 1]\n            right_y = data_y[i + 1:]\n            sse = np.sum((left_y - np.mean(left_y)) ** 2) + np.sum((right_y - np.mean(right_y)) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split_point\n        if best_split is None:\n            return {'type': 'leaf', 'value': np.mean(data_y)}\n        left_child = build_tree(left_X, left_y, depth + 1)\n        right_child = build_tree(right_X, right_y, depth + 1)\n        return {'type': 'internal', 'split_point': best_split, 'left': left_child, 'right': right_child}\n    tree = build_tree(X_train_np, y_train_np, 0)\n\n    def predict_tree(tree, x):\n        if tree['type'] == 'leaf':\n            return [tree['value']]\n        if x < tree['split_point']:\n            return predict_tree(tree['left'], x)\n        else:\n            return predict_tree(tree['right'], x)\n    predictions = []\n    for x in X_test:\n        prediction = predict_tree(tree, x)\n        predictions.append(prediction[0])\n    return predictions\nassert regression_tree_predict([1,2,3,4,5,6,7], [2,2,2,8,8,8,8], [2,3,5,7], 1) == [2.0,2.0,8.0,8.0], \"Failed test 1 \u2013 description example\"\nassert regression_tree_predict([1,2,3,4], [1,1,3,3], [1,3,4], 1) == [1.0,3.0,3.0], \"Failed test 2 \u2013 perfect binary split\"\nassert regression_tree_predict([1,2,3,4], [1,2,3,4], [1,3,4], 3) == [1.0,3.0,4.0], \"Failed test 3 \u2013 deeper splits\"\nassert regression_tree_predict([0,1,2,3], [5,5,5,5], [0,2,3], 2) == [5.0,5.0,5.0], \"Failed test 4 \u2013 constant target\"\nassert regression_tree_predict([], [], [1,2,3], 1) == [], \"Failed test 5 \u2013 empty training data\"\nassert regression_tree_predict([1,1,2,2,3,3], [1,1,2,2,3,3], [1.1,2.1,3.1], 2) == [1.0,2.0,3.0], \"Failed test 6 \u2013 duplicate X values\"\nassert regression_tree_predict([1,2,3,10,11,12], [1,1,1,2,2,2], [2,11], 4) == [1.0,2.0], \"Failed test 7 \u2013 two clusters\"\nassert regression_tree_predict([5,6], [7,9], [5,6], 5) == [7.0,9.0], \"Failed test 8 \u2013 tiny dataset\"\nassert regression_tree_predict([1,2,3], [3,4,5], [1,2,3], 0) == [4.0,4.0,4.0], \"Failed test 9 \u2013 depth 0\"\nassert regression_tree_predict([4,1,3,2], [4,1,3,2], [1,2,3,4], 2) == [1.0,2.0,3.0,4.0], \"Failed test 10 \u2013 unsorted inputs\""}
{"task_id": 486, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.size != y_pred.size or y_true.size == 0:\n        return -1\n    squared_diffs = (y_true - y_pred) ** 2\n    mse = np.mean(squared_diffs)\n    return round(mse, 4)\nassert mean_squared_error([1, 2, 3], [1, 2, 3]) == 0.0, \"Failed on identical lists\"\nassert mean_squared_error([1, 2, 3], [1, 2, 4]) == 0.3333, \"Failed on basic example\"\nassert mean_squared_error([0.1, 0.2, 0.3], [0.1, 0.25, 0.35]) == 0.0017, \"Failed on float inputs\"\nassert mean_squared_error([5], [3]) == 4.0, \"Failed on single-element inputs\"\nassert mean_squared_error([], []) == -1, \"Failed on empty inputs\"\nassert mean_squared_error([1, 2, 3], [1, 2]) == -1, \"Failed on length mismatch\"\nimport numpy as np\narr1 = np.array([2, 4, 6, 8])\narr2 = np.array([1, 3, 5, 7])\nassert mean_squared_error(arr1, arr2) == 1.0, \"Failed on NumPy arrays\"\nassert mean_squared_error((1, 2, 3, 4), (4, 3, 2, 1)) == 5.0, \"Failed on tuple inputs\""}
{"task_id": 487, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int=300, tol: float=0.0001) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    centroids = X[:k].copy()\n    cluster_assignments = np.zeros(X.shape[0], dtype=int)\n    for iteration in range(max_iters):\n        distances = np.sqrt(np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2))\n        cluster_assignments = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            mask = cluster_assignments == i\n            if np.any(mask):\n                new_centroids[i] = np.mean(X[mask], axis=0)\n        delta = np.linalg.norm(centroids - new_centroids)\n        if delta < tol:\n            break\n        centroids = new_centroids\n    return cluster_assignments.tolist()\nassert k_means(np.array([[1, 1], [5, 5], [1.2, 0.9], [6, 5.1]]), 2) == [0, 1, 0, 1], \"test case 1 failed\"\nassert k_means(np.array([[0, 0], [0, 1], [5, 5], [5, 4], [9, 9], [9, 10]]), 3) == [0, 1, 2, 2, 2, 2], \"test case 2 failed\"\nassert k_means(np.array([[0, 0], [1, 1], [2, 2]]), 1) == [0, 0, 0], \"test case 3 failed\"\nassert k_means(np.array([[0, 0], [1, 1], [2, 2]]), 3) == [0, 1, 2], \"test case 4 failed\"\nassert k_means(np.array([[1, 0, 0], [10, 0, 0], [1, 10, 0], [10, 10, 0], [1, 0, 10], [10, 0, 10]]), 2) == [0, 1, 0, 1, 0, 1], \"test case 5 failed\"\nassert k_means(np.array([[0, 0], [5, 0], [0, 5], [5, 5]]), 2) == [0, 1, 0, 1], \"test case 6 failed\"\nassert k_means(np.array([[0, 0], [10, 0], [0, 10], [10, 10]]), 3) == [0, 1, 2, 1], \"test case 7 failed\"\nassert k_means(np.array([[i, 0] for i in range(5)]), 5) == [0, 1, 2, 3, 4], \"test case 8 failed\"\nassert k_means(np.array([[0], [10], [20]]), 2) == [0, 1, 1], \"test case 9 failed\"\nassert k_means(np.array([[0, 0], [0, 10], [20, 0], [20, 10]]), 2) == [0, 1, 0, 1], \"test case 10 failed\""}
{"task_id": 488, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)) or len(X.shape) != 2:\n        return -1\n    if len(X) == 0 or len(X) < 1:\n        return -1\n    X_np = np.array(X)\n    mean = np.mean(X_np, axis=0)\n    squared_diff = (X_np - mean) ** 2\n    variance = np.mean(squared_diff, axis=0)\n    return [round(var, 4) for var in variance]\nassert calculate_variance([[1,2,3],[4,5,6],[7,8,9]]) == [6.0, 6.0, 6.0], \"test case failed: calculate_variance([[1,2,3],[4,5,6],[7,8,9]])\"\nassert calculate_variance([[0,0],[1,1],[2,2],[3,3]]) == [1.25, 1.25], \"test case failed: calculate_variance([[0,0],[1,1],[2,2],[3,3]])\"\nassert calculate_variance([[4,5,6]]) == [0.0, 0.0, 0.0], \"test case failed: single sample\"\nassert calculate_variance([[1],[2],[3],[4]]) == [1.25], \"test case failed: single column\"\nassert calculate_variance([[0,0,0],[0,0,0]]) == [0.0, 0.0, 0.0], \"test case failed: zeros\"\nassert calculate_variance([[-1,-2,-3],[-4,-5,-6]]) == [2.25, 2.25, 2.25], \"test case failed: negative numbers\"\nassert calculate_variance([[1,2],[1,2],[1,2]]) == [0.0, 0.0], \"test case failed: identical rows\"\nassert calculate_variance([[2,4,6,8],[1,3,5,7],[0,2,4,6]]) == [0.6667, 0.6667, 0.6667, 0.6667], \"test case failed: varied features\"\nassert calculate_variance([]) == -1, \"test case failed: empty input\""}
{"task_id": 489, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object has no attribute 'count'", "solution": "import numpy as np\nimport numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer -1.\n    \"\"\"\n    if isinstance(one_hot, np.ndarray):\n        if one_hot.ndim != 2:\n            return -1\n        (rows, cols) = one_hot.shape\n    else:\n        if not all((isinstance(row, list) for row in one_hot)):\n            return -1\n        rows = len(one_hot)\n        cols = len(one_hot[0]) if rows > 0 else 0\n    if cols == 0:\n        return -1\n    for row in one_hot:\n        if len(row) != cols:\n            return -1\n    for i in range(rows):\n        row = one_hot[i]\n        if sum(row) != 1:\n            return -1\n        if row.count(1) != 1:\n            return -1\n    result = []\n    for i in range(rows):\n        row = one_hot[i]\n        result.append(row.index(1))\n    return result\nassert to_nominal([[0,1,0],[1,0,0],[0,0,1]]) == [1,0,2], \"failed on simple 3-class example\"\nassert to_nominal(np.array([[1,0,0,0],[0,0,1,0]])) == [0,2], \"failed on NumPy input\"\nassert to_nominal([[0,0,1]]) == [2], \"failed on single sample\"\nassert to_nominal([[0,0,0]]) == -1, \"did not detect all-zero row\"\nassert to_nominal([[0,1,1]]) == -1, \"did not detect multiple ones in a row\"\nassert to_nominal([[2,0,0]]) == -1, \"did not detect non-binary value\"\nassert to_nominal([[0,1,0],[0,0,0],[1,0,0]]) == -1, \"did not detect mixed validity\"\nassert to_nominal([[0,1]]) == [1], \"failed on two-class case\"\nassert to_nominal(np.array([[0,0,0,1],[0,1,0,0],[1,0,0,0]])) == [3,1,0], \"failed on 4-class NumPy\"\nassert to_nominal(np.zeros((2,3))) == -1, \"did not detect all-zero matrix\""}
{"task_id": 490, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_np = np.array(x)\n    diagonal_matrix = np.diag(x_np)\n    return diagonal_matrix.tolist()\nassert make_diagonal([1, 2, 3]) == [[1, 0, 0], [0, 2, 0], [0, 0, 3]], \"test case failed: make_diagonal([1, 2, 3])\"\nassert make_diagonal([5]) == [[5]], \"test case failed: make_diagonal([5])\"\nassert make_diagonal([]) == [], \"test case failed: make_diagonal([])\"\nassert make_diagonal((0, 0, 0, 0)) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], \"test case failed: make_diagonal((0, 0, 0, 0))\"\nassert make_diagonal(np.array([3.5, -2.1])) == [[3.5, 0.0], [0.0, -2.1]], \"test case failed: make_diagonal(np.array([3.5, -2.1]))\"\nassert make_diagonal([1, -1, 1, -1]) == [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, -1]], \"test case failed: make_diagonal([1, -1, 1, -1])\"\nassert make_diagonal(np.arange(4)) == [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]], \"test case failed: make_diagonal(np.arange(4))\"\nassert make_diagonal([1.1, 2.2, 3.3]) == [[1.1, 0.0, 0.0], [0.0, 2.2, 0.0], [0.0, 0.0, 3.3]], \"test case failed: make_diagonal([1.1, 2.2, 3.3])\"\nassert make_diagonal(tuple(range(6))) == [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5]], \"test case failed: make_diagonal(tuple(range(6)))\"\nassert make_diagonal(np.array([])) == [], \"test case failed: make_diagonal(np.array([]))\""}
{"task_id": 491, "completion_id": 0, "passed": false, "result": "failed: maximum recursion depth exceeded", "solution": "from collections import Counter, defaultdict\nimport itertools\nfrom collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_items = [item for (item, count) in item_counts.items() if count >= min_sup]\n    sorted_transactions = []\n    for transaction in transactions:\n        sorted_transaction = sorted(transaction, key=lambda x: -item_counts[x])\n        sorted_transactions.append(sorted_transaction)\n\n    class FPNode:\n\n        def __init__(self, item, count=1, parent=None, children=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = children or {}\n            self.next = None\n\n        def __repr__(self):\n            return f'FPNode({self.item}, {self.count})'\n\n    class FPTable:\n\n        def __init__(self):\n            self.header_table = {}\n            self.root = FPNode(None)\n\n        def add(self, transaction):\n            node = self.root\n            for item in transaction:\n                if item not in self.header_table:\n                    self.header_table[item] = FPNode(item)\n                while node.next and node.next.item != item:\n                    node = node.next\n                if node.next and node.next.item == item:\n                    node = node.next\n                else:\n                    node.next = FPNode(item, parent=node)\n                    node = node.next\n                node.count += 1\n\n        def get_header_table(self):\n            return self.header_table\n    fp_tree = FPTable()\n    for transaction in sorted_transactions:\n        fp_tree.add(transaction)\n\n    def generate_frequent_item_sets(header_table, prefix=None):\n        if not prefix:\n            prefix = []\n        items = list(header_table.keys())\n        items.sort()\n        frequent_item_sets = []\n        if not items:\n            if prefix:\n                frequent_item_sets.append(tuple(sorted(prefix)))\n            return frequent_item_sets\n        for item in items:\n            conditional_pattern_base = get_conditional_pattern_base(header_table, item)\n            conditional_tree = build_conditional_tree(conditional_pattern_base)\n            if len(conditional_tree.header_table) == 1:\n                path_items = []\n                node = conditional_tree.root\n                while node.item is not None:\n                    path_items.append(node.item)\n                    node = node.next\n                for r in range(1, len(path_items) + 1):\n                    for combo in itertools.combinations(path_items, r):\n                        frequent_item_sets.append(tuple(sorted(list(combo))))\n            else:\n                new_prefix = prefix + [item]\n                frequent_item_sets.extend(generate_frequent_item_sets(conditional_tree.header_table, new_prefix))\n        return frequent_item_sets\n\n    def get_conditional_pattern_base(header_table, item):\n        conditional_pattern_base = []\n        for transaction in sorted_transactions:\n            if item in transaction:\n                filtered_transaction = [x for x in transaction if x != item]\n                conditional_pattern_base.append(filtered_transaction)\n        return conditional_pattern_base\n\n    def build_conditional_tree(pattern_base):\n        conditional_tree = FPTable()\n        for transaction in pattern_base:\n            sorted_transaction = sorted(transaction, key=lambda x: -item_counts[x])\n            conditional_tree.add(sorted_transaction)\n        return conditional_tree\n    frequent_item_sets = generate_frequent_item_sets(fp_tree.header_table)\n    frequent_item_sets.sort(key=lambda x: (len(x), x))\n    return frequent_item_sets\nassert fp_growth([['A','B','D','E'],['B','C','E'],['A','B','D','E'],['A','B','C','E'],['A','B','C','D','E'],['B','C','D']],3)==[('A',),('B',),('C',),('D',),('E',),('A','B'),('A','D'),('A','E'),('B','C'),('B','D'),('B','E'),('C','E'),('D','E'),('A','B','D'),('A','B','E'),('A','D','E'),('B','C','E'),('B','D','E'),('A','B','D','E')],\"failed on classic example\"\nassert fp_growth([['milk','bread'],['bread','butter'],['milk','bread','butter'],['bread'],['milk','bread']],3)==[('bread',),('milk',),('bread','milk')],\"failed on bread/milk example\"\nassert fp_growth([[1],[2],[3]],2)==[],\"failed on no frequent items\"\nassert fp_growth([[1,2],[1,2],[1,2]],1)==[(1,),(2,),(1,2)],\"failed on min_sup 1\"\nassert fp_growth([[1,2,3,4]],1)==[(1,),(2,),(3,),(4,),(1,2),(1,3),(1,4),(2,3),(2,4),(3,4),(1,2,3),(1,2,4),(1,3,4),(2,3,4),(1,2,3,4)],\"failed on single transaction\"\nassert fp_growth([[1,2,3],[1,2,3],[1,2,3]],3)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed on identical transactions\"\nassert fp_growth([[1,2],[2,3],[1,3],[1,2,3]],2)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed on triangle dataset\"\nassert fp_growth([[\"x\",\"y\"],[\"x\",\"z\"],[\"y\",\"z\"],[\"x\",\"y\",\"z\"]],2)==[(\"x\",),(\"y\",),(\"z\",),(\"x\",\"y\"),(\"x\",\"z\"),(\"y\",\"z\")],\"failed on string xyz\"\nassert fp_growth([],2)==[],\"failed on empty transaction list\""}
{"task_id": 492, "completion_id": 0, "passed": false, "result": "failed: test case failed: ([[2,3]],2)", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X_np = np.array(X, dtype=np.float64)\n    (n_samples, n_features) = X_np.shape\n    all_indices = []\n    for total_degree in range(degree + 1):\n        for indices in combinations_with_replacement(range(n_features), total_degree):\n            all_indices.append(indices)\n    feature_matrix = []\n    for sample in X_np:\n        row = []\n        for indices in all_indices:\n            product = 1.0\n            for (i, power) in enumerate(indices):\n                product *= sample[i] ** power\n            row.append(product)\n        feature_matrix.append(row)\n    return feature_matrix\nassert polynomial_features([[2, 3]], 2) == [[1, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[2,3]],2)\"\nassert polynomial_features([[1, 2], [3, 4]], 1) == [[1, 1.0, 2.0], [1, 3.0, 4.0]], \"test case failed: ([[1,2],[3,4]],1)\"\nassert polynomial_features([[1], [2], [3]], 3) == [[1, 1.0, 1.0, 1.0], [1, 2.0, 4.0, 8.0], [1, 3.0, 9.0, 27.0]], \"test case failed: ([[1],[2],[3]],3)\"\nassert polynomial_features([[5, 0], [0, 5]], 0) == [[1], [1]], \"test case failed: ([[5,0],[0,5]],0)\"\nassert polynomial_features([[0, 0]], 3) == [[1] + [0.0]*9], \"test case failed: ([[0,0]],3)\"\nassert polynomial_features([[1, 2, 3]], 2) == [[1, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[1,2,3]],2)\"\nassert polynomial_features([[1, 2]], -1) == -1, \"test case failed: negative degree\"\nassert polynomial_features([[0.5, 1.5]], 2) == [[1, 0.5, 1.5, 0.25, 0.75, 2.25]], \"test case failed: ([[0.5,1.5]],2)\"\nassert polynomial_features([[1, 2], [3, 4], [5, 6]], 2) == [[1, 1.0, 2.0, 1.0, 2.0, 4.0], [1, 3.0, 4.0, 9.0, 12.0, 16.0], [1, 5.0, 6.0, 25.0, 30.0, 36.0]], \"test case failed: ([[1,2],[3,4],[5,6]],2)\"\nassert polynomial_features([[2, 1]], 3) == [[1, 2.0, 1.0, 4.0, 2.0, 1.0, 8.0, 4.0, 2.0, 1.0]], \"test case failed: ([[2,1]],3)\""}
{"task_id": 493, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y_array = np.array(y)\n    mean_y = np.mean(y_array)\n    mse_value = np.mean((y_array - mean_y) ** 2)\n    return round(mse_value, 4)\nassert mse([1, 2, 3]) == 0.6667, \"failed on mse([1, 2, 3])\"\nassert mse(np.array([0, 0, 0])) == 0.0, \"failed on mse([0,0,0])\"\nassert mse([-1, 1]) == 1.0, \"failed on mse([-1,1])\"\nassert mse([5]) == 0.0, \"failed on mse([5])\"\nassert mse([1, 3, 5, 7]) == 5.0, \"failed on mse([1,3,5,7])\"\nassert mse([2.5, 2.5, 2.5, 2.5]) == 0.0, \"failed on identical values\"\nassert mse(np.arange(10)) == 8.25, \"failed on np.arange(10)\"\nassert mse([]) == -1, \"failed on empty list\"\nassert mse(np.array([])) == -1, \"failed on empty np.array\"\nassert mse([100, -100, 0]) == 6666.6667, \"failed on mse([100,-100,0])\""}
{"task_id": 494, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(preds, list):\n        preds = np.array(preds)\n    if preds.ndim != 2:\n        raise ValueError('Input must be a 2D array or list of lists.')\n    (n_models, n_samples) = preds.shape\n    result = []\n    for i in range(n_samples):\n        sample_preds = preds[:, i]\n        if classifier:\n            counts = np.bincount(sample_preds.astype(int))\n            if len(counts) == 0:\n                result.append(0)\n            else:\n                class_label = np.argmax(counts)\n                result.append(class_label)\n        else:\n            avg = np.mean(sample_preds).round(4)\n            result.append(avg)\n    return result\nassert aggregate_predictions([[0, 1, 1], [1, 1, 0], [1, 0, 1]], True) == [1, 1, 1], \"failed: aggregate_predictions([...], True) case 1\"\nassert aggregate_predictions([[0, 1], [1, 0]], True) == [0, 0], \"failed: tie-breaking majority voting\"\nassert aggregate_predictions([[2, 2, 3], [3, 2, 3], [3, 3, 3]], True) == [3, 2, 3], \"failed: aggregate_predictions([...], True) case 3\"\nassert aggregate_predictions([[2.5, 3.0], [3.0, 4.0]], False) == [2.75, 3.5], \"failed: aggregate_predictions([...], False) case 4\"\nassert aggregate_predictions([[1.2, 2.2, 3.2], [1.8, 2.8, 3.8], [1.0, 2.0, 3.0]], False) == [1.3333, 2.3333, 3.3333], \"failed: aggregate_predictions([...], False) case 5\"\nassert aggregate_predictions([[1, 0, 1]], True) == [1, 0, 1], \"failed: single model classification\"\nassert aggregate_predictions([[4.123456]], False) == [4.1235], \"failed: single model regression rounding\"\nassert aggregate_predictions([[10, 20], [20, 10], [20, 20]], True) == [20, 20], \"failed: majority voting correctness\"\nassert aggregate_predictions([[-1.5, -2.5], [-2.5, -3.5]], False) == [-2.0, -3.0], \"failed: negative regression values\""}
{"task_id": 495, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    means = np.mean(X, axis=0)\n    stds = np.std(X, axis=0, ddof=0)\n    standardized = np.zeros_like(X, dtype=np.float64)\n    for i in range(X.shape[1]):\n        if stds[i] != 0:\n            standardized[:, i] = (X[:, i] - means[i]) / stds[i]\n        else:\n            standardized[:, i] = 0.0\n    standardized_rounded = np.round(standardized, 4)\n    return standardized_rounded.tolist()\nassert standardize(np.array([[1, 2], [3, 4], [5, 6]])) == [[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], \"failed on symmetric data\"\nassert standardize(np.array([[1, 2, 3], [1, 5, 3], [1, 8, 3]])) == [[0.0, -1.2247, 0.0], [0.0, 0.0, 0.0], [0.0, 1.2247, 0.0]], \"failed on zero-variance first & third columns\"\nassert standardize(np.array([[10, 10, 10]])) == [[0.0, 0.0, 0.0]], \"failed on single-row input\"\nassert standardize(np.array([[0, -1], [0, -1], [0, -1]])) == [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]], \"failed on identical rows\"\nassert standardize(np.array([[2, 4], [4, 4], [6, 4]])) == [[-1.2247, 0.0], [0.0, 0.0], [1.2247, 0.0]], \"failed on zero-variance second column\"\nassert standardize(np.array([[1], [2], [3], [4]])) == [[-1.3416], [-0.4472], [0.4472], [1.3416]], \"failed on single-column data\"\nassert standardize(np.array([[5, -5], [10, -10]])) == [[-1.0, 1.0], [1.0, -1.0]], \"failed on negative numbers\"\nassert standardize(np.array([[7, 7, 7], [7, 7, 7]])) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], \"failed on all-equal matrix\"\nassert standardize(np.array([[1, 2, 3], [4, 5, 6]])) == [[-1.0, -1.0, -1.0], [1.0, 1.0, 1.0]], \"failed on two-row input\"\nassert standardize(np.array([[2, 6], [4, 8], [6, 10]])) == [[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], \"failed on positive correlation columns\""}
{"task_id": 496, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x)\n    if x_array.ndim != 1:\n        raise ValueError('Input must be a 1-D array or list.')\n    y = slope * x_array + intercept\n    grad = np.full_like(y, slope)\n    grad2 = np.zeros_like(y)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)\nassert apply_affine([0, 1, 2], 2, 1) == ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0]), \"failed on ([0,1,2],2,1)\"\nassert apply_affine([-1, 0, 1], 0.5, -1) == ([-1.5, -1.0, -0.5], [0.5, 0.5, 0.5], [0.0, 0.0, 0.0]), \"failed on ([-1,0,1],0.5,-1)\"\nassert apply_affine([4]) == ([4.0], [1.0], [0.0]), \"failed on default params ([4])\"\nassert apply_affine([2, 4], -1, 0) == ([-2.0, -4.0], [-1.0, -1.0], [0.0, 0.0]), \"failed on negative slope\"\nassert apply_affine([0.1, 0.2], 3.3333, 0) == ([0.3333, 0.6667], [3.3333, 3.3333], [0.0, 0.0]), \"failed on fractional slope\"\nassert apply_affine([10, 20, 30], 0, 5) == ([5.0, 5.0, 5.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]), \"failed on zero slope\"\nassert apply_affine([1000, -1000], 0.1, 10) == ([110.0, -90.0], [0.1, 0.1], [0.0, 0.0]), \"failed on large magnitude inputs\"\nassert apply_affine([-7], -0.25, 2) == ([3.75], [-0.25], [0.0]), \"failed on single element negative slope\"\nassert apply_affine([0, 0, 0], 3, -2) == ([-2.0, -2.0, -2.0], [3.0, 3.0, 3.0], [0.0, 0.0, 0.0]), \"failed on zeros input\""}
{"task_id": 497, "completion_id": 0, "passed": false, "result": "failed: failed on activation 1D list", "solution": "import numpy as np\nimport numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        if order == 0:\n            result = np.exp(x)\n        elif order == 1:\n            result = np.exp(x)\n        elif order == 2:\n            result = np.exp(x)\n        else:\n            return -1\n    else:\n\n        def process_nested_list(data):\n            if isinstance(data, list):\n                return [process_nested_list(item) for item in data]\n            else:\n                return np.exp(data) if order in [0, 1, 2] else -1\n        processed = process_nested_list(x)\n        result_array = np.array(processed)\n        if order == 0:\n            result = np.exp(result_array)\n        elif order == 1:\n            result = np.exp(result_array)\n        elif order == 2:\n            result = np.exp(result_array)\n        else:\n            return -1\n    result_rounded = np.round(result, 6).tolist()\n    if not isinstance(x, np.ndarray):\n\n        def reconstruct_structure(data, result_data):\n            if isinstance(data, list):\n                return [reconstruct_structure(item, result_data[i]) for (i, item) in enumerate(data)]\n            else:\n                return result_data\n        return reconstruct_structure(x, result_rounded)\n    else:\n        return result_rounded\nassert exponential_activation([0, 1]) == [1.0, 2.718282], \"failed on activation 1D list\"\nassert exponential_activation([0, 1], 1) == [1.0, 2.718282], \"failed on first derivative 1D list\"\nassert exponential_activation([0, 1], 2) == [1.0, 2.718282], \"failed on second derivative 1D list\"\nassert exponential_activation([0, 1], 3) == -1, \"failed on invalid order\"\nassert exponential_activation([[0, 1], [2, -1]]) == [[1.0, 2.718282], [7.389056, 0.367879]], \"failed on 2D activation\"\nassert exponential_activation(np.array([[0, -2], [3.5, 4]]), 1) == [[1.0, 0.135335], [33.115452, 54.59815]], \"failed on ndarray first derivative\"\nassert exponential_activation(0) == 1.0, \"failed on scalar input activation\"\nassert exponential_activation(0, 2) == 1.0, \"failed on scalar input second derivative\"\nassert exponential_activation([-1, -1, -1]) == [0.367879, 0.367879, 0.367879], \"failed on repeated values\"\nassert exponential_activation([[1]]) == [[2.718282]], \"failed on single-element 2D list\""}
{"task_id": 498, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    x_array = np.array(x)\n    if order not in [0, 1, 2]:\n        return []\n    if order == 0:\n        result = np.where(x_array > 0, x_array, alpha * x_array)\n    elif order == 1:\n        result = np.where(x_array > 0, np.ones_like(x_array), alpha * np.ones_like(x_array))\n    elif order == 2:\n        result = np.zeros_like(x_array)\n    return result.tolist()\nassert leaky_relu([-2, -1, 0, 1, 2], 0.2, 0) == [-0.4, -0.2, 0.0, 1.0, 2.0], \"failed on basic forward values\"\nassert leaky_relu([-2, -1, 0, 1, 2], 0.2, 2) == [0.0, 0.0, 0.0, 0.0, 0.0], \"failed on second derivative\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 0) == [[-0.3, 2.0], [3.0, -1.2]], \"failed on 2D forward\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 1) == [[0.3, 1.0], [1.0, 0.3]], \"failed on 2D derivative\"\nassert leaky_relu([[ -1, 2 ], [ 3, -4 ]], 0.3, 2) == [[0.0, 0.0], [0.0, 0.0]], \"failed on 2D second derivative\"\nassert leaky_relu([1,2,3], 0.5, 3) == [], \"failed on invalid order handling\""}
{"task_id": 499, "completion_id": 0, "passed": false, "result": "failed: test case failed: k greater than features", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return [-1]\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    std[std == 0] = 1\n    standardised_data = (data - mean) / std\n    cov_matrix = np.cov(standardised_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_index = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_index]\n    sorted_eigenvectors = eigenvectors[:, sorted_index]\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projected_data = standardised_data @ sorted_eigenvectors[:, :k]\n    return np.round(projected_data, 4).tolist()\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[-1.7321], [0.0], [1.7321]], \"test case failed: basic 2D, k=1\"\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 2) == [[-1.7321, 0.0], [0.0, 0.0], [1.7321, 0.0]], \"test case failed: basic 2D, k=2\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[1.4142], [-1.4142]], \"test case failed: identity subset, k=1\"\nassert pca_transform(np.array([[2, 2], [2, 2]]), 1) == [[0.0], [0.0]], \"test case failed: zero variance, k=1\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 3) == -1, \"test case failed: k greater than features\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 0) == -1, \"test case failed: k equals zero\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 1) == [[-1.4142], [1.4142]], \"test case failed: diagonal line, k=1\"\nassert pca_transform(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == [[-2.1213], [0.0], [2.1213]], \"test case failed: collinear 3D, k=1\"\nassert pca_transform(np.array([[1, 2], [1, 2], [1, 2]]), 1) == [[0.0], [0.0], [0.0]], \"test case failed: identical rows\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 2) == [[-1.4142, 0.0], [1.4142, 0.0]], \"test case failed: diagonal line, k=2\""}
{"task_id": 500, "completion_id": 0, "passed": false, "result": "failed: failed: basic one-dimensional separation", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    F = np.mean(y_train)\n    residuals = y_train - F\n    stumps = []\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = float('inf')\n        for feature_idx in range(len(X_train[0])):\n            sorted_indices = np.argsort([x[feature_idx] for x in X_train])\n            for i in range(len(sorted_indices) - 1):\n                split_point = (X_train[sorted_indices[i]][feature_idx] + X_train[sorted_indices[i + 1]][feature_idx]) / 2\n                left_pred = 0\n                right_pred = 1\n                left_mask = [x[feature_idx] <= split_point for x in X_train]\n                right_mask = [not m for m in left_mask]\n                left_residuals = [residuals[i] for i in range(len(X_train)) if left_mask[i]]\n                right_residuals = [residuals[i] for i in range(len(X_train)) if right_mask[i]]\n                error = sum(((r - left_pred) ** 2 for r in left_residuals)) + sum(((r - right_pred) ** 2 for r in right_residuals))\n                if error < best_error:\n                    best_error = error\n                    best_stump = {'feature': feature_idx, 'threshold': split_point, 'left_pred': left_pred, 'right_pred': right_pred}\n        stumps.append(best_stump)\n        for i in range(len(X_train)):\n            if X_train[i][best_stump['feature']] <= best_stump['threshold']:\n                F += learning_rate * best_stump['left_pred']\n            else:\n                F += learning_rate * best_stump['right_pred']\n        residuals = y_train - F\n    predictions = []\n    for sample in X_test:\n        score = F\n        for stump in stumps:\n            if sample[stump['feature']] <= stump['threshold']:\n                score += learning_rate * stump['left_pred']\n            else:\n                score += learning_rate * stump['right_pred']\n        predictions.append(1 if score >= 0.5 else 0)\n    return predictions\nassert gradient_boosting_classifier([[0],[1],[2],[3]],[0,0,1,1],[[0],[3]],20,0.1)==[0,1],\"failed: basic one-dimensional separation\"\nassert gradient_boosting_classifier([[1],[2],[3],[10]],[0,0,1,1],[[2],[9]],15,0.2)==[0,1],\"failed: unequal gap separation\"\nassert gradient_boosting_classifier([[0],[1],[2],[3],[4]],[0,0,0,1,1],[[0.3],[3.7]],25,0.1)==[0,1],\"failed: threshold after three negatives\"\nassert gradient_boosting_classifier([[-3],[-2],[-1],[1],[2],[3]],[0,0,0,1,1,1],[[-2.5],[2.5]],20,0.1)==[0,1],\"failed: negatives versus positives\"\nassert gradient_boosting_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0.1,0.1],[2.5,2.5]],20,0.1)==[0,1],\"failed: two-feature data\"\nassert gradient_boosting_classifier([[i] for i in range(10)],[0]*5+[1]*5,[[0.5],[7.2]],30,0.05)==[0,1],\"failed: larger dataset\"\nassert gradient_boosting_classifier([[1],[1.1],[1.2],[4],[4.1],[4.2]],[0,0,0,1,1,1],[[1.3],[4.05]],25,0.1)==[0,1],\"failed: close clusters\"\nassert gradient_boosting_classifier([[0,5],[0,6],[1,5],[1,6],[10,5],[10,6],[11,5],[11,6]],[0,0,0,0,1,1,1,1],[[0.5,5.5],[10.5,5.5]],20,0.1)==[0,1],\"failed: two-feature well separated\"\nassert gradient_boosting_classifier([[-2],[-1],[0],[1],[2]],[0,0,0,1,1],[[-1.5],[1.5]],20,0.1)==[0,1],\"failed: centred split\"\nassert gradient_boosting_classifier([[0],[1],[2],[3]], [0,0,1,1], [[1.4],[1.6]], 20, 0.1)==[0,1],\"failed: borderline predictions\""}
{"task_id": 501, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr\nassert constant_scheduler(0.01, 0) == 0.01, \"Failed on (0.01, 0)\"\nassert constant_scheduler(0.01, 999) == 0.01, \"Failed on (0.01, 999)\"\nassert constant_scheduler(0.1, 5) == 0.1, \"Failed on (0.1, 5)\"\nassert constant_scheduler(1.0, 1000) == 1.0, \"Failed on (1.0, 1000)\"\nassert constant_scheduler(0.5, -1) == 0.5, \"Failed on (0.5, -1)\"\nassert constant_scheduler(0.0, 10) == 0.0, \"Failed on (0.0, 10)\"\nassert constant_scheduler(1e-6, 123) == 1e-6, \"Failed on (1e-6, 123)\"\nassert constant_scheduler(2.5, 0) == 2.5, \"Failed on (2.5, 0)\"\nassert constant_scheduler(3.1415, 42) == 3.1415, \"Failed on (3.1415, 42)\"\nassert constant_scheduler(0.007, 999999) == 0.007, \"Failed on (0.007, 999999)\""}
{"task_id": 502, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hard_sigmoid(z: np.ndarray, order: int=0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return []\n\n    def hard_sigmoid_func(x):\n        if x < -2.5:\n            return 0.0\n        elif x > 2.5:\n            return 1.0\n        else:\n            return 0.2 * x + 0.5\n\n    def first_derivative(x):\n        if -2.5 <= x <= 2.5:\n            return 0.2\n        else:\n            return 0.0\n\n    def second_derivative(x):\n        return 0.0\n    if order == 0:\n        result = np.array([hard_sigmoid_func(x) for x in z])\n    elif order == 1:\n        result = np.array([first_derivative(x) for x in z])\n    elif order == 2:\n        result = np.zeros_like(z)\n    return np.round(result, 4).tolist()\nassert hard_sigmoid(np.array([-3, -1, 0, 1, 3])) == [0.0, 0.3, 0.5, 0.7, 1.0], \"failed: activation basic\"\nassert hard_sigmoid(np.array([-2.5, 2.5])) == [0.0, 1.0], \"failed: activation boundaries\"\nassert hard_sigmoid(np.array([-2.6, 2.6])) == [0.0, 1.0], \"failed: activation outside boundaries\"\nassert hard_sigmoid(np.array([-2.4, 2.4])) == [0.02, 0.98], \"failed: activation inside boundaries\"\nassert hard_sigmoid(np.array([-3, -1, 0, 1, 3]), 1) == [0.0, 0.2, 0.2, 0.2, 0.0], \"failed: derivative basic\"\nassert hard_sigmoid(np.array([-2.5, 2.5]), 1) == [0.2, 0.2], \"failed: derivative boundaries\"\nassert hard_sigmoid(np.array([-2.6, 2.6]), 1) == [0.0, 0.0], \"failed: derivative outside\"\nassert hard_sigmoid(np.array([0]), 1) == [0.2], \"failed: derivative center\"\nassert hard_sigmoid(np.array([-10, 0, 10]), 2) == [0.0, 0.0, 0.0], \"failed: second derivative\"\nassert hard_sigmoid(np.array([1, 2, 3]), 99) == [], \"failed: invalid order\""}
{"task_id": 503, "completion_id": 0, "passed": true, "result": "passed", "solution": "from copy import deepcopy\nfrom copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    copied_hparams = deepcopy(hparams)\n    if updates is not None:\n        for (key, value) in updates.items():\n            if key in copied_hparams:\n                copied_hparams[key] = value\n    return copied_hparams\nassert selective_update({'lr': 0.1, 'momentum': 0.9}, {'lr': 0.01, 'weight_decay': 0.0001}) == {'lr': 0.01, 'momentum': 0.9}, \"failed: basic selective update\"\nassert selective_update({'lr': 0.1, 'momentum': 0.9}, None) == {'lr': 0.1, 'momentum': 0.9}, \"failed: updates is None\"\nassert selective_update(None, {'lr': 0.2}) == -1, \"failed: hparams is None\"\nassert selective_update({'a': 1}, {'b': 2}) == {'a': 1}, \"failed: update with non-existent key\"\nassert selective_update({}, {'anything': 1}) == {}, \"failed: empty hparams\"\nassert selective_update({'depth': 3, 'min_samples': 2}, {}) == {'depth': 3, 'min_samples': 2}, \"failed: empty updates\"\nassert selective_update({'x': {'y': 1}}, {'x': {'y': 2}}) == {'x': {'y': 2}}, \"failed: nested dictionary update\"\nassert selective_update({'alpha': 0.5, 'beta': 0.1}, {'alpha': 0.6, 'gamma': 1}) == {'alpha': 0.6, 'beta': 0.1}, \"failed: mixed valid/invalid keys\"\nassert selective_update({'only': 1}, {'only': 2, 'extra': 3}) == {'only': 2}, \"failed: extra key ignored\"\nassert selective_update({'k1': 5, 'k2': 6, 'k3': 7}, {'k1': 9, 'k2': 8}) == {'k1': 9, 'k2': 8, 'k3': 7}, \"failed: multiple key update\""}
{"task_id": 505, "completion_id": 0, "passed": false, "result": "failed: name 'h_k_prob' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = W.shape[1]\n    h0_prob = sigmoid(np.dot(X, W) + hbias[np.newaxis, :])\n    v_k_prob = X\n    for step in range(k):\n        h_prob = sigmoid(np.dot(v_k_prob, W) + hbias[np.newaxis, :])\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias[np.newaxis, :])\n        v_k_prob = v_prob\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_rounded = np.round(W_new, 4).tolist()\n    return W_rounded\ndef sigmoid(x):\n    \"\"\"Sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.1, 1) == [[0.1007, -0.1997], [-0.0003, 0.0499], [-0.1006, 0.199]], \"test case failed: mixed mini-batch update\"\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.0, 1) == [[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]], \"test case failed: learning_rate = 0 should keep weights unchanged\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 1.0, 1) == [[-0.25, -0.25], [-0.25, -0.25]], \"test case failed: zero input should drive weights negative\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 0.0, 1) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: no-update expected with lr=0\"\nassert contrastive_divergence(np.array([[1.0, 1.0]]), np.array([[0.0], [0.0]]), np.zeros(1), np.zeros(2), 0.1, 1) == [[0.025], [0.025]], \"test case failed: ones input update\"\nassert contrastive_divergence(np.array([[1.0, 0.0, 0.0]]), np.zeros((3, 1)), np.zeros(1), np.zeros(3), 1.0, 1) == [[0.25], [-0.25], [-0.25]], \"test case failed: directional update\"\nassert contrastive_divergence(np.array([[0.0, 1.0]]), np.zeros((2, 1)), np.zeros(1), np.zeros(2), 0.5, 1) == [[-0.125], [0.125]], \"test case failed: lr=0.5 update\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.1, 1) == [[0.0737]], \"test case failed: decay on inactive visible node\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.0, 1) == [[0.1]], \"test case failed: learning_rate 0 with 1\u00d71 matrix\"\nassert contrastive_divergence(np.array([[1.0]]), np.array([[0.0]]), np.zeros(1), np.zeros(1), 0.2, 1) == [[0.05]], \"test case failed: 1\u00d71 positive update with lr=0.2\""}
{"task_id": 508, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import Any, Dict, List\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    result = []\n    for key in params:\n        if name in key:\n            result.append(params[key])\n    return result\nassert params_with_name({'weight1': 0.2, 'bias': 1.0, 'weight2': 0.8}, 'weight') == [0.2, 0.8], \"Test case failed: basic filtering\"\nassert params_with_name({'w': 5, 'weight': 10, 'bias': 1}, 'weight') == [10], \"Test case failed: single match\"\nassert params_with_name({'Weight1': 7, 'weight2': 3}, 'weight') == [3], \"Test case failed: case sensitivity\"\nassert params_with_name({'a': 1, 'b': 2, 'c': 3}, '') == [1, 2, 3], \"Test case failed: empty substring should return all values\"\nassert params_with_name({'alpha': 1, 'beta': 2}, 'gamma') == [], \"Test case failed: no key contains substring\"\nassert params_with_name({}, 'anything') == [], \"Test case failed: empty dictionary\"\nassert params_with_name({'x_weight': 4, 'weight_y': 5, 'w_z': 6}, 'weight') == [4, 5], \"Test case failed: substring appears in multiple positions\"\nassert params_with_name({'one': 1, 'two': 2, 'three': 3}, 'o') == [1, 2], \"Test case failed: overlapping substring matches\"\nassert params_with_name({'first': 'a', 'second': 'b', 'third': 'c'}, 'ir') == ['a', 'c'], \"Test case failed: non-numeric values\"\nassert params_with_name({'abc': 1, 'def': 2, 'ghi': 3}, 'xyz') == [], \"Test case failed: substring not present in any key\""}
{"task_id": 509, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if not (x_np.ndim == 1 and y_np.ndim == 1):\n        return -1\n    if x_np.size != y_np.size:\n        return -1\n    differences = np.abs(x_np - y_np)\n    max_diff = np.max(differences)\n    return round(max_diff, 4)\nassert chebyshev([1, 2, 3], [2, 4, 6]) == 3.0, \"failed for ([1,2,3],[2,4,6])\"\nassert chebyshev([0, 0, 0], [0, 0, 0]) == 0.0, \"failed for zero vectors\"\nassert chebyshev([-1, -2, -3], [1, 2, 3]) == 6.0, \"failed for negatives\"\nassert chebyshev([1.5, 2.5], [1.4, 2.7]) == 0.2, \"failed for floats\"\nassert chebyshev(np.array([1, 2, 3]), np.array([1, 3, 5])) == 2.0, \"failed for numpy arrays\"\nassert chebyshev([1], [10]) == 9.0, \"failed for single-element vectors\"\nassert chebyshev([0.12345], [0.12344]) == 0.0, \"failed for rounding requirement\"\nassert chebyshev([1, 2, 3], [1, 2]) == -1, \"failed for length mismatch\""}
{"task_id": 510, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1))\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=1))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.9,0.2],[0.1,0.8]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.328504, \"test case failed: basic reconstruction only\"\nassert vae_loss(np.array([[1,1],[0,0]]),\n                 np.array([[0.8,0.7],[0.3,0.2]]),\n                 np.array([[0.2,-0.1],[-0.3,0.5]]),\n                 np.array([[-0.2,0.1],[0.1,-0.3]])) == 0.694791, \"test case failed: reconstruction + KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.5]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 0.693147, \"test case failed: single element, zero KL\"\nassert vae_loss(np.array([[1,0,1]]),\n                 np.array([[0.9,0.1,0.4]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 1.127012, \"test case failed: three features, no KL\"\nassert vae_loss(np.array([[1,0],[1,0]]),\n                 np.array([[0.7,0.3],[0.6,0.4]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.867501, \"test case failed: batch size 2, no KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.8]]),\n                 np.array([[0.5]]),\n                 np.array([[-0.1]])) == 0.350562, \"test case failed: single element with KL\"\nassert vae_loss(np.array([[0]]),\n                 np.array([[0.2]]),\n                 np.array([[0.0]]),\n                 np.array([[0.2]])) == 0.233845, \"test case failed: y=0 with KL\"\nassert vae_loss(np.array([[0,1,0,1]]),\n                 np.array([[0.2,0.9,0.4,0.8]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 1.062473, \"test case failed: four features, no KL\"\nassert vae_loss(np.array([[1,1,1]]),\n                 np.array([[0.5,0.5,0.5]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 2.079442, \"test case failed: three identical probabilities\"\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.55,0.45],[0.45,0.55]]),\n                 np.array([[0.1,-0.1],[0.2,0.3]]),\n                 np.zeros((2,2))) == 1.233174, \"test case failed: mixed KL values\""}
{"task_id": 511, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_bernoulli_mab(n_arms: int=10) -> list[float]:\n    \"\"\"Generate a random Bernoulli multi-armed bandit environment with n_arms arms.\n\n    Args:\n        n_arms (int, optional): Number of arms. Defaults to 10.\n\n    Returns:\n        list[float]: A list of success probabilities for each arm, rounded to 4 decimal places.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    samples = np.random.uniform(low=0, high=1, size=n_arms)\n    total = np.sum(samples)\n    normalized = samples / total\n    return [round(prob, 4) for prob in normalized]\nnp.random.seed(0); assert random_bernoulli_mab(5) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(0).uniform(size=5)), \"test failed: seed 0, n=5\"\nnp.random.seed(1); assert random_bernoulli_mab(10) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(1).uniform(size=10)), \"test failed: seed 1, n=10\"\nnp.random.seed(42); assert random_bernoulli_mab(3) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(42).uniform(size=3)), \"test failed: seed 42, n=3\"\nnp.random.seed(123); assert random_bernoulli_mab(7) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(123).uniform(size=7)), \"test failed: seed 123, n=7\"\nnp.random.seed(999); assert random_bernoulli_mab(4) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(999).uniform(size=4)), \"test failed: seed 999, n=4\"\nnp.random.seed(2021); assert random_bernoulli_mab(8) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(2021).uniform(size=8)), \"test failed: seed 2021, n=8\"\nnp.random.seed(314); assert random_bernoulli_mab(6) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(314).uniform(size=6)), \"test failed: seed 314, n=6\"\nnp.random.seed(1234); assert random_bernoulli_mab(2) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(1234).uniform(size=2)), \"test failed: seed 1234, n=2\"\nnp.random.seed(8888); assert random_bernoulli_mab(9) == (lambda p: np.round(p / p.sum(), 4).tolist())(np.random.RandomState(8888).uniform(size=9)), \"test failed: seed 8888, n=9\"\nnp.random.seed(77);  assert random_bernoulli_mab(1) == [1.0], \"test failed: seed 77, n=1\""}
{"task_id": 512, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    (n_images, n_channels, h, w) = image_shape\n    (k_h, k_w) = pool_shape\n    (s_h, s_w) = stride\n    if k_h > h or k_w > w:\n        return -1\n    try:\n        out_h = (h - k_h) // s_h + 1\n        out_w = (w - k_w) // s_w + 1\n    except ZeroDivisionError:\n        return -1\n    if (h - k_h) % s_h != 0 or (w - k_w) % s_w != 0:\n        return -1\n    return (out_h, out_w)\nassert pooling_shape((2, 2), (10, 3, 28, 28), (2, 2)) == (14, 14), \"failed on (2,2) kernel, (28,28) input, stride (2,2)\"\nassert pooling_shape((3, 3), (1, 1, 28, 28), (2, 2)) == -1, \"should fail because (28-3) is not divisible by 2\"\nassert pooling_shape((30, 3), (4, 5, 28, 28), (1, 1)) == -1, \"kernel taller than input height\"\nassert pooling_shape((3, 3), (2, 3, 32, 32), (1, 1)) == (30, 30), \"stride 1, 3x3 kernel on 32x32 input\"\nassert pooling_shape((8, 8), (2, 16, 64, 64), (8, 8)) == (8, 8), \"kernel equal to stride\"\nassert pooling_shape((3, 3), (1, 1, 7, 7), (2, 2)) == (3, 3), \"7x7 input with 3x3 kernel and stride 2\"\nassert pooling_shape((3, 5), (1, 1, 20, 20), (2, 2)) == -1, \"width not divisible\"\nassert pooling_shape((1, 1), (1, 1, 1, 1), (1, 1)) == (1, 1), \"trivial 1x1 case\"\nassert pooling_shape((2, 4), (3, 3, 10, 20), (2, 4)) == (5, 5), \"different strides for h and w\""}
{"task_id": 513, "completion_id": 0, "passed": false, "result": "failed: shapes (2,) and (3,2) not aligned: 2 (dim 0) != 3 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    linear_part = w0 + np.dot(X, w)\n    interaction_part = np.zeros(n_samples)\n    for f in range(k):\n        v_f = V[:, f]\n        dot_product = np.dot(X, v_f)\n        squared_dot = dot_product ** 2\n        v_squared = v_f ** 2\n        x_squared = X ** 2\n        sum_v_squared_x_squared = np.dot(v_squared, x_squared)\n        interaction_part += (squared_dot - sum_v_squared_x_squared) / 2\n    predictions = linear_part + interaction_part\n    return [round(pred, 4) for pred in predictions]\nassert fm_predict([[1, 0], [0, 1], [1, 1]], 0.5, [1, 2], [[0.1, 0.2], [0.3, 0.4]]) == [1.5, 2.5, 3.61], \"test case failed: basic example\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[1], [1]]) == [2.0], \"test case failed: interaction only\"\nassert fm_predict([[3, 4]], 1.0, [-1, -1], [[0, 0], [0, 0]]) == [-6.0], \"test case failed: no interactions\"\nassert fm_predict([[1, 1], [2, 2]], 0.0, [1, 1], [[0.5], [0.5]]) == [2.25, 5.0], \"test case failed: repeated sample\"\nassert fm_predict([[0, 0]], 0.0, [1, 2], [[0, 0], [0, 0]]) == [0.0], \"test case failed: all zeros\"\nassert fm_predict([[1, 3]], 2.0, [0, 1], [[-0.5], [0.5]]) == [4.25], \"test case failed: negative factors\"\nassert fm_predict([[1, 2, 3], [0, 1, 0]], 0.1, [1, -1, 0.5], [[0.2, 0.3], [0.4, 0.1], [0.5, 0.7]]) == [3.37, -0.9], \"test case failed: 3 features, 2 factors\"\nassert fm_predict([[2]], -1.0, [1], [[0.5]]) == [1.0], \"test case failed: single feature\"\nassert fm_predict([[1, 0], [0, 0], [0, 1]], 0.0, [1, 1], [[0, 0], [0, 0]]) == [1.0, 0.0, 1.0], \"test case failed: mixed zeros\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[0.5], [1.5]]) == [1.5], \"test case failed: fractional interaction\""}
{"task_id": 514, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    if current_phase not in ['training', 'testing']:\n        return -1\n    if set_train is not None and set_test is not None:\n        return -1\n    if set_train is None and set_test is None:\n        return 'testing' if current_phase == 'training' else 'training'\n    if set_train is not None:\n        if set_train:\n            return 'training'\n        else:\n            return 'testing'\n    if set_test is not None:\n        if set_test:\n            return 'testing'\n        else:\n            return 'training'\n    return -1\nassert switch_phase(\"training\", set_test=True) == \"testing\", \"failed: switch_phase('training', set_test=True)\"\nassert switch_phase(\"testing\", set_train=True) == \"training\", \"failed: switch_phase('testing', set_train=True)\"\nassert switch_phase(\"training\") == \"testing\", \"failed: switch_phase('training')\"\nassert switch_phase(\"testing\") == \"training\", \"failed: switch_phase('testing')\"\nassert switch_phase(\"training\", set_train=False) == \"testing\", \"failed: switch_phase('training', set_train=False)\"\nassert switch_phase(\"testing\", set_test=False) == \"training\", \"failed: switch_phase('testing', set_test=False)\"\nassert switch_phase(\"training\", set_train=True) == \"training\", \"failed: switch_phase('training', set_train=True)\"\nassert switch_phase(\"training\", set_train=True, set_test=False) == -1, \"failed: simultaneous switches should return -1\"\nassert switch_phase(\"validate\") == -1, \"failed: invalid phase string should return -1\"\nassert switch_phase(\"training\", set_test=True) == \"testing\", \"failed: set_test should override current phase\""}
{"task_id": 515, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Any, Dict\nfrom typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    result = {}\n\n    def _flatten(current_dict: Dict[str, Any], parent_key: str='') -> None:\n        for (key, value) in current_dict.items():\n            new_key = f'{parent_key}.{key}' if parent_key else key\n            if isinstance(value, dict):\n                _flatten(value, new_key)\n            else:\n                result[new_key] = value\n    _flatten(params)\n    return result\n# basic empty dictionary\\nassert flatten_parameters({}) == {}, \"failed on empty dict\"\n# single level\\nassert flatten_parameters({\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}, \"failed on single level dict\"\n# two levels\\nassert flatten_parameters({\"outer\": {\"inner\": 5}}) == {\"outer.inner\": 5}, \"failed on two level dict\"\n# multi level\\nassert flatten_parameters({\"x\": {\"y\": {\"z\": 0}}}) == {\"x.y.z\": 0}, \"failed on multi level dict\"\n# mixed types\\nassert flatten_parameters({\"a\": {\"b\": [1, 2, 3]}, \"c\": \"text\"}) == {\"a.b\": [1, 2, 3], \"c\": \"text\"}, \"failed on list and string values\"\n# keys containing dots\\nassert flatten_parameters({\"a.b\": {\"c\": 7}}) == {\"a.b.c\": 7}, \"failed when keys already contain dots\"\n# sibling branches\\nassert flatten_parameters({\"k1\": {\"x\": 1}, \"k2\": {\"y\": 2}}) == {\"k1.x\": 1, \"k2.y\": 2}, \"failed on sibling branches\"\n# boolean values\\nassert flatten_parameters({\"flag\": True, \"config\": {\"enabled\": False}}) == {\"flag\": True, \"config.enabled\": False}, \"failed on boolean values\"\n# numeric types\\nassert flatten_parameters({\"nums\": {\"int\": 1, \"float\": 2.5}}) == {\"nums.int\": 1, \"nums.float\": 2.5}, \"failed on numeric types\"\n# original dict not mutated\\norig = {\"a\": {\"b\": 1}}\\n_ = flatten_parameters(orig)\\nassert orig == {\"a\": {\"b\": 1}}, \"input dictionary was mutated\""}
{"task_id": 516, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    a_np = np.array(a)\n    b_np = np.array(b)\n    if a_np.shape[0] != b_np.shape[0]:\n        return -1\n    difference = a_np - b_np\n    squared_diff = difference ** 2\n    sum_squared_diff = np.sum(squared_diff)\n    distance = math.sqrt(sum_squared_diff)\n    return round(distance, 4)\nassert euclidean_distance([1, 2, 3], [4, 5, 6]) == 5.1962, \"failed on [1,2,3] vs [4,5,6]\"\nassert euclidean_distance(np.array([0, 0]), np.array([0, 0])) == 0.0, \"failed on identical zeros\"\nassert euclidean_distance([3, 4], [0, 0]) == 5.0, \"failed on 3-4-5 triangle\"\nassert euclidean_distance([-1, -1], [1, 1]) == 2.8284, \"failed on negative coordinates\"\nassert euclidean_distance([1.2, 3.4], [5.6, 7.8]) == 6.2225, \"failed on float inputs\"\nassert euclidean_distance([1, 2, 3], [1, 2]) == -1, \"failed on mismatched length\"\nassert euclidean_distance([1, 2, 3, 4, 5], [1, 1, 1, 1, 1]) == 5.4772, \"failed on 5-D vectors\"\nassert euclidean_distance([0.5, -0.5, 1.5], [-0.5, 0.5, -1.5]) == 3.3166, \"failed on mixed sign vectors\"\nassert euclidean_distance(np.array([10]), np.array([0])) == 10.0, \"failed on single-element arrays\"\nassert euclidean_distance([0, 0, 0], [0, 0, 0]) == 0.0, \"failed on all zeros\""}
{"task_id": 517, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    z_positive = z_array\n    z_negative = -z_array\n    mask = (z_array > 700) | (z_array < -700)\n    z_array[mask] = 0.0 if z_array[mask] < 0 else 1.0\n    sigmoid_values = 1 / (1 + np.exp(-z_array))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if isinstance(z, (int, float)):\n        return float(sigmoid_values[0])\n    else:\n        return sigmoid_values.tolist()\nassert sigmoid(0) == 0.5, \"test case failed: sigmoid(0)\"\nassert sigmoid(5) == 0.9933, \"test case failed: sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"test case failed: sigmoid(-5)\"\nassert sigmoid(100) == 1.0, \"test case failed: sigmoid(100)\"\nassert sigmoid(-100) == 0.0, \"test case failed: sigmoid(-100)\"\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test case failed: sigmoid([-1,0,1])\"\nassert sigmoid(np.array([2, -2, 0.5, -0.5])) == [0.8808, 0.1192, 0.6225, 0.3775], \"test case failed: sigmoid([2,-2,0.5,-0.5])\"\nassert sigmoid([[0, 10], [-10, 1]]) == [[0.5, 1.0], [0.0, 0.7311]], \"test case failed: sigmoid([[0,10],[-10,1]])\"\nassert sigmoid([700, -700]) == [1.0, 0.0], \"test case failed: sigmoid([700,-700])\"\nassert sigmoid(np.array([[3]])) == [[0.9526]], \"test case failed: sigmoid([[3]])\""}
{"task_id": 518, "completion_id": 0, "passed": false, "result": "failed: name '_accuracy' is not defined", "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nassert abs(_accuracy(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[0,1,0],[0,0,1]])) - 0.6667) < 1e-4, \"test case failed: accuracy with both inputs one-hot\"\nassert abs(_accuracy(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]])) - 1.0) < 1e-9, \"test case failed: perfect match one-hot\"\nassert abs(_accuracy(np.array([0,1,1,0]), np.array([[1,0],[0,1],[0,1],[1,0]])) - 1.0) < 1e-9, \"test case failed: actual labels, predicted one-hot\"\nassert abs(_accuracy(np.array([[0,0,1],[1,0,0],[0,1,0]]), np.array([2,0,1])) - 1.0) < 1e-9, \"test case failed: actual one-hot, predicted labels\"\nassert abs(_accuracy(np.array([[1,0],[0,1],[1,0],[0,1]]), np.array([[1,0],[1,0],[1,0],[0,1]])) - 0.75) < 1e-9, \"test case failed: two-class partial mismatch\"\nassert _collect(np.array([[2],[0],[1]]), np.array([[2],[0],[1]])) == ([[2],[0],[1]], [[2],[0],[1]]), \"test case failed: shape (n,1) should remain unchanged\"\nassert _collect(np.array([1,0,2]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2], [1,0,2]), \"test case failed: mixed dimensionalities\"\nassert _collect(np.eye(5, dtype=int), np.eye(5, dtype=int))[0] == [0,1,2,3,4], \"test case failed: five-class eye matrix\"\nassert _collect(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2],[1,0,2]), \"test case failed: explicit conversion check\"\nassert _collect(np.array([3,1,4,1,5]), np.array([3,1,4,1,5])) == ([3,1,4,1,5],[3,1,4,1,5]), \"test case failed: 1-D labels untouched\""}
{"task_id": 520, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        z = np.array(z)\n    grad = z * (1 - z)\n    grad = np.round(grad, 4)\n    if isinstance(z, np.ndarray):\n        return grad\n    elif isinstance(z, list):\n        return grad.tolist()\n    else:\n        return float(grad)\nassert sigmoid_grad(0.5) == 0.25, \"failed on scalar 0.5\"\nassert sigmoid_grad(0.8) == 0.16, \"failed on scalar 0.8\"\nassert sigmoid_grad([0.5, 0.8]) == [0.25, 0.16], \"failed on list [0.5,0.8]\"\nassert sigmoid_grad([[0.5, 0.4], [0.7, 0.3]]) == [[0.25, 0.24], [0.21, 0.21]], \"failed on 2D list\"\nassert sigmoid_grad(0.0) == 0.0, \"failed on boundary 0.0\"\nassert sigmoid_grad(1.0) == 0.0, \"failed on boundary 1.0\"\nassert sigmoid_grad([0.2, 0.4, 0.6, 0.8]) == [0.16, 0.24, 0.24, 0.16], \"failed on list [0.2,0.4,0.6,0.8]\"\nassert sigmoid_grad([0.7310586]) == [0.1966], \"failed on list [0.7310586]\"\nassert sigmoid_grad([]) == [], \"failed on empty list\"\nassert sigmoid_grad(np.array([[0.25, 0.75]])) == [[0.1875, 0.1875]], \"failed on numpy input\""}
{"task_id": 521, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    if isinstance(z, (int, float)) or (hasattr(z, 'shape') and z.ndim == 0):\n        return 1 if z > 0 else 0\n    z_array = np.array(z)\n    grad = np.where(z_array > 0, 1, 0)\n    if isinstance(z, list):\n        return grad.tolist()\n    return grad\nassert relu_grad([-2,-1,0,1,3])==[0,0,0,1,1],\"failed on list input [-2,-1,0,1,3]\"\nassert relu_grad([0,0,0])==[0,0,0],\"failed on all-zero list\"\nassert relu_grad([10,-10,0.5,-0.2])==[1,0,1,0],\"failed on mixed sign list\"\nassert relu_grad([[-1,2],[0,-0.3]])==[[0,1],[0,0]],\"failed on 2-D list\"\nassert relu_grad(5)==1,\"failed on positive scalar 5\"\nassert relu_grad(-4)==0,\"failed on negative scalar -4\"\nassert relu_grad(np.array([-3.2,4.7]))==[0,1],\"failed on 1-D ndarray\"\nassert relu_grad(0)==0,\"failed on scalar zero\"\nassert relu_grad([[0,1,2],[-1,-2,3]])==[[0,1,1],[0,0,1]],\"failed on nested list with various values\"\nassert relu_grad([[0,0],[0,0]])==[[0,0],[0,0]],\"failed on all-zero 2-D list\""}
{"task_id": 522, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    np.random.seed(42)\n    normal_tensor = np.random.standard_normal(size=weight_shape)\n    rounded_tensor = np.round(normal_tensor, 4)\n    return rounded_tensor.tolist()\nassert standard_normal((2, 3)) == [[0.4967, -0.1383, 0.6477], [1.523, -0.2342, -0.2341]], \"test case failed: standard_normal((2, 3))\"\nassert standard_normal((4,)) == [0.4967, -0.1383, 0.6477, 1.523], \"test case failed: standard_normal((4,))\"\nassert standard_normal((3, 1)) == [[0.4967], [-0.1383], [0.6477]], \"test case failed: standard_normal((3, 1))\"\nassert standard_normal((1, 1)) == [[0.4967]], \"test case failed: standard_normal((1, 1))\"\nassert standard_normal((5,)) == [0.4967, -0.1383, 0.6477, 1.523, -0.2342], \"test case failed: standard_normal((5,))\"\nassert standard_normal((6,)) == [0.4967, -0.1383, 0.6477, 1.523, -0.2342, -0.2341], \"test case failed: standard_normal((6,))\"\nassert standard_normal((3, 2)) == [[0.4967, -0.1383], [0.6477, 1.523], [-0.2342, -0.2341]], \"test case failed: standard_normal((3, 2))\"\nassert standard_normal((2, 2)) == [[0.4967, -0.1383], [0.6477, 1.523]], \"test case failed: standard_normal((2, 2))\"\nassert standard_normal((2,)) == [0.4967, -0.1383], \"test case failed: standard_normal((2,))\"\nassert standard_normal((3, 4)) == [[0.4967, -0.1383, 0.6477, 1.523], [-0.2342, -0.2341, 1.5792, 0.7674], [-0.4695, 0.5426, -0.4634, -0.4657]], \"test case failed: standard_normal((3, 4))\""}
{"task_id": 523, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 2:\n        n_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        (kernel_h, kernel_w, in_channels, _) = weight_shape\n        n_in = kernel_h * kernel_w * in_channels\n    else:\n        n_in = weight_shape[0]\n    std_dev = np.sqrt(2.0 / n_in)\n    weights = np.random.normal(loc=0.0, scale=std_dev, size=weight_shape)\n    return [[round(x, 4) for x in row] for row in weights]\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/2), (2, 2))\nnp.random.seed(0)\nassert np.allclose(he_normal((2, 2)), np.round(expected, 4)), \"test case failed: he_normal((2, 2))\"\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/4), (4, 3))\nnp.random.seed(0)\nassert np.allclose(he_normal((4, 3)), np.round(expected, 4)), \"test case failed: he_normal((4, 3))\"\nnp.random.seed(0)\nexpected = np.random.normal(0, np.sqrt(2/27), (3, 3, 3, 16))\nnp.random.seed(0)\nassert np.allclose(he_normal((3, 3, 3, 16)), np.round(expected, 4)), \"test case failed: he_normal((3, 3, 3, 16))\"\nnp.random.seed(42)\nexpected = np.random.normal(0, np.sqrt(2/25), (5, 5, 1, 32))\nnp.random.seed(42)\nassert np.allclose(he_normal((5, 5, 1, 32)), np.round(expected, 4)), \"test case failed: he_normal((5, 5, 1, 32))\"\nnp.random.seed(7)\nexpected = np.random.normal(0, np.sqrt(2/1), (1, 1))\nnp.random.seed(7)\nassert np.allclose(he_normal((1, 1)), np.round(expected, 4)), \"test case failed: he_normal((1, 1))\"\nnp.random.seed(1)\nexpected = np.random.normal(0, np.sqrt(2/7), (7, 1))\nnp.random.seed(1)\nassert np.allclose(he_normal((7, 1)), np.round(expected, 4)), \"test case failed: he_normal((7, 1))\"\nnp.random.seed(3)\nexpected = np.random.normal(0, np.sqrt(2/4), (2, 2, 1, 1))\nnp.random.seed(3)\nassert np.allclose(he_normal((2, 2, 1, 1)), np.round(expected, 4)), \"test case failed: he_normal((2, 2, 1, 1))\"\nnp.random.seed(11)\nexpected = np.random.normal(0, np.sqrt(2/8), (8, 8))\nnp.random.seed(11)\nassert np.allclose(he_normal((8, 8)), np.round(expected, 4)), \"test case failed: he_normal((8, 8))\"\nnp.random.seed(5)\nexpected = np.random.normal(0, np.sqrt(2/(3*3*64)), (3, 3, 64, 128))\nnp.random.seed(5)\nassert np.allclose(he_normal((3, 3, 64, 128)), np.round(expected, 4)), \"test case failed: he_normal((3, 3, 64, 128))\"\nnp.random.seed(21)\nexpected = np.random.normal(0, np.sqrt(2/10), (10, 4))\nnp.random.seed(21)\nassert np.allclose(he_normal((10, 4)), np.round(expected, 4)), \"test case failed: he_normal((10, 4))\""}
{"task_id": 525, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(X: np.ndarray, y: np.ndarray, lambda_: float=0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function computes the optimal weights analytically (closed form)\n    and returns them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    if y.ndim == 2:\n        y = y.flatten()\n    mean_x = np.mean(X, axis=0)\n    mean_y = np.mean(y)\n    X_centered = X - mean_x\n    y_centered = y - mean_y\n    I = np.eye(X.shape[1])\n    XTX_plus_lambdaI = np.dot(X_centered.T, X_centered) + lambda_ * I\n    try:\n        XT_X_inv = np.linalg.inv(XTX_plus_lambdaI)\n    except np.linalg.LinAlgError:\n        XT_X_inv = np.linalg.pinv(XTX_plus_lambdaI)\n    w = np.dot(XT_X_inv, np.dot(X_centered.T, y_centered))\n    b = mean_y - np.dot(mean_x, w)\n    weights_rounded = [round(wi, 4) for wi in w]\n    bias_rounded = round(b, 4)\n    return (weights_rounded, bias_rounded)\nassert ridge_regression(np.array([[1],[2],[3]],dtype=float), np.array([[3],[5],[7]],dtype=float), 0.0) == ([2.0], 1.0), \"test case failed: simple 1-D \u03bb=0\"\nassert ridge_regression(np.array([[1],[2],[3]],dtype=float), np.array([[3],[5],[7]],dtype=float), 1.0) == ([1.3333], 2.3333), \"test case failed: simple 1-D \u03bb=1\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[3,1]],dtype=float), np.array([[5],[10],[0],[11]],dtype=float), 0.0) == ([3.0,-2.0], 4.0), \"test case failed: 2-D \u03bb=0\"\nassert ridge_regression(np.array([[1,1],[2,0],[0,2],[3,1]],dtype=float), np.array([[5],[10],[0],[11]],dtype=float), 1.0) == ([2.6429,-1.5714], 4.1071), \"test case failed: 2-D \u03bb=1\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[1],[3],[5],[7]],dtype=float), 0.0) == ([2.0], 1.0), \"test case failed: extended 1-D \u03bb=0\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[1],[3],[5],[7]],dtype=float), 1.0) == ([1.6667], 1.5), \"test case failed: extended 1-D \u03bb=1\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,3],[5,6]],dtype=float), np.array([[2],[4],[7],[13]],dtype=float), 0.0) == ([1.0,1.0], 2.0), \"test case failed: 2-D (ones) \u03bb=0\"\nassert ridge_regression(np.array([[0,0],[1,1],[2,3],[5,6]],dtype=float), np.array([[2],[4],[7],[13]],dtype=float), 1.0) == ([0.878,1.0488], 2.122), \"test case failed: 2-D (ones) \u03bb=1\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[3],[-1],[-5],[-9]],dtype=float), 0.0) == ([-4.0], 3.0), \"test case failed: negative slope \u03bb=0\"\nassert ridge_regression(np.array([[0],[1],[2],[3]],dtype=float), np.array([[3],[-1],[-5],[-9]],dtype=float), 1.0) == ([-3.3333], 2.0), \"test case failed: negative slope \u03bb=1\""}
{"task_id": 527, "completion_id": 0, "passed": false, "result": "failed: failed: .tar.gz with auto", "solution": "import os\nimport os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    (_, file_extension) = os.path.splitext(file_path)\n    file_extension = file_extension.lower()\n    supported_formats = {'tar': {'.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'}, 'zip': {'.zip'}}\n    if archive_format is None or archive_format == []:\n        return False\n    elif archive_format == 'auto':\n        allowed_formats = ['tar', 'zip']\n    elif isinstance(archive_format, list):\n        allowed_formats = archive_format\n    else:\n        allowed_formats = [archive_format]\n    for fmt in allowed_formats:\n        if file_extension in supported_formats[fmt]:\n            return True\n    return False\nassert extract_archive(\"data/archive.tar.gz\", \"./out\", \"auto\") is True, \"failed: .tar.gz with auto\"\nassert extract_archive(\"backup.TAR\", archive_format=\"tar\") is True, \"failed: .TAR with 'tar'\"\nassert extract_archive(\"docs.zip\", archive_format=\"auto\") is True, \"failed: .zip with auto\"\nassert extract_archive(\"docs.zip\", archive_format=\"tar\") is False, \"failed: .zip with 'tar'\"\nassert extract_archive(\"movie.tgz\", archive_format=[\"tar\"]) is True, \"failed: .tgz with list['tar']\"\nassert extract_archive(\"movie.tgz\", archive_format=[\"zip\"]) is False, \"failed: .tgz with list['zip']\"\nassert extract_archive(\"image.tbz\", archive_format=[\"zip\", \"tar\"]) is True, \"failed: .tbz with ['zip','tar']\"\nassert extract_archive(\"report.rar\", archive_format=\"auto\") is False, \"failed: .rar with auto\"\nassert extract_archive(\"any.file\", archive_format=None) is False, \"failed: None archive_format\"\nassert extract_archive(\"some.tar.bz2\", archive_format=[]) is False, \"failed: empty list archive_format\""}
{"task_id": 528, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    (x1_min, x1_max) = (min((x[0] for x in X)), max((x[0] for x in X)))\n    (x2_min, x2_max) = (min((x[1] for x in X)), max((x[1] for x in X)))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(Z >= 0, 1, -1)\n    result = [[int(label) for label in row] for row in labels]\n    return result\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3) == [[1, 1, 1], [-1, 1, 1], [-1, -1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3) == [[-1, -1, -1], [1, 1, 1], [1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3) == [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2) == [[1, 1], [1, -1]], \"test case failed: decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2)\"\nres = decision_boundary_grid([[0, 0], [3, 3]], [1, 1], -6, 4)\nassert len(res) == 4 and all(len(r) == 4 for r in res), \"test case failed: decision_boundary_grid shape with grid_n=4\"\nassert decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2) == [[-1, 1], [1, 1]], \"test case failed: decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2)\"\nall_pos = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], 5, 2)\nassert all(v == 1 for row in all_pos for v in row), \"test case failed: decision_boundary_grid bias all positive\"\nall_neg = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], -5, 2)\nassert all(v == -1 for row in all_neg for v in row), \"test case failed: decision_boundary_grid bias all negative\"\nassert decision_boundary_grid([[0, 0], [4, 1]], [1, -1], 0, 3)[0] == [1, 1, 1], \"test case failed: decision_boundary_grid non square range\"\nret = decision_boundary_grid([[0, 0], [1, 1]], [1, 1], 0, 2)\nassert isinstance(ret, list) and all(isinstance(r, list) for r in ret), \"test case failed: decision_boundary_grid return type\""}
{"task_id": 529, "completion_id": 0, "passed": false, "result": "failed: test case failed: generate_progress_bar(5, 20, 10)", "solution": "import math\nimport math\ndef generate_progress_bar(current: int, target: int | None, width: int=30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        return f'{current:7d}/Unknown'\n    d = len(str(target))\n    current_str = f'{current:>{d}}'\n    prog_width = int(width * current / target)\n    bar = f'{current_str}/target ['\n    if prog_width > 0:\n        bar += '=' * (prog_width - 1)\n        if current < target:\n            bar += '>'\n        else:\n            bar += '='\n    else:\n        bar += '.' * width\n    bar += ']'\n    return bar\nassert generate_progress_bar(5, 20, 10) == ' 5/20 [=>........]', \"test case failed: generate_progress_bar(5, 20, 10)\"\nassert generate_progress_bar(0, 100, 10) == '  0/100 [..........]', \"test case failed: generate_progress_bar(0, 100, 10)\"\nassert generate_progress_bar(100, 100, 10) == '100/100 [==========]', \"test case failed: generate_progress_bar(100, 100, 10)\"\nassert generate_progress_bar(1, None, 10) == '      1/Unknown', \"test case failed: generate_progress_bar(1, None, 10)\"\nassert generate_progress_bar(3, 7, 5) == '3/7 [=>...]', \"test case failed: generate_progress_bar(3, 7, 5)\"\nassert generate_progress_bar(7, 10, 10) == ' 7/10 [======>...]', \"test case failed: generate_progress_bar(7, 10, 10)\"\nassert generate_progress_bar(10, 10, 5) == '10/10 [=====]', \"test case failed: generate_progress_bar(10, 10, 5)\"\nassert generate_progress_bar(1, 1, 1) == '1/1 [=]', \"test case failed: generate_progress_bar(1, 1, 1)\"\nassert generate_progress_bar(2, 8, 4) == '2/8 [>...]', \"test case failed: generate_progress_bar(2, 8, 4)\"\nassert generate_progress_bar(0, None, 30) == '      0/Unknown', \"test case failed: generate_progress_bar(0, None, 30)\""}
{"task_id": 530, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, 1e-07, 1 - 1e-07)\n    epsilon = 1e-07\n    loss = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    return round(loss, 4)\nassert binary_cross_entropy(np.array([1,0]), np.array([0.8,0.2])) == 0.2231, \"failed on [1,0] & [0.8,0.2]\"\nassert binary_cross_entropy(np.array([1,1,0,0]), np.array([0.9,0.95,0.1,0.05])) == 0.0783, \"failed on mixed high-confidence predictions\"\nassert binary_cross_entropy(np.array([0,1]), np.array([0.3,0.7])) == 0.3567, \"failed on [0,1] & [0.3,0.7]\"\nassert binary_cross_entropy(np.array([0,0,0]), np.array([0.1,0.2,0.3])) == 0.2284, \"failed on all-zero labels\"\nassert binary_cross_entropy(np.array([1,1,1]), np.array([0.7,0.8,0.9])) == 0.2284, \"failed on all-one labels\"\nassert binary_cross_entropy(np.array([1,0,1,0,1]), np.array([0.6,0.4,0.7,0.3,0.8])) == 0.3916, \"failed on larger batch\"\nassert binary_cross_entropy(np.array([1,0]), np.array([1e-10,1-1e-15])) == 16.1181, \"failed on extreme probabilities\"\nassert binary_cross_entropy(np.array([1,0,1]), np.array([0.55,0.45,0.65])) == 0.5422, \"failed on mid-range probabilities\"\nassert binary_cross_entropy(np.array([0,0,1,1]), np.array([0.2,0.3,0.8,0.9])) == 0.2271, \"failed on balanced batch\"\nassert binary_cross_entropy(np.array([1]), np.array([0.5])) == 0.6931, \"failed on single sample with p=0.5\""}
{"task_id": 531, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError('window_len must be strictly positive')\n    if symmetric:\n        num_points = window_len\n        start = -np.pi\n        end = np.pi\n    else:\n        num_points = window_len + 1\n        start = -np.pi\n        end = np.pi\n    theta = np.linspace(start, end, num_points)\n    window = np.zeros(window_len)\n    for k in range(len(coefs)):\n        cos_term = coefs[k] * np.cos(k * theta)\n        if symmetric:\n            window += cos_term[:window_len]\n        else:\n            window += cos_term[:window_len]\n    window = np.round(window, 4).tolist()\n    return window\nassert generalized_cosine(4, [0.5, 0.5], False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: generalized_cosine(4,[0.5,0.5],False)\"\nassert generalized_cosine(3, [1], False) == [1.0, 1.0, 1.0], \"test case failed: generalized_cosine(3,[1],False)\"\nassert generalized_cosine(5, [0.54, 0.46], True) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: generalized_cosine(5,[0.54,0.46],True)\"\nassert generalized_cosine(4, [0.54, 0.46], False) == [0.08, 0.54, 1.0, 0.54], \"test case failed: generalized_cosine(4,[0.54,0.46],False)\"\nassert generalized_cosine(4, [1], True) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine(4,[1],True)\"\nassert generalized_cosine(2, [0.5, 0.5], False) == [0.0, 1.0], \"test case failed: generalized_cosine(2,[0.5,0.5],False)\"\nassert generalized_cosine(2, [0.5, 0.5], True) == [0.0, 0.0], \"test case failed: generalized_cosine(2,[0.5,0.5],True)\"\nassert generalized_cosine(3, [0.3, 0.4, 0.3], False) == [0.2, 0.35, 0.35], \"test case failed: generalized_cosine(3,[0.3,0.4,0.3],False)\"\nassert generalized_cosine(1, [0.7, 0.3], True) == [0.4], \"test case failed: generalized_cosine(1,[0.7,0.3],True)\"\nassert generalized_cosine(1, [0.7, 0.3], False) == [0.4], \"test case failed: generalized_cosine(1,[0.7,0.3],False)\""}
{"task_id": 532, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total_params = 0\n    for i in range(len(layers) - 1):\n        n_in = layers[i]\n        n_out = layers[i + 1]\n        weights = n_in * n_out\n        biases = n_out\n        total_params += weights + biases\n    return total_params\nassert count_fc_parameters([784, 128, 256, 512, 784]) == 667280, \"test case failed: [784,128,256,512,784]\"\nassert count_fc_parameters([64, 1]) == 65, \"test case failed: [64,1]\"\nassert count_fc_parameters([8, 16, 4]) == 212, \"test case failed: [8,16,4]\"\nassert count_fc_parameters([10]) == 0, \"test case failed: [10]\"\nassert count_fc_parameters([1, 1, 1, 1]) == 6, \"test case failed: [1,1,1,1]\"\nassert count_fc_parameters([3, 4]) == 16, \"test case failed: [3,4]\"\nassert count_fc_parameters([1000, 100, 10, 1]) == 101121, \"test case failed: [1000,100,10,1]\"\nassert count_fc_parameters([2, 3, 5]) == 29, \"test case failed: [2,3,5]\"\nassert count_fc_parameters([50, 100]) == 5100, \"test case failed: [50,100]\"\nassert count_fc_parameters([3, 5, 7, 9]) == 134, \"test case failed: [3,5,7,9]\""}
{"task_id": 533, "completion_id": 0, "passed": false, "result": "failed: failed: gaussian_likelihood([0,1],0,1)", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        pdf = 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(x - mean) ** 2 / (2 * sigma ** 2))\n        return round(pdf, 4)\n    else:\n        x_array = np.array(x)\n        pdf_array = 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(x_array - mean) ** 2 / (2 * sigma ** 2))\n        return pdf_array.tolist()\nassert gaussian_likelihood(1, 0, 1) == 0.242, \"failed: gaussian_likelihood(1, 0, 1)\"\nassert gaussian_likelihood(0, 0, 1) == 0.3989, \"failed: gaussian_likelihood(0, 0, 1)\"\nassert gaussian_likelihood(2, 0, 2) == 0.121, \"failed: gaussian_likelihood(2, 0, 2)\"\nassert gaussian_likelihood([0, 1], 0, 1) == [0.3989, 0.242], \"failed: gaussian_likelihood([0,1],0,1)\"\nassert gaussian_likelihood(-1, 0, 1) == 0.242, \"failed: gaussian_likelihood(-1, 0, 1)\"\nassert gaussian_likelihood(3, 2, 1) == 0.242, \"failed: gaussian_likelihood(3,2,1)\"\nassert gaussian_likelihood(5, 3, 2) == 0.121, \"failed: gaussian_likelihood(5,3,2)\"\nassert gaussian_likelihood([1, 2, 3], 2, 1) == [0.242, 0.3989, 0.242], \"failed: gaussian_likelihood([1,2,3],2,1)\"\nassert gaussian_likelihood(0, 2, 1) == 0.054, \"failed: gaussian_likelihood(0,2,1)\"\nassert gaussian_likelihood(2, 2, 0.5) == 0.7979, \"failed: gaussian_likelihood(2,2,0.5)\""}
{"task_id": 534, "completion_id": 0, "passed": false, "result": "failed: test case failed: sigmoid_([0])", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list (use `.tolist()`).\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        Z_np = np.array([Z])\n    elif isinstance(Z, list):\n        if len(Z) == 0:\n            return []\n        if isinstance(Z[0], list):\n            Z_np = np.array(Z)\n        else:\n            Z_np = np.array(Z)\n    else:\n        Z_np = np.array(Z)\n    Z_sig = 1 / (1 + np.exp(-Z_np))\n    Z_rounded = np.round(Z_sig, 4)\n    if Z_rounded.size == 1:\n        return float(Z_rounded[0])\n    else:\n        return Z_rounded.tolist()\nassert sigmoid_(-1) == 0.2689, \"test case failed: sigmoid_(-1)\"\nassert sigmoid_(0) == 0.5, \"test case failed: sigmoid_(0)\"\nassert sigmoid_(1) == 0.7311, \"test case failed: sigmoid_(1)\"\nassert sigmoid_([-2, 2]) == [0.1192, 0.8808], \"test case failed: sigmoid_([-2, 2])\"\nassert sigmoid_([0]) == [0.5], \"test case failed: sigmoid_([0])\"\nassert sigmoid_([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test case failed: sigmoid_([[0,1],[-1,-2]])\"\nassert sigmoid_(np.array([-3, 3])) == [0.0474, 0.9526], \"test case failed: sigmoid_(np.array([-3,3]))\"\nassert sigmoid_(100) == 1.0, \"test case failed: sigmoid_(100)\"\nassert sigmoid_(-100) == 0.0, \"test case failed: sigmoid_(-100)\"\nassert sigmoid_(np.array([[5, -5], [10, -10]])) == [[0.9933, 0.0067], [1.0, 0.0]], \"test case failed: sigmoid_(np.array([[5,-5],[10,-10]]))\""}
{"task_id": 536, "completion_id": 0, "passed": false, "result": "failed: non-broadcastable output operand with shape (2,1) doesn't match the broadcast shape (2,4)", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression(X_train, y_train, X_test, method='normal', alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    X_train_with_ones = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    if method == 'normal':\n        theta = np.linalg.inv(X_train_with_ones.T @ X_train_with_ones) @ X_train_with_ones.T @ y_train\n    else:\n        m = X_train.shape[0]\n        theta = np.zeros((X_train_with_ones.shape[1], 1))\n        for _ in range(num_iter):\n            predictions = X_train_with_ones @ theta\n            error = predictions - y_train\n            gradient = X_train_with_ones.T @ error / m\n            theta -= alpha * gradient\n    X_test_with_ones = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    predictions = X_test_with_ones @ theta\n    return [np.round(pred, 4) for pred in predictions.flatten()]\nassert linear_regression(np.array([[1],[2],[3],[4],[5]]), np.array([3,5,7,9,11]), np.array([[6],[7]]), method=\"normal\") == [13.0, 15.0], \"failed: simple univariate normal eqn\"\nassert linear_regression(np.array([[0],[1],[2]]), np.array([-2,3,8]), np.array([[3]]), method=\"normal\") == [13.0], \"failed: univariate negative intercept normal eqn\"\nassert linear_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,11,13]), np.array([[3,5]]), method=\"normal\") == [20.0], \"failed: multivariate normal eqn\"\nassert linear_regression(np.array([[1,1],[2,0],[0,1],[3,2]]), np.array([3,-2,4,5]), np.array([[1,2]]), method=\"normal\") == [7.0], \"failed: multivariate zero bias normal eqn\"\nassert linear_regression(np.array([[1],[2],[3]]), np.array([0,2,4]), np.array([[4]]), method=\"normal\") == [6.0], \"failed: univariate normal eqn 2\"\nassert linear_regression(np.array([[1],[2],[3],[4]]), np.array([2,4,6,8]), np.array([[5]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [10.0], \"failed: univariate gradient descent\"\nassert linear_regression(np.array([[1,1],[1,2],[2,2],[2,3]]), np.array([6,8,11,13]), np.array([[3,5]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [20.0], \"failed: multivariate gradient descent\"\nassert linear_regression(np.array([[1],[2],[3]]), np.array([0,2,4]), np.array([[4]]), method=\"gradient\", alpha=0.01, num_iter=20000) == [6.0], \"failed: univariate gradient descent 2\"\nassert linear_regression(np.array([[1,1],[2,0],[0,1],[3,2]]), np.array([3,-2,4,5]), np.array([[1,2]]), method=\"gradient\", alpha=0.01, num_iter=30000) == [7.0], \"failed: multivariate gradient descent 2\"\nassert linear_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[3]]), method=\"gradient\", alpha=0.01, num_iter=10000) == [5.0], \"failed: constant function gradient descent\""}
{"task_id": 537, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    class_0 = X_train[y_train == 0]\n    class_1 = X_train[y_train == 1]\n    n_class_0 = class_0.shape[0]\n    n_class_1 = class_1.shape[0]\n    n_samples = len(y_train)\n    prior_0 = n_class_0 / n_samples\n    prior_1 = n_class_1 / n_samples\n    n_features = X_train.shape[1]\n    mean_0 = np.mean(class_0, axis=0)\n    std_0 = np.std(class_0, axis=0) + 1e-09\n    mean_1 = np.mean(class_1, axis=0)\n    std_1 = np.std(class_1, axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        log_prob_0 = np.sum(np.log(1 / (std_0 * np.sqrt(2 * np.pi))) - (x - mean_0) ** 2 / (2 * std_0 ** 2))\n        log_prob_1 = np.sum(np.log(1 / (std_1 * np.sqrt(2 * np.pi))) - (x - mean_1) ** 2 / (2 * std_1 ** 2))\n        log_prob_0 += np.log(prior_0)\n        log_prob_1 += np.log(prior_1)\n        if log_prob_0 > log_prob_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions\nassert gaussian_naive_bayes(np.array([[1.0,20.0],[2.0,21.0],[3.0,22.0],[10.0,5.0],[11.0,6.0],[12.0,7.0]]), np.array([0,0,0,1,1,1]), np.array([[2.5,20.5],[11.5,6.5]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes(np.array([[1],[2],[3],[8],[9],[10]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[8.5]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0,0.2],[0.9,0.9]])) == [0,1], \"test case 3 failed\"\nassert gaussian_naive_bayes(np.array([[5],[6],[7],[2],[3],[4]]), np.array([1,1,1,0,0,0]), np.array([[6.5],[2.5]])) == [1,0], \"test case 4 failed\"\nassert gaussian_naive_bayes(np.array([[1,1],[1,2],[2,1],[8,8],[9,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.8,1.5],[8.5,8.3]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes(np.array([[2,3],[2,2],[3,3],[7,7],[8,7],[8,6]]), np.array([0,0,0,1,1,1]), np.array([[2.1,2.9],[7.9,6.9]])) == [0,1], \"test case 6 failed\"\nassert gaussian_naive_bayes(np.array([[10],[11],[12],[1],[2],[3]]), np.array([1,1,1,0,0,0]), np.array([[11],[2]])) == [1,0], \"test case 7 failed\"\nassert gaussian_naive_bayes(np.array([[1,2,3],[1,2,2],[2,2,3],[8,9,9],[9,8,9],[9,9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.5,2,2.8],[9,8.8,8.9]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes(np.array([[0],[0],[0],[10],[10],[10]]), np.array([0,0,0,1,1,1]), np.array([[0.1],[9.9]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes(np.array([[4,5],[4,4],[5,4],[15,15],[16,14],[15,14]]), np.array([0,0,0,1,1,1]), np.array([[4.2,4.6],[15.2,14.8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 539, "completion_id": 0, "passed": false, "result": "failed: test case failed: simple example", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        AL: A NumPy array of shape (1, m) or (m,) containing the model's predicted probabilities.\n        Y: A NumPy array of shape (1, m) or (m,) containing the true labels (0 or 1).\n\n    Returns:\n        A scalar float representing the computed cost, rounded to 4 decimal places.\n    \"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = AL.shape[1]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -np.mean(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)\nassert abs(compute_cost(np.array([[0.8,0.9,0.4]]),np.array([[1,1,0]]))-( -(1/3)*np.sum(np.array([[1,1,0]])*np.log(np.array([[0.8,0.9,0.4]]))+(1-np.array([[1,1,0]]))*np.log(1-np.array([[0.8,0.9,0.4]])) ) ))<1e-12, \"test case failed: simple example\"\nassert abs(compute_cost(np.array([0.35]),np.array([0]))-(-np.sum(np.array([0])*np.log(np.array([0.35]))+(1-np.array([0]))*np.log(1-np.array([0.35])))))<1e-12, \"test case failed: single sample\"\nassert abs(compute_cost(np.array([1e-20,1-1e-20]),np.array([0,1])) - (-(1/2)*np.sum(np.array([0,1])*np.log(np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)) + (1-np.array([0,1]))*np.log(1-np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)))))<1e-12, \"test case failed: clipping\"\nassert abs(compute_cost(np.array([[0.2,0.4,0.6,0.8,0.5]]),np.array([[0,0,1,1,0]]))-( -(1/5)*np.sum(np.array([[0,0,1,1,0]])*np.log(np.array([[0.2,0.4,0.6,0.8,0.5]]))+(1-np.array([[0,0,1,1,0]]))*np.log(1-np.array([[0.2,0.4,0.6,0.8,0.5]])) ) ))<1e-12, \"test case failed: batch size 5\"\nassert abs(compute_cost(np.array([0.7,0.3,0.2]),np.array([1,0,0]))-( -(1/3)*np.sum(np.array([1,0,0])*np.log(np.array([0.7,0.3,0.2]))+(1-np.array([1,0,0]))*np.log(1-np.array([0.7,0.3,0.2])) ) ))<1e-12, \"test case failed: flat vector\"\nassert abs(compute_cost(np.array([0.1,0.2,0.3,0.4]),np.zeros(4))-( -(1/4)*np.sum((1-np.zeros(4))*np.log(1-np.array([0.1,0.2,0.3,0.4])) ) ))<1e-12, \"test case failed: all zeros\"\nassert abs(compute_cost(np.array([0.6,0.7,0.8]),np.ones(3))-( -(1/3)*np.sum(np.ones(3)*np.log(np.array([0.6,0.7,0.8])) ) ))<1e-12, \"test case failed: all ones\"\nnp.random.seed(0); AL=np.random.rand(1,10); Y=(AL>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 1\"\nnp.random.seed(42); AL=np.random.rand(10); Y=(np.random.rand(10)>0.3).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 2\"\nnp.random.seed(7); AL=np.random.rand(1,100); Y=(np.random.rand(1,100)>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/100)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: large batch\""}
{"task_id": 540, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    sigma = 1 / (1 + np.exp(-Z))\n    derivative = sigma * (1 - sigma)\n    derivative_rounded = np.round(derivative, 4)\n    return derivative_rounded.tolist()\nassert derivative_sigmoid(np.array([0])) == [0.25], \"test case failed: derivative_sigmoid(np.array([0]))\"\nassert derivative_sigmoid(np.array([1])) == [0.1966], \"test case failed: derivative_sigmoid(np.array([1]))\"\nassert derivative_sigmoid(np.array([-1])) == [0.1966], \"test case failed: derivative_sigmoid(np.array([-1]))\"\nassert derivative_sigmoid(np.array([2.0, -2.0])) == [0.105, 0.105], \"test case failed: derivative_sigmoid(np.array([2.0, -2.0]))\"\nassert derivative_sigmoid(np.array([5, -5])) == [0.0066, 0.0066], \"test case failed: derivative_sigmoid(np.array([5, -5]))\"\nassert derivative_sigmoid(np.array([10, -10])) == [0.0, 0.0], \"test case failed: derivative_sigmoid(np.array([10, -10]))\"\nassert derivative_sigmoid(np.array([[0, 1], [-1, -2]])) == [[0.25, 0.1966], [0.1966, 0.105]], \"test case failed: derivative_sigmoid(np.array([[0, 1], [-1, -2]]))\"\nassert derivative_sigmoid(np.array([3])) == [0.0452], \"test case failed: derivative_sigmoid(np.array([3]))\"\nassert derivative_sigmoid(np.array([-3])) == [0.0452], \"test case failed: derivative_sigmoid(np.array([-3]))\"\nassert derivative_sigmoid(np.array([0, 2, -2])) == [0.25, 0.105, 0.105], \"test case failed: derivative_sigmoid(np.array([0, 2, -2]))\""}
{"task_id": 541, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    y = np.asarray(y)\n    y_hat = np.asarray(y_hat)\n    gradient = y_hat - y\n    gradient_rounded = np.round(gradient, 4)\n    return gradient_rounded.tolist()\nassert return_input_grads([1, 0, 1], [0.8, 0.2, 0.6]) == [-0.2, 0.2, -0.4], \"test case failed: return_input_grads([1,0,1],[0.8,0.2,0.6])\"\nassert return_input_grads([0, 1], [0.1, 0.9]) == [0.1, -0.1], \"test case failed: return_input_grads([0,1],[0.1,0.9])\"\nassert return_input_grads([1, 1, 1], [0.99, 0.5, 0.01]) == [-0.01, -0.5, -0.99], \"test case failed: return_input_grads([1,1,1],[0.99,0.5,0.01])\"\nassert return_input_grads([[1, 0], [0, 1]], [[0.5, 0.5], [0.1, 0.9]]) == [[-0.5, 0.5], [0.1, -0.1]], \"test case failed: 2D example\"\nassert return_input_grads([1], [0.7]) == [-0.3], \"test case failed: single element (1)\"\nassert return_input_grads([0], [0.25]) == [0.25], \"test case failed: single element (0)\"\nassert return_input_grads([[1, 1], [1, 1]], [[1, 1], [1, 1]]) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: perfect predictions\"\nassert return_input_grads([0, 0, 0], [0.3, 0.4, 0.9]) == [0.3, 0.4, 0.9], \"test case failed: all zeros labels\"\nassert return_input_grads([1, 0, 1, 0], [0, 1, 0, 1]) == [-1.0, 1.0, -1.0, 1.0], \"test case failed: extreme predictions\"\nassert return_input_grads([1, 0, 0, 1, 1], [0.2, 0.2, 0.8, 0.8, 0.5]) == [-0.8, 0.2, 0.8, -0.2, -0.5], \"test case failed: mixed batch\""}
{"task_id": 542, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Perform a single optimization step of the RMSProp algorithm.\"\"\"\n    if s is None or len(s) == 0:\n        s = [np.zeros_like(g) for g in grads]\n    new_s = []\n    new_params = []\n    for (g, param, s_i) in zip(grads, params, s):\n        s_i = beta * s_i + (1 - beta) * g ** 2\n        new_s.append(s_i)\n        grad_scaled = g / (np.sqrt(s_i) + epsilon)\n        new_param = param - alpha * grad_scaled\n        new_param_rounded = np.round(new_param, 6)\n        new_params.append(new_param_rounded)\n    return (new_params, new_s)\nimport numpy as np; params=[np.array([5.0])]; grads=[np.array([0.1])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([4.968378]), atol=1e-6) and np.allclose(s[0], np.array([0.001]), atol=1e-8), 'test case 1 failed: basic scalar update'\nimport numpy as np; params=[np.array([1.0])]; grads=[np.array([0.0])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.]), atol=1e-8) and np.allclose(s[0], np.array([0.]), atol=1e-8), 'test case 2 failed: zero-gradient update'\nimport numpy as np; params=[np.array([1.0])]; grads=[np.array([0.2])]; s_prev=[np.array([0.04])]; up,s=rmsprop_update(params,grads,s_prev); assert np.allclose(up[0], np.array([0.99]), atol=1e-6) and np.allclose(s[0], np.array([0.04]), atol=1e-8), 'test case 3 failed: update with pre-existing running average'\nimport numpy as np; params=[np.array([-2.0])]; grads=[np.array([-0.3])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([-1.968377]), atol=1e-6), 'test case 4 failed: negative gradient'\nimport numpy as np; params=[np.array([10.0])]; grads=[np.array([1.0])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([9.968377]), atol=1e-6), 'test case 5 failed: large gradient'\nimport numpy as np; params=[np.array([1.0,-1.0])]; grads=[np.array([0.0,0.2])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.0,-1.031622]), atol=1e-6), 'test case 6 failed: vector update'\nimport numpy as np; params=[np.array([1.0,-1.0,0.5])]; grads=[np.array([0.1,0.2,-0.1])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([0.968378,-1.031622,0.531622]), atol=1e-6), 'test case 7 failed: three-element vector'\nimport numpy as np; params=[np.array([1.0,2.0]), np.array(3.0)]; grads=[np.array([0.0,0.2]), np.array(0.1)]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.0,1.968378]), atol=1e-6) and np.allclose(up[1], np.array(2.968378), atol=1e-6), 'test case 8 failed: mixed shapes'\nimport numpy as np; params=[np.array([2.0])]; grads=[np.array([0.5])]; up,s=rmsprop_update(params,grads,None,alpha=0.001,beta=0.95); assert np.allclose(up[0], np.array([1.995528]), atol=1e-6) and np.allclose(s[0], np.array([0.0125]), atol=1e-8), 'test case 9 failed: custom hyper-parameters'\nimport numpy as np; params=[np.array([2.0,-3.0]), np.array([[1.0,-1.0],[0.5,2.0]])]; grads=[np.array([0.1,-0.2]), np.array([[0.05,-0.1],[0.2,-0.05]])]; up,s=rmsprop_update(params,grads); assert np.allclose(up[0], np.array([1.968378,-2.968378]), atol=1e-6) and np.allclose(up[1], np.array([[0.968378,-0.968378],[0.468378,2.031622]]), atol=1e-6), 'test case 10 failed: matrix and vector combined'"}
{"task_id": 543, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    class_counts = Counter(data)\n    total_samples = len(data)\n    gini = 1.0 - sum(((count / total_samples) ** 2 for count in class_counts.values()))\n    return round(gini, 4)\nassert cal_gini_index([\"A\", \"B\", \"B\", \"B\", \"C\"]) == 0.56, \"failed on ['A','B','B','B','C']\"\nassert cal_gini_index([1, 1, 1, 1]) == 0.0, \"failed on [1,1,1,1]\"\nassert cal_gini_index([\"yes\", \"no\"]) == 0.5, \"failed on ['yes','no']\"\nassert cal_gini_index([]) == 0.0, \"failed on []\"\nassert cal_gini_index([\"a\", \"b\", \"c\", \"d\"]) == 0.75, \"failed on ['a','b','c','d']\"\nassert cal_gini_index([0, 0, 0, 1, 1]) == 0.48, \"failed on [0,0,0,1,1]\"\nassert cal_gini_index([1]) == 0.0, \"failed on [1]\"\nassert cal_gini_index(list(range(10))) == 0.9, \"failed on range(10)\"\nassert cal_gini_index([1, 2, 3]) == 0.6667, \"failed on [1,2,3]\"\nassert cal_gini_index([1, 1, 2, 2, 3, 3]) == 0.6667, \"failed on [1,1,2,2,3,3]\""}
{"task_id": 544, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)\nassert split_tree([[5, 2], [3, 4], [7, 1], [2, 2]], 0, 4) == ([[5, 2], [7, 1]], [[3, 4], [2, 2]]), \"test case failed: basic example\"\nassert split_tree([[1], [2], [3]], 0, 5) == ([], [[1], [2], [3]]), \"test case failed: threshold larger than all samples\"\nassert split_tree([[10], [12], [20]], 0, 5) == ([[10], [12], [20]], []), \"test case failed: threshold smaller than all samples\"\nassert split_tree([[1, 5], [2, 3], [3, 7], [4, 1]], 1, 4) == ([[1, 5], [3, 7]], [[2, 3], [4, 1]]), \"test case failed: second feature split\"\nassert split_tree([[1.5, 2.2], [2.3, 3.9], [1.0, 4.1]], 1, 3.0) == ([[2.3, 3.9], [1.0, 4.1]], [[1.5, 2.2]]), \"test case failed: float values\"\nassert split_tree([[-3], [-1], [2]], 0, 0) == ([[2]], [[-3], [-1]]), \"test case failed: negative threshold\"\nassert split_tree([[4], [4], [4]], 0, 4) == ([[4], [4], [4]], []), \"test case failed: all equal to threshold\"\nassert split_tree([[1], [2], [2], [3]], 0, 2) == ([[2], [2], [3]], [[1]]), \"test case failed: duplicates with equality\"\nassert split_tree([[6, 1]], 0, 6) == ([[6, 1]], []), \"test case failed: single sample\"\nassert split_tree([], 0, 0) == ([], []), \"test case failed: empty data set\""}
{"task_id": 545, "completion_id": 0, "passed": false, "result": "failed: name 'node' is not defined", "solution": "\ndef tree_stats(root: 'node | None') -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n\n    def traverse(node, depth):\n        if node is None:\n            return (0, depth - 1)\n        is_leaf = node.results is not None\n        (left_count, left_depth) = traverse(node.left, depth + 1)\n        (right_count, right_depth) = traverse(node.right, depth + 1)\n        if is_leaf:\n            leaf_count = 1 + left_count + right_count\n            max_depth = max(left_depth, right_depth, depth)\n        else:\n            leaf_count = left_count + right_count\n            max_depth = max(left_depth, right_depth, depth)\n        return (leaf_count, max_depth)\n    if root is None:\n        return (0, 0)\n    else:\n        return traverse(root, 1)\nassert tree_stats(None) == (0, 0), \"failed on None input\"\nroot1 = node(results=\"X\"); assert tree_stats(root1) == (1, 1), \"failed on single-leaf tree\"\nroot2 = node(fea=0, value=10); root2.left = node(results=\"A\"); root2.right = node(results=\"B\"); assert tree_stats(root2) == (2, 2), \"failed on two-leaf tree\"\nroot3 = node(); root3.left = node(); root3.left.left = node(results=\"L\"); root3.right = node(results=\"R\"); assert tree_stats(root3) == (2, 3), \"failed on unbalanced tree (left-deep)\"\nroot4 = node(); root4.right = node(); root4.right.right = node(); root4.right.right.right = node(results=\"Z\"); assert tree_stats(root4) == (1, 4), \"failed on deep right chain\"\nroot5 = node(); root5.left = node(); root5.right = node();\nfor side1 in (root5.left, root5.right):\n    side1.left = node(); side1.right = node();\n    side1.left.left = node(results=\"L1\"); side1.left.right = node(results=\"L2\");\n    side1.right.left = node(results=\"L3\"); side1.right.right = node(results=\"L4\");\nassert tree_stats(root5) == (8, 4), \"failed on full depth-4 tree\"\nroot6 = node(); cursor = root6; \nfor _ in range(5):\n    cursor.left = node(); cursor = cursor.left\ncursor.results = \"end\"; assert tree_stats(root6) == (1, 6), \"failed on left-only chain\"\nroot7 = node(); cursor = root7; \nfor _ in range(2):\n    cursor.right = node(); cursor = cursor.right\ncursor.results = \"leaf\"; assert tree_stats(root7) == (1, 3), \"failed on right-only chain\"\nroot8 = node(); root8.left = node(results=\"A\"); root8.right = node();\nroot8.right.left = node(results=\"B\"); root8.right.right = node();\nroot8.right.right.right = node(results=\"C\");\nassert tree_stats(root8) == (3, 4), \"failed on mixed tree\"\nroot9 = node(fea=0, value=5); root9.left = node(results=\"A\"); root9.right = node(fea=1, value=3);\nroot9.right.left = node(results=\"B\"); root9.right.right = node(results=\"C\");\nassert tree_stats(root9) == (3, 3), \"failed on provided example\""}
{"task_id": 546, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Any, Dict, List\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\n\n    The *data* argument is a list where every inner list represents a training\n    sample.  All but the last elements of each sample are feature values; the\n    last element is the class label.\n\n    The function should return the root of the generated tree expressed as a\n    nested dictionary:\n        Leaf   -> {\"label\": class_label}\n        Branch -> {\"feature\": index,\n                    \"value\":   split_value,\n                    \"left\":    <subtree for samples with feature == value>,\n                    \"right\":   <subtree for samples with feature != value>}\n\n    If *data* is empty return the empty dictionary.\n    \"\"\"\n    if not data:\n        return {}\n    labels = [sample[-1] for sample in data]\n    gini = 1.0\n    for (label, count) in Counter(labels).items():\n        prob = count / len(labels)\n        gini -= prob ** 2\n    if gini == 0:\n        most_common = max(Counter(labels), key=lambda k: Counter(labels)[k])\n        return {'label': most_common}\n    best_gain = -1\n    best_feature = -1\n    best_value = None\n    best_left = None\n    best_right = None\n    for feature_idx in range(len(data[0]) - 1):\n        feature_values = set((sample[feature_idx] for sample in data))\n        for value in sorted(feature_values):\n            left_data = [sample for sample in data if sample[feature_idx] == value]\n            right_data = [sample for sample in data if sample[feature_idx] != value]\n            if not left_data or not right_data:\n                continue\n            left_gini = 1.0\n            for (label, count) in Counter([s[-1] for s in left_data]).items():\n                prob = count / len(left_data)\n                left_gini -= prob ** 2\n            right_gini = 1.0\n            for (label, count) in Counter([s[-1] for s in right_data]).items():\n                prob = count / len(right_data)\n                right_gini -= prob ** 2\n            weighted_gini = len(left_data) / len(data) * left_gini + len(right_data) / len(data) * right_gini\n            gain = gini - weighted_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_value = value\n                best_left = left_data\n                best_right = right_data\n            elif gain == best_gain:\n                pass\n    if best_gain > 0:\n        left_subtree = build_tree(best_left)\n        right_subtree = build_tree(best_right)\n        return {'feature': best_feature, 'value': best_value, 'left': left_subtree, 'right': right_subtree}\n    most_common = max(Counter([s[-1] for s in data]), key=lambda k: Counter([s[-1] for s in data])[k])\n    return {'label': most_common}\nassert build_tree([[1, \"Yes\"], [1, \"Yes\"], [0, \"No\"], [0, \"No\"]]) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"No\"}, \"right\": {\"label\": \"Yes\"}}, \"test case failed: binary pure split\"\nassert build_tree([[1, \"Yes\"], [0, \"Yes\"]]) == {\"label\": \"Yes\"}, \"test case failed: all same class\"\ndata4 = [[0, \"A\"], [0, \"A\"], [1, \"B\"], [1, \"B\"], [1, \"B\"]]\nassert build_tree(data4) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"A\"}, \"right\": {\"label\": \"B\"}}, \"test case failed: imbalanced classes\"\nassert build_tree([[42, \"Answer\"]]) == {\"label\": \"Answer\"}, \"test case failed: single sample\"\nassert build_tree([]) == {}, \"test case failed: empty dataset\"\ndata7 = [[1, \"Hot\", \"No\"], [1, \"Warm\", \"No\"], [0, \"Hot\", \"Yes\"], [0, \"Warm\", \"Yes\"]]\nassert build_tree(data7) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"Yes\"}, \"right\": {\"label\": \"No\"}}, \"test case failed: two-feature dataset\"\ndata8 = [[0, \"A\"], [0, \"A\"], [1, \"B\"]]\nassert build_tree(data8) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"A\"}, \"right\": {\"label\": \"B\"}}, \"test case failed: unequal class counts\"\ndata9 = [[0, \"Silly\", \"X\"], [1, \"Serious\", \"Y\"], [1, \"Serious\", \"Y\"], [0, \"Silly\", \"X\"]]\nassert build_tree(data9) == {\"feature\": 0, \"value\": 0, \"left\": {\"label\": \"X\"}, \"right\": {\"label\": \"Y\"}}, \"test case failed: repeated samples\"\ndata10 = [[1, \"P\"], [2, \"P\"], [3, \"P\"]]\nassert build_tree(data10) == {\"label\": \"P\"}, \"test case failed: pure class after numeric values\""}
{"task_id": 547, "completion_id": 0, "passed": false, "result": "failed: test case 1 failed", "solution": "import numpy as np\nimport numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    A_np = np.array(A)\n    B_np = np.array(B)\n    S_np = np.array(S)\n    obs_np = np.array(obs)\n    n = len(S)\n    m = len(B[0]) if n > 0 else 0\n    if n == 0 or m == 0:\n        return -1\n    if A_np.shape != (n, n):\n        return -1\n    if B_np.shape != (n, m):\n        return -1\n    if len(S_np) != n:\n        return -1\n    if len(obs_np) < t + 1:\n        return -1\n    if t < 0 or t >= len(obs):\n        return -1\n    if t == 0:\n        alpha = S_np * B_np[:, obs[0]]\n    else:\n        alpha_prev = np.zeros(n)\n        if t == 0:\n            alpha_prev = S_np * B_np[:, obs[0]]\n        else:\n            alpha_prev = np.dot(alpha_prev, A_np.T) * B_np[:, obs[t]]\n        alpha = alpha_prev\n    return [round(val, 4) for val in alpha]\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], 2) == [0.0601, 0.0095], \"test case 1 failed\"\nassert forward_step([[0.2, 0.5, 0.3], [0.3, 0.3, 0.4], [0.4, 0.2, 0.4]], [[0.6, 0.4], [0.5, 0.5], [0.4, 0.6]], [0.5, 0.3, 0.2], [1, 0], 0) == [0.2, 0.15, 0.12], \"test case 2 failed\"\nassert forward_step([[0.2, 0.5, 0.3], [0.3, 0.3, 0.4], [0.4, 0.2, 0.4]], [[0.6, 0.4], [0.5, 0.5], [0.4, 0.6]], [0.5, 0.3, 0.2], [1, 0], 1) == [0.0798, 0.0845, 0.0672], \"test case 3 failed\"\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], 4) == -1, \"test case 4 failed\"\nassert forward_step([[0.5, 0.5], [0.4, 0.6]], [[0.1, 0.9]], [0.5, 0.5], [0], 0) == -1, \"test case 5 failed\"\nassert forward_step([[1.0]], [[0.2, 0.8]], [1.0], [1, 1, 0], 2) == [0.128], \"test case 6 failed\"\nassert forward_step([[0.6, 0.4], [0.5, 0.5]], [[0.7, 0.3], [0.2, 0.8]], [0.8, 0.2], [1], 0) == [0.24, 0.16], \"test case 7 failed\"\nassert forward_step([[0.8, 0.2], [0.4, 0.6]], [[0.9, 0.1], [0.2, 0.8]], [0.3, 0.7], [0, 0, 1, 1], 3) == [0.0038, 0.0285], \"test case 8 failed\"\nassert forward_step([[1.0, 0.0], [0.0, 1.0]], [[0.5, 0.5], [0.3, 0.7]], [0.6, 0.4], [1, 0], 0) == [0.3, 0.28], \"test case 9 failed\"\nassert forward_step([[0.7, 0.3], [0.4, 0.6]], [[0.5, 0.5], [0.1, 0.9]], [0.6, 0.4], [0, 1, 0], -1) == -1, \"test case 10 failed\""}
{"task_id": 548, "completion_id": 0, "passed": false, "result": "failed: failed on example case", "solution": "import numpy as np\nimport numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"\n    Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    if t < 0 or t >= len(obs) - 1:\n        return [-1]\n    A_np = np.array(A)\n    B_np = np.array(B)\n    pi_np = np.array(pi)\n    obs_np = np.array(obs)\n    N = len(pi)\n    M = len(B[0])\n    alpha = np.zeros((len(obs), N))\n    alpha[0] = pi_np * B_np[:, obs[0]]\n    for i in range(1, len(obs)):\n        alpha[i] = alpha[i - 1] @ A_np * B_np[:, obs[i]]\n    beta = np.zeros((len(obs), N))\n    beta[-1] = np.ones(N)\n    for i in range(len(obs) - 2, -1, -1):\n        beta[i] = A_np @ beta[i + 1] * B_np[:, obs[i + 1]]\n    xi = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            xi[i, j] = alpha[t][i] * A_np[i, j] * B_np[j, obs[t + 1]] * beta[t][j]\n    total = np.sum(xi)\n    if total == 0:\n        return [[-1 for _ in range(N)] for _ in range(N)]\n    xi /= total\n    return [[round(x, 4) for x in row] for row in xi]\nassert compute_xi([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2], 1) == [[0.5748, 0.0493], [0.2892, 0.0868]], \"failed on example case\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1,0], 1) == [[0.25,0.25],[0.25,0.25]], \"failed on uniform 2-state (t=1)\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [1,0], 0) == [[0.25,0.25],[0.25,0.25]], \"failed on uniform 2-state (t=0)\"\nassert compute_xi([[1/3,1/3,1/3]]*3, [[0.5,0.5]]*3, [1/3,1/3,1/3], [0,1], 0) == [[0.1111,0.1111,0.1111]]*3, \"failed on uniform 3-state (len=2)\"\nassert compute_xi([[1/3,1/3,1/3]]*3, [[0.5,0.5]]*3, [1/3,1/3,1/3], [0,1,0], 1) == [[0.1111,0.1111,0.1111]]*3, \"failed on uniform 3-state (t=1)\"\nassert compute_xi([[1,0],[0,1]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1,0], 1) == [[0.5,0.0],[0.0,0.5]], \"failed on identity A (2-state)\"\nassert compute_xi(np.eye(3).tolist(), [[0.5,0.5]]*3, [1/3,1/3,1/3], [1,0,1], 1) == [[0.3333,0.0,0.0],[0.0,0.3333,0.0],[0.0,0.0,0.3333]], \"failed on identity A (3-state)\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1], -1) == -1, \"failed on negative t\"\nassert compute_xi([[0.5,0.5],[0.5,0.5]], [[0.5,0.5],[0.5,0.5]], [0.5,0.5], [0,1], 2) == -1, \"failed on t out of range\""}
{"task_id": 549, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if x_np.shape[0] != y_np.shape[0]:\n        return -1\n    diff = x_np - y_np\n    squared_diff = diff ** 2\n    distance = np.sum(squared_diff)\n    return round(distance, 4)\nassert cal_dis([1,2,3],[4,0,3]) == 13.0, \"test case failed: cal_dis([1,2,3],[4,0,3])\"\nassert cal_dis([0,0,0],[0,0,0]) == 0.0, \"test case failed: cal_dis([0,0,0],[0,0,0])\"\nassert cal_dis((1,1,1,1),(2,2,2,2)) == 4.0, \"test case failed: cal_dis((1,1,1,1),(2,2,2,2))\"\nassert cal_dis(np.array([2.5,-1.5]),np.array([2.5,-1.5])) == 0.0, \"test case failed: identical vectors\"\nassert cal_dis([1,2],[1]) == -1, \"test case failed: unequal length should return -1\"\nassert cal_dis([],[]) == 0.0, \"test case failed: empty vectors\"\nassert cal_dis([3],[0]) == 9.0, \"test case failed: single element vectors\"\nassert cal_dis([1e3,2e3],[0,0]) == 5000000.0, \"test case failed: large numbers\"\nassert cal_dis(np.arange(100),np.zeros(100)) == 328350.0, \"test case failed: range vs zeros\""}
{"task_id": 551, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    parent_counts = Counter(y)\n    parent_gini = 1.0 - sum(((count / n_samples) ** 2 for count in parent_counts.values()))\n    best_gini = parent_gini\n    best_feature = -1\n    best_value = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        for value in unique_values:\n            left_mask = feature_values == value\n            left_y = y[left_mask]\n            right_mask = ~left_mask\n            right_y = y[right_mask]\n\n            def gini(subset):\n                counts = Counter(subset)\n                return 1.0 - sum(((count / len(subset)) ** 2 for count in counts.values()))\n            left_gini = gini(left_y)\n            right_gini = gini(right_y)\n            left_size = len(left_y)\n            right_size = len(right_y)\n            current_gini = left_size / n_samples * left_gini + right_size / n_samples * right_gini\n            if current_gini < best_gini - epsilon:\n                best_gini = current_gini\n                best_feature = feature_idx\n                best_value = value\n    return (best_feature, best_value, best_gini)\nassert best_gini_split(np.array([[1, 0], [1, 1], [0, 0], [0, 1]]), np.array([1, 1, 0, 0])) == (0, 0, 0.0), \"test case failed: example 1\"\nassert best_gini_split(np.array([[1], [1], [1]]), np.array([0, 0, 0])) == (-1, None, 0.0), \"test case failed: example 2\"\nassert best_gini_split(np.array([['sunny'], ['sunny'], ['overcast'], ['rain']], dtype=object), np.array(['no', 'no', 'yes', 'yes'])) == (0, 'sunny', 0.0), \"test case failed: example 3\"\nassert best_gini_split(np.array([[2, 3], [1, 3], [2, 1], [1, 1]]), np.array([1, 1, 0, 0])) == (1, 1, 0.0), \"test case failed: example 4\"\nassert best_gini_split(np.array([[0], [0]]), np.array([0, 1])) == (-1, None, 0.5), \"test case failed: example 5\"\nassert best_gini_split(np.array([[0], [0], [1], [1], [2], [2]]), np.array([0, 0, 1, 1, 1, 1])) == (0, 0, 0.0), \"test case failed: example 6\"\nassert best_gini_split(np.array([[0], [1]]), np.array([0, 1]), epsilon=0.7) == (-1, None, 0.5), \"test case failed: example 7\"\nassert best_gini_split(np.array([[42, 99]]), np.array([3])) == (-1, None, 0.0), \"test case failed: example 8\"\nassert best_gini_split(np.array([['A', 'red'], ['A', 'blue'], ['B', 'red'], ['B', 'blue']], dtype=object), np.array(['cat', 'cat', 'dog', 'dog'])) == (0, 'A', 0.0), \"test case failed: example 9\"\nassert best_gini_split(np.array([[0, 'yes'], [1, 'yes'], [0, 'no'], [1, 'no'], [0, 'no']], dtype=object), np.array([1, 1, 0, 0, 0])) == (1, 'no', 0.0), \"test case failed: example 10\""}
{"task_id": 552, "completion_id": 0, "passed": false, "result": "failed: test case failed: example sequence t=1", "solution": "import numpy as np\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    if t < 0 or t >= len(observations):\n        return []\n    num_states = pi.shape[0]\n    num_obs = len(observations)\n    alpha = np.zeros((num_obs, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_obs):\n        for j in range(num_states):\n            alpha[i][j] = np.sum(alpha[i - 1] * A[:, j]) * B[j, observations[i]]\n    beta = np.zeros((num_obs, num_states))\n    beta[-1] = np.ones(num_states)\n    for i in range(num_obs - 2, -1, -1):\n        for j in range(num_states):\n            beta[i][j] = np.sum(B[j, observations[i + 1]] * A[j, :] * beta[i + 1, :])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma = numerator / denominator\n    gamma_rounded = np.round(gamma, 4).tolist()\n    return gamma_rounded\nassert gamma_probabilities({\"pi\": [0.6, 0.4], \"A\": [[0.7, 0.3], [0.4, 0.6]], \"B\": [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]}, [0,1,2], 1) == [0.6229, 0.3771], \"test case failed: example sequence t=1\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [0,1,0,1], 2) == [0.5,0.5], \"test case failed: uniform 2-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [1], 0) == [0.5,0.5], \"test case failed: uniform 2-state single step\"\nassert gamma_probabilities({\"pi\": [1/3,1/3,1/3], \"A\": [[1/3]*3]*3, \"B\": [[0.25,0.25],[0.25,0.25],[0.25,0.25]]}, [0,1], 1) == [0.3333,0.3333,0.3333], \"test case failed: uniform 3-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [0,0,0], 2) == [1.0,0.0], \"test case failed: deterministic emission state 0\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [1], 0) == [0.0,1.0], \"test case failed: deterministic emission state 1\"\nassert gamma_probabilities({\"pi\": [0.8,0.2], \"A\": [[0.6,0.4],[0.4,0.6]], \"B\": [[0.6,0.4],[0.3,0.7]]}, [0], 0) == [0.8889,0.1111], \"test case failed: single observation\"\nassert gamma_probabilities({\"pi\": [0.25,0.25,0.25,0.25], \"A\": [[0.25]*4]*4, \"B\": [[0.25]*4]*4}, [0,1,2,3], 3) == [0.25,0.25,0.25,0.25], \"test case failed: uniform 4-state\""}
{"task_id": 553, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test: Patterns to be classified, shape (m_samples, n_features).\n        alpha: Learning rate used in gradient ascent on the log-likelihood.\n        max_iter: Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    X_train_with_bias = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_with_bias = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    w = np.zeros(X_train_with_bias.shape[1])\n    for _ in range(max_iter):\n        z = np.dot(X_train_with_bias, w)\n        sigma = 1 / (1 + np.exp(-z))\n        gradient = np.dot(X_train_with_bias.T, y_train - sigma) / X_train.shape[0]\n        w += alpha * gradient\n    z_test = np.dot(X_test_with_bias, w)\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions = (probabilities >= 0.5).astype(int).tolist()\n    return predictions\nassert logistic_regression(np.array([[0],[1],[4],[5]]), np.array([0,0,1,1]), np.array([[0.5],[4.5]])) == [0,1], \"test case 1 failed\"\nassert logistic_regression(np.array([[-10],[-8],[9],[11]]), np.array([0,0,1,1]), np.array([[-9],[10]])) == [0,1], \"test case 2 failed\"\nassert logistic_regression(np.array([[0,0],[1,1],[4,4],[5,5]]), np.array([0,0,1,1]), np.array([[0.2,0.1],[4.5,4.8]])) == [0,1], \"test case 3 failed\"\nassert logistic_regression(np.array([[-5,0],[-4,1],[4,1],[5,0]]), np.array([0,0,1,1]), np.array([[-4,0.5],[5,0.5]])) == [0,1], \"test case 4 failed\"\nassert logistic_regression(np.array([[0,0,0],[1,0,0],[0,1,0],[5,5,5],[4,5,6]]), np.array([0,0,0,1,1]), np.array([[0,0,1],[6,5,5]])) == [0,1], \"test case 5 failed\"\nassert logistic_regression(np.array([[1],[2],[3],[4]]), np.array([0,0,1,1]), np.array([[1],[4]]), alpha=0.05, max_iter=5000) == [0,1], \"test case 6 failed\"\nassert logistic_regression(np.array([[-3],[-2],[2],[3]]), np.array([0,0,1,1]), np.array([[-1],[1]])) == [0,1], \"test case 7 failed\"\nassert logistic_regression(np.array([[0,-5],[0,-4],[0,4],[0,5]]), np.array([0,0,1,1]), np.array([[0,-4.5],[0,4.5]])) == [0,1], \"test case 8 failed\"\nassert logistic_regression(np.array([[-10,-10],[-8,-9],[9,8],[10,10]]), np.array([0,0,1,1]), np.array([[-9,-9],[9,9]])) == [0,1], \"test case 9 failed\"\nassert logistic_regression(np.array([[0],[10]]), np.array([0,1]), np.array([[2],[8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 555, "completion_id": 0, "passed": false, "result": "failed: case 2 failed", "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    visited = [False] * n_samples\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            dist_matrix[i][j] = np.linalg.norm(data[i] - data[j])\n    neighborhood = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j and dist_matrix[i][j] <= eps:\n                neighborhood[i].append(j)\n    core_points = [i for i in range(n_samples) if len(neighborhood[i]) >= min_samples]\n    for point in core_points:\n        if not visited[point]:\n            cluster_id += 1\n            queue = deque()\n            queue.append(point)\n            visited[point] = True\n            labels[point] = cluster_id\n            while queue:\n                current = queue.popleft()\n                for neighbor in neighborhood[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        if len(neighborhood[neighbor]) >= min_samples:\n                            labels[neighbor] = cluster_id\n                            queue.append(neighbor)\n                        else:\n                            labels[neighbor] = -1\n    return labels\nassert dbscan(np.array([[0,0],[0,1],[1,0],[1,1],[5,5]]),1.5,3)==[1,1,1,1,-1],\"case 1 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,3)==[1,1,1,2,2,2],\"case 2 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,4)==[-1,-1,-1,-1,-1,-1],\"case 3 failed\"\nassert dbscan(np.array([[0,0],[0,0],[0,0.1],[0.1,0]]),0.2,2)==[1,1,1,1],\"case 4 failed\"\nassert dbscan(np.array([[0],[0.5],[1.0],[5.0],[5.1],[5.2]]),0.3,2)==[-1,-1,-1,1,1,1],\"case 5 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),15,2)==[1,1,1,1,1,1],\"case 6 failed\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[1,1,1,1],\"case 7 failed\"\nassert dbscan(np.array([[0,0],[0,0.5],[10,10],[20,20]]),1,2)==[1,1,-1,-1],\"case 8 failed\"\nassert dbscan(np.array([[0,0]]),0.5,1)==[1],\"case 9 failed\"\nassert dbscan(np.array([[-5,-5],[-5,-4],[-4,-5],[5,5]]),1.5,3)==[1,1,1,-1],\"case 10 failed\""}
{"task_id": 559, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Optional\nfrom typing import List, Optional\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int]=None, right: 'Optional[Node]'=None, left: 'Optional[Node]'=None):\n        self.val = val\n        self.right = right\n        self.left = left\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    result = []\n\n    def traverse(node):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            result.append(node.val)\n        traverse(node.left)\n        traverse(node.right)\n    traverse(root)\n    return result\nassert leaf_values(None) == [], \"failed on empty tree\"\nassert leaf_values(Node(val=5)) == [5], \"failed on single-node tree\"\nroot = Node(left=Node(val=1), right=Node(left=Node(val=2), right=Node(val=3)))\nassert leaf_values(root) == [1, 2, 3], \"failed on complete tree\"\nroot = Node(left=Node(left=Node(val=42)))\nassert leaf_values(root) == [42], \"failed on left-skewed tree\"\nroot = Node(right=Node(right=Node(val=7)))\nassert leaf_values(root) == [7], \"failed on right-skewed tree\"\nroot = Node(left=Node(val=10), right=Node(left=Node(val=20), right=Node(right=Node(val=30))))\nassert leaf_values(root) == [10, 20, 30], \"failed on mixed structure 1\"\nroot = Node(val=None, left=Node(val=None, left=Node(val=1), right=Node(val=2)), right=Node(val=None, left=Node(val=3)))\nassert leaf_values(root) == [1, 2, 3], \"failed when internal nodes hold values\"\nleft_sub = Node(left=Node(val=4), right=Node(val=5))\nright_sub = Node(left=Node(val=6), right=Node(val=7))\nroot = Node(left=left_sub, right=right_sub)\nassert leaf_values(root) == [4, 5, 6, 7], \"failed on large balanced tree\"\nroot = Node(left=Node(val=1), right=Node(val=1))\nassert leaf_values(root) == [1, 1], \"failed on repeating leaf values\"\nroot = Node(left=Node(right=Node(left=Node(right=Node(val=99)))))\nassert leaf_values(root) == [99], \"failed on deep alternating tree\""}
{"task_id": 560, "completion_id": 0, "passed": false, "result": "failed: name 'points' is not defined", "solution": "import math\nimport heapq\nimport math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n    if not points:\n        return []\n    root = build_kd_tree(points)\n    neighbors = search_kd_tree(root, query, k)\n    neighbors.sort(key=lambda x: (distance(points[x], query), x))\n    return neighbors[:k]\ndef build_kd_tree(points):\n    \"\"\"Build a balanced k-d tree from the given points.\"\"\"\n    if not points:\n        return None\n    dim = len(points[0])\n    axis = dim // 2\n    sorted_points = sorted(points, key=lambda p: p[axis])\n    mid = len(sorted_points) // 2\n    point = sorted_points[mid]\n    index = points.index(point)\n    left_points = sorted_points[:mid]\n    right_points = sorted_points[mid + 1:]\n    left = build_kd_tree(left_points)\n    right = build_kd_tree(right_points)\n    return {'index': index, 'axis': axis, 'left': left, 'right': right}\ndef search_kd_tree(node, query, k):\n    \"\"\"Search the k-d tree for the k nearest neighbors of the query point.\"\"\"\n    if node is None:\n        return []\n    current_point = points[node['index']]\n    dist = sum(((q - p) ** 2 for (p, q) in zip(current_point, query)))\n    result = [dist, node['index']]\n    left_result = search_kd_tree(node['left'], query, k)\n    right_result = search_kd_tree(node['right'], query, k)\n    result += left_result\n    result += right_result\n    result.sort(key=lambda x: (x[0], x[1]))\n    return result[:k]\ndef distance(p1, p2):\n    \"\"\"Calculate the squared Euclidean distance between two points.\"\"\"\n    return sum(((a - b) ** 2 for (a, b) in zip(p1, p2)))\nassert k_nearest_neighbors([[2,3],[5,4],[9,6],[4,7],[8,1],[7,2]],[9,2],2)==[4,5],\"failed on example case\"\nassert k_nearest_neighbors([[1],[2],[3],[4]],[2.5],2)==[1,2],\"failed on 1-D points\"\nassert k_nearest_neighbors([[2,3],[5,4],[9,6],[4,7],[8,1],[7,2]],[9,2],10)==[4,5,2,1,0,3],\"failed when k>n\"\nassert k_nearest_neighbors([[1,1],[1,1],[2,2]],[1,1],2)==[0,1],\"failed on duplicate points\"\nassert k_nearest_neighbors([[0],[10]],[5],2)==[0,1],\"failed on equal distances\"\nassert k_nearest_neighbors([[-5,-5],[5,5],[3,4]],[100,100],1)==[1],\"failed on distant query\"\nassert k_nearest_neighbors([[1,0],[0,1],[1,1]],[0,0],3)==[0,1,2],\"failed when k==n\"\nassert k_nearest_neighbors([[0,0,0,0],[1,1,1,1],[2,2,2,2]],[1.1,1.1,1.1,1.1],1)==[1],\"failed on 4-D points\""}
{"task_id": 561, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (6,) into shape (2,2)", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n    \n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: Number of Gaussian components (K).\n    - max_iter: Maximum number of iterations to perform.\n    - epsilon: Tolerance for stopping criterion (change in mixture weights).\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    if k == 1:\n        return [0] * len(data)\n    (N, D) = data.shape\n    means = np.random.randn(k, D)\n    covariances = np.eye(D)[np.newaxis, :, :] * np.random.rand(k, D, D)\n    weights = np.random.dirichlet(np.ones(k))\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                diff = data[i] - means[j]\n                exponent = -0.5 * np.dot(diff, np.linalg.pinv(covariances[j])) @ diff\n                normalization = np.sqrt(np.prod(2 * np.pi * np.sqrt(np.diag(covariances[j]))))\n                responsibilities[i, j] = weights[j] * np.exp(exponent) / normalization\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        new_weights = np.sum(responsibilities, axis=0)\n        new_weights /= np.sum(new_weights)\n        new_means = np.zeros((k, D))\n        for j in range(k):\n            new_means[j] = np.sum(responsibilities[:, j][:, np.newaxis] * data, axis=0) / new_weights[j]\n        new_covariances = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - new_means[j]\n            new_covariances[j] = np.sum(responsibilities[:, j][:, np.newaxis] * diff @ diff.T, axis=0) / new_weights[j]\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_means = means[sorted_indices]\n    sorted_labels = np.zeros_like(labels, dtype=int)\n    for (i, idx) in enumerate(sorted_indices):\n        sorted_labels[labels == idx] = i\n    return sorted_labels.tolist()\nimport numpy as np\nassert gmm_em(np.array([[1,2],[1,3],[2,2],[8,8],[9,8],[9,9]]),2) == [0,0,0,1,1,1], \"test case failed: basic two clusters\"\nassert gmm_em(np.array([[1],[1.2],[1.1],[8],[9],[8.5]]),2) == [0,0,0,1,1,1], \"test case failed: one-dimensional data\"\nassert gmm_em(np.array([[3,4],[5,6]]),1) == [0,0], \"test case failed: single component\"\nassert gmm_em(np.array([[2,2],[2,2],[2,2],[8,8],[8,8],[8,8]]),2) == [0,0,0,1,1,1], \"test case failed: duplicate points\"\nassert gmm_em(np.array([[0,0],[0,0.1],[0,0.2],[5,0],[5,0.1],[5,0.2]]),2) == [0,0,0,1,1,1], \"test case failed: vertical separation\"\nassert gmm_em(np.array([[-5,-5],[-4.9,-5],[-5.2,-4.8],[5,5],[4.8,5.1],[5.2,4.9]]),2) == [0,0,0,1,1,1], \"test case failed: symmetric clusters\"\nassert gmm_em(np.array([[0,0,0],[0.1,0,0],[0,0.2,0.1],[5,5,5],[5.1,5.1,5.1],[4.9,5,5.2]]),2) == [0,0,0,1,1,1], \"test case failed: three-dimensional data\"\nassert gmm_em(np.array([[1,1],[1,1.1],[1.2,1],[1,0.9],[9,9],[9.1,9],[9,9.2],[9.2,9.1]]),2) == [0,0,0,0,1,1,1,1], \"test case failed: larger cluster size\"\nassert gmm_em(np.array([[-10,-10],[ -9.8,-9.7],[-10.2,-10.1],[10,10],[9.8,9.9],[10.1,10.2]]),2) == [0,0,0,1,1,1], \"test case failed: distant clusters\""}
{"task_id": 562, "completion_id": 0, "passed": false, "result": "failed: test case failed: a1, 2", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    distances = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    similarities = np.exp(-gamma * distances)\n    D = np.diag(np.sum(similarities, axis=1))\n    W = similarities\n    if method == 'unnormalized':\n        L = D - W\n    elif method == 'normalized':\n        D_inv_half = np.linalg.inv(np.sqrt(np.diag(D)))\n        L_sym = D_inv_half @ L @ D_inv_half\n    else:\n        raise ValueError(\"method must be either 'unnormalized' or 'normalized'\")\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L_sym if method == 'normalized' else L)\n    eigenvectors_smallest = eigenvectors[:n_cluster]\n    if method == 'normalized':\n        eigenvectors_smallest = eigenvectors_smallest / np.sqrt(np.sum(eigenvectors_smallest ** 2, axis=1))[:, np.newaxis]\n\n    def kmeans(X, n_clusters, max_iter=100):\n        centroids = X[:n_clusters]\n        for _ in range(max_iter):\n            dists = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            labels = np.argmin(dists, axis=1)\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(n_clusters)])\n            if np.allclose(centroids, new_centroids):\n                break\n            centroids = new_centroids\n        unique_labels = np.unique(labels)\n        label_to_index = {label: idx for (idx, label) in enumerate(sorted(unique_labels))}\n        return [label_to_index[label] for label in labels]\n    labels = kmeans(eigenvectors_smallest, n_cluster)\n    if n_cluster == 1:\n        return [0] * N\n    return labels\nassert spectral_clustering(np.array([[0, 0], [5, 5], [0.2, -0.2], [-0.1, 0.3], [5.1, 4.9]]), 2) == [0, 1, 0, 0, 1], \"test case failed: a1, 2\"\nassert spectral_clustering(np.array([[-5, -5], [5, 5], [-4.8, -5.2], [5.2, 5.1]]), 2, method='normalized') == [0, 1, 0, 1], \"test case failed: a2, 2 normalized\"\nassert spectral_clustering(np.array([[0, 0], [10, 10], [20, 20], [0.2, -0.1], [9.8, 10.2], [19.9, 20.2]]), 3) == [0, 1, 2, 0, 1, 2], \"test case failed: a3, 3\"\nassert spectral_clustering(np.random.randn(8, 2), 1) == [0]*8, \"test case failed: single cluster\"\nassert spectral_clustering(np.array([[1, 1], [1, 1], [10, 10], [10, 10]]), 2) == [0, 0, 1, 1], \"test case failed: repeated points\"\nassert spectral_clustering(np.array([[0, 0], [5, 0], [0.1, 0.2], [4.9, -0.1]]), 2, gamma=0.5) == [0, 1, 0, 1], \"test case failed: gamma=0.5\"\nassert spectral_clustering(np.array([[0, 0, 0], [0.1, 0.0, -0.1], [5, 5, 5], [5.1, 4.9, 5.2]]), 2) == [0, 0, 1, 1], \"test case failed: 3-D data\"\nassert spectral_clustering(np.array([[0, 0], [0, 5], [0.1, 0.2], [0.05, -0.1], [-0.02, 5.1]]), 2) == [0, 1, 0, 0, 1], \"test case failed: vertical split\"\nassert spectral_clustering(np.array([[0, 0], [10, 0], [0.1, 0.05], [9.9, -0.05]]), 2) == [0, 1, 0, 1], \"test case failed: horizontal split\"\nassert spectral_clustering(np.array([[0, 0], [5, 5], [10, 10], [0.1, -0.1], [5.1, 4.9], [9.9, 10.2]]), 3, method='normalized') == [0, 1, 2, 0, 1, 2], \"test case failed: 3 clusters normalized\""}
{"task_id": 563, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for iteration in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha, y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha, y_data[:, np.newaxis] * X_data)\n    w_rounded = [round(val, 4) for val in w.tolist()]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nassert perceptron_dual_train(np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 1.0], 1.0), \"failed test 1\"\nassert perceptron_dual_train(np.array([[1, 0], [2, 0], [-1, 0], [-2, 0]]), np.array([1, 1, -1, -1])) == ([2.0, 0.0], 0.0), \"failed test 2\"\nassert perceptron_dual_train(np.array([[2, 2], [1, 1], [-1, -1], [-2, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 1.0), \"failed test 3\"\nassert perceptron_dual_train(np.array([[1, 1, 1], [2, 2, 2], [-1, -1, -1], [-2, -2, -2]]), np.array([1, 1, -1, -1])) == ([1.0, 1.0, 1.0], 1.0), \"failed test 4\"\nassert perceptron_dual_train(np.array([[1, 1], [-1, -1]]), np.array([1, -1])) == ([1.0, 1.0], 1.0), \"failed test 5\"\nassert perceptron_dual_train(np.array([[0, 1], [0, 2], [0, -1], [0, -2]]), np.array([1, 1, -1, -1])) == ([0.0, 2.0], 0.0), \"failed test 6\"\nassert perceptron_dual_train(np.array([[1], [2], [-1], [-2]]), np.array([1, 1, -1, -1])) == ([2.0], 0.0), \"failed test 7\"\nassert perceptron_dual_train(np.array([[3, 3], [-3, -3]]), np.array([1, -1])) == ([3.0, 3.0], 1.0), \"failed test 8\"\nassert perceptron_dual_train(np.array([[1, 0], [0, 1], [-1, 0], [0, -1]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 0.0), \"failed test 9\"\nassert perceptron_dual_train(np.array([[1, 1], [2, 2], [-2, -2]]), np.array([1, 1, -1])) == ([1.0, 1.0], 1.0), \"failed test 10\""}
{"task_id": 564, "completion_id": 0, "passed": false, "result": "failed: name 'root1' is not defined", "solution": "\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while True:\n        if current_node.y is not None:\n            return current_node.y\n        if task_type == 'classification':\n            feature_index = current_node.label\n            feature_value = features[feature_index]\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_index = current_node.label\n            feature_value = features[feature_index]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\nassert predict_sample(root1, [\"red\"], \"classification\") == \"apple\", \"TC1 failed\"\nassert predict_sample(root1, [\"blue\"], \"classification\") == \"pear\", \"TC2 failed\"\nassert predict_sample(root2, [\"A\", \"Y\"], \"classification\") == 1, \"TC3 failed\"\nassert predict_sample(root3, [7], \"regression\") == 5.0, \"TC4 failed\"\nassert predict_sample(root3, [10], \"regression\") == 5.0, \"TC5 failed\"\nassert predict_sample(root3, [12], \"regression\") == 15.0, \"TC6 failed\"\nassert predict_sample(root4, [6, -1], \"regression\") == 1.5, \"TC7 failed\"\nassert predict_sample(leaf_only, [], \"classification\") == 42, \"TC8 failed\"\nassert predict_sample(root5, [1], \"classification\") == \"One\", \"TC9 failed\"\nassert predict_sample(root6, [\"z\", \"d\"], \"classification\") == \"Bird\", \"TC10 failed\""}
{"task_id": 565, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n\n    def entropy(labels):\n        counts = np.bincount(labels)\n        probabilities = counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-10))\n    max_gain = -1\n    best_feature = 0\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        unique_values = np.unique(feature)\n        total_entropy = entropy(y)\n        conditional_entropy = 0.0\n        for value in unique_values:\n            mask = feature == value\n            subset_y = y[mask]\n            subset_size = len(subset_y)\n            if subset_size == 0:\n                continue\n            conditional_entropy += subset_size / n_samples * entropy(subset_y)\n        gain = total_entropy - conditional_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = feature_idx\n        elif gain == max_gain and feature_idx < best_feature:\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))\nassert choose_best_feature(np.array([[0, 1], [1, 0], [0, 1], [1, 1]]), np.array([0, 1, 0, 1])) == (0, 1.0), \"test case failed: example 1\"\nassert choose_best_feature(np.array([[0,0],[0,0],[1,1]]), np.array([0,0,1])) == (0, 0.918296), \"test case failed: identical features\"\nassert choose_best_feature(np.array([[0,1],[1,0],[0,1]]), np.array([1,1,1])) == (0, 0.0), \"test case failed: zero entropy labels\"\nassert choose_best_feature(np.array([[0, 1, 0], [1, 1, 1], [1, 0, 0], [0, 1, 1]]), np.array([0, 1, 1, 0])) == (0, 1.0), \"test case failed: mixed dataset\"\nassert choose_best_feature(np.array([[0],[1],[2]]), np.array([0,1,2])) == (0, 1.584963), \"test case failed: three classes\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1, 1])) == (0, 0.419973), \"test case failed: uneven distribution\"\nassert choose_best_feature(np.array([[0, 0], [1, 1]]), np.array([0, 1])) == (0, 1.0), \"test case failed: tie breaking\"\nassert choose_best_feature(np.array([[0],[0],[0]]), np.array([1, 1, 1])) == (0, 0.0), \"test case failed: single feature all same\"\nassert choose_best_feature(np.array([[0, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0]]), np.array([0, 0, 1, 1, 1, 0])) == (0, 1.0), \"test case failed: larger synthetic set\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [1, 2], [2, 2]]), np.array([0, 0, 1, 1])) == (0, 1.0), \"test case failed: multi-valued tie\""}
{"task_id": 566, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not subscriptable", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation for outlier detection.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    scores = np.zeros(n_samples)\n    for _ in range(n_trees):\n        indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        subset = data[indices]\n        tree = build_isolation_tree(subset, sample_size, n_features)\n        path_lengths = compute_path_lengths(tree, data)\n        for i in range(n_samples):\n            scores[i] += path_lengths[i] / n_trees\n    scores = np.exp(-scores / phi)\n    if epsilon == 0:\n        return []\n    sorted_scores = np.argsort(scores)\n    threshold_index = int(epsilon * n_samples)\n    threshold = scores[sorted_scores[threshold_index]]\n    outliers = np.where(scores >= threshold)[0].tolist()\n    return sorted(outliers)\ndef build_isolation_tree(subset, sample_size, n_features):\n    \"\"\"Build a single isolation tree.\"\"\"\n    tree = {}\n    build_tree(subset, tree, 0, sample_size, n_features)\n    return tree\ndef build_tree(subset, tree, depth, sample_size, n_features):\n    \"\"\"Recursively build the isolation tree.\"\"\"\n    if depth >= np.ceil(np.log2(sample_size)) or len(subset) <= 1:\n        tree['leaf'] = len(subset)\n        return\n    feature_idx = np.random.randint(n_features)\n    feature_values = subset[:, feature_idx]\n    (min_val, max_val) = (np.min(feature_values), np.max(feature_values))\n    threshold = np.random.uniform(min_val, max_val)\n    left_subset = subset[feature_values <= threshold]\n    right_subset = subset[feature_values > threshold]\n    tree['split'] = (feature_idx, threshold)\n    tree['left'] = {}\n    tree['right'] = {}\n    build_tree(left_subset, tree['left'], depth + 1, len(left_subset), n_features)\n    build_tree(right_subset, tree['right'], depth + 1, len(right_subset), n_features)\ndef compute_path_lengths(tree, data):\n    \"\"\"Compute path lengths for all observations in the data.\"\"\"\n    path_lengths = np.zeros(len(data))\n\n    def traverse(node, depth):\n        if 'leaf' in node:\n            n = node['leaf']\n            if n == 1:\n                path_length = 0\n            else:\n                path_length = 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n            return path_length\n        (feature_idx, threshold) = node['split']\n        feature_values = data[:, feature_idx]\n        left_subset = data[feature_values <= threshold]\n        right_subset = data[feature_values > threshold]\n        left_path_length = traverse(node['left'], depth + 1)\n        right_path_length = traverse(node['right'], depth + 1)\n        return depth + left_path_length if len(left_subset) > 0 else depth + right_path_length\n    return traverse(tree, 0)\nassert detect_outliers(np.array([[1.0,1.1],[0.9,1.0],[1.2,0.8],[8.0,8.0]]),50,4,0.25)==[3], \"case 1 failed\"\nassert detect_outliers(np.array([[0.0],[0.1],[-0.1],[5.0]]),60,4,0.25)==[3], \"case 2 failed\"\nassert detect_outliers(np.vstack([np.zeros((10,2)),np.array([[5,5],[6,6]])]),80,8,0.15)==[10,11], \"case 3 failed\"\nassert detect_outliers(np.vstack([np.zeros((15,1)),np.array([[3.0],[4.0]])]),70,8,0.1)==[15,16], \"case 4 failed\"\nassert detect_outliers(np.array([[1.0],[1.0],[1.0],[1.0]]),40,4,0.1)==[], \"case 5 failed\"\nassert detect_outliers(np.array([[1.0],[1.1],[0.9],[1.05],[8.0]]),50,5,0.2)==[4], \"case 6 failed\"\nassert detect_outliers(np.array([[0,0],[0,0.1],[0.1,0],[0.05,-0.05],[0.02,0.01],[7,7]]),60,6,0.17)==[5], \"case 7 failed\"\nassert detect_outliers(np.array([[1],[1]]),30,2,0.5)==[], \"case 8 failed\"\nassert detect_outliers(np.array([[0.0,0.0],[0.05,0.0],[-0.05,0.0],[0.0,0.05],[0.0,-0.05],[10.0,10.0]]),90,6,0.2)==[5], \"case 9 failed\""}
{"task_id": 567, "completion_id": 0, "passed": false, "result": "failed: 'list' argument must have no negative elements", "solution": "import numpy as np\nimport numpy as np\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    num_samples = predictions_array.shape[1]\n    result = []\n    for col in range(num_samples):\n        column = predictions_array[:, col]\n        value_counts = np.bincount(column)\n        max_count = value_counts.max()\n        candidates = [i for i in range(len(value_counts)) if value_counts[i] == max_count]\n        mode = min(candidates)\n        result.append(mode)\n    return result\nassert majority_vote([[0, 1, 1], [1, 1, 0], [1, 0, 0]]) == [1, 1, 0], \"test 1 failed: majority_vote([[0,1,1],[1,1,0],[1,0,0]])\"\nassert majority_vote([[0, 0, 1], [1, 1, 0], [1, 0, 0], [0, 1, 1]]) == [0, 0, 0], \"test 2 failed: tie handling\"\nassert majority_vote([[2, 2, 1], [1, 1, 1]]) == [1, 1, 1], \"test 3 failed: two trees\"\nassert majority_vote([[3, 3, 3], [3, 2, 1], [2, 2, 1]]) == [3, 2, 1], \"test 4 failed: general voting\"\nassert majority_vote([[0, 1, 2, 3]]) == [0, 1, 2, 3], \"test 5 failed: single tree\"\nassert majority_vote([[0, 0], [1, 1], [1, 1]]) == [1, 1], \"test 6 failed\"\nassert majority_vote([[1, 2, 3, 4], [1, 2, 2, 4], [1, 2, 2, 4]]) == [1, 2, 2, 4], \"test 7 failed\"\nassert majority_vote([[-1, -1], [-1, 1], [1, 1]]) == [-1, 1], \"test 8 failed: negative labels\"\nassert majority_vote([[0.0, 1.0], [1.0, 1.0], [0.0, 0.0]]) == [0, 1], \"test 9 failed: float inputs\"\nassert majority_vote([[5, 5, 5], [5, 4, 4], [4, 4, 4], [5, 5, 4]]) == [5, 4, 4], \"test 10 failed: large labels\""}
{"task_id": 568, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not subscriptable", "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Train a Maximum Entropy classifier using Generalized Iterative Scaling (GIS)\n    and predict labels for test samples.\n    \n    Parameters:\n    X_train (np.ndarray): Training feature matrix (n_samples x n_features)\n    y_train (np.ndarray): Training labels (n_samples)\n    X_test (np.ndarray): Test feature matrix (n_samples x n_features)\n    epsilon (float): Convergence threshold\n    n_iter (int): Maximum number of iterations\n    \n    Returns:\n    list[int]: Predicted labels for test samples\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_classes = len(np.unique(y_train))\n    feature_value_counts = defaultdict(lambda : defaultdict(int))\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(n_features):\n            feature_value = x[j]\n            feature_value_counts[j][feature_value][y] += 1\n    weights = defaultdict(float)\n    for iteration in range(n_iter):\n        log_likelihood = 0.0\n        Z = np.zeros(n_samples)\n        num = np.zeros(n_samples)\n        for i in range(n_samples):\n            x = X_train[i]\n            y = y_train[i]\n            for j in range(n_features):\n                feature_value = x[j]\n                if feature_value in feature_value_counts[j]:\n                    for label in feature_value_counts[j][feature_value]:\n                        num[i] += weights[j, feature_value, label] * (1 if label == y else 0)\n            Z[i] = math.exp(num[i])\n            log_likelihood += math.log(Z[i])\n        gradient = defaultdict(float)\n        for i in range(n_samples):\n            x = X_train[i]\n            y = y_train[i]\n            for j in range(n_features):\n                feature_value = x[j]\n                if feature_value in feature_value_counts[j]:\n                    for label in feature_value_counts[j][feature_value]:\n                        gradient[j, feature_value, label] += (1 if label == y else 0) / Z[i]\n        for key in gradient:\n            weights[key] += gradient[key]\n        max_update = max((abs(weights[key] - previous_weights.get(key, 0)) for key in weights))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for i in range(X_test.shape[0]):\n        x = X_test[i]\n        scores = {}\n        for y in range(n_classes):\n            score = 0.0\n            for j in range(n_features):\n                feature_value = x[j]\n                if feature_value in feature_value_counts[j]:\n                    for label in feature_value_counts[j][feature_value]:\n                        if label == y:\n                            score += weights[j, feature_value, label]\n            scores[y] = score\n        predicted_label = max(scores, key=scores.get)\n        predictions.append(predicted_label)\n    return predictions\nassert maxent_predict(np.array([[0],[1]]), np.array([0,1]), np.array([[1],[0]])) == [1,0], \"Test-1 failed: basic two-sample training\"\nassert maxent_predict(np.array([[0],[0],[1],[1]]), np.array([0,0,1,1]), np.array([[1],[0]])) == [1,0], \"Test-2 failed: duplicated training rows\"\nassert maxent_predict(np.array([[0,0],[1,0]]), np.array([0,1]), np.array([[0,0],[1,0],[0,0]])) == [0,1,0], \"Test-3 failed: two features, two labels\"\nassert maxent_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[2],[0]])) == [2,0], \"Test-4 failed: three labels\"\nassert maxent_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,2]), np.array([[0,1],[1,0]])) == [1,2], \"Test-5 failed: 3-class, 2-feature\"\nassert maxent_predict(np.array([[0,1,0],[1,0,1]]), np.array([0,1]), np.array([[1,0,1]])) == [1], \"Test-6 failed: 3 features\"\nassert maxent_predict(np.array([[0],[0],[0],[1]]), np.array([1,1,1,0]), np.array([[1],[0]])) == [0,1], \"Test-7 failed: imbalanced classes\"\nassert maxent_predict(np.array([[0,0],[0,1],[0,2],[1,0],[1,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[0,2]])) == [1,0], \"Test-8 failed: bigger balanced dataset\"\nassert maxent_predict(np.array([[5],[6],[7]]), np.array([2,2,2]), np.array([[5],[7]])) == [2,2], \"Test-9 failed: single-class training\"\nassert maxent_predict(np.array([[0],[1]]), np.array([1,0]), np.array([[0],[1]])) == [1,0], \"Test-10 failed: labels reversed order\""}
{"task_id": 569, "completion_id": 0, "passed": false, "result": "failed: test case failed: duplicates inside a document and cut_off = None", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    all_words = []\n    for (_, words) in data:\n        all_words.extend(words)\n    doc_freq = Counter()\n    for (_, words) in data:\n        doc_freq.update(words)\n    total_docs = len(data)\n    word_ratios = []\n    for (word, count) in doc_freq.items():\n        ratio = round(count / total_docs, 4)\n        word_ratios.append((word, ratio))\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    distinct_words = set(doc_freq.keys())\n    if cut_off is None:\n        top_words = distinct_words\n    elif cut_off > len(distinct_words):\n        top_words = distinct_words\n    else:\n        top_words = set((word_ratios[:cut_off][i][0] for i in range(cut_off)))\n    return (word_ratios, top_words)\nassert statistic_key_word([(1, {\"apple\", \"banana\"}), (0, {\"banana\", \"cherry\"}), (1, {\"banana\", \"dragon\"})], 2) == ([('banana', 1.0), ('apple', 0.3333), ('cherry', 0.3333), ('dragon', 0.3333)], {'banana', 'apple'}), \"test case failed: basic example with cut_off = 2\"\nassert statistic_key_word([(1, ['a', 'a', 'b']), (0, ['b', 'c']), (1, ['c'])], None)[0] == [('b', 0.6667), ('c', 0.6667), ('a', 0.3333)], \"test case failed: duplicates inside a document and cut_off = None\"\nassert statistic_key_word([(1, ['x']), (0, ['y'])], 5)[1] == {'x', 'y'}, \"test case failed: cut_off larger than vocabulary\"\nassert statistic_key_word([(1, ['p', 'q', 'r'])], None) == ([('q', 1.0), ('r', 1.0), ('p', 1.0)], {'p', 'q', 'r'}), \"test case failed: single document\"\nassert statistic_key_word([(1, ['m', 'n']), (0, ['m'])], 1)[1] == {'m'}, \"test case failed: cut_off = 1\"\nassert statistic_key_word([(1, ['d']), (0, ['e']), (1, ['f'])], 0)[1] == set(), \"test case failed: cut_off = 0\"\nassert statistic_key_word([(1, ['g', 'h']), (0, ['h', 'i'])], 2)[0][0][0] == 'h', \"test case failed: most frequent word should be first\"\nassert all(ratio <= 1 for _, ratio in statistic_key_word([(1, ['a']), (0, ['a', 'b'])], None)[0]), \"test case failed: ratio larger than 1\"\nassert statistic_key_word([(1, []), (0, [])], None) == ([], set()), \"test case failed: documents without any word\"\nassert statistic_key_word([], None) == ([], set()), \"test case failed: empty data list\""}
{"task_id": 570, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import defaultdict\nfrom collections import defaultdict\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]], keywords: set[str], test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    class_counts = defaultdict(int)\n    keyword_counts = defaultdict(lambda : defaultdict(int))\n    for (label, tokens) in train_data:\n        class_counts[label] += 1\n        for token in tokens:\n            if token in keywords:\n                keyword_counts[label][token] += 1\n    predictions = []\n    for tokens in test_samples:\n        present_keywords = set((kw for kw in keywords if kw in tokens))\n        absent_keywords = keywords - present_keywords\n        max_likelihood = -float('inf')\n        predicted_label = ''\n        for label in class_counts:\n            present_prob = 1.0\n            for kw in present_keywords:\n                present_prob *= keyword_counts[label].get(kw, 0) / class_counts[label]\n            absent_prob = 1.0\n            for kw in absent_keywords:\n                absent_prob *= 1 - keyword_counts[label].get(kw, 0) / class_counts[label]\n            total_likelihood = present_prob * absent_prob\n            if total_likelihood > max_likelihood:\n                max_likelihood = total_likelihood\n                predicted_label = label\n        predictions.append(predicted_label)\n    return predictions\nassert naive_bayes_predict([('spam', ['cheap', 'offer']), ('ham', ['hello', 'friend']), ('spam', ['buy', 'cheap'])], {'cheap', 'buy', 'hello'}, [['cheap'], ['hello']]) == ['spam', 'ham'], \"test case failed: spam/ham basic\"\nassert naive_bayes_predict([('positive', ['good']), ('negative', ['bad'])], {'good', 'bad'}, [['good']]) == ['positive'], \"test case failed: good word\"\nassert naive_bayes_predict([('positive', ['good']), ('negative', ['bad'])], {'good', 'bad'}, [['bad']]) == ['negative'], \"test case failed: bad word\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['goal']]) == ['sports'], \"test case failed: sports goal\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['code']]) == ['tech'], \"test case failed: tech code\"\nassert naive_bayes_predict([('sports', ['goal']), ('tech', ['code']), ('politics', ['vote'])], {'goal', 'code', 'vote'}, [['vote']]) == ['politics'], \"test case failed: politics vote\"\nassert naive_bayes_predict([('yes', ['y', 'g']), ('no', ['n'])], {'y', 'n'}, [['n']]) == ['no'], \"test case failed: yes/no n\"\nassert naive_bayes_predict([('spam', ['cheap', 'offer']), ('ham', ['hello', 'friend']), ('spam', ['buy', 'cheap'])], {'cheap', 'buy', 'hello'}, [['buy']]) == ['spam'], \"test case failed: buy word\"\nassert naive_bayes_predict([('pos', ['good']), ('neg', ['bad']), ('pos', ['good'])], {'good', 'bad'}, [['good']]) == ['pos'], \"test case failed: duplicate good\"\nassert naive_bayes_predict([('A', ['x']), ('A', ['y']), ('B', ['x', 'y'])], {'x', 'y'}, [['x']]) == ['A'], \"test case failed: A/B mixture\""}
{"task_id": 571, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(val, 4) for val in w]\n    b_rounded = round(b, 4)\n    return (w_list, b_rounded)\nassert compute_svm_parameters(np.array([[1, 2], [2, 3]]), np.array([1, -1]), np.array([0.5, 0.5])) == ([-0.5, -0.5], 2.0), \"test case failed: basic 2\u00d72\"\nassert compute_svm_parameters(np.array([[0, 0], [1, 1]]), np.array([-1, 1]), np.array([0.1, 0.3])) == ([0.3, 0.3], -0.3), \"test case failed: zeros and ones\"\nassert compute_svm_parameters(np.array([[1], [2], [3]]), np.array([1, 1, -1]), np.array([0.2, 0.2, 0.4])) == ([-0.6], 1.5333), \"test case failed: single feature\"\nassert compute_svm_parameters(np.array([[-1, -1], [1, 1]]), np.array([1, -1]), np.array([0.25, 0.25])) == ([-0.5, -0.5], 0.0), \"test case failed: symmetric points\"\nassert compute_svm_parameters(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 1, -1]), np.array([0.4, 0.4, 0.4])) == ([0.4, 0.4, -0.4], 0.2), \"test case failed: identity matrix\"\nassert compute_svm_parameters(np.array([[2, 2]]), np.array([1]), np.array([0.5])) == ([1.0, 1.0], -3.0), \"test case failed: single sample\"\nassert compute_svm_parameters(np.array([[0, 0], [0, 0]]), np.array([1, -1]), np.array([0.2, 0.2])) == ([0.0, 0.0], 0.0), \"test case failed: zero features\"\nassert compute_svm_parameters(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), np.array([1, -1, 1]), np.array([0.2, 0.3, 0.1])) == ([-0.3, -0.3, -0.3], 4.8333), \"test case failed: 3\u00d73 matrix\"\nassert compute_svm_parameters(np.array([[-1, 0], [0, 1], [1, 0]]), np.array([-1, 1, 1]), np.array([0.3, 0.3, 0.4])) == ([0.7, 0.3], 0.2333), \"test case failed: mixed signs\"\nassert compute_svm_parameters(np.array([[2], [4]]), np.array([-1, -1]), np.array([0.25, 0.25])) == ([-1.5], 3.5), \"test case failed: negative labels only\""}
{"task_id": 572, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute the Local Outlier Factor (LOF) for each sample in the dataset.\n    \n    Parameters:\n    - data: numpy array of shape (n_samples, n_features)\n    - k: int, number of nearest neighbors to consider\n    - epsilon: float, threshold for considering a sample as an outlier\n    \n    Returns:\n    - tuple of (list_of_scores, list_of_outlier_indices)\n    \"\"\"\n    n = data.shape[0]\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            distances[i, j] = np.linalg.norm(data[i] - data[j])\n    k_distances = np.zeros(n)\n    k_neighbors = [np.zeros(k) for _ in range(n)]\n    for i in range(n):\n        sorted_indices = np.argsort(distances[i])\n        k_distances[i] = distances[i, sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[:k]\n\n    def reach_dist(p, q):\n        return max(k_distances[q], distances[p, q])\n    lrd = np.zeros(n)\n    for i in range(n):\n        total_reach_dist = 0.0\n        for j in k_neighbors[i]:\n            total_reach_dist += reach_dist(i, j)\n        lrd[i] = k / total_reach_dist\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = 0.0\n        for j in k_neighbors[i]:\n            sum_lrd_neighbors += lrd[j]\n        lof_scores[i] = sum_lrd_neighbors / k / lrd[i]\n    lof_scores_rounded = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores_rounded > epsilon)[0]\n    return (lof_scores_rounded.tolist(), outlier_indices.tolist())\nassert local_outlier_factor([[0],[1],[2],[10]],1) == ([1.0, 1.0, 1.0, 8.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[10]],1)\"\nassert local_outlier_factor([[0],[1],[5]],1) == ([1.0, 1.0, 4.0], [2]), \"test case failed: local_outlier_factor([[0],[1],[5]],1)\"\nassert local_outlier_factor([[0],[1],[3],[4]],1) == ([1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1],[3],[4]],1)\"\nassert local_outlier_factor([[1],[2],[3],[50]],1) == ([1.0, 1.0, 1.0, 47.0], [3]), \"test case failed: local_outlier_factor([[1],[2],[3],[50]],1)\"\nassert local_outlier_factor([[0],[1]],1) == ([1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1]],1)\"\nassert local_outlier_factor([[0],[1],[2],[6]],1) == ([1.0, 1.0, 1.0, 4.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[6]],1)\"\nassert local_outlier_factor([[0],[2],[4],[6],[8]],1) == ([1.0, 1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[2],[4],[6],[8]],1)\"\nassert local_outlier_factor([[0],[1],[2],[3],[50]],2,2) == ([1.0, 1.0, 1.0, 1.0, 31.6667], [4]), \"test case failed: local_outlier_factor([[0],[1],[2],[3],[50]],2,2)\"\n"}
{"task_id": 573, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.zeros(n)\n    b = 0.0\n    error_count_history = []\n    for epoch in range(n_iter):\n        error_count = 0\n        for i in range(m):\n            x_i = X_train[i]\n            y_i = y_train[i]\n            decision = np.dot(w, x_i) + b\n            if y_i * decision <= 0:\n                w += eta * y_i * x_i\n                b += eta * y_i\n                error_count += 1\n        error_count_history.append(error_count)\n        if error_count == 0:\n            break\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded, error_count_history)\nassert perceptron_train(np.array([[ 1,  1], [-1, -1]]), np.array([ 1, -1]), 1.0, 10) == ([1.0, 1.0], 1.0, [1, 0]), \"test case failed: symmetric 2D points ([1,1],[-1,-1])\"\nassert perceptron_train(np.array([[-1],[ 1]]), np.array([-1,  1]), 1.0, 10) == ([2.0], 0.0, [2, 0]), \"test case failed: simple 1D dataset [-1,1]\"\nassert perceptron_train(np.array([[ 2,  3], [ 4,  1], [-1, -3], [-2, -1]]), np.array([ 1, 1, -1, -1]), 1.0, 10) == ([2.0, 3.0], 1.0, [1, 0]), \"test case failed: separable 2D quartet\"\nassert perceptron_train(np.array([[ 1, 0], [0, 1], [-1, -1]]), np.array([ 1, 1, -1]), 1.0, 10) == ([2.0, 1.0], 0.0, [2, 0]), \"test case failed: triangle dataset\"\nassert perceptron_train(np.array([[ 0,  2], [ 2,  0], [-2,  0], [ 0, -2]]), np.array([ 1, 1, -1, -1]), 1.0, 10) == ([2.0, 2.0], 0.0, [2, 0]), \"test case failed: axis-aligned cross\"\nassert perceptron_train(np.array([[ 2], [-3]]), np.array([ 1, -1]), 1.0, 10) == ([2.0], 1.0, [1, 0]), \"test case failed: 1D unequal magnitudes\"\nassert perceptron_train(np.array([[ 3,  3], [-3, -3]]), np.array([ 1, -1]), 1.0, 10) == ([3.0, 3.0], 1.0, [1, 0]), \"test case failed: scaled symmetric points\"\nassert perceptron_train(np.array([[ 0.5], [-0.5]]), np.array([ 1, -1]), 0.1, 20) == ([0.1], 0.0, [2, 0]), \"test case failed: low learning-rate 1D\"\nassert (lambda r,X,y: all(np.sign(np.dot(x, r[0]) + r[1]) == yi for x,yi in zip(X,y)))(perceptron_train(np.array([[ 1,  2], [ 2,  4], [-1, -0.5], [-2, -1]]), np.array([ 1, 1, -1, -1]), 1.0, 10), np.array([[ 1,  2], [ 2,  4], [-1, -0.5], [-2, -1]]), np.array([ 1, 1, -1, -1])), \"test case failed: colinear positive & negatives\"\nassert (lambda r,X,y: all(np.sign(np.dot(x, r[0]) + r[1]) == yi for x,yi in zip(X,y)))(perceptron_train(np.array([[ 1], [ 2], [-2], [-1]]), np.array([ 1, 1, -1, -1]), 1.0, 10), np.array([[ 1], [ 2], [-2], [-1]]), np.array([ 1, 1, -1, -1])), \"test case failed: mixed 1D quartet\""}
{"task_id": 574, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,) (4,) ", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n    X_train = np.empty((m * n_train, 2))\n    X_val = np.empty((m * n_val, 2))\n    y_train = np.empty(m * n_train, dtype=int)\n    y_val = np.empty(m * n_val, dtype=int)\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, size=n_train)\n        y_train = np.random.uniform(base + 1, base + 9, size=n_train)\n        x_val = np.random.uniform(base + 1, base + 9, size=n_val)\n        y_val = np.random.uniform(base + 1, base + 9, size=n_val)\n        x_train = np.round(x_train, 4)\n        y_train = np.round(y_train, 4)\n        x_val = np.round(x_val, 4)\n        y_val = np.round(y_val, 4)\n        start_idx = c * n_train\n        X_train[start_idx:start_idx + n_train] = np.column_stack((x_train, y_train))\n        y_train[start_idx:start_idx + n_train] = c\n        start_idx = c * n_val\n        X_val[start_idx:start_idx + n_val] = np.column_stack((x_val, y_val))\n        y_val[start_idx:start_idx + n_val] = c\n    return (X_train, X_val, y_train, y_val)\nassert generate_data(2, 2, 1, seed=42)[0].shape == (4, 2), \"test case failed: shape of X_train for seed=42,2,2,1\"\nassert generate_data(2, 2, 1, seed=42)[1].shape == (2, 2), \"test case failed: shape of X_val for seed=42,2,2,1\"\nassert (generate_data(2, 2, 1, seed=42)[2] == np.array([0, 0, 1, 1])).all(), \"test case failed: y_train labels for seed=42\"\nassert (generate_data(2, 2, 1, seed=42)[3] == np.array([0, 1])).all(), \"test case failed: y_val labels for seed=42\"\nassert generate_data(3, 3, 2, seed=0)[0].shape == (9, 2), \"test case failed: shape of X_train for seed=0,3,3,2\"\nassert generate_data(3, 3, 2, seed=0)[1].shape == (6, 2), \"test case failed: shape of X_val for seed=0,3,3,2\"\nassert set(generate_data(3, 3, 2, seed=0)[2]) == {0, 1, 2}, \"test case failed: y_train label set for seed=0\"\nassert set(generate_data(3, 3, 2, seed=0)[3]) == {0, 1, 2}, \"test case failed: y_val label set for seed=0\"\nassert (generate_data(1, 5, 5, seed=99)[2] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_train not all zeros\"\nassert (generate_data(1, 5, 5, seed=99)[3] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_val not all zeros\""}
{"task_id": 577, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function creates two NumPy arrays with coordinates and two with labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.empty((m * n_train, 2))\n    X_val = np.empty((m * n_val, 2))\n    y_train = np.empty(m * n_train, dtype=np.float64)\n    y_val = np.empty(m * n_val, dtype=np.float64)\n    for class_idx in range(m):\n        x_center = (class_idx // 2 + 0.1) * 10\n        x_width = 0.8\n        y_center = (class_idx % 2 * 0.5 + 0.1) * 10\n        y_width = 0.8\n        for sample_idx in range(n_train + n_val):\n            x = round(random.uniform(x_center - x_width / 2, x_center + x_width / 2), 4)\n            y = round(random.uniform(y_center - y_width / 2, y_center + y_width / 2), 4)\n            if sample_idx < n_train:\n                X_train[class_idx * n_train + sample_idx] = [x, y]\n                y_train[class_idx * n_train + sample_idx] = (class_idx - 0.5) * 2\n            else:\n                X_val[class_idx * n_val + (sample_idx - n_train)] = [x, y]\n                y_val[class_idx * n_val + (sample_idx - n_train)] = (class_idx - 0.5) * 2\n    return (X_train, X_val, y_train, y_val)\nassert generate_data(2, 5, 2, 0)[0].shape == (10, 2), \"test case failed: incorrect X_train shape for generate_data(2,5,2,0)\"\nassert generate_data(2, 5, 2, 0)[1].shape == (4, 2), \"test case failed: incorrect X_val shape for generate_data(2,5,2,0)\"\nassert generate_data(2, 5, 2, 0)[3].size == 4, \"test case failed: y_val is empty for generate_data(2,5,2,0)\"\nXr = generate_data(3, 1, 1, 1)[0]\nassert np.all(np.round(Xr, 4) == Xr), \"test case failed: coordinates are not rounded to 4 decimals\"\nlabels = set(generate_data(2, 3, 1, 2)[2])\nassert labels == {-1.0, 1.0}, \"test case failed: labels are incorrect for generate_data(2,3,1,2)\"\nassert len(set(generate_data(4, 1, 0, 3)[2])) == 4, \"test case failed: incorrect number of distinct labels for m=4\"\nassert np.array_equal(generate_data(4, 2, 1, 42)[0], generate_data(4, 2, 1, 42)[0]), \"test case failed: results differ for identical seeds\"\nassert not np.array_equal(generate_data(4, 2, 1, 1)[0], generate_data(4, 2, 1, 2)[0]), \"test case failed: different seeds give identical results\"\nassert generate_data(3, 0, 2, 5)[0].size == 0, \"test case failed: X_train should be empty when n_train=0\"\nassert generate_data(1, 0, 3, 7)[1].shape == (3, 2), \"test case failed: incorrect X_val size for generate_data(1,0,3,7)\""}
{"task_id": 578, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import List, Tuple\nfrom typing import List, Tuple\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    pairs = []\n    for i in range(len(corpus) - 1):\n        pairs.append((corpus[i], corpus[i + 1]))\n    return pairs\nassert make_pairs([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)], \"test case failed: make_pairs([1, 2, 3, 4])\"\nassert make_pairs([\"hello\", \"world\"]) == [(\"hello\", \"world\")], \"test case failed: make_pairs(['hello', 'world'])\"\nassert make_pairs([]) == [], \"test case failed: make_pairs([])\"\nassert make_pairs([42]) == [], \"test case failed: make_pairs([42])\"\nassert make_pairs([\"a\", \"a\", \"b\"]) == [(\"a\", \"a\"), (\"a\", \"b\")], \"test case failed: make_pairs(['a','a','b'])\"\nassert make_pairs(list(\"abc\")) == [(\"a\", \"b\"), (\"b\", \"c\")], \"test case failed: make_pairs(list('abc'))\"\nassert make_pairs([True, False, True]) == [(True, False), (False, True)], \"test case failed: make_pairs([True, False, True])\"\nassert make_pairs([0.1, 0.2, 0.3]) == [(0.1, 0.2), (0.2, 0.3)], \"test case failed: make_pairs([0.1, 0.2, 0.3])\"\nassert make_pairs([\"x\", 1, 2.5]) == [(\"x\", 1), (1, 2.5)], \"test case failed: make_pairs(['x', 1, 2.5])\"\nassert make_pairs([None, None, None]) == [(None, None), (None, None)], \"test case failed: make_pairs([None, None, None])\""}
{"task_id": 579, "completion_id": 0, "passed": false, "result": "failed: failed on square corners", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres. Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached. The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    if k > m:\n        raise ValueError('Number of clusters k cannot exceed the number of data points m.')\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    changed = True\n    for iteration in range(max_iters):\n        if not changed:\n            break\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = np.sqrt(np.sum((X[i] - centres) ** 2, axis=1))\n            closest_centre = np.argmin(distances)\n            new_labels[i] = closest_centre\n        changed = not np.array_equal(new_labels, labels)\n        labels = new_labels.copy()\n        for c in range(k):\n            cluster_points = X[labels == c]\n            if len(cluster_points) == 0:\n                continue\n            new_centre = np.mean(cluster_points, axis=0)\n            centres[c] = new_centre\n    rounded_centres = [np.round(centre, 4).tolist() for centre in centres]\n    return (labels.tolist(), rounded_centres)\nassert kmeans(np.array([[1,1],[1.5,2],[3,4],[5,7],[3.5,5],[4.5,5],[3.5,4.5]]),2,100) == ([0,0,1,1,1,1,1], [[1.25,1.5],[3.9,5.1]]), \"failed on simple 2-cluster example\"\nassert kmeans(np.array([[0,0],[10,10],[0,10],[10,0]]),2,50) == ([0,1,0,0], [[3.3333,3.3333],[10.0,10.0]]), \"failed on square corners\"\nassert kmeans(np.array([[0],[5],[10]]),3,10) == ([0,1,2], [[0.0],[5.0],[10.0]]), \"each point its own cluster\"\nassert kmeans(np.array([[0],[1],[2],[3],[9],[10],[11],[12]]),2,50) == ([0,0,0,0,1,1,1,1], [[1.5],[10.5]]), \"failed on 1-D two clusters\"\nassert kmeans(np.array([[1,2,3],[1,2,4],[10,10,10],[11,11,11]]),2,50) == ([0,0,1,1], [[1.0,2.0,3.5],[10.5,10.5,10.5]]), \"failed on 3-D clustering\"\nassert kmeans(np.array([[0,0],[0,0.1],[10,10],[10,10.1]]),2,50) == ([0,0,1,1], [[0.0,0.05],[10.0,10.05]]), \"failed on very close points\"\nassert kmeans(np.array([[2,2],[2,2],[2,2]]),1,5) == ([0,0,0], [[2.0,2.0]]), \"single cluster identical points\"\nassert kmeans(np.array([[1,1],[2,2],[3,3],[8,8],[9,9],[10,10]]),2,100) == ([0,0,0,1,1,1], [[2.0,2.0],[9.0,9.0]]), \"failed on two distant blobs\""}
{"task_id": 581, "completion_id": 0, "passed": false, "result": "failed: failed: L1 penalty example", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = X @ weights + bias\n        residuals = y - predictions\n        gradients_weights = []\n        for j in range(n):\n            gradient_wj = -2 * (X[:, j] @ residuals) + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n            gradients_weights.append(gradient_wj / m)\n        gradient_b = -2 * np.sum(residuals) / m\n        weights -= learning_rate * np.array(gradients_weights)\n        bias -= learning_rate * gradient_b\n    return ([round(w, 4) for w in weights], round(bias, 4))\nassert elastic_net_regression(np.array([[1, 0], [0, 1]]), np.array([1, 1]), 0.5, 1, 0.0, 0.0) == ([0.5, 0.5], 1.0), \"failed: basic 2-D example\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([2, 4]), 0.1, 1, 0.0, 0.0) == ([1.0], 0.6), \"failed: single feature, no regularisation\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([1, 1]), 1.0, 1, 1.0, 0.0) == ([2.5], 2.0), \"failed: L1 penalty example\"\nassert elastic_net_regression(np.array([[1, 1], [1, 1]]), np.array([2, 2]), 0.5, 1, 0.0, 0.0) == ([2.0, 2.0], 2.0), \"failed: identical features\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([2, 2]), 0.1, 1, 0.0, 5.0) == ([0.4], 0.4), \"failed: L2 penalty (first iteration)\"\nassert elastic_net_regression(np.array([[1, 2], [3, 4]]), np.array([1, 0]), 0.2, 1, 0.0, 0.0) == ([0.2, 0.4], 0.2), \"failed: two samples, two features\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([3, 4]), 0.0, 3, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero learning rate\"\nassert elastic_net_regression(np.array([[1]]), np.array([1]), 1.0, 0, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero iterations\"\nassert elastic_net_regression(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 2, 3]), 0.1, 1, 0.0, 0.0) == ([0.0667, 0.1333, 0.2], 0.4), \"failed: 3-D identity matrix\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([-1, -1]), 0.5, 1, 0.0, 0.0) == ([-1.0], -1.0), \"failed: negative targets\""}
{"task_id": 582, "completion_id": 0, "passed": false, "result": "failed: test case failed: 2 points, k=1", "solution": "import numpy as np\nimport numpy as np\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X = np.array(X)\n    n = X.shape[0]\n    if n == 1:\n        return [[0]]\n    k = min(int(np.sqrt(n)), 10)\n    dists = np.linalg.norm(X[:, np.newaxis] - X[np.newaxis, :], axis=2)\n    dists[np.arange(n), np.arange(n)] = float('inf')\n    nearest_indices = np.argsort(dists, axis=1)[:, :k]\n    W = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        for j in nearest_indices[i]:\n            W[i, j] = 1\n    W = (W + W.T).astype(int)\n    return W.tolist()\nassert nearest_neighbor_graph([[0,0],[1,0]]) == [[0,1],[1,0]], \"test case failed: 2 points, k=1\"\nassert nearest_neighbor_graph([[0,0],[1,0],[0,1]]) == [[0,1,1],[1,0,0],[1,0,0]], \"test case failed: triangle, k=1\"\nassert nearest_neighbor_graph([[0,0],[3,0],[0,4]]) == [[0,1,1],[1,0,0],[1,0,0]], \"test case failed: right triangle, k=1\"\nassert nearest_neighbor_graph([[0,0]]) == [[0]], \"test case failed: single point\"\nassert nearest_neighbor_graph([[0],[1],[2],[6],[7]]) == [[0,1,1,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[0,0,1,1,0]], \"test case failed: 1-D five points, k=2\"\nassert nearest_neighbor_graph([[0,0],[1,0],[0,1],[10,10]]) == [[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]], \"test case failed: 4 points, outlier\"\nassert nearest_neighbor_graph([[0,0],[0,0.1],[0,0.2]]) == [[0,1,0],[1,0,1],[0,1,0]], \"test case failed: nearly colinear three points\"\nassert nearest_neighbor_graph([[0,0],[1,0],[2,0],[3,0]]) == [[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]], \"test case failed: 4 colinear points, k=2\"\nassert nearest_neighbor_graph([[0],[5],[10]]) == [[0,1,0],[1,0,1],[0,1,0]], \"test case failed: evenly spaced three points\"\nassert nearest_neighbor_graph([[0,0],[1,1],[2,2],[3,3],[4,4]]) == [[0,1,1,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[0,0,1,1,0]], \"test case failed: 5 diagonal points, k=2\""}
{"task_id": 584, "completion_id": 0, "passed": false, "result": "failed: test case failed: make_initial_state([[5]])", "solution": "import numpy as np\nimport numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    np_state = np.array(state)\n    stacked_state = np.stack([np_state] * 4)\n    return stacked_state.tolist()\nassert make_initial_state([[5]]) == [[[5, 5, 5, 5]]], \"test case failed: make_initial_state([[5]])\"\nassert make_initial_state([[0, 1], [2, 3]]) == [[[0,0,0,0],[1,1,1,1]],[[2,2,2,2],[3,3,3,3]]], \"test case failed: make_initial_state([[0, 1], [2, 3]])\"\nassert make_initial_state([[0.1, 0.2, 0.3]]) == [[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]], \"test case failed: single-row float input\"\nassert make_initial_state([[1], [2], [3]]) == [[[1,1,1,1]],[[2,2,2,2]],[[3,3,3,3]]], \"test case failed: single-column input\"\nassert make_initial_state([[1, 2, 3], [4, 5, 6]]) == [[[1,1,1,1],[2,2,2,2],[3,3,3,3]],[[4,4,4,4],[5,5,5,5],[6,6,6,6]]], \"test case failed: 2\u00d73 input\"\nassert make_initial_state([[1.5,-2.2],[3.0,0.0]]) == [[[1.5,1.5,1.5,1.5],[-2.2,-2.2,-2.2,-2.2]],[[3.0,3.0,3.0,3.0],[0.0,0.0,0.0,0.0]]], \"test case failed: mixed sign floats\"\nassert make_initial_state([[-1,-2],[-3,-4]]) == [[[-1,-1,-1,-1],[-2,-2,-2,-2]],[[-3,-3,-3,-3],[-4,-4,-4,-4]]], \"test case failed: negative integers\"\nassert make_initial_state([[0,0],[0,0]]) == [[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]], \"test case failed: all zeros\"\nassert make_initial_state([[1,2,3],[4,5,6],[7,8,9]]) == [[[1,1,1,1],[2,2,2,2],[3,3,3,3]],[[4,4,4,4],[5,5,5,5],[6,6,6,6]],[[7,7,7,7],[8,8,8,8],[9,9,9,9]]], \"test case failed: 3\u00d73 input\"\nassert make_initial_state([[9],[8],[7],[6]]) == [[[9,9,9,9]],[[8,8,8,8]],[[7,7,7,7]],[[6,6,6,6]]], \"test case failed: 4\u00d71 input\""}
{"task_id": 585, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a > b:\n        return 1\n    elif a == b:\n        return 0\n    else:\n        return -1\nassert cmp(5, 3) == 1, \"test case failed: cmp(5, 3)\"\nassert cmp(3, 5) == -1, \"test case failed: cmp(3, 5)\"\nassert cmp(7, 7) == 0, \"test case failed: cmp(7, 7)\"\nassert cmp(-1, -5) == 1, \"test case failed: cmp(-1, -5)\"\nassert cmp(-10, -2) == -1, \"test case failed: cmp(-10, -2)\"\nassert cmp(3.14, 3.14) == 0, \"test case failed: cmp(3.14, 3.14)\"\nassert cmp(\"apple\", \"banana\") == -1, \"test case failed: cmp('apple', 'banana')\"\nassert cmp(\"zebra\", \"alpha\") == 1, \"test case failed: cmp('zebra', 'alpha')\"\nassert cmp([1, 2], [1, 2]) == 0, \"test case failed: cmp([1, 2], [1, 2])\"\nassert cmp((1, 3), (1, 2)) == 1, \"test case failed: cmp((1, 3), (1, 2))\""}
{"task_id": 586, "completion_id": 0, "passed": false, "result": "failed: test case failed: linear data, x_query=2", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised \u0177 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('x and y must have the same length.')\n    if not 2 <= window <= len(x):\n        raise ValueError('Window must be between 2 and the length of x.')\n    x_norm = (x - x.min()) / (x.max() - x.min())\n    y_norm = (y - y.min()) / (y.max() - y.min())\n    sorted_indices = np.argsort(x_norm)\n    sorted_x = x_norm[sorted_indices]\n    sorted_y = y_norm[sorted_indices]\n    idx = np.searchsorted(sorted_x, x_query)\n    start = max(0, idx - window // 2)\n    end = min(len(sorted_x), idx + window - window // 2)\n    window_indices = sorted_indices[start:end]\n    x_window = sorted_x[start:end]\n    y_window = sorted_y[start:end]\n    d = np.abs(x_window - x_query)\n    d_max = np.max(d)\n    weights = np.zeros_like(d)\n    for i in range(len(weights)):\n        if d[i] <= d_max:\n            weights[i] = (1 - (d[i] / d_max) ** 3) ** 3\n        else:\n            weights[i] = 0\n    w = weights\n    xw = x_window * w\n    yw = y_window * w\n    a_weighted = np.sum(yw) / np.sum(w)\n    b_numerator = np.sum(xw * yw) - np.sum(xw) * np.sum(yw) / np.sum(w)\n    b_denominator = np.sum(xw ** 2) - np.sum(xw) ** 2 / np.sum(w)\n    if b_denominator == 0:\n        b = 0\n    else:\n        b = b_numerator / b_denominator\n    y_pred_norm = a_weighted + b * x_query\n    y_pred = y.min() + y_pred_norm * (y.max() - y.min())\n    return np.round(y_pred, 4)\nassert lowess_predict(np.array([0,1,2,3,4,5]), np.array([3,5,7,9,11,13]), 2, 4) == 7.0, \"test case failed: linear data, x_query=2\"\nassert lowess_predict(np.array([0,1,2,3,4,5]), np.array([3,5,7,9,11,13]), 4, 4) == 11.0, \"test case failed: linear data, x_query=4\"\nassert lowess_predict(np.arange(-5,3), 3*np.arange(-5,3)-2, -1, 5) == -5.0, \"test case failed: slope 3, intercept -2, x_query=-1\"\nassert lowess_predict(np.arange(0,11), 2.5*np.arange(0,11)+7, 5, 6) == 19.5, \"test case failed: slope 2.5, intercept 7, x_query=5\"\nassert lowess_predict(np.arange(0,11), 2.5*np.arange(0,11)+7, 7, 6) == 24.5, \"test case failed: slope 2.5, intercept 7, x_query=7\"\nassert lowess_predict(np.arange(1,10), -2*np.arange(1,9+1)+20, 6, 4) == 8.0, \"test case failed: negative slope\"\nassert lowess_predict(np.arange(0,7), 0.5*np.arange(0,7)+1.5, 3, 4) == 3.0, \"test case failed: slope 0.5, intercept 1.5\"\nassert lowess_predict(np.array([1,1.5,2,2.5,3]), 4*np.array([1,1.5,2,2.5,3])-1, 2.25, 5) == 8.0, \"test case failed: fractional x_query\""}
{"task_id": 587, "completion_id": 0, "passed": true, "result": "passed", "solution": "import random\nimport random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    random.seed(0)\n    buffer = []\n    outputs = []\n    for op in operations:\n        command = op[0]\n        if command == 'append':\n            transition = op[1]\n            buffer.append(transition)\n        elif command == 'pop':\n            if buffer:\n                outputs.append(buffer.pop())\n            else:\n                outputs.append(None)\n        elif command == 'sample':\n            batch_size = op[1]\n            if batch_size > len(buffer):\n                outputs.append([])\n            else:\n                sampled = random.sample(buffer, batch_size)\n                outputs.append(sampled)\n        elif command == 'size':\n            outputs.append(len(buffer))\n    return outputs\nassert manage_replay_memory([('append', 1), ('append', 2), ('sample', 1), ('pop',), ('size',)]) == [[2], 2, 1], \"test case failed: basic mixed operations\"\nassert manage_replay_memory([('size',)]) == [0], \"test case failed: size on empty buffer\"\nassert manage_replay_memory([('pop',)]) == [None], \"test case failed: pop on empty buffer\"\nassert manage_replay_memory([('append', 'a'), ('sample', 5)]) == [[]], \"test case failed: oversampling returns empty list\"\nassert manage_replay_memory([('append', 'first'), ('append', 'second'), ('pop',)]) == ['second'], \"test case failed: LIFO pop behaviour\"\nassert manage_replay_memory([('append', 1), ('append', 2), ('sample', 1), ('size',)]) == [[2], 2], \"test case failed: sample does not change size\"\nassert manage_replay_memory([('append', 100), ('pop',), ('pop',)]) == [100, None], \"test case failed: pop returns None on second call\"\nassert manage_replay_memory([('append', 'x'), ('append', 'y'), ('append', 'z'), ('size',), ('pop',), ('size',)]) == [3, 'z', 2], \"test case failed: size before and after pop\"\nassert manage_replay_memory([('sample', 0), ('append', 5), ('sample', 0), ('size',)]) == [[], [], 1], \"test case failed: zero-sized sampling\""}
{"task_id": 588, "completion_id": 0, "passed": true, "result": "passed", "solution": "from typing import Optional\nfrom typing import Optional\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self, data=None, split_variable=None, split_variable_value=None, left: Optional['Node']=None, right: Optional['Node']=None, depth: int=0, criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    left_depth = tree_max_depth(root.left)\n    right_depth = tree_max_depth(root.right)\n    current_depth = max(left_depth, right_depth) + 1\n    return current_depth\nassert tree_max_depth(None) == -1, \"test case failed: tree_max_depth(None)\"\nsingle = Node(1)\nassert tree_max_depth(single) == 0, \"test case failed: single node depth\"\nroot2 = Node(1)\nroot2.left = Node(2)\nroot2.right = Node(3)\nassert tree_max_depth(root2) == 1, \"test case failed: two-level balanced\"\nleft_skew = Node(0)\ncurrent = left_skew\nfor i in range(4):\n    current.left = Node(i)\n    current = current.left\nassert tree_max_depth(left_skew) == 4, \"test case failed: left-skewed depth 4\"\nright_skew = Node(0)\ncurrent = right_skew\nfor i in range(3):\n    current.right = Node(i)\n    current = current.right\nassert tree_max_depth(right_skew) == 3, \"test case failed: right-skewed depth 3\"\nroot3 = Node(10)\nroot3.left = Node(5)\nroot3.right = Node(20)\nroot3.left.left = Node(3)\nroot3.left.right = Node(7)\nroot3.right.left = Node(15)\nroot3.right.right = Node(25)\nassert tree_max_depth(root3) == 2, \"test case failed: balanced depth 2\"\nunbalanced1 = Node(1)\nunbalanced1.left = Node(2)\nunbalanced1.left.left = Node(3)\nunbalanced1.right = Node(4)\nassert tree_max_depth(unbalanced1) == 2, \"test case failed: unbalanced left deeper\"\nunbalanced2 = Node(1)\nunbalanced2.right = Node(2)\nunbalanced2.right.right = Node(3)\nunbalanced2.right.right.right = Node(4)\nassert tree_max_depth(unbalanced2) == 3, \"test case failed: unbalanced right deeper\"\ncomplex_root = Node(0)\ncomplex_root.left = Node(1)\ncomplex_root.right = Node(2)\ncomplex_root.left.right = Node(3)\ncomplex_root.left.right.left = Node(4)\ncomplex_root.right.left = Node(5)\nassert tree_max_depth(complex_root) == 3, \"test case failed: complex tree depth 3\"\nroot_one_child = Node(9)\nroot_one_child.right = Node(10)\nassert tree_max_depth(root_one_child) == 1, \"test case failed: root with one child\""}
{"task_id": 590, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    ground_np = np.array(ground, dtype=float)\n    flags_np = np.array(flags, dtype=bool)\n    clicks = []\n    new_flags = []\n    for r in range(ground_np.shape[0]):\n        for c in range(ground_np.shape[1]):\n            if flags_np[r, c] or np.isnan(ground_np[r, c]):\n                continue\n            value = ground_np[r, c]\n            neighbors = []\n            for dr in [-1, 0, 1]:\n                for dc in [-1, 0, 1]:\n                    if dr == 0 and dc == 0:\n                        continue\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < ground_np.shape[0] and 0 <= nc < ground_np.shape[1]:\n                        neighbors.append((nr, nc))\n            bombs = sum((flags_np[nr, nc] for (nr, nc) in neighbors))\n            unexplored = sum((not flags_np[nr, nc] and np.isnan(ground_np[nr, nc]) for (nr, nc) in neighbors))\n            if value == 0:\n                for (nr, nc) in neighbors:\n                    if not flags_np[nr, nc] and np.isnan(ground_np[nr, nc]):\n                        clicks.append((nr, nc))\n            elif value == 8:\n                for (nr, nc) in neighbors:\n                    if not flags_np[nr, nc] and np.isnan(ground_np[nr, nc]):\n                        new_flags.append((nr, nc))\n            elif bombs == value:\n                for (nr, nc) in neighbors:\n                    if not flags_np[nr, nc] and np.isnan(ground_np[nr, nc]):\n                        clicks.append((nr, nc))\n            elif unexplored == value:\n                for (nr, nc) in neighbors:\n                    if not flags_np[nr, nc] and np.isnan(ground_np[nr, nc]):\n                        new_flags.append((nr, nc))\n    clicks = list(set(clicks))\n    new_flags = list(set(new_flags))\n    clicks.sort()\n    new_flags.sort()\n    return (clicks, new_flags)\nimport numpy as np\nground1 = [[1, np.nan], [np.nan, np.nan]]\nflags1  = [[False, True ], [False, False]]\nres1 = minesweeper_step(ground1, flags1)\nassert set(res1[0]) == {(1, 0), (1, 1)} and res1[1] == [], \"test case failed: example 1\"\nimport numpy as np\nground2 = [[0, np.nan], [np.nan, np.nan]]\nflags2  = [[False, False], [False, False]]\nres2 = minesweeper_step(ground2, flags2)\nassert set(res2[0]) == {(0, 1), (1, 0), (1, 1)} and res2[1] == [], \"test case failed: value 0 reveal\"\nimport numpy as np\nground3 = [[8, np.nan], [np.nan, np.nan]]\nflags3  = [[False, False], [False, False]]\nres3 = minesweeper_step(ground3, flags3)\nassert res3[0] == [] and set(res3[1]) == {(0, 1), (1, 0), (1, 1)}, \"test case failed: value 8 flag\"\nimport numpy as np\nground4 = [[np.nan, np.nan, np.nan],\n           [np.nan, 2,       np.nan],\n           [np.nan, np.nan, np.nan]]\nflags4  = [[True,  True,  False],\n           [False, False, False],\n           [False, False, False]]\nres4 = minesweeper_step(ground4, flags4)\nexpected_clicks4 = {(0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res4[0]) == expected_clicks4 and res4[1] == [], \"test case failed: bombs == value reveal\"\nimport numpy as np\nground5 = [[3, np.nan], [np.nan, np.nan]]\nflags5  = [[False, False], [False, False]]\nres5 = minesweeper_step(ground5, flags5)\nassert res5[0] == [] and set(res5[1]) == {(0, 1), (1, 0), (1, 1)}, \"test case failed: unexplored == value flag\"\nimport numpy as np\nground6 = [[np.nan, np.nan], [np.nan, np.nan]]\nflags6  = [[False, False], [False, False]]\nres6 = minesweeper_step(ground6, flags6)\nassert res6 == ([], []), \"test case failed: completely hidden board\"\nimport numpy as np\nground7 = [[1]]\nflags7  = [[True]]\nres7 = minesweeper_step(ground7, flags7)\nassert res7 == ([], []), \"test case failed: flagged revealed square is ignored\"\nimport numpy as np\nground8 = [[1, np.nan, np.nan],\n           [2, np.nan, np.nan],\n           [1, np.nan, np.nan]]\nflags8  = [[False]*3 for _ in range(3)]\nres8 = minesweeper_step(ground8, flags8)\nassert res8 == ([], []), \"test case failed: no safe action\"\nimport numpy as np\nground9 = [[np.nan, np.nan, np.nan],\n           [np.nan, 0,       np.nan],\n           [np.nan, np.nan, np.nan]]\nflags9  = [[False]*3 for _ in range(3)]\nres9 = minesweeper_step(ground9, flags9)\nexpected_clicks9 = {(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res9[0]) == expected_clicks9 and res9[1] == [], \"test case failed: central 0 reveal\"\nimport numpy as np\nground10 = [[np.nan, np.nan, np.nan],\n            [np.nan, 1,       np.nan],\n            [np.nan, np.nan, np.nan]]\nflags10  = [[False, True,  False],\n            [False, False, False],\n            [False, False, False]]\nres10 = minesweeper_step(ground10, flags10)\nexpected_clicks10 = {(0, 0), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)}\nassert set(res10[0]) == expected_clicks10 and res10[1] == [], \"test case failed: bombs == value reveal 2\""}
{"task_id": 591, "completion_id": 0, "passed": false, "result": "failed: shapes (4,) and (3,2) not aligned: 4 (dim 0) != 3 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\"\"\"\n    current_input = np.array(x, dtype=np.float64)\n    for layer in weights:\n        current_input = np.concatenate((np.ones_like(current_input), current_input))\n        weights_matrix = np.array(layer, dtype=np.float64)\n        current_input = np.dot(current_input, weights_matrix.T)\n        if layer != weights[-1]:\n            current_input = np.maximum(0, current_input)\n    result = np.round(current_input, 4)\n    if len(result.shape) == 1:\n        return float(result[0])\n    else:\n        return result.tolist()\nassert neural_net_predict([[[0.5,0.2,0.8],[1.0,-0.5,0.3]],[[0.7,0.6,-1.2]]],[0.1,0.4])==-0.08,\"test case failed: basic 2-layer network\"\nassert neural_net_predict([[[2,3]]],[4])==14.0,\"test case failed: single-layer network\"\nassert neural_net_predict([[[0.5,0.5]],[[1.0,1.0]],[[0.2,2.0]]],[2])==5.2,\"test case failed: three-layer network\"\nassert neural_net_predict([[[0,-1]],[[0,1]]],[2])==0.0,\"test case failed: ReLU zeroing\"\nassert neural_net_predict([[[1,0.5,0.5],[0,-1,-1]],[[0,1,1]]],[1,1])==2.0,\"test case failed: mixed activations\"\nassert neural_net_predict([[[5,-1]]],[5])==0.0,\"test case failed: negative linear result\"\nassert neural_net_predict([[[0,2],[0,0.5]],[[0,1,1]]],[3])==7.5,\"test case failed: 2-neuron hidden layer\"\nassert neural_net_predict([[[-1,0]],[[0,5]]],[10])==0.0,\"test case failed: negative input to ReLU\"\nassert neural_net_predict([[[0,1],[0,-1]],[[0,2,2]]],[4])==8.0,\"test case failed: hidden neuron suppression\"\nassert neural_net_predict([[[1,1]],[[0,0.5]],[[1,2]]],[1])==3.0,\"test case failed: deeper network\""}
{"task_id": 592, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    unopened_neighbours = []\n    flagged_count = 0\n    for (dr, dc) in directions:\n        r = row + dr\n        c = col + dc\n        if 0 <= r < clicked.shape[0] and 0 <= c < clicked.shape[1]:\n            if not clicked[r, c]:\n                unopened_neighbours.append((r, c))\n            if flags[r, c]:\n                flagged_count += 1\n    unopened_neighbours.sort()\n    return (unopened_neighbours, flagged_count)\nclicked1 = np.array([[ True, False, False],\n                     [ True,  True, False],\n                     [False, False, False]])\nflags1   = np.array([[False, False, False],\n                     [False, False,  True],\n                     [False, False, False]])\nassert analyze_cell(clicked1, flags1, 1, 1) == ([(0, 1), (0, 2), (1, 2), (2, 0), (2, 1), (2, 2)], 1), \"test case failed: centre 3x3 board\"\nclicked2 = np.array([[False, False],\n                     [False, False]])\nflags2   = np.array([[False, False],\n                     [False, False]])\nassert analyze_cell(clicked2, flags2, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 0), \"test case failed: corner 2x2 no flags\"\nclicked3 = np.array([[False, False],\n                     [False, False]])\nflags3   = np.array([[False,  True],\n                     [ True,  True]])\nassert analyze_cell(clicked3, flags3, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 3), \"test case failed: corner 2x2 all flags\"\nclicked4 = np.array([[ True,  True,  True],\n                     [ True,  True,  True],\n                     [ True,  True,  True]])\nflags4   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked4, flags4, 1, 1) == ([], 0), \"test case failed: fully opened board\"\nclicked5 = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags5   = np.array([[False,  True, False],\n                     [False, False, False],\n                     [False, False,  True]])\nassert analyze_cell(clicked5, flags5, 0, 0) == ([(0, 1), (1, 0), (1, 1)], 1), \"test case failed: top-left with one flag\"\nclicked6 = np.array([[False]])\nflags6   = np.array([[False]])\nassert analyze_cell(clicked6, flags6, 0, 0) == ([], 0), \"test case failed: 1x1 board\"\nclicked7 = np.array([[False, False, False, False],\n                     [False,  True, False, False],\n                     [False, False, False, False],\n                     [False, False, False, False]])\nflags7   = np.array([[False, False, False, False],\n                     [False, False, False, False],\n                     [False, False,  True, False],\n                     [False, False, False, False]])\nassert analyze_cell(clicked7, flags7, 1, 1) == ([(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)], 1), \"test case failed: 4x4 internal cell\"\nclicked8 = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags8   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked8, flags8, 2, 2) == ([(1, 1), (1, 2), (2, 1)], 0), \"test case failed: bottom-right no flags\"\nclicked9 = np.array([[ True, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nflags9   = np.array([[False, False, False],\n                     [False, False, False],\n                     [False, False, False]])\nassert analyze_cell(clicked9, flags9, 0, 1) == ([(0, 2), (1, 0), (1, 1), (1, 2)], 0), \"test case failed: top edge\"\nclicked10 = np.array([[False, False, False],\n                      [False, False, False],\n                      [False, False, False]])\nflags10   = np.array([[ True, False,  True],\n                      [False, False, False],\n                      [ True, False,  True]])\nassert analyze_cell(clicked10, flags10, 1, 1) == ([(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)], 4), \"test case failed: centre with multiple flags\""}
{"task_id": 593, "completion_id": 0, "passed": false, "result": "failed: failed: simple subset deduction", "solution": "from copy import deepcopy\nfrom copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\"\"\"\n    safe = set()\n    mines = set()\n    current_constraints = deepcopy(constraints)\n    while True:\n        new_constraints = []\n        for (variables, value) in current_constraints:\n            if value == 0:\n                for var in variables:\n                    safe.add(var)\n            elif value == len(variables):\n                for var in variables:\n                    mines.add(var)\n            else:\n                new_constraints.append((variables, value))\n        new_constraints = []\n        for (variables, value) in current_constraints:\n            filtered_vars = [var for var in variables if var not in mines and var not in safe]\n            if filtered_vars:\n                new_constraints.append((filtered_vars, value - len(safe & set(filtered_vars))))\n        new_constraints = []\n        seen = set()\n        for (i, (s1, v1)) in enumerate(new_constraints):\n            for (j, (s2, v2)) in enumerate(new_constraints):\n                if i != j:\n                    if s1.issubset(s2):\n                        new_list = []\n                        for (k, (s, v)) in enumerate(new_constraints):\n                            if k != j:\n                                new_list.append((s, v))\n                        new_list.append((s2 - s1, v2 - v1))\n                        new_constraints = new_list\n                        break\n            else:\n                continue\n            break\n        unique_constraints = []\n        for (variables, value) in new_constraints:\n            if (variables, value) not in seen:\n                seen.add((variables, value))\n                unique_constraints.append((variables, value))\n        if new_constraints == current_constraints:\n            break\n        current_constraints = unique_constraints\n    return (sorted(safe), sorted(mines))\nassert deduce_mines([[['A','B'],1],[['A'],1]]) == (['B'], ['A']), \"failed: simple subset deduction\"\nassert deduce_mines([[['A','B','C'],0]]) == (['A','B','C'], []), \"failed: all safe\"\nassert deduce_mines([[['X','Y','Z'],3]]) == ([], ['X','Y','Z']), \"failed: all mines\"\nassert deduce_mines([[['A','B','C'],2],[['B','C'],1],[['C','D'],1]]) == ([], ['A']), \"failed: chained deduction\"\nassert deduce_mines([[['A'],0],[['A','B'],1],[['B','C'],1]]) == (['A','C'], ['B']), \"failed: propagation after solved constraint\"\nassert deduce_mines([[['P','Q'],1],[['Q','R'],1],[['P','R'],1]]) == ([], []), \"failed: no certain knowledge\"\nassert deduce_mines([[['M','N'],1],[['N','M'],1],[['M','N'],1]]) == ([], []), \"failed: duplicate removal\"\nassert deduce_mines([]) == ([], []), \"failed: empty input\"\nassert deduce_mines([[['A','B','C','D'],2],[['A','B'],1],[['C','D'],1]]) == ([], []), \"failed: balanced constraints\"\nassert deduce_mines([[['A','B','C'],2],[['B','C','D'],2],[['A','D'],0]]) == (['A','D'], ['B','C']), \"failed: multiple deductions\""}
{"task_id": 594, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    rows = len(maze)\n    cols = len(maze[0]) if rows > 0 else 0\n    graph = {}\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row][col] == 0:\n                neighbors = []\n                for (dr, dc) in directions:\n                    (new_row, new_col) = (row + dr, col + dc)\n                    if 0 <= new_row < rows and 0 <= new_col < cols and (maze[new_row][new_col] == 0):\n                        neighbors.append((new_row, new_col))\n                neighbors.sort()\n                graph[row, col] = neighbors\n    return graph\nassert maze_to_graph([[0]]) == {(0, 0): []}, \"test case failed: single open cell\"\nassert maze_to_graph([[1]]) == {}, \"test case failed: single wall cell\"\nassert maze_to_graph([[0, 0], [0, 0]]) == {(0, 0): [(0, 1), (1, 0)], (0, 1): [(0, 0), (1, 1)], (1, 0): [(0, 0), (1, 1)], (1, 1): [(0, 1), (1, 0)]}, \"test case failed: 2x2 all open maze\"\nassert maze_to_graph([[0, 1, 0], [0, 0, 0], [1, 0, 1]]) == {(0, 0): [(1, 0)], (0, 2): [(1, 2)], (1, 0): [(0, 0), (1, 1)], (1, 1): [(1, 0), (1, 2), (2, 1)], (1, 2): [(0, 2), (1, 1)], (2, 1): [(1, 1)]}, \"test case failed: mixed 3x3 maze\"\nassert maze_to_graph([[0, 0, 0]]) == {(0, 0): [(0, 1)], (0, 1): [(0, 0), (0, 2)], (0, 2): [(0, 1)]}, \"test case failed: horizontal corridor\"\nassert maze_to_graph([[0], [0], [0]]) == {(0, 0): [(1, 0)], (1, 0): [(0, 0), (2, 0)], (2, 0): [(1, 0)]}, \"test case failed: vertical corridor\"\nassert maze_to_graph([[0, 1, 0], [0, 1, 0]]) == {(0, 0): [(1, 0)], (0, 2): [(1, 2)], (1, 0): [(0, 0)], (1, 2): [(0, 2)]}, \"test case failed: 2x3 with blocked column\"\nassert maze_to_graph([[0, 1], [1, 0]]) == {(0, 0): [], (1, 1): []}, \"test case failed: 2x2 checkerboard\"\nassert maze_to_graph([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == {(1, 1): []}, \"test case failed: single center cell\"\nassert maze_to_graph([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) == {(0, 0): [], (1, 1): [], (2, 2): []}, \"test case failed: diagonal open cells\""}
{"task_id": 595, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic 2-cluster", "solution": "import numpy as np\nimport numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Compute centroids for K-Means clustering from scratch.\n    \n    Parameters:\n    X (np.ndarray): Input data with shape (n_samples, n_features)\n    k (int): Number of clusters\n    max_iters (int): Maximum number of iterations to perform\n    \n    Returns:\n    list of lists: Sorted and rounded centroids\n    \"\"\"\n    centroids = X[:k].copy()\n    for iteration in range(max_iters):\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            cluster_indices = np.where(labels == i)[0]\n            if len(cluster_indices) > 0:\n                new_centroids[i] = np.mean(X[cluster_indices], axis=0)\n        if np.all(np.abs(new_centroids - centroids) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    result = [list(np.round(c, 4)) for c in sorted_centroids]\n    return result\nassert kmeans_centroids(np.array([[1, 1], [2, 1], [4, 3], [5, 4]]), 2) == [[1.5, 1.0], [4.5, 3.5]], \"test case failed: basic 2-cluster\"\nassert kmeans_centroids(np.array([[0, 0], [0, 1], [10, 10], [11, 11]]), 2) == [[0.0, 0.5], [10.5, 10.5]], \"test case failed: clearly separated clusters\"\nassert kmeans_centroids(np.array([[1], [2], [10], [12], [19]]), 3) == [[1.0], [2.0], [13.6667]], \"test case failed: 1-D three clusters\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [1, 0], [10, 9], [12, 11], [11, 9]]), 2) == [[1.3333, 1.0], [11.0, 9.6667]], \"test case failed: mixed positions\"\nassert kmeans_centroids(np.array([[-5], [-4], [-5], [10], [11], [12]]), 2) == [[-4.6667], [11.0]], \"test case failed: negative and positive values\"\nassert kmeans_centroids(np.array([[0, 0], [0, 10], [10, 0], [10, 10]]), 4) == [[0.0, 0.0], [0.0, 10.0], [10.0, 0.0], [10.0, 10.0]], \"test case failed: one point per cluster\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [5, 5], [9, 9], [8, 9]]), 3) == [[1.0, 2.0], [2.0, 1.0], [7.3333, 7.6667]], \"test case failed: three clusters 2-D\"\nassert kmeans_centroids(np.array([[1], [100]]), 2) == [[1.0], [100.0]], \"test case failed: two extreme points\"\nassert kmeans_centroids(np.array([[1, 1], [1, 2], [2, 1], [2, 2]]), 1) == [[1.5, 1.5]], \"test case failed: single centroid\"\nassert kmeans_centroids(np.array([[0, 0], [10, 0], [0, 10], [8, 8]]), 2) == [[0.0, 5.0], [9.0, 4.0]], \"test case failed: asymmetrical clusters\""}
{"task_id": 596, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    adj_list = {}\n    (rows, cols) = maze.shape\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row, col] == 1:\n                neighbors = []\n                if row > 0 and maze[row - 1, col] == 1:\n                    neighbors.append((row - 1, col))\n                if row < rows - 1 and maze[row + 1, col] == 1:\n                    neighbors.append((row + 1, col))\n                if col > 0 and maze[row, col - 1] == 1:\n                    neighbors.append((row, col - 1))\n                if col < cols - 1 and maze[row, col + 1] == 1:\n                    neighbors.append((row, col + 1))\n                neighbors.sort()\n                adj_list[row, col] = neighbors\n    return adj_list\nassert convert_maze_to_graph(np.array([[1,0,1],[1,1,0],[0,1,1]])) == {(0,0):[(1,0)], (0,2):[], (1,0):[(0,0),(1,1)], (1,1):[(1,0),(2,1)], (2,1):[(1,1),(2,2)], (2,2):[(2,1)]}, \"test case failed: example maze\"\nassert convert_maze_to_graph(np.zeros((2,2),dtype=int)) == {}, \"test case failed: all zeros\"\nassert convert_maze_to_graph(np.array([[1]])) == {(0,0):[]}, \"test case failed: single cell\"\nassert convert_maze_to_graph(np.array([[1,1,1]])) == {(0,0):[(0,1)], (0,1):[(0,0),(0,2)], (0,2):[(0,1)]}, \"test case failed: row of ones\"\nassert convert_maze_to_graph(np.array([[1],[1],[1]])) == {(0,0):[(1,0)], (1,0):[(0,0),(2,0)], (2,0):[(1,0)]}, \"test case failed: column of ones\"\nassert convert_maze_to_graph(np.array([[0,1,0],[1,1,1],[0,1,0]])) == {(0,1):[(1,1)], (1,0):[(1,1)], (1,1):[(0,1),(1,0),(1,2),(2,1)], (1,2):[(1,1)], (2,1):[(1,1)]}, \"test case failed: plus shape\"\nassert convert_maze_to_graph(np.array([[1,1],[1,1]])) == {(0,0):[(0,1),(1,0)], (0,1):[(0,0),(1,1)], (1,0):[(0,0),(1,1)], (1,1):[(0,1),(1,0)]}, \"test case failed: 2x2 ones\"\nassert convert_maze_to_graph(np.array([[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]])) == {(0,0):[(0,1),(1,0)], (0,1):[(0,0),(0,2)], (0,2):[(0,1),(0,3)], (0,3):[(0,2),(1,3)], (1,0):[(0,0),(2,0)], (1,3):[(0,3),(2,3)], (2,0):[(1,0),(3,0)], (2,3):[(1,3),(3,3)], (3,0):[(2,0),(3,1)], (3,1):[(3,0),(3,2)], (3,2):[(3,1),(3,3)], (3,3):[(2,3),(3,2)]}, \"test case failed: hollow square\"\nassert convert_maze_to_graph(np.array([[1,0,0],[0,0,0],[0,0,0]])) == {(0,0):[]}, \"test case failed: isolated cell\"\nassert convert_maze_to_graph(np.eye(3,dtype=int)) == {(0,0):[], (1,1):[], (2,2):[]}, \"test case failed: diagonal ones\""}
{"task_id": 597, "completion_id": 0, "passed": false, "result": "failed: boolean index did not match indexed array along dimension 0; dimension is 4 but corresponding boolean dimension is 1", "solution": "import numpy as np\nimport numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_mse = float('inf')\n    best_feature_index = 0\n    best_threshold = None\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        sorted_indices = np.argsort(feature)\n        sorted_feature = feature[sorted_indices]\n        sorted_y = y[sorted_indices]\n        unique_values = np.unique(sorted_feature)\n        for t in unique_values:\n            split_point = np.searchsorted(sorted_feature, t)\n            left_mask = sorted_feature[:split_point] <= t\n            right_mask = sorted_feature[split_point:] > t\n            y_left = sorted_y[left_mask]\n            y_right = sorted_y[right_mask]\n            mean_left = np.mean(y_left)\n            mean_right = np.mean(y_right)\n            var_left = np.var(y_left)\n            var_right = np.var(y_right)\n            n_left = len(y_left)\n            n_right = len(y_right)\n            mse = n_left / n_samples * var_left + n_right / n_samples * var_right\n            if mse < best_mse:\n                best_mse = mse\n                best_feature_index = feature_idx\n                best_threshold = t\n            elif mse == best_mse:\n                if feature_idx < best_feature_index:\n                    best_feature_index = feature_idx\n                    best_threshold = t\n                elif feature_idx == best_feature_index and t < best_threshold:\n                    best_threshold = t\n    best_mse_rounded = round(best_mse, 4)\n    return [best_feature_index, best_threshold, best_mse_rounded]\nassert best_split_mse([[1], [2], [100], [101]],[1, 2, 100, 101]) == [0, 2, 0.25], \"test case failed: best_split_mse([[1], [2], [100], [101]],[1, 2, 100, 101])\"\nassert best_split_mse([[1], [2], [3], [4]],[1, 2, 3, 100]) == [0, 3, 0.5], \"test case failed: best_split_mse([[1], [2], [3], [4]],[1, 2, 3, 100])\"\nassert best_split_mse([[0], [1], [2], [3]],[1, 1, 1, 1]) == [0, 0, 0.0], \"test case failed: best_split_mse([[0], [1], [2], [3]],[1, 1, 1, 1])\"\nassert best_split_mse([[1,1],[2,2],[3,10],[4,11]],[1,2,10,11]) == [0, 2, 0.25], \"test case failed: best_split_mse([[1,1],[2,2],[3,10],[4,11]],[1,2,10,11])\"\nassert best_split_mse([[1],[2],[3],[4]],[10,20,30,40]) == [0, 2, 25.0], \"test case failed: best_split_mse([[1],[2],[3],[4]],[10,20,30,40])\"\nassert best_split_mse([[1],[2],[3],[4]],[10,10,10,20]) == [0, 3, 0.0], \"test case failed: best_split_mse([[1],[2],[3],[4]],[10,10,10,20])\"\nassert best_split_mse([[-2],[-1],[1],[2]],[4,1,1,4]) == [0, -2, 1.5], \"test case failed: best_split_mse([[-2],[-1],[1],[2]],[4,1,1,4])\"\nassert best_split_mse([[1],[1],[1],[2],[2],[3]],[10,10,10,20,20,30]) == [0, 1, 11.1111], \"test case failed: best_split_mse([[1],[1],[1],[2],[2],[3]],[10,10,10,20,20,30])\"\nassert best_split_mse([[1,0],[2,0],[3,1],[4,1]],[3,3,1,1]) == [0, 2, 0.0], \"test case failed: best_split_mse([[1,0],[2,0],[3,1],[4,1]],[3,3,1,1])\"\nassert best_split_mse([[1],[2]],[10,20]) == [0, 1, 0.0], \"test case failed: best_split_mse([[1],[2]],[10,20])\""}
{"task_id": 598, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    data_np = np.array(data, dtype=np.float64)\n    means = np.mean(data_np, axis=0)\n    stds = np.std(data_np, axis=0, ddof=0)\n    stds[stds == 0] = 1.0\n    standardized = (data_np - means) / stds\n    standardized = np.nan_to_num(standardized, nan=0.0, posinf=0.0, neginf=0.0)\n    standardized_rounded = np.round(standardized, 4)\n    return [row.tolist() for row in standardized_rounded]\nassert standardize([[0, 0], [0, 0], [1, 1], [1, 1]]) == [[-1.0, -1.0], [-1.0, -1.0], [1.0, 1.0], [1.0, 1.0]], \"test case failed: standardize([[0, 0], [0, 0], [1, 1], [1, 1]])\"\nassert standardize([[1,2,3],[1,2,3]]) == [[0.0,0.0,0.0],[0.0,0.0,0.0]], \"test case failed: standardize([[1,2,3],[1,2,3]])\"\nassert standardize([[1],[2],[3]]) == [[-1.2247],[0.0],[1.2247]], \"test case failed: standardize([[1],[2],[3]])\"\nassert standardize([[-1,-2],[3,4],[5,6]]) == [[-1.3363,-1.3728],[0.2673,0.3922],[1.069,0.9806]], \"test case failed: standardize([[-1,-2],[3,4],[5,6]])\"\nassert standardize([[-1],[-1],[-1]]) == [[0.0],[0.0],[0.0]], \"test case failed: standardize([[-1],[-1],[-1]])\"\nassert standardize([[1,2],[3,4]]) == [[-1.0,-1.0],[1.0,1.0]], \"test case failed: standardize([[1,2],[3,4]])\"\nassert standardize([[0,1,2],[2,3,4],[4,5,6]]) == [[-1.2247,-1.2247,-1.2247],[0.0,0.0,0.0],[1.2247,1.2247,1.2247]], \"test case failed: standardize([[0,1,2],[2,3,4],[4,5,6]])\"\nassert standardize([[10,10],[10,10]]) == [[0.0,0.0],[0.0,0.0]], \"test case failed: standardize([[10,10],[10,10]])\"\nassert standardize([[1e9,1e9],[1e9+1,1e9+2]]) == [[-1.0,-1.0],[1.0,1.0]], \"test case failed: standardize([[1e9,1e9],[1e9+1,1e9+2]])\"\nassert standardize([[0,0,0],[0,1,0],[1,0,1],[1,1,1]]) == [[-1.0,-1.0,-1.0],[-1.0,1.0,-1.0],[1.0,-1.0,1.0],[1.0,1.0,1.0]], \"test case failed: standardize([[0,0,0],[0,1,0],[1,0,1],[1,1,1]])\""}
