{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b:\n        return -1\n    num_rows = len(a)\n    num_cols = len(a[0]) if a else 0\n    vec_len = len(b)\n    if num_cols != vec_len:\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0]) if rows > 0 else 0\n    transposed = [[0.0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(cols):\n        for j in range(rows):\n            transposed[i][j] = a[j][i]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    np_array = np.array(a)\n    if np_array.size != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_array = np_array.reshape(new_shape)\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    Parameters:\n    - matrix: A list of lists representing the matrix.\n    - mode: A string indicating whether to calculate the mean by 'row' or 'column'.\n    \n    Returns:\n    - A list of means according to the specified mode.\n    \"\"\"\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_rows = len(matrix)\n        if num_rows == 0:\n            return []\n        means = []\n        for col in range(len(matrix[0])):\n            column_sum = sum((matrix[row][col] for row in range(num_rows)))\n            means.append(column_sum / num_rows)\n        return means\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float]]) -> list[float]:\n    (a, b) = (matrix[0][0], matrix[0][1])\n    (c, d) = (matrix[1][0], matrix[1][1])\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = (a - d) ** 2 + 4 * b * c\n    sqrt_discriminant = discriminant ** 0.5\n    lambda1 = (trace + sqrt_discriminant) / 2\n    lambda2 = (trace - sqrt_discriminant) / 2\n    return [lambda1, lambda2] if lambda1 > lambda2 else [lambda2, lambda1]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A, dtype=np.float64)\n    T_np = np.array(T, dtype=np.float64)\n    S_np = np.array(S, dtype=np.float64)\n    try:\n        inv_T = np.linalg.inv(T_np)\n        inv_S = np.linalg.inv(S_np)\n        transformed = inv_T @ A_np @ S_np\n        transformed_rounded = np.round(transformed, 4)\n        return transformed_rounded.tolist()\n    except np.linalg.LinAlgError:\n        return [-1]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = (matrix[0][0], matrix[0][1])\n    (c, d) = (matrix[1][0], matrix[1][1])\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inverse = [[d / det, -b / det], [-c / det, a / det]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)\n    cols_b = len(b[0])\n    result = [[0.0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": ""}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = x.copy()\n        for i in range(len(b)):\n            sum_terms = np.dot(A[i, :], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - sum_terms) / A[i, i]\n            x_new[i] = round(x_new[i], 4)\n        x = x_new\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobian method.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 matrix for which we want to compute the singular values.\n    \n    Returns:\n    tuple: A tuple containing the singular values of the matrix, rounded to 4 decimal places.\n    \"\"\"\n    if A.shape != (2, 2):\n        raise ValueError('Input matrix must be 2x2.')\n    A_T = A.T\n    A_T_A = np.dot(A_T, A)\n    trace_A_T_A = np.trace(A_T_A)\n    determinant_A_T_A = np.linalg.det(A_T_A)\n    discriminant = trace_A_T_A ** 2 - 4 * determinant_A_T_A\n    sqrt_discriminant = np.sqrt(np.maximum(0, discriminant))\n    lambda1 = (trace_A_T_A + sqrt_discriminant) / 2\n    lambda2 = (trace_A_T_A - sqrt_discriminant) / 2\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    sigma1_rounded = round(sigma1, 4)\n    sigma2_rounded = round(sigma2, 4)\n    return (sigma1_rounded, sigma2_rounded)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's Expansion.\n    \n    Args:\n        matrix: A 4x4 list of lists representing the matrix.\n        \n    Returns:\n        The determinant of the matrix as a float.\n    \"\"\"\n    if len(matrix) == 1:\n        return matrix[0][0]\n    det = 0.0\n    for col in range(len(matrix)):\n        sign = (-1) ** col\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        det += sign * matrix[0][col] * determinant_4x4(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_with_intercept = np.c_[np.ones(X_np.shape[0]), X_np]\n    coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ y_np\n    return [round(coef, 4) for coef in coefficients]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros_like(X.T)\n    for _ in range(iterations):\n        predictions = X @ theta\n        error = predictions - y\n        gradient = X.T @ error / len(y)\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized = (data - mean) / std\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_scaled = (data - min_vals) / (max_vals - min_vals)\n    standardized_rounded = np.round(standardized, 4).tolist()\n    min_max_rounded = np.round(min_max_scaled, 4).tolist()\n    return (standardized_rounded, min_max_rounded)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    if len(centroids) < k:\n        raise ValueError('Number of initial centroids must be at least k.')\n    for _ in range(max_iterations):\n        distances = np.sqrt(np.sum((points[:, np.newaxis] - centroids) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            mask = labels == i\n            new_centroids[i] = np.mean(points[mask], axis=0)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = np.round(centroids, 4)\n    return final_centroids.tolist()"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Perform K-Fold Cross-Validation by splitting the dataset into k folds.\n    \n    Parameters:\n    - X: np.ndarray, shape (n_samples, n_features)\n        The feature matrix of the dataset.\n    - y: np.ndarray, shape (n_samples,)\n        The target vector of the dataset.\n    - k: int, default 5\n        Number of folds.\n    - shuffle: bool, default True\n        Whether to shuffle the data before splitting.\n    - random_seed: int, optional\n        Random seed for reproducibility.\n    \n    Returns:\n    - list of tuples: Each tuple contains (train_indices, test_indices) for a fold.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    n_samples = X.shape[0]\n    fold_size = n_samples // k\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    splits = []\n    for i in range(k):\n        start = i * fold_size\n        end = (i + 1) * fold_size\n        test_indices = indices[start:end]\n        train_indices = np.setdiff1d(indices, test_indices)\n        splits.append((train_indices, test_indices))\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigen_values, eigen_vectors) = np.linalg.eig(cov_matrix)\n    sorted_index = np.argsort(eigen_values)[::-1]\n    sorted_eigen_values = eigen_values[sorted_index]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_index]\n    principal_components = sorted_eigen_vectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learn a decision tree from a list of examples using information gain for splitting.\n    \n    Parameters:\n        examples (list[dict]): List of example dictionaries, each with attribute-value pairs.\n        attributes (list[str]): List of attribute names to consider for splitting.\n        target_attr (str): The name of the target attribute to classify.\n        \n    Returns:\n        dict: A nested dictionary representing the decision tree.\n    \"\"\"\n    if not examples:\n        return {}\n    if all((example[target_attr] == examples[0][target_attr] for example in examples)):\n        return {target_attr: examples[0][target_attr]}\n    if not attributes:\n        counts = Counter([example[target_attr] for example in examples])\n        most_common = counts.most_common(1)[0][0]\n        return {target_attr: most_common}\n    counts = Counter([example[target_attr] for example in examples])\n    total = len(examples)\n    entropy = -sum((count / total * math.log2(count / total) for count in counts.values()))\n    best_gain = 0\n    best_attribute = None\n    for attr in attributes:\n        attr_values = set((example[attr] for example in examples))\n        gain = 0\n        for value in attr_values:\n            subset = [example for example in examples if example[attr] == value]\n            prob = len(subset) / total\n            subset_entropy = -sum((count / len(subset) * math.log2(count / len(subset)) for count in Counter(subset).values()))\n            gain += prob * subset_entropy\n        info_gain = entropy - gain\n        if info_gain > best_gain:\n            best_gain = info_gain\n            best_attribute = attr\n    tree = {best_attribute: {}}\n    remaining_attributes = [a for a in attributes if a != best_attribute]\n    for value in set((example[best_attribute] for example in examples)):\n        subset = [example for example in examples if example[best_attribute] == value]\n        tree[best_attribute][value] = learn_decision_tree(subset, remaining_attributes, target_attr)\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Train a kernel SVM using the deterministic Pegasos algorithm.\n    \n    Parameters:\n    - data: 2D NumPy array of shape (n_samples, n_features)\n    - labels: 1D NumPy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: Regularization parameter\n    - iterations: Number of iterations to run the algorithm\n    - sigma: Standard deviation for RBF kernel\n    \n    Returns:\n    - alpha: List of alpha coefficients (rounded to 4 decimal places)\n    - bias: Bias term (rounded to 4 decimal places)\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n\n    def kernel_func(x1, x2):\n        if kernel == 'linear':\n            return np.dot(x1, x2)\n        elif kernel == 'rbf':\n            dist = np.linalg.norm(x1 - x2)\n            return np.exp(-dist ** 2 / (2 * sigma ** 2))\n        else:\n            raise ValueError('Unsupported kernel type')\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            K[i, j] = kernel_func(data[i], data[j])\n    for _ in range(iterations):\n        for i in range(n_samples):\n            score = np.dot(alphas * K[:, i], labels) + bias\n            if score > 1:\n                alphas[i] = max(0, alphas[i] - lambda_val * (1 - score))\n            elif score < -1:\n                alphas[i] = min(1, alphas[i] + lambda_val * (1 + score))\n            else:\n                alphas[i] = max(0, alphas[i] - lambda_val * (1 - score))\n    support_vectors = np.where(alphas > 1e-05)[0]\n    if len(support_vectors) > 0:\n        bias = np.mean(labels[support_vectors] - np.dot(alphas[support_vectors], K[support_vectors, :]))\n    alphas = np.round(alphas, 4).tolist()\n    bias = np.round(bias, 4)\n    return (alphas, bias)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [exp / sum_exp for exp in exp_scores]\n    return [round(val, 4) for val in softmax_values]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    features_np = np.array(features)\n    weights_np = np.array(weights)\n    z = np.dot(features_np, weights_np) + bias\n    sigmoid = 1 / (1 + np.exp(-z))\n    predictions = sigmoid.tolist()\n    mse = np.mean((np.array(labels) - predictions) ** 2)\n    predictions_rounded = [round(p, 4) for p in predictions]\n    mse_rounded = round(mse, 4)\n    return (predictions_rounded, mse_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = np.copy(initial_weights)\n    bias = initial_bias\n    mse_values = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    for epoch in range(epochs):\n        z = np.dot(features, weights) + bias\n        activations = sigmoid(z)\n        error = activations - labels\n        mse = np.mean(np.square(error))\n        mse_values.append(round(mse, 4))\n        d_error = 2 * error / len(labels)\n        d_activation = d_error * sigmoid_derivative(activations)\n        dw = np.dot(features.T, d_activation)\n        db = np.sum(d_activation)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights_rounded = np.round(weights, 4)\n    bias_rounded = round(bias, 4)\n    mse_values_list = np.array(mse_values).tolist()\n    return (weights_rounded, bias_rounded, mse_values_list)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '_add')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '_mul')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(0, self.data), (self,), 'relu')\n\n        def _backward():\n            if self.data > 0:\n                self.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        self.grad = 1\n        visited = set()\n\n        def _backtrack(node):\n            if node in visited:\n                return\n            visited.add(node)\n            for child in node._prev:\n                _backtrack(child)\n                child._backward()\n        _backtrack(self)"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    M_B = np.array(B, dtype=float)\n    M_C = np.array(C, dtype=float)\n    try:\n        inv_M_C = np.linalg.inv(M_C)\n    except np.linalg.LinAlgError:\n        raise ValueError('Basis C is linearly dependent; cannot compute inverse.')\n    P = inv_M_C @ M_B\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    AtA = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eigh(AtA)\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    S_inv = np.diag(1 / singular_values)\n    U = A @ V @ S_inv\n    U_rounded = np.round(U, 4)\n    S_rounded = np.round(S, 4)\n    V_rounded = np.round(V, 4)\n    U_list = U_rounded.tolist()\n    S_list = S_rounded.tolist()\n    V_list = V_rounded.tolist()\n    return (U_list, S_list, V_list)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffle the samples in X and y while maintaining the correspondence between them.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - seed: integer, optional. If provided, the shuffle is reproducible.\n    \n    Returns:\n    - A list containing the shuffled X and y arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.arange(X.shape[0])\n    np.random.shuffle(indices)\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size]\n        if y is not None:\n            y_batch = y[i:i + batch_size]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    left_subset = X[X[:, feature_i] >= threshold]\n    right_subset = X[X[:, feature_i] < threshold]\n    return (left_subset.tolist(), right_subset.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for a given dataset.\n\n    Parameters:\n    X (np.ndarray): A 2D numpy array of shape (n_samples, n_features).\n    degree (int): The maximum degree of the polynomial features.\n\n    Returns:\n    np.ndarray: A 2D numpy array of shape (n_samples, n_polynomial_features)\n               containing polynomial features up to the specified degree.\n    \"\"\"\n    n_features = X.shape[1]\n    polynomial_terms = []\n    for i in range(1, degree + 1):\n        for indices in combinations_with_replacement(range(n_features), i):\n            polynomial_terms.append(indices)\n    X_poly = np.zeros((X.shape[0], len(polynomial_terms)))\n    for (idx, indices) in enumerate(polynomial_terms):\n        feature = X[:, indices[0]] ** indices[1] if len(indices) == 1 else np.prod(X[:, indices], axis=1)\n        X_poly[:, idx] = feature\n    return X_poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    if replacements:\n        indices = np.random.choice(len(X), size=(n_subsets, len(X)), replace=True)\n    else:\n        indices = np.random.choice(len(X), size=(n_subsets, len(X)), replace=False)\n    for idx in indices:\n        X_subset = X[idx]\n        y_subset = y[idx]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = int(np.max(x)) + 1\n    one_hot = np.zeros((x.shape[0], n_col))\n    for i in range(x.shape[0]):\n        one_hot[i, x[i]] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = np.round(correct / total, 4)\n    return accuracy"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    corr_matrix = np.corrcoef(X, Y)\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n    result = corr_matrix_rounded.tolist()\n    return result"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = -1\n        best_threshold = 0.0\n        best_sign = 1\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X = X[sorted_indices, feature]\n            sorted_y = y[sorted_indices]\n            unique_values = np.unique(sorted_X)\n            for threshold in unique_values:\n                left_mask = sorted_X <= threshold\n                right_mask = ~left_mask\n                error = 0.0\n                for i in range(n_samples):\n                    if sorted_y[left_mask] == sorted_y[right_mask]:\n                        error += weights[i]\n                error_rate = error / sum(weights)\n                if error_rate < best_error:\n                    best_error = error_rate\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_sign = 1 if sorted_y[left_mask].mean() > sorted_y[right_mask].mean() else -1\n        alpha = math.log((1 - best_error) / best_error) if best_error != 0 else 0\n        classifiers.append({'feature': best_feature, 'threshold': best_threshold, 'sign': best_sign, 'alpha': round(alpha, 4)})\n        weights *= np.exp(-alpha * y[sorted_indices] * best_sign)\n        weights /= sum(weights)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores, dtype=np.float64)\n    max_scores = np.max(scores_array)\n    scores_shifted = scores_array - max_scores\n    exp_scores = np.exp(scores_shifted)\n    sum_exp = np.sum(exp_scores)\n    log_softmax_values = np.log(exp_scores) - np.log(sum_exp)\n    log_softmax_values_rounded = np.round(log_softmax_values, 4)\n    return log_softmax_values_rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizers = {}\n\n    def initialize(self):\n        if self.input_shape is not None:\n            input_dim = self.input_shape[0]\n            limit = 1.0 / math.sqrt(input_dim)\n            self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        else:\n            input_dim = 1\n            limit = 1.0 / math.sqrt(input_dim)\n            self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        self.w0 = np.zeros(self.n_units)\n        self.optimizers['W'] = {'learning_rate': 0.01}\n        self.optimizers['w0'] = {'learning_rate': 0.01}\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        if X.ndim == 1:\n            X = X.reshape(1, -1)\n        self.layer_output = np.dot(X, self.W) + self.w0\n        self.layer_input = X\n        return self.layer_output\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            learning_rate = self.optimizers['W']['learning_rate']\n            self.W -= learning_rate * np.dot(self.layer_input.T, accum_grad)\n            learning_rate = self.optimizers['w0']['learning_rate']\n            self.w0 -= learning_rate * accum_grad.sum(axis=0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    output = np.zeros((output_height, output_width))\n    for h in range(output_height):\n        for w in range(output_width):\n            start_h = h * stride\n            start_w = w * stride\n            region = padded_input[start_h:start_h + kernel_height, start_w:start_w + kernel_width]\n            conv_result = np.sum(region * kernel)\n            output[h, w] = round(conv_result, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    loss = mse + regularization\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function to a given input value.\n    \n    Parameters:\n    z (float): The input value to apply the activation function to.\n    alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n    \n    Returns:\n    float: The result of applying the Leaky ReLU function to `z`.\n    \"\"\"\n    if z >= 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n    \n    Returns:\n    float: The dot product of x1 and x2, which is the linear kernel.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric given two binary label arrays.\n    \n    Precision is defined as the ratio of true positives to the sum of true positives and false positives.\n    \n    Parameters:\n    - y_true: numpy array of shape (n_samples,)\n        The true binary labels.\n    - y_pred: numpy array of shape (n_samples,)\n        The predicted binary labels.\n    \n    Returns:\n    - float: The precision value.\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0.0\n    return tp / (tp + fp)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent with MSE loss using specified method.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: numpy array of shape (n_features,)\n    - learning_rate: float, the learning rate for gradient descent\n    - n_iterations: int, number of iterations to perform\n    - batch_size: int, size of mini-batch (used only for mini-batch GD)\n    - method: str, specifies the type of gradient descent ('batch', 'mini', 'stochastic')\n\n    Returns:\n    - list: List of MSE values after each iteration, rounded to 4 decimal places\n    \"\"\"\n    mse_history = []\n    X = np.array(X)\n    y = np.array(y)\n    weights = np.array(weights)\n    for i in range(n_iterations):\n        if method in ['stochastic', 'mini']:\n            indices = np.random.permutation(len(X))\n            X_batch = X[indices]\n            y_batch = y[indices]\n        if method == 'batch':\n            X_batch = X\n            y_batch = y\n        elif method == 'mini':\n            X_batch = X[batch_size * i:batch_size * (i + 1)]\n            y_batch = y[batch_size * i:batch_size * (i + 1)]\n        elif method == 'stochastic':\n            X_batch = X[indices]\n            y_batch = y[indices]\n        y_pred = X_batch @ weights\n        gradient = 2 * (y_pred - y_batch) @ X_batch / len(y_batch)\n        weights -= learning_rate * gradient\n        mse = np.mean((y_pred - y_batch) ** 2)\n        mse_history.append(round(mse, 4))\n    return np.array(mse_history).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    mat = np.array(matrix, dtype=np.float64)\n    (rows, cols) = mat.shape\n    r = 0\n    for col in range(cols):\n        pivot_row = None\n        for i in range(r, rows):\n            if abs(mat[i, col]) > 1e-08:\n                pivot_row = i\n                break\n        if pivot_row is None:\n            continue\n        mat[[r, pivot_row]] = mat[[pivot_row, r]]\n        pivot_val = mat[r, col]\n        mat[r] = mat[r] / pivot_val\n        for i in range(rows):\n            if i != r and abs(mat[i, col]) > 1e-08:\n                factor = mat[i, col]\n                mat[i] = mat[i] - factor * mat[r]\n        r += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    for _ in range(num_iterations):\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** (iter + 1))\n        v_hat = v / (1 - beta2 ** (iter + 1))\n        x0 -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x0, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implements Lasso Regression using Gradient Descent with L1 regularization.\n    \n    Parameters:\n    - X: Input features (n_samples x n_features)\n    - y: Target values (n_samples)\n    - alpha: Regularization strength (L1 penalty coefficient)\n    - learning_rate: Learning rate for gradient descent\n    - max_iter: Maximum number of iterations\n    - tol: Tolerance for stopping criterion\n    \n    Returns:\n    - weights: Estimated weights (n_features)\n    - bias: Estimated bias\n    \"\"\"\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    for i in range(max_iter):\n        y_pred = X_b @ np.r_[bias, weights]\n        residuals = y - y_pred\n        grad_weights = 1 / n_samples * (-X_b[:, 1:] @ residuals) + alpha * np.sign(weights)\n        grad_bias = 1 / n_samples * -residuals.sum()\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n        if np.linalg.norm(grad_weights) < tol and np.abs(grad_bias) < tol:\n            break\n    weights_rounded = np.round(weights, 4).tolist()\n    bias_rounded = np.round(bias, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                substitute = dp[i - 1][j - 1] + 1\n                delete = dp[i - 1][j] + 1\n                insert = dp[i][j - 1] + 1\n                transpose = float('inf')\n                if j > 1 and i > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                    transpose = dp[i - 2][j - 2] + 1\n                dp[i][j] = min(substitute, delete, insert, transpose)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        recall_value = 0.0\n    else:\n        recall_value = TP / denominator\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    scores = np.dot(Q, K.T)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=0)\n    output = np.dot(attention_weights, V)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    h = initial_hidden_state\n    for x_t in input_sequence:\n        h_t = np.tanh(np.dot(x_t, Wx) + np.dot(h, Wh) + b)\n        h = h_t\n    return np.round(h, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    points_array = points_array.reshape(-1, 2)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    translated_array = np.dot(points_array, translation_matrix.T)\n    translated_points = translated_array[:, :2]\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P.\n    sigma_p (float): Standard deviation of distribution P.\n    mu_q (float): Mean of distribution Q.\n    sigma_q (float): Standard deviation of distribution Q.\n    \n    Returns:\n    float: KL divergence from P to Q.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    kl = 0.5 * (np.log(sigma_q ** 2 / sigma_p ** 2) + (mu_p - mu_q) ** 2 / sigma_q ** 2 - 1)\n    return kl"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve a system of linear equations using the Gauss-Seidel method.\n\n    Parameters:\n    - A: Square matrix of coefficients (2D numpy array)\n    - b: Right-hand side vector (1D numpy array)\n    - n: Number of iterations to perform\n    - x_ini: Initial guess for the solution vector (optional, default is zeros)\n\n    Returns:\n    - x: Approximated solution vector after n iterations, rounded to 4 decimal places\n    \"\"\"\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.copy(x_ini)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for _ in range(n):\n        for i in range(len(b)):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=np.float64)\n    b = np.array(b, dtype=np.float64)\n    n = len(b)\n    ab = np.hstack((A, b.reshape(n, 1)))\n    for i in range(n):\n        max_row = i\n        for j in range(i, n):\n            if abs(ab[j, i]) > abs(ab[max_row, i]):\n                max_row = j\n        ab[[i, max_row]] = ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = ab[j, i] / ab[i, i]\n            ab[j] = ab[j] - factor * ab[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = ab[i, n]\n        for j in range(i + 1, n):\n            x[i] -= ab[i, j] * x[j]\n        x[i] /= ab[i, i]\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        if len(x.shape) == 2:\n            x = x.reshape(-1, 1, x.shape[1])\n        elif len(x.shape) == 3:\n            pass\n        else:\n            raise ValueError('Input x must be 2D or 3D with shape (sequence_length, batch_size, input_size).')\n        batch_size = x.shape[1]\n        sequence_length = x.shape[0]\n        hidden_states = []\n        current_hidden = initial_hidden_state\n        current_cell = initial_cell_state\n        for t in range(sequence_length):\n            concat = np.hstack((current_hidden, x[t, :, :]))\n            f = sigmoid(np.dot(concat, self.Wf) + self.bf)\n            i = sigmoid(np.dot(concat, self.Wi) + self.bi)\n            c_tilde = np.tanh(np.dot(concat, self.Wc) + self.bc)\n            o = sigmoid(np.dot(concat, self.Wo) + self.bo)\n            current_cell = f * current_cell + i * c_tilde\n            current_hidden = o * np.tanh(current_cell)\n            hidden_states.append(current_hidden)\n            current_hidden = current_hidden\n            current_cell = current_cell\n        hidden_states = [np.round(hst, 4).tolist() for hst in hidden_states]\n        final_hidden = np.round(current_hidden, 4).tolist()\n        final_cell = np.round(current_cell, 4).tolist()\n        return (hidden_states, final_hidden, final_cell)\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute TF-IDF scores for a query against a given corpus of documents.\n\n    Parameters:\n    - corpus: List of documents, where each document is a list of words.\n    - query: List of words for which to compute TF-IDF scores.\n\n    Returns:\n    - A list of lists containing the TF-IDF scores for the query words in each document,\n      rounded to five decimal places.\n    \"\"\"\n    if not corpus:\n        raise ValueError('Corpus cannot be empty.')\n    vocab = set()\n    for doc in corpus:\n        vocab.update(doc)\n    tf = {}\n    for doc in corpus:\n        doc_freq = {}\n        for word in doc:\n            doc_freq[word] = doc_freq.get(word, 0) + 1\n        for word in doc_freq:\n            tf[word] = tf.get(word, {})\n            tf[word][doc] = doc_freq[word] / len(doc)\n    idf = {}\n    total_docs = len(corpus)\n    for word in vocab:\n        df = 0\n        for doc in corpus:\n            if word in doc:\n                df += 1\n        idf[word] = np.log(total_docs / (df + 1)) + 1\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_score = []\n        for word in query:\n            tf_value = tf.get(word, {}).get(doc, 0.0)\n            idf_value = idf.get(word, 0.0)\n            tf_idf = tf_value * idf_value\n            doc_score.append(round(tf_idf, 5))\n        tf_idf_scores.append(doc_score)\n    tf_idf_array = np.array(tf_idf_scores)\n    return tf_idf_array.tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean (beta=1 for F1-score)\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum(y_true * y_pred)\n    fp = np.sum((1 - y_true) * y_pred)\n    fn = np.sum(y_true * (1 - y_pred))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if beta == 0:\n        f_score = precision\n    elif beta == float('inf'):\n        f_score = recall\n    else:\n        beta_squared = beta ** 2\n        f_score = (1 + beta_squared) * (precision * recall) / (beta_squared * precision + recall)\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns: outputs, last_inputs, last_hiddens\n        \"\"\"\n        (T, batch_size, input_size) = x.shape\n        outputs = np.zeros((T, batch_size, self.hidden_size))\n        h = np.zeros((self.hidden_size, batch_size))\n        for t in range(T):\n            x_t = x[t]\n            h = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h) + self.b_h)\n            outputs[t] = h\n            if t == T - 1:\n                last_inputs = x_t\n                last_hiddens = h\n        return (outputs, last_inputs, last_hiddens)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        (T, batch_size, input_size) = input_sequence.shape\n        output_size = expected_output.shape[1]\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        delta_y = expected_output - outputs[-1]\n        delta_y = delta_y * 2\n        for t in reversed(range(T)):\n            x_t = input_sequence[t]\n            h_t = outputs[t]\n            h_prev = outputs[t - 1] if t > 0 else np.zeros((hidden_size, batch_size))\n            delta_h = np.dot(W_hy.T, delta_y)\n            delta_y = np.dot(W_hy.T, delta_y)\n            dW_hh_t = np.dot(delta_h, h_prev.T)\n            db_h_t = delta_h.sum(axis=0, keepdims=True)\n            dW_xh_t = np.dot(delta_h, x_t.T)\n            db_h_t += np.dot(delta_h, x_t.T)\n            dW_xh += dW_xh_t\n            dW_hh += dW_hh_t\n            db_h += db_h_t\n            delta_y = np.dot(W_hy.T, delta_y)\n            delta_h = np.dot(W_hy.T, delta_h)\n            delta_y = np.dot(W_hy.T, delta_y)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - A @ x\n    p = r.copy()\n    r_norm = np.linalg.norm(r)\n    for i in range(n):\n        if i == 0:\n            beta = 0\n        else:\n            beta = r_norm ** 2 / np.dot(p, A @ p)\n        p = r + beta * p\n        alpha = r_norm ** 2 / np.dot(p, A @ p)\n        x = x + alpha * p\n        r = b - A @ x\n        new_r_norm = np.linalg.norm(r)\n        if new_r_norm < tol:\n            break\n        r_norm = new_r_norm\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    class_counts = np.bincount(y)\n    class_probabilities = class_counts / len(y)\n    gini = 1 - np.sum(class_probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    columns = []\n    row_pointers = []\n    row_start = 0\n    for row_idx in range(len(dense_matrix)):\n        row = dense_matrix[row_idx]\n        for col_idx in range(len(row)):\n            if row[col_idx] != 0:\n                values.append(row[col_idx])\n                columns.append(col_idx)\n        row_pointers.append(row_start)\n        row_start += len(values) - len(columns)\n    row_pointers.append(row_start)\n    return (values, columns, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((vi * li for (vi, li) in zip(v, L)))\n    mag_L_squared = sum((li * li for li in L))\n    if mag_L_squared == 0:\n        raise ValueError('The line vector L must not be the zero vector.')\n    scalar_factor = dot_product / mag_L_squared\n    projection = [scalar_factor * li for li in L]\n    return [round(component, 3) for component in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    rows = len(dense_matrix)\n    cols = len(dense_matrix[0]) if rows > 0 else 0\n    values = []\n    row_indices = []\n    col_pointers = [0]\n    for col in range(cols):\n        for row in range(rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n                col_pointers.append(len(values))\n    return (values, row_indices, col_pointers)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A)\n    (rref, pivots) = np.linalg.qr(A, full_matrices=False)\n    pivot_cols = np.where(pivots)[0]\n    image_basis = A[:, pivot_cols]\n    return np.round(image_basis, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y_true = np.mean(y_true)\n    ss_total = np.sum((y_true - mean_y_true) ** 2)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ss_residual / ss_total\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    row_lengths = [len(row) for row in img]\n    if len(set(row_lengths)) > 1:\n        return -1\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            total_brightness += pixel\n    average_brightness = total_brightness / (len(img) * len(img[0]))\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Inputs must be numpy arrays.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('The shapes of y_true and y_pred must be the same.')\n    if y_true.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    squared_diffs = (y_true - y_pred) ** 2\n    mse = np.mean(squared_diffs)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between two binary arrays.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels.\n    y_pred (np.ndarray): Predicted binary labels.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.logical_and(y_true, y_pred)\n    tp = np.sum(intersection)\n    tn = np.sum(y_true)\n    fp = np.sum(y_pred)\n    if tn == 0 and fp == 0:\n        return 1.0\n    dice = 2 * tp / (tn + fp)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a dataset row using Hyperdimensional Computing.\n    \n    Parameters:\n    - row: A dictionary representing a dataset row, where keys are feature names and values are their corresponding values.\n    - dim: The dimensionality of the hypervectors.\n    - random_seeds: A dictionary where keys are feature names and values are seeds to ensure reproducibility of hypervectors.\n    \n    Returns:\n    - A composite hypervector represented as a list.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        seed = random_seeds.get(feature_name, np.random.randint(0, 1000000))\n        np.random.seed(seed)\n        feature_name_hv = np.random.rand(dim)\n        feature_value_hv = np.random.rand(dim)\n        bound_hv = np.dot(feature_name_hv, feature_value_hv)\n        composite_hv += bound_hv\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    cm = [[0, 0], [0, 0]]\n    tp = 0\n    fp = 0\n    tn = 0\n    fn = 0\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            tp += 1\n        elif y_true == 0 and y_pred == 1:\n            fp += 1\n        elif y_true == 0 and y_pred == 0:\n            tn += 1\n        elif y_true == 1 and y_pred == 0:\n            fn += 1\n    cm[0][0] = tn\n    cm[0][1] = fp\n    cm[1][0] = fn\n    cm[1][1] = tp\n    return cm"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    cosine_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('actual and predicted lists must have the same length')\n    if any((x not in (0, 1) for x in actual + predicted)):\n        raise ValueError('All elements must be either 0 or 1')\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    precision = round(tp / (tp + fp), 3) if tp + fp > 0 else 0.0\n    recall = round(tp / (tp + fn), 3) if tp + fn > 0 else 0.0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall > 0 else 0.0\n    specificity = round(tn / (tn + fp), 3) if tn + fp > 0 else 0.0\n    nppv = round(tn / (tn + fn), 3) if tn + fn > 0 else 0.0\n    return (confusion_matrix, accuracy, f1_score, specificity, nppv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = np.round(np.mode(data), 4)\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentiles = np.percentile(data, [25, 50, 75])\n    twenty_fifth_percentile = np.round(percentiles[0], 4)\n    fifty_th_percentile = np.round(percentiles[1], 4)\n    seventy_fifth_percentile = np.round(percentiles[2], 4)\n    iqr = np.round(percentiles[2] - percentiles[0], 4)\n    stats = {'mean': np.round(mean, 4), 'median': np.round(median, 4), 'mode': np.round(mode, 4), 'variance': np.round(variance, 4), 'standard_deviation': np.round(standard_deviation, 4), '25th_percentile': twenty_fifth_percentile, '50th_percentile': fifty_th_percentile, '75th_percentile': seventy_fifth_percentile, 'interquartile_range': iqr}\n    return stats"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    if not 0 <= k <= n or not 0 <= p <= 1:\n        raise ValueError('Invalid input: k must be between 0 and n, and p must be between 0 and 1.')\n    probability = math.comb(n, k) * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    if k < 0:\n        raise ValueError('k must be a non-negative integer')\n    if lam < 0:\n        raise ValueError('lam must be a non-negative number')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Contrast is defined as the difference between the maximum and minimum pixel values.\n    \n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n        \n    Returns:\n        float: The contrast of the image, which is the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input must be a 2D array representing an image.')\n    min_pixel = np.min(img)\n    max_pixel = np.max(img)\n    return max_pixel - min_pixel"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n        \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n                          If the degree is less than 0, returns an empty list.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    poly_features = np.polynomial.Polynomial([1.0]).fit(data_array, y=None, r=degree)\n    transformed_data = poly_features(data_array)\n    transformed_data_rounded = [list(np.round(feature, 8)) for feature in transformed_data]\n    return transformed_data_rounded"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    position = np.array([position], dtype=np.float32)\n    pe = np.zeros((1, d_model), dtype=np.float16)\n    for i in range(d_model):\n        pe[0][i] = np.sin(position / 10000 ** (2 * i / d_model)) if i % 2 == 0 else np.cos(position / 10000 ** (2 * i / d_model))\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value (scalar or array)\n    :param grad: Current gradient (scalar or array)\n    :param m: First moment estimate (scalar or array)\n    :param v: Second moment estimate (scalar or array)\n    :param t: Current timestep (integer)\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    sequence = token_ids.copy()\n    for _ in range(n_tokens_to_generate):\n        last_token = sequence[-1]\n        next_token = np.random.randint(0, 3)\n        sequence.append(next_token)\n    generated_text = encoder.decode(sequence)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    attention_weights = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                score = np.dot(crystal_values[i], crystal_values[j])\n                attention_weights[i][j] = score\n    attention_weights = softmax(attention_weights)\n    weighted_patterns = np.zeros(n)\n    for i in range(n):\n        for j in range(n):\n            weighted_patterns[i] += attention_weights[i][j] * crystal_values[j]\n    return [round(float(val), 4) for val in weighted_patterns]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    docs = [set(doc) for doc in corpus]\n    num_docs = len(docs)\n    term_freq = Counter()\n    for doc in docs:\n        term_freq.update(doc)\n    idf = {}\n    for (term, count) in term_freq.items():\n        idf[term] = np.log((num_docs - count + 0.5) / (count + 0.5))\n    scores = []\n    doc_lengths = [len(doc) for doc in docs]\n    query_terms = set(query.split())\n    for (doc_idx, doc) in enumerate(docs):\n        tf = Counter(doc)\n        score = 0.0\n        for term in query_terms:\n            if term not in tf or term not in idf:\n                continue\n            tf_term = tf[term]\n            numerator = tf_term * (k1 + 1)\n            denominator = tf_term + k1 * (1 - b + b * (len(doc) / sum(doc_lengths)))\n            score += idf[term] * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    from sklearn.metrics import f1_score\n    f1 = f1_score(y_true, y_pred)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(len(consumption_data)):\n        day = i + 1\n        fluctuation = 10 * math.sin(2 * PI * day / 10)\n        detrended = consumption_data[i] - fluctuation\n        detrended_data.append(detrended)\n    n = len(detrended_data)\n    sum_x = sum(range(1, n + 1))\n    sum_y = sum(detrended_data)\n    sum_xy = sum((x * y for (x, y) in zip(range(1, n + 1), detrended_data)))\n    sum_x2 = sum((x ** 2 for x in range(1, n + 1)))\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    prediction_day_15 = m * 15 + b\n    day_15 = 15\n    fluctuation_day_15 = 10 * math.sin(2 * PI * day_15 / 10)\n    forecast_with_fluctuation = prediction_day_15 + fluctuation_day_15\n    rounded_forecast = round(forecast_with_fluctuation)\n    safety_margin = rounded_forecast * 0.05\n    final_forecast = rounded_forecast + safety_margin\n    return int(final_forecast + 0.5)"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Query (Q), Key (K), and Value (V) matrices.\n    \n    Args:\n        X: Input tensor of shape (batch_size, seq_len, d_model).\n        W_q: Weight matrix for queries, shape (d_model, d_k).\n        W_k: Weight matrix for keys, shape (d_model, d_k).\n        W_v: Weight matrix for values, shape (d_model, d_v).\n        \n    Returns:\n        Q, K, V: Query, Key, Value matrices with shape (batch_size, seq_len, n_heads, d_k).\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    Q = Q.reshape(Q.shape[0], Q.shape[1], -1, Q.shape[2] // Q.shape[3])\n    K = K.reshape(K.shape[0], K.shape[1], -1, K.shape[2] // K.shape[3])\n    V = V.reshape(V.shape[0], V.shape[1], -1, V.shape[2] // V.shape[3])\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, n_heads: int) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention scores and weighted values.\n    \n    Args:\n        Q: Query matrix, shape (batch_size, seq_len, n_heads, d_k).\n        K: Key matrix, shape (batch_size, seq_len, n_heads, d_k).\n        V: Value matrix, shape (batch_size, seq_len, n_heads, d_v).\n        n_heads: Number of attention heads.\n        \n    Returns:\n        Output matrix after applying attention, shape (batch_size, seq_len, d_model).\n    \"\"\"\n    scores = np.matmul(Q, K.transpose(0, 1, 3, 2)) / np.sqrt(Q.shape[3])\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.matmul(attention_weights, V)\n    output = output.reshape(output.shape[0], output.shape[1], -1)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implement Multi-Head Attention.\n    \n    Args:\n        X: Input tensor of shape (batch_size, seq_len, d_model).\n        W_q: Weight matrix for queries, shape (d_model, d_k).\n        W_k: Weight matrix for keys, shape (d_model, d_k).\n        W_v: Weight matrix for values, shape (d_model, d_v).\n        n_heads: Number of attention heads.\n        \n    Returns:\n        List of outputs from each head, reshaped to a list.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    output = self_attention(Q, K, V, n_heads)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    a = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 1))\n    b = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 0))\n    c = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 1))\n    d = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 0))\n    numerator = a * d - b * c\n    denominator = (a + b) * (c + d) * (a + c) * (b + d)\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return 0.5 * max(0.0, min(1.0, 2 * x + 1))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value, rounded to the 4th decimal place\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to the 4th decimal place.\n    \"\"\"\n    if x >= 0:\n        return round(math.log(1 + math.exp(x)), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rho = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    obj = np.sum(clipped_rho * A) - beta * np.sum(pi_theta_ref * np.log(pi_theta_ref / pi_theta_old))\n    return round(obj, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    return round(np.swish(x), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * (np.exp(x) - 1), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    num_features = X.shape[1]\n    num_classes = np.unique(y).shape[0]\n    W = np.random.randn(num_classes, num_features)\n    losses = []\n    for iteration in range(iterations):\n        scores = X @ W\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        num_samples = y.shape[0]\n        y_onehot = np.zeros((num_samples, num_classes))\n        y_onehot[np.arange(num_samples), y] = 1\n        loss = -np.mean(np.sum(y_onehot * np.log(probs + 1e-09), axis=1))\n        losses.append(round(loss, 4))\n        dscores = probs - y_onehot\n        dW = X.T @ dscores\n        W += -learning_rate * dW\n    B = round(W.tolist(), 4)\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    X (np.ndarray): Input features (shape: (n_samples, n_features))\n    y (np.ndarray): Target labels (shape: (n_samples,))\n    learning_rate (float): Learning rate for gradient descent\n    iterations (int): Number of iterations for training\n    \n    Returns:\n    tuple: (coefficients, loss_history)\n        coefficients (list[float]): Optimized model parameters (including intercept)\n        loss_history (list[float]): Loss values at each iteration (rounded to 4 decimal places)\n    \"\"\"\n    n_features = X.shape[1]\n    weights = np.zeros(n_features + 1)\n    n_samples = X.shape[0]\n    loss_history = []\n    for i in range(iterations):\n        z = np.dot(X, weights[1:]) + weights[0]\n        predictions = 1 / (1 + np.exp(-z))\n        error = predictions - y\n        gradient_weights = np.dot(X.T, error) / n_samples\n        gradient_bias = np.sum(error) / n_samples\n        weights[1:] -= learning_rate * gradient_weights\n        weights[0] -= learning_rate * gradient_bias\n        loss = -1 / n_samples * np.sum(y * np.log(predictions) + (1 - y) * np.log(1 - predictions))\n        loss_history.append(round(loss, 4))\n    return (weights.tolist(), loss_history)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Parameters:\n    - Q: Query matrix (batch_size x seq_len x d_k)\n    - K: Key matrix (batch_size x seq_len x d_k)\n    - V: Value matrix (batch_size x seq_len x d_v)\n    - mask: Attention mask (batch_size x seq_len x seq_len), where 0 indicates valid positions and -inf indicates invalid ones\n    \n    Returns:\n    - Output of masked self-attention (batch_size x seq_len x d_v)\n    \"\"\"\n    attn_scores = np.dot(Q, K.T)\n    attn_scores = attn_scores + mask\n    attn_weights = np.exp(attn_scores) / np.sum(np.exp(attn_scores), axis=2, keepdims=True)\n    output = np.dot(attn_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    Uses entropy to quantify the diversity of colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = {}\n    for color in apples:\n        color_counts[color] = color_counts.get(color, 0) + 1\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    entropy = 0.0\n    for p in probabilities:\n        if p > 0:\n            entropy -= p * math.log2(p)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=2, keepdims=True)\n    variance = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_normalized = gamma[:, np.newaxis, np.newaxis] * X_normalized + beta[:, np.newaxis, np.newaxis]\n    return np.round(X_normalized, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    if not isinstance(reference, list):\n        reference = reference.split()\n    if not isinstance(candidate, list):\n        candidate = candidate.split()\n    ref_counter = Counter(reference)\n    cand_counter = Counter(candidate)\n    common = ref_counter & cand_counter\n    precision = sum(common.values()) / len(candidate)\n    recall = sum(common.values()) / len(reference)\n    precision = max(precision, 0.0)\n    recall = max(recall, 0.0)\n    f_mean = (1 + beta) * (precision * recall) / (beta * precision + recall)\n    length_diff = abs(len(reference) - len(candidate))\n    penalty = gamma * (length_diff / max(len(reference), len(candidate)))\n    meteor = alpha * f_mean - penalty\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) between two events.\n    \n    PMI is defined as:\n    PMI = log2( (joint_counts / total_samples) / ( (total_counts_x / total_samples) * (total_counts_y / total_samples) ) )\n    \n    Parameters:\n    - joint_counts: int, the number of times both events occur together.\n    - total_counts_x: int, the total number of occurrences of event X.\n    - total_counts_y: int, the total number of occurrences of event Y.\n    - total_samples: int, the total number of samples (or observations).\n    \n    Returns:\n    - float: The computed PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    epsilon = 1e-12\n    p_xy = max(p_xy, epsilon)\n    p_x = max(p_x, epsilon)\n    p_y = max(p_y, epsilon)\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(num - min_val) / (max_val - min_val) for num in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    out1 = np.dot(x, w1)\n    out1 = np.maximum(0, out1)\n    out2 = np.dot(out1, w2)\n    out = out2 + x\n    out = np.maximum(0, out)\n    return np.round(out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n    \n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n    \n    Returns:\n    np.ndarray: Output array of shape (channels,) where each element is the average\n                of the corresponding feature map.\n    \"\"\"\n    pooled = np.mean(x, axis=(0, 1))\n    return pooled"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(2, 3), keepdims=True)\n    var = np.var(X, axis=(2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    out = gamma[:, np.newaxis, np.newaxis, np.newaxis] * X_normalized + beta[:, np.newaxis, np.newaxis, np.newaxis]\n    return np.round(out, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of a polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    c (float): Coefficient of the polynomial term.\n    x (float): Point at which to evaluate the derivative.\n    n (float): Exponent of the polynomial term.\n    \n    Returns:\n    float: The value of the derivative at x, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    A = np.array(vectors)\n    Q = []\n    for i in range(len(A)):\n        v = A[i]\n        projected_v = np.zeros_like(v)\n        for q in Q:\n            projected_v += np.dot(v, q) * q\n        u = v - projected_v\n        if np.linalg.norm(u) < tol:\n            continue\n        q = u / np.linalg.norm(u)\n        Q.append(q.tolist())\n    return Q"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    cross = np.cross(a, b)\n    rounded_cross = np.round(cross, 4)\n    result = rounded_cross.tolist()\n    return result"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    n = len(A)\n    if len(b) != n:\n        return -1\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-09:\n        return -1\n    x = []\n    for i in range(n):\n        A_i = np.copy(A)\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return np.array(x).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or not p or (not q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc = np.sum(np.sqrt(p * q))\n    if bc == 0:\n        distance = 0.0\n    else:\n        distance = -np.log(bc) / 2\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = [a[i] + b[i] for i in range(len(a))]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        states = []\n        actions = []\n        rewards = []\n        for (state, action, reward) in episode:\n            states.append(state)\n            actions.append(action)\n            rewards.append(reward)\n        returns = []\n        discounted_return = 0.0\n        for t in reversed(range(len(rewards))):\n            discounted_return = rewards[t] + 0.99 * discounted_return\n            returns.insert(0, discounted_return)\n        policy_probs = np.exp(theta[states, actions]) / np.sum(np.exp(theta[states, actions]), axis=1, keepdims=True)\n        for t in range(len(states)):\n            gradient[states[t], actions[t]] += returns[t] * (np.log(policy_probs[t]) - np.log(1 - policy_probs[t]))\n    return np.round(gradient, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = 2 * d_in * d_out\n    moe_flops = k_active * d_in * d_out\n    efficiency_gain = (dense_flops - moe_flops) / dense_flops * 100\n    dense_flops_rounded = round(dense_flops, 1)\n    moe_flops_rounded = round(moe_flops, 1)\n    efficiency_gain_rounded = round(efficiency_gain, 1)\n    return {'dense_flops': dense_flops_rounded, 'moe_flops': moe_flops_rounded, 'efficiency_gain_percent': efficiency_gain_rounded}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    scores = X @ W_g + N @ W_noise\n    exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    top_k_indices = np.argsort(probs, axis=1)[:, -k:]\n    top_k_mask = np.zeros_like(probs)\n    for i in range(probs.shape[0]):\n        top_k_mask[i, top_k_indices[i]] = 1\n    probs_topk = probs * top_k_mask\n    probs_topk_rounded = np.round(probs_topk, 4)\n    return probs_topk_rounded.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gate_scores = np.dot(x, Wg)\n    gate_probs = np.exp(gate_scores) / np.sum(np.exp(gate_scores))\n    top_k_indices = np.argsort(gate_probs, axis=1)[:, -top_k:]\n    top_k_indices = np.stack([np.repeat(i, top_k) for i in range(gate_probs.shape[0])], axis=1)\n    top_k_indices = np.reshape(top_k_indices, (gate_probs.shape[0], top_k))\n    selected_experts = np.zeros((x.shape[0], top_k, x.shape[1]))\n    for i in range(x.shape[0]):\n        for j in range(top_k):\n            expert_index = top_k_indices[i, j]\n            selected_experts[i, j] = np.dot(x[i], We[expert_index])\n    output = np.mean(selected_experts, axis=1)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    group_size = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, group_size, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized * gamma[None, :, None, None, None] + beta[None, :, None, None, None]\n    X_final = X_normalized.reshape(B, C, H, W)\n    X_final_rounded = np.round(X_final, 4)\n    return X_final_rounded.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n\n    def d2f(x):\n        return 12 * x ** 2 - 18 * x\n    x = start_x\n    for i in range(max_iters):\n        grad = df(x)\n        hessian = d2f(x)\n        if abs(grad) < tolerance:\n            break\n        if hessian == 0:\n            break\n        x -= grad / hessian\n        if abs(x - start_x) < tolerance:\n            break\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    transformed = np.tanh(alpha * x + beta) * gamma\n    transformed_rounded = np.round(transformed, 4)\n    result = transformed_rounded.tolist()\n    return result"}
